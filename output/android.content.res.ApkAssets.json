{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/ApkAssets.java",
  "packageName" : "android.content.res",
  "className" : "ApkAssets",
  "comment" : "\n * The loaded, immutable, in-memory representation of an APK.\n *\n * The main implementation is native C++ and there is very little API surface exposed here. The APK\n * is mainly accessed via {@link AssetManager}.\n *\n * Since the ApkAssets instance is immutable, it can be reused and shared across AssetManagers,\n * making the creation of AssetManagers very cheap.\n * @hide\n ",
  "links" : [ "android.content.res.AssetManager" ],
  "variables" : [ {
    "name" : "PROPERTY_SYSTEM",
    "type" : "int",
    "comment" : "\n     * The apk assets contains framework resource values specified by the system.\n     * This allows some functions to filter out this package when computing what\n     * configurations/resources are available.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_DYNAMIC",
    "type" : "int",
    "comment" : "\n     * The apk assets is a shared library or was loaded as a shared library by force.\n     * The package ids of dynamic apk assets are assigned at runtime instead of compile time.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_LOADER",
    "type" : "int",
    "comment" : "\n     * The apk assets has been loaded dynamically using a {@link ResourcesProvider}.\n     * Loader apk assets overlay resources like RROs except they are not backed by an idmap.\n     ",
    "links" : [ "android.content.res.loader.ResourcesProvider" ]
  }, {
    "name" : "PROPERTY_OVERLAY",
    "type" : "int",
    "comment" : "\n     * The apk assets is a RRO.\n     * An RRO overlays resource values of its target package.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_DISABLE_INCREMENTAL_HARDENING",
    "type" : "int",
    "comment" : "\n     * The apk assets is owned by the application running in this process and incremental crash\n     * protections for this APK must be disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_ONLY_OVERLAYABLES",
    "type" : "int",
    "comment" : "\n     * The apk assets only contain the overlayable declarations information.\n     ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_APK",
    "type" : "int",
    "comment" : " The path used to load the apk assets represents an APK file. ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_IDMAP",
    "type" : "int",
    "comment" : " The path used to load the apk assets represents an idmap file. ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_ARSC",
    "type" : "int",
    "comment" : " The path used to load the apk assets represents an resources.arsc file. ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_DIR",
    "type" : "int",
    "comment" : " the path used to load the apk assets represents a directory. ",
    "links" : [ ]
  }, {
    "name" : "mNativePtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStringBlock",
    "type" : "StringBlock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAssets",
    "type" : "AssetsProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ApkAssets loadFromPath(@NonNull String path) throws IOException",
    "returnType" : "ApkAssets",
    "comment" : "\n     * Creates a new ApkAssets instance from the given path on disk.\n     *\n     * @param path The path to an APK on disk.\n     * @return a new instance of ApkAssets.\n     * @throws IOException if a disk I/O error or parsing error occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApkAssets loadFromPath(@NonNull String path, @PropertyFlags int flags) throws IOException",
    "returnType" : "ApkAssets",
    "comment" : "\n     * Creates a new ApkAssets instance from the given path on disk.\n     *\n     * @param path The path to an APK on disk.\n     * @param flags flags that change the behavior of loaded apk assets\n     * @return a new instance of ApkAssets.\n     * @throws IOException if a disk I/O error or parsing error occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApkAssets loadFromPath(@NonNull String path, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException",
    "returnType" : "ApkAssets",
    "comment" : "\n     * Creates a new ApkAssets instance from the given path on disk.\n     *\n     * @param path The path to an APK on disk.\n     * @param flags flags that change the behavior of loaded apk assets\n     * @param assets The assets provider that overrides the loading of file-based resources\n     * @return a new instance of ApkAssets.\n     * @throws IOException if a disk I/O error or parsing error occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApkAssets loadFromFd(@NonNull FileDescriptor fd, @NonNull String friendlyName, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException",
    "returnType" : "ApkAssets",
    "comment" : "\n     * Creates a new ApkAssets instance from the given file descriptor.\n     *\n     * Performs a dup of the underlying fd, so you must take care of still closing\n     * the FileDescriptor yourself (and can do that whenever you want).\n     *\n     * @param fd The FileDescriptor of an open, readable APK.\n     * @param friendlyName The friendly name used to identify this ApkAssets when logging.\n     * @param flags flags that change the behavior of loaded apk assets\n     * @param assets The assets provider that overrides the loading of file-based resources\n     * @return a new instance of ApkAssets.\n     * @throws IOException if a disk I/O error or parsing error occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApkAssets loadFromFd(@NonNull FileDescriptor fd, @NonNull String friendlyName, long offset, long length, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException",
    "returnType" : "ApkAssets",
    "comment" : "\n     * Creates a new ApkAssets instance from the given file descriptor.\n     *\n     * Performs a dup of the underlying fd, so you must take care of still closing\n     * the FileDescriptor yourself (and can do that whenever you want).\n     *\n     * @param fd The FileDescriptor of an open, readable APK.\n     * @param friendlyName The friendly name used to identify this ApkAssets when logging.\n     * @param offset The location within the file that the apk starts. This must be 0 if length is\n     *               {@link AssetFileDescriptor#UNKNOWN_LENGTH}.\n     * @param length The number of bytes of the apk, or {@link AssetFileDescriptor#UNKNOWN_LENGTH}\n     *               if it extends to the end of the file.\n     * @param flags flags that change the behavior of loaded apk assets\n     * @param assets The assets provider that overrides the loading of file-based resources\n     * @return a new instance of ApkAssets.\n     * @throws IOException if a disk I/O error or parsing error occurred.\n     ",
    "links" : [ "android.content.res.AssetFileDescriptor#UNKNOWN_LENGTH" ]
  }, {
    "name" : "public static ApkAssets loadOverlayFromPath(@NonNull String idmapPath, @PropertyFlags int flags) throws IOException",
    "returnType" : "ApkAssets",
    "comment" : "\n     * Creates a new ApkAssets instance from the IDMAP at idmapPath. The overlay APK path\n     * is encoded within the IDMAP.\n     *\n     * @param idmapPath Path to the IDMAP of an overlay APK.\n     * @param flags flags that change the behavior of loaded apk assets\n     * @return a new instance of ApkAssets.\n     * @throws IOException if a disk I/O error or parsing error occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApkAssets loadTableFromFd(@NonNull FileDescriptor fd, @NonNull String friendlyName, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException",
    "returnType" : "ApkAssets",
    "comment" : "\n     * Creates a new ApkAssets instance from the given file descriptor representing a resources.arsc\n     * for use with a {@link ResourcesProvider}.\n     *\n     * Performs a dup of the underlying fd, so you must take care of still closing\n     * the FileDescriptor yourself (and can do that whenever you want).\n     *\n     * @param fd The FileDescriptor of an open, readable resources.arsc.\n     * @param friendlyName The friendly name used to identify this ApkAssets when logging.\n     * @param flags flags that change the behavior of loaded apk assets\n     * @param assets The assets provider that overrides the loading of file-based resources\n     * @return a new instance of ApkAssets.\n     * @throws IOException if a disk I/O error or parsing error occurred.\n     ",
    "links" : [ "android.content.res.loader.ResourcesProvider" ]
  }, {
    "name" : "public static ApkAssets loadTableFromFd(@NonNull FileDescriptor fd, @NonNull String friendlyName, long offset, long length, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException",
    "returnType" : "ApkAssets",
    "comment" : "\n     * Creates a new ApkAssets instance from the given file descriptor representing a resources.arsc\n     * for use with a {@link ResourcesProvider}.\n     *\n     * Performs a dup of the underlying fd, so you must take care of still closing\n     * the FileDescriptor yourself (and can do that whenever you want).\n     *\n     * @param fd The FileDescriptor of an open, readable resources.arsc.\n     * @param friendlyName The friendly name used to identify this ApkAssets when logging.\n     * @param offset The location within the file that the table starts. This must be 0 if length is\n     *               {@link AssetFileDescriptor#UNKNOWN_LENGTH}.\n     * @param length The number of bytes of the table, or {@link AssetFileDescriptor#UNKNOWN_LENGTH}\n     *               if it extends to the end of the file.\n     * @param flags flags that change the behavior of loaded apk assets\n     * @param assets The assets provider that overrides the loading of file-based resources\n     * @return a new instance of ApkAssets.\n     * @throws IOException if a disk I/O error or parsing error occurred.\n     ",
    "links" : [ "android.content.res.AssetFileDescriptor#UNKNOWN_LENGTH", "android.content.res.loader.ResourcesProvider" ]
  }, {
    "name" : "public static ApkAssets loadFromDir(@NonNull String path, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException",
    "returnType" : "ApkAssets",
    "comment" : "\n     * Creates a new ApkAssets instance from the given directory path. The directory should have the\n     * file structure of an APK.\n     *\n     * @param path The path to a directory on disk.\n     * @param flags flags that change the behavior of loaded apk assets\n     * @param assets The assets provider that overrides the loading of file-based resources\n     * @return a new instance of ApkAssets.\n     * @throws IOException if a disk I/O error or parsing error occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApkAssets loadEmptyForLoader(@PropertyFlags int flags, @Nullable AssetsProvider assets)",
    "returnType" : "ApkAssets",
    "comment" : "\n     * Generates an entirely empty ApkAssets. Needed because the ApkAssets instance and presence\n     * is required for a lot of APIs, and it's easier to have a non-null reference rather than\n     * tracking a separate identifier.\n     *\n     * @param flags flags that change the behavior of loaded apk assets\n     * @param assets The assets provider that overrides the loading of file-based resources\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAssetPath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDebugName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " CharSequence getStringFromPool(int idx)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isForLoader()",
    "returnType" : "boolean",
    "comment" : " Returns whether this apk assets was loaded using a {@link ResourcesProvider}. ",
    "links" : [ "android.content.res.loader.ResourcesProvider" ]
  }, {
    "name" : "public AssetsProvider getAssetsProvider()",
    "returnType" : "AssetsProvider",
    "comment" : "\n     * Returns the assets provider that overrides the loading of assets present in this apk assets.\n     ",
    "links" : [ ]
  }, {
    "name" : "public XmlResourceParser openXml(@NonNull String fileName) throws IOException",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Retrieve a parser for a compiled XML file. This is associated with a single APK and\n     * <em>NOT</em> a full AssetManager. This means that shared-library references will not be\n     * dynamically assigned runtime package IDs.\n     *\n     * @param fileName The path to the file within the APK.\n     * @return An XmlResourceParser.\n     * @throws IOException if the file was not found or an error occurred retrieving it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OverlayableInfo getOverlayableInfo(String overlayableName) throws IOException",
    "returnType" : "OverlayableInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean definesOverlayable() throws IOException",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUpToDate()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns false if the underlying APK was changed since this ApkAssets was loaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this class and the contained {@link #mStringBlock}.\n     ",
    "links" : [ "#mStringBlock" ]
  }, {
    "name" : " void dump(PrintWriter pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeLoad(@FormatType int format, @NonNull String path, @PropertyFlags int flags, @Nullable AssetsProvider asset) throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeLoadEmpty(@PropertyFlags int flags, @Nullable AssetsProvider asset)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeLoadFd(@FormatType int format, @NonNull FileDescriptor fd, @NonNull String friendlyName, @PropertyFlags int flags, @Nullable AssetsProvider asset) throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeLoadFdOffsets(@FormatType int format, @NonNull FileDescriptor fd, @NonNull String friendlyName, long offset, long length, @PropertyFlags int flags, @Nullable AssetsProvider asset) throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDestroy(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetAssetPath(long ptr)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetDebugName(long ptr)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetStringBlock(long ptr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsUpToDate(long ptr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeOpenXml(long ptr, @NonNull String fileName) throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native OverlayableInfo nativeGetOverlayableInfo(long ptr, String overlayableName) throws IOException",
    "returnType" : "OverlayableInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeDefinesOverlayable(long ptr) throws IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ApkAssets loadFromPath(@NonNull String path) throws IOException", "public static ApkAssets loadFromPath(@NonNull String path, @PropertyFlags int flags) throws IOException", "public static ApkAssets loadFromPath(@NonNull String path, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException", "public static ApkAssets loadFromFd(@NonNull FileDescriptor fd, @NonNull String friendlyName, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException", "public static ApkAssets loadFromFd(@NonNull FileDescriptor fd, @NonNull String friendlyName, long offset, long length, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException", "public static ApkAssets loadOverlayFromPath(@NonNull String idmapPath, @PropertyFlags int flags) throws IOException", "public static ApkAssets loadTableFromFd(@NonNull FileDescriptor fd, @NonNull String friendlyName, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException", "public static ApkAssets loadTableFromFd(@NonNull FileDescriptor fd, @NonNull String friendlyName, long offset, long length, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException", "public static ApkAssets loadFromDir(@NonNull String path, @PropertyFlags int flags, @Nullable AssetsProvider assets) throws IOException", "public static ApkAssets loadEmptyForLoader(@PropertyFlags int flags, @Nullable AssetsProvider assets)", "public String getAssetPath()", "public String getDebugName()", " CharSequence getStringFromPool(int idx)", "public boolean isForLoader()", "public AssetsProvider getAssetsProvider()", "public XmlResourceParser openXml(@NonNull String fileName) throws IOException", "public OverlayableInfo getOverlayableInfo(String overlayableName) throws IOException", "public boolean definesOverlayable() throws IOException", "public boolean isUpToDate()", "public String toString()", "protected void finalize() throws Throwable", "public void close()", " void dump(PrintWriter pw, String prefix)", "private static native long nativeLoad(@FormatType int format, @NonNull String path, @PropertyFlags int flags, @Nullable AssetsProvider asset) throws IOException", "private static native long nativeLoadEmpty(@PropertyFlags int flags, @Nullable AssetsProvider asset)", "private static native long nativeLoadFd(@FormatType int format, @NonNull FileDescriptor fd, @NonNull String friendlyName, @PropertyFlags int flags, @Nullable AssetsProvider asset) throws IOException", "private static native long nativeLoadFdOffsets(@FormatType int format, @NonNull FileDescriptor fd, @NonNull String friendlyName, long offset, long length, @PropertyFlags int flags, @Nullable AssetsProvider asset) throws IOException", "private static native void nativeDestroy(long ptr)", "private static native String nativeGetAssetPath(long ptr)", "private static native String nativeGetDebugName(long ptr)", "private static native long nativeGetStringBlock(long ptr)", "private static native boolean nativeIsUpToDate(long ptr)", "private static native long nativeOpenXml(long ptr, @NonNull String fileName) throws IOException", "private static native OverlayableInfo nativeGetOverlayableInfo(long ptr, String overlayableName) throws IOException", "private static native boolean nativeDefinesOverlayable(long ptr) throws IOException" ],
  "variableNames" : [ "PROPERTY_SYSTEM", "PROPERTY_DYNAMIC", "PROPERTY_LOADER", "PROPERTY_OVERLAY", "PROPERTY_DISABLE_INCREMENTAL_HARDENING", "PROPERTY_ONLY_OVERLAYABLES", "FORMAT_APK", "FORMAT_IDMAP", "FORMAT_ARSC", "FORMAT_DIR", "mNativePtr", "mStringBlock", "mFlags", "mAssets" ]
}