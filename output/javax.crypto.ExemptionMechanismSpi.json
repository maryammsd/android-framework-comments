{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/ExemptionMechanismSpi.java",
  "packageName" : "javax.crypto",
  "className" : "ExemptionMechanismSpi",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected abstract int engineGetOutputSize(int inputLen)",
    "returnType" : "int",
    "comment" : "\n     * Returns the length in bytes that an output buffer would need to be in\n     * order to hold the result of the next\n     * {@link #engineGenExemptionBlob(byte[], int) engineGenExemptionBlob}\n     * operation, given the input length <code>inputLen</code> (in bytes).\n     *\n     * <p>The actual output length of the next\n     * {@link #engineGenExemptionBlob(byte[], int) engineGenExemptionBlob}\n     * call may be smaller than the length returned by this method.\n     *\n     * @param inputLen the input length (in bytes)\n     *\n     * @return the required output buffer size (in bytes)\n     ",
    "links" : [ "#engineGenExemptionBlob(byte" ]
  }, {
    "name" : "protected abstract void engineInit(Key key) throws InvalidKeyException, ExemptionMechanismException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this exemption mechanism with a key.\n     *\n     * <p>If this exemption mechanism requires any algorithm parameters\n     * that cannot be derived from the given <code>key</code>, the underlying\n     * exemption mechanism implementation is supposed to generate the required\n     * parameters itself (using provider-specific default values); in the case\n     * that algorithm parameters must be specified by the caller, an\n     * <code>InvalidKeyException</code> is raised.\n     *\n     * @param key the key for this exemption mechanism\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * this exemption mechanism.\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of initializing.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineInit(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException, ExemptionMechanismException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this exemption mechanism with a key and a set of algorithm\n     * parameters.\n     *\n     * <p>If this exemption mechanism requires any algorithm parameters and\n     * <code>params</code> is null, the underlying exemption mechanism\n     * implementation is supposed to generate the required parameters\n     * itself (using provider-specific default values); in the case that\n     * algorithm parameters must be specified by the caller, an\n     * <code>InvalidAlgorithmParameterException</code> is raised.\n     *\n     * @param key the key for this exemption mechanism\n     * @param params the algorithm parameters\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * this exemption mechanism.\n     * @exception InvalidAlgorithmParameterException if the given algorithm\n     * parameters are inappropriate for this exemption mechanism.\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of initializing.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineInit(Key key, AlgorithmParameters params) throws InvalidKeyException, InvalidAlgorithmParameterException, ExemptionMechanismException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this exemption mechanism with a key and a set of algorithm\n     * parameters.\n     *\n     * <p>If this exemption mechanism requires any algorithm parameters\n     * and <code>params</code> is null, the underlying exemption mechanism\n     * implementation is supposed to generate the required parameters\n     * itself (using provider-specific default values); in the case that\n     * algorithm parameters must be specified by the caller, an\n     * <code>InvalidAlgorithmParameterException</code> is raised.\n     *\n     * @param key the key for this exemption mechanism\n     * @param params the algorithm parameters\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * this exemption mechanism.\n     * @exception InvalidAlgorithmParameterException if the given algorithm\n     * parameters are inappropriate for this exemption mechanism.\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of initializing.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract byte[] engineGenExemptionBlob() throws ExemptionMechanismException",
    "returnType" : "byte[]",
    "comment" : "\n     * Generates the exemption mechanism key blob.\n     *\n     * @return the new buffer with the result key blob.\n     *\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of generating.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int engineGenExemptionBlob(byte[] output, int outputOffset) throws ShortBufferException, ExemptionMechanismException",
    "returnType" : "int",
    "comment" : "\n     * Generates the exemption mechanism key blob, and stores the result in\n     * the <code>output</code> buffer, starting at <code>outputOffset</code>\n     * inclusive.\n     *\n     * <p>If the <code>output</code> buffer is too small to hold the result,\n     * a <code>ShortBufferException</code> is thrown. In this case, repeat this\n     * call with a larger output buffer. Use\n     * {@link #engineGetOutputSize(int) engineGetOutputSize} to determine\n     * how big the output buffer should be.\n     *\n     * @param output the buffer for the result\n     * @param outputOffset the offset in <code>output</code> where the result\n     * is stored\n     *\n     * @return the number of bytes stored in <code>output</code>\n     *\n     * @exception ShortBufferException if the given output buffer is too small\n     * to hold the result.\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of generating.\n     ",
    "links" : [ "#engineGetOutputSize(int)" ]
  } ],
  "methodNames" : [ "protected abstract int engineGetOutputSize(int inputLen)", "protected abstract void engineInit(Key key) throws InvalidKeyException, ExemptionMechanismException", "protected abstract void engineInit(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException, ExemptionMechanismException", "protected abstract void engineInit(Key key, AlgorithmParameters params) throws InvalidKeyException, InvalidAlgorithmParameterException, ExemptionMechanismException", "protected abstract byte[] engineGenExemptionBlob() throws ExemptionMechanismException", "protected abstract int engineGenExemptionBlob(byte[] output, int outputOffset) throws ShortBufferException, ExemptionMechanismException" ],
  "variableNames" : [ ]
}