{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/TimeUtils.java",
  "packageName" : "android.util",
  "className" : "TimeUtils",
  "comment" : "\n * A class containing utility methods related to time zones.\n ",
  "variables" : [ {
    "name" : "sLoggingFormat",
    "type" : "SimpleDateFormat",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "sDumpDateFormat",
    "type" : "SimpleDateFormat",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HUNDRED_DAY_FIELD_LEN",
    "type" : "int",
    "comment" : " @hide Field length that can hold 999 days of time ",
    "links" : [ ]
  }, {
    "name" : "SECONDS_PER_MINUTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDS_PER_HOUR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDS_PER_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NANOS_PER_MS",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "sFormatSync",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFormatStr",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTmpFormatStr",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static java.util.TimeZone getTimeZone(int offset, boolean dst, long when, String country)",
    "returnType" : "java.util.TimeZone",
    "comment" : "\n     * Tries to return a time zone that would have had the specified offset\n     * and DST value at the specified moment in the specified country.\n     * Returns null if no suitable zone could be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static android.icu.util.TimeZone getIcuTimeZone(int offsetMillis, boolean isDst, long whenMillis, String countryIso)",
    "returnType" : "android.icu.util.TimeZone",
    "comment" : "\n     * Returns a frozen ICU time zone that has / would have had the specified offset and DST value\n     * at the specified moment in the specified country. Returns null if no suitable zone could be\n     * found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<String> getTimeZoneIdsForCountryCode(@NonNull String countryCode)",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns time zone IDs for time zones known to be associated with a country.\n     *\n     * <p>The list returned may be different from other on-device sources like\n     * {@link android.icu.util.TimeZone#getRegion(String)} as it can be curated to avoid\n     * contentious or obsolete mappings.\n     *\n     * @param countryCode the ISO 3166-1 alpha-2 code for the country as can be obtained using\n     *     {@link java.util.Locale#getCountry()}\n     * @return IDs that can be passed to {@link java.util.TimeZone#getTimeZone(String)} or similar\n     *     methods, or {@code null} if the countryCode is unrecognized\n     ",
    "links" : [ "android.icu.util.TimeZone#getRegion", "java.util.Locale#getCountry", "java.util.TimeZone#getTimeZone" ]
  }, {
    "name" : "public static String getTimeZoneDatabaseVersion()",
    "returnType" : "String",
    "comment" : "\n     * Returns a String indicating the version of the time zone database currently\n     * in use.  The format of the string is dependent on the underlying time zone\n     * database implementation, but will typically contain the year in which the database\n     * was updated plus a letter from a to z indicating changes made within that year.\n     *\n     * <p>Time zone database updates should be expected to occur periodically due to\n     * political and legal changes that cannot be anticipated in advance.  Therefore,\n     * when computing the UTC time for a future event, applications should be aware that\n     * the results may differ following a time zone database update.  This method allows\n     * applications to detect that a database change has occurred, and to recalculate any\n     * cached times accordingly.\n     *\n     * <p>The time zone database may be assumed to change only when the device runtime\n     * is restarted.  Therefore, it is not necessary to re-query the database version\n     * during the lifetime of an activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int accumField(int amt, int suffix, boolean always, int zeropad)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int printFieldLocked(char[] formatStr, int amt, char suffix, int pos, boolean always, int zeropad)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int formatDurationLocked(long duration, int fieldLen)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void formatDuration(long duration, StringBuilder builder)",
    "returnType" : "void",
    "comment" : " @hide Just for debugging; not internationalized. ",
    "links" : [ ]
  }, {
    "name" : "public static void formatDuration(long duration, StringBuilder builder, int fieldLen)",
    "returnType" : "void",
    "comment" : " @hide Just for debugging; not internationalized. ",
    "links" : [ ]
  }, {
    "name" : "public static void formatDuration(long duration, PrintWriter pw, int fieldLen)",
    "returnType" : "void",
    "comment" : " @hide Just for debugging; not internationalized. ",
    "links" : [ ]
  }, {
    "name" : "public static String formatDuration(long duration)",
    "returnType" : "String",
    "comment" : " @hide Just for debugging; not internationalized. ",
    "links" : [ ]
  }, {
    "name" : "public static void formatDuration(long duration, PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide Just for debugging; not internationalized. ",
    "links" : [ ]
  }, {
    "name" : "public static void formatDuration(long time, long now, PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide Just for debugging; not internationalized. ",
    "links" : [ ]
  }, {
    "name" : "public static String formatUptime(long time)",
    "returnType" : "String",
    "comment" : " @hide Just for debugging; not internationalized. ",
    "links" : [ ]
  }, {
    "name" : "public static String formatRealtime(long time)",
    "returnType" : "String",
    "comment" : " @hide Just for debugging; not internationalized. ",
    "links" : [ ]
  }, {
    "name" : "public static String formatTime(long time, long referenceTime)",
    "returnType" : "String",
    "comment" : " @hide Just for debugging; not internationalized. ",
    "links" : [ ]
  }, {
    "name" : "public static String logTimeOfDay(long millis)",
    "returnType" : "String",
    "comment" : "\n     * Convert a System.currentTimeMillis() value to a time of day value like\n     * that printed in logs. MM-DD HH:MM:SS.MMM\n     *\n     * @param millis since the epoch (1/1/1970)\n     * @return String representation of the time.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String formatForLogging(long millis)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpTime(PrintWriter pw, long time)",
    "returnType" : "void",
    "comment" : "\n     * Dump a currentTimeMillis style timestamp for dumpsys.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isTimeBetween(@NonNull LocalTime reference, @NonNull LocalTime start, @NonNull LocalTime end)",
    "returnType" : "boolean",
    "comment" : "\n     * This method is used to find if a clock time is inclusively between two other clock times\n     * @param reference The time of the day we want check if it is between start and end\n     * @param start The start time reference\n     * @param end The end time\n     * @return true if the reference time is between the two clock times, and false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpTimeWithDelta(PrintWriter pw, long time, long now)",
    "returnType" : "void",
    "comment" : "\n     * Dump a currentTimeMillis style timestamp for dumpsys, with the delta time from now.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sLoggingFormat", "sDumpDateFormat", "HUNDRED_DAY_FIELD_LEN", "SECONDS_PER_MINUTE", "SECONDS_PER_HOUR", "SECONDS_PER_DAY", "NANOS_PER_MS", "sFormatSync", "sFormatStr", "sTmpFormatStr" ],
  "methodNames" : [ "public static java.util.TimeZone getTimeZone(int offset, boolean dst, long when, String country)", "private static android.icu.util.TimeZone getIcuTimeZone(int offsetMillis, boolean isDst, long whenMillis, String countryIso)", "public static List<String> getTimeZoneIdsForCountryCode(@NonNull String countryCode)", "public static String getTimeZoneDatabaseVersion()", "private static int accumField(int amt, int suffix, boolean always, int zeropad)", "private static int printFieldLocked(char[] formatStr, int amt, char suffix, int pos, boolean always, int zeropad)", "private static int formatDurationLocked(long duration, int fieldLen)", "public static void formatDuration(long duration, StringBuilder builder)", "public static void formatDuration(long duration, StringBuilder builder, int fieldLen)", "public static void formatDuration(long duration, PrintWriter pw, int fieldLen)", "public static String formatDuration(long duration)", "public static void formatDuration(long duration, PrintWriter pw)", "public static void formatDuration(long time, long now, PrintWriter pw)", "public static String formatUptime(long time)", "public static String formatRealtime(long time)", "public static String formatTime(long time, long referenceTime)", "public static String logTimeOfDay(long millis)", "public static String formatForLogging(long millis)", "public static void dumpTime(PrintWriter pw, long time)", "public static boolean isTimeBetween(@NonNull LocalTime reference, @NonNull LocalTime start, @NonNull LocalTime end)", "public static void dumpTimeWithDelta(PrintWriter pw, long time, long now)" ]
}