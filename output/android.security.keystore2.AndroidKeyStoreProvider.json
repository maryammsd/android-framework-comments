{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore2/AndroidKeyStoreProvider.java",
  "packageName" : "android.security.keystore2",
  "className" : "AndroidKeyStoreProvider",
  "comment" : "\n * A provider focused on providing JCA interfaces for the Android KeyStore.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PROVIDER_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PACKAGE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DESEDE_SYSTEM_PROPERTY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ED25519_OID",
    "type" : "String",
    "comment" : " Conscrypt returns the Ed25519 OID as the JCA key algorithm.",
    "links" : [ ]
  }, {
    "name" : "X25519_ALIAS",
    "type" : "String",
    "comment" : " Conscrypt returns \"XDH\" as the X25519 JCA key algorithm.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void install()",
    "returnType" : "void",
    "comment" : "\n     * Installs a new instance of this provider (and the\n     * {@link AndroidKeyStoreBCWorkaroundProvider}).\n     * @hide\n     ",
    "links" : [ "android.security.keystore2.AndroidKeyStoreBCWorkaroundProvider" ]
  }, {
    "name" : "private void putSecretKeyFactoryImpl(String algorithm)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void putKeyFactoryImpl(String algorithm)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long getKeyStoreOperationHandle(Object cryptoPrimitive)",
    "returnType" : "long",
    "comment" : "\n     * Gets the Android KeyStore operation handle corresponding to the provided JCA crypto\n     * primitive.\n     *\n     * <p>The following primitives are supported: {@link Cipher}, {@link Signature} and {@link Mac}.\n     *\n     * @return Android KeyStore operation handle or {@code 0} if the provided primitive's Android\n     *         KeyStore operation is not in progress.\n     *\n     * @throws IllegalArgumentException if the provided primitive is not supported or is not backed\n     *         by AndroidKeyStore provider.\n     * @throws IllegalStateException if the provided primitive is not initialized.\n     * @hide\n     ",
    "links" : [ "java.security.Signature", "javax.crypto.Mac", "javax.crypto.Cipher" ]
  }, {
    "name" : " static AndroidKeyStorePublicKey makeAndroidKeyStorePublicKeyFromKeyEntryResponse(@NonNull KeyDescriptor descriptor, @NonNull KeyMetadata metadata, @NonNull KeyStoreSecurityLevel iSecurityLevel, int algorithm) throws UnrecoverableKeyException",
    "returnType" : "AndroidKeyStorePublicKey",
    "comment" : "\n     * This helper function gets called if the key loaded from the keystore daemon\n     * is for an asymmetric algorithm. It constructs an instance of {@link AndroidKeyStorePublicKey}\n     * which implements {@link PublicKey}.\n     *\n     * @param descriptor The original key descriptor that was used to load the key.\n     *\n     * @param metadata The key metadata which includes the public key material, a reference to the\n     *                 stored private key material, the key characteristics.\n     * @param iSecurityLevel A binder interface that allows using the private key.\n     * @param algorithm Must indicate EC or RSA.\n     * @return AndroidKeyStorePublicKey\n     * @throws UnrecoverableKeyException\n     * @hide\n     ",
    "links" : [ "android.security.keystore2.AndroidKeyStorePublicKey", "java.security.PublicKey" ]
  }, {
    "name" : "public static AndroidKeyStorePublicKey loadAndroidKeyStorePublicKeyFromKeystore(@NonNull KeyStore2 keyStore, @NonNull String privateKeyAlias, int namespace) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "AndroidKeyStorePublicKey",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public static KeyPair loadAndroidKeyStoreKeyPairFromKeystore(@NonNull KeyStore2 keyStore, @NonNull KeyDescriptor descriptor) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "KeyPair",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public static AndroidKeyStorePrivateKey loadAndroidKeyStorePrivateKeyFromKeystore(@NonNull KeyStore2 keyStore, @NonNull String privateKeyAlias, int namespace) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "AndroidKeyStorePrivateKey",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public static SecretKey loadAndroidKeyStoreSecretKeyFromKeystore(@NonNull KeyStore2 keyStore, @NonNull KeyDescriptor descriptor) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "SecretKey",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "private static AndroidKeyStoreSecretKey makeAndroidKeyStoreSecretKeyFromKeyEntryResponse(@NonNull KeyDescriptor descriptor, @NonNull KeyEntryResponse response, int algorithm, int digest) throws UnrecoverableKeyException",
    "returnType" : "AndroidKeyStoreSecretKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AndroidKeyStoreKey loadAndroidKeyStoreKeyFromKeystore(@NonNull KeyStore2 keyStore, @NonNull String alias, int namespace) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "AndroidKeyStoreKey",
    "comment" : "\n     * Loads an an AndroidKeyStoreKey from the AndroidKeyStore backend.\n     *\n     * @param keyStore The keystore2 backend.\n     * @param alias The alias of the key in the Keystore database.\n     * @param namespace The a Keystore namespace. This is used by system api only to request\n     *         Android system specific keystore namespace, which can be configured\n     *         in the device's SEPolicy. Third party apps and most system components\n     *         set this parameter to -1 to indicate their application specific namespace.\n     *         See <a href=\"https://source.android.com/security/keystore#access-control\">\n     *             Keystore 2.0 access control</a>\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "private static AndroidKeyStoreKey loadAndroidKeyStoreKeyFromKeystore(@NonNull KeyStore2 keyStore, @NonNull KeyDescriptor descriptor) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "AndroidKeyStoreKey",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void install()", "private void putSecretKeyFactoryImpl(String algorithm)", "private void putKeyFactoryImpl(String algorithm)", "public static long getKeyStoreOperationHandle(Object cryptoPrimitive)", " static AndroidKeyStorePublicKey makeAndroidKeyStorePublicKeyFromKeyEntryResponse(@NonNull KeyDescriptor descriptor, @NonNull KeyMetadata metadata, @NonNull KeyStoreSecurityLevel iSecurityLevel, int algorithm) throws UnrecoverableKeyException", "public static AndroidKeyStorePublicKey loadAndroidKeyStorePublicKeyFromKeystore(@NonNull KeyStore2 keyStore, @NonNull String privateKeyAlias, int namespace) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "public static KeyPair loadAndroidKeyStoreKeyPairFromKeystore(@NonNull KeyStore2 keyStore, @NonNull KeyDescriptor descriptor) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "public static AndroidKeyStorePrivateKey loadAndroidKeyStorePrivateKeyFromKeystore(@NonNull KeyStore2 keyStore, @NonNull String privateKeyAlias, int namespace) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "public static SecretKey loadAndroidKeyStoreSecretKeyFromKeystore(@NonNull KeyStore2 keyStore, @NonNull KeyDescriptor descriptor) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "private static AndroidKeyStoreSecretKey makeAndroidKeyStoreSecretKeyFromKeyEntryResponse(@NonNull KeyDescriptor descriptor, @NonNull KeyEntryResponse response, int algorithm, int digest) throws UnrecoverableKeyException", "public static AndroidKeyStoreKey loadAndroidKeyStoreKeyFromKeystore(@NonNull KeyStore2 keyStore, @NonNull String alias, int namespace) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "private static AndroidKeyStoreKey loadAndroidKeyStoreKeyFromKeystore(@NonNull KeyStore2 keyStore, @NonNull KeyDescriptor descriptor) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException" ],
  "variableNames" : [ "PROVIDER_NAME", "PACKAGE_NAME", "DESEDE_SYSTEM_PROPERTY", "ED25519_OID", "X25519_ALIAS" ]
}