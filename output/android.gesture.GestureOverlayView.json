{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/gesture/GestureOverlayView.java",
  "packageName" : "android.gesture",
  "className" : "GestureOverlayView",
  "comment" : "\n * A transparent overlay for gesture input that can be placed on top of other\n * widgets or contain other widgets.\n *\n * @attr ref android.R.styleable#GestureOverlayView_eventsInterceptionEnabled\n * @attr ref android.R.styleable#GestureOverlayView_fadeDuration\n * @attr ref android.R.styleable#GestureOverlayView_fadeOffset\n * @attr ref android.R.styleable#GestureOverlayView_fadeEnabled\n * @attr ref android.R.styleable#GestureOverlayView_gestureStrokeWidth\n * @attr ref android.R.styleable#GestureOverlayView_gestureStrokeAngleThreshold\n * @attr ref android.R.styleable#GestureOverlayView_gestureStrokeLengthThreshold\n * @attr ref android.R.styleable#GestureOverlayView_gestureStrokeSquarenessThreshold\n * @attr ref android.R.styleable#GestureOverlayView_gestureStrokeType\n * @attr ref android.R.styleable#GestureOverlayView_gestureColor\n * @attr ref android.R.styleable#GestureOverlayView_orientation\n * @attr ref android.R.styleable#GestureOverlayView_uncertainGestureColor\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "GESTURE_STROKE_TYPE_SINGLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GESTURE_STROKE_TYPE_MULTIPLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_HORIZONTAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_VERTICAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FADE_ANIMATION_RATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GESTURE_RENDERING_ANTIALIAS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DITHER_FLAG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGesturePaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadeDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadeOffset",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadingStart",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadingHasStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadeEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCertainGestureColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUncertainGestureColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGestureStrokeWidth",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInvalidateExtraBorder",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGestureStrokeType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGestureStrokeLengthThreshold",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGestureStrokeSquarenessTreshold",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGestureStrokeAngleThreshold",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrientation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInvalidRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGestureVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurveEndX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurveEndY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTotalLength",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsGesturing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviousWasGesturing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterceptEvents",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsListeningForGestures",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResetGesture",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentGesture",
    "type" : "Gesture",
    "comment" : " current gesture",
    "links" : [ ]
  }, {
    "name" : "mStrokeBuffer",
    "type" : "ArrayList<GesturePoint>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnGestureListeners",
    "type" : "ArrayList<OnGestureListener>",
    "comment" : " TODO: Make this a list of WeakReferences",
    "links" : [ ]
  }, {
    "name" : "mOnGesturePerformedListeners",
    "type" : "ArrayList<OnGesturePerformedListener>",
    "comment" : " TODO: Make this a list of WeakReferences",
    "links" : [ ]
  }, {
    "name" : "mOnGesturingListeners",
    "type" : "ArrayList<OnGesturingListener>",
    "comment" : " TODO: Make this a list of WeakReferences",
    "links" : [ ]
  }, {
    "name" : "mHandleGestureActions",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsFadingOut",
    "type" : "boolean",
    "comment" : " fading out effect",
    "links" : [ ]
  }, {
    "name" : "mFadingAlpha",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "AccelerateDecelerateInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadingOut",
    "type" : "FadeOutRunnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<GesturePoint> getCurrentStroke()",
    "returnType" : "ArrayList<GesturePoint>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOrientation()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOrientation(int orientation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGestureColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUncertainGestureColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getUncertainGestureColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getGestureColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getGestureStrokeWidth()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGestureStrokeWidth(float gestureStrokeWidth)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getGestureStrokeType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGestureStrokeType(int gestureStrokeType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getGestureStrokeLengthThreshold()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGestureStrokeLengthThreshold(float gestureStrokeLengthThreshold)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getGestureStrokeSquarenessTreshold()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGestureStrokeSquarenessTreshold(float gestureStrokeSquarenessTreshold)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getGestureStrokeAngleThreshold()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGestureStrokeAngleThreshold(float gestureStrokeAngleThreshold)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEventsInterceptionEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEventsInterceptionEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFadeEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFadeEnabled(boolean fadeEnabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Gesture getGesture()",
    "returnType" : "Gesture",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGesture(Gesture gesture)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Path getGesturePath()",
    "returnType" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Path getGesturePath(Path path)",
    "returnType" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isGestureVisible()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGestureVisible(boolean visible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getFadeOffset()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFadeOffset(long fadeOffset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnGestureListener(OnGestureListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnGestureListener(OnGestureListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeAllOnGestureListeners()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnGesturePerformedListener(OnGesturePerformedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnGesturePerformedListener(OnGesturePerformedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeAllOnGesturePerformedListeners()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnGesturingListener(OnGesturingListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnGesturingListener(OnGesturingListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeAllOnGesturingListeners()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isGesturing()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setCurrentColor(int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Paint getGesturePaint()",
    "returnType" : "Paint",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setPaintAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear(boolean animated)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clear(boolean animated, boolean fireActionPerformed, boolean immediate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancelClearAnimation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancelGesture()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean processEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void touchDown(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Rect touchMove(MotionEvent event)",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void touchUp(MotionEvent event, boolean cancel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelGesture(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireOnGesturePerformed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init()", "public ArrayList<GesturePoint> getCurrentStroke()", "public int getOrientation()", "public void setOrientation(int orientation)", "public void setGestureColor(@ColorInt int color)", "public void setUncertainGestureColor(@ColorInt int color)", "public int getUncertainGestureColor()", "public int getGestureColor()", "public float getGestureStrokeWidth()", "public void setGestureStrokeWidth(float gestureStrokeWidth)", "public int getGestureStrokeType()", "public void setGestureStrokeType(int gestureStrokeType)", "public float getGestureStrokeLengthThreshold()", "public void setGestureStrokeLengthThreshold(float gestureStrokeLengthThreshold)", "public float getGestureStrokeSquarenessTreshold()", "public void setGestureStrokeSquarenessTreshold(float gestureStrokeSquarenessTreshold)", "public float getGestureStrokeAngleThreshold()", "public void setGestureStrokeAngleThreshold(float gestureStrokeAngleThreshold)", "public boolean isEventsInterceptionEnabled()", "public void setEventsInterceptionEnabled(boolean enabled)", "public boolean isFadeEnabled()", "public void setFadeEnabled(boolean fadeEnabled)", "public Gesture getGesture()", "public void setGesture(Gesture gesture)", "public Path getGesturePath()", "public Path getGesturePath(Path path)", "public boolean isGestureVisible()", "public void setGestureVisible(boolean visible)", "public long getFadeOffset()", "public void setFadeOffset(long fadeOffset)", "public void addOnGestureListener(OnGestureListener listener)", "public void removeOnGestureListener(OnGestureListener listener)", "public void removeAllOnGestureListeners()", "public void addOnGesturePerformedListener(OnGesturePerformedListener listener)", "public void removeOnGesturePerformedListener(OnGesturePerformedListener listener)", "public void removeAllOnGesturePerformedListeners()", "public void addOnGesturingListener(OnGesturingListener listener)", "public void removeOnGesturingListener(OnGesturingListener listener)", "public void removeAllOnGesturingListeners()", "public boolean isGesturing()", "private void setCurrentColor(int color)", "public Paint getGesturePaint()", "public void draw(Canvas canvas)", "private void setPaintAlpha(int alpha)", "public void clear(boolean animated)", "private void clear(boolean animated, boolean fireActionPerformed, boolean immediate)", "public void cancelClearAnimation()", "public void cancelGesture()", "protected void onDetachedFromWindow()", "public boolean dispatchTouchEvent(MotionEvent event)", "private boolean processEvent(MotionEvent event)", "private void touchDown(MotionEvent event)", "private Rect touchMove(MotionEvent event)", "private void touchUp(MotionEvent event, boolean cancel)", "private void cancelGesture(MotionEvent event)", "private void fireOnGesturePerformed()" ],
  "variableNames" : [ "GESTURE_STROKE_TYPE_SINGLE", "GESTURE_STROKE_TYPE_MULTIPLE", "ORIENTATION_HORIZONTAL", "ORIENTATION_VERTICAL", "FADE_ANIMATION_RATE", "GESTURE_RENDERING_ANTIALIAS", "DITHER_FLAG", "mGesturePaint", "mFadeDuration", "mFadeOffset", "mFadingStart", "mFadingHasStarted", "mFadeEnabled", "mCurrentColor", "mCertainGestureColor", "mUncertainGestureColor", "mGestureStrokeWidth", "mInvalidateExtraBorder", "mGestureStrokeType", "mGestureStrokeLengthThreshold", "mGestureStrokeSquarenessTreshold", "mGestureStrokeAngleThreshold", "mOrientation", "mInvalidRect", "mPath", "mGestureVisible", "mX", "mY", "mCurveEndX", "mCurveEndY", "mTotalLength", "mIsGesturing", "mPreviousWasGesturing", "mInterceptEvents", "mIsListeningForGestures", "mResetGesture", "mCurrentGesture", "mStrokeBuffer", "mOnGestureListeners", "mOnGesturePerformedListeners", "mOnGesturingListeners", "mHandleGestureActions", "mIsFadingOut", "mFadingAlpha", "mInterpolator", "mFadingOut" ]
}