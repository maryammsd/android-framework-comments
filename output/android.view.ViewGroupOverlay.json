{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ViewGroupOverlay.java",
  "packageName" : "android.view",
  "className" : "ViewGroupOverlay",
  "comment" : "\n * A group overlay is an extra layer that sits on top of a ViewGroup\n * (the \"host view\") which is drawn after all other content in that view\n * (including the view group's children). Interaction with the overlay\n * layer is done by adding and removing views and drawables.\n *\n * <p>ViewGroupOverlay is a subclass of {@link ViewOverlay}, adding the ability to\n * manage views for overlays on ViewGroups, in addition to the drawable\n * support in ViewOverlay.</p>\n *\n * @see ViewGroup#getOverlay()\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void add(@NonNull View view)",
    "returnType" : "void",
    "comment" : "\n     * Adds a {@code View} to the overlay. The bounds of the added view should be\n     * relative to the host view. Any view added to the overlay should be\n     * removed when it is no longer needed or no longer visible.\n     *\n     * <p>Views in the overlay are visual-only; they do not receive input\n     * events and do not participate in focus traversal. Overlay views\n     * are intended to be transient, such as might be needed by a temporary\n     * animation effect.</p>\n     *\n     * <p>If the view has a parent, the view will be removed from that parent\n     * before being added to the overlay. Also, if that parent is attached\n     * in the current view hierarchy, the view will be repositioned\n     * such that it is in the same relative location inside the activity. For\n     * example, if the view's current parent lies 100 pixels to the right\n     * and 200 pixels down from the origin of the overlay's\n     * host view, then the view will be offset by (100, 200).</p>\n     *\n     * <p>{@code View}s added with this API will be drawn in the order they were\n     * added. Drawing of the overlay views will happen before drawing of any of the\n     * {@code Drawable}s added with {@link #add(Drawable)} API even if a call to\n     * this API happened after the call to {@link #add(Drawable)}.</p>\n     *\n     * <p>Passing <code>null</code> parameter will result in an\n     * {@link IllegalArgumentException} being thrown.</p>\n     *\n     * @param view The {@code View} to be added to the overlay. The added view will be\n     * drawn when the overlay is drawn.\n     * @see #remove(View)\n     * @see ViewOverlay#add(Drawable)\n     ",
    "links" : [ "#add(Drawable)", "IllegalArgumentException" ]
  }, {
    "name" : "public void remove(@NonNull View view)",
    "returnType" : "void",
    "comment" : "\n     * Removes the specified {@code View} from the overlay. Passing <code>null</code> parameter\n     * will result in an {@link IllegalArgumentException} being thrown.\n     *\n     * @param view The {@code View} to be removed from the overlay.\n     * @see #add(View)\n     * @see ViewOverlay#remove(Drawable)\n     ",
    "links" : [ "IllegalArgumentException" ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public void add(@NonNull View view)", "public void remove(@NonNull View view)" ]
}