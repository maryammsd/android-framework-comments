{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/SharedElementCallback.java",
  "packageName" : "android.app",
  "className" : "SharedElementCallback",
  "comment" : "\n * Listener provided in\n * {@link Activity#setEnterSharedElementCallback(SharedElementCallback)} and\n * {@link Activity#setExitSharedElementCallback(SharedElementCallback)} as well as\n * {@link Fragment#setEnterSharedElementCallback(SharedElementCallback)} and\n * {@link Fragment#setExitSharedElementCallback(SharedElementCallback)}\n * to monitor the Shared element transitions. The events can be used to customize Activity\n * and Fragment Transition behavior.\n ",
  "links" : [ "android.app.Fragment#setEnterSharedElementCallback(SharedElementCallback)", "android.app.Activity#setExitSharedElementCallback(SharedElementCallback)", "android.app.Fragment#setExitSharedElementCallback(SharedElementCallback)", "android.app.Activity#setEnterSharedElementCallback(SharedElementCallback)" ],
  "variables" : [ {
    "name" : "mTempMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_SNAPSHOT_BITMAP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_SNAPSHOT_HARDWARE_BUFFER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_SNAPSHOT_COLOR_SPACE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_SNAPSHOT_IMAGE_SCALETYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_SNAPSHOT_IMAGE_MATRIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NULL_CALLBACK",
    "type" : "SharedElementCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onSharedElementStart(List<String> sharedElementNames, List<View> sharedElements, List<View> sharedElementSnapshots)",
    "returnType" : "void",
    "comment" : "\n     * In Activity Transitions, onSharedElementStart is called immediately before\n     * capturing the start of the shared element state on enter and reenter transitions and\n     * immediately before capturing the end of the shared element state for exit and return\n     * transitions.\n     * <p>\n     * In Fragment Transitions, onSharedElementStart is called immediately before capturing the\n     * start state of all shared element transitions.\n     * <p>\n     * This call can be used to adjust the transition start state by modifying the shared\n     * element Views. Note that no layout step will be executed between onSharedElementStart\n     * and the transition state capture.\n     * <p>\n     * For Activity Transitions, any changes made in {@link #onSharedElementEnd(List, List, List)}\n     * that are not updated during by layout should be corrected in onSharedElementStart for exit and\n     * return transitions. For example, rotation or scale will not be affected by layout and\n     * if changed in {@link #onSharedElementEnd(List, List, List)}, it will also have to be reset\n     * in onSharedElementStart again to correct the end state.\n     *\n     * @param sharedElementNames The names of the shared elements that were accepted into\n     *                           the View hierarchy.\n     * @param sharedElements The shared elements that are part of the View hierarchy.\n     * @param sharedElementSnapshots The Views containing snap shots of the shared element\n     *                               from the launching Window. These elements will not\n     *                               be part of the scene, but will be positioned relative\n     *                               to the Window decor View. This list is null for Fragment\n     *                               Transitions.\n     ",
    "links" : [ "#onSharedElementEnd(List" ]
  }, {
    "name" : "public void onSharedElementEnd(List<String> sharedElementNames, List<View> sharedElements, List<View> sharedElementSnapshots)",
    "returnType" : "void",
    "comment" : "\n     * In Activity Transitions, onSharedElementEnd is called immediately before\n     * capturing the end of the shared element state on enter and reenter transitions and\n     * immediately before capturing the start of the shared element state for exit and return\n     * transitions.\n     * <p>\n     * In Fragment Transitions, onSharedElementEnd is called immediately before capturing the\n     * end state of all shared element transitions.\n     * <p>\n     * This call can be used to adjust the transition end state by modifying the shared\n     * element Views. Note that no layout step will be executed between onSharedElementEnd\n     * and the transition state capture.\n     * <p>\n     * Any changes made in {@link #onSharedElementStart(List, List, List)} that are not updated\n     * during layout should be corrected in onSharedElementEnd. For example, rotation or scale\n     * will not be affected by layout and if changed in\n     * {@link #onSharedElementStart(List, List, List)}, it will also have to be reset in\n     * onSharedElementEnd again to correct the end state.\n     *\n     * @param sharedElementNames The names of the shared elements that were accepted into\n     *                           the View hierarchy.\n     * @param sharedElements The shared elements that are part of the View hierarchy.\n     * @param sharedElementSnapshots The Views containing snap shots of the shared element\n     *                               from the launching Window. These elements will not\n     *                               be part of the scene, but will be positioned relative\n     *                               to the Window decor View. This list will be null for\n     *                               Fragment Transitions.\n     ",
    "links" : [ "#onSharedElementStart(List" ]
  }, {
    "name" : "public void onRejectSharedElements(List<View> rejectedSharedElements)",
    "returnType" : "void",
    "comment" : "\n     * Called after {@link #onMapSharedElements(java.util.List, java.util.Map)} when\n     * transferring shared elements in. Any shared elements that have no mapping will be in\n     * <var>rejectedSharedElements</var>. The elements remaining in\n     * <var>rejectedSharedElements</var> will be transitioned out of the Scene. If a\n     * View is removed from <var>rejectedSharedElements</var>, it must be handled by the\n     * <code>SharedElementCallback</code>.\n     * <p>\n     * Views in rejectedSharedElements will have their position and size set to the\n     * position of the calling shared element, relative to the Window decor View and contain\n     * snapshots of the View from the calling Activity or Fragment. This\n     * view may be safely added to the decor View's overlay to remain in position.\n     * </p>\n     * <p>This method is not called for Fragment Transitions. All rejected shared elements\n     * will be handled by the exit transition.</p>\n     *\n     * @param rejectedSharedElements Views containing visual information of shared elements\n     *                               that are not part of the entering scene. These Views\n     *                               are positioned relative to the Window decor View. A\n     *                               View removed from this list will not be transitioned\n     *                               automatically.\n     ",
    "links" : [ "#onMapSharedElements(java.util.List" ]
  }, {
    "name" : "public void onMapSharedElements(List<String> names, Map<String, View> sharedElements)",
    "returnType" : "void",
    "comment" : "\n     * Lets the SharedElementCallback adjust the mapping of shared element names to\n     * Views.\n     *\n     * @param names The names of all shared elements transferred from the calling Activity\n     *              or Fragment in the order they were provided.\n     * @param sharedElements The mapping of shared element names to Views. The best guess\n     *                       will be filled into sharedElements based on the transitionNames.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onCaptureSharedElementSnapshot(View sharedElement, Matrix viewToGlobalMatrix, RectF screenBounds)",
    "returnType" : "Parcelable",
    "comment" : "\n     * Creates a snapshot of a shared element to be used by the remote Activity and reconstituted\n     * with {@link #onCreateSnapshotView(android.content.Context, android.os.Parcelable)}. A\n     * null return value will mean that the remote Activity will have a null snapshot View in\n     * {@link #onSharedElementStart(java.util.List, java.util.List, java.util.List)} and\n     * {@link #onSharedElementEnd(java.util.List, java.util.List, java.util.List)}.\n     *\n     * <p>This is not called for Fragment Transitions.</p>\n     *\n     * @param sharedElement The shared element View to create a snapshot for.\n     * @param viewToGlobalMatrix A matrix containing a transform from the view to the screen\n     *                           coordinates.\n     * @param screenBounds The bounds of shared element in screen coordinate space. This is\n     *                     the bounds of the view with the viewToGlobalMatrix applied.\n     * @return A snapshot to send to the remote Activity to be reconstituted with\n     * {@link #onCreateSnapshotView(android.content.Context, android.os.Parcelable)} and passed\n     * into {@link #onSharedElementStart(java.util.List, java.util.List, java.util.List)} and\n     * {@link #onSharedElementEnd(java.util.List, java.util.List, java.util.List)}.\n     ",
    "links" : [ "#onCreateSnapshotView(android.content.Context", "#onSharedElementStart(java.util.List", "#onSharedElementEnd(java.util.List" ]
  }, {
    "name" : "public View onCreateSnapshotView(Context context, Parcelable snapshot)",
    "returnType" : "View",
    "comment" : "\n     * Reconstitutes a snapshot View from a Parcelable returned in\n     * {@link #onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix,\n     * android.graphics.RectF)} to be used in {@link #onSharedElementStart(java.util.List,\n     * java.util.List, java.util.List)} and {@link #onSharedElementEnd(java.util.List,\n     * java.util.List, java.util.List)}. The returned View will be sized and positioned after\n     * this call so that it is ready to be added to the decor View's overlay.\n     *\n     * <p>This is not called for Fragment Transitions.</p>\n     *\n     * @param context The Context used to create the snapshot View.\n     * @param snapshot The Parcelable returned by {@link #onCaptureSharedElementSnapshot(\n     * android.view.View, android.graphics.Matrix, android.graphics.RectF)}.\n     * @return A View to be sent in {@link #onSharedElementStart(java.util.List, java.util.List,\n     * java.util.List)} and {@link #onSharedElementEnd(java.util.List, java.util.List,\n     * java.util.List)}. A null value will produce a null snapshot value for those two methods.\n     ",
    "links" : [ "#onCaptureSharedElementSnapshot(", "#onCaptureSharedElementSnapshot(android.view.View", "#onSharedElementStart(java.util.List", "#onSharedElementEnd(java.util.List" ]
  }, {
    "name" : "public void onSharedElementsArrived(List<String> sharedElementNames, List<View> sharedElements, OnSharedElementsReadyListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Called during an Activity Transition when the shared elements have arrived at the\n     * final location and are ready to be transferred. This method is called for both the\n     * source and destination Activities.\n     * <p>\n     * When the shared elements are ready to be transferred,\n     * {@link OnSharedElementsReadyListener#onSharedElementsReady()}\n     * must be called to trigger the transfer.\n     * <p>\n     * The default behavior is to trigger the transfer immediately.\n     *\n     * @param sharedElementNames The names of the shared elements that are being transferred..\n     * @param sharedElements The shared elements that are part of the View hierarchy.\n     * @param listener The listener to call when the shared elements are ready to be hidden\n     *                 in the source Activity or shown in the destination Activity.\n     ",
    "links" : [ "#onSharedElementsReady()" ]
  } ],
  "methodNames" : [ "public void onSharedElementStart(List<String> sharedElementNames, List<View> sharedElements, List<View> sharedElementSnapshots)", "public void onSharedElementEnd(List<String> sharedElementNames, List<View> sharedElements, List<View> sharedElementSnapshots)", "public void onRejectSharedElements(List<View> rejectedSharedElements)", "public void onMapSharedElements(List<String> names, Map<String, View> sharedElements)", "public Parcelable onCaptureSharedElementSnapshot(View sharedElement, Matrix viewToGlobalMatrix, RectF screenBounds)", "public View onCreateSnapshotView(Context context, Parcelable snapshot)", "public void onSharedElementsArrived(List<String> sharedElementNames, List<View> sharedElements, OnSharedElementsReadyListener listener)" ],
  "variableNames" : [ "mTempMatrix", "BUNDLE_SNAPSHOT_BITMAP", "BUNDLE_SNAPSHOT_HARDWARE_BUFFER", "BUNDLE_SNAPSHOT_COLOR_SPACE", "BUNDLE_SNAPSHOT_IMAGE_SCALETYPE", "BUNDLE_SNAPSHOT_IMAGE_MATRIX", "NULL_CALLBACK" ]
}