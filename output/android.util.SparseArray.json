{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/SparseArray.java",
  "packageName" : "android.util",
  "className" : "SparseArray",
  "comment" : "\n * <code>SparseArray</code> maps integers to Objects and, unlike a normal array of Objects,\n * its indices can contain gaps. <code>SparseArray</code> is intended to be more memory-efficient\n * than a\n * <a href=\"/reference/java/util/HashMap\"><code>HashMap</code></a>, because it avoids\n * auto-boxing keys and its data structure doesn't rely on an extra entry object\n * for each mapping.\n *\n * <p>Note that this container keeps its mappings in an array data structure,\n * using a binary search to find keys. The implementation is not intended to be appropriate for\n * data structures\n * that may contain large numbers of items. It is generally slower than a\n * <code>HashMap</code> because lookups require a binary search,\n * and adds and removes require inserting\n * and deleting entries in the array. For containers holding up to hundreds of items,\n * the performance difference is less than 50%.\n *\n * <p>To help with performance, the container includes an optimization when removing\n * keys: instead of compacting its array immediately, it leaves the removed entry marked\n * as deleted. The entry can then be re-used for the same key or compacted later in\n * a single garbage collection of all removed entries. This garbage collection\n * must be performed whenever the array needs to be grown, or when the map size or\n * entry values are retrieved.\n *\n * <p>It is possible to iterate over the items in this container using\n * {@link #keyAt(int)} and {@link #valueAt(int)}. Iterating over the keys using\n * <code>keyAt(int)</code> with ascending values of the index returns the\n * keys in ascending order. In the case of <code>valueAt(int)</code>, the\n * values corresponding to the keys are returned in ascending order.\n ",
  "links" : [ "#keyAt(int)", "#valueAt(int)" ],
  "variables" : [ {
    "name" : "DELETED",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGarbage",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeys",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SparseArray<E> clone()",
    "returnType" : "SparseArray<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(int key)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the key exists in the array. This is equivalent to\n     * {@link #indexOfKey(int)} >= 0.\n     *\n     * @param key Potential key in the mapping\n     * @return true if the key is defined in the mapping\n     ",
    "links" : [ "#indexOfKey(int)" ]
  }, {
    "name" : "public E get(int key)",
    "returnType" : "E",
    "comment" : "\n     * Gets the Object mapped from the specified key, or <code>null</code>\n     * if no such mapping has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "public E get(int key, E valueIfKeyNotFound)",
    "returnType" : "E",
    "comment" : "\n     * Gets the Object mapped from the specified key, or the specified Object\n     * if no such mapping has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void delete(int key)",
    "returnType" : "void",
    "comment" : "\n     * Removes the mapping from the specified key, if there was any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public E removeReturnOld(int key)",
    "returnType" : "E",
    "comment" : "\n     * @hide\n     * Removes the mapping from the specified key, if there was any, returning the old value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(int key)",
    "returnType" : "void",
    "comment" : "\n     * Alias for {@link #delete(int)}.\n     ",
    "links" : [ "#delete(int)" ]
  }, {
    "name" : "public void removeAt(int index)",
    "returnType" : "void",
    "comment" : "\n     * Removes the mapping at the specified index.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>,\n     * the behavior is undefined for apps targeting {@link android.os.Build.VERSION_CODES#P} and\n     * earlier, and an {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.os.Build.VERSION_CODES#Q", "ArrayIndexOutOfBoundsException" ]
  }, {
    "name" : "public void removeAtRange(int index, int size)",
    "returnType" : "void",
    "comment" : "\n     * Remove a range of mappings as a batch.\n     *\n     * @param index Index to begin at\n     * @param size Number of mappings to remove\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>,\n     * the behavior is undefined.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "private void gc()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void set(int key, E value)",
    "returnType" : "void",
    "comment" : "\n     * Alias for {@link #put(int, Object)} to support Kotlin [index]= operator.\n     * @see #put(int, Object)\n     ",
    "links" : [ "#put(int" ]
  }, {
    "name" : "public void put(int key, E value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a mapping from the specified key to the specified value,\n     * replacing the previous mapping from the specified key if there\n     * was one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of key-value mappings that this SparseArray\n     * currently stores.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int keyAt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, returns\n     * the key from the <code>index</code>th key-value mapping that this\n     * SparseArray stores.\n     *\n     * <p>The keys corresponding to indices in ascending order are guaranteed to\n     * be in ascending order, e.g., <code>keyAt(0)</code> will return the\n     * smallest key and <code>keyAt(size()-1)</code> will return the largest\n     * key.</p>\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>,\n     * the behavior is undefined for apps targeting {@link android.os.Build.VERSION_CODES#P} and\n     * earlier, and an {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.os.Build.VERSION_CODES#Q", "ArrayIndexOutOfBoundsException" ]
  }, {
    "name" : "public E valueAt(int index)",
    "returnType" : "E",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, returns\n     * the value from the <code>index</code>th key-value mapping that this\n     * SparseArray stores.\n     *\n     * <p>The values corresponding to indices in ascending order are guaranteed\n     * to be associated with keys in ascending order, e.g.,\n     * <code>valueAt(0)</code> will return the value associated with the\n     * smallest key and <code>valueAt(size()-1)</code> will return the value\n     * associated with the largest key.</p>\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>,\n     * the behavior is undefined for apps targeting {@link android.os.Build.VERSION_CODES#P} and\n     * earlier, and an {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.os.Build.VERSION_CODES#Q", "ArrayIndexOutOfBoundsException" ]
  }, {
    "name" : "public void setValueAt(int index, E value)",
    "returnType" : "void",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, sets a new\n     * value for the <code>index</code>th key-value mapping that this\n     * SparseArray stores.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.os.Build.VERSION_CODES#Q", "ArrayIndexOutOfBoundsException" ]
  }, {
    "name" : "public int indexOfKey(int key)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index for which {@link #keyAt} would return the\n     * specified key, or a negative number if the specified\n     * key is not mapped.\n     ",
    "links" : [ "#keyAt" ]
  }, {
    "name" : "public int indexOfValue(E value)",
    "returnType" : "int",
    "comment" : "\n     * Returns an index for which {@link #valueAt} would return the\n     * specified value, or a negative number if no keys map to the\n     * specified value.\n     * <p>Beware that this is a linear search, unlike lookups by key,\n     * and that multiple keys can map to the same value and this will\n     * find only one of them.\n     * <p>Note also that unlike most collections' {@code indexOf} methods,\n     * this method compares values using {@code ==} rather than {@code equals}.\n     ",
    "links" : [ "#valueAt" ]
  }, {
    "name" : "public int indexOfValueByValue(E value)",
    "returnType" : "int",
    "comment" : "\n     * Returns an index for which {@link #valueAt} would return the\n     * specified value, or a negative number if no keys map to the\n     * specified value.\n     * <p>Beware that this is a linear search, unlike lookups by key,\n     * and that multiple keys can map to the same value and this will\n     * find only one of them.\n     * <p>Note also that this method uses {@code equals} unlike {@code indexOfValue}.\n     * @hide\n     ",
    "links" : [ "#valueAt" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all key-value mappings from this SparseArray.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void append(int key, E value)",
    "returnType" : "void",
    "comment" : "\n     * Puts a key/value pair into the array, optimizing for the case where\n     * the key is greater than all existing keys in the array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This implementation composes a string by iterating over its mappings. If\n     * this map contains itself as a value, the string \"(this Map)\"\n     * will appear in its place.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contentEquals(@Nullable SparseArray<?> other)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the contents of this {@link SparseArray} to the specified {@link SparseArray}.\n     *\n     * For backwards compatibility reasons, {@link Object#equals(Object)} cannot be implemented,\n     * so this serves as a manually invoked alternative.\n     ",
    "links" : [ "android.util.SparseArray", "#equals(Object)" ]
  }, {
    "name" : "public int contentHashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code value for the contents of this {@link SparseArray}, combining the\n     * {@link Objects#hashCode(Object)} result of all its keys and values.\n     *\n     * For backwards compatibility, {@link Object#hashCode()} cannot be implemented, so this serves\n     * as a manually invoked alternative.\n     ",
    "links" : [ "android.util.SparseArray", "#hashCode()", "java.util.Objects#hashCode(Object)" ]
  } ],
  "methodNames" : [ "public SparseArray<E> clone()", "public boolean contains(int key)", "public E get(int key)", "public E get(int key, E valueIfKeyNotFound)", "public void delete(int key)", "public E removeReturnOld(int key)", "public void remove(int key)", "public void removeAt(int index)", "public void removeAtRange(int index, int size)", "private void gc()", "public void set(int key, E value)", "public void put(int key, E value)", "public int size()", "public int keyAt(int index)", "public E valueAt(int index)", "public void setValueAt(int index, E value)", "public int indexOfKey(int key)", "public int indexOfValue(E value)", "public int indexOfValueByValue(E value)", "public void clear()", "public void append(int key, E value)", "public String toString()", "public boolean contentEquals(@Nullable SparseArray<?> other)", "public int contentHashCode()" ],
  "variableNames" : [ "DELETED", "mGarbage", "mKeys", "mValues", "mSize" ]
}