{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothLeBroadcastMetadata.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothLeBroadcastMetadata",
  "comment" : "\n * This class represents a Broadcast Source group and the associated information that is needed by\n * Broadcast Audio Scan Service (BASS) to set up a Broadcast Sink.\n *\n * <p>For example, an LE Audio Broadcast Sink can use the information contained within an instance\n * of this class to synchronize with an LE Audio Broadcast group in order to listen to audio from\n * Broadcast subgroup using one or more Broadcast Channels.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mSourceAddressType",
    "type" : "int",
    "comment" : " Optional: Identity address type",
    "links" : [ ]
  }, {
    "name" : "mSourceDevice",
    "type" : "BluetoothDevice",
    "comment" : " Optional: Must use identity address",
    "links" : [ ]
  }, {
    "name" : "mSourceAdvertisingSid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBroadcastId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaSyncInterval",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEncrypted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPublicBroadcast",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBroadcastName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBroadcastCode",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPublicBroadcastMetadata",
    "type" : "BluetoothLeAudioContentMetadata",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioConfigQuality",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRssi",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_CONFIG_QUALITY_NONE",
    "type" : "int",
    "comment" : "\n     * Audio config quality is none, default value used for audio config quality.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_CONFIG_QUALITY_STANDARD",
    "type" : "int",
    "comment" : "\n     * Audio config quality is standard. This indicates the BIG shall include at least one broadcast\n     * Audio Stream configuration defined as Mandatory for a Broadcast Sink in Basic Audio Profile,\n     * Version 1 or later, table 6.4\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_CONFIG_QUALITY_HIGH",
    "type" : "int",
    "comment" : "\n     * Audio config quality is standard. This indicates the BIG shall include at least one broadcast\n     * Audio Stream configuration setting listed in Public Broadcast Profile, Version 1 or later,\n     * table 4.2\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mPresentationDelayMicros",
    "type" : "int",
    "comment" : " All other values: RFU",
    "links" : [ ]
  }, {
    "name" : "mSubgroups",
    "type" : "List<BluetoothLeBroadcastSubgroup>",
    "comment" : " Sub group info numSubGroup = mSubGroups.length",
    "links" : [ ]
  }, {
    "name" : "PA_SYNC_INTERVAL_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicated that Periodic Advertising Sync interval is unknown.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RSSI_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicated that rssi value is unknown.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<BluetoothLeBroadcastMetadata>",
    "comment" : "\n     * A {@link Parcelable.Creator} to create {@link BluetoothLeBroadcastMetadata} from parcel.\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastMetadata", "Parcelable.Creator" ]
  }, {
    "name" : "UNKNOWN_VALUE_PLACEHOLDER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSourceAddressType()",
    "returnType" : "int",
    "comment" : "\n     * Get the address type of the Broadcast Source.\n     *\n     * <p>Can be either {@link BluetoothDevice#ADDRESS_TYPE_PUBLIC}, {@link\n     * BluetoothDevice#ADDRESS_TYPE_RANDOM}\n     *\n     * @return address type of the Broadcast Source\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#ADDRESS_TYPE_PUBLIC", "android.bluetooth.BluetoothDevice#ADDRESS_TYPE_RANDOM" ]
  }, {
    "name" : "public BluetoothDevice getSourceDevice()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Get the MAC address of the Broadcast Source, which can be Public Device Address, Random\n     * Device Address, Public Identity Address or Random (static) Identity Address.\n     *\n     * @return MAC address of the Broadcast Source\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSourceAdvertisingSid()",
    "returnType" : "int",
    "comment" : "\n     * Get Advertising_SID subfield of the ADI field of the AUX_ADV_IND PDU or the\n     * LL_PERIODIC_SYNC_IND containing the SyncInfo that points to the PA transmitted by the\n     * Broadcast Source.\n     *\n     * @return 1-byte long Advertising_SID of the Broadcast Source\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBroadcastId()",
    "returnType" : "int",
    "comment" : "\n     * Broadcast_ID of the Broadcast Source.\n     *\n     * @return 3-byte long Broadcast_ID of the Broadcast Source\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPaSyncInterval()",
    "returnType" : "int",
    "comment" : "\n     * Get Periodic Advertising Sync interval of the broadcast Source.\n     *\n     * @return Periodic Advertising Sync interval of the broadcast Source, {@link\n     *     #PA_SYNC_INTERVAL_UNKNOWN} if unknown\n     * @hide\n     ",
    "links" : [ "#PA_SYNC_INTERVAL_UNKNOWN" ]
  }, {
    "name" : "public boolean isEncrypted()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the Broadcast Source is encrypted.\n     *\n     * @return true if the Broadcast Source is encrypted\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPublicBroadcast()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if this Broadcast Group is broadcasting Public Broadcast Announcement\n     * otherwise return {@code false}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBroadcastName()",
    "returnType" : "String",
    "comment" : "\n     * Get the broadcast name for this Broadcast Group as UTF-8 format.\n     *\n     * @return broadcast name or null for this Broadcast Group\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBroadcastCode()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get the Broadcast Code currently set for this Broadcast Source.\n     *\n     * <p>Only needed when encryption is enabled\n     *\n     * <p>As defined in Volume 3, Part C, Section 3.2.6 of Bluetooth Core Specification, Version\n     * 5.3, Broadcast Code is used to encrypt a broadcast audio stream.\n     *\n     * <p>It must be a UTF-8 string that has at least 4 octets and should not exceed 16 octets.\n     *\n     * @return Broadcast Code currently set for this Broadcast Source, {@code null} if code is not\n     *     required or code is currently unknown\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPresentationDelayMicros()",
    "returnType" : "int",
    "comment" : "\n     * Get the overall presentation delay in microseconds of this Broadcast Source.\n     *\n     * <p>Presentation delay is defined in Section 7 of the Basic Audio Profile.\n     *\n     * @return presentation delay of this Broadcast Source in microseconds\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAudioConfigQuality()",
    "returnType" : "int",
    "comment" : "\n     * Get broadcast audio config quality for this Broadcast Group.\n     *\n     * @return Broadcast audio config quality for this Broadcast Group\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRssi()",
    "returnType" : "int",
    "comment" : "\n     * Get the Received Signal Strength Indication (RSSI) value of this Broadcast Source.\n     *\n     * <p>The valid RSSI range is [-127, 126] and as defined in Volume 4, Part E, Section 7.7.65.13\n     * of Bluetooth Core Specification, Version 5.3, value of 0x7F(127) means that the RSSI is not\n     * available.\n     *\n     * @return the RSSI {@link #RSSI_UNKNOWN} if unknown\n     * @hide\n     ",
    "links" : [ "#RSSI_UNKNOWN" ]
  }, {
    "name" : "public BluetoothLeAudioContentMetadata getPublicBroadcastMetadata()",
    "returnType" : "BluetoothLeAudioContentMetadata",
    "comment" : "\n     * Get public broadcast metadata for this Broadcast Group.\n     *\n     * @return public broadcast metadata for this Broadcast Group, {@code null} if no public\n     *     metadata exists\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothLeBroadcastSubgroup> getSubgroups()",
    "returnType" : "List<BluetoothLeBroadcastSubgroup>",
    "comment" : "\n     * Get available subgroups in this broadcast source.\n     *\n     * @return list of subgroups in this broadcast source, which should contain at least one\n     *     subgroup for each Broadcast Source\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(@Nullable Object o)", "public int hashCode()", "public String toString()", "public int getSourceAddressType()", "public BluetoothDevice getSourceDevice()", "public int getSourceAdvertisingSid()", "public int getBroadcastId()", "public int getPaSyncInterval()", "public boolean isEncrypted()", "public boolean isPublicBroadcast()", "public String getBroadcastName()", "public byte[] getBroadcastCode()", "public int getPresentationDelayMicros()", "public int getAudioConfigQuality()", "public int getRssi()", "public BluetoothLeAudioContentMetadata getPublicBroadcastMetadata()", "public List<BluetoothLeBroadcastSubgroup> getSubgroups()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)" ],
  "variableNames" : [ "mSourceAddressType", "mSourceDevice", "mSourceAdvertisingSid", "mBroadcastId", "mPaSyncInterval", "mIsEncrypted", "mIsPublicBroadcast", "mBroadcastName", "mBroadcastCode", "mPublicBroadcastMetadata", "mAudioConfigQuality", "mRssi", "AUDIO_CONFIG_QUALITY_NONE", "AUDIO_CONFIG_QUALITY_STANDARD", "AUDIO_CONFIG_QUALITY_HIGH", "mPresentationDelayMicros", "mSubgroups", "PA_SYNC_INTERVAL_UNKNOWN", "RSSI_UNKNOWN", "CREATOR", "UNKNOWN_VALUE_PLACEHOLDER" ]
}