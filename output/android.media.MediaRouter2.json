{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaRouter2.java",
  "packageName" : "android.media",
  "className" : "MediaRouter2",
  "comment" : " TODO: ensure thread-safe and document it",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRouterLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_TIMEOUT_MS",
    "type" : "int",
    "comment" : " The maximum time for the old routing controller available after transfer.",
    "links" : [ ]
  }, {
    "name" : "MANAGER_REQUEST_ID_NONE",
    "type" : "long",
    "comment" : " The manager request ID representing that no manager is involved.",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "MediaRouter2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaRouterService",
    "type" : "IMediaRouterService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRouteCallbackRecords",
    "type" : "CopyOnWriteArrayList<RouteCallbackRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransferCallbackRecords",
    "type" : "CopyOnWriteArrayList<TransferCallbackRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mControllerCallbackRecords",
    "type" : "CopyOnWriteArrayList<ControllerCallbackRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mControllerCreationRequests",
    "type" : "CopyOnWriteArrayList<ControllerCreationRequest>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoutes",
    "type" : "Map<String, MediaRoute2Info>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemController",
    "type" : "RoutingController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDiscoveryPreference",
    "type" : "RouteDiscoveryPreference",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStub",
    "type" : "MediaRouter2Stub",
    "comment" : " TODO: Make MediaRouter2 is always connected to the MediaRouterService.",
    "links" : [ ]
  }, {
    "name" : "mNonSystemRoutingControllers",
    "type" : "Map<String, RoutingController>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextRequestId",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldUpdateRoutes",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilteredRoutes",
    "type" : "List<MediaRoute2Info>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnGetControllerHintsListener",
    "type" : "OnGetControllerHintsListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MediaRouter2 getInstance(@NonNull Context context)",
    "returnType" : "MediaRouter2",
    "comment" : "\n     * Gets an instance of the media router associated with the context.\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean checkRouteListContainsRouteId(@NonNull List<MediaRoute2Info> routeList, @NonNull String routeId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether any route in {@code routeList} has a same unique ID with given route.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerRouteCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RouteCallback routeCallback, @NonNull RouteDiscoveryPreference preference)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to discover routes and to receive events when they change.\n     * <p>\n     * If the specified callback is already registered, its registration will be updated for the\n     * given {@link Executor executor} and {@link RouteDiscoveryPreference discovery preference}.\n     * </p>\n     ",
    "links" : [ "android.media.RouteDiscoveryPreference", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void unregisterRouteCallback(@NonNull RouteCallback routeCallback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the given callback. The callback will no longer receive events.\n     * If the callback has not been added or been removed already, it is ignored.\n     *\n     * @param routeCallback the callback to unregister\n     * @see #registerRouteCallback\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean updateDiscoveryPreferenceIfNeededLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<MediaRoute2Info> getRoutes()",
    "returnType" : "List<MediaRoute2Info>",
    "comment" : "\n     * Gets the unmodifiable list of {@link MediaRoute2Info routes} currently\n     * known to the media router.\n     * <p>\n     * Please note that the list can be changed before callbacks are invoked.\n     * </p>\n     *\n     * @return the list of routes that contains at least one of the route features in discovery\n     * preferences registered by the application\n     ",
    "links" : [ "android.media.MediaRoute2Info" ]
  }, {
    "name" : "public void registerTransferCallback(@NonNull @CallbackExecutor Executor executor, @NonNull TransferCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to get the result of {@link #transferTo(MediaRoute2Info)}.\n     * If you register the same callback twice or more, it will be ignored.\n     *\n     * @param executor the executor to execute the callback on\n     * @param callback the callback to register\n     * @see #unregisterTransferCallback\n     ",
    "links" : [ "#transferTo(MediaRoute2Info)" ]
  }, {
    "name" : "public void unregisterTransferCallback(@NonNull TransferCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the given callback. The callback will no longer receive events.\n     * If the callback has not been added or been removed already, it is ignored.\n     *\n     * @param callback the callback to unregister\n     * @see #registerTransferCallback\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerControllerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull ControllerCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link ControllerCallback}.\n     * If you register the same callback twice or more, it will be ignored.\n     * @see #unregisterControllerCallback(ControllerCallback)\n     ",
    "links" : [ "ControllerCallback" ]
  }, {
    "name" : "public void unregisterControllerCallback(@NonNull ControllerCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link ControllerCallback}. The callback will no longer receive\n     * events. If the callback has not been added or been removed already, it is ignored.\n     * @see #registerControllerCallback(Executor, ControllerCallback)\n     ",
    "links" : [ "ControllerCallback" ]
  }, {
    "name" : "public void setOnGetControllerHintsListener(@Nullable OnGetControllerHintsListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets an {@link OnGetControllerHintsListener} to send hints when creating a\n     * {@link RoutingController}. To send the hints, listener should be set <em>BEFORE</em> calling\n     * {@link #transferTo(MediaRoute2Info)}.\n     *\n     * @param listener A listener to send optional app-specific hints when creating a controller.\n     *                 {@code null} for unset.\n     ",
    "links" : [ "RoutingController", "OnGetControllerHintsListener", "#transferTo(MediaRoute2Info)" ]
  }, {
    "name" : "public void transferTo(@NonNull MediaRoute2Info route)",
    "returnType" : "void",
    "comment" : "\n     * Transfers the current media to the given route.\n     * If it's necessary a new {@link RoutingController} is created or it is handled within\n     * the current routing controller.\n     *\n     * @param route the route you want to transfer the current media to. Pass {@code null} to\n     *              stop routing of the current media.\n     *\n     * @see TransferCallback#onTransfer\n     * @see TransferCallback#onTransferFailure\n     ",
    "links" : [ "RoutingController" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stops the current media routing. If the {@link #getSystemController() system controller}\n     * controls the media routing, this method is a no-op.\n     ",
    "links" : [ "#getSystemController()" ]
  }, {
    "name" : " void transfer(@NonNull RoutingController controller, @NonNull MediaRoute2Info route)",
    "returnType" : "void",
    "comment" : "\n     * Transfers the media of a routing controller to the given route.\n     * @param controller a routing controller controlling media routing.\n     * @param route the route you want to transfer the media to.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void requestCreateController(@NonNull RoutingController controller, @NonNull MediaRoute2Info route, long managerRequestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RoutingController getCurrentController()",
    "returnType" : "RoutingController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RoutingController getSystemController()",
    "returnType" : "RoutingController",
    "comment" : "\n     * Gets a {@link RoutingController} which can control the routes provided by system.\n     * e.g. Phone speaker, wired headset, Bluetooth, etc.\n     * <p>\n     * Note: The system controller can't be released. Calling {@link RoutingController#release()}\n     * will be ignored.\n     * <p>\n     * This method always returns the same instance.\n     ",
    "links" : [ "RoutingController", "#release()" ]
  }, {
    "name" : "public List<RoutingController> getControllers()",
    "returnType" : "List<RoutingController>",
    "comment" : "\n     * Gets the list of currently active {@link RoutingController routing controllers} on which\n     * media can be played.\n     * <p>\n     * Note: The list returned here will never be empty. The first element in the list is\n     * always the {@link #getSystemController() system controller}.\n     ",
    "links" : [ "RoutingController", "#getSystemController()" ]
  }, {
    "name" : "public void setRouteVolume(@NonNull MediaRoute2Info route, int volume)",
    "returnType" : "void",
    "comment" : "\n     * Requests a volume change for the route asynchronously.\n     * <p>\n     * It may have no effect if the route is currently not selected.\n     * </p>\n     *\n     * @param volume The new volume value between 0 and {@link MediaRoute2Info#getVolumeMax}.\n     * @hide\n     ",
    "links" : [ "android.media.MediaRoute2Info#getVolumeMax" ]
  }, {
    "name" : " void syncRoutesOnHandler(List<MediaRoute2Info> currentRoutes, RoutingSessionInfo currentSystemSessionInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void addRoutesOnHandler(List<MediaRoute2Info> routes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeRoutesOnHandler(List<MediaRoute2Info> routes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void changeRoutesOnHandler(List<MediaRoute2Info> routes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void createControllerOnHandler(int requestId, @Nullable RoutingSessionInfo sessionInfo)",
    "returnType" : "void",
    "comment" : "\n     * Creates a controller and calls the {@link TransferCallback#onTransfer}.\n     * If the controller creation has failed, then it calls\n     * {@link TransferCallback#onTransferFailure}.\n     * <p>\n     * Pass {@code null} to sessionInfo for the failure case.\n     ",
    "links" : [ "#onTransferFailure", "#onTransfer" ]
  }, {
    "name" : " void updateControllerOnHandler(RoutingSessionInfo sessionInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void releaseControllerOnHandler(RoutingSessionInfo sessionInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onRequestCreateControllerByManagerOnHandler(RoutingSessionInfo oldSession, MediaRoute2Info route, long managerRequestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<MediaRoute2Info> filterRoutes(List<MediaRoute2Info> routes, RouteDiscoveryPreference discoveryRequest)",
    "returnType" : "List<MediaRoute2Info>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyRoutesAdded(List<MediaRoute2Info> routes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyRoutesRemoved(List<MediaRoute2Info> routes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyRoutesChanged(List<MediaRoute2Info> routes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyTransfer(RoutingController oldController, RoutingController newController)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyTransferFailure(MediaRoute2Info route)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyStop(RoutingController controller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyControllerUpdated(RoutingController controller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "sRouterLock", "TRANSFER_TIMEOUT_MS", "MANAGER_REQUEST_ID_NONE", "sInstance", "mContext", "mMediaRouterService", "mRouteCallbackRecords", "mTransferCallbackRecords", "mControllerCallbackRecords", "mControllerCreationRequests", "mPackageName", "mRoutes", "mSystemController", "mDiscoveryPreference", "mStub", "mNonSystemRoutingControllers", "mNextRequestId", "mHandler", "mShouldUpdateRoutes", "mFilteredRoutes", "mOnGetControllerHintsListener" ],
  "methodNames" : [ "public static MediaRouter2 getInstance(@NonNull Context context)", " static boolean checkRouteListContainsRouteId(@NonNull List<MediaRoute2Info> routeList, @NonNull String routeId)", "public void registerRouteCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RouteCallback routeCallback, @NonNull RouteDiscoveryPreference preference)", "public void unregisterRouteCallback(@NonNull RouteCallback routeCallback)", "private boolean updateDiscoveryPreferenceIfNeededLocked()", "public List<MediaRoute2Info> getRoutes()", "public void registerTransferCallback(@NonNull @CallbackExecutor Executor executor, @NonNull TransferCallback callback)", "public void unregisterTransferCallback(@NonNull TransferCallback callback)", "public void registerControllerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull ControllerCallback callback)", "public void unregisterControllerCallback(@NonNull ControllerCallback callback)", "public void setOnGetControllerHintsListener(@Nullable OnGetControllerHintsListener listener)", "public void transferTo(@NonNull MediaRoute2Info route)", "public void stop()", " void transfer(@NonNull RoutingController controller, @NonNull MediaRoute2Info route)", " void requestCreateController(@NonNull RoutingController controller, @NonNull MediaRoute2Info route, long managerRequestId)", "private RoutingController getCurrentController()", "public RoutingController getSystemController()", "public List<RoutingController> getControllers()", "public void setRouteVolume(@NonNull MediaRoute2Info route, int volume)", " void syncRoutesOnHandler(List<MediaRoute2Info> currentRoutes, RoutingSessionInfo currentSystemSessionInfo)", " void addRoutesOnHandler(List<MediaRoute2Info> routes)", " void removeRoutesOnHandler(List<MediaRoute2Info> routes)", " void changeRoutesOnHandler(List<MediaRoute2Info> routes)", " void createControllerOnHandler(int requestId, @Nullable RoutingSessionInfo sessionInfo)", " void updateControllerOnHandler(RoutingSessionInfo sessionInfo)", " void releaseControllerOnHandler(RoutingSessionInfo sessionInfo)", " void onRequestCreateControllerByManagerOnHandler(RoutingSessionInfo oldSession, MediaRoute2Info route, long managerRequestId)", "private List<MediaRoute2Info> filterRoutes(List<MediaRoute2Info> routes, RouteDiscoveryPreference discoveryRequest)", "private void notifyRoutesAdded(List<MediaRoute2Info> routes)", "private void notifyRoutesRemoved(List<MediaRoute2Info> routes)", "private void notifyRoutesChanged(List<MediaRoute2Info> routes)", "private void notifyTransfer(RoutingController oldController, RoutingController newController)", "private void notifyTransferFailure(MediaRoute2Info route)", "private void notifyStop(RoutingController controller)", "private void notifyControllerUpdated(RoutingController controller)" ]
}