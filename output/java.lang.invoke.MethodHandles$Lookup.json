{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/invoke/MethodHandles.java",
  "packageName" : "java.lang.invoke",
  "className" : "Lookup",
  "comment" : " #[public]Lookup to work around complaints from javadoc.",
  "links" : [ ],
  "variables" : [ {
    "name" : "lookupClass",
    "type" : "Class<?>",
    "comment" : " @NonNull ",
    "links" : [ ]
  }, {
    "name" : "allowedModes",
    "type" : "int",
    "comment" : " The allowed sorts of members which may be looked up (PUBLIC, etc.). ",
    "links" : [ ]
  }, {
    "name" : "PUBLIC",
    "type" : "int",
    "comment" : " A single-bit mask representing {@code public} access,\n         *  which may contribute to the result of {@link #lookupModes lookupModes}.\n         *  The value, {@code 0x01}, happens to be the same as the value of the\n         *  {@code public} {@linkplain java.lang.reflect.Modifier#PUBLIC modifier bit}.\n         ",
    "links" : [ "#lookupModes" ]
  }, {
    "name" : "PRIVATE",
    "type" : "int",
    "comment" : " A single-bit mask representing {@code private} access,\n         *  which may contribute to the result of {@link #lookupModes lookupModes}.\n         *  The value, {@code 0x02}, happens to be the same as the value of the\n         *  {@code private} {@linkplain java.lang.reflect.Modifier#PRIVATE modifier bit}.\n         ",
    "links" : [ "#lookupModes" ]
  }, {
    "name" : "PROTECTED",
    "type" : "int",
    "comment" : " A single-bit mask representing {@code protected} access,\n         *  which may contribute to the result of {@link #lookupModes lookupModes}.\n         *  The value, {@code 0x04}, happens to be the same as the value of the\n         *  {@code protected} {@linkplain java.lang.reflect.Modifier#PROTECTED modifier bit}.\n         ",
    "links" : [ "#lookupModes" ]
  }, {
    "name" : "PACKAGE",
    "type" : "int",
    "comment" : " A single-bit mask representing {@code package} access (default access),\n         *  which may contribute to the result of {@link #lookupModes lookupModes}.\n         *  The value is {@code 0x08}, which does not correspond meaningfully to\n         *  any particular {@linkplain java.lang.reflect.Modifier modifier bit}.\n         ",
    "links" : [ "#lookupModes" ]
  }, {
    "name" : "ALL_MODES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PUBLIC_LOOKUP",
    "type" : "Lookup",
    "comment" : " Version of lookup which is trusted minimally.\n         *  It can only be used to create method handles to\n         *  publicly accessible members.\n         ",
    "links" : [ ]
  }, {
    "name" : "IMPL_LOOKUP",
    "type" : "Lookup",
    "comment" : " Package-private version of lookup which is trusted. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int fixmods(int mods)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Class<?> lookupClass()",
    "returnType" : "Class<?>",
    "comment" : " Tells which class is performing the lookup.  It is this class against\n         *  which checks are performed for visibility and access permissions.\n         *  <p>\n         *  The class implies a maximum level of access permission,\n         *  but the permissions may be additionally limited by the bitmask\n         *  {@link #lookupModes lookupModes}, which controls whether non-public members\n         *  can be accessed.\n         *  @return the lookup class, on behalf of which this lookup object finds members\n         ",
    "links" : [ "#lookupModes" ]
  }, {
    "name" : "public int lookupModes()",
    "returnType" : "int",
    "comment" : " Tells which access-protection classes of members this lookup object can produce.\n         *  The result is a bit-mask of the bits\n         *  {@linkplain #PUBLIC PUBLIC (0x01)},\n         *  {@linkplain #PRIVATE PRIVATE (0x02)},\n         *  {@linkplain #PROTECTED PROTECTED (0x04)},\n         *  and {@linkplain #PACKAGE PACKAGE (0x08)}.\n         *  <p>\n         *  A freshly-created lookup object\n         *  on the {@linkplain java.lang.invoke.MethodHandles#lookup() caller's class}\n         *  has all possible bits set, since the caller class can access all its own members.\n         *  A lookup object on a new lookup class\n         *  {@linkplain java.lang.invoke.MethodHandles.Lookup#in created from a previous lookup object}\n         *  may have some mode bits set to zero.\n         *  The purpose of this is to restrict access via the new lookup object,\n         *  so that it can access only names which can be reached by the original\n         *  lookup object, and also by the new lookup class.\n         *  @return the lookup modes, which limit the kinds of access performed by this lookup object\n         ",
    "links" : [ ]
  }, {
    "name" : "public Lookup in(Class<?> requestedLookupClass)",
    "returnType" : "Lookup",
    "comment" : "\n         * Creates a lookup on the specified new lookup class.\n         * The resulting object will report the specified\n         * class as its own {@link #lookupClass lookupClass}.\n         * <p>\n         * However, the resulting {@code Lookup} object is guaranteed\n         * to have no more access capabilities than the original.\n         * In particular, access capabilities can be lost as follows:<ul>\n         * <li>If the new lookup class differs from the old one,\n         * protected members will not be accessible by virtue of inheritance.\n         * (Protected members may continue to be accessible because of package sharing.)\n         * <li>If the new lookup class is in a different package\n         * than the old one, protected and default (package) members will not be accessible.\n         * <li>If the new lookup class is not within the same package member\n         * as the old one, private members will not be accessible.\n         * <li>If the new lookup class is not accessible to the old lookup class,\n         * then no members, not even public members, will be accessible.\n         * (In all other cases, public members will continue to be accessible.)\n         * </ul>\n         *\n         * @param requestedLookupClass the desired lookup class for the new lookup object\n         * @return a lookup object which reports the desired lookup class\n         * @throws NullPointerException if the argument is null\n         ",
    "links" : [ "#lookupClass" ]
  }, {
    "name" : "private static void checkUnprivilegedlookupClass(Class<?> lookupClass, int allowedModes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n         * Displays the name of the class from which lookups are to be made.\n         * (The name is the one reported by {@link java.lang.Class#getName() Class.getName}.)\n         * If there are restrictions on the access permitted to this lookup,\n         * this is indicated by adding a suffix to the class name, consisting\n         * of a slash and a keyword.  The keyword represents the strongest\n         * allowed access, and is chosen as follows:\n         * <ul>\n         * <li>If no access is allowed, the suffix is \"/noaccess\".\n         * <li>If only public access is allowed, the suffix is \"/public\".\n         * <li>If only public and package access are allowed, the suffix is \"/package\".\n         * <li>If only public, package, and private access are allowed, the suffix is \"/private\".\n         * </ul>\n         * If none of the above cases apply, it is the case that full\n         * access (public, package, private, and protected) is allowed.\n         * In this case, no suffix is added.\n         * This is true only of an object obtained originally from\n         * {@link java.lang.invoke.MethodHandles#lookup MethodHandles.lookup}.\n         * Objects created by {@link java.lang.invoke.MethodHandles.Lookup#in Lookup.in}\n         * always have restricted access, and will display a suffix.\n         * <p>\n         * (It may seem strange that protected access should be\n         * stronger than private access.  Viewed independently from\n         * package access, protected access is the first to be lost,\n         * because it requires a direct subclass relationship between\n         * caller and callee.)\n         * @see #in\n         ",
    "links" : [ "java.lang.Class#getName()", "java.lang.invoke.MethodHandles.Lookup#in", "java.lang.invoke.MethodHandles#lookup" ]
  }, {
    "name" : "public MethodHandle findStatic(Class<?> refc, String name, MethodType type) throws NoSuchMethodException, IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle for a static method.\n         * The type of the method handle will be that of the method.\n         * (Since static methods do not take receivers, there is no\n         * additional receiver argument inserted into the method handle type,\n         * as there would be with {@link #findVirtual findVirtual} or {@link #findSpecial findSpecial}.)\n         * The method and all its argument types must be accessible to the lookup object.\n         * <p>\n         * The returned method handle will have\n         * {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n         * the method's variable arity modifier bit ({@code 0x0080}) is set.\n         * <p>\n         * If the returned method handle is invoked, the method's class will\n         * be initialized, if it has not already been initialized.\n         * <p><b>Example:</b>\n         * <blockquote><pre>{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle MH_asList = publicLookup().findStatic(Arrays.class,\n  \"asList\", methodType(List.class, Object[].class));\nassertEquals(\"[x, y]\", MH_asList.invoke(\"x\", \"y\").toString());\n         * }</pre></blockquote>\n         * @param refc the class from which the method is accessed\n         * @param name the name of the method\n         * @param type the type of the method\n         * @return the desired method handle\n         * @throws NoSuchMethodException if the method does not exist\n         * @throws IllegalAccessException if access checking fails,\n         *                                or if the method is not {@code static},\n         *                                or if the method's variable arity modifier bit\n         *                                is set and {@code asVarargsCollector} fails\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         ",
    "links" : [ "#findVirtual", "#findSpecial" ]
  }, {
    "name" : "private MethodHandle findVirtualForMH(String name, MethodType type)",
    "returnType" : "MethodHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MethodHandle findVirtualForVH(String name, MethodType type)",
    "returnType" : "MethodHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static MethodHandle createMethodHandle(Method method, int handleKind, MethodType methodType)",
    "returnType" : "MethodHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle findVirtual(Class<?> refc, String name, MethodType type) throws NoSuchMethodException, IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle for a virtual method.\n         * The type of the method handle will be that of the method,\n         * with the receiver type (usually {@code refc}) prepended.\n         * The method and all its argument types must be accessible to the lookup object.\n         * <p>\n         * When called, the handle will treat the first argument as a receiver\n         * and dispatch on the receiver's type to determine which method\n         * implementation to enter.\n         * (The dispatching action is identical with that performed by an\n         * {@code invokevirtual} or {@code invokeinterface} instruction.)\n         * <p>\n         * The first argument will be of type {@code refc} if the lookup\n         * class has full privileges to access the member.  Otherwise\n         * the member must be {@code protected} and the first argument\n         * will be restricted in type to the lookup class.\n         * <p>\n         * The returned method handle will have\n         * {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n         * the method's variable arity modifier bit ({@code 0x0080}) is set.\n         * <p>\n         * Because of the general <a href=\"MethodHandles.Lookup.html#equiv\">equivalence</a> between {@code invokevirtual}\n         * instructions and method handles produced by {@code findVirtual},\n         * if the class is {@code MethodHandle} and the name string is\n         * {@code invokeExact} or {@code invoke}, the resulting\n         * method handle is equivalent to one produced by\n         * {@link java.lang.invoke.MethodHandles#exactInvoker MethodHandles.exactInvoker} or\n         * {@link java.lang.invoke.MethodHandles#invoker MethodHandles.invoker}\n         * with the same {@code type} argument.\n         *\n         * <b>Example:</b>\n         * <blockquote><pre>{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle MH_concat = publicLookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle MH_hashCode = publicLookup().findVirtual(Object.class,\n  \"hashCode\", methodType(int.class));\nMethodHandle MH_hashCode_String = publicLookup().findVirtual(String.class,\n  \"hashCode\", methodType(int.class));\nassertEquals(\"xy\", (String) MH_concat.invokeExact(\"x\", \"y\"));\nassertEquals(\"xy\".hashCode(), (int) MH_hashCode.invokeExact((Object)\"xy\"));\nassertEquals(\"xy\".hashCode(), (int) MH_hashCode_String.invokeExact(\"xy\"));\n// interface method:\nMethodHandle MH_subSequence = publicLookup().findVirtual(CharSequence.class,\n  \"subSequence\", methodType(CharSequence.class, int.class, int.class));\nassertEquals(\"def\", MH_subSequence.invoke(\"abcdefghi\", 3, 6).toString());\n// constructor \"internal method\" must be accessed differently:\nMethodType MT_newString = methodType(void.class); //()V for new String()\ntry { assertEquals(\"impossible\", lookup()\n        .findVirtual(String.class, \"<init>\", MT_newString));\n } catch (NoSuchMethodException ex) { } // OK\nMethodHandle MH_newString = publicLookup()\n  .findConstructor(String.class, MT_newString);\nassertEquals(\"\", (String) MH_newString.invokeExact());\n         * }</pre></blockquote>\n         *\n         * @param refc the class or interface from which the method is accessed\n         * @param name the name of the method\n         * @param type the type of the method, with the receiver argument omitted\n         * @return the desired method handle\n         * @throws NoSuchMethodException if the method does not exist\n         * @throws IllegalAccessException if access checking fails,\n         *                                or if the method is {@code static}\n         *                                or if the method's variable arity modifier bit\n         *                                is set and {@code asVarargsCollector} fails\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         ",
    "links" : [ "java.lang.invoke.MethodHandles#exactInvoker", "java.lang.invoke.MethodHandles#invoker" ]
  }, {
    "name" : "public MethodHandle findConstructor(Class<?> refc, MethodType type) throws NoSuchMethodException, IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle which creates an object and initializes it, using\n         * the constructor of the specified type.\n         * The parameter types of the method handle will be those of the constructor,\n         * while the return type will be a reference to the constructor's class.\n         * The constructor and all its argument types must be accessible to the lookup object.\n         * <p>\n         * The requested type must have a return type of {@code void}.\n         * (This is consistent with the JVM's treatment of constructor type descriptors.)\n         * <p>\n         * The returned method handle will have\n         * {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n         * the constructor's variable arity modifier bit ({@code 0x0080}) is set.\n         * <p>\n         * If the returned method handle is invoked, the constructor's class will\n         * be initialized, if it has not already been initialized.\n         * <p><b>Example:</b>\n         * <blockquote><pre>{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle MH_newArrayList = publicLookup().findConstructor(\n  ArrayList.class, methodType(void.class, Collection.class));\nCollection orig = Arrays.asList(\"x\", \"y\");\nCollection copy = (ArrayList) MH_newArrayList.invokeExact(orig);\nassert(orig != copy);\nassertEquals(orig, copy);\n// a variable-arity constructor:\nMethodHandle MH_newProcessBuilder = publicLookup().findConstructor(\n  ProcessBuilder.class, methodType(void.class, String[].class));\nProcessBuilder pb = (ProcessBuilder)\n  MH_newProcessBuilder.invoke(\"x\", \"y\", \"z\");\nassertEquals(\"[x, y, z]\", pb.command().toString());\n         * }</pre></blockquote>\n         * @param refc the class or interface from which the method is accessed\n         * @param type the type of the method, with the receiver argument omitted, and a void return type\n         * @return the desired method handle\n         * @throws NoSuchMethodException if the constructor does not exist\n         * @throws IllegalAccessException if access checking fails\n         *                                or if the method's variable arity modifier bit\n         *                                is set and {@code asVarargsCollector} fails\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public Class<?> findClass(String targetName) throws ClassNotFoundException, IllegalAccessException",
    "returnType" : "Class<?>",
    "comment" : "\n         * Looks up a class by name from the lookup context defined by this {@code Lookup} object,\n         * <a href=\"MethodHandles.Lookup.html#equiv\">as if resolved</a> by an {@code ldc} instruction.\n         * Such a resolution, as specified in JVMS 5.4.3.1 section, attempts to locate and load the class,\n         * and then determines whether the class is accessible to this lookup object.\n         * <p>\n         * The lookup context here is determined by the {@linkplain #lookupClass() lookup class},\n         * its class loader, and the {@linkplain #lookupModes() lookup modes}.\n         *\n         * @param targetName the fully qualified name of the class to be looked up.\n         * @return the requested class.\n         * @throws SecurityException if a security manager is present and it\n         *                           <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws LinkageError if the linkage fails\n         * @throws ClassNotFoundException if the class cannot be loaded by the lookup class' loader.\n         * @throws IllegalAccessException if the class is not accessible, using the allowed access\n         * modes.\n         * @throws NullPointerException if {@code targetName} is null\n         * @since 9\n         * @jvms 5.4.3.1 Class and Interface Resolution\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private MethodHandle createMethodHandleForConstructor(Constructor constructor)",
    "returnType" : "MethodHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static MethodType initMethodType(MethodType constructorType)",
    "returnType" : "MethodType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IllegalAccessException makeAccessException(Class<?> targetClass)",
    "returnType" : "IllegalAccessException",
    "comment" : "\n         * Returns IllegalAccessException due to access violation to the given targetClass.\n         *\n         * This method is called by {@link Lookup#accessClass} and {@link Lookup#ensureInitialized}\n         * which verifies access to a class rather a member.\n         ",
    "links" : [ "#accessClass", "#ensureInitialized" ]
  }, {
    "name" : "public Class<?> accessClass(Class<?> targetClass) throws IllegalAccessException",
    "returnType" : "Class<?>",
    "comment" : "\n         * Determines if a class can be accessed from the lookup context defined by\n         * this {@code Lookup} object. The static initializer of the class is not run.\n         * If {@code targetClass} is an array class, {@code targetClass} is accessible\n         * if the element type of the array class is accessible.  Otherwise,\n         * {@code targetClass} is determined as accessible as follows.\n         *\n         * <p>\n         * If {@code targetClass} is in the same module as the lookup class,\n         * the lookup class is {@code LC} in module {@code M1} and\n         * the previous lookup class is in module {@code M0} or\n         * {@code null} if not present,\n         * {@code targetClass} is accessible if and only if one of the following is true:\n         * <ul>\n         * <li>If this lookup has {@link #PRIVATE} access, {@code targetClass} is\n         *     {@code LC} or other class in the same nest of {@code LC}.</li>\n         * <li>If this lookup has {@link #PACKAGE} access, {@code targetClass} is\n         *     in the same runtime package of {@code LC}.</li>\n         * <li>If this lookup has {@link #MODULE} access, {@code targetClass} is\n         *     a public type in {@code M1}.</li>\n         * <li>If this lookup has {@link #PUBLIC} access, {@code targetClass} is\n         *     a public type in a package exported by {@code M1} to at least  {@code M0}\n         *     if the previous lookup class is present; otherwise, {@code targetClass}\n         *     is a public type in a package exported by {@code M1} unconditionally.</li>\n         * </ul>\n         *\n         * <p>\n         * Otherwise, if this lookup has {@link #UNCONDITIONAL} access, this lookup\n         * can access public types in all modules when the type is in a package\n         * that is exported unconditionally.\n         * <p>\n         * Otherwise, {@code targetClass} is in a different module from {@code lookupClass},\n         * and if this lookup does not have {@code PUBLIC} access, {@code lookupClass}\n         * is inaccessible.\n         * <p>\n         * Otherwise, if this lookup has no {@linkplain #previousLookupClass() previous lookup class},\n         * {@code M1} is the module containing {@code lookupClass} and\n         * {@code M2} is the module containing {@code targetClass},\n         * then {@code targetClass} is accessible if and only if\n         * <ul>\n         * <li>{@code M1} reads {@code M2}, and\n         * <li>{@code targetClass} is public and in a package exported by\n         *     {@code M2} at least to {@code M1}.\n         * </ul>\n         * <p>\n         * Otherwise, if this lookup has a {@linkplain #previousLookupClass() previous lookup class},\n         * {@code M1} and {@code M2} are as before, and {@code M0} is the module\n         * containing the previous lookup class, then {@code targetClass} is accessible\n         * if and only if one of the following is true:\n         * <ul>\n         * <li>{@code targetClass} is in {@code M0} and {@code M1}\n         *     {@linkplain Module#reads reads} {@code M0} and the type is\n         *     in a package that is exported to at least {@code M1}.\n         * <li>{@code targetClass} is in {@code M1} and {@code M0}\n         *     {@linkplain Module#reads reads} {@code M1} and the type is\n         *     in a package that is exported to at least {@code M0}.\n         * <li>{@code targetClass} is in a third module {@code M2} and both {@code M0}\n         *     and {@code M1} reads {@code M2} and the type is in a package\n         *     that is exported to at least both {@code M0} and {@code M2}.\n         * </ul>\n         * <p>\n         * Otherwise, {@code targetClass} is not accessible.\n         *\n         * @param targetClass the class to be access-checked\n         * @return the class that has been access-checked\n         * @throws IllegalAccessException if the class is not accessible from the lookup class\n         * and previous lookup class, if present, using the allowed access modes.\n         * @throws SecurityException if a security manager is present and it\n         *                           <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if {@code targetClass} is {@code null}\n         * @since 9\n         * @see <a href=\"#cross-module-lookup\">Cross-module lookups</a>\n         * @hide\n         ",
    "links" : [ "#UNCONDITIONAL", "#PRIVATE", "#PUBLIC", "#MODULE", "#PACKAGE" ]
  }, {
    "name" : " boolean isClassAccessible(Class<?> refc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Class<?> lookupClassOrNull()",
    "returnType" : "Class<?>",
    "comment" : " This is just for calling out to MethodHandleImpl.",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle findSpecial(Class<?> refc, String name, MethodType type, Class<?> specialCaller) throws NoSuchMethodException, IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces an early-bound method handle for a virtual method.\n         * It will bypass checks for overriding methods on the receiver,\n         * <a href=\"MethodHandles.Lookup.html#equiv\">as if called</a> from an {@code invokespecial}\n         * instruction from within the explicitly specified {@code specialCaller}.\n         * The type of the method handle will be that of the method,\n         * with a suitably restricted receiver type prepended.\n         * (The receiver type will be {@code specialCaller} or a subtype.)\n         * The method and all its argument types must be accessible\n         * to the lookup object.\n         * <p>\n         * Before method resolution,\n         * if the explicitly specified caller class is not identical with the\n         * lookup class, or if this lookup object does not have\n         * <a href=\"MethodHandles.Lookup.html#privacc\">private access</a>\n         * privileges, the access fails.\n         * <p>\n         * The returned method handle will have\n         * {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n         * the method's variable arity modifier bit ({@code 0x0080}) is set.\n         * <p style=\"font-size:smaller;\">\n         * <em>(Note:  JVM internal methods named {@code \"<init>\"} are not visible to this API,\n         * even though the {@code invokespecial} instruction can refer to them\n         * in special circumstances.  Use {@link #findConstructor findConstructor}\n         * to access instance initialization methods in a safe manner.)</em>\n         * <p><b>Example:</b>\n         * <blockquote><pre>{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nstatic class Listie extends ArrayList {\n  public String toString() { return \"[wee Listie]\"; }\n  static Lookup lookup() { return MethodHandles.lookup(); }\n}\n...\n// no access to constructor via invokeSpecial:\nMethodHandle MH_newListie = Listie.lookup()\n  .findConstructor(Listie.class, methodType(void.class));\nListie l = (Listie) MH_newListie.invokeExact();\ntry { assertEquals(\"impossible\", Listie.lookup().findSpecial(\n        Listie.class, \"<init>\", methodType(void.class), Listie.class));\n } catch (NoSuchMethodException ex) { } // OK\n// access to super and self methods via invokeSpecial:\nMethodHandle MH_super = Listie.lookup().findSpecial(\n  ArrayList.class, \"toString\" , methodType(String.class), Listie.class);\nMethodHandle MH_this = Listie.lookup().findSpecial(\n  Listie.class, \"toString\" , methodType(String.class), Listie.class);\nMethodHandle MH_duper = Listie.lookup().findSpecial(\n  Object.class, \"toString\" , methodType(String.class), Listie.class);\nassertEquals(\"[]\", (String) MH_super.invokeExact(l));\nassertEquals(\"\"+l, (String) MH_this.invokeExact(l));\nassertEquals(\"[]\", (String) MH_duper.invokeExact(l)); // ArrayList method\ntry { assertEquals(\"inaccessible\", Listie.lookup().findSpecial(\n        String.class, \"toString\", methodType(String.class), Listie.class));\n } catch (IllegalAccessException ex) { } // OK\nListie subl = new Listie() { public String toString() { return \"[subclass]\"; } };\nassertEquals(\"\"+l, (String) MH_this.invokeExact(subl)); // Listie method\n         * }</pre></blockquote>\n         *\n         * @param refc the class or interface from which the method is accessed\n         * @param name the name of the method (which must not be \"&lt;init&gt;\")\n         * @param type the type of the method, with the receiver argument omitted\n         * @param specialCaller the proposed calling class to perform the {@code invokespecial}\n         * @return the desired method handle\n         * @throws NoSuchMethodException if the method does not exist\n         * @throws IllegalAccessException if access checking fails\n         *                                or if the method's variable arity modifier bit\n         *                                is set and {@code asVarargsCollector} fails\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         ",
    "links" : [ "#findConstructor" ]
  }, {
    "name" : "private MethodHandle findSpecial(Method method, MethodType type, Class<?> refc, Class<?> specialCaller) throws IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle findGetter(Class<?> refc, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle giving read access to a non-static field.\n         * The type of the method handle will have a return type of the field's\n         * value type.\n         * The method handle's single argument will be the instance containing\n         * the field.\n         * Access checking is performed immediately on behalf of the lookup class.\n         * @param refc the class or interface from which the method is accessed\n         * @param name the field's name\n         * @param type the field's type\n         * @return a method handle which can load values from the field\n         * @throws NoSuchFieldException if the field does not exist\n         * @throws IllegalAccessException if access checking fails, or if the field is {@code static}\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         ",
    "links" : [ ]
  }, {
    "name" : "private MethodHandle findAccessor(Class<?> refc, String name, Class<?> type, int kind) throws NoSuchFieldException, IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MethodHandle findAccessor(Field field, Class<?> refc, Class<?> type, int kind, boolean performAccessChecks) throws IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle findSetter(Class<?> refc, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle giving write access to a non-static field.\n         * The type of the method handle will have a void return type.\n         * The method handle will take two arguments, the instance containing\n         * the field, and the value to be stored.\n         * The second argument will be of the field's value type.\n         * Access checking is performed immediately on behalf of the lookup class.\n         * @param refc the class or interface from which the method is accessed\n         * @param name the field's name\n         * @param type the field's type\n         * @return a method handle which can store values into the field\n         * @throws NoSuchFieldException if the field does not exist\n         * @throws IllegalAccessException if access checking fails, or if the field is {@code static}\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public VarHandle findVarHandle(Class<?> recv, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException",
    "returnType" : "VarHandle",
    "comment" : "\n         * Produces a VarHandle giving access to a non-static field {@code name}\n         * of type {@code type} declared in a class of type {@code recv}.\n         * The VarHandle's variable type is {@code type} and it has one\n         * coordinate type, {@code recv}.\n         * <p>\n         * Access checking is performed immediately on behalf of the lookup\n         * class.\n         * <p>\n         * Certain access modes of the returned VarHandle are unsupported under\n         * the following conditions:\n         * <ul>\n         * <li>if the field is declared {@code final}, then the write, atomic\n         *     update, numeric atomic update, and bitwise atomic update access\n         *     modes are unsupported.\n         * <li>if the field type is anything other than {@code byte},\n         *     {@code short}, {@code char}, {@code int}, {@code long},\n         *     {@code float}, or {@code double} then numeric atomic update\n         *     access modes are unsupported.\n         * <li>if the field type is anything other than {@code boolean},\n         *     {@code byte}, {@code short}, {@code char}, {@code int} or\n         *     {@code long} then bitwise atomic update access modes are\n         *     unsupported.\n         * </ul>\n         * <p>\n         * If the field is declared {@code volatile} then the returned VarHandle\n         * will override access to the field (effectively ignore the\n         * {@code volatile} declaration) in accordance to its specified\n         * access modes.\n         * <p>\n         * If the field type is {@code float} or {@code double} then numeric\n         * and atomic update access modes compare values using their bitwise\n         * representation (see {@link Float#floatToRawIntBits} and\n         * {@link Double#doubleToRawLongBits}, respectively).\n         * @apiNote\n         * Bitwise comparison of {@code float} values or {@code double} values,\n         * as performed by the numeric and atomic update access modes, differ\n         * from the primitive {@code ==} operator and the {@link Float#equals}\n         * and {@link Double#equals} methods, specifically with respect to\n         * comparing NaN values or comparing {@code -0.0} with {@code +0.0}.\n         * Care should be taken when performing a compare and set or a compare\n         * and exchange operation with such values since the operation may\n         * unexpectedly fail.\n         * There are many possible NaN values that are considered to be\n         * {@code NaN} in Java, although no IEEE 754 floating-point operation\n         * provided by Java can distinguish between them.  Operation failure can\n         * occur if the expected or witness value is a NaN value and it is\n         * transformed (perhaps in a platform specific manner) into another NaN\n         * value, and thus has a different bitwise representation (see\n         * {@link Float#intBitsToFloat} or {@link Double#longBitsToDouble} for more\n         * details).\n         * The values {@code -0.0} and {@code +0.0} have different bitwise\n         * representations but are considered equal when using the primitive\n         * {@code ==} operator.  Operation failure can occur if, for example, a\n         * numeric algorithm computes an expected value to be say {@code -0.0}\n         * and previously computed the witness value to be say {@code +0.0}.\n         * @param recv the receiver class, of type {@code R}, that declares the\n         * non-static field\n         * @param name the field's name\n         * @param type the field's type, of type {@code T}\n         * @return a VarHandle giving access to non-static fields.\n         * @throws NoSuchFieldException if the field does not exist\n         * @throws IllegalAccessException if access checking fails, or if the field is {@code static}\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         * @since 9\n         ",
    "links" : [ "#equals", "#floatToRawIntBits", "#doubleToRawLongBits", "#intBitsToFloat", "#longBitsToDouble" ]
  }, {
    "name" : "private Field findFieldOfType(final Class<?> refc, String name, Class<?> type) throws NoSuchFieldException",
    "returnType" : "Field",
    "comment" : " BEGIN Android-added: Common field resolution and access check methods.",
    "links" : [ ]
  }, {
    "name" : "private void commonFieldChecks(Field field, Class<?> refc, Class<?> type, boolean isStatic, boolean performAccessChecks) throws IllegalAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle findStaticGetter(Class<?> refc, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle giving read access to a static field.\n         * The type of the method handle will have a return type of the field's\n         * value type.\n         * The method handle will take no arguments.\n         * Access checking is performed immediately on behalf of the lookup class.\n         * <p>\n         * If the returned method handle is invoked, the field's class will\n         * be initialized, if it has not already been initialized.\n         * @param refc the class or interface from which the method is accessed\n         * @param name the field's name\n         * @param type the field's type\n         * @return a method handle which can load values from the field\n         * @throws NoSuchFieldException if the field does not exist\n         * @throws IllegalAccessException if access checking fails, or if the field is not {@code static}\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle findStaticSetter(Class<?> refc, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle giving write access to a static field.\n         * The type of the method handle will have a void return type.\n         * The method handle will take a single\n         * argument, of the field's value type, the value to be stored.\n         * Access checking is performed immediately on behalf of the lookup class.\n         * <p>\n         * If the returned method handle is invoked, the field's class will\n         * be initialized, if it has not already been initialized.\n         * @param refc the class or interface from which the method is accessed\n         * @param name the field's name\n         * @param type the field's type\n         * @return a method handle which can store values into the field\n         * @throws NoSuchFieldException if the field does not exist\n         * @throws IllegalAccessException if access checking fails, or if the field is not {@code static}\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public VarHandle findStaticVarHandle(Class<?> decl, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException",
    "returnType" : "VarHandle",
    "comment" : "\n         * Produces a VarHandle giving access to a static field {@code name} of\n         * type {@code type} declared in a class of type {@code decl}.\n         * The VarHandle's variable type is {@code type} and it has no\n         * coordinate types.\n         * <p>\n         * Access checking is performed immediately on behalf of the lookup\n         * class.\n         * <p>\n         * If the returned VarHandle is operated on, the declaring class will be\n         * initialized, if it has not already been initialized.\n         * <p>\n         * Certain access modes of the returned VarHandle are unsupported under\n         * the following conditions:\n         * <ul>\n         * <li>if the field is declared {@code final}, then the write, atomic\n         *     update, numeric atomic update, and bitwise atomic update access\n         *     modes are unsupported.\n         * <li>if the field type is anything other than {@code byte},\n         *     {@code short}, {@code char}, {@code int}, {@code long},\n         *     {@code float}, or {@code double}, then numeric atomic update\n         *     access modes are unsupported.\n         * <li>if the field type is anything other than {@code boolean},\n         *     {@code byte}, {@code short}, {@code char}, {@code int} or\n         *     {@code long} then bitwise atomic update access modes are\n         *     unsupported.\n         * </ul>\n         * <p>\n         * If the field is declared {@code volatile} then the returned VarHandle\n         * will override access to the field (effectively ignore the\n         * {@code volatile} declaration) in accordance to its specified\n         * access modes.\n         * <p>\n         * If the field type is {@code float} or {@code double} then numeric\n         * and atomic update access modes compare values using their bitwise\n         * representation (see {@link Float#floatToRawIntBits} and\n         * {@link Double#doubleToRawLongBits}, respectively).\n         * @apiNote\n         * Bitwise comparison of {@code float} values or {@code double} values,\n         * as performed by the numeric and atomic update access modes, differ\n         * from the primitive {@code ==} operator and the {@link Float#equals}\n         * and {@link Double#equals} methods, specifically with respect to\n         * comparing NaN values or comparing {@code -0.0} with {@code +0.0}.\n         * Care should be taken when performing a compare and set or a compare\n         * and exchange operation with such values since the operation may\n         * unexpectedly fail.\n         * There are many possible NaN values that are considered to be\n         * {@code NaN} in Java, although no IEEE 754 floating-point operation\n         * provided by Java can distinguish between them.  Operation failure can\n         * occur if the expected or witness value is a NaN value and it is\n         * transformed (perhaps in a platform specific manner) into another NaN\n         * value, and thus has a different bitwise representation (see\n         * {@link Float#intBitsToFloat} or {@link Double#longBitsToDouble} for more\n         * details).\n         * The values {@code -0.0} and {@code +0.0} have different bitwise\n         * representations but are considered equal when using the primitive\n         * {@code ==} operator.  Operation failure can occur if, for example, a\n         * numeric algorithm computes an expected value to be say {@code -0.0}\n         * and previously computed the witness value to be say {@code +0.0}.\n         * @param decl the class that declares the static field\n         * @param name the field's name\n         * @param type the field's type, of type {@code T}\n         * @return a VarHandle giving access to a static field\n         * @throws NoSuchFieldException if the field does not exist\n         * @throws IllegalAccessException if access checking fails, or if the field is not {@code static}\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         * @since 9\n         ",
    "links" : [ "#equals", "#floatToRawIntBits", "#doubleToRawLongBits", "#intBitsToFloat", "#longBitsToDouble" ]
  }, {
    "name" : "public MethodHandle bind(Object receiver, String name, MethodType type) throws NoSuchMethodException, IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces an early-bound method handle for a non-static method.\n         * The receiver must have a supertype {@code defc} in which a method\n         * of the given name and type is accessible to the lookup class.\n         * The method and all its argument types must be accessible to the lookup object.\n         * The type of the method handle will be that of the method,\n         * without any insertion of an additional receiver parameter.\n         * The given receiver will be bound into the method handle,\n         * so that every call to the method handle will invoke the\n         * requested method on the given receiver.\n         * <p>\n         * The returned method handle will have\n         * {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n         * the method's variable arity modifier bit ({@code 0x0080}) is set\n         * <em>and</em> the trailing array argument is not the only argument.\n         * (If the trailing array argument is the only argument,\n         * the given receiver value will be bound to it.)\n         * <p>\n         * This is equivalent to the following code:\n         * <blockquote><pre>{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle mh0 = lookup().findVirtual(defc, name, type);\nMethodHandle mh1 = mh0.bindTo(receiver);\nMethodType mt1 = mh1.type();\nif (mh0.isVarargsCollector())\n  mh1 = mh1.asVarargsCollector(mt1.parameterType(mt1.parameterCount()-1));\nreturn mh1;\n         * }</pre></blockquote>\n         * where {@code defc} is either {@code receiver.getClass()} or a super\n         * type of that class, in which the requested method is accessible\n         * to the lookup class.\n         * (Note that {@code bindTo} does not preserve variable arity.)\n         * @param receiver the object from which the method is accessed\n         * @param name the name of the method\n         * @param type the type of the method, with the receiver argument omitted\n         * @return the desired method handle\n         * @throws NoSuchMethodException if the method does not exist\n         * @throws IllegalAccessException if access checking fails\n         *                                or if the method's variable arity modifier bit\n         *                                is set and {@code asVarargsCollector} fails\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws NullPointerException if any argument is null\n         * @see MethodHandle#bindTo\n         * @see #findVirtual\n         ",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle unreflect(Method m) throws IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Makes a <a href=\"MethodHandleInfo.html#directmh\">direct method handle</a>\n         * to <i>m</i>, if the lookup class has permission.\n         * If <i>m</i> is non-static, the receiver argument is treated as an initial argument.\n         * If <i>m</i> is virtual, overriding is respected on every call.\n         * Unlike the Core Reflection API, exceptions are <em>not</em> wrapped.\n         * The type of the method handle will be that of the method,\n         * with the receiver type prepended (but only if it is non-static).\n         * If the method's {@code accessible} flag is not set,\n         * access checking is performed immediately on behalf of the lookup class.\n         * If <i>m</i> is not public, do not share the resulting handle with untrusted parties.\n         * <p>\n         * The returned method handle will have\n         * {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n         * the method's variable arity modifier bit ({@code 0x0080}) is set.\n         * <p>\n         * If <i>m</i> is static, and\n         * if the returned method handle is invoked, the method's class will\n         * be initialized, if it has not already been initialized.\n         * @param m the reflected method\n         * @return a method handle which can invoke the reflected method\n         * @throws IllegalAccessException if access checking fails\n         *                                or if the method's variable arity modifier bit\n         *                                is set and {@code asVarargsCollector} fails\n         * @throws NullPointerException if the argument is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle unreflectSpecial(Method m, Class<?> specialCaller) throws IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle for a reflected method.\n         * It will bypass checks for overriding methods on the receiver,\n         * <a href=\"MethodHandles.Lookup.html#equiv\">as if called</a> from an {@code invokespecial}\n         * instruction from within the explicitly specified {@code specialCaller}.\n         * The type of the method handle will be that of the method,\n         * with a suitably restricted receiver type prepended.\n         * (The receiver type will be {@code specialCaller} or a subtype.)\n         * If the method's {@code accessible} flag is not set,\n         * access checking is performed immediately on behalf of the lookup class,\n         * as if {@code invokespecial} instruction were being linked.\n         * <p>\n         * Before method resolution,\n         * if the explicitly specified caller class is not identical with the\n         * lookup class, or if this lookup object does not have\n         * <a href=\"MethodHandles.Lookup.html#privacc\">private access</a>\n         * privileges, the access fails.\n         * <p>\n         * The returned method handle will have\n         * {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n         * the method's variable arity modifier bit ({@code 0x0080}) is set.\n         * @param m the reflected method\n         * @param specialCaller the class nominally calling the method\n         * @return a method handle which can invoke the reflected method\n         * @throws IllegalAccessException if access checking fails\n         *                                or if the method's variable arity modifier bit\n         *                                is set and {@code asVarargsCollector} fails\n         * @throws NullPointerException if any argument is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle unreflectConstructor(Constructor<?> c) throws IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle for a reflected constructor.\n         * The type of the method handle will be that of the constructor,\n         * with the return type changed to the declaring class.\n         * The method handle will perform a {@code newInstance} operation,\n         * creating a new instance of the constructor's class on the\n         * arguments passed to the method handle.\n         * <p>\n         * If the constructor's {@code accessible} flag is not set,\n         * access checking is performed immediately on behalf of the lookup class.\n         * <p>\n         * The returned method handle will have\n         * {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n         * the constructor's variable arity modifier bit ({@code 0x0080}) is set.\n         * <p>\n         * If the returned method handle is invoked, the constructor's class will\n         * be initialized, if it has not already been initialized.\n         * @param c the reflected constructor\n         * @return a method handle which can invoke the reflected constructor\n         * @throws IllegalAccessException if access checking fails\n         *                                or if the method's variable arity modifier bit\n         *                                is set and {@code asVarargsCollector} fails\n         * @throws NullPointerException if the argument is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle unreflectGetter(Field f) throws IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle giving read access to a reflected field.\n         * The type of the method handle will have a return type of the field's\n         * value type.\n         * If the field is static, the method handle will take no arguments.\n         * Otherwise, its single argument will be the instance containing\n         * the field.\n         * If the field's {@code accessible} flag is not set,\n         * access checking is performed immediately on behalf of the lookup class.\n         * <p>\n         * If the field is static, and\n         * if the returned method handle is invoked, the field's class will\n         * be initialized, if it has not already been initialized.\n         * @param f the reflected field\n         * @return a method handle which can load values from the reflected field\n         * @throws IllegalAccessException if access checking fails\n         * @throws NullPointerException if the argument is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public MethodHandle unreflectSetter(Field f) throws IllegalAccessException",
    "returnType" : "MethodHandle",
    "comment" : "\n         * Produces a method handle giving write access to a reflected field.\n         * The type of the method handle will have a void return type.\n         * If the field is static, the method handle will take a single\n         * argument, of the field's value type, the value to be stored.\n         * Otherwise, the two arguments will be the instance containing\n         * the field, and the value to be stored.\n         * If the field's {@code accessible} flag is not set,\n         * access checking is performed immediately on behalf of the lookup class.\n         * <p>\n         * If the field is static, and\n         * if the returned method handle is invoked, the field's class will\n         * be initialized, if it has not already been initialized.\n         * @param f the reflected field\n         * @return a method handle which can store values into the reflected field\n         * @throws IllegalAccessException if access checking fails\n         * @throws NullPointerException if the argument is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public VarHandle unreflectVarHandle(Field f) throws IllegalAccessException",
    "returnType" : "VarHandle",
    "comment" : "\n         * Produces a VarHandle giving access to a reflected field {@code f}\n         * of type {@code T} declared in a class of type {@code R}.\n         * The VarHandle's variable type is {@code T}.\n         * If the field is non-static the VarHandle has one coordinate type,\n         * {@code R}.  Otherwise, the field is static, and the VarHandle has no\n         * coordinate types.\n         * <p>\n         * Access checking is performed immediately on behalf of the lookup\n         * class, regardless of the value of the field's {@code accessible}\n         * flag.\n         * <p>\n         * If the field is static, and if the returned VarHandle is operated\n         * on, the field's declaring class will be initialized, if it has not\n         * already been initialized.\n         * <p>\n         * Certain access modes of the returned VarHandle are unsupported under\n         * the following conditions:\n         * <ul>\n         * <li>if the field is declared {@code final}, then the write, atomic\n         *     update, numeric atomic update, and bitwise atomic update access\n         *     modes are unsupported.\n         * <li>if the field type is anything other than {@code byte},\n         *     {@code short}, {@code char}, {@code int}, {@code long},\n         *     {@code float}, or {@code double} then numeric atomic update\n         *     access modes are unsupported.\n         * <li>if the field type is anything other than {@code boolean},\n         *     {@code byte}, {@code short}, {@code char}, {@code int} or\n         *     {@code long} then bitwise atomic update access modes are\n         *     unsupported.\n         * </ul>\n         * <p>\n         * If the field is declared {@code volatile} then the returned VarHandle\n         * will override access to the field (effectively ignore the\n         * {@code volatile} declaration) in accordance to its specified\n         * access modes.\n         * <p>\n         * If the field type is {@code float} or {@code double} then numeric\n         * and atomic update access modes compare values using their bitwise\n         * representation (see {@link Float#floatToRawIntBits} and\n         * {@link Double#doubleToRawLongBits}, respectively).\n         * @apiNote\n         * Bitwise comparison of {@code float} values or {@code double} values,\n         * as performed by the numeric and atomic update access modes, differ\n         * from the primitive {@code ==} operator and the {@link Float#equals}\n         * and {@link Double#equals} methods, specifically with respect to\n         * comparing NaN values or comparing {@code -0.0} with {@code +0.0}.\n         * Care should be taken when performing a compare and set or a compare\n         * and exchange operation with such values since the operation may\n         * unexpectedly fail.\n         * There are many possible NaN values that are considered to be\n         * {@code NaN} in Java, although no IEEE 754 floating-point operation\n         * provided by Java can distinguish between them.  Operation failure can\n         * occur if the expected or witness value is a NaN value and it is\n         * transformed (perhaps in a platform specific manner) into another NaN\n         * value, and thus has a different bitwise representation (see\n         * {@link Float#intBitsToFloat} or {@link Double#longBitsToDouble} for more\n         * details).\n         * The values {@code -0.0} and {@code +0.0} have different bitwise\n         * representations but are considered equal when using the primitive\n         * {@code ==} operator.  Operation failure can occur if, for example, a\n         * numeric algorithm computes an expected value to be say {@code -0.0}\n         * and previously computed the witness value to be say {@code +0.0}.\n         * @param f the reflected field, with a field of type {@code T}, and\n         * a declaring class of type {@code R}\n         * @return a VarHandle giving access to non-static fields or a static\n         * field\n         * @throws IllegalAccessException if access checking fails\n         * @throws NullPointerException if the argument is null\n         * @since 9\n         ",
    "links" : [ "#equals", "#floatToRawIntBits", "#doubleToRawLongBits", "#intBitsToFloat", "#longBitsToDouble" ]
  }, {
    "name" : "public MethodHandleInfo revealDirect(MethodHandle target)",
    "returnType" : "MethodHandleInfo",
    "comment" : "\n         * Cracks a <a href=\"MethodHandleInfo.html#directmh\">direct method handle</a>\n         * created by this lookup object or a similar one.\n         * Security and access checks are performed to ensure that this lookup object\n         * is capable of reproducing the target method handle.\n         * This means that the cracking may fail if target is a direct method handle\n         * but was created by an unrelated lookup object.\n         * This can happen if the method handle is <a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive</a>\n         * and was created by a lookup object for a different class.\n         * @param target a direct method handle to crack into symbolic reference components\n         * @return a symbolic reference which can be used to reconstruct this method handle from this lookup object\n         * @exception SecurityException if a security manager is present and it\n         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>\n         * @throws IllegalArgumentException if the target is not a direct method handle or if access checking fails\n         * @exception NullPointerException if the target is {@code null}\n         * @see MethodHandleInfo\n         * @since 1.8\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasPrivateAccess()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void checkAccess(Class<?> refc, Class<?> defc, int mods, String methName) throws IllegalAccessException",
    "returnType" : "void",
    "comment" : " Check public/protected/private bits on the symbolic reference class and its member. ",
    "links" : [ ]
  }, {
    "name" : " String accessFailedMessage(Class<?> refc, Class<?> defc, int mods)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkSpecialCaller(Class<?> specialCaller, Class<?> refc) throws IllegalAccessException",
    "returnType" : "void",
    "comment" : " and is implemented by the caller.",
    "links" : [ ]
  }, {
    "name" : "private void throwMakeAccessException(String message, Object from) throws IllegalAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkReturnType(Method method, MethodType methodType) throws NoSuchMethodException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int fixmods(int mods)", "public Class<?> lookupClass()", "public int lookupModes()", "public Lookup in(Class<?> requestedLookupClass)", "private static void checkUnprivilegedlookupClass(Class<?> lookupClass, int allowedModes)", "public String toString()", "public MethodHandle findStatic(Class<?> refc, String name, MethodType type) throws NoSuchMethodException, IllegalAccessException", "private MethodHandle findVirtualForMH(String name, MethodType type)", "private MethodHandle findVirtualForVH(String name, MethodType type)", "private static MethodHandle createMethodHandle(Method method, int handleKind, MethodType methodType)", "public MethodHandle findVirtual(Class<?> refc, String name, MethodType type) throws NoSuchMethodException, IllegalAccessException", "public MethodHandle findConstructor(Class<?> refc, MethodType type) throws NoSuchMethodException, IllegalAccessException", "public Class<?> findClass(String targetName) throws ClassNotFoundException, IllegalAccessException", "private MethodHandle createMethodHandleForConstructor(Constructor constructor)", "private static MethodType initMethodType(MethodType constructorType)", "private IllegalAccessException makeAccessException(Class<?> targetClass)", "public Class<?> accessClass(Class<?> targetClass) throws IllegalAccessException", " boolean isClassAccessible(Class<?> refc)", "private Class<?> lookupClassOrNull()", "public MethodHandle findSpecial(Class<?> refc, String name, MethodType type, Class<?> specialCaller) throws NoSuchMethodException, IllegalAccessException", "private MethodHandle findSpecial(Method method, MethodType type, Class<?> refc, Class<?> specialCaller) throws IllegalAccessException", "public MethodHandle findGetter(Class<?> refc, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException", "private MethodHandle findAccessor(Class<?> refc, String name, Class<?> type, int kind) throws NoSuchFieldException, IllegalAccessException", "private MethodHandle findAccessor(Field field, Class<?> refc, Class<?> type, int kind, boolean performAccessChecks) throws IllegalAccessException", "public MethodHandle findSetter(Class<?> refc, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException", "public VarHandle findVarHandle(Class<?> recv, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException", "private Field findFieldOfType(final Class<?> refc, String name, Class<?> type) throws NoSuchFieldException", "private void commonFieldChecks(Field field, Class<?> refc, Class<?> type, boolean isStatic, boolean performAccessChecks) throws IllegalAccessException", "public MethodHandle findStaticGetter(Class<?> refc, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException", "public MethodHandle findStaticSetter(Class<?> refc, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException", "public VarHandle findStaticVarHandle(Class<?> decl, String name, Class<?> type) throws NoSuchFieldException, IllegalAccessException", "public MethodHandle bind(Object receiver, String name, MethodType type) throws NoSuchMethodException, IllegalAccessException", "public MethodHandle unreflect(Method m) throws IllegalAccessException", "public MethodHandle unreflectSpecial(Method m, Class<?> specialCaller) throws IllegalAccessException", "public MethodHandle unreflectConstructor(Constructor<?> c) throws IllegalAccessException", "public MethodHandle unreflectGetter(Field f) throws IllegalAccessException", "public MethodHandle unreflectSetter(Field f) throws IllegalAccessException", "public VarHandle unreflectVarHandle(Field f) throws IllegalAccessException", "public MethodHandleInfo revealDirect(MethodHandle target)", "private boolean hasPrivateAccess()", " void checkAccess(Class<?> refc, Class<?> defc, int mods, String methName) throws IllegalAccessException", " String accessFailedMessage(Class<?> refc, Class<?> defc, int mods)", "private void checkSpecialCaller(Class<?> specialCaller, Class<?> refc) throws IllegalAccessException", "private void throwMakeAccessException(String message, Object from) throws IllegalAccessException", "private void checkReturnType(Method method, MethodType methodType) throws NoSuchMethodException" ],
  "variableNames" : [ "lookupClass", "allowedModes", "PUBLIC", "PRIVATE", "PROTECTED", "PACKAGE", "ALL_MODES", "PUBLIC_LOOKUP", "IMPL_LOOKUP" ]
}