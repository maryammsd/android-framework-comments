{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/NetworkBadging.java",
  "packageName" : "android.net",
  "className" : "NetworkBadging",
  "comment" : "\n * Utility methods for working with network badging.\n *\n * @removed\n *\n ",
  "variables" : [ {
    "name" : "BADGING_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BADGING_SD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BADGING_HD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BADGING_4K",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Drawable getWifiIcon(@IntRange(from = 0, to = 4) int signalLevel, @Badging int badging, @Nullable Theme theme)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns a Wi-Fi icon for a network with a given signal level and badging value.\n     *\n     * @param signalLevel The level returned by {@link WifiManager#calculateSignalLevel(int, int)}\n     *                    for a network. Must be between 0 and {@link WifiManager#RSSI_LEVELS}-1.\n     * @param badging  {@see NetworkBadging#Badging}, retrieved from\n     *                 {@link ScoredNetwork#calculateBadge(int)}.\n     * @param theme The theme for the current application, may be null.\n     * @return Drawable for the given icon\n     * @throws IllegalArgumentException if {@code signalLevel} is out of range or {@code badging}\n     *                                  is an invalid value\n     ",
    "links" : [ "WifiManager#calculateSignalLevel", "WifiManager#RSSI_LEVELS", "ScoredNetwork#calculateBadge" ]
  }, {
    "name" : "private static int getWifiSignalResource(int signalLevel)",
    "returnType" : "int",
    "comment" : "\n     * Returns the wifi signal resource id for the given signal level.\n     *\n     * <p>This wifi signal resource is a wifi icon to be displayed by itself when there is no badge.\n     *\n     * @param signalLevel The level returned by {@link WifiManager#calculateSignalLevel(int, int)}\n     *                    for a network. Must be between 0 and {@link WifiManager#RSSI_LEVELS}-1.\n     * @return the @DrawableRes for the icon\n     * @throws IllegalArgumentException for an invalid signal level\n     * @hide\n     ",
    "links" : [ "WifiManager#calculateSignalLevel", "WifiManager#RSSI_LEVELS" ]
  } ],
  "variableNames" : [ "BADGING_NONE", "BADGING_SD", "BADGING_HD", "BADGING_4K" ],
  "methodNames" : [ "public static Drawable getWifiIcon(@IntRange(from = 0, to = 4) int signalLevel, @Badging int badging, @Nullable Theme theme)", "private static int getWifiSignalResource(int signalLevel)" ]
}