{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/SignalThresholdInfo.java",
  "packageName" : "android.telephony",
  "className" : "Builder",
  "comment" : "\n     * Builder class to create {@link SignalThresholdInfo} objects.\n     ",
  "links" : [ "android.telephony.SignalThresholdInfo" ],
  "variables" : [ {
    "name" : "mRan",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSignalMeasurementType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHysteresisMs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHysteresisDb",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThresholds",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setRadioAccessNetworkType(@AccessNetworkConstants.RadioAccessNetworkType int ran)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the radio access network type for the builder instance.\n         *\n         * @param ran The radio access network type\n         * @return the builder to facilitate the chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSignalMeasurementType(@SignalMeasurementType int signalMeasurementType)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the signal measurement type for the builder instance.\n         *\n         * @param signalMeasurementType The signal measurement type\n         * @return the builder to facilitate the chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setHysteresisMs(int hysteresisMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the hysteresis time in milliseconds to prevent flapping. A value of 0 disables\n         * hysteresis.\n         *\n         * @param hysteresisMs the hysteresis time in milliseconds\n         * @return the builder to facilitate the chaining\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setHysteresisDb(@IntRange(from = 0) int hysteresisDb)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the interval in dB defining the required minimum magnitude change to report a\n         * signal strength change. A value of zero disables dB-based hysteresis restrictions.\n         * Note:\n         * <p>Default hysteresis db value is 2. Minimum hysteresis db value allowed to set is 0.\n         * If hysteresis db value is not set, default hysteresis db value of 2 will be used.\n         *\n         * @param hysteresisDb the interval in dB\n         * @return the builder to facilitate the chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setThresholds(@NonNull int[] thresholds)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the signal strength thresholds of the corresponding signal measurement type.\n         *\n         * The range and unit must reference specific SignalMeasurementType. The length of the\n         * thresholds should between the numbers return from\n         * {@link #getMinimumNumberOfThresholdsAllowed()} and\n         * {@link #getMaximumNumberOfThresholdsAllowed()}. An IllegalArgumentException will throw\n         * otherwise.\n         *\n         * @param thresholds array of integer as the signal threshold values\n         * @return the builder to facilitate the chaining\n         *\n         * @see #SIGNAL_MEASUREMENT_TYPE_RSSI\n         * @see #SIGNAL_MEASUREMENT_TYPE_RSCP\n         * @see #SIGNAL_MEASUREMENT_TYPE_RSRP\n         * @see #SIGNAL_MEASUREMENT_TYPE_RSRQ\n         * @see #SIGNAL_MEASUREMENT_TYPE_RSSNR\n         * @see #SIGNAL_MEASUREMENT_TYPE_SSRSRP\n         * @see #SIGNAL_MEASUREMENT_TYPE_SSRSRQ\n         * @see #SIGNAL_MEASUREMENT_TYPE_SSSINR\n         * @see #SIGNAL_MEASUREMENT_TYPE_ECNO\n         * @see #getThresholds() for more details on signal strength thresholds\n         ",
    "links" : [ "#getMaximumNumberOfThresholdsAllowed()", "#getMinimumNumberOfThresholdsAllowed()" ]
  }, {
    "name" : "public Builder setThresholds(@NonNull int[] thresholds, boolean isSystem)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the signal strength thresholds for the corresponding signal measurement type.\n         *\n         * @param thresholds array of integer as the signal threshold values\n         * @param isSystem true is the caller is system which does not have restrictions on\n         *        the length of thresholds array.\n         * @return the builder to facilitate the chaining\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIsEnabled(boolean isEnabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Set if the modem should trigger the report based on the criteria.\n         *\n         * @param isEnabled true if the modem should trigger the report based on the criteria\n         * @return the builder to facilitate the chaining\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public SignalThresholdInfo build()",
    "returnType" : "SignalThresholdInfo",
    "comment" : "\n         * Build {@link SignalThresholdInfo} object.\n         *\n         * @return the SignalThresholdInfo object build out\n         *\n         * @throws IllegalArgumentException if the signal measurement type is invalid, any value in\n         * the thresholds is out of range, or the RAN is not allowed to set with the signal\n         * measurement type\n         ",
    "links" : [ "android.telephony.SignalThresholdInfo" ]
  } ],
  "methodNames" : [ "public Builder setRadioAccessNetworkType(@AccessNetworkConstants.RadioAccessNetworkType int ran)", "public Builder setSignalMeasurementType(@SignalMeasurementType int signalMeasurementType)", "public Builder setHysteresisMs(int hysteresisMs)", "public Builder setHysteresisDb(@IntRange(from = 0) int hysteresisDb)", "public Builder setThresholds(@NonNull int[] thresholds)", "public Builder setThresholds(@NonNull int[] thresholds, boolean isSystem)", "public Builder setIsEnabled(boolean isEnabled)", "public SignalThresholdInfo build()" ],
  "variableNames" : [ "mRan", "mSignalMeasurementType", "mHysteresisMs", "mHysteresisDb", "mThresholds", "mIsEnabled" ]
}