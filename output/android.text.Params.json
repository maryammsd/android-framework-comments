{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/PrecomputedText.java",
  "packageName" : "android.text",
  "className" : "Params",
  "comment" : "\n     * The information required for building {@link PrecomputedText}.\n     *\n     * Contains information required for precomputing text measurement metadata, so it can be done\n     * in isolation of a {@link android.widget.TextView} or {@link StaticLayout}, when final layout\n     * constraints are not known.\n     ",
  "variables" : [ {
    "name" : "mPaint",
    "type" : "TextPaint",
    "comment" : " The TextPaint used for measurement.",
    "links" : [ ]
  }, {
    "name" : "mTextDir",
    "type" : "TextDirectionHeuristic",
    "comment" : " The requested text direction.",
    "links" : [ ]
  }, {
    "name" : "mBreakStrategy",
    "type" : "int",
    "comment" : " The break strategy for this measured text.",
    "links" : [ ]
  }, {
    "name" : "mHyphenationFrequency",
    "type" : "int",
    "comment" : " The hyphenation frequency for this measured text.",
    "links" : [ ]
  }, {
    "name" : "UNUSABLE",
    "type" : "int",
    "comment" : "\n         * Constant for returning value of checkResultUsable indicating that given parameter is not\n         * compatible.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NEED_RECOMPUTE",
    "type" : "int",
    "comment" : "\n         * Constant for returning value of checkResultUsable indicating that given parameter is not\n         * compatible but partially usable for creating new PrecomputedText.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "USABLE",
    "type" : "int",
    "comment" : "\n         * Constant for returning value of checkResultUsable indicating that given parameter is\n         * compatible.\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public TextPaint getTextPaint()",
    "returnType" : "TextPaint",
    "comment" : "\n         * Returns the {@link TextPaint} for this text.\n         *\n         * @return A {@link TextPaint}\n         ",
    "links" : [ "android.text.TextPaint" ]
  }, {
    "name" : "public TextDirectionHeuristic getTextDirection()",
    "returnType" : "TextDirectionHeuristic",
    "comment" : "\n         * Returns the {@link TextDirectionHeuristic} for this text.\n         *\n         * @return A {@link TextDirectionHeuristic}\n         ",
    "links" : [ "android.text.TextDirectionHeuristic" ]
  }, {
    "name" : "public int getBreakStrategy()",
    "returnType" : "int",
    "comment" : "\n         * Returns the break strategy for this text.\n         *\n         * @return A line break strategy\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getHyphenationFrequency()",
    "returnType" : "int",
    "comment" : "\n         * Returns the hyphenation frequency for this text.\n         *\n         * @return A hyphenation frequency\n         ",
    "links" : [ ]
  }, {
    "name" : "public int checkResultUsable(@NonNull TextPaint paint, @NonNull TextDirectionHeuristic textDir, @Layout.BreakStrategy int strategy, @Layout.HyphenationFrequency int frequency)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "\n         * Check if the same text layout.\n         *\n         * @return true if this and the given param result in the same text layout\n         ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPaint", "mTextDir", "mBreakStrategy", "mHyphenationFrequency", "UNUSABLE", "NEED_RECOMPUTE", "USABLE" ],
  "methodNames" : [ "public TextPaint getTextPaint()", "public TextDirectionHeuristic getTextDirection()", "public int getBreakStrategy()", "public int getHyphenationFrequency()", "public int checkResultUsable(@NonNull TextPaint paint, @NonNull TextDirectionHeuristic textDir, @Layout.BreakStrategy int strategy, @Layout.HyphenationFrequency int frequency)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public String toString()" ]
}