{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/rtp/RtpStream.java",
  "packageName" : "android.net.rtp",
  "className" : "RtpStream",
  "comment" : "\n * RtpStream represents the base class of streams which send and receive network\n * packets with media payloads over Real-time Transport Protocol (RTP).\n *\n * <p class=\"note\">Using this class requires\n * {@link android.Manifest.permission#INTERNET} permission.</p>\n ",
  "variables" : [ {
    "name" : "MODE_NORMAL",
    "type" : "int",
    "comment" : "\n     * This mode indicates that the stream sends and receives packets at the\n     * same time. This is the initial mode for new streams.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_SEND_ONLY",
    "type" : "int",
    "comment" : "\n     * This mode indicates that the stream only sends packets.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_RECEIVE_ONLY",
    "type" : "int",
    "comment" : "\n     * This mode indicates that the stream only receives packets.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_LAST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalAddress",
    "type" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteAddress",
    "type" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemotePort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocket",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native int create(String address) throws SocketException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getLocalAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the network address of the local host.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLocalPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the network port of the local host.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getRemoteAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the network address of the remote host or {@code null} if the\n     * stream is not associated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRemotePort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the network port of the remote host or {@code -1} if the stream\n     * is not associated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBusy()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the stream is busy. In this case most of the\n     * setter methods are disabled. This method is intended to be overridden\n     * by subclasses.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMode(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Changes the current mode. It must be one of {@link #MODE_NORMAL},\n     * {@link #MODE_SEND_ONLY}, and {@link #MODE_RECEIVE_ONLY}.\n     *\n     * @param mode The mode to change to.\n     * @throws IllegalArgumentException if the mode is invalid.\n     * @throws IllegalStateException if the stream is busy.\n     * @see #isBusy()\n     ",
    "links" : [ "#MODE_SEND_ONLY", "#MODE_NORMAL", "#MODE_RECEIVE_ONLY" ]
  }, {
    "name" : "public void associate(InetAddress address, int port)",
    "returnType" : "void",
    "comment" : "\n     * Associates with a remote host. This defines the destination of the\n     * outgoing packets.\n     *\n     * @param address The network address of the remote host.\n     * @param port The network port of the remote host.\n     * @throws IllegalArgumentException if the address is not supported or the\n     *     port is invalid.\n     * @throws IllegalStateException if the stream is busy.\n     * @see #isBusy()\n     ",
    "links" : [ ]
  }, {
    "name" : " int getSocket()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Releases allocated resources. The stream becomes inoperable after calling\n     * this method.\n     *\n     * @throws IllegalStateException if the stream is busy.\n     * @see #isBusy()\n     ",
    "links" : [ ]
  }, {
    "name" : "private native void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MODE_NORMAL", "MODE_SEND_ONLY", "MODE_RECEIVE_ONLY", "MODE_LAST", "mLocalAddress", "mLocalPort", "mRemoteAddress", "mRemotePort", "mMode", "mSocket" ],
  "methodNames" : [ "private native int create(String address) throws SocketException", "public InetAddress getLocalAddress()", "public int getLocalPort()", "public InetAddress getRemoteAddress()", "public int getRemotePort()", "public boolean isBusy()", "public int getMode()", "public void setMode(int mode)", "public void associate(InetAddress address, int port)", " int getSocket()", "public void release()", "private native void close()", "protected void finalize() throws Throwable" ]
}