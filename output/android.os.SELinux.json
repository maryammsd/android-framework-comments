{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/SELinux.java",
  "packageName" : "android.os",
  "className" : "SELinux",
  "comment" : "\n * This class provides access to the centralized jni bindings for\n * SELinux interaction.\n * {@hide}\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELINUX_ANDROID_RESTORECON_NOCHANGE",
    "type" : "int",
    "comment" : " Keep in sync with ./external/selinux/libselinux/include/selinux/android.h ",
    "links" : [ ]
  }, {
    "name" : "SELINUX_ANDROID_RESTORECON_VERBOSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELINUX_ANDROID_RESTORECON_RECURSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELINUX_ANDROID_RESTORECON_FORCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELINUX_ANDROID_RESTORECON_DATADATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELINUX_ANDROID_RESTORECON_SKIPCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELINUX_ANDROID_RESTORECON_CROSS_FILESYSTEMS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELINUX_ANDROID_RESTORECON_SKIP_SEHASH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final native String fileSelabelLookup(String path)",
    "returnType" : "String",
    "comment" : "\n     * Get context associated with path by file_contexts.\n     * @param path path to the regular file to get the security context for.\n     * @return a String representing the security context or null on failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native boolean isSELinuxEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether SELinux is disabled or enabled.\n     * @return a boolean indicating whether SELinux is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native boolean isSELinuxEnforced()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether SELinux is permissive or enforcing.\n     * @return a boolean indicating whether SELinux is enforcing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native boolean setFSCreateContext(String context)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the security context for newly created file objects.\n     * @param context a security context given as a String.\n     * @return a boolean indicating whether the operation succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native boolean setFileContext(String path, String context)",
    "returnType" : "boolean",
    "comment" : "\n     * Change the security context of an existing file object.\n     * @param path representing the path of file object to relabel.\n     * @param context new security context given as a String.\n     * @return a boolean indicating whether the operation succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native String getFileContext(String path)",
    "returnType" : "String",
    "comment" : "\n     * Get the security context of a file object.\n     * @param path the pathname of the file object.\n     * @return a security context given as a String.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native String getPeerContext(FileDescriptor fd)",
    "returnType" : "String",
    "comment" : "\n     * Get the security context of a peer socket.\n     * @param fd FileDescriptor class of the peer socket.\n     * @return a String representing the peer socket security context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native String getFileContext(FileDescriptor fd)",
    "returnType" : "String",
    "comment" : "\n     * Get the security context of a file descriptor of a file.\n     * @param fd FileDescriptor of a file.\n     * @return a String representing the file descriptor security context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native String getContext()",
    "returnType" : "String",
    "comment" : "\n     * Gets the security context of the current process.\n     * @return a String representing the security context of the current process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native String getPidContext(int pid)",
    "returnType" : "String",
    "comment" : "\n     * Gets the security context of a given process id.\n     * @param pid an int representing the process id to check.\n     * @return a String representing the security context of the given pid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native boolean checkSELinuxAccess(String scon, String tcon, String tclass, String perm)",
    "returnType" : "boolean",
    "comment" : "\n     * Check permissions between two security contexts.\n     * @param scon The source or subject security context.\n     * @param tcon The target or object security context.\n     * @param tclass The object security class name.\n     * @param perm The permission name.\n     * @return a boolean indicating whether permission was granted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean restorecon(String pathname) throws NullPointerException",
    "returnType" : "boolean",
    "comment" : "\n     * Restores a file to its default SELinux security context.\n     * If the system is not compiled with SELinux, then {@code true}\n     * is automatically returned.\n     * If SELinux is compiled in, but disabled, then {@code true} is\n     * returned.\n     *\n     * @param pathname The pathname of the file to be relabeled.\n     * @return a boolean indicating whether the relabeling succeeded.\n     * @exception NullPointerException if the pathname is a null object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native boolean native_restorecon(String pathname, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Restores a file to its default SELinux security context.\n     * If the system is not compiled with SELinux, then {@code true}\n     * is automatically returned.\n     * If SELinux is compiled in, but disabled, then {@code true} is\n     * returned.\n     *\n     * @param pathname The pathname of the file to be relabeled.\n     * @return a boolean indicating whether the relabeling succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean restorecon(File file) throws NullPointerException",
    "returnType" : "boolean",
    "comment" : "\n     * Restores a file to its default SELinux security context.\n     * If the system is not compiled with SELinux, then {@code true}\n     * is automatically returned.\n     * If SELinux is compiled in, but disabled, then {@code true} is\n     * returned.\n     *\n     * @param file The File object representing the path to be relabeled.\n     * @return a boolean indicating whether the relabeling succeeded.\n     * @exception NullPointerException if the file is a null object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean restoreconRecursive(File file)",
    "returnType" : "boolean",
    "comment" : "\n     * Recursively restores all files under the given path to their default\n     * SELinux security context. If the system is not compiled with SELinux,\n     * then {@code true} is automatically returned. If SELinux is compiled in,\n     * but disabled, then {@code true} is returned.\n     *\n     * @return a boolean indicating whether the relabeling succeeded.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final native String fileSelabelLookup(String path)", "public static final native boolean isSELinuxEnabled()", "public static final native boolean isSELinuxEnforced()", "public static final native boolean setFSCreateContext(String context)", "public static final native boolean setFileContext(String path, String context)", "public static final native String getFileContext(String path)", "public static final native String getPeerContext(FileDescriptor fd)", "public static final native String getFileContext(FileDescriptor fd)", "public static final native String getContext()", "public static final native String getPidContext(int pid)", "public static final native boolean checkSELinuxAccess(String scon, String tcon, String tclass, String perm)", "public static boolean restorecon(String pathname) throws NullPointerException", "private static native boolean native_restorecon(String pathname, int flags)", "public static boolean restorecon(File file) throws NullPointerException", "public static boolean restoreconRecursive(File file)" ],
  "variableNames" : [ "TAG", "SELINUX_ANDROID_RESTORECON_NOCHANGE", "SELINUX_ANDROID_RESTORECON_VERBOSE", "SELINUX_ANDROID_RESTORECON_RECURSE", "SELINUX_ANDROID_RESTORECON_FORCE", "SELINUX_ANDROID_RESTORECON_DATADATA", "SELINUX_ANDROID_RESTORECON_SKIPCE", "SELINUX_ANDROID_RESTORECON_CROSS_FILESYSTEMS", "SELINUX_ANDROID_RESTORECON_SKIP_SEHASH" ]
}