{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/Settings.java",
  "packageName" : "android.provider",
  "className" : "Config",
  "comment" : "\n     * Configuration system settings, containing settings which are applied identically for all\n     * defined users. Only Android can read these and only a specific configuration service can\n     * write these.\n     *\n     * @hide\n     ",
  "variables" : [ {
    "name" : "sProviderHolder",
    "type" : "ContentProviderHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNameValueCache",
    "type" : "NameValueCache",
    "comment" : " Populated lazily, guarded by class object:",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static String getString(ContentResolver resolver, String name)",
    "returnType" : "String",
    "comment" : "\n         * Look up a name in the database.\n         * @param resolver to access the database with\n         * @param name to look up in the table\n         * @return the corresponding value, or null if not present\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static Map<String, String> getStrings(@NonNull ContentResolver resolver, @NonNull String namespace, @NonNull List<String> names)",
    "returnType" : "Map<String, String>",
    "comment" : "\n         * Look up a list of names in the database, within the specified namespace.\n         *\n         * @param resolver to access the database with\n         * @param namespace to which the names belong\n         * @param names to look up in the table\n         * @return a non null, but possibly empty, map from name to value for any of the names that\n         *         were found during lookup.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " static boolean putString(@NonNull ContentResolver resolver, @NonNull String namespace, @NonNull String name, @Nullable String value, boolean makeDefault)",
    "returnType" : "boolean",
    "comment" : "\n         * Store a name/value pair into the database within the specified namespace.\n         * <p>\n         * Also the method takes an argument whether to make the value the default for this setting.\n         * If the system already specified a default value, then the one passed in here will\n         * <strong>not</strong> be set as the default.\n         * </p>\n         *\n         * @param resolver to access the database with.\n         * @param namespace to store the name/value pair in.\n         * @param name to store.\n         * @param value to associate with the name.\n         * @param makeDefault whether to make the value the default one.\n         * @return true if the value was set, false on database errors.\n         *\n         * @see #resetToDefaults(ContentResolver, int, String)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setStrings(@NonNull ContentResolver resolver, @NonNull String namespace, @NonNull Map<String, String> keyValues) throws DeviceConfig.BadConfigException",
    "returnType" : "boolean",
    "comment" : "\n         * Clear all name/value pairs for the provided namespace and save new name/value pairs in\n         * their place.\n         *\n         * @param resolver to access the database with.\n         * @param namespace to which the names should be set.\n         * @param keyValues map of key names (without the prefix) to values.\n         * @return\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " static void resetToDefaults(@NonNull ContentResolver resolver, @ResetMode int resetMode, @Nullable String namespace)",
    "returnType" : "void",
    "comment" : "\n         * Reset the values to their defaults.\n         * <p>\n         * The method accepts an optional prefix parameter. If provided, only pairs with a name that\n         * starts with the exact prefix will be reset. Otherwise all will be reset.\n         *\n         * @param resolver Handle to the content resolver.\n         * @param resetMode The reset mode to use.\n         * @param namespace Optionally, to limit which which namespace is reset.\n         *\n         * @see #putString(ContentResolver, String, String, String, boolean)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static void registerMonitorCallback(@NonNull ContentResolver resolver, @NonNull RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Register callback for monitoring Config table.\n         *\n         * @param resolver Handle to the content resolver.\n         * @param callback callback to register\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private static void registerMonitorCallbackAsUser(@NonNull ContentResolver resolver, @UserIdInt int userHandle, @NonNull RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void clearProviderForTest()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static String createCompositeName(@NonNull String namespace, @NonNull String name)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String createPrefix(@NonNull String namespace)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "sProviderHolder", "sNameValueCache" ],
  "methodNames" : [ " static String getString(ContentResolver resolver, String name)", "public static Map<String, String> getStrings(@NonNull ContentResolver resolver, @NonNull String namespace, @NonNull List<String> names)", " static boolean putString(@NonNull ContentResolver resolver, @NonNull String namespace, @NonNull String name, @Nullable String value, boolean makeDefault)", "public static boolean setStrings(@NonNull ContentResolver resolver, @NonNull String namespace, @NonNull Map<String, String> keyValues) throws DeviceConfig.BadConfigException", " static void resetToDefaults(@NonNull ContentResolver resolver, @ResetMode int resetMode, @Nullable String namespace)", "public static void registerMonitorCallback(@NonNull ContentResolver resolver, @NonNull RemoteCallback callback)", "private static void registerMonitorCallbackAsUser(@NonNull ContentResolver resolver, @UserIdInt int userHandle, @NonNull RemoteCallback callback)", "public static void clearProviderForTest()", "private static String createCompositeName(@NonNull String namespace, @NonNull String name)", "private static String createPrefix(@NonNull String namespace)" ]
}