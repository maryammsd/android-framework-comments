{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ExecutorCompletionService.java",
  "packageName" : "java.util.concurrent",
  "className" : "ExecutorCompletionService",
  "comment" : "\n * A {@link CompletionService} that uses a supplied {@link Executor}\n * to execute tasks.  This class arranges that submitted tasks are,\n * upon completion, placed on a queue accessible using {@code take}.\n * The class is lightweight enough to be suitable for transient use\n * when processing groups of tasks.\n *\n * <p>\n *\n * <b>Usage Examples.</b>\n *\n * Suppose you have a set of solvers for a certain problem, each\n * returning a value of some type {@code Result}, and would like to\n * run them concurrently, processing the results of each of them that\n * return a non-null value, in some method {@code use(Result r)}. You\n * could write this as:\n *\n * <pre> {@code\n * void solve(Executor e,\n *            Collection<Callable<Result>> solvers)\n *     throws InterruptedException, ExecutionException {\n *   CompletionService<Result> cs\n *       = new ExecutorCompletionService<>(e);\n *   solvers.forEach(cs::submit);\n *   for (int i = solvers.size(); i > 0; i--) {\n *     Result r = cs.take().get();\n *     if (r != null)\n *       use(r);\n *   }\n * }}</pre>\n *\n * Suppose instead that you would like to use the first non-null result\n * of the set of tasks, ignoring any that encounter exceptions,\n * and cancelling all other tasks when the first one is ready:\n *\n * <pre> {@code\n * void solve(Executor e,\n *            Collection<Callable<Result>> solvers)\n *     throws InterruptedException {\n *   CompletionService<Result> cs\n *       = new ExecutorCompletionService<>(e);\n *   int n = solvers.size();\n *   List<Future<Result>> futures = new ArrayList<>(n);\n *   Result result = null;\n *   try {\n *     solvers.forEach(solver -> futures.add(cs.submit(solver)));\n *     for (int i = n; i > 0; i--) {\n *       try {\n *         Result r = cs.take().get();\n *         if (r != null) {\n *           result = r;\n *           break;\n *         }\n *       } catch (ExecutionException ignore) {}\n *     }\n *   } finally {\n *     futures.forEach(future -> future.cancel(true));\n *   }\n *\n *   if (result != null)\n *     use(result);\n * }}</pre>\n *\n * @since 1.5\n ",
  "links" : [ "java.util.concurrent.Executor", "java.util.concurrent.CompletionService" ],
  "variables" : [ {
    "name" : "executor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "aes",
    "type" : "AbstractExecutorService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "completionQueue",
    "type" : "BlockingQueue<Future<V>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private RunnableFuture<V> newTaskFor(Callable<V> task)",
    "returnType" : "RunnableFuture<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RunnableFuture<V> newTaskFor(Runnable task, V result)",
    "returnType" : "RunnableFuture<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Future<V> submit(Callable<V> task)",
    "returnType" : "Future<V>",
    "comment" : "\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Future<V> submit(Runnable task, V result)",
    "returnType" : "Future<V>",
    "comment" : "\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Future<V> take() throws InterruptedException",
    "returnType" : "Future<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Future<V> poll()",
    "returnType" : "Future<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Future<V> poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "Future<V>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private RunnableFuture<V> newTaskFor(Callable<V> task)", "private RunnableFuture<V> newTaskFor(Runnable task, V result)", "public Future<V> submit(Callable<V> task)", "public Future<V> submit(Runnable task, V result)", "public Future<V> take() throws InterruptedException", "public Future<V> poll()", "public Future<V> poll(long timeout, TimeUnit unit) throws InterruptedException" ],
  "variableNames" : [ "executor", "aes", "completionQueue" ]
}