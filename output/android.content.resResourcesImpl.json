{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/res/ResourcesImpl.java",
  "packageName" : "android.content.res",
  "className" : "ResourcesImpl",
  "comment" : "\n * The implementation of Resource access. This class contains the AssetManager and all caches\n * associated with it.\n *\n * {@link Resources} is just a thing wrapper around this class. When a configuration change\n * occurs, clients can retain the same {@link Resources} reference because the underlying\n * {@link ResourcesImpl} object will be updated or re-created.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_LOAD",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_CONFIG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PRELOAD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRACE_FOR_PRELOAD",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRACE_FOR_MISS_PRELOAD",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRACE_FOR_DETAILED_PRELOAD",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPreloadTracingNumLoadedDrawables",
    "type" : "int",
    "comment" : " Used only when TRACE_FOR_DETAILED_PRELOAD is true. ",
    "links" : [ ]
  }, {
    "name" : "mPreloadTracingPreloadStartTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreloadTracingStartBitmapSize",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreloadTracingStartBitmapCount",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_OTHER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSync",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPreloaded",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreloading",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPreloadedDrawables",
    "type" : "LongSparseArray<Drawable.ConstantState>[]",
    "comment" : " single-threaded, and after that these are immutable.",
    "links" : [ ]
  }, {
    "name" : "sPreloadedColorDrawables",
    "type" : "LongSparseArray<Drawable.ConstantState>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPreloadedComplexColors",
    "type" : "LongSparseArray<android.content.res.ConstantState<ComplexColor>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessLock",
    "type" : "Object",
    "comment" : " Lock object used to protect access to caches and configuration. ",
    "links" : [ ]
  }, {
    "name" : "mTmpConfig",
    "type" : "Configuration",
    "comment" : " These are protected by mAccessLock.",
    "links" : [ ]
  }, {
    "name" : "mDrawableCache",
    "type" : "DrawableCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorDrawableCache",
    "type" : "DrawableCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComplexColorCache",
    "type" : "ConfigurationBoundResourceCache<ComplexColor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatorCache",
    "type" : "ConfigurationBoundResourceCache<Animator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateListAnimatorCache",
    "type" : "ConfigurationBoundResourceCache<StateListAnimator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLookupStack",
    "type" : "ThreadLocal<LookupStack>",
    "comment" : " calls to ResourcesImpl",
    "links" : [ ]
  }, {
    "name" : "XML_BLOCK_CACHE_SIZE",
    "type" : "int",
    "comment" : " Size of the cyclical cache used to map XML files to blocks. ",
    "links" : [ ]
  }, {
    "name" : "mLastCachedXmlBlockIndex",
    "type" : "int",
    "comment" : " Cyclical cache used for recently-accessed XML files.",
    "links" : [ ]
  }, {
    "name" : "mCachedXmlBlockCookies",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedXmlBlockFiles",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedXmlBlocks",
    "type" : "XmlBlock[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAssets",
    "type" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetrics",
    "type" : "DisplayMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayAdjustments",
    "type" : "DisplayAdjustments",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPluralRule",
    "type" : "PluralRules",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public DisplayAdjustments getDisplayAdjustments()",
    "returnType" : "DisplayAdjustments",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetManager getAssets()",
    "returnType" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DisplayMetrics getDisplayMetrics()",
    "returnType" : "DisplayMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Configuration getConfiguration()",
    "returnType" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Configuration[] getSizeConfigurations()",
    "returnType" : "Configuration[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " CompatibilityInfo getCompatibilityInfo()",
    "returnType" : "CompatibilityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PluralRules getPluralRule()",
    "returnType" : "PluralRules",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void getValue(@AnyRes int id, TypedValue outValue, boolean resolveRefs) throws NotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void getValueForDensity(@AnyRes int id, int density, TypedValue outValue, boolean resolveRefs) throws NotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void getValue(String name, TypedValue outValue, boolean resolveRefs) throws NotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getIdentifier(String name, String defType, String defPackage)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getResourceName(@AnyRes int resid) throws NotFoundException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getResourcePackageName(@AnyRes int resid) throws NotFoundException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getResourceTypeName(@AnyRes int resid) throws NotFoundException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getResourceEntryName(@AnyRes int resid) throws NotFoundException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getLastResourceResolution() throws NotFoundException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " CharSequence getQuantityText(@PluralsRes int id, int quantity) throws NotFoundException",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int attrForQuantityCode(String quantityCode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AssetFileDescriptor openRawResourceFd(@RawRes int id, TypedValue tempValue) throws NotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " InputStream openRawResource(@RawRes int id, TypedValue value) throws NotFoundException",
    "returnType" : "InputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ConfigurationBoundResourceCache<Animator> getAnimatorCache()",
    "returnType" : "ConfigurationBoundResourceCache<Animator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ConfigurationBoundResourceCache<StateListAnimator> getStateListAnimatorCache()",
    "returnType" : "ConfigurationBoundResourceCache<StateListAnimator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateConfiguration(Configuration config, DisplayMetrics metrics, CompatibilityInfo compat)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int calcConfigChanges(@Nullable Configuration config)",
    "returnType" : "int",
    "comment" : "\n     * Applies the new configuration, returning a bitmask of the changes\n     * between the old and new configurations.\n     *\n     * @param config the new configuration\n     * @return bitmask of config changes\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String adjustLanguageTag(String languageTag)",
    "returnType" : "String",
    "comment" : "\n     * {@code Locale.toLanguageTag} will transform the obsolete (and deprecated)\n     * language codes \"in\", \"ji\" and \"iw\" to \"id\", \"yi\" and \"he\" respectively.\n     *\n     * All released versions of android prior to \"L\" used the deprecated language\n     * tags, so we will need to support them for backwards compatibility.\n     *\n     * Note that this conversion needs to take place *after* the call to\n     * {@code toLanguageTag} because that will convert all the deprecated codes to\n     * the new ones, even if they're set manually.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flushLayoutCache()",
    "returnType" : "void",
    "comment" : "\n     * Call this to remove all cached loaded layout resources from the\n     * Resources object.  Only intended for use with performance testing\n     * tools.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearAllCaches()",
    "returnType" : "void",
    "comment" : "\n     * Wipe all caches that might be read and return an outdated object when resolving a resource.\n     ",
    "links" : [ ]
  }, {
    "name" : " Drawable loadDrawable(@NonNull Resources wrapper, @NonNull TypedValue value, int id, int density, @Nullable Resources.Theme theme) throws NotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cacheDrawable(TypedValue value, boolean isColorDrawable, DrawableCache caches, Resources.Theme theme, boolean usesTheme, long key, Drawable dr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean verifyPreloadConfig(@Config int changingConfigurations, @Config int allowVarying, @AnyRes int resourceId, @Nullable String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable decodeImageDrawable(@NonNull AssetInputStream ais, @NonNull Resources wrapper, @NonNull TypedValue value)",
    "returnType" : "Drawable",
    "comment" : "\n     * Loads a Drawable from an encoded image stream, or null.\n     *\n     * This call will handle closing ais.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable loadDrawableForCookie(@NonNull Resources wrapper, @NonNull TypedValue value, int id, int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * Loads a drawable from XML or resources stream.\n     *\n     * @return Drawable, or null if Drawable cannot be decoded.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable loadColorOrXmlDrawable(@NonNull Resources wrapper, @NonNull TypedValue value, int id, int density, String file)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable loadXmlDrawable(@NonNull Resources wrapper, @NonNull TypedValue value, int id, int density, String file) throws IOException, XmlPullParserException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Typeface loadFont(Resources wrapper, TypedValue value, int id)",
    "returnType" : "Typeface",
    "comment" : "\n     * Loads a font from XML or resources stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ComplexColor loadComplexColorFromName(Resources wrapper, Resources.Theme theme, TypedValue value, int id)",
    "returnType" : "ComplexColor",
    "comment" : "\n     * Given the value and id, we can get the XML filename as in value.data, based on that, we\n     * first try to load CSL from the cache. If not found, try to get from the constant state.\n     * Last, parse the XML and generate the CSL.\n     ",
    "links" : [ ]
  }, {
    "name" : " ComplexColor loadComplexColor(Resources wrapper, @NonNull TypedValue value, int id, Resources.Theme theme)",
    "returnType" : "ComplexColor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ColorStateList loadColorStateList(Resources wrapper, TypedValue value, int id, Resources.Theme theme) throws NotFoundException",
    "returnType" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ColorStateList getColorStateListFromInt(@NonNull TypedValue value, long key)",
    "returnType" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ComplexColor loadComplexColorForCookie(Resources wrapper, TypedValue value, int id, Resources.Theme theme)",
    "returnType" : "ComplexColor",
    "comment" : "\n     * Load a ComplexColor based on the XML file content. The result can be a GradientColor or\n     * ColorStateList. Note that pure color will be wrapped into a ColorStateList.\n     *\n     * We deferred the parser creation to this function b/c we need to differentiate b/t gradient\n     * and selector tag.\n     *\n     * @return a ComplexColor (GradientColor or ColorStateList) based on the XML file content, or\n     *     {@code null} if the XML file is neither.\n     ",
    "links" : [ ]
  }, {
    "name" : " XmlResourceParser loadXmlResourceParser(@NonNull String file, @AnyRes int id, int assetCookie, @NonNull String type) throws NotFoundException",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Loads an XML parser for the specified file.\n     *\n     * @param file the path for the XML file to parse\n     * @param id the resource identifier for the file\n     * @param assetCookie the asset cookie for the file\n     * @param type the type of resource (used for logging)\n     * @return a parser for the specified XML file\n     * @throws NotFoundException if the file could not be loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void startPreloading()",
    "returnType" : "void",
    "comment" : "\n     * Start preloading of resource data using this Resources object.  Only\n     * for use by the zygote process for loading common system resources.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : " void finishPreloading()",
    "returnType" : "void",
    "comment" : "\n     * Called by zygote when it is done preloading resources, to change back\n     * to normal Resources operation.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int getAttributeSetSourceResId(@Nullable AttributeSet set)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " LongSparseArray<Drawable.ConstantState> getPreloadedDrawables()",
    "returnType" : "LongSparseArray<Drawable.ConstantState>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ThemeImpl newThemeImpl()",
    "returnType" : "ThemeImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ThemeImpl newThemeImpl(Resources.ThemeKey key)",
    "returnType" : "ThemeImpl",
    "comment" : "\n     * Creates a new ThemeImpl which is already set to the given Resources.ThemeKey.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG_LOAD", "DEBUG_CONFIG", "TAG_PRELOAD", "TRACE_FOR_PRELOAD", "TRACE_FOR_MISS_PRELOAD", "TRACE_FOR_DETAILED_PRELOAD", "sPreloadTracingNumLoadedDrawables", "mPreloadTracingPreloadStartTime", "mPreloadTracingStartBitmapSize", "mPreloadTracingStartBitmapCount", "ID_OTHER", "sSync", "sPreloaded", "mPreloading", "sPreloadedDrawables", "sPreloadedColorDrawables", "sPreloadedComplexColors", "mAccessLock", "mTmpConfig", "mDrawableCache", "mColorDrawableCache", "mComplexColorCache", "mAnimatorCache", "mStateListAnimatorCache", "mLookupStack", "XML_BLOCK_CACHE_SIZE", "mLastCachedXmlBlockIndex", "mCachedXmlBlockCookies", "mCachedXmlBlockFiles", "mCachedXmlBlocks", "mAssets", "mMetrics", "mDisplayAdjustments", "mPluralRule", "mConfiguration" ],
  "methodNames" : [ "public DisplayAdjustments getDisplayAdjustments()", "public AssetManager getAssets()", " DisplayMetrics getDisplayMetrics()", " Configuration getConfiguration()", " Configuration[] getSizeConfigurations()", " CompatibilityInfo getCompatibilityInfo()", "private PluralRules getPluralRule()", " void getValue(@AnyRes int id, TypedValue outValue, boolean resolveRefs) throws NotFoundException", " void getValueForDensity(@AnyRes int id, int density, TypedValue outValue, boolean resolveRefs) throws NotFoundException", " void getValue(String name, TypedValue outValue, boolean resolveRefs) throws NotFoundException", " int getIdentifier(String name, String defType, String defPackage)", " String getResourceName(@AnyRes int resid) throws NotFoundException", " String getResourcePackageName(@AnyRes int resid) throws NotFoundException", " String getResourceTypeName(@AnyRes int resid) throws NotFoundException", " String getResourceEntryName(@AnyRes int resid) throws NotFoundException", " String getLastResourceResolution() throws NotFoundException", " CharSequence getQuantityText(@PluralsRes int id, int quantity) throws NotFoundException", "private static int attrForQuantityCode(String quantityCode)", " AssetFileDescriptor openRawResourceFd(@RawRes int id, TypedValue tempValue) throws NotFoundException", " InputStream openRawResource(@RawRes int id, TypedValue value) throws NotFoundException", " ConfigurationBoundResourceCache<Animator> getAnimatorCache()", " ConfigurationBoundResourceCache<StateListAnimator> getStateListAnimatorCache()", "public void updateConfiguration(Configuration config, DisplayMetrics metrics, CompatibilityInfo compat)", "public int calcConfigChanges(@Nullable Configuration config)", "private static String adjustLanguageTag(String languageTag)", "public void flushLayoutCache()", "public void clearAllCaches()", " Drawable loadDrawable(@NonNull Resources wrapper, @NonNull TypedValue value, int id, int density, @Nullable Resources.Theme theme) throws NotFoundException", "private void cacheDrawable(TypedValue value, boolean isColorDrawable, DrawableCache caches, Resources.Theme theme, boolean usesTheme, long key, Drawable dr)", "private boolean verifyPreloadConfig(@Config int changingConfigurations, @Config int allowVarying, @AnyRes int resourceId, @Nullable String name)", "private Drawable decodeImageDrawable(@NonNull AssetInputStream ais, @NonNull Resources wrapper, @NonNull TypedValue value)", "private Drawable loadDrawableForCookie(@NonNull Resources wrapper, @NonNull TypedValue value, int id, int density)", "private Drawable loadColorOrXmlDrawable(@NonNull Resources wrapper, @NonNull TypedValue value, int id, int density, String file)", "private Drawable loadXmlDrawable(@NonNull Resources wrapper, @NonNull TypedValue value, int id, int density, String file) throws IOException, XmlPullParserException", "public Typeface loadFont(Resources wrapper, TypedValue value, int id)", "private ComplexColor loadComplexColorFromName(Resources wrapper, Resources.Theme theme, TypedValue value, int id)", " ComplexColor loadComplexColor(Resources wrapper, @NonNull TypedValue value, int id, Resources.Theme theme)", " ColorStateList loadColorStateList(Resources wrapper, TypedValue value, int id, Resources.Theme theme) throws NotFoundException", "private ColorStateList getColorStateListFromInt(@NonNull TypedValue value, long key)", "private ComplexColor loadComplexColorForCookie(Resources wrapper, TypedValue value, int id, Resources.Theme theme)", " XmlResourceParser loadXmlResourceParser(@NonNull String file, @AnyRes int id, int assetCookie, @NonNull String type) throws NotFoundException", "public final void startPreloading()", " void finishPreloading()", " static int getAttributeSetSourceResId(@Nullable AttributeSet set)", " LongSparseArray<Drawable.ConstantState> getPreloadedDrawables()", " ThemeImpl newThemeImpl()", " ThemeImpl newThemeImpl(Resources.ThemeKey key)" ]
}