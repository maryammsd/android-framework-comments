{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/datatype/DatatypeFactory.java",
  "packageName" : "javax.xml.datatype",
  "className" : "DatatypeFactory",
  "comment" : "\n * <p>Factory that creates new <code>javax.xml.datatype</code> <code>Object</code>s that map XML to/from Java <code>Object</code>s.</p>\n *\n * <p id=\"DatatypeFactory.newInstance\">{@link #newInstance()} is used to create a new <code>DatatypeFactory</code>.\n * The following implementation resolution mechanisms are used in the following order:</p>\n * <ol>\n *    <li>\n *      If the system property specified by {@link #DATATYPEFACTORY_PROPERTY}, \"<code>javax.xml.datatype.DatatypeFactory</code>\",\n *      exists, a class with the name of the property's value is instantiated.\n *      Any Exception thrown during the instantiation process is wrapped as a {@link DatatypeConfigurationException}.\n *    </li>\n *    <li>\n *      If the file ${JAVA_HOME}/lib/jaxp.properties exists, it is loaded in a {@link java.util.Properties} <code>Object</code>.\n *      The <code>Properties</code> <code>Object </code> is then queried for the property as documented in the prior step\n *      and processed as documented in the prior step.\n *    </li>\n *    <li>\n *      The services resolution mechanism is used, e.g. <code>META-INF/services/java.xml.datatype.DatatypeFactory</code>.\n *      Any Exception thrown during the instantiation process is wrapped as a {@link DatatypeConfigurationException}.\n *    </li>\n *    <li>\n *      The final mechanism is to attempt to instantiate the <code>Class</code> specified by\n *      {@link #DATATYPEFACTORY_IMPLEMENTATION_CLASS}, \"<code>javax.xml.datatype.DatatypeFactoryImpl</code>\".\n *      Any Exception thrown during the instantiation process is wrapped as a {@link DatatypeConfigurationException}.\n *    </li>\n * </ol>\n *\n * <p>Note that you must supply your own implementation (such as Xerces); Android does not ship with a default implementation.\n *\n * @author <a href=\"mailto:Joseph.Fialli@Sun.COM\">Joseph Fialli</a>\n * @author <a href=\"mailto:Jeff.Suttor@Sun.com\">Jeff Suttor</a>\n * @version $Revision: 884950 $, $Date: 2009-11-27 10:46:18 -0800 (Fri, 27 Nov 2009) $\n * @since 1.5\n ",
  "links" : [ "#DATATYPEFACTORY_PROPERTY", "java.util.Properties", "javax.xml.datatype.DatatypeConfigurationException", "#newInstance()", "#DATATYPEFACTORY_IMPLEMENTATION_CLASS" ],
  "variables" : [ {
    "name" : "DATATYPEFACTORY_PROPERTY",
    "type" : "String",
    "comment" : "\n     * <p>Default property name as defined in JSR 206: Java(TM) API for XML Processing (JAXP) 1.3.</p>\n     *\n     * <p>Default value is <code>javax.xml.datatype.DatatypeFactory</code>.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "DATATYPEFACTORY_IMPLEMENTATION_CLASS",
    "type" : "String",
    "comment" : " This uses \"new String\" to avoid being inlined as a constant.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DatatypeFactory newInstance() throws DatatypeConfigurationException",
    "returnType" : "DatatypeFactory",
    "comment" : "\n     * <p>Obtain a new instance of a <code>DatatypeFactory</code>.</p>\n     *\n     * <p>The implementation resolution mechanisms are <a href=\"#DatatypeFactory.newInstance\">defined</a> in this\n     * <code>Class</code>'s documentation.</p>\n     * <p>Note that you must supply your own implementation (such as Xerces); Android does not ship with a default implementation.\n     *\n     * @return New instance of a <code>DocumentBuilderFactory</code>\n     *\n     * @throws DatatypeConfigurationException If the implementation is not\n     *   available or cannot be instantiated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DatatypeFactory newInstance(String factoryClassName, ClassLoader classLoader) throws DatatypeConfigurationException",
    "returnType" : "DatatypeFactory",
    "comment" : "\n     * Returns an instance of the named implementation of {@code DatatypeFactory}.\n     *\n     * @throws DatatypeConfigurationException if {@code factoryClassName} is not available or cannot\n     *     be instantiated.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Duration newDuration(final String lexicalRepresentation)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Obtain a new instance of a <code>Duration</code>\n     * specifying the <code>Duration</code> as its string representation, \"PnYnMnDTnHnMnS\",\n     * as defined in XML Schema 1.0 section 3.2.6.1.</p>\n     *\n     * <p>XML Schema Part 2: Datatypes, 3.2.6 duration, defines <code>duration</code> as:</p>\n     * <blockquote>\n     * duration represents a duration of time.\n     * The value space of duration is a six-dimensional space where the coordinates designate the\n     * Gregorian year, month, day, hour, minute, and second components defined in Section 5.5.3.2 of [ISO 8601], respectively.\n     * These components are ordered in their significance by their order of appearance i.e. as\n     * year, month, day, hour, minute, and second.\n     * </blockquote>\n     * <p>All six values are set and available from the created {@link Duration}</p>\n     *\n     * <p>The XML Schema specification states that values can be of an arbitrary size.\n     * Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.\n     * An {@link UnsupportedOperationException} will be thrown with a message indicating implementation limits\n     * if implementation capacities are exceeded.</p>\n     *\n     * @param lexicalRepresentation <code>String</code> representation of a <code>Duration</code>.\n     *\n     * @return New <code>Duration</code> created from parsing the <code>lexicalRepresentation</code>.\n     *\n     * @throws IllegalArgumentException If <code>lexicalRepresentation</code> is not a valid representation of a <code>Duration</code>.\n     * @throws UnsupportedOperationException If implementation cannot support requested values.\n     * @throws NullPointerException if <code>lexicalRepresentation</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.datatype.Duration", "UnsupportedOperationException" ]
  }, {
    "name" : "public abstract Duration newDuration(final long durationInMilliSeconds)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Obtain a new instance of a <code>Duration</code>\n     * specifying the <code>Duration</code> as milliseconds.</p>\n     *\n     * <p>XML Schema Part 2: Datatypes, 3.2.6 duration, defines <code>duration</code> as:</p>\n     * <blockquote>\n     * duration represents a duration of time.\n     * The value space of duration is a six-dimensional space where the coordinates designate the\n     * Gregorian year, month, day, hour, minute, and second components defined in Section 5.5.3.2 of [ISO 8601], respectively.\n     * These components are ordered in their significance by their order of appearance i.e. as\n     * year, month, day, hour, minute, and second.\n     * </blockquote>\n     * <p>All six values are set by computing their values from the specified milliseconds\n     * and are available using the <code>get</code> methods of  the created {@link Duration}.\n     * The values conform to and are defined by:</p>\n     * <ul>\n     *   <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li>\n     *   <li><a href=\"http://www.w3.org/TR/xmlschema-2/#isoformats\">\n     *     W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats</a>\n     *   </li>\n     *   <li>{@link XMLGregorianCalendar}  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation</li>\n     * </ul>\n     *\n     * <p>The default start instance is defined by {@link GregorianCalendar}'s use of the start of the epoch: i.e.,\n     * {@link java.util.Calendar#YEAR} = 1970,\n     * {@link java.util.Calendar#MONTH} = {@link java.util.Calendar#JANUARY},\n     * {@link java.util.Calendar#DATE} = 1, etc.\n     * This is important as there are variations in the Gregorian Calendar,\n     * e.g. leap years have different days in the month = {@link java.util.Calendar#FEBRUARY}\n     * so the result of {@link Duration#getMonths()} and {@link Duration#getDays()} can be influenced.</p>\n     *\n     * @param durationInMilliSeconds Duration in milliseconds to create.\n     *\n     * @return New <code>Duration</code> representing <code>durationInMilliSeconds</code>.\n     ",
    "links" : [ "java.util.Calendar#YEAR", "javax.xml.datatype.Duration", "javax.xml.datatype.Duration#getMonths()", "java.util.GregorianCalendar", "java.util.Calendar#FEBRUARY", "java.util.Calendar#JANUARY", "javax.xml.datatype.Duration#getDays()", "java.util.Calendar#DATE", "javax.xml.datatype.XMLGregorianCalendar", "java.util.Calendar#MONTH" ]
  }, {
    "name" : "public abstract Duration newDuration(final boolean isPositive, final BigInteger years, final BigInteger months, final BigInteger days, final BigInteger hours, final BigInteger minutes, final BigDecimal seconds)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Obtain a new instance of a <code>Duration</code>\n     * specifying the <code>Duration</code> as isPositive, years, months, days, hours, minutes, seconds.</p>\n     *\n     * <p>The XML Schema specification states that values can be of an arbitrary size.\n     * Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.\n     * An {@link UnsupportedOperationException} will be thrown with a message indicating implementation limits\n     * if implementation capacities are exceeded.</p>\n     *\n     * <p>A <code>null</code> value indicates that field is not set.</p>\n     *\n     * @param isPositive Set to <code>false</code> to create a negative duration. When the length\n     *   of the duration is zero, this parameter will be ignored.\n     * @param years of this <code>Duration</code>\n     * @param months of this <code>Duration</code>\n     * @param days of this <code>Duration</code>\n     * @param hours of this <code>Duration</code>\n     * @param minutes of this <code>Duration</code>\n     * @param seconds of this <code>Duration</code>\n     *\n     * @return New <code>Duration</code> created from the specified values.\n     *\n     * @throws IllegalArgumentException If values are not a valid representation of a <code>Duration</code>.\n     * @throws UnsupportedOperationException If implementation cannot support requested values.\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : "public Duration newDuration(final boolean isPositive, final int years, final int months, final int days, final int hours, final int minutes, final int seconds)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Obtain a new instance of a <code>Duration</code>\n     * specifying the <code>Duration</code> as isPositive, years, months, days, hours, minutes, seconds.</p>\n     *\n     * <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p>\n     *\n     * @param isPositive Set to <code>false</code> to create a negative duration. When the length\n     *   of the duration is zero, this parameter will be ignored.\n     * @param years of this <code>Duration</code>\n     * @param months of this <code>Duration</code>\n     * @param days of this <code>Duration</code>\n     * @param hours of this <code>Duration</code>\n     * @param minutes of this <code>Duration</code>\n     * @param seconds of this <code>Duration</code>\n     *\n     * @return New <code>Duration</code> created from the specified values.\n     *\n     * @throws IllegalArgumentException If values are not a valid representation of a <code>Duration</code>.\n     *\n     * @see #newDuration(\n     *   boolean isPositive,\n     *   BigInteger years,\n     *   BigInteger months,\n     *   BigInteger days,\n     *   BigInteger hours,\n     *   BigInteger minutes,\n     *   BigDecimal seconds)\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public Duration newDurationDayTime(final String lexicalRepresentation)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> by parsing its <code>String</code> representation,\n     * \"<em>PnDTnHnMnS</em>\", <a href=\"http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration\">\n     *   XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.</p>\n     *\n     * <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code>\n     * whose lexical representation contains only day, hour, minute, and second components.\n     * This datatype resides in the namespace <code>http://www.w3.org/2003/11/xpath-datatypes</code>.</p>\n     *\n     * <p>All four values are set and available from the created {@link Duration}</p>\n     *\n     * <p>The XML Schema specification states that values can be of an arbitrary size.\n     * Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.\n     * An {@link UnsupportedOperationException} will be thrown with a message indicating implementation limits\n     * if implementation capacities are exceeded.</p>\n     *\n     * @param lexicalRepresentation Lexical representation of a duration.\n     *\n     * @return New <code>Duration</code> created using the specified <code>lexicalRepresentation</code>.\n     *\n     * @throws IllegalArgumentException If the given string does not conform to the aforementioned specification.\n     * @throws UnsupportedOperationException If implementation cannot support requested values.\n     * @throws NullPointerException If <code>lexicalRepresentation</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.datatype.Duration", "UnsupportedOperationException" ]
  }, {
    "name" : "public Duration newDurationDayTime(final long durationInMilliseconds)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified milliseconds as defined in\n     * <a href=\"http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration\">\n     *   XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.</p>\n     *\n     * <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code>\n     * whose lexical representation contains only day, hour, minute, and second components.\n     * This datatype resides in the namespace <code>http://www.w3.org/2003/11/xpath-datatypes</code>.</p>\n     *\n     * <p>All four values are set by computing their values from the specified milliseconds\n     * and are available using the <code>get</code> methods of  the created {@link Duration}.\n     * The values conform to and are defined by:</p>\n     * <ul>\n     *   <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li>\n     *   <li><a href=\"http://www.w3.org/TR/xmlschema-2/#isoformats\">\n     *     W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats</a>\n     *   </li>\n     *   <li>{@link XMLGregorianCalendar}  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation</li>\n     * </ul>\n     *\n     * <p>The default start instance is defined by {@link GregorianCalendar}'s use of the start of the epoch: i.e.,\n     * {@link java.util.Calendar#YEAR} = 1970,\n     * {@link java.util.Calendar#MONTH} = {@link java.util.Calendar#JANUARY},\n     * {@link java.util.Calendar#DATE} = 1, etc.\n     * This is important as there are variations in the Gregorian Calendar,\n     * e.g. leap years have different days in the month = {@link java.util.Calendar#FEBRUARY}\n     * so the result of {@link Duration#getDays()} can be influenced.</p>\n     *\n     * <p>Any remaining milliseconds after determining the day, hour, minute and second are discarded.</p>\n     *\n     * @param durationInMilliseconds Milliseconds of <code>Duration</code> to create.\n     *\n     * @return New <code>Duration</code> created with the specified <code>durationInMilliseconds</code>.\n     *\n     * @see <a href=\"http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration\">\n     *   XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>\n     ",
    "links" : [ "java.util.Calendar#YEAR", "javax.xml.datatype.Duration", "java.util.GregorianCalendar", "java.util.Calendar#FEBRUARY", "java.util.Calendar#JANUARY", "javax.xml.datatype.Duration#getDays()", "java.util.Calendar#DATE", "javax.xml.datatype.XMLGregorianCalendar", "java.util.Calendar#MONTH" ]
  }, {
    "name" : "public Duration newDurationDayTime(final boolean isPositive, final BigInteger day, final BigInteger hour, final BigInteger minute, final BigInteger second)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified\n     * <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code> as defined in\n     * <a href=\"http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration\">\n     *   XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.</p>\n     *\n     * <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code>\n     * whose lexical representation contains only day, hour, minute, and second components.\n     * This datatype resides in the namespace <code>http://www.w3.org/2003/11/xpath-datatypes</code>.</p>\n     *\n     * <p>The XML Schema specification states that values can be of an arbitrary size.\n     * Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.\n     * An {@link UnsupportedOperationException} will be thrown with a message indicating implementation limits\n     * if implementation capacities are exceeded.</p>\n     *\n     * <p>A <code>null</code> value indicates that field is not set.</p>\n     *\n     * @param isPositive Set to <code>false</code> to create a negative duration. When the length\n     *   of the duration is zero, this parameter will be ignored.\n     * @param day Day of <code>Duration</code>.\n     * @param hour Hour of <code>Duration</code>.\n     * @param minute Minute of <code>Duration</code>.\n     * @param second Second of <code>Duration</code>.\n     *\n     * @return New <code>Duration</code> created with the specified <code>day</code>, <code>hour</code>, <code>minute</code>\n     * and <code>second</code>.\n     *\n     * @throws IllegalArgumentException If any values would create an invalid <code>Duration</code>.\n     * @throws UnsupportedOperationException If implementation cannot support requested values.\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : "public Duration newDurationDayTime(final boolean isPositive, final int day, final int hour, final int minute, final int second)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified\n     * <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code> as defined in\n     * <a href=\"http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration\">\n     *   XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.</p>\n     *\n     * <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code>\n     * whose lexical representation contains only day, hour, minute, and second components.\n     * This datatype resides in the namespace <code>http://www.w3.org/2003/11/xpath-datatypes</code>.</p>\n     *\n     * <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p>\n     *\n     * @param isPositive Set to <code>false</code> to create a negative duration. When the length\n     *   of the duration is zero, this parameter will be ignored.\n     * @param day Day of <code>Duration</code>.\n     * @param hour Hour of <code>Duration</code>.\n     * @param minute Minute of <code>Duration</code>.\n     * @param second Second of <code>Duration</code>.\n     *\n     * @return New <code>Duration</code> created with the specified <code>day</code>, <code>hour</code>, <code>minute</code>\n     * and <code>second</code>.\n     *\n     * @throws IllegalArgumentException If any values would create an invalid <code>Duration</code>.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public Duration newDurationYearMonth(final String lexicalRepresentation)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> by parsing its <code>String</code> representation,\n     * \"<em>PnYnM</em>\", <a href=\"http://www.w3.org/TR/xpath-datamodel#dt-yearMonthDuration\">\n     *   XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.</p>\n     *\n     * <p>The datatype <code>xdt:yearMonthDuration</code> is a subtype of <code>xs:duration</code>\n     * whose lexical representation contains only year and month components.\n     * This datatype resides in the namespace {@link javax.xml.XMLConstants#W3C_XPATH_DATATYPE_NS_URI}.</p>\n     *\n     * <p>Both values are set and available from the created {@link Duration}</p>\n     *\n     * <p>The XML Schema specification states that values can be of an arbitrary size.\n     * Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.\n     * An {@link UnsupportedOperationException} will be thrown with a message indicating implementation limits\n     * if implementation capacities are exceeded.</p>\n     *\n     * @param lexicalRepresentation Lexical representation of a duration.\n     *\n     * @return New <code>Duration</code> created using the specified <code>lexicalRepresentation</code>.\n     *\n     * @throws IllegalArgumentException If the <code>lexicalRepresentation</code> does not conform to the specification.\n     * @throws UnsupportedOperationException If implementation cannot support requested values.\n     * @throws NullPointerException If <code>lexicalRepresentation</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.XMLConstants#W3C_XPATH_DATATYPE_NS_URI", "javax.xml.datatype.Duration", "UnsupportedOperationException" ]
  }, {
    "name" : "public Duration newDurationYearMonth(final long durationInMilliseconds)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified milliseconds as defined in\n     * <a href=\"http://www.w3.org/TR/xpath-datamodel#dt-yearMonthDuration\">\n     *   XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.</p>\n     *\n     * <p>The datatype <code>xdt:yearMonthDuration</code> is a subtype of <code>xs:duration</code>\n     * whose lexical representation contains only year and month components.\n     * This datatype resides in the namespace {@link javax.xml.XMLConstants#W3C_XPATH_DATATYPE_NS_URI}.</p>\n     *\n     * <p>Both values are set by computing their values from the specified milliseconds\n     * and are available using the <code>get</code> methods of  the created {@link Duration}.\n     * The values conform to and are defined by:</p>\n     * <ul>\n     *   <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li>\n     *   <li><a href=\"http://www.w3.org/TR/xmlschema-2/#isoformats\">\n     *     W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats</a>\n     *   </li>\n     *   <li>{@link XMLGregorianCalendar}  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation</li>\n     * </ul>\n     *\n     * <p>The default start instance is defined by {@link GregorianCalendar}'s use of the start of the epoch: i.e.,\n     * {@link java.util.Calendar#YEAR} = 1970,\n     * {@link java.util.Calendar#MONTH} = {@link java.util.Calendar#JANUARY},\n     * {@link java.util.Calendar#DATE} = 1, etc.\n     * This is important as there are variations in the Gregorian Calendar,\n     * e.g. leap years have different days in the month = {@link java.util.Calendar#FEBRUARY}\n     * so the result of {@link Duration#getMonths()} can be influenced.</p>\n     *\n     * <p>Any remaining milliseconds after determining the year and month are discarded.</p>\n     *\n     * @param durationInMilliseconds Milliseconds of <code>Duration</code> to create.\n     *\n     * @return New <code>Duration</code> created using the specified <code>durationInMilliseconds</code>.\n     ",
    "links" : [ "javax.xml.XMLConstants#W3C_XPATH_DATATYPE_NS_URI", "java.util.Calendar#YEAR", "javax.xml.datatype.Duration", "javax.xml.datatype.Duration#getMonths()", "java.util.GregorianCalendar", "java.util.Calendar#FEBRUARY", "java.util.Calendar#JANUARY", "java.util.Calendar#DATE", "javax.xml.datatype.XMLGregorianCalendar", "java.util.Calendar#MONTH" ]
  }, {
    "name" : "public Duration newDurationYearMonth(final boolean isPositive, final BigInteger year, final BigInteger month)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified\n     * <code>year</code> and <code>month</code> as defined in\n     * <a href=\"http://www.w3.org/TR/xpath-datamodel#dt-yearMonthyDuration\">\n     *   XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.</p>\n     *\n     * <p>The XML Schema specification states that values can be of an arbitrary size.\n     * Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.\n     * An {@link UnsupportedOperationException} will be thrown with a message indicating implementation limits\n     * if implementation capacities are exceeded.</p>\n     *\n     * <p>A <code>null</code> value indicates that field is not set.</p>\n     *\n     * @param isPositive Set to <code>false</code> to create a negative duration. When the length\n     *   of the duration is zero, this parameter will be ignored.\n     * @param year Year of <code>Duration</code>.\n     * @param month Month of <code>Duration</code>.\n     *\n     * @return New <code>Duration</code> created using the specified <code>year</code> and <code>month</code>.\n     *\n     * @throws IllegalArgumentException If any values would create an invalid <code>Duration</code>.\n     * @throws UnsupportedOperationException If implementation cannot support requested values.\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : "public Duration newDurationYearMonth(final boolean isPositive, final int year, final int month)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified\n     * <code>year</code> and <code>month</code> as defined in\n     * <a href=\"http://www.w3.org/TR/xpath-datamodel#dt-yearMonthyDuration\">\n     *   XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.</p>\n     *\n     * <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p>\n     *\n     * @param isPositive Set to <code>false</code> to create a negative duration. When the length\n     *   of the duration is zero, this parameter will be ignored.\n     * @param year Year of <code>Duration</code>.\n     * @param month Month of <code>Duration</code>.\n     *\n     * @return New <code>Duration</code> created using the specified <code>year</code> and <code>month</code>.\n     *\n     * @throws IllegalArgumentException If any values would create an invalid <code>Duration</code>.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract XMLGregorianCalendar newXMLGregorianCalendar()",
    "returnType" : "XMLGregorianCalendar",
    "comment" : "\n     * <p>Create a new instance of an <code>XMLGregorianCalendar</code>.</p>\n     *\n     * <p>All date/time datatype fields set to {@link DatatypeConstants#FIELD_UNDEFINED} or null.</p>\n     *\n     * @return New <code>XMLGregorianCalendar</code> with all date/time datatype fields set to\n     *   {@link DatatypeConstants#FIELD_UNDEFINED} or null.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract XMLGregorianCalendar newXMLGregorianCalendar(final String lexicalRepresentation)",
    "returnType" : "XMLGregorianCalendar",
    "comment" : "\n     * <p>Create a new XMLGregorianCalendar by parsing the String as a lexical representation.</p>\n     *\n     * <p>Parsing the lexical string representation is defined in\n     * <a href=\"http://www.w3.org/TR/xmlschema-2/#dateTime-order\">XML Schema 1.0 Part 2, Section 3.2.[7-14].1,\n     * <em>Lexical Representation</em>.</a></p>\n     *\n     * <p>The string representation may not have any leading and trailing whitespaces.</p>\n     *\n     * <p>The parsing is done field by field so that\n     * the following holds for any lexically correct String x:</p>\n     * <pre>\n     * newXMLGregorianCalendar(x).toXMLFormat().equals(x)\n     * </pre>\n     * <p>Except for the noted lexical/canonical representation mismatches\n     * listed in <a href=\"http://www.w3.org/2001/05/xmlschema-errata#e2-45\">\n     * XML Schema 1.0 errata, Section 3.2.7.2</a>.</p>\n     *\n     * @param lexicalRepresentation Lexical representation of one the eight XML Schema date/time datatypes.\n     *\n     * @return <code>XMLGregorianCalendar</code> created from the <code>lexicalRepresentation</code>.\n     *\n     * @throws IllegalArgumentException If the <code>lexicalRepresentation</code> is not a valid <code>XMLGregorianCalendar</code>.\n     * @throws NullPointerException If <code>lexicalRepresentation</code> is <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract XMLGregorianCalendar newXMLGregorianCalendar(final GregorianCalendar cal)",
    "returnType" : "XMLGregorianCalendar",
    "comment" : "\n     * <p>Create an <code>XMLGregorianCalendar</code> from a {@link GregorianCalendar}.</p>\n     *\n     * <table border=\"2\" rules=\"all\" cellpadding=\"2\">\n     *   <thead>\n     *     <tr>\n     *       <th align=\"center\" colspan=\"2\">\n     *          Field by Field Conversion from\n     *          {@link GregorianCalendar} to an {@link XMLGregorianCalendar}\n     *       </th>\n     *     </tr>\n     *     <tr>\n     *        <th><code>java.util.GregorianCalendar</code> field</th>\n     *        <th><code>javax.xml.datatype.XMLGregorianCalendar</code> field</th>\n     *     </tr>\n     *   </thead>\n     *   <tbody>\n     *     <tr>\n     *       <td><code>ERA == GregorianCalendar.BC ? -YEAR : YEAR</code></td>\n     *       <td>{@link XMLGregorianCalendar#setYear(int year)}</td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>MONTH + 1</code></td>\n     *       <td>{@link XMLGregorianCalendar#setMonth(int month)}</td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>DAY_OF_MONTH</code></td>\n     *       <td>{@link XMLGregorianCalendar#setDay(int day)}</td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND</code></td>\n     *       <td>{@link XMLGregorianCalendar#setTime(int hour, int minute, int second, BigDecimal fractional)}</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <code>(ZONE_OFFSET + DST_OFFSET) / (60*1000)</code><br/>\n     *         <em>(in minutes)</em>\n     *       </td>\n     *       <td>{@link XMLGregorianCalendar#setTimezone(int offset)}<sup><em>*</em></sup>\n     *       </td>\n     *     </tr>\n     *   </tbody>\n     * </table>\n     * <p><em>*</em>conversion loss of information. It is not possible to represent\n     * a <code>java.util.GregorianCalendar</code> daylight savings timezone id in the\n     * XML Schema 1.0 date/time datatype representation.</p>\n     *\n     * <p>To compute the return value's <code>TimeZone</code> field,\n     * <ul>\n     * <li>when <code>this.getTimezone() != FIELD_UNDEFINED</code>,\n     * create a <code>java.util.TimeZone</code> with a custom timezone id\n     * using the <code>this.getTimezone()</code>.</li>\n     * <li>else use the <code>GregorianCalendar</code> default timezone value\n     * for the host is defined as specified by\n     * <code>java.util.TimeZone.getDefault()</code>.</li></p>\n     *\n     * @param cal <code>java.util.GregorianCalendar</code> used to create <code>XMLGregorianCalendar</code>\n     *\n     * @return <code>XMLGregorianCalendar</code> created from <code>java.util.GregorianCalendar</code>\n     *\n     * @throws NullPointerException If <code>cal</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.datatype.XMLGregorianCalendar#setDay(int", "java.util.GregorianCalendar", "javax.xml.datatype.XMLGregorianCalendar#setYear(int", "javax.xml.datatype.XMLGregorianCalendar#setTime(int", "javax.xml.datatype.XMLGregorianCalendar#setTimezone(int", "javax.xml.datatype.XMLGregorianCalendar", "javax.xml.datatype.XMLGregorianCalendar#setMonth(int" ]
  }, {
    "name" : "public abstract XMLGregorianCalendar newXMLGregorianCalendar(final BigInteger year, final int month, final int day, final int hour, final int minute, final int second, final BigDecimal fractionalSecond, final int timezone)",
    "returnType" : "XMLGregorianCalendar",
    "comment" : "\n     * <p>Constructor allowing for complete value spaces allowed by\n     * W3C XML Schema 1.0 recommendation for xsd:dateTime and related\n     * builtin datatypes. Note that <code>year</code> parameter supports\n     * arbitrarily large numbers and fractionalSecond has infinite\n     * precision.</p>\n     *\n     * <p>A <code>null</code> value indicates that field is not set.</p>\n     *\n     * @param year of <code>XMLGregorianCalendar</code> to be created.\n     * @param month of <code>XMLGregorianCalendar</code> to be created.\n     * @param day of <code>XMLGregorianCalendar</code> to be created.\n     * @param hour of <code>XMLGregorianCalendar</code> to be created.\n     * @param minute of <code>XMLGregorianCalendar</code> to be created.\n     * @param second of <code>XMLGregorianCalendar</code> to be created.\n     * @param fractionalSecond of <code>XMLGregorianCalendar</code> to be created.\n     * @param timezone of <code>XMLGregorianCalendar</code> to be created.\n     *\n     * @return <code>XMLGregorianCalendar</code> created from specified values.\n     *\n     * @throws IllegalArgumentException If any individual parameter's value is outside the maximum value constraint for the field\n     *   as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar}\n     *   or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance\n     *   as determined by {@link XMLGregorianCalendar#isValid()}.\n     ",
    "links" : [ "javax.xml.datatype.XMLGregorianCalendar#isValid()", "javax.xml.datatype.XMLGregorianCalendar" ]
  }, {
    "name" : "public XMLGregorianCalendar newXMLGregorianCalendar(final int year, final int month, final int day, final int hour, final int minute, final int second, final int millisecond, final int timezone)",
    "returnType" : "XMLGregorianCalendar",
    "comment" : "\n     * <p>Constructor of value spaces that a\n     * <code>java.util.GregorianCalendar</code> instance would need to convert to an\n     * <code>XMLGregorianCalendar</code> instance.</p>\n     *\n     * <p><code>XMLGregorianCalendar eon</code> and\n     * <code>fractionalSecond</code> are set to <code>null</code></p>\n     *\n     * <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p>\n     *\n     * @param year of <code>XMLGregorianCalendar</code> to be created.\n     * @param month of <code>XMLGregorianCalendar</code> to be created.\n     * @param day of <code>XMLGregorianCalendar</code> to be created.\n     * @param hour of <code>XMLGregorianCalendar</code> to be created.\n     * @param minute of <code>XMLGregorianCalendar</code> to be created.\n     * @param second of <code>XMLGregorianCalendar</code> to be created.\n     * @param millisecond of <code>XMLGregorianCalendar</code> to be created.\n     * @param timezone of <code>XMLGregorianCalendar</code> to be created.\n     *\n     * @return <code>XMLGregorianCalendar</code> created from specified values.\n     *\n     * @throws IllegalArgumentException If any individual parameter's value is outside the maximum value constraint for the field\n     *   as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar}\n     *   or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance\n     *   as determined by {@link XMLGregorianCalendar#isValid()}.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED", "javax.xml.datatype.XMLGregorianCalendar#isValid()", "javax.xml.datatype.XMLGregorianCalendar" ]
  }, {
    "name" : "public XMLGregorianCalendar newXMLGregorianCalendarDate(final int year, final int month, final int day, final int timezone)",
    "returnType" : "XMLGregorianCalendar",
    "comment" : "\n     * <p>Create a Java representation of XML Schema builtin datatype <code>date</code> or <code>g*</code>.</p>\n     *\n     * <p>For example, an instance of <code>gYear</code> can be created invoking this factory\n     * with <code>month</code> and <code>day</code> parameters set to\n     * {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p>\n     *\n     * @param year of <code>XMLGregorianCalendar</code> to be created.\n     * @param month of <code>XMLGregorianCalendar</code> to be created.\n     * @param day of <code>XMLGregorianCalendar</code> to be created.\n     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.\n     *\n     * @return <code>XMLGregorianCalendar</code> created from parameter values.\n     *\n     * @see DatatypeConstants#FIELD_UNDEFINED\n     *\n     * @throws IllegalArgumentException If any individual parameter's value is outside the maximum value constraint for the field\n     *   as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar}\n     *   or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance\n     *   as determined by {@link XMLGregorianCalendar#isValid()}.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED", "javax.xml.datatype.XMLGregorianCalendar#isValid()", "javax.xml.datatype.XMLGregorianCalendar" ]
  }, {
    "name" : "public XMLGregorianCalendar newXMLGregorianCalendarTime(final int hours, final int minutes, final int seconds, final int timezone)",
    "returnType" : "XMLGregorianCalendar",
    "comment" : "\n     * <p>Create a Java instance of XML Schema builtin datatype <code>time</code>.</p>\n     *\n     * <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p>\n     *\n     * @param hours number of hours\n     * @param minutes number of minutes\n     * @param seconds number of seconds\n     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.\n     *\n     * @return <code>XMLGregorianCalendar</code> created from parameter values.\n     *\n     * @throws IllegalArgumentException If any individual parameter's value is outside the maximum value constraint for the field\n     *   as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar}\n     *   or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance\n     *   as determined by {@link XMLGregorianCalendar#isValid()}.\n     *\n     * @see DatatypeConstants#FIELD_UNDEFINED\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED", "javax.xml.datatype.XMLGregorianCalendar#isValid()", "javax.xml.datatype.XMLGregorianCalendar" ]
  }, {
    "name" : "public XMLGregorianCalendar newXMLGregorianCalendarTime(final int hours, final int minutes, final int seconds, final BigDecimal fractionalSecond, final int timezone)",
    "returnType" : "XMLGregorianCalendar",
    "comment" : "\n     * <p>Create a Java instance of XML Schema builtin datatype time.</p>\n     *\n     * <p>A <code>null</code> value indicates that field is not set.</p>\n     * <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p>\n     *\n     * @param hours number of hours\n     * @param minutes number of minutes\n     * @param seconds number of seconds\n     * @param fractionalSecond value of <code>null</code> indicates that this optional field is not set.\n     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.\n     *\n     * @return <code>XMLGregorianCalendar</code> created from parameter values.\n     *\n     * @see DatatypeConstants#FIELD_UNDEFINED\n     *\n     * @throws IllegalArgumentException If any individual parameter's value is outside the maximum value constraint for the field\n     *   as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar}\n     *   or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance\n     *   as determined by {@link XMLGregorianCalendar#isValid()}.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED", "javax.xml.datatype.XMLGregorianCalendar#isValid()", "javax.xml.datatype.XMLGregorianCalendar" ]
  }, {
    "name" : "public XMLGregorianCalendar newXMLGregorianCalendarTime(final int hours, final int minutes, final int seconds, final int milliseconds, final int timezone)",
    "returnType" : "XMLGregorianCalendar",
    "comment" : "\n     * <p>Create a Java instance of XML Schema builtin datatype time.</p>\n     *\n     * <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.</p>\n     *\n     * @param hours number of hours\n     * @param minutes number of minutes\n     * @param seconds number of seconds\n     * @param milliseconds number of milliseconds\n     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.\n     *\n     * @return <code>XMLGregorianCalendar</code> created from parameter values.\n     *\n     * @see DatatypeConstants#FIELD_UNDEFINED\n     *\n     * @throws IllegalArgumentException If any individual parameter's value is outside the maximum value constraint for the field\n     *   as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar}\n     *   or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance\n     *   as determined by {@link XMLGregorianCalendar#isValid()}.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED", "javax.xml.datatype.XMLGregorianCalendar#isValid()", "javax.xml.datatype.XMLGregorianCalendar" ]
  } ],
  "methodNames" : [ "public static DatatypeFactory newInstance() throws DatatypeConfigurationException", "public static DatatypeFactory newInstance(String factoryClassName, ClassLoader classLoader) throws DatatypeConfigurationException", "public abstract Duration newDuration(final String lexicalRepresentation)", "public abstract Duration newDuration(final long durationInMilliSeconds)", "public abstract Duration newDuration(final boolean isPositive, final BigInteger years, final BigInteger months, final BigInteger days, final BigInteger hours, final BigInteger minutes, final BigDecimal seconds)", "public Duration newDuration(final boolean isPositive, final int years, final int months, final int days, final int hours, final int minutes, final int seconds)", "public Duration newDurationDayTime(final String lexicalRepresentation)", "public Duration newDurationDayTime(final long durationInMilliseconds)", "public Duration newDurationDayTime(final boolean isPositive, final BigInteger day, final BigInteger hour, final BigInteger minute, final BigInteger second)", "public Duration newDurationDayTime(final boolean isPositive, final int day, final int hour, final int minute, final int second)", "public Duration newDurationYearMonth(final String lexicalRepresentation)", "public Duration newDurationYearMonth(final long durationInMilliseconds)", "public Duration newDurationYearMonth(final boolean isPositive, final BigInteger year, final BigInteger month)", "public Duration newDurationYearMonth(final boolean isPositive, final int year, final int month)", "public abstract XMLGregorianCalendar newXMLGregorianCalendar()", "public abstract XMLGregorianCalendar newXMLGregorianCalendar(final String lexicalRepresentation)", "public abstract XMLGregorianCalendar newXMLGregorianCalendar(final GregorianCalendar cal)", "public abstract XMLGregorianCalendar newXMLGregorianCalendar(final BigInteger year, final int month, final int day, final int hour, final int minute, final int second, final BigDecimal fractionalSecond, final int timezone)", "public XMLGregorianCalendar newXMLGregorianCalendar(final int year, final int month, final int day, final int hour, final int minute, final int second, final int millisecond, final int timezone)", "public XMLGregorianCalendar newXMLGregorianCalendarDate(final int year, final int month, final int day, final int timezone)", "public XMLGregorianCalendar newXMLGregorianCalendarTime(final int hours, final int minutes, final int seconds, final int timezone)", "public XMLGregorianCalendar newXMLGregorianCalendarTime(final int hours, final int minutes, final int seconds, final BigDecimal fractionalSecond, final int timezone)", "public XMLGregorianCalendar newXMLGregorianCalendarTime(final int hours, final int minutes, final int seconds, final int milliseconds, final int timezone)" ],
  "variableNames" : [ "DATATYPEFACTORY_PROPERTY", "DATATYPEFACTORY_IMPLEMENTATION_CLASS" ]
}