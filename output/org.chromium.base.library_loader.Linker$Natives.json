{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/library_loader/Linker.java",
  "packageName" : "org.chromium.base.library_loader",
  "className" : "Natives",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void findMemoryRegionAtRandomAddress(@NonNull LibInfo libInfo)",
    "returnType" : "void",
    "comment" : "\n         * Reserves a memory region (=mapping) of sufficient size to hold the loaded library before\n         * the real size is known. The mmap(2) being used here provides built in randomization.\n         *\n         * On failure |libInfo.mLoadAddress| should be set to 0 and the LibraryLoader will fall back\n         * to loading using the system linker.\n         *\n         * @param libInfo holds the output values: |mLoadAddress| and |mLoadSize|. On failure sets\n         *                the |libInfo.mLoadAddress| to 0.\n         ",
    "links" : [ ]
  }, {
    "name" : " void reserveMemoryForLibrary(@NonNull LibInfo libInfo)",
    "returnType" : "void",
    "comment" : "\n         * Reserves the fixed address range starting at |libInfo.mLoadAddress| big enough to load\n         * the main native library. The size of the range is an internal detail of the native\n         * implementation.\n         *\n         * @param libInfo holds the output values: |mLoadAddress| and |mLoadSize|. On success\n         *                returns the size in |libInfo.mLoadSize|. On failure sets the\n         *                |libInfo.mLoadAddress| to 0.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean findRegionReservedByWebViewZygote(@NonNull LibInfo libInfo)",
    "returnType" : "boolean",
    "comment" : "\n         * Finds the (named) address range reservation made by the system zygote and dedicated for\n         * loading the native library. Reads /proc/self/maps, which is a slow operation (up to a few\n         * ms).\n         *\n         * @param libInfo holds the output values: |mLoadAddress| and |mLoadSize|. On success saves\n         *                the start address and the size of the webview memory reservation to them.\n         * @return whether the region was found.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean loadLibrary(String libFilePath, LibInfo libInfo, boolean spawnRelroRegion)",
    "returnType" : "boolean",
    "comment" : "\n         * Load the native library.\n         *\n         * @param libFilePath library file name.\n         * @param libInfo holds the information about the loaded library and the associated RELRO\n         *        region if the latter was created.\n         * @param spawnRelroRegion whether to spawn a new RELRO region.\n         * @return false on failure.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean useRelros(long localLoadAddress, LibInfo remoteLibInfo)",
    "returnType" : "boolean",
    "comment" : "\n         * Replace the current RELRO data in memory with the incoming RELRO region.\n         *\n         * @param localLoadAddress the address at which this Linker loaded the  native library.\n         * @param remoteLibInfo contains the RELRO region for replacement, and the start address\n         *        required for the library to be able to use this region.\n         * @return whether the operation was a success.\n         ",
    "links" : [ ]
  }, {
    "name" : " int getRelroSharingResult()",
    "returnType" : "int",
    "comment" : "\n         * Reveals the result of RELRO sharing after the library has been loaded.\n         *\n         * @return RelroSharingStatus.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void findMemoryRegionAtRandomAddress(@NonNull LibInfo libInfo)", " void reserveMemoryForLibrary(@NonNull LibInfo libInfo)", " boolean findRegionReservedByWebViewZygote(@NonNull LibInfo libInfo)", " boolean loadLibrary(String libFilePath, LibInfo libInfo, boolean spawnRelroRegion)", " boolean useRelros(long localLoadAddress, LibInfo remoteLibInfo)", " int getRelroSharingResult()" ],
  "variableNames" : [ ]
}