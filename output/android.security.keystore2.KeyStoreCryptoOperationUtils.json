{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore2/KeyStoreCryptoOperationUtils.java",
  "packageName" : "android.security.keystore2",
  "className" : "KeyStoreCryptoOperationUtils",
  "comment" : "\n * Assorted utility methods for implementing crypto operations on top of KeyStore.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sRng",
    "type" : "SecureRandom",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean canUserAuthorizationSucceed(AndroidKeyStoreKey key)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static InvalidKeyException getInvalidKeyException(AndroidKeyStoreKey key, KeyStoreException e)",
    "returnType" : "InvalidKeyException",
    "comment" : "\n     * Returns an {@link InvalidKeyException} corresponding to the provided\n     * {@link KeyStoreException}.\n     ",
    "links" : [ "java.security.InvalidKeyException", "android.security.KeyStoreException" ]
  }, {
    "name" : "public static GeneralSecurityException getExceptionForCipherInit(AndroidKeyStoreKey key, KeyStoreException e)",
    "returnType" : "GeneralSecurityException",
    "comment" : "\n     * Returns the exception to be thrown by the {@code Cipher.init} method of the crypto operation\n     * in response to a failed {code IKeystoreSecurityLevel#createOperation()}.\n     ",
    "links" : [ ]
  }, {
    "name" : " static byte[] getRandomBytesToMixIntoKeystoreRng(SecureRandom rng, int sizeBytes)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the requested number of random bytes to mix into keystore/keymaster RNG.\n     *\n     * @param rng RNG from which to obtain the random bytes or {@code null} for the platform-default\n     *        RNG.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecureRandom getRng()",
    "returnType" : "SecureRandom",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void abortOperation(KeyStoreOperation operation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long getOrMakeOperationChallenge(KeyStoreOperation operation, AndroidKeyStoreKey key) throws KeyPermanentlyInvalidatedException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean canUserAuthorizationSucceed(AndroidKeyStoreKey key)", "public static InvalidKeyException getInvalidKeyException(AndroidKeyStoreKey key, KeyStoreException e)", "public static GeneralSecurityException getExceptionForCipherInit(AndroidKeyStoreKey key, KeyStoreException e)", " static byte[] getRandomBytesToMixIntoKeystoreRng(SecureRandom rng, int sizeBytes)", "private static SecureRandom getRng()", " static void abortOperation(KeyStoreOperation operation)", " static long getOrMakeOperationChallenge(KeyStoreOperation operation, AndroidKeyStoreKey key) throws KeyPermanentlyInvalidatedException" ],
  "variableNames" : [ "sRng" ]
}