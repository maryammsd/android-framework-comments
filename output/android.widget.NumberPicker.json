{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/NumberPicker.java",
  "packageName" : "android.widget",
  "className" : "NumberPicker",
  "comment" : "\n * A widget that enables the user to select a number from a predefined range.\n * There are two flavors of this widget and which one is presented to the user\n * depends on the current theme.\n * <ul>\n * <li>\n * If the current theme is derived from {@link android.R.style#Theme} the widget\n * presents the current value as an editable input field with an increment button\n * above and a decrement button below. Long pressing the buttons allows for a quick\n * change of the current value. Tapping on the input field allows to type in\n * a desired value.\n * </li>\n * <li>\n * If the current theme is derived from {@link android.R.style#Theme_Holo} or\n * {@link android.R.style#Theme_Holo_Light} the widget presents the current\n * value as an editable input field with a lesser value above and a greater\n * value below. Tapping on the lesser or greater value selects it by animating\n * the number axis up or down to make the chosen value current. Flinging up\n * or down allows for multiple increments or decrements of the current value.\n * Long pressing on the lesser and greater values also allows for a quick change\n * of the current value. Tapping on the current value allows to type in a\n * desired value.\n * </li>\n * <li>\n * If the current theme is derived from {@link android.R.style#Theme_Material}\n * the widget presents the current value as a scrolling vertical selector with\n * the selected value in the center and the previous and following numbers above\n * and below, separated by a divider. The value is changed by flinging vertically.\n * The thickness of the divider can be changed by using the\n * {@link android.R.attr#selectionDividerHeight} attribute and the color of the\n * divider can be changed by using the\n * {@link android.R.attr#colorControlNormal} attribute.\n * </li>\n * </ul>\n * <p>\n * For an example of using this widget, see {@link android.widget.TimePicker}.\n * </p>\n ",
  "links" : [ "android.R.style#Theme_Holo", "android.R.attr#selectionDividerHeight", "android.R.style#Theme", "android.R.style#Theme_Material", "android.R.attr#colorControlNormal", "android.R.style#Theme_Holo_Light", "android.widget.TimePicker" ],
  "variables" : [ {
    "name" : "SELECTOR_WHEEL_ITEM_COUNT",
    "type" : "int",
    "comment" : "\n     * The number of items show in the selector wheel.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_LONG_PRESS_UPDATE_INTERVAL",
    "type" : "long",
    "comment" : "\n     * The default update interval during long press.\n     ",
    "links" : [ ]
  }, {
    "name" : "SELECTOR_MIDDLE_ITEM_INDEX",
    "type" : "int",
    "comment" : "\n     * The index of the middle selector item.\n     ",
    "links" : [ ]
  }, {
    "name" : "SELECTOR_MAX_FLING_VELOCITY_ADJUSTMENT",
    "type" : "int",
    "comment" : "\n     * The coefficient by which to adjust (divide) the max fling velocity.\n     ",
    "links" : [ ]
  }, {
    "name" : "SELECTOR_ADJUSTMENT_DURATION_MILLIS",
    "type" : "int",
    "comment" : "\n     * The the duration for adjusting the selector wheel.\n     ",
    "links" : [ ]
  }, {
    "name" : "SNAP_SCROLL_DURATION",
    "type" : "int",
    "comment" : "\n     * The duration of scrolling while snapping to a given position.\n     ",
    "links" : [ ]
  }, {
    "name" : "TOP_AND_BOTTOM_FADING_EDGE_STRENGTH",
    "type" : "float",
    "comment" : "\n     * The strength of fading in the top and bottom while drawing the selector.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNSCALED_DEFAULT_SELECTION_DIVIDER_HEIGHT",
    "type" : "int",
    "comment" : "\n     * The default unscaled height of the selection divider.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNSCALED_DEFAULT_SELECTION_DIVIDERS_DISTANCE",
    "type" : "int",
    "comment" : "\n     * The default unscaled distance between the selection dividers.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_LAYOUT_RESOURCE_ID",
    "type" : "int",
    "comment" : "\n     * The resource id for the default layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIZE_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Constant for unspecified size.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWrapSelectorWheelPreferred",
    "type" : "boolean",
    "comment" : "\n     * User choice on whether the selector wheel should be wrapped.\n     ",
    "links" : [ ]
  }, {
    "name" : "sTwoDigitFormatter",
    "type" : "TwoDigitFormatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncrementButton",
    "type" : "ImageButton",
    "comment" : "\n     * The increment button.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDecrementButton",
    "type" : "ImageButton",
    "comment" : "\n     * The decrement button.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInputText",
    "type" : "EditText",
    "comment" : "\n     * The text for showing the current value.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectionDividersDistance",
    "type" : "int",
    "comment" : "\n     * The distance between the two selection dividers.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMinHeight",
    "type" : "int",
    "comment" : "\n     * The min height of this widget.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxHeight",
    "type" : "int",
    "comment" : "\n     * The max height of this widget.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMinWidth",
    "type" : "int",
    "comment" : "\n     * The max width of this widget.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxWidth",
    "type" : "int",
    "comment" : "\n     * The max width of this widget.\n     ",
    "links" : [ ]
  }, {
    "name" : "mComputeMaxWidth",
    "type" : "boolean",
    "comment" : "\n     * Flag whether to compute the max width.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTextSize",
    "type" : "int",
    "comment" : "\n     * The height of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectorTextGapHeight",
    "type" : "int",
    "comment" : "\n     * The height of the gap between text elements if the selector wheel.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDisplayedValues",
    "type" : "String[]",
    "comment" : "\n     * The values to be displayed instead the indices.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMinValue",
    "type" : "int",
    "comment" : "\n     * Lower value of the range of numbers allowed for the NumberPicker\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxValue",
    "type" : "int",
    "comment" : "\n     * Upper value of the range of numbers allowed for the NumberPicker\n     ",
    "links" : [ ]
  }, {
    "name" : "mValue",
    "type" : "int",
    "comment" : "\n     * Current value of this NumberPicker\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnValueChangeListener",
    "type" : "OnValueChangeListener",
    "comment" : "\n     * Listener to be notified upon current value change.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnScrollListener",
    "type" : "OnScrollListener",
    "comment" : "\n     * Listener to be notified upon scroll state change.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFormatter",
    "type" : "Formatter",
    "comment" : "\n     * Formatter for for displaying the current value.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLongPressUpdateInterval",
    "type" : "long",
    "comment" : "\n     * The speed for updating the value form long press.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectorIndexToStringCache",
    "type" : "SparseArray<String>",
    "comment" : "\n     * Cache for the string representation of selector indices.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectorIndices",
    "type" : "int[]",
    "comment" : "\n     * The selector indices whose value are show by the selector.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectorWheelPaint",
    "type" : "Paint",
    "comment" : "\n     * The {@link Paint} for drawing the selector.\n     ",
    "links" : [ "android.graphics.Paint" ]
  }, {
    "name" : "mVirtualButtonPressedDrawable",
    "type" : "Drawable",
    "comment" : "\n     * The {@link Drawable} for pressed virtual (increment/decrement) buttons.\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "mSelectorElementHeight",
    "type" : "int",
    "comment" : "\n     * The height of a selector element (text + gap).\n     ",
    "links" : [ ]
  }, {
    "name" : "mInitialScrollOffset",
    "type" : "int",
    "comment" : "\n     * The initial offset of the scroll selector.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCurrentScrollOffset",
    "type" : "int",
    "comment" : "\n     * The current offset of the scroll selector.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFlingScroller",
    "type" : "Scroller",
    "comment" : "\n     * The {@link Scroller} responsible for flinging the selector.\n     ",
    "links" : [ "android.widget.Scroller" ]
  }, {
    "name" : "mAdjustScroller",
    "type" : "Scroller",
    "comment" : "\n     * The {@link Scroller} responsible for adjusting the selector.\n     ",
    "links" : [ "android.widget.Scroller" ]
  }, {
    "name" : "mPreviousScrollerY",
    "type" : "int",
    "comment" : "\n     * The previous Y coordinate while scrolling the selector.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSetSelectionCommand",
    "type" : "SetSelectionCommand",
    "comment" : "\n     * Handle to the reusable command for setting the input text selection.\n     ",
    "links" : [ ]
  }, {
    "name" : "mChangeCurrentByOneFromLongPressCommand",
    "type" : "ChangeCurrentByOneFromLongPressCommand",
    "comment" : "\n     * Handle to the reusable command for changing the current value from long\n     * press by one.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBeginSoftInputOnLongPressCommand",
    "type" : "BeginSoftInputOnLongPressCommand",
    "comment" : "\n     * Command for beginning an edit of the current value via IME on long press.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastDownEventY",
    "type" : "float",
    "comment" : "\n     * The Y position of the last down event.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastDownEventTime",
    "type" : "long",
    "comment" : "\n     * The time of the last down event.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastDownOrMoveEventY",
    "type" : "float",
    "comment" : "\n     * The Y position of the last down or move event.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVelocityTracker",
    "type" : "VelocityTracker",
    "comment" : "\n     * Determines speed during touch scrolling.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTouchSlop",
    "type" : "int",
    "comment" : "\n     * @see ViewConfiguration#getScaledTouchSlop()\n     ",
    "links" : [ ]
  }, {
    "name" : "mMinimumFlingVelocity",
    "type" : "int",
    "comment" : "\n     * @see ViewConfiguration#getScaledMinimumFlingVelocity()\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaximumFlingVelocity",
    "type" : "int",
    "comment" : "\n     * @see ViewConfiguration#getScaledMaximumFlingVelocity()\n     ",
    "links" : [ ]
  }, {
    "name" : "mWrapSelectorWheel",
    "type" : "boolean",
    "comment" : "\n     * Flag whether the selector should wrap around.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSolidColor",
    "type" : "int",
    "comment" : "\n     * The back ground color used to optimize scroller fading.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHasSelectorWheel",
    "type" : "boolean",
    "comment" : "\n     * Flag whether this widget has a selector wheel.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectionDivider",
    "type" : "Drawable",
    "comment" : "\n     * Divider for showing item to be selected while scrolling\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectionDividerHeight",
    "type" : "int",
    "comment" : "\n     * The height of the selection divider.\n     ",
    "links" : [ ]
  }, {
    "name" : "mScrollState",
    "type" : "int",
    "comment" : "\n     * The current scroll state of the number picker.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIgnoreMoveEvents",
    "type" : "boolean",
    "comment" : "\n     * Flag whether to ignore move events - we ignore such when we show in IME\n     * to prevent the content from scrolling.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPerformClickOnTap",
    "type" : "boolean",
    "comment" : "\n     * Flag whether to perform a click on tap.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTopSelectionDividerTop",
    "type" : "int",
    "comment" : "\n     * The top of the top selection divider.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBottomSelectionDividerBottom",
    "type" : "int",
    "comment" : "\n     * The bottom of the bottom selection divider.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastHoveredChildVirtualViewId",
    "type" : "int",
    "comment" : "\n     * The virtual id of the last hovered child.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIncrementVirtualButtonPressed",
    "type" : "boolean",
    "comment" : "\n     * Whether the increment virtual button is pressed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDecrementVirtualButtonPressed",
    "type" : "boolean",
    "comment" : "\n     * Whether the decrement virtual button is pressed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityNodeProvider",
    "type" : "AccessibilityNodeProviderImpl",
    "comment" : "\n     * Provider to report to clients the semantic structure of this widget.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPressedStateHelper",
    "type" : "PressedStateHelper",
    "comment" : "\n     * Helper class for managing pressed state of the virtual buttons.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastHandledDownDpadKeyCode",
    "type" : "int",
    "comment" : "\n     * The keycode of the last handled DPAD down event.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHideWheelUntilFocused",
    "type" : "boolean",
    "comment" : "\n     * If true then the selector wheel is hidden until the picker has focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIGIT_CHARACTERS",
    "type" : "char[]",
    "comment" : "\n     * The numbers accepted by the input text's {@link Filter}\n     ",
    "links" : [ "android.text.InputFilter" ]
  } ],
  "methods" : [ {
    "name" : "public static final Formatter getTwoDigitFormatter()",
    "returnType" : "Formatter",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean moveToFinalScrollerPosition(Scroller scroller)",
    "returnType" : "boolean",
    "comment" : "\n     * Move to the final position of a scroller. Ensures to force finish the scroller\n     * and if it is not at its final position a scroll of the selector wheel is\n     * performed to fast forward to the final position.\n     *\n     * @param scroller The scroller to whose final position to get.\n     * @return True of the a move was performed, i.e. the scroller was not in final position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onInterceptTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTrackballEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean dispatchHoverEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void computeScroll()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void scrollBy(int x, int y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeVerticalScrollOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeVerticalScrollRange()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeVerticalScrollExtent()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSolidColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnValueChangedListener(OnValueChangeListener onValueChangedListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to be notified on change of the current value.\n     *\n     * @param onValueChangedListener The listener.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnScrollListener(OnScrollListener onScrollListener)",
    "returnType" : "void",
    "comment" : "\n     * Set listener to be notified for scroll state changes.\n     *\n     * @param onScrollListener The listener.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFormatter(Formatter formatter)",
    "returnType" : "void",
    "comment" : "\n     * Set the formatter to be used for formatting the current value.\n     * <p>\n     * Note: If you have provided alternative values for the values this\n     * formatter is never invoked.\n     * </p>\n     *\n     * @param formatter The formatter object. If formatter is <code>null</code>,\n     *            {@link String#valueOf(int)} will be used.\n     *@see #setDisplayedValues(String[])\n     ",
    "links" : [ "#valueOf(int)" ]
  }, {
    "name" : "public void setValue(int value)",
    "returnType" : "void",
    "comment" : "\n     * Set the current value for the number picker.\n     * <p>\n     * If the argument is less than the {@link NumberPicker#getMinValue()} and\n     * {@link NumberPicker#getWrapSelectorWheel()} is <code>false</code> the\n     * current value is set to the {@link NumberPicker#getMinValue()} value.\n     * </p>\n     * <p>\n     * If the argument is less than the {@link NumberPicker#getMinValue()} and\n     * {@link NumberPicker#getWrapSelectorWheel()} is <code>true</code> the\n     * current value is set to the {@link NumberPicker#getMaxValue()} value.\n     * </p>\n     * <p>\n     * If the argument is more than the {@link NumberPicker#getMaxValue()} and\n     * {@link NumberPicker#getWrapSelectorWheel()} is <code>false</code> the\n     * current value is set to the {@link NumberPicker#getMaxValue()} value.\n     * </p>\n     * <p>\n     * If the argument is more than the {@link NumberPicker#getMaxValue()} and\n     * {@link NumberPicker#getWrapSelectorWheel()} is <code>true</code> the\n     * current value is set to the {@link NumberPicker#getMinValue()} value.\n     * </p>\n     *\n     * @param value The current value.\n     * @see #setWrapSelectorWheel(boolean)\n     * @see #setMinValue(int)\n     * @see #setMaxValue(int)\n     ",
    "links" : [ "android.widget.NumberPicker#getMinValue()", "android.widget.NumberPicker#getWrapSelectorWheel()", "android.widget.NumberPicker#getMaxValue()" ]
  }, {
    "name" : "public boolean performClick()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean performLongClick()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void showSoftInput()",
    "returnType" : "void",
    "comment" : "\n     * Shows the soft input for its input text.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void hideSoftInput()",
    "returnType" : "void",
    "comment" : "\n     * Hides the soft input if it is active for the input text.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void tryComputeMaxWidth()",
    "returnType" : "void",
    "comment" : "\n     * Computes the max width if no such specified as an attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getWrapSelectorWheel()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the selector wheel wraps when reaching the min/max value.\n     *\n     * @return True if the selector wheel wraps.\n     *\n     * @see #getMinValue()\n     * @see #getMaxValue()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWrapSelectorWheel(boolean wrapSelectorWheel)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the selector wheel shown during flinging/scrolling should\n     * wrap around the {@link NumberPicker#getMinValue()} and\n     * {@link NumberPicker#getMaxValue()} values.\n     * <p>\n     * By default if the range (max - min) is more than the number of items shown\n     * on the selector wheel the selector wheel wrapping is enabled.\n     * </p>\n     * <p>\n     * <strong>Note:</strong> If the number of items, i.e. the range (\n     * {@link #getMaxValue()} - {@link #getMinValue()}) is less than\n     * the number of items shown on the selector wheel, the selector wheel will\n     * not wrap. Hence, in such a case calling this method is a NOP.\n     * </p>\n     *\n     * @param wrapSelectorWheel Whether to wrap.\n     ",
    "links" : [ "#getMinValue()", "android.widget.NumberPicker#getMinValue()", "#getMaxValue()", "android.widget.NumberPicker#getMaxValue()" ]
  }, {
    "name" : "private void updateWrapSelectorWheel()",
    "returnType" : "void",
    "comment" : "\n     * Whether or not the selector wheel should be wrapped is determined by user choice and whether\n     * the choice is allowed. The former comes from {@link #setWrapSelectorWheel(boolean)}, the\n     * latter is calculated based on min & max value set vs selector's visual length. Therefore,\n     * this method should be called any time any of the 3 values (i.e. user choice, min and max\n     * value) gets updated.\n     ",
    "links" : [ "#setWrapSelectorWheel(boolean)" ]
  }, {
    "name" : "public void setOnLongPressUpdateInterval(long intervalMillis)",
    "returnType" : "void",
    "comment" : "\n     * Sets the speed at which the numbers be incremented and decremented when\n     * the up and down buttons are long pressed respectively.\n     * <p>\n     * The default value is 300 ms.\n     * </p>\n     *\n     * @param intervalMillis The speed (in milliseconds) at which the numbers\n     *            will be incremented and decremented.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of the picker.\n     *\n     * @return The value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the min value of the picker.\n     *\n     * @return The min value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinValue(int minValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the min value of the picker.\n     *\n     * @param minValue The min value inclusive.\n     *\n     * <strong>Note:</strong> The length of the displayed values array\n     * set via {@link #setDisplayedValues(String[])} must be equal to the\n     * range of selectable numbers which is equal to\n     * {@link #getMaxValue()} - {@link #getMinValue()} + 1.\n     ",
    "links" : [ "#getMinValue()", "#getMaxValue()", "#setDisplayedValues(String" ]
  }, {
    "name" : "public int getMaxValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the max value of the picker.\n     *\n     * @return The max value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxValue(int maxValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the max value of the picker.\n     *\n     * @param maxValue The max value inclusive.\n     *\n     * <strong>Note:</strong> The length of the displayed values array\n     * set via {@link #setDisplayedValues(String[])} must be equal to the\n     * range of selectable numbers which is equal to\n     * {@link #getMaxValue()} - {@link #getMinValue()} + 1.\n     ",
    "links" : [ "#getMinValue()", "#getMaxValue()", "#setDisplayedValues(String" ]
  }, {
    "name" : "public String[] getDisplayedValues()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the values to be displayed instead of string values.\n     *\n     * @return The displayed values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayedValues(String[] displayedValues)",
    "returnType" : "void",
    "comment" : "\n     * Sets the values to be displayed.\n     *\n     * @param displayedValues The displayed values.\n     *\n     * <strong>Note:</strong> The length of the displayed values array\n     * must be equal to the range of selectable numbers which is equal to\n     * {@link #getMaxValue()} - {@link #getMinValue()} + 1.\n     ",
    "links" : [ "#getMinValue()", "#getMaxValue()" ]
  }, {
    "name" : "public CharSequence getDisplayedValueForCurrentSelection()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieves the displayed value for the current selection in this picker.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelectionDividerHeight(@IntRange(from = 0) @Px int height)",
    "returnType" : "void",
    "comment" : "\n     * Set the height for the divider that separates the currently selected value from the others.\n     * @param height The height to be set\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSelectionDividerHeight()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the height for the divider that separates the currently selected value from the\n     * others.\n     * @return The height of the divider\n     ",
    "links" : [ ]
  }, {
    "name" : "protected float getTopFadingEdgeStrength()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected float getBottomFadingEdgeStrength()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpDrawablesToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onResolveDrawables(@ResolvedLayoutDir int layoutDirection)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeProvider getAccessibilityNodeProvider()",
    "returnType" : "AccessibilityNodeProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTextColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text color for all the states (normal, selected, focused) to be the given color.\n     *\n     * @param color A color value in the form 0xAARRGGBB.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTextColor()",
    "returnType" : "int",
    "comment" : "\n     * @return the text color.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTextSize(@FloatRange(from = 0.0, fromInclusive = false) float size)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text size to the given value. This value must be > 0\n     *\n     * @param size The size in pixel units.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getTextSize()",
    "returnType" : "float",
    "comment" : "\n     * @return the size (in pixels) of the text size in this NumberPicker.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int makeMeasureSpec(int measureSpec, int maxSize)",
    "returnType" : "int",
    "comment" : "\n     * Makes a measure spec that tries greedily to use the max value.\n     *\n     * @param measureSpec The measure spec.\n     * @param maxSize The max value for the size.\n     * @return A measure spec greedily imposing the max size.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int resolveSizeAndStateRespectingMinSize(int minSize, int measuredSize, int measureSpec)",
    "returnType" : "int",
    "comment" : "\n     * Utility to reconcile a desired size and state, with constraints imposed\n     * by a MeasureSpec. Tries to respect the min size, unless a different size\n     * is imposed by the constraints.\n     *\n     * @param minSize The minimal desired size.\n     * @param measuredSize The currently measured size.\n     * @param measureSpec The current measure spec.\n     * @return The resolved size and state.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeSelectorWheelIndices()",
    "returnType" : "void",
    "comment" : "\n     * Resets the selector indices and clear the cached string representation of\n     * these indices.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setValueInternal(int current, boolean notifyChange)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current value of this NumberPicker.\n     *\n     * @param current The new value of the NumberPicker.\n     * @param notifyChange Whether to notify if the current value changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void changeValueByOne(boolean increment)",
    "returnType" : "void",
    "comment" : "\n     * Changes the current value by one which is increment or\n     * decrement based on the passes argument.\n     * decrement the current value.\n     *\n     * @param increment True to increment, false to decrement.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeSelectorWheel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initializeFadingEdges()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onScrollerFinished(Scroller scroller)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked upon completion of a given <code>scroller</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onScrollStateChange(int scrollState)",
    "returnType" : "void",
    "comment" : "\n     * Handles transition to a given <code>scrollState</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "private void fling(int velocityY)",
    "returnType" : "void",
    "comment" : "\n     * Flings the selector with the given <code>velocityY</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getWrappedSelectorIndex(int selectorIndex)",
    "returnType" : "int",
    "comment" : "\n     * @return The wrapped index <code>selectorIndex</code> value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void incrementSelectorIndices(int[] selectorIndices)",
    "returnType" : "void",
    "comment" : "\n     * Increments the <code>selectorIndices</code> whose string representations\n     * will be displayed in the selector.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void decrementSelectorIndices(int[] selectorIndices)",
    "returnType" : "void",
    "comment" : "\n     * Decrements the <code>selectorIndices</code> whose string representations\n     * will be displayed in the selector.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureCachedScrollSelectorValue(int selectorIndex)",
    "returnType" : "void",
    "comment" : "\n     * Ensures we have a cached string representation of the given <code>\n     * selectorIndex</code> to avoid multiple instantiations of the same string.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String formatNumber(int value)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateInputTextView(View v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean updateInputTextView()",
    "returnType" : "boolean",
    "comment" : "\n     * Updates the view of this NumberPicker. If displayValues were specified in\n     * the string corresponding to the index specified by the current value will\n     * be returned. Otherwise, the formatter specified in {@link #setFormatter}\n     * will be used to format the number.\n     *\n     * @return Whether the text was updated.\n     ",
    "links" : [ "#setFormatter" ]
  }, {
    "name" : "private void notifyChange(int previous, int current)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the listener, if registered, of a change of the value of this\n     * NumberPicker.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void postChangeCurrentByOneFromLongPress(boolean increment, long delayMillis)",
    "returnType" : "void",
    "comment" : "\n     * Posts a command for changing the current value by one.\n     *\n     * @param increment Whether to increment or decrement the value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeChangeCurrentByOneFromLongPress()",
    "returnType" : "void",
    "comment" : "\n     * Removes the command for changing the current value by one.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void postBeginSoftInputOnLongPressCommand()",
    "returnType" : "void",
    "comment" : "\n     * Posts a command for beginning an edit of the current value via IME on\n     * long press.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeBeginSoftInputCommand()",
    "returnType" : "void",
    "comment" : "\n     * Removes the command for beginning an edit of the current value via IME.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeAllCallbacks()",
    "returnType" : "void",
    "comment" : "\n     * Removes all pending callback from the message queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getSelectedPos(String value)",
    "returnType" : "int",
    "comment" : "\n     * @return The selected index given its displayed <code>value</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void postSetSelectionCommand(int selectionStart, int selectionEnd)",
    "returnType" : "void",
    "comment" : "\n     * Posts a {@link SetSelectionCommand} from the given\n     * {@code selectionStart} to {@code selectionEnd}.\n     ",
    "links" : [ "SetSelectionCommand" ]
  }, {
    "name" : "private boolean ensureScrollWheelAdjusted()",
    "returnType" : "boolean",
    "comment" : "\n     * Ensures that the scroll wheel is adjusted i.e. there is no offset and the\n     * middle element is in the middle of the widget.\n     *\n     * @return Whether an adjustment has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String formatNumberWithLocale(int value)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final Formatter getTwoDigitFormatter()", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "private boolean moveToFinalScrollerPosition(Scroller scroller)", "public boolean onInterceptTouchEvent(MotionEvent event)", "public boolean onTouchEvent(MotionEvent event)", "public boolean dispatchTouchEvent(MotionEvent event)", "public boolean dispatchKeyEvent(KeyEvent event)", "public boolean dispatchTrackballEvent(MotionEvent event)", "protected boolean dispatchHoverEvent(MotionEvent event)", "public void computeScroll()", "public void setEnabled(boolean enabled)", "public void scrollBy(int x, int y)", "protected int computeVerticalScrollOffset()", "protected int computeVerticalScrollRange()", "protected int computeVerticalScrollExtent()", "public int getSolidColor()", "public void setOnValueChangedListener(OnValueChangeListener onValueChangedListener)", "public void setOnScrollListener(OnScrollListener onScrollListener)", "public void setFormatter(Formatter formatter)", "public void setValue(int value)", "public boolean performClick()", "public boolean performLongClick()", "private void showSoftInput()", "private void hideSoftInput()", "private void tryComputeMaxWidth()", "public boolean getWrapSelectorWheel()", "public void setWrapSelectorWheel(boolean wrapSelectorWheel)", "private void updateWrapSelectorWheel()", "public void setOnLongPressUpdateInterval(long intervalMillis)", "public int getValue()", "public int getMinValue()", "public void setMinValue(int minValue)", "public int getMaxValue()", "public void setMaxValue(int maxValue)", "public String[] getDisplayedValues()", "public void setDisplayedValues(String[] displayedValues)", "public CharSequence getDisplayedValueForCurrentSelection()", "public void setSelectionDividerHeight(@IntRange(from = 0) @Px int height)", "public int getSelectionDividerHeight()", "protected float getTopFadingEdgeStrength()", "protected float getBottomFadingEdgeStrength()", "protected void onDetachedFromWindow()", "protected void drawableStateChanged()", "public void jumpDrawablesToCurrentState()", "public void onResolveDrawables(@ResolvedLayoutDir int layoutDirection)", "protected void onDraw(Canvas canvas)", "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)", "public AccessibilityNodeProvider getAccessibilityNodeProvider()", "public void setTextColor(@ColorInt int color)", "public int getTextColor()", "public void setTextSize(@FloatRange(from = 0.0, fromInclusive = false) float size)", "public float getTextSize()", "private int makeMeasureSpec(int measureSpec, int maxSize)", "private int resolveSizeAndStateRespectingMinSize(int minSize, int measuredSize, int measureSpec)", "private void initializeSelectorWheelIndices()", "private void setValueInternal(int current, boolean notifyChange)", "private void changeValueByOne(boolean increment)", "private void initializeSelectorWheel()", "private void initializeFadingEdges()", "private void onScrollerFinished(Scroller scroller)", "private void onScrollStateChange(int scrollState)", "private void fling(int velocityY)", "private int getWrappedSelectorIndex(int selectorIndex)", "private void incrementSelectorIndices(int[] selectorIndices)", "private void decrementSelectorIndices(int[] selectorIndices)", "private void ensureCachedScrollSelectorValue(int selectorIndex)", "private String formatNumber(int value)", "private void validateInputTextView(View v)", "private boolean updateInputTextView()", "private void notifyChange(int previous, int current)", "private void postChangeCurrentByOneFromLongPress(boolean increment, long delayMillis)", "private void removeChangeCurrentByOneFromLongPress()", "private void postBeginSoftInputOnLongPressCommand()", "private void removeBeginSoftInputCommand()", "private void removeAllCallbacks()", "private int getSelectedPos(String value)", "private void postSetSelectionCommand(int selectionStart, int selectionEnd)", "private boolean ensureScrollWheelAdjusted()", "private static String formatNumberWithLocale(int value)" ],
  "variableNames" : [ "SELECTOR_WHEEL_ITEM_COUNT", "DEFAULT_LONG_PRESS_UPDATE_INTERVAL", "SELECTOR_MIDDLE_ITEM_INDEX", "SELECTOR_MAX_FLING_VELOCITY_ADJUSTMENT", "SELECTOR_ADJUSTMENT_DURATION_MILLIS", "SNAP_SCROLL_DURATION", "TOP_AND_BOTTOM_FADING_EDGE_STRENGTH", "UNSCALED_DEFAULT_SELECTION_DIVIDER_HEIGHT", "UNSCALED_DEFAULT_SELECTION_DIVIDERS_DISTANCE", "DEFAULT_LAYOUT_RESOURCE_ID", "SIZE_UNSPECIFIED", "mWrapSelectorWheelPreferred", "sTwoDigitFormatter", "mIncrementButton", "mDecrementButton", "mInputText", "mSelectionDividersDistance", "mMinHeight", "mMaxHeight", "mMinWidth", "mMaxWidth", "mComputeMaxWidth", "mTextSize", "mSelectorTextGapHeight", "mDisplayedValues", "mMinValue", "mMaxValue", "mValue", "mOnValueChangeListener", "mOnScrollListener", "mFormatter", "mLongPressUpdateInterval", "mSelectorIndexToStringCache", "mSelectorIndices", "mSelectorWheelPaint", "mVirtualButtonPressedDrawable", "mSelectorElementHeight", "mInitialScrollOffset", "mCurrentScrollOffset", "mFlingScroller", "mAdjustScroller", "mPreviousScrollerY", "mSetSelectionCommand", "mChangeCurrentByOneFromLongPressCommand", "mBeginSoftInputOnLongPressCommand", "mLastDownEventY", "mLastDownEventTime", "mLastDownOrMoveEventY", "mVelocityTracker", "mTouchSlop", "mMinimumFlingVelocity", "mMaximumFlingVelocity", "mWrapSelectorWheel", "mSolidColor", "mHasSelectorWheel", "mSelectionDivider", "mSelectionDividerHeight", "mScrollState", "mIgnoreMoveEvents", "mPerformClickOnTap", "mTopSelectionDividerTop", "mBottomSelectionDividerBottom", "mLastHoveredChildVirtualViewId", "mIncrementVirtualButtonPressed", "mDecrementVirtualButtonPressed", "mAccessibilityNodeProvider", "mPressedStateHelper", "mLastHandledDownDpadKeyCode", "mHideWheelUntilFocused", "DIGIT_CHARACTERS" ]
}