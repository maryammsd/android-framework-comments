{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/AtomicBoolean.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "AtomicBoolean",
  "comment" : "\n * A {@code boolean} value that may be updated atomically. See the\n * {@link VarHandle} specification for descriptions of the properties\n * of atomic accesses. An {@code AtomicBoolean} is used in\n * applications such as atomically updated flags, and cannot be used\n * as a replacement for a {@link java.lang.Boolean}.\n *\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.lang.invoke.VarHandle", "java.lang.Boolean" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALUE",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final boolean get()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     *\n     * @return the current value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public final boolean compareAndSet(boolean expectedValue, boolean newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#compareAndSet}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful. False return indicates that\n     * the actual value was not equal to the expected value.\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public boolean weakCompareAndSet(boolean expectedValue, boolean newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#weakCompareAndSetPlain}.\n     *\n     * @deprecated This method has plain memory effects but the method\n     * name implies volatile memory effects (see methods such as\n     * {@link #compareAndExchange} and {@link #compareAndSet}).  To avoid\n     * confusion over plain or volatile memory effects it is recommended that\n     * the method {@link #weakCompareAndSetPlain} be used instead.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @see #weakCompareAndSetPlain\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetPlain", "#compareAndExchange", "#compareAndSet", "#weakCompareAndSetPlain" ]
  }, {
    "name" : "public boolean weakCompareAndSetPlain(boolean expectedValue, boolean newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#weakCompareAndSetPlain}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetPlain" ]
  }, {
    "name" : "public final void set(boolean newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setVolatile}.\n     *\n     * @param newValue the new value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setVolatile" ]
  }, {
    "name" : "public final void lazySet(boolean newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setRelease}.\n     *\n     * @param newValue the new value\n     * @since 1.6\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setRelease" ]
  }, {
    "name" : "public final boolean getAndSet(boolean newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value to {@code newValue} and returns the old value,\n     * with memory effects as specified by {@link VarHandle#getAndSet}.\n     *\n     * @param newValue the new value\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndSet" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the String representation of the current value.\n     * @return the String representation of the current value\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean getPlain()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current value, with memory semantics of reading as\n     * if the variable was declared non-{@code volatile}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setPlain(boolean newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue}, with memory semantics\n     * of setting as if the variable was declared non-{@code volatile}\n     * and non-{@code final}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean getOpaque()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getOpaque}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getOpaque" ]
  }, {
    "name" : "public final void setOpaque(boolean newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setOpaque}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setOpaque" ]
  }, {
    "name" : "public final boolean getAcquire()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getAcquire}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAcquire" ]
  }, {
    "name" : "public final void setRelease(boolean newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setRelease}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setRelease" ]
  }, {
    "name" : "public final boolean compareAndExchange(boolean expectedValue, boolean newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchange}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchange" ]
  }, {
    "name" : "public final boolean compareAndExchangeAcquire(boolean expectedValue, boolean newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchangeAcquire}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchangeAcquire" ]
  }, {
    "name" : "public final boolean compareAndExchangeRelease(boolean expectedValue, boolean newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchangeRelease}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchangeRelease" ]
  }, {
    "name" : "public final boolean weakCompareAndSetVolatile(boolean expectedValue, boolean newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue} if the current\n     * value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSet}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSet" ]
  }, {
    "name" : "public final boolean weakCompareAndSetAcquire(boolean expectedValue, boolean newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue} if the current\n     * value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSetAcquire}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetAcquire" ]
  }, {
    "name" : "public final boolean weakCompareAndSetRelease(boolean expectedValue, boolean newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue} if the current\n     * value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSetRelease}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetRelease" ]
  } ],
  "methodNames" : [ "public final boolean get()", "public final boolean compareAndSet(boolean expectedValue, boolean newValue)", "public boolean weakCompareAndSet(boolean expectedValue, boolean newValue)", "public boolean weakCompareAndSetPlain(boolean expectedValue, boolean newValue)", "public final void set(boolean newValue)", "public final void lazySet(boolean newValue)", "public final boolean getAndSet(boolean newValue)", "public String toString()", "public final boolean getPlain()", "public final void setPlain(boolean newValue)", "public final boolean getOpaque()", "public final void setOpaque(boolean newValue)", "public final boolean getAcquire()", "public final void setRelease(boolean newValue)", "public final boolean compareAndExchange(boolean expectedValue, boolean newValue)", "public final boolean compareAndExchangeAcquire(boolean expectedValue, boolean newValue)", "public final boolean compareAndExchangeRelease(boolean expectedValue, boolean newValue)", "public final boolean weakCompareAndSetVolatile(boolean expectedValue, boolean newValue)", "public final boolean weakCompareAndSetAcquire(boolean expectedValue, boolean newValue)", "public final boolean weakCompareAndSetRelease(boolean expectedValue, boolean newValue)" ],
  "variableNames" : [ "serialVersionUID", "VALUE", "value" ]
}