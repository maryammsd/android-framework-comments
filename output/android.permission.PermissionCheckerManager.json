{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/permission/PermissionCheckerManager.java",
  "packageName" : "android.permission",
  "className" : "PermissionCheckerManager",
  "comment" : "\n * Manager for checking runtime and app op permissions. This is a temporary\n * class and we may fold its function in the PermissionManager once the\n * permission re-architecture starts falling into place. The main benefit\n * of this class is to allow context level caching.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PERMISSION_GRANTED",
    "type" : "int",
    "comment" : "\n     * The permission is granted.\n     ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_SOFT_DENIED",
    "type" : "int",
    "comment" : "\n     * The permission is denied. Applicable only to runtime and app op permissions.\n     *\n     * <p>Returned when:\n     * <ul>\n     *   <li>the runtime permission is granted, but the corresponding app op is denied\n     *       for runtime permissions.</li>\n     *   <li>the app ops is ignored for app op permissions.</li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_HARD_DENIED",
    "type" : "int",
    "comment" : "\n     * The permission is denied.\n     *\n     * <p>Returned when:\n     * <ul>\n     *   <li>the permission is denied for non app op permissions.</li>\n     *   <li>the app op is denied or app op is {@link AppOpsManager#MODE_DEFAULT}\n     *   and permission is denied.</li>\n     * </ul>\n     ",
    "links" : [ "android.app.AppOpsManager#MODE_DEFAULT" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IPermissionChecker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageManager",
    "type" : "PackageManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int checkPermission(@NonNull String permission, @NonNull AttributionSourceState attributionSource, @Nullable String message, boolean forDataDelivery, boolean startDataDelivery, boolean fromDatasource, int attributedOp)",
    "returnType" : "int",
    "comment" : "\n     * Checks a permission by validating the entire attribution source chain. If the\n     * permission is associated with an app op the op is also noted/started for the\n     * entire attribution chain.\n     *\n     * @param permission The permission\n     * @param attributionSource The attribution chain to check.\n     * @param message Message associated with the permission if permission has an app op\n     * @param forDataDelivery Whether the check is for delivering data if permission has an app op\n     * @param startDataDelivery Whether to start data delivery (start op) if permission has\n     *     an app op\n     * @param fromDatasource Whether the check is by a datasource (skip checks for the\n     *     first attribution source in the chain as this is the datasource)\n     * @param attributedOp Alternative app op to attribute\n     * @return The permission check result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void finishDataDelivery(int op, @NonNull AttributionSourceState attributionSource, boolean fromDatasource)",
    "returnType" : "void",
    "comment" : "\n     * Finishes an app op by validating the entire attribution source chain.\n     *\n     * @param op The op to finish.\n     * @param attributionSource The attribution chain to finish.\n     * @param fromDatasource Whether the finish is by a datasource (skip finish for the\n     *     first attribution source in the chain as this is the datasource)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int checkOp(int op, @NonNull AttributionSourceState attributionSource, @Nullable String message, boolean forDataDelivery, boolean startDataDelivery)",
    "returnType" : "int",
    "comment" : "\n     * Checks an app op by validating the entire attribution source chain. The op is\n     * also noted/started for the entire attribution chain.\n     *\n     * @param op The op to check.\n     * @param attributionSource The attribution chain to check.\n     * @param message Message associated with the permission if permission has an app op\n     * @param forDataDelivery Whether the check is for delivering data if permission has an app op\n     * @param startDataDelivery Whether to start data delivery (start op) if permission has\n     *     an app op\n     * @return The op check result.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int checkPermission(@NonNull String permission, @NonNull AttributionSourceState attributionSource, @Nullable String message, boolean forDataDelivery, boolean startDataDelivery, boolean fromDatasource, int attributedOp)", "public void finishDataDelivery(int op, @NonNull AttributionSourceState attributionSource, boolean fromDatasource)", "public int checkOp(int op, @NonNull AttributionSourceState attributionSource, @Nullable String message, boolean forDataDelivery, boolean startDataDelivery)" ],
  "variableNames" : [ "PERMISSION_GRANTED", "PERMISSION_SOFT_DENIED", "PERMISSION_HARD_DENIED", "mContext", "mService", "mPackageManager" ]
}