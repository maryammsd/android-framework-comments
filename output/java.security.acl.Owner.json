{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/acl/Owner.java",
  "packageName" : "java.security.acl",
  "className" : "Owner",
  "comment" : "\n * Interface for managing owners of Access Control Lists (ACLs) or ACL\n * configurations. (Note that the Acl interface in the\n * {@code  java.security.acl} package extends this Owner\n * interface.) The initial owner Principal should be specified as an\n * argument to the constructor of the class implementing this interface.\n *\n * @since 1.1\n * @see java.security.acl.Acl\n *\n * @deprecated This class is deprecated and subject to removal in a future\n *     version of Java SE. It has been replaced by {@code java.security.Policy}\n *     and related classes since 1.2.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean addOwner(Principal caller, Principal owner) throws NotOwnerException",
    "returnType" : "boolean",
    "comment" : "\n     * Adds an owner. Only owners can modify ACL contents. The caller\n     * principal must be an owner of the ACL in order to invoke this method.\n     * That is, only an owner can add another owner. The initial owner is\n     * configured at ACL construction time.\n     *\n     * @param caller the principal invoking this method. It must be an owner\n     * of the ACL.\n     *\n     * @param owner the owner that should be added to the list of owners.\n     *\n     * @return true if successful, false if owner is already an owner.\n     * @exception NotOwnerException if the caller principal is not an owner\n     * of the ACL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteOwner(Principal caller, Principal owner) throws NotOwnerException, LastOwnerException",
    "returnType" : "boolean",
    "comment" : "\n     * Deletes an owner. If this is the last owner in the ACL, an exception is\n     * raised.<p>\n     *\n     * The caller principal must be an owner of the ACL in order to invoke\n     * this method.\n     *\n     * @param caller the principal invoking this method. It must be an owner\n     * of the ACL.\n     *\n     * @param owner the owner to be removed from the list of owners.\n     *\n     * @return true if the owner is removed, false if the owner is not part\n     * of the list of owners.\n     *\n     * @exception NotOwnerException if the caller principal is not an owner\n     * of the ACL.\n     *\n     * @exception LastOwnerException if there is only one owner left, so that\n     * deleteOwner would leave the ACL owner-less.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOwner(Principal owner)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given principal is an owner of the ACL.\n     *\n     * @param owner the principal to be checked to determine whether or not\n     * it is an owner.\n     *\n     * @return true if the passed principal is in the list of owners, false\n     * if not.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean addOwner(Principal caller, Principal owner) throws NotOwnerException", "public boolean deleteOwner(Principal caller, Principal owner) throws NotOwnerException, LastOwnerException", "public boolean isOwner(Principal owner)" ],
  "variableNames" : [ ]
}