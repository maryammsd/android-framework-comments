{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaCodec.java",
  "packageName" : "android.media",
  "className" : "CryptoInfo",
  "comment" : "\n     * Metadata describing the structure of an encrypted input sample.\n     * <p>\n     * A buffer's data is considered to be partitioned into \"subSamples\". Each subSample starts with\n     * a run of plain, unencrypted bytes followed by a run of encrypted bytes. Either of these runs\n     * may be empty. If pattern encryption applies, each of the encrypted runs is encrypted only\n     * partly, according to a repeating pattern of \"encrypt\" and \"skip\" blocks.\n     * {@link #numBytesOfClearData} can be null to indicate that all data is encrypted, and\n     * {@link #numBytesOfEncryptedData} can be null to indicate that all data is clear. At least one\n     * of {@link #numBytesOfClearData} and {@link #numBytesOfEncryptedData} must be non-null.\n     * <p>\n     * This information encapsulates per-sample metadata as outlined in ISO/IEC FDIS 23001-7:2016\n     * \"Common encryption in ISO base media file format files\".\n     * <p>\n     * <h3>ISO-CENC Schemes</h3>\n     * ISO/IEC FDIS 23001-7:2016 defines four possible schemes by which media may be encrypted,\n     * corresponding to each possible combination of an AES mode with the presence or absence of\n     * patterned encryption.\n     *\n     * <table style=\"width: 0%\">\n     *   <thead>\n     *     <tr>\n     *       <th>&nbsp;</th>\n     *       <th>AES-CTR</th>\n     *       <th>AES-CBC</th>\n     *     </tr>\n     *   </thead>\n     *   <tbody>\n     *     <tr>\n     *       <th>Without Patterns</th>\n     *       <td>cenc</td>\n     *       <td>cbc1</td>\n     *     </tr><tr>\n     *       <th>With Patterns</th>\n     *       <td>cens</td>\n     *       <td>cbcs</td>\n     *     </tr>\n     *   </tbody>\n     * </table>\n     *\n     * For {@code CryptoInfo}, the scheme is selected implicitly by the combination of the\n     * {@link #mode} field and the value set with {@link #setPattern}. For the pattern, setting the\n     * pattern to all zeroes (that is, both {@code blocksToEncrypt} and {@code blocksToSkip} are\n     * zero) is interpreted as turning patterns off completely. A scheme that does not use patterns\n     * will be selected, either cenc or cbc1. Setting the pattern to any nonzero value will choose\n     * one of the pattern-supporting schemes, cens or cbcs. The default pattern if\n     * {@link #setPattern} is never called is all zeroes.\n     * <p>\n     * <h4>HLS SAMPLE-AES Audio</h4>\n     * HLS SAMPLE-AES audio is encrypted in a manner compatible with the cbcs scheme, except that it\n     * does not use patterned encryption. However, if {@link #setPattern} is used to set the pattern\n     * to all zeroes, this will be interpreted as selecting the cbc1 scheme. The cbc1 scheme cannot\n     * successfully decrypt HLS SAMPLE-AES audio because of differences in how the IVs are handled.\n     * For this reason, it is recommended that a pattern of {@code 1} encrypted block and {@code 0}\n     * skip blocks be used with HLS SAMPLE-AES audio. This will trigger decryption to use cbcs mode\n     * while still decrypting every block.\n     ",
  "links" : [ "#mode", "#numBytesOfEncryptedData", "#setPattern", "#numBytesOfClearData" ],
  "variables" : [ {
    "name" : "numSubSamples",
    "type" : "int",
    "comment" : "\n         * The number of subSamples that make up the buffer's contents.\n         ",
    "links" : [ ]
  }, {
    "name" : "numBytesOfClearData",
    "type" : "int[]",
    "comment" : "\n         * The number of leading unencrypted bytes in each subSample. If null, all bytes are treated\n         * as encrypted and {@link #numBytesOfEncryptedData} must be specified.\n         ",
    "links" : [ "#numBytesOfEncryptedData" ]
  }, {
    "name" : "numBytesOfEncryptedData",
    "type" : "int[]",
    "comment" : "\n         * The number of trailing encrypted bytes in each subSample. If null, all bytes are treated\n         * as clear and {@link #numBytesOfClearData} must be specified.\n         ",
    "links" : [ "#numBytesOfClearData" ]
  }, {
    "name" : "key",
    "type" : "byte[]",
    "comment" : "\n         * A 16-byte key id\n         ",
    "links" : [ ]
  }, {
    "name" : "iv",
    "type" : "byte[]",
    "comment" : "\n         * A 16-byte initialization vector\n         ",
    "links" : [ ]
  }, {
    "name" : "mode",
    "type" : "int",
    "comment" : "\n         * The type of encryption that has been applied,\n         * see {@link #CRYPTO_MODE_UNENCRYPTED}, {@link #CRYPTO_MODE_AES_CTR}\n         * and {@link #CRYPTO_MODE_AES_CBC}\n         ",
    "links" : [ "#CRYPTO_MODE_UNENCRYPTED", "#CRYPTO_MODE_AES_CTR", "#CRYPTO_MODE_AES_CBC" ]
  }, {
    "name" : "ZERO_PATTERN",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPattern",
    "type" : "Pattern",
    "comment" : "\n         * The pattern applicable to the protected data in each subsample.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void set(int newNumSubSamples, @NonNull int[] newNumBytesOfClearData, @NonNull int[] newNumBytesOfEncryptedData, @NonNull byte[] newKey, @NonNull byte[] newIV, int newMode)",
    "returnType" : "void",
    "comment" : "\n         * Set the subsample count, clear/encrypted sizes, key, IV and mode fields of\n         * a {@link MediaCodec.CryptoInfo} instance.\n         ",
    "links" : [ "MediaCodec.CryptoInfo" ]
  }, {
    "name" : "public Pattern getPattern()",
    "returnType" : "Pattern",
    "comment" : "\n         * Returns the {@link Pattern encryption pattern}.\n         ",
    "links" : [ "Pattern" ]
  }, {
    "name" : "public void setPattern(Pattern newPattern)",
    "returnType" : "void",
    "comment" : "\n         * Set the encryption pattern on a {@link MediaCodec.CryptoInfo} instance.\n         * See {@link Pattern}.\n         ",
    "links" : [ "Pattern", "MediaCodec.CryptoInfo" ]
  }, {
    "name" : "private void setPattern(int blocksToEncrypt, int blocksToSkip)",
    "returnType" : "void",
    "comment" : " Accessed from android_media_MediaExtractor.cpp.",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void set(int newNumSubSamples, @NonNull int[] newNumBytesOfClearData, @NonNull int[] newNumBytesOfEncryptedData, @NonNull byte[] newKey, @NonNull byte[] newIV, int newMode)", "public Pattern getPattern()", "public void setPattern(Pattern newPattern)", "private void setPattern(int blocksToEncrypt, int blocksToSkip)", "public String toString()" ],
  "variableNames" : [ "numSubSamples", "numBytesOfClearData", "numBytesOfEncryptedData", "key", "iv", "mode", "ZERO_PATTERN", "mPattern" ]
}