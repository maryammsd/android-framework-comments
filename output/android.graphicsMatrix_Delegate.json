{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Matrix_Delegate.java",
  "packageName" : "android.graphics",
  "className" : "Matrix_Delegate",
  "comment" : "\n * Delegate implementing the native methods of android.graphics.Matrix\n *\n * Through the layoutlib_create tool, the original native methods of Matrix have been replaced\n * by calls to methods of the same name in this delegate class.\n *\n * This class behaves like the original native implementation, but in Java, keeping previously\n * native data into its own objects and mapping them to int that are sent back and forth between\n * it and the original Matrix class.\n *\n * @see DelegateManager\n *\n ",
  "variables" : [ {
    "name" : "MATRIX_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sManager",
    "type" : "DelegateManager<Matrix_Delegate>",
    "comment" : " ---- delegate manager ----",
    "links" : [ ]
  }, {
    "name" : "sFinalizer",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "float[]",
    "comment" : " ---- delegate data ----",
    "links" : [ ]
  }, {
    "name" : "kIdentity_Mask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kTranslate_Mask",
    "type" : "int",
    "comment" : "!< set if the matrix has translation",
    "links" : [ ]
  }, {
    "name" : "kScale_Mask",
    "type" : "int",
    "comment" : "!< set if the matrix has X or Y scale",
    "links" : [ ]
  }, {
    "name" : "kAffine_Mask",
    "type" : "int",
    "comment" : "!< set if the matrix skews or rotates",
    "links" : [ ]
  }, {
    "name" : "kPerspective_Mask",
    "type" : "int",
    "comment" : "!< set if the matrix is in perspective",
    "links" : [ ]
  }, {
    "name" : "kRectStaysRect_Mask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kUnknown_Mask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kAllMasks",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kTranslate_Shift",
    "type" : "int",
    "comment" : " these guys align with the masks, so we can compute a mask from a variable 0/1",
    "links" : [ ]
  }, {
    "name" : "kScale_Shift",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kAffine_Shift",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kPerspective_Shift",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kRectStaysRect_Shift",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Matrix_Delegate getDelegate(long native_instance)",
    "returnType" : "Matrix_Delegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AffineTransform getAffineTransform(Matrix m)",
    "returnType" : "AffineTransform",
    "comment" : "\n     * Returns an {@link AffineTransform} matching the given Matrix.\n     ",
    "links" : [ "AffineTransform" ]
  }, {
    "name" : "public static boolean hasPerspective(Matrix m)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void set(Matrix_Delegate matrix)",
    "returnType" : "void",
    "comment" : "\n     * Sets the content of the matrix with the content of another matrix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(float[] values)",
    "returnType" : "void",
    "comment" : "\n     * Sets the content of the matrix with the content of another matrix represented as an array\n     * of values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the matrix to be the identity matrix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdentity()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not the matrix is identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static float[] setValues(AffineTransform matrix, float[] values)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float[] makeValues(AffineTransform matrix)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Matrix_Delegate make(AffineTransform matrix)",
    "returnType" : "Matrix_Delegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean mapRect(RectF dst, RectF src)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AffineTransform getAffineTransform()",
    "returnType" : "AffineTransform",
    "comment" : "\n     * Returns an {@link AffineTransform} matching the matrix.\n     ",
    "links" : [ "AffineTransform" ]
  }, {
    "name" : "public boolean hasPerspective()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nCreate(long native_src_or_zero)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nIsIdentity(long native_object)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nIsAffine(long native_object)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nRectStaysRect(long native_object)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nReset(long native_object)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSet(long native_object, long other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetTranslate(long native_object, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetScale(long native_object, float sx, float sy, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetScale(long native_object, float sx, float sy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetRotate(long native_object, float degrees, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetRotate(long native_object, float degrees)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetSinCos(long native_object, float sinValue, float cosValue, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetSinCos(long native_object, float sinValue, float cosValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetSkew(long native_object, float kx, float ky, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetSkew(long native_object, float kx, float ky)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetConcat(long native_object, long a, long b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPreTranslate(long native_object, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPreScale(long native_object, float sx, float sy, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPreScale(long native_object, float sx, float sy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPreRotate(long native_object, float degrees, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPreRotate(long native_object, float degrees)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPreSkew(long native_object, float kx, float ky, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPreSkew(long native_object, float kx, float ky)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPreConcat(long native_object, long other_matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPostTranslate(long native_object, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPostScale(long native_object, float sx, float sy, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPostScale(long native_object, float sx, float sy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPostRotate(long native_object, float degrees, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPostRotate(long native_object, float degrees)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPostSkew(long native_object, float kx, float ky, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPostSkew(long native_object, float kx, float ky)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nPostConcat(long native_object, long other_matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nSetRectToRect(long native_object, RectF src, RectF dst, int stf)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nSetPolyToPoly(long native_object, float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nInvert(long native_object, long inverse)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nMapPoints(long native_object, float[] dst, int dstIndex, float[] src, int srcIndex, int ptCount, boolean isPts)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nMapRect(long native_object, RectF dst, RectF src)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nMapRadius(long native_object, float radius)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nGetValues(long native_object, float[] values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetValues(long native_object, float[] values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nEquals(long native_a, long native_b)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nGetNativeFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static AffineTransform getAffineTransform(float[] matrix)",
    "returnType" : "AffineTransform",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private static void reset(float[] mtx)",
    "returnType" : "void",
    "comment" : "\n     * Reset a matrix to the identity\n     ",
    "links" : [ ]
  }, {
    "name" : "private int computeTypeMask()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postTransform(float[] matrix)",
    "returnType" : "void",
    "comment" : "\n     * Adds the given transformation to the current Matrix\n     * <p/>This in effect does this = this*matrix\n     * @param matrix\n     ",
    "links" : [ ]
  }, {
    "name" : "private void preTransform(float[] matrix)",
    "returnType" : "void",
    "comment" : "\n     * Adds the given transformation to the current Matrix\n     * <p/>This in effect does this = matrix*this\n     * @param matrix\n     ",
    "links" : [ ]
  }, {
    "name" : "private void mapPoints(float[] dst, int dstIndex, float[] src, int srcIndex, int pointCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void mapPoints(float[] pts)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void mapVectors(float[] dst, int dstIndex, float[] src, int srcIndex, int ptCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void multiply(float[] dest, float[] a, float[] b)",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] getTranslate(float dx, float dy)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] setTranslate(float[] dest, float dx, float dy)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] getScale(float sx, float sy)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] getScale(float sx, float sy, float px, float py)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] getRotate(float degrees)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] getRotate(float sin, float cos)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] setRotate(float[] dest, float degrees)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] setRotate(float[] dest, float sin, float cos)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] getRotate(float degrees, float px, float py)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] getSkew(float kx, float ky)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static float[] getSkew(float kx, float ky, float px, float py)",
    "returnType" : "float[]",
    "comment" : "package",
    "links" : [ ]
  } ],
  "variableNames" : [ "MATRIX_SIZE", "sManager", "sFinalizer", "mValues", "kIdentity_Mask", "kTranslate_Mask", "kScale_Mask", "kAffine_Mask", "kPerspective_Mask", "kRectStaysRect_Mask", "kUnknown_Mask", "kAllMasks", "kTranslate_Shift", "kScale_Shift", "kAffine_Shift", "kPerspective_Shift", "kRectStaysRect_Shift" ],
  "methodNames" : [ "public static Matrix_Delegate getDelegate(long native_instance)", "public static AffineTransform getAffineTransform(Matrix m)", "public static boolean hasPerspective(Matrix m)", "public void set(Matrix_Delegate matrix)", "public void set(float[] values)", "public void reset()", "public boolean isIdentity()", "private static float[] setValues(AffineTransform matrix, float[] values)", "public static float[] makeValues(AffineTransform matrix)", "public static Matrix_Delegate make(AffineTransform matrix)", "public boolean mapRect(RectF dst, RectF src)", "public AffineTransform getAffineTransform()", "public boolean hasPerspective()", " static long nCreate(long native_src_or_zero)", " static boolean nIsIdentity(long native_object)", " static boolean nIsAffine(long native_object)", " static boolean nRectStaysRect(long native_object)", " static void nReset(long native_object)", " static void nSet(long native_object, long other)", " static void nSetTranslate(long native_object, float dx, float dy)", " static void nSetScale(long native_object, float sx, float sy, float px, float py)", " static void nSetScale(long native_object, float sx, float sy)", " static void nSetRotate(long native_object, float degrees, float px, float py)", " static void nSetRotate(long native_object, float degrees)", " static void nSetSinCos(long native_object, float sinValue, float cosValue, float px, float py)", " static void nSetSinCos(long native_object, float sinValue, float cosValue)", " static void nSetSkew(long native_object, float kx, float ky, float px, float py)", " static void nSetSkew(long native_object, float kx, float ky)", " static void nSetConcat(long native_object, long a, long b)", " static void nPreTranslate(long native_object, float dx, float dy)", " static void nPreScale(long native_object, float sx, float sy, float px, float py)", " static void nPreScale(long native_object, float sx, float sy)", " static void nPreRotate(long native_object, float degrees, float px, float py)", " static void nPreRotate(long native_object, float degrees)", " static void nPreSkew(long native_object, float kx, float ky, float px, float py)", " static void nPreSkew(long native_object, float kx, float ky)", " static void nPreConcat(long native_object, long other_matrix)", " static void nPostTranslate(long native_object, float dx, float dy)", " static void nPostScale(long native_object, float sx, float sy, float px, float py)", " static void nPostScale(long native_object, float sx, float sy)", " static void nPostRotate(long native_object, float degrees, float px, float py)", " static void nPostRotate(long native_object, float degrees)", " static void nPostSkew(long native_object, float kx, float ky, float px, float py)", " static void nPostSkew(long native_object, float kx, float ky)", " static void nPostConcat(long native_object, long other_matrix)", " static boolean nSetRectToRect(long native_object, RectF src, RectF dst, int stf)", " static boolean nSetPolyToPoly(long native_object, float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)", " static boolean nInvert(long native_object, long inverse)", " static void nMapPoints(long native_object, float[] dst, int dstIndex, float[] src, int srcIndex, int ptCount, boolean isPts)", " static boolean nMapRect(long native_object, RectF dst, RectF src)", " static float nMapRadius(long native_object, float radius)", " static void nGetValues(long native_object, float[] values)", " static void nSetValues(long native_object, float[] values)", " static boolean nEquals(long native_a, long native_b)", " static long nGetNativeFinalizer()", " static AffineTransform getAffineTransform(float[] matrix)", "private static void reset(float[] mtx)", "private int computeTypeMask()", "private void postTransform(float[] matrix)", "private void preTransform(float[] matrix)", "private void mapPoints(float[] dst, int dstIndex, float[] src, int srcIndex, int pointCount)", "private void mapPoints(float[] pts)", "private void mapVectors(float[] dst, int dstIndex, float[] src, int srcIndex, int ptCount)", " static void multiply(float[] dest, float[] a, float[] b)", " static float[] getTranslate(float dx, float dy)", " static float[] setTranslate(float[] dest, float dx, float dy)", " static float[] getScale(float sx, float sy)", " static float[] getScale(float sx, float sy, float px, float py)", " static float[] getRotate(float degrees)", " static float[] getRotate(float sin, float cos)", " static float[] setRotate(float[] dest, float degrees)", " static float[] setRotate(float[] dest, float sin, float cos)", " static float[] getRotate(float degrees, float px, float py)", " static float[] getSkew(float kx, float ky)", " static float[] getSkew(float kx, float ky, float px, float py)" ]
}