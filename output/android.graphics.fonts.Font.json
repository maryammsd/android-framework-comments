{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/fonts/Font.java",
  "packageName" : "android.graphics.fonts",
  "className" : "Font",
  "comment" : "\n * A font class can be used for creating FontFamily.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOT_SPECIFIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_ITALIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_NORMAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativePtr",
    "type" : "long",
    "comment" : " address of the shared ptr of minikin::Font",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuffer",
    "type" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsFileInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFile",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFontStyle",
    "type" : "FontStyle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAxes",
    "type" : "FontVariationAxis[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocaleList",
    "type" : "LocaleList",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ByteBuffer getBuffer()",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Returns a font file buffer.\n     *\n     * Duplicate before reading values by {@link ByteBuffer#duplicate()} for avoiding unexpected\n     * reading position sharing.\n     *\n     * @return a font buffer\n     ",
    "links" : [ "java.nio.ByteBuffer#duplicate()" ]
  }, {
    "name" : "public File getFile()",
    "returnType" : "File",
    "comment" : "\n     * Returns a file path of this font.\n     *\n     * This returns null if this font is not created from regular file.\n     *\n     * @return a file path of the font\n     ",
    "links" : [ ]
  }, {
    "name" : "public FontStyle getStyle()",
    "returnType" : "FontStyle",
    "comment" : "\n     * Get a style associated with this font.\n     *\n     * @see Builder#setWeight(int)\n     * @see Builder#setSlant(int)\n     * @return a font style\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTtcIndex()",
    "returnType" : "int",
    "comment" : "\n     * Get a TTC index value associated with this font.\n     *\n     * If TTF/OTF file is provided, this value is always 0.\n     *\n     * @see Builder#setTtcIndex(int)\n     * @return a TTC index value\n     ",
    "links" : [ ]
  }, {
    "name" : "public FontVariationAxis[] getAxes()",
    "returnType" : "FontVariationAxis[]",
    "comment" : "\n     * Get a font variation settings associated with this font\n     *\n     * @see Builder#setFontVariationSettings(String)\n     * @see Builder#setFontVariationSettings(FontVariationAxis[])\n     * @return font variation settings\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocaleList getLocaleList()",
    "returnType" : "LocaleList",
    "comment" : "\n     * Get a locale list of this font.\n     *\n     * This is always empty if this font is not a system font.\n     * @return a locale list\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getGlyphBounds(@IntRange(from = 0) int glyphId, @NonNull Paint paint, @Nullable RectF outBoundingBox)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the glyph horizontal advance and bounding box.\n     *\n     * Note that {@link android.graphics.Typeface} in {@link android.graphics.Paint} is ignored.\n     *\n     * @param glyphId a glyph ID\n     * @param paint a paint object used for resolving glyph style\n     * @param outBoundingBox a nullable destination object. If null is passed, this function just\n     *                      return the horizontal advance. If non-null is passed, this function\n     *                      fills bounding box information to this object.\n     * @return the amount of horizontal advance in pixels\n     ",
    "links" : [ "android.graphics.Typeface", "android.graphics.Paint" ]
  }, {
    "name" : "public void getMetrics(@NonNull Paint paint, @Nullable Paint.FontMetrics outMetrics)",
    "returnType" : "void",
    "comment" : "\n     * Retrieve the font metrics information.\n     *\n     * Note that {@link android.graphics.Typeface} in {@link android.graphics.Paint} is ignored.\n     *\n     * @param paint a paint object used for retrieving font metrics.\n     * @param outMetrics a nullable destination object. If null is passed, this function only\n     *                  retrieve recommended interline spacing. If non-null is passed, this function\n     *                  fills to font metrics to it.\n     *\n     * @see Paint#getFontMetrics()\n     * @see Paint#getFontMetricsInt()\n     ",
    "links" : [ "android.graphics.Typeface", "android.graphics.Paint" ]
  }, {
    "name" : "public long getNativePtr()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getSourceIdentifier()",
    "returnType" : "int",
    "comment" : "\n     * Returns the unique ID of the source font data.\n     *\n     * You can use this identifier as a key of the cache or checking if two fonts can be\n     * interpolated with font variation settings.\n     * <pre>\n     * <code>\n     *   // Following three Fonts, fontA, fontB, fontC have the same identifier.\n     *   Font fontA = new Font.Builder(\"/path/to/font\").build();\n     *   Font fontB = new Font.Builder(fontA).setTtcIndex(1).build();\n     *   Font fontC = new Font.Builder(fontB).setFontVariationSettings(\"'wght' 700).build();\n     *\n     *   // Following fontD has the different identifier from above three.\n     *   Font fontD = new Font.Builder(\"/path/to/another/font\").build();\n     *\n     *   // Following fontE has different identifier from above four even the font path is the same.\n     *   // To get the same identifier, please create new Font instance from existing fonts.\n     *   Font fontE = new Font.Builder(\"/path/to/font\").build();\n     * </code>\n     * </pre>\n     *\n     * Here is an example of caching font object that has\n     * <pre>\n     * <code>\n     *   private LongSparseArray<SparseArray<Font>> mCache = new LongSparseArray<>();\n     *\n     *   private Font getFontWeightVariation(Font font, int weight) {\n     *       // Different collection index is treated as different font.\n     *       long key = ((long) font.getSourceIdentifier()) << 32 | (long) font.getTtcIndex();\n     *\n     *       SparseArray<Font> weightCache = mCache.get(key);\n     *       if (weightCache == null) {\n     *          weightCache = new SparseArray<>();\n     *          mCache.put(key, weightCache);\n     *       }\n     *\n     *       Font cachedFont = weightCache.get(weight);\n     *       if (cachedFont != null) {\n     *         return cachedFont;\n     *       }\n     *\n     *       Font newFont = new Font.Builder(cachedFont)\n     *           .setFontVariationSettings(\"'wght' \" + weight);\n     *           .build();\n     *\n     *       weightCache.put(weight, newFont);\n     *       return newFont;\n     *   }\n     * </code>\n     * </pre>\n     * @return an unique identifier for the font source data.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isSameSource(@NonNull Font other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given font is created from the same source data from this font.\n     *\n     * This method essentially compares {@link ByteBuffer} inside Font, but has some optimization\n     * for faster comparing. This method compares the internal object before going to one-by-one\n     * byte compare with {@link ByteBuffer}. This typically works efficiently if you compares the\n     * font that is created from {@link Builder#Builder(Font)}.\n     *\n     * This API is typically useful for checking if two fonts can be interpolated by font variation\n     * axes. For example, when you call {@link android.text.TextShaper} for the same\n     * string but different style, you may get two font objects which is created from the same\n     * source but have different parameters. You may want to animate between them by interpolating\n     * font variation settings if these fonts are created from the same source.\n     *\n     * @param other a font object to be compared.\n     * @return true if given font is created from the same source from this font. Otherwise false.\n     ",
    "links" : [ "#Builder(Font)", "android.text.TextShaper", "java.nio.ByteBuffer" ]
  }, {
    "name" : "public boolean paramEquals(@NonNull Font f)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Set<Font> getAvailableFonts()",
    "returnType" : "Set<Font>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetMinikinFontPtr(long font)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCloneFont(long font)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native ByteBuffer nNewByteBuffer(long font)",
    "returnType" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetBufferAddress(long font)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetSourceId(long font)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetReleaseNativeFont()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetGlyphBounds(long font, int glyphId, long paint, RectF rect)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetFontMetrics(long font, long paint, Paint.FontMetrics metrics)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nGetFontPath(long fontPtr)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nGetLocaleList(long familyPtr)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetPackedStyle(long fontPtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetIndex(long fontPtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetAxisCount(long fontPtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetAxisInfo(long fontPtr, int i)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long[] nGetAvailableFontSet()",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ByteBuffer getBuffer()", "public File getFile()", "public FontStyle getStyle()", "public int getTtcIndex()", "public FontVariationAxis[] getAxes()", "public LocaleList getLocaleList()", "public float getGlyphBounds(@IntRange(from = 0) int glyphId, @NonNull Paint paint, @Nullable RectF outBoundingBox)", "public void getMetrics(@NonNull Paint paint, @Nullable Paint.FontMetrics outMetrics)", "public long getNativePtr()", "public int getSourceIdentifier()", "private boolean isSameSource(@NonNull Font other)", "public boolean paramEquals(@NonNull Font f)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public String toString()", "public static Set<Font> getAvailableFonts()", "private static native long nGetMinikinFontPtr(long font)", "private static native long nCloneFont(long font)", "private static native ByteBuffer nNewByteBuffer(long font)", "private static native long nGetBufferAddress(long font)", "private static native int nGetSourceId(long font)", "private static native long nGetReleaseNativeFont()", "private static native float nGetGlyphBounds(long font, int glyphId, long paint, RectF rect)", "private static native float nGetFontMetrics(long font, long paint, Paint.FontMetrics metrics)", "private static native String nGetFontPath(long fontPtr)", "private static native String nGetLocaleList(long familyPtr)", "private static native int nGetPackedStyle(long fontPtr)", "private static native int nGetIndex(long fontPtr)", "private static native int nGetAxisCount(long fontPtr)", "private static native long nGetAxisInfo(long fontPtr, int i)", "private static native long[] nGetAvailableFontSet()" ],
  "variableNames" : [ "TAG", "NOT_SPECIFIED", "STYLE_ITALIC", "STYLE_NORMAL", "mNativePtr", "mLock", "mBuffer", "mIsFileInitialized", "mFile", "mFontStyle", "mAxes", "mLocaleList" ]
}