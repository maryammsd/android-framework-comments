{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/function/IntUnaryOperator.java",
  "packageName" : "java.util.function",
  "className" : "IntUnaryOperator",
  "comment" : "\n * Represents an operation on a single {@code int}-valued operand that produces\n * an {@code int}-valued result.  This is the primitive type specialization of\n * {@link UnaryOperator} for {@code int}.\n *\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n * whose functional method is {@link #applyAsInt(int)}.\n *\n * @see UnaryOperator\n * @since 1.8\n ",
  "links" : [ "#applyAsInt(int)", "java.util.function.UnaryOperator" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int applyAsInt(int operand)",
    "returnType" : "int",
    "comment" : "\n     * Applies this operator to the given operand.\n     *\n     * @param operand the operand\n     * @return the operator result\n     ",
    "links" : [ ]
  }, {
    "name" : " IntUnaryOperator compose(IntUnaryOperator before)",
    "returnType" : "IntUnaryOperator",
    "comment" : "\n     * Returns a composed operator that first applies the {@code before}\n     * operator to its input, and then applies this operator to the result.\n     * If evaluation of either operator throws an exception, it is relayed to\n     * the caller of the composed operator.\n     *\n     * @param before the operator to apply before this operator is applied\n     * @return a composed operator that first applies the {@code before}\n     * operator and then applies this operator\n     * @throws NullPointerException if before is null\n     *\n     * @see #andThen(IntUnaryOperator)\n     ",
    "links" : [ ]
  }, {
    "name" : " IntUnaryOperator andThen(IntUnaryOperator after)",
    "returnType" : "IntUnaryOperator",
    "comment" : "\n     * Returns a composed operator that first applies this operator to\n     * its input, and then applies the {@code after} operator to the result.\n     * If evaluation of either operator throws an exception, it is relayed to\n     * the caller of the composed operator.\n     *\n     * @param after the operator to apply after this operator is applied\n     * @return a composed operator that first applies this operator and then\n     * applies the {@code after} operator\n     * @throws NullPointerException if after is null\n     *\n     * @see #compose(IntUnaryOperator)\n     ",
    "links" : [ ]
  }, {
    "name" : " static IntUnaryOperator identity()",
    "returnType" : "IntUnaryOperator",
    "comment" : "\n     * Returns a unary operator that always returns its input argument.\n     *\n     * @return a unary operator that always returns its input argument\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int applyAsInt(int operand)", " IntUnaryOperator compose(IntUnaryOperator before)", " IntUnaryOperator andThen(IntUnaryOperator after)", " static IntUnaryOperator identity()" ],
  "variableNames" : [ ]
}