{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/NodeSetDTM.java",
  "packageName" : "org.apache.xpath",
  "className" : "NodeSetDTM",
  "comment" : "\n * <p>The NodeSetDTM class can act as either a NodeVector,\n * NodeList, or NodeIterator.  However, in order for it to\n * act as a NodeVector or NodeList, it's required that\n * setShouldCacheNodes(true) be called before the first\n * nextNode() is called, in order that nodes can be added\n * as they are fetched.  Derived classes that implement iterators\n * must override runTo(int index), in order that they may\n * run the iteration to the given index. </p>\n * \n * <p>Note that we directly implement the DOM's NodeIterator\n * interface. We do not emulate all the behavior of the\n * standard NodeIterator. In particular, we do not guarantee\n * to present a \"live view\" of the document ... but in XSLT,\n * the source document should never be mutated, so this should\n * never be an issue.</p>\n * \n * <p>Thought: Should NodeSetDTM really implement NodeList and NodeIterator,\n * or should there be specific subclasses of it which do so? The\n * advantage of doing it all here is that all NodeSetDTMs will respond\n * to the same calls; the disadvantage is that some of them may return\n * less-than-enlightening results when you do so.</p>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_manager",
    "type" : "DTMManager",
    "comment" : " An instance of the DTMManager. ",
    "links" : [ ]
  }, {
    "name" : "m_next",
    "type" : "int",
    "comment" : " If this node is being used as an iterator, the next index that nextNode()\n   *  will return.  ",
    "links" : [ ]
  }, {
    "name" : "m_mutable",
    "type" : "boolean",
    "comment" : " True if this list can be mutated.  ",
    "links" : [ ]
  }, {
    "name" : "m_cacheNodes",
    "type" : "boolean",
    "comment" : " True if this list is cached.\n   *  @serial  ",
    "links" : [ ]
  }, {
    "name" : "m_root",
    "type" : "int",
    "comment" : " The root of the iteration, if available. ",
    "links" : [ ]
  }, {
    "name" : "m_last",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setEnvironment(Object environment)",
    "returnType" : "void",
    "comment" : "\n   * Set the environment in which this iterator operates, which should provide:\n   * a node (the context node... same value as \"root\" defined below) \n   * a pair of non-zero positive integers (the context position and the context size) \n   * a set of variable bindings \n   * a function library \n   * the set of namespace declarations in scope for the expression.\n   * \n   * <p>At this time the exact implementation of this environment is application \n   * dependent.  Probably a proper interface will be created fairly soon.</p>\n   * \n   * @param environment The environment object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getRoot()",
    "returnType" : "int",
    "comment" : "\n   * @return The root node of the Iterator, as specified when it was created.\n   * For non-Iterator NodeSetDTMs, this will be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRoot(int context, Object environment)",
    "returnType" : "void",
    "comment" : "\n   * Initialize the context values for this expression\n   * after it is cloned.\n   *\n   * @param context The XPath runtime context for this\n   * transformation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Clone this NodeSetDTM.\n   * At this time, we only expect this to be used with LocPathIterators;\n   * it may not work with other kinds of NodeSetDTMs.\n   *\n   * @return a new NodeSetDTM of the same type, having the same state...\n   * though unless overridden in the subclasses, it may not copy all\n   * the state information.\n   *\n   * @throws CloneNotSupportedException if this subclass of NodeSetDTM\n   * does not support the clone() operation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator cloneWithReset() throws CloneNotSupportedException",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Get a cloned Iterator, and reset its state to the beginning of the\n   * iteration.\n   *\n   * @return a new NodeSetDTM of the same type, having the same state...\n   * except that the reset() operation has been called.\n   *\n   * @throws CloneNotSupportedException if this subclass of NodeSetDTM\n   * does not support the clone() operation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * Reset the iterator. May have no effect on non-iterator Nodesets.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getWhatToShow()",
    "returnType" : "int",
    "comment" : "\n   *  This attribute determines which node types are presented via the\n   * iterator. The available set of constants is defined in the\n   * <code>DTMFilter</code> interface. For NodeSetDTMs, the mask has been\n   * hardcoded to show all nodes except EntityReference nodes, which have\n   * no equivalent in the XPath data model.\n   *\n   * @return integer used as a bit-array, containing flags defined in\n   * the DOM's DTMFilter class. The value will be \n   * <code>SHOW_ALL & ~SHOW_ENTITY_REFERENCE</code>, meaning that\n   * only entity references are suppressed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMFilter getFilter()",
    "returnType" : "DTMFilter",
    "comment" : "\n   * The filter object used to screen nodes. Filters are applied to\n   * further reduce (and restructure) the DTMIterator's view of the\n   * document. In our case, we will be using hardcoded filters built\n   * into our iterators... but getFilter() is part of the DOM's \n   * DTMIterator interface, so we have to support it.\n   *\n   * @return null, which is slightly misleading. True, there is no\n   * user-written filter object, but in fact we are doing some very\n   * sophisticated custom filtering. A DOM purist might suggest\n   * returning a placeholder object just to indicate that this is\n   * not going to return all nodes selected by whatToShow.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getExpandEntityReferences()",
    "returnType" : "boolean",
    "comment" : "\n   *  The value of this flag determines whether the children of entity\n   * reference nodes are visible to the iterator. If false, they will be\n   * skipped over.\n   * <br> To produce a view of the document that has entity references\n   * expanded and does not expose the entity reference node itself, use the\n   * whatToShow flags to hide the entity reference node and set\n   * expandEntityReferences to true when creating the iterator. To produce\n   * a view of the document that has entity reference nodes but no entity\n   * expansion, use the whatToShow flags to show the entity reference node\n   * and set expandEntityReferences to false.\n   *\n   * @return true for all iterators based on NodeSetDTM, meaning that the\n   * contents of EntityRefrence nodes may be returned (though whatToShow\n   * says that the EntityReferences themselves are not shown.)\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTM getDTM(int nodeHandle)",
    "returnType" : "DTM",
    "comment" : "\n   * Get an instance of a DTM that \"owns\" a node handle.  Since a node \n   * iterator may be passed without a DTMManager, this allows the \n   * caller to easily get the DTM using just the iterator.\n   *\n   * @param nodeHandle the nodeHandle.\n   *\n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMManager getDTMManager()",
    "returnType" : "DTMManager",
    "comment" : "\n   * Get an instance of the DTMManager.  Since a node \n   * iterator may be passed without a DTMManager, this allows the \n   * caller to easily get the DTMManager using just the iterator.\n   *\n   * @return a non-null DTMManager reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int nextNode()",
    "returnType" : "int",
    "comment" : "\n   *  Returns the next node in the set and advances the position of the\n   * iterator in the set. After a DTMIterator is created, the first call\n   * to nextNode() returns the first node in the set.\n   * @return  The next <code>Node</code> in the set being iterated over, or\n   *   <code>DTM.NULL</code> if there are no more members in that set.\n   * @throws DOMException\n   *    INVALID_STATE_ERR: Raised if this method is called after the\n   *   <code>detach</code> method was invoked.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int previousNode()",
    "returnType" : "int",
    "comment" : "\n   *  Returns the previous node in the set and moves the position of the\n   * iterator backwards in the set.\n   * @return  The previous <code>Node</code> in the set being iterated over,\n   *   or<code>DTM.NULL</code> if there are no more members in that set.\n   * @throws DOMException\n   *    INVALID_STATE_ERR: Raised if this method is called after the\n   *   <code>detach</code> method was invoked.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a cached type, and hence doesn't know what the previous node was.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   * Detaches the iterator from the set which it iterated over, releasing\n   * any computational resources and placing the iterator in the INVALID\n   * state. After<code>detach</code> has been invoked, calls to\n   * <code>nextNode</code> or<code>previousNode</code> will raise the\n   * exception INVALID_STATE_ERR.\n   * <p>\n   * This operation is a no-op in NodeSetDTM, and will not cause \n   * INVALID_STATE_ERR to be raised by later operations.\n   * </p>\n   ",
    "links" : [ ]
  }, {
    "name" : "public void allowDetachToRelease(boolean allowRelease)",
    "returnType" : "void",
    "comment" : "\n   * Specify if it's OK for detach to release the iterator for reuse.\n   * \n   * @param allowRelease true if it is OK for detach to release this iterator \n   * for pooling.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFresh()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if this NodeSetDTM is \"fresh\", in other words, if\n   * the first nextNode() that is called will return the\n   * first node in the set.\n   *\n   * @return true if nextNode() would return the first node in the set,\n   * false if it would return a later one.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void runTo(int index)",
    "returnType" : "void",
    "comment" : "\n   * If an index is requested, NodeSetDTM will call this method\n   * to run the iterator to the index.  By default this sets\n   * m_next to the index.  If the index argument is -1, this\n   * signals that the iterator should be run to the end.\n   *\n   * @param index Position to advance (or retreat) to, with\n   * 0 requesting the reset (\"fresh\") position and -1 (or indeed\n   * any out-of-bounds value) requesting the final position.\n   * @throws RuntimeException thrown if this NodeSetDTM is not\n   * one of the types which supports indexing/counting.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int item(int index)",
    "returnType" : "int",
    "comment" : "\n   * Returns the <code>index</code>th item in the collection. If\n   * <code>index</code> is greater than or equal to the number of nodes in\n   * the list, this returns <code>null</code>.\n   * \n   * TODO: What happens if index is out of range?\n   * \n   * @param index Index into the collection.\n   * @return The node at the <code>index</code>th position in the\n   *   <code>NodeList</code>, or <code>null</code> if that is not a valid\n   *   index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n   * The number of nodes in the list. The range of valid child node indices is\n   * 0 to <code>length-1</code> inclusive. Note that this operation requires\n   * finding all the matching nodes, which may defeat attempts to defer\n   * that work.\n   *\n   * @return integer indicating how many nodes are represented by this list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addNode(int n)",
    "returnType" : "void",
    "comment" : "\n   * Add a node to the NodeSetDTM. Not all types of NodeSetDTMs support this\n   * operation\n   *\n   * @param n Node to be added\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void insertNode(int n, int pos)",
    "returnType" : "void",
    "comment" : "\n   * Insert a node at a given position.\n   *\n   * @param n Node to be added\n   * @param pos Offset at which the node is to be inserted,\n   * with 0 being the first position.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void removeNode(int n)",
    "returnType" : "void",
    "comment" : "\n   * Remove a node.\n   *\n   * @param n Node to be added\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addNodes(DTMIterator iterator)",
    "returnType" : "void",
    "comment" : "\n   * Copy NodeList members into this nodelist, adding in\n   * document order.  Null references are not added.\n   *\n   * @param iterator DTMIterator which yields the nodes to be added.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addNodesInDocOrder(DTMIterator iterator, XPathContext support)",
    "returnType" : "void",
    "comment" : "\n   * Copy NodeList members into this nodelist, adding in\n   * document order.  If a node is null, don't add it.\n   *\n   * @param iterator DTMIterator which yields the nodes to be added.\n   * @param support The XPath runtime context.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int addNodeInDocOrder(int node, boolean test, XPathContext support)",
    "returnType" : "int",
    "comment" : "\n   * Add the node into a vector of nodes where it should occur in\n   * document order.\n   * @param node The node to be added.\n   * @param test true if we should test for doc order\n   * @param support The XPath runtime context.\n   * @return insertIndex.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int addNodeInDocOrder(int node, XPathContext support)",
    "returnType" : "int",
    "comment" : "\n   * Add the node into a vector of nodes where it should occur in\n   * document order.\n   * @param node The node to be added.\n   * @param support The XPath runtime context.\n   *\n   * @return The index where it was inserted.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n   * Get the length of the list.\n   *\n   * @return The size of this node set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addElement(int value)",
    "returnType" : "void",
    "comment" : "\n   * Append a Node onto the vector.\n   *\n   * @param value The node to be added.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void insertElementAt(int value, int at)",
    "returnType" : "void",
    "comment" : "\n   * Inserts the specified node in this vector at the specified index.\n   * Each component in this vector with an index greater or equal to\n   * the specified index is shifted upward to have an index one greater\n   * than the value it had previously.\n   *\n   * @param value The node to be inserted.\n   * @param at The index where the insert should occur.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendNodes(NodeVector nodes)",
    "returnType" : "void",
    "comment" : "\n   * Append the nodes to the list.\n   *\n   * @param nodes The nodes to be appended to this node set.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void removeAllElements()",
    "returnType" : "void",
    "comment" : "\n   * Inserts the specified node in this vector at the specified index.\n   * Each component in this vector with an index greater or equal to\n   * the specified index is shifted upward to have an index one greater\n   * than the value it had previously.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeElement(int s)",
    "returnType" : "boolean",
    "comment" : "\n   * Removes the first occurrence of the argument from this vector.\n   * If the object is found in this vector, each component in the vector\n   * with an index greater or equal to the object's index is shifted\n   * downward to have an index one smaller than the value it had\n   * previously.\n   *\n   * @param s The node to be removed.\n   *\n   * @return True if the node was successfully removed\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void removeElementAt(int i)",
    "returnType" : "void",
    "comment" : "\n   * Deletes the component at the specified index. Each component in\n   * this vector with an index greater or equal to the specified\n   * index is shifted downward to have an index one smaller than\n   * the value it had previously.\n   *\n   * @param i The index of the node to be removed.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setElementAt(int node, int index)",
    "returnType" : "void",
    "comment" : "\n   * Sets the component at the specified index of this vector to be the\n   * specified object. The previous component at that position is discarded.\n   *\n   * The index must be a value greater than or equal to 0 and less\n   * than the current size of the vector.\n   *\n   * @param node  The node to be set.\n   * @param index The index of the node to be replaced.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setItem(int node, int index)",
    "returnType" : "void",
    "comment" : "\n   * Same as setElementAt.\n   *\n   * @param node  The node to be set.\n   * @param index The index of the node to be replaced.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int elementAt(int i)",
    "returnType" : "int",
    "comment" : "\n   * Get the nth element.\n   *\n   * @param i The index of the requested node.\n   *\n   * @return Node at specified index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(int s)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the table contains the given node.\n   *\n   * @param s Node to look for\n   *\n   * @return True if the given node was found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(int elem, int index)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the first occurence of the given argument,\n   * beginning the search at index, and testing for equality\n   * using the equals method.\n   *\n   * @param elem Node to look for\n   * @param index Index of where to start the search\n   * @return the index of the first occurrence of the object\n   * argument in this vector at position index or later in the\n   * vector; returns -1 if the object is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(int elem)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the first occurence of the given argument,\n   * beginning the search at index, and testing for equality\n   * using the equals method.\n   *\n   * @param elem Node to look for \n   * @return the index of the first occurrence of the object\n   * argument in this vector at position index or later in the\n   * vector; returns -1 if the object is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentPos()",
    "returnType" : "int",
    "comment" : "\n   * Get the current position, which is one less than\n   * the next nextNode() call will retrieve.  i.e. if\n   * you call getCurrentPos() and the return is 0, the next\n   * fetch will take place at index 1.\n   *\n   * @return The the current position index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentPos(int i)",
    "returnType" : "void",
    "comment" : "\n   * Set the current position in the node set.\n   * @param i Must be a valid index.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a cached type, and thus doesn't permit indexed access.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentNode()",
    "returnType" : "int",
    "comment" : "\n   * Return the last fetched node.  Needed to support the UnionPathIterator.\n   *\n   * @return the last fetched node.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a cached type, and thus doesn't permit indexed access.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getShouldCacheNodes()",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether or not this is a cached node set.\n   *\n   *\n   * @return True if this list is cached.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setShouldCacheNodes(boolean b)",
    "returnType" : "void",
    "comment" : "\n   * If setShouldCacheNodes(true) is called, then nodes will\n   * be cached.  They are not cached by default. This switch must\n   * be set before the first call to nextNode is made, to ensure\n   * that all nodes are cached.\n   *\n   * @param b true if this node set should be cached.\n   * @throws RuntimeException thrown if an attempt is made to\n   * request caching after we've already begun stepping through the\n   * nodes in this set.\n  ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMutable()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if this iterator can have nodes added to it or set via \n   * the <code>setItem(int node, int index)</code> method.\n   * \n   * @return True if the nodelist can be mutated.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLast()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setLast(int last)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDocOrdered()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if all the nodes in the iteration well be returned in document \n   * order.\n   * \n   * @return true as a default.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * Returns the axis being iterated, if it is known.\n   * \n   * @return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple \n   * types.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setEnvironment(Object environment)", "public int getRoot()", "public void setRoot(int context, Object environment)", "public Object clone() throws CloneNotSupportedException", "public DTMIterator cloneWithReset() throws CloneNotSupportedException", "public void reset()", "public int getWhatToShow()", "public DTMFilter getFilter()", "public boolean getExpandEntityReferences()", "public DTM getDTM(int nodeHandle)", "public DTMManager getDTMManager()", "public int nextNode()", "public int previousNode()", "public void detach()", "public void allowDetachToRelease(boolean allowRelease)", "public boolean isFresh()", "public void runTo(int index)", "public int item(int index)", "public int getLength()", "public void addNode(int n)", "public void insertNode(int n, int pos)", "public void removeNode(int n)", "public void addNodes(DTMIterator iterator)", "public void addNodesInDocOrder(DTMIterator iterator, XPathContext support)", "public int addNodeInDocOrder(int node, boolean test, XPathContext support)", "public int addNodeInDocOrder(int node, XPathContext support)", "public int size()", "public void addElement(int value)", "public void insertElementAt(int value, int at)", "public void appendNodes(NodeVector nodes)", "public void removeAllElements()", "public boolean removeElement(int s)", "public void removeElementAt(int i)", "public void setElementAt(int node, int index)", "public void setItem(int node, int index)", "public int elementAt(int i)", "public boolean contains(int s)", "public int indexOf(int elem, int index)", "public int indexOf(int elem)", "public int getCurrentPos()", "public void setCurrentPos(int i)", "public int getCurrentNode()", "public boolean getShouldCacheNodes()", "public void setShouldCacheNodes(boolean b)", "public boolean isMutable()", "public int getLast()", "public void setLast(int last)", "public boolean isDocOrdered()", "public int getAxis()" ],
  "variableNames" : [ "serialVersionUID", "m_manager", "m_next", "m_mutable", "m_cacheNodes", "m_root", "m_last" ]
}