{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/apk/ApkSignatureSchemeV2Verifier.java",
  "packageName" : "android.util.apk",
  "className" : "ApkSignatureSchemeV2Verifier",
  "comment" : "\n * APK Signature Scheme v2 verifier.\n *\n * <p>APK Signature Scheme v2 is a whole-file signature scheme which aims to protect every single\n * bit of the APK, as opposed to the JAR Signature Scheme which protects only the names and\n * uncompressed contents of ZIP entries.\n *\n * @see <a href=\"https://source.android.com/security/apksigning/v2.html\">APK Signature Scheme v2</a>\n *\n * @hide for internal use only.\n ",
  "variables" : [ {
    "name" : "SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID",
    "type" : "int",
    "comment" : "\n     * ID of this signature scheme as used in X-Android-APK-Signed header used in JAR signing.\n     ",
    "links" : [ ]
  }, {
    "name" : "APK_SIGNATURE_SCHEME_V2_BLOCK_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STRIPPING_PROTECTION_ATTR_ID",
    "type" : "int",
    "comment" : " Attribute to check whether a newer APK Signature Scheme signature was stripped",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean hasSignature(String apkFile) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the provided APK contains an APK Signature Scheme V2 signature.\n     *\n     * <p><b>NOTE: This method does not verify the signature.</b>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static X509Certificate[][] verify(String apkFile) throws SignatureNotFoundException, SecurityException, IOException",
    "returnType" : "X509Certificate[][]",
    "comment" : "\n     * Verifies APK Signature Scheme v2 signatures of the provided APK and returns the certificates\n     * associated with each signer.\n     *\n     * @throws SignatureNotFoundException if the APK is not signed using APK Signature Scheme v2.\n     * @throws SecurityException if a APK Signature Scheme v2 signature of this APK does not verify.\n     * @throws IOException if an I/O error occurs while reading the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static X509Certificate[][] unsafeGetCertsWithoutVerification(String apkFile) throws SignatureNotFoundException, SecurityException, IOException",
    "returnType" : "X509Certificate[][]",
    "comment" : "\n     * Returns the certificates associated with each signer for the given APK without verification.\n     * This method is dangerous and should not be used, unless the caller is absolutely certain the\n     * APK is trusted.  Specifically, verification is only done for the APK Signature Scheme v2\n     * Block while gathering signer information.  The APK contents are not verified.\n     *\n     * @throws SignatureNotFoundException if the APK is not signed using APK Signature Scheme v2.\n     * @throws IOException if an I/O error occurs while reading the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VerifiedSigner verify(String apkFile, boolean verifyIntegrity) throws SignatureNotFoundException, SecurityException, IOException",
    "returnType" : "VerifiedSigner",
    "comment" : "\n     * Same as above returns the full signer object, containing additional info e.g. digest.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static VerifiedSigner verify(RandomAccessFile apk, boolean verifyIntegrity) throws SignatureNotFoundException, SecurityException, IOException",
    "returnType" : "VerifiedSigner",
    "comment" : "\n     * Verifies APK Signature Scheme v2 signatures of the provided APK and returns the certificates\n     * associated with each signer.\n     *\n     * @throws SignatureNotFoundException if the APK is not signed using APK Signature Scheme v2.\n     * @throws SecurityException if an APK Signature Scheme v2 signature of this APK does not\n     *         verify.\n     * @throws IOException if an I/O error occurs while reading the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SignatureInfo findSignature(RandomAccessFile apk) throws IOException, SignatureNotFoundException",
    "returnType" : "SignatureInfo",
    "comment" : "\n     * Returns the APK Signature Scheme v2 block contained in the provided APK file and the\n     * additional information relevant for verifying the block against the file.\n     *\n     * @throws SignatureNotFoundException if the APK is not signed using APK Signature Scheme v2.\n     * @throws IOException if an I/O error occurs while reading the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static VerifiedSigner verify(RandomAccessFile apk, SignatureInfo signatureInfo, boolean doVerifyIntegrity) throws SecurityException, IOException",
    "returnType" : "VerifiedSigner",
    "comment" : "\n     * Verifies the contents of the provided APK file against the provided APK Signature Scheme v2\n     * Block.\n     *\n     * @param signatureInfo APK Signature Scheme v2 Block and information relevant for verifying it\n     *        against the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static X509Certificate[] verifySigner(ByteBuffer signerBlock, Map<Integer, byte[]> contentDigests, CertificateFactory certFactory) throws SecurityException, IOException",
    "returnType" : "X509Certificate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void verifyAdditionalAttributes(ByteBuffer attrs) throws SecurityException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte[] getVerityRootHash(String apkPath) throws IOException, SignatureNotFoundException, SecurityException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte[] generateApkVerity(String apkPath, ByteBufferFactory bufferFactory) throws IOException, SignatureNotFoundException, SecurityException, DigestException, NoSuchAlgorithmException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte[] generateApkVerityRootHash(String apkPath) throws IOException, SignatureNotFoundException, DigestException, NoSuchAlgorithmException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID", "APK_SIGNATURE_SCHEME_V2_BLOCK_ID", "STRIPPING_PROTECTION_ATTR_ID" ],
  "methodNames" : [ "public static boolean hasSignature(String apkFile) throws IOException", "public static X509Certificate[][] verify(String apkFile) throws SignatureNotFoundException, SecurityException, IOException", "public static X509Certificate[][] unsafeGetCertsWithoutVerification(String apkFile) throws SignatureNotFoundException, SecurityException, IOException", "public static VerifiedSigner verify(String apkFile, boolean verifyIntegrity) throws SignatureNotFoundException, SecurityException, IOException", "private static VerifiedSigner verify(RandomAccessFile apk, boolean verifyIntegrity) throws SignatureNotFoundException, SecurityException, IOException", "private static SignatureInfo findSignature(RandomAccessFile apk) throws IOException, SignatureNotFoundException", "private static VerifiedSigner verify(RandomAccessFile apk, SignatureInfo signatureInfo, boolean doVerifyIntegrity) throws SecurityException, IOException", "private static X509Certificate[] verifySigner(ByteBuffer signerBlock, Map<Integer, byte[]> contentDigests, CertificateFactory certFactory) throws SecurityException, IOException", "private static void verifyAdditionalAttributes(ByteBuffer attrs) throws SecurityException, IOException", " static byte[] getVerityRootHash(String apkPath) throws IOException, SignatureNotFoundException, SecurityException", " static byte[] generateApkVerity(String apkPath, ByteBufferFactory bufferFactory) throws IOException, SignatureNotFoundException, SecurityException, DigestException, NoSuchAlgorithmException", " static byte[] generateApkVerityRootHash(String apkPath) throws IOException, SignatureNotFoundException, DigestException, NoSuchAlgorithmException" ]
}