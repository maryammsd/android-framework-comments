{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/usb/UsbPort.java",
  "packageName" : "android.hardware.usb",
  "className" : "UsbPort",
  "comment" : "\n * Represents a physical USB port and describes its characteristics.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedModes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsbManager",
    "type" : "UsbManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedContaminantProtectionModes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportsEnableContaminantPresenceProtection",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportsEnableContaminantPresenceDetection",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_DATA_ROLES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_ROLE_OFFSET",
    "type" : "int",
    "comment" : "\n     * Points to the first power role in the IUsb HAL.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the unique id of the port.\n     *\n     * @return The unique id of the port; not intended for display.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSupportedModes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the supported modes of the port.\n     * <p>\n     * The actual mode of the port may vary depending on what is plugged into it.\n     * </p>\n     *\n     * @return The supported modes: one of {@link UsbPortStatus#MODE_DFP},\n     * {@link UsbPortStatus#MODE_UFP}, or {@link UsbPortStatus#MODE_DUAL}.\n     *\n     * @hide\n     ",
    "links" : [ "UsbPortStatus#MODE_DFP", "UsbPortStatus#MODE_UFP", "UsbPortStatus#MODE_DUAL" ]
  }, {
    "name" : "public int getSupportedContaminantProtectionModes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the supported port proctection modes when the port is contaminated.\n     * <p>\n     * The actual mode of the port is decided by the hardware\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsEnableContaminantPresenceProtection()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if UsbService can enable/disable contaminant presence protection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsEnableContaminantPresenceDetection()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if UsbService can enable/disable contaminant presence detection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public UsbPortStatus getStatus()",
    "returnType" : "UsbPortStatus",
    "comment" : "\n     * Gets the status of this USB port.\n     *\n     * @return The status of the this port, or {@code null} if port is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRoles(@UsbPortStatus.UsbPowerRole int powerRole, @UsbPortStatus.UsbDataRole int dataRole)",
    "returnType" : "void",
    "comment" : "\n     * Sets the desired role combination of the port.\n     * <p>\n     * The supported role combinations depend on what is connected to the port and may be\n     * determined by consulting\n     * {@link UsbPortStatus#isRoleCombinationSupported UsbPortStatus.isRoleCombinationSupported}.\n     * </p><p>\n     * Note: This function is asynchronous and may fail silently without applying\n     * the requested changes.  If this function does cause a status change to occur then\n     * a {@link UsbManager#ACTION_USB_PORT_CHANGED} broadcast will be sent.\n     * </p>\n     *\n     * @param powerRole The desired power role: {@link UsbPortStatus#POWER_ROLE_SOURCE} or\n     *                  {@link UsbPortStatus#POWER_ROLE_SINK}, or\n     *                  {@link UsbPortStatus#POWER_ROLE_NONE} if no power role.\n     * @param dataRole The desired data role: {@link UsbPortStatus#DATA_ROLE_HOST} or\n     *                 {@link UsbPortStatus#DATA_ROLE_DEVICE}, or\n     *                 {@link UsbPortStatus#DATA_ROLE_NONE} if no data role.\n     ",
    "links" : [ "UsbPortStatus#isRoleCombinationSupported", "UsbManager#ACTION_USB_PORT_CHANGED", "UsbPortStatus#POWER_ROLE_SOURCE", "UsbPortStatus#POWER_ROLE_SINK", "UsbPortStatus#POWER_ROLE_NONE", "UsbPortStatus#DATA_ROLE_HOST", "UsbPortStatus#DATA_ROLE_DEVICE", "UsbPortStatus#DATA_ROLE_NONE" ]
  }, {
    "name" : "public void enableContaminantDetection(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "public static int combineRolesAsBit(int powerRole, int dataRole)",
    "returnType" : "int",
    "comment" : "\n     * Combines one power and one data role together into a unique value with\n     * exactly one bit set.  This can be used to efficiently determine whether\n     * a combination of roles is supported by testing whether that bit is present\n     * in a bit-field.\n     *\n     * @param powerRole The desired power role: {@link UsbPortStatus#POWER_ROLE_SOURCE}\n     *                  or {@link UsbPortStatus#POWER_ROLE_SINK}, or 0 if no power role.\n     * @param dataRole  The desired data role: {@link UsbPortStatus#DATA_ROLE_HOST}\n     *                  or {@link UsbPortStatus#DATA_ROLE_DEVICE}, or 0 if no data role.\n     * @hide\n     ",
    "links" : [ "UsbPortStatus#POWER_ROLE_SOURCE", "UsbPortStatus#POWER_ROLE_SINK", "UsbPortStatus#DATA_ROLE_HOST", "UsbPortStatus#DATA_ROLE_DEVICE" ]
  }, {
    "name" : "public static String modeToString(int mode)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String powerRoleToString(int role)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String dataRoleToString(int role)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String contaminantPresenceStatusToString(int contaminantPresenceStatus)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String roleCombinationsToString(int combo)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void checkMode(int powerRole)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void checkPowerRole(int dataRole)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void checkDataRole(int mode)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void checkRoles(int powerRole, int dataRole)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isModeSupported(int mode)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mId", "mSupportedModes", "mUsbManager", "mSupportedContaminantProtectionModes", "mSupportsEnableContaminantPresenceProtection", "mSupportsEnableContaminantPresenceDetection", "NUM_DATA_ROLES", "POWER_ROLE_OFFSET" ],
  "methodNames" : [ "public String getId()", "public int getSupportedModes()", "public int getSupportedContaminantProtectionModes()", "public boolean supportsEnableContaminantPresenceProtection()", "public boolean supportsEnableContaminantPresenceDetection()", "public UsbPortStatus getStatus()", "public void setRoles(@UsbPortStatus.UsbPowerRole int powerRole, @UsbPortStatus.UsbDataRole int dataRole)", "public void enableContaminantDetection(boolean enable)", "public static int combineRolesAsBit(int powerRole, int dataRole)", "public static String modeToString(int mode)", "public static String powerRoleToString(int role)", "public static String dataRoleToString(int role)", "public static String contaminantPresenceStatusToString(int contaminantPresenceStatus)", "public static String roleCombinationsToString(int combo)", "public static void checkMode(int powerRole)", "public static void checkPowerRole(int dataRole)", "public static void checkDataRole(int mode)", "public static void checkRoles(int powerRole, int dataRole)", "public boolean isModeSupported(int mode)", "public String toString()" ]
}