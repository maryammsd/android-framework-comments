{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/utils/ExceptionUtils.java",
  "packageName" : "android.hardware.camera2.utils",
  "className" : "ExceptionUtils",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static CameraAccessException throwAsPublicException(ServiceSpecificException e) throws CameraAccessException",
    "returnType" : "CameraAccessException",
    "comment" : "\n     * Converts and throws {@link ServiceSpecificException} from camera binder interfaces as\n     * {@link CameraAccessException}, {@link IllegalArgumentException}, or {@link SecurityException}\n     * based on {@link ServiceSpecificException#errorCode}\n     * <p>\n     * Usage: {@code throw ExceptionUtils.throwAsPublicException(e)}\n     * <p>\n     * Notice the preceding `throw` before calling this method. The throw is essentially\n     * useless but lets the compiler know that execution will terminate at that statement\n     * preventing false \"missing return statement\" errors.\n     * <p>\n     * The return type is set to the only checked exception this method throws to ensure\n     * that the caller knows exactly which checked exception to declare/handle.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.ServiceSpecificException#errorCode", "android.hardware.camera2.CameraAccessException", "SecurityException", "IllegalArgumentException", "android.os.ServiceSpecificException" ]
  }, {
    "name" : "public static CameraAccessException throwAsPublicException(RemoteException e) throws CameraAccessException",
    "returnType" : "CameraAccessException",
    "comment" : "\n     * Converts and throws Binder {@link DeadObjectException} and {@link RemoteException} from\n     * camera binder interfaces as {@link CameraAccessException} or\n     * {@link UnsupportedOperationException}\n     * <p>\n     * Usage: {@code throw ExceptionUtils.throwAsPublicException(e)}\n     * <p>\n     * Notice the preceding `throw` before calling this method. The throw is essentially\n     * useless but lets the compiler know that execution will terminate at that statement\n     * preventing false \"missing return statement\" errors.\n     * <p>\n     * The return type is set to the only checked exception this method throws to ensure\n     * that the caller knows exactly which checked exception to declare/handle.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraAccessException", "android.os.RemoteException", "android.os.DeadObjectException", "UnsupportedOperationException" ]
  } ],
  "methodNames" : [ "public static CameraAccessException throwAsPublicException(ServiceSpecificException e) throws CameraAccessException", "public static CameraAccessException throwAsPublicException(RemoteException e) throws CameraAccessException" ],
  "variableNames" : [ ]
}