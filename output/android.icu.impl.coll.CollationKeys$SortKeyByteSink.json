{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationKeys.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "SortKeyByteSink",
  "comment" : "\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "buffer_",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "appended_",
    "type" : "int",
    "comment" : " protected int capacity_; == buffer_.length",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setBufferAndAppended(byte[] dest, int app)",
    "returnType" : "void",
    "comment" : "\n         * Needed in Java for when we write to the buffer directly.\n         * In C++, the SortKeyByteSink is a subclass of ByteSink and lower-level code can write to that.\n         * TODO: Can we make Java SortKeyByteSink have-a ByteArrayWrapper and write through to it?\n         * Or maybe create interface ByteSink, have SortKeyByteSink implement it, and have BOCSU write to that??\n         ",
    "links" : [ ]
  }, {
    "name" : "public void Append(byte[] bytes, int n)",
    "returnType" : "void",
    "comment" : "\n         * @param bytes\n         *            the array of byte\n         * @param n\n         *            the length of bytes to be appended\n         ",
    "links" : [ ]
  }, {
    "name" : "public void Append(int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int NumberOfBytesAppended()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int GetRemainingCapacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean Overflowed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void AppendBeyondCapacity(byte[] bytes, int start, int n, int length)",
    "returnType" : "void",
    "comment" : "\n         * @param bytes\n         *            the array of byte\n         * @param start\n         *            the start index within the array to be appended\n         * @param n\n         *            the length of bytes to be appended\n         * @param length\n         *            the length of buffer required to store the entire data (i.e. already appended\n         *            bytes + bytes to be appended by this method)\n         ",
    "links" : [ ]
  }, {
    "name" : "protected abstract boolean Resize(int appendCapacity, int length)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setBufferAndAppended(byte[] dest, int app)", "public void Append(byte[] bytes, int n)", "public void Append(int b)", "public int NumberOfBytesAppended()", "public int GetRemainingCapacity()", "public boolean Overflowed()", "protected abstract void AppendBeyondCapacity(byte[] bytes, int start, int n, int length)", "protected abstract boolean Resize(int appendCapacity, int length)" ],
  "variableNames" : [ "buffer_", "appended_" ]
}