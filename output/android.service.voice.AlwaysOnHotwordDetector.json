{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/AlwaysOnHotwordDetector.java",
  "packageName" : "android.service.voice",
  "className" : "AlwaysOnHotwordDetector",
  "comment" : "\n * A class that lets a VoiceInteractionService implementation interact with\n * always-on keyphrase detection APIs.\n *\n * @hide\n * TODO(b/168605867): Once Metalava supports expressing a removed public, but current system API,\n *                    mark and track it as such.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "STATE_INVALID",
    "type" : "int",
    "comment" : "\n     * Indicates that this hotword detector is no longer valid for any recognition\n     * and should not be used anymore.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_HARDWARE_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * Indicates that recognition for the given keyphrase is not available on the system\n     * because of the hardware configuration.\n     * No further interaction should be performed with the detector that returns this availability.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_KEYPHRASE_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n     * Indicates that recognition for the given keyphrase is not supported.\n     * No further interaction should be performed with the detector that returns this availability.\n     *\n     * @deprecated This is no longer a valid state. Enrollment can occur outside of\n     * {@link KeyphraseEnrollmentInfo} through another privileged application. We can no longer\n     * determine ahead of time if the keyphrase and locale are unsupported by the system.\n     ",
    "links" : [ "android.hardware.soundtrigger.KeyphraseEnrollmentInfo" ]
  }, {
    "name" : "STATE_KEYPHRASE_UNENROLLED",
    "type" : "int",
    "comment" : "\n     * Indicates that the given keyphrase is not enrolled.\n     * The caller may choose to begin an enrollment flow for the keyphrase.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_KEYPHRASE_ENROLLED",
    "type" : "int",
    "comment" : "\n     * Indicates that the given keyphrase is currently enrolled and it's possible to start\n     * recognition for it.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_ERROR",
    "type" : "int",
    "comment" : "\n     * Indicates that the availability state of the active keyphrase can't be known due to an error.\n     *\n     * <p>NOTE: No further interaction should be performed with the detector that returns this\n     * state, it would be better to create {@link AlwaysOnHotwordDetector} again.\n     ",
    "links" : [ "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "STATE_NOT_READY",
    "type" : "int",
    "comment" : "\n     * Indicates that the detector isn't ready currently.\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOGNITION_FLAG_NONE",
    "type" : "int",
    "comment" : "\n     * Empty flag for {@link #startRecognition(int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#startRecognition(int)" ]
  }, {
    "name" : "RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO",
    "type" : "int",
    "comment" : "\n     * Recognition flag for {@link #startRecognition(int)} that indicates\n     * whether the trigger audio for hotword needs to be captured.\n     ",
    "links" : [ "#startRecognition(int)" ]
  }, {
    "name" : "RECOGNITION_FLAG_ALLOW_MULTIPLE_TRIGGERS",
    "type" : "int",
    "comment" : "\n     * Recognition flag for {@link #startRecognition(int)} that indicates\n     * whether the recognition should keep going on even after the keyphrase triggers.\n     * If this flag is specified, it's possible to get multiple triggers after a\n     * call to {@link #startRecognition(int)} if the user speaks the keyphrase multiple times.\n     * When this isn't specified, the default behavior is to stop recognition once the\n     * keyphrase is spoken, till the caller starts recognition again.\n     ",
    "links" : [ "#startRecognition(int)" ]
  }, {
    "name" : "RECOGNITION_FLAG_ENABLE_AUDIO_ECHO_CANCELLATION",
    "type" : "int",
    "comment" : "\n     * Audio capabilities flag for {@link #startRecognition(int)} that indicates\n     * if the underlying recognition should use AEC.\n     * This capability may or may not be supported by the system, and support can be queried\n     * by calling {@link #getSupportedAudioCapabilities()}. The corresponding capabilities field for\n     * this flag is {@link #AUDIO_CAPABILITY_ECHO_CANCELLATION}. If this flag is passed without the\n     * audio capability supported, there will be no audio effect applied.\n     ",
    "links" : [ "#startRecognition(int)", "#getSupportedAudioCapabilities()", "#AUDIO_CAPABILITY_ECHO_CANCELLATION" ]
  }, {
    "name" : "RECOGNITION_FLAG_ENABLE_AUDIO_NOISE_SUPPRESSION",
    "type" : "int",
    "comment" : "\n     * Audio capabilities flag for {@link #startRecognition(int)} that indicates\n     * if the underlying recognition should use noise suppression.\n     * This capability may or may not be supported by the system, and support can be queried\n     * by calling {@link #getSupportedAudioCapabilities()}. The corresponding capabilities field for\n     * this flag is {@link #AUDIO_CAPABILITY_NOISE_SUPPRESSION}. If this flag is passed without the\n     * audio capability supported, there will be no audio effect applied.\n     ",
    "links" : [ "#startRecognition(int)", "#getSupportedAudioCapabilities()", "#AUDIO_CAPABILITY_NOISE_SUPPRESSION" ]
  }, {
    "name" : "RECOGNITION_FLAG_RUN_IN_BATTERY_SAVER",
    "type" : "int",
    "comment" : "\n     * Recognition flag for {@link #startRecognition(int)} that indicates whether the recognition\n     * should continue after battery saver mode is enabled.\n     * When this flag is specified, the caller will be checked for\n     * {@link android.Manifest.permission#SOUND_TRIGGER_RUN_IN_BATTERY_SAVER} permission granted.\n     ",
    "links" : [ "#startRecognition(int)", "android.Manifest.permission#SOUND_TRIGGER_RUN_IN_BATTERY_SAVER" ]
  }, {
    "name" : "RECOGNITION_MODE_VOICE_TRIGGER",
    "type" : "int",
    "comment" : "\n     * Simple recognition of the key phrase.\n     * Returned by {@link #getSupportedRecognitionModes()}\n     ",
    "links" : [ "#getSupportedRecognitionModes()" ]
  }, {
    "name" : "RECOGNITION_MODE_USER_IDENTIFICATION",
    "type" : "int",
    "comment" : "\n     * User identification performed with the keyphrase recognition.\n     * Returned by {@link #getSupportedRecognitionModes()}\n     ",
    "links" : [ "#getSupportedRecognitionModes()" ]
  }, {
    "name" : "AUDIO_CAPABILITY_ECHO_CANCELLATION",
    "type" : "int",
    "comment" : "\n     * If set the underlying module supports AEC.\n     * Returned by {@link #getSupportedAudioCapabilities()}\n     ",
    "links" : [ "#getSupportedAudioCapabilities()" ]
  }, {
    "name" : "AUDIO_CAPABILITY_NOISE_SUPPRESSION",
    "type" : "int",
    "comment" : "\n     * If set, the underlying module supports noise suppression.\n     * Returned by {@link #getSupportedAudioCapabilities()}\n     ",
    "links" : [ "#getSupportedAudioCapabilities()" ]
  }, {
    "name" : "THROW_ON_INITIALIZE_IF_NO_DSP",
    "type" : "long",
    "comment" : "\n     * Gates returning {@code IllegalStateException} in {@link #initialize(\n     * PersistableBundle, SharedMemory, SoundTrigger.ModuleProperties)} when no DSP module\n     * is available. If the change is not enabled, the existing behavior of not throwing an\n     * exception and delivering {@link STATE_HARDWARE_UNAVAILABLE} is retained.\n     ",
    "links" : [ "#initialize(", "STATE_HARDWARE_UNAVAILABLE" ]
  }, {
    "name" : "SEND_ON_FAILURE_FOR_ASYNC_EXCEPTIONS",
    "type" : "long",
    "comment" : "\n     * Gates returning {@link Callback#onFailure} and {@link Callback#onUnknownFailure}\n     * when asynchronous exceptions are propagated to the client. If the change is not enabled,\n     * the existing behavior of delivering {@link #STATE_ERROR} is retained.\n     ",
    "links" : [ "com.android.internal.app.IHotwordRecognitionStatusCallback#onFailure", "com.android.internal.app.IHotwordRecognitionStatusCallback#onUnknownFailure", "#STATE_ERROR" ]
  }, {
    "name" : "MODEL_PARAM_THRESHOLD_FACTOR",
    "type" : "int",
    "comment" : "\n     * Controls the sensitivity threshold adjustment factor for a given model.\n     * Negative value corresponds to less sensitive model (high threshold) and\n     * a positive value corresponds to a more sensitive model (low threshold).\n     * Default value is 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_OK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_AVAILABILITY_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_HOTWORD_DETECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DETECTION_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DETECTION_PAUSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DETECTION_RESUME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_HOTWORD_REJECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_HOTWORD_STATUS_REPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_PROCESS_RESTARTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DETECTION_HOTWORD_DETECTION_SERVICE_FAILURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DETECTION_SOUND_TRIGGER_FAILURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DETECTION_UNKNOWN_FAILURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyphraseMetadata",
    "type" : "KeyphraseMetadata",
    "comment" : "\n     * The metadata of the Keyphrase, derived from the enrollment application.\n     * This may be null if this keyphrase isn't supported by the enrollment application.\n     ",
    "links" : [ ]
  }, {
    "name" : "mKeyphraseEnrollmentInfo",
    "type" : "KeyphraseEnrollmentInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mModelManagementService",
    "type" : "IVoiceInteractionManagerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSoundTriggerSession",
    "type" : "IVoiceInteractionSoundTriggerSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternalCallback",
    "type" : "SoundTriggerListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExternalCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExternalExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportSandboxedDetectionService",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAvailabilityOverriddenByTestApi",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAvailability",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void initialize(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)",
    "returnType" : "void",
    "comment" : " TODO (b/269355519) un-subclass AOHD.",
    "links" : [ ]
  }, {
    "name" : " void initialize(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @Nullable SoundTrigger.ModuleProperties moduleProperties)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void updateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @throws IllegalStateException if this AlwaysOnHotwordDetector wasn't specified to use a\n     * {@link HotwordDetectionService} when it was created. In addition, if this\n     * AlwaysOnHotwordDetector is in an invalid or error state.\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService" ]
  }, {
    "name" : "public void overrideAvailability(int availability)",
    "returnType" : "void",
    "comment" : "\n     * Test API for manipulating the voice engine and sound model availability.\n     *\n     * After overriding the availability status, the client's\n     * {@link Callback#onAvailabilityChanged(int)} will be called to reflect the updated state.\n     *\n     * When this override is set, all system updates to availability will be ignored.\n     * @hide\n     ",
    "links" : [ "com.android.internal.app.IHotwordRecognitionStatusCallback#onAvailabilityChanged(int)" ]
  }, {
    "name" : "public void resetAvailability()",
    "returnType" : "void",
    "comment" : "\n     * Test API for clearing an availability override set by {@link #overrideAvailability(int)}\n     *\n     * This method will restore the availability to the current system state.\n     * @hide\n     ",
    "links" : [ "#overrideAvailability(int)" ]
  }, {
    "name" : "public void triggerHardwareRecognitionEventForTest(int status, int soundModelHandle, @ElapsedRealtimeLong long halEventReceivedMillis, boolean captureAvailable, int captureSession, int captureDelayMs, int capturePreambleMs, boolean triggerInData, @NonNull AudioFormat captureFormat, @Nullable byte[] data, @NonNull List<KeyphraseRecognitionExtra> keyphraseRecognitionExtras)",
    "returnType" : "void",
    "comment" : "\n     * Test API to simulate to trigger hardware recognition event for test.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSupportedRecognitionModes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the recognition modes supported by the associated keyphrase.\n     *\n     * @see #RECOGNITION_MODE_USER_IDENTIFICATION\n     * @see #RECOGNITION_MODE_VOICE_TRIGGER\n     *\n     * @throws UnsupportedOperationException if the keyphrase itself isn't supported.\n     *         Callers should only call this method after a supported state callback on\n     *         {@link Callback#onAvailabilityChanged(int)} to avoid this exception.\n     * @throws IllegalStateException if the detector is in an invalid or error state.\n     *         This may happen if another detector has been instantiated or the\n     *         {@link VoiceInteractionService} hosting this detector has been shut down.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "com.android.internal.app.IHotwordRecognitionStatusCallback#onAvailabilityChanged(int)" ]
  }, {
    "name" : "private int getSupportedRecognitionModesLocked()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSupportedAudioCapabilities()",
    "returnType" : "int",
    "comment" : "\n     * Get the audio capabilities supported by the platform which can be enabled when\n     * starting a recognition.\n     * Caller must be the active voice interaction service via\n     * Settings.Secure.VOICE_INTERACTION_SERVICE.\n     *\n     * @see #AUDIO_CAPABILITY_ECHO_CANCELLATION\n     * @see #AUDIO_CAPABILITY_NOISE_SUPPRESSION\n     *\n     * @return Bit field encoding of the AudioCapabilities supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getSupportedAudioCapabilitiesLocked()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean startRecognition(@RecognitionFlags int recognitionFlags, @NonNull byte[] data)",
    "returnType" : "boolean",
    "comment" : "\n     * Starts recognition for the associated keyphrase.\n     * Caller must be the active voice interaction service via\n     * Settings.Secure.VOICE_INTERACTION_SERVICE.\n     *\n     * @see #RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO\n     * @see #RECOGNITION_FLAG_ALLOW_MULTIPLE_TRIGGERS\n     *\n     * @param recognitionFlags The flags to control the recognition properties.\n     * @param data Additional pass-through data to the system voice engine along with the\n     *             startRecognition request. This data is intended to provide additional parameters\n     *             when starting the opaque sound model.\n     * @return Indicates whether the call succeeded or not.\n     * @throws UnsupportedOperationException if the recognition isn't supported.\n     *         Callers should only call this method after a supported state callback on\n     *         {@link Callback#onAvailabilityChanged(int)} to avoid this exception.\n     * @throws IllegalStateException if the detector is in an invalid or error state.\n     *         This may happen if another detector has been instantiated or the\n     *         {@link VoiceInteractionService} hosting this detector has been shut down.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "com.android.internal.app.IHotwordRecognitionStatusCallback#onAvailabilityChanged(int)" ]
  }, {
    "name" : "public boolean startRecognition(@RecognitionFlags int recognitionFlags)",
    "returnType" : "boolean",
    "comment" : "\n     * Starts recognition for the associated keyphrase.\n     * Caller must be the active voice interaction service via\n     * Settings.Secure.VOICE_INTERACTION_SERVICE.\n     *\n     * @see #RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO\n     * @see #RECOGNITION_FLAG_ALLOW_MULTIPLE_TRIGGERS\n     *\n     * @param recognitionFlags The flags to control the recognition properties.\n     * @return Indicates whether the call succeeded or not.\n     * @throws UnsupportedOperationException if the recognition isn't supported.\n     *         Callers should only call this method after a supported state callback on\n     *         {@link Callback#onAvailabilityChanged(int)} to avoid this exception.\n     * @throws IllegalStateException if the detector is in an invalid or error state.\n     *         This may happen if another detector has been instantiated or the\n     *         {@link VoiceInteractionService} hosting this detector has been shut down.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "com.android.internal.app.IHotwordRecognitionStatusCallback#onAvailabilityChanged(int)" ]
  }, {
    "name" : "public boolean startRecognition()",
    "returnType" : "boolean",
    "comment" : "\n     * Starts recognition for the associated keyphrase.\n     *\n     * @see #startRecognition(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean stopRecognition()",
    "returnType" : "boolean",
    "comment" : " methods in this class.",
    "links" : [ ]
  }, {
    "name" : "public int setParameter(@ModelParams int modelParam, int value)",
    "returnType" : "int",
    "comment" : "\n     * Set a model specific {@link ModelParams} with the given value. This\n     * parameter will keep its value for the duration the model is loaded regardless of starting and\n     * stopping recognition. Once the model is unloaded, the value will be lost.\n     * {@link AlwaysOnHotwordDetector#queryParameter} should be checked first before calling this\n     * method.\n     * Caller must be the active voice interaction service via\n     * Settings.Secure.VOICE_INTERACTION_SERVICE.\n     *\n     * @param modelParam   {@link ModelParams}\n     * @param value        Value to set\n     * @return - {@link SoundTrigger#STATUS_OK} in case of success\n     *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached\n     *         - {@link SoundTrigger#STATUS_BAD_VALUE} invalid input parameter\n     *         - {@link SoundTrigger#STATUS_INVALID_OPERATION} if the call is out of sequence or\n     *           if API is not supported by HAL\n     * @throws IllegalStateException if the detector is in an invalid or error state.\n     *         This may happen if another detector has been instantiated or the\n     *         {@link VoiceInteractionService} hosting this detector has been shut down.\n     ",
    "links" : [ "android.hardware.soundtrigger.SoundTrigger#STATUS_BAD_VALUE", "android.service.voice.VoiceInteractionService", "android.hardware.soundtrigger.SoundTrigger#STATUS_INVALID_OPERATION", "android.service.voice.AlwaysOnHotwordDetector#queryParameter", "ModelParams", "android.hardware.soundtrigger.SoundTrigger#STATUS_OK", "android.hardware.soundtrigger.SoundTrigger#STATUS_NO_INIT" ]
  }, {
    "name" : "public int getParameter(@ModelParams int modelParam)",
    "returnType" : "int",
    "comment" : "\n     * Get a model specific {@link ModelParams}. This parameter will keep its value\n     * for the duration the model is loaded regardless of starting and stopping recognition.\n     * Once the model is unloaded, the value will be lost. If the value is not set, a default\n     * value is returned. See {@link ModelParams} for parameter default values.\n     * {@link AlwaysOnHotwordDetector#queryParameter} should be checked first before\n     * calling this method.\n     * Caller must be the active voice interaction service via\n     * Settings.Secure.VOICE_INTERACTION_SERVICE.\n     *\n     * @param modelParam   {@link ModelParams}\n     * @return value of parameter\n     * @throws IllegalStateException if the detector is in an invalid or error state.\n     *         This may happen if another detector has been instantiated or the\n     *         {@link VoiceInteractionService} hosting this detector has been shut down.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.service.voice.AlwaysOnHotwordDetector#queryParameter", "ModelParams" ]
  }, {
    "name" : "public ModelParamRange queryParameter(@ModelParams int modelParam)",
    "returnType" : "ModelParamRange",
    "comment" : "\n     * Determine if parameter control is supported for the given model handle.\n     * This method should be checked prior to calling {@link AlwaysOnHotwordDetector#setParameter}\n     * or {@link AlwaysOnHotwordDetector#getParameter}.\n     * Caller must be the active voice interaction service via\n     * Settings.Secure.VOICE_INTERACTION_SERVICE.\n     *\n     * @param modelParam {@link ModelParams}\n     * @return supported range of parameter, null if not supported\n     * @throws IllegalStateException if the detector is in an invalid or error state.\n     *         This may happen if another detector has been instantiated or the\n     *         {@link VoiceInteractionService} hosting this detector has been shut down.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.service.voice.AlwaysOnHotwordDetector#setParameter", "ModelParams", "android.service.voice.AlwaysOnHotwordDetector#getParameter" ]
  }, {
    "name" : "public Intent createEnrollIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Creates an intent to start the enrollment for the associated keyphrase.\n     * This intent must be invoked using {@link Context#startForegroundService(Intent)}.\n     * Starting re-enrollment is only valid if the keyphrase is un-enrolled,\n     * i.e. {@link #STATE_KEYPHRASE_UNENROLLED},\n     * otherwise {@link #createReEnrollIntent()} should be preferred.\n     *\n     * @return An {@link Intent} to start enrollment for the given keyphrase.\n     * @throws UnsupportedOperationException if managing they keyphrase isn't supported.\n     *         Callers should only call this method after a supported state callback on\n     *         {@link Callback#onAvailabilityChanged(int)} to avoid this exception.\n     * @throws IllegalStateException if the detector is in an invalid state.\n     *         This may happen if another detector has been instantiated or the\n     *         {@link VoiceInteractionService} hosting this detector has been shut down.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "com.android.internal.app.IHotwordRecognitionStatusCallback#onAvailabilityChanged(int)", "android.content.Context#startForegroundService(Intent)", "android.content.Intent", "#STATE_KEYPHRASE_UNENROLLED", "#createReEnrollIntent()" ]
  }, {
    "name" : "public Intent createUnEnrollIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Creates an intent to start the un-enrollment for the associated keyphrase.\n     * This intent must be invoked using {@link Context#startForegroundService(Intent)}.\n     * Starting re-enrollment is only valid if the keyphrase is already enrolled,\n     * i.e. {@link #STATE_KEYPHRASE_ENROLLED}, otherwise invoking this may result in an error.\n     *\n     * @return An {@link Intent} to start un-enrollment for the given keyphrase.\n     * @throws UnsupportedOperationException if managing they keyphrase isn't supported.\n     *         Callers should only call this method after a supported state callback on\n     *         {@link Callback#onAvailabilityChanged(int)} to avoid this exception.\n     * @throws IllegalStateException if the detector is in an invalid state.\n     *         This may happen if another detector has been instantiated or the\n     *         {@link VoiceInteractionService} hosting this detector has been shut down.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "#STATE_KEYPHRASE_ENROLLED", "com.android.internal.app.IHotwordRecognitionStatusCallback#onAvailabilityChanged(int)", "android.content.Context#startForegroundService(Intent)", "android.content.Intent" ]
  }, {
    "name" : "public Intent createReEnrollIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Creates an intent to start the re-enrollment for the associated keyphrase.\n     * This intent must be invoked using {@link Context#startForegroundService(Intent)}.\n     * Starting re-enrollment is only valid if the keyphrase is already enrolled,\n     * i.e. {@link #STATE_KEYPHRASE_ENROLLED}, otherwise invoking this may result in an error.\n     *\n     * @return An {@link Intent} to start re-enrollment for the given keyphrase.\n     * @throws UnsupportedOperationException if managing they keyphrase isn't supported.\n     *         Callers should only call this method after a supported state callback on\n     *         {@link Callback#onAvailabilityChanged(int)} to avoid this exception.\n     * @throws IllegalStateException if the detector is in an invalid or error state.\n     *         This may happen if another detector has been instantiated or the\n     *         {@link VoiceInteractionService} hosting this detector has been shut down.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "#STATE_KEYPHRASE_ENROLLED", "com.android.internal.app.IHotwordRecognitionStatusCallback#onAvailabilityChanged(int)", "android.content.Context#startForegroundService(Intent)", "android.content.Intent" ]
  }, {
    "name" : "private Intent getManageIntentLocked(@KeyphraseEnrollmentInfo.ManageActions int action)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "private void detachSessionLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isUsingSandboxedDetectionService()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void onSoundModelsChanged()",
    "returnType" : "void",
    "comment" : " TODO(b/281608561): remove the enrollment flow from AlwaysOnHotwordDetector",
    "links" : [ ]
  }, {
    "name" : "private int startRecognitionLocked(int recognitionFlags, @Nullable byte[] data)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int stopRecognitionLocked()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int setParameterLocked(@ModelParams int modelParam, int value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getParameterLocked(@ModelParams int modelParam)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ModelParamRange queryParameterLocked(@ModelParams int modelParam)",
    "returnType" : "ModelParamRange",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateAndNotifyStateChangedLocked(int availability)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateAvailabilityLocked(int availability)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyStateChangedLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendUnknownFailure(String failureMessage)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendSoundTriggerFailure(@NonNull SoundTriggerFailure soundTriggerFailure)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onDetectorRemoteException()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void initialize(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)", " void initialize(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @Nullable SoundTrigger.ModuleProperties moduleProperties)", "public final void updateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)", "public void overrideAvailability(int availability)", "public void resetAvailability()", "public void triggerHardwareRecognitionEventForTest(int status, int soundModelHandle, @ElapsedRealtimeLong long halEventReceivedMillis, boolean captureAvailable, int captureSession, int captureDelayMs, int capturePreambleMs, boolean triggerInData, @NonNull AudioFormat captureFormat, @Nullable byte[] data, @NonNull List<KeyphraseRecognitionExtra> keyphraseRecognitionExtras)", "public int getSupportedRecognitionModes()", "private int getSupportedRecognitionModesLocked()", "public int getSupportedAudioCapabilities()", "private int getSupportedAudioCapabilitiesLocked()", "public boolean startRecognition(@RecognitionFlags int recognitionFlags, @NonNull byte[] data)", "public boolean startRecognition(@RecognitionFlags int recognitionFlags)", "public boolean startRecognition()", "public boolean stopRecognition()", "public int setParameter(@ModelParams int modelParam, int value)", "public int getParameter(@ModelParams int modelParam)", "public ModelParamRange queryParameter(@ModelParams int modelParam)", "public Intent createEnrollIntent()", "public Intent createUnEnrollIntent()", "public Intent createReEnrollIntent()", "private Intent getManageIntentLocked(@KeyphraseEnrollmentInfo.ManageActions int action)", "public void destroy()", "private void detachSessionLocked()", "public boolean isUsingSandboxedDetectionService()", " void onSoundModelsChanged()", "private int startRecognitionLocked(int recognitionFlags, @Nullable byte[] data)", "private int stopRecognitionLocked()", "private int setParameterLocked(@ModelParams int modelParam, int value)", "private int getParameterLocked(@ModelParams int modelParam)", "private ModelParamRange queryParameterLocked(@ModelParams int modelParam)", "private void updateAndNotifyStateChangedLocked(int availability)", "private void updateAvailabilityLocked(int availability)", "private void notifyStateChangedLocked()", "private void sendUnknownFailure(String failureMessage)", "private void sendSoundTriggerFailure(@NonNull SoundTriggerFailure soundTriggerFailure)", " void onDetectorRemoteException()", "public boolean equals(Object obj)", "public int hashCode()", "public void dump(String prefix, PrintWriter pw)" ],
  "variableNames" : [ "STATE_INVALID", "STATE_HARDWARE_UNAVAILABLE", "STATE_KEYPHRASE_UNSUPPORTED", "STATE_KEYPHRASE_UNENROLLED", "STATE_KEYPHRASE_ENROLLED", "STATE_ERROR", "STATE_NOT_READY", "RECOGNITION_FLAG_NONE", "RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO", "RECOGNITION_FLAG_ALLOW_MULTIPLE_TRIGGERS", "RECOGNITION_FLAG_ENABLE_AUDIO_ECHO_CANCELLATION", "RECOGNITION_FLAG_ENABLE_AUDIO_NOISE_SUPPRESSION", "RECOGNITION_FLAG_RUN_IN_BATTERY_SAVER", "RECOGNITION_MODE_VOICE_TRIGGER", "RECOGNITION_MODE_USER_IDENTIFICATION", "AUDIO_CAPABILITY_ECHO_CANCELLATION", "AUDIO_CAPABILITY_NOISE_SUPPRESSION", "THROW_ON_INITIALIZE_IF_NO_DSP", "SEND_ON_FAILURE_FOR_ASYNC_EXCEPTIONS", "MODEL_PARAM_THRESHOLD_FACTOR", "TAG", "DBG", "STATUS_ERROR", "STATUS_OK", "MSG_AVAILABILITY_CHANGED", "MSG_HOTWORD_DETECTED", "MSG_DETECTION_ERROR", "MSG_DETECTION_PAUSE", "MSG_DETECTION_RESUME", "MSG_HOTWORD_REJECTED", "MSG_HOTWORD_STATUS_REPORTED", "MSG_PROCESS_RESTARTED", "MSG_DETECTION_HOTWORD_DETECTION_SERVICE_FAILURE", "MSG_DETECTION_SOUND_TRIGGER_FAILURE", "MSG_DETECTION_UNKNOWN_FAILURE", "mText", "mLocale", "mKeyphraseMetadata", "mKeyphraseEnrollmentInfo", "mModelManagementService", "mSoundTriggerSession", "mInternalCallback", "mExternalCallback", "mExternalExecutor", "mHandler", "mBinder", "mSupportSandboxedDetectionService", "mAttributionTag", "mIsAvailabilityOverriddenByTestApi", "mAvailability" ]
}