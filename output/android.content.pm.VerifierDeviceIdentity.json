{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/VerifierDeviceIdentity.java",
  "packageName" : "android.content.pm",
  "className" : "VerifierDeviceIdentity",
  "comment" : "\n * An identity that uniquely identifies a particular device. In this\n * implementation, the identity is represented as a 64-bit integer encoded to a\n * 13-character string using RFC 4648's Base32 encoding without the trailing\n * padding. This makes it easy for users to read and write the code without\n * confusing 'I' (letter) with '1' (one) or 'O' (letter) with '0' (zero).\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "LONG_SIZE",
    "type" : "int",
    "comment" : "\n     * Encoded size of a long (64-bit) into Base32. This format will end up\n     * looking like XXXX-XXXX-XXXX-X (length ignores hyphens) when applied with\n     * the GROUP_SIZE below.\n     ",
    "links" : [ ]
  }, {
    "name" : "GROUP_SIZE",
    "type" : "int",
    "comment" : "\n     * Size of groupings when outputting as strings. This helps people read it\n     * out and keep track of where they are.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIdentity",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdentityString",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENCODE",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SEPARATOR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<VerifierDeviceIdentity>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static VerifierDeviceIdentity generate()",
    "returnType" : "VerifierDeviceIdentity",
    "comment" : "\n     * Generate a new device identity.\n     *\n     * @return random uniformly-distributed device identity\n     ",
    "links" : [ ]
  }, {
    "name" : " static VerifierDeviceIdentity generate(Random rng)",
    "returnType" : "VerifierDeviceIdentity",
    "comment" : "\n     * Generate a new device identity using a provided random number generator\n     * class. This is used for testing.\n     *\n     * @param rng random number generator to retrieve the next long from\n     * @return verifier device identity based on the input from the provided\n     *         random number generator\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final String encodeBase32(long input)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final long decodeBase32(byte[] input) throws IllegalArgumentException",
    "returnType" : "long",
    "comment" : " TODO move this out to its own class (android.util.Base32)",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static VerifierDeviceIdentity parse(String deviceIdentity) throws IllegalArgumentException",
    "returnType" : "VerifierDeviceIdentity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LONG_SIZE", "GROUP_SIZE", "mIdentity", "mIdentityString", "ENCODE", "SEPARATOR", "CREATOR" ],
  "methodNames" : [ "public static VerifierDeviceIdentity generate()", " static VerifierDeviceIdentity generate(Random rng)", "private static final String encodeBase32(long input)", "private static final long decodeBase32(byte[] input) throws IllegalArgumentException", "public int hashCode()", "public boolean equals(Object other)", "public String toString()", "public static VerifierDeviceIdentity parse(String deviceIdentity) throws IllegalArgumentException", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}