{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Observable.java",
  "packageName" : "java.util",
  "className" : "Observable",
  "comment" : "\n * This class represents an observable object, or \"data\"\n * in the model-view paradigm. It can be subclassed to represent an\n * object that the application wants to have observed.\n * <p>\n * An observable object can have one or more observers. An observer\n * may be any object that implements interface {@code Observer}. After an\n * observable instance changes, an application calling the\n * {@code Observable}'s {@code notifyObservers} method\n * causes all of its observers to be notified of the change by a call\n * to their {@code update} method.\n * <p>\n * The order in which notifications will be delivered is unspecified.\n * The default implementation provided in the Observable class will\n * notify Observers in the order in which they registered interest, but\n * subclasses may change this order, use no guaranteed order, deliver\n * notifications on separate threads, or may guarantee that their\n * subclass follows this order, as they choose.\n * <p>\n * Note that this notification mechanism has nothing to do with threads\n * and is completely separate from the {@code wait} and {@code notify}\n * mechanism of class {@code Object}.\n * <p>\n * When an observable object is newly created, its set of observers is\n * empty. Two observers are considered the same if and only if the\n * {@code equals} method returns true for them.\n *\n * @author  Chris Warth\n * @see     java.util.Observable#notifyObservers()\n * @see     java.util.Observable#notifyObservers(java.lang.Object)\n * @see     java.util.Observer\n * @see     java.util.Observer#update(java.util.Observable, java.lang.Object)\n * @since   1.0\n *\n * @deprecated\n * This class and the {@link Observer} interface have been deprecated.\n * The event model supported by {@code Observer} and {@code Observable}\n * is quite limited, the order of notifications delivered by\n * {@code Observable} is unspecified, and state changes are not in\n * one-for-one correspondence with notifications.\n * For a richer event model, consider using the\n * {@link java.beans} package.  For reliable and ordered\n * messaging among threads, consider using one of the concurrent data\n * structures in the {@link java.util.concurrent} package.\n * For reactive streams style programming, see the\n * {@link java.util.concurrent.Flow} API.\n ",
  "links" : [ "java.util.Observer", "java.beans", "java.util.concurrent", "java.util.concurrent.Flow" ],
  "variables" : [ {
    "name" : "changed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "obs",
    "type" : "Vector<Observer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized void addObserver(Observer o)",
    "returnType" : "void",
    "comment" : "\n     * Adds an observer to the set of observers for this object, provided\n     * that it is not the same as some observer already in the set.\n     * The order in which notifications will be delivered to multiple\n     * observers is not specified. See the class comment.\n     *\n     * @param   o   an observer to be added.\n     * @throws NullPointerException   if the parameter o is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void deleteObserver(Observer o)",
    "returnType" : "void",
    "comment" : "\n     * Deletes an observer from the set of observers of this object.\n     * Passing {@code null} to this method will have no effect.\n     * @param   o   the observer to be deleted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyObservers()",
    "returnType" : "void",
    "comment" : "\n     * If this object has changed, as indicated by the\n     * {@code hasChanged} method, then notify all of its observers\n     * and then call the {@code clearChanged} method to\n     * indicate that this object has no longer changed.\n     * <p>\n     * Each observer has its {@code update} method called with two\n     * arguments: this observable object and {@code null}. In other\n     * words, this method is equivalent to:\n     * <blockquote>{@code\n     * notifyObservers(null)}</blockquote>\n     *\n     * @see     java.util.Observable#clearChanged()\n     * @see     java.util.Observable#hasChanged()\n     * @see     java.util.Observer#update(java.util.Observable, java.lang.Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyObservers(Object arg)",
    "returnType" : "void",
    "comment" : "\n     * If this object has changed, as indicated by the\n     * {@code hasChanged} method, then notify all of its observers\n     * and then call the {@code clearChanged} method to indicate\n     * that this object has no longer changed.\n     * <p>\n     * Each observer has its {@code update} method called with two\n     * arguments: this observable object and the {@code arg} argument.\n     *\n     * @param   arg   any object.\n     * @see     java.util.Observable#clearChanged()\n     * @see     java.util.Observable#hasChanged()\n     * @see     java.util.Observer#update(java.util.Observable, java.lang.Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void deleteObservers()",
    "returnType" : "void",
    "comment" : "\n     * Clears the observer list so that this object no longer has any observers.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void setChanged()",
    "returnType" : "void",
    "comment" : "\n     * Marks this {@code Observable} object as having been changed; the\n     * {@code hasChanged} method will now return {@code true}.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void clearChanged()",
    "returnType" : "void",
    "comment" : "\n     * Indicates that this object has no longer changed, or that it has\n     * already notified all of its observers of its most recent change,\n     * so that the {@code hasChanged} method will now return {@code false}.\n     * This method is called automatically by the\n     * {@code notifyObservers} methods.\n     *\n     * @see     java.util.Observable#notifyObservers()\n     * @see     java.util.Observable#notifyObservers(java.lang.Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean hasChanged()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this object has changed.\n     *\n     * @return  {@code true} if and only if the {@code setChanged}\n     *          method has been called more recently than the\n     *          {@code clearChanged} method on this object;\n     *          {@code false} otherwise.\n     * @see     java.util.Observable#clearChanged()\n     * @see     java.util.Observable#setChanged()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int countObservers()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of observers of this {@code Observable} object.\n     *\n     * @return  the number of observers of this object.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized void addObserver(Observer o)", "public synchronized void deleteObserver(Observer o)", "public void notifyObservers()", "public void notifyObservers(Object arg)", "public synchronized void deleteObservers()", "protected synchronized void setChanged()", "protected synchronized void clearChanged()", "public synchronized boolean hasChanged()", "public synchronized int countObservers()" ],
  "variableNames" : [ "changed", "obs" ]
}