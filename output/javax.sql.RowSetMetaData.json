{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/sql/RowSetMetaData.java",
  "packageName" : "javax.sql",
  "className" : "RowSetMetaData",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void setColumnCount(int columnCount) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the number of columns in the <code>RowSet</code> object to\n   * the given number.\n   *\n   * @param columnCount the number of columns in the <code>RowSet</code> object\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setAutoIncrement(int columnIndex, boolean property) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets whether the designated column is automatically numbered,\n   * The default is for a <code>RowSet</code> object's\n   * columns not to be automatically numbered.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param property <code>true</code> if the column is automatically\n   *                 numbered; <code>false</code> if it is not\n   *\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setCaseSensitive(int columnIndex, boolean property) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets whether the designated column is case sensitive.\n   * The default is <code>false</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param property <code>true</code> if the column is case sensitive;\n   *                 <code>false</code> if it is not\n   *\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setSearchable(int columnIndex, boolean property) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets whether the designated column can be used in a where clause.\n   * The default is <code>false</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param property <code>true</code> if the column can be used in a\n   *                 <code>WHERE</code> clause; <code>false</code> if it cannot\n   *\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setCurrency(int columnIndex, boolean property) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets whether the designated column is a cash value.\n   * The default is <code>false</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param property <code>true</code> if the column is a cash value;\n   *                 <code>false</code> if it is not\n   *\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setNullable(int columnIndex, int property) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets whether the designated column's value can be set to\n   * <code>NULL</code>.\n   * The default is <code>ResultSetMetaData.columnNullableUnknown</code>\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param property one of the following constants:\n   *                 <code>ResultSetMetaData.columnNoNulls</code>,\n   *                 <code>ResultSetMetaData.columnNullable</code>, or\n   *                 <code>ResultSetMetaData.columnNullableUnknown</code>\n   *\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setSigned(int columnIndex, boolean property) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets whether the designated column is a signed number.\n   * The default is <code>false</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param property <code>true</code> if the column is a signed number;\n   *                 <code>false</code> if it is not\n   *\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setColumnDisplaySize(int columnIndex, int size) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated column's normal maximum width in chars to the\n   * given <code>int</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param size the normal maximum number of characters for\n   *           the designated column\n   *\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setColumnLabel(int columnIndex, String label) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the suggested column title for use in printouts and\n   * displays, if any, to the given <code>String</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param label the column title\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setColumnName(int columnIndex, String columnName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the name of the designated column to the given <code>String</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param columnName the designated column's name\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setSchemaName(int columnIndex, String schemaName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the name of the designated column's table's schema, if any, to\n   * the given <code>String</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param schemaName the schema name\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setPrecision(int columnIndex, int precision) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated column's number of decimal digits to the\n   * given <code>int</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param precision the total number of decimal digits\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setScale(int columnIndex, int scale) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated column's number of digits to the\n   * right of the decimal point to the given <code>int</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param scale the number of digits to right of decimal point\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setTableName(int columnIndex, String tableName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated column's table name, if any, to the given\n   * <code>String</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param tableName the column's table name\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setCatalogName(int columnIndex, String catalogName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated column's table's catalog name, if any, to the given\n   * <code>String</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param catalogName the column's catalog name\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setColumnType(int columnIndex, int SQLType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated column's SQL type to the one given.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param SQLType the column's SQL type\n   * @exception SQLException if a database access error occurs\n   * @see Types\n   ",
    "links" : [ ]
  }, {
    "name" : " void setColumnTypeName(int columnIndex, String typeName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated column's type name that is specific to the\n   * data source, if any, to the given <code>String</code>.\n   *\n   * @param columnIndex the first column is 1, the second is 2, ...\n   * @param typeName data source specific type name.\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setColumnCount(int columnCount) throws SQLException", " void setAutoIncrement(int columnIndex, boolean property) throws SQLException", " void setCaseSensitive(int columnIndex, boolean property) throws SQLException", " void setSearchable(int columnIndex, boolean property) throws SQLException", " void setCurrency(int columnIndex, boolean property) throws SQLException", " void setNullable(int columnIndex, int property) throws SQLException", " void setSigned(int columnIndex, boolean property) throws SQLException", " void setColumnDisplaySize(int columnIndex, int size) throws SQLException", " void setColumnLabel(int columnIndex, String label) throws SQLException", " void setColumnName(int columnIndex, String columnName) throws SQLException", " void setSchemaName(int columnIndex, String schemaName) throws SQLException", " void setPrecision(int columnIndex, int precision) throws SQLException", " void setScale(int columnIndex, int scale) throws SQLException", " void setTableName(int columnIndex, String tableName) throws SQLException", " void setCatalogName(int columnIndex, String catalogName) throws SQLException", " void setColumnType(int columnIndex, int SQLType) throws SQLException", " void setColumnTypeName(int columnIndex, String typeName) throws SQLException" ],
  "variableNames" : [ ]
}