{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/display/DisplayManagerInternal.java",
  "packageName" : "android.hardware.display",
  "className" : "DisplayOffloadSession",
  "comment" : " A session token that associates a internal display with a {@link DisplayOffloader}. ",
  "links" : [ "DisplayOffloader" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void setDozeStateOverride(int displayState)",
    "returnType" : "void",
    "comment" : " Provide the display state to use in place of state DOZE. ",
    "links" : [ ]
  }, {
    "name" : " boolean isActive()",
    "returnType" : "boolean",
    "comment" : " Whether the session is active. ",
    "links" : [ ]
  }, {
    "name" : " void updateBrightness(float brightness)",
    "returnType" : "void",
    "comment" : "\n         * Update the brightness from the offload chip.\n         * @param brightness The brightness value between {@link PowerManager.BRIGHTNESS_MIN} and\n         *                   {@link PowerManager.BRIGHTNESS_MAX}, or\n         *                   {@link PowerManager.BRIGHTNESS_INVALID_FLOAT} which removes\n         *                   the brightness from offload. Other values will be ignored.\n         ",
    "links" : [ "PowerManager.BRIGHTNESS_INVALID_FLOAT", "PowerManager.BRIGHTNESS_MIN", "PowerManager.BRIGHTNESS_MAX" ]
  }, {
    "name" : " boolean blockScreenOn(Runnable unblocker)",
    "returnType" : "boolean",
    "comment" : "\n         * Called while display is turning to state ON to leave a small period for displayoffload\n         * session to finish some work.\n         *\n         * @param unblocker a {@link Runnable} used by displayoffload session to notify\n         *                  {@link DisplayManager} that it can continue turning screen on.\n         ",
    "links" : [ "android.hardware.display.DisplayManager", "Runnable" ]
  }, {
    "name" : " float[] getAutoBrightnessLevels(int mode)",
    "returnType" : "float[]",
    "comment" : "\n         * Get the brightness levels used to determine automatic brightness based on lux levels.\n         * @param mode The auto-brightness mode\n         *             (AutomaticBrightnessController.AutomaticBrightnessMode)\n         * @return The brightness levels for the specified mode. The values are between\n         * {@link PowerManager.BRIGHTNESS_MIN} and {@link PowerManager.BRIGHTNESS_MAX}.\n         ",
    "links" : [ "PowerManager.BRIGHTNESS_MIN", "PowerManager.BRIGHTNESS_MAX" ]
  }, {
    "name" : " float[] getAutoBrightnessLuxLevels(int mode)",
    "returnType" : "float[]",
    "comment" : "\n         * Get the lux levels used to determine automatic brightness.\n         * @param mode The auto-brightness mode\n         *             (AutomaticBrightnessController.AutomaticBrightnessMode)\n         * @return The lux levels for the specified mode\n         ",
    "links" : [ ]
  }, {
    "name" : " float getBrightness()",
    "returnType" : "float",
    "comment" : "\n         * @return The current brightness setting\n         ",
    "links" : [ ]
  }, {
    "name" : " float getDozeBrightness()",
    "returnType" : "float",
    "comment" : "\n         * @return The brightness value that is used when the device is in doze\n         ",
    "links" : [ ]
  }, {
    "name" : " static boolean isSupportedOffloadState(int displayState)",
    "returnType" : "boolean",
    "comment" : " Returns whether displayoffload supports the given display state. ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setDozeStateOverride(int displayState)", " boolean isActive()", " void updateBrightness(float brightness)", " boolean blockScreenOn(Runnable unblocker)", " float[] getAutoBrightnessLevels(int mode)", " float[] getAutoBrightnessLuxLevels(int mode)", " float getBrightness()", " float getDozeBrightness()", " static boolean isSupportedOffloadState(int displayState)" ],
  "variableNames" : [ ]
}