{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/Striped64.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "Striped64",
  "comment" : "\n * A package-local class holding common representation and mechanics\n * for classes supporting dynamic striping on 64bit values. The class\n * extends Number so that concrete subclasses must publicly do so.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NCPU",
    "type" : "int",
    "comment" : " Number of CPUS, to place bound on table size ",
    "links" : [ ]
  }, {
    "name" : "cells",
    "type" : "Cell[]",
    "comment" : "\n     * Table of cells. When non-null, size is a power of 2.\n     ",
    "links" : [ ]
  }, {
    "name" : "base",
    "type" : "long",
    "comment" : "\n     * Base value, used mainly when there is no contention, but also as\n     * a fallback during table initialization races. Updated via CAS.\n     ",
    "links" : [ ]
  }, {
    "name" : "cellsBusy",
    "type" : "int",
    "comment" : "\n     * Spinlock (locked via CAS) used when resizing and/or creating Cells.\n     ",
    "links" : [ ]
  }, {
    "name" : "BASE",
    "type" : "VarHandle",
    "comment" : " VarHandle mechanics",
    "links" : [ ]
  }, {
    "name" : "CELLSBUSY",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THREAD_PROBE",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final boolean casBase(long cmp, long val)",
    "returnType" : "boolean",
    "comment" : "\n     * CASes the base field.\n     ",
    "links" : [ ]
  }, {
    "name" : " final long getAndSetBase(long val)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final boolean casCellsBusy()",
    "returnType" : "boolean",
    "comment" : "\n     * CASes the cellsBusy field from 0 to 1 to acquire lock.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int getProbe()",
    "returnType" : "int",
    "comment" : "\n     * Returns the probe value for the current thread.\n     * Duplicated from ThreadLocalRandom because of packaging restrictions.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int advanceProbe(int probe)",
    "returnType" : "int",
    "comment" : "\n     * Pseudo-randomly advances and records the given probe value for the\n     * given thread.\n     * Duplicated from ThreadLocalRandom because of packaging restrictions.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void longAccumulate(long x, LongBinaryOperator fn, boolean wasUncontended, int index)",
    "returnType" : "void",
    "comment" : "\n     * Handles cases of updates involving initialization, resizing,\n     * creating new Cells, and/or contention. See above for\n     * explanation. This method suffers the usual non-modularity\n     * problems of optimistic retry code, relying on rechecked sets of\n     * reads.\n     *\n     * @param x the value\n     * @param fn the update function, or null for add (this convention\n     * avoids the need for an extra field or function in LongAdder).\n     * @param wasUncontended false if CAS failed before call\n     * @param index thread index from getProbe\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long apply(DoubleBinaryOperator fn, long v, double x)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void doubleAccumulate(double x, DoubleBinaryOperator fn, boolean wasUncontended, int index)",
    "returnType" : "void",
    "comment" : "\n     * Same as longAccumulate, but injecting long/double conversions\n     * in too many places to sensibly merge with long version, given\n     * the low-overhead requirements of this class. So must instead be\n     * maintained by copy/paste/adapt.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " final boolean casBase(long cmp, long val)", " final long getAndSetBase(long val)", " final boolean casCellsBusy()", " static final int getProbe()", " static final int advanceProbe(int probe)", " final void longAccumulate(long x, LongBinaryOperator fn, boolean wasUncontended, int index)", "private static long apply(DoubleBinaryOperator fn, long v, double x)", " final void doubleAccumulate(double x, DoubleBinaryOperator fn, boolean wasUncontended, int index)" ],
  "variableNames" : [ "NCPU", "cells", "base", "cellsBusy", "BASE", "CELLSBUSY", "THREAD_PROBE" ]
}