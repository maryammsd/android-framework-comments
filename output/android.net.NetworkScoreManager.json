{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkScoreManager.java",
  "packageName" : "android.net",
  "className" : "NetworkScoreManager",
  "comment" : "\n * Class that manages communication between network subsystems and a network scorer.\n *\n * <p>A network scorer is any application which:\n * <ul>\n * <li>Is granted the {@link permission#SCORE_NETWORKS} permission.\n * <li>Is granted the {@link permission#ACCESS_COARSE_LOCATION} permission.\n * <li>Include a Service for the {@link #ACTION_RECOMMEND_NETWORKS} action\n *     protected by the {@link permission#BIND_NETWORK_RECOMMENDATION_SERVICE}\n *     permission.\n * </ul>\n *\n * @deprecated No longer functional on {@link android.os.Build.VERSION_CODES#TIRAMISU} and above.\n * See <a href=\"{@docRoot}guide/topics/connectivity/wifi-suggest\">Wi-Fi Suggestion API</a> for\n * alternative APIs to suggest/configure Wi-Fi networks.\n * @hide\n ",
  "links" : [ "android.Manifest.permission#ACCESS_COARSE_LOCATION", "android.os.Build.VERSION_CODES#TIRAMISU", "android.Manifest.permission#BIND_NETWORK_RECOMMENDATION_SERVICE", "#ACTION_RECOMMEND_NETWORKS", "android.Manifest.permission#SCORE_NETWORKS" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CHANGE_ACTIVE",
    "type" : "String",
    "comment" : "\n     * Activity action: ask the user to change the active network scorer. This will show a dialog\n     * that asks the user whether they want to replace the current active scorer with the one\n     * specified in {@link #EXTRA_PACKAGE_NAME}. The activity will finish with RESULT_OK if the\n     * active scorer was changed or RESULT_CANCELED if it failed for any reason.\n     * @deprecated No longer sent.\n     ",
    "links" : [ "#EXTRA_PACKAGE_NAME" ]
  }, {
    "name" : "EXTRA_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * Extra used with {@link #ACTION_CHANGE_ACTIVE} to specify the new scorer package. Set with\n     * {@link android.content.Intent#putExtra(String, String)}.\n     * @deprecated No longer sent.\n     ",
    "links" : [ "android.content.Intent#putExtra(String", "#ACTION_CHANGE_ACTIVE" ]
  }, {
    "name" : "ACTION_SCORE_NETWORKS",
    "type" : "String",
    "comment" : "\n     * Broadcast action: new network scores are being requested. This intent will only be delivered\n     * to the current active scorer app. That app is responsible for scoring the networks and\n     * calling {@link #updateScores} when complete. The networks to score are specified in\n     * {@link #EXTRA_NETWORKS_TO_SCORE}, and will generally consist of all networks which have been\n     * configured by the user as well as any open networks.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.\n     * @deprecated Use {@link #ACTION_RECOMMEND_NETWORKS} to bind scorer app instead.\n     ",
    "links" : [ "#updateScores", "#EXTRA_NETWORKS_TO_SCORE", "#ACTION_RECOMMEND_NETWORKS" ]
  }, {
    "name" : "EXTRA_NETWORKS_TO_SCORE",
    "type" : "String",
    "comment" : "\n     * Extra used with {@link #ACTION_SCORE_NETWORKS} to specify the networks to be scored, as an\n     * array of {@link NetworkKey}s. Can be obtained with\n     * {@link android.content.Intent#getParcelableArrayExtra(String)}}.\n     * @deprecated Use {@link #ACTION_RECOMMEND_NETWORKS} to bind scorer app instead.\n     ",
    "links" : [ "#ACTION_SCORE_NETWORKS", "android.content.Intent#getParcelableArrayExtra(String)", "android.net.NetworkKey", "#ACTION_RECOMMEND_NETWORKS" ]
  }, {
    "name" : "ACTION_CUSTOM_ENABLE",
    "type" : "String",
    "comment" : "\n     * Activity action: launch an activity for configuring a provider for the feature that connects\n     * and secures open wifi networks available before enabling it. Applications that enable this\n     * feature must provide an activity for this action. The framework will launch this activity\n     * which must return RESULT_OK if the feature should be enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOMMENDATION_SERVICE_LABEL_META_DATA",
    "type" : "String",
    "comment" : "\n     * Meta-data specified on a {@link NetworkRecommendationProvider} that provides a user-visible\n     * label of the recommendation service.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkRecommendationProvider" ]
  }, {
    "name" : "USE_OPEN_WIFI_PACKAGE_META_DATA",
    "type" : "String",
    "comment" : "\n     * Meta-data specified on a {@link NetworkRecommendationProvider} that specified the package\n     * name of the application that connects and secures open wifi networks automatically. The\n     * specified package must provide an Activity for {@link #ACTION_CUSTOM_ENABLE}.\n     * @hide\n     ",
    "links" : [ "#ACTION_CUSTOM_ENABLE", "android.net.NetworkRecommendationProvider" ]
  }, {
    "name" : "NETWORK_AVAILABLE_NOTIFICATION_CHANNEL_ID_META_DATA",
    "type" : "String",
    "comment" : "\n     * Meta-data specified on a {@link NetworkRecommendationProvider} that specifies the\n     * {@link android.app.NotificationChannel} ID used to post open network notifications.\n     * @hide\n     ",
    "links" : [ "android.app.NotificationChannel", "android.net.NetworkRecommendationProvider" ]
  }, {
    "name" : "ACTION_SCORER_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast action: the active scorer has been changed. Scorer apps may listen to this to\n     * perform initialization once selected as the active scorer, or clean up unneeded resources\n     * if another scorer has been selected. This is an explicit broadcast only sent to the\n     * previous scorer and new scorer. Note that it is unnecessary to clear existing scores as\n     * this is handled by the system.\n     *\n     * <p>The new scorer will be specified in {@link #EXTRA_NEW_SCORER}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.\n     ",
    "links" : [ "#EXTRA_NEW_SCORER" ]
  }, {
    "name" : "ACTION_RECOMMEND_NETWORKS",
    "type" : "String",
    "comment" : "\n     * Service action: Used to discover and bind to a network recommendation provider.\n     * Implementations should return {@link NetworkRecommendationProvider#getBinder()} from\n     * their <code>onBind()</code> method.\n     ",
    "links" : [ "android.net.NetworkRecommendationProvider#getBinder()" ]
  }, {
    "name" : "EXTRA_NEW_SCORER",
    "type" : "String",
    "comment" : "\n     * Extra used with {@link #ACTION_SCORER_CHANGED} to specify the newly selected scorer's package\n     * name. Will be null if scoring was disabled. Can be obtained with\n     * {@link android.content.Intent#getStringExtra(String)}.\n     ",
    "links" : [ "#ACTION_SCORER_CHANGED", "android.content.Intent#getStringExtra(String)" ]
  }, {
    "name" : "SCORE_FILTER_NONE",
    "type" : "int",
    "comment" : "\n     * Do not filter updates sent to the {@link NetworkScoreCallback}].\n     ",
    "links" : [ "NetworkScoreCallback" ]
  }, {
    "name" : "SCORE_FILTER_CURRENT_NETWORK",
    "type" : "int",
    "comment" : "\n     * Only send updates to the {@link NetworkScoreCallback} when the network matches the connected\n     * network.\n     ",
    "links" : [ "NetworkScoreCallback" ]
  }, {
    "name" : "SCORE_FILTER_SCAN_RESULTS",
    "type" : "int",
    "comment" : "\n     * Only send updates to the {@link NetworkScoreCallback} when the network is part of the\n     * current scan result set.\n     ",
    "links" : [ "NetworkScoreCallback" ]
  }, {
    "name" : "RECOMMENDATIONS_ENABLED_FORCED_OFF",
    "type" : "int",
    "comment" : "\n     * Recommendations have been forced off.\n     * <p>\n     * This value is never set by any of the NetworkScore classes, it must be set via other means.\n     * This state is also \"sticky\" and we won't transition out of this state once entered. To move\n     * to a different state this value has to be explicitly set to a different value via\n     * other means.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOMMENDATIONS_ENABLED_OFF",
    "type" : "int",
    "comment" : "\n     * Recommendations are not enabled.\n     * <p>\n     * This is a transient state that can be entered when the default recommendation app is enabled\n     * but no longer valid. This state will transition to RECOMMENDATIONS_ENABLED_ON when a valid\n     * recommendation app is enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOMMENDATIONS_ENABLED_ON",
    "type" : "int",
    "comment" : "\n     * Recommendations are enabled.\n     * <p>\n     * This is a transient state that means a valid recommendation app is active. This state will\n     * transition to RECOMMENDATIONS_ENABLED_OFF if the current and default recommendation apps\n     * become invalid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "INetworkScoreService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getActiveScorerPackage()",
    "returnType" : "String",
    "comment" : "\n     * Obtain the package name of the current active network scorer.\n     *\n     * <p>At any time, only one scorer application will receive {@link #ACTION_SCORE_NETWORKS}\n     * broadcasts and be allowed to call {@link #updateScores}. Applications may use this method to\n     * determine the current scorer and offer the user the ability to select a different scorer via\n     * the {@link #ACTION_CHANGE_ACTIVE} intent.\n     * @return the full package name of the current active scorer, or null if there is no active\n     *         scorer.\n     * @throws SecurityException if the caller doesn't hold either {@link permission#SCORE_NETWORKS}\n     *                           or {@link permission#REQUEST_NETWORK_SCORES} permissions.\n     ",
    "links" : [ "#ACTION_SCORE_NETWORKS", "#updateScores", "android.Manifest.permission#REQUEST_NETWORK_SCORES", "#ACTION_CHANGE_ACTIVE", "android.Manifest.permission#SCORE_NETWORKS" ]
  }, {
    "name" : "public NetworkScorerAppData getActiveScorer()",
    "returnType" : "NetworkScorerAppData",
    "comment" : "\n     * Returns metadata about the active scorer or <code>null</code> if there is no active scorer.\n     *\n     * @throws SecurityException if the caller does not hold the\n     *         {@link permission#REQUEST_NETWORK_SCORES} permission.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_NETWORK_SCORES" ]
  }, {
    "name" : "public List<NetworkScorerAppData> getAllValidScorers()",
    "returnType" : "List<NetworkScorerAppData>",
    "comment" : "\n     * Returns the list of available scorer apps. The list will be empty if there are\n     * no valid scorers.\n     *\n     * @throws SecurityException if the caller does not hold the\n     *         {@link permission#REQUEST_NETWORK_SCORES} permission.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_NETWORK_SCORES" ]
  }, {
    "name" : "public boolean updateScores(@NonNull ScoredNetwork[] networks) throws SecurityException",
    "returnType" : "boolean",
    "comment" : "\n     * Update network scores.\n     *\n     * <p>This may be called at any time to re-score active networks. Scores will generally be\n     * updated quickly, but if this method is called too frequently, the scores may be held and\n     * applied at a later time.\n     *\n     * @param networks the networks which have been scored by the scorer.\n     * @return whether the update was successful.\n     * @throws SecurityException if the caller is not the active scorer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean clearScores() throws SecurityException",
    "returnType" : "boolean",
    "comment" : "\n     * Clear network scores.\n     *\n     * <p>Should be called when all scores need to be invalidated, i.e. because the scoring\n     * algorithm has changed and old scores can no longer be compared to future scores.\n     *\n     * <p>Note that scores will be cleared automatically when the active scorer changes, as scores\n     * from one scorer cannot be compared to those from another scorer.\n     *\n     * @return whether the clear was successful.\n     * @throws SecurityException if the caller is not the active scorer or if the caller doesn't\n     *                           hold the {@link permission#REQUEST_NETWORK_SCORES} permission.\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_NETWORK_SCORES" ]
  }, {
    "name" : "public boolean setActiveScorer(String packageName) throws SecurityException",
    "returnType" : "boolean",
    "comment" : "\n     * Set the active scorer to a new package and clear existing scores.\n     *\n     * <p>Should never be called directly without obtaining user consent. This can be done by using\n     * the {@link #ACTION_CHANGE_ACTIVE} broadcast, or using a custom configuration activity.\n     *\n     * @return true if the operation succeeded, or false if the new package is not a valid scorer.\n     * @throws SecurityException if the caller doesn't hold either {@link permission#SCORE_NETWORKS}\n     *                           or {@link permission#REQUEST_NETWORK_SCORES} permissions.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_NETWORK_SCORES", "#ACTION_CHANGE_ACTIVE", "android.Manifest.permission#SCORE_NETWORKS" ]
  }, {
    "name" : "public void disableScoring() throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Turn off network scoring.\n     *\n     * <p>May only be called by the current scorer app, or the system.\n     *\n     * @throws SecurityException if the caller is not the active scorer or if the caller doesn't\n     *                           hold the {@link permission#REQUEST_NETWORK_SCORES} permission.\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_NETWORK_SCORES" ]
  }, {
    "name" : "public boolean requestScores(@NonNull NetworkKey[] networks) throws SecurityException",
    "returnType" : "boolean",
    "comment" : "\n     * Request scoring for networks.\n     *\n     * <p>\n     * Note: The results (i.e scores) for these networks, when available will be provided via the\n     * callback registered with {@link #registerNetworkScoreCallback(int, int, Executor,\n     * NetworkScoreCallback)}. The calling module is responsible for registering a callback to\n     * receive the results before requesting new scores via this API.\n     *\n     * @return true if the request was successfully sent, or false if there is no active scorer.\n     * @throws SecurityException if the caller does not hold the\n     *         {@link permission#REQUEST_NETWORK_SCORES} permission.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_NETWORK_SCORES", "#registerNetworkScoreCallback(int" ]
  }, {
    "name" : "public boolean requestScores(@NonNull Collection<NetworkKey> networks) throws SecurityException",
    "returnType" : "boolean",
    "comment" : "\n     * Request scoring for networks.\n     *\n     * <p>\n     * Note: The results (i.e scores) for these networks, when available will be provided via the\n     * callback registered with {@link #registerNetworkScoreCallback(int, int, Executor,\n     * NetworkScoreCallback)}. The calling module is responsible for registering a callback to\n     * receive the results before requesting new scores via this API.\n     *\n     * @return true if the request was successfully sent, or false if there is no active scorer.\n     * @throws SecurityException if the caller does not hold the\n     *         {@link permission#REQUEST_NETWORK_SCORES} permission.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_NETWORK_SCORES", "#registerNetworkScoreCallback(int" ]
  }, {
    "name" : "public void registerNetworkScoreCache(int networkType, INetworkScoreCache scoreCache)",
    "returnType" : "void",
    "comment" : "\n     * Register a network score cache.\n     *\n     * @param networkType the type of network this cache can handle. See {@link NetworkKey#type}.\n     * @param scoreCache implementation of {@link INetworkScoreCache} to store the scores.\n     * @throws SecurityException if the caller does not hold the\n     *         {@link permission#REQUEST_NETWORK_SCORES} permission.\n     * @throws IllegalArgumentException if a score cache is already registered for this type.\n     * @deprecated equivalent to registering for cache updates with {@link #SCORE_FILTER_NONE}.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkKey#type", "INetworkScoreCache", "android.Manifest.permission#REQUEST_NETWORK_SCORES", "#SCORE_FILTER_NONE" ]
  }, {
    "name" : "public void registerNetworkScoreCache(int networkType, INetworkScoreCache scoreCache, @ScoreUpdateFilter int filterType)",
    "returnType" : "void",
    "comment" : "\n     * Register a network score cache.\n     *\n     * @param networkType the type of network this cache can handle. See {@link NetworkKey#type}\n     * @param scoreCache implementation of {@link INetworkScoreCache} to store the scores\n     * @param filterType the {@link ScoreUpdateFilter} to apply\n     * @throws SecurityException if the caller does not hold the\n     *         {@link permission#REQUEST_NETWORK_SCORES} permission.\n     * @throws IllegalArgumentException if a score cache is already registered for this type.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkKey#type", "INetworkScoreCache", "android.Manifest.permission#REQUEST_NETWORK_SCORES", "ScoreUpdateFilter" ]
  }, {
    "name" : "public void unregisterNetworkScoreCache(int networkType, INetworkScoreCache scoreCache)",
    "returnType" : "void",
    "comment" : "\n     * Unregister a network score cache.\n     *\n     * @param networkType the type of network this cache can handle. See {@link NetworkKey#type}.\n     * @param scoreCache implementation of {@link INetworkScoreCache} to store the scores.\n     * @throws SecurityException if the caller does not hold the\n     *         {@link permission#REQUEST_NETWORK_SCORES} permission.\n     * @throws IllegalArgumentException if a score cache is already registered for this type.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkKey#type", "INetworkScoreCache", "android.Manifest.permission#REQUEST_NETWORK_SCORES" ]
  }, {
    "name" : "public void registerNetworkScoreCallback(@NetworkKey.NetworkType int networkType, @ScoreUpdateFilter int filterType, @NonNull @CallbackExecutor Executor executor, @NonNull NetworkScoreCallback callback) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Register a network score callback.\n     *\n     * @param networkType the type of network this cache can handle. See {@link NetworkKey#type}\n     * @param filterType the {@link ScoreUpdateFilter} to apply\n     * @param callback implementation of {@link NetworkScoreCallback} that will be invoked when the\n     *                 scores change.\n     * @param executor The executor on which to execute the callbacks.\n     * @throws SecurityException if the caller does not hold the\n     *         {@link permission#REQUEST_NETWORK_SCORES} permission.\n     * @throws IllegalArgumentException if a callback is already registered for this type.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkKey#type", "android.Manifest.permission#REQUEST_NETWORK_SCORES", "ScoreUpdateFilter", "NetworkScoreCallback" ]
  }, {
    "name" : "public boolean isCallerActiveScorer(int callingUid)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether the application with the given UID is the enabled scorer.\n     *\n     * @param callingUid the UID to check\n     * @return true if the provided UID is the active scorer, false otherwise.\n     * @throws SecurityException if the caller does not hold the\n     *         {@link permission#REQUEST_NETWORK_SCORES} permission.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#REQUEST_NETWORK_SCORES" ]
  } ],
  "methodNames" : [ "public String getActiveScorerPackage()", "public NetworkScorerAppData getActiveScorer()", "public List<NetworkScorerAppData> getAllValidScorers()", "public boolean updateScores(@NonNull ScoredNetwork[] networks) throws SecurityException", "public boolean clearScores() throws SecurityException", "public boolean setActiveScorer(String packageName) throws SecurityException", "public void disableScoring() throws SecurityException", "public boolean requestScores(@NonNull NetworkKey[] networks) throws SecurityException", "public boolean requestScores(@NonNull Collection<NetworkKey> networks) throws SecurityException", "public void registerNetworkScoreCache(int networkType, INetworkScoreCache scoreCache)", "public void registerNetworkScoreCache(int networkType, INetworkScoreCache scoreCache, @ScoreUpdateFilter int filterType)", "public void unregisterNetworkScoreCache(int networkType, INetworkScoreCache scoreCache)", "public void registerNetworkScoreCallback(@NetworkKey.NetworkType int networkType, @ScoreUpdateFilter int filterType, @NonNull @CallbackExecutor Executor executor, @NonNull NetworkScoreCallback callback) throws SecurityException", "public boolean isCallerActiveScorer(int callingUid)" ],
  "variableNames" : [ "TAG", "ACTION_CHANGE_ACTIVE", "EXTRA_PACKAGE_NAME", "ACTION_SCORE_NETWORKS", "EXTRA_NETWORKS_TO_SCORE", "ACTION_CUSTOM_ENABLE", "RECOMMENDATION_SERVICE_LABEL_META_DATA", "USE_OPEN_WIFI_PACKAGE_META_DATA", "NETWORK_AVAILABLE_NOTIFICATION_CHANNEL_ID_META_DATA", "ACTION_SCORER_CHANGED", "ACTION_RECOMMEND_NETWORKS", "EXTRA_NEW_SCORER", "SCORE_FILTER_NONE", "SCORE_FILTER_CURRENT_NETWORK", "SCORE_FILTER_SCAN_RESULTS", "RECOMMENDATIONS_ENABLED_FORCED_OFF", "RECOMMENDATIONS_ENABLED_OFF", "RECOMMENDATIONS_ENABLED_ON", "mContext", "mService" ]
}