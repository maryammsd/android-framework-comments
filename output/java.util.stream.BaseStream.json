{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/BaseStream.java",
  "packageName" : "java.util.stream",
  "className" : "BaseStream",
  "comment" : "\n * Base interface for streams, which are sequences of elements supporting\n * sequential and parallel aggregate operations.  The following example\n * illustrates an aggregate operation using the stream types {@link Stream}\n * and {@link IntStream}, computing the sum of the weights of the red widgets:\n *\n * <pre>{@code\n *     int sum = widgets.stream()\n *                      .filter(w -> w.getColor() == RED)\n *                      .mapToInt(w -> w.getWeight())\n *                      .sum();\n * }</pre>\n *\n * See the class documentation for {@link Stream} and the package documentation\n * for <a href=\"package-summary.html\">java.util.stream</a> for additional\n * specification of streams, stream operations, stream pipelines, and\n * parallelism, which governs the behavior of all stream types.\n *\n * @param <T> the type of the stream elements\n * @param <S> the type of the stream implementing {@code BaseStream}\n * @since 1.8\n * @see Stream\n * @see IntStream\n * @see LongStream\n * @see DoubleStream\n * @see <a href=\"package-summary.html\">java.util.stream</a>\n ",
  "links" : [ "java.util.stream.IntStream", "java.util.stream.Stream" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Iterator<T> iterator()",
    "returnType" : "Iterator<T>",
    "comment" : "\n     * Returns an iterator for the elements of this stream.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @return the element iterator for this stream\n     ",
    "links" : [ ]
  }, {
    "name" : " Spliterator<T> spliterator()",
    "returnType" : "Spliterator<T>",
    "comment" : "\n     * Returns a spliterator for the elements of this stream.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * <p>\n     * The returned spliterator should report the set of characteristics derived\n     * from the stream pipeline (namely the characteristics derived from the\n     * stream source spliterator and the intermediate operations).\n     * Implementations may report a sub-set of those characteristics.  For\n     * example, it may be too expensive to compute the entire set for some or\n     * all possible stream pipelines.\n     *\n     * @return the element spliterator for this stream\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isParallel()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this stream, if a terminal operation were to be executed,\n     * would execute in parallel.  Calling this method after invoking an\n     * terminal stream operation method may yield unpredictable results.\n     *\n     * @return {@code true} if this stream would execute in parallel if executed\n     ",
    "links" : [ ]
  }, {
    "name" : " S sequential()",
    "returnType" : "S",
    "comment" : "\n     * Returns an equivalent stream that is sequential.  May return\n     * itself, either because the stream was already sequential, or because\n     * the underlying stream state was modified to be sequential.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @return a sequential stream\n     ",
    "links" : [ ]
  }, {
    "name" : " S parallel()",
    "returnType" : "S",
    "comment" : "\n     * Returns an equivalent stream that is parallel.  May return\n     * itself, either because the stream was already parallel, or because\n     * the underlying stream state was modified to be parallel.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @return a parallel stream\n     ",
    "links" : [ ]
  }, {
    "name" : " S unordered()",
    "returnType" : "S",
    "comment" : "\n     * Returns an equivalent stream that is\n     * <a href=\"package-summary.html#Ordering\">unordered</a>.  May return\n     * itself, either because the stream was already unordered, or because\n     * the underlying stream state was modified to be unordered.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @return an unordered stream\n     ",
    "links" : [ ]
  }, {
    "name" : " S onClose(Runnable closeHandler)",
    "returnType" : "S",
    "comment" : "\n     * Returns an equivalent stream with an additional close handler.  Close\n     * handlers are run when the {@link #close()} method\n     * is called on the stream, and are executed in the order they were\n     * added.  All close handlers are run, even if earlier close handlers throw\n     * exceptions.  If any close handler throws an exception, the first\n     * exception thrown will be relayed to the caller of {@code close()}, with\n     * any remaining exceptions added to that exception as suppressed exceptions\n     * (unless one of the remaining exceptions is the same exception as the\n     * first exception, since an exception cannot suppress itself.)  May\n     * return itself.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param closeHandler A task to execute when the stream is closed\n     * @return a stream with a handler that is run if the stream is closed\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : " void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this stream, causing all close handlers for this stream pipeline\n     * to be called.\n     *\n     * @see AutoCloseable#close()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Iterator<T> iterator()", " Spliterator<T> spliterator()", " boolean isParallel()", " S sequential()", " S parallel()", " S unordered()", " S onClose(Runnable closeHandler)", " void close()" ],
  "variableNames" : [ ]
}