{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/IntPipeline.java",
  "packageName" : "java.util.stream",
  "className" : "IntPipeline",
  "comment" : " Android-changed: Made public for CTS tests only.",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "private static IntConsumer adapt(Sink<Integer> sink)",
    "returnType" : "IntConsumer",
    "comment" : "\n     * Adapt a {@code Sink<Integer> to an {@code IntConsumer}, ideally simply\n     * by casting.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Spliterator.OfInt adapt(Spliterator<Integer> s)",
    "returnType" : "Spliterator.OfInt",
    "comment" : "\n     * Adapt a {@code Spliterator<Integer>} to a {@code Spliterator.OfInt}.\n     *\n     * @implNote\n     * The implementation attempts to cast to a Spliterator.OfInt, and throws an\n     * exception if this cast is not possible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final StreamShape getOutputShape()",
    "returnType" : "StreamShape",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Node<Integer> evaluateToNode(PipelineHelper<Integer> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<Integer[]> generator)",
    "returnType" : "Node<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator<Integer> wrap(PipelineHelper<Integer> ph, Supplier<Spliterator<P_IN>> supplier, boolean isParallel)",
    "returnType" : "Spliterator<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator.OfInt lazySpliterator(Supplier<? extends Spliterator<Integer>> supplier)",
    "returnType" : "Spliterator.OfInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean forEachWithCancel(Spliterator<Integer> spliterator, Sink<Integer> sink)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Node.Builder<Integer> makeNodeBuilder(long exactSizeIfKnown, IntFunction<Integer[]> generator)",
    "returnType" : "Node.Builder<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Stream<U> mapToObj(IntFunction<? extends U> mapper, int opFlags)",
    "returnType" : "Stream<U>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final PrimitiveIterator.OfInt iterator()",
    "returnType" : "PrimitiveIterator.OfInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator.OfInt spliterator()",
    "returnType" : "Spliterator.OfInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream asLongStream()",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream asDoubleStream()",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<Integer> boxed()",
    "returnType" : "Stream<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream map(IntUnaryOperator mapper)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<U> mapToObj(IntFunction<? extends U> mapper)",
    "returnType" : "Stream<U>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream mapToLong(IntToLongFunction mapper)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream mapToDouble(IntToDoubleFunction mapper)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream flatMap(IntFunction<? extends IntStream> mapper)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream mapMulti(IntMapMultiConsumer mapper)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IntStream unordered()",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream filter(IntPredicate predicate)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream peek(IntConsumer action)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream limit(long maxSize)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream skip(long n)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream takeWhile(IntPredicate predicate)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream dropWhile(IntPredicate predicate)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream sorted()",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream distinct()",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEach(IntConsumer action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEachOrdered(IntConsumer action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int sum()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalInt min()",
    "returnType" : "OptionalInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalInt max()",
    "returnType" : "OptionalInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long count()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalDouble average()",
    "returnType" : "OptionalDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntSummaryStatistics summaryStatistics()",
    "returnType" : "IntSummaryStatistics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int reduce(int identity, IntBinaryOperator op)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalInt reduce(IntBinaryOperator op)",
    "returnType" : "OptionalInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final R collect(Supplier<R> supplier, ObjIntConsumer<R> accumulator, BiConsumer<R, R> combiner)",
    "returnType" : "R",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean anyMatch(IntPredicate predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean allMatch(IntPredicate predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean noneMatch(IntPredicate predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalInt findFirst()",
    "returnType" : "OptionalInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalInt findAny()",
    "returnType" : "OptionalInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int[] toArray()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static IntConsumer adapt(Sink<Integer> sink)", "private static Spliterator.OfInt adapt(Spliterator<Integer> s)", "public final StreamShape getOutputShape()", "public final Node<Integer> evaluateToNode(PipelineHelper<Integer> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<Integer[]> generator)", "public final Spliterator<Integer> wrap(PipelineHelper<Integer> ph, Supplier<Spliterator<P_IN>> supplier, boolean isParallel)", "public final Spliterator.OfInt lazySpliterator(Supplier<? extends Spliterator<Integer>> supplier)", "public final boolean forEachWithCancel(Spliterator<Integer> spliterator, Sink<Integer> sink)", "public final Node.Builder<Integer> makeNodeBuilder(long exactSizeIfKnown, IntFunction<Integer[]> generator)", "private Stream<U> mapToObj(IntFunction<? extends U> mapper, int opFlags)", "public final PrimitiveIterator.OfInt iterator()", "public final Spliterator.OfInt spliterator()", "public final LongStream asLongStream()", "public final DoubleStream asDoubleStream()", "public final Stream<Integer> boxed()", "public final IntStream map(IntUnaryOperator mapper)", "public final Stream<U> mapToObj(IntFunction<? extends U> mapper)", "public final LongStream mapToLong(IntToLongFunction mapper)", "public final DoubleStream mapToDouble(IntToDoubleFunction mapper)", "public final IntStream flatMap(IntFunction<? extends IntStream> mapper)", "public final IntStream mapMulti(IntMapMultiConsumer mapper)", "public IntStream unordered()", "public final IntStream filter(IntPredicate predicate)", "public final IntStream peek(IntConsumer action)", "public final IntStream limit(long maxSize)", "public final IntStream skip(long n)", "public final IntStream takeWhile(IntPredicate predicate)", "public final IntStream dropWhile(IntPredicate predicate)", "public final IntStream sorted()", "public final IntStream distinct()", "public void forEach(IntConsumer action)", "public void forEachOrdered(IntConsumer action)", "public final int sum()", "public final OptionalInt min()", "public final OptionalInt max()", "public final long count()", "public final OptionalDouble average()", "public final IntSummaryStatistics summaryStatistics()", "public final int reduce(int identity, IntBinaryOperator op)", "public final OptionalInt reduce(IntBinaryOperator op)", "public final R collect(Supplier<R> supplier, ObjIntConsumer<R> accumulator, BiConsumer<R, R> combiner)", "public final boolean anyMatch(IntPredicate predicate)", "public final boolean allMatch(IntPredicate predicate)", "public final boolean noneMatch(IntPredicate predicate)", "public final OptionalInt findFirst()", "public final OptionalInt findAny()", "public final int[] toArray()" ],
  "variableNames" : [ ]
}