{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/SymbolTable.java",
  "packageName" : "android.icu.text",
  "className" : "SymbolTable",
  "comment" : "\n * An interface that defines both lookup protocol and parsing of\n * symbolic names.\n * \n * <p>This interface is used by UnicodeSet to resolve $Variable style\n * references that appear in set patterns.  RBBI and Transliteration\n * both independently implement this interface.\n *\n * <p>A symbol table maintains two kinds of mappings.  The first is\n * between symbolic names and their values.  For example, if the\n * variable with the name \"start\" is set to the value \"alpha\"\n * (perhaps, though not necessarily, through an expression such as\n * \"$start=alpha\"), then the call lookup(\"start\") will return the\n * char[] array ['a', 'l', 'p', 'h', 'a'].\n *\n * <p>The second kind of mapping is between character values and\n * UnicodeMatcher objects.  This is used by RuleBasedTransliterator,\n * which uses characters in the private use area to represent objects\n * such as UnicodeSets.  If U+E015 is mapped to the UnicodeSet [a-z],\n * then lookupMatcher(0xE015) will return the UnicodeSet [a-z].\n *\n * <p>Finally, a symbol table defines parsing behavior for symbolic\n * names.  All symbolic names start with the SYMBOL_REF character.\n * When a parser encounters this character, it calls parseReference()\n * with the position immediately following the SYMBOL_REF.  The symbol\n * table parses the name, if there is one, and returns it.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SYMBOL_REF",
    "type" : "char",
    "comment" : "\n     * The character preceding a symbol reference name.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " char[] lookup(String s)",
    "returnType" : "char[]",
    "comment" : "\n     * Lookup the characters associated with this string and return it.\n     * Return <tt>null</tt> if no such name exists.  The resultant\n     * array may have length zero.\n     * @param s the symbolic name to lookup\n     * @return a char array containing the name's value, or null if\n     * there is no mapping for s.\n     ",
    "links" : [ ]
  }, {
    "name" : " UnicodeMatcher lookupMatcher(int ch)",
    "returnType" : "UnicodeMatcher",
    "comment" : "\n     * Lookup the UnicodeMatcher associated with the given character, and\n     * return it.  Return <tt>null</tt> if not found.\n     * @param ch a 32-bit code point from 0 to 0x10FFFF inclusive.\n     * @return the UnicodeMatcher object represented by the given\n     * character, or null if there is no mapping for ch.\n     ",
    "links" : [ ]
  }, {
    "name" : " String parseReference(String text, ParsePosition pos, int limit)",
    "returnType" : "String",
    "comment" : "\n     * Parse a symbol reference name from the given string, starting\n     * at the given position.  If no valid symbol reference name is\n     * found, return null and leave pos unchanged.  That is, if the\n     * character at pos cannot start a name, or if pos is at or after\n     * text.length(), then return null.  This indicates an isolated\n     * SYMBOL_REF character.\n     * @param text the text to parse for the name\n     * @param pos on entry, the index of the first character to parse.\n     * This is the character following the SYMBOL_REF character.  On\n     * exit, the index after the last parsed character.  If the parse\n     * failed, pos is unchanged on exit.\n     * @param limit the index after the last character to be parsed.\n     * @return the parsed name, or null if there is no valid symbolic\n     * name at the given position.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " char[] lookup(String s)", " UnicodeMatcher lookupMatcher(int ch)", " String parseReference(String text, ParsePosition pos, int limit)" ],
  "variableNames" : [ "SYMBOL_REF" ]
}