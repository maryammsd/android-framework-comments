{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/params/OutputConfiguration.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "OutputConfiguration",
  "comment" : "\n * A class for describing camera output, which contains a {@link Surface} and its specific\n * configuration for creating capture session.\n *\n * <p>There are several ways to instantiate, modify and use OutputConfigurations. The most common\n * and recommended usage patterns are summarized in the following list:</p>\n *<ul>\n * <li>Passing a {@link Surface} to the constructor and using the OutputConfiguration instance as\n * argument to {@link CameraDevice#createCaptureSessionByOutputConfigurations}. This is the most\n * frequent usage and clients should consider it first before other more complicated alternatives.\n * </li>\n *\n * <li>Passing only a surface source class as an argument to the constructor. This is usually\n * followed by a call to create a capture session\n * (see {@link CameraDevice#createCaptureSessionByOutputConfigurations} and a {@link Surface} add\n * call {@link #addSurface} with a valid {@link Surface}. The sequence completes with\n * {@link CameraCaptureSession#finalizeOutputConfigurations}. This is the deferred usage case which\n * aims to enhance performance by allowing the resource-intensive capture session create call to\n * execute in parallel with any {@link Surface} initialization, such as waiting for a\n * {@link android.view.SurfaceView} to be ready as part of the UI initialization.</li>\n *\n * <li>The third and most complex usage pattern involves surface sharing. Once instantiated an\n * OutputConfiguration can be enabled for surface sharing via {@link #enableSurfaceSharing}. This\n * must be done before creating a new capture session and enables calls to\n * {@link CameraCaptureSession#updateOutputConfiguration}. An OutputConfiguration with enabled\n * surface sharing can be modified via {@link #addSurface} or {@link #removeSurface}. The updates\n * to this OutputConfiguration will only come into effect after\n * {@link CameraCaptureSession#updateOutputConfiguration} returns without throwing exceptions.\n * Such updates can be done as long as the session is active. Clients should always consider the\n * additional requirements and limitations placed on the output surfaces (for more details see\n * {@link #enableSurfaceSharing}, {@link #addSurface}, {@link #removeSurface},\n * {@link CameraCaptureSession#updateOutputConfiguration}). A trade-off exists between additional\n * complexity and flexibility. If exercised correctly surface sharing can switch between different\n * output surfaces without interrupting any ongoing repeating capture requests. This saves time and\n * can significantly improve the user experience.</li>\n *\n * <li>Surface sharing can be used in combination with deferred surfaces. The rules from both cases\n * are combined and clients must call {@link #enableSurfaceSharing} before creating a capture\n * session. Attach and/or remove output surfaces via  {@link #addSurface}/{@link #removeSurface} and\n * finalize the configuration using {@link CameraCaptureSession#finalizeOutputConfigurations}.\n * {@link CameraCaptureSession#updateOutputConfiguration} can be called after the configuration\n * finalize method returns without exceptions.</li>\n *\n * </ul>\n *\n * <p> As of {@link android.os.Build.VERSION_CODES#P Android P}, all formats except\n * {@link ImageFormat#JPEG} and {@link ImageFormat#RAW_PRIVATE} can be used for sharing, subject to\n * device support. On prior API levels, only {@link ImageFormat#PRIVATE} format may be used.</p>\n *\n * @see CameraDevice#createCaptureSessionByOutputConfigurations\n *\n ",
  "variables" : [ {
    "name" : "ROTATION_0",
    "type" : "int",
    "comment" : "\n     * Rotation constant: 0 degree rotation (no rotation)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_90",
    "type" : "int",
    "comment" : "\n     * Rotation constant: 90 degree counterclockwise rotation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_180",
    "type" : "int",
    "comment" : "\n     * Rotation constant: 180 degree counterclockwise rotation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_270",
    "type" : "int",
    "comment" : "\n     * Rotation constant: 270 degree counterclockwise rotation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SURFACE_GROUP_ID_NONE",
    "type" : "int",
    "comment" : "\n     * Invalid surface group ID.\n     *\n     *<p>An {@link OutputConfiguration} with this value indicates that the included surface\n     *doesn't belong to any surface group.</p>\n     ",
    "links" : [ "OutputConfiguration" ]
  }, {
    "name" : "SURFACE_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown surface source type.\n     ",
    "links" : [ ]
  }, {
    "name" : "SURFACE_TYPE_SURFACE_VIEW",
    "type" : "int",
    "comment" : "\n     * The surface is obtained from {@link android.view.SurfaceView}.\n     ",
    "links" : [ "android.view.SurfaceView" ]
  }, {
    "name" : "SURFACE_TYPE_SURFACE_TEXTURE",
    "type" : "int",
    "comment" : "\n     * The surface is obtained from {@link android.graphics.SurfaceTexture}.\n     ",
    "links" : [ "android.graphics.SurfaceTexture" ]
  }, {
    "name" : "MAX_SURFACES_COUNT",
    "type" : "int",
    "comment" : "\n     * Maximum number of surfaces supported by one {@link OutputConfiguration}.\n     *\n     * <p>The combined number of surfaces added by the constructor and\n     * {@link OutputConfiguration#addSurface} should not exceed this value.</p>\n     *\n     ",
    "links" : [ "OutputConfiguration", "OutputConfiguration#addSurface" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<OutputConfiguration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaces",
    "type" : "ArrayList<Surface>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRotation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceGroupId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceType",
    "type" : "int",
    "comment" : " Surface source type, this is only used by the deferred surface configuration objects.",
    "links" : [ ]
  }, {
    "name" : "mConfiguredSize",
    "type" : "Size",
    "comment" : " The size, format, and dataspace of the surface when OutputConfiguration is created.",
    "links" : [ ]
  }, {
    "name" : "mConfiguredFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguredDataspace",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguredGenerationId",
    "type" : "int",
    "comment" : " Surface generation ID to distinguish changes to Surface native internals",
    "links" : [ ]
  }, {
    "name" : "mIsDeferredConfig",
    "type" : "boolean",
    "comment" : " Flag indicating if this config has deferred surface.",
    "links" : [ ]
  }, {
    "name" : "mIsShared",
    "type" : "boolean",
    "comment" : " Flag indicating if this config has shared surfaces",
    "links" : [ ]
  }, {
    "name" : "mPhysicalCameraId",
    "type" : "String",
    "comment" : " The physical camera id that this output configuration is for.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void enableSurfaceSharing()",
    "returnType" : "void",
    "comment" : "\n     * Enable multiple surfaces sharing the same OutputConfiguration\n     *\n     * <p>For advanced use cases, a camera application may require more streams than the combination\n     * guaranteed by {@link CameraDevice#createCaptureSession}. In this case, more than one\n     * compatible surface can be attached to an OutputConfiguration so that they map to one\n     * camera stream, and the outputs share memory buffers when possible. Due to buffer sharing\n     * clients should be careful when adding surface outputs that modify their input data. If such\n     * case exists, camera clients should have an additional mechanism to synchronize read and write\n     * access between individual consumers.</p>\n     *\n     * <p>Two surfaces are compatible in the below cases:</p>\n     *\n     * <li> Surfaces with the same size, format, dataSpace, and Surface source class. In this case,\n     * {@link CameraDevice#createCaptureSessionByOutputConfigurations} is guaranteed to succeed.\n     *\n     * <li> Surfaces with the same size, format, and dataSpace, but different Surface source classes\n     * that are generally not compatible. However, on some devices, the underlying camera device is\n     * able to use the same buffer layout for both surfaces. The only way to discover if this is the\n     * case is to create a capture session with that output configuration. For example, if the\n     * camera device uses the same private buffer format between a SurfaceView/SurfaceTexture and a\n     * MediaRecorder/MediaCodec, {@link CameraDevice#createCaptureSessionByOutputConfigurations}\n     * will succeed. Otherwise, it fails with {@link\n     * CameraCaptureSession.StateCallback#onConfigureFailed}.\n     * </ol>\n     *\n     * <p>To enable surface sharing, this function must be called before {@link\n     * CameraDevice#createCaptureSessionByOutputConfigurations} or {@link\n     * CameraDevice#createReprocessableCaptureSessionByConfigurations}. Calling this function after\n     * {@link CameraDevice#createCaptureSessionByOutputConfigurations} has no effect.</p>\n     *\n     * <p>Up to {@link #getMaxSharedSurfaceCount} surfaces can be shared for an OutputConfiguration.\n     * The supported surfaces for sharing must be of type SurfaceTexture, SurfaceView,\n     * MediaRecorder, MediaCodec, or implementation defined ImageReader.</p>\n     ",
    "links" : [ "CameraDevice#createCaptureSession", "CameraDevice#createCaptureSessionByOutputConfigurations", "CameraDevice#createCaptureSessionByOutputConfigurations", "CameraDevice#createCaptureSessionByOutputConfigurations", "#getMaxSharedSurfaceCount" ]
  }, {
    "name" : "public void setPhysicalCameraId(@Nullable String physicalCameraId)",
    "returnType" : "void",
    "comment" : "\n     * Set the id of the physical camera for this OutputConfiguration\n     *\n     * <p>In the case one logical camera is made up of multiple physical cameras, it could be\n     * desirable for the camera application to request streams from individual physical cameras.\n     * This call achieves it by mapping the OutputConfiguration to the physical camera id.</p>\n     *\n     * <p>The valid physical camera ids can be queried by {@link\n     * android.hardware.camera2.CameraCharacteristics#getPhysicalCameraIds}.\n     * </p>\n     *\n     * <p>Passing in a null physicalCameraId means that the OutputConfiguration is for a logical\n     * stream.</p>\n     *\n     * <p>This function must be called before {@link\n     * CameraDevice#createCaptureSessionByOutputConfigurations} or {@link\n     * CameraDevice#createReprocessableCaptureSessionByConfigurations}. Calling this function\n     * after {@link CameraDevice#createCaptureSessionByOutputConfigurations} or {@link\n     * CameraDevice#createReprocessableCaptureSessionByConfigurations} has no effect.</p>\n     *\n     * <p>The surface belonging to a physical camera OutputConfiguration must not be used as input\n     * or output of a reprocessing request. </p>\n     ",
    "links" : [ "CameraDevice#createCaptureSessionByOutputConfigurations" ]
  }, {
    "name" : "public boolean isForPhysicalCamera()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this configuration is for a physical camera.\n     *\n     * <p>This returns true if the output configuration was for a physical camera making up a\n     * logical multi camera via {@link OutputConfiguration#setPhysicalCameraId}.</p>\n     * @hide\n     ",
    "links" : [ "OutputConfiguration#setPhysicalCameraId" ]
  }, {
    "name" : "public boolean isDeferredConfiguration()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this configuration has deferred configuration.\n     *\n     * <p>This will return true if the output configuration was constructed with surface deferred by\n     * {@link OutputConfiguration#OutputConfiguration(Size, Class)}. It will return true even after\n     * the deferred surface is added later by {@link OutputConfiguration#addSurface}.</p>\n     *\n     * @return true if this configuration has deferred surface.\n     * @hide\n     ",
    "links" : [ "OutputConfiguration#OutputConfiguration", "OutputConfiguration#addSurface" ]
  }, {
    "name" : "public void addSurface(@NonNull Surface surface)",
    "returnType" : "void",
    "comment" : "\n     * Add a surface to this OutputConfiguration.\n     *\n     * <p> This function can be called before or after {@link\n     * CameraDevice#createCaptureSessionByOutputConfigurations}. If it's called after,\n     * the application must finalize the capture session with\n     * {@link CameraCaptureSession#finalizeOutputConfigurations}. It is possible to call this method\n     * after the output configurations have been finalized only in cases of enabled surface sharing\n     * see {@link #enableSurfaceSharing}. The modified output configuration must be updated with\n     * {@link CameraCaptureSession#updateOutputConfiguration}.</p>\n     *\n     * <p> If the OutputConfiguration was constructed with a deferred surface by {@link\n     * OutputConfiguration#OutputConfiguration(Size, Class)}, the added surface must be obtained\n     * from {@link android.view.SurfaceView} by calling {@link android.view.SurfaceHolder#getSurface},\n     * or from {@link android.graphics.SurfaceTexture} via\n     * {@link android.view.Surface#Surface(android.graphics.SurfaceTexture)}).</p>\n     *\n     * <p> If the OutputConfiguration was constructed by other constructors, the added\n     * surface must be compatible with the existing surface. See {@link #enableSurfaceSharing} for\n     * details of compatible surfaces.</p>\n     *\n     * <p> If the OutputConfiguration already contains a Surface, {@link #enableSurfaceSharing} must\n     * be called before calling this function to add a new Surface.</p>\n     *\n     * @param surface The surface to be added.\n     * @throws IllegalArgumentException if the Surface is invalid, the Surface's\n     *         dataspace/format doesn't match, or adding the Surface would exceed number of\n     *         shared surfaces supported.\n     * @throws IllegalStateException if the Surface was already added to this OutputConfiguration,\n     *         or if the OutputConfiguration is not shared and it already has a surface associated\n     *         with it.\n     ",
    "links" : [ "CameraCaptureSession#finalizeOutputConfigurations", "#enableSurfaceSharing", "CameraCaptureSession#updateOutputConfiguration", "android.view.SurfaceView", "android.view.SurfaceHolder#getSurface", "android.graphics.SurfaceTexture", "android.view.Surface#Surface", "#enableSurfaceSharing", "#enableSurfaceSharing" ]
  }, {
    "name" : "public void removeSurface(@NonNull Surface surface)",
    "returnType" : "void",
    "comment" : "\n     * Remove a surface from this OutputConfiguration.\n     *\n     * <p> Surfaces added via calls to {@link #addSurface} can also be removed from the\n     *  OutputConfiguration. The only notable exception is the surface associated with\n     *  the OutputConfigration see {@link #getSurface} which was passed as part of the constructor\n     *  or was added first in the deferred case\n     *  {@link OutputConfiguration#OutputConfiguration(Size, Class)}.</p>\n     *\n     * @param surface The surface to be removed.\n     *\n     * @throws IllegalArgumentException If the surface is associated with this OutputConfiguration\n     *                                  (see {@link #getSurface}) or the surface didn't get added\n     *                                  with {@link #addSurface}.\n     ",
    "links" : [ "#addSurface", "#getSurface", "OutputConfiguration#OutputConfiguration", "#getSurface", "#addSurface" ]
  }, {
    "name" : "public int getMaxSharedSurfaceCount()",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum supported shared {@link Surface} count.\n     *\n     * @return the maximum number of surfaces that can be added per each OutputConfiguration.\n     *\n     * @see #enableSurfaceSharing\n     ",
    "links" : [ "Surface" ]
  }, {
    "name" : "public Surface getSurface()",
    "returnType" : "Surface",
    "comment" : "\n     * Get the {@link Surface} associated with this {@link OutputConfiguration}.\n     *\n     * If more than one surface is associated with this {@link OutputConfiguration}, return the\n     * first one as specified in the constructor or {@link OutputConfiguration#addSurface}.\n     ",
    "links" : [ "Surface", "OutputConfiguration", "OutputConfiguration", "OutputConfiguration#addSurface" ]
  }, {
    "name" : "public List<Surface> getSurfaces()",
    "returnType" : "List<Surface>",
    "comment" : "\n     * Get the immutable list of surfaces associated with this {@link OutputConfiguration}.\n     *\n     * @return the list of surfaces associated with this {@link OutputConfiguration} as specified in\n     * the constructor and {@link OutputConfiguration#addSurface}. The list should not be modified.\n     ",
    "links" : [ "OutputConfiguration", "OutputConfiguration", "OutputConfiguration#addSurface" ]
  }, {
    "name" : "public int getRotation()",
    "returnType" : "int",
    "comment" : "\n     * Get the rotation associated with this {@link OutputConfiguration}.\n     *\n     * @return the rotation associated with this {@link OutputConfiguration}.\n     *         Value will be one of ROTATION_[0, 90, 180, 270]\n     *\n     * @hide\n     ",
    "links" : [ "OutputConfiguration", "OutputConfiguration" ]
  }, {
    "name" : "public int getSurfaceGroupId()",
    "returnType" : "int",
    "comment" : "\n     * Get the surface group ID associated with this {@link OutputConfiguration}.\n     *\n     * @return the surface group ID associated with this {@link OutputConfiguration}.\n     *         The default value is {@value #SURFACE_GROUP_ID_NONE}.\n     ",
    "links" : [ "OutputConfiguration", "OutputConfiguration" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this {@link OutputConfiguration} is equal to another {@link OutputConfiguration}.\n     *\n     * <p>Two output configurations are only equal if and only if the underlying surfaces, surface\n     * properties (width, height, format, dataspace) when the output configurations are created,\n     * and all other configuration parameters are equal. </p>\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "OutputConfiguration", "OutputConfiguration" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "ROTATION_0", "ROTATION_90", "ROTATION_180", "ROTATION_270", "SURFACE_GROUP_ID_NONE", "SURFACE_TYPE_UNKNOWN", "SURFACE_TYPE_SURFACE_VIEW", "SURFACE_TYPE_SURFACE_TEXTURE", "MAX_SURFACES_COUNT", "CREATOR", "TAG", "mSurfaces", "mRotation", "mSurfaceGroupId", "mSurfaceType", "mConfiguredSize", "mConfiguredFormat", "mConfiguredDataspace", "mConfiguredGenerationId", "mIsDeferredConfig", "mIsShared", "mPhysicalCameraId" ],
  "methodNames" : [ "public void enableSurfaceSharing()", "public void setPhysicalCameraId(@Nullable String physicalCameraId)", "public boolean isForPhysicalCamera()", "public boolean isDeferredConfiguration()", "public void addSurface(@NonNull Surface surface)", "public void removeSurface(@NonNull Surface surface)", "public int getMaxSharedSurfaceCount()", "public Surface getSurface()", "public List<Surface> getSurfaces()", "public int getRotation()", "public int getSurfaceGroupId()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object obj)", "public int hashCode()" ]
}