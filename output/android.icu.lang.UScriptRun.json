{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/lang/UScriptRun.java",
  "packageName" : "android.icu.lang",
  "className" : "UScriptRun",
  "comment" : "\n * <code>UScriptRun</code> is used to find runs of characters in\n * the same script, as defined in the <code>UScript</code> class.\n * It implements a simple iterator over an array of characters.\n * The iterator will assign <code>COMMON</code> and <code>INHERITED</code>\n * characters to the same script as the preceding characters. If the\n * COMMON and INHERITED characters are first, they will be assigned to\n * the same script as the following characters.\n *\n * The iterator will try to match paired punctuation. If it sees an\n * opening punctuation character, it will remember the script that\n * was assigned to that character, and assign the same script to the\n * matching closing punctuation.\n *\n * No attempt is made to combine related scripts into a single run. In\n * particular, Hiragana, Katakana, and Han characters will appear in separate\n * runs.\n\n * Here is an example of how to iterate over script runs:\n * <pre>\n * void printScriptRuns(char[] text)\n * {\n *     UScriptRun scriptRun = new UScriptRun(text);\n *\n *     while (scriptRun.next()) {\n *         int start  = scriptRun.getScriptStart();\n *         int limit  = scriptRun.getScriptLimit();\n *         int script = scriptRun.getScriptCode();\n *\n *         System.out.println(\"Script \\\"\" + UScript.getName(script) + \"\\\" from \" +\n *                            start + \" to \" + limit + \".\");\n *     }\n *  }\n * </pre>\n *\n * @deprecated This API is ICU internal only.\n * @hide Only a subset of ICU is exposed in Android\n * @hide draft / provisional / internal are hidden on Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "emptyCharArray",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "text",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "textIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "textStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "textLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "scriptStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "scriptLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "scriptCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PAREN_STACK_DEPTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parenStack",
    "type" : "ParenStackEntry[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parenSP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pushCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fixupCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pairedChars",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pairedCharPower",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pairedCharExtra",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void reset()",
    "returnType" : "void",
    "comment" : "\n     * Reset the iterator to the start of the text.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void reset(int start, int count) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Reset the iterator to iterate over the given range of the text. Throws\n     * IllegalArgumentException if the range is outside of the bounds of the\n     * character array.\n     *\n     * @param start the index of the new first character over which to iterate\n     * @param count the new number of characters over which to iterate.\n     * @exception IllegalArgumentException If invalid arguments are passed.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void reset(char[] chars, int start, int count)",
    "returnType" : "void",
    "comment" : "\n     * Reset the iterator to iterate over <code>count</code> characters\n     * in <code>chars</code> starting at <code>start</code>. This allows\n     * clients to reuse an iterator.\n     *\n     * @param chars the new array of characters over which to iterate.\n     * @param start the index of the first character over which to iterate.\n     * @param count the number of characters over which to iterate.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void reset(char[] chars)",
    "returnType" : "void",
    "comment" : "\n     * Reset the iterator to iterate over the characters\n     * in <code>chars</code>. This allows clients to reuse an iterator.\n     *\n     * @param chars the new array of characters over which to iterate.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void reset(String str, int start, int count)",
    "returnType" : "void",
    "comment" : "\n     * Reset the iterator to iterate over <code>count</code> characters\n     * in <code>text</code> starting at <code>start</code>. This allows\n     * clients to reuse an iterator.\n     *\n     * @param str the new string of characters over which to iterate.\n     * @param start the index of the first character over which to iterate.\n     * @param count the nuber of characters over which to iterate.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void reset(String str)",
    "returnType" : "void",
    "comment" : "\n     * Reset the iterator to iterate over the characters\n     * in <code>text</code>. This allows clients to reuse an iterator.\n     *\n     * @param str the new string of characters over which to iterate.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getScriptStart()",
    "returnType" : "int",
    "comment" : "\n     * Get the starting index of the current script run.\n     *\n     * @return the index of the first character in the current script run.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getScriptLimit()",
    "returnType" : "int",
    "comment" : "\n     * Get the index of the first character after the current script run.\n     *\n     * @return the index of the first character after the current script run.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getScriptCode()",
    "returnType" : "int",
    "comment" : "\n     * Get the script code for the script of the current script run.\n     *\n     * @return the script code for the script of the current script run.\n     * @see android.icu.lang.UScript\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean next()",
    "returnType" : "boolean",
    "comment" : "\n     * Find the next script run. Returns <code>false</code> if there\n     * isn't another run, returns <code>true</code> if there is.\n     *\n     * @return <code>false</code> if there isn't another run, <code>true</code> if there is.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean sameScript(int scriptOne, int scriptTwo)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare two script codes to see if they are in the same script. If one script is\n     * a strong script, and the other is INHERITED or COMMON, it will compare equal.\n     *\n     * @param scriptOne one of the script codes.\n     * @param scriptTwo the other script code.\n     * @return <code>true</code> if the two scripts are the same.\n     * @see android.icu.lang.UScript\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final int mod(int sp)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int inc(int sp, int count)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int inc(int sp)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int dec(int sp, int count)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int dec(int sp)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int limitInc(int count)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final boolean stackIsEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final boolean stackIsNotEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void push(int pairIndex, int scrptCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void pop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final ParenStackEntry top()",
    "returnType" : "ParenStackEntry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void syncFixup()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void fixup(int scrptCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final byte highBit(int n)",
    "returnType" : "byte",
    "comment" : "\n     * Find the highest bit that's set in a word. Uses a binary search through\n     * the bits.\n     *\n     * @param n the word in which to find the highest bit that's set.\n     * @return the bit number (counting from the low order bit) of the highest bit.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getPairIndex(int ch)",
    "returnType" : "int",
    "comment" : "\n     * Search the pairedChars array for the given character.\n     *\n     * @param ch the character for which to search.\n     * @return the index of the character in the table, or -1 if it's not there.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final void reset()", "public final void reset(int start, int count) throws IllegalArgumentException", "public final void reset(char[] chars, int start, int count)", "public final void reset(char[] chars)", "public final void reset(String str, int start, int count)", "public final void reset(String str)", "public final int getScriptStart()", "public final int getScriptLimit()", "public final int getScriptCode()", "public final boolean next()", "private static boolean sameScript(int scriptOne, int scriptTwo)", "private static final int mod(int sp)", "private static final int inc(int sp, int count)", "private static final int inc(int sp)", "private static final int dec(int sp, int count)", "private static final int dec(int sp)", "private static final int limitInc(int count)", "private final boolean stackIsEmpty()", "private final boolean stackIsNotEmpty()", "private final void push(int pairIndex, int scrptCode)", "private final void pop()", "private final ParenStackEntry top()", "private final void syncFixup()", "private final void fixup(int scrptCode)", "private static final byte highBit(int n)", "private static int getPairIndex(int ch)" ],
  "variableNames" : [ "emptyCharArray", "text", "textIndex", "textStart", "textLimit", "scriptStart", "scriptLimit", "scriptCode", "PAREN_STACK_DEPTH", "parenStack", "parenSP", "pushCount", "fixupCount", "pairedChars", "pairedCharPower", "pairedCharExtra" ]
}