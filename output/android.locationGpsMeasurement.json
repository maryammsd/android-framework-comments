{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/location/GpsMeasurement.java",
  "packageName" : "android.location",
  "className" : "GpsMeasurement",
  "comment" : "\n * A class representing a GPS satellite measurement, containing raw and computed information.\n *\n * @deprecated use {@link GnssMeasurement} instead.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrn",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeOffsetInNs",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReceivedGpsTowInNs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReceivedGpsTowUncertaintyInNs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCn0InDbHz",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPseudorangeRateInMetersPerSec",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPseudorangeRateUncertaintyInMetersPerSec",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccumulatedDeltaRangeState",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccumulatedDeltaRangeInMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccumulatedDeltaRangeUncertaintyInMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPseudorangeInMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPseudorangeUncertaintyInMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodePhaseInChips",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodePhaseUncertaintyInChips",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierFrequencyInHz",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierCycles",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierPhase",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierPhaseUncertainty",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLossOfLock",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBitNumber",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeFromLastBitInMs",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDopplerShiftInHz",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDopplerShiftUncertaintyInHz",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMultipathIndicator",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnrInDb",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElevationInDeg",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElevationUncertaintyInDeg",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAzimuthInDeg",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAzimuthUncertaintyInDeg",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsedInFix",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_NO_FLAGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_SNR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_ELEVATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_ELEVATION_UNCERTAINTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_AZIMUTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_AZIMUTH_UNCERTAINTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_PSEUDORANGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_PSEUDORANGE_UNCERTAINTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_CODE_PHASE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_CODE_PHASE_UNCERTAINTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_CARRIER_FREQUENCY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_CARRIER_CYCLES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_CARRIER_PHASE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_CARRIER_PHASE_UNCERTAINTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_BIT_NUMBER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_TIME_FROM_LAST_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_DOPPLER_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_DOPPLER_SHIFT_UNCERTAINTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_USED_IN_FIX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GPS_MEASUREMENT_HAS_UNCORRECTED_PSEUDORANGE_RATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOSS_OF_LOCK_UNKNOWN",
    "type" : "byte",
    "comment" : "\n     * The indicator is not available or it is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOSS_OF_LOCK_OK",
    "type" : "byte",
    "comment" : "\n     * The measurement does not present any indication of 'loss of lock'.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOSS_OF_LOCK_CYCLE_SLIP",
    "type" : "byte",
    "comment" : "\n     * 'Loss of lock' detected between the previous and current observation: cycle slip possible.\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTIPATH_INDICATOR_UNKNOWN",
    "type" : "byte",
    "comment" : "\n     * The indicator is not available or it is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTIPATH_INDICATOR_DETECTED",
    "type" : "byte",
    "comment" : "\n     * The measurement has been indicated to use multi-path.\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTIPATH_INDICATOR_NOT_USED",
    "type" : "byte",
    "comment" : "\n     * The measurement has been indicated not tu use multi-path.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_UNKNOWN",
    "type" : "short",
    "comment" : "\n     * The state of GPS receiver the measurement is invalid or unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_CODE_LOCK",
    "type" : "short",
    "comment" : "\n     * The state of the GPS receiver is ranging code lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_BIT_SYNC",
    "type" : "short",
    "comment" : "\n     * The state of the GPS receiver is in bit sync.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_SUBFRAME_SYNC",
    "type" : "short",
    "comment" : "\n     *The state of the GPS receiver is in sub-frame sync.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_TOW_DECODED",
    "type" : "short",
    "comment" : "\n     * The state of the GPS receiver has TOW decoded.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_MSEC_AMBIGUOUS",
    "type" : "short",
    "comment" : "\n     * The state of the GPS receiver contains millisecond ambiguity.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_ALL",
    "type" : "short",
    "comment" : "\n     * All the GPS receiver state flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "ADR_STATE_UNKNOWN",
    "type" : "short",
    "comment" : "\n     * The state of the 'Accumulated Delta Range' is invalid or unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "ADR_STATE_VALID",
    "type" : "short",
    "comment" : "\n     * The state of the 'Accumulated Delta Range' is valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "ADR_STATE_RESET",
    "type" : "short",
    "comment" : "\n     * The state of the 'Accumulated Delta Range' has detected a reset.\n     ",
    "links" : [ ]
  }, {
    "name" : "ADR_STATE_CYCLE_SLIP",
    "type" : "short",
    "comment" : "\n     * The state of the 'Accumulated Delta Range' has a cycle slip detected.\n     ",
    "links" : [ ]
  }, {
    "name" : "ADR_ALL",
    "type" : "short",
    "comment" : "\n     * All the 'Accumulated Delta Range' flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<GpsMeasurement>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void set(GpsMeasurement measurement)",
    "returnType" : "void",
    "comment" : "\n     * Sets all contents to the values stored in the provided object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets all the contents to its original state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getPrn()",
    "returnType" : "byte",
    "comment" : "\n     * Gets the Pseudo-random number (PRN).\n     * Range: [1, 32]\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPrn(byte value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Pseud-random number (PRN).\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getTimeOffsetInNs()",
    "returnType" : "double",
    "comment" : "\n     * Gets the time offset at which the measurement was taken in nanoseconds.\n     * The reference receiver's time is specified by {@link GpsClock#getTimeInNs()} and should be\n     * interpreted in the same way as indicated by {@link GpsClock#getType()}.\n     *\n     * The sign of this value is given by the following equation:\n     *      measurement time = time_ns + time_offset_ns\n     *\n     * The value provides an individual time-stamp for the measurement, and allows sub-nanosecond\n     * accuracy.\n     ",
    "links" : [ "GpsClock#getTimeInNs", "GpsClock#getType" ]
  }, {
    "name" : "public void setTimeOffsetInNs(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time offset at which the measurement was taken in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getState()",
    "returnType" : "short",
    "comment" : "\n     * Gets per-satellite sync state.\n     * It represents the current sync state for the associated satellite.\n     *\n     * This value helps interpret {@link #getReceivedGpsTowInNs()}.\n     ",
    "links" : [ "#getReceivedGpsTowInNs" ]
  }, {
    "name" : "public void setState(short value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the sync state.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getStateString()",
    "returnType" : "String",
    "comment" : "\n     * Gets a string representation of the 'sync state'.\n     * For internal and logging use only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getReceivedGpsTowInNs()",
    "returnType" : "long",
    "comment" : "\n     * Gets the received GPS Time-of-Week at the measurement time, in nanoseconds.\n     * The value is relative to the beginning of the current GPS week.\n     *\n     * Given {@link #getState()} of the GPS receiver, the range of this field can be:\n     *      Searching           : [ 0           ]   : {@link #STATE_UNKNOWN} is set\n     *      Ranging code lock   : [ 0    1 ms   ]   : {@link #STATE_CODE_LOCK} is set\n     *      Bit sync            : [ 0   20 ms   ]   : {@link #STATE_BIT_SYNC} is set\n     *      Subframe sync       : [ 0    6 ms   ]   : {@link #STATE_SUBFRAME_SYNC} is set\n     *      TOW decoded         : [ 0    1 week ]   : {@link #STATE_TOW_DECODED} is set\n     ",
    "links" : [ "#getState", "#STATE_UNKNOWN", "#STATE_CODE_LOCK", "#STATE_BIT_SYNC", "#STATE_SUBFRAME_SYNC", "#STATE_TOW_DECODED" ]
  }, {
    "name" : "public void setReceivedGpsTowInNs(long value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the received GPS time-of-week in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getReceivedGpsTowUncertaintyInNs()",
    "returnType" : "long",
    "comment" : "\n     * Gets the received GPS time-of-week's uncertainty (1-Sigma) in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReceivedGpsTowUncertaintyInNs(long value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the received GPS time-of-week's uncertainty (1-Sigma) in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getCn0InDbHz()",
    "returnType" : "double",
    "comment" : "\n     * Gets the Carrier-to-noise density in dB-Hz.\n     * Range: [0, 63].\n     *\n     * The value contains the measured C/N0 for the signal at the antenna input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCn0InDbHz(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the carrier-to-noise density in dB-Hz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getPseudorangeRateInMetersPerSec()",
    "returnType" : "double",
    "comment" : "\n     * Gets the Pseudorange rate at the timestamp in m/s.\n     * The reported value includes {@link #getPseudorangeRateUncertaintyInMetersPerSec()}.\n     *\n     * The correction of a given Pseudorange Rate value includes corrections from receiver and\n     * satellite clock frequency errors.\n     * {@link #isPseudorangeRateCorrected()} identifies the type of value reported.\n     *\n     * A positive 'uncorrected' value indicates that the SV is moving away from the receiver.\n     * The sign of the 'uncorrected' Pseudorange Rate and its relation to the sign of\n     * {@link #getDopplerShiftInHz()} is given by the equation:\n     *      pseudorange rate = -k * doppler shift   (where k is a constant)\n     ",
    "links" : [ "#getPseudorangeRateUncertaintyInMetersPerSec", "#isPseudorangeRateCorrected", "#getDopplerShiftInHz" ]
  }, {
    "name" : "public void setPseudorangeRateInMetersPerSec(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pseudorange rate at the timestamp in m/s.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPseudorangeRateCorrected()",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link #getPseudorangeRateInMetersPerSec()} for more details.\n     *\n     * @return {@code true} if {@link #getPseudorangeRateInMetersPerSec()} contains a corrected\n     *         value, {@code false} if it contains an uncorrected value.\n     ",
    "links" : [ "#getPseudorangeRateInMetersPerSec", "#getPseudorangeRateInMetersPerSec" ]
  }, {
    "name" : "public double getPseudorangeRateUncertaintyInMetersPerSec()",
    "returnType" : "double",
    "comment" : "\n     * Gets the pseudorange's rate uncertainty (1-Sigma) in m/s.\n     * The uncertainty is represented as an absolute (single sided) value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPseudorangeRateUncertaintyInMetersPerSec(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pseudorange's rate uncertainty (1-Sigma) in m/s.\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getAccumulatedDeltaRangeState()",
    "returnType" : "short",
    "comment" : "\n     * Gets 'Accumulated Delta Range' state.\n     * It indicates whether {@link #getAccumulatedDeltaRangeInMeters()} is reset or there is a\n     * cycle slip (indicating 'loss of lock').\n     ",
    "links" : [ "#getAccumulatedDeltaRangeInMeters" ]
  }, {
    "name" : "public void setAccumulatedDeltaRangeState(short value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the 'Accumulated Delta Range' state.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getAccumulatedDeltaRangeStateString()",
    "returnType" : "String",
    "comment" : "\n     * Gets a string representation of the 'Accumulated Delta Range state'.\n     * For internal and logging use only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getAccumulatedDeltaRangeInMeters()",
    "returnType" : "double",
    "comment" : "\n     * Gets the accumulated delta range since the last channel reset, in meters.\n     * The reported value includes {@link #getAccumulatedDeltaRangeUncertaintyInMeters()}.\n     *\n     * The availability of the value is represented by {@link #getAccumulatedDeltaRangeState()}.\n     *\n     * A positive value indicates that the SV is moving away from the receiver.\n     * The sign of {@link #getAccumulatedDeltaRangeInMeters()} and its relation to the sign of\n     * {@link #getCarrierPhase()} is given by the equation:\n     *          accumulated delta range = -k * carrier phase    (where k is a constant)\n     ",
    "links" : [ "#getAccumulatedDeltaRangeUncertaintyInMeters", "#getAccumulatedDeltaRangeState", "#getAccumulatedDeltaRangeInMeters", "#getCarrierPhase" ]
  }, {
    "name" : "public void setAccumulatedDeltaRangeInMeters(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the accumulated delta range in meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getAccumulatedDeltaRangeUncertaintyInMeters()",
    "returnType" : "double",
    "comment" : "\n     * Gets the accumulated delta range's uncertainty (1-Sigma) in meters.\n     * The uncertainty is represented as an absolute (single sided) value.\n     *\n     * The status of the value is represented by {@link #getAccumulatedDeltaRangeState()}.\n     ",
    "links" : [ "#getAccumulatedDeltaRangeState" ]
  }, {
    "name" : "public void setAccumulatedDeltaRangeUncertaintyInMeters(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the accumulated delta range's uncertainty (1-sigma) in meters.\n     *\n     * The status of the value is represented by {@link #getAccumulatedDeltaRangeState()}.\n     ",
    "links" : [ "#getAccumulatedDeltaRangeState" ]
  }, {
    "name" : "public boolean hasPseudorangeInMeters()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getPseudorangeInMeters()} is available, false otherwise.\n     ",
    "links" : [ "#getPseudorangeInMeters" ]
  }, {
    "name" : "public double getPseudorangeInMeters()",
    "returnType" : "double",
    "comment" : "\n     * Gets the best derived pseudorange by the chipset, in meters.\n     * The reported pseudorange includes {@link #getPseudorangeUncertaintyInMeters()}.\n     *\n     * The value is only available if {@link #hasPseudorangeInMeters()} is true.\n     ",
    "links" : [ "#getPseudorangeUncertaintyInMeters", "#hasPseudorangeInMeters" ]
  }, {
    "name" : "public void setPseudorangeInMeters(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Pseudo-range in meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetPseudorangeInMeters()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Pseudo-range in meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPseudorangeUncertaintyInMeters()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getPseudorangeUncertaintyInMeters()} is available, false otherwise.\n     ",
    "links" : [ "#getPseudorangeUncertaintyInMeters" ]
  }, {
    "name" : "public double getPseudorangeUncertaintyInMeters()",
    "returnType" : "double",
    "comment" : "\n     * Gets the pseudorange's uncertainty (1-Sigma) in meters.\n     * The value contains the 'pseudorange' and 'clock' uncertainty in it.\n     * The uncertainty is represented as an absolute (single sided) value.\n     *\n     * The value is only available if {@link #hasPseudorangeUncertaintyInMeters()} is true.\n     ",
    "links" : [ "#hasPseudorangeUncertaintyInMeters" ]
  }, {
    "name" : "public void setPseudorangeUncertaintyInMeters(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pseudo-range's uncertainty (1-Sigma) in meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetPseudorangeUncertaintyInMeters()",
    "returnType" : "void",
    "comment" : "\n     * Resets the pseudo-range's uncertainty (1-Sigma) in meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCodePhaseInChips()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getCodePhaseInChips()} is available, false otherwise.\n     ",
    "links" : [ "#getCodePhaseInChips" ]
  }, {
    "name" : "public double getCodePhaseInChips()",
    "returnType" : "double",
    "comment" : "\n     * Gets the fraction of the current C/A code cycle.\n     * Range: [0, 1023]\n     * The reference frequency is given by the value of {@link #getCarrierFrequencyInHz()}.\n     * The reported code-phase includes {@link #getCodePhaseUncertaintyInChips()}.\n     *\n     * The value is only available if {@link #hasCodePhaseInChips()} is true.\n     ",
    "links" : [ "#getCarrierFrequencyInHz", "#getCodePhaseUncertaintyInChips", "#hasCodePhaseInChips" ]
  }, {
    "name" : "public void setCodePhaseInChips(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Code-phase in chips.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetCodePhaseInChips()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Code-phase in chips.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCodePhaseUncertaintyInChips()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getCodePhaseUncertaintyInChips()} is available, false otherwise.\n     ",
    "links" : [ "#getCodePhaseUncertaintyInChips" ]
  }, {
    "name" : "public double getCodePhaseUncertaintyInChips()",
    "returnType" : "double",
    "comment" : "\n     * Gets the code-phase's uncertainty (1-Sigma) as a fraction of chips.\n     * The uncertainty is represented as an absolute (single sided) value.\n     *\n     * The value is only available if {@link #hasCodePhaseUncertaintyInChips()} is true.\n     ",
    "links" : [ "#hasCodePhaseUncertaintyInChips" ]
  }, {
    "name" : "public void setCodePhaseUncertaintyInChips(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Code-phase's uncertainty (1-Sigma) in fractions of chips.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetCodePhaseUncertaintyInChips()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Code-phase's uncertainty (1-Sigma) in fractions of chips.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCarrierFrequencyInHz()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getCarrierFrequencyInHz()} is available, false otherwise.\n     ",
    "links" : [ "#getCarrierFrequencyInHz" ]
  }, {
    "name" : "public float getCarrierFrequencyInHz()",
    "returnType" : "float",
    "comment" : "\n     * Gets the carrier frequency at which codes and messages are modulated, it can be L1 or L2.\n     * If the field is not set, the carrier frequency corresponds to L1.\n     *\n     * The value is only available if {@link #hasCarrierFrequencyInHz()} is true.\n     ",
    "links" : [ "#hasCarrierFrequencyInHz" ]
  }, {
    "name" : "public void setCarrierFrequencyInHz(float carrierFrequencyInHz)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Carrier frequency (L1 or L2) in Hz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetCarrierFrequencyInHz()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Carrier frequency (L1 or L2) in Hz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCarrierCycles()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getCarrierCycles()} is available, false otherwise.\n     ",
    "links" : [ "#getCarrierCycles" ]
  }, {
    "name" : "public long getCarrierCycles()",
    "returnType" : "long",
    "comment" : "\n     * The number of full carrier cycles between the satellite and the receiver.\n     * The reference frequency is given by the value of {@link #getCarrierFrequencyInHz()}.\n     *\n     * The value is only available if {@link #hasCarrierCycles()} is true.\n     ",
    "links" : [ "#getCarrierFrequencyInHz", "#hasCarrierCycles" ]
  }, {
    "name" : "public void setCarrierCycles(long value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the number of full carrier cycles between the satellite and the receiver.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetCarrierCycles()",
    "returnType" : "void",
    "comment" : "\n     * Resets the number of full carrier cycles between the satellite and the receiver.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCarrierPhase()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getCarrierPhase()} is available, false otherwise.\n     ",
    "links" : [ "#getCarrierPhase" ]
  }, {
    "name" : "public double getCarrierPhase()",
    "returnType" : "double",
    "comment" : "\n     * Gets the RF phase detected by the receiver.\n     * Range: [0.0, 1.0].\n     * This is usually the fractional part of the complete carrier phase measurement.\n     *\n     * The reference frequency is given by the value of {@link #getCarrierFrequencyInHz()}.\n     * The reported carrier-phase includes {@link #getCarrierPhaseUncertainty()}.\n     *\n     * The value is only available if {@link #hasCarrierPhase()} is true.\n     ",
    "links" : [ "#getCarrierFrequencyInHz", "#getCarrierPhaseUncertainty", "#hasCarrierPhase" ]
  }, {
    "name" : "public void setCarrierPhase(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the RF phase detected by the receiver.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetCarrierPhase()",
    "returnType" : "void",
    "comment" : "\n     * Resets the RF phase detected by the receiver.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCarrierPhaseUncertainty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getCarrierPhaseUncertainty()} is available, false otherwise.\n     ",
    "links" : [ "#getCarrierPhaseUncertainty" ]
  }, {
    "name" : "public double getCarrierPhaseUncertainty()",
    "returnType" : "double",
    "comment" : "\n     * Gets the carrier-phase's uncertainty (1-Sigma).\n     * The uncertainty is represented as an absolute (single sided) value.\n     *\n     * The value is only available if {@link #hasCarrierPhaseUncertainty()} is true.\n     ",
    "links" : [ "#hasCarrierPhaseUncertainty" ]
  }, {
    "name" : "public void setCarrierPhaseUncertainty(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Carrier-phase's uncertainty (1-Sigma) in cycles.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetCarrierPhaseUncertainty()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Carrier-phase's uncertainty (1-Sigma) in cycles.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getLossOfLock()",
    "returnType" : "byte",
    "comment" : "\n     * Gets a value indicating the 'loss of lock' state of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLossOfLock(byte value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the 'loss of lock' status.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getLossOfLockString()",
    "returnType" : "String",
    "comment" : "\n     * Gets a string representation of the 'loss of lock'.\n     * For internal and logging use only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBitNumber()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getBitNumber()} is available, false otherwise.\n     ",
    "links" : [ "#getBitNumber" ]
  }, {
    "name" : "public int getBitNumber()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of GPS bits transmitted since Sat-Sun midnight (GPS week).\n     *\n     * The value is only available if {@link #hasBitNumber()} is true.\n     ",
    "links" : [ "#hasBitNumber" ]
  }, {
    "name" : "public void setBitNumber(int bitNumber)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bit number within the broadcast frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetBitNumber()",
    "returnType" : "void",
    "comment" : "\n     * Resets the bit number within the broadcast frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTimeFromLastBitInMs()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getTimeFromLastBitInMs()} is available, false otherwise.\n     ",
    "links" : [ "#getTimeFromLastBitInMs" ]
  }, {
    "name" : "public short getTimeFromLastBitInMs()",
    "returnType" : "short",
    "comment" : "\n     * Gets the elapsed time since the last received bit in milliseconds.\n     * Range: [0, 20].\n     *\n     * The value is only available if {@link #hasTimeFromLastBitInMs()} is true.\n     ",
    "links" : [ "#hasTimeFromLastBitInMs" ]
  }, {
    "name" : "public void setTimeFromLastBitInMs(short value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the elapsed time since the last received bit in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetTimeFromLastBitInMs()",
    "returnType" : "void",
    "comment" : "\n     * Resets the elapsed time since the last received bit in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasDopplerShiftInHz()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getDopplerShiftInHz()} is available, false otherwise.\n     ",
    "links" : [ "#getDopplerShiftInHz" ]
  }, {
    "name" : "public double getDopplerShiftInHz()",
    "returnType" : "double",
    "comment" : "\n     * Gets the Doppler Shift in Hz.\n     * A positive value indicates that the SV is moving toward the receiver.\n     *\n     * The reference frequency is given by the value of {@link #getCarrierFrequencyInHz()}.\n     * The reported doppler shift includes {@link #getDopplerShiftUncertaintyInHz()}.\n     *\n     * The value is only available if {@link #hasDopplerShiftInHz()} is true.\n     ",
    "links" : [ "#getCarrierFrequencyInHz", "#getDopplerShiftUncertaintyInHz", "#hasDopplerShiftInHz" ]
  }, {
    "name" : "public void setDopplerShiftInHz(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Doppler shift in Hz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetDopplerShiftInHz()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Doppler shift in Hz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasDopplerShiftUncertaintyInHz()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getDopplerShiftUncertaintyInHz()} is available, false otherwise.\n     ",
    "links" : [ "#getDopplerShiftUncertaintyInHz" ]
  }, {
    "name" : "public double getDopplerShiftUncertaintyInHz()",
    "returnType" : "double",
    "comment" : "\n     * Gets the Doppler's Shift uncertainty (1-Sigma) in Hz.\n     * The uncertainty is represented as an absolute (single sided) value.\n     *\n     * The value is only available if {@link #hasDopplerShiftUncertaintyInHz()} is true.\n     ",
    "links" : [ "#hasDopplerShiftUncertaintyInHz" ]
  }, {
    "name" : "public void setDopplerShiftUncertaintyInHz(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Doppler's shift uncertainty (1-Sigma) in Hz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetDopplerShiftUncertaintyInHz()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Doppler's shift uncertainty (1-Sigma) in Hz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getMultipathIndicator()",
    "returnType" : "byte",
    "comment" : "\n     * Gets a value indicating the 'multipath' state of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMultipathIndicator(byte value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the 'multi-path' indicator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getMultipathIndicatorString()",
    "returnType" : "String",
    "comment" : "\n     * Gets a string representation of the 'multi-path indicator'.\n     * For internal and logging use only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSnrInDb()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getSnrInDb()} is available, false otherwise.\n     ",
    "links" : [ "#getSnrInDb" ]
  }, {
    "name" : "public double getSnrInDb()",
    "returnType" : "double",
    "comment" : "\n     * Gets the Signal-to-Noise ratio (SNR) in dB.\n     *\n     * The value is only available if {@link #hasSnrInDb()} is true.\n     ",
    "links" : [ "#hasSnrInDb" ]
  }, {
    "name" : "public void setSnrInDb(double snrInDb)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Signal-to-noise ratio (SNR) in dB.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetSnrInDb()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Signal-to-noise ratio (SNR) in dB.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasElevationInDeg()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getElevationInDeg()} is available, false otherwise.\n     ",
    "links" : [ "#getElevationInDeg" ]
  }, {
    "name" : "public double getElevationInDeg()",
    "returnType" : "double",
    "comment" : "\n     * Gets the Elevation in degrees.\n     * Range: [-90, 90]\n     * The reported elevation includes {@link #getElevationUncertaintyInDeg()}.\n     *\n     * The value is only available if {@link #hasElevationInDeg()} is true.\n     ",
    "links" : [ "#getElevationUncertaintyInDeg", "#hasElevationInDeg" ]
  }, {
    "name" : "public void setElevationInDeg(double elevationInDeg)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Elevation in degrees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetElevationInDeg()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Elevation in degrees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasElevationUncertaintyInDeg()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getElevationUncertaintyInDeg()} is available, false otherwise.\n     ",
    "links" : [ "#getElevationUncertaintyInDeg" ]
  }, {
    "name" : "public double getElevationUncertaintyInDeg()",
    "returnType" : "double",
    "comment" : "\n     * Gets the elevation's uncertainty (1-Sigma) in degrees.\n     * Range: [0, 90]\n     *\n     * The uncertainty is represented as an absolute (single sided) value.\n     *\n     * The value is only available if {@link #hasElevationUncertaintyInDeg()} is true.\n     ",
    "links" : [ "#hasElevationUncertaintyInDeg" ]
  }, {
    "name" : "public void setElevationUncertaintyInDeg(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the elevation's uncertainty (1-Sigma) in degrees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetElevationUncertaintyInDeg()",
    "returnType" : "void",
    "comment" : "\n     * Resets the elevation's uncertainty (1-Sigma) in degrees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAzimuthInDeg()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getAzimuthInDeg()} is available, false otherwise.\n     ",
    "links" : [ "#getAzimuthInDeg" ]
  }, {
    "name" : "public double getAzimuthInDeg()",
    "returnType" : "double",
    "comment" : "\n     * Gets the azimuth in degrees.\n     * Range: [0, 360).\n     *\n     * The reported azimuth includes {@link #getAzimuthUncertaintyInDeg()}.\n     *\n     * The value is only available if {@link #hasAzimuthInDeg()} is true.\n     ",
    "links" : [ "#getAzimuthUncertaintyInDeg", "#hasAzimuthInDeg" ]
  }, {
    "name" : "public void setAzimuthInDeg(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Azimuth in degrees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetAzimuthInDeg()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Azimuth in degrees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAzimuthUncertaintyInDeg()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getAzimuthUncertaintyInDeg()} is available, false otherwise.\n     ",
    "links" : [ "#getAzimuthUncertaintyInDeg" ]
  }, {
    "name" : "public double getAzimuthUncertaintyInDeg()",
    "returnType" : "double",
    "comment" : "\n     * Gets the azimuth's uncertainty (1-Sigma) in degrees.\n     * Range: [0, 180].\n     *\n     * The uncertainty is represented as an absolute (single sided) value.\n     *\n     * The value is only available if {@link #hasAzimuthUncertaintyInDeg()} is true.\n     ",
    "links" : [ "#hasAzimuthUncertaintyInDeg" ]
  }, {
    "name" : "public void setAzimuthUncertaintyInDeg(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Azimuth's uncertainty (1-Sigma) in degrees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetAzimuthUncertaintyInDeg()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Azimuth's uncertainty (1-Sigma) in degrees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUsedInFix()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets a flag indicating whether the GPS represented by the measurement was used for computing\n     * the most recent fix.\n     *\n     * @return A non-null value if the data is available, null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUsedInFix(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Used-in-Fix flag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initialize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setFlag(int flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetFlag(int flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isFlagSet(int flag)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mFlags", "mPrn", "mTimeOffsetInNs", "mState", "mReceivedGpsTowInNs", "mReceivedGpsTowUncertaintyInNs", "mCn0InDbHz", "mPseudorangeRateInMetersPerSec", "mPseudorangeRateUncertaintyInMetersPerSec", "mAccumulatedDeltaRangeState", "mAccumulatedDeltaRangeInMeters", "mAccumulatedDeltaRangeUncertaintyInMeters", "mPseudorangeInMeters", "mPseudorangeUncertaintyInMeters", "mCodePhaseInChips", "mCodePhaseUncertaintyInChips", "mCarrierFrequencyInHz", "mCarrierCycles", "mCarrierPhase", "mCarrierPhaseUncertainty", "mLossOfLock", "mBitNumber", "mTimeFromLastBitInMs", "mDopplerShiftInHz", "mDopplerShiftUncertaintyInHz", "mMultipathIndicator", "mSnrInDb", "mElevationInDeg", "mElevationUncertaintyInDeg", "mAzimuthInDeg", "mAzimuthUncertaintyInDeg", "mUsedInFix", "HAS_NO_FLAGS", "HAS_SNR", "HAS_ELEVATION", "HAS_ELEVATION_UNCERTAINTY", "HAS_AZIMUTH", "HAS_AZIMUTH_UNCERTAINTY", "HAS_PSEUDORANGE", "HAS_PSEUDORANGE_UNCERTAINTY", "HAS_CODE_PHASE", "HAS_CODE_PHASE_UNCERTAINTY", "HAS_CARRIER_FREQUENCY", "HAS_CARRIER_CYCLES", "HAS_CARRIER_PHASE", "HAS_CARRIER_PHASE_UNCERTAINTY", "HAS_BIT_NUMBER", "HAS_TIME_FROM_LAST_BIT", "HAS_DOPPLER_SHIFT", "HAS_DOPPLER_SHIFT_UNCERTAINTY", "HAS_USED_IN_FIX", "GPS_MEASUREMENT_HAS_UNCORRECTED_PSEUDORANGE_RATE", "LOSS_OF_LOCK_UNKNOWN", "LOSS_OF_LOCK_OK", "LOSS_OF_LOCK_CYCLE_SLIP", "MULTIPATH_INDICATOR_UNKNOWN", "MULTIPATH_INDICATOR_DETECTED", "MULTIPATH_INDICATOR_NOT_USED", "STATE_UNKNOWN", "STATE_CODE_LOCK", "STATE_BIT_SYNC", "STATE_SUBFRAME_SYNC", "STATE_TOW_DECODED", "STATE_MSEC_AMBIGUOUS", "STATE_ALL", "ADR_STATE_UNKNOWN", "ADR_STATE_VALID", "ADR_STATE_RESET", "ADR_STATE_CYCLE_SLIP", "ADR_ALL", "CREATOR" ],
  "methodNames" : [ "public void set(GpsMeasurement measurement)", "public void reset()", "public byte getPrn()", "public void setPrn(byte value)", "public double getTimeOffsetInNs()", "public void setTimeOffsetInNs(double value)", "public short getState()", "public void setState(short value)", "private String getStateString()", "public long getReceivedGpsTowInNs()", "public void setReceivedGpsTowInNs(long value)", "public long getReceivedGpsTowUncertaintyInNs()", "public void setReceivedGpsTowUncertaintyInNs(long value)", "public double getCn0InDbHz()", "public void setCn0InDbHz(double value)", "public double getPseudorangeRateInMetersPerSec()", "public void setPseudorangeRateInMetersPerSec(double value)", "public boolean isPseudorangeRateCorrected()", "public double getPseudorangeRateUncertaintyInMetersPerSec()", "public void setPseudorangeRateUncertaintyInMetersPerSec(double value)", "public short getAccumulatedDeltaRangeState()", "public void setAccumulatedDeltaRangeState(short value)", "private String getAccumulatedDeltaRangeStateString()", "public double getAccumulatedDeltaRangeInMeters()", "public void setAccumulatedDeltaRangeInMeters(double value)", "public double getAccumulatedDeltaRangeUncertaintyInMeters()", "public void setAccumulatedDeltaRangeUncertaintyInMeters(double value)", "public boolean hasPseudorangeInMeters()", "public double getPseudorangeInMeters()", "public void setPseudorangeInMeters(double value)", "public void resetPseudorangeInMeters()", "public boolean hasPseudorangeUncertaintyInMeters()", "public double getPseudorangeUncertaintyInMeters()", "public void setPseudorangeUncertaintyInMeters(double value)", "public void resetPseudorangeUncertaintyInMeters()", "public boolean hasCodePhaseInChips()", "public double getCodePhaseInChips()", "public void setCodePhaseInChips(double value)", "public void resetCodePhaseInChips()", "public boolean hasCodePhaseUncertaintyInChips()", "public double getCodePhaseUncertaintyInChips()", "public void setCodePhaseUncertaintyInChips(double value)", "public void resetCodePhaseUncertaintyInChips()", "public boolean hasCarrierFrequencyInHz()", "public float getCarrierFrequencyInHz()", "public void setCarrierFrequencyInHz(float carrierFrequencyInHz)", "public void resetCarrierFrequencyInHz()", "public boolean hasCarrierCycles()", "public long getCarrierCycles()", "public void setCarrierCycles(long value)", "public void resetCarrierCycles()", "public boolean hasCarrierPhase()", "public double getCarrierPhase()", "public void setCarrierPhase(double value)", "public void resetCarrierPhase()", "public boolean hasCarrierPhaseUncertainty()", "public double getCarrierPhaseUncertainty()", "public void setCarrierPhaseUncertainty(double value)", "public void resetCarrierPhaseUncertainty()", "public byte getLossOfLock()", "public void setLossOfLock(byte value)", "private String getLossOfLockString()", "public boolean hasBitNumber()", "public int getBitNumber()", "public void setBitNumber(int bitNumber)", "public void resetBitNumber()", "public boolean hasTimeFromLastBitInMs()", "public short getTimeFromLastBitInMs()", "public void setTimeFromLastBitInMs(short value)", "public void resetTimeFromLastBitInMs()", "public boolean hasDopplerShiftInHz()", "public double getDopplerShiftInHz()", "public void setDopplerShiftInHz(double value)", "public void resetDopplerShiftInHz()", "public boolean hasDopplerShiftUncertaintyInHz()", "public double getDopplerShiftUncertaintyInHz()", "public void setDopplerShiftUncertaintyInHz(double value)", "public void resetDopplerShiftUncertaintyInHz()", "public byte getMultipathIndicator()", "public void setMultipathIndicator(byte value)", "private String getMultipathIndicatorString()", "public boolean hasSnrInDb()", "public double getSnrInDb()", "public void setSnrInDb(double snrInDb)", "public void resetSnrInDb()", "public boolean hasElevationInDeg()", "public double getElevationInDeg()", "public void setElevationInDeg(double elevationInDeg)", "public void resetElevationInDeg()", "public boolean hasElevationUncertaintyInDeg()", "public double getElevationUncertaintyInDeg()", "public void setElevationUncertaintyInDeg(double value)", "public void resetElevationUncertaintyInDeg()", "public boolean hasAzimuthInDeg()", "public double getAzimuthInDeg()", "public void setAzimuthInDeg(double value)", "public void resetAzimuthInDeg()", "public boolean hasAzimuthUncertaintyInDeg()", "public double getAzimuthUncertaintyInDeg()", "public void setAzimuthUncertaintyInDeg(double value)", "public void resetAzimuthUncertaintyInDeg()", "public boolean isUsedInFix()", "public void setUsedInFix(boolean value)", "public void writeToParcel(Parcel parcel, int flags)", "public int describeContents()", "public String toString()", "private void initialize()", "private void setFlag(int flag)", "private void resetFlag(int flag)", "private boolean isFlagSet(int flag)" ]
}