{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/HashSet.java",
  "packageName" : "java.util",
  "className" : "HashSet",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "map",
    "type" : "HashMap<E, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRESENT",
    "type" : "Object",
    "comment" : " Dummy value to associate with an Object in the backing Map",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this set.  The elements\n     * are returned in no particular order.\n     *\n     * @return an Iterator over the elements in this set\n     * @see ConcurrentModificationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this set (its cardinality).\n     *\n     * @return the number of elements in this set (its cardinality)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this set contains no elements.\n     *\n     * @return {@code true} if this set contains no elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this set contains the specified element.\n     * More formally, returns {@code true} if and only if this set\n     * contains an element {@code e} such that\n     * {@code Objects.equals(o, e)}.\n     *\n     * @param o element whose presence in this set is to be tested\n     * @return {@code true} if this set contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the specified element to this set if it is not already present.\n     * More formally, adds the specified element {@code e} to this set if\n     * this set contains no element {@code e2} such that\n     * {@code Objects.equals(e, e2)}.\n     * If this set already contains the element, the call leaves the set\n     * unchanged and returns {@code false}.\n     *\n     * @param e element to be added to this set\n     * @return {@code true} if this set did not already contain the specified\n     * element\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the specified element from this set if it is present.\n     * More formally, removes an element {@code e} such that\n     * {@code Objects.equals(o, e)},\n     * if this set contains such an element.  Returns {@code true} if\n     * this set contained the element (or equivalently, if this set\n     * changed as a result of the call).  (This set will not contain the\n     * element once the call returns.)\n     *\n     * @param o object to be removed from this set, if present\n     * @return {@code true} if the set contained the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this set.\n     * The set will be empty after this call returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a shallow copy of this {@code HashSet} instance: the elements\n     * themselves are not cloned.\n     *\n     * @return a shallow copy of this set\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Save the state of this {@code HashSet} instance to a stream (that is,\n     * serialize it).\n     *\n     * @serialData The capacity of the backing {@code HashMap} instance\n     *             (int), and its load factor (float) are emitted, followed by\n     *             the size of the set (the number of elements it contains)\n     *             (int), followed by all of its elements (each an Object) in\n     *             no particular order.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitute the {@code HashSet} instance from a stream (that is,\n     * deserialize it).\n     ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Creates a <em><a href=\"Spliterator.html#binding\">late-binding</a></em>\n     * and <em>fail-fast</em> {@link Spliterator} over the elements in this\n     * set.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#SIZED} and\n     * {@link Spliterator#DISTINCT}.  Overriding implementations should document\n     * the reporting of additional characteristic values.\n     *\n     * @return a {@code Spliterator} over the elements in this set\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#DISTINCT", "java.util.Spliterator" ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static HashSet<T> newHashSet(int numElements)",
    "returnType" : "HashSet<T>",
    "comment" : "\n     * Creates a new, empty HashSet suitable for the expected number of elements.\n     * The returned set uses the default load factor of 0.75, and its initial capacity is\n     * generally large enough so that the expected number of elements can be added\n     * without resizing the set.\n     *\n     * @param numElements    the expected number of elements\n     * @param <T>         the type of elements maintained by the new set\n     * @return the newly created set\n     * @throws IllegalArgumentException if numElements is negative\n     * @since 19\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Iterator<E> iterator()", "public int size()", "public boolean isEmpty()", "public boolean contains(Object o)", "public boolean add(E e)", "public boolean remove(Object o)", "public void clear()", "public Object clone()", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", "public Spliterator<E> spliterator()", "public Object[] toArray()", "public T[] toArray(T[] a)", "public static HashSet<T> newHashSet(int numElements)" ],
  "variableNames" : [ "serialVersionUID", "map", "PRESENT" ]
}