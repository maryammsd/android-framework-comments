{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/Shader.java",
  "packageName" : "android.graphics",
  "className" : "Shader",
  "comment" : "\n * Shader is the base class for objects that return horizontal spans of colors\n * during drawing. A subclass of Shader is installed in a Paint calling\n * paint.setShader(shader). After that any object (other than a bitmap) that is\n * drawn with that paint will get its color(s) from the shader.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mColorSpace",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeInstance",
    "type" : "long",
    "comment" : "\n     * Current native shader instance. Created and updated lazily when {@link #getNativeInstance()}\n     * is called - otherwise may be out of date with java setters/properties.\n     ",
    "links" : [ "#getNativeInstance()" ]
  }, {
    "name" : "mCleaner",
    "type" : "Runnable",
    "comment" : " Runnable to do immediate destruction",
    "links" : [ ]
  }, {
    "name" : "mLocalMatrix",
    "type" : "Matrix",
    "comment" : "\n     * Current matrix - always set to null if local matrix is identity.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected ColorSpace colorSpace()",
    "returnType" : "ColorSpace",
    "comment" : "\n     * @hide Only to be used by subclasses in android.graphics.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getLocalMatrix(@NonNull Matrix localM)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the shader has a non-identity local matrix.\n     * @param localM Set to the local matrix of the shader, if the shader's matrix is non-null.\n     * @return true if the shader has a non-identity local matrix\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLocalMatrix(@Nullable Matrix localM)",
    "returnType" : "void",
    "comment" : "\n     * Set the shader's local matrix. Passing null will reset the shader's\n     * matrix to identity. If the matrix has scale value as 0, the drawing\n     * result is undefined.\n     *\n     * @param localM The shader's new local matrix, or null to specify identity\n     ",
    "links" : [ ]
  }, {
    "name" : "protected long createNativeInstance(long nativeMatrix, boolean filterFromPaint)",
    "returnType" : "long",
    "comment" : "\n     *  @hide Only to be used by subclasses in the graphics package.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final synchronized void discardNativeInstance()",
    "returnType" : "void",
    "comment" : "\n     *  @hide Only to be used by subclasses in the graphics package.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void discardNativeInstanceLocked()",
    "returnType" : "void",
    "comment" : " For calling inside a synchronized method.",
    "links" : [ ]
  }, {
    "name" : "protected boolean shouldDiscardNativeInstance(boolean filterBitmap)",
    "returnType" : "boolean",
    "comment" : "\n     * Callback for subclasses to specify whether the most recently\n     * constructed native instance is still valid.\n     *  @hide Only to be used by subclasses in the graphics package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized long getNativeInstance(boolean filterFromPaint)",
    "returnType" : "long",
    "comment" : "\n     * @hide so it can be called by android.graphics.drawable but must not be called from outside\n     * the module.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long getNativeInstance()",
    "returnType" : "long",
    "comment" : "\n     * @hide so it can be called by android.graphics.drawable but must not be called from outside\n     * the module.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static long[] convertColors(@NonNull @ColorInt int[] colors)",
    "returnType" : "long[]",
    "comment" : "\n     * @hide Only to be called by subclasses in the android.graphics package.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static ColorSpace detectColorSpace(@NonNull @ColorLong long[] colors)",
    "returnType" : "ColorSpace",
    "comment" : "\n     * Detect the ColorSpace that the {@code colors} share.\n     *\n     * @throws IllegalArgumentException if the colors do not all share the same,\n     *      valid ColorSpace, or if there are less than 2 colors.\n     *\n     * @hide Only to be called by subclasses in the android.graphics package.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected ColorSpace colorSpace()", "public boolean getLocalMatrix(@NonNull Matrix localM)", "public void setLocalMatrix(@Nullable Matrix localM)", "protected long createNativeInstance(long nativeMatrix, boolean filterFromPaint)", "protected final synchronized void discardNativeInstance()", "private void discardNativeInstanceLocked()", "protected boolean shouldDiscardNativeInstance(boolean filterBitmap)", "public final synchronized long getNativeInstance(boolean filterFromPaint)", "public final long getNativeInstance()", "protected static long[] convertColors(@NonNull @ColorInt int[] colors)", "protected static ColorSpace detectColorSpace(@NonNull @ColorLong long[] colors)", "private static native long nativeGetFinalizer()" ],
  "variableNames" : [ "mColorSpace", "mNativeInstance", "mCleaner", "mLocalMatrix" ]
}