{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/timedetector/TimeSuggestionHelper.java",
  "packageName" : "android.app.timedetector",
  "className" : "TimeSuggestionHelper",
  "comment" : "\n * A delegate class to support time suggestion classes that could diverge in the future. This class\n * exists purely for code re-use and provides support methods. It avoids class inheritance\n * deliberately to allow each suggestion to evolve in different directions later without affecting\n * SDK APIs.\n *\n * <p>{@code unixEpochTime} is the suggested time. The {@code unixEpochTime.value} is the number of\n * milliseconds elapsed since 1/1/1970 00:00:00 UTC according to the Unix time system. The {@code\n * unixEpochTime.referenceTimeMillis} is the value of the elapsed realtime clock when the {@code\n * unixEpochTime.value} was established. Note that the elapsed realtime clock is considered accurate\n * but it is volatile, so time suggestions cannot be persisted across device resets.\n *\n * <p>{@code debugInfo} contains debugging metadata associated with the suggestion. This is used to\n * record why the suggestion exists and how it was entered. This information exists only to aid in\n * debugging and therefore is used by {@link #toString()}, but it is not for use in detection\n * logic and is not considered in {@link #hashCode()} or {@link #equals(Object)}.\n *\n * @hide\n ",
  "links" : [ "#equals(Object)", "#hashCode()", "#toString()" ],
  "variables" : [ {
    "name" : "mHelpedClass",
    "type" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnixEpochTime",
    "type" : "UnixEpochTime",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDebugInfo",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public UnixEpochTime getUnixEpochTime()",
    "returnType" : "UnixEpochTime",
    "comment" : " See {@link TimeSuggestionHelper} for property details. ",
    "links" : [ "android.app.timedetector.TimeSuggestionHelper" ]
  }, {
    "name" : "public List<String> getDebugInfo()",
    "returnType" : "List<String>",
    "comment" : " See {@link TimeSuggestionHelper} for information about {@code debugInfo}. ",
    "links" : [ "android.app.timedetector.TimeSuggestionHelper" ]
  }, {
    "name" : "public void addDebugInfo(@NonNull String debugInfo)",
    "returnType" : "void",
    "comment" : "\n     * Associates information with the instance that can be useful for debugging / logging.\n     *\n     * <p>See {@link TimeSuggestionHelper} for more information about {@code debugInfo}.\n     ",
    "links" : [ "android.app.timedetector.TimeSuggestionHelper" ]
  }, {
    "name" : "public void addDebugInfo(String... debugInfos)",
    "returnType" : "void",
    "comment" : "\n     * Associates information with the instance that can be useful for debugging / logging. The\n     * information is present in {@link #toString()} but is not considered for\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     ",
    "links" : [ "#equals(Object)", "#hashCode()", "#toString()" ]
  }, {
    "name" : "public void addDebugInfo(@NonNull List<String> debugInfo)",
    "returnType" : "void",
    "comment" : "\n     * Associates information with the instance that can be useful for debugging / logging.\n     *\n     * <p>See {@link TimeSuggestionHelper} for more information about {@code debugInfo}.\n     ",
    "links" : [ "android.app.timedetector.TimeSuggestionHelper" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Implemented in case users call this insteam of {@link #handleEquals(TimeSuggestionHelper)}.\n     ",
    "links" : [ "#handleEquals(TimeSuggestionHelper)" ]
  }, {
    "name" : "public boolean handleEquals(TimeSuggestionHelper o)",
    "returnType" : "boolean",
    "comment" : " Used to implement {@link Object#equals(Object)}. ",
    "links" : [ "#equals(Object)" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String handleToString()",
    "returnType" : "String",
    "comment" : " Used to implement {@link Object#toString()}. ",
    "links" : [ "#toString()" ]
  }, {
    "name" : "public static TimeSuggestionHelper handleCreateFromParcel(@NonNull Class<?> helpedClass, @NonNull Parcel in)",
    "returnType" : "TimeSuggestionHelper",
    "comment" : " Constructs a helper with suggestion state from a Parcel. ",
    "links" : [ ]
  }, {
    "name" : "public void handleWriteToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Writes the helper suggestion state to a Parcel. ",
    "links" : [ ]
  }, {
    "name" : "public static TimeSuggestionHelper handleParseCommandLineArg(@NonNull Class<?> helpedClass, @NonNull ShellCommand cmd) throws IllegalArgumentException",
    "returnType" : "TimeSuggestionHelper",
    "comment" : " Parses command line args to create a {@link TimeSuggestionHelper}. ",
    "links" : [ "android.app.timedetector.TimeSuggestionHelper" ]
  }, {
    "name" : "public static void handlePrintCommandLineOpts(@NonNull PrintWriter pw, @NonNull String typeName, @NonNull Class<?> clazz)",
    "returnType" : "void",
    "comment" : " Prints the command line args needed to create a {@link TimeSuggestionHelper}. ",
    "links" : [ "android.app.timedetector.TimeSuggestionHelper" ]
  } ],
  "methodNames" : [ "public UnixEpochTime getUnixEpochTime()", "public List<String> getDebugInfo()", "public void addDebugInfo(@NonNull String debugInfo)", "public void addDebugInfo(String... debugInfos)", "public void addDebugInfo(@NonNull List<String> debugInfo)", "public boolean equals(Object o)", "public boolean handleEquals(TimeSuggestionHelper o)", "public int hashCode()", "public String handleToString()", "public static TimeSuggestionHelper handleCreateFromParcel(@NonNull Class<?> helpedClass, @NonNull Parcel in)", "public void handleWriteToParcel(@NonNull Parcel dest, int flags)", "public static TimeSuggestionHelper handleParseCommandLineArg(@NonNull Class<?> helpedClass, @NonNull ShellCommand cmd) throws IllegalArgumentException", "public static void handlePrintCommandLineOpts(@NonNull PrintWriter pw, @NonNull String typeName, @NonNull Class<?> clazz)" ],
  "variableNames" : [ "mHelpedClass", "mUnixEpochTime", "mDebugInfo" ]
}