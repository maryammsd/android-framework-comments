{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/speech/RecognitionListener.java",
  "packageName" : "android.speech",
  "className" : "RecognitionListener",
  "comment" : "\n * Used for receiving notifications from the SpeechRecognizer when the\n * recognition related events occur. All the callbacks are executed on the\n * Application main thread.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onReadyForSpeech(Bundle params)",
    "returnType" : "void",
    "comment" : "\n     * Called when the endpointer is ready for the user to start speaking.\n     * \n     * @param params parameters set by the recognition service. Reserved for future use.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onBeginningOfSpeech()",
    "returnType" : "void",
    "comment" : "\n     * The user has started to speak.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onRmsChanged(float rmsdB)",
    "returnType" : "void",
    "comment" : "\n     * The sound level in the audio stream has changed. There is no guarantee that this method will\n     * be called.\n     * \n     * @param rmsdB the new RMS dB value\n     ",
    "links" : [ ]
  }, {
    "name" : " void onBufferReceived(byte[] buffer)",
    "returnType" : "void",
    "comment" : "\n     * More sound has been received. The purpose of this function is to allow giving feedback to the\n     * user regarding the captured audio. There is no guarantee that this method will be called.\n     * \n     * @param buffer a buffer containing a sequence of big-endian 16-bit integers representing a\n     *        single channel audio stream. The sample rate is implementation dependent.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onEndOfSpeech()",
    "returnType" : "void",
    "comment" : "\n     * Called after the user stops speaking.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onError(@SpeechRecognizer.RecognitionError int error)",
    "returnType" : "void",
    "comment" : "\n     * A network or recognition error occurred.\n     * \n     * @param error code is defined in {@link SpeechRecognizer}. Implementations need to handle any\n     *              integer error constant to be passed here beyond constants prefixed with ERROR_.\n     ",
    "links" : [ "android.speech.SpeechRecognizer" ]
  }, {
    "name" : " void onResults(Bundle results)",
    "returnType" : "void",
    "comment" : "\n     * Called when recognition results are ready.\n     *\n     * <p>\n     *     Called with the results for the full speech since {@link #onReadyForSpeech(Bundle)}.\n     *     To get recognition results in segments rather than for the full session see\n     *     {@link RecognizerIntent#EXTRA_SEGMENTED_SESSION}.\n     * </p>\n     *\n     * @param results the recognition results. To retrieve the results in {@code\n     *        ArrayList<String>} format use {@link Bundle#getStringArrayList(String)} with\n     *        {@link SpeechRecognizer#RESULTS_RECOGNITION} as a parameter. A float array of\n     *        confidence values might also be given in {@link SpeechRecognizer#CONFIDENCE_SCORES}.\n     ",
    "links" : [ "#onReadyForSpeech(Bundle)", "android.os.Bundle#getStringArrayList(String)", "android.speech.SpeechRecognizer#RESULTS_RECOGNITION", "android.speech.RecognizerIntent#EXTRA_SEGMENTED_SESSION", "android.speech.SpeechRecognizer#CONFIDENCE_SCORES" ]
  }, {
    "name" : " void onPartialResults(Bundle partialResults)",
    "returnType" : "void",
    "comment" : "\n     * Called when partial recognition results are available. The callback might be called at any\n     * time between {@link #onBeginningOfSpeech()} and {@link #onResults(Bundle)} when partial\n     * results are ready. This method may be called zero, one or multiple times for each call to\n     * {@link SpeechRecognizer#startListening(Intent)}, depending on the speech recognition\n     * service implementation.  To request partial results, use\n     * {@link RecognizerIntent#EXTRA_PARTIAL_RESULTS}\n     * \n     * @param partialResults the returned results. To retrieve the results in\n     *        ArrayList&lt;String&gt; format use {@link Bundle#getStringArrayList(String)} with\n     *        {@link SpeechRecognizer#RESULTS_RECOGNITION} as a parameter\n     ",
    "links" : [ "android.speech.RecognizerIntent#EXTRA_PARTIAL_RESULTS", "android.speech.SpeechRecognizer#startListening(Intent)", "android.os.Bundle#getStringArrayList(String)", "android.speech.SpeechRecognizer#RESULTS_RECOGNITION", "#onResults(Bundle)", "#onBeginningOfSpeech()" ]
  }, {
    "name" : " void onSegmentResults(@NonNull Bundle segmentResults)",
    "returnType" : "void",
    "comment" : "\n     * Called for each ready segment of a recognition request. To request segmented speech results\n     * use {@link RecognizerIntent#EXTRA_SEGMENTED_SESSION}. The callback might be called\n     * any number of times between {@link #onReadyForSpeech(Bundle)} and\n     * {@link #onEndOfSegmentedSession()}.\n     *\n     * @param segmentResults the returned results. To retrieve the results in\n     *        ArrayList&lt;String&gt; format use {@link Bundle#getStringArrayList(String)} with\n     *        {@link SpeechRecognizer#RESULTS_RECOGNITION} as a parameter\n     ",
    "links" : [ "#onReadyForSpeech(Bundle)", "android.os.Bundle#getStringArrayList(String)", "android.speech.SpeechRecognizer#RESULTS_RECOGNITION", "android.speech.RecognizerIntent#EXTRA_SEGMENTED_SESSION", "#onEndOfSegmentedSession()" ]
  }, {
    "name" : " void onEndOfSegmentedSession()",
    "returnType" : "void",
    "comment" : "\n     * Called at the end of a segmented recognition request. To request segmented speech results\n     * use {@link RecognizerIntent#EXTRA_SEGMENTED_SESSION}.\n     ",
    "links" : [ "android.speech.RecognizerIntent#EXTRA_SEGMENTED_SESSION" ]
  }, {
    "name" : " void onLanguageDetection(@NonNull Bundle results)",
    "returnType" : "void",
    "comment" : "\n     * Called when the language detection (and switching) results are available. This callback\n     * can be invoked on any number of occasions at any time between {@link #onBeginningOfSpeech()}\n     * and {@link #onEndOfSpeech()}, depending on the speech recognition service implementation.\n     *\n     * <p> To request language detection,\n     * use {@link RecognizerIntent#EXTRA_ENABLE_LANGUAGE_DETECTION}.\n     * <p> To request automatic language switching,\n     * use {@link RecognizerIntent#EXTRA_ENABLE_LANGUAGE_SWITCH}.\n     *\n     * @param results the returned language detection (and switching) results.\n     *        <p> To retrieve the most confidently detected language IETF tag\n     *        (as defined by BCP 47, e.g., \"en-US\", \"de-DE\"),\n     *        use {@link Bundle#getString(String)}\n     *        with {@link SpeechRecognizer#DETECTED_LANGUAGE} as the parameter.\n     *        <p> To retrieve the language detection confidence level represented by a value\n     *        prefixed by {@code LANGUAGE_DETECTION_CONFIDENCE_LEVEL_} and\n     *        defined in {@link SpeechRecognizer}, use {@link Bundle#getInt(String)}\n     *        with {@link SpeechRecognizer#LANGUAGE_DETECTION_CONFIDENCE_LEVEL} as the parameter.\n     *        <p> To retrieve the alternative locales for the same language\n     *        retrieved by the key {@link SpeechRecognizer#DETECTED_LANGUAGE},\n     *        use {@link Bundle#getStringArrayList(String)}\n     *        with {@link SpeechRecognizer#TOP_LOCALE_ALTERNATIVES} as the parameter.\n     *        <p> To retrieve the language switching results represented by a value\n     *        prefixed by {@code LANGUAGE_SWITCH_RESULT_} and defined in {@link SpeechRecognizer},\n     *        use {@link Bundle#getInt(String)}\n     *        with {@link SpeechRecognizer#LANGUAGE_SWITCH_RESULT} as the parameter.\n     ",
    "links" : [ "android.speech.RecognizerIntent#EXTRA_ENABLE_LANGUAGE_SWITCH", "android.os.Bundle#getString(String)", "android.speech.SpeechRecognizer", "android.speech.SpeechRecognizer#DETECTED_LANGUAGE", "android.speech.SpeechRecognizer#TOP_LOCALE_ALTERNATIVES", "android.speech.SpeechRecognizer#LANGUAGE_DETECTION_CONFIDENCE_LEVEL", "android.os.Bundle#getStringArrayList(String)", "android.speech.SpeechRecognizer#LANGUAGE_SWITCH_RESULT", "android.os.Bundle#getInt(String)", "android.speech.RecognizerIntent#EXTRA_ENABLE_LANGUAGE_DETECTION", "#onBeginningOfSpeech()", "#onEndOfSpeech()" ]
  }, {
    "name" : " void onEvent(int eventType, Bundle params)",
    "returnType" : "void",
    "comment" : "\n     * Reserved for adding future events.\n     * \n     * @param eventType the type of the occurred event\n     * @param params a Bundle containing the passed parameters\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void onReadyForSpeech(Bundle params)", " void onBeginningOfSpeech()", " void onRmsChanged(float rmsdB)", " void onBufferReceived(byte[] buffer)", " void onEndOfSpeech()", " void onError(@SpeechRecognizer.RecognitionError int error)", " void onResults(Bundle results)", " void onPartialResults(Bundle partialResults)", " void onSegmentResults(@NonNull Bundle segmentResults)", " void onEndOfSegmentedSession()", " void onLanguageDetection(@NonNull Bundle results)", " void onEvent(int eventType, Bundle params)" ],
  "variableNames" : [ ]
}