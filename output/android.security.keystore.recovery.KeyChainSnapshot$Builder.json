{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore/recovery/KeyChainSnapshot.java",
  "packageName" : "android.security.keystore.recovery",
  "className" : "Builder",
  "comment" : "\n     * Builder for creating {@link KeyChainSnapshot}.\n     * @hide\n     ",
  "links" : [ "android.security.keystore.recovery.KeyChainSnapshot" ],
  "variables" : [ {
    "name" : "mInstance",
    "type" : "KeyChainSnapshot",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setSnapshotVersion(int snapshotVersion)",
    "returnType" : "Builder",
    "comment" : "\n         * Snapshot version for the recovery agent.\n         *\n         * @param snapshotVersion The snapshot version\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMaxAttempts(int maxAttempts)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the number of user secret guesses allowed during Keychain recovery.\n         *\n         * @param maxAttempts The maximum number of guesses.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCounterId(long counterId)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets counter id.\n         *\n         * @param counterId The counter id.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServerParams(byte[] serverParams)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets server parameters.\n         *\n         * @param serverParams The server parameters\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTrustedHardwareCertPath(@NonNull CertPath certPath) throws CertificateException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets CertPath used to validate the trusted hardware public key. The CertPath should\n         * contain a certificate of the trusted hardware public key and any necessary intermediate\n         * certificates.\n         *\n         * @param certPath The certificate path\n         * @throws CertificateException if the given certificate path cannot be encoded properly\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setKeyChainProtectionParams(@NonNull List<KeyChainProtectionParams> keyChainProtectionParams)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets UI and key derivation parameters\n         *\n         * @param keyChainProtectionParams The UI and key derivation parameters\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setWrappedApplicationKeys(@NonNull List<WrappedApplicationKey> entryRecoveryData)",
    "returnType" : "Builder",
    "comment" : "\n         * List of application keys.\n         *\n         * @param entryRecoveryData List of application keys\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEncryptedRecoveryKeyBlob(@NonNull byte[] encryptedRecoveryKeyBlob)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets recovery key blob.\n         *\n         * @param encryptedRecoveryKeyBlob The recovery key blob.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public KeyChainSnapshot build()",
    "returnType" : "KeyChainSnapshot",
    "comment" : "\n         * Creates a new {@link KeyChainSnapshot} instance.\n         *\n         * @return new instance\n         * @throws NullPointerException if some of the required fields were not set.\n         ",
    "links" : [ "android.security.keystore.recovery.KeyChainSnapshot" ]
  } ],
  "methodNames" : [ "public Builder setSnapshotVersion(int snapshotVersion)", "public Builder setMaxAttempts(int maxAttempts)", "public Builder setCounterId(long counterId)", "public Builder setServerParams(byte[] serverParams)", "public Builder setTrustedHardwareCertPath(@NonNull CertPath certPath) throws CertificateException", "public Builder setKeyChainProtectionParams(@NonNull List<KeyChainProtectionParams> keyChainProtectionParams)", "public Builder setWrappedApplicationKeys(@NonNull List<WrappedApplicationKey> entryRecoveryData)", "public Builder setEncryptedRecoveryKeyBlob(@NonNull byte[] encryptedRecoveryKeyBlob)", "public KeyChainSnapshot build()" ],
  "variableNames" : [ "mInstance" ]
}