{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/parse/NumberParserImpl.java",
  "packageName" : "android.icu.impl.number.parse",
  "className" : "NumberParserImpl",
  "comment" : "\n * Primary number parsing implementation class.\n *\n * @author sffc\n * @hide Only a subset of ICU is exposed in Android\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "parseFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "matchers",
    "type" : "List<NumberParseMatcher>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "frozen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NumberParserImpl createSimpleParser(ULocale locale, String pattern, int parseFlags)",
    "returnType" : "NumberParserImpl",
    "comment" : "\n     * Creates a parser with most default options. Used for testing, not production.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Number parseStatic(String input, ParsePosition ppos, DecimalFormatProperties properties, DecimalFormatSymbols symbols)",
    "returnType" : "Number",
    "comment" : "\n     * Parses the string without returning a NumberParserImpl. Used for testing, not production.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CurrencyAmount parseStaticCurrency(String input, ParsePosition ppos, DecimalFormatProperties properties, DecimalFormatSymbols symbols)",
    "returnType" : "CurrencyAmount",
    "comment" : "\n     * Parses the string without returning a NumberParserImpl. Used for testing, not production.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NumberParserImpl createDefaultParserForLocale(ULocale loc)",
    "returnType" : "NumberParserImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static NumberParserImpl createParserFromProperties(DecimalFormatProperties properties, DecimalFormatSymbols symbols, boolean parseCurrency)",
    "returnType" : "NumberParserImpl",
    "comment" : "\n     * Creates a parser from the given DecimalFormatProperties. This is the endpoint used by\n     * DecimalFormat in production code.\n     *\n     * @param properties\n     *            The property bag.\n     * @param symbols\n     *            The locale's symbols.\n     * @param parseCurrency\n     *            True to force a currency match and use monetary separators; false otherwise.\n     * @return An immutable parser object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addMatcher(NumberParseMatcher matcher)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addMatchers(Collection<? extends NumberParseMatcher> matchers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void freeze()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getParseFlags()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void parse(String input, boolean greedy, ParsedNumber result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void parse(String input, int start, boolean greedy, ParsedNumber result)",
    "returnType" : "void",
    "comment" : "\n     * Primary entrypoint to parsing code path.\n     *\n     * @param input\n     *            The string to parse. This is a String, not CharSequence, to enforce assumptions about\n     *            immutability (CharSequences are not guaranteed to be immutable).\n     * @param start\n     *            The index into the string at which to start parsing.\n     * @param greedy\n     *            Whether to use the faster but potentially less accurate greedy code path.\n     * @param result\n     *            Output variable to store results.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void parseGreedy(StringSegment segment, ParsedNumber result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseLongestRecursive(StringSegment segment, ParsedNumber result, int recursionLevels)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static NumberParserImpl createSimpleParser(ULocale locale, String pattern, int parseFlags)", "public static Number parseStatic(String input, ParsePosition ppos, DecimalFormatProperties properties, DecimalFormatSymbols symbols)", "public static CurrencyAmount parseStaticCurrency(String input, ParsePosition ppos, DecimalFormatProperties properties, DecimalFormatSymbols symbols)", "public static NumberParserImpl createDefaultParserForLocale(ULocale loc)", "public static NumberParserImpl createParserFromProperties(DecimalFormatProperties properties, DecimalFormatSymbols symbols, boolean parseCurrency)", "public void addMatcher(NumberParseMatcher matcher)", "public void addMatchers(Collection<? extends NumberParseMatcher> matchers)", "public void freeze()", "public int getParseFlags()", "public void parse(String input, boolean greedy, ParsedNumber result)", "public void parse(String input, int start, boolean greedy, ParsedNumber result)", "private void parseGreedy(StringSegment segment, ParsedNumber result)", "private void parseLongestRecursive(StringSegment segment, ParsedNumber result, int recursionLevels)", "public String toString()" ],
  "variableNames" : [ "parseFlags", "matchers", "frozen" ]
}