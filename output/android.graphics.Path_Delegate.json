{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Path_Delegate.java",
  "packageName" : "android.graphics",
  "className" : "Path_Delegate",
  "comment" : "\n * Delegate implementing the native methods of android.graphics.Path\n *\n * Through the layoutlib_create tool, the original native methods of Path have been replaced\n * by calls to methods of the same name in this delegate class.\n *\n * This class behaves like the original native implementation, but in Java, keeping previously\n * native data into its own objects and mapping them to int that are sent back and forth between\n * it and the original Path class.\n *\n * @see DelegateManager\n *\n ",
  "variables" : [ {
    "name" : "sManager",
    "type" : "DelegateManager<Path_Delegate>",
    "comment" : " ---- delegate manager ----",
    "links" : [ ]
  }, {
    "name" : "EPSILON",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFinalizer",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFillType",
    "type" : "FillType",
    "comment" : " ---- delegate data ----",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "Path2D",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedIsEmpty",
    "type" : "boolean",
    "comment" : " true if the path contains does not contain a curve or line.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Path_Delegate getDelegate(long nPath)",
    "returnType" : "Path_Delegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Path2D getJavaShape()",
    "returnType" : "Path2D",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setJavaShape(Shape shape)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPathIterator(PathIterator iterator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nInit()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nInit(long nPath)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nReset(long nPath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nRewind(long nPath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSet(long native_dst, long nSrc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nIsConvex(long nPath)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetFillType(long nPath)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void nSetFillType(long nPath, int ft)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nIsEmpty(long nPath)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nIsRect(long nPath, RectF rect)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nComputeBounds(long nPath, RectF bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nIncReserve(long nPath, int extraPtCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nMoveTo(long nPath, float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nRMoveTo(long nPath, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nLineTo(long nPath, float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nRLineTo(long nPath, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nQuadTo(long nPath, float x1, float y1, float x2, float y2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nRQuadTo(long nPath, float dx1, float dy1, float dx2, float dy2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nCubicTo(long nPath, float x1, float y1, float x2, float y2, float x3, float y3)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nRCubicTo(long nPath, float x1, float y1, float x2, float y2, float x3, float y3)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nArcTo(long nPath, float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nClose(long nPath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nAddRect(long nPath, float left, float top, float right, float bottom, int dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nAddOval(long nPath, float left, float top, float right, float bottom, int dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nAddCircle(long nPath, float x, float y, float radius, int dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nAddArc(long nPath, float left, float top, float right, float bottom, float startAngle, float sweepAngle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nAddRoundRect(long nPath, float left, float top, float right, float bottom, float rx, float ry, int dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nAddRoundRect(long nPath, float left, float top, float right, float bottom, float[] radii, int dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nAddPath(long nPath, long src, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nAddPath(long nPath, long src)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nAddPath(long nPath, long src, long matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nOffset(long nPath, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetLastPoint(long nPath, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nTransform(long nPath, long matrix, long dst_path)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nTransform(long nPath, long matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nOp(long nPath1, long nPath2, int op, long result)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float[] nApproximate(long nPath, float error)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void set(Path_Delegate delegate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setFillType(FillType fillType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getWindingRule(FillType type)",
    "returnType" : "int",
    "comment" : "\n     * Returns the Java2D winding rules matching a given Android {@link FillType}.\n     * @param type the android fill type\n     * @return the matching java2d winding rule.\n     ",
    "links" : [ "android.graphics.Path.FillType" ]
  }, {
    "name" : "private static Direction getDirection(int direction)",
    "returnType" : "Direction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void addPath(long destPath, long srcPath, AffineTransform transform)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPoints()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the path already contains any points.\n     * Note that this is different to\n     * {@link #isEmpty} because if all elements are {@link PathIterator#SEG_MOVETO},\n     * {@link #isEmpty} will return true while hasPoints will return false.\n     ",
    "links" : [ "#isEmpty", "java.awt.geom.PathIterator#SEG_MOVETO" ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the path is empty (contains no lines or curves).\n     * @see Path#isEmpty\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fillBounds(RectF bounds)",
    "returnType" : "void",
    "comment" : "\n     * Fills the given {@link RectF} with the path bounds.\n     * @param bounds the RectF to be filled.\n     ",
    "links" : [ "android.graphics.RectF" ]
  }, {
    "name" : "public void moveTo(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Set the beginning of the next contour to the point (x,y).\n     *\n     * @param x The x-coordinate of the start of a new contour\n     * @param y The y-coordinate of the start of a new contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rMoveTo(float dx, float dy)",
    "returnType" : "void",
    "comment" : "\n     * Set the beginning of the next contour relative to the last point on the\n     * previous contour. If there is no previous contour, this is treated the\n     * same as moveTo().\n     *\n     * @param dx The amount to add to the x-coordinate of the end of the\n     *           previous contour, to specify the start of a new contour\n     * @param dy The amount to add to the y-coordinate of the end of the\n     *           previous contour, to specify the start of a new contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void lineTo(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Add a line from the last point to the specified point (x,y).\n     * If no moveTo() call has been made for this contour, the first point is\n     * automatically set to (0,0).\n     *\n     * @param x The x-coordinate of the end of a line\n     * @param y The y-coordinate of the end of a line\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rLineTo(float dx, float dy)",
    "returnType" : "void",
    "comment" : "\n     * Same as lineTo, but the coordinates are considered relative to the last\n     * point on this contour. If there is no previous point, then a moveTo(0,0)\n     * is inserted automatically.\n     *\n     * @param dx The amount to add to the x-coordinate of the previous point on\n     *           this contour, to specify a line\n     * @param dy The amount to add to the y-coordinate of the previous point on\n     *           this contour, to specify a line\n     ",
    "links" : [ ]
  }, {
    "name" : "public void quadTo(float x1, float y1, float x2, float y2)",
    "returnType" : "void",
    "comment" : "\n     * Add a quadratic bezier from the last point, approaching control point\n     * (x1,y1), and ending at (x2,y2). If no moveTo() call has been made for\n     * this contour, the first point is automatically set to (0,0).\n     *\n     * @param x1 The x-coordinate of the control point on a quadratic curve\n     * @param y1 The y-coordinate of the control point on a quadratic curve\n     * @param x2 The x-coordinate of the end point on a quadratic curve\n     * @param y2 The y-coordinate of the end point on a quadratic curve\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rQuadTo(float dx1, float dy1, float dx2, float dy2)",
    "returnType" : "void",
    "comment" : "\n     * Same as quadTo, but the coordinates are considered relative to the last\n     * point on this contour. If there is no previous point, then a moveTo(0,0)\n     * is inserted automatically.\n     *\n     * @param dx1 The amount to add to the x-coordinate of the last point on\n     *            this contour, for the control point of a quadratic curve\n     * @param dy1 The amount to add to the y-coordinate of the last point on\n     *            this contour, for the control point of a quadratic curve\n     * @param dx2 The amount to add to the x-coordinate of the last point on\n     *            this contour, for the end point of a quadratic curve\n     * @param dy2 The amount to add to the y-coordinate of the last point on\n     *            this contour, for the end point of a quadratic curve\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cubicTo(float x1, float y1, float x2, float y2, float x3, float y3)",
    "returnType" : "void",
    "comment" : "\n     * Add a cubic bezier from the last point, approaching control points\n     * (x1,y1) and (x2,y2), and ending at (x3,y3). If no moveTo() call has been\n     * made for this contour, the first point is automatically set to (0,0).\n     *\n     * @param x1 The x-coordinate of the 1st control point on a cubic curve\n     * @param y1 The y-coordinate of the 1st control point on a cubic curve\n     * @param x2 The x-coordinate of the 2nd control point on a cubic curve\n     * @param y2 The y-coordinate of the 2nd control point on a cubic curve\n     * @param x3 The x-coordinate of the end point on a cubic curve\n     * @param y3 The y-coordinate of the end point on a cubic curve\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rCubicTo(float dx1, float dy1, float dx2, float dy2, float dx3, float dy3)",
    "returnType" : "void",
    "comment" : "\n     * Same as cubicTo, but the coordinates are considered relative to the\n     * current point on this contour. If there is no previous point, then a\n     * moveTo(0,0) is inserted automatically.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)",
    "returnType" : "void",
    "comment" : "\n     * Append the specified arc to the path as a new contour. If the start of\n     * the path is different from the path's current last point, then an\n     * automatic lineTo() is added to connect the current contour to the\n     * start of the arc. However, if the path is empty, then we call moveTo()\n     * with the first point of the arc. The sweep angle is tread mod 360.\n     *\n     * @param left        The left of oval defining shape and size of the arc\n     * @param top         The top of oval defining shape and size of the arc\n     * @param right       The right of oval defining shape and size of the arc\n     * @param bottom      The bottom of oval defining shape and size of the arc\n     * @param startAngle  Starting angle (in degrees) where the arc begins\n     * @param sweepAngle  Sweep angle (in degrees) measured clockwise, treated\n     *                    mod 360.\n     * @param forceMoveTo If true, always begin a new contour with the arc\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the current contour. If the current point is not equal to the\n     * first point of the contour, a line segment is automatically added.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetLastPointFromPath()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addRect(float left, float top, float right, float bottom, int dir)",
    "returnType" : "void",
    "comment" : "\n     * Add a closed rectangle contour to the path\n     *\n     * @param left   The left side of a rectangle to add to the path\n     * @param top    The top of a rectangle to add to the path\n     * @param right  The right side of a rectangle to add to the path\n     * @param bottom The bottom of a rectangle to add to the path\n     * @param dir    The direction to wind the rectangle's contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void offset(float dx, float dy)",
    "returnType" : "void",
    "comment" : "\n     * Offset the path by (dx,dy), returning true on success\n     *\n     * @param dx  The amount in the X direction to offset the entire path\n     * @param dy  The amount in the Y direction to offset the entire path\n     ",
    "links" : [ ]
  }, {
    "name" : "public void transform(Matrix_Delegate matrix, Path_Delegate dst)",
    "returnType" : "void",
    "comment" : "\n     * Transform the points in this path by matrix, and write the answer\n     * into dst. If dst is null, then the the original path is modified.\n     *\n     * @param matrix The matrix to apply to the path\n     * @param dst    The transformed path is written here. If dst is null,\n     *               then the the original path is modified\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sManager", "EPSILON", "sFinalizer", "mFillType", "mPath", "mLastX", "mLastY", "mCachedIsEmpty" ],
  "methodNames" : [ "public static Path_Delegate getDelegate(long nPath)", "public Path2D getJavaShape()", "public void setJavaShape(Shape shape)", "public void reset()", "public void setPathIterator(PathIterator iterator)", " static long nInit()", " static long nInit(long nPath)", " static void nReset(long nPath)", " static void nRewind(long nPath)", " static void nSet(long native_dst, long nSrc)", " static boolean nIsConvex(long nPath)", " static int nGetFillType(long nPath)", "public static void nSetFillType(long nPath, int ft)", " static boolean nIsEmpty(long nPath)", " static boolean nIsRect(long nPath, RectF rect)", " static void nComputeBounds(long nPath, RectF bounds)", " static void nIncReserve(long nPath, int extraPtCount)", " static void nMoveTo(long nPath, float x, float y)", " static void nRMoveTo(long nPath, float dx, float dy)", " static void nLineTo(long nPath, float x, float y)", " static void nRLineTo(long nPath, float dx, float dy)", " static void nQuadTo(long nPath, float x1, float y1, float x2, float y2)", " static void nRQuadTo(long nPath, float dx1, float dy1, float dx2, float dy2)", " static void nCubicTo(long nPath, float x1, float y1, float x2, float y2, float x3, float y3)", " static void nRCubicTo(long nPath, float x1, float y1, float x2, float y2, float x3, float y3)", " static void nArcTo(long nPath, float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)", " static void nClose(long nPath)", " static void nAddRect(long nPath, float left, float top, float right, float bottom, int dir)", " static void nAddOval(long nPath, float left, float top, float right, float bottom, int dir)", " static void nAddCircle(long nPath, float x, float y, float radius, int dir)", " static void nAddArc(long nPath, float left, float top, float right, float bottom, float startAngle, float sweepAngle)", " static void nAddRoundRect(long nPath, float left, float top, float right, float bottom, float rx, float ry, int dir)", " static void nAddRoundRect(long nPath, float left, float top, float right, float bottom, float[] radii, int dir)", " static void nAddPath(long nPath, long src, float dx, float dy)", " static void nAddPath(long nPath, long src)", " static void nAddPath(long nPath, long src, long matrix)", " static void nOffset(long nPath, float dx, float dy)", " static void nSetLastPoint(long nPath, float dx, float dy)", " static void nTransform(long nPath, long matrix, long dst_path)", " static void nTransform(long nPath, long matrix)", " static boolean nOp(long nPath1, long nPath2, int op, long result)", " static long nGetFinalizer()", " static float[] nApproximate(long nPath, float error)", "private void set(Path_Delegate delegate)", "private void setFillType(FillType fillType)", "private static int getWindingRule(FillType type)", "private static Direction getDirection(int direction)", "public static void addPath(long destPath, long srcPath, AffineTransform transform)", "public boolean hasPoints()", "public boolean isEmpty()", "public void fillBounds(RectF bounds)", "public void moveTo(float x, float y)", "public void rMoveTo(float dx, float dy)", "public void lineTo(float x, float y)", "public void rLineTo(float dx, float dy)", "public void quadTo(float x1, float y1, float x2, float y2)", "public void rQuadTo(float dx1, float dy1, float dx2, float dy2)", "public void cubicTo(float x1, float y1, float x2, float y2, float x3, float y3)", "public void rCubicTo(float dx1, float dy1, float dx2, float dy2, float dx3, float dy3)", "public void arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)", "public void close()", "private void resetLastPointFromPath()", "public void addRect(float left, float top, float right, float bottom, int dir)", "public void offset(float dx, float dy)", "public void transform(Matrix_Delegate matrix, Path_Delegate dst)" ]
}