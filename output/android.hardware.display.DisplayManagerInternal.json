{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/display/DisplayManagerInternal.java",
  "packageName" : "android.hardware.display",
  "className" : "DisplayManagerInternal",
  "comment" : "\n * Display manager local system service interface.\n *\n * @hide Only for use within the system server.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "REFRESH_RATE_LIMIT_HIGH_BRIGHTNESS_MODE",
    "type" : "int",
    "comment" : " Refresh rate should be limited when High Brightness Mode is active. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void initPowerManagement(DisplayPowerCallbacks callbacks, Handler handler, SensorManager sensorManager)",
    "returnType" : "void",
    "comment" : "\n     * Called by the power manager to initialize power management facilities.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int createVirtualDisplay(VirtualDisplayConfig config, IVirtualDisplayCallback callback, IVirtualDevice virtualDevice, DisplayWindowPolicyController dwpc, String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Called by the VirtualDeviceManagerService to create a VirtualDisplay owned by a\n     * VirtualDevice.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean requestPowerState(int groupId, DisplayPowerRequest request, boolean waitForNegativeProximity)",
    "returnType" : "boolean",
    "comment" : "\n     * Called by the power manager to request a new power state.\n     * <p>\n     * The display power controller makes a copy of the provided object and then\n     * begins adjusting the power state to match what was requested.\n     * </p>\n     *\n     * @param groupId The identifier for the display group being requested to change power state\n     * @param request The requested power state.\n     * @param waitForNegativeProximity If {@code true}, issues a request to wait for\n     * negative proximity before turning the screen back on, assuming the screen\n     * was turned off by the proximity sensor.\n     * @return {@code true} if display group is ready, {@code false} if there are important\n     * changes that must be made asynchronously (such as turning the screen on), in which case\n     * the caller should grab a wake lock, watch for {@link DisplayPowerCallbacks#onStateChanged}\n     * then try the request again later until the state converges. If the provided {@code groupId}\n     * cannot be found then {@code true} will be returned.\n     ",
    "links" : [ "#onStateChanged" ]
  }, {
    "name" : "public abstract boolean isProximitySensorAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the proximity sensor screen-off function is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerDisplayGroupListener(DisplayGroupListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a display group listener which will be informed of the addition, removal, or change\n     * of display groups.\n     *\n     * @param listener The listener to register.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void unregisterDisplayGroupListener(DisplayGroupListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a display group listener which will be informed of the addition, removal, or\n     * change of display groups.\n     *\n     * @param listener The listener to unregister.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ScreenCapture.ScreenshotHardwareBuffer systemScreenshot(int displayId)",
    "returnType" : "ScreenCapture.ScreenshotHardwareBuffer",
    "comment" : "\n     * Screenshot for internal system-only use such as rotation, etc.  This method includes\n     * secure layers and the result should never be exposed to non-system applications.\n     * This method does not apply any rotation and provides the output in natural orientation.\n     *\n     * @param displayId The display id to take the screenshot of.\n     * @return The buffer or null if we have failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ScreenCapture.ScreenshotHardwareBuffer userScreenshot(int displayId)",
    "returnType" : "ScreenCapture.ScreenshotHardwareBuffer",
    "comment" : "\n     * General screenshot functionality that excludes secure layers and applies appropriate\n     * rotation that the device is currently in.\n     *\n     * @param displayId The display id to take the screenshot of.\n     * @return The buffer or null if we have failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract DisplayInfo getDisplayInfo(int displayId)",
    "returnType" : "DisplayInfo",
    "comment" : "\n     * Returns information about the specified logical display.\n     *\n     * @param displayId The logical display id.\n     * @return The logical display info, or null if the display does not exist.  The\n     * returned object must be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Set<DisplayInfo> getPossibleDisplayInfo(int displayId)",
    "returnType" : "Set<DisplayInfo>",
    "comment" : "\n     * Returns a set of DisplayInfo, for the states that may be assumed by either the given display,\n     * or any other display within that display's group.\n     *\n     * @param displayId The logical display id to fetch DisplayInfo for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Point getDisplayPosition(int displayId)",
    "returnType" : "Point",
    "comment" : "\n     * Returns the position of the display's projection.\n     *\n     * @param displayId The logical display id.\n     * @return The x, y coordinates of the display, or null if the display does not exist. The\n     * return object must be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerDisplayTransactionListener(DisplayTransactionListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a display transaction listener to provide the client a chance to\n     * update its surfaces within the same transaction as any display layout updates.\n     *\n     * @param listener The listener to register.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void unregisterDisplayTransactionListener(DisplayTransactionListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a display transaction listener to provide the client a chance to\n     * update its surfaces within the same transaction as any display layout updates.\n     *\n     * @param listener The listener to unregister.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayInfoOverrideFromWindowManager(int displayId, DisplayInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the display information of a particular logical display.\n     * This is used by the window manager to control the size and characteristics\n     * of the default display.  It is expected to apply the requested change\n     * to the display information synchronously so that applications will immediately\n     * observe the new state.\n     *\n     * NOTE: This method must be the only entry point by which the window manager\n     * influences the logical configuration of displays.\n     *\n     * @param displayId The logical display id.\n     * @param info The new data to be stored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void getNonOverrideDisplayInfo(int displayId, DisplayInfo outInfo)",
    "returnType" : "void",
    "comment" : "\n     * Get current display info without override from WindowManager.\n     * Current implementation of LogicalDisplay#getDisplayInfoLocked() always returns display info\n     * with overrides from WM if set. This method can be used for getting real display size without\n     * overrides to determine if real changes to display metrics happened.\n     * @param displayId Id of the target display.\n     * @param outInfo {@link DisplayInfo} to fill.\n     ",
    "links" : [ "android.view.DisplayInfo" ]
  }, {
    "name" : "public abstract void performTraversal(Transaction t, SparseArray<SurfaceControl.Transaction> displayTransactions)",
    "returnType" : "void",
    "comment" : "\n     * Called by the window manager to perform traversals while holding a\n     * surface flinger transaction.\n     * @param t The default transaction.\n     * @param displayTransactions The transactions mapped by display id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayProperties(int displayId, boolean hasContent, float requestedRefreshRate, int requestedModeId, float requestedMinRefreshRate, float requestedMaxRefreshRate, boolean requestedMinimalPostProcessing, boolean disableHdrConversion, boolean inTraversal)",
    "returnType" : "void",
    "comment" : "\n     * Tells the display manager about properties of the display that depend on the windows on it.\n     * This includes whether there is interesting unique content on the specified logical display,\n     * and whether the one of the windows has a preferred refresh rate.\n     * <p>\n     * If the display has unique content, then the display manager arranges for it\n     * to be presented on a physical display if appropriate.  Otherwise, the display manager\n     * may choose to make the physical display mirror some other logical display.\n     * </p>\n     *\n     * <p>\n     * If one of the windows on the display has a preferred refresh rate that's supported by the\n     * display, then the display manager will request its use.\n     * </p>\n     *\n     * @param displayId The logical display id to update.\n     * @param hasContent True if the logical display has content. This is used to control automatic\n     * mirroring.\n     * @param requestedRefreshRate The preferred refresh rate for the top-most visible window that\n     * has a preference.\n     * @param requestedModeId The preferred mode id for the top-most visible window that has a\n     * preference.\n     * @param requestedMinRefreshRate The preferred lowest refresh rate for the top-most visible\n     *                                window that has a preference.\n     * @param requestedMaxRefreshRate The preferred highest refresh rate for the top-most visible\n     *                                window that has a preference.\n     * @param requestedMinimalPostProcessing The preferred minimal post processing setting for the\n     * display. This is true when there is at least one visible window that wants minimal post\n     * processng on.\n     * @param disableHdrConversion The preferred HDR conversion setting for the window.\n     * @param inTraversal True if called from WindowManagerService during a window traversal\n     * prior to call to performTraversalInTransactionFromWindowManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayOffsets(int displayId, int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Applies an offset to the contents of a display, for example to avoid burn-in.\n     * <p>\n     * TODO: Technically this should be associated with a physical rather than logical\n     * display but this is good enough for now.\n     * </p>\n     *\n     * @param displayId The logical display id to update.\n     * @param x The X offset by which to shift the contents of the display.\n     * @param y The Y offset by which to shift the contents of the display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayScalingDisabled(int displayId, boolean disableScaling)",
    "returnType" : "void",
    "comment" : "\n     * Disables scaling for a display.\n     *\n     * @param displayId The logical display id to disable scaling for.\n     * @param disableScaling {@code true} to disable scaling,\n     * {@code false} to use the default scaling behavior of the logical display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayAccessUIDs(SparseArray<IntArray> displayAccessUIDs)",
    "returnType" : "void",
    "comment" : "\n     * Provide a list of UIDs that are present on the display and are allowed to access it.\n     *\n     * @param displayAccessUIDs Mapping displayId -> int array of UIDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void persistBrightnessTrackerState()",
    "returnType" : "void",
    "comment" : "\n     * Persist brightness slider events and ambient brightness stats.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onOverlayChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the display manager that resource overlays have changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract DisplayedContentSamplingAttributes getDisplayedContentSamplingAttributes(int displayId)",
    "returnType" : "DisplayedContentSamplingAttributes",
    "comment" : "\n     * Get the attributes available for display color sampling.\n     * @param displayId id of the display to collect the sample from.\n     *\n     * @return The attributes the display supports, or null if sampling is not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean setDisplayedContentSamplingEnabled(int displayId, boolean enable, int componentMask, int maxFrames)",
    "returnType" : "boolean",
    "comment" : "\n     * Enable or disable the collection of color samples.\n     *\n     * @param displayId id of the display to collect the sample from.\n     * @param componentMask a bitmask of the color channels to collect samples for, or zero for all\n     *                      available.\n     * @param maxFrames maintain a ringbuffer of the last maxFrames.\n     * @param enable True to enable, False to disable.\n     *\n     * @return True if sampling was enabled, false if failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract DisplayedContentSample getDisplayedContentSample(int displayId, long maxFrames, long timestamp)",
    "returnType" : "DisplayedContentSample",
    "comment" : "\n     * Accesses the color histogram statistics of displayed frames on devices that support sampling.\n     *\n     * @param displayId id of the display to collect the sample from\n     * @param maxFrames limit the statistics to the last maxFrames number of frames.\n     * @param timestamp discard statistics that were collected prior to timestamp, where timestamp\n     *                  is given as CLOCK_MONOTONIC.\n     * @return The statistics representing a histogram of the color distribution of the frames\n     *         displayed on-screen, or null if sampling is not supported.\n    ",
    "links" : [ ]
  }, {
    "name" : "public abstract void ignoreProximitySensorUntilChanged()",
    "returnType" : "void",
    "comment" : "\n     * Temporarily ignore proximity-sensor-based display behavior until there is a change\n     * to the proximity sensor state. This allows the display to turn back on even if something\n     * is obstructing the proximity sensor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getRefreshRateSwitchingType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the refresh rate switching type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract RefreshRateRange getRefreshRateForDisplayAndSensor(int displayId, String name, String type)",
    "returnType" : "RefreshRateRange",
    "comment" : "\n     * TODO: b/191384041 - Replace this with getRefreshRateLimitations()\n     * Return the refresh rate restriction for the specified display and sensor pairing. If the\n     * specified sensor is identified as an associated sensor in the specified display's\n     * display-device-config file, then return any refresh rate restrictions that it might define.\n     * If no restriction is specified, or the sensor is not associated with the display, then null\n     * will be returned.\n     *\n     * @param displayId The display to check against.\n     * @param name The name of the sensor.\n     * @param type The type of sensor.\n     *\n     * @return The min/max refresh-rate restriction as a {@link Pair} of floats, or null if not\n     * restricted.\n     ",
    "links" : [ "Pair" ]
  }, {
    "name" : "public abstract List<RefreshRateLimitation> getRefreshRateLimitations(int displayId)",
    "returnType" : "List<RefreshRateLimitation>",
    "comment" : "\n     * Returns a list of various refresh rate limitations for the specified display.\n     *\n     * @param displayId The display to get limitations for.\n     *\n     * @return a list of {@link RefreshRateLimitation}s describing the various limits.\n     ",
    "links" : [ "RefreshRateLimitation" ]
  }, {
    "name" : "public abstract void setWindowManagerMirroring(int displayId, boolean isMirroring)",
    "returnType" : "void",
    "comment" : "\n     * For the given displayId, updates if WindowManager is responsible for mirroring on that\n     * display. If {@code false}, then SurfaceFlinger performs no layer mirroring to the\n     * given display.\n     * Only used for mirroring started from MediaProjection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Point getDisplaySurfaceDefaultSize(int displayId)",
    "returnType" : "Point",
    "comment" : "\n     * Returns the default size of the surface associated with the display, or null if the surface\n     * is not provided for layer mirroring by SurfaceFlinger. Size is rotated to reflect the current\n     * display device orientation.\n     * Used for mirroring from MediaProjection, or a physical display based on display flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDisplayIdToMirror(int displayId)",
    "returnType" : "int",
    "comment" : "\n     * Get a new displayId which represents the display you want to mirror. If mirroring is not\n     * enabled on the display, {@link Display#INVALID_DISPLAY} will be returned.\n     *\n     * @param displayId The id of the display.\n     * @return The displayId that should be mirrored or INVALID_DISPLAY if mirroring is not enabled.\n     ",
    "links" : [ "android.view.Display#INVALID_DISPLAY" ]
  }, {
    "name" : "public abstract void onEarlyInteractivityChange(boolean interactive)",
    "returnType" : "void",
    "comment" : "\n     * Receives early interactivity changes from power manager.\n     *\n     * @param interactive The interactive state that the device is moving into.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract DisplayWindowPolicyController getDisplayWindowPolicyController(int displayId)",
    "returnType" : "DisplayWindowPolicyController",
    "comment" : "\n     * Get {@link DisplayWindowPolicyController} associated to the {@link DisplayInfo#displayId}\n     *\n     * @param displayId The id of the display.\n     * @return The associated {@link DisplayWindowPolicyController}.\n     ",
    "links" : [ "android.view.DisplayInfo#displayId", "android.window.DisplayWindowPolicyController" ]
  }, {
    "name" : "public abstract SurfaceControl.DisplayPrimaries getDisplayNativePrimaries(int displayId)",
    "returnType" : "SurfaceControl.DisplayPrimaries",
    "comment" : "\n     * Get DisplayPrimaries from SF for a particular display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract HostUsiVersion getHostUsiVersion(int displayId)",
    "returnType" : "HostUsiVersion",
    "comment" : "\n     * Get the version of the Universal Stylus Initiative (USI) Protocol supported by the display.\n     * @param displayId The id of the display.\n     * @return The USI version, or null if not supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract AmbientLightSensorData getAmbientLightSensorData(int displayId)",
    "returnType" : "AmbientLightSensorData",
    "comment" : "\n     * Get the ALS data for a particular display.\n     *\n     * @param displayId The id of the display.\n     * @return {@link AmbientLightSensorData}\n     ",
    "links" : [ "AmbientLightSensorData" ]
  }, {
    "name" : "public abstract IntArray getDisplayGroupIds()",
    "returnType" : "IntArray",
    "comment" : "\n     * Get all available DisplayGroupIds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onPresentation(int displayId, boolean isShown)",
    "returnType" : "void",
    "comment" : "\n     * Called upon presentation started/ended on the display.\n     * @param displayId the id of the display where presentation started.\n     * @param isShown whether presentation is shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract DisplayOffloadSession registerDisplayOffloader(int displayId, DisplayOffloader displayOffloader)",
    "returnType" : "DisplayOffloadSession",
    "comment" : "\n     * Associate a internal display to a {@link DisplayOffloader}.\n     *\n     * @param displayId the id of the internal display.\n     * @param displayOffloader the {@link DisplayOffloader} that controls offloading ops of internal\n     *                         display whose id is displayId.\n     * @return a {@link DisplayOffloadSession} associated with given displayId and displayOffloader.\n     ",
    "links" : [ "DisplayOffloadSession", "DisplayOffloader" ]
  } ],
  "methodNames" : [ "public abstract void initPowerManagement(DisplayPowerCallbacks callbacks, Handler handler, SensorManager sensorManager)", "public abstract int createVirtualDisplay(VirtualDisplayConfig config, IVirtualDisplayCallback callback, IVirtualDevice virtualDevice, DisplayWindowPolicyController dwpc, String packageName)", "public abstract boolean requestPowerState(int groupId, DisplayPowerRequest request, boolean waitForNegativeProximity)", "public abstract boolean isProximitySensorAvailable()", "public abstract void registerDisplayGroupListener(DisplayGroupListener listener)", "public abstract void unregisterDisplayGroupListener(DisplayGroupListener listener)", "public abstract ScreenCapture.ScreenshotHardwareBuffer systemScreenshot(int displayId)", "public abstract ScreenCapture.ScreenshotHardwareBuffer userScreenshot(int displayId)", "public abstract DisplayInfo getDisplayInfo(int displayId)", "public abstract Set<DisplayInfo> getPossibleDisplayInfo(int displayId)", "public abstract Point getDisplayPosition(int displayId)", "public abstract void registerDisplayTransactionListener(DisplayTransactionListener listener)", "public abstract void unregisterDisplayTransactionListener(DisplayTransactionListener listener)", "public abstract void setDisplayInfoOverrideFromWindowManager(int displayId, DisplayInfo info)", "public abstract void getNonOverrideDisplayInfo(int displayId, DisplayInfo outInfo)", "public abstract void performTraversal(Transaction t, SparseArray<SurfaceControl.Transaction> displayTransactions)", "public abstract void setDisplayProperties(int displayId, boolean hasContent, float requestedRefreshRate, int requestedModeId, float requestedMinRefreshRate, float requestedMaxRefreshRate, boolean requestedMinimalPostProcessing, boolean disableHdrConversion, boolean inTraversal)", "public abstract void setDisplayOffsets(int displayId, int x, int y)", "public abstract void setDisplayScalingDisabled(int displayId, boolean disableScaling)", "public abstract void setDisplayAccessUIDs(SparseArray<IntArray> displayAccessUIDs)", "public abstract void persistBrightnessTrackerState()", "public abstract void onOverlayChanged()", "public abstract DisplayedContentSamplingAttributes getDisplayedContentSamplingAttributes(int displayId)", "public abstract boolean setDisplayedContentSamplingEnabled(int displayId, boolean enable, int componentMask, int maxFrames)", "public abstract DisplayedContentSample getDisplayedContentSample(int displayId, long maxFrames, long timestamp)", "public abstract void ignoreProximitySensorUntilChanged()", "public abstract int getRefreshRateSwitchingType()", "public abstract RefreshRateRange getRefreshRateForDisplayAndSensor(int displayId, String name, String type)", "public abstract List<RefreshRateLimitation> getRefreshRateLimitations(int displayId)", "public abstract void setWindowManagerMirroring(int displayId, boolean isMirroring)", "public abstract Point getDisplaySurfaceDefaultSize(int displayId)", "public abstract int getDisplayIdToMirror(int displayId)", "public abstract void onEarlyInteractivityChange(boolean interactive)", "public abstract DisplayWindowPolicyController getDisplayWindowPolicyController(int displayId)", "public abstract SurfaceControl.DisplayPrimaries getDisplayNativePrimaries(int displayId)", "public abstract HostUsiVersion getHostUsiVersion(int displayId)", "public abstract AmbientLightSensorData getAmbientLightSensorData(int displayId)", "public abstract IntArray getDisplayGroupIds()", "public abstract void onPresentation(int displayId, boolean isShown)", "public abstract DisplayOffloadSession registerDisplayOffloader(int displayId, DisplayOffloader displayOffloader)" ],
  "variableNames" : [ "REFRESH_RATE_LIMIT_HIGH_BRIGHTNESS_MODE" ]
}