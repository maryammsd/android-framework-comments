{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/Binder.java",
  "packageName" : "android.os",
  "className" : "Binder",
  "comment" : "\n * Base class for a remotable object, the core part of a lightweight\n * remote procedure call mechanism defined by {@link IBinder}.\n * This class is an implementation of IBinder that provides\n * standard local implementation of such an object.\n *\n * <p>Most developers will not implement this class directly, instead using the\n * <a href=\"{@docRoot}guide/components/aidl.html\">aidl</a> tool to describe the desired\n * interface, having it generate the appropriate Binder subclass.  You can,\n * however, derive directly from Binder to implement your own custom RPC\n * protocol or simply instantiate a raw Binder object directly to use as a\n * token that can be shared across processes.\n *\n * <p>This class is just a basic IPC primitive; it has no impact on an application's\n * lifecycle, and is valid only as long as the process that created it continues to run.\n * To use this correctly, you must be doing so within the context of a top-level\n * application component (a {@link android.app.Service}, {@link android.app.Activity},\n * or {@link android.content.ContentProvider}) that lets the system know your process\n * should remain running.</p>\n *\n * <p>You must keep in mind the situations in which your process\n * could go away, and thus require that you later re-create a new Binder and re-attach\n * it when the process starts again.  For example, if you are using this within an\n * {@link android.app.Activity}, your activity's process may be killed any time the\n * activity is not started; if the activity is later re-created you will need to\n * create a new Binder and hand it back to the correct place again; you need to be\n * aware that your process may be started for another reason (for example to receive\n * a broadcast) that will not involve re-creating the activity and thus run its code\n * to create a new Binder.</p>\n *\n * @see IBinder\n ",
  "variables" : [ {
    "name" : "FIND_POTENTIAL_LEAKS",
    "type" : "boolean",
    "comment" : "\n     * Set this flag to true to detect anonymous, local or member classes\n     * that extend this Binder class and that are not static. These kind\n     * of classes can potentially create leaks.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHECK_PARCEL_SIZE",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_RUNTIME_EXCEPTION",
    "type" : "boolean",
    "comment" : " DO NOT SUBMIT WITH TRUE",
    "links" : [ ]
  }, {
    "name" : "UNSET_WORKSOURCE",
    "type" : "int",
    "comment" : "\n     * Value to represents that a calling work source is not set.\n     *\n     * This constatnt needs to be kept in sync with IPCThreadState::kUnsetWorkSource.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sDumpDisabled",
    "type" : "String",
    "comment" : "\n     * Control whether dump() calls are allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "sTransactionTracker",
    "type" : "TransactionTracker",
    "comment" : "\n     * Global transaction tracker instance for this process.\n     ",
    "links" : [ ]
  }, {
    "name" : "sObserver",
    "type" : "BinderInternal.Observer",
    "comment" : "\n     * Global observer for this process.\n     ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_ALLOCATION_SIZE",
    "type" : "int",
    "comment" : "\n     * Guestimate of native memory associated with a Binder.\n     ",
    "links" : [ ]
  }, {
    "name" : "sTracingEnabled",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating whether we should be tracing transact calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "sWarnOnBlocking",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "sWarnOnBlockingOnCurrentThread",
    "type" : "ThreadLocal<Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObject",
    "type" : "long",
    "comment" : "\n     * Raw native pointer to JavaBBinderHolder object. Owned by this Java object. Not null.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOwner",
    "type" : "IInterface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescriptor",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sWorkSourceProvider",
    "type" : "BinderInternal.WorkSourceProvider",
    "comment" : "\n     * By default, we use the calling uid since we can always trust it.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long getNativeFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void enableTracing()",
    "returnType" : "void",
    "comment" : "\n     * Enable Binder IPC tracing.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void disableTracing()",
    "returnType" : "void",
    "comment" : "\n     * Disable Binder IPC tracing.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isTracingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if binder transaction tracing is enabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized TransactionTracker getTransactionTracker()",
    "returnType" : "TransactionTracker",
    "comment" : "\n     * Get the binder transaction tracker for this process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setObserver(@Nullable BinderInternal.Observer observer)",
    "returnType" : "void",
    "comment" : "\n     * Get the binder transaction observer for this process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setWarnOnBlocking(boolean warnOnBlocking)",
    "returnType" : "void",
    "comment" : "\n     * Warn if any blocking binder transactions are made out from this process.\n     * This is typically only useful for the system process, to prevent it from\n     * blocking on calls to external untrusted code. Instead, all outgoing calls\n     * that require a result must be sent as {@link IBinder#FLAG_ONEWAY} calls\n     * which deliver results through a callback interface.\n     *\n     * @hide\n     ",
    "links" : [ "IBinder#FLAG_ONEWAY" ]
  }, {
    "name" : "public static IBinder allowBlocking(IBinder binder)",
    "returnType" : "IBinder",
    "comment" : "\n     * Allow blocking calls on the given interface, overriding the requested\n     * value of {@link #setWarnOnBlocking(boolean)}.\n     * <p>\n     * This should only be rarely called when you are <em>absolutely sure</em>\n     * the remote interface is a built-in system component that can never be\n     * upgraded. In particular, this <em>must never</em> be called for\n     * interfaces hosted by package that could be upgraded or replaced,\n     * otherwise you risk system instability if that remote interface wedges.\n     *\n     * @hide\n     ",
    "links" : [ "#setWarnOnBlocking" ]
  }, {
    "name" : "public static IBinder defaultBlocking(IBinder binder)",
    "returnType" : "IBinder",
    "comment" : "\n     * Reset the given interface back to the default blocking behavior,\n     * reverting any changes made by {@link #allowBlocking(IBinder)}.\n     *\n     * @hide\n     ",
    "links" : [ "#allowBlocking" ]
  }, {
    "name" : "public static void copyAllowBlocking(IBinder fromBinder, IBinder toBinder)",
    "returnType" : "void",
    "comment" : "\n     * Inherit the current {@link #allowBlocking(IBinder)} value from one given\n     * interface to another.\n     *\n     * @hide\n     ",
    "links" : [ "#allowBlocking" ]
  }, {
    "name" : "public static void allowBlockingForCurrentThread()",
    "returnType" : "void",
    "comment" : "\n     * Allow blocking calls for the current thread.  See {@link #allowBlocking}.\n     *\n     * @hide\n     ",
    "links" : [ "#allowBlocking" ]
  }, {
    "name" : "public static void defaultBlockingForCurrentThread()",
    "returnType" : "void",
    "comment" : "\n     * Reset the current thread to the default blocking behavior.  See {@link #defaultBlocking}.\n     *\n     * @hide\n     ",
    "links" : [ "#defaultBlocking" ]
  }, {
    "name" : "public static final native int getCallingPid()",
    "returnType" : "int",
    "comment" : "\n     * Return the ID of the process that sent you the current transaction\n     * that is being processed.  This pid can be used with higher-level\n     * system services to determine its identity and check permissions.\n     * If the current thread is not currently executing an incoming transaction,\n     * then its own pid is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native int getCallingUid()",
    "returnType" : "int",
    "comment" : "\n     * Return the Linux uid assigned to the process that sent you the\n     * current transaction that is being processed.  This uid can be used with\n     * higher-level system services to determine its identity and check\n     * permissions.  If the current thread is not currently executing an\n     * incoming transaction, then its own uid is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native boolean isHandlingTransaction()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the current thread is currently executing an\n     * incoming transaction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getCallingUidOrThrow()",
    "returnType" : "int",
    "comment" : "\n     * Return the Linux uid assigned to the process that sent the transaction\n     * currently being processed.\n     *\n     * @throws IllegalStateException if the current thread is not currently\n     *        executing an incoming transaction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final UserHandle getCallingUserHandle()",
    "returnType" : "UserHandle",
    "comment" : "\n     * Return the UserHandle assigned to the process that sent you the\n     * current transaction that is being processed.  This is the user\n     * of the caller.  It is distinct from {@link #getCallingUid()} in that a\n     * particular user will have multiple distinct apps running under it each\n     * with their own uid.  If the current thread is not currently executing an\n     * incoming transaction, then its own UserHandle is returned.\n     ",
    "links" : [ "#getCallingUid" ]
  }, {
    "name" : "public static final native long clearCallingIdentity()",
    "returnType" : "long",
    "comment" : "\n     * Reset the identity of the incoming IPC on the current thread.  This can\n     * be useful if, while handling an incoming call, you will be calling\n     * on interfaces of other objects that may be local to your process and\n     * need to do permission checks on the calls coming into them (so they\n     * will check the permission of your own local process, and not whatever\n     * process originally called you).\n     *\n     * @return Returns an opaque token that can be used to restore the\n     * original calling identity by passing it to\n     * {@link #restoreCallingIdentity(long)}.\n     *\n     * @see #getCallingPid()\n     * @see #getCallingUid()\n     * @see #restoreCallingIdentity(long)\n     ",
    "links" : [ "#restoreCallingIdentity" ]
  }, {
    "name" : "public static final native void restoreCallingIdentity(long token)",
    "returnType" : "void",
    "comment" : "\n     * Restore the identity of the incoming IPC on the current thread\n     * back to a previously identity that was returned by {@link\n     * #clearCallingIdentity}.\n     *\n     * @param token The opaque token that was previously returned by\n     * {@link #clearCallingIdentity}.\n     *\n     * @see #clearCallingIdentity\n     ",
    "links" : [ "#clearCallingIdentity" ]
  }, {
    "name" : "public static final void withCleanCallingIdentity(@NonNull ThrowingRunnable action)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method for running the provided action enclosed in\n     * {@link #clearCallingIdentity}/{@link #restoreCallingIdentity}\n     *\n     * Any exception thrown by the given action will be caught and rethrown after the call to\n     * {@link #restoreCallingIdentity}\n     *\n     * @hide\n     ",
    "links" : [ "#clearCallingIdentity", "#restoreCallingIdentity", "#restoreCallingIdentity" ]
  }, {
    "name" : "public static final T withCleanCallingIdentity(@NonNull ThrowingSupplier<T> action)",
    "returnType" : "T",
    "comment" : "\n     * Convenience method for running the provided action enclosed in\n     * {@link #clearCallingIdentity}/{@link #restoreCallingIdentity} returning the result\n     *\n     * Any exception thrown by the given action will be caught and rethrown after the call to\n     * {@link #restoreCallingIdentity}\n     *\n     * @hide\n     ",
    "links" : [ "#clearCallingIdentity", "#restoreCallingIdentity", "#restoreCallingIdentity" ]
  }, {
    "name" : "public static final native void setThreadStrictModePolicy(int policyMask)",
    "returnType" : "void",
    "comment" : "\n     * Sets the native thread-local StrictMode policy mask.\n     *\n     * <p>The StrictMode settings are kept in two places: a Java-level\n     * threadlocal for libcore/Dalvik, and a native threadlocal (set\n     * here) for propagation via Binder calls.  This is a little\n     * unfortunate, but necessary to break otherwise more unfortunate\n     * dependencies either of Dalvik on Android, or Android\n     * native-only code on Dalvik.\n     *\n     * @see StrictMode\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native int getThreadStrictModePolicy()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current native thread-local StrictMode policy mask.\n     *\n     * @see #setThreadStrictModePolicy\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native long setCallingWorkSourceUid(int workSource)",
    "returnType" : "long",
    "comment" : "\n     * Sets the work source for this thread.\n     *\n     * <p>All the following binder calls on this thread will use the provided work source. If this\n     * is called during an on-going binder transaction, all the following binder calls will use the\n     * work source until the end of the transaction.\n     *\n     * <p>The concept of worksource is similar to {@link WorkSource}. However, for performance\n     * reasons, we only support one UID. This UID represents the original user responsible for the\n     * binder calls.\n     *\n     * <p>{@link Binder#restoreCallingWorkSource(long)} must always be called after setting the\n     * worksource.\n     *\n     * <p>A typical use case would be\n     * <pre>\n     * long token = Binder.setCallingWorkSourceUid(uid);\n     * try {\n     *   // Call an API.\n     * } finally {\n     *   Binder.restoreCallingWorkSource(token);\n     * }\n     * </pre>\n     *\n     * <p>The work source will be propagated for future outgoing binder transactions\n     * executed on this thread.\n     *\n     * @param workSource The original UID responsible for the binder call.\n     * @return token to restore original work source.\n     *",
    "links" : [ "WorkSource", "Binder#restoreCallingWorkSource" ]
  }, {
    "name" : "public static final native int getCallingWorkSourceUid()",
    "returnType" : "int",
    "comment" : "\n     * Returns the work source set by the caller.\n     *\n     * Unlike {@link Binder#getCallingUid()}, this result of this method cannot be trusted. The\n     * caller can set the value to whatever they want. Only use this value if you trust the calling\n     * uid.\n     *\n     * @return The original UID responsible for the binder transaction.\n     ",
    "links" : [ "Binder#getCallingUid" ]
  }, {
    "name" : "public static final native long clearCallingWorkSource()",
    "returnType" : "long",
    "comment" : "\n     * Clears the work source on this thread.\n     *\n     * <p>The work source will be propagated for future outgoing binder transactions\n     * executed on this thread.\n     *\n     * <p>{@link Binder#restoreCallingWorkSource(long)} must always be called after clearing the\n     * worksource.\n     *\n     * <p>A typical use case would be\n     * <pre>\n     * long token = Binder.clearCallingWorkSource();\n     * try {\n     *   // Call an API.\n     * } finally {\n     *   Binder.restoreCallingWorkSource(token);\n     * }\n     * </pre>\n     *\n     * @return token to restore original work source.\n     *",
    "links" : [ "Binder#restoreCallingWorkSource" ]
  }, {
    "name" : "public static final native void restoreCallingWorkSource(long token)",
    "returnType" : "void",
    "comment" : "\n     * Restores the work source on this thread using a token returned by\n     * {@link #setCallingWorkSourceUid(int) or {@link clearCallingWorkSource()}.\n     *\n     * <p>A typical use case would be\n     * <pre>\n     * long token = Binder.setCallingWorkSourceUid(uid);\n     * try {\n     *   // Call an API.\n     * } finally {\n     *   Binder.restoreCallingWorkSource(token);\n     * }\n     * </pre>\n     *",
    "links" : [ "#setCallingWorkSourceUid", "clearCallingWorkSource" ]
  }, {
    "name" : "public final native void markVintfStability()",
    "returnType" : "void",
    "comment" : "\n     * Mark as being built with VINTF-level stability promise. This API should\n     * only ever be invoked by the build system. It means that the interface\n     * represented by this binder is guaranteed to be kept stable for several\n     * years, and the build system also keeps snapshots of these APIs and\n     * invokes the AIDL compiler to make sure that these snapshots are\n     * backwards compatible. Instead of using this API, use an @VintfStability\n     * interface.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void flushPendingCommands()",
    "returnType" : "void",
    "comment" : "\n     * Flush any Binder commands pending in the current thread to the kernel\n     * driver.  This can be\n     * useful to call before performing an operation that may block for a long\n     * time, to ensure that any pending object references have been released\n     * in order to prevent the process from holding on to objects longer than\n     * it needs to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void joinThreadPool()",
    "returnType" : "void",
    "comment" : "\n     * Add the calling thread to the IPC thread pool.  This function does\n     * not return until the current process is exiting.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isProxy(IInterface iface)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified interface is a proxy.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void blockUntilThreadAvailable()",
    "returnType" : "void",
    "comment" : "\n     * Call blocks until the number of executing binder threads is less\n     * than the maximum number of binder threads allowed for this process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attachInterface(@Nullable IInterface owner, @Nullable String descriptor)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method for associating a specific interface with the Binder.\n     * After calling, queryLocalInterface() will be implemented for you\n     * to return the given owner IInterface when the corresponding\n     * descriptor is requested.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInterfaceDescriptor()",
    "returnType" : "String",
    "comment" : "\n     * Default implementation returns an empty interface name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean pingBinder()",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation always returns true -- if you got here,\n     * the object is alive.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBinderAlive()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * Note that if you're calling on a local binder, this always returns true\n     * because your process is alive if you're calling it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IInterface queryLocalInterface(@NonNull String descriptor)",
    "returnType" : "IInterface",
    "comment" : "\n     * Use information supplied to attachInterface() to return the\n     * associated IInterface if it matches the requested\n     * descriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDumpDisabled(String msg)",
    "returnType" : "void",
    "comment" : "\n     * Control disabling of dump calls in this process.  This is used by the system\n     * process watchdog to disable incoming dump calls while it has detecting the system\n     * is hung and is reporting that back to the activity controller.  This is to\n     * prevent the controller from getting hung up on bug reports at this point.\n     * @hide\n     *\n     * @param msg The message to show instead of the dump; if null, dumps are\n     * re-enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setProxyTransactListener(@Nullable ProxyTransactListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener for the transact method on the proxy-side.\n     *\n     * <li>The listener is global. Only fast operations should be done to avoid thread\n     * contentions.\n     * <li>The listener implementation needs to handle synchronization if needed. The methods on the\n     * listener can be called concurrently.\n     * <li>Listener set will be used for new transactions. On-going transaction will still use the\n     * previous listener (if already set).\n     * <li>The listener is called on the critical path of the binder transaction so be careful about\n     * performance.\n     * <li>Never execute another binder transaction inside the listener.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onTransact(int code, @NonNull Parcel data, @Nullable Parcel reply, int flags) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation is a stub that returns false.  You will want\n     * to override this to do the appropriate unmarshalling of transactions.\n     *\n     * <p>If you want to call this, call transact().\n     *\n     * <p>Implementations that are returning a result should generally use\n     * {@link Parcel#writeNoException() Parcel.writeNoException} and\n     * {@link Parcel#writeException(Exception) Parcel.writeException} to propagate\n     * exceptions back to the caller.</p>\n     *\n     * @param code The action to perform.  This should\n     * be a number between {@link #FIRST_CALL_TRANSACTION} and\n     * {@link #LAST_CALL_TRANSACTION}.\n     * @param data Marshalled data being received from the caller.\n     * @param reply If the caller is expecting a result back, it should be marshalled\n     * in to here.\n     * @param flags Additional operation flags.  Either 0 for a normal\n     * RPC, or {@link #FLAG_ONEWAY} for a one-way RPC.\n     *\n     * @return Return true on a successful call; returning false is generally used to\n     * indicate that you did not understand the transaction code.\n     ",
    "links" : [ "Parcel#writeNoException", "Parcel#writeException", "#FIRST_CALL_TRANSACTION", "#LAST_CALL_TRANSACTION", "#FLAG_ONEWAY" ]
  }, {
    "name" : "public String getTransactionName(int transactionCode)",
    "returnType" : "String",
    "comment" : "\n     * Resolves a transaction code to a human readable name.\n     *\n     * <p>Default implementation is a stub that returns null.\n     * <p>AIDL generated code will return the original method name.\n     *\n     * @param transactionCode The code to resolve.\n     * @return A human readable name.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(@NonNull FileDescriptor fd, @Nullable String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Implemented to call the more convenient version\n     * {@link #dump(FileDescriptor, PrintWriter, String[])}.\n     ",
    "links" : [ "#dump" ]
  }, {
    "name" : " void doDump(FileDescriptor fd, PrintWriter pw, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpAsync(@NonNull final FileDescriptor fd, @Nullable final String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #dump(FileDescriptor, String[])}, but ensures the target\n     * executes asynchronously.\n     ",
    "links" : [ "#dump" ]
  }, {
    "name" : "protected void dump(@NonNull FileDescriptor fd, @NonNull PrintWriter fout, @Nullable String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Print the object's state into the given stream.\n     *\n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param fout The file to which you should dump your state.  This will be\n     * closed for you after you return.\n     * @param args additional arguments to the dump request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void shellCommand(@Nullable FileDescriptor in, @Nullable FileDescriptor out, @Nullable FileDescriptor err, @NonNull String[] args, @Nullable ShellCallback callback, @NonNull ResultReceiver resultReceiver) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * @param in The raw file descriptor that an input data stream can be read from.\n     * @param out The raw file descriptor that normal command messages should be written to.\n     * @param err The raw file descriptor that command error messages should be written to.\n     * @param args Command-line arguments.\n     * @param callback Callback through which to interact with the invoking shell.\n     * @param resultReceiver Called when the command has finished executing, with the result code.\n     * @throws RemoteException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onShellCommand(@Nullable FileDescriptor in, @Nullable FileDescriptor out, @Nullable FileDescriptor err, @NonNull String[] args, @Nullable ShellCallback callback, @NonNull ResultReceiver resultReceiver) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Handle a call to {@link #shellCommand}.\n     *\n     * <p>The default implementation performs a caller check to make sure the caller UID is of\n     * SHELL or ROOT, and then call {@link #handleShellCommand}.\n     *\n     * <p class=\"caution\">Note: no permission checking is done before calling this method; you must\n     * apply any security checks as appropriate for the command being executed.\n     * Consider using {@link ShellCommand} to help in the implementation.</p>\n     * @hide\n     ",
    "links" : [ "#shellCommand", "#handleShellCommand", "ShellCommand" ]
  }, {
    "name" : "public int handleShellCommand(@NonNull ParcelFileDescriptor in, @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err, @NonNull String[] args)",
    "returnType" : "int",
    "comment" : "\n     * System services can implement this method to implement ADB shell commands.\n     *\n     * <p>A system binder service can implement it to handle shell commands on ADB. For example,\n     * the Job Scheduler service implements it to handle <code>adb shell cmd jobscheduler</code>.\n     *\n     * <p>Commands are only executable by ADB shell; i.e. only {@link Process#SHELL_UID} and\n     * {@link Process#ROOT_UID} can call them.\n     *\n     * @param in standard input\n     * @param out standard output\n     * @param err standard error\n     * @param args arguments passed to the command. Can be empty. The first argument is typically\n     *             a subcommand, such as {@code run} for {@code adb shell cmd jobscheduler run}.\n     * @return the status code returned from the <code>cmd</code> command.\n     *\n     * @hide\n     ",
    "links" : [ "Process#SHELL_UID", "Process#ROOT_UID" ]
  }, {
    "name" : "public final native IBinder getExtension()",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final native void setExtension(@Nullable IBinder extension)",
    "returnType" : "void",
    "comment" : "\n     * Set the binder extension.\n     * This should be called immediately when the object is created.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean transact(int code, @NonNull Parcel data, @Nullable Parcel reply, int flags) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation rewinds the parcels and calls onTransact.  On\n     * the remote side, transact calls into the binder to do the IPC.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void linkToDeath(@NonNull DeathRecipient recipient, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Local implementation is a no-op.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean unlinkToDeath(@NonNull DeathRecipient recipient, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Local implementation is a no-op.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void checkParcel(IBinder obj, int code, Parcel parcel, String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long getNativeBBinderHolder()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long getFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setWorkSourceProvider(BinderInternal.WorkSourceProvider workSourceProvider)",
    "returnType" : "void",
    "comment" : "\n     * Sets the work source provider.\n     *\n     * <li>The callback is global. Only fast operations should be done to avoid thread\n     * contentions.\n     * <li>The callback implementation needs to handle synchronization if needed. The methods on the\n     * callback can be called concurrently.\n     * <li>The callback is called on the critical path of the binder transaction so be careful about\n     * performance.\n     * <li>Never execute another binder transaction inside the callback.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean execTransact(int code, long dataObj, long replyObj, int flags)",
    "returnType" : "boolean",
    "comment" : " Entry point from android_util_Binder.cpp's onTransact",
    "links" : [ ]
  }, {
    "name" : "private boolean execTransactInternal(int code, long dataObj, long replyObj, int flags, int callingUid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "FIND_POTENTIAL_LEAKS", "CHECK_PARCEL_SIZE", "TAG", "LOG_RUNTIME_EXCEPTION", "UNSET_WORKSOURCE", "sDumpDisabled", "sTransactionTracker", "sObserver", "NATIVE_ALLOCATION_SIZE", "sTracingEnabled", "sWarnOnBlocking", "sWarnOnBlockingOnCurrentThread", "mObject", "mOwner", "mDescriptor", "sWorkSourceProvider" ],
  "methodNames" : [ "private static native long getNativeFinalizer()", "public static void enableTracing()", "public static void disableTracing()", "public static boolean isTracingEnabled()", "public static synchronized TransactionTracker getTransactionTracker()", "public static void setObserver(@Nullable BinderInternal.Observer observer)", "public static void setWarnOnBlocking(boolean warnOnBlocking)", "public static IBinder allowBlocking(IBinder binder)", "public static IBinder defaultBlocking(IBinder binder)", "public static void copyAllowBlocking(IBinder fromBinder, IBinder toBinder)", "public static void allowBlockingForCurrentThread()", "public static void defaultBlockingForCurrentThread()", "public static final native int getCallingPid()", "public static final native int getCallingUid()", "public static final native boolean isHandlingTransaction()", "public static final int getCallingUidOrThrow()", "public static final UserHandle getCallingUserHandle()", "public static final native long clearCallingIdentity()", "public static final native void restoreCallingIdentity(long token)", "public static final void withCleanCallingIdentity(@NonNull ThrowingRunnable action)", "public static final T withCleanCallingIdentity(@NonNull ThrowingSupplier<T> action)", "public static final native void setThreadStrictModePolicy(int policyMask)", "public static final native int getThreadStrictModePolicy()", "public static final native long setCallingWorkSourceUid(int workSource)", "public static final native int getCallingWorkSourceUid()", "public static final native long clearCallingWorkSource()", "public static final native void restoreCallingWorkSource(long token)", "public final native void markVintfStability()", "public static final native void flushPendingCommands()", "public static final void joinThreadPool()", "public static final boolean isProxy(IInterface iface)", "public static final native void blockUntilThreadAvailable()", "public void attachInterface(@Nullable IInterface owner, @Nullable String descriptor)", "public String getInterfaceDescriptor()", "public boolean pingBinder()", "public boolean isBinderAlive()", "public IInterface queryLocalInterface(@NonNull String descriptor)", "public static void setDumpDisabled(String msg)", "public static void setProxyTransactListener(@Nullable ProxyTransactListener listener)", "protected boolean onTransact(int code, @NonNull Parcel data, @Nullable Parcel reply, int flags) throws RemoteException", "public String getTransactionName(int transactionCode)", "public void dump(@NonNull FileDescriptor fd, @Nullable String[] args)", " void doDump(FileDescriptor fd, PrintWriter pw, String[] args)", "public void dumpAsync(@NonNull final FileDescriptor fd, @Nullable final String[] args)", "protected void dump(@NonNull FileDescriptor fd, @NonNull PrintWriter fout, @Nullable String[] args)", "public void shellCommand(@Nullable FileDescriptor in, @Nullable FileDescriptor out, @Nullable FileDescriptor err, @NonNull String[] args, @Nullable ShellCallback callback, @NonNull ResultReceiver resultReceiver) throws RemoteException", "public void onShellCommand(@Nullable FileDescriptor in, @Nullable FileDescriptor out, @Nullable FileDescriptor err, @NonNull String[] args, @Nullable ShellCallback callback, @NonNull ResultReceiver resultReceiver) throws RemoteException", "public int handleShellCommand(@NonNull ParcelFileDescriptor in, @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err, @NonNull String[] args)", "public final native IBinder getExtension()", "public final native void setExtension(@Nullable IBinder extension)", "public final boolean transact(int code, @NonNull Parcel data, @Nullable Parcel reply, int flags) throws RemoteException", "public void linkToDeath(@NonNull DeathRecipient recipient, int flags)", "public boolean unlinkToDeath(@NonNull DeathRecipient recipient, int flags)", " static void checkParcel(IBinder obj, int code, Parcel parcel, String msg)", "private static native long getNativeBBinderHolder()", "private static native long getFinalizer()", "public static void setWorkSourceProvider(BinderInternal.WorkSourceProvider workSourceProvider)", "private boolean execTransact(int code, long dataObj, long replyObj, int flags)", "private boolean execTransactInternal(int code, long dataObj, long replyObj, int flags, int callingUid)" ]
}