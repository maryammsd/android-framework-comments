{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/Debug.java",
  "packageName" : "android.os",
  "className" : "MemoryInfo",
  "comment" : "\n     * This class is used to retrieved various statistics about the memory mappings for this\n     * process. The returned info is broken down by dalvik, native, and other. All results are in kB.\n     ",
  "variables" : [ {
    "name" : "dalvikPss",
    "type" : "int",
    "comment" : " The proportional set size for dalvik heap.  (Doesn't include other Dalvik overhead.) ",
    "links" : [ ]
  }, {
    "name" : "dalvikSwappablePss",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "dalvikRss",
    "type" : "int",
    "comment" : " @hide The resident set size for dalvik heap.  (Without other Dalvik overhead.) ",
    "links" : [ ]
  }, {
    "name" : "dalvikPrivateDirty",
    "type" : "int",
    "comment" : " The private dirty pages used by dalvik heap. ",
    "links" : [ ]
  }, {
    "name" : "dalvikSharedDirty",
    "type" : "int",
    "comment" : " The shared dirty pages used by dalvik heap. ",
    "links" : [ ]
  }, {
    "name" : "dalvikPrivateClean",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "dalvikSharedClean",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "dalvikSwappedOut",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "dalvikSwappedOutPss",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "nativePss",
    "type" : "int",
    "comment" : " The proportional set size for the native heap. ",
    "links" : [ ]
  }, {
    "name" : "nativeSwappablePss",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "nativeRss",
    "type" : "int",
    "comment" : " @hide The resident set size for the native heap. ",
    "links" : [ ]
  }, {
    "name" : "nativePrivateDirty",
    "type" : "int",
    "comment" : " The private dirty pages used by the native heap. ",
    "links" : [ ]
  }, {
    "name" : "nativeSharedDirty",
    "type" : "int",
    "comment" : " The shared dirty pages used by the native heap. ",
    "links" : [ ]
  }, {
    "name" : "nativePrivateClean",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "nativeSharedClean",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "nativeSwappedOut",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "nativeSwappedOutPss",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "otherPss",
    "type" : "int",
    "comment" : " The proportional set size for everything else. ",
    "links" : [ ]
  }, {
    "name" : "otherSwappablePss",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "otherRss",
    "type" : "int",
    "comment" : " @hide The resident set size for everything else. ",
    "links" : [ ]
  }, {
    "name" : "otherPrivateDirty",
    "type" : "int",
    "comment" : " The private dirty pages used by everything else. ",
    "links" : [ ]
  }, {
    "name" : "otherSharedDirty",
    "type" : "int",
    "comment" : " The shared dirty pages used by everything else. ",
    "links" : [ ]
  }, {
    "name" : "otherPrivateClean",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "otherSharedClean",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "otherSwappedOut",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "otherSwappedOutPss",
    "type" : "int",
    "comment" : " @hide We may want to expose this, eventually. ",
    "links" : [ ]
  }, {
    "name" : "hasSwappedOutPss",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HEAP_UNKNOWN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HEAP_DALVIK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HEAP_NATIVE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_OTHER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_STACK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_CURSOR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_ASHMEM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_GL_DEV",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_UNKNOWN_DEV",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_SO",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_JAR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_APK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_TTF",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DEX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_OAT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_ART",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_UNKNOWN_MAP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_GRAPHICS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_GL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_OTHER_MEMTRACK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NUM_OTHER_STATS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_NORMAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_LARGE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_ZYGOTE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_NON_MOVING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DVK_STAT_DALVIK_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DVK_STAT_DALVIK_END",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_OTHER_LINEARALLOC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_OTHER_ACCOUNTING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_OTHER_ZYGOTE_CODE_CACHE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_OTHER_APP_CODE_CACHE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_OTHER_COMPILER_METADATA",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DALVIK_OTHER_INDIRECT_REFERENCE_TABLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DVK_STAT_DALVIK_OTHER_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DVK_STAT_DALVIK_OTHER_END",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DEX_BOOT_VDEX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DEX_APP_DEX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DEX_APP_VDEX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DVK_STAT_DEX_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DVK_STAT_DEX_END",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_ART_APP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_ART_BOOT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DVK_STAT_ART_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OTHER_DVK_STAT_ART_END",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NUM_DVK_STATS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NUM_CATEGORIES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_PSS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_SWAPPABLE_PSS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_RSS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_PRIVATE_DIRTY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_SHARED_DIRTY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_PRIVATE_CLEAN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_SHARED_CLEAN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_SWAPPED_OUT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_SWAPPED_OUT_PSS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "otherStats",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<MemoryInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void set(MemoryInfo other)",
    "returnType" : "void",
    "comment" : "\n         * @hide Copy contents from another object.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalPss()",
    "returnType" : "int",
    "comment" : "\n         * Return total PSS memory usage in kB.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalUss()",
    "returnType" : "int",
    "comment" : "\n         * @hide Return total PSS memory usage in kB.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalSwappablePss()",
    "returnType" : "int",
    "comment" : "\n         * Return total PSS memory usage in kB mapping a file of one of the following extension:\n         * .so, .jar, .apk, .ttf, .dex, .odex, .oat, .art .\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalRss()",
    "returnType" : "int",
    "comment" : "\n         * @hide Return total RSS memory usage in kB.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalPrivateDirty()",
    "returnType" : "int",
    "comment" : "\n         * Return total private dirty memory usage in kB.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalSharedDirty()",
    "returnType" : "int",
    "comment" : "\n         * Return total shared dirty memory usage in kB.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalPrivateClean()",
    "returnType" : "int",
    "comment" : "\n         * Return total shared clean memory usage in kB.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalSharedClean()",
    "returnType" : "int",
    "comment" : "\n         * Return total shared clean memory usage in kB.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalSwappedOut()",
    "returnType" : "int",
    "comment" : "\n         * Return total swapped out memory in kB.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalSwappedOutPss()",
    "returnType" : "int",
    "comment" : "\n         * Return total swapped out memory in kB, proportional.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getOtherPss(int which)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getOtherSwappablePss(int which)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getOtherRss(int which)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getOtherPrivateDirty(int which)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getOtherSharedDirty(int which)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getOtherPrivateClean(int which)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getOtherPrivate(int which)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getOtherSharedClean(int which)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getOtherSwappedOut(int which)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getOtherSwappedOutPss(int which)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String getOtherLabel(int which)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getMemoryStat(String statName)",
    "returnType" : "String",
    "comment" : "\n       * Returns the value of a particular memory statistic or {@code null} if no\n       * such memory statistic exists.\n       *\n       * <p>The following table lists the memory statistics that are supported.\n       * Note that memory statistics may be added or removed in a future API level.</p>\n       *\n       * <table>\n       *     <thead>\n       *         <tr>\n       *             <th>Memory statistic name</th>\n       *             <th>Meaning</th>\n       *             <th>Example</th>\n       *             <th>Supported (API Levels)</th>\n       *         </tr>\n       *     </thead>\n       *     <tbody>\n       *         <tr>\n       *             <td>summary.java-heap</td>\n       *             <td>The private Java Heap usage in kB. This corresponds to the Java Heap field\n       *                 in the App Summary section output by dumpsys meminfo.</td>\n       *             <td>{@code 1442}</td>\n       *             <td>23</td>\n       *         </tr>\n       *         <tr>\n       *             <td>summary.native-heap</td>\n       *             <td>The private Native Heap usage in kB. This corresponds to the Native Heap\n       *                 field in the App Summary section output by dumpsys meminfo.</td>\n       *             <td>{@code 1442}</td>\n       *             <td>23</td>\n       *         </tr>\n       *         <tr>\n       *             <td>summary.code</td>\n       *             <td>The memory usage for static code and resources in kB. This corresponds to\n       *                 the Code field in the App Summary section output by dumpsys meminfo.</td>\n       *             <td>{@code 1442}</td>\n       *             <td>23</td>\n       *         </tr>\n       *         <tr>\n       *             <td>summary.stack</td>\n       *             <td>The stack usage in kB. This corresponds to the Stack field in the\n       *                 App Summary section output by dumpsys meminfo.</td>\n       *             <td>{@code 1442}</td>\n       *             <td>23</td>\n       *         </tr>\n       *         <tr>\n       *             <td>summary.graphics</td>\n       *             <td>The graphics usage in kB. This corresponds to the Graphics field in the\n       *                 App Summary section output by dumpsys meminfo.</td>\n       *             <td>{@code 1442}</td>\n       *             <td>23</td>\n       *         </tr>\n       *         <tr>\n       *             <td>summary.private-other</td>\n       *             <td>Other private memory usage in kB. This corresponds to the Private Other\n       *                 field output in the App Summary section by dumpsys meminfo.</td>\n       *             <td>{@code 1442}</td>\n       *             <td>23</td>\n       *         </tr>\n       *         <tr>\n       *             <td>summary.system</td>\n       *             <td>Shared and system memory usage in kB. This corresponds to the System\n       *                 field output in the App Summary section by dumpsys meminfo.</td>\n       *             <td>{@code 1442}</td>\n       *             <td>23</td>\n       *         </tr>\n       *         <tr>\n       *             <td>summary.total-pss</td>\n       *             <td>Total PPS memory usage in kB.</td>\n       *             <td>{@code 1442}</td>\n       *             <td>23</td>\n       *         </tr>\n       *         <tr>\n       *             <td>summary.total-swap</td>\n       *             <td>Total swap usage in kB.</td>\n       *             <td>{@code 1442}</td>\n       *             <td>23</td>\n       *         </tr>\n       *     </tbody>\n       * </table>\n       ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getMemoryStats()",
    "returnType" : "Map<String, String>",
    "comment" : "\n         * Returns a map of the names/values of the memory statistics\n         * that {@link #getMemoryStat(String)} supports.\n         *\n         * @return a map of the names/values of the supported memory statistics.\n         ",
    "links" : [ "#getMemoryStat" ]
  }, {
    "name" : "public int getSummaryJavaHeap()",
    "returnType" : "int",
    "comment" : "\n         * Pss of Java Heap bytes in KB due to the application.\n         * Notes:\n         *  * OTHER_ART is the boot image. Anything private here is blamed on\n         *    the application, not the system.\n         *  * dalvikPrivateDirty includes private zygote, which means the\n         *    application dirtied something allocated by the zygote. We blame\n         *    the application for that memory, not the system.\n         *  * Does not include OTHER_DALVIK_OTHER, which is considered VM\n         *    Overhead and lumped into Private Other.\n         *  * We don't include dalvikPrivateClean, because there should be no\n         *    such thing as private clean for the Java Heap.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryNativeHeap()",
    "returnType" : "int",
    "comment" : "\n         * Pss of Native Heap bytes in KB due to the application.\n         * Notes:\n         *  * Includes private dirty malloc space.\n         *  * We don't include nativePrivateClean, because there should be no\n         *    such thing as private clean for the Native Heap.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryCode()",
    "returnType" : "int",
    "comment" : "\n         * Pss of code and other static resource bytes in KB due to\n         * the application.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryStack()",
    "returnType" : "int",
    "comment" : "\n         * Pss in KB of the stack due to the application.\n         * Notes:\n         *  * Includes private dirty stack, which includes both Java and Native\n         *    stack.\n         *  * Does not include private clean stack, because there should be no\n         *    such thing as private clean for the stack.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryGraphics()",
    "returnType" : "int",
    "comment" : "\n         * Pss in KB of graphics due to the application.\n         * Notes:\n         *  * Includes private Gfx, EGL, and GL.\n         *  * Warning: These numbers can be misreported by the graphics drivers.\n         *  * We don't include shared graphics. It may make sense to, because\n         *    shared graphics are likely buffers due to the application\n         *    anyway, but it's simpler to implement to just group all shared\n         *    memory into the System category.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryPrivateOther()",
    "returnType" : "int",
    "comment" : "\n         * Pss in KB due to the application that haven't otherwise been\n         * accounted for.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummarySystem()",
    "returnType" : "int",
    "comment" : "\n         * Pss in KB due to the system.\n         * Notes:\n         *  * Includes all shared memory.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryJavaHeapRss()",
    "returnType" : "int",
    "comment" : "\n         * Rss of Java Heap bytes in KB due to the application.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryNativeHeapRss()",
    "returnType" : "int",
    "comment" : "\n         * Rss of Native Heap bytes in KB due to the application.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryCodeRss()",
    "returnType" : "int",
    "comment" : "\n         * Rss of code and other static resource bytes in KB due to\n         * the application.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryStackRss()",
    "returnType" : "int",
    "comment" : "\n         * Rss in KB of the stack due to the application.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryGraphicsRss()",
    "returnType" : "int",
    "comment" : "\n         * Rss in KB of graphics due to the application.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryUnknownRss()",
    "returnType" : "int",
    "comment" : "\n         * Rss in KB due to either the application or system that haven't otherwise been\n         * accounted for.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryTotalPss()",
    "returnType" : "int",
    "comment" : "\n         * Total Pss in KB.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSummaryTotalSwap()",
    "returnType" : "int",
    "comment" : "\n         * Total Swap in KB.\n         * Notes:\n         *  * Some of this memory belongs in other categories, but we don't\n         *    know if the Swap memory is shared or private, so we don't know\n         *    what to blame on the application and what on the system.\n         *    For now, just lump all the Swap in one place.\n         *    For kernels reporting SwapPss {@link #getSummaryTotalSwapPss()}\n         *    will report the application proportional Swap.\n         * @hide\n         ",
    "links" : [ "#getSummaryTotalSwapPss" ]
  }, {
    "name" : "public int getSummaryTotalSwapPss()",
    "returnType" : "int",
    "comment" : "\n         * Total proportional Swap in KB.\n         * Notes:\n         *  * Always 0 if {@link #hasSwappedOutPss} is false.\n         * @hide\n         ",
    "links" : [ "#hasSwappedOutPss" ]
  }, {
    "name" : "public boolean hasSwappedOutPss()",
    "returnType" : "boolean",
    "comment" : "\n         * Return true if the kernel is reporting pss swapped out...  that is, if\n         * {@link #getSummaryTotalSwapPss()} will return non-0 values.\n         * @hide\n         ",
    "links" : [ "#getSummaryTotalSwapPss" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "dalvikPss", "dalvikSwappablePss", "dalvikRss", "dalvikPrivateDirty", "dalvikSharedDirty", "dalvikPrivateClean", "dalvikSharedClean", "dalvikSwappedOut", "dalvikSwappedOutPss", "nativePss", "nativeSwappablePss", "nativeRss", "nativePrivateDirty", "nativeSharedDirty", "nativePrivateClean", "nativeSharedClean", "nativeSwappedOut", "nativeSwappedOutPss", "otherPss", "otherSwappablePss", "otherRss", "otherPrivateDirty", "otherSharedDirty", "otherPrivateClean", "otherSharedClean", "otherSwappedOut", "otherSwappedOutPss", "hasSwappedOutPss", "HEAP_UNKNOWN", "HEAP_DALVIK", "HEAP_NATIVE", "OTHER_DALVIK_OTHER", "OTHER_STACK", "OTHER_CURSOR", "OTHER_ASHMEM", "OTHER_GL_DEV", "OTHER_UNKNOWN_DEV", "OTHER_SO", "OTHER_JAR", "OTHER_APK", "OTHER_TTF", "OTHER_DEX", "OTHER_OAT", "OTHER_ART", "OTHER_UNKNOWN_MAP", "OTHER_GRAPHICS", "OTHER_GL", "OTHER_OTHER_MEMTRACK", "NUM_OTHER_STATS", "OTHER_DALVIK_NORMAL", "OTHER_DALVIK_LARGE", "OTHER_DALVIK_ZYGOTE", "OTHER_DALVIK_NON_MOVING", "OTHER_DVK_STAT_DALVIK_START", "OTHER_DVK_STAT_DALVIK_END", "OTHER_DALVIK_OTHER_LINEARALLOC", "OTHER_DALVIK_OTHER_ACCOUNTING", "OTHER_DALVIK_OTHER_ZYGOTE_CODE_CACHE", "OTHER_DALVIK_OTHER_APP_CODE_CACHE", "OTHER_DALVIK_OTHER_COMPILER_METADATA", "OTHER_DALVIK_OTHER_INDIRECT_REFERENCE_TABLE", "OTHER_DVK_STAT_DALVIK_OTHER_START", "OTHER_DVK_STAT_DALVIK_OTHER_END", "OTHER_DEX_BOOT_VDEX", "OTHER_DEX_APP_DEX", "OTHER_DEX_APP_VDEX", "OTHER_DVK_STAT_DEX_START", "OTHER_DVK_STAT_DEX_END", "OTHER_ART_APP", "OTHER_ART_BOOT", "OTHER_DVK_STAT_ART_START", "OTHER_DVK_STAT_ART_END", "NUM_DVK_STATS", "NUM_CATEGORIES", "OFFSET_PSS", "OFFSET_SWAPPABLE_PSS", "OFFSET_RSS", "OFFSET_PRIVATE_DIRTY", "OFFSET_SHARED_DIRTY", "OFFSET_PRIVATE_CLEAN", "OFFSET_SHARED_CLEAN", "OFFSET_SWAPPED_OUT", "OFFSET_SWAPPED_OUT_PSS", "otherStats", "CREATOR" ],
  "methodNames" : [ "public void set(MemoryInfo other)", "public int getTotalPss()", "public int getTotalUss()", "public int getTotalSwappablePss()", "public int getTotalRss()", "public int getTotalPrivateDirty()", "public int getTotalSharedDirty()", "public int getTotalPrivateClean()", "public int getTotalSharedClean()", "public int getTotalSwappedOut()", "public int getTotalSwappedOutPss()", "public int getOtherPss(int which)", "public int getOtherSwappablePss(int which)", "public int getOtherRss(int which)", "public int getOtherPrivateDirty(int which)", "public int getOtherSharedDirty(int which)", "public int getOtherPrivateClean(int which)", "public int getOtherPrivate(int which)", "public int getOtherSharedClean(int which)", "public int getOtherSwappedOut(int which)", "public int getOtherSwappedOutPss(int which)", "public static String getOtherLabel(int which)", "public String getMemoryStat(String statName)", "public Map<String, String> getMemoryStats()", "public int getSummaryJavaHeap()", "public int getSummaryNativeHeap()", "public int getSummaryCode()", "public int getSummaryStack()", "public int getSummaryGraphics()", "public int getSummaryPrivateOther()", "public int getSummarySystem()", "public int getSummaryJavaHeapRss()", "public int getSummaryNativeHeapRss()", "public int getSummaryCodeRss()", "public int getSummaryStackRss()", "public int getSummaryGraphicsRss()", "public int getSummaryUnknownRss()", "public int getSummaryTotalPss()", "public int getSummaryTotalSwap()", "public int getSummaryTotalSwapPss()", "public boolean hasSwappedOutPss()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public void readFromParcel(Parcel source)" ]
}