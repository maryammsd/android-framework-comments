{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ImageView.java",
  "packageName" : "android.widget",
  "className" : "ImageView",
  "comment" : "\n * Displays image resources, for example {@link android.graphics.Bitmap}\n * or {@link android.graphics.drawable.Drawable} resources.\n * ImageView is also commonly used to\n * <a href=\"#setImageTintMode(android.graphics.PorterDuff.Mode)\">apply tints to an image</a> and\n * handle <a href=\"#setScaleType(android.widget.ImageView.ScaleType)\">image scaling</a>.\n *\n * <p>\n * The following XML snippet is a common example of using an ImageView to display an image resource:\n * </p>\n * <pre>\n * &lt;LinearLayout\n *     xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *     android:layout_width=\"match_parent\"\n *     android:layout_height=\"match_parent\"&gt;\n *     &lt;ImageView\n *         android:layout_width=\"wrap_content\"\n *         android:layout_height=\"wrap_content\"\n *         android:src=\"@drawable/my_image\"\n *         android:contentDescription=\"@string/my_image_description\"\n *         /&gt;\n * &lt;/LinearLayout&gt;\n * </pre>\n *\n * <p>\n * To learn more about Drawables, see: <a href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.\n * To learn more about working with Bitmaps, see: <a href=\"{@docRoot}topic/performance/graphics/index.html\">Handling Bitmaps</a>.\n * </p>\n *\n * @attr ref android.R.styleable#ImageView_adjustViewBounds\n * @attr ref android.R.styleable#ImageView_src\n * @attr ref android.R.styleable#ImageView_maxWidth\n * @attr ref android.R.styleable#ImageView_maxHeight\n * @attr ref android.R.styleable#ImageView_tint\n * @attr ref android.R.styleable#ImageView_scaleType\n * @attr ref android.R.styleable#ImageView_cropToPadding\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUri",
    "type" : "Uri",
    "comment" : " settable by the client",
    "links" : [ ]
  }, {
    "name" : "mResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScaleType",
    "type" : "ScaleType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHaveFrame",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdjustViewBounds",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorFilter",
    "type" : "ColorFilter",
    "comment" : " these are applied to the drawable",
    "links" : [ ]
  }, {
    "name" : "mHasColorFilter",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mXfermode",
    "type" : "Xfermode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasXfermode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlpha",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasAlpha",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewAlphaScale",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycleableBitmapDrawable",
    "type" : "BitmapDrawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawableTintList",
    "type" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawableBlendMode",
    "type" : "BlendMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasDrawableTint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasDrawableBlendMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMergeState",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawableWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawableHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempSrc",
    "type" : "RectF",
    "comment" : " Avoid allocations...",
    "links" : [ ]
  }, {
    "name" : "mTempDst",
    "type" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCropToPadding",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBaseline",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBaselineAlignBottom",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCompatDone",
    "type" : "boolean",
    "comment" : " Compatibility modes dependent on targetSdkVersion of the app. ",
    "links" : [ ]
  }, {
    "name" : "sCompatAdjustViewBounds",
    "type" : "boolean",
    "comment" : " AdjustViewBounds behavior will be in compatibility mode for older apps. ",
    "links" : [ ]
  }, {
    "name" : "sCompatUseCorrectStreamDensity",
    "type" : "boolean",
    "comment" : " Whether to pass Resources when creating the source from a stream. ",
    "links" : [ ]
  }, {
    "name" : "sCompatDrawableVisibilityDispatch",
    "type" : "boolean",
    "comment" : " Whether to use pre-Nougat drawable visibility dispatching conditions. ",
    "links" : [ ]
  }, {
    "name" : "sScaleTypeArray",
    "type" : "ScaleType[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sS2FArray",
    "type" : "Matrix.ScaleToFit[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initImageView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean verifyDrawable(@NonNull Drawable dr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpDrawablesToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateDrawable(@NonNull Drawable dr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasOverlappingRendering()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onPopulateAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAdjustViewBounds()",
    "returnType" : "boolean",
    "comment" : "\n     * True when ImageView is adjusting its bounds\n     * to preserve the aspect ratio of its drawable\n     *\n     * @return whether to adjust the bounds of this view\n     * to preserve the original aspect ratio of the drawable\n     *\n     * @see #setAdjustViewBounds(boolean)\n     *\n     * @attr ref android.R.styleable#ImageView_adjustViewBounds\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAdjustViewBounds(boolean adjustViewBounds)",
    "returnType" : "void",
    "comment" : "\n     * Set this to true if you want the ImageView to adjust its bounds\n     * to preserve the aspect ratio of its drawable.\n     *\n     * <p><strong>Note:</strong> If the application targets API level 17 or lower,\n     * adjustViewBounds will allow the drawable to shrink the view bounds, but not grow\n     * to fill available measured space in all cases. This is for compatibility with\n     * legacy {@link android.view.View.MeasureSpec MeasureSpec} and\n     * {@link android.widget.RelativeLayout RelativeLayout} behavior.</p>\n     *\n     * @param adjustViewBounds Whether to adjust the bounds of this view\n     * to preserve the original aspect ratio of the drawable.\n     *\n     * @see #getAdjustViewBounds()\n     *\n     * @attr ref android.R.styleable#ImageView_adjustViewBounds\n     ",
    "links" : [ "android.view.View.MeasureSpec", "android.widget.RelativeLayout" ]
  }, {
    "name" : "public int getMaxWidth()",
    "returnType" : "int",
    "comment" : "\n     * The maximum width of this view.\n     *\n     * @return The maximum width of this view\n     *\n     * @see #setMaxWidth(int)\n     *\n     * @attr ref android.R.styleable#ImageView_maxWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxWidth(int maxWidth)",
    "returnType" : "void",
    "comment" : "\n     * An optional argument to supply a maximum width for this view. Only valid if\n     * {@link #setAdjustViewBounds(boolean)} has been set to true. To set an image to be a maximum\n     * of 100 x 100 while preserving the original aspect ratio, do the following: 1) set\n     * adjustViewBounds to true 2) set maxWidth and maxHeight to 100 3) set the height and width\n     * layout params to WRAP_CONTENT.\n     *\n     * <p>\n     * Note that this view could be still smaller than 100 x 100 using this approach if the original\n     * image is small. To set an image to a fixed size, specify that size in the layout params and\n     * then use {@link #setScaleType(android.widget.ImageView.ScaleType)} to determine how to fit\n     * the image within the bounds.\n     * </p>\n     *\n     * @param maxWidth maximum width for this view\n     *\n     * @see #getMaxWidth()\n     *\n     * @attr ref android.R.styleable#ImageView_maxWidth\n     ",
    "links" : [ "#setAdjustViewBounds", "#setScaleType" ]
  }, {
    "name" : "public int getMaxHeight()",
    "returnType" : "int",
    "comment" : "\n     * The maximum height of this view.\n     *\n     * @return The maximum height of this view\n     *\n     * @see #setMaxHeight(int)\n     *\n     * @attr ref android.R.styleable#ImageView_maxHeight\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxHeight(int maxHeight)",
    "returnType" : "void",
    "comment" : "\n     * An optional argument to supply a maximum height for this view. Only valid if\n     * {@link #setAdjustViewBounds(boolean)} has been set to true. To set an image to be a\n     * maximum of 100 x 100 while preserving the original aspect ratio, do the following: 1) set\n     * adjustViewBounds to true 2) set maxWidth and maxHeight to 100 3) set the height and width\n     * layout params to WRAP_CONTENT.\n     *\n     * <p>\n     * Note that this view could be still smaller than 100 x 100 using this approach if the original\n     * image is small. To set an image to a fixed size, specify that size in the layout params and\n     * then use {@link #setScaleType(android.widget.ImageView.ScaleType)} to determine how to fit\n     * the image within the bounds.\n     * </p>\n     *\n     * @param maxHeight maximum height for this view\n     *\n     * @see #getMaxHeight()\n     *\n     * @attr ref android.R.styleable#ImageView_maxHeight\n     ",
    "links" : [ "#setAdjustViewBounds", "#setScaleType" ]
  }, {
    "name" : "public Drawable getDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets the current Drawable, or null if no Drawable has been\n     * assigned.\n     *\n     * @return the view's drawable, or null if no drawable has been\n     * assigned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImageResource(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Sets a drawable as the content of this ImageView.\n     * <p class=\"note\">This does Bitmap reading and decoding on the UI\n     * thread, which can cause a latency hiccup.  If that's a concern,\n     * consider using {@link #setImageDrawable(android.graphics.drawable.Drawable)} or\n     * {@link #setImageBitmap(android.graphics.Bitmap)} and\n     * {@link android.graphics.BitmapFactory} instead.</p>\n     *\n     * @param resId the resource identifier of the drawable\n     *\n     * @attr ref android.R.styleable#ImageView_src\n     ",
    "links" : [ "#setImageDrawable", "#setImageBitmap", "android.graphics.BitmapFactory" ]
  }, {
    "name" : "public Runnable setImageResourceAsync(@DrawableRes int resId)",
    "returnType" : "Runnable",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void setImageURI(@Nullable Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Sets the content of this ImageView to the specified Uri.\n     * Note that you use this method to load images from a local Uri only.\n     * <p/>\n     * To learn how to display images from a remote Uri see: <a href=\"https://developer.android.com/topic/performance/graphics/index.html\">Handling Bitmaps</a>\n     * <p/>\n     * <p class=\"note\">This does Bitmap reading and decoding on the UI\n     * thread, which can cause a latency hiccup.  If that's a concern,\n     * consider using {@link #setImageDrawable(Drawable)} or\n     * {@link #setImageBitmap(android.graphics.Bitmap)} and\n     * {@link android.graphics.BitmapFactory} instead.</p>\n     *\n     * <p class=\"note\">On devices running SDK < 24, this method will fail to\n     * apply correct density scaling to images loaded from\n     * {@link ContentResolver#SCHEME_CONTENT content} and\n     * {@link ContentResolver#SCHEME_FILE file} schemes. Applications running\n     * on devices with SDK >= 24 <strong>MUST</strong> specify the\n     * {@code targetSdkVersion} in their manifest as 24 or above for density\n     * scaling to be applied to images loaded from these schemes.</p>\n     *\n     * @param uri the Uri of an image, or {@code null} to clear the content\n     ",
    "links" : [ "#setImageDrawable", "#setImageBitmap", "android.graphics.BitmapFactory", "ContentResolver#SCHEME_CONTENT", "ContentResolver#SCHEME_FILE" ]
  }, {
    "name" : "public Runnable setImageURIAsync(@Nullable Uri uri)",
    "returnType" : "Runnable",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void setImageDrawable(@Nullable Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Sets a drawable as the content of this ImageView.\n     *\n     * @param drawable the Drawable to set, or {@code null} to clear the\n     *                 content\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImageIcon(@Nullable Icon icon)",
    "returnType" : "void",
    "comment" : "\n     * Sets the content of this ImageView to the specified Icon.\n     *\n     * <p class=\"note\">Depending on the Icon type, this may do Bitmap reading\n     * and decoding on the UI thread, which can cause UI jank.  If that's a\n     * concern, consider using\n     * {@link Icon#loadDrawableAsync(Context, Icon.OnDrawableLoadedListener, Handler)}\n     * and then {@link #setImageDrawable(android.graphics.drawable.Drawable)}\n     * instead.</p>\n     *\n     * @param icon an Icon holding the desired image, or {@code null} to clear\n     *             the content\n     ",
    "links" : [ "Icon#loadDrawableAsync", "#setImageDrawable" ]
  }, {
    "name" : "public Runnable setImageIconAsync(@Nullable Icon icon)",
    "returnType" : "Runnable",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void setImageTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the image drawable. Does not modify the current tint\n     * mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setImageDrawable(Drawable)} will automatically\n     * mutate the drawable and apply the specified tint and tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     * <p>\n     * <em>Note:</em> The default tint mode used by this setter is NOT\n     * consistent with the default tint mode used by the\n     * {@link android.R.styleable#ImageView_tint android:tint}\n     * attribute. If the {@code android:tint} attribute is specified, the\n     * default tint mode will be set to {@link PorterDuff.Mode#SRC_ATOP} to\n     * ensure consistency with earlier versions of the platform.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#ImageView_tint\n     * @see #getImageTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "PorterDuff.Mode#SRC_IN", "#setImageDrawable", "Drawable#setTintList", "android.R.styleable#ImageView_tint", "PorterDuff.Mode#SRC_ATOP" ]
  }, {
    "name" : "public ColorStateList getImageTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Get the current {@link android.content.res.ColorStateList} used to tint the image Drawable,\n     * or null if no tint is applied.\n     *\n     * @return the tint applied to the image drawable\n     * @attr ref android.R.styleable#ImageView_tint\n     * @see #setImageTintList(ColorStateList)\n     ",
    "links" : [ "android.content.res.ColorStateList" ]
  }, {
    "name" : "public void setImageTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setImageTintList(ColorStateList)}} to the image drawable. The default\n     * mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#ImageView_tintMode\n     * @see #getImageTintMode()\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setImageTintList", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setImageTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setImageTintList(ColorStateList)}} to the image drawable. The default\n     * mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#ImageView_tintMode\n     * @see #getImageTintMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setImageTintList", "BlendMode#SRC_IN" ]
  }, {
    "name" : "public PorterDuff.Mode getImageTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Gets the blending mode used to apply the tint to the image Drawable\n     * @return the blending mode used to apply the tint to the image Drawable\n     * @attr ref android.R.styleable#ImageView_tintMode\n     * @see #setImageTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getImageTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Gets the blending mode used to apply the tint to the image Drawable\n     * @return the blending mode used to apply the tint to the image Drawable\n     * @attr ref android.R.styleable#ImageView_tintMode\n     * @see #setImageTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyImageTint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setImageBitmap(Bitmap bm)",
    "returnType" : "void",
    "comment" : "\n     * Sets a Bitmap as the content of this ImageView.\n     *\n     * @param bm The bitmap to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImageState(int[] state, boolean merge)",
    "returnType" : "void",
    "comment" : "\n     * Set the state of the current {@link android.graphics.drawable.StateListDrawable}.\n     * For more information about State List Drawables, see: <a href=\"https://developer.android.com/guide/topics/resources/drawable-resource.html#StateList\">the Drawable Resource Guide</a>.\n     *\n     * @param state the state to set for the StateListDrawable\n     * @param merge if true, merges the state values for the state you specify into the current state\n     ",
    "links" : [ "android.graphics.drawable.StateListDrawable" ]
  }, {
    "name" : "public void setSelected(boolean selected)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setImageLevel(int level)",
    "returnType" : "void",
    "comment" : "\n     * Sets the image level, when it is constructed from a\n     * {@link android.graphics.drawable.LevelListDrawable}.\n     *\n     * @param level The new level for the image.\n     ",
    "links" : [ "android.graphics.drawable.LevelListDrawable" ]
  }, {
    "name" : "public void setScaleType(ScaleType scaleType)",
    "returnType" : "void",
    "comment" : "\n     * Controls how the image should be resized or moved to match the size\n     * of this ImageView.\n     *\n     * @param scaleType The desired scaling mode.\n     *\n     * @attr ref android.R.styleable#ImageView_scaleType\n     ",
    "links" : [ ]
  }, {
    "name" : "public ScaleType getScaleType()",
    "returnType" : "ScaleType",
    "comment" : "\n     * Returns the current ScaleType that is used to scale the bounds of an image to the bounds of the ImageView.\n     * @return The ScaleType used to scale the image.\n     * @see ImageView.ScaleType\n     * @attr ref android.R.styleable#ImageView_scaleType\n     ",
    "links" : [ ]
  }, {
    "name" : "public Matrix getImageMatrix()",
    "returnType" : "Matrix",
    "comment" : " Returns the view's optional matrix. This is applied to the\n        view's drawable when it is drawn. If there is no matrix,\n        this method will return an identity matrix.\n        Do not change this matrix in place but make a copy.\n        If you want a different matrix applied to the drawable,\n        be sure to call setImageMatrix().\n    ",
    "links" : [ ]
  }, {
    "name" : "public void setImageMatrix(Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Adds a transformation {@link Matrix} that is applied\n     * to the view's drawable when it is drawn.  Allows custom scaling,\n     * translation, and perspective distortion.\n     *\n     * @param matrix The transformation parameters in matrix form.\n     ",
    "links" : [ "Matrix" ]
  }, {
    "name" : "public boolean getCropToPadding()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this ImageView crops to padding.\n     *\n     * @return whether this ImageView crops to padding\n     *\n     * @see #setCropToPadding(boolean)\n     *\n     * @attr ref android.R.styleable#ImageView_cropToPadding\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCropToPadding(boolean cropToPadding)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this ImageView will crop to padding.\n     *\n     * @param cropToPadding whether this ImageView will crop to padding\n     *\n     * @see #getCropToPadding()\n     *\n     * @attr ref android.R.styleable#ImageView_cropToPadding\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resolveUri()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getDrawableFromUri(Uri uri)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] onCreateDrawableState(int extraSpace)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDrawable(Drawable d)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resizeFromDrawable()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRtlPropertiesChanged(int layoutDirection)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Matrix.ScaleToFit scaleTypeToScaleToFit(ScaleType st)",
    "returnType" : "Matrix.ScaleToFit",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int resolveAdjustedSize(int desiredSize, int maxSize, int measureSpec)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean setFrame(int l, int t, int r, int b)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void configureBounds()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void drawableHotspotChanged(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void animateTransform(@Nullable Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Applies a temporary transformation {@link Matrix} to the view's drawable when it is drawn.\n     * Allows custom scaling, translation, and perspective distortion during an animation.\n     *\n     * This method is a lightweight analogue of {@link ImageView#setImageMatrix(Matrix)} to use\n     * only during animations as this matrix will be cleared after the next drawable\n     * update or view's bounds change.\n     *\n     * @param matrix The transformation parameters in matrix form.\n     ",
    "links" : [ "Matrix", "ImageView#setImageMatrix" ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBaseline()",
    "returnType" : "int",
    "comment" : "\n     * <p>Return the offset of the widget's text baseline from the widget's top\n     * boundary. </p>\n     *\n     * @return the offset of the baseline within the widget's bounds or -1\n     *         if baseline alignment is not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBaseline(int baseline)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set the offset of the widget's text baseline from the widget's top\n     * boundary.  This value is overridden by the {@link #setBaselineAlignBottom(boolean)}\n     * property.</p>\n     *\n     * @param baseline The baseline to use, or -1 if none is to be provided.\n     *\n     * @see #setBaseline(int)\n     * @attr ref android.R.styleable#ImageView_baseline\n     ",
    "links" : [ "#setBaselineAlignBottom" ]
  }, {
    "name" : "public void setBaselineAlignBottom(boolean aligned)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the baseline of this view to the bottom of the view.\n     * Setting this value overrides any calls to setBaseline.\n     *\n     * @param aligned If true, the image view will be baseline aligned by its bottom edge.\n     *\n     * @attr ref android.R.styleable#ImageView_baselineAlignBottom\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBaselineAlignBottom()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this view's baseline is considered the bottom of the view.\n     *\n     * @return True if the ImageView's baseline is considered the bottom of the view, false if otherwise.\n     * @see #setBaselineAlignBottom(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setColorFilter(int color, PorterDuff.Mode mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets a tinting option for the image.\n     *\n     * @param color Color tint to apply.\n     * @param mode How to apply the color.  The standard mode is\n     * {@link PorterDuff.Mode#SRC_ATOP}\n     *\n     * @attr ref android.R.styleable#ImageView_tint\n     ",
    "links" : [ "PorterDuff.Mode#SRC_ATOP" ]
  }, {
    "name" : "public final void setColorFilter(int color)",
    "returnType" : "void",
    "comment" : "\n     * Set a tinting option for the image. Assumes\n     * {@link PorterDuff.Mode#SRC_ATOP} blending mode.\n     *\n     * @param color Color tint to apply.\n     * @attr ref android.R.styleable#ImageView_tint\n     ",
    "links" : [ "PorterDuff.Mode#SRC_ATOP" ]
  }, {
    "name" : "public final void clearColorFilter()",
    "returnType" : "void",
    "comment" : "\n     * Removes the image's {@link android.graphics.ColorFilter}.\n     *\n     * @see #setColorFilter(int)\n     * @see #getColorFilter()\n     ",
    "links" : [ "android.graphics.ColorFilter" ]
  }, {
    "name" : "public final void setXfermode(Xfermode mode)",
    "returnType" : "void",
    "comment" : "\n     * @hide Candidate for future API inclusion\n     ",
    "links" : [ ]
  }, {
    "name" : "public ColorFilter getColorFilter()",
    "returnType" : "ColorFilter",
    "comment" : "\n     * Returns the active color filter for this ImageView.\n     *\n     * @return the active color filter for this ImageView\n     *\n     * @see #setColorFilter(android.graphics.ColorFilter)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter cf)",
    "returnType" : "void",
    "comment" : "\n     * Apply an arbitrary colorfilter to the image.\n     *\n     * @param cf the colorfilter to apply (may be null)\n     *\n     * @see #getColorFilter()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getImageAlpha()",
    "returnType" : "int",
    "comment" : "\n     * Returns the alpha that will be applied to the drawable of this ImageView.\n     *\n     * @return the alpha value that will be applied to the drawable of this\n     * ImageView (between 0 and 255 inclusive, with 0 being transparent and\n     * 255 being opaque)\n     *\n     * @see #setImageAlpha(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImageAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "\n     * Sets the alpha value that should be applied to the image.\n     *\n     * @param alpha the alpha value that should be applied to the image (between\n     * 0 and 255 inclusive, with 0 being transparent and 255 being opaque)\n     *\n     * @see #getImageAlpha()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "\n     * Sets the alpha value that should be applied to the image.\n     *\n     * @param alpha the alpha value that should be applied to the image\n     *\n     * @deprecated use #setImageAlpha(int) instead\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyXfermode()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyColorFilter()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyAlpha()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpaque()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isFilledByImage()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onVisibilityAggregated(boolean isVisible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVisibility(int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultFocusHighlightNeeded(Drawable background, Drawable foreground)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "mUri", "mResource", "mMatrix", "mScaleType", "mHaveFrame", "mAdjustViewBounds", "mMaxWidth", "mMaxHeight", "mColorFilter", "mHasColorFilter", "mXfermode", "mHasXfermode", "mAlpha", "mHasAlpha", "mViewAlphaScale", "mDrawable", "mRecycleableBitmapDrawable", "mDrawableTintList", "mDrawableBlendMode", "mHasDrawableTint", "mHasDrawableBlendMode", "mState", "mMergeState", "mLevel", "mDrawableWidth", "mDrawableHeight", "mDrawMatrix", "mTempSrc", "mTempDst", "mCropToPadding", "mBaseline", "mBaselineAlignBottom", "sCompatDone", "sCompatAdjustViewBounds", "sCompatUseCorrectStreamDensity", "sCompatDrawableVisibilityDispatch", "sScaleTypeArray", "sS2FArray" ],
  "methodNames" : [ "private void initImageView()", "protected boolean verifyDrawable(@NonNull Drawable dr)", "public void jumpDrawablesToCurrentState()", "public void invalidateDrawable(@NonNull Drawable dr)", "public boolean hasOverlappingRendering()", "public void onPopulateAccessibilityEventInternal(AccessibilityEvent event)", "public boolean getAdjustViewBounds()", "public void setAdjustViewBounds(boolean adjustViewBounds)", "public int getMaxWidth()", "public void setMaxWidth(int maxWidth)", "public int getMaxHeight()", "public void setMaxHeight(int maxHeight)", "public Drawable getDrawable()", "public void setImageResource(@DrawableRes int resId)", "public Runnable setImageResourceAsync(@DrawableRes int resId)", "public void setImageURI(@Nullable Uri uri)", "public Runnable setImageURIAsync(@Nullable Uri uri)", "public void setImageDrawable(@Nullable Drawable drawable)", "public void setImageIcon(@Nullable Icon icon)", "public Runnable setImageIconAsync(@Nullable Icon icon)", "public void setImageTintList(@Nullable ColorStateList tint)", "public ColorStateList getImageTintList()", "public void setImageTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setImageTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getImageTintMode()", "public BlendMode getImageTintBlendMode()", "private void applyImageTint()", "public void setImageBitmap(Bitmap bm)", "public void setImageState(int[] state, boolean merge)", "public void setSelected(boolean selected)", "public void setImageLevel(int level)", "public void setScaleType(ScaleType scaleType)", "public ScaleType getScaleType()", "public Matrix getImageMatrix()", "public void setImageMatrix(Matrix matrix)", "public boolean getCropToPadding()", "public void setCropToPadding(boolean cropToPadding)", "private void resolveUri()", "private Drawable getDrawableFromUri(Uri uri)", "public int[] onCreateDrawableState(int extraSpace)", "private void updateDrawable(Drawable d)", "private void resizeFromDrawable()", "public void onRtlPropertiesChanged(int layoutDirection)", "private static Matrix.ScaleToFit scaleTypeToScaleToFit(ScaleType st)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "private int resolveAdjustedSize(int desiredSize, int maxSize, int measureSpec)", "protected boolean setFrame(int l, int t, int r, int b)", "private void configureBounds()", "protected void drawableStateChanged()", "public void drawableHotspotChanged(float x, float y)", "public void animateTransform(@Nullable Matrix matrix)", "protected void onDraw(Canvas canvas)", "public int getBaseline()", "public void setBaseline(int baseline)", "public void setBaselineAlignBottom(boolean aligned)", "public boolean getBaselineAlignBottom()", "public final void setColorFilter(int color, PorterDuff.Mode mode)", "public final void setColorFilter(int color)", "public final void clearColorFilter()", "public final void setXfermode(Xfermode mode)", "public ColorFilter getColorFilter()", "public void setColorFilter(ColorFilter cf)", "public int getImageAlpha()", "public void setImageAlpha(int alpha)", "public void setAlpha(int alpha)", "private void applyXfermode()", "private void applyColorFilter()", "private void applyAlpha()", "public boolean isOpaque()", "private boolean isFilledByImage()", "public void onVisibilityAggregated(boolean isVisible)", "public void setVisibility(int visibility)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "public CharSequence getAccessibilityClassName()", "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)", "public boolean isDefaultFocusHighlightNeeded(Drawable background, Drawable foreground)" ]
}