{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/appwidget/AppWidgetManager.java",
  "packageName" : "android.appwidget",
  "className" : "AppWidgetManager",
  "comment" : "\n * Updates AppWidget state; gets information about installed AppWidget providers and other\n * AppWidget related state.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about creating app widgets, read the\n * <a href=\"{@docRoot}guide/topics/appwidgets/index.html\">App Widgets</a> developer guide.</p>\n * </div>\n ",
  "variables" : [ {
    "name" : "ACTION_APPWIDGET_PICK",
    "type" : "String",
    "comment" : "\n     * Activity action to launch from your {@link AppWidgetHost} activity when you want to\n     * pick an AppWidget to display.  The AppWidget picker activity will be launched.\n     * <p>\n     * You must supply the following extras:\n     * <table>\n     *   <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_ID}</td>\n     *     <td>A newly allocated appWidgetId, which will be bound to the AppWidget provider\n     *         once the user has selected one.</td>\n     *  </tr>\n     * </table>\n     *\n     * <p>\n     * The system will respond with an onActivityResult call with the following extras in\n     * the intent:\n     * <table>\n     *   <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_ID}</td>\n     *     <td>The appWidgetId that you supplied in the original intent.</td>\n     *  </tr>\n     * </table>\n     * <p>\n     * When you receive the result from the AppWidget pick activity, if the resultCode is\n     * {@link android.app.Activity#RESULT_OK}, an AppWidget has been selected.  You should then\n     * check the AppWidgetProviderInfo for the returned AppWidget, and if it has one, launch its\n     * configuration activity.  If {@link android.app.Activity#RESULT_CANCELED} is returned, you\n     * should delete the appWidgetId.\n     *\n     * @see #ACTION_APPWIDGET_CONFIGURE\n     ",
    "links" : [ "#EXTRA_APPWIDGET_ID", "android.app.Activity#RESULT_CANCELED", "android.app.Activity#RESULT_OK", "android.appwidget.AppWidgetHost" ]
  }, {
    "name" : "ACTION_KEYGUARD_APPWIDGET_PICK",
    "type" : "String",
    "comment" : "\n     * Similar to ACTION_APPWIDGET_PICK, but used from keyguard\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_APPWIDGET_BIND",
    "type" : "String",
    "comment" : "\n     * Activity action to launch from your {@link AppWidgetHost} activity when you want to bind\n     * an AppWidget to display and bindAppWidgetIdIfAllowed returns false.\n     * <p>\n     * You must supply the following extras:\n     * <table>\n     *   <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_ID}</td>\n     *     <td>A newly allocated appWidgetId, which will be bound to the AppWidget provider\n     *         you provide.</td>\n     *  </tr>\n     *  <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_PROVIDER}</td>\n     *     <td>The BroadcastReceiver that will be the AppWidget provider for this AppWidget.\n     *     </td>\n     *  </tr>\n     *  <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_PROVIDER_PROFILE}</td>\n     *     <td>An optional handle to a user profile under which runs the provider\n     *     for this AppWidget.\n     *     </td>\n     *  </tr>\n     * </table>\n     *\n     * <p>\n     * The system will respond with an onActivityResult call with the following extras in\n     * the intent:\n     * <table>\n     *   <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_ID}</td>\n     *     <td>The appWidgetId that you supplied in the original intent.</td>\n     *  </tr>\n     * </table>\n     * <p>\n     * When you receive the result from the AppWidget bind activity, if the resultCode is\n     * {@link android.app.Activity#RESULT_OK}, the AppWidget has been bound.  You should then\n     * check the AppWidgetProviderInfo for the returned AppWidget, and if it has one, launch its\n     * configuration activity.  If {@link android.app.Activity#RESULT_CANCELED} is returned, you\n     * should delete the appWidgetId.\n     *\n     * @see #ACTION_APPWIDGET_CONFIGURE\n     *\n     ",
    "links" : [ "#EXTRA_APPWIDGET_ID", "android.app.Activity#RESULT_CANCELED", "android.app.Activity#RESULT_OK", "#EXTRA_APPWIDGET_PROVIDER", "android.appwidget.AppWidgetHost", "#EXTRA_APPWIDGET_PROVIDER_PROFILE" ]
  }, {
    "name" : "ACTION_APPWIDGET_CONFIGURE",
    "type" : "String",
    "comment" : "\n     * Sent when it is time to configure your AppWidget while it is being added to a host.\n     * This action is not sent as a broadcast to the AppWidget provider, but as a startActivity\n     * to the activity specified in the {@link AppWidgetProviderInfo AppWidgetProviderInfo\n     * meta-data}.\n     *\n     * <p>\n     * The intent will contain the following extras:\n     * <table>\n     *   <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_ID}</td>\n     *     <td>The appWidgetId to configure.</td>\n     *  </tr>\n     * </table>\n     *\n     * <p>If you return {@link android.app.Activity#RESULT_OK} using\n     * {@link android.app.Activity#setResult Activity.setResult()}, the AppWidget will be added,\n     * and you will receive an {@link #ACTION_APPWIDGET_UPDATE} broadcast for this AppWidget.\n     * If you return {@link android.app.Activity#RESULT_CANCELED}, the host will cancel the add\n     * and not display this AppWidget, and you will receive a {@link #ACTION_APPWIDGET_DELETED}\n     * broadcast.\n     ",
    "links" : [ "#EXTRA_APPWIDGET_ID", "android.app.Activity#RESULT_CANCELED", "android.app.Activity#RESULT_OK", "#ACTION_APPWIDGET_DELETED", "#ACTION_APPWIDGET_UPDATE", "android.appwidget.AppWidgetProviderInfo", "android.app.Activity#setResult" ]
  }, {
    "name" : "EXTRA_APPWIDGET_ID",
    "type" : "String",
    "comment" : "\n     * An intent extra (int) that contains one appWidgetId.\n     * <p>\n     * The value will be an int that can be retrieved like this:\n     * {@sample frameworks/base/tests/appwidgets/AppWidgetHostTest/src/com/android/tests/appwidgethost/AppWidgetHostActivity.java getExtra_EXTRA_APPWIDGET_ID}\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTION_APPWIDGET_RESTORE_COMPLETED",
    "type" : "String",
    "comment" : "\n     * A bundle extra (boolean) that contains whether or not an app has finished restoring a widget.\n     * <p> After restore, the app should set OPTION_APPWIDGET_RESTORE_COMPLETED to true on its\n     * widgets followed by calling {@link #updateAppWidget} to update the views.\n     *\n     * @see #updateAppWidgetOptions(int, Bundle)\n     ",
    "links" : [ "#updateAppWidget" ]
  }, {
    "name" : "OPTION_APPWIDGET_MIN_WIDTH",
    "type" : "String",
    "comment" : "\n     * A bundle extra (int) that contains the lower bound on the current width, in dips, of a\n     * widget instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTION_APPWIDGET_MIN_HEIGHT",
    "type" : "String",
    "comment" : "\n     * A bundle extra (int) that contains the lower bound on the current height, in dips, of a\n     * widget instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTION_APPWIDGET_MAX_WIDTH",
    "type" : "String",
    "comment" : "\n     * A bundle extra (int) that contains the upper bound on the current width, in dips, of a\n     * widget instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTION_APPWIDGET_MAX_HEIGHT",
    "type" : "String",
    "comment" : "\n     * A bundle extra (int) that contains the upper bound on the current width, in dips, of a\n     * widget instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTION_APPWIDGET_HOST_CATEGORY",
    "type" : "String",
    "comment" : "\n     * A bundle extra that hints to the AppWidgetProvider the category of host that owns this\n     * this widget. Can have the value {@link\n     * AppWidgetProviderInfo#WIDGET_CATEGORY_HOME_SCREEN} or {@link\n     * AppWidgetProviderInfo#WIDGET_CATEGORY_KEYGUARD} or {@link\n     * AppWidgetProviderInfo#WIDGET_CATEGORY_SEARCHBOX}.\n     ",
    "links" : [ "android.appwidget.AppWidgetProviderInfo#WIDGET_CATEGORY_KEYGUARD", "android.appwidget.AppWidgetProviderInfo#WIDGET_CATEGORY_HOME_SCREEN", "android.appwidget.AppWidgetProviderInfo#WIDGET_CATEGORY_SEARCHBOX" ]
  }, {
    "name" : "EXTRA_APPWIDGET_OPTIONS",
    "type" : "String",
    "comment" : "\n     * An intent extra which points to a bundle of extra information for a particular widget id.\n     * In particular this bundle can contain {@link #OPTION_APPWIDGET_MIN_WIDTH},\n     * {@link #OPTION_APPWIDGET_MIN_HEIGHT}, {@link #OPTION_APPWIDGET_MAX_WIDTH},\n     * {@link #OPTION_APPWIDGET_MAX_HEIGHT}.\n     ",
    "links" : [ "#OPTION_APPWIDGET_MIN_WIDTH", "#OPTION_APPWIDGET_MIN_HEIGHT", "#OPTION_APPWIDGET_MAX_WIDTH", "#OPTION_APPWIDGET_MAX_HEIGHT" ]
  }, {
    "name" : "EXTRA_APPWIDGET_IDS",
    "type" : "String",
    "comment" : "\n     * An intent extra that contains multiple appWidgetIds.\n     * <p>\n     * The value will be an int array that can be retrieved like this:\n     * {@sample frameworks/base/tests/appwidgets/AppWidgetHostTest/src/com/android/tests/appwidgethost/TestAppWidgetProvider.java getExtra_EXTRA_APPWIDGET_IDS}\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_APPWIDGET_PROVIDER",
    "type" : "String",
    "comment" : "\n     * An intent extra that contains the component name of a AppWidget provider.\n     * <p>\n     * The value will be an {@link android.content.ComponentName}.\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "EXTRA_APPWIDGET_PROVIDER_PROFILE",
    "type" : "String",
    "comment" : "\n     * An intent extra that contains the user handle of the profile under\n     * which an AppWidget provider is registered.\n     * <p>\n     * The value will be a {@link android.os.UserHandle}.\n     ",
    "links" : [ "android.os.UserHandle" ]
  }, {
    "name" : "EXTRA_CUSTOM_INFO",
    "type" : "String",
    "comment" : "\n     * An intent extra to pass to the AppWidget picker containing a {@link java.util.List} of\n     * {@link AppWidgetProviderInfo} objects to mix in to the list of AppWidgets that are\n     * installed.  (This is how the launcher shows the search widget).\n     ",
    "links" : [ "java.util.List", "android.appwidget.AppWidgetProviderInfo" ]
  }, {
    "name" : "EXTRA_HOST_ID",
    "type" : "String",
    "comment" : "\n     * An intent extra attached to the {@link #ACTION_APPWIDGET_HOST_RESTORED} broadcast,\n     * indicating the integer ID of the host whose widgets have just been restored.\n     ",
    "links" : [ "#ACTION_APPWIDGET_HOST_RESTORED" ]
  }, {
    "name" : "EXTRA_CUSTOM_EXTRAS",
    "type" : "String",
    "comment" : "\n     * An intent extra to pass to the AppWidget picker containing a {@link java.util.List} of\n     * {@link android.os.Bundle} objects to mix in to the list of AppWidgets that are\n     * installed.  It will be added to the extras object on the {@link android.content.Intent}\n     * that is returned from the picker activity.\n     *\n     * {@more}\n     ",
    "links" : [ "java.util.List", "android.os.Bundle", "android.content.Intent" ]
  }, {
    "name" : "EXTRA_CATEGORY_FILTER",
    "type" : "String",
    "comment" : "\n     * An intent extra to pass to the AppWidget picker which allows the picker to filter\n     * the list based on the {@link AppWidgetProviderInfo#widgetCategory}.\n     *\n     * @hide\n     ",
    "links" : [ "android.appwidget.AppWidgetProviderInfo#widgetCategory" ]
  }, {
    "name" : "EXTRA_CUSTOM_SORT",
    "type" : "String",
    "comment" : "\n     * An intent extra to pass to the AppWidget picker to specify whether or not to sort\n     * the list of caller-specified extra AppWidgets along with the rest of the AppWidgets\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_APPWIDGET_ID",
    "type" : "int",
    "comment" : "\n     * A sentinel value that the AppWidget manager will never return as a appWidgetId.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_APPWIDGET_UPDATE",
    "type" : "String",
    "comment" : "\n     * Sent when it is time to update your AppWidget.\n     *\n     * <p>This may be sent in response to a new instance for this AppWidget provider having\n     * been instantiated, the requested {@link AppWidgetProviderInfo#updatePeriodMillis update interval}\n     * having lapsed, or the system booting.\n     *\n     * <p>\n     * The intent will contain the following extras:\n     * <table>\n     *   <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_IDS}</td>\n     *     <td>The appWidgetIds to update.  This may be all of the AppWidgets created for this\n     *     provider, or just a subset.  The system tries to send updates for as few AppWidget\n     *     instances as possible.</td>\n     *  </tr>\n     * </table>\n     *\n     * @see AppWidgetProvider#onUpdate AppWidgetProvider.onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds)\n     ",
    "links" : [ "#EXTRA_APPWIDGET_IDS", "android.appwidget.AppWidgetProviderInfo#updatePeriodMillis" ]
  }, {
    "name" : "ACTION_APPWIDGET_OPTIONS_CHANGED",
    "type" : "String",
    "comment" : "\n     * Sent when the custom extras for an AppWidget change.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @see AppWidgetProvider#onAppWidgetOptionsChanged\n     *      AppWidgetProvider.onAppWidgetOptionsChanged(Context context,\n     *      AppWidgetManager appWidgetManager, int appWidgetId, Bundle newExtras)\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_APPWIDGET_DELETED",
    "type" : "String",
    "comment" : "\n     * Sent when an instance of an AppWidget is deleted from its host.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @see AppWidgetProvider#onDeleted AppWidgetProvider.onDeleted(Context context, int[] appWidgetIds)\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_APPWIDGET_DISABLED",
    "type" : "String",
    "comment" : "\n     * Sent when the last AppWidget of this provider is removed from the last host.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @see AppWidgetProvider#onEnabled AppWidgetProvider.onDisabled(Context context)\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_APPWIDGET_ENABLED",
    "type" : "String",
    "comment" : "\n     * Sent when an instance of an AppWidget is added to a host for the first time.\n     * This broadcast is sent at boot time if there is a AppWidgetHost installed with\n     * an instance for this provider.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @see AppWidgetProvider#onEnabled AppWidgetProvider.onEnabled(Context context)\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_APPWIDGET_RESTORED",
    "type" : "String",
    "comment" : "\n     * Sent to an {@link AppWidgetProvider} after AppWidget state related to that provider has\n     * been restored from backup. The intent contains information about how to translate AppWidget\n     * ids from the restored data to their new equivalents.\n     *\n     * <p>The intent will contain the following extras:\n     *\n     * <table>\n     *   <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_OLD_IDS}</td>\n     *     <td>The set of appWidgetIds represented in a restored backup that have been successfully\n     *     incorporated into the current environment.  This may be all of the AppWidgets known\n     *     to this application, or just a subset.  Each entry in this array of appWidgetIds has\n     *     a corresponding entry in the {@link #EXTRA_APPWIDGET_IDS} extra.</td>\n     *  </tr>\n     *   <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_IDS}</td>\n     *     <td>The set of appWidgetIds now valid for this application.  The app should look at\n     *     its restored widget configuration and translate each appWidgetId in the\n     *     {@link #EXTRA_APPWIDGET_OLD_IDS} array to its new value found at the corresponding\n     *     index within this array.</td>\n     *  </tr>\n     * </table>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @see #ACTION_APPWIDGET_HOST_RESTORED\n     ",
    "links" : [ "android.appwidget.AppWidgetProvider", "#EXTRA_APPWIDGET_OLD_IDS", "#EXTRA_APPWIDGET_IDS" ]
  }, {
    "name" : "ACTION_APPWIDGET_HOST_RESTORED",
    "type" : "String",
    "comment" : "\n     * Sent to widget hosts after AppWidget state related to the host has been restored from\n     * backup. The intent contains information about how to translate AppWidget ids from the\n     * restored data to their new equivalents.  If an application maintains multiple separate\n     * widget host instances, it will receive this broadcast separately for each one.\n     *\n     * <p>The intent will contain the following extras:\n     *\n     * <table>\n     *   <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_OLD_IDS}</td>\n     *     <td>The set of appWidgetIds represented in a restored backup that have been successfully\n     *     incorporated into the current environment.  This may be all of the AppWidgets known\n     *     to this application, or just a subset.  Each entry in this array of appWidgetIds has\n     *     a corresponding entry in the {@link #EXTRA_APPWIDGET_IDS} extra.</td>\n     *  </tr>\n     *   <tr>\n     *     <td>{@link #EXTRA_APPWIDGET_IDS}</td>\n     *     <td>The set of appWidgetIds now valid for this application.  The app should look at\n     *     its restored widget configuration and translate each appWidgetId in the\n     *     {@link #EXTRA_APPWIDGET_OLD_IDS} array to its new value found at the corresponding\n     *     index within this array.</td>\n     *  </tr>\n     *  <tr>\n     *     <td>{@link #EXTRA_HOST_ID}</td>\n     *     <td>The integer ID of the widget host instance whose state has just been restored.</td>\n     *  </tr>\n     * </table>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @see #ACTION_APPWIDGET_RESTORED\n     ",
    "links" : [ "#EXTRA_APPWIDGET_OLD_IDS", "#EXTRA_APPWIDGET_IDS", "#EXTRA_HOST_ID" ]
  }, {
    "name" : "EXTRA_APPWIDGET_OLD_IDS",
    "type" : "String",
    "comment" : "\n     * An intent extra that contains multiple appWidgetIds.  These are id values as\n     * they were provided to the application during a recent restore from backup.  It is\n     * attached to the {@link #ACTION_APPWIDGET_RESTORED} broadcast intent.\n     *\n     * <p>\n     * The value will be an int array that can be retrieved like this:\n     * {@sample frameworks/base/tests/appwidgets/AppWidgetHostTest/src/com/android/tests/appwidgethost/TestAppWidgetProvider.java getExtra_EXTRA_APPWIDGET_IDS}\n     ",
    "links" : [ "#ACTION_APPWIDGET_RESTORED" ]
  }, {
    "name" : "EXTRA_APPWIDGET_PREVIEW",
    "type" : "String",
    "comment" : "\n     * An extra that can be passed to\n     * {@link #requestPinAppWidget(ComponentName, Bundle, PendingIntent)}. This would allow the\n     * launcher app to present a custom preview to the user.\n     *\n     * <p>\n     * The value should be a {@link RemoteViews} similar to what is used with\n     * {@link #updateAppWidget} calls.\n     ",
    "links" : [ "android.widget.RemoteViews", "#updateAppWidget", "#requestPinAppWidget(ComponentName" ]
  }, {
    "name" : "META_DATA_APPWIDGET_PROVIDER",
    "type" : "String",
    "comment" : "\n     * Field for the manifest meta-data tag.\n     *\n     * @see AppWidgetProviderInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAppWidgetService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayMetrics",
    "type" : "DisplayMetrics",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AppWidgetManager getInstance(Context context)",
    "returnType" : "AppWidgetManager",
    "comment" : "\n     * Get the AppWidgetManager instance to use for the supplied {@link android.content.Context\n     * Context} object.\n     ",
    "links" : [ "android.content.ContextContext" ]
  }, {
    "name" : "public void updateAppWidget(int[] appWidgetIds, RemoteViews views)",
    "returnType" : "void",
    "comment" : "\n     * Set the RemoteViews to use for the specified appWidgetIds.\n     * <p>\n     * Note that the RemoteViews parameter will be cached by the AppWidgetService, and hence should\n     * contain a complete representation of the widget. For performing partial widget updates, see\n     * {@link #partiallyUpdateAppWidget(int[], RemoteViews)}.\n     *\n     * <p>\n     * It is okay to call this method both inside an {@link #ACTION_APPWIDGET_UPDATE} broadcast,\n     * and outside of the handler.\n     * This method will only work when called from the uid that owns the AppWidget provider.\n     *\n     * <p>\n     * The total Bitmap memory used by the RemoteViews object cannot exceed that required to\n     * fill the screen 1.5 times, ie. (screen width x screen height x 4 x 1.5) bytes.\n     *\n     * @param appWidgetIds The AppWidget instances for which to set the RemoteViews.\n     * @param views The RemoteViews object to show.\n     ",
    "links" : [ "#partiallyUpdateAppWidget(int", "#ACTION_APPWIDGET_UPDATE" ]
  }, {
    "name" : "public void updateAppWidgetOptions(int appWidgetId, Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Update the extras for a given widget instance.\n     * <p>\n     * The extras can be used to embed additional information about this widget to be accessed\n     * by the associated widget's AppWidgetProvider.\n     *\n     * @see #getAppWidgetOptions(int)\n     *\n     * @param appWidgetId The AppWidget instances for which to set the RemoteViews.\n     * @param options The options to associate with this widget\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getAppWidgetOptions(int appWidgetId)",
    "returnType" : "Bundle",
    "comment" : "\n     * Get the extras associated with a given widget instance.\n     * <p>\n     * The extras can be used to embed additional information about this widget to be accessed\n     * by the associated widget's AppWidgetProvider.\n     *\n     * @see #updateAppWidgetOptions(int, Bundle)\n     *\n     * @param appWidgetId The AppWidget instances for which to set the RemoteViews.\n     * @return The options associated with the given widget instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateAppWidget(int appWidgetId, RemoteViews views)",
    "returnType" : "void",
    "comment" : "\n     * Set the RemoteViews to use for the specified appWidgetId.\n     * <p>\n     * Note that the RemoteViews parameter will be cached by the AppWidgetService, and hence should\n     * contain a complete representation of the widget. For performing partial widget updates, see\n     * {@link #partiallyUpdateAppWidget(int, RemoteViews)}.\n     *\n     * <p>\n     * It is okay to call this method both inside an {@link #ACTION_APPWIDGET_UPDATE} broadcast,\n     * and outside of the handler.\n     * This method will only work when called from the uid that owns the AppWidget provider.\n     *\n     * <p>\n     * The total Bitmap memory used by the RemoteViews object cannot exceed that required to\n     * fill the screen 1.5 times, ie. (screen width x screen height x 4 x 1.5) bytes.\n     *\n     * @param appWidgetId      The AppWidget instance for which to set the RemoteViews.\n     * @param views         The RemoteViews object to show.\n     ",
    "links" : [ "#partiallyUpdateAppWidget(int", "#ACTION_APPWIDGET_UPDATE" ]
  }, {
    "name" : "public void partiallyUpdateAppWidget(int[] appWidgetIds, RemoteViews views)",
    "returnType" : "void",
    "comment" : "\n     * Perform an incremental update or command on the widget(s) specified by appWidgetIds.\n     * <p>\n     * This update  differs from {@link #updateAppWidget(int[], RemoteViews)} in that the\n     * RemoteViews object which is passed is understood to be an incomplete representation of the\n     * widget, and hence does not replace the cached representation of the widget. As of API\n     * level 17, the new properties set within the views objects will be appended to the cached\n     * representation of the widget, and hence will persist.\n     *\n     * Use with {@link RemoteViews#showNext(int)}, {@link RemoteViews#showPrevious(int)},\n     * {@link RemoteViews#setScrollPosition(int, int)} and similar commands.\n     *\n     * <p>\n     * It is okay to call this method both inside an {@link #ACTION_APPWIDGET_UPDATE} broadcast,\n     * and outside of the handler.\n     * This method will only work when called from the uid that owns the AppWidget provider.\n     *\n     * <p>\n     * This method will be ignored if a widget has not received a full update via\n     * {@link #updateAppWidget(int[], RemoteViews)}.\n     *\n     * @param appWidgetIds     The AppWidget instances for which to set the RemoteViews.\n     * @param views            The RemoteViews object containing the incremental update / command.\n     ",
    "links" : [ "android.widget.RemoteViews#showNext(int)", "#updateAppWidget(int", "android.widget.RemoteViews#setScrollPosition(int", "#ACTION_APPWIDGET_UPDATE", "android.widget.RemoteViews#showPrevious(int)" ]
  }, {
    "name" : "public void partiallyUpdateAppWidget(int appWidgetId, RemoteViews views)",
    "returnType" : "void",
    "comment" : "\n     * Perform an incremental update or command on the widget specified by appWidgetId.\n     * <p>\n     * This update  differs from {@link #updateAppWidget(int, RemoteViews)} in that the RemoteViews\n     * object which is passed is understood to be an incomplete representation of the widget, and\n     * hence is not cached by the AppWidgetService. Note that because these updates are not cached,\n     * any state that they modify that is not restored by restoreInstanceState will not persist in\n     * the case that the widgets are restored using the cached version in AppWidgetService.\n     *\n     * Use with {@link RemoteViews#showNext(int)}, {@link RemoteViews#showPrevious(int)},\n     * {@link RemoteViews#setScrollPosition(int, int)} and similar commands.\n     *\n     * <p>\n     * It is okay to call this method both inside an {@link #ACTION_APPWIDGET_UPDATE} broadcast,\n     * and outside of the handler.\n     * This method will only work when called from the uid that owns the AppWidget provider.\n     *\n     * <p>\n     * This method will be ignored if a widget has not received a full update via\n     * {@link #updateAppWidget(int[], RemoteViews)}.\n     *\n     * @param appWidgetId      The AppWidget instance for which to set the RemoteViews.\n     * @param views            The RemoteViews object containing the incremental update / command.\n     ",
    "links" : [ "android.widget.RemoteViews#showNext(int)", "#updateAppWidget(int", "android.widget.RemoteViews#setScrollPosition(int", "#ACTION_APPWIDGET_UPDATE", "android.widget.RemoteViews#showPrevious(int)" ]
  }, {
    "name" : "public void updateAppWidget(ComponentName provider, RemoteViews views)",
    "returnType" : "void",
    "comment" : "\n     * Set the RemoteViews to use for all AppWidget instances for the supplied AppWidget provider.\n     *\n     * <p>\n     * It is okay to call this method both inside an {@link #ACTION_APPWIDGET_UPDATE} broadcast,\n     * and outside of the handler.\n     * This method will only work when called from the uid that owns the AppWidget provider.\n     *\n     * @param provider      The {@link ComponentName} for the {@link\n     * android.content.BroadcastReceiver BroadcastReceiver} provider\n     *                      for your AppWidget.\n     * @param views         The RemoteViews object to show.\n     ",
    "links" : [ "android.content.ComponentName", "#ACTION_APPWIDGET_UPDATE", "android.content.BroadcastReceiver" ]
  }, {
    "name" : "public void updateAppWidgetProviderInfo(ComponentName provider, @Nullable String metaDataKey)",
    "returnType" : "void",
    "comment" : "\n     * Updates the info for the supplied AppWidget provider. Apps can use this to change the default\n     * behavior of the widget based on the state of the app (for e.g., if the user is logged in\n     * or not). Calling this API completely replaces the previous definition.\n     *\n     * <p>\n     * The manifest entry of the provider should contain an additional meta-data tag similar to\n     * {@link #META_DATA_APPWIDGET_PROVIDER} which should point to any alternative definitions for\n     * the provider.\n     *\n     * <p>\n     * This is persisted across device reboots and app updates. If this meta-data key is not\n     * present in the manifest entry, the info reverts to default.\n     *\n     * @param provider {@link ComponentName} for the {@link\n     *    android.content.BroadcastReceiver BroadcastReceiver} provider for your AppWidget.\n     * @param metaDataKey key for the meta-data tag pointing to the new provider info. Use null\n     *    to reset any previously set info.\n     ",
    "links" : [ "android.content.ComponentName", "#META_DATA_APPWIDGET_PROVIDER", "android.content.BroadcastReceiver" ]
  }, {
    "name" : "public void notifyAppWidgetViewDataChanged(int[] appWidgetIds, int viewId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the specified collection view in all the specified AppWidget instances\n     * to invalidate their data.\n     *\n     * @param appWidgetIds  The AppWidget instances to notify of view data changes.\n     * @param viewId        The collection view id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyAppWidgetViewDataChanged(int appWidgetId, int viewId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the specified collection view in the specified AppWidget instance\n     * to invalidate its data.\n     *\n     * @param appWidgetId  The AppWidget instance to notify of view data changes.\n     * @param viewId       The collection view id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AppWidgetProviderInfo> getInstalledProvidersForProfile(@Nullable UserHandle profile)",
    "returnType" : "List<AppWidgetProviderInfo>",
    "comment" : "\n     * Gets the AppWidget providers for the given user profile. User profile can only\n     * be the current user or a profile of the current user. For example, the current\n     * user may have a corporate profile. In this case the parent user profile has a\n     * child profile, the corporate one.\n     *\n     * @param profile The profile for which to get providers. Passing null is equivalent\n     *        to querying for only the calling user.\n     * @return The installed providers, or an empty list if none are found for the given user.\n     *\n     * @see android.os.Process#myUserHandle()\n     * @see android.os.UserManager#getUserProfiles()\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AppWidgetProviderInfo> getInstalledProvidersForPackage(@NonNull String packageName, @Nullable UserHandle profile)",
    "returnType" : "List<AppWidgetProviderInfo>",
    "comment" : "\n     * Gets the AppWidget providers for the given package and user profile. User\n     * profile can only be the current user or a profile of the current user. For\n     * example, the current user may have a corporate profile. In this case the\n     * parent user profile has a child profile, the corporate one.\n     *\n     * @param packageName The package for which to get providers. If null, this method is\n     *        equivalent to {@link #getInstalledProvidersForProfile(UserHandle)}.\n     * @param profile The profile for which to get providers. Passing null is equivalent\n     *        to querying for only the calling user.\n     * @return The installed providers, or an empty list if none are found for the given\n     *         package and user.\n     * @throws NullPointerException if the provided package name is null\n     *\n     * @see android.os.Process#myUserHandle()\n     * @see android.os.UserManager#getUserProfiles()\n     ",
    "links" : [ "#getInstalledProvidersForProfile(UserHandle)" ]
  }, {
    "name" : "public List<AppWidgetProviderInfo> getInstalledProviders()",
    "returnType" : "List<AppWidgetProviderInfo>",
    "comment" : "\n     * Return a list of the AppWidget providers that are currently installed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AppWidgetProviderInfo> getInstalledProviders(int categoryFilter)",
    "returnType" : "List<AppWidgetProviderInfo>",
    "comment" : "\n     * Gets the AppWidget providers for the current user.\n     *\n     * @param categoryFilter Will only return providers which register as any of the specified\n     *        specified categories. See {@link AppWidgetProviderInfo#widgetCategory}.\n     * @return The intalled providers.\n     *\n     * @see android.os.Process#myUserHandle()\n     * @see android.os.UserManager#getUserProfiles()\n     *\n     * @hide\n     ",
    "links" : [ "android.appwidget.AppWidgetProviderInfo#widgetCategory" ]
  }, {
    "name" : "public List<AppWidgetProviderInfo> getInstalledProvidersForProfile(int categoryFilter, @Nullable UserHandle profile, @Nullable String packageName)",
    "returnType" : "List<AppWidgetProviderInfo>",
    "comment" : "\n     * Gets the AppWidget providers for the given user profile. User profile can only\n     * be the current user or a profile of the current user. For example, the current\n     * user may have a corporate profile. In this case the parent user profile has a\n     * child profile, the corporate one.\n     *\n     * @param categoryFilter Will only return providers which register as any of the specified\n     *        specified categories. See {@link AppWidgetProviderInfo#widgetCategory}.\n     * @param profile A profile of the current user which to be queried. The user\n     *        is itself also a profile. If null, the providers only for the current user\n     *        are returned.\n     * @param packageName If specified, will only return providers from the given package.\n     * @return The intalled providers.\n     *\n     * @see android.os.Process#myUserHandle()\n     * @see android.os.UserManager#getUserProfiles()\n     *\n     * @hide\n     ",
    "links" : [ "android.appwidget.AppWidgetProviderInfo#widgetCategory" ]
  }, {
    "name" : "public AppWidgetProviderInfo getAppWidgetInfo(int appWidgetId)",
    "returnType" : "AppWidgetProviderInfo",
    "comment" : "\n     * Get the available info about the AppWidget.\n     *\n     * @return A appWidgetId.  If the appWidgetId has not been bound to a provider yet, or\n     * you don't have access to that appWidgetId, null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bindAppWidgetId(int appWidgetId, ComponentName provider)",
    "returnType" : "void",
    "comment" : "\n     * Set the component for a given appWidgetId.\n     *\n     * <p class=\"note\">You need the BIND_APPWIDGET permission or the user must have enabled binding\n     *         widgets always for your component. This method is used by the AppWidget picker and\n     *         should not be used by other apps.\n     *\n     * @param appWidgetId     The AppWidget instance for which to set the RemoteViews.\n     * @param provider      The {@link android.content.BroadcastReceiver} that will be the AppWidget\n     *                      provider for this AppWidget.\n     * @hide\n     ",
    "links" : [ "android.content.BroadcastReceiver" ]
  }, {
    "name" : "public void bindAppWidgetId(int appWidgetId, ComponentName provider, Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Set the component for a given appWidgetId.\n     *\n     * <p class=\"note\">You need the BIND_APPWIDGET permission or the user must have enabled binding\n     *         widgets always for your component. This method is used by the AppWidget picker and\n     *         should not be used by other apps.\n     *\n     * @param appWidgetId     The AppWidget instance for which to set the RemoteViews.\n     * @param provider      The {@link android.content.BroadcastReceiver} that will be the AppWidget\n     *                      provider for this AppWidget.\n     * @param options       Bundle containing options for the AppWidget. See also\n     *                      {@link #updateAppWidgetOptions(int, Bundle)}\n     *\n     * @hide\n     ",
    "links" : [ "#updateAppWidgetOptions(int", "android.content.BroadcastReceiver" ]
  }, {
    "name" : "public boolean bindAppWidgetIdIfAllowed(int appWidgetId, ComponentName provider)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the component for a given appWidgetId.\n     *\n     * <p class=\"note\">You need the BIND_APPWIDGET permission or the user must have enabled binding\n     *         widgets always for your component. Should be used by apps that host widgets; if this\n     *         method returns false, call {@link #ACTION_APPWIDGET_BIND} to request permission to\n     *         bind\n     *\n     * @param appWidgetId   The AppWidget id under which to bind the provider.\n     * @param provider      The {@link android.content.BroadcastReceiver} that will be the AppWidget\n     *                      provider for this AppWidget.\n     * @return true if this component has permission to bind the AppWidget\n     ",
    "links" : [ "#ACTION_APPWIDGET_BIND", "android.content.BroadcastReceiver" ]
  }, {
    "name" : "public boolean bindAppWidgetIdIfAllowed(int appWidgetId, ComponentName provider, Bundle options)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the component for a given appWidgetId.\n     *\n     * <p class=\"note\">You need the BIND_APPWIDGET permission or the user must have enabled binding\n     *         widgets always for your component. Should be used by apps that host widgets; if this\n     *         method returns false, call {@link #ACTION_APPWIDGET_BIND} to request permission to\n     *         bind\n     *\n     * @param appWidgetId The AppWidget id under which to bind the provider.\n     * @param provider      The {@link android.content.BroadcastReceiver} that will be the AppWidget\n     *                      provider for this AppWidget.\n     * @param options       Bundle containing options for the AppWidget. See also\n     *                      {@link #updateAppWidgetOptions(int, Bundle)}\n     *\n     * @return true if this component has permission to bind the AppWidget\n     ",
    "links" : [ "#updateAppWidgetOptions(int", "#ACTION_APPWIDGET_BIND", "android.content.BroadcastReceiver" ]
  }, {
    "name" : "public boolean bindAppWidgetIdIfAllowed(int appWidgetId, UserHandle user, ComponentName provider, Bundle options)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the provider for a given appWidgetId if the caller has a permission.\n     * <p>\n     * <strong>Note:</strong> You need the {@link android.Manifest.permission#BIND_APPWIDGET}\n     * permission or the user must have enabled binding widgets always for your component.\n     * Should be used by apps that host widgets. If this method returns false, call {@link\n     * #ACTION_APPWIDGET_BIND} to request permission to bind.\n     * </p>\n     *\n     * @param appWidgetId The AppWidget id under which to bind the provider.\n     * @param user The user id in which the provider resides.\n     * @param provider The component name of the provider.\n     * @param options An optional Bundle containing options for the AppWidget.\n     *\n     * @return true if this component has permission to bind the AppWidget\n     ",
    "links" : [ "#ACTION_APPWIDGET_BIND", "android.Manifest.permission#BIND_APPWIDGET" ]
  }, {
    "name" : "public boolean hasBindAppWidgetPermission(String packageName, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Query if a given package was granted permission by the user to bind app widgets\n     *\n     * <p class=\"note\">You need the MODIFY_APPWIDGET_BIND_PERMISSIONS permission\n     *\n     * @param packageName The package for which the permission is being queried\n     * @param userId The user id of the user under which the package runs.\n     * @return true if the package was granted permission by the user to bind app widgets\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBindAppWidgetPermission(String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Query if a given package was granted permission by the user to bind app widgets\n     *\n     * <p class=\"note\">You need the MODIFY_APPWIDGET_BIND_PERMISSIONS permission\n     *\n     * @param packageName        The package for which the permission is being queried\n     * @return true if the package was granted permission by the user to bind app widgets\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBindAppWidgetPermission(String packageName, boolean permission)",
    "returnType" : "void",
    "comment" : "\n     * Changes any user-granted permission for the given package to bind app widgets\n     *\n     * <p class=\"note\">You need the MODIFY_APPWIDGET_BIND_PERMISSIONS permission\n     *\n     * @param packageName The package whose permission is being changed\n     * @param permission Whether to give the package permission to bind widgets\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBindAppWidgetPermission(String packageName, int userId, boolean permission)",
    "returnType" : "void",
    "comment" : "\n     * Changes any user-granted permission for the given package to bind app widgets\n     *\n     * <p class=\"note\">You need the MODIFY_APPWIDGET_BIND_PERMISSIONS permission\n     *\n     * @param packageName The package whose permission is being changed\n     * @param userId The user under which the package is running.\n     * @param permission Whether to give the package permission to bind widgets\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean bindRemoteViewsService(Context context, int appWidgetId, Intent intent, IServiceConnection connection, @Context.BindServiceFlags int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Binds the RemoteViewsService for a given appWidgetId and intent.\n     *\n     * The appWidgetId specified must already be bound to the calling AppWidgetHost via\n     * {@link android.appwidget.AppWidgetManager#bindAppWidgetId AppWidgetManager.bindAppWidgetId()}.\n     *\n     * @param appWidgetId   The AppWidget instance for which to bind the RemoteViewsService.\n     * @param intent        The intent of the service which will be providing the data to the\n     *                      RemoteViewsAdapter.\n     * @param connection    The callback interface to be notified when a connection is made or lost.\n     * @param flags         Flags used for binding to the service\n     *\n     * @see Context#getServiceDispatcher(ServiceConnection, Handler, int)\n     * @hide\n     ",
    "links" : [ "android.appwidget.AppWidgetManager#bindAppWidgetId" ]
  }, {
    "name" : "public int[] getAppWidgetIds(ComponentName provider)",
    "returnType" : "int[]",
    "comment" : "\n     * Get the list of appWidgetIds that have been bound to the given AppWidget\n     * provider.\n     *\n     * @param provider The {@link android.content.BroadcastReceiver} that is the\n     *            AppWidget provider to find appWidgetIds for.\n     ",
    "links" : [ "android.content.BroadcastReceiver" ]
  }, {
    "name" : "public boolean isBoundWidgetPackage(String packageName, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean bindAppWidgetIdIfAllowed(int appWidgetId, int profileId, ComponentName provider, Bundle options)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequestPinAppWidgetSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code TRUE} if the default launcher supports\n     * {@link #requestPinAppWidget(ComponentName, Bundle, PendingIntent)}\n     ",
    "links" : [ "#requestPinAppWidget(ComponentName" ]
  }, {
    "name" : "public boolean requestPinAppWidget(@NonNull ComponentName provider, @Nullable PendingIntent successCallback)",
    "returnType" : "boolean",
    "comment" : "\n     * Only used during development. Can be deleted before release.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestPinAppWidget(@NonNull ComponentName provider, @Nullable Bundle extras, @Nullable PendingIntent successCallback)",
    "returnType" : "boolean",
    "comment" : "\n     * Request to pin an app widget on the current launcher. It's up to the launcher to accept this\n     * request (optionally showing a user confirmation). If the request is accepted, the caller will\n     * get a confirmation with extra {@link #EXTRA_APPWIDGET_ID}.\n     *\n     * <p>When a request is denied by the user, the caller app will not get any response.\n     *\n     * <p>Only apps with a foreground activity or a foreground service can call it.  Otherwise\n     * it'll throw {@link IllegalStateException}.\n     *\n     * <p>It's up to the launcher how to handle previous pending requests when the same package\n     * calls this API multiple times in a row.  It may ignore the previous requests,\n     * for example.\n     *\n     * <p>Launcher will not show the configuration activity associated with the provider in this\n     * case. The app could either show the configuration activity as a response to the callback,\n     * or show if before calling the API (various configurations can be encapsulated in\n     * {@code successCallback} to avoid persisting them before the widgetId is known).\n     *\n     * @param provider The {@link ComponentName} for the {@link\n     *    android.content.BroadcastReceiver BroadcastReceiver} provider for your AppWidget.\n     * @param extras In not null, this is passed to the launcher app. For eg {@link\n     *    #EXTRA_APPWIDGET_PREVIEW} can be used for a custom preview.\n     * @param successCallback If not null, this intent will be sent when the widget is created.\n     *\n     * @return {@code TRUE} if the launcher supports this feature. Note the API will return without\n     *    waiting for the user to respond, so getting {@code TRUE} from this API does *not* mean\n     *    the shortcut is pinned. {@code FALSE} if the launcher doesn't support this feature.\n     *\n     * @see android.content.pm.ShortcutManager#isRequestPinShortcutSupported()\n     * @see android.content.pm.ShortcutManager#requestPinShortcut(ShortcutInfo, IntentSender)\n     * @see #isRequestPinAppWidgetSupported()\n     *\n     * @throws IllegalStateException The caller doesn't have a foreground activity or a foreground\n     * service or when the user is locked.\n     ",
    "links" : [ "#EXTRA_APPWIDGET_ID", "IllegalStateException", "#EXTRA_APPWIDGET_PREVIEW", "android.content.ComponentName", "android.content.BroadcastReceiver" ]
  }, {
    "name" : "public void noteAppWidgetTapped(int appWidgetId)",
    "returnType" : "void",
    "comment" : "\n     * Note an app widget is tapped on.\n     *\n     * @param appWidgetId App widget id.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "ACTION_APPWIDGET_PICK", "ACTION_KEYGUARD_APPWIDGET_PICK", "ACTION_APPWIDGET_BIND", "ACTION_APPWIDGET_CONFIGURE", "EXTRA_APPWIDGET_ID", "OPTION_APPWIDGET_RESTORE_COMPLETED", "OPTION_APPWIDGET_MIN_WIDTH", "OPTION_APPWIDGET_MIN_HEIGHT", "OPTION_APPWIDGET_MAX_WIDTH", "OPTION_APPWIDGET_MAX_HEIGHT", "OPTION_APPWIDGET_HOST_CATEGORY", "EXTRA_APPWIDGET_OPTIONS", "EXTRA_APPWIDGET_IDS", "EXTRA_APPWIDGET_PROVIDER", "EXTRA_APPWIDGET_PROVIDER_PROFILE", "EXTRA_CUSTOM_INFO", "EXTRA_HOST_ID", "EXTRA_CUSTOM_EXTRAS", "EXTRA_CATEGORY_FILTER", "EXTRA_CUSTOM_SORT", "INVALID_APPWIDGET_ID", "ACTION_APPWIDGET_UPDATE", "ACTION_APPWIDGET_OPTIONS_CHANGED", "ACTION_APPWIDGET_DELETED", "ACTION_APPWIDGET_DISABLED", "ACTION_APPWIDGET_ENABLED", "ACTION_APPWIDGET_RESTORED", "ACTION_APPWIDGET_HOST_RESTORED", "EXTRA_APPWIDGET_OLD_IDS", "EXTRA_APPWIDGET_PREVIEW", "META_DATA_APPWIDGET_PROVIDER", "mContext", "mPackageName", "mService", "mDisplayMetrics" ],
  "methodNames" : [ "public static AppWidgetManager getInstance(Context context)", "public void updateAppWidget(int[] appWidgetIds, RemoteViews views)", "public void updateAppWidgetOptions(int appWidgetId, Bundle options)", "public Bundle getAppWidgetOptions(int appWidgetId)", "public void updateAppWidget(int appWidgetId, RemoteViews views)", "public void partiallyUpdateAppWidget(int[] appWidgetIds, RemoteViews views)", "public void partiallyUpdateAppWidget(int appWidgetId, RemoteViews views)", "public void updateAppWidget(ComponentName provider, RemoteViews views)", "public void updateAppWidgetProviderInfo(ComponentName provider, @Nullable String metaDataKey)", "public void notifyAppWidgetViewDataChanged(int[] appWidgetIds, int viewId)", "public void notifyAppWidgetViewDataChanged(int appWidgetId, int viewId)", "public List<AppWidgetProviderInfo> getInstalledProvidersForProfile(@Nullable UserHandle profile)", "public List<AppWidgetProviderInfo> getInstalledProvidersForPackage(@NonNull String packageName, @Nullable UserHandle profile)", "public List<AppWidgetProviderInfo> getInstalledProviders()", "public List<AppWidgetProviderInfo> getInstalledProviders(int categoryFilter)", "public List<AppWidgetProviderInfo> getInstalledProvidersForProfile(int categoryFilter, @Nullable UserHandle profile, @Nullable String packageName)", "public AppWidgetProviderInfo getAppWidgetInfo(int appWidgetId)", "public void bindAppWidgetId(int appWidgetId, ComponentName provider)", "public void bindAppWidgetId(int appWidgetId, ComponentName provider, Bundle options)", "public boolean bindAppWidgetIdIfAllowed(int appWidgetId, ComponentName provider)", "public boolean bindAppWidgetIdIfAllowed(int appWidgetId, ComponentName provider, Bundle options)", "public boolean bindAppWidgetIdIfAllowed(int appWidgetId, UserHandle user, ComponentName provider, Bundle options)", "public boolean hasBindAppWidgetPermission(String packageName, int userId)", "public boolean hasBindAppWidgetPermission(String packageName)", "public void setBindAppWidgetPermission(String packageName, boolean permission)", "public void setBindAppWidgetPermission(String packageName, int userId, boolean permission)", "public boolean bindRemoteViewsService(Context context, int appWidgetId, Intent intent, IServiceConnection connection, @Context.BindServiceFlags int flags)", "public int[] getAppWidgetIds(ComponentName provider)", "public boolean isBoundWidgetPackage(String packageName, int userId)", "private boolean bindAppWidgetIdIfAllowed(int appWidgetId, int profileId, ComponentName provider, Bundle options)", "public boolean isRequestPinAppWidgetSupported()", "public boolean requestPinAppWidget(@NonNull ComponentName provider, @Nullable PendingIntent successCallback)", "public boolean requestPinAppWidget(@NonNull ComponentName provider, @Nullable Bundle extras, @Nullable PendingIntent successCallback)", "public void noteAppWidgetTapped(int appWidgetId)" ]
}