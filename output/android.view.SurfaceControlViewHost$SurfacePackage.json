{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/SurfaceControlViewHost.java",
  "packageName" : "android.view",
  "className" : "SurfacePackage",
  "comment" : "\n     * Package encapsulating a Surface hierarchy which contains interactive view\n     * elements. It's expected to get this object from\n     * {@link SurfaceControlViewHost#getSurfacePackage} afterwards it can be embedded within\n     * a SurfaceView by calling {@link SurfaceView#setChildSurfacePackage}.\n     *\n     * Note that each {@link SurfacePackage} must be released by calling\n     * {@link SurfacePackage#release}. However, if you use the recommended flow,\n     *  the framework will automatically handle the lifetime for you.\n     *\n     * 1. When sending the package to the remote process, return it from an AIDL method\n     * or manually use FLAG_WRITE_RETURN_VALUE in writeToParcel. This will automatically\n     * release the package in the local process.\n     * 2. In the remote process, consume the package using SurfaceView. This way the\n     * SurfaceView will take over the lifetime and call {@link SurfacePackage#release}\n     * for the user.\n     *\n     * One final note: The {@link SurfacePackage} lifetime is totally de-coupled\n     * from the lifetime of the underlying {@link SurfaceControlViewHost}. Regardless\n     * of the lifetime of the package the user should still call\n     * {@link SurfaceControlViewHost#release} when finished.\n     ",
  "links" : [ "android.view.SurfaceControlViewHost#release", "android.view.SurfaceControlViewHost#getSurfacePackage", "android.view.SurfaceView#setChildSurfacePackage", "SurfacePackage", "android.view.SurfaceControlViewHost", "#release" ],
  "variables" : [ {
    "name" : "mSurfaceControl",
    "type" : "SurfaceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityEmbeddedConnection",
    "type" : "IAccessibilityEmbeddedConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputTransferToken",
    "type" : "InputTransferToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteInterface",
    "type" : "ISurfaceControlViewHost",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SurfacePackage>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SurfaceControl getSurfaceControl()",
    "returnType" : "SurfaceControl",
    "comment" : "\n         * Returns the {@link android.view.SurfaceControl} associated with this SurfacePackage for\n         * cases where more control is required.\n         *\n         * @return the SurfaceControl associated with this SurfacePackage and its containing\n         *     SurfaceControlViewHost\n         ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "public IAccessibilityEmbeddedConnection getAccessibilityEmbeddedConnection()",
    "returnType" : "IAccessibilityEmbeddedConnection",
    "comment" : "\n         * Gets an accessibility embedded connection interface for this SurfaceControlViewHost.\n         *\n         * @return {@link IAccessibilityEmbeddedConnection} interface.\n         * @hide\n         ",
    "links" : [ "android.view.accessibility.IAccessibilityEmbeddedConnection" ]
  }, {
    "name" : "public ISurfaceControlViewHost getRemoteInterface()",
    "returnType" : "ISurfaceControlViewHost",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyConfigurationChanged(@NonNull Configuration c)",
    "returnType" : "void",
    "comment" : "\n         * Forward a configuration to the remote SurfaceControlViewHost.\n         * This will cause View#onConfigurationChanged to be invoked on the remote\n         * end. This does not automatically cause the SurfaceControlViewHost\n         * to be resized. The root View of a SurfaceControlViewHost\n         * is more akin to a PopupWindow in that the size is user specified\n         * independent of configuration width and height.\n         *\n         * In order to receive the configuration change via\n         * {@link View#onConfigurationChanged}, the context used with the\n         * SurfaceControlViewHost and it's embedded view hierarchy must\n         * be a WindowContext obtained from {@link Context#createWindowContext}.\n         *\n         * If a regular service context is used, then your embedded view hierarchy\n         * will always perceive the global configuration.\n         *\n         * @param c The configuration to forward\n         ",
    "links" : [ "android.content.Context#createWindowContext", "android.view.View#onConfigurationChanged" ]
  }, {
    "name" : "public void notifyDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "\n         * Tear down the remote SurfaceControlViewHost and cause\n         * View#onDetachedFromWindow to be invoked on the other side.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n         * Release the {@link SurfaceControl} associated with this package.\n         * It's not necessary to call this if you pass the package to\n         * {@link SurfaceView#setChildSurfacePackage} as {@link SurfaceView} will\n         * take ownership in that case.\n         ",
    "links" : [ "android.view.SurfaceView", "android.view.SurfaceControl", "android.view.SurfaceView#setChildSurfacePackage" ]
  }, {
    "name" : "public InputTransferToken getInputTransferToken()",
    "returnType" : "InputTransferToken",
    "comment" : "\n         * Gets an {@link InputTransferToken} which can be used to request focus on the embedded\n         * surface or to transfer touch gesture to the embedded surface.\n         *\n         * @return the InputTransferToken associated with {@link SurfacePackage} or {@code null} if\n         * the embedded hasn't set up its view or doesn't have input.\n         * @see WindowManager#transferTouchGesture(InputTransferToken, InputTransferToken)\n         ",
    "links" : [ "android.window.InputTransferToken", "SurfacePackage" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SurfaceControl getSurfaceControl()", "public IAccessibilityEmbeddedConnection getAccessibilityEmbeddedConnection()", "public ISurfaceControlViewHost getRemoteInterface()", "public void notifyConfigurationChanged(@NonNull Configuration c)", "public void notifyDetachedFromWindow()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel out, int flags)", "public void release()", "public InputTransferToken getInputTransferToken()", "public String toString()" ],
  "variableNames" : [ "mSurfaceControl", "mAccessibilityEmbeddedConnection", "mInputTransferToken", "mRemoteInterface", "CREATOR" ]
}