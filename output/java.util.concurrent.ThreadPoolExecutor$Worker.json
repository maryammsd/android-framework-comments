{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ThreadPoolExecutor.java",
  "packageName" : "java.util.concurrent",
  "className" : "Worker",
  "comment" : "\n     * Class Worker mainly maintains interrupt control state for\n     * threads running tasks, along with other minor bookkeeping.\n     * This class opportunistically extends AbstractQueuedSynchronizer\n     * to simplify acquiring and releasing a lock surrounding each\n     * task execution.  This protects against interrupts that are\n     * intended to wake up a worker thread waiting for a task from\n     * instead interrupting a task being run.  We implement a simple\n     * non-reentrant mutual exclusion lock rather than use\n     * ReentrantLock because we do not want worker tasks to be able to\n     * reacquire the lock when they invoke pool control methods like\n     * setCorePoolSize.  Additionally, to suppress interrupts until\n     * the thread actually starts running tasks, we initialize lock\n     * state to a negative value, and clear it upon start (in\n     * runWorker).\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n         * This class will never be serialized, but we provide a\n         * serialVersionUID to suppress a javac warning.\n         ",
    "links" : [ ]
  }, {
    "name" : "thread",
    "type" : "Thread",
    "comment" : " Thread this worker is running in.  Null if factory fails. ",
    "links" : [ ]
  }, {
    "name" : "firstTask",
    "type" : "Runnable",
    "comment" : " Initial task to run.  Possibly null. ",
    "links" : [ ]
  }, {
    "name" : "completedTasks",
    "type" : "long",
    "comment" : " Per-thread task counter ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void run()",
    "returnType" : "void",
    "comment" : " Delegates main run loop to outer runWorker. ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isHeldExclusively()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean tryAcquire(int unused)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean tryRelease(int unused)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void lock()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean tryLock()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unlock()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void interruptIfStarted()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void run()", "protected boolean isHeldExclusively()", "protected boolean tryAcquire(int unused)", "protected boolean tryRelease(int unused)", "public void lock()", "public boolean tryLock()", "public void unlock()", "public boolean isLocked()", " void interruptIfStarted()" ],
  "variableNames" : [ "serialVersionUID", "thread", "firstTask", "completedTasks" ]
}