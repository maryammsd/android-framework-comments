{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/rtp/AudioGroup.java",
  "packageName" : "android.net.rtp",
  "className" : "AudioGroup",
  "comment" : "\n * An AudioGroup is an audio hub for the speaker, the microphone, and\n * {@link AudioStream}s. Each of these components can be logically turned on\n * or off by calling {@link #setMode(int)} or {@link RtpStream#setMode(int)}.\n * The AudioGroup will go through these components and process them one by one\n * within its execution loop. The loop consists of four steps. First, for each\n * AudioStream not in {@link RtpStream#MODE_SEND_ONLY}, decodes its incoming\n * packets and stores in its buffer. Then, if the microphone is enabled,\n * processes the recorded audio and stores in its buffer. Third, if the speaker\n * is enabled, mixes all AudioStream buffers and plays back. Finally, for each\n * AudioStream not in {@link RtpStream#MODE_RECEIVE_ONLY}, mixes all other\n * buffers and sends back the encoded packets. An AudioGroup does nothing if\n * there is no AudioStream in it.\n *\n * <p>Few things must be noticed before using these classes. The performance is\n * highly related to the system load and the network bandwidth. Usually a\n * simpler {@link AudioCodec} costs fewer CPU cycles but requires more network\n * bandwidth, and vise versa. Using two AudioStreams at the same time doubles\n * not only the load but also the bandwidth. The condition varies from one\n * device to another, and developers should choose the right combination in\n * order to get the best result.</p>\n *\n * <p>It is sometimes useful to keep multiple AudioGroups at the same time. For\n * example, a Voice over IP (VoIP) application might want to put a conference\n * call on hold in order to make a new call but still allow people in the\n * conference call talking to each other. This can be done easily using two\n * AudioGroups, but there are some limitations. Since the speaker and the\n * microphone are globally shared resources, only one AudioGroup at a time is\n * allowed to run in a mode other than {@link #MODE_ON_HOLD}. The others will\n * be unable to acquire these resources and fail silently.</p>\n *\n * <p class=\"note\">Using this class requires\n * {@link android.Manifest.permission#RECORD_AUDIO} permission. Developers\n * should set the audio mode to {@link AudioManager#MODE_IN_COMMUNICATION}\n * using {@link AudioManager#setMode(int)} and change it back when none of\n * the AudioGroups is in use.</p>\n *\n * @see AudioStream\n *\n * @deprecated {@link android.net.sip.SipManager} and associated classes are no longer supported and\n * should not be used as the basis of future VOIP apps.\n ",
  "links" : [ "android.net.rtp.AudioStream", "android.net.rtp.AudioCodec", "#MODE_ON_HOLD", "android.media.AudioManager#MODE_IN_COMMUNICATION", "android.net.rtp.RtpStream#MODE_RECEIVE_ONLY", "android.net.rtp.RtpStream#MODE_SEND_ONLY", "android.media.AudioManager#setMode(int)", "android.net.rtp.RtpStream#setMode(int)", "android.Manifest.permission#RECORD_AUDIO", "#setMode(int)", "android.net.sip.SipManager" ],
  "variables" : [ {
    "name" : "MODE_ON_HOLD",
    "type" : "int",
    "comment" : "\n     * This mode is similar to {@link #MODE_NORMAL} except the speaker and\n     * the microphone are both disabled.\n     ",
    "links" : [ "#MODE_NORMAL" ]
  }, {
    "name" : "MODE_MUTED",
    "type" : "int",
    "comment" : "\n     * This mode is similar to {@link #MODE_NORMAL} except the microphone is\n     * disabled.\n     ",
    "links" : [ "#MODE_NORMAL" ]
  }, {
    "name" : "MODE_NORMAL",
    "type" : "int",
    "comment" : "\n     * This mode indicates that the speaker, the microphone, and all\n     * {@link AudioStream}s in the group are enabled. First, the packets\n     * received from the streams are decoded and mixed with the audio recorded\n     * from the microphone. Then, the results are played back to the speaker,\n     * encoded and sent back to each stream.\n     ",
    "links" : [ "android.net.rtp.AudioStream" ]
  }, {
    "name" : "MODE_ECHO_SUPPRESSION",
    "type" : "int",
    "comment" : "\n     * This mode is similar to {@link #MODE_NORMAL} except the echo suppression\n     * is enabled. It should be only used when the speaker phone is on.\n     ",
    "links" : [ "#MODE_NORMAL" ]
  }, {
    "name" : "MODE_LAST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStreams",
    "type" : "Map<AudioStream, Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNative",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public AudioStream[] getStreams()",
    "returnType" : "AudioStream[]",
    "comment" : "\n     * Returns the {@link AudioStream}s in this group.\n     ",
    "links" : [ "android.net.rtp.AudioStream" ]
  }, {
    "name" : "public int getMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMode(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Changes the current mode. It must be one of {@link #MODE_ON_HOLD},\n     * {@link #MODE_MUTED}, {@link #MODE_NORMAL}, and\n     * {@link #MODE_ECHO_SUPPRESSION}.\n     *\n     * @param mode The mode to change to.\n     * @throws IllegalArgumentException if the mode is invalid.\n     ",
    "links" : [ "#MODE_ECHO_SUPPRESSION", "#MODE_ON_HOLD", "#MODE_NORMAL", "#MODE_MUTED" ]
  }, {
    "name" : "private native void nativeSetMode(int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized void add(AudioStream stream)",
    "returnType" : "void",
    "comment" : " Package-private method used by AudioStream.join().",
    "links" : [ ]
  }, {
    "name" : "private native long nativeAdd(int mode, int socket, String remoteAddress, int remotePort, String codecSpec, int dtmfType, Parcel attributionSource)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized void remove(AudioStream stream)",
    "returnType" : "void",
    "comment" : " Package-private method used by AudioStream.join().",
    "links" : [ ]
  }, {
    "name" : "private native void nativeRemove(long id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendDtmf(int event)",
    "returnType" : "void",
    "comment" : "\n     * Sends a DTMF digit to every {@link AudioStream} in this group. Currently\n     * only event {@code 0} to {@code 15} are supported.\n     *\n     * @throws IllegalArgumentException if the event is invalid.\n     ",
    "links" : [ "android.net.rtp.AudioStream" ]
  }, {
    "name" : "private native void nativeSendDtmf(int event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes every {@link AudioStream} in this group.\n     ",
    "links" : [ "android.net.rtp.AudioStream" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public AudioStream[] getStreams()", "public int getMode()", "public void setMode(int mode)", "private native void nativeSetMode(int mode)", " synchronized void add(AudioStream stream)", "private native long nativeAdd(int mode, int socket, String remoteAddress, int remotePort, String codecSpec, int dtmfType, Parcel attributionSource)", " synchronized void remove(AudioStream stream)", "private native void nativeRemove(long id)", "public void sendDtmf(int event)", "private native void nativeSendDtmf(int event)", "public void clear()", "protected void finalize() throws Throwable" ],
  "variableNames" : [ "MODE_ON_HOLD", "MODE_MUTED", "MODE_NORMAL", "MODE_ECHO_SUPPRESSION", "MODE_LAST", "mStreams", "mMode", "mNative", "mContext" ]
}