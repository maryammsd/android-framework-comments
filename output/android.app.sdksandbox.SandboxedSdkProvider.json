{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/sdksandbox/SandboxedSdkProvider.java",
  "packageName" : "android.app.sdksandbox",
  "className" : "SandboxedSdkProvider",
  "comment" : "\n * Encapsulates API which SDK sandbox can use to interact with SDKs loaded into it.\n *\n * <p>SDK has to implement this abstract class to generate an entry point for SDK sandbox to be able\n * to call it through.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSdkSandboxController",
    "type" : "SdkSandboxController",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void attachContext(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "\n     * Sets the SDK {@link Context} which can then be received using {@link\n     * SandboxedSdkProvider#getContext()}. This is called before {@link\n     * SandboxedSdkProvider#onLoadSdk} is invoked. No operations requiring a {@link Context} should\n     * be performed before then, as {@link SandboxedSdkProvider#getContext} will return null until\n     * this method has been called.\n     *\n     * <p>Throws IllegalStateException if a base context has already been set.\n     *\n     * @param context The new base context.\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkProvider#getContext()", "android.content.Context", "android.app.sdksandbox.SandboxedSdkProvider#getContext", "android.app.sdksandbox.SandboxedSdkProvider#onLoadSdk" ]
  }, {
    "name" : "public final Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Return the {@link Context} previously set through {@link SandboxedSdkProvider#attachContext}.\n     * This will return null if no context has been previously set.\n     ",
    "links" : [ "android.content.Context", "android.app.sdksandbox.SandboxedSdkProvider#attachContext" ]
  }, {
    "name" : "public abstract SandboxedSdk onLoadSdk(@NonNull Bundle params) throws LoadSdkException",
    "returnType" : "SandboxedSdk",
    "comment" : "\n     * Does the work needed for the SDK to start handling requests.\n     *\n     * <p>This function is called by the SDK sandbox after it loads the SDK.\n     *\n     * <p>SDK should do any work to be ready to handle upcoming requests. It should not do any\n     * long-running tasks here, like I/O and network calls. Doing so can prevent the SDK from\n     * receiving requests from the client. Additionally, it should not do initialization that\n     * depends on other SDKs being loaded into the SDK sandbox.\n     *\n     * <p>The SDK should not do any operations requiring a {@link Context} object before this method\n     * has been called.\n     *\n     * @param params list of params passed from the client when it loads the SDK. This can be empty.\n     * @return Returns a {@link SandboxedSdk}, passed back to the client. The IBinder used to create\n     *     the {@link SandboxedSdk} object will be used by the client to call into the SDK.\n     ",
    "links" : [ "android.content.Context", "android.app.sdksandbox.SandboxedSdk" ]
  }, {
    "name" : "public void beforeUnloadSdk()",
    "returnType" : "void",
    "comment" : "\n     * Does the work needed for the SDK to free its resources before being unloaded.\n     *\n     * <p>This function is called by the SDK sandbox manager before it unloads the SDK. The SDK\n     * should fail any invocations on the Binder previously returned to the client through {@link\n     * SandboxedSdk#getInterface}.\n     *\n     * <p>The SDK should not do any long-running tasks here, like I/O and network calls.\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdk#getInterface" ]
  }, {
    "name" : "public abstract View getView(@NonNull Context windowContext, @NonNull Bundle params, int width, int height)",
    "returnType" : "View",
    "comment" : "\n     * Requests a view to be remotely rendered to the client app process.\n     *\n     * <p>Returns {@link View} will be wrapped into {@link SurfacePackage}. the resulting {@link\n     * SurfacePackage} will be sent back to the client application.\n     *\n     * <p>The SDK should not do any long-running tasks here, like I/O and network calls. Doing so\n     * can prevent the SDK from receiving requests from the client.\n     *\n     * @param windowContext the {@link Context} of the display which meant to show the view\n     * @param params list of params passed from the client application requesting the view\n     * @param width The view returned will be laid as if in a window of this width, in pixels.\n     * @param height The view returned will be laid as if in a window of this height, in pixels.\n     * @return a {@link View} which SDK sandbox pass to the client application requesting the view\n     * @deprecated This method will no longer be supported as it is being used by {@link\n     *     SdkSandboxManager#requestSurfacePackage} which is getting deprecated.\n     ",
    "links" : [ "android.view.SurfaceControlViewHost.SurfacePackage", "android.content.Context", "android.view.View", "android.app.sdksandbox.SdkSandboxManager#requestSurfacePackage" ]
  } ],
  "methodNames" : [ "public final void attachContext(@NonNull Context context)", "public final Context getContext()", "public abstract SandboxedSdk onLoadSdk(@NonNull Bundle params) throws LoadSdkException", "public void beforeUnloadSdk()", "public abstract View getView(@NonNull Context windowContext, @NonNull Bundle params, int width, int height)" ],
  "variableNames" : [ "mContext", "mSdkSandboxController" ]
}