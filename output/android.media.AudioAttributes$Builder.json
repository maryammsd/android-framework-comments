{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioAttributes.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link AudioAttributes} objects.\n     * <p> Here is an example where <code>Builder</code> is used to define the\n     * {@link AudioAttributes} to be used by a new <code>AudioTrack</code> instance:\n     *\n     * <pre class=\"prettyprint\">\n     * AudioTrack myTrack = new AudioTrack(\n     *         new AudioAttributes.Builder()\n     *             .setUsage(AudioAttributes.USAGE_MEDIA)\n     *             .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\n     *             .build(),\n     *         myFormat, myBuffSize, AudioTrack.MODE_STREAM, mySession);\n     * </pre>\n     *\n     * <p>By default all types of information (usage, content type, flags) conveyed by an\n     * <code>AudioAttributes</code> instance are set to \"unknown\". Unknown information will be\n     * interpreted as a default value that is dependent on the context of use, for instance a\n     * {@link MediaPlayer} will use a default usage of {@link AudioAttributes#USAGE_MEDIA}.\n     ",
  "links" : [ "android.media.AudioAttributes", "android.media.MediaPlayer", "android.media.AudioAttributes#USAGE_MEDIA" ],
  "variables" : [ {
    "name" : "mUsage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemUsage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMuteHapticChannels",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsContentSpatialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpatializationBehavior",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTags",
    "type" : "HashSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBundle",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrivacySensitive",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIVACY_SENSITIVE_DEFAULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIVACY_SENSITIVE_DISABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIVACY_SENSITIVE_ENABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public AudioAttributes build()",
    "returnType" : "AudioAttributes",
    "comment" : "\n         * Combines all of the attributes that have been set and return a new\n         * {@link AudioAttributes} object.\n         * @return a new {@link AudioAttributes} object\n         ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder setUsage(@AttributeSdkUsage int usage)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the attribute describing what is the intended use of the audio signal,\n         * such as alarm or ringtone.\n         * @param usage the usage to set.\n         * @return the same Builder instance.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSystemUsage(@AttributeSystemUsage int systemUsage)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Sets the attribute describing what is the intended use of the audio signal for categories\n         * of sounds restricted to the system, such as vehicle status or emergency.\n         *\n         * <p>Note that the AudioAttributes have a single usage value, therefore it is illegal to\n         * call both this method and {@link #setUsage(int)}.\n         * @param systemUsage the system-restricted usage.\n         * @return the same Builder instance.\n         ",
    "links" : [ "#setUsage(int)" ]
  }, {
    "name" : "public Builder setContentType(@AttributeContentType int contentType)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the attribute describing the content type of the audio signal, such as speech,\n         * or music.\n         * @param contentType the content type values, one of\n         *     {@link AudioAttributes#CONTENT_TYPE_MOVIE},\n         *     {@link AudioAttributes#CONTENT_TYPE_MUSIC},\n         *     {@link AudioAttributes#CONTENT_TYPE_SONIFICATION},\n         *     {@link AudioAttributes#CONTENT_TYPE_SPEECH},\n         *     {@link AudioAttributes#CONTENT_TYPE_UNKNOWN}.\n         * @return the same Builder instance.\n         ",
    "links" : [ "android.media.AudioAttributes#CONTENT_TYPE_MUSIC", "android.media.AudioAttributes#CONTENT_TYPE_SPEECH", "android.media.AudioAttributes#CONTENT_TYPE_UNKNOWN", "android.media.AudioAttributes#CONTENT_TYPE_SONIFICATION", "android.media.AudioAttributes#CONTENT_TYPE_MOVIE" ]
  }, {
    "name" : "public Builder setInternalContentType(@AttrInternalContentType int contentType)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Sets the attribute describing the content type of the audio signal, such as speech,\n         * , music or ultrasound.\n         * @param contentType the content type values.\n         * @return the same Builder instance.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFlags(int flags)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the combination of flags.\n         *\n         * This is a bitwise OR with the existing flags.\n         * @param flags a combination of {@link AudioAttributes#FLAG_AUDIBILITY_ENFORCED},\n         *    {@link AudioAttributes#FLAG_HW_AV_SYNC}.\n         * @return the same Builder instance.\n         ",
    "links" : [ "android.media.AudioAttributes#FLAG_HW_AV_SYNC", "android.media.AudioAttributes#FLAG_AUDIBILITY_ENFORCED" ]
  }, {
    "name" : "public Builder setHotwordModeEnabled(boolean enable)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Request for capture in hotword mode.\n         *\n         * Requests an audio path optimized for Hotword detection use cases from\n         * the low power audio DSP. This is valid only for capture with\n         * audio source {@link MediaRecorder.AudioSource#VOICE_RECOGNITION}.\n         * There is no guarantee that this mode is available on the device.\n         * @return the same Builder instance.\n         ",
    "links" : [ "MediaRecorder.AudioSource#VOICE_RECOGNITION" ]
  }, {
    "name" : "public Builder setAllowedCapturePolicy(@CapturePolicy int capturePolicy)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the audio may or may not be captured by other apps or the system.\n         *\n         * The default is {@link AudioAttributes#ALLOW_CAPTURE_BY_ALL}.\n         *\n         * There are multiple ways to set this policy:\n         * <ul>\n         * <li> for each track independently, with this method </li>\n         * <li> application-wide at runtime, with\n         *      {@link AudioManager#setAllowedCapturePolicy(int)} </li>\n         * <li> application-wide at build time, see {@code allowAudioPlaybackCapture} in the\n         *      application manifest. </li>\n         * </ul>\n         * The most restrictive policy is always applied.\n         *\n         * See {@link AudioPlaybackCaptureConfiguration} for more details on\n         * which audio signals can be captured.\n         *\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the argument is not a valid value.\n         ",
    "links" : [ "android.media.AudioAttributes#ALLOW_CAPTURE_BY_ALL", "android.media.AudioManager#setAllowedCapturePolicy(int)", "android.media.AudioPlaybackCaptureConfiguration" ]
  }, {
    "name" : "public Builder setIsContentSpatialized(boolean isSpatialized)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the content has already been processed for spatialization.\n         * If it has, setting this to true will prevent issues such as double-processing.\n         * @param isSpatialized\n         * @return the same Builder instance\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSpatializationBehavior(@SpatializationBehavior int sb)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the behavior affecting whether spatialization will be used.\n         * @param sb the spatialization behavior\n         * @return the same Builder instance\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder replaceFlags(int flags)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Replaces flags.\n         * @param flags any combination of {@link AudioAttributes#FLAG_ALL}.\n         * @return the same Builder instance.\n         ",
    "links" : [ "android.media.AudioAttributes#FLAG_ALL" ]
  }, {
    "name" : "public Builder addBundle(@NonNull Bundle bundle)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Adds a Bundle of data\n         * @param bundle a non-null Bundle\n         * @return the same builder instance\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addTag(String tag)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Add a custom tag stored as a string\n         * @param tag\n         * @return the same Builder instance.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder replaceTags(HashSet<String> tags)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Replace all custom tags\n         * @param tags\n         * @return the same Builder instance.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLegacyStreamType(int streamType)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets attributes as inferred from the legacy stream types.\n         * Warning: do not use this method in combination with setting any other attributes such as\n         * usage, content type, flags or haptic control, as this method will overwrite (the more\n         * accurate) information describing the use case previously set in the <code>Builder</code>.\n         * In general, avoid using it and prefer setting usage and content type directly\n         * with {@link #setUsage(int)} and {@link #setContentType(int)}.\n         * <p>Use this method when building an {@link AudioAttributes} instance to initialize some\n         * of the attributes by information derived from a legacy stream type.\n         * @param streamType one of {@link AudioManager#STREAM_VOICE_CALL},\n         *   {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING},\n         *   {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM},\n         *    or {@link AudioManager#STREAM_NOTIFICATION}.\n         * @return the same Builder instance.\n         ",
    "links" : [ "android.media.AudioManager#STREAM_NOTIFICATION", "android.media.AudioManager#STREAM_SYSTEM", "#setContentType(int)", "android.media.AudioManager#STREAM_RING", "android.media.AudioManager#STREAM_ALARM", "android.media.AudioManager#STREAM_VOICE_CALL", "android.media.AudioManager#STREAM_MUSIC", "#setUsage(int)", "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder setInternalLegacyStreamType(int streamType)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * For internal framework use only, enables building from hidden stream types.\n         * @param streamType\n         * @return the same Builder instance.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCapturePreset(int preset)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Sets the capture preset.\n         * Use this audio attributes configuration method when building an {@link AudioRecord}\n         * instance with {@link AudioRecord#AudioRecord(AudioAttributes, AudioFormat, int)}.\n         * @param preset one of {@link MediaRecorder.AudioSource#DEFAULT},\n         *     {@link MediaRecorder.AudioSource#MIC}, {@link MediaRecorder.AudioSource#CAMCORDER},\n         *     {@link MediaRecorder.AudioSource#VOICE_RECOGNITION},\n         *     {@link MediaRecorder.AudioSource#VOICE_COMMUNICATION},\n         *     {@link MediaRecorder.AudioSource#UNPROCESSED} or\n         *     {@link MediaRecorder.AudioSource#VOICE_PERFORMANCE}\n         * @return the same Builder instance.\n         ",
    "links" : [ "MediaRecorder.AudioSource#CAMCORDER", "MediaRecorder.AudioSource#VOICE_PERFORMANCE", "android.media.AudioRecord#AudioRecord(AudioAttributes", "MediaRecorder.AudioSource#DEFAULT", "MediaRecorder.AudioSource#MIC", "android.media.AudioRecord", "MediaRecorder.AudioSource#UNPROCESSED", "MediaRecorder.AudioSource#VOICE_RECOGNITION", "MediaRecorder.AudioSource#VOICE_COMMUNICATION" ]
  }, {
    "name" : "public Builder setInternalCapturePreset(int preset)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Same as {@link #setCapturePreset(int)} but authorizes the use of HOTWORD,\n         * REMOTE_SUBMIX, RADIO_TUNER, VOICE_DOWNLINK, VOICE_UPLINK, VOICE_CALL, ECHO_REFERENCE\n         * and ULTRASOUND\n         * @param preset\n         * @return the same Builder instance.\n         ",
    "links" : [ "#setCapturePreset(int)" ]
  }, {
    "name" : "public Builder setHapticChannelsMuted(boolean muted)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifying if haptic should be muted or not when playing audio-haptic coupled data.\n         * By default, haptic channels are disabled.\n         * <p>This will be ignored if the caller doesn't have the\n         * {@link android.Manifest.permission#VIBRATE} permission.\n         * @param muted true to force muting haptic channels.\n         * @return the same Builder instance.\n         ",
    "links" : [ "android.Manifest.permission#VIBRATE" ]
  }, {
    "name" : "public Builder setPrivacySensitive(boolean privacySensitive)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Indicates if an AudioRecord build with this AudioAttributes is privacy sensitive or not.\n         * See {@link AudioRecord.Builder#setPrivacySensitive(boolean)}.\n         * @param privacySensitive True if capture must be marked as privacy sensitive,\n         * false otherwise.\n         * @return the same Builder instance.\n         ",
    "links" : [ "AudioRecord.Builder#setPrivacySensitive(boolean)" ]
  }, {
    "name" : "public Builder setForCallRedirection()",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Designates the audio to be used for call redirection\n         * @return the same Builder instance.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public AudioAttributes build()", "public Builder setUsage(@AttributeSdkUsage int usage)", "public Builder setSystemUsage(@AttributeSystemUsage int systemUsage)", "public Builder setContentType(@AttributeContentType int contentType)", "public Builder setInternalContentType(@AttrInternalContentType int contentType)", "public Builder setFlags(int flags)", "public Builder setHotwordModeEnabled(boolean enable)", "public Builder setAllowedCapturePolicy(@CapturePolicy int capturePolicy)", "public Builder setIsContentSpatialized(boolean isSpatialized)", "public Builder setSpatializationBehavior(@SpatializationBehavior int sb)", "public Builder replaceFlags(int flags)", "public Builder addBundle(@NonNull Bundle bundle)", "public Builder addTag(String tag)", "public Builder replaceTags(HashSet<String> tags)", "public Builder setLegacyStreamType(int streamType)", "public Builder setInternalLegacyStreamType(int streamType)", "public Builder setCapturePreset(int preset)", "public Builder setInternalCapturePreset(int preset)", "public Builder setHapticChannelsMuted(boolean muted)", "public Builder setPrivacySensitive(boolean privacySensitive)", "public Builder setForCallRedirection()" ],
  "variableNames" : [ "mUsage", "mSystemUsage", "mContentType", "mSource", "mFlags", "mMuteHapticChannels", "mIsContentSpatialized", "mSpatializationBehavior", "mTags", "mBundle", "mPrivacySensitive", "PRIVACY_SENSITIVE_DEFAULT", "PRIVACY_SENSITIVE_DISABLED", "PRIVACY_SENSITIVE_ENABLED" ]
}