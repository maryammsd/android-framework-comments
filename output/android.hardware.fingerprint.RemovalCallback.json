{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/fingerprint/FingerprintManager.java",
  "packageName" : "android.hardware.fingerprint",
  "className" : "RemovalCallback",
  "comment" : "\n     * Callback structure provided to {@link #remove}. Users of {@link FingerprintManager} may\n     * optionally provide an implementation of this to\n     * {@link #remove(Fingerprint, int, RemovalCallback)} for listening to fingerprint template\n     * removal events.\n     *\n     * @hide\n     ",
  "links" : [ "#remove", "#remove(Fingerprint", "android.hardware.fingerprint.FingerprintManager" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onRemovalError(Fingerprint fp, int errMsgId, CharSequence errString)",
    "returnType" : "void",
    "comment" : "\n         * Called when the given fingerprint can't be removed.\n         * @param fp The fingerprint that the call attempted to remove\n         * @param errMsgId An associated error message id\n         * @param errString An error message indicating why the fingerprint id can't be removed\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onRemovalSucceeded(@Nullable Fingerprint fp, int remaining)",
    "returnType" : "void",
    "comment" : "\n         * Called when a given fingerprint is successfully removed.\n         * @param fp The fingerprint template that was removed.\n         * @param remaining The number of fingerprints yet to be removed in this operation. If\n         *         {@link #remove} is called on one fingerprint, this should be 0. If\n         *         {@link #remove} is called on a group, this should be the number of remaining\n         *         fingerprints in the group, and 0 after the last fingerprint is removed.\n         ",
    "links" : [ "#remove" ]
  } ],
  "methodNames" : [ "public void onRemovalError(Fingerprint fp, int errMsgId, CharSequence errString)", "public void onRemovalSucceeded(@Nullable Fingerprint fp, int remaining)" ],
  "variableNames" : [ ]
}