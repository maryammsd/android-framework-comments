{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/security/keystore/recovery/RecoverySession.java",
  "packageName" : "android.security.keystore.recovery",
  "className" : "RecoverySession",
  "comment" : "\n * Session to recover a {@link KeyChainSnapshot} from the remote trusted hardware, initiated by a\n * recovery agent.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_ID_LENGTH_BYTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecoveryController",
    "type" : "RecoveryController",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static RecoverySession newInstance(RecoveryController recoveryController)",
    "returnType" : "RecoverySession",
    "comment" : "\n     * A new session, started by the {@link RecoveryController}.\n     ",
    "links" : [ "RecoveryController" ]
  }, {
    "name" : "private static String newSessionId()",
    "returnType" : "String",
    "comment" : "\n     * Returns a new random session ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] start(@NonNull String rootCertificateAlias, @NonNull CertPath verifierCertPath, @NonNull byte[] vaultParams, @NonNull byte[] vaultChallenge, @NonNull List<KeyChainProtectionParams> secrets) throws CertificateException, InternalRecoveryServiceException",
    "returnType" : "byte[]",
    "comment" : "\n     * Starts a recovery session and returns a blob with proof of recovery secret possession.\n     * The method generates a symmetric key for a session, which trusted remote device can use to\n     * return recovery key.\n     *\n     * @param rootCertificateAlias The alias of the root certificate that is already in the Android\n     *     OS. The root certificate will be used for validating {@code verifierCertPath}.\n     * @param verifierCertPath The certificate path used to create the recovery blob on the source\n     *     device. Keystore will verify the certificate path by using the root of trust.\n     * @param vaultParams Must match the parameters in the corresponding field in the recovery blob.\n     *     Used to limit number of guesses.\n     * @param vaultChallenge Data passed from server for this recovery session and used to prevent\n     *     replay attacks.\n     * @param secrets Secrets provided by user, the method only uses type and secret fields.\n     * @return The binary blob with recovery claim. It is encrypted with verifierPublicKey\n     * and contains a proof of user secrets possession, session symmetric\n     *     key and parameters necessary to identify the counter with the number of failed recovery\n     *     attempts.\n     * @throws CertificateException if the {@code verifierCertPath} is invalid.\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Key> recoverKeyChainSnapshot(@NonNull byte[] recoveryKeyBlob, @NonNull List<WrappedApplicationKey> applicationKeys) throws SessionExpiredException, DecryptionFailedException, InternalRecoveryServiceException",
    "returnType" : "Map<String, Key>",
    "comment" : "\n     * Imports key chain snapshot recovered from a remote vault.\n     *\n     * @param recoveryKeyBlob Recovery blob encrypted by symmetric key generated for this session.\n     * @param applicationKeys Application keys. Key material can be decrypted using recoveryKeyBlob\n     *     and session key generated by {@link #start}.\n     * @return {@code Map} from recovered keys aliases to their references.\n     * @throws SessionExpiredException if {@code session} has since been closed.\n     * @throws DecryptionFailedException if unable to decrypt the snapshot.\n     * @throws InternalRecoveryServiceException if an error occurs internal to the recovery service.\n     ",
    "links" : [ "#start" ]
  }, {
    "name" : "private Map<String, Key> getKeysFromGrants(@NonNull Map<String, String> grantAliases) throws InternalRecoveryServiceException",
    "returnType" : "Map<String, Key>",
    "comment" : " Given a map from alias to grant alias, returns a map from alias to a {@link Key} handle. ",
    "links" : [ "Key" ]
  }, {
    "name" : " String getSessionId()",
    "returnType" : "String",
    "comment" : "\n     * An internal session ID, used by the framework to match recovery claims to snapshot responses.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Deletes all data associated with {@code session}.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "SESSION_ID_LENGTH_BYTES", "mSessionId", "mRecoveryController" ],
  "methodNames" : [ " static RecoverySession newInstance(RecoveryController recoveryController)", "private static String newSessionId()", "public byte[] start(@NonNull String rootCertificateAlias, @NonNull CertPath verifierCertPath, @NonNull byte[] vaultParams, @NonNull byte[] vaultChallenge, @NonNull List<KeyChainProtectionParams> secrets) throws CertificateException, InternalRecoveryServiceException", "public Map<String, Key> recoverKeyChainSnapshot(@NonNull byte[] recoveryKeyBlob, @NonNull List<WrappedApplicationKey> applicationKeys) throws SessionExpiredException, DecryptionFailedException, InternalRecoveryServiceException", "private Map<String, Key> getKeysFromGrants(@NonNull Map<String, String> grantAliases) throws InternalRecoveryServiceException", " String getSessionId()", "public void close()" ]
}