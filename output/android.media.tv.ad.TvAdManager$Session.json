{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/ad/TvAdManager.java",
  "packageName" : "android.media.tv.ad",
  "className" : "Session",
  "comment" : "\n     * The Session provides the per-session functionality of AD service.\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DISPATCH_IN_PROGRESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISPATCH_NOT_HANDLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISPATCH_HANDLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INPUT_SESSION_NOT_RESPONDING_TIMEOUT",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ITvAdManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeq",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallbackRecordMap",
    "type" : "SparseArray<SessionCallbackRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "InputEventHandler",
    "comment" : " protect pending input events and the input channel.",
    "links" : [ ]
  }, {
    "name" : "mInputSession",
    "type" : "TvInputManager.Session",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingEventPool",
    "type" : "Pools.Pool<PendingEvent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingEvents",
    "type" : "SparseArray<PendingEvent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSender",
    "type" : "TvInputEventSender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputChannel",
    "type" : "InputChannel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public TvInputManager.Session getInputSession()",
    "returnType" : "TvInputManager.Session",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInputSession(TvInputManager.Session inputSession)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n         * Releases this session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Sets the {@link android.view.Surface} for this session.\n         *\n         * @param surface A {@link android.view.Surface} used to render AD.\n         ",
    "links" : [ "android.view.Surface" ]
  }, {
    "name" : " void createMediaView(@NonNull View view, @NonNull Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Creates a media view. Once the media view is created, {@link #relayoutMediaView}\n         * should be called whenever the layout of its containing view is changed.\n         * {@link #removeMediaView()} should be called to remove the media view.\n         * Since a session can have only one media view, this method should be called only once\n         * or it can be called again after calling {@link #removeMediaView()}.\n         *\n         * @param view A view for AD service.\n         * @param frame A position of the media view.\n         * @throws IllegalStateException if {@code view} is not attached to a window.\n         ",
    "links" : [ "#removeMediaView()", "#relayoutMediaView" ]
  }, {
    "name" : " void relayoutMediaView(@NonNull Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Relayouts the current media view.\n         *\n         * @param frame A new position of the media view.\n         ",
    "links" : [ ]
  }, {
    "name" : " void removeMediaView()",
    "returnType" : "void",
    "comment" : "\n         * Removes the current media view.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchSurfaceChanged(int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Notifies of any structural changes (format or size) of the surface passed in\n         * {@link #setSurface}.\n         *\n         * @param format The new PixelFormat of the surface.\n         * @param width The new width of the surface.\n         * @param height The new height of the surface.\n         ",
    "links" : [ "#setSurface" ]
  }, {
    "name" : "private void flushPendingEventsLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void startAdService()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void stopAdService()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void resetAdService()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentVideoBounds(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentChannelUri(@Nullable Uri channelUri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendTrackInfoList(@NonNull List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentTvInputId(@Nullable String inputId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendSigningResult(@NonNull String signingId, @NonNull byte[] result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyError(@NonNull String errMsg, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyTvMessage(int type, Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Notifies AD service session when a new TV message is received.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyTvInputSessionData(String type, Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Notifies data from session of linked TvInputService.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int dispatchInputEvent(@NonNull InputEvent event, Object token, @NonNull FinishedInputEventCallback callback, @NonNull Handler handler)",
    "returnType" : "int",
    "comment" : "\n         * Dispatches an input event to this session.\n         *\n         * @param event An {@link InputEvent} to dispatch. Cannot be {@code null}.\n         * @param token A token used to identify the input event later in the callback.\n         * @param callback A callback used to receive the dispatch result. Cannot be {@code null}.\n         * @param handler A {@link Handler} that the dispatch result will be delivered to. Cannot be\n         *            {@code null}.\n         * @return Returns {@link #DISPATCH_HANDLED} if the event was handled. Returns\n         *         {@link #DISPATCH_NOT_HANDLED} if the event was not handled. Returns\n         *         {@link #DISPATCH_IN_PROGRESS} if the event is in progress and the callback will\n         *         be invoked later.\n         * @hide\n         ",
    "links" : [ "#DISPATCH_NOT_HANDLED", "android.view.InputEvent", "android.os.Handler", "#DISPATCH_IN_PROGRESS", "#DISPATCH_HANDLED" ]
  }, {
    "name" : "private PendingEvent obtainPendingEventLocked(InputEvent event, Object token, FinishedInputEventCallback callback, Handler handler)",
    "returnType" : "PendingEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void invokeFinishedInputEventCallback(PendingEvent p, boolean handled)",
    "returnType" : "void",
    "comment" : " Assumes the event has already been removed from the queue.",
    "links" : [ ]
  }, {
    "name" : "private void sendInputEventAndReportResultOnMainLooper(PendingEvent p)",
    "returnType" : "void",
    "comment" : " Must be called on the main looper",
    "links" : [ ]
  }, {
    "name" : "private int sendInputEventOnMainLooperLocked(PendingEvent p)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void finishedInputEvent(int seq, boolean handled, boolean timeout)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recyclePendingEventLocked(PendingEvent p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public TvInputManager.Session getInputSession()", "public void setInputSession(TvInputManager.Session inputSession)", "public void release()", "public void setSurface(Surface surface)", " void createMediaView(@NonNull View view, @NonNull Rect frame)", " void relayoutMediaView(@NonNull Rect frame)", " void removeMediaView()", "public void dispatchSurfaceChanged(int format, int width, int height)", "private void flushPendingEventsLocked()", "private void releaseInternal()", " void startAdService()", " void stopAdService()", " void resetAdService()", " void sendCurrentVideoBounds(@NonNull Rect bounds)", " void sendCurrentChannelUri(@Nullable Uri channelUri)", " void sendTrackInfoList(@NonNull List<TvTrackInfo> tracks)", " void sendCurrentTvInputId(@Nullable String inputId)", " void sendSigningResult(@NonNull String signingId, @NonNull byte[] result)", " void notifyError(@NonNull String errMsg, @NonNull Bundle params)", "public void notifyTvMessage(int type, Bundle data)", "public void notifyTvInputSessionData(String type, Bundle data)", "public int dispatchInputEvent(@NonNull InputEvent event, Object token, @NonNull FinishedInputEventCallback callback, @NonNull Handler handler)", "private PendingEvent obtainPendingEventLocked(InputEvent event, Object token, FinishedInputEventCallback callback, Handler handler)", " void invokeFinishedInputEventCallback(PendingEvent p, boolean handled)", "private void sendInputEventAndReportResultOnMainLooper(PendingEvent p)", "private int sendInputEventOnMainLooperLocked(PendingEvent p)", " void finishedInputEvent(int seq, boolean handled, boolean timeout)", "private void recyclePendingEventLocked(PendingEvent p)" ],
  "variableNames" : [ "DISPATCH_IN_PROGRESS", "DISPATCH_NOT_HANDLED", "DISPATCH_HANDLED", "INPUT_SESSION_NOT_RESPONDING_TIMEOUT", "mService", "mUserId", "mSeq", "mSessionCallbackRecordMap", "mHandler", "mInputSession", "mPendingEventPool", "mPendingEvents", "mSender", "mInputChannel", "mToken" ]
}