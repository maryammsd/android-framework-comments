{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/NFSubstitution.java",
  "packageName" : "android.icu.text",
  "className" : "ModulusSubstitution",
  "comment" : "\n * A substitution that divides the number being formatted by the its rule's\n * divisor and formats the remainder.  Represented by \"&gt;&gt;\" in a\n * regular rule.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "divisor",
    "type" : "long",
    "comment" : "\n     * The divisor of the rule owning this substitution\n     ",
    "links" : [ ]
  }, {
    "name" : "ruleToUse",
    "type" : "NFRule",
    "comment" : "\n     * If this is a &gt;&gt;&gt; substitution, the rule to use to format\n     * the substitution value.  Otherwise, null.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDivisor(int radix, short exponent)",
    "returnType" : "void",
    "comment" : "\n     * Makes the substitution's divisor conform to that of the rule\n     * that owns it.  Used when the divisor is determined after creation.\n     * @param radix The radix of the divisor.\n     * @param exponent The exponent of the divisor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n     * Augments the inherited equals() function by comparing divisors and\n     * ruleToUse.\n     * @param that The other substitution\n     * @return true if the two substitutions are functionally equivalent\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doSubstitution(long number, StringBuilder toInsertInto, int position, int recursionCount)",
    "returnType" : "void",
    "comment" : "\n     * If this is a &gt;&gt;&gt; substitution, use ruleToUse to fill in\n     * the substitution.  Otherwise, just use the superclass function.\n     * @param number The number being formatted\n     * @param toInsertInto The string to insert the result of this substitution\n     * into\n     * @param position The position of the rule text in toInsertInto\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doSubstitution(double number, StringBuilder toInsertInto, int position, int recursionCount)",
    "returnType" : "void",
    "comment" : "\n     * If this is a &gt;&gt;&gt; substitution, use ruleToUse to fill in\n     * the substitution.  Otherwise, just use the superclass function.\n     * @param number The number being formatted\n     * @param toInsertInto The string to insert the result of this substitution\n     * into\n     * @param position The position of the rule text in toInsertInto\n     ",
    "links" : [ ]
  }, {
    "name" : "public long transformNumber(long number)",
    "returnType" : "long",
    "comment" : "\n     * Divides the number being formatted by the rule's divisor and\n     * returns the remainder.\n     * @param number The number being formatted\n     * @return \"number\" mod divisor\n     ",
    "links" : [ ]
  }, {
    "name" : "public double transformNumber(double number)",
    "returnType" : "double",
    "comment" : "\n     * Divides the number being formatted by the rule's divisor and\n     * returns the remainder.\n     * @param number The number being formatted\n     * @return \"number\" mod divisor\n     ",
    "links" : [ ]
  }, {
    "name" : "public Number doParse(String text, ParsePosition parsePosition, double baseValue, double upperBound, boolean lenientParse, int nonNumericalExecutedRuleMask)",
    "returnType" : "Number",
    "comment" : "\n     * If this is a &gt;&gt;&gt; substitution, match only against ruleToUse.\n     * Otherwise, use the superclass function.\n     * @param text The string to parse\n     * @param parsePosition Ignored on entry, updated on exit to point to\n     * the first unmatched character.\n     * @param baseValue The partial parse result prior to calling this\n     * routine.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double composeRuleValue(double newRuleValue, double oldRuleValue)",
    "returnType" : "double",
    "comment" : "\n     * Returns the highest multiple of the rule's divisor that its less\n     * than or equal to oldRuleValue, plus newRuleValue.  (The result\n     * is the sum of the result of parsing the substitution plus the\n     * base value of the rule containing the substitution, but if the\n     * owning rule's base value isn't an even multiple of its divisor,\n     * we have to round it down to a multiple of the divisor, or we\n     * get unwanted digits in the result.)\n     * @param newRuleValue The result of parsing the substitution\n     * @param oldRuleValue The base value of the rule containing the\n     * substitution\n     ",
    "links" : [ ]
  }, {
    "name" : "public double calcUpperBound(double oldUpperBound)",
    "returnType" : "double",
    "comment" : "\n     * Sets the upper bound down to the owning rule's divisor\n     * @param oldUpperBound Ignored\n     * @return The owning rule's divisor\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isModulusSubstitution()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true.  This _is_ a ModulusSubstitution.\n     * @return true\n     ",
    "links" : [ ]
  }, {
    "name" : " char tokenChar()",
    "returnType" : "char",
    "comment" : "\n     * The token character of a ModulusSubstitution is &gt;.\n     * @return '&gt;'\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setDivisor(int radix, short exponent)", "public boolean equals(Object that)", "public void doSubstitution(long number, StringBuilder toInsertInto, int position, int recursionCount)", "public void doSubstitution(double number, StringBuilder toInsertInto, int position, int recursionCount)", "public long transformNumber(long number)", "public double transformNumber(double number)", "public Number doParse(String text, ParsePosition parsePosition, double baseValue, double upperBound, boolean lenientParse, int nonNumericalExecutedRuleMask)", "public double composeRuleValue(double newRuleValue, double oldRuleValue)", "public double calcUpperBound(double oldUpperBound)", "public boolean isModulusSubstitution()", " char tokenChar()" ],
  "variableNames" : [ "divisor", "ruleToUse" ]
}