{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/WindowInsets.java",
  "packageName" : "android.view",
  "className" : "WindowInsets",
  "comment" : "\n * Describes a set of insets for window content.\n *\n * <p>WindowInsets are immutable and may be expanded to include more inset types in the future.\n * To adjust insets, use one of the supplied clone methods to obtain a new WindowInsets instance\n * with the adjusted properties.</p>\n *\n * <p>Note: Before {@link android.os.Build.VERSION_CODES#P P}, WindowInsets instances were only\n * immutable during a single layout pass (i.e. would return the same values between\n * {@link View#onApplyWindowInsets} and {@link View#onLayout}, but could return other values\n * otherwise). Starting with {@link android.os.Build.VERSION_CODES#P P}, WindowInsets are\n * always immutable and implement equality.\n *\n * @see View.OnApplyWindowInsetsListener\n * @see View#onApplyWindowInsets(WindowInsets)\n ",
  "variables" : [ {
    "name" : "mTypeInsetsMap",
    "type" : "Insets[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypeMaxInsetsMap",
    "type" : "Insets[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypeVisibilityMap",
    "type" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRound",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayCutout",
    "type" : "DisplayCutout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlwaysConsumeSystemBars",
    "type" : "boolean",
    "comment" : "\n     * In multi-window we force show the navigation bar. Because we don't want that the surface size\n     * changes in this mode, we instead have a flag whether the navigation bar size should always\n     * be consumed, so the app is treated like there is no virtual navigation bar at all.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSystemWindowInsetsConsumed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStableInsetsConsumed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayCutoutConsumed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompatInsetsTypes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompatIgnoreVisibility",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONSUMED",
    "type" : "WindowInsets",
    "comment" : "\n     * A {@link WindowInsets} instance for which {@link #isConsumed()} returns {@code true}.\n     * <p>\n     * This can be used during insets dispatch in the view hierarchy by returning this value from\n     * {@link View#onApplyWindowInsets(WindowInsets)} or\n     * {@link OnApplyWindowInsetsListener#onApplyWindowInsets(View, WindowInsets)} to stop dispatch\n     * the insets to its children to avoid traversing the entire view hierarchy.\n     * <p>\n     * The application should return this instance once it has taken care of all insets on a certain\n     * level in the view hierarchy, and doesn't need to dispatch to its children anymore for better\n     * performance.\n     *\n     * @see #isConsumed()\n     ",
    "links" : [ "android.view.View#onApplyWindowInsets(WindowInsets)", "android.view.View.OnApplyWindowInsetsListener#onApplyWindowInsets(View", "android.view.WindowInsets", "#isConsumed()" ]
  } ],
  "methods" : [ {
    "name" : "private static DisplayCutout displayCutoutCopyConstructorArgument(WindowInsets w)",
    "returnType" : "DisplayCutout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Insets getInsets(Insets[] typeInsetsMap, @InsetsType int typeMask)",
    "returnType" : "Insets",
    "comment" : "\n     * @return The insets that include system bars indicated by {@code typeMask}, taken from\n     *         {@code typeInsetsMap}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setInsets(Insets[] typeInsetsMap, @InsetsType int typeMask, Insets insets)",
    "returnType" : "void",
    "comment" : "\n     * Sets all entries in {@code typeInsetsMap} that belong to {@code typeMask} to {@code insets},\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Insets[] createCompatTypeMap(@Nullable Rect insets)",
    "returnType" : "Insets[]",
    "comment" : "\n     * Creates a indexOf(type) -> inset map for which the {@code insets} is just mapped to\n     * {@link InsetsType#statusBars()} and {@link InsetsType#navigationBars()}, depending on the\n     * location of the inset.\n     ",
    "links" : [ "android.view.WindowInsets.Type.InsetsType#statusBars()", "android.view.WindowInsets.Type.InsetsType#navigationBars()" ]
  }, {
    "name" : "public static void assignCompatInsets(Insets[] typeInsetsMap, Rect insets)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean[] createCompatVisibilityMap(@Nullable Insets[] typeInsetsMap)",
    "returnType" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getSystemWindowInsetsAsRect()",
    "returnType" : "Rect",
    "comment" : "\n     * Used to provide a safe copy of the system window insets to pass through\n     * to the existing fitSystemWindows method and other similar internals.\n     * @hide\n     *\n     * @deprecated use {@link #getSystemWindowInsets()} instead.\n     ",
    "links" : [ "#getSystemWindowInsets()" ]
  }, {
    "name" : "public Insets getSystemWindowInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Returns the system window insets in pixels.\n     *\n     * <p>The system window inset represents the area of a full-screen window that is\n     * partially or fully obscured by the status bar, navigation bar, IME or other system windows.\n     * </p>\n     *\n     * @return The system window insets\n     * @deprecated Use {@link #getInsets(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsets(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public Insets getInsets(@InsetsType int typeMask)",
    "returnType" : "Insets",
    "comment" : "\n     * Returns the insets of a specific set of windows causing insets, denoted by the\n     * {@code typeMask} bit mask of {@link InsetsType}s.\n     *\n     * @param typeMask Bit mask of {@link InsetsType}s to query the insets for.\n     * @return The insets.\n     ",
    "links" : [ "android.view.WindowInsets.Type.InsetsType" ]
  }, {
    "name" : "public Insets getInsetsIgnoringVisibility(@InsetsType int typeMask)",
    "returnType" : "Insets",
    "comment" : "\n     * Returns the insets a specific set of windows can cause, denoted by the\n     * {@code typeMask} bit mask of {@link InsetsType}s, regardless of whether that type is\n     * currently visible or not.\n     *\n     * <p>The insets represents the area of a a window that that <b>may</b> be partially\n     * or fully obscured by the system window identified by {@code type}. This value does not\n     * change based on the visibility state of those elements. For example, if the status bar is\n     * normally shown, but temporarily hidden, the inset returned here will still provide the inset\n     * associated with the status bar being shown.</p>\n     *\n     * @param typeMask Bit mask of {@link InsetsType}s to query the insets for.\n     * @return The insets.\n     *\n     * @throws IllegalArgumentException If the caller tries to query {@link Type#ime()}. Insets are\n     *                                  not available if the IME isn't visible as the height of the\n     *                                  IME is dynamic depending on the {@link EditorInfo} of the\n     *                                  currently focused view, as well as the UI state of the IME.\n     ",
    "links" : [ "android.view.WindowInsets.Type.InsetsType", "android.view.WindowInsets.Type.InsetsType#ime()", "android.view.inputmethod.EditorInfo" ]
  }, {
    "name" : "public boolean isVisible(@InsetsType int typeMask)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a set of windows that may cause insets is currently visible on screen,\n     * regardless of whether it actually overlaps with this window.\n     *\n     * @param typeMask Bit mask of {@link Type.InsetsType}s to query visibility status.\n     * @return {@code true} if and only if all windows included in {@code typeMask} are currently\n     *         visible on screen.\n     ",
    "links" : [ "Type.InsetsType" ]
  }, {
    "name" : "public int getSystemWindowInsetLeft()",
    "returnType" : "int",
    "comment" : "\n     * Returns the left system window inset in pixels.\n     *\n     * <p>The system window inset represents the area of a full-screen window that is\n     * partially or fully obscured by the status bar, navigation bar, IME or other system windows.\n     * </p>\n     *\n     * @return The left system window inset\n     * @deprecated Use {@link #getInsets(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsets(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public int getSystemWindowInsetTop()",
    "returnType" : "int",
    "comment" : "\n     * Returns the top system window inset in pixels.\n     *\n     * <p>The system window inset represents the area of a full-screen window that is\n     * partially or fully obscured by the status bar, navigation bar, IME or other system windows.\n     * </p>\n     *\n     * @return The top system window inset\n     * @deprecated Use {@link #getInsets(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsets(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public int getSystemWindowInsetRight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the right system window inset in pixels.\n     *\n     * <p>The system window inset represents the area of a full-screen window that is\n     * partially or fully obscured by the status bar, navigation bar, IME or other system windows.\n     * </p>\n     *\n     * @return The right system window inset\n     * @deprecated Use {@link #getInsets(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsets(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public int getSystemWindowInsetBottom()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bottom system window inset in pixels.\n     *\n     * <p>The system window inset represents the area of a full-screen window that is\n     * partially or fully obscured by the status bar, navigation bar, IME or other system windows.\n     * </p>\n     *\n     * @return The bottom system window inset\n     * @deprecated Use {@link #getInsets(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsets(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public boolean hasSystemWindowInsets()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this WindowInsets has nonzero system window insets.\n     *\n     * <p>The system window inset represents the area of a full-screen window that is\n     * partially or fully obscured by the status bar, navigation bar, IME or other system windows.\n     * </p>\n     *\n     * @return true if any of the system window inset values are nonzero\n     * @deprecated Use {@link #getInsets(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsets(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public boolean hasInsets()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this WindowInsets has any nonzero insets.\n     *\n     * @return true if any inset values are nonzero\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayCutout getDisplayCutout()",
    "returnType" : "DisplayCutout",
    "comment" : "\n     * Returns the display cutout if there is one.\n     *\n     * <p>Note: the display cutout will already be {@link #consumeDisplayCutout consumed} during\n     * dispatch to {@link View#onApplyWindowInsets}, unless the window has requested a\n     * {@link WindowManager.LayoutParams#layoutInDisplayCutoutMode} other than\n     * {@link WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER never} or\n     * {@link WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT default}.\n     *\n     * @return the display cutout or null if there is none\n     * @see DisplayCutout\n     ",
    "links" : [ "WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER", "android.view.View#onApplyWindowInsets", "WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT", "#consumeDisplayCutout", "WindowManager.LayoutParams#layoutInDisplayCutoutMode" ]
  }, {
    "name" : "public WindowInsets consumeDisplayCutout()",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Returns a copy of this WindowInsets with the cutout fully consumed.\n     *\n     * @return A modified copy of this WindowInsets\n     * @deprecated Consuming of different parts individually of a {@link WindowInsets} instance is\n     * deprecated, since {@link WindowInsets} contains many different insets. Use {@link #CONSUMED}\n     * instead to stop dispatching insets.\n     ",
    "links" : [ "#CONSUMED", "android.view.WindowInsets" ]
  }, {
    "name" : "public boolean isConsumed()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if these insets have been fully consumed.\n     *\n     * <p>Insets are considered \"consumed\" if the applicable <code>consume*</code> methods\n     * have been called such that all insets have been set to zero. This affects propagation of\n     * insets through the view hierarchy; insets that have not been fully consumed will continue\n     * to propagate down to child views.</p>\n     *\n     * <p>The result of this method is equivalent to the return value of\n     * {@link View#fitSystemWindows(android.graphics.Rect)}.</p>\n     *\n     * @return true if the insets have been fully consumed.\n     ",
    "links" : [ "android.view.View#fitSystemWindows(android.graphics.Rect)" ]
  }, {
    "name" : "public boolean isRound()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the associated window has a round shape.\n     *\n     * <p>A round window's left, top, right and bottom edges reach all the way to the\n     * associated edges of the window but the corners may not be visible. Views responding\n     * to round insets should take care to not lay out critical elements within the corners\n     * where they may not be accessible.</p>\n     *\n     * @return True if the window is round\n     ",
    "links" : [ ]
  }, {
    "name" : "public WindowInsets consumeSystemWindowInsets()",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Returns a copy of this WindowInsets with the system window insets fully consumed.\n     *\n     * @return A modified copy of this WindowInsets\n     * @deprecated Consuming of different parts individually of a {@link WindowInsets} instance is\n     * deprecated, since {@link WindowInsets} contains many different insets. Use {@link #CONSUMED}\n     * instead to stop dispatching insets.\n     ",
    "links" : [ "#CONSUMED", "android.view.WindowInsets" ]
  }, {
    "name" : "public WindowInsets replaceSystemWindowInsets(int left, int top, int right, int bottom)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Returns a copy of this WindowInsets with selected system window insets replaced\n     * with new values.\n     *\n     * <p>Note: If the system window insets are already consumed, this method will return them\n     * unchanged on {@link android.os.Build.VERSION_CODES#Q Q} and later. Prior to\n     * {@link android.os.Build.VERSION_CODES#Q Q}, the new values were applied regardless of\n     * whether they were consumed, and this method returns invalid non-zero consumed insets.\n     *\n     * @param left New left inset in pixels\n     * @param top New top inset in pixels\n     * @param right New right inset in pixels\n     * @param bottom New bottom inset in pixels\n     * @return A modified copy of this WindowInsets\n     * @deprecated use {@code Builder#Builder(WindowInsets)} with\n     *             {@link Builder#setSystemWindowInsets(Insets)} instead.\n     ",
    "links" : [ "#setSystemWindowInsets(Insets)", "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "public WindowInsets replaceSystemWindowInsets(Rect systemWindowInsets)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Returns a copy of this WindowInsets with selected system window insets replaced\n     * with new values.\n     *\n     * <p>Note: If the system window insets are already consumed, this method will return them\n     * unchanged on {@link android.os.Build.VERSION_CODES#Q Q} and later. Prior to\n     * {@link android.os.Build.VERSION_CODES#Q Q}, the new values were applied regardless of\n     * whether they were consumed, and this method returns invalid non-zero consumed insets.\n     *\n     * @param systemWindowInsets New system window insets. Each field is the inset in pixels\n     *                           for that edge\n     * @return A modified copy of this WindowInsets\n     * @deprecated use {@code Builder#Builder(WindowInsets)} with\n     *             {@link Builder#setSystemWindowInsets(Insets)} instead.\n     ",
    "links" : [ "#setSystemWindowInsets(Insets)", "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "public Insets getStableInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Returns the stable insets in pixels.\n     *\n     * <p>The stable inset represents the area of a full-screen window that <b>may</b> be\n     * partially or fully obscured by the system UI elements.  This value does not change\n     * based on the visibility state of those elements; for example, if the status bar is\n     * normally shown, but temporarily hidden, the stable inset will still provide the inset\n     * associated with the status bar being shown.</p>\n     *\n     * @return The stable insets\n     * @deprecated Use {@link #getInsetsIgnoringVisibility(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsetsIgnoringVisibility(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public int getStableInsetTop()",
    "returnType" : "int",
    "comment" : "\n     * Returns the top stable inset in pixels.\n     *\n     * <p>The stable inset represents the area of a full-screen window that <b>may</b> be\n     * partially or fully obscured by the system UI elements.  This value does not change\n     * based on the visibility state of those elements; for example, if the status bar is\n     * normally shown, but temporarily hidden, the stable inset will still provide the inset\n     * associated with the status bar being shown.</p>\n     *\n     * @return The top stable inset\n     * @deprecated Use {@link #getInsetsIgnoringVisibility(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsetsIgnoringVisibility(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public int getStableInsetLeft()",
    "returnType" : "int",
    "comment" : "\n     * Returns the left stable inset in pixels.\n     *\n     * <p>The stable inset represents the area of a full-screen window that <b>may</b> be\n     * partially or fully obscured by the system UI elements.  This value does not change\n     * based on the visibility state of those elements; for example, if the status bar is\n     * normally shown, but temporarily hidden, the stable inset will still provide the inset\n     * associated with the status bar being shown.</p>\n     *\n     * @return The left stable inset\n     * @deprecated Use {@link #getInsetsIgnoringVisibility(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsetsIgnoringVisibility(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public int getStableInsetRight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the right stable inset in pixels.\n     *\n     * <p>The stable inset represents the area of a full-screen window that <b>may</b> be\n     * partially or fully obscured by the system UI elements.  This value does not change\n     * based on the visibility state of those elements; for example, if the status bar is\n     * normally shown, but temporarily hidden, the stable inset will still provide the inset\n     * associated with the status bar being shown.</p>\n     *\n     * @return The right stable inset\n     * @deprecated Use {@link #getInsetsIgnoringVisibility(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsetsIgnoringVisibility(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public int getStableInsetBottom()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bottom stable inset in pixels.\n     *\n     * <p>The stable inset represents the area of a full-screen window that <b>may</b> be\n     * partially or fully obscured by the system UI elements.  This value does not change\n     * based on the visibility state of those elements; for example, if the status bar is\n     * normally shown, but temporarily hidden, the stable inset will still provide the inset\n     * associated with the status bar being shown.</p>\n     *\n     * @return The bottom stable inset\n     * @deprecated Use {@link #getInsetsIgnoringVisibility(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsetsIgnoringVisibility(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public boolean hasStableInsets()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this WindowInsets has nonzero stable insets.\n     *\n     * <p>The stable inset represents the area of a full-screen window that <b>may</b> be\n     * partially or fully obscured by the system UI elements.  This value does not change\n     * based on the visibility state of those elements; for example, if the status bar is\n     * normally shown, but temporarily hidden, the stable inset will still provide the inset\n     * associated with the status bar being shown.</p>\n     *\n     * @return true if any of the stable inset values are nonzero\n     * @deprecated Use {@link #getInsetsIgnoringVisibility(int)} with {@link Type#systemBars()}\n     * instead.\n     ",
    "links" : [ "#getInsetsIgnoringVisibility(int)", "android.view.WindowInsets.Type.InsetsType#systemBars()" ]
  }, {
    "name" : "public Insets getSystemGestureInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Returns the system gesture insets.\n     *\n     * <p>The system gesture insets represent the area of a window where system gestures have\n     * priority and may consume some or all touch input, e.g. due to the a system bar\n     * occupying it, or it being reserved for touch-only gestures.\n     *\n     * <p>An app can declare priority over system gestures with\n     * {@link View#setSystemGestureExclusionRects} outside of the\n     * {@link #getMandatorySystemGestureInsets() mandatory system gesture insets}.\n     *\n     * <p>Note: the system will put a limit of <code>200dp</code> on the vertical extent of the\n     * exclusions it takes into account. The limit does not apply while the navigation\n     * bar is {@link View#SYSTEM_UI_FLAG_IMMERSIVE_STICKY stickily} hidden, nor to the\n     * {@link android.inputmethodservice.InputMethodService input method} and\n     * {@link Intent#CATEGORY_HOME home activity}.\n     * </p>\n     *\n     *\n     * <p>Simple taps are guaranteed to reach the window even within the system gesture insets,\n     * as long as they are outside the {@link #getTappableElementInsets() system window insets}.\n     *\n     * <p>When {@link View#SYSTEM_UI_FLAG_LAYOUT_STABLE} is requested, an inset will be returned\n     * even when the system gestures are inactive due to\n     * {@link View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN} or\n     * {@link View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.\n     *\n     * <p>This inset is consumed together with the {@link #getSystemWindowInsets()\n     * system window insets} by {@link #consumeSystemWindowInsets()}.\n     *\n     * @see #getMandatorySystemGestureInsets\n     * @deprecated Use {@link #getInsets(int)} with {@link Type#systemGestures()} instead.\n     ",
    "links" : [ "android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "#getInsets(int)", "#getSystemWindowInsets()", "android.view.View#SYSTEM_UI_FLAG_IMMERSIVE_STICKY", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE", "android.inputmethodservice.InputMethodService", "android.view.View#setSystemGestureExclusionRects", "#consumeSystemWindowInsets()", "android.content.Intent#CATEGORY_HOME", "#getTappableElementInsets()", "android.view.WindowInsets.Type.InsetsType#systemGestures()", "#getMandatorySystemGestureInsets()", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION" ]
  }, {
    "name" : "public Insets getMandatorySystemGestureInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Returns the mandatory system gesture insets.\n     *\n     * <p>The mandatory system gesture insets represent the area of a window where mandatory system\n     * gestures have priority and may consume some or all touch input, e.g. due to the a system bar\n     * occupying it, or it being reserved for touch-only gestures.\n     *\n     * <p>In contrast to {@link #getSystemGestureInsets regular system gestures}, <b>mandatory</b>\n     * system gestures cannot be overriden by {@link View#setSystemGestureExclusionRects}.\n     *\n     * <p>Simple taps are guaranteed to reach the window even within the system gesture insets,\n     * as long as they are outside the {@link #getTappableElementInsets() system window insets}.\n     *\n     * <p>When {@link View#SYSTEM_UI_FLAG_LAYOUT_STABLE} is requested, an inset will be returned\n     * even when the system gestures are inactive due to\n     * {@link View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN} or\n     * {@link View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.\n     *\n     * <p>This inset is consumed together with the {@link #getSystemWindowInsets()\n     * system window insets} by {@link #consumeSystemWindowInsets()}.\n     *\n     * @see #getSystemGestureInsets\n     * @deprecated Use {@link #getInsets(int)} with {@link Type#mandatorySystemGestures()} instead.\n     ",
    "links" : [ "android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "#getInsets(int)", "#getTappableElementInsets()", "#getSystemWindowInsets()", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE", "#getSystemGestureInsets", "android.view.View#setSystemGestureExclusionRects", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION", "#consumeSystemWindowInsets()", "android.view.WindowInsets.Type.InsetsType#mandatorySystemGestures()" ]
  }, {
    "name" : "public Insets getTappableElementInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Returns the tappable element insets.\n     *\n     * <p>The tappable element insets represent how much tappable elements <b>must at least</b> be\n     * inset to remain both tappable and visually unobstructed by persistent system windows.\n     *\n     * <p>This may be smaller than {@link #getSystemWindowInsets()} if the system window is\n     * largely transparent and lets through simple taps (but not necessarily more complex gestures).\n     *\n     * <p>Note that generally, tappable elements <strong>should</strong> be aligned with the\n     * {@link #getSystemWindowInsets() system window insets} instead to avoid overlapping with the\n     * system bars.\n     *\n     * <p>When {@link View#SYSTEM_UI_FLAG_LAYOUT_STABLE} is requested, an inset will be returned\n     * even when the area covered by the inset would be tappable due to\n     * {@link View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN} or\n     * {@link View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.\n     *\n     * <p>This inset is consumed together with the {@link #getSystemWindowInsets()\n     * system window insets} by {@link #consumeSystemWindowInsets()}.\n     *\n     * @deprecated Use {@link #getInsets(int)} with {@link Type#tappableElement()} instead.\n     ",
    "links" : [ "android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "#getInsets(int)", "android.view.WindowInsets.Type.InsetsType#tappableElement()", "#getSystemWindowInsets()", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION", "#consumeSystemWindowInsets()" ]
  }, {
    "name" : "public WindowInsets consumeStableInsets()",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Returns a copy of this WindowInsets with the stable insets fully consumed.\n     *\n     * @return A modified copy of this WindowInsets\n     * @deprecated Consuming of different parts individually of a {@link WindowInsets} instance is\n     * deprecated, since {@link WindowInsets} contains many different insets. Use {@link #CONSUMED}\n     * instead to stop dispatching insets. On {@link android.os.Build.VERSION_CODES#R R}, this\n     * method has no effect.\n     ",
    "links" : [ "#CONSUMED", "android.os.Build.VERSION_CODES#R", "android.view.WindowInsets" ]
  }, {
    "name" : "public boolean shouldAlwaysConsumeSystemBars()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowInsets inset(Rect r)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Returns a copy of this instance inset in the given directions.\n     *\n     * @see #inset(int, int, int, int)\n     * @deprecated use {@link #inset(Insets)}\n     * @hide\n     ",
    "links" : [ "#inset(Insets)" ]
  }, {
    "name" : "public WindowInsets inset(@NonNull Insets insets)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Returns a copy of this instance inset in the given directions.\n     *\n     * This is intended for dispatching insets to areas of the window that are smaller than the\n     * current area.\n     *\n     * <p>Example:\n     * <pre>\n     * childView.dispatchApplyWindowInsets(insets.inset(childMargins));\n     * </pre>\n     *\n     * @param insets the amount of insets to remove from all sides.\n     *\n     * @see #inset(int, int, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public WindowInsets inset(@IntRange(from = 0) int left, @IntRange(from = 0) int top, @IntRange(from = 0) int right, @IntRange(from = 0) int bottom)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Returns a copy of this instance inset in the given directions.\n     *\n     * This is intended for dispatching insets to areas of the window that are smaller than the\n     * current area.\n     *\n     * <p>Example:\n     * <pre>\n     * childView.dispatchApplyWindowInsets(insets.inset(\n     *         childMarginLeft, childMarginTop, childMarginBottom, childMarginRight));\n     * </pre>\n     *\n     * @param left the amount of insets to remove from the left. Must be non-negative.\n     * @param top the amount of insets to remove from the top. Must be non-negative.\n     * @param right the amount of insets to remove from the right. Must be non-negative.\n     * @param bottom the amount of insets to remove from the bottom. Must be non-negative.\n     *\n     * @return the inset insets\n     *\n     * @see #inset(Insets)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Insets[] insetInsets(Insets[] typeInsetsMap, int left, int top, int right, int bottom)",
    "returnType" : "Insets[]",
    "comment" : "\n     * Insets every inset in {@code typeInsetsMap} by the specified left, top, right, bottom.\n     *\n     * @return {@code typeInsetsMap} if no inset was modified; a copy of the map with the modified\n     *          insets otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Insets insetInsets(Insets insets, int left, int top, int right, int bottom)",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isSystemWindowInsetsConsumed()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether system window insets have been consumed.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mTypeInsetsMap", "mTypeMaxInsetsMap", "mTypeVisibilityMap", "mTempRect", "mIsRound", "mDisplayCutout", "mAlwaysConsumeSystemBars", "mSystemWindowInsetsConsumed", "mStableInsetsConsumed", "mDisplayCutoutConsumed", "mCompatInsetsTypes", "mCompatIgnoreVisibility", "CONSUMED" ],
  "methodNames" : [ "private static DisplayCutout displayCutoutCopyConstructorArgument(WindowInsets w)", " static Insets getInsets(Insets[] typeInsetsMap, @InsetsType int typeMask)", "private static void setInsets(Insets[] typeInsetsMap, @InsetsType int typeMask, Insets insets)", "private static Insets[] createCompatTypeMap(@Nullable Rect insets)", "public static void assignCompatInsets(Insets[] typeInsetsMap, Rect insets)", "private static boolean[] createCompatVisibilityMap(@Nullable Insets[] typeInsetsMap)", "public Rect getSystemWindowInsetsAsRect()", "public Insets getSystemWindowInsets()", "public Insets getInsets(@InsetsType int typeMask)", "public Insets getInsetsIgnoringVisibility(@InsetsType int typeMask)", "public boolean isVisible(@InsetsType int typeMask)", "public int getSystemWindowInsetLeft()", "public int getSystemWindowInsetTop()", "public int getSystemWindowInsetRight()", "public int getSystemWindowInsetBottom()", "public boolean hasSystemWindowInsets()", "public boolean hasInsets()", "public DisplayCutout getDisplayCutout()", "public WindowInsets consumeDisplayCutout()", "public boolean isConsumed()", "public boolean isRound()", "public WindowInsets consumeSystemWindowInsets()", "public WindowInsets replaceSystemWindowInsets(int left, int top, int right, int bottom)", "public WindowInsets replaceSystemWindowInsets(Rect systemWindowInsets)", "public Insets getStableInsets()", "public int getStableInsetTop()", "public int getStableInsetLeft()", "public int getStableInsetRight()", "public int getStableInsetBottom()", "public boolean hasStableInsets()", "public Insets getSystemGestureInsets()", "public Insets getMandatorySystemGestureInsets()", "public Insets getTappableElementInsets()", "public WindowInsets consumeStableInsets()", "public boolean shouldAlwaysConsumeSystemBars()", "public String toString()", "public WindowInsets inset(Rect r)", "public WindowInsets inset(@NonNull Insets insets)", "public WindowInsets inset(@IntRange(from = 0) int left, @IntRange(from = 0) int top, @IntRange(from = 0) int right, @IntRange(from = 0) int bottom)", "public boolean equals(Object o)", "public int hashCode()", "private static Insets[] insetInsets(Insets[] typeInsetsMap, int left, int top, int right, int bottom)", " static Insets insetInsets(Insets insets, int left, int top, int right, int bottom)", " boolean isSystemWindowInsetsConsumed()" ]
}