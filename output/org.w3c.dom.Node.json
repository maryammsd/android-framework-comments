{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/Node.java",
  "packageName" : "org.w3c.dom",
  "className" : "Node",
  "comment" : "\n * The <code>Node</code> interface is the primary datatype for the entire\n * Document Object Model. It represents a single node in the document tree.\n * While all objects implementing the <code>Node</code> interface expose\n * methods for dealing with children, not all objects implementing the\n * <code>Node</code> interface may have children. For example,\n * <code>Text</code> nodes may not have children, and adding children to\n * such nodes results in a <code>DOMException</code> being raised.\n * <p>The attributes <code>nodeName</code>, <code>nodeValue</code> and\n * <code>attributes</code> are included as a mechanism to get at node\n * information without casting down to the specific derived interface. In\n * cases where there is no obvious mapping of these attributes for a\n * specific <code>nodeType</code> (e.g., <code>nodeValue</code> for an\n * <code>Element</code> or <code>attributes</code> for a <code>Comment</code>\n * ), this returns <code>null</code>. Note that the specialized interfaces\n * may contain additional and more convenient mechanisms to get and set the\n * relevant information.\n * <p>The values of <code>nodeName</code>,\n * <code>nodeValue</code>, and <code>attributes</code> vary according to the\n * node type as follows:\n * <table border='1' cellpadding='3'>\n * <tr>\n * <th>Interface</th>\n * <th>nodeName</th>\n * <th>nodeValue</th>\n * <th>attributes</th>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>Attr</code></td>\n * <td valign='top' rowspan='1' colspan='1'>same as <code>Attr.name</code></td>\n * <td valign='top' rowspan='1' colspan='1'>same as\n * <code>Attr.value</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'><code>CDATASection</code></td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>\"#cdata-section\"</code></td>\n * <td valign='top' rowspan='1' colspan='1'>same as <code>CharacterData.data</code>, the\n * content of the CDATA Section</td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'><code>Comment</code></td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>\"#comment\"</code></td>\n * <td valign='top' rowspan='1' colspan='1'>same as <code>CharacterData.data</code>, the\n * content of the comment</td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'><code>Document</code></td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>\"#document\"</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>DocumentFragment</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>\"#document-fragment\"</code></td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>null</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'><code>DocumentType</code></td>\n * <td valign='top' rowspan='1' colspan='1'>same as\n * <code>DocumentType.name</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>Element</code></td>\n * <td valign='top' rowspan='1' colspan='1'>same as <code>Element.tagName</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>NamedNodeMap</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'><code>Entity</code></td>\n * <td valign='top' rowspan='1' colspan='1'>entity name</td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>null</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'><code>EntityReference</code></td>\n * <td valign='top' rowspan='1' colspan='1'>name of entity referenced</td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>null</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'><code>Notation</code></td>\n * <td valign='top' rowspan='1' colspan='1'>notation name</td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>null</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'><code>ProcessingInstruction</code></td>\n * <td valign='top' rowspan='1' colspan='1'>same\n * as <code>ProcessingInstruction.target</code></td>\n * <td valign='top' rowspan='1' colspan='1'>same as\n * <code>ProcessingInstruction.data</code></td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'><code>Text</code></td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <code>\"#text\"</code></td>\n * <td valign='top' rowspan='1' colspan='1'>same as <code>CharacterData.data</code>, the content\n * of the text node</td>\n * <td valign='top' rowspan='1' colspan='1'><code>null</code></td>\n * </tr>\n * </table>\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ELEMENT_NODE",
    "type" : "short",
    "comment" : "\n     * The node is an <code>Element</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "ATTRIBUTE_NODE",
    "type" : "short",
    "comment" : "\n     * The node is an <code>Attr</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_NODE",
    "type" : "short",
    "comment" : "\n     * The node is a <code>Text</code> node.\n     ",
    "links" : [ ]
  }, {
    "name" : "CDATA_SECTION_NODE",
    "type" : "short",
    "comment" : "\n     * The node is a <code>CDATASection</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "ENTITY_REFERENCE_NODE",
    "type" : "short",
    "comment" : "\n     * The node is an <code>EntityReference</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "ENTITY_NODE",
    "type" : "short",
    "comment" : "\n     * The node is an <code>Entity</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROCESSING_INSTRUCTION_NODE",
    "type" : "short",
    "comment" : "\n     * The node is a <code>ProcessingInstruction</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMMENT_NODE",
    "type" : "short",
    "comment" : "\n     * The node is a <code>Comment</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_NODE",
    "type" : "short",
    "comment" : "\n     * The node is a <code>Document</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_TYPE_NODE",
    "type" : "short",
    "comment" : "\n     * The node is a <code>DocumentType</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_FRAGMENT_NODE",
    "type" : "short",
    "comment" : "\n     * The node is a <code>DocumentFragment</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "NOTATION_NODE",
    "type" : "short",
    "comment" : "\n     * The node is a <code>Notation</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_POSITION_DISCONNECTED",
    "type" : "short",
    "comment" : "\n     * The two nodes are disconnected. Order between disconnected nodes is\n     * always implementation-specific.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_POSITION_PRECEDING",
    "type" : "short",
    "comment" : "\n     * The second node precedes the reference node.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_POSITION_FOLLOWING",
    "type" : "short",
    "comment" : "\n     * The node follows the reference node.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_POSITION_CONTAINS",
    "type" : "short",
    "comment" : "\n     * The node contains the reference node. A node which contains is always\n     * preceding, too.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_POSITION_CONTAINED_BY",
    "type" : "short",
    "comment" : "\n     * The node is contained by the reference node. A node which is contained\n     * is always following, too.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
    "type" : "short",
    "comment" : "\n     * The determination of preceding versus following is\n     * implementation-specific.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n     * The name of this node, depending on its type; see the table above.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeValue() throws DOMException",
    "returnType" : "String",
    "comment" : "\n     * The value of this node, depending on its type; see the table above.\n     * When it is defined to be <code>null</code>, setting it has no effect,\n     * including if the node is read-only.\n     * @exception DOMException\n     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than\n     *   fit in a <code>DOMString</code> variable on the implementation\n     *   platform.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNodeValue(String nodeValue) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * The value of this node, depending on its type; see the table above.\n     * When it is defined to be <code>null</code>, setting it has no effect,\n     * including if the node is read-only.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly and if\n     *   it is not defined to be <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getNodeType()",
    "returnType" : "short",
    "comment" : "\n     * A code representing the type of the underlying object, as defined above.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node getParentNode()",
    "returnType" : "Node",
    "comment" : "\n     * The parent of this node. All nodes, except <code>Attr</code>,\n     * <code>Document</code>, <code>DocumentFragment</code>,\n     * <code>Entity</code>, and <code>Notation</code> may have a parent.\n     * However, if a node has just been created and not yet added to the\n     * tree, or if it has been removed from the tree, this is\n     * <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NodeList getChildNodes()",
    "returnType" : "NodeList",
    "comment" : "\n     * A <code>NodeList</code> that contains all children of this node. If\n     * there are no children, this is a <code>NodeList</code> containing no\n     * nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node getFirstChild()",
    "returnType" : "Node",
    "comment" : "\n     * The first child of this node. If there is no such node, this returns\n     * <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node getLastChild()",
    "returnType" : "Node",
    "comment" : "\n     * The last child of this node. If there is no such node, this returns\n     * <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node getPreviousSibling()",
    "returnType" : "Node",
    "comment" : "\n     * The node immediately preceding this node. If there is no such node,\n     * this returns <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node getNextSibling()",
    "returnType" : "Node",
    "comment" : "\n     * The node immediately following this node. If there is no such node,\n     * this returns <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NamedNodeMap getAttributes()",
    "returnType" : "NamedNodeMap",
    "comment" : "\n     * A <code>NamedNodeMap</code> containing the attributes of this node (if\n     * it is an <code>Element</code>) or <code>null</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Document getOwnerDocument()",
    "returnType" : "Document",
    "comment" : "\n     * The <code>Document</code> object associated with this node. This is\n     * also the <code>Document</code> object used to create new nodes. When\n     * this node is a <code>Document</code> or a <code>DocumentType</code>\n     * which is not used with any <code>Document</code> yet, this is\n     * <code>null</code>.\n     * @version DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node insertBefore(Node newChild, Node refChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Inserts the node <code>newChild</code> before the existing child node\n     * <code>refChild</code>. If <code>refChild</code> is <code>null</code>,\n     * insert <code>newChild</code> at the end of the list of children.\n     * <br>If <code>newChild</code> is a <code>DocumentFragment</code> object,\n     * all of its children are inserted, in the same order, before\n     * <code>refChild</code>. If the <code>newChild</code> is already in the\n     * tree, it is first removed.\n     * <p ><b>Note:</b>  Inserting a node before itself is implementation\n     * dependent.\n     * @param newChild The node to insert.\n     * @param refChild The reference node, i.e., the node before which the\n     *   new node must be inserted.\n     * @return The node being inserted.\n     * @exception DOMException\n     *   HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not\n     *   allow children of the type of the <code>newChild</code> node, or if\n     *   the node to insert is one of this node's ancestors or this node\n     *   itself, or if this node is of type <code>Document</code> and the\n     *   DOM application attempts to insert a second\n     *   <code>DocumentType</code> or <code>Element</code> node.\n     *   <br>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created\n     *   from a different document than the one that created this node.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or\n     *   if the parent of the node being inserted is readonly.\n     *   <br>NOT_FOUND_ERR: Raised if <code>refChild</code> is not a child of\n     *   this node.\n     *   <br>NOT_SUPPORTED_ERR: if this node is of type <code>Document</code>,\n     *   this exception might be raised if the DOM implementation doesn't\n     *   support the insertion of a <code>DocumentType</code> or\n     *   <code>Element</code> node.\n     * @version DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node replaceChild(Node newChild, Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Replaces the child node <code>oldChild</code> with <code>newChild</code>\n     *  in the list of children, and returns the <code>oldChild</code> node.\n     * <br>If <code>newChild</code> is a <code>DocumentFragment</code> object,\n     * <code>oldChild</code> is replaced by all of the\n     * <code>DocumentFragment</code> children, which are inserted in the\n     * same order. If the <code>newChild</code> is already in the tree, it\n     * is first removed.\n     * <p ><b>Note:</b>  Replacing a node with itself is implementation\n     * dependent.\n     * @param newChild The new node to put in the child list.\n     * @param oldChild The node being replaced in the list.\n     * @return The node replaced.\n     * @exception DOMException\n     *   HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not\n     *   allow children of the type of the <code>newChild</code> node, or if\n     *   the node to put in is one of this node's ancestors or this node\n     *   itself, or if this node is of type <code>Document</code> and the\n     *   result of the replacement operation would add a second\n     *   <code>DocumentType</code> or <code>Element</code> on the\n     *   <code>Document</code> node.\n     *   <br>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created\n     *   from a different document than the one that created this node.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node or the parent of\n     *   the new node is readonly.\n     *   <br>NOT_FOUND_ERR: Raised if <code>oldChild</code> is not a child of\n     *   this node.\n     *   <br>NOT_SUPPORTED_ERR: if this node is of type <code>Document</code>,\n     *   this exception might be raised if the DOM implementation doesn't\n     *   support the replacement of the <code>DocumentType</code> child or\n     *   <code>Element</code> child.\n     * @version DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node removeChild(Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Removes the child node indicated by <code>oldChild</code> from the list\n     * of children, and returns it.\n     * @param oldChild The node being removed.\n     * @return The node removed.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     *   <br>NOT_FOUND_ERR: Raised if <code>oldChild</code> is not a child of\n     *   this node.\n     *   <br>NOT_SUPPORTED_ERR: if this node is of type <code>Document</code>,\n     *   this exception might be raised if the DOM implementation doesn't\n     *   support the removal of the <code>DocumentType</code> child or the\n     *   <code>Element</code> child.\n     * @version DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node appendChild(Node newChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Adds the node <code>newChild</code> to the end of the list of children\n     * of this node. If the <code>newChild</code> is already in the tree, it\n     * is first removed.\n     * @param newChild The node to add.If it is a\n     *   <code>DocumentFragment</code> object, the entire contents of the\n     *   document fragment are moved into the child list of this node\n     * @return The node added.\n     * @exception DOMException\n     *   HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not\n     *   allow children of the type of the <code>newChild</code> node, or if\n     *   the node to append is one of this node's ancestors or this node\n     *   itself, or if this node is of type <code>Document</code> and the\n     *   DOM application attempts to append a second\n     *   <code>DocumentType</code> or <code>Element</code> node.\n     *   <br>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created\n     *   from a different document than the one that created this node.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or\n     *   if the previous parent of the node being inserted is readonly.\n     *   <br>NOT_SUPPORTED_ERR: if the <code>newChild</code> node is a child\n     *   of the <code>Document</code> node, this exception might be raised\n     *   if the DOM implementation doesn't support the removal of the\n     *   <code>DocumentType</code> child or <code>Element</code> child.\n     * @version DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChildNodes()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this node has any children.\n     * @return Returns <code>true</code> if this node has any children,\n     *   <code>false</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node cloneNode(boolean deep)",
    "returnType" : "Node",
    "comment" : "\n     * Returns a duplicate of this node, i.e., serves as a generic copy\n     * constructor for nodes. The duplicate node has no parent (\n     * <code>parentNode</code> is <code>null</code>) and no user data. User\n     * data associated to the imported node is not carried over. However, if\n     * any <code>UserDataHandlers</code> has been specified along with the\n     * associated data these handlers will be called with the appropriate\n     * parameters before this method returns.\n     * <br>Cloning an <code>Element</code> copies all attributes and their\n     * values, including those generated by the XML processor to represent\n     * defaulted attributes, but this method does not copy any children it\n     * contains unless it is a deep clone. This includes text contained in\n     * an the <code>Element</code> since the text is contained in a child\n     * <code>Text</code> node. Cloning an <code>Attr</code> directly, as\n     * opposed to be cloned as part of an <code>Element</code> cloning\n     * operation, returns a specified attribute (<code>specified</code> is\n     * <code>true</code>). Cloning an <code>Attr</code> always clones its\n     * children, since they represent its value, no matter whether this is a\n     * deep clone or not. Cloning an <code>EntityReference</code>\n     * automatically constructs its subtree if a corresponding\n     * <code>Entity</code> is available, no matter whether this is a deep\n     * clone or not. Cloning any other type of node simply returns a copy of\n     * this node.\n     * <br>Note that cloning an immutable subtree results in a mutable copy,\n     * but the children of an <code>EntityReference</code> clone are readonly\n     * . In addition, clones of unspecified <code>Attr</code> nodes are\n     * specified. And, cloning <code>Document</code>,\n     * <code>DocumentType</code>, <code>Entity</code>, and\n     * <code>Notation</code> nodes is implementation dependent.\n     * @param deep If <code>true</code>, recursively clone the subtree under\n     *   the specified node; if <code>false</code>, clone only the node\n     *   itself (and its attributes, if it is an <code>Element</code>).\n     * @return The duplicate node.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void normalize()",
    "returnType" : "void",
    "comment" : "\n     *  Puts all <code>Text</code> nodes in the full depth of the sub-tree\n     * underneath this <code>Node</code>, including attribute nodes, into a\n     * \"normal\" form where only structure (e.g., elements, comments,\n     * processing instructions, CDATA sections, and entity references)\n     * separates <code>Text</code> nodes, i.e., there are neither adjacent\n     * <code>Text</code> nodes nor empty <code>Text</code> nodes. This can\n     * be used to ensure that the DOM view of a document is the same as if\n     * it were saved and re-loaded, and is useful when operations (such as\n     * XPointer [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>]\n     *  lookups) that depend on a particular document tree structure are to\n     * be used. If the parameter \"normalize-characters\" of the\n     * <code>DOMConfiguration</code> object attached to the\n     * <code>Node.ownerDocument</code> is <code>true</code>, this method\n     * will also fully normalize the characters of the <code>Text</code>\n     * nodes.\n     * <p ><b>Note:</b> In cases where the document contains\n     * <code>CDATASections</code>, the normalize operation alone may not be\n     * sufficient, since XPointers do not differentiate between\n     * <code>Text</code> nodes and <code>CDATASection</code> nodes.\n     * @version DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSupported(String feature, String version)",
    "returnType" : "boolean",
    "comment" : "\n     *  Tests whether the DOM implementation implements a specific feature and\n     * that feature is supported by this node, as specified in .\n     * @param feature  The name of the feature to test.\n     * @param version  This is the version number of the feature to test.\n     * @return Returns <code>true</code> if the specified feature is\n     *   supported on this node, <code>false</code> otherwise.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURI()",
    "returnType" : "String",
    "comment" : "\n     * The namespace URI of this node, or <code>null</code> if it is\n     * unspecified (see ).\n     * <br>This is not a computed value that is the result of a namespace\n     * lookup based on an examination of the namespace declarations in\n     * scope. It is merely the namespace URI given at creation time.\n     * <br>For nodes of any type other than <code>ELEMENT_NODE</code> and\n     * <code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1\n     * method, such as <code>Document.createElement()</code>, this is always\n     * <code>null</code>.\n     * <p ><b>Note:</b> Per the <em>Namespaces in XML</em> Specification [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     *  an attribute does not inherit its namespace from the element it is\n     * attached to. If an attribute is not explicitly given a namespace, it\n     * simply has no namespace.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix()",
    "returnType" : "String",
    "comment" : "\n     * The namespace prefix of this node, or <code>null</code> if it is\n     * unspecified. When it is defined to be <code>null</code>, setting it\n     * has no effect, including if the node is read-only.\n     * <br>Note that setting this attribute, when permitted, changes the\n     * <code>nodeName</code> attribute, which holds the qualified name, as\n     * well as the <code>tagName</code> and <code>name</code> attributes of\n     * the <code>Element</code> and <code>Attr</code> interfaces, when\n     * applicable.\n     * <br>Setting the prefix to <code>null</code> makes it unspecified,\n     * setting it to an empty string is implementation dependent.\n     * <br>Note also that changing the prefix of an attribute that is known to\n     * have a default value, does not make a new attribute with the default\n     * value and the original prefix appear, since the\n     * <code>namespaceURI</code> and <code>localName</code> do not change.\n     * <br>For nodes of any type other than <code>ELEMENT_NODE</code> and\n     * <code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1\n     * method, such as <code>createElement</code> from the\n     * <code>Document</code> interface, this is always <code>null</code>.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPrefix(String prefix) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * The namespace prefix of this node, or <code>null</code> if it is\n     * unspecified. When it is defined to be <code>null</code>, setting it\n     * has no effect, including if the node is read-only.\n     * <br>Note that setting this attribute, when permitted, changes the\n     * <code>nodeName</code> attribute, which holds the qualified name, as\n     * well as the <code>tagName</code> and <code>name</code> attributes of\n     * the <code>Element</code> and <code>Attr</code> interfaces, when\n     * applicable.\n     * <br>Setting the prefix to <code>null</code> makes it unspecified,\n     * setting it to an empty string is implementation dependent.\n     * <br>Note also that changing the prefix of an attribute that is known to\n     * have a default value, does not make a new attribute with the default\n     * value and the original prefix appear, since the\n     * <code>namespaceURI</code> and <code>localName</code> do not change.\n     * <br>For nodes of any type other than <code>ELEMENT_NODE</code> and\n     * <code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1\n     * method, such as <code>createElement</code> from the\n     * <code>Document</code> interface, this is always <code>null</code>.\n     * @exception DOMException\n     *   INVALID_CHARACTER_ERR: Raised if the specified prefix contains an\n     *   illegal character according to the XML version in use specified in\n     *   the <code>Document.xmlVersion</code> attribute.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     *   <br>NAMESPACE_ERR: Raised if the specified <code>prefix</code> is\n     *   malformed per the Namespaces in XML specification, if the\n     *   <code>namespaceURI</code> of this node is <code>null</code>, if the\n     *   specified prefix is \"xml\" and the <code>namespaceURI</code> of this\n     *   node is different from \"<a href='http://www.w3.org/XML/1998/namespace'>\n     *   http://www.w3.org/XML/1998/namespace</a>\", if this node is an attribute and the specified prefix is \"xmlns\" and\n     *   the <code>namespaceURI</code> of this node is different from \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\", or if this node is an attribute and the <code>qualifiedName</code> of\n     *   this node is \"xmlns\" [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     *   .\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the local part of the qualified name of this node.\n     * <br>For nodes of any type other than <code>ELEMENT_NODE</code> and\n     * <code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1\n     * method, such as <code>Document.createElement()</code>, this is always\n     * <code>null</code>.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttributes()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this node (if it is an element) has any attributes.\n     * @return Returns <code>true</code> if this node has any attributes,\n     *   <code>false</code> otherwise.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseURI()",
    "returnType" : "String",
    "comment" : "\n     * The absolute base URI of this node or <code>null</code> if the\n     * implementation wasn't able to obtain an absolute URI. This value is\n     * computed as described in . However, when the <code>Document</code>\n     * supports the feature \"HTML\" [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]\n     * , the base URI is computed using first the value of the href\n     * attribute of the HTML BASE element if any, and the value of the\n     * <code>documentURI</code> attribute from the <code>Document</code>\n     * interface otherwise.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public short compareDocumentPosition(Node other) throws DOMException",
    "returnType" : "short",
    "comment" : "\n     * Compares the reference node, i.e. the node on which this method is\n     * being called, with a node, i.e. the one passed as a parameter, with\n     * regard to their position in the document and according to the\n     * document order.\n     * @param other The node to compare against the reference node.\n     * @return Returns how the node is positioned relatively to the reference\n     *   node.\n     * @exception DOMException\n     *   NOT_SUPPORTED_ERR: when the compared nodes are from different DOM\n     *   implementations that do not coordinate to return consistent\n     *   implementation-specific results.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTextContent() throws DOMException",
    "returnType" : "String",
    "comment" : "\n     * This attribute returns the text content of this node and its\n     * descendants. When it is defined to be <code>null</code>, setting it\n     * has no effect. On setting, any possible children this node may have\n     * are removed and, if it the new string is not empty or\n     * <code>null</code>, replaced by a single <code>Text</code> node\n     * containing the string this attribute is set to.\n     * <br> On getting, no serialization is performed, the returned string\n     * does not contain any markup. No whitespace normalization is performed\n     * and the returned string does not contain the white spaces in element\n     * content (see the attribute\n     * <code>Text.isElementContentWhitespace</code>). Similarly, on setting,\n     * no parsing is performed either, the input string is taken as pure\n     * textual content.\n     * <br>The string returned is made of the text content of this node\n     * depending on its type, as defined below:\n     * <table border='1' cellpadding='3'>\n     * <tr>\n     * <th>Node type</th>\n     * <th>Content</th>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,\n     * DOCUMENT_FRAGMENT_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>\n     * attribute value of every child node, excluding COMMENT_NODE and\n     * PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if the\n     * node has no children.</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE,\n     * PROCESSING_INSTRUCTION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'><code>nodeValue</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE,\n     * DOCUMENT_TYPE_NODE, NOTATION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'><em>null</em></td>\n     * </tr>\n     * </table>\n     * @exception DOMException\n     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than\n     *   fit in a <code>DOMString</code> variable on the implementation\n     *   platform.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTextContent(String textContent) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * This attribute returns the text content of this node and its\n     * descendants. When it is defined to be <code>null</code>, setting it\n     * has no effect. On setting, any possible children this node may have\n     * are removed and, if it the new string is not empty or\n     * <code>null</code>, replaced by a single <code>Text</code> node\n     * containing the string this attribute is set to.\n     * <br> On getting, no serialization is performed, the returned string\n     * does not contain any markup. No whitespace normalization is performed\n     * and the returned string does not contain the white spaces in element\n     * content (see the attribute\n     * <code>Text.isElementContentWhitespace</code>). Similarly, on setting,\n     * no parsing is performed either, the input string is taken as pure\n     * textual content.\n     * <br>The string returned is made of the text content of this node\n     * depending on its type, as defined below:\n     * <table border='1' cellpadding='3'>\n     * <tr>\n     * <th>Node type</th>\n     * <th>Content</th>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,\n     * DOCUMENT_FRAGMENT_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>\n     * attribute value of every child node, excluding COMMENT_NODE and\n     * PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if the\n     * node has no children.</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE,\n     * PROCESSING_INSTRUCTION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'><code>nodeValue</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE,\n     * DOCUMENT_TYPE_NODE, NOTATION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'><em>null</em></td>\n     * </tr>\n     * </table>\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameNode(Node other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this node is the same node as the given one.\n     * <br>This method provides a way to determine whether two\n     * <code>Node</code> references returned by the implementation reference\n     * the same object. When two <code>Node</code> references are references\n     * to the same object, even if through a proxy, the references may be\n     * used completely interchangeably, such that all attributes have the\n     * same values and calling the same DOM method on either reference\n     * always has exactly the same effect.\n     * @param other The node to test against.\n     * @return Returns <code>true</code> if the nodes are the same,\n     *   <code>false</code> otherwise.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String lookupPrefix(String namespaceURI)",
    "returnType" : "String",
    "comment" : "\n     * Look up the prefix associated to the given namespace URI, starting from\n     * this node. The default namespace declarations are ignored by this\n     * method.\n     * <br>See  for details on the algorithm used by this method.\n     * @param namespaceURI The namespace URI to look for.\n     * @return Returns an associated namespace prefix if found or\n     *   <code>null</code> if none is found. If more than one prefix are\n     *   associated to the namespace prefix, the returned namespace prefix\n     *   is implementation dependent.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultNamespace(String namespaceURI)",
    "returnType" : "boolean",
    "comment" : "\n     *  This method checks if the specified <code>namespaceURI</code> is the\n     * default namespace or not.\n     * @param namespaceURI The namespace URI to look for.\n     * @return Returns <code>true</code> if the specified\n     *   <code>namespaceURI</code> is the default namespace,\n     *   <code>false</code> otherwise.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String lookupNamespaceURI(String prefix)",
    "returnType" : "String",
    "comment" : "\n     * Look up the namespace URI associated to the given prefix, starting from\n     * this node.\n     * <br>See  for details on the algorithm used by this method.\n     * @param prefix The prefix to look for. If this parameter is\n     *   <code>null</code>, the method will return the default namespace URI\n     *   if any.\n     * @return Returns the associated namespace URI or <code>null</code> if\n     *   none is found.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEqualNode(Node arg)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether two nodes are equal.\n     * <br>This method tests for equality of nodes, not sameness (i.e.,\n     * whether the two nodes are references to the same object) which can be\n     * tested with <code>Node.isSameNode()</code>. All nodes that are the\n     * same will also be equal, though the reverse may not be true.\n     * <br>Two nodes are equal if and only if the following conditions are\n     * satisfied:\n     * <ul>\n     * <li>The two nodes are of the same type.\n     * </li>\n     * <li>The following string\n     * attributes are equal: <code>nodeName</code>, <code>localName</code>,\n     * <code>namespaceURI</code>, <code>prefix</code>, <code>nodeValue</code>\n     * . This is: they are both <code>null</code>, or they have the same\n     * length and are character for character identical.\n     * </li>\n     * <li>The\n     * <code>attributes</code> <code>NamedNodeMaps</code> are equal. This\n     * is: they are both <code>null</code>, or they have the same length and\n     * for each node that exists in one map there is a node that exists in\n     * the other map and is equal, although not necessarily at the same\n     * index.\n     * </li>\n     * <li>The <code>childNodes</code> <code>NodeLists</code> are equal.\n     * This is: they are both <code>null</code>, or they have the same\n     * length and contain equal nodes at the same index. Note that\n     * normalization can affect equality; to avoid this, nodes should be\n     * normalized before being compared.\n     * </li>\n     * </ul>\n     * <br>For two <code>DocumentType</code> nodes to be equal, the following\n     * conditions must also be satisfied:\n     * <ul>\n     * <li>The following string attributes\n     * are equal: <code>publicId</code>, <code>systemId</code>,\n     * <code>internalSubset</code>.\n     * </li>\n     * <li>The <code>entities</code>\n     * <code>NamedNodeMaps</code> are equal.\n     * </li>\n     * <li>The <code>notations</code>\n     * <code>NamedNodeMaps</code> are equal.\n     * </li>\n     * </ul>\n     * <br>On the other hand, the following do not affect equality: the\n     * <code>ownerDocument</code>, <code>baseURI</code>, and\n     * <code>parentNode</code> attributes, the <code>specified</code>\n     * attribute for <code>Attr</code> nodes, the <code>schemaTypeInfo</code>\n     *  attribute for <code>Attr</code> and <code>Element</code> nodes, the\n     * <code>Text.isElementContentWhitespace</code> attribute for\n     * <code>Text</code> nodes, as well as any user data or event listeners\n     * registered on the nodes.\n     * <p ><b>Note:</b>  As a general rule, anything not mentioned in the\n     * description above is not significant in consideration of equality\n     * checking. Note that future versions of this specification may take\n     * into account more attributes and implementations conform to this\n     * specification are expected to be updated accordingly.\n     * @param arg The node to compare equality with.\n     * @return Returns <code>true</code> if the nodes are equal,\n     *   <code>false</code> otherwise.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getFeature(String feature, String version)",
    "returnType" : "Object",
    "comment" : "\n     *  This method returns a specialized object which implements the\n     * specialized APIs of the specified feature and version, as specified\n     * in . The specialized object may also be obtained by using\n     * binding-specific casting methods but is not necessarily expected to,\n     * as discussed in . This method also allow the implementation to\n     * provide specialized objects which do not support the <code>Node</code>\n     *  interface.\n     * @param feature  The name of the feature requested. Note that any plus\n     *   sign \"+\" prepended to the name of the feature will be ignored since\n     *   it is not significant in the context of this method.\n     * @param version  This is the version number of the feature to test.\n     * @return  Returns an object which implements the specialized APIs of\n     *   the specified feature and version, if any, or <code>null</code> if\n     *   there is no object which implements interfaces associated with that\n     *   feature. If the <code>DOMObject</code> returned by this method\n     *   implements the <code>Node</code> interface, it must delegate to the\n     *   primary core <code>Node</code> and not return results inconsistent\n     *   with the primary core <code>Node</code> such as attributes,\n     *   childNodes, etc.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object setUserData(String key, Object data, UserDataHandler handler)",
    "returnType" : "Object",
    "comment" : "\n     * Associate an object to a key on this node. The object can later be\n     * retrieved from this node by calling <code>getUserData</code> with the\n     * same key.\n     * @param key The key to associate the object to.\n     * @param data The object to associate to the given key, or\n     *   <code>null</code> to remove any existing association to that key.\n     * @param handler The handler to associate to that key, or\n     *   <code>null</code>.\n     * @return Returns the <code>DOMUserData</code> previously associated to\n     *   the given key on this node, or <code>null</code> if there was none.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getUserData(String key)",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the object associated to a key on a this node. The object\n     * must first have been set to this node by calling\n     * <code>setUserData</code> with the same key.\n     * @param key The key the object is associated to.\n     * @return Returns the <code>DOMUserData</code> associated to the given\n     *   key on this node, or <code>null</code> if there was none.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getNodeName()", "public String getNodeValue() throws DOMException", "public void setNodeValue(String nodeValue) throws DOMException", "public short getNodeType()", "public Node getParentNode()", "public NodeList getChildNodes()", "public Node getFirstChild()", "public Node getLastChild()", "public Node getPreviousSibling()", "public Node getNextSibling()", "public NamedNodeMap getAttributes()", "public Document getOwnerDocument()", "public Node insertBefore(Node newChild, Node refChild) throws DOMException", "public Node replaceChild(Node newChild, Node oldChild) throws DOMException", "public Node removeChild(Node oldChild) throws DOMException", "public Node appendChild(Node newChild) throws DOMException", "public boolean hasChildNodes()", "public Node cloneNode(boolean deep)", "public void normalize()", "public boolean isSupported(String feature, String version)", "public String getNamespaceURI()", "public String getPrefix()", "public void setPrefix(String prefix) throws DOMException", "public String getLocalName()", "public boolean hasAttributes()", "public String getBaseURI()", "public short compareDocumentPosition(Node other) throws DOMException", "public String getTextContent() throws DOMException", "public void setTextContent(String textContent) throws DOMException", "public boolean isSameNode(Node other)", "public String lookupPrefix(String namespaceURI)", "public boolean isDefaultNamespace(String namespaceURI)", "public String lookupNamespaceURI(String prefix)", "public boolean isEqualNode(Node arg)", "public Object getFeature(String feature, String version)", "public Object setUserData(String key, Object data, UserDataHandler handler)", "public Object getUserData(String key)" ],
  "variableNames" : [ "ELEMENT_NODE", "ATTRIBUTE_NODE", "TEXT_NODE", "CDATA_SECTION_NODE", "ENTITY_REFERENCE_NODE", "ENTITY_NODE", "PROCESSING_INSTRUCTION_NODE", "COMMENT_NODE", "DOCUMENT_NODE", "DOCUMENT_TYPE_NODE", "DOCUMENT_FRAGMENT_NODE", "NOTATION_NODE", "DOCUMENT_POSITION_DISCONNECTED", "DOCUMENT_POSITION_PRECEDING", "DOCUMENT_POSITION_FOLLOWING", "DOCUMENT_POSITION_CONTAINS", "DOCUMENT_POSITION_CONTAINED_BY", "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" ]
}