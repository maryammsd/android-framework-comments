{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/BroadcastOptions.java",
  "packageName" : "android.app",
  "className" : "BroadcastOptions",
  "comment" : "\n * Helper class for building an options Bundle that can be used with\n * {@link android.content.Context#sendBroadcast(android.content.Intent)\n * Context.sendBroadcast(Intent)} and related methods.\n ",
  "links" : [ "android.content.Context#sendBroadcast(android.content.Intent)" ],
  "variables" : [ {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTemporaryAppAllowlistDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTemporaryAppAllowlistType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTemporaryAppAllowlistReasonCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTemporaryAppAllowlistReason",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinManifestReceiverApiLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxManifestReceiverApiLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequireAllOfPermissions",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequireNoneOfPermissions",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequireCompatChangeId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdForResponseEvent",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeliveryGroupPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeliveryGroupMatchingNamespaceFragment",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeliveryGroupMatchingKeyFragment",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeliveryGroupExtrasMerger",
    "type" : "BundleMerger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeliveryGroupMatchingFilter",
    "type" : "IntentFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeferralPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_DONT_SEND_TO_RESTRICTED_APPS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_ALLOW_BACKGROUND_ACTIVITY_STARTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_REQUIRE_COMPAT_CHANGE_ENABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_IS_ALARM_BROADCAST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_SHARE_IDENTITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_INTERACTIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHANGE_INVALID",
    "type" : "long",
    "comment" : "\n     * Change ID which is invalid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGE_ALWAYS_ENABLED",
    "type" : "long",
    "comment" : "\n     * Change ID which is always enabled, for testing purposes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGE_ALWAYS_DISABLED",
    "type" : "long",
    "comment" : "\n     * Change ID which is always disabled, for testing purposes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_FLAGS",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #mFlags}.\n     ",
    "links" : [ "#mFlags" ]
  }, {
    "name" : "KEY_TEMPORARY_APP_ALLOWLIST_DURATION",
    "type" : "String",
    "comment" : "\n     * How long to temporarily put an app on the power allowlist when executing this broadcast\n     * to it.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_TEMPORARY_APP_ALLOWLIST_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_TEMPORARY_APP_ALLOWLIST_REASON_CODE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_TEMPORARY_APP_ALLOWLIST_REASON",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MIN_MANIFEST_RECEIVER_API_LEVEL",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #setMinManifestReceiverApiLevel}.\n     ",
    "links" : [ "#setMinManifestReceiverApiLevel" ]
  }, {
    "name" : "KEY_MAX_MANIFEST_RECEIVER_API_LEVEL",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #setMaxManifestReceiverApiLevel}.\n     ",
    "links" : [ "#setMaxManifestReceiverApiLevel" ]
  }, {
    "name" : "KEY_REQUIRE_ALL_OF_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #setRequireAllOfPermissions}\n     * @hide\n     ",
    "links" : [ "#setRequireAllOfPermissions" ]
  }, {
    "name" : "KEY_REQUIRE_NONE_OF_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #setRequireNoneOfPermissions}\n     * @hide\n     ",
    "links" : [ "#setRequireNoneOfPermissions" ]
  }, {
    "name" : "KEY_REQUIRE_COMPAT_CHANGE_ID",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #setRequireCompatChange(long, boolean)}\n     ",
    "links" : [ "#setRequireCompatChange(long" ]
  }, {
    "name" : "TEMPORARY_WHITELIST_TYPE_FOREGROUND_SERVICE_ALLOWED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link android.os.PowerExemptionManager#\n     * TEMPORARY_ALLOW_LIST_TYPE_FOREGROUND_SERVICE_ALLOWED} instead.\n     ",
    "links" : [ "android.os.PowerExemptionManager#TEMPORARY_ALLOW_LIST_TYPE_FOREGROUND_SERVICE_ALLOWED" ]
  }, {
    "name" : "TEMPORARY_WHITELIST_TYPE_FOREGROUND_SERVICE_NOT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link android.os.PowerExemptionManager#\n     * TEMPORARY_ALLOW_LIST_TYPE_FOREGROUND_SERVICE_NOT_ALLOWED} instead.\n     ",
    "links" : [ "android.os.PowerExemptionManager#TEMPORARY_ALLOW_LIST_TYPE_FOREGROUND_SERVICE_NOT_ALLOWED" ]
  }, {
    "name" : "KEY_ID_FOR_RESPONSE_EVENT",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #recordResponseEventWhileInBackground(long)}.\n     ",
    "links" : [ "#recordResponseEventWhileInBackground(long)" ]
  }, {
    "name" : "KEY_DELIVERY_GROUP_POLICY",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #setDeliveryGroupPolicy(int)}.\n     ",
    "links" : [ "#setDeliveryGroupPolicy(int)" ]
  }, {
    "name" : "KEY_DELIVERY_GROUP_NAMESPACE",
    "type" : "String",
    "comment" : "\n     * Corresponds to namespace fragment of {@link #setDeliveryGroupMatchingKey(String, String)}.\n     ",
    "links" : [ "#setDeliveryGroupMatchingKey(String" ]
  }, {
    "name" : "KEY_DELIVERY_GROUP_KEY",
    "type" : "String",
    "comment" : "\n     * Corresponds to key fragment of {@link #setDeliveryGroupMatchingKey(String, String)}.\n     ",
    "links" : [ "#setDeliveryGroupMatchingKey(String" ]
  }, {
    "name" : "KEY_DELIVERY_GROUP_EXTRAS_MERGER",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #setDeliveryGroupExtrasMerger(BundleMerger)}.\n     ",
    "links" : [ "#setDeliveryGroupExtrasMerger(BundleMerger)" ]
  }, {
    "name" : "KEY_DELIVERY_GROUP_MATCHING_FILTER",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #setDeliveryGroupMatchingFilter(IntentFilter)}.\n     ",
    "links" : [ "#setDeliveryGroupMatchingFilter(IntentFilter)" ]
  }, {
    "name" : "KEY_DEFERRAL_POLICY",
    "type" : "String",
    "comment" : "\n     * Corresponds to {@link #setDeferralPolicy(int)}\n     ",
    "links" : [ "#setDeferralPolicy(int)" ]
  }, {
    "name" : "DELIVERY_GROUP_POLICY_ALL",
    "type" : "int",
    "comment" : "\n     * Delivery group policy that indicates that all the broadcasts in the delivery group\n     * need to be delivered as is.\n     ",
    "links" : [ ]
  }, {
    "name" : "DELIVERY_GROUP_POLICY_MOST_RECENT",
    "type" : "int",
    "comment" : "\n     * Delivery group policy that indicates that only the most recent broadcast in the delivery\n     * group need to be delivered and the rest can be dropped.\n     ",
    "links" : [ ]
  }, {
    "name" : "DELIVERY_GROUP_POLICY_MERGED",
    "type" : "int",
    "comment" : "\n     * Delivery group policy that indicates that the extras data from the broadcasts in the\n     * delivery group need to be merged into a single broadcast and the rest can be dropped.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFERRAL_POLICY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Deferral policy that indicates no desire has been expressed, and that the\n     * system should use a reasonable default behavior.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFERRAL_POLICY_NONE",
    "type" : "int",
    "comment" : "\n     * Deferral policy that indicates a strong desire that no receiver of this\n     * broadcast should be deferred.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFERRAL_POLICY_UNTIL_ACTIVE",
    "type" : "int",
    "comment" : "\n     * Deferral policy that indicates a strong desire that each receiver of this\n     * broadcast should be deferred until that receiver's process is in an\n     * active (non-cached) state. Whether an app's process state is considered\n     * active is independent of its standby bucket.\n     * <p>\n     * This policy only applies to runtime registered receivers of a broadcast,\n     * and does not apply to ordered broadcasts, alarm broadcasts, interactive\n     * broadcasts, or manifest broadcasts.\n     * <p>\n     * This policy means that a runtime registered receiver will not typically\n     * execute until that receiver's process is brought to an active state by\n     * some other action, such as a job, alarm, or service binding. As a result,\n     * the receiver may be delayed indefinitely.\n     * <p>\n     * When this policy is set on an unordered broadcast with a completion\n     * callback, the completion callback will run once all eligible processes\n     * have finished receiving the broadcast. Processes in inactive process\n     * state are not considered eligible and may not receive the broadcast prior\n     * to the completion callback.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static BroadcastOptions makeBasic()",
    "returnType" : "BroadcastOptions",
    "comment" : "\n     * Creates a basic {@link BroadcastOptions} with no options initially set.\n     *\n     * @return an instance of {@code BroadcastOptions} against which options can be set\n     ",
    "links" : [ "android.app.BroadcastOptions" ]
  }, {
    "name" : "public static BroadcastOptions makeWithDeferUntilActive(boolean deferUntilActive)",
    "returnType" : "BroadcastOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setTemporaryAppWhitelistDuration(long duration)",
    "returnType" : "void",
    "comment" : "\n     * Set a duration for which the system should temporary place an application on the\n     * power allowlist when this broadcast is being delivered to it.\n     * @param duration The duration in milliseconds; 0 means to not place on allowlist.\n     * @deprecated use {@link #setTemporaryAppAllowlist(long, int, int,  String)} instead.\n     * @hide\n     ",
    "links" : [ "#setTemporaryAppAllowlist(long" ]
  }, {
    "name" : "public void setTemporaryAppAllowlist(long duration, @TempAllowListType int type, @ReasonCode int reasonCode, @Nullable String reason)",
    "returnType" : "void",
    "comment" : "\n     * Set a duration for which the system should temporary place an application on the\n     * power allowlist when this broadcast is being delivered to it, specify the temp allowlist\n     * type.\n     * @hide\n     *\n     * @param duration the duration in milliseconds.\n     *                 0 means to not place on allowlist, and clears previous call to this method.\n     * @param type one of {@link TempAllowListType}.\n     *             {@link PowerExemptionManager#TEMPORARY_ALLOW_LIST_TYPE_NONE} means\n     *             to not place on allowlist, and clears previous call to this method.\n     * @param reasonCode one of {@link ReasonCode}, use\n     *                  {@link PowerExemptionManager#REASON_UNKNOWN} if not sure.\n     * @param reason A human-readable reason explaining why the app is temp allowlisted. Only\n     *               used for logging purposes. Could be null or empty string.\n     ",
    "links" : [ "android.os.PowerExemptionManager.ReasonCode", "android.os.PowerExemptionManager.TempAllowListType", "android.os.PowerExemptionManager#TEMPORARY_ALLOW_LIST_TYPE_NONE", "android.os.PowerExemptionManager#REASON_UNKNOWN" ]
  }, {
    "name" : "private boolean isTemporaryAppAllowlistSet()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetTemporaryAppAllowlist()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getTemporaryAppAllowlistDuration()",
    "returnType" : "long",
    "comment" : "\n     * Return {@link #setTemporaryAppAllowlist}.\n     * @hide\n     ",
    "links" : [ "#setTemporaryAppAllowlist" ]
  }, {
    "name" : "public int getTemporaryAppAllowlistType()",
    "returnType" : "int",
    "comment" : "\n     * Return {@link #mTemporaryAppAllowlistType}.\n     * @hide\n     ",
    "links" : [ "#mTemporaryAppAllowlistType" ]
  }, {
    "name" : "public int getTemporaryAppAllowlistReasonCode()",
    "returnType" : "int",
    "comment" : "\n     * Return {@link #mTemporaryAppAllowlistReasonCode}.\n     * @hide\n     ",
    "links" : [ "#mTemporaryAppAllowlistReasonCode" ]
  }, {
    "name" : "public String getTemporaryAppAllowlistReason()",
    "returnType" : "String",
    "comment" : "\n     * Return {@link #mTemporaryAppAllowlistReason}.\n     * @hide\n     ",
    "links" : [ "#mTemporaryAppAllowlistReason" ]
  }, {
    "name" : "public void setMinManifestReceiverApiLevel(int apiLevel)",
    "returnType" : "void",
    "comment" : "\n     * Set the minimum target API level of receivers of the broadcast.  If an application\n     * is targeting an API level less than this, the broadcast will not be delivered to\n     * them.  This only applies to receivers declared in the app's AndroidManifest.xml.\n     *\n     * @deprecated to give developers the most flexibility during beta releases,\n     *             we strongly encourage using {@link ChangeId} instead of\n     *             target SDK checks; callers should use\n     *             {@link #setRequireCompatChange(long, boolean)} instead,\n     *             possibly combined with\n     *             {@link Intent#FLAG_RECEIVER_REGISTERED_ONLY}.\n     * @hide\n     ",
    "links" : [ "android.compat.annotation.ChangeId", "#setRequireCompatChange(long", "android.content.Intent#FLAG_RECEIVER_REGISTERED_ONLY" ]
  }, {
    "name" : "public int getMinManifestReceiverApiLevel()",
    "returnType" : "int",
    "comment" : "\n     * Return {@link #setMinManifestReceiverApiLevel}.\n     *\n     * @deprecated to give developers the most flexibility during beta releases,\n     *             we strongly encourage using {@link ChangeId} instead of\n     *             target SDK checks; callers should use\n     *             {@link #setRequireCompatChange(long, boolean)} instead,\n     *             possibly combined with\n     *             {@link Intent#FLAG_RECEIVER_REGISTERED_ONLY}.\n     * @hide\n     ",
    "links" : [ "android.compat.annotation.ChangeId", "#setRequireCompatChange(long", "android.content.Intent#FLAG_RECEIVER_REGISTERED_ONLY", "#setMinManifestReceiverApiLevel" ]
  }, {
    "name" : "public void setMaxManifestReceiverApiLevel(int apiLevel)",
    "returnType" : "void",
    "comment" : "\n     * Set the maximum target API level of receivers of the broadcast.  If an application\n     * is targeting an API level greater than this, the broadcast will not be delivered to\n     * them.  This only applies to receivers declared in the app's AndroidManifest.xml.\n     *\n     * @deprecated to give developers the most flexibility during beta releases,\n     *             we strongly encourage using {@link ChangeId} instead of\n     *             target SDK checks; callers should use\n     *             {@link #setRequireCompatChange(long, boolean)} instead,\n     *             possibly combined with\n     *             {@link Intent#FLAG_RECEIVER_REGISTERED_ONLY}.\n     * @hide\n     ",
    "links" : [ "android.compat.annotation.ChangeId", "#setRequireCompatChange(long", "android.content.Intent#FLAG_RECEIVER_REGISTERED_ONLY" ]
  }, {
    "name" : "public int getMaxManifestReceiverApiLevel()",
    "returnType" : "int",
    "comment" : "\n     * Return {@link #setMaxManifestReceiverApiLevel}.\n     *\n     * @deprecated to give developers the most flexibility during beta releases,\n     *             we strongly encourage using {@link ChangeId} instead of\n     *             target SDK checks; callers should use\n     *             {@link #setRequireCompatChange(long, boolean)} instead,\n     *             possibly combined with\n     *             {@link Intent#FLAG_RECEIVER_REGISTERED_ONLY}.\n     * @hide\n     ",
    "links" : [ "android.compat.annotation.ChangeId", "#setRequireCompatChange(long", "android.content.Intent#FLAG_RECEIVER_REGISTERED_ONLY", "#setMaxManifestReceiverApiLevel" ]
  }, {
    "name" : "public void setDontSendToRestrictedApps(boolean dontSendToRestrictedApps)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether pending intent can be sent for an application with background restrictions\n     * @param dontSendToRestrictedApps if true, pending intent will not be sent for an application\n     * with background restrictions. Default value is {@code false}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDontSendToRestrictedApps()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @return #setDontSendToRestrictedApps\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundActivityStartsAllowed(boolean allowBackgroundActivityStarts)",
    "returnType" : "void",
    "comment" : "\n     * Sets the process will be able to start activities from background for the duration of\n     * the broadcast dispatch. Default value is {@code false}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean allowsBackgroundActivityStarts()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @return #setAllowBackgroundActivityStarts\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRequireAllOfPermissions(@Nullable String[] requiredPermissions)",
    "returnType" : "void",
    "comment" : "\n     * Use this to configure a broadcast to be sent to apps that hold all permissions in\n     * the list. This is only for use with the {@link Context#sendBroadcast(Intent intent,\n     * @Nullable String receiverPermission, @Nullable Bundle options)}.\n     *\n     * <p> If both {@link #setRequireAllOfPermissions(String[])} and\n     * {@link #setRequireNoneOfPermissions(String[])} are used, then receivers must have all of the\n     * permissions set by {@link #setRequireAllOfPermissions(String[])}, and none of the\n     * permissions set by {@link #setRequireNoneOfPermissions(String[])} to get the broadcast.\n     *\n     * @param requiredPermissions a list of Strings of permission the receiver must have. Set to\n     *                            null or an empty array to clear any previously set value.\n     * @hide\n     ",
    "links" : [ "#sendBroadcast(Intent", "#setRequireAllOfPermissions(String", "#setRequireNoneOfPermissions(String" ]
  }, {
    "name" : "public void setRequireNoneOfPermissions(@Nullable String[] excludedPermissions)",
    "returnType" : "void",
    "comment" : "\n     * Use this to configure a broadcast to be sent to apps that don't hold any permissions in\n     * list. This is only for use with the {@link Context#sendBroadcast(Intent intent,\n     * @Nullable String receiverPermission, @Nullable Bundle options)}.\n     *\n     * <p> If both {@link #setRequireAllOfPermissions(String[])} and\n     * {@link #setRequireNoneOfPermissions(String[])} are used, then receivers must have all of the\n     * permissions set by {@link #setRequireAllOfPermissions(String[])}, and none of the\n     * permissions set by {@link #setRequireNoneOfPermissions(String[])} to get the broadcast.\n     *\n     * @param excludedPermissions a list of Strings of permission the receiver must not have. Set to\n     *                            null or an empty array to clear any previously set value.\n     * @hide\n     ",
    "links" : [ "#sendBroadcast(Intent", "#setRequireAllOfPermissions(String", "#setRequireNoneOfPermissions(String" ]
  }, {
    "name" : "public void setRequireCompatChange(long changeId, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * When set, this broadcast will only be delivered to apps which have the\n     * given {@link ChangeId} in the given state.\n     * <p>\n     * Each {@link BroadcastOptions} instance supports only a single\n     * {@link ChangeId} requirement, so any subsequent calls will override any\n     * previously defined requirement.\n     * <p>\n     * This requirement applies to both manifest registered and runtime\n     * registered receivers.\n     * @hide\n     *\n     * @param changeId the {@link ChangeId} to inspect\n     * @param enabled the required enabled state of the inspected\n     *            {@link ChangeId} for this broadcast to be delivered\n     * @see CompatChanges#isChangeEnabled\n     * @see #clearRequireCompatChange()\n     ",
    "links" : [ "android.compat.annotation.ChangeId", "android.app.BroadcastOptions" ]
  }, {
    "name" : "public void clearRequireCompatChange()",
    "returnType" : "void",
    "comment" : "\n     * Clear any previously defined requirement for this broadcast requested via\n     * {@link #setRequireCompatChange(long, boolean)}.\n     * @hide\n     ",
    "links" : [ "#setRequireCompatChange(long" ]
  }, {
    "name" : "public void setAlarmBroadcast(boolean senderIsAlarm)",
    "returnType" : "void",
    "comment" : "\n     * When set, this broadcast will be understood as having originated from an\n     * alarm going off.  Only the OS itself can use this option; uses by other\n     * senders will be ignored.\n     * @hide\n     *\n     * @param senderIsAlarm Whether the broadcast is alarm-triggered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAlarmBroadcast()",
    "returnType" : "boolean",
    "comment" : "\n     * Did this broadcast originate from an alarm triggering?\n     * @return true if this broadcast is an alarm message, false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BroadcastOptions setShareIdentityEnabled(boolean shareIdentityEnabled)",
    "returnType" : "BroadcastOptions",
    "comment" : "\n     * Sets whether the identity of the broadcasting app should be shared with all receivers\n     * that will receive this broadcast.\n     *\n     * <p>Use this option when broadcasting to a receiver that needs to know the identity of the\n     * broadcaster; with this set to {@code true}, the receiver will have access to the broadcasting\n     * app's package name and uid.\n     *\n     * <p>Defaults to {@code false} if not set.\n     *\n     * @param shareIdentityEnabled whether the broadcasting app's identity should be shared with the\n     *                             receiver\n     * @return {@code this} {@link BroadcastOptions} instance\n     * @see BroadcastReceiver#getSentFromUid()\n     * @see BroadcastReceiver#getSentFromPackage()\n     ",
    "links" : [ "android.app.BroadcastOptions" ]
  }, {
    "name" : "public boolean isShareIdentityEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the broadcasting app has opted-in to sharing its identity with the receiver.\n     *\n     * @return {@code true} if the broadcasting app has opted in to sharing its identity\n     * @see #setShareIdentityEnabled(boolean)\n     * @see BroadcastReceiver#getSentFromUid()\n     * @see BroadcastReceiver#getSentFromPackage()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPushMessagingBroadcast()",
    "returnType" : "boolean",
    "comment" : "\n     * Did this broadcast originate from a push message from the server?\n     *\n     * @return true if this broadcast is a push message, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPushMessagingOverQuotaBroadcast()",
    "returnType" : "boolean",
    "comment" : "\n     * Did this broadcast originate from a push message from the server which was over the allowed\n     * quota?\n     *\n     * @return true if this broadcast is a push message over quota, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getRequireCompatChangeId()",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean testRequireCompatChange(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if the given app meets the {@link ChangeId} state required by this\n     * broadcast, if any.\n     *\n     * @hide\n     ",
    "links" : [ "android.compat.annotation.ChangeId" ]
  }, {
    "name" : "public void recordResponseEventWhileInBackground(@IntRange(from = 0) long id)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether events (such as posting a notification) originating from an app after it\n     * receives the broadcast while in background should be recorded as responses to the broadcast.\n     *\n     * <p> Note that this will only be considered when sending explicit broadcast intents.\n     *\n     * @param id ID to be used for the response events corresponding to this broadcast. If the\n     *           value is {@code 0} (default), then response events will not be recorded. Otherwise,\n     *           they will be recorded with the ID provided.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getIdForResponseEvent()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public BroadcastOptions setDeferralPolicy(@DeferralPolicy int deferralPolicy)",
    "returnType" : "BroadcastOptions",
    "comment" : "\n     * Sets deferral policy for this broadcast that specifies how this broadcast\n     * can be deferred for delivery at some future point.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeferralPolicy()",
    "returnType" : "int",
    "comment" : "\n     * Gets deferral policy for this broadcast that specifies how this broadcast\n     * can be deferred for delivery at some future point.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearDeferralPolicy()",
    "returnType" : "void",
    "comment" : "\n     * Clears any deferral policy for this broadcast that specifies how this\n     * broadcast can be deferred for delivery at some future point.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BroadcastOptions setDeliveryGroupPolicy(@DeliveryGroupPolicy int policy)",
    "returnType" : "BroadcastOptions",
    "comment" : "\n     * Set delivery group policy for this broadcast to specify how multiple broadcasts belonging to\n     * the same delivery group has to be handled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeliveryGroupPolicy()",
    "returnType" : "int",
    "comment" : "\n     * Get the delivery group policy for this broadcast that specifies how multiple broadcasts\n     * belonging to the same delivery group has to be handled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearDeliveryGroupPolicy()",
    "returnType" : "void",
    "comment" : "\n     * Clears any previously set delivery group policies using\n     * {@link #setDeliveryGroupMatchingKey(String, String)} and resets the delivery group policy to\n     * the default value ({@link #DELIVERY_GROUP_POLICY_ALL}).\n     ",
    "links" : [ "#setDeliveryGroupMatchingKey(String", "#DELIVERY_GROUP_POLICY_ALL" ]
  }, {
    "name" : "public BroadcastOptions setDeliveryGroupMatchingKey(@NonNull String namespace, @NonNull String key)",
    "returnType" : "BroadcastOptions",
    "comment" : "\n     * Set namespace and key to identify the delivery group that this broadcast belongs to.\n     *\n     * <p> If {@code namespace} and {@code key} are specified, then another broadcast will be\n     * considered to be in the same delivery group as this iff it has the same {@code namespace}\n     * and {@code key}.\n     *\n     * <p> If not matching key using this API then by default\n     * {@link Intent#filterEquals(Intent)} will be used to identify the delivery group.\n     ",
    "links" : [ "android.content.Intent#filterEquals(Intent)" ]
  }, {
    "name" : "public String getDeliveryGroupMatchingKey()",
    "returnType" : "String",
    "comment" : "\n     * Return the namespace and key that is used to identify the delivery group that this\n     * broadcast belongs to.\n     *\n     * @return the delivery group namespace and key that was previously set using\n     *         {@link #setDeliveryGroupMatchingKey(String, String)}, concatenated with a {@code :}.\n     ",
    "links" : [ "#setDeliveryGroupMatchingKey(String" ]
  }, {
    "name" : "public String getDeliveryGroupMatchingNamespaceFragment()",
    "returnType" : "String",
    "comment" : "\n     * Return the namespace fragment that is used to identify the delivery group that this\n     * broadcast belongs to.\n     *\n     * @return the delivery group namespace fragment that was previously set using\n     *         {@link #setDeliveryGroupMatchingKey(String, String)}.\n     * @hide\n     ",
    "links" : [ "#setDeliveryGroupMatchingKey(String" ]
  }, {
    "name" : "public String getDeliveryGroupMatchingKeyFragment()",
    "returnType" : "String",
    "comment" : "\n     * Return the key fragment that is used to identify the delivery group that this\n     * broadcast belongs to.\n     *\n     * @return the delivery group key fragment that was previously set using\n     *         {@link #setDeliveryGroupMatchingKey(String, String)}.\n     * @hide\n     ",
    "links" : [ "#setDeliveryGroupMatchingKey(String" ]
  }, {
    "name" : "public void clearDeliveryGroupMatchingKey()",
    "returnType" : "void",
    "comment" : "\n     * Clears the namespace and key that was previously set using\n     * {@link #setDeliveryGroupMatchingKey(String, String)}.\n     ",
    "links" : [ "#setDeliveryGroupMatchingKey(String" ]
  }, {
    "name" : "public BroadcastOptions setDeliveryGroupMatchingFilter(@NonNull IntentFilter matchingFilter)",
    "returnType" : "BroadcastOptions",
    "comment" : "\n     * Set the {@link IntentFilter} object to identify the delivery group that this broadcast\n     * belongs to.\n     *\n     * <p> If a {@code matchingFilter} is specified, then another broadcast will be considered\n     * to be in the same delivery group as this iff the {@code matchingFilter} matches it's intent.\n     *\n     * <p> If neither matching key using {@link #setDeliveryGroupMatchingKey(String, String)} nor\n     * matching filter using this API is specified, then by default\n     * {@link Intent#filterEquals(Intent)} will be used to identify the delivery group.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Intent#filterEquals(Intent)", "android.content.IntentFilter", "#setDeliveryGroupMatchingKey(String" ]
  }, {
    "name" : "public IntentFilter getDeliveryGroupMatchingFilter()",
    "returnType" : "IntentFilter",
    "comment" : "\n     * Return the {@link IntentFilter} object that is used to identify the delivery group\n     * that this broadcast belongs to.\n     *\n     * @return the {@link IntentFilter} object that was previously set using\n     *         {@link #setDeliveryGroupMatchingFilter(IntentFilter)}.\n     * @hide\n     ",
    "links" : [ "android.content.IntentFilter", "#setDeliveryGroupMatchingFilter(IntentFilter)" ]
  }, {
    "name" : "public void clearDeliveryGroupMatchingFilter()",
    "returnType" : "void",
    "comment" : "\n     * Clears the {@link IntentFilter} object that was previously set using\n     * {@link #setDeliveryGroupMatchingFilter(IntentFilter)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.IntentFilter", "#setDeliveryGroupMatchingFilter(IntentFilter)" ]
  }, {
    "name" : "public BroadcastOptions setDeliveryGroupExtrasMerger(@NonNull BundleMerger extrasMerger)",
    "returnType" : "BroadcastOptions",
    "comment" : "\n     * Set the {@link BundleMerger} that specifies how to merge the extras data from\n     * broadcasts in a delivery group.\n     *\n     * <p>Note that this value will be ignored if the delivery group policy is not set as\n     * {@link #DELIVERY_GROUP_POLICY_MERGED}.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.BundleMerger", "#DELIVERY_GROUP_POLICY_MERGED" ]
  }, {
    "name" : "public BundleMerger getDeliveryGroupExtrasMerger()",
    "returnType" : "BundleMerger",
    "comment" : "\n     * Return the {@link BundleMerger} that specifies how to merge the extras data from\n     * broadcasts in a delivery group.\n     *\n     * @return the {@link BundleMerger} object that was previously set using\n     *         {@link #setDeliveryGroupExtrasMerger(BundleMerger)}.\n     * @hide\n     ",
    "links" : [ "#setDeliveryGroupExtrasMerger(BundleMerger)", "android.os.BundleMerger" ]
  }, {
    "name" : "public void clearDeliveryGroupExtrasMerger()",
    "returnType" : "void",
    "comment" : "\n     * Clear the {@link BundleMerger} object that was previously set using\n     * {@link #setDeliveryGroupExtrasMerger(BundleMerger)}.\n     * @hide\n     ",
    "links" : [ "#setDeliveryGroupExtrasMerger(BundleMerger)", "android.os.BundleMerger" ]
  }, {
    "name" : "public BroadcastOptions setInteractive(boolean interactive)",
    "returnType" : "BroadcastOptions",
    "comment" : "\n     * Sets whether the broadcast should be considered as having originated from\n     * some direct interaction by the user such as a notification tap or button\n     * press. This signal is used internally to ensure the broadcast is\n     * delivered quickly with low latency.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInteractive()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the broadcast should be considered as having originated\n     * from some direct interaction by the user such as a notification tap or\n     * button press.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPendingIntentBackgroundActivityLaunchAllowed(boolean allowed)",
    "returnType" : "void",
    "comment" : "\n     * Set PendingIntent activity is allowed to be started in the background if the caller\n     * can start background activities.\n     *\n     * @deprecated use #setPendingIntentBackgroundActivityStartMode(int) to set the full range\n     * of states\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPendingIntentBackgroundActivityLaunchAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Get PendingIntent activity is allowed to be started in the background if the caller can start\n     * background activities.\n     *\n     * @deprecated use {@link #getPendingIntentBackgroundActivityStartMode()} since for apps\n     * targeting {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} or higher this value might\n     * not match the actual behavior if the value was not explicitly set.\n     * @hide\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#getPendingIntentBackgroundActivityStartMode()" ]
  }, {
    "name" : "public BroadcastOptions setPendingIntentBackgroundActivityStartMode(@BackgroundActivityStartMode int state)",
    "returnType" : "BroadcastOptions",
    "comment" : "\n     * Sets the mode for allowing or denying the senders privileges to start background activities\n     * to the PendingIntent.\n     *\n     * This is typically used when executing {@link PendingIntent#send(Bundle)} or similar\n     * methods. A privileged sender of a PendingIntent should only grant\n     * MODE_BACKGROUND_ACTIVITY_START_ALLOWED if the PendingIntent is from a trusted source and/or\n     * executed on behalf the user.\n     * @hide\n     ",
    "links" : [ "android.app.PendingIntent#send(Bundle)" ]
  }, {
    "name" : "public int getPendingIntentBackgroundActivityStartMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the mode for allowing or denying the senders privileges to start background activities\n     * to the PendingIntent.\n     *\n     * @see #setPendingIntentBackgroundActivityStartMode(int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle toBundle()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the created options as a Bundle, which can be passed to\n     * {@link android.content.Context#sendBroadcast(android.content.Intent)\n     * Context.sendBroadcast(Intent)} and related methods.\n     * Note that the returned Bundle is still owned by the BroadcastOptions\n     * object; you must not modify it, but can supply it to the sendBroadcast\n     * methods that take an options Bundle.\n     *\n     * @throws IllegalStateException if the broadcast option values are inconsistent. For example,\n     *                               if the delivery group policy is specified as \"MERGED\" but no\n     *                               extras merger is supplied.\n     ",
    "links" : [ "android.content.Context#sendBroadcast(android.content.Intent)" ]
  }, {
    "name" : "public static BroadcastOptions fromBundle(@NonNull Bundle options)",
    "returnType" : "BroadcastOptions",
    "comment" : "\n     * Returns a {@link BroadcastOptions} parsed from the given {@link Bundle},\n     * typically generated from {@link #toBundle()}.\n     ",
    "links" : [ "android.os.Bundle", "#toBundle()", "android.app.BroadcastOptions" ]
  }, {
    "name" : "public static BroadcastOptions fromBundleNullable(@Nullable Bundle options)",
    "returnType" : "BroadcastOptions",
    "comment" : " {@hide} ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static BroadcastOptions makeBasic()", "public static BroadcastOptions makeWithDeferUntilActive(boolean deferUntilActive)", "public void setTemporaryAppWhitelistDuration(long duration)", "public void setTemporaryAppAllowlist(long duration, @TempAllowListType int type, @ReasonCode int reasonCode, @Nullable String reason)", "private boolean isTemporaryAppAllowlistSet()", "private void resetTemporaryAppAllowlist()", "public long getTemporaryAppAllowlistDuration()", "public int getTemporaryAppAllowlistType()", "public int getTemporaryAppAllowlistReasonCode()", "public String getTemporaryAppAllowlistReason()", "public void setMinManifestReceiverApiLevel(int apiLevel)", "public int getMinManifestReceiverApiLevel()", "public void setMaxManifestReceiverApiLevel(int apiLevel)", "public int getMaxManifestReceiverApiLevel()", "public void setDontSendToRestrictedApps(boolean dontSendToRestrictedApps)", "public boolean isDontSendToRestrictedApps()", "public void setBackgroundActivityStartsAllowed(boolean allowBackgroundActivityStarts)", "public boolean allowsBackgroundActivityStarts()", "public void setRequireAllOfPermissions(@Nullable String[] requiredPermissions)", "public void setRequireNoneOfPermissions(@Nullable String[] excludedPermissions)", "public void setRequireCompatChange(long changeId, boolean enabled)", "public void clearRequireCompatChange()", "public void setAlarmBroadcast(boolean senderIsAlarm)", "public boolean isAlarmBroadcast()", "public BroadcastOptions setShareIdentityEnabled(boolean shareIdentityEnabled)", "public boolean isShareIdentityEnabled()", "public boolean isPushMessagingBroadcast()", "public boolean isPushMessagingOverQuotaBroadcast()", "public long getRequireCompatChangeId()", "public boolean testRequireCompatChange(int uid)", "public void recordResponseEventWhileInBackground(@IntRange(from = 0) long id)", "public long getIdForResponseEvent()", "public BroadcastOptions setDeferralPolicy(@DeferralPolicy int deferralPolicy)", "public int getDeferralPolicy()", "public void clearDeferralPolicy()", "public BroadcastOptions setDeliveryGroupPolicy(@DeliveryGroupPolicy int policy)", "public int getDeliveryGroupPolicy()", "public void clearDeliveryGroupPolicy()", "public BroadcastOptions setDeliveryGroupMatchingKey(@NonNull String namespace, @NonNull String key)", "public String getDeliveryGroupMatchingKey()", "public String getDeliveryGroupMatchingNamespaceFragment()", "public String getDeliveryGroupMatchingKeyFragment()", "public void clearDeliveryGroupMatchingKey()", "public BroadcastOptions setDeliveryGroupMatchingFilter(@NonNull IntentFilter matchingFilter)", "public IntentFilter getDeliveryGroupMatchingFilter()", "public void clearDeliveryGroupMatchingFilter()", "public BroadcastOptions setDeliveryGroupExtrasMerger(@NonNull BundleMerger extrasMerger)", "public BundleMerger getDeliveryGroupExtrasMerger()", "public void clearDeliveryGroupExtrasMerger()", "public BroadcastOptions setInteractive(boolean interactive)", "public boolean isInteractive()", "public void setPendingIntentBackgroundActivityLaunchAllowed(boolean allowed)", "public boolean isPendingIntentBackgroundActivityLaunchAllowed()", "public BroadcastOptions setPendingIntentBackgroundActivityStartMode(@BackgroundActivityStartMode int state)", "public int getPendingIntentBackgroundActivityStartMode()", "public Bundle toBundle()", "public static BroadcastOptions fromBundle(@NonNull Bundle options)", "public static BroadcastOptions fromBundleNullable(@Nullable Bundle options)" ],
  "variableNames" : [ "mFlags", "mTemporaryAppAllowlistDuration", "mTemporaryAppAllowlistType", "mTemporaryAppAllowlistReasonCode", "mTemporaryAppAllowlistReason", "mMinManifestReceiverApiLevel", "mMaxManifestReceiverApiLevel", "mRequireAllOfPermissions", "mRequireNoneOfPermissions", "mRequireCompatChangeId", "mIdForResponseEvent", "mDeliveryGroupPolicy", "mDeliveryGroupMatchingNamespaceFragment", "mDeliveryGroupMatchingKeyFragment", "mDeliveryGroupExtrasMerger", "mDeliveryGroupMatchingFilter", "mDeferralPolicy", "FLAG_DONT_SEND_TO_RESTRICTED_APPS", "FLAG_ALLOW_BACKGROUND_ACTIVITY_STARTS", "FLAG_REQUIRE_COMPAT_CHANGE_ENABLED", "FLAG_IS_ALARM_BROADCAST", "FLAG_SHARE_IDENTITY", "FLAG_INTERACTIVE", "CHANGE_INVALID", "CHANGE_ALWAYS_ENABLED", "CHANGE_ALWAYS_DISABLED", "KEY_FLAGS", "KEY_TEMPORARY_APP_ALLOWLIST_DURATION", "KEY_TEMPORARY_APP_ALLOWLIST_TYPE", "KEY_TEMPORARY_APP_ALLOWLIST_REASON_CODE", "KEY_TEMPORARY_APP_ALLOWLIST_REASON", "KEY_MIN_MANIFEST_RECEIVER_API_LEVEL", "KEY_MAX_MANIFEST_RECEIVER_API_LEVEL", "KEY_REQUIRE_ALL_OF_PERMISSIONS", "KEY_REQUIRE_NONE_OF_PERMISSIONS", "KEY_REQUIRE_COMPAT_CHANGE_ID", "TEMPORARY_WHITELIST_TYPE_FOREGROUND_SERVICE_ALLOWED", "TEMPORARY_WHITELIST_TYPE_FOREGROUND_SERVICE_NOT_ALLOWED", "KEY_ID_FOR_RESPONSE_EVENT", "KEY_DELIVERY_GROUP_POLICY", "KEY_DELIVERY_GROUP_NAMESPACE", "KEY_DELIVERY_GROUP_KEY", "KEY_DELIVERY_GROUP_EXTRAS_MERGER", "KEY_DELIVERY_GROUP_MATCHING_FILTER", "KEY_DEFERRAL_POLICY", "DELIVERY_GROUP_POLICY_ALL", "DELIVERY_GROUP_POLICY_MOST_RECENT", "DELIVERY_GROUP_POLICY_MERGED", "DEFERRAL_POLICY_DEFAULT", "DEFERRAL_POLICY_NONE", "DEFERRAL_POLICY_UNTIL_ACTIVE" ]
}