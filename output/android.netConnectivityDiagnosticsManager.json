{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/ConnectivityDiagnosticsManager.java",
  "packageName" : "android.net",
  "className" : "ConnectivityDiagnosticsManager",
  "comment" : "\n * Class that provides utilities for collecting network connectivity diagnostics information.\n * Connectivity information is made available through triggerable diagnostics tools and by listening\n * to System validations. Some diagnostics information may be permissions-restricted.\n *\n * <p>ConnectivityDiagnosticsManager is intended for use by applications offering network\n * connectivity on a user device. These tools will provide several mechanisms for these applications\n * to be alerted to network conditions as well as diagnose potential network issues themselves.\n *\n * <p>The primary responsibilities of this class are to:\n *\n * <ul>\n *   <li>Allow permissioned applications to register and unregister callbacks for network event\n *       notifications\n *   <li>Invoke callbacks for network event notifications, including:\n *       <ul>\n *         <li>Network validations\n *         <li>Data stalls\n *         <li>Connectivity reports from applications\n *       </ul>\n * </ul>\n ",
  "variables" : [ {
    "name" : "sCallbacks",
    "type" : "Map<ConnectivityDiagnosticsCallback, ConnectivityDiagnosticsBinder>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IConnectivityManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean persistableBundleEquals(@Nullable PersistableBundle a, @Nullable PersistableBundle b)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void registerConnectivityDiagnosticsCallback(@NonNull NetworkRequest request, @NonNull Executor e, @NonNull ConnectivityDiagnosticsCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a ConnectivityDiagnosticsCallback with the System.\n     *\n     * <p>Only apps that offer network connectivity to the user should be registering callbacks.\n     * These are the only apps whose callbacks will be invoked by the system. Apps considered to\n     * meet these conditions include:\n     *\n     * <ul>\n     *   <li>Carrier apps with active subscriptions\n     *   <li>Active VPNs\n     *   <li>WiFi Suggesters\n     * </ul>\n     *\n     * <p>Callbacks registered by apps not meeting the above criteria will not be invoked.\n     *\n     * <p>If a registering app loses its relevant permissions, any callbacks it registered will\n     * silently stop receiving callbacks.\n     *\n     * <p>Each register() call <b>MUST</b> use a ConnectivityDiagnosticsCallback instance that is\n     * not currently registered. If a ConnectivityDiagnosticsCallback instance is registered with\n     * multiple NetworkRequests, an IllegalArgumentException will be thrown.\n     *\n     * <p>To avoid performance issues due to apps leaking callbacks, the system will limit the\n     * number of outstanding requests to 100 per app (identified by their UID), shared with\n     * callbacks in {@link ConnectivityManager}. Registering a callback with this method will count\n     * toward this limit. If this limit is exceeded, an exception will be thrown. To avoid hitting\n     * this issue and to conserve resources, make sure to unregister the callbacks with\n     * {@link #unregisterConnectivityDiagnosticsCallback}.\n     *\n     * @param request The NetworkRequest that will be used to match with Networks for which\n     *     callbacks will be fired\n     * @param e The Executor to be used for running the callback method invocations\n     * @param callback The ConnectivityDiagnosticsCallback that the caller wants registered with the\n     *     System\n     * @throws IllegalArgumentException if the same callback instance is registered with multiple\n     *     NetworkRequests\n     * @throws RuntimeException if the app already has too many callbacks registered.\n     ",
    "links" : [ "ConnectivityManager", "#unregisterConnectivityDiagnosticsCallback" ]
  }, {
    "name" : "public void unregisterConnectivityDiagnosticsCallback(@NonNull ConnectivityDiagnosticsCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a ConnectivityDiagnosticsCallback with the System.\n     *\n     * <p>If the given callback is not currently registered with the System, this operation will be\n     * a no-op.\n     *\n     * @param callback The ConnectivityDiagnosticsCallback to be unregistered from the System.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sCallbacks", "mContext", "mService" ],
  "methodNames" : [ "public static boolean persistableBundleEquals(@Nullable PersistableBundle a, @Nullable PersistableBundle b)", "public void registerConnectivityDiagnosticsCallback(@NonNull NetworkRequest request, @NonNull Executor e, @NonNull ConnectivityDiagnosticsCallback callback)", "public void unregisterConnectivityDiagnosticsCallback(@NonNull ConnectivityDiagnosticsCallback callback)" ]
}