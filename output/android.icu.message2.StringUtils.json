{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/message2/StringUtils.java",
  "packageName" : "android.icu.message2",
  "className" : "StringUtils",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "RESERVED_ANNOTATION_SIGILS",
    "type" : "String",
    "comment" : " abnf: reserved-annotation-start = \"!\" / \"%\" / \"*\" / \"+\" / \"<\" / \">\" / \"?\" / \"~\"",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static boolean isContentChar(int cp)",
    "returnType" : "boolean",
    "comment" : "\n     * abnf: content-char = %x01-08        ; omit NULL (%x00), HTAB (%x09) and LF (%x0A)\n     * abnf:              / %x0B-0C        ; omit CR (%x0D)\n     * abnf:              / %x0E-1F        ; omit SP (%x20)\n     * abnf:              / %x21-2D        ; omit . (%x2E)\n     * abnf:              / %x2F-3F        ; omit @ (%x40)\n     * abnf:              / %x41-5B        ; omit \\ (%x5C)\n     * abnf:              / %x5D-7A        ; omit { | } (%x7B-7D)\n     * abnf:              / %x7E-D7FF      ; omit surrogates\n     * abnf:              / %xE000-10FFFF\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isTextChar(int cp)",
    "returnType" : "boolean",
    "comment" : " abnf: text-char = content-char / s / \".\" / \"@\" / \"|\"",
    "links" : [ ]
  }, {
    "name" : " static boolean isBackslash(int cp)",
    "returnType" : "boolean",
    "comment" : " abnf: backslash = %x5C ; U+005C REVERSE SOLIDUS \"\\\"",
    "links" : [ ]
  }, {
    "name" : " static boolean isWhitespace(int cp)",
    "returnType" : "boolean",
    "comment" : "\n     * ; Whitespace\n     * abnf: s = 1*( SP / HTAB / CR / LF / %x3000 )\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isNameStart(int cp)",
    "returnType" : "boolean",
    "comment" : "\n     * abnf: name-start = ALPHA / \"_\"\n     * abnf:            / %xC0-D6 / %xD8-F6 / %xF8-2FF\n     * abnf:            / %x370-37D / %x37F-1FFF / %x200C-200D\n     * abnf:            / %x2070-218F / %x2C00-2FEF / %x3001-D7FF\n     * abnf:            / %xF900-FDCF / %xFDF0-FFFC / %x10000-EFFFF\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isNameChar(int cp)",
    "returnType" : "boolean",
    "comment" : "\n     * abnf: name-char = name-start / DIGIT / \"-\" / \".\"\n     * abnf:           / %xB7 / %x300-36F / %x203F-2040\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isPrivateStart(int cp)",
    "returnType" : "boolean",
    "comment" : " abnf: private-start = \"^\" / \"&\"",
    "links" : [ ]
  }, {
    "name" : " static boolean isQuotedChar(int cp)",
    "returnType" : "boolean",
    "comment" : " abnf: quoted-char = content-char / s / \".\" / \"@\" / \"{\" / \"}\"",
    "links" : [ ]
  }, {
    "name" : " static boolean isReservedChar(int cp)",
    "returnType" : "boolean",
    "comment" : " abnf: reserved-char = content-char / \".\"",
    "links" : [ ]
  }, {
    "name" : " static boolean isSimpleStartChar(int cp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isAlpha(int cp)",
    "returnType" : "boolean",
    "comment" : " See https://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_form",
    "links" : [ ]
  }, {
    "name" : " static boolean isDigit(int cp)",
    "returnType" : "boolean",
    "comment" : " See https://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_form",
    "links" : [ ]
  }, {
    "name" : " static boolean isFunctionSigil(int cp)",
    "returnType" : "boolean",
    "comment" : " abnf: function = \":\" identifier *(s option)",
    "links" : [ ]
  }, {
    "name" : " static boolean isPrivateAnnotationSigil(int cp)",
    "returnType" : "boolean",
    "comment" : " abnf: private-start = \"^\" / \"&\"",
    "links" : [ ]
  }, {
    "name" : " static boolean isReservedAnnotationSigil(int cp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static boolean isContentChar(int cp)", " static boolean isTextChar(int cp)", " static boolean isBackslash(int cp)", " static boolean isWhitespace(int cp)", " static boolean isNameStart(int cp)", " static boolean isNameChar(int cp)", " static boolean isPrivateStart(int cp)", " static boolean isQuotedChar(int cp)", " static boolean isReservedChar(int cp)", " static boolean isSimpleStartChar(int cp)", " static boolean isAlpha(int cp)", " static boolean isDigit(int cp)", " static boolean isFunctionSigil(int cp)", " static boolean isPrivateAnnotationSigil(int cp)", " static boolean isReservedAnnotationSigil(int cp)" ],
  "variableNames" : [ "RESERVED_ANNOTATION_SIGILS" ]
}