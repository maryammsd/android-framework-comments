{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/Font.java",
  "packageName" : "android.renderscript",
  "className" : "Font",
  "comment" : "\n * @hide\n * @deprecated in API 16\n * <p>This class gives users a simple way to draw hardware accelerated text.\n * Internally, the glyphs are rendered using the Freetype library and an internal cache of\n * rendered glyph bitmaps is maintained. Each font object represents a combination of a typeface,\n * and point size. You can create multiple font objects to represent styles such as bold or italic text,\n * faces, and different font sizes. During creation, the Android system quieries device's screen DPI to\n * ensure proper sizing across multiple device configurations.</p>\n * <p>Fonts are rendered using screen-space positions and no state setup beyond binding a\n * font to the RenderScript is required. A note of caution on performance, though the state changes\n * are transparent to the user, they do happen internally, and it is more efficient to\n * render large batches of text in sequence. It is also more efficient to render multiple\n * characters at once instead of one by one to improve draw call batching.</p>\n * <p>Font color and transparency are not part of the font object and you can freely modify\n * them in the script to suit the user's rendering needs. Font colors work as a state machine.\n * Every new call to draw text uses the last color set in the script.</p>\n *",
  "variables" : [ {
    "name" : "sSansNames",
    "type" : "String[]",
    "comment" : "These help us create a font by family name",
    "links" : [ ]
  }, {
    "name" : "sSerifNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMonoNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFontFamilyMap",
    "type" : "Map<String, FontFamily>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void addFamilyToMap(FontFamily family)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void initFontFamilyMap()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String getFontFileName(String familyName, Style style)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Font createFromFile(RenderScript rs, Resources res, String path, float pointSize)",
    "returnType" : "Font",
    "comment" : "\n     * @deprecated in API 16\n     * Takes a specific file name as an argument\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Font createFromFile(RenderScript rs, Resources res, File path, float pointSize)",
    "returnType" : "Font",
    "comment" : "\n     * @deprecated in API 16\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Font createFromAsset(RenderScript rs, Resources res, String path, float pointSize)",
    "returnType" : "Font",
    "comment" : "\n     * @deprecated in API 16\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Font createFromResource(RenderScript rs, Resources res, int id, float pointSize)",
    "returnType" : "Font",
    "comment" : "\n     * @deprecated in API 16\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Font create(RenderScript rs, Resources res, String familyName, Style fontStyle, float pointSize)",
    "returnType" : "Font",
    "comment" : "\n     * @deprecated in API 16\n     * Accepts one of the following family names as an argument\n     * and will attempt to produce the best match with a system font:\n     *\n     * \"sans-serif\" \"arial\" \"helvetica\" \"tahoma\" \"verdana\"\n     * \"serif\" \"times\" \"times new roman\" \"palatino\" \"georgia\" \"baskerville\"\n     * \"goudy\" \"fantasy\" \"cursive\" \"ITC Stone Serif\"\n     * \"monospace\" \"courier\" \"courier new\" \"monaco\"\n     *\n     * Returns default font if no match could be found.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sSansNames", "sSerifNames", "sMonoNames", "sFontFamilyMap" ],
  "methodNames" : [ "private static void addFamilyToMap(FontFamily family)", "private static void initFontFamilyMap()", " static String getFontFileName(String familyName, Style style)", "public static Font createFromFile(RenderScript rs, Resources res, String path, float pointSize)", "public static Font createFromFile(RenderScript rs, Resources res, File path, float pointSize)", "public static Font createFromAsset(RenderScript rs, Resources res, String path, float pointSize)", "public static Font createFromResource(RenderScript rs, Resources res, int id, float pointSize)", "public static Font create(RenderScript rs, Resources res, String familyName, Style fontStyle, float pointSize)" ]
}