{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/input/KeyboardLayout.java",
  "packageName" : "android.hardware.input",
  "className" : "KeyboardLayout",
  "comment" : "\n * Describes a keyboard layout.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LAYOUT_TYPE_UNDEFINED",
    "type" : "String",
    "comment" : " Undefined keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_TYPE_QWERTY",
    "type" : "String",
    "comment" : " Qwerty-based keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_TYPE_QWERTZ",
    "type" : "String",
    "comment" : " Qwertz-based keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_TYPE_AZERTY",
    "type" : "String",
    "comment" : " Azerty-based keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_TYPE_DVORAK",
    "type" : "String",
    "comment" : " Dvorak keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_TYPE_COLEMAK",
    "type" : "String",
    "comment" : " Colemak keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_TYPE_WORKMAN",
    "type" : "String",
    "comment" : " Workman keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_TYPE_TURKISH_F",
    "type" : "String",
    "comment" : " Turkish-F keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_TYPE_TURKISH_Q",
    "type" : "String",
    "comment" : " Turkish-Q keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_TYPE_EXTENDED",
    "type" : "String",
    "comment" : " Keyboard layout that has been enhanced with a large number of extra characters ",
    "links" : [ ]
  }, {
    "name" : "mDescriptor",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollection",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocales",
    "type" : "LocaleList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayoutType",
    "type" : "LayoutType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProductId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<KeyboardLayout>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getDescriptor()",
    "returnType" : "String",
    "comment" : "\n     * Gets the keyboard layout descriptor, which can be used to retrieve\n     * the keyboard layout again later using\n     * {@link InputManager#getKeyboardLayout(String)}.\n     *\n     * @return The keyboard layout descriptor.\n     ",
    "links" : [ "android.hardware.input.InputManager#getKeyboardLayout(String)" ]
  }, {
    "name" : "public String getLabel()",
    "returnType" : "String",
    "comment" : "\n     * Gets the keyboard layout descriptive label to show in the user interface.\n     * @return The keyboard layout descriptive label.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCollection()",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of the collection to which the keyboard layout belongs.  This is\n     * the label of the broadcast receiver or application that provided the keyboard layout.\n     * @return The keyboard layout collection name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocaleList getLocales()",
    "returnType" : "LocaleList",
    "comment" : "\n     * Gets the locales that this keyboard layout is intended for.\n     * This may be empty if a locale has not been assigned to this keyboard layout.\n     * @return The keyboard layout's intended locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLayoutType()",
    "returnType" : "String",
    "comment" : "\n     * Gets the layout type that this keyboard layout is intended for.\n     * This may be \"undefined\" if a layoutType has not been assigned to this keyboard layout.\n     * @return The keyboard layout's intended layout type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVendorId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the vendor ID of the hardware device this keyboard layout is intended for.\n     * Returns -1 if this is not specific to any piece of hardware.\n     * @return The hardware vendor ID of the keyboard layout's intended device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProductId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the product ID of the hardware device this keyboard layout is intended for.\n     * Returns -1 if this is not specific to any piece of hardware.\n     * @return The hardware product ID of the keyboard layout's intended device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAnsiLayout()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the Keyboard layout follows the ANSI Physical key layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isJisLayout()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the Keyboard layout follows the JIS Physical key layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(KeyboardLayout another)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isLayoutTypeValid(@NonNull String layoutName)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the provided layout type is supported/valid.\n     *\n     * @param layoutName name of layout type\n     * @return {@code true} if the provided layout type is supported/valid.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getDescriptor()", "public String getLabel()", "public String getCollection()", "public LocaleList getLocales()", "public String getLayoutType()", "public int getVendorId()", "public int getProductId()", "public boolean isAnsiLayout()", "public boolean isJisLayout()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public int compareTo(KeyboardLayout another)", "public String toString()", "public static boolean isLayoutTypeValid(@NonNull String layoutName)" ],
  "variableNames" : [ "LAYOUT_TYPE_UNDEFINED", "LAYOUT_TYPE_QWERTY", "LAYOUT_TYPE_QWERTZ", "LAYOUT_TYPE_AZERTY", "LAYOUT_TYPE_DVORAK", "LAYOUT_TYPE_COLEMAK", "LAYOUT_TYPE_WORKMAN", "LAYOUT_TYPE_TURKISH_F", "LAYOUT_TYPE_TURKISH_Q", "LAYOUT_TYPE_EXTENDED", "mDescriptor", "mLabel", "mCollection", "mPriority", "mLocales", "mLayoutType", "mVendorId", "mProductId", "CREATOR" ]
}