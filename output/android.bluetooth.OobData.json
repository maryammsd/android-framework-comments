{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/OobData.java",
  "packageName" : "android.bluetooth",
  "className" : "OobData",
  "comment" : "\n * Out Of Band Data for Bluetooth device pairing.\n *\n * <p>This object represents optional data obtained from a remote device through an out-of-band\n * channel (eg. NFC, QR).\n *\n * <p>References: <a\n * href=\"https://members.nfc-forum.org//apps/group_public/download.php/24620/NFCForum-AD-BTSSP_1_1.pdf\">NFC\n * AD Forum SSP 1.1 (AD)</a>\n *\n * <p>Core Specification Supplement (CSS) V9\n *\n * <p>There are several BR/EDR Examples\n *\n * <p>Negotiated Handover: Bluetooth Carrier Configuration Record: - OOB Data Length - Device\n * Address - Class of Device - Simple Pairing Hash C - Simple Pairing Randomizer R - Service Class\n * UUID - Bluetooth Local Name\n *\n * <p>Static Handover: Bluetooth Carrier Configuration Record: - OOB Data Length - Device Address -\n * Class of Device - Service Class UUID - Bluetooth Local Name\n *\n * <p>Simplified Tag Format for Single BT Carrier: Bluetooth OOB Data Record: - OOB Data Length -\n * Device Address - Class of Device - Service Class UUID - Bluetooth Local Name\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OOB_LENGTH_OCTETS",
    "type" : "int",
    "comment" : " The {@link OobData#mClassicLength} may be. (AD 3.1.1) (CSS 1.6.2) @hide ",
    "links" : [ "android.bluetooth.OobData#mClassicLength" ]
  }, {
    "name" : "DEVICE_ADDRESS_OCTETS",
    "type" : "int",
    "comment" : "\n     * The length for the {@link OobData#mDeviceAddressWithType}(6) and Address Type(1). (AD 3.1.2)\n     * (CSS 1.6.2)\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.OobData#mDeviceAddressWithType" ]
  }, {
    "name" : "CLASS_OF_DEVICE_OCTETS",
    "type" : "int",
    "comment" : " The Class of Device is 3 octets. (AD 3.1.3) (CSS 1.6.2) @hide ",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATION_OCTETS",
    "type" : "int",
    "comment" : " The Confirmation data must be 16 octets. (AD 3.2.2) (CSS 1.6.2) @hide ",
    "links" : [ ]
  }, {
    "name" : "RANDOMIZER_OCTETS",
    "type" : "int",
    "comment" : " The Randomizer data must be 16 octets. (AD 3.2.3) (CSS 1.6.2) @hide ",
    "links" : [ ]
  }, {
    "name" : "LE_DEVICE_ROLE_OCTETS",
    "type" : "int",
    "comment" : " The LE Device Role length is 1 octet. (AD 3.3.2) (CSS 1.17) @hide ",
    "links" : [ ]
  }, {
    "name" : "LE_TK_OCTETS",
    "type" : "int",
    "comment" : " The {@link OobData#mLeTemporaryKey} length. (3.4.1) @hide ",
    "links" : [ "android.bluetooth.OobData#mLeTemporaryKey" ]
  }, {
    "name" : "LE_APPEARANCE_OCTETS",
    "type" : "int",
    "comment" : " The {@link OobData#mLeAppearance} length. (3.4.1) @hide ",
    "links" : [ "android.bluetooth.OobData#mLeAppearance" ]
  }, {
    "name" : "LE_DEVICE_FLAG_OCTETS",
    "type" : "int",
    "comment" : " 1 octet to hold the 0-4 value.",
    "links" : [ ]
  }, {
    "name" : "LE_DEVICE_ROLE_PERIPHERAL_ONLY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LE_DEVICE_ROLE_CENTRAL_ONLY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LE_DEVICE_ROLE_BOTH_PREFER_PERIPHERAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LE_DEVICE_ROLE_BOTH_PREFER_CENTRAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LE_FLAG_LIMITED_DISCOVERY_MODE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LE_FLAG_GENERAL_DISCOVERY_MODE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LE_FLAG_BREDR_NOT_SUPPORTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LE_FLAG_SIMULTANEOUS_CONTROLLER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LE_FLAG_SIMULTANEOUS_HOST",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mDeviceAddressWithType",
    "type" : "byte[]",
    "comment" : " Both",
    "links" : [ ]
  }, {
    "name" : "mConfirmationHash",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRandomizerHash",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceName",
    "type" : "byte[]",
    "comment" : " Default the name to \"Bluetooth Device\"",
    "links" : [ ]
  }, {
    "name" : "mClassicLength",
    "type" : "byte[]",
    "comment" : " Classic",
    "links" : [ ]
  }, {
    "name" : "mClassOfDevice",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeDeviceRole",
    "type" : "int",
    "comment" : " LE",
    "links" : [ ]
  }, {
    "name" : "mLeTemporaryKey",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeAppearance",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<OobData>",
    "comment" : " For Parcelable",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public byte[] getDeviceAddressWithType()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return byte array representing the MAC address of a bluetooth device. The Address is 6\n     *     octets long with a 1 octet address type associated with the address.\n     *     <p>For classic this will be 6 byte address plus the default of PUBLIC_ADDRESS Address\n     *     Type. For LE there are more choices for Address Type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getConfirmationHash()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return byte array representing the confirmationHash value which is used to confirm the\n     *     identity to the controller.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getRandomizerHash()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return byte array representing the randomizerHash value which is used to verify the identity\n     *     of the controller.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getDeviceName()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return Device Name used for displaying name in UI.\n     *     <p>Also, this will be populated with the LE Local Name if the data is for LE.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getClassicLength()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return byte array representing the oob data length which is the length of all of the data\n     *     including these octets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getClassOfDevice()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return byte array representing the class of device for UI display.\n     *     <p>Does not indicate services available; for display only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getLeTemporaryKey()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return Temporary Key used for LE pairing.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getLeAppearance()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return Appearance used for LE pairing. For use in UI situations when determining what sort\n     *     of icons or text to display regarding the device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLeFlags()",
    "returnType" : "int",
    "comment" : "\n     * @return Flags used to determining discoverable mode to use, BR/EDR Support, and Capability.\n     *     <p>Possible LE Flags: {@link LE_FLAG_LIMITED_DISCOVERY_MODE} LE Limited Discoverable\n     *     Mode. {@link LE_FLAG_GENERAL_DISCOVERY_MODE} LE General Discoverable Mode. {@link\n     *     LE_FLAG_BREDR_NOT_SUPPORTED} BR/EDR Not Supported. Bit 37 of LMP Feature Mask\n     *     Definitions. {@link LE_FLAG_SIMULTANEOUS_CONTROLLER} Simultaneous LE and BR/EDR to Same\n     *     Device Capable (Controller). Bit 49 of LMP Feature Mask Definitions. {@link\n     *     LE_FLAG_SIMULTANEOUS_HOST} Simultaneous LE and BR/EDR to Same Device Capable (Host). Bit\n     *     55 of LMP Feature Mask Definitions. <b>0x05- 0x07 Reserved</b>\n     * @hide\n     ",
    "links" : [ "LE_FLAG_SIMULTANEOUS_HOST", "LE_FLAG_BREDR_NOT_SUPPORTED", "LE_FLAG_LIMITED_DISCOVERY_MODE", "LE_FLAG_GENERAL_DISCOVERY_MODE", "LE_FLAG_SIMULTANEOUS_CONTROLLER" ]
  }, {
    "name" : "public int getLeDeviceRole()",
    "returnType" : "int",
    "comment" : "\n     * @return the supported and preferred roles of the LE device.\n     *     <p>Possible Values: {@link LE_DEVICE_ROLE_PERIPHERAL_ONLY} Only Peripheral supported\n     *     {@link LE_DEVICE_ROLE_CENTRAL_ONLY} Only Central supported {@link\n     *     LE_DEVICE_ROLE_BOTH_PREFER_PERIPHERAL} Central & Peripheral supported; Peripheral\n     *     Preferred {@link LE_DEVICE_ROLE_BOTH_PREFER_CENTRAL} Only peripheral supported; Central\n     *     Preferred 0x04 - 0xFF Reserved\n     * @hide\n     ",
    "links" : [ "LE_DEVICE_ROLE_BOTH_PREFER_PERIPHERAL", "LE_DEVICE_ROLE_BOTH_PREFER_CENTRAL", "LE_DEVICE_ROLE_PERIPHERAL_ONLY", "LE_DEVICE_ROLE_CENTRAL_ONLY" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * @return a {@link String} representation of the OobData object.\n     * @hide\n     ",
    "links" : [ "String" ]
  }, {
    "name" : "private String toHexString(int b)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String toHexString(byte[] array)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public byte[] getDeviceAddressWithType()", "public byte[] getConfirmationHash()", "public byte[] getRandomizerHash()", "public byte[] getDeviceName()", "public byte[] getClassicLength()", "public byte[] getClassOfDevice()", "public byte[] getLeTemporaryKey()", "public byte[] getLeAppearance()", "public int getLeFlags()", "public int getLeDeviceRole()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel out, int flags)", "public String toString()", "private String toHexString(int b)", "private String toHexString(byte[] array)" ],
  "variableNames" : [ "TAG", "OOB_LENGTH_OCTETS", "DEVICE_ADDRESS_OCTETS", "CLASS_OF_DEVICE_OCTETS", "CONFIRMATION_OCTETS", "RANDOMIZER_OCTETS", "LE_DEVICE_ROLE_OCTETS", "LE_TK_OCTETS", "LE_APPEARANCE_OCTETS", "LE_DEVICE_FLAG_OCTETS", "LE_DEVICE_ROLE_PERIPHERAL_ONLY", "LE_DEVICE_ROLE_CENTRAL_ONLY", "LE_DEVICE_ROLE_BOTH_PREFER_PERIPHERAL", "LE_DEVICE_ROLE_BOTH_PREFER_CENTRAL", "LE_FLAG_LIMITED_DISCOVERY_MODE", "LE_FLAG_GENERAL_DISCOVERY_MODE", "LE_FLAG_BREDR_NOT_SUPPORTED", "LE_FLAG_SIMULTANEOUS_CONTROLLER", "LE_FLAG_SIMULTANEOUS_HOST", "mDeviceAddressWithType", "mConfirmationHash", "mRandomizerHash", "mDeviceName", "mClassicLength", "mClassOfDevice", "mLeDeviceRole", "mLeTemporaryKey", "mLeAppearance", "mLeFlags", "CREATOR" ]
}