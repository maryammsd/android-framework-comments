{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/ProcessBuilder.java",
  "packageName" : "java.lang",
  "className" : "ProcessBuilder",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "command",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "directory",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "environment",
    "type" : "Map<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "redirectErrorStream",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "redirects",
    "type" : "Redirect[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ProcessBuilder command(List<String> command)",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets this process builder's operating system program and\n     * arguments.  This method does <i>not</i> make a copy of the\n     * {@code command} list.  Subsequent updates to the list will\n     * be reflected in the state of the process builder.  It is not\n     * checked whether {@code command} corresponds to a valid\n     * operating system command.\n     *\n     * @param  command the list containing the program and its arguments\n     * @return this process builder\n     *\n     * @throws NullPointerException if the argument is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public ProcessBuilder command(String... command)",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets this process builder's operating system program and\n     * arguments.  This is a convenience method that sets the command\n     * to a string list containing the same strings as the\n     * {@code command} array, in the same order.  It is not\n     * checked whether {@code command} corresponds to a valid\n     * operating system command.\n     *\n     * @param  command a string array containing the program and its arguments\n     * @return this process builder\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> command()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns this process builder's operating system program and\n     * arguments.  The returned list is <i>not</i> a copy.  Subsequent\n     * updates to the list will be reflected in the state of this\n     * process builder.\n     *\n     * @return this process builder's program and its arguments\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> environment()",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Returns a string map view of this process builder's environment.\n     *\n     * Whenever a process builder is created, the environment is\n     * initialized to a copy of the current process environment (see\n     * {@link System#getenv()}).  Subprocesses subsequently started by\n     * this object's {@link #start()} method will use this map as\n     * their environment.\n     *\n     * <p>The returned object may be modified using ordinary {@link\n     * java.util.Map Map} operations.  These modifications will be\n     * visible to subprocesses started via the {@link #start()}\n     * method.  Two {@code ProcessBuilder} instances always\n     * contain independent process environments, so changes to the\n     * returned map will never be reflected in any other\n     * {@code ProcessBuilder} instance or the values returned by\n     * {@link System#getenv System.getenv}.\n     *\n     * <p>If the system does not support environment variables, an\n     * empty map is returned.\n     *\n     * <p>The returned map does not permit null keys or values.\n     * Attempting to insert or query the presence of a null key or\n     * value will throw a {@link NullPointerException}.\n     * Attempting to query the presence of a key or value which is not\n     * of type {@link String} will throw a {@link ClassCastException}.\n     *\n     * <p>The behavior of the returned map is system-dependent.  A\n     * system may not allow modifications to environment variables or\n     * may forbid certain variable names or values.  For this reason,\n     * attempts to modify the map may fail with\n     * {@link UnsupportedOperationException} or\n     * {@link IllegalArgumentException}\n     * if the modification is not permitted by the operating system.\n     *\n     * <p>Since the external format of environment variable names and\n     * values is system-dependent, there may not be a one-to-one\n     * mapping between them and Java's Unicode strings.  Nevertheless,\n     * the map is implemented in such a way that environment variables\n     * which are not modified by Java code will have an unmodified\n     * native representation in the subprocess.\n     *\n     * <p>The returned map and its collection views may not obey the\n     * general contract of the {@link Object#equals} and\n     * {@link Object#hashCode} methods.\n     *\n     * <p>The returned map is typically case-sensitive on all platforms.\n     *\n     * <p>If a security manager exists, its\n     * {@link SecurityManager#checkPermission checkPermission} method\n     * is called with a\n     * {@link RuntimePermission}{@code (\"getenv.*\")} permission.\n     * This may result in a {@link SecurityException} being thrown.\n     *\n     * <p>When passing information to a Java subprocess,\n     * <a href=System.html#EnvironmentVSSystemProperties>system properties</a>\n     * are generally preferred over environment variables.\n     *\n     * @return this process builder's environment\n     *\n     * @throws SecurityException\n     *         if a security manager exists and its\n     *         {@link SecurityManager#checkPermission checkPermission}\n     *         method doesn't allow access to the process environment\n     *\n     * @see    Runtime#exec(String[],String[],java.io.File)\n     * @see    System#getenv()\n     ",
    "links" : [ "java.lang.System#getenv", "java.lang.UnsupportedOperationException", "java.lang.System#getenv()", "java.lang.Object#hashCode", "java.lang.IllegalArgumentException", "java.lang.ClassCastException", "java.lang.NullPointerException", "#start()", "java.lang.Object#equals", "java.lang.SecurityManager#checkPermission", "java.util.Map", "java.lang.RuntimePermission", "java.lang.SecurityException", "java.lang.String" ]
  }, {
    "name" : " ProcessBuilder environment(String[] envp)",
    "returnType" : "ProcessBuilder",
    "comment" : " Only for use by Runtime.exec(...envp...)",
    "links" : [ ]
  }, {
    "name" : "public File directory()",
    "returnType" : "File",
    "comment" : "\n     * Returns this process builder's working directory.\n     *\n     * Subprocesses subsequently started by this object's {@link\n     * #start()} method will use this as their working directory.\n     * The returned value may be {@code null} -- this means to use\n     * the working directory of the current Java process, usually the\n     * directory named by the system property {@code user.dir},\n     * as the working directory of the child process.\n     *\n     * @return this process builder's working directory\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public ProcessBuilder directory(File directory)",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets this process builder's working directory.\n     *\n     * Subprocesses subsequently started by this object's {@link\n     * #start()} method will use this as their working directory.\n     * The argument may be {@code null} -- this means to use the\n     * working directory of the current Java process, usually the\n     * directory named by the system property {@code user.dir},\n     * as the working directory of the child process.\n     *\n     * @param  directory the new working directory\n     * @return this process builder\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "private Redirect[] redirects()",
    "returnType" : "Redirect[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ProcessBuilder redirectInput(Redirect source)",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets this process builder's standard input source.\n     *\n     * Subprocesses subsequently started by this object's {@link #start()}\n     * method obtain their standard input from this source.\n     *\n     * <p>If the source is {@link Redirect#PIPE Redirect.PIPE}\n     * (the initial value), then the standard input of a\n     * subprocess can be written to using the output stream\n     * returned by {@link Process#getOutputStream()}.\n     * If the source is set to any other value, then\n     * {@link Process#getOutputStream()} will return a\n     * <a href=\"#redirect-input\">null output stream</a>.\n     *\n     * @param  source the new standard input source\n     * @return this process builder\n     * @throws IllegalArgumentException\n     *         if the redirect does not correspond to a valid source\n     *         of data, that is, has type\n     *         {@link ProcessBuilder.Redirect.Type#WRITE WRITE} or\n     *         {@link ProcessBuilder.Redirect.Type#APPEND APPEND}\n     * @since  1.7\n     ",
    "links" : [ "ProcessBuilder.Redirect.Type#APPEND", "#PIPE", "#start()", "java.lang.Process#getOutputStream()", "ProcessBuilder.Redirect.Type#WRITE" ]
  }, {
    "name" : "public ProcessBuilder redirectOutput(Redirect destination)",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets this process builder's standard output destination.\n     *\n     * Subprocesses subsequently started by this object's {@link #start()}\n     * method send their standard output to this destination.\n     *\n     * <p>If the destination is {@link Redirect#PIPE Redirect.PIPE}\n     * (the initial value), then the standard output of a subprocess\n     * can be read using the input stream returned by {@link\n     * Process#getInputStream()}.\n     * If the destination is set to any other value, then\n     * {@link Process#getInputStream()} will return a\n     * <a href=\"#redirect-output\">null input stream</a>.\n     *\n     * @param  destination the new standard output destination\n     * @return this process builder\n     * @throws IllegalArgumentException\n     *         if the redirect does not correspond to a valid\n     *         destination of data, that is, has type\n     *         {@link ProcessBuilder.Redirect.Type#READ READ}\n     * @since  1.7\n     ",
    "links" : [ "ProcessBuilder.Redirect.Type#READ", "#PIPE", "#start()", "java.lang.Process#getInputStream()" ]
  }, {
    "name" : "public ProcessBuilder redirectError(Redirect destination)",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets this process builder's standard error destination.\n     *\n     * Subprocesses subsequently started by this object's {@link #start()}\n     * method send their standard error to this destination.\n     *\n     * <p>If the destination is {@link Redirect#PIPE Redirect.PIPE}\n     * (the initial value), then the error output of a subprocess\n     * can be read using the input stream returned by {@link\n     * Process#getErrorStream()}.\n     * If the destination is set to any other value, then\n     * {@link Process#getErrorStream()} will return a\n     * <a href=\"#redirect-output\">null input stream</a>.\n     *\n     * <p>If the {@link #redirectErrorStream redirectErrorStream}\n     * attribute has been set {@code true}, then the redirection set\n     * by this method has no effect.\n     *\n     * @param  destination the new standard error destination\n     * @return this process builder\n     * @throws IllegalArgumentException\n     *         if the redirect does not correspond to a valid\n     *         destination of data, that is, has type\n     *         {@link ProcessBuilder.Redirect.Type#READ READ}\n     * @since  1.7\n     ",
    "links" : [ "ProcessBuilder.Redirect.Type#READ", "#PIPE", "#start()", "#redirectErrorStream", "java.lang.Process#getErrorStream()" ]
  }, {
    "name" : "public ProcessBuilder redirectInput(File file)",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets this process builder's standard input source to a file.\n     *\n     * <p>This is a convenience method.  An invocation of the form\n     * {@code redirectInput(file)}\n     * behaves in exactly the same way as the invocation\n     * {@link #redirectInput(Redirect) redirectInput}\n     * {@code (Redirect.from(file))}.\n     *\n     * @param  file the new standard input source\n     * @return this process builder\n     * @since  1.7\n     ",
    "links" : [ "#redirectInput(Redirect)" ]
  }, {
    "name" : "public ProcessBuilder redirectOutput(File file)",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets this process builder's standard output destination to a file.\n     *\n     * <p>This is a convenience method.  An invocation of the form\n     * {@code redirectOutput(file)}\n     * behaves in exactly the same way as the invocation\n     * {@link #redirectOutput(Redirect) redirectOutput}\n     * {@code (Redirect.to(file))}.\n     *\n     * @param  file the new standard output destination\n     * @return this process builder\n     * @since  1.7\n     ",
    "links" : [ "#redirectOutput(Redirect)" ]
  }, {
    "name" : "public ProcessBuilder redirectError(File file)",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets this process builder's standard error destination to a file.\n     *\n     * <p>This is a convenience method.  An invocation of the form\n     * {@code redirectError(file)}\n     * behaves in exactly the same way as the invocation\n     * {@link #redirectError(Redirect) redirectError}\n     * {@code (Redirect.to(file))}.\n     *\n     * @param  file the new standard error destination\n     * @return this process builder\n     * @since  1.7\n     ",
    "links" : [ "#redirectError(Redirect)" ]
  }, {
    "name" : "public Redirect redirectInput()",
    "returnType" : "Redirect",
    "comment" : "\n     * Returns this process builder's standard input source.\n     *\n     * Subprocesses subsequently started by this object's {@link #start()}\n     * method obtain their standard input from this source.\n     * The initial value is {@link Redirect#PIPE Redirect.PIPE}.\n     *\n     * @return this process builder's standard input source\n     * @since  1.7\n     ",
    "links" : [ "#PIPE", "#start()" ]
  }, {
    "name" : "public Redirect redirectOutput()",
    "returnType" : "Redirect",
    "comment" : "\n     * Returns this process builder's standard output destination.\n     *\n     * Subprocesses subsequently started by this object's {@link #start()}\n     * method redirect their standard output to this destination.\n     * The initial value is {@link Redirect#PIPE Redirect.PIPE}.\n     *\n     * @return this process builder's standard output destination\n     * @since  1.7\n     ",
    "links" : [ "#PIPE", "#start()" ]
  }, {
    "name" : "public Redirect redirectError()",
    "returnType" : "Redirect",
    "comment" : "\n     * Returns this process builder's standard error destination.\n     *\n     * Subprocesses subsequently started by this object's {@link #start()}\n     * method redirect their standard error to this destination.\n     * The initial value is {@link Redirect#PIPE Redirect.PIPE}.\n     *\n     * @return this process builder's standard error destination\n     * @since  1.7\n     ",
    "links" : [ "#PIPE", "#start()" ]
  }, {
    "name" : "public ProcessBuilder inheritIO()",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets the source and destination for subprocess standard I/O\n     * to be the same as those of the current Java process.\n     *\n     * <p>This is a convenience method.  An invocation of the form\n     *  <pre> {@code\n     * pb.inheritIO()\n     * }</pre>\n     * behaves in exactly the same way as the invocation\n     *  <pre> {@code\n     * pb.redirectInput(Redirect.INHERIT)\n     *   .redirectOutput(Redirect.INHERIT)\n     *   .redirectError(Redirect.INHERIT)\n     * }</pre>\n     *\n     * This gives behavior equivalent to most operating system\n     * command interpreters, or the standard C library function\n     * {@code system()}.\n     *\n     * @return this process builder\n     * @since  1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean redirectErrorStream()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this process builder merges standard error and\n     * standard output.\n     *\n     * <p>If this property is {@code true}, then any error output\n     * generated by subprocesses subsequently started by this object's\n     * {@link #start()} method will be merged with the standard\n     * output, so that both can be read using the\n     * {@link Process#getInputStream()} method.  This makes it easier\n     * to correlate error messages with the corresponding output.\n     * The initial value is {@code false}.\n     *\n     * @return this process builder's {@code redirectErrorStream} property\n     ",
    "links" : [ "#start()", "java.lang.Process#getInputStream()" ]
  }, {
    "name" : "public ProcessBuilder redirectErrorStream(boolean redirectErrorStream)",
    "returnType" : "ProcessBuilder",
    "comment" : "\n     * Sets this process builder's {@code redirectErrorStream} property.\n     *\n     * <p>If this property is {@code true}, then any error output\n     * generated by subprocesses subsequently started by this object's\n     * {@link #start()} method will be merged with the standard\n     * output, so that both can be read using the\n     * {@link Process#getInputStream()} method.  This makes it easier\n     * to correlate error messages with the corresponding output.\n     * The initial value is {@code false}.\n     *\n     * @param  redirectErrorStream the new property value\n     * @return this process builder\n     ",
    "links" : [ "#start()", "java.lang.Process#getInputStream()" ]
  }, {
    "name" : "public Process start() throws IOException",
    "returnType" : "Process",
    "comment" : "\n     * Starts a new process using the attributes of this process builder.\n     *\n     * <p>The new process will\n     * invoke the command and arguments given by {@link #command()},\n     * in a working directory as given by {@link #directory()},\n     * with a process environment as given by {@link #environment()}.\n     *\n     * <p>This method checks that the command is a valid operating\n     * system command.  Which commands are valid is system-dependent,\n     * but at the very least the command must be a non-empty list of\n     * non-null strings.\n     *\n     * <p>A minimal set of system dependent environment variables may\n     * be required to start a process on some operating systems.\n     * As a result, the subprocess may inherit additional environment variable\n     * settings beyond those in the process builder's {@link #environment()}.\n     *\n     * <p>If there is a security manager, its\n     * {@link SecurityManager#checkExec checkExec}\n     * method is called with the first component of this object's\n     * {@code command} array as its argument. This may result in\n     * a {@link SecurityException} being thrown.\n     *\n     * <p>Starting an operating system process is highly system-dependent.\n     * Among the many things that can go wrong are:\n     * <ul>\n     * <li>The operating system program file was not found.\n     * <li>Access to the program file was denied.\n     * <li>The working directory does not exist.\n     * </ul>\n     *\n     * <p>In such cases an exception will be thrown.  The exact nature\n     * of the exception is system-dependent, but it will always be a\n     * subclass of {@link IOException}.\n     *\n     * <p>Subsequent modifications to this process builder will not\n     * affect the returned {@link Process}.\n     *\n     * @return a new {@link Process} object for managing the subprocess\n     *\n     * @throws NullPointerException\n     *         if an element of the command list is null\n     *\n     * @throws IndexOutOfBoundsException\n     *         if the command is an empty list (has size {@code 0})\n     *\n     * @throws SecurityException\n     *         if a security manager exists and\n     *         <ul>\n     *\n     *         <li>its\n     *         {@link SecurityManager#checkExec checkExec}\n     *         method doesn't allow creation of the subprocess, or\n     *\n     *         <li>the standard input to the subprocess was\n     *         {@linkplain #redirectInput redirected from a file}\n     *         and the security manager's\n     *         {@link SecurityManager#checkRead checkRead} method\n     *         denies read access to the file, or\n     *\n     *         <li>the standard output or standard error of the\n     *         subprocess was\n     *         {@linkplain #redirectOutput redirected to a file}\n     *         and the security manager's\n     *         {@link SecurityManager#checkWrite checkWrite} method\n     *         denies write access to the file\n     *\n     *         </ul>\n     *\n     * @throws IOException if an I/O error occurs\n     *\n     * @see Runtime#exec(String[], String[], java.io.File)\n     ",
    "links" : [ "#directory()", "java.lang.SecurityManager#checkWrite", "java.lang.SecurityManager#checkRead", "java.lang.Process", "java.lang.SecurityException", "java.io.IOException", "#command()", "#environment()", "java.lang.SecurityManager#checkExec" ]
  } ],
  "methodNames" : [ "public ProcessBuilder command(List<String> command)", "public ProcessBuilder command(String... command)", "public List<String> command()", "public Map<String, String> environment()", " ProcessBuilder environment(String[] envp)", "public File directory()", "public ProcessBuilder directory(File directory)", "private Redirect[] redirects()", "public ProcessBuilder redirectInput(Redirect source)", "public ProcessBuilder redirectOutput(Redirect destination)", "public ProcessBuilder redirectError(Redirect destination)", "public ProcessBuilder redirectInput(File file)", "public ProcessBuilder redirectOutput(File file)", "public ProcessBuilder redirectError(File file)", "public Redirect redirectInput()", "public Redirect redirectOutput()", "public Redirect redirectError()", "public ProcessBuilder inheritIO()", "public boolean redirectErrorStream()", "public ProcessBuilder redirectErrorStream(boolean redirectErrorStream)", "public Process start() throws IOException" ],
  "variableNames" : [ "command", "directory", "environment", "redirectErrorStream", "redirects" ]
}