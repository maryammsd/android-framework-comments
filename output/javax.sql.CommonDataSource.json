{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/sql/CommonDataSource.java",
  "packageName" : "javax.sql",
  "className" : "CommonDataSource",
  "comment" : "\n * Interface that defines the methods which are common between <code>DataSource</code>,\n * <code>XADataSource</code> and <code>ConnectionPoolDataSource</code>.\n *<p>\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " java.io.PrintWriter getLogWriter() throws SQLException",
    "returnType" : "java.io.PrintWriter",
    "comment" : "\n     * <p>Retrieves the log writer for this <code>DataSource</code>\n     * object.\n     *\n     * <p>The log writer is a character output stream to which all logging\n     * and tracing messages for this data source will be\n     * printed.  This includes messages printed by the methods of this\n     * object, messages printed by methods of other objects manufactured\n     * by this object, and so on.  Messages printed to a data source\n     * specific log writer are not printed to the log writer associated\n     * with the <code>java.sql.DriverManager</code> class.  When a\n     * <code>DataSource</code> object is\n     * created, the log writer is initially null; in other words, the\n     * default is for logging to be disabled.\n     *\n     * @return the log writer for this data source or null if\n     *        logging is disabled\n     * @exception java.sql.SQLException if a database access error occurs\n     * @see #setLogWriter\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setLogWriter(java.io.PrintWriter out) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the log writer for this <code>DataSource</code>\n     * object to the given <code>java.io.PrintWriter</code> object.\n     *\n     * <p>The log writer is a character output stream to which all logging\n     * and tracing messages for this data source will be\n     * printed.  This includes messages printed by the methods of this\n     * object, messages printed by methods of other objects manufactured\n     * by this object, and so on.  Messages printed to a data source-\n     * specific log writer are not printed to the log writer associated\n     * with the <code>java.sql.DriverManager</code> class. When a\n     * <code>DataSource</code> object is created the log writer is\n     * initially null; in other words, the default is for logging to be\n     * disabled.\n     *\n     * @param out the new log writer; to disable logging, set to null\n     * @exception SQLException if a database access error occurs\n     * @see #getLogWriter\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setLoginTimeout(int seconds) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the maximum time in seconds that this data source will wait\n     * while attempting to connect to a database.  A value of zero\n     * specifies that the timeout is the default system timeout\n     * if there is one; otherwise, it specifies that there is no timeout.\n     * When a <code>DataSource</code> object is created, the login timeout is\n     * initially zero.\n     *\n     * @param seconds the data source login time limit\n     * @exception SQLException if a database access error occurs.\n     * @see #getLoginTimeout\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getLoginTimeout() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Gets the maximum time in seconds that this data source can wait\n     * while attempting to connect to a database.  A value of zero\n     * means that the timeout is the default system timeout\n     * if there is one; otherwise, it means that there is no timeout.\n     * When a <code>DataSource</code> object is created, the login timeout is\n     * initially zero.\n     *\n     * @return the data source login time limit\n     * @exception SQLException if a database access error occurs.\n     * @see #setLoginTimeout\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public Logger getParentLogger() throws SQLFeatureNotSupportedException",
    "returnType" : "Logger",
    "comment" : "\n     * Return the parent Logger of all the Loggers used by this data source. This\n     * should be the Logger farthest from the root Logger that is\n     * still an ancestor of all of the Loggers used by this data source. Configuring\n     * this Logger will affect all of the log messages generated by the data source.\n     * In the worst case, this may be the root Logger.\n     *\n     * @return the parent Logger for this data source\n     * @throws SQLFeatureNotSupportedException if the data source does not use <code>java.util.logging<code>.\n     * @since 1.7\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " java.io.PrintWriter getLogWriter() throws SQLException", " void setLogWriter(java.io.PrintWriter out) throws SQLException", " void setLoginTimeout(int seconds) throws SQLException", " int getLoginTimeout() throws SQLException", "public Logger getParentLogger() throws SQLFeatureNotSupportedException" ],
  "variableNames" : [ ]
}