{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/UiccSlotMapping.java",
  "packageName" : "android.telephony",
  "className" : "UiccSlotMapping",
  "comment" : "\n * <p>Provides information for a SIM slot mapping, which establishes a unique mapping between a\n * logical SIM slot and a physical SIM slot and port index.  A logical SIM slot represents a\n * potentially active SIM slot, where a physical SIM slot and port index represent a hardware SIM\n * slot and port (capable of having an active profile) which can be mapped to a logical sim slot.\n * <p>It contains the following parameters:\n * <ul>\n * <li>Port index: unique index referring to a port belonging to the physical SIM slot.\n * If the SIM does not support multiple enabled profiles, the port index is default index 0.</li>\n * <li>Physical slot index: unique index referring to a physical SIM slot. Physical slot IDs start\n * at 0 and go up depending on the number of physical slots on the device.\n * This differs from the number of logical slots a device has, which corresponds to the number of\n * active slots a device is capable of using. For example, a device which switches between dual-SIM\n * and single-SIM mode may always have two physical slots, but in single-SIM mode it will have only\n * one logical slot.</li>\n * <li>Logical slot index: unique index referring to a logical SIM slot, Logical slot IDs start at 0\n * and go up depending on the number of supported active slots on a device.\n * For example, a dual-SIM device typically has slot 0 and slot 1. If a device has multiple physical\n * slots but only supports one active slot, it will have only the logical slot ID 0</li>\n * </ul>\n *\n * <p> This configurations tells a specific logical slot is mapped to a port from an actual physical\n * sim slot @see <a href=\"https://developer.android.com/guide/topics/connectivity/telecom/telephony-ids\">the Android Developer Site</a>\n * for more information.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mPortIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPhysicalSlotIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogicalSlotIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<UiccSlotMapping>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(@Nullable Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPortIndex()",
    "returnType" : "int",
    "comment" : "\n     * Port index is the unique index referring to a port belonging to the physical SIM slot.\n     * If the SIM does not support multiple enabled profiles, the port index is default index 0.\n     *\n     * @return port index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPhysicalSlotIndex()",
    "returnType" : "int",
    "comment" : "\n     * Gets the physical slot index for the slot that the UICC is currently inserted in.\n     *\n     * @return physical slot index which is the index of actual physical UICC slot.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLogicalSlotIndex()",
    "returnType" : "int",
    "comment" : "\n     * Gets logical slot index for the slot that the UICC is currently attached.\n     * Logical slot index is the unique index referring to a logical slot(logical modem stack).\n     *\n     * @return logical slot index;\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(@Nullable Parcel dest, int flags)", "public int describeContents()", "public int getPortIndex()", "public int getPhysicalSlotIndex()", "public int getLogicalSlotIndex()", "public boolean equals(@Nullable Object obj)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "mPortIndex", "mPhysicalSlotIndex", "mLogicalSlotIndex", "CREATOR" ]
}