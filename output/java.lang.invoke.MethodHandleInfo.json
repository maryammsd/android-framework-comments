{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/invoke/MethodHandleInfo.java",
  "packageName" : "java.lang.invoke",
  "className" : "MethodHandleInfo",
  "comment" : "\n * A symbolic reference obtained by cracking a direct method handle\n * into its consitutent symbolic parts.\n * To crack a direct method handle, call {@link Lookup#revealDirect Lookup.revealDirect}.\n * <h1><a name=\"directmh\"></a>Direct Method Handles</h1>\n * A <em>direct method handle</em> represents a method, constructor, or field without\n * any intervening argument bindings or other transformations.\n * The method, constructor, or field referred to by a direct method handle is called\n * its <em>underlying member</em>.\n * Direct method handles may be obtained in any of these ways:\n * <ul>\n * <li>By executing an {@code ldc} instruction on a {@code CONSTANT_MethodHandle} constant.\n *     (See the Java Virtual Machine Specification, sections 4.4.8 and 5.4.3.)\n * <li>By calling one of the <a href=\"MethodHandles.Lookup.html#lookups\">Lookup Factory Methods</a>,\n *     such as {@link Lookup#findVirtual Lookup.findVirtual},\n *     to resolve a symbolic reference into a method handle.\n *     A symbolic reference consists of a class, name string, and type.\n * <li>By calling the factory method {@link Lookup#unreflect Lookup.unreflect}\n *     or {@link Lookup#unreflectSpecial Lookup.unreflectSpecial}\n *     to convert a {@link Method} into a method handle.\n * <li>By calling the factory method {@link Lookup#unreflectConstructor Lookup.unreflectConstructor}\n *     to convert a {@link Constructor} into a method handle.\n * <li>By calling the factory method {@link Lookup#unreflectGetter Lookup.unreflectGetter}\n *     or {@link Lookup#unreflectSetter Lookup.unreflectSetter}\n *     to convert a {@link Field} into a method handle.\n * </ul>\n *\n * <h1>Restrictions on Cracking</h1>\n * Given a suitable {@code Lookup} object, it is possible to crack any direct method handle\n * to recover a symbolic reference for the underlying method, constructor, or field.\n * Cracking must be done via a {@code Lookup} object equivalent to that which created\n * the target method handle, or which has enough access permissions to recreate\n * an equivalent method handle.\n * <p>\n * If the underlying method is <a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive</a>,\n * the direct method handle will have been \"bound\" to a particular caller class, the\n * {@linkplain java.lang.invoke.MethodHandles.Lookup#lookupClass() lookup class}\n * of the lookup object used to create it.\n * Cracking this method handle with a different lookup class will fail\n * even if the underlying method is public (like {@code Class.forName}).\n * <p>\n * The requirement of lookup object matching provides a \"fast fail\" behavior\n * for programs which may otherwise trust erroneous revelation of a method\n * handle with symbolic information (or caller binding) from an unexpected scope.\n * Use {@link java.lang.invoke.MethodHandles#reflectAs} to override this limitation.\n *\n * <h1><a name=\"refkinds\"></a>Reference kinds</h1>\n * The <a href=\"MethodHandles.Lookup.html#lookups\">Lookup Factory Methods</a>\n * correspond to all major use cases for methods, constructors, and fields.\n * These use cases may be distinguished using small integers as follows:\n * <table border=1 cellpadding=5 summary=\"reference kinds\">\n * <tr><th>reference kind</th><th>descriptive name</th><th>scope</th><th>member</th><th>behavior</th></tr>\n * <tr>\n *     <td>{@code 1}</td><td>{@code REF_getField}</td><td>{@code class}</td>\n *     <td>{@code FT f;}</td><td>{@code (T) this.f;}</td>\n * </tr>\n * <tr>\n *     <td>{@code 2}</td><td>{@code REF_getStatic}</td><td>{@code class} or {@code interface}</td>\n *     <td>{@code static}<br>{@code FT f;}</td><td>{@code (T) C.f;}</td>\n * </tr>\n * <tr>\n *     <td>{@code 3}</td><td>{@code REF_putField}</td><td>{@code class}</td>\n *     <td>{@code FT f;}</td><td>{@code this.f = x;}</td>\n * </tr>\n * <tr>\n *     <td>{@code 4}</td><td>{@code REF_putStatic}</td><td>{@code class}</td>\n *     <td>{@code static}<br>{@code FT f;}</td><td>{@code C.f = arg;}</td>\n * </tr>\n * <tr>\n *     <td>{@code 5}</td><td>{@code REF_invokeVirtual}</td><td>{@code class}</td>\n *     <td>{@code T m(A*);}</td><td>{@code (T) this.m(arg*);}</td>\n * </tr>\n * <tr>\n *     <td>{@code 6}</td><td>{@code REF_invokeStatic}</td><td>{@code class} or {@code interface}</td>\n *     <td>{@code static}<br>{@code T m(A*);}</td><td>{@code (T) C.m(arg*);}</td>\n * </tr>\n * <tr>\n *     <td>{@code 7}</td><td>{@code REF_invokeSpecial}</td><td>{@code class} or {@code interface}</td>\n *     <td>{@code T m(A*);}</td><td>{@code (T) super.m(arg*);}</td>\n * </tr>\n * <tr>\n *     <td>{@code 8}</td><td>{@code REF_newInvokeSpecial}</td><td>{@code class}</td>\n *     <td>{@code C(A*);}</td><td>{@code new C(arg*);}</td>\n * </tr>\n * <tr>\n *     <td>{@code 9}</td><td>{@code REF_invokeInterface}</td><td>{@code interface}</td>\n *     <td>{@code T m(A*);}</td><td>{@code (T) this.m(arg*);}</td>\n * </tr>\n * </table>\n * @since 1.8\n ",
  "links" : [ "java.lang.invoke.MethodHandles.Lookup#unreflectSpecial", "Field", "java.lang.invoke.MethodHandles.Lookup#unreflectSetter", "java.lang.invoke.MethodHandles.Lookup#revealDirect", "java.lang.invoke.MethodHandles.Lookup#findVirtual", "java.lang.invoke.MethodHandles.Lookup#unreflectGetter", "Constructor", "java.lang.invoke.MethodHandles.Lookup#unreflect", "java.lang.invoke.MethodHandles.Lookup#unreflectConstructor", "Method", "java.lang.invoke.MethodHandles#reflectAs" ],
  "variables" : [ {
    "name" : "REF_getField",
    "type" : "int",
    "comment" : "\n     * A direct method handle reference kind,\n     * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "REF_getStatic",
    "type" : "int",
    "comment" : "\n     * A direct method handle reference kind,\n     * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "REF_putField",
    "type" : "int",
    "comment" : "\n     * A direct method handle reference kind,\n     * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "REF_putStatic",
    "type" : "int",
    "comment" : "\n     * A direct method handle reference kind,\n     * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "REF_invokeVirtual",
    "type" : "int",
    "comment" : "\n     * A direct method handle reference kind,\n     * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "REF_invokeStatic",
    "type" : "int",
    "comment" : "\n     * A direct method handle reference kind,\n     * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "REF_invokeSpecial",
    "type" : "int",
    "comment" : "\n     * A direct method handle reference kind,\n     * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "REF_newInvokeSpecial",
    "type" : "int",
    "comment" : "\n     * A direct method handle reference kind,\n     * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "REF_invokeInterface",
    "type" : "int",
    "comment" : "\n     * A direct method handle reference kind,\n     * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getReferenceKind()",
    "returnType" : "int",
    "comment" : "\n     * Returns the reference kind of the cracked method handle, which in turn\n     * determines whether the method handle's underlying member was a constructor, method, or field.\n     * See the <a href=\"MethodHandleInfo.html#refkinds\">table above</a> for definitions.\n     * @return the integer code for the kind of reference used to access the underlying member\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<?> getDeclaringClass()",
    "returnType" : "Class<?>",
    "comment" : "\n     * Returns the class in which the cracked method handle's underlying member was defined.\n     * @return the declaring class of the underlying member\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the cracked method handle's underlying member.\n     * This is {@code \"<init>\"} if the underlying member was a constructor,\n     * else it is a simple method name or field name.\n     * @return the simple name of the underlying member\n     ",
    "links" : [ ]
  }, {
    "name" : "public MethodType getMethodType()",
    "returnType" : "MethodType",
    "comment" : "\n     * Returns the nominal type of the cracked symbolic reference, expressed as a method type.\n     * If the reference is to a constructor, the return type will be {@code void}.\n     * If it is to a non-static method, the method type will not mention the {@code this} parameter.\n     * If it is to a field and the requested access is to read the field,\n     * the method type will have no parameters and return the field type.\n     * If it is to a field and the requested access is to write the field,\n     * the method type will have one parameter of the field type and return {@code void}.\n     * <p>\n     * Note that original direct method handle may include a leading {@code this} parameter,\n     * or (in the case of a constructor) will replace the {@code void} return type\n     * with the constructed class.\n     * The nominal type does not include any {@code this} parameter,\n     * and (in the case of a constructor) will return {@code void}.\n     * @return the type of the underlying member, expressed as a method type\n     ",
    "links" : [ ]
  }, {
    "name" : "public T reflectAs(Class<T> expected, Lookup lookup)",
    "returnType" : "T",
    "comment" : "\n     * Reflects the underlying member as a method, constructor, or field object.\n     * If the underlying member is public, it is reflected as if by\n     * {@code getMethod}, {@code getConstructor}, or {@code getField}.\n     * Otherwise, it is reflected as if by\n     * {@code getDeclaredMethod}, {@code getDeclaredConstructor}, or {@code getDeclaredField}.\n     * The underlying member must be accessible to the given lookup object.\n     * @param <T> the desired type of the result, either {@link Member} or a subtype\n     * @param expected a class object representing the desired result type {@code T}\n     * @param lookup the lookup object that created this MethodHandleInfo, or one with equivalent access privileges\n     * @return a reference to the method, constructor, or field object\n     * @exception ClassCastException if the member is not of the expected type\n     * @exception NullPointerException if either argument is {@code null}\n     * @exception IllegalArgumentException if the underlying member is not accessible to the given lookup object\n     ",
    "links" : [ "Member" ]
  }, {
    "name" : "public int getModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Returns the access modifiers of the underlying member.\n     * @return the Java language modifiers for underlying member,\n     *         or -1 if the member cannot be accessed\n     * @see Modifier\n     * @see #reflectAs\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVarArgs()",
    "returnType" : "boolean",
    "comment" : " spelling derived from java.lang.reflect.Executable, not MethodHandle.isVarargsCollector",
    "links" : [ ]
  }, {
    "name" : "public static String referenceKindToString(int referenceKind)",
    "returnType" : "String",
    "comment" : "\n     * Returns the descriptive name of the given reference kind,\n     * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n     * The conventional prefix \"REF_\" is omitted.\n     * @param referenceKind an integer code for a kind of reference used to access a class member\n     * @return a mixed-case string such as {@code \"getField\"}\n     * @exception IllegalArgumentException if the argument is not a valid\n     *            <a href=\"MethodHandleInfo.html#refkinds\">reference kind number</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toString(int kind, Class<?> defc, String name, MethodType type)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation for a {@code MethodHandleInfo},\n     * given the four parts of its symbolic reference.\n     * This is defined to be of the form {@code \"RK C.N:MT\"}, where {@code RK} is the\n     * {@linkplain #referenceKindToString reference kind string} for {@code kind},\n     * {@code C} is the {@linkplain java.lang.Class#getName name} of {@code defc}\n     * {@code N} is the {@code name}, and\n     * {@code MT} is the {@code type}.\n     * These four values may be obtained from the\n     * {@linkplain #getReferenceKind reference kind},\n     * {@linkplain #getDeclaringClass declaring class},\n     * {@linkplain #getName member name},\n     * and {@linkplain #getMethodType method type}\n     * of a {@code MethodHandleInfo} object.\n     *\n     * @implSpec\n     * This produces a result equivalent to:\n     * <pre>{@code\n     *     String.format(\"%s %s.%s:%s\", referenceKindToString(kind), defc.getName(), name, type)\n     * }</pre>\n     *\n     * @param kind the {@linkplain #getReferenceKind reference kind} part of the symbolic reference\n     * @param defc the {@linkplain #getDeclaringClass declaring class} part of the symbolic reference\n     * @param name the {@linkplain #getName member name} part of the symbolic reference\n     * @param type the {@linkplain #getMethodType method type} part of the symbolic reference\n     * @return a string of the form {@code \"RK C.N:MT\"}\n     * @exception IllegalArgumentException if the first argument is not a valid\n     *            <a href=\"MethodHandleInfo.html#refkinds\">reference kind number</a>\n     * @exception NullPointerException if any reference argument is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean refKindIsValid(int refKind)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated This internal method was accidentally added to API 26 and must not be used. No\n     *             replacement is available but it is possible to replicate using information from\n     *             the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>, e.g.\n     *             {@code refKind >= 1 && refKind <= 9}. There are no guarantees that this logic\n     *             will work if future versions extend the table.\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean refKindIsField(int refKind)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated This internal method was accidentally added to API 26 and must not be used. No\n     *             replacement is available but it is possible to replicate using information from\n     *             the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>, e.g.\n     *             {@code refKind >= 1 && refKind <= 4}.  There are no guarantees that this logic\n     *             will work if future versions extend the table.\n     ",
    "links" : [ ]
  }, {
    "name" : " static String refKindName(int refKind)",
    "returnType" : "String",
    "comment" : "\n     * @deprecated This internal method was accidentally added to API 26 and must not be used. Use\n     *             {@link MethodHandleInfo#referenceKindToString(int)} instead.\n     ",
    "links" : [ "java.lang.invoke.MethodHandleInfo#referenceKindToString(int)" ]
  } ],
  "methodNames" : [ "public int getReferenceKind()", "public Class<?> getDeclaringClass()", "public String getName()", "public MethodType getMethodType()", "public T reflectAs(Class<T> expected, Lookup lookup)", "public int getModifiers()", "public boolean isVarArgs()", "public static String referenceKindToString(int referenceKind)", "public static String toString(int kind, Class<?> defc, String name, MethodType type)", " static boolean refKindIsValid(int refKind)", " static boolean refKindIsField(int refKind)", " static String refKindName(int refKind)" ],
  "variableNames" : [ "REF_getField", "REF_getStatic", "REF_putField", "REF_putStatic", "REF_invokeVirtual", "REF_invokeStatic", "REF_invokeSpecial", "REF_newInvokeSpecial", "REF_invokeInterface" ]
}