{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/storage/ExternalStorageService.java",
  "packageName" : "android.service.storage",
  "className" : "ExternalStorageService",
  "comment" : "\n * A service to handle filesystem I/O from other apps.\n *\n * <p>To extend this class, you must declare the service in your manifest file with the\n * {@link android.Manifest.permission#BIND_EXTERNAL_STORAGE_SERVICE} permission,\n * and include an intent filter with the {@link #SERVICE_INTERFACE} action.\n * For example:</p>\n * <pre>\n *     &lt;service android:name=\".ExternalStorageServiceImpl\"\n *             android:exported=\"true\"\n *             android:priority=\"100\"\n *             android:permission=\"android.permission.BIND_EXTERNAL_STORAGE_SERVICE\"&gt;\n *         &lt;intent-filter&gt;\n *             &lt;action android:name=\"android.service.storage.ExternalStorageService\" /&gt;\n *         &lt;/intent-filter&gt;\n *     &lt;/service&gt;\n * </pre>\n * @hide\n ",
  "links" : [ "#SERVICE_INTERFACE", "android.Manifest.permission#BIND_EXTERNAL_STORAGE_SERVICE" ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The Intent action that a service must respond to. Add it as an intent filter in the\n     * manifest declaration of the implementing service.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SESSION_TYPE_FUSE",
    "type" : "int",
    "comment" : "\n     * Whether the session associated with the device file descriptor when calling\n     * {@link #onStartSession} is a FUSE session.\n     ",
    "links" : [ "#onStartSession" ]
  }, {
    "name" : "FLAG_SESSION_ATTRIBUTE_INDEXABLE",
    "type" : "int",
    "comment" : "\n     * Whether the upper file system path specified when calling {@link #onStartSession}\n     * should be indexed.\n     ",
    "links" : [ "#onStartSession" ]
  }, {
    "name" : "EXTRA_SESSION_ID",
    "type" : "String",
    "comment" : "\n     * {@link Bundle} key for a {@link String} value.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.os.Bundle", "String" ]
  }, {
    "name" : "EXTRA_ERROR",
    "type" : "String",
    "comment" : "\n     * {@link Bundle} key for a {@link ParcelableException} value.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.os.Bundle", "android.os.ParcelableException" ]
  }, {
    "name" : "EXTRA_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * {@link Bundle} key for a package name {@link String} value.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.os.Bundle", "String" ]
  }, {
    "name" : "mWrapper",
    "type" : "ExternalStorageServiceWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onStartSession(@NonNull String sessionId, @SessionFlag int flag, @NonNull ParcelFileDescriptor deviceFd, @NonNull File upperFileSystemPath, @NonNull File lowerFileSystemPath) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called when the system starts a session associated with {@code deviceFd}\n     * identified by {@code sessionId} to handle filesystem I/O for other apps. The type of\n     * session and other attributes are passed in {@code flag}.\n     *\n     * <p> I/O is received as requests originating from {@code upperFileSystemPath} on\n     * {@code deviceFd}. Implementors should handle the I/O by responding to these requests\n     * using the data on the {@code lowerFileSystemPath}.\n     *\n     * <p> Additional calls to start a session for the same {@code sessionId} while the session\n     * is still starting or already started should have no effect.\n     *\n     * @param sessionId uniquely identifies a running session and used in {@link #onEndSession}\n     * @param flag specifies the type or additional attributes of a session\n     * @param deviceFd for intercepting IO from other apps\n     * @param upperFileSystemPath is the root path on which we are intercepting IO from other apps\n     * @param lowerFileSystemPath is the root path matching {@code upperFileSystemPath} containing\n     * the actual data apps are trying to access\n     ",
    "links" : [ "#onEndSession" ]
  }, {
    "name" : "public abstract void onEndSession(@NonNull String sessionId) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called when the system ends the session identified by {@code sessionId}. Implementors should\n     * stop handling filesystem I/O and clean up resources from the ended session.\n     *\n     * <p> Additional calls to end a session for the same {@code sessionId} while the session\n     * is still ending or has not started should have no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onVolumeStateChanged(@NonNull StorageVolume vol) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called when any volume's state changes.\n     *\n     * <p> This is required to communicate volume state changes with the Storage Service before\n     * broadcasting to other apps. The Storage Service needs to process any change in the volume\n     * state (before other apps receive a broadcast for the same) to update the database so that\n     * other apps have the correct view of the volume.\n     *\n     * <p> Blocks until the Storage Service processes/scans the volume or fails in doing so.\n     *\n     * @param vol name of the volume that was changed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFreeCache(@NonNull UUID volumeUuid, @BytesLong long bytes) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called when any cache held by the ExternalStorageService needs to be freed.\n     *\n     * <p> Blocks until the service frees the cache or fails in doing so.\n     *\n     * @param volumeUuid uuid of the {@link StorageVolume} from which cache needs to be freed\n     * @param bytes number of bytes which need to be freed\n     ",
    "links" : [ "android.os.storage.StorageVolume" ]
  }, {
    "name" : "public void onAnrDelayStarted(@NonNull String packageName, int uid, int tid, @StorageManager.AppIoBlockedReason int reason)",
    "returnType" : "void",
    "comment" : "\n     * Called when {@code packageName} is about to ANR. The {@link ExternalStorageService} can\n     * show a progress dialog for the {@code reason}.\n     *\n     * @param packageName the package name of the ANR'ing app\n     * @param uid the uid of the ANR'ing app\n     * @param tid the thread id of the ANR'ing app\n     * @param reason the reason the app is ANR'ing\n     ",
    "links" : [ "android.service.storage.ExternalStorageService" ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onStartSession(@NonNull String sessionId, @SessionFlag int flag, @NonNull ParcelFileDescriptor deviceFd, @NonNull File upperFileSystemPath, @NonNull File lowerFileSystemPath) throws IOException", "public abstract void onEndSession(@NonNull String sessionId) throws IOException", "public abstract void onVolumeStateChanged(@NonNull StorageVolume vol) throws IOException", "public void onFreeCache(@NonNull UUID volumeUuid, @BytesLong long bytes) throws IOException", "public void onAnrDelayStarted(@NonNull String packageName, int uid, int tid, @StorageManager.AppIoBlockedReason int reason)", "public final IBinder onBind(@NonNull Intent intent)" ],
  "variableNames" : [ "SERVICE_INTERFACE", "FLAG_SESSION_TYPE_FUSE", "FLAG_SESSION_ATTRIBUTE_INDEXABLE", "EXTRA_SESSION_ID", "EXTRA_ERROR", "EXTRA_PACKAGE_NAME", "mWrapper", "mHandler" ]
}