{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/PatternTokenizer.java",
  "packageName" : "android.icu.impl",
  "className" : "PatternTokenizer",
  "comment" : "\n * A simple parsing class for patterns and rules. Handles '...' quotations, \\\\uxxxx and \\\\Uxxxxxxxx, and symple syntax.\n * The '' (two quotes) is treated as a single quote, inside or outside a quote\n * <ul>\n * <li>Any ignorable characters are ignored in parsing.</li>\n * <li>Any syntax characters are broken into separate tokens</li>\n * <li>Quote characters can be specified: '...', \"...\", and \\x </li>\n * <li>Other characters are treated as literals</li>\n * </ul>\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ignorableCharacters",
    "type" : "UnicodeSet",
    "comment" : " settings used in the interpretation of the pattern",
    "links" : [ ]
  }, {
    "name" : "syntaxCharacters",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "extraQuotingCharacters",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "escapeCharacters",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usingSlash",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usingQuote",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "needingQuoteCharacters",
    "type" : "UnicodeSet",
    "comment" : " transient data, set when needed. Null it out for any changes in the above fields.",
    "links" : [ ]
  }, {
    "name" : "start",
    "type" : "int",
    "comment" : " data about the current pattern being parsed. start gets moved as we go along.",
    "links" : [ ]
  }, {
    "name" : "limit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SINGLE_QUOTE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BACK_SLASH",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_QUOTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IN_QUOTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYNTAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LITERAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BROKEN_QUOTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BROKEN_ESCAPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AFTER_QUOTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "START_QUOTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NORMAL_QUOTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLASH_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public UnicodeSet getIgnorableCharacters()",
    "returnType" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PatternTokenizer setIgnorableCharacters(UnicodeSet ignorableCharacters)",
    "returnType" : "PatternTokenizer",
    "comment" : "\n     * Sets the characters to be ignored in parsing, eg new UnicodeSet(\"[:pattern_whitespace:]\");\n     * @param ignorableCharacters Characters to be ignored.\n     * @return A PatternTokenizer object in which characters are specified as ignored characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public UnicodeSet getSyntaxCharacters()",
    "returnType" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public UnicodeSet getExtraQuotingCharacters()",
    "returnType" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PatternTokenizer setSyntaxCharacters(UnicodeSet syntaxCharacters)",
    "returnType" : "PatternTokenizer",
    "comment" : "\n     *  Sets the characters to be interpreted as syntax characters in parsing, eg new UnicodeSet(\"[:pattern_syntax:]\")\n     * @param syntaxCharacters Characters to be set as syntax characters.\n     * @return A PatternTokenizer object in which characters are specified as syntax characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PatternTokenizer setExtraQuotingCharacters(UnicodeSet syntaxCharacters)",
    "returnType" : "PatternTokenizer",
    "comment" : "\n     *  Sets the extra characters to be quoted in literals\n     * @param syntaxCharacters Characters to be set as extra quoting characters.\n     * @return A PatternTokenizer object in which characters are specified as extra quoting characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public UnicodeSet getEscapeCharacters()",
    "returnType" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PatternTokenizer setEscapeCharacters(UnicodeSet escapeCharacters)",
    "returnType" : "PatternTokenizer",
    "comment" : "\n     * Set characters to be escaped in literals, in quoteLiteral and normalize, eg new UnicodeSet(\"[^\\\\u0020-\\\\u007E]\");\n     * @param escapeCharacters Characters to be set as escape characters.\n     * @return A PatternTokenizer object in which characters are specified as escape characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUsingQuote()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PatternTokenizer setUsingQuote(boolean usingQuote)",
    "returnType" : "PatternTokenizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isUsingSlash()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PatternTokenizer setUsingSlash(boolean usingSlash)",
    "returnType" : "PatternTokenizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLimit()",
    "returnType" : "int",
    "comment" : "  }",
    "links" : [ ]
  }, {
    "name" : "public PatternTokenizer setLimit(int limit)",
    "returnType" : "PatternTokenizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getStart()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PatternTokenizer setStart(int start)",
    "returnType" : "PatternTokenizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PatternTokenizer setPattern(CharSequence pattern)",
    "returnType" : "PatternTokenizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PatternTokenizer setPattern(String pattern)",
    "returnType" : "PatternTokenizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String quoteLiteral(CharSequence string)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String quoteLiteral(String string)",
    "returnType" : "String",
    "comment" : "\n     * Quote a literal string, using the available settings. Thus syntax characters, quote characters, and ignorable characters will be put into quotes.\n     * @param string String passed to quote a literal string.\n     * @return A string using the available settings will place syntax, quote, or ignorable characters into quotes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void appendEscaped(StringBuffer result, int cp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String normalize()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int next(StringBuffer buffer)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public UnicodeSet getIgnorableCharacters()", "public PatternTokenizer setIgnorableCharacters(UnicodeSet ignorableCharacters)", "public UnicodeSet getSyntaxCharacters()", "public UnicodeSet getExtraQuotingCharacters()", "public PatternTokenizer setSyntaxCharacters(UnicodeSet syntaxCharacters)", "public PatternTokenizer setExtraQuotingCharacters(UnicodeSet syntaxCharacters)", "public UnicodeSet getEscapeCharacters()", "public PatternTokenizer setEscapeCharacters(UnicodeSet escapeCharacters)", "public boolean isUsingQuote()", "public PatternTokenizer setUsingQuote(boolean usingQuote)", "public boolean isUsingSlash()", "public PatternTokenizer setUsingSlash(boolean usingSlash)", "public int getLimit()", "public PatternTokenizer setLimit(int limit)", "public int getStart()", "public PatternTokenizer setStart(int start)", "public PatternTokenizer setPattern(CharSequence pattern)", "public PatternTokenizer setPattern(String pattern)", "public String quoteLiteral(CharSequence string)", "public String quoteLiteral(String string)", "private void appendEscaped(StringBuffer result, int cp)", "public String normalize()", "public int next(StringBuffer buffer)" ],
  "variableNames" : [ "ignorableCharacters", "syntaxCharacters", "extraQuotingCharacters", "escapeCharacters", "usingSlash", "usingQuote", "needingQuoteCharacters", "start", "limit", "pattern", "SINGLE_QUOTE", "BACK_SLASH", "NO_QUOTE", "IN_QUOTE", "DONE", "SYNTAX", "LITERAL", "BROKEN_QUOTE", "BROKEN_ESCAPE", "UNKNOWN", "AFTER_QUOTE", "NONE", "START_QUOTE", "NORMAL_QUOTE", "SLASH_START", "HEX" ]
}