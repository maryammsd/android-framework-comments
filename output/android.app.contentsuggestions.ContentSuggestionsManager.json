{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/contentsuggestions/ContentSuggestionsManager.java",
  "packageName" : "android.app.contentsuggestions",
  "className" : "ContentSuggestionsManager",
  "comment" : "\n * When provided with content from an app, can suggest selections and classifications of that\n * content.\n *\n * <p>The content is mainly a snapshot of a running task, the selections will be text and image\n * selections with that image content. These mSelections can then be classified to find actions and\n * entities on those selections.\n *\n * <p>Only accessible to blessed components such as Overview.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EXTRA_BITMAP",
    "type" : "String",
    "comment" : "\n     * Key into the extras Bundle passed to {@link #provideContextImage(int, Bundle)}.\n     * This can be used to provide the bitmap to\n     * {@link android.service.contentsuggestions.ContentSuggestionsService}.\n     * The value must be a {@link android.graphics.Bitmap} with the\n     * config {@link android.graphics.Bitmap.Config.HARDWARE}.\n     *\n     * @hide\n     ",
    "links" : [ "android.graphics.Bitmap.Config.HARDWARE", "android.graphics.Bitmap", "android.service.contentsuggestions.ContentSuggestionsService", "#provideContextImage(int" ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYNC_CALLS_TIMEOUT_MS",
    "type" : "int",
    "comment" : "\n     * Timeout for calls to system_server.\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IContentSuggestionsManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUser",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void provideContextImage(@NonNull Bitmap bitmap, @NonNull Bundle imageContextRequestExtras)",
    "returnType" : "void",
    "comment" : "\n     * Hints to the system that a new context image using the provided bitmap should be sent to\n     * the system content suggestions service.\n     *\n     * @param bitmap the new context image\n     * @param imageContextRequestExtras sent with request to provide implementation specific\n     *                                  extra information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void provideContextImage(int taskId, @NonNull Bundle imageContextRequestExtras)",
    "returnType" : "void",
    "comment" : "\n     * Hints to the system that a new context image for the provided task should be sent to the\n     * system content suggestions service.\n     *\n     * @param taskId of the task to snapshot.\n     * @param imageContextRequestExtras sent with request to provide implementation specific\n     *                                  extra information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void suggestContentSelections(@NonNull SelectionsRequest request, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull SelectionsCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Suggest content selections, based on the provided task id and optional\n     * location on screen provided in the request. Called after provideContextImage().\n     * The result can be passed to\n     * {@link #classifyContentSelections(ClassificationsRequest, Executor, ClassificationsCallback)}\n     *  to classify actions and entities on these selections.\n     *\n     * @param request containing the task and point location.\n     * @param callbackExecutor to execute the provided callback on.\n     * @param callback to receive the selections.\n     ",
    "links" : [ "#classifyContentSelections(ClassificationsRequest" ]
  }, {
    "name" : "public void classifyContentSelections(@NonNull ClassificationsRequest request, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull ClassificationsCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Classify actions and entities in content selections, as returned from\n     * suggestContentSelections. Note these selections may be modified by the\n     * caller before being passed here.\n     *\n     * @param request containing the selections to classify.\n     * @param callbackExecutor to execute the provided callback on.\n     * @param callback to receive the classifications.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyInteraction(@NonNull String requestId, @NonNull Bundle interaction)",
    "returnType" : "void",
    "comment" : "\n     * Report telemetry for interaction with suggestions / classifications.\n     *\n     * @param requestId the id for the associated interaction\n     * @param interaction to report back to the system content suggestions service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates that Content Suggestions is available and enabled for the provided user. That is,\n     * has an implementation and not disabled through device management.\n     *\n     * @return {@code true} if Content Suggestions is enabled and available for the provided user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetTemporaryService(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Resets the temporary service implementation to the default component.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTemporaryService(@UserIdInt int userId, @NonNull String serviceName, int duration)",
    "returnType" : "void",
    "comment" : "\n     * Temporarily sets the service implementation.\n     *\n     * @param userId user Id to set the temporary service on.\n     * @param serviceName name of the new component\n     * @param duration how long the change will be valid (the service will be automatically reset\n     *            to the default component after this timeout expires).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultServiceEnabled(@UserIdInt int userId, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the default service should be used.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void provideContextImage(@NonNull Bitmap bitmap, @NonNull Bundle imageContextRequestExtras)", "public void provideContextImage(int taskId, @NonNull Bundle imageContextRequestExtras)", "public void suggestContentSelections(@NonNull SelectionsRequest request, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull SelectionsCallback callback)", "public void classifyContentSelections(@NonNull ClassificationsRequest request, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull ClassificationsCallback callback)", "public void notifyInteraction(@NonNull String requestId, @NonNull Bundle interaction)", "public boolean isEnabled()", "public void resetTemporaryService(@UserIdInt int userId)", "public void setTemporaryService(@UserIdInt int userId, @NonNull String serviceName, int duration)", "public void setDefaultServiceEnabled(@UserIdInt int userId, boolean enabled)" ],
  "variableNames" : [ "EXTRA_BITMAP", "TAG", "SYNC_CALLS_TIMEOUT_MS", "mService", "mUser" ]
}