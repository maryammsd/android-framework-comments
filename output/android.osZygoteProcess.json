{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/ZygoteProcess.java",
  "packageName" : "android.os",
  "className" : "ZygoteProcess",
  "comment" : "\n * Maintains communication state with the zygote processes. This class is responsible\n * for the sockets opened to the zygotes and for starting processes on behalf of the\n * {@link android.os.Process} class.\n *\n * {@hide}\n ",
  "variables" : [ {
    "name" : "ZYGOTE_CONNECT_TIMEOUT_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZYGOTE_CONNECT_RETRY_DELAY_MS",
    "type" : "int",
    "comment" : "\n     * Use a relatively short delay, because for app zygote, this is in the critical path of\n     * service launch.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAP_POOL_ENABLED_DEFAULT",
    "type" : "String",
    "comment" : "\n     * The default value for enabling the unspecialized app process (USAP) pool.  This value will\n     * not be used if the devices has a DeviceConfig profile pushed to it that contains a value for\n     * this key.\n     ",
    "links" : [ ]
  }, {
    "name" : "mZygoteSocketAddress",
    "type" : "LocalSocketAddress",
    "comment" : "\n     * The name of the socket used to communicate with the primary zygote.\n     ",
    "links" : [ ]
  }, {
    "name" : "mZygoteSecondarySocketAddress",
    "type" : "LocalSocketAddress",
    "comment" : "\n     * The name of the secondary (alternate ABI) zygote socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUsapPoolSocketAddress",
    "type" : "LocalSocketAddress",
    "comment" : "\n     * The name of the socket used to communicate with the primary USAP pool.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUsapPoolSecondarySocketAddress",
    "type" : "LocalSocketAddress",
    "comment" : "\n     * The name of the socket used to communicate with the secondary (alternate ABI) USAP pool.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "\n     * Lock object to protect access to the two ZygoteStates below. This lock must be\n     * acquired while communicating over the ZygoteState's socket, to prevent\n     * interleaved access.\n     ",
    "links" : [ ]
  }, {
    "name" : "mApiBlacklistExemptions",
    "type" : "List<String>",
    "comment" : "\n     * List of exemptions to the API blacklist. These are prefix matches on the runtime format\n     * symbol signature. Any matching symbol is treated by the runtime as being on the light grey\n     * list.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHiddenApiAccessLogSampleRate",
    "type" : "int",
    "comment" : "\n     * Proportion of hidden API accesses that should be logged to the event log; 0 - 0x10000.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHiddenApiAccessStatslogSampleRate",
    "type" : "int",
    "comment" : "\n     * Proportion of hidden API accesses that should be logged to statslog; 0 - 0x10000.\n     ",
    "links" : [ ]
  }, {
    "name" : "primaryZygoteState",
    "type" : "ZygoteState",
    "comment" : "\n     * The state of the connection to the primary zygote.\n     ",
    "links" : [ ]
  }, {
    "name" : "secondaryZygoteState",
    "type" : "ZygoteState",
    "comment" : "\n     * The state of the connection to the secondary zygote.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUsapPoolSupported",
    "type" : "boolean",
    "comment" : "\n     * If this Zygote supports the creation and maintenance of a USAP pool.\n     *\n     * Currently only the primary and secondary Zygotes support USAP pools. Any\n     * child Zygotes will be unable to create or use a USAP pool.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUsapPoolEnabled",
    "type" : "boolean",
    "comment" : "\n     * If the USAP pool should be created and used to start applications.\n     *\n     * Setting this value to false will disable the creation, maintenance, and use of the USAP\n     * pool.  When the USAP pool is disabled the application lifecycle will be identical to\n     * previous versions of Android.\n     ",
    "links" : [ ]
  }, {
    "name" : "ZYGOTE_RETRY_MILLIS",
    "type" : "int",
    "comment" : " retry interval for opening a zygote socket ",
    "links" : [ ]
  }, {
    "name" : "INVALID_USAP_FLAGS",
    "type" : "String[]",
    "comment" : "\n     * Flags that may not be passed to a USAP.  These may appear as prefixes to individual Zygote\n     * arguments.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsFirstPropCheck",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastPropCheckTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public LocalSocketAddress getPrimarySocketAddress()",
    "returnType" : "LocalSocketAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Process.ProcessStartResult start(@NonNull final String processClass, final String niceName, int uid, int gid, @Nullable int[] gids, int runtimeFlags, int mountExternal, int targetSdkVersion, @Nullable String seInfo, @NonNull String abi, @Nullable String instructionSet, @Nullable String appDataDir, @Nullable String invokeWith, @Nullable String packageName, int zygotePolicyFlags, boolean isTopApp, @Nullable long[] disabledCompatChanges, @Nullable Map<String, Pair<String, Long>> pkgDataInfoMap, @Nullable Map<String, Pair<String, Long>> whitelistedDataInfoMap, boolean bindMountAppsData, boolean bindMountAppStorageDirs, @Nullable String[] zygoteArgs)",
    "returnType" : "Process.ProcessStartResult",
    "comment" : "\n     * Start a new process.\n     *\n     * <p>If processes are enabled, a new process is created and the\n     * static main() function of a <var>processClass</var> is executed there.\n     * The process will continue running after this function returns.\n     *\n     * <p>If processes are not enabled, a new thread in the caller's\n     * process is created and main() of <var>processclass</var> called there.\n     *\n     * <p>The niceName parameter, if not an empty string, is a custom name to\n     * give to the process instead of using processClass.  This allows you to\n     * make easily identifyable processes even if you are using the same base\n     * <var>processClass</var> to start them.\n     *\n     * When invokeWith is not null, the process will be started as a fresh app\n     * and not a zygote fork. Note that this is only allowed for uid 0 or when\n     * runtimeFlags contains DEBUG_ENABLE_DEBUGGER.\n     *\n     * @param processClass The class to use as the process's main entry\n     *                     point.\n     * @param niceName A more readable name to use for the process.\n     * @param uid The user-id under which the process will run.\n     * @param gid The group-id under which the process will run.\n     * @param gids Additional group-ids associated with the process.\n     * @param runtimeFlags Additional flags.\n     * @param targetSdkVersion The target SDK version for the app.\n     * @param seInfo null-ok SELinux information for the new process.\n     * @param abi non-null the ABI this app should be started with.\n     * @param instructionSet null-ok the instruction set to use.\n     * @param appDataDir null-ok the data directory of the app.\n     * @param invokeWith null-ok the command to invoke with.\n     * @param packageName null-ok the name of the package this process belongs to.\n     * @param zygotePolicyFlags Flags used to determine how to launch the application.\n     * @param isTopApp Whether the process starts for high priority application.\n     * @param disabledCompatChanges null-ok list of disabled compat changes for the process being\n     *                             started.\n     * @param pkgDataInfoMap Map from related package names to private data directory\n     *                       volume UUID and inode number.\n     * @param whitelistedDataInfoMap Map from whitelisted package names to private data directory\n     *                       volume UUID and inode number.\n     * @param bindMountAppsData whether zygote needs to mount CE and DE data.\n     * @param bindMountAppStorageDirs whether zygote needs to mount Android/obb and Android/data.\n     *\n     * @param zygoteArgs Additional arguments to supply to the Zygote process.\n     * @return An object that describes the result of the attempt to start the process.\n     * @throws RuntimeException on fatal start failure\n     ",
    "links" : [ ]
  }, {
    "name" : "private static List<String> getAbiList(BufferedWriter writer, DataInputStream inputStream) throws IOException",
    "returnType" : "List<String>",
    "comment" : "\n     * Queries the zygote for the list of ABIS it supports.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Process.ProcessStartResult zygoteSendArgsAndGetResult(ZygoteState zygoteState, int zygotePolicyFlags, @NonNull ArrayList<String> args) throws ZygoteStartFailedEx",
    "returnType" : "Process.ProcessStartResult",
    "comment" : "\n     * Sends an argument list to the zygote process, which starts a new child\n     * and returns the child's pid. Please note: the present implementation\n     * replaces newlines in the argument list with spaces.\n     *\n     * @throws ZygoteStartFailedEx if process start failed for any reason\n     ",
    "links" : [ ]
  }, {
    "name" : "private Process.ProcessStartResult attemptZygoteSendArgsAndGetResult(ZygoteState zygoteState, String msgStr) throws ZygoteStartFailedEx",
    "returnType" : "Process.ProcessStartResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Process.ProcessStartResult attemptUsapSendArgsAndGetResult(ZygoteState zygoteState, String msgStr) throws ZygoteStartFailedEx, IOException",
    "returnType" : "Process.ProcessStartResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldAttemptUsapLaunch(int zygotePolicyFlags, ArrayList<String> args)",
    "returnType" : "boolean",
    "comment" : "\n     * Test various member properties and parameters to determine if a launch event should be\n     * handled using an Unspecialized App Process Pool or not.\n     *\n     * @param zygotePolicyFlags Policy flags indicating special behavioral observations about the\n     *                          Zygote command\n     * @param args Arguments that will be passed to the Zygote\n     * @return If the command should be sent to a USAP Pool member or an actual Zygote\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean policySpecifiesUsapPoolLaunch(int zygotePolicyFlags)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests a Zygote policy flag set for various properties that determine if it is eligible for\n     * being handled by an Unspecialized App Process Pool.\n     *\n     * @param zygotePolicyFlags Policy flags indicating special behavioral observations about the\n     *                          Zygote command\n     * @return If the policy allows for use of a USAP pool\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean commandSupportedByUsap(ArrayList<String> args)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests a command list to see if it is valid to send to a USAP.\n     *\n     * @param args  Zygote/USAP command arguments\n     * @return  True if the command can be passed to a USAP; false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private Process.ProcessStartResult startViaZygote(@NonNull final String processClass, @Nullable final String niceName, final int uid, final int gid, @Nullable final int[] gids, int runtimeFlags, int mountExternal, int targetSdkVersion, @Nullable String seInfo, @NonNull String abi, @Nullable String instructionSet, @Nullable String appDataDir, @Nullable String invokeWith, boolean startChildZygote, @Nullable String packageName, int zygotePolicyFlags, boolean isTopApp, @Nullable long[] disabledCompatChanges, @Nullable Map<String, Pair<String, Long>> pkgDataInfoMap, @Nullable Map<String, Pair<String, Long>> whitelistedDataInfoMap, boolean bindMountAppsData, boolean bindMountAppStorageDirs, @Nullable String[] extraArgs) throws ZygoteStartFailedEx",
    "returnType" : "Process.ProcessStartResult",
    "comment" : "\n     * Starts a new process via the zygote mechanism.\n     *\n     * @param processClass Class name whose static main() to run\n     * @param niceName 'nice' process name to appear in ps\n     * @param uid a POSIX uid that the new process should setuid() to\n     * @param gid a POSIX gid that the new process shuold setgid() to\n     * @param gids null-ok; a list of supplementary group IDs that the\n     * new process should setgroup() to.\n     * @param runtimeFlags Additional flags for the runtime.\n     * @param targetSdkVersion The target SDK version for the app.\n     * @param seInfo null-ok SELinux information for the new process.\n     * @param abi the ABI the process should use.\n     * @param instructionSet null-ok the instruction set to use.\n     * @param appDataDir null-ok the data directory of the app.\n     * @param startChildZygote Start a sub-zygote. This creates a new zygote process\n     * that has its state cloned from this zygote process.\n     * @param packageName null-ok the name of the package this process belongs to.\n     * @param zygotePolicyFlags Flags used to determine how to launch the application.\n     * @param isTopApp Whether the process starts for high priority application.\n     * @param disabledCompatChanges a list of disabled compat changes for the process being started.\n     * @param pkgDataInfoMap Map from related package names to private data directory volume UUID\n     *                       and inode number.\n     * @param whitelistedDataInfoMap Map from whitelisted package names to private data directory\n     *                       volume UUID and inode number.\n     * @param bindMountAppsData whether zygote needs to mount CE and DE data.\n     * @param bindMountAppStorageDirs whether zygote needs to mount Android/obb and Android/data.\n     * @param extraArgs Additional arguments to supply to the zygote process.\n     * @return An object that describes the result of the attempt to start the process.\n     * @throws ZygoteStartFailedEx if process start failed for any reason\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean fetchUsapPoolEnabledProp()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean fetchUsapPoolEnabledPropWithMinInterval()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the connections to the zygote, if they exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void establishZygoteConnectionForAbi(String abi)",
    "returnType" : "void",
    "comment" : "\n     * Tries to establish a connection to the zygote that handles a given {@code abi}. Might block\n     * and retry if the zygote is unresponsive. This method is a no-op if a connection is\n     * already open.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getZygotePid(String abi)",
    "returnType" : "int",
    "comment" : "\n     * Attempt to retrieve the PID of the zygote serving the given abi.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bootCompleted()",
    "returnType" : "void",
    "comment" : "\n     * Notify the Zygote processes that boot completed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void bootCompleted(String abi)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setApiBlacklistExemptions(List<String> exemptions)",
    "returnType" : "boolean",
    "comment" : "\n     * Push hidden API blacklisting exemptions into the zygote process(es).\n     *\n     * <p>The list of exemptions will take affect for all new processes forked from the zygote after\n     * this call.\n     *\n     * @param exemptions List of hidden API exemption prefixes. Any matching members are treated as\n     *        whitelisted/public APIs (i.e. allowed, no logging of usage).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHiddenApiAccessLogSampleRate(int rate)",
    "returnType" : "void",
    "comment" : "\n     * Set the precentage of detected hidden API accesses that are logged to the event log.\n     *\n     * <p>This rate will take affect for all new processes forked from the zygote after this call.\n     *\n     * @param rate An integer between 0 and 0x10000 inclusive. 0 means no event logging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHiddenApiAccessStatslogSampleRate(int rate)",
    "returnType" : "void",
    "comment" : "\n     * Set the precentage of detected hidden API accesses that are logged to the new event log.\n     *\n     * <p>This rate will take affect for all new processes forked from the zygote after this call.\n     *\n     * @param rate An integer between 0 and 0x10000 inclusive. 0 means no event logging.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean maybeSetApiBlacklistExemptions(ZygoteState state, boolean sendIfEmpty)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void maybeSetHiddenApiAccessLogSampleRate(ZygoteState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void maybeSetHiddenApiAccessStatslogSampleRate(ZygoteState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void attemptConnectionToPrimaryZygote() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Creates a ZygoteState for the primary zygote if it doesn't exist or has been disconnected.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void attemptConnectionToSecondaryZygote() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Creates a ZygoteState for the secondary zygote if it doesn't exist or has been disconnected.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ZygoteState openZygoteSocketIfNeeded(String abi) throws ZygoteStartFailedEx",
    "returnType" : "ZygoteState",
    "comment" : "\n     * Tries to open a session socket to a Zygote process with a compatible ABI if one is not\n     * already open. If a compatible session socket is already open that session socket is returned.\n     * This function may block and may have to try connecting to multiple Zygotes to find the\n     * appropriate one.  Requires that mLock be held.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean preloadApp(ApplicationInfo appInfo, String abi) throws ZygoteStartFailedEx, IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Instructs the zygote to pre-load the application code for the given Application.\n     * Only the app zygote supports this function.\n     * TODO preloadPackageForAbi() can probably be removed and the callers an use this instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean preloadPackageForAbi(String packagePath, String libsPath, String libFileName, String cacheKey, String abi) throws ZygoteStartFailedEx, IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Instructs the zygote to pre-load the classes and native libraries at the given paths\n     * for the specified abi. Not all zygotes support this function.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean preloadDefault(String abi) throws ZygoteStartFailedEx, IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Instructs the zygote to preload the default set of classes and resources. Returns\n     * {@code true} if a preload was performed as a result of this call, and {@code false}\n     * otherwise. The latter usually means that the zygote eagerly preloaded at startup\n     * or due to a previous call to {@code preloadDefault}. Note that this call is synchronous.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void waitForConnectionToZygote(String zygoteSocketName)",
    "returnType" : "void",
    "comment" : "\n     * Try connecting to the Zygote over and over again until we hit a time-out.\n     * @param zygoteSocketName The name of the socket to connect to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void waitForConnectionToZygote(LocalSocketAddress zygoteSocketAddress)",
    "returnType" : "void",
    "comment" : "\n     * Try connecting to the Zygote over and over again until we hit a time-out.\n     * @param zygoteSocketAddress The name of the socket to connect to.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void informZygotesOfUsapPoolStatus()",
    "returnType" : "void",
    "comment" : "\n     * Sends messages to the zygotes telling them to change the status of their USAP pools.  If\n     * this notification fails the ZygoteProcess will fall back to the previous behavior.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ChildZygoteProcess startChildZygote(final String processClass, final String niceName, int uid, int gid, int[] gids, int runtimeFlags, String seInfo, String abi, String acceptedAbiList, String instructionSet, int uidRangeStart, int uidRangeEnd)",
    "returnType" : "ChildZygoteProcess",
    "comment" : "\n     * Starts a new zygote process as a child of this zygote. This is used to create\n     * secondary zygotes that inherit data from the zygote that this object\n     * communicates with. This returns a new ZygoteProcess representing a connection\n     * to the newly created zygote. Throws an exception if the zygote cannot be started.\n     *\n     * @param processClass The class to use as the child zygote's main entry\n     *                     point.\n     * @param niceName A more readable name to use for the process.\n     * @param uid The user-id under which the child zygote will run.\n     * @param gid The group-id under which the child zygote will run.\n     * @param gids Additional group-ids associated with the child zygote process.\n     * @param runtimeFlags Additional flags.\n     * @param seInfo null-ok SELinux information for the child zygote process.\n     * @param abi non-null the ABI of the child zygote\n     * @param acceptedAbiList ABIs this child zygote will accept connections for; this\n     *                        may be different from <code>abi</code> in case the children\n     *                        spawned from this Zygote only communicate using ABI-safe methods.\n     * @param instructionSet null-ok the instruction set to use.\n     * @param uidRangeStart The first UID in the range the child zygote may setuid()/setgid() to\n     * @param uidRangeEnd The last UID in the range the child zygote may setuid()/setgid() to\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "ZYGOTE_CONNECT_TIMEOUT_MS", "ZYGOTE_CONNECT_RETRY_DELAY_MS", "LOG_TAG", "USAP_POOL_ENABLED_DEFAULT", "mZygoteSocketAddress", "mZygoteSecondarySocketAddress", "mUsapPoolSocketAddress", "mUsapPoolSecondarySocketAddress", "mLock", "mApiBlacklistExemptions", "mHiddenApiAccessLogSampleRate", "mHiddenApiAccessStatslogSampleRate", "primaryZygoteState", "secondaryZygoteState", "mUsapPoolSupported", "mUsapPoolEnabled", "ZYGOTE_RETRY_MILLIS", "INVALID_USAP_FLAGS", "mIsFirstPropCheck", "mLastPropCheckTimestamp" ],
  "methodNames" : [ "public LocalSocketAddress getPrimarySocketAddress()", "public final Process.ProcessStartResult start(@NonNull final String processClass, final String niceName, int uid, int gid, @Nullable int[] gids, int runtimeFlags, int mountExternal, int targetSdkVersion, @Nullable String seInfo, @NonNull String abi, @Nullable String instructionSet, @Nullable String appDataDir, @Nullable String invokeWith, @Nullable String packageName, int zygotePolicyFlags, boolean isTopApp, @Nullable long[] disabledCompatChanges, @Nullable Map<String, Pair<String, Long>> pkgDataInfoMap, @Nullable Map<String, Pair<String, Long>> whitelistedDataInfoMap, boolean bindMountAppsData, boolean bindMountAppStorageDirs, @Nullable String[] zygoteArgs)", "private static List<String> getAbiList(BufferedWriter writer, DataInputStream inputStream) throws IOException", "private Process.ProcessStartResult zygoteSendArgsAndGetResult(ZygoteState zygoteState, int zygotePolicyFlags, @NonNull ArrayList<String> args) throws ZygoteStartFailedEx", "private Process.ProcessStartResult attemptZygoteSendArgsAndGetResult(ZygoteState zygoteState, String msgStr) throws ZygoteStartFailedEx", "private Process.ProcessStartResult attemptUsapSendArgsAndGetResult(ZygoteState zygoteState, String msgStr) throws ZygoteStartFailedEx, IOException", "private boolean shouldAttemptUsapLaunch(int zygotePolicyFlags, ArrayList<String> args)", "private static boolean policySpecifiesUsapPoolLaunch(int zygotePolicyFlags)", "private static boolean commandSupportedByUsap(ArrayList<String> args)", "private Process.ProcessStartResult startViaZygote(@NonNull final String processClass, @Nullable final String niceName, final int uid, final int gid, @Nullable final int[] gids, int runtimeFlags, int mountExternal, int targetSdkVersion, @Nullable String seInfo, @NonNull String abi, @Nullable String instructionSet, @Nullable String appDataDir, @Nullable String invokeWith, boolean startChildZygote, @Nullable String packageName, int zygotePolicyFlags, boolean isTopApp, @Nullable long[] disabledCompatChanges, @Nullable Map<String, Pair<String, Long>> pkgDataInfoMap, @Nullable Map<String, Pair<String, Long>> whitelistedDataInfoMap, boolean bindMountAppsData, boolean bindMountAppStorageDirs, @Nullable String[] extraArgs) throws ZygoteStartFailedEx", "private boolean fetchUsapPoolEnabledProp()", "private boolean fetchUsapPoolEnabledPropWithMinInterval()", "public void close()", "public void establishZygoteConnectionForAbi(String abi)", "public int getZygotePid(String abi)", "public void bootCompleted()", "private void bootCompleted(String abi)", "public boolean setApiBlacklistExemptions(List<String> exemptions)", "public void setHiddenApiAccessLogSampleRate(int rate)", "public void setHiddenApiAccessStatslogSampleRate(int rate)", "private boolean maybeSetApiBlacklistExemptions(ZygoteState state, boolean sendIfEmpty)", "private void maybeSetHiddenApiAccessLogSampleRate(ZygoteState state)", "private void maybeSetHiddenApiAccessStatslogSampleRate(ZygoteState state)", "private void attemptConnectionToPrimaryZygote() throws IOException", "private void attemptConnectionToSecondaryZygote() throws IOException", "private ZygoteState openZygoteSocketIfNeeded(String abi) throws ZygoteStartFailedEx", "public boolean preloadApp(ApplicationInfo appInfo, String abi) throws ZygoteStartFailedEx, IOException", "public boolean preloadPackageForAbi(String packagePath, String libsPath, String libFileName, String cacheKey, String abi) throws ZygoteStartFailedEx, IOException", "public boolean preloadDefault(String abi) throws ZygoteStartFailedEx, IOException", "public static void waitForConnectionToZygote(String zygoteSocketName)", "public static void waitForConnectionToZygote(LocalSocketAddress zygoteSocketAddress)", "private void informZygotesOfUsapPoolStatus()", "public ChildZygoteProcess startChildZygote(final String processClass, final String niceName, int uid, int gid, int[] gids, int runtimeFlags, String seInfo, String abi, String acceptedAbiList, String instructionSet, int uidRangeStart, int uidRangeEnd)" ]
}