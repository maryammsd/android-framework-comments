{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/JceSecurity.java",
  "packageName" : "javax.crypto",
  "className" : "JceSecurity",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "RANDOM",
    "type" : "SecureRandom",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultPolicy",
    "type" : "CryptoPermissions",
    "comment" : " in the static initializer.",
    "links" : [ ]
  }, {
    "name" : "exemptPolicy",
    "type" : "CryptoPermissions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "verificationResults",
    "type" : "Map<Provider, Object>",
    "comment" : " value is failure cause Exception in error case",
    "links" : [ ]
  }, {
    "name" : "verifyingProviders",
    "type" : "Map<Provider, Object>",
    "comment" : " Map<Provider,?> of the providers currently being verified",
    "links" : [ ]
  }, {
    "name" : "PROVIDER_VERIFIED",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NULL_URL",
    "type" : "URL",
    "comment" : " dummy object to represent null",
    "links" : [ ]
  }, {
    "name" : "codeBaseCacheRef",
    "type" : "Map<Class<?>, URL>",
    "comment" : " reference to a Map we use as a cache for codebases",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static Instance getInstance(String type, Class<?> clazz, String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "Instance",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Instance getInstance(String type, Class<?> clazz, String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "Instance",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Instance getInstance(String type, Class<?> clazz, String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "Instance",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static CryptoPermissions verifyExemptJar(URL codeBase) throws Exception",
    "returnType" : "CryptoPermissions",
    "comment" : "\n     * Verify if the JAR at URL codeBase is a signed exempt application\n     * JAR file and returns the permissions bundled with the JAR.\n     *\n     * @throws Exception on error\n     ",
    "links" : [ ]
  }, {
    "name" : " static void verifyProviderJar(URL codeBase) throws Exception",
    "returnType" : "void",
    "comment" : "\n     * Verify if the JAR at URL codeBase is a signed provider JAR file.\n     *\n     * @throws Exception on error\n     ",
    "links" : [ ]
  }, {
    "name" : " static synchronized Exception getVerificationResult(Provider p)",
    "returnType" : "Exception",
    "comment" : "\n     * Verify that the provider JAR files are signed properly, which\n     * means the signer's certificate can be traced back to a\n     * JCE trusted CA.\n     * Return null if ok, failure Exception if verification failed.\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean canUseProvider(Provider p)",
    "returnType" : "boolean",
    "comment" : " return whether this provider is properly signed and can be used by JCE",
    "links" : [ ]
  }, {
    "name" : " static URL getCodeBase(final Class<?> clazz)",
    "returnType" : "URL",
    "comment" : "\n     * Returns the CodeBase for the given class.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void loadPolicies(File jarPathName, CryptoPermissions defaultPolicy, CryptoPermissions exemptPolicy) throws Exception",
    "returnType" : "void",
    "comment" : "\n     * Load the policies from the specified file. Also checks that the\n     * policies are correctly signed.\n     ",
    "links" : [ ]
  }, {
    "name" : " static CryptoPermissions getDefaultPolicy()",
    "returnType" : "CryptoPermissions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static CryptoPermissions getExemptPolicy()",
    "returnType" : "CryptoPermissions",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static Instance getInstance(String type, Class<?> clazz, String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", " static Instance getInstance(String type, Class<?> clazz, String algorithm, Provider provider) throws NoSuchAlgorithmException", " static Instance getInstance(String type, Class<?> clazz, String algorithm) throws NoSuchAlgorithmException", " static CryptoPermissions verifyExemptJar(URL codeBase) throws Exception", " static void verifyProviderJar(URL codeBase) throws Exception", " static synchronized Exception getVerificationResult(Provider p)", " static boolean canUseProvider(Provider p)", " static URL getCodeBase(final Class<?> clazz)", "private static void loadPolicies(File jarPathName, CryptoPermissions defaultPolicy, CryptoPermissions exemptPolicy) throws Exception", " static CryptoPermissions getDefaultPolicy()", " static CryptoPermissions getExemptPolicy()" ],
  "variableNames" : [ "RANDOM", "defaultPolicy", "exemptPolicy", "verificationResults", "verifyingProviders", "PROVIDER_VERIFIED", "NULL_URL", "codeBaseCacheRef" ]
}