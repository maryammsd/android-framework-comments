{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/BiometricFaceConstants.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "BiometricFaceConstants",
  "comment" : "\n * Interface containing all of the face-specific constants.\n *\n * NOTE: The error messages must be consistent between BiometricConstants, Biometric*Constants,\n *       and the frameworks/support/biometric/.../BiometricConstants files.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FEATURE_REQUIRE_ATTENTION",
    "type" : "int",
    "comment" : "\n     * Require the user to look at the device during enrollment and\n     * authentication. Note this is to accommodate people who have limited\n     * vision.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_REQUIRE_REQUIRE_DIVERSITY",
    "type" : "int",
    "comment" : "\n     * Require a diverse set of poses during enrollment. Note this is to\n     * accommodate people with limited mobility.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_HW_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The hardware is unavailable. Try again later.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_UNABLE_TO_PROCESS",
    "type" : "int",
    "comment" : "\n     * Error state returned when the sensor was unable to process the current image.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Error state returned when the current request has been running too long. This is intended to\n     * prevent programs from waiting for the face authentication sensor indefinitely. The timeout is\n     * platform and sensor-specific, but is generally on the order of 30 seconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_NO_SPACE",
    "type" : "int",
    "comment" : "\n     * Error state returned for operations like enrollment; the operation cannot be completed\n     * because there's not enough storage remaining to complete the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_CANCELED",
    "type" : "int",
    "comment" : "\n     * The operation was canceled because the face authentication sensor is unavailable. For\n     * example, this may happen when the user is switched, the device is locked or another pending\n     * operation prevents or disables it.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_UNABLE_TO_REMOVE",
    "type" : "int",
    "comment" : "\n     * The {@link FaceManager#remove} call failed. Typically this will happen when the\n     * provided face id was incorrect.\n     ",
    "links" : [ "android.hardware.face.FaceManager#remove" ]
  }, {
    "name" : "FACE_ERROR_LOCKOUT",
    "type" : "int",
    "comment" : "\n     * The operation was canceled because the API is locked out due to too many attempts.\n     * This occurs after 5 failed attempts, and lasts for 30 seconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_VENDOR",
    "type" : "int",
    "comment" : "\n     * Hardware vendors may extend this list if there are conditions that do not fall under one of\n     * the above categories. Vendors are responsible for providing error strings for these errors.\n     * These messages are typically reserved for internal operations such as enrollment, but may be\n     * used to express vendor errors not covered by the ones in HAL h file. Applications are\n     * expected to show the error message string if they happen, but are advised not to rely on the\n     * message id since they will be device and vendor-specific\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_LOCKOUT_PERMANENT",
    "type" : "int",
    "comment" : "\n     * The operation was canceled because FACE_ERROR_LOCKOUT occurred too many times.\n     * Face authentication is disabled until the user unlocks with strong authentication\n     * (PIN/Pattern/Password)\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_USER_CANCELED",
    "type" : "int",
    "comment" : "\n     * The user canceled the operation. Upon receiving this, applications should use alternate\n     * authentication (e.g. a password). The application should also provide the means to return\n     * to face authentication, such as a \"use face authentication\" button.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_NOT_ENROLLED",
    "type" : "int",
    "comment" : "\n     * The user does not have a face enrolled.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_HW_NOT_PRESENT",
    "type" : "int",
    "comment" : "\n     * The device does not have a face sensor. This message will propagate if the calling app\n     * ignores the result from PackageManager.hasFeature(FEATURE_FACE) and calls\n     * this API anyway. Apps should always check for the feature before calling this API.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_NEGATIVE_BUTTON",
    "type" : "int",
    "comment" : "\n     * The user pressed the negative button. This is a placeholder that is currently only used\n     * by the support library.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL",
    "type" : "int",
    "comment" : "\n     * The device does not have pin, pattern, or password set up. See\n     * {@link BiometricPrompt.Builder#setDeviceCredentialAllowed(boolean)} and\n     * {@link KeyguardManager#isDeviceSecure()}\n     ",
    "links" : [ "BiometricPrompt.Builder#setDeviceCredentialAllowed(boolean)", "android.app.KeyguardManager#isDeviceSecure()" ]
  }, {
    "name" : "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED",
    "type" : "int",
    "comment" : "\n     * A security vulnerability has been discovered and the sensor is unavailable until a\n     * security update has addressed this issue. This error can be received if for example,\n     * authentication was requested with {@link Authenticators#BIOMETRIC_STRONG}, but the\n     * sensor's strength can currently only meet {@link Authenticators#BIOMETRIC_WEAK}.\n     ",
    "links" : [ "android.hardware.biometrics.BiometricManager.Authenticators#BIOMETRIC_WEAK", "android.hardware.biometrics.BiometricManager.Authenticators#BIOMETRIC_STRONG" ]
  }, {
    "name" : "BIOMETRIC_ERROR_RE_ENROLL",
    "type" : "int",
    "comment" : "\n     * Authentication cannot proceed because re-enrollment is required.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown error received from the HAL.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_POWER_PRESSED",
    "type" : "int",
    "comment" : "\n     * A power press stopped this biometric operation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ERROR_VENDOR_BASE",
    "type" : "int",
    "comment" : "\n     * Vendor codes received from the HAL start at 0. Codes that the framework exposes to keyguard\n     * append this value for some reason. We should probably remove this and just send the actual\n     * vendor code.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_GOOD",
    "type" : "int",
    "comment" : "\n     * The image acquired was good.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_INSUFFICIENT",
    "type" : "int",
    "comment" : "\n     * The face image was not good enough to process due to a detected condition.\n     * (See {@link #FACE_ACQUIRED_TOO_BRIGHT or @link #FACE_ACQUIRED_TOO_DARK}).\n     ",
    "links" : [ "#FACE_ACQUIRED_TOO_DARK", "#FACE_ACQUIRED_TOO_BRIGHT" ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_BRIGHT",
    "type" : "int",
    "comment" : "\n     * The face image was too bright due to too much ambient light.\n     * For example, it's reasonable to return this after multiple\n     * {@link #FACE_ACQUIRED_INSUFFICIENT}\n     * The user is expected to take action to retry in better lighting conditions\n     * when this is returned.\n     ",
    "links" : [ "#FACE_ACQUIRED_INSUFFICIENT" ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_DARK",
    "type" : "int",
    "comment" : "\n     * The face image was too dark due to illumination light obscured.\n     * For example, it's reasonable to return this after multiple\n     * {@link #FACE_ACQUIRED_INSUFFICIENT}\n     * The user is expected to take action to retry in better lighting conditions\n     * when this is returned.\n     ",
    "links" : [ "#FACE_ACQUIRED_INSUFFICIENT" ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_CLOSE",
    "type" : "int",
    "comment" : "\n     * The detected face is too close to the sensor, and the image can't be processed.\n     * The user should be informed to move farther from the sensor when this is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_FAR",
    "type" : "int",
    "comment" : "\n     * The detected face is too small, as the user might be too far from the sensor.\n     * The user should be informed to move closer to the sensor when this is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_HIGH",
    "type" : "int",
    "comment" : "\n     * Only the upper part of the face was detected. The sensor field of view is too high.\n     * The user should be informed to move up with respect to the sensor when this is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_LOW",
    "type" : "int",
    "comment" : "\n     * Only the lower part of the face was detected. The sensor field of view is too low.\n     * The user should be informed to move down with respect to the sensor when this is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_RIGHT",
    "type" : "int",
    "comment" : "\n     * Only the right part of the face was detected. The sensor field of view is too far right.\n     * The user should be informed to move to the right with respect to the sensor\n     * when this is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_LEFT",
    "type" : "int",
    "comment" : "\n     * Only the left part of the face was detected. The sensor field of view is too far left.\n     * The user should be informed to move to the left with respect to the sensor\n     * when this is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_POOR_GAZE",
    "type" : "int",
    "comment" : "\n     * The user's eyes have strayed away from the sensor. If this message is sent, the user should\n     * be informed to look at the device. If the user can't be found in the frame, one of the other\n     * acquisition messages should be sent, e.g. FACE_ACQUIRED_NOT_DETECTED.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_NOT_DETECTED",
    "type" : "int",
    "comment" : "\n     * No face was detected in front of the sensor.\n     * The user should be informed to point the sensor to a face when this is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_MUCH_MOTION",
    "type" : "int",
    "comment" : "\n     * Too much motion was detected.\n     * The user should be informed to keep their face steady relative to the\n     * sensor.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_RECALIBRATE",
    "type" : "int",
    "comment" : "\n     * The sensor needs to be re-calibrated. This is an unexpected condition, and should only be\n     * sent if a serious, uncorrectable, and unrecoverable calibration issue is detected which\n     * requires user intervention, e.g. re-enrolling. The expected response to this message is to\n     * direct the user to re-enroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_DIFFERENT",
    "type" : "int",
    "comment" : "\n     * The face is too different from a previous acquisition. This condition\n     * only applies to enrollment. This can happen if the user passes the\n     * device to someone else in the middle of enrollment.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_TOO_SIMILAR",
    "type" : "int",
    "comment" : "\n     * The face is too similar to a previous acquisition. This condition only\n     * applies to enrollment. The user should change their pose.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_PAN_TOO_EXTREME",
    "type" : "int",
    "comment" : "\n     * The magnitude of the pan angle of the user’s face with respect to the sensor’s\n     * capture plane is too high.\n     *\n     * The pan angle is defined as the angle swept out by the user’s face turning\n     * their neck left and right. The pan angle would be zero if the user faced the\n     * camera directly.\n     *\n     * The user should be informed to look more directly at the camera.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_TILT_TOO_EXTREME",
    "type" : "int",
    "comment" : "\n     * The magnitude of the tilt angle of the user’s face with respect to the sensor’s\n     * capture plane is too high.\n     *\n     * The tilt angle is defined as the angle swept out by the user’s face looking up\n     * and down. The tilt angle would be zero if the user faced the camera directly.\n     *\n     * The user should be informed to look more directly at the camera.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_ROLL_TOO_EXTREME",
    "type" : "int",
    "comment" : "\n     * The magnitude of the roll angle of the user’s face with respect to the sensor’s\n     * capture plane is too high.\n     *\n     * The roll angle is defined as the angle swept out by the user’s face tilting their head\n     * towards their shoulders to the left and right. The roll angle would be zero if the user's\n     * head is vertically aligned with the camera.\n     *\n     * The user should be informed to look more directly at the camera.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_FACE_OBSCURED",
    "type" : "int",
    "comment" : "\n     * The user’s face has been obscured by some object.\n     *\n     * The user should be informed to remove any objects from the line of sight from\n     * the sensor to the user’s face.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_START",
    "type" : "int",
    "comment" : "\n     * This message represents the earliest message sent at the beginning of the authentication\n     * pipeline. It is expected to be used to measure latency. For example, in a camera-based\n     * authentication system it's expected to be sent prior to camera initialization. Note this\n     * should be sent whenever authentication is restarted (see IBiometricsFace#userActivity).\n     * The framework will measure latency based on the time between the last START message and the\n     * onAuthenticated callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_SENSOR_DIRTY",
    "type" : "int",
    "comment" : "\n     * The sensor is dirty. The user should be informed to clean the sensor.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_VENDOR",
    "type" : "int",
    "comment" : "\n     * Hardware vendors may extend this list if there are conditions that do not fall under one of\n     * the above categories. Vendors are responsible for providing error strings for these errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown acquired code received from the HAL.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_FIRST_FRAME_RECEIVED",
    "type" : "int",
    "comment" : "\n     * The first frame from the camera has been received.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_DARK_GLASSES_DETECTED",
    "type" : "int",
    "comment" : "\n     * Dark glasses detected. This can be useful for providing relevant feedback to the user and\n     * enabling an alternative authentication logic if the implementation supports it.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_MOUTH_COVERING_DETECTED",
    "type" : "int",
    "comment" : "\n     * A face mask or face covering detected. This can be useful for providing relevant feedback to\n     * the user and enabling an alternative authentication logic if the implementation supports it.\n     ",
    "links" : [ ]
  }, {
    "name" : "FACE_ACQUIRED_VENDOR_BASE",
    "type" : "int",
    "comment" : "\n     * Vendor codes received from the HAL start at 0. Codes that the framework exposes to keyguard\n     * append this value for some reason. We should probably remove this and just send the actual\n     * vendor code.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int reasonToMetric(@EnrollReason int reason)",
    "returnType" : "int",
    "comment" : "\n     * Converts FaceEnrollOptions.reason into BiometricsProtoEnums.enrollReason\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int reasonToMetric(@EnrollReason int reason)" ],
  "variableNames" : [ "FEATURE_REQUIRE_ATTENTION", "FEATURE_REQUIRE_REQUIRE_DIVERSITY", "FACE_ERROR_HW_UNAVAILABLE", "FACE_ERROR_UNABLE_TO_PROCESS", "FACE_ERROR_TIMEOUT", "FACE_ERROR_NO_SPACE", "FACE_ERROR_CANCELED", "FACE_ERROR_UNABLE_TO_REMOVE", "FACE_ERROR_LOCKOUT", "FACE_ERROR_VENDOR", "FACE_ERROR_LOCKOUT_PERMANENT", "FACE_ERROR_USER_CANCELED", "FACE_ERROR_NOT_ENROLLED", "FACE_ERROR_HW_NOT_PRESENT", "FACE_ERROR_NEGATIVE_BUTTON", "BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL", "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED", "BIOMETRIC_ERROR_RE_ENROLL", "FACE_ERROR_UNKNOWN", "BIOMETRIC_ERROR_POWER_PRESSED", "FACE_ERROR_VENDOR_BASE", "FACE_ACQUIRED_GOOD", "FACE_ACQUIRED_INSUFFICIENT", "FACE_ACQUIRED_TOO_BRIGHT", "FACE_ACQUIRED_TOO_DARK", "FACE_ACQUIRED_TOO_CLOSE", "FACE_ACQUIRED_TOO_FAR", "FACE_ACQUIRED_TOO_HIGH", "FACE_ACQUIRED_TOO_LOW", "FACE_ACQUIRED_TOO_RIGHT", "FACE_ACQUIRED_TOO_LEFT", "FACE_ACQUIRED_POOR_GAZE", "FACE_ACQUIRED_NOT_DETECTED", "FACE_ACQUIRED_TOO_MUCH_MOTION", "FACE_ACQUIRED_RECALIBRATE", "FACE_ACQUIRED_TOO_DIFFERENT", "FACE_ACQUIRED_TOO_SIMILAR", "FACE_ACQUIRED_PAN_TOO_EXTREME", "FACE_ACQUIRED_TILT_TOO_EXTREME", "FACE_ACQUIRED_ROLL_TOO_EXTREME", "FACE_ACQUIRED_FACE_OBSCURED", "FACE_ACQUIRED_START", "FACE_ACQUIRED_SENSOR_DIRTY", "FACE_ACQUIRED_VENDOR", "FACE_ACQUIRED_UNKNOWN", "FACE_ACQUIRED_FIRST_FRAME_RECEIVED", "FACE_ACQUIRED_DARK_GLASSES_DETECTED", "FACE_ACQUIRED_MOUTH_COVERING_DETECTED", "FACE_ACQUIRED_VENDOR_BASE" ]
}