{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/ColorStateList.java",
  "packageName" : "android.content.res",
  "className" : "ColorStateList",
  "comment" : "\n *\n * Lets you map {@link android.view.View} state sets to colors.\n * <p>\n * {@link android.content.res.ColorStateList}s are created from XML resource files defined in the\n * \"color\" subdirectory directory of an application's resource directory. The XML file contains\n * a single \"selector\" element with a number of \"item\" elements inside. For example:\n * <pre>\n * &lt;selector xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;\n *   &lt;item android:state_focused=\"true\"\n *           android:color=\"@color/sample_focused\" /&gt;\n *   &lt;item android:state_pressed=\"true\"\n *           android:state_enabled=\"false\"\n *           android:color=\"@color/sample_disabled_pressed\" /&gt;\n *   &lt;item android:state_enabled=\"false\"\n *           android:color=\"@color/sample_disabled_not_pressed\" /&gt;\n *   &lt;item android:color=\"@color/sample_default\" /&gt;\n * &lt;/selector&gt;\n * </pre>\n *\n * This defines a set of state spec / color pairs where each state spec specifies a set of\n * states that a view must either be in or not be in and the color specifies the color associated\n * with that spec.\n *\n * <a name=\"StateSpec\"></a>\n * <h3>State specs</h3>\n * <p>\n * Each item defines a set of state spec and color pairs, where the state spec is a series of\n * attributes set to either {@code true} or {@code false} to represent inclusion or exclusion. If\n * an attribute is not specified for an item, it may be any value.\n * <p>\n * For example, the following item will be matched whenever the focused state is set; any other\n * states may be set or unset:\n * <pre>\n * &lt;item android:state_focused=\"true\"\n *         android:color=\"@color/sample_focused\" /&gt;\n * </pre>\n * <p>\n * Typically, a color state list will reference framework-defined state attributes such as\n * {@link android.R.attr#state_focused android:state_focused} or\n * {@link android.R.attr#state_enabled android:state_enabled}; however, app-defined attributes may\n * also be used.\n * <p>\n * <strong>Note:</strong> The list of state specs will be matched against in the order that they\n * appear in the XML file. For this reason, more-specific items should be placed earlier in the\n * file. An item with no state spec is considered to match any set of states and is generally\n * useful as a final item to be used as a default.\n * <p>\n * If an item with no state spec is placed before other items, those items\n * will be ignored.\n *\n * <a name=\"ItemAttributes\"></a>\n * <h3>Item attributes</h3>\n * <p>\n * Each item must define an {@link android.R.attr#color android:color} attribute, which may be\n * an HTML-style hex color, a reference to a color resource, or -- in API 23 and above -- a theme\n * attribute that resolves to a color.\n * <p>\n * Starting with API 23, items may optionally define an {@link android.R.attr#alpha android:alpha}\n * attribute to modify the base color's opacity. This attribute takes a either floating-point value\n * between 0 and 1 or a theme attribute that resolves as such. The item's overall color is\n * calculated by multiplying by the base color's alpha channel by the {@code alpha} value. For\n * example, the following item represents the theme's accent color at 50% opacity:\n * <pre>\n * &lt;item android:state_enabled=\"false\"\n *         android:color=\"?android:attr/colorAccent\"\n *         android:alpha=\"0.5\" /&gt;\n * </pre>\n * <p>\n * Starting with API 31, items may optionally define an {@link android.R.attr#lStar android:lStar}\n * attribute to modify the base color's perceptual luminance. This attribute takes either a\n * floating-point value between 0 and 100 or a theme attribute that resolves as such. The item's\n * overall color is calculated by converting the base color to an accessibility friendly color space\n * and setting its L* to the value specified on the {@code lStar} attribute. For\n * example, the following item represents the theme's accent color at 50% perceptual luminance:\n * <pre>\n * &lt;item android:state_enabled=\"false\"\n *         android:color=\"?android:attr/colorAccent\"\n *         android:lStar=\"50\" /&gt;\n * </pre>\n *\n * <a name=\"DeveloperGuide\"></a>\n * <h3>Developer guide</h3>\n * <p>\n * For more information, see the guide to\n * <a href=\"{@docRoot}guide/topics/resources/color-list-resource.html\">Color State\n * List Resource</a>.\n *\n * @attr ref android.R.styleable#ColorStateListItem_alpha\n * @attr ref android.R.styleable#ColorStateListItem_color\n * @attr ref android.R.styleable#ColorStateListItem_lStar\n ",
  "links" : [ "android.content.res.ColorStateList", "android.R.attr#color", "android.R.attr#state_enabled", "android.R.attr#state_focused", "android.view.View", "android.R.attr#alpha", "android.R.attr#lStar" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_COLOR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCache",
    "type" : "SparseArray<WeakReference<ColorStateList>>",
    "comment" : " Thread-safe cache of single-color ColorStateLists. ",
    "links" : [ ]
  }, {
    "name" : "mFactory",
    "type" : "ColorStateListFactory",
    "comment" : " Lazily-created factory for this color state list. ",
    "links" : [ ]
  }, {
    "name" : "mThemeAttrs",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingConfigurations",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateSpecs",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColors",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsOpaque",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ColorStateList>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ColorStateList valueOf(@ColorInt int color)",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @return A ColorStateList containing a single color.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ColorStateList createFromXml(Resources r, XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Creates a ColorStateList from an XML document.\n     *\n     * @param r Resources against which the ColorStateList should be inflated.\n     * @param parser Parser for the XML document defining the ColorStateList.\n     * @return A new color state list.\n     *\n     * @deprecated Use #createFromXml(Resources, XmlPullParser parser, Theme)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ColorStateList createFromXml(@NonNull Resources r, @NonNull XmlPullParser parser, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Creates a ColorStateList from an XML document using given a set of\n     * {@link Resources} and a {@link Theme}.\n     *\n     * @param r Resources against which the ColorStateList should be inflated.\n     * @param parser Parser for the XML document defining the ColorStateList.\n     * @param theme Optional theme to apply to the color state list, may be\n     *              {@code null}.\n     * @return A new color state list.\n     ",
    "links" : [ "android.content.res.Resources.Theme", "android.content.res.Resources" ]
  }, {
    "name" : " static ColorStateList createFromXmlInner(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Create from inside an XML document. Called on a parser positioned at a\n     * tag in an XML document, tries to create a ColorStateList from that tag.\n     *\n     * @throws XmlPullParserException if the current tag is not &lt;selector>\n     * @return A new color state list for the current tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ColorStateList withAlpha(int alpha)",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Creates a new ColorStateList that has the same states and colors as this\n     * one but where each color has the specified alpha value (0-255).\n     *\n     * @param alpha The new alpha channel value (0-255).\n     * @return A new color state list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ColorStateList withLStar(float lStar)",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Creates a new ColorStateList that has the same states and colors as this\n     * one but where each color has the specified perceived luminosity value (0-100).\n     *\n     * @param lStar Target perceptual luminance (0-100).\n     * @return A new color state list.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Fill in this object based on the contents of an XML \"selector\" element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a theme can be applied to this color state list, which\n     * usually indicates that the color state list has unresolved theme\n     * attributes.\n     *\n     * @return whether a theme can be applied to this color state list\n     * @hide only for resource preloading\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyTheme(Theme t)",
    "returnType" : "void",
    "comment" : "\n     * Applies a theme to this color state list.\n     * <p>\n     * <strong>Note:</strong> Applying a theme may affect the changing\n     * configuration parameters of this color state list. After calling this\n     * method, any dependent configurations must be updated by obtaining the\n     * new configuration mask from {@link #getChangingConfigurations()}.\n     *\n     * @param t the theme to apply\n     ",
    "links" : [ "#getChangingConfigurations()" ]
  }, {
    "name" : "public ColorStateList obtainForTheme(Theme t)",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns an appropriately themed color state list.\n     *\n     * @param t the theme to apply\n     * @return a copy of the color state list with the theme applied, or the\n     *         color state list itself if there were no unresolved theme\n     *         attributes\n     * @hide only for resource preloading\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "\n     * Returns a mask of the configuration parameters for which this color\n     * state list may change, requiring that it be re-created.\n     *\n     * @return a mask of the changing configuration parameters, as defined by\n     *         {@link android.content.pm.ActivityInfo}\n     *\n     * @see android.content.pm.ActivityInfo\n     ",
    "links" : [ "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "private int modulateColor(int baseColor, float alphaMod, float lStar)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this color state list contains at least one state spec\n     * and the first spec is not empty (e.g. match-all).\n     *\n     * @return True if this color state list changes color based on state, false\n     *         otherwise.\n     * @see #getColorForState(int[], int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the state spec list has at least one item explicitly specifying\n     * {@link android.R.attr#state_focused}.\n     * @hide\n     ",
    "links" : [ "android.R.attr#state_focused" ]
  }, {
    "name" : "public boolean isOpaque()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this color state list is opaque, which means that every\n     * color returned from {@link #getColorForState(int[], int)} has an alpha\n     * value of 255.\n     *\n     * @return True if this color state list is opaque.\n     ",
    "links" : [ "#getColorForState(int" ]
  }, {
    "name" : "public int getColorForState(@Nullable int[] stateSet, int defaultColor)",
    "returnType" : "int",
    "comment" : "\n     * Return the color associated with the given set of\n     * {@link android.view.View} states.\n     *\n     * @param stateSet an array of {@link android.view.View} states\n     * @param defaultColor the color to return if there's no matching state\n     *                     spec in this {@link ColorStateList} that matches the\n     *                     stateSet.\n     *\n     * @return the color associated with that set of states in this {@link ColorStateList}.\n     ",
    "links" : [ "android.content.res.ColorStateList", "android.view.View" ]
  }, {
    "name" : "public int getDefaultColor()",
    "returnType" : "int",
    "comment" : "\n     * Return the default color in this {@link ColorStateList}.\n     *\n     * @return the default color in this {@link ColorStateList}.\n     ",
    "links" : [ "android.content.res.ColorStateList" ]
  }, {
    "name" : "public int[][] getStates()",
    "returnType" : "int[][]",
    "comment" : "\n     * Return the states in this {@link ColorStateList}. The returned array\n     * should not be modified.\n     *\n     * @return the states in this {@link ColorStateList}\n     * @hide\n     ",
    "links" : [ "android.content.res.ColorStateList" ]
  }, {
    "name" : "public int[] getColors()",
    "returnType" : "int[]",
    "comment" : "\n     * Return the colors in this {@link ColorStateList}. The returned array\n     * should not be modified.\n     *\n     * @return the colors in this {@link ColorStateList}\n     * @hide\n     ",
    "links" : [ "android.content.res.ColorStateList" ]
  }, {
    "name" : "public boolean hasState(int state)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the specified state is referenced in any of the state\n     * specs contained within this ColorStateList.\n     * <p>\n     * Any reference, either positive or negative {ex. ~R.attr.state_enabled},\n     * will cause this method to return {@code true}. Wildcards are not counted\n     * as references.\n     *\n     * @param state the state to search for\n     * @return {@code true} if the state if referenced, {@code false} otherwise\n     * @hide Use only as directed. For internal use only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onColorsChanged()",
    "returnType" : "void",
    "comment" : "\n     * Updates the default color and opacity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ConstantState<ComplexColor> getConstantState()",
    "returnType" : "ConstantState<ComplexColor>",
    "comment" : "\n     * @return a factory that can create new instances of this ColorStateList\n     * @hide only for resource preloading\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ColorStateList valueOf(@ColorInt int color)", "public static ColorStateList createFromXml(Resources r, XmlPullParser parser) throws XmlPullParserException, IOException", "public static ColorStateList createFromXml(@NonNull Resources r, @NonNull XmlPullParser parser, @Nullable Theme theme) throws XmlPullParserException, IOException", " static ColorStateList createFromXmlInner(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public ColorStateList withAlpha(int alpha)", "public ColorStateList withLStar(float lStar)", "private void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public boolean canApplyTheme()", "private void applyTheme(Theme t)", "public ColorStateList obtainForTheme(Theme t)", "public int getChangingConfigurations()", "private int modulateColor(int baseColor, float alphaMod, float lStar)", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "public boolean isOpaque()", "public int getColorForState(@Nullable int[] stateSet, int defaultColor)", "public int getDefaultColor()", "public int[][] getStates()", "public int[] getColors()", "public boolean hasState(int state)", "public String toString()", "private void onColorsChanged()", "public ConstantState<ComplexColor> getConstantState()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "TAG", "DEFAULT_COLOR", "EMPTY", "sCache", "mFactory", "mThemeAttrs", "mChangingConfigurations", "mStateSpecs", "mColors", "mDefaultColor", "mIsOpaque", "CREATOR" ]
}