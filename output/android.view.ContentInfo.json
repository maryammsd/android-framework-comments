{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ContentInfo.java",
  "packageName" : "android.view",
  "className" : "ContentInfo",
  "comment" : "\n * Holds all the relevant data for a request to {@link View#performReceiveContent}.\n ",
  "links" : [ "android.view.View#performReceiveContent" ],
  "variables" : [ {
    "name" : "SOURCE_APP",
    "type" : "int",
    "comment" : "\n     * Specifies that the operation was triggered by the app that contains the target view.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_CLIPBOARD",
    "type" : "int",
    "comment" : "\n     * Specifies that the operation was triggered by a paste from the clipboard (e.g. \"Paste\" or\n     * \"Paste as plain text\" action in the insertion/selection menu).\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_INPUT_METHOD",
    "type" : "int",
    "comment" : "\n     * Specifies that the operation was triggered from the soft keyboard (also known as input\n     * method editor or IME). See https://developer.android.com/guide/topics/text/image-keyboard\n     * for more info.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_DRAG_AND_DROP",
    "type" : "int",
    "comment" : "\n     * Specifies that the operation was triggered by the drag/drop framework. See\n     * https://developer.android.com/guide/topics/ui/drag-drop for more info.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_AUTOFILL",
    "type" : "int",
    "comment" : "\n     * Specifies that the operation was triggered by the autofill framework. See\n     * https://developer.android.com/guide/topics/text/autofill for more info.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_PROCESS_TEXT",
    "type" : "int",
    "comment" : "\n     * Specifies that the operation was triggered by a result from a\n     * {@link android.content.Intent#ACTION_PROCESS_TEXT PROCESS_TEXT} action in the selection\n     * menu.\n     ",
    "links" : [ "android.content.Intent#ACTION_PROCESS_TEXT" ]
  }, {
    "name" : "FLAG_CONVERT_TO_PLAIN_TEXT",
    "type" : "int",
    "comment" : "\n     * Flag requesting that the content should be converted to plain text prior to inserting.\n     ",
    "links" : [ ]
  }, {
    "name" : "mClip",
    "type" : "ClipData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLinkUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputContentInfo",
    "type" : "InputContentInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDragAndDropPermissions",
    "type" : "DragAndDropPermissions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ContentInfo>",
    "comment" : "\n     * Creates {@link ContentInfo} instances from parcels.\n     ",
    "links" : [ "android.view.inputmethod.InputContentInfo" ]
  } ],
  "methods" : [ {
    "name" : " static String sourceToString(@Source int source)",
    "returnType" : "String",
    "comment" : "\n     * Returns the symbolic name of the given source.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static String flagsToString(@Flags int flags)",
    "returnType" : "String",
    "comment" : "\n     * Returns the symbolic names of the set flags or {@code \"0\"} if no flags are set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void releasePermissions()",
    "returnType" : "void",
    "comment" : "\n     * If the content came from a source that supports proactive release of URI permissions\n     * (e.g. IME), releases permissions; otherwise a no-op.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ClipData getClip()",
    "returnType" : "ClipData",
    "comment" : "\n     * The data to be inserted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSource()",
    "returnType" : "int",
    "comment" : "\n     * The source of the operation. See {@code SOURCE_} constants. Future versions of Android\n     * may pass additional values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Optional flags that control the insertion behavior. See {@code FLAG_} constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri getLinkUri()",
    "returnType" : "Uri",
    "comment" : "\n     * Optional http/https URI for the content that may be provided by the IME. This is only\n     * populated if the source is {@link #SOURCE_INPUT_METHOD} and if a non-empty\n     * {@link android.view.inputmethod.InputContentInfo#getLinkUri linkUri} was passed by the\n     * IME.\n     ",
    "links" : [ "#SOURCE_INPUT_METHOD", "android.view.inputmethod.InputContentInfo#getLinkUri" ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Optional additional metadata. If the source is {@link #SOURCE_INPUT_METHOD}, this will\n     * include the {@link android.view.inputmethod.InputConnection#commitContent opts} passed by\n     * the IME.\n     ",
    "links" : [ "#SOURCE_INPUT_METHOD", "android.view.inputmethod.InputConnection#commitContent" ]
  }, {
    "name" : "public Pair<ContentInfo, ContentInfo> partition(@NonNull Predicate<ClipData.Item> itemPredicate)",
    "returnType" : "Pair<ContentInfo, ContentInfo>",
    "comment" : "\n     * Partitions this content based on the given predicate.\n     *\n     * <p>This function classifies the content and organizes it into a pair, grouping the items\n     * that matched vs didn't match the predicate.\n     *\n     * <p>Except for the {@link ClipData} items, the returned objects will contain all the same\n     * metadata as this {@link ContentInfo}.\n     *\n     * @param itemPredicate The predicate to test each {@link ClipData.Item} to determine which\n     *                      partition to place it into.\n     * @return A pair containing the partitioned content. The pair's first object will have the\n     * content that matched the predicate, or null if none of the items matched. The pair's\n     * second object will have the content that didn't match the predicate, or null if all of\n     * the items matched.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.ClipData", "ClipData.Item", "android.view.inputmethod.InputContentInfo" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Writes this object into the given parcel.\n     *\n     * @param dest  The parcel to write into.\n     * @param flags The flags to use for parceling.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static String sourceToString(@Source int source)", " static String flagsToString(@Flags int flags)", "public void releasePermissions()", "public String toString()", "public ClipData getClip()", "public int getSource()", "public int getFlags()", "public Uri getLinkUri()", "public Bundle getExtras()", "public Pair<ContentInfo, ContentInfo> partition(@NonNull Predicate<ClipData.Item> itemPredicate)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "SOURCE_APP", "SOURCE_CLIPBOARD", "SOURCE_INPUT_METHOD", "SOURCE_DRAG_AND_DROP", "SOURCE_AUTOFILL", "SOURCE_PROCESS_TEXT", "FLAG_CONVERT_TO_PLAIN_TEXT", "mClip", "mSource", "mFlags", "mLinkUri", "mExtras", "mInputContentInfo", "mDragAndDropPermissions", "CREATOR" ]
}