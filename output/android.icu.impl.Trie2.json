{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Trie2.java",
  "packageName" : "android.icu.impl",
  "className" : "Trie2",
  "comment" : "\n * This is the interface and common implementation of a Unicode Trie2.\n * It is a kind of compressed table that maps from Unicode code points (0..0x10ffff)\n * to 16- or 32-bit integer values.  It works best when there are ranges of\n * characters with the same value, which is generally the case with Unicode\n * character properties.\n *\n * This is the second common version of a Unicode trie (hence the name Trie2).\n * @hide Only a subset of ICU is exposed in Android\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "defaultValueMapper",
    "type" : "ValueMapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "header",
    "type" : "UTrie2Header",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "char[]",
    "comment" : " Index array.  Includes data for 16 bit Tries.",
    "links" : [ ]
  }, {
    "name" : "data16",
    "type" : "int",
    "comment" : " Offset to data portion of the index array, if 16 bit data.",
    "links" : [ ]
  }, {
    "name" : "data32",
    "type" : "int[]",
    "comment" : " NULL if 16b data is used via index",
    "links" : [ ]
  }, {
    "name" : "indexLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dataLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index2NullOffset",
    "type" : "int",
    "comment" : " 0xffff if there is no dedicated index-2 null block",
    "links" : [ ]
  }, {
    "name" : "initialValue",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "errorValue",
    "type" : "int",
    "comment" : " Value returned for out-of-range code points and illegal UTF-8. ",
    "links" : [ ]
  }, {
    "name" : "highStart",
    "type" : "int",
    "comment" : " Start of the last range which ends at U+10ffff, and its value. ",
    "links" : [ ]
  }, {
    "name" : "highValueIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dataNullOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fHash",
    "type" : "int",
    "comment" : " Zero if not yet computed.",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_OPTIONS_VALUE_BITS_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_SHIFT_1",
    "type" : "int",
    "comment" : " Shift size for getting the index-1 table offset. ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_SHIFT_2",
    "type" : "int",
    "comment" : " Shift size for getting the index-2 table offset. ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_SHIFT_1_2",
    "type" : "int",
    "comment" : "\n     * Difference between the two shift sizes,\n     * for getting an index-1 offset from an index-2 offset. 6=11-5\n     ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_OMITTED_BMP_INDEX_1_LENGTH",
    "type" : "int",
    "comment" : "\n     * Number of index-1 entries for the BMP. 32=0x20\n     * This part of the index-1 table is omitted from the serialized form.\n     ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_CP_PER_INDEX_1_ENTRY",
    "type" : "int",
    "comment" : " Number of code points per index-1 table entry. 2048=0x800 ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_INDEX_2_BLOCK_LENGTH",
    "type" : "int",
    "comment" : " Number of entries in an index-2 block. 64=0x40 ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_INDEX_2_MASK",
    "type" : "int",
    "comment" : " Mask for getting the lower bits for the in-index-2-block offset. ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_DATA_BLOCK_LENGTH",
    "type" : "int",
    "comment" : " Number of entries in a data block. 32=0x20 ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_DATA_MASK",
    "type" : "int",
    "comment" : " Mask for getting the lower bits for the in-data-block offset. ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_INDEX_SHIFT",
    "type" : "int",
    "comment" : "\n     * Shift size for shifting left the index array values.\n     * Increases possible data size with 16-bit index values at the cost\n     * of compactability.\n     * This requires data blocks to be aligned by UTRIE2_DATA_GRANULARITY.\n     ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_DATA_GRANULARITY",
    "type" : "int",
    "comment" : " The alignment size of a data block. Also the granularity for compaction. ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_INDEX_2_OFFSET",
    "type" : "int",
    "comment" : "\n     * The BMP part of the index-2 table is fixed and linear and starts at offset 0.\n     * Length=2048=0x800=0x10000>>UTRIE2_SHIFT_2.\n     ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_LSCP_INDEX_2_OFFSET",
    "type" : "int",
    "comment" : "\n     * The part of the index-2 table for U+D800..U+DBFF stores values for\n     * lead surrogate code _units_ not code _points_.\n     * Values for lead surrogate code _points_ are indexed with this portion of the table.\n     * Length=32=0x20=0x400>>UTRIE2_SHIFT_2. (There are 1024=0x400 lead surrogates.)\n     ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_LSCP_INDEX_2_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_INDEX_2_BMP_LENGTH",
    "type" : "int",
    "comment" : " Count the lengths of both BMP pieces. 2080=0x820 ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_UTF8_2B_INDEX_2_OFFSET",
    "type" : "int",
    "comment" : "\n     * The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n     * Length 32=0x20 for lead bytes C0..DF, regardless of UTRIE2_SHIFT_2.\n     ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_UTF8_2B_INDEX_2_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_INDEX_1_OFFSET",
    "type" : "int",
    "comment" : "\n     * The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n     * Variable length, for code points up to highStart, where the last single-value range starts.\n     * Maximum length 512=0x200=0x100000>>UTRIE2_SHIFT_1.\n     * (For 0x100000 supplementary code points U+10000..U+10ffff.)\n     *\n     * The part of the index-2 table for supplementary code points starts\n     * after this index-1 table.\n     *\n     * Both the index-1 table and the following part of the index-2 table\n     * are omitted completely if there is only BMP data.\n     ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_MAX_INDEX_1_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_BAD_UTF8_DATA_OFFSET",
    "type" : "int",
    "comment" : "\n     * The illegal-UTF-8 data block follows the ASCII block, at offset 128=0x80.\n     * Used with linear access for single bytes 0..0xbf for simple error handling.\n     * Length 64=0x40, not UTRIE2_DATA_BLOCK_LENGTH.\n     ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_DATA_START_OFFSET",
    "type" : "int",
    "comment" : " The start of non-linear-ASCII data blocks, at offset 192=0xc0. ",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_INDEX_GAP_OFFSET",
    "type" : "int",
    "comment" : "\n     * At build time, leave a gap in the index-2 table,\n     * at least as long as the maximum lengths of the 2-byte UTF-8 index-2 table\n     * and the supplementary index-1 table.\n     * Round up to UTRIE2_INDEX_2_BLOCK_LENGTH for proper compacting.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_INDEX_GAP_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_MAX_INDEX_2_LENGTH",
    "type" : "int",
    "comment" : "\n     * Maximum length of the build-time index-2 array.\n     * Maximum number of Unicode code points (0x110000) shifted right by UTRIE2_SHIFT_2,\n     * plus the part of the index-2 table for lead surrogate code points,\n     * plus the build-time index gap,\n     * plus the null index-2 block.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_INDEX_1_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_MAX_DATA_LENGTH",
    "type" : "int",
    "comment" : "\n     * Maximum length of the build-time data array.\n     * One entry per 0x110000 code points, plus the illegal-UTF-8 block and the null block,\n     * plus values for the 0x400 surrogate code units.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Trie2 createFromSerialized(ByteBuffer bytes) throws IOException",
    "returnType" : "Trie2",
    "comment" : "\n     * Create a Trie2 from its serialized form.  Inverse of utrie2_serialize().\n     *\n     * Reads from the current position and leaves the buffer after the end of the trie.\n     *\n     * The serialized format is identical between ICU4C and ICU4J, so this function\n     * will work with serialized Trie2s from either.\n     *\n     * The actual type of the returned Trie2 will be either Trie2_16 or Trie2_32, depending\n     * on the width of the data.\n     *\n     * To obtain the width of the Trie2, check the actual class type of the returned Trie2.\n     * Or use the createFromSerialized() function of Trie2_16 or Trie2_32, which will\n     * return only Tries of their specific type/size.\n     *\n     * The serialized Trie2 on the stream may be in either little or big endian byte order.\n     * This allows using serialized Tries from ICU4C without needing to consider the\n     * byte order of the system that created them.\n     *\n     * @param bytes a byte buffer to the serialized form of a UTrie2.\n     * @return An unserialized Trie2, ready for use.\n     * @throws IllegalArgumentException if the stream does not contain a serialized Trie2.\n     * @throws IOException if a read error occurs in the buffer.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getVersion(InputStream is, boolean littleEndianOk) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Get the UTrie version from an InputStream containing the serialized form\n     * of either a Trie (version 1) or a Trie2 (version 2).\n     *\n     * @param is   an InputStream containing the serialized form\n     *             of a UTrie, version 1 or 2.  The stream must support mark() and reset().\n     *             The position of the input stream will be left unchanged.\n     * @param littleEndianOk If false, only big-endian (Java native) serialized forms are recognized.\n     *                    If true, little-endian serialized forms are recognized as well.\n     * @return     the Trie version of the serialized form, or 0 if it is not\n     *             recognized as a serialized UTrie\n     * @throws     IOException on errors in reading from the input stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int get(int codePoint)",
    "returnType" : "int",
    "comment" : "\n     * Get the value for a code point as stored in the Trie2.\n     *\n     * @param codePoint the code point\n     * @return the value\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getFromU16SingleLead(char c)",
    "returnType" : "int",
    "comment" : "\n     * Get the trie value for a UTF-16 code unit.\n     *\n     * A Trie2 stores two distinct values for input in the lead surrogate\n     * range, one for lead surrogates, which is the value that will be\n     * returned by this function, and a second value that is returned\n     * by Trie2.get().\n     *\n     * For code units outside of the lead surrogate range, this function\n     * returns the same result as Trie2.get().\n     *\n     * This function, together with the alternate value for lead surrogates,\n     * makes possible very efficient processing of UTF-16 strings without\n     * first converting surrogate pairs to their corresponding 32 bit code point\n     * values.\n     *\n     * At build-time, enumerate the contents of the Trie2 to see if there\n     * is non-trivial (non-initialValue) data for any of the supplementary\n     * code points associated with a lead surrogate.\n     * If so, then set a special (application-specific) value for the\n     * lead surrogate code _unit_, with Trie2Writable.setForLeadSurrogateCodeUnit().\n     *\n     * At runtime, use Trie2.getFromU16SingleLead(). If there is non-trivial\n     * data and the code unit is a lead surrogate, then check if a trail surrogate\n     * follows. If so, assemble the supplementary code point and look up its value\n     * with Trie2.get(); otherwise reset the lead\n     * surrogate's value or do a code point lookup for it.\n     *\n     * If there is only trivial data for lead and trail surrogates, then processing\n     * can often skip them. For example, in normalization or case mapping\n     * all characters that do not have any mappings are simply copied as is.\n     *\n     * @param c the code point or lead surrogate value.\n     * @return the value\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Equals function.  Two Tries are equal if their contents are equal.\n     * The type need not be the same, so a Trie2Writable will be equal to\n     * (read-only) Trie2_16 or Trie2_32 so long as they are storing the same values.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Range> iterator()",
    "returnType" : "Iterator<Range>",
    "comment" : "\n     *  Create an iterator over the value ranges in this Trie2.\n     *  Values from the Trie2 are not remapped or filtered, but are returned as they\n     *  are stored in the Trie2.\n     *\n     * @return an Iterator\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Range> iterator(ValueMapper mapper)",
    "returnType" : "Iterator<Range>",
    "comment" : "\n     * Create an iterator over the value ranges from this Trie2.\n     * Values from the Trie2 are passed through a caller-supplied remapping function,\n     * and it is the remapped values that determine the ranges that\n     * will be produced by the iterator.\n     *\n     *\n     * @param mapper provides a function to remap values obtained from the Trie2.\n     * @return an Iterator\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Range> iteratorForLeadSurrogate(char lead, ValueMapper mapper)",
    "returnType" : "Iterator<Range>",
    "comment" : "\n     * Create an iterator over the Trie2 values for the 1024=0x400 code points\n     * corresponding to a given lead surrogate.\n     * For example, for the lead surrogate U+D87E it will enumerate the values\n     * for [U+2F800..U+2FC00[.\n     * Used by data builder code that sets special lead surrogate code unit values\n     * for optimized UTF-16 string processing.\n     *\n     * Do not modify the Trie2 during the iteration.\n     *\n     * Except for the limited code point range, this functions just like Trie2.iterator().\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Range> iteratorForLeadSurrogate(char lead)",
    "returnType" : "Iterator<Range>",
    "comment" : "\n     * Create an iterator over the Trie2 values for the 1024=0x400 code points\n     * corresponding to a given lead surrogate.\n     * For example, for the lead surrogate U+D87E it will enumerate the values\n     * for [U+2F800..U+2FC00[.\n     * Used by data builder code that sets special lead surrogate code unit values\n     * for optimized UTF-16 string processing.\n     *\n     * Do not modify the Trie2 during the iteration.\n     *\n     * Except for the limited code point range, this functions just like Trie2.iterator().\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int serializeHeader(DataOutputStream dos) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Serialize a trie2 Header and Index onto an OutputStream.  This is\n     * common code used for  both the Trie2_16 and Trie2_32 serialize functions.\n     * @param dos the stream to which the serialized Trie2 data will be written.\n     * @return the number of bytes written.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequenceIterator charSequenceIterator(CharSequence text, int index)",
    "returnType" : "CharSequenceIterator",
    "comment" : "\n     *  Create an iterator that will produce the values from the Trie2 for\n     *  the sequence of code points in an input text.\n     *\n     * @param text A text string to be iterated over.\n     * @param index The starting iteration position within the input text.\n     * @return the CharSequenceIterator\n     ",
    "links" : [ ]
  }, {
    "name" : " int rangeEnd(int start, int limitp, int val)",
    "returnType" : "int",
    "comment" : "\n     * Find the last character in a contiguous range of characters with the\n     * same Trie2 value as the input character.\n     *\n     * @param c  The character to begin with.\n     * @return   The last contiguous character with the same value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int initHash()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int hashByte(int h, int b)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int hashUChar32(int h, int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int hashInt(int h, int i)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Trie2 createFromSerialized(ByteBuffer bytes) throws IOException", "public static int getVersion(InputStream is, boolean littleEndianOk) throws IOException", "public abstract int get(int codePoint)", "public abstract int getFromU16SingleLead(char c)", "public final boolean equals(Object other)", "public int hashCode()", "public Iterator<Range> iterator()", "public Iterator<Range> iterator(ValueMapper mapper)", "public Iterator<Range> iteratorForLeadSurrogate(char lead, ValueMapper mapper)", "public Iterator<Range> iteratorForLeadSurrogate(char lead)", "protected int serializeHeader(DataOutputStream dos) throws IOException", "public CharSequenceIterator charSequenceIterator(CharSequence text, int index)", " int rangeEnd(int start, int limitp, int val)", "private static int initHash()", "private static int hashByte(int h, int b)", "private static int hashUChar32(int h, int c)", "private static int hashInt(int h, int i)" ],
  "variableNames" : [ "defaultValueMapper", "header", "index", "data16", "data32", "indexLength", "dataLength", "index2NullOffset", "initialValue", "errorValue", "highStart", "highValueIndex", "dataNullOffset", "fHash", "UTRIE2_OPTIONS_VALUE_BITS_MASK", "UTRIE2_SHIFT_1", "UTRIE2_SHIFT_2", "UTRIE2_SHIFT_1_2", "UTRIE2_OMITTED_BMP_INDEX_1_LENGTH", "UTRIE2_CP_PER_INDEX_1_ENTRY", "UTRIE2_INDEX_2_BLOCK_LENGTH", "UTRIE2_INDEX_2_MASK", "UTRIE2_DATA_BLOCK_LENGTH", "UTRIE2_DATA_MASK", "UTRIE2_INDEX_SHIFT", "UTRIE2_DATA_GRANULARITY", "UTRIE2_INDEX_2_OFFSET", "UTRIE2_LSCP_INDEX_2_OFFSET", "UTRIE2_LSCP_INDEX_2_LENGTH", "UTRIE2_INDEX_2_BMP_LENGTH", "UTRIE2_UTF8_2B_INDEX_2_OFFSET", "UTRIE2_UTF8_2B_INDEX_2_LENGTH", "UTRIE2_INDEX_1_OFFSET", "UTRIE2_MAX_INDEX_1_LENGTH", "UTRIE2_BAD_UTF8_DATA_OFFSET", "UTRIE2_DATA_START_OFFSET", "UNEWTRIE2_INDEX_GAP_OFFSET", "UNEWTRIE2_INDEX_GAP_LENGTH", "UNEWTRIE2_MAX_INDEX_2_LENGTH", "UNEWTRIE2_INDEX_1_LENGTH", "UNEWTRIE2_MAX_DATA_LENGTH" ]
}