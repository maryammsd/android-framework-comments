{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/Constants.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "Constants",
  "comment" : "\n * Primary constants used in the TransformerImpl classes.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ELEMNAME_UNDEFINED",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_WITHPARAM",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ADDATTRIBUTE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ANCHOR",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_APPLY_TEMPLATES",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_USE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CHILDREN",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CHOOSE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COMMENT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CONSTRUCT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CONTENTS",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COPY",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COPY_OF",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_DECIMALFORMAT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_DEFINEATTRIBUTESET",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_DEFINESCRIPT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_DISPLAYIF",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EMPTY",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EVAL",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EXPECTEDCHILDREN",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EXTENSION",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EXTENSIONHANDLER",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_FOREACH",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_KEY",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_IF",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_IMPORT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_INCLUDE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CALLTEMPLATE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_PARAMVARIABLE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_NUMBER",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_NSALIAS",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_OTHERWISE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_PI",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_PRESERVESPACE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_REMOVEATTRIBUTE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TEMPLATE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_SORT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_STRIPSPACE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_STYLESHEET",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TEXT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_VALUEOF",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_WHEN",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ROOT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ANY",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ELEMENT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TARGETELEMENT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ATTRIBUTE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TARGETATTRIBUTE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_URL",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CALL",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_FALLBACK",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TARGETPI",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TARGETCOMMENT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TARGETTEXT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CSSSTYLECONVERSION",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COUNTER",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COUNTERS",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COUNTERINCREMENT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COUNTERRESET",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COUNTERSCOPE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_APPLY_IMPORTS",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_VARIABLE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_MESSAGE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_LOCALE",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_LITERALRESULT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TEXTLITERALRESULT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EXTENSIONCALL",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EXTENSIONDECL",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EXTENSIONSCRIPT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_OUTPUT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COMPONENT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_SCRIPT",
    "type" : "int",
    "comment" : "\n   * IDs for XSL element types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   * (It's a pity Java doesn't have a real Enumerated Mnemonic\n   * datatype... or a C-like preprocessor in lieu thereof which\n   * could be used to generate and maintain synch between these lists.)\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ANCHOR_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ANY_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_APPLY_IMPORTS_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_APPLY_TEMPLATES_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ARG_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ATTRIBUTESET_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ATTRIBUTE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CALLTEMPLATEARG_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CALLTEMPLATE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CALL_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CHILDREN_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CHOOSE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COMMENT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COMPONENT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CONSTRUCT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CONTENTS_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COPY_OF_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COPY_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COUNTERINCREMENT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COUNTERRESET_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COUNTERSCOPE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COUNTERS_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_COUNTER_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_CSSSTYLECONVERSION_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_DECIMALFORMAT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_DISPLAYIF_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ELEMENT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EMPTY_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EVAL_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EXPECTEDCHILDREN_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EXTENSIONHANDLER_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_EXTENSION_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_FALLBACK_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_FOREACH_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_IF_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_IMPORT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_INCLUDE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_KEY_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_LOCALE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_MESSAGE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_NSALIAS_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_NUMBER_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_OTHERWISE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_OUTPUT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_PARAMVARIABLE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_PI_OLD_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_PI_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_PRESERVESPACE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_ROOT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_SCRIPT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_SORT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_STRIPSPACE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_STYLESHEET_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TARGETATTRIBUTE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TARGETCOMMENT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TARGETELEMENT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TARGETPI_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TARGETTEXT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TEMPLATE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TEXT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_TRANSFORM_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_URL_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_USE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_VALUEOF_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_VARIABLE_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_WHEN_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMNAME_WITHPARAM_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL element names.  Note that there are more\n   * names than IDs, because some names map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "EXSLT_ELEMNAME_FUNCTION_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for EXSLT function elements.\n   ",
    "links" : [ ]
  }, {
    "name" : "EXSLT_ELEMNAME_FUNCRESULT_STRING",
    "type" : "String",
    "comment" : "\n   * Literals for EXSLT function elements.\n   ",
    "links" : [ ]
  }, {
    "name" : "EXSLT_ELEMNAME_FUNCTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXSLT_ELEMNAME_FUNCRESULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_AMOUNT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_ANCESTOR",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_ARCHIVE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_ATTRIBUTE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_ATTRIBUTE_SET",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_CASEORDER",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_CLASS",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_CLASSID",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_CODEBASE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_CODETYPE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_CONDITION",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_COPYTYPE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_COUNT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_DATATYPE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_DECIMALSEPARATOR",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_DEFAULT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_DEFAULTSPACE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_DEPTH",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_DIGIT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_DIGITGROUPSEP",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_DISABLE_OUTPUT_ESCAPING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_ELEMENT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_ELEMENTS",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_EXCLUDE_RESULT_PREFIXES",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_EXPR",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_EXTENSIONELEMENTPREFIXES",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_FORMAT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_FROM",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_GROUPINGSEPARATOR",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_GROUPINGSIZE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_HREF",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_ID",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_IMPORTANCE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_INDENTRESULT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_INFINITY",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_LANG",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_LETTERVALUE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_LEVEL",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_MATCH",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_METHOD",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_MINUSSIGN",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_MODE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_NAME",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_NAMESPACE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_NAN",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_NDIGITSPERGROUP",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_NS",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_ONLY",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_ORDER",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_OUTPUT_DOCTYPE_PUBLIC",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_OUTPUT_DOCTYPE_SYSTEM",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_OUTPUT_ENCODING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_OUTPUT_INDENT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_OUTPUT_MEDIATYPE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_OUTPUT_METHOD",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_OUTPUT_OMITXMLDECL",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_OUTPUT_STANDALONE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_OUTPUT_VERSION",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_PATTERNSEPARATOR",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_PERCENT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_PERMILLE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_PRIORITY",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_REFID",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_RESULTNS",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_RESULT_PREFIX",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_SELECT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_SEQUENCESRC",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_STYLE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_STYLESHEET_PREFIX",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_TERMINATE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_TEST",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_TOSTRING",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_TYPE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_USE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_USEATTRIBUTESETS",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_VALUE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_VERSION",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_XMLNS",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_XMLNSDEF",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_XMLSPACE",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_ZERODIGIT",
    "type" : "String",
    "comment" : "\n   * Literals for XSL attribute names.  Note that there may be more\n   * names than IDs, because some names may map to the same ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_OUTPUT_METHOD",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_AMOUNT",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_ANCESTOR",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_ARCHIVE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_ATTRIBUTE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_ATTRIBUTE_SET",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_CASEORDER",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_CLASS",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_CLASSID",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_CODEBASE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_CODETYPE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_CONDITION",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_COPYTYPE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_COUNT",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_DATATYPE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_DEFAULT",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_DEFAULTSPACE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_DEPTH",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_DIGITGROUPSEP",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_DISABLE_OUTPUT_ESCAPING",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_ELEMENT",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_ELEMENTS",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_EXPR",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_EXTENSIONELEMENTPREFIXES",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_FORMAT",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_FROM",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_GROUPINGSEPARATOR",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_GROUPINGSIZE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_HREF",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_ID",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_IMPORTANCE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_INDENTRESULT",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_LANG",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_LETTERVALUE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_LEVEL",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_MATCH",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_METHOD",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_MODE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_NAME",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_NAMESPACE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_NDIGITSPERGROUP",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_NS",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_ONLY",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_ORDER",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_OUTPUT_DOCTYPE_PUBLIC",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_OUTPUT_DOCTYPE_SYSTEM",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_OUTPUT_ENCODING",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_OUTPUT_INDENT",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_OUTPUT_MEDIATYPE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_OUTPUT_STANDALONE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_OUTPUT_VERSION",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_OUTPUT_OMITXMLDECL",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_PRIORITY",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_REFID",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_RESULTNS",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_SELECT",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_SEQUENCESRC",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_STYLE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_TEST",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_TOSTRING",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_TYPE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_USE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_USEATTRIBUTESETS",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_VALUE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_XMLNSDEF",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_XMLNS",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_XMLSPACE",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "TATTRNAME_EXCLUDE_RESULT_PREFIXES",
    "type" : "int",
    "comment" : " IDs for XSL attribute types. These are associated\n   * with the string literals in the TransformerImpl class.\n   * Don't change the numbers. NOTE THAT THESE ARE NOT IN\n   * ALPHABETICAL ORDER!\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_OUTPUT_METHOD_HTML",
    "type" : "String",
    "comment" : " Mnemonics for the possible values of the xsl:output element's\n   * method= attribute:\n   * <ul>\n   * <li>ATTRVAL_OUTPUT_METHOD_XML = Use an XML formatter to\n   * produce the output document (basic XSLT operation).</li>\n   * <li>ATTRVAL_OUTPUT_METHOD_HTML: Use an HTML formatter to\n   * produce the output document. When generating HTML documents,\n   * this may yield better results; it does things like escaping\n   * characters in href attributes.</li>\n   * </li>ATTRVAL_OUTPUT_METHOD_TEXT:  Use a Text formatter to\n   * produce the output document. Generally the right choice if your\n   * stylesheet wants to take over _all_ the details of formatting,\n   * most often when producing something that isn't an XML or HTML\n   * document.</li>\n   * </ul> \n   * ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_OUTPUT_METHOD_XML",
    "type" : "String",
    "comment" : " Mnemonics for the possible values of the xsl:output element's\n   * method= attribute:\n   * <ul>\n   * <li>ATTRVAL_OUTPUT_METHOD_XML = Use an XML formatter to\n   * produce the output document (basic XSLT operation).</li>\n   * <li>ATTRVAL_OUTPUT_METHOD_HTML: Use an HTML formatter to\n   * produce the output document. When generating HTML documents,\n   * this may yield better results; it does things like escaping\n   * characters in href attributes.</li>\n   * </li>ATTRVAL_OUTPUT_METHOD_TEXT:  Use a Text formatter to\n   * produce the output document. Generally the right choice if your\n   * stylesheet wants to take over _all_ the details of formatting,\n   * most often when producing something that isn't an XML or HTML\n   * document.</li>\n   * </ul> \n   * ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_OUTPUT_METHOD_TEXT",
    "type" : "String",
    "comment" : " Mnemonics for the possible values of the xsl:output element's\n   * method= attribute:\n   * <ul>\n   * <li>ATTRVAL_OUTPUT_METHOD_XML = Use an XML formatter to\n   * produce the output document (basic XSLT operation).</li>\n   * <li>ATTRVAL_OUTPUT_METHOD_HTML: Use an HTML formatter to\n   * produce the output document. When generating HTML documents,\n   * this may yield better results; it does things like escaping\n   * characters in href attributes.</li>\n   * </li>ATTRVAL_OUTPUT_METHOD_TEXT:  Use a Text formatter to\n   * produce the output document. Generally the right choice if your\n   * stylesheet wants to take over _all_ the details of formatting,\n   * most often when producing something that isn't an XML or HTML\n   * document.</li>\n   * </ul> \n   * ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_PRESERVE",
    "type" : "int",
    "comment" : " For space-att",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_STRIP",
    "type" : "int",
    "comment" : " For space-att",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_YES",
    "type" : "boolean",
    "comment" : " For indent-result          ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_NO",
    "type" : "boolean",
    "comment" : " For indent-result          ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_ALPHABETIC",
    "type" : "String",
    "comment" : " For letter-value attribute (part of conversion attributes).          ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_OTHER",
    "type" : "String",
    "comment" : " For letter-value attribute (part of conversion attributes).          ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_TRADITIONAL",
    "type" : "String",
    "comment" : " For letter-value attribute (part of conversion attributes).          ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_SINGLE",
    "type" : "String",
    "comment" : " For level attribute in xsl:number.          ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_MULTI",
    "type" : "String",
    "comment" : " For level attribute in xsl:number.          ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_ANY",
    "type" : "String",
    "comment" : " For level attribute in xsl:number.          ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_DEFAULT_PREFIX",
    "type" : "String",
    "comment" : " For Stylesheet-prefix and result-prefix in xsl:namespace-alias          ",
    "links" : [ ]
  }, {
    "name" : "NUMBERLETTER_ALPHABETIC",
    "type" : "int",
    "comment" : " Integer equivalents for above        ",
    "links" : [ ]
  }, {
    "name" : "NUMBERLETTER_TRADITIONAL",
    "type" : "int",
    "comment" : " Integer equivalents for above        ",
    "links" : [ ]
  }, {
    "name" : "NUMBERLEVEL_SINGLE",
    "type" : "int",
    "comment" : " Integer equivelents for above        ",
    "links" : [ ]
  }, {
    "name" : "NUMBERLEVEL_MULTI",
    "type" : "int",
    "comment" : " Integer equivelents for above        ",
    "links" : [ ]
  }, {
    "name" : "NUMBERLEVEL_ANY",
    "type" : "int",
    "comment" : " Integer equivelents for above        ",
    "links" : [ ]
  }, {
    "name" : "MAX_MULTI_COUNTING_DEPTH",
    "type" : "int",
    "comment" : " Integer equivelents for above        ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_THIS",
    "type" : "String",
    "comment" : " some stuff for my patterns-by-example         ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_PARENT",
    "type" : "String",
    "comment" : " some stuff for my patterns-by-example         ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_ANCESTOR",
    "type" : "String",
    "comment" : " some stuff for my patterns-by-example         ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_ID",
    "type" : "String",
    "comment" : " some stuff for my patterns-by-example         ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_DATATYPE_TEXT",
    "type" : "String",
    "comment" : " Stuff for sorting      ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_DATATYPE_NUMBER",
    "type" : "String",
    "comment" : " Stuff for sorting      ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_ORDER_ASCENDING",
    "type" : "String",
    "comment" : " Stuff for sorting      ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_ORDER_DESCENDING",
    "type" : "String",
    "comment" : " Stuff for sorting      ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_CASEORDER_UPPER",
    "type" : "String",
    "comment" : " Stuff for sorting      ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_CASEORDER_LOWER",
    "type" : "String",
    "comment" : " Stuff for sorting      ",
    "links" : [ ]
  }, {
    "name" : "SORTDATATYPE_TEXT",
    "type" : "int",
    "comment" : " Integer equivelents for DATATYPE attribute ",
    "links" : [ ]
  }, {
    "name" : "SORTDATATYPE_NUMBER",
    "type" : "int",
    "comment" : " Integer equivelents for DATATYPE attribute ",
    "links" : [ ]
  }, {
    "name" : "SORTORDER_ASCENDING",
    "type" : "int",
    "comment" : " Integer equivelents for ORDER attribute ",
    "links" : [ ]
  }, {
    "name" : "SORTORDER_DESCENDING",
    "type" : "int",
    "comment" : " Integer equivelents for ORDER attribute ",
    "links" : [ ]
  }, {
    "name" : "SORTCASEORDER_UPPERFIRST",
    "type" : "int",
    "comment" : " Integer equivelents for CASE-ORDER attribute ",
    "links" : [ ]
  }, {
    "name" : "SORTCASEORDER_LOWERFIRST",
    "type" : "int",
    "comment" : " Integer equivelents for CASE-ORDER attribute ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_INFINITY",
    "type" : "String",
    "comment" : " some stuff for Decimal-format       ",
    "links" : [ ]
  }, {
    "name" : "ATTRVAL_NAN",
    "type" : "String",
    "comment" : " some stuff for Decimal-format       ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DECIMAL_FORMAT",
    "type" : "String",
    "comment" : " some stuff for Decimal-format       ",
    "links" : [ ]
  }, {
    "name" : "ATTRNAME_XXXX",
    "type" : "String",
    "comment" : " temp dummy         ",
    "links" : [ ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "ELEMNAME_UNDEFINED", "ELEMNAME_WITHPARAM", "ELEMNAME_ADDATTRIBUTE", "ELEMNAME_ANCHOR", "ELEMNAME_APPLY_TEMPLATES", "ELEMNAME_USE", "ELEMNAME_CHILDREN", "ELEMNAME_CHOOSE", "ELEMNAME_COMMENT", "ELEMNAME_CONSTRUCT", "ELEMNAME_CONTENTS", "ELEMNAME_COPY", "ELEMNAME_COPY_OF", "ELEMNAME_DECIMALFORMAT", "ELEMNAME_DEFINEATTRIBUTESET", "ELEMNAME_DEFINESCRIPT", "ELEMNAME_DISPLAYIF", "ELEMNAME_EMPTY", "ELEMNAME_EVAL", "ELEMNAME_EXPECTEDCHILDREN", "ELEMNAME_EXTENSION", "ELEMNAME_EXTENSIONHANDLER", "ELEMNAME_FOREACH", "ELEMNAME_KEY", "ELEMNAME_IF", "ELEMNAME_IMPORT", "ELEMNAME_INCLUDE", "ELEMNAME_CALLTEMPLATE", "ELEMNAME_PARAMVARIABLE", "ELEMNAME_NUMBER", "ELEMNAME_NSALIAS", "ELEMNAME_OTHERWISE", "ELEMNAME_PI", "ELEMNAME_PRESERVESPACE", "ELEMNAME_REMOVEATTRIBUTE", "ELEMNAME_TEMPLATE", "ELEMNAME_SORT", "ELEMNAME_STRIPSPACE", "ELEMNAME_STYLESHEET", "ELEMNAME_TEXT", "ELEMNAME_VALUEOF", "ELEMNAME_WHEN", "ELEMNAME_ROOT", "ELEMNAME_ANY", "ELEMNAME_ELEMENT", "ELEMNAME_TARGETELEMENT", "ELEMNAME_ATTRIBUTE", "ELEMNAME_TARGETATTRIBUTE", "ELEMNAME_URL", "ELEMNAME_CALL", "ELEMNAME_FALLBACK", "ELEMNAME_TARGETPI", "ELEMNAME_TARGETCOMMENT", "ELEMNAME_TARGETTEXT", "ELEMNAME_CSSSTYLECONVERSION", "ELEMNAME_COUNTER", "ELEMNAME_COUNTERS", "ELEMNAME_COUNTERINCREMENT", "ELEMNAME_COUNTERRESET", "ELEMNAME_COUNTERSCOPE", "ELEMNAME_APPLY_IMPORTS", "ELEMNAME_VARIABLE", "ELEMNAME_MESSAGE", "ELEMNAME_LOCALE", "ELEMNAME_LITERALRESULT", "ELEMNAME_TEXTLITERALRESULT", "ELEMNAME_EXTENSIONCALL", "ELEMNAME_EXTENSIONDECL", "ELEMNAME_EXTENSIONSCRIPT", "ELEMNAME_OUTPUT", "ELEMNAME_COMPONENT", "ELEMNAME_SCRIPT", "ELEMNAME_ANCHOR_STRING", "ELEMNAME_ANY_STRING", "ELEMNAME_APPLY_IMPORTS_STRING", "ELEMNAME_APPLY_TEMPLATES_STRING", "ELEMNAME_ARG_STRING", "ELEMNAME_ATTRIBUTESET_STRING", "ELEMNAME_ATTRIBUTE_STRING", "ELEMNAME_CALLTEMPLATEARG_STRING", "ELEMNAME_CALLTEMPLATE_STRING", "ELEMNAME_CALL_STRING", "ELEMNAME_CHILDREN_STRING", "ELEMNAME_CHOOSE_STRING", "ELEMNAME_COMMENT_STRING", "ELEMNAME_COMPONENT_STRING", "ELEMNAME_CONSTRUCT_STRING", "ELEMNAME_CONTENTS_STRING", "ELEMNAME_COPY_OF_STRING", "ELEMNAME_COPY_STRING", "ELEMNAME_COUNTERINCREMENT_STRING", "ELEMNAME_COUNTERRESET_STRING", "ELEMNAME_COUNTERSCOPE_STRING", "ELEMNAME_COUNTERS_STRING", "ELEMNAME_COUNTER_STRING", "ELEMNAME_CSSSTYLECONVERSION_STRING", "ELEMNAME_DECIMALFORMAT_STRING", "ELEMNAME_DISPLAYIF_STRING", "ELEMNAME_ELEMENT_STRING", "ELEMNAME_EMPTY_STRING", "ELEMNAME_EVAL_STRING", "ELEMNAME_EXPECTEDCHILDREN_STRING", "ELEMNAME_EXTENSIONHANDLER_STRING", "ELEMNAME_EXTENSION_STRING", "ELEMNAME_FALLBACK_STRING", "ELEMNAME_FOREACH_STRING", "ELEMNAME_IF_STRING", "ELEMNAME_IMPORT_STRING", "ELEMNAME_INCLUDE_STRING", "ELEMNAME_KEY_STRING", "ELEMNAME_LOCALE_STRING", "ELEMNAME_MESSAGE_STRING", "ELEMNAME_NSALIAS_STRING", "ELEMNAME_NUMBER_STRING", "ELEMNAME_OTHERWISE_STRING", "ELEMNAME_OUTPUT_STRING", "ELEMNAME_PARAMVARIABLE_STRING", "ELEMNAME_PI_OLD_STRING", "ELEMNAME_PI_STRING", "ELEMNAME_PRESERVESPACE_STRING", "ELEMNAME_ROOT_STRING", "ELEMNAME_SCRIPT_STRING", "ELEMNAME_SORT_STRING", "ELEMNAME_STRIPSPACE_STRING", "ELEMNAME_STYLESHEET_STRING", "ELEMNAME_TARGETATTRIBUTE_STRING", "ELEMNAME_TARGETCOMMENT_STRING", "ELEMNAME_TARGETELEMENT_STRING", "ELEMNAME_TARGETPI_STRING", "ELEMNAME_TARGETTEXT_STRING", "ELEMNAME_TEMPLATE_STRING", "ELEMNAME_TEXT_STRING", "ELEMNAME_TRANSFORM_STRING", "ELEMNAME_URL_STRING", "ELEMNAME_USE_STRING", "ELEMNAME_VALUEOF_STRING", "ELEMNAME_VARIABLE_STRING", "ELEMNAME_WHEN_STRING", "ELEMNAME_WITHPARAM_STRING", "EXSLT_ELEMNAME_FUNCTION_STRING", "EXSLT_ELEMNAME_FUNCRESULT_STRING", "EXSLT_ELEMNAME_FUNCTION", "EXSLT_ELEMNAME_FUNCRESULT", "ATTRNAME_AMOUNT", "ATTRNAME_ANCESTOR", "ATTRNAME_ARCHIVE", "ATTRNAME_ATTRIBUTE", "ATTRNAME_ATTRIBUTE_SET", "ATTRNAME_CASEORDER", "ATTRNAME_CLASS", "ATTRNAME_CLASSID", "ATTRNAME_CODEBASE", "ATTRNAME_CODETYPE", "ATTRNAME_CONDITION", "ATTRNAME_COPYTYPE", "ATTRNAME_COUNT", "ATTRNAME_DATATYPE", "ATTRNAME_DECIMALSEPARATOR", "ATTRNAME_DEFAULT", "ATTRNAME_DEFAULTSPACE", "ATTRNAME_DEPTH", "ATTRNAME_DIGIT", "ATTRNAME_DIGITGROUPSEP", "ATTRNAME_DISABLE_OUTPUT_ESCAPING", "ATTRNAME_ELEMENT", "ATTRNAME_ELEMENTS", "ATTRNAME_EXCLUDE_RESULT_PREFIXES", "ATTRNAME_EXPR", "ATTRNAME_EXTENSIONELEMENTPREFIXES", "ATTRNAME_FORMAT", "ATTRNAME_FROM", "ATTRNAME_GROUPINGSEPARATOR", "ATTRNAME_GROUPINGSIZE", "ATTRNAME_HREF", "ATTRNAME_ID", "ATTRNAME_IMPORTANCE", "ATTRNAME_INDENTRESULT", "ATTRNAME_INFINITY", "ATTRNAME_LANG", "ATTRNAME_LETTERVALUE", "ATTRNAME_LEVEL", "ATTRNAME_MATCH", "ATTRNAME_METHOD", "ATTRNAME_MINUSSIGN", "ATTRNAME_MODE", "ATTRNAME_NAME", "ATTRNAME_NAMESPACE", "ATTRNAME_NAN", "ATTRNAME_NDIGITSPERGROUP", "ATTRNAME_NS", "ATTRNAME_ONLY", "ATTRNAME_ORDER", "ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS", "ATTRNAME_OUTPUT_DOCTYPE_PUBLIC", "ATTRNAME_OUTPUT_DOCTYPE_SYSTEM", "ATTRNAME_OUTPUT_ENCODING", "ATTRNAME_OUTPUT_INDENT", "ATTRNAME_OUTPUT_MEDIATYPE", "ATTRNAME_OUTPUT_METHOD", "ATTRNAME_OUTPUT_OMITXMLDECL", "ATTRNAME_OUTPUT_STANDALONE", "ATTRNAME_OUTPUT_VERSION", "ATTRNAME_PATTERNSEPARATOR", "ATTRNAME_PERCENT", "ATTRNAME_PERMILLE", "ATTRNAME_PRIORITY", "ATTRNAME_REFID", "ATTRNAME_RESULTNS", "ATTRNAME_RESULT_PREFIX", "ATTRNAME_SELECT", "ATTRNAME_SEQUENCESRC", "ATTRNAME_STYLE", "ATTRNAME_STYLESHEET_PREFIX", "ATTRNAME_TERMINATE", "ATTRNAME_TEST", "ATTRNAME_TOSTRING", "ATTRNAME_TYPE", "ATTRNAME_USE", "ATTRNAME_USEATTRIBUTESETS", "ATTRNAME_VALUE", "ATTRNAME_VERSION", "ATTRNAME_XMLNS", "ATTRNAME_XMLNSDEF", "ATTRNAME_XMLSPACE", "ATTRNAME_ZERODIGIT", "TATTRNAME_OUTPUT_METHOD", "TATTRNAME_AMOUNT", "TATTRNAME_ANCESTOR", "TATTRNAME_ARCHIVE", "TATTRNAME_ATTRIBUTE", "TATTRNAME_ATTRIBUTE_SET", "TATTRNAME_CASEORDER", "TATTRNAME_CLASS", "TATTRNAME_CLASSID", "TATTRNAME_CODEBASE", "TATTRNAME_CODETYPE", "TATTRNAME_CONDITION", "TATTRNAME_COPYTYPE", "TATTRNAME_COUNT", "TATTRNAME_DATATYPE", "TATTRNAME_DEFAULT", "TATTRNAME_DEFAULTSPACE", "TATTRNAME_DEPTH", "TATTRNAME_DIGITGROUPSEP", "TATTRNAME_DISABLE_OUTPUT_ESCAPING", "TATTRNAME_ELEMENT", "TATTRNAME_ELEMENTS", "TATTRNAME_EXPR", "TATTRNAME_EXTENSIONELEMENTPREFIXES", "TATTRNAME_FORMAT", "TATTRNAME_FROM", "TATTRNAME_GROUPINGSEPARATOR", "TATTRNAME_GROUPINGSIZE", "TATTRNAME_HREF", "TATTRNAME_ID", "TATTRNAME_IMPORTANCE", "TATTRNAME_INDENTRESULT", "TATTRNAME_LANG", "TATTRNAME_LETTERVALUE", "TATTRNAME_LEVEL", "TATTRNAME_MATCH", "TATTRNAME_METHOD", "TATTRNAME_MODE", "TATTRNAME_NAME", "TATTRNAME_NAMESPACE", "TATTRNAME_NDIGITSPERGROUP", "TATTRNAME_NS", "TATTRNAME_ONLY", "TATTRNAME_ORDER", "TATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS", "TATTRNAME_OUTPUT_DOCTYPE_PUBLIC", "TATTRNAME_OUTPUT_DOCTYPE_SYSTEM", "TATTRNAME_OUTPUT_ENCODING", "TATTRNAME_OUTPUT_INDENT", "TATTRNAME_OUTPUT_MEDIATYPE", "TATTRNAME_OUTPUT_STANDALONE", "TATTRNAME_OUTPUT_VERSION", "TATTRNAME_OUTPUT_OMITXMLDECL", "TATTRNAME_PRIORITY", "TATTRNAME_REFID", "TATTRNAME_RESULTNS", "TATTRNAME_SELECT", "TATTRNAME_SEQUENCESRC", "TATTRNAME_STYLE", "TATTRNAME_TEST", "TATTRNAME_TOSTRING", "TATTRNAME_TYPE", "TATTRNAME_USE", "TATTRNAME_USEATTRIBUTESETS", "TATTRNAME_VALUE", "TATTRNAME_XMLNSDEF", "TATTRNAME_XMLNS", "TATTRNAME_XMLSPACE", "TATTRNAME_EXCLUDE_RESULT_PREFIXES", "ATTRVAL_OUTPUT_METHOD_HTML", "ATTRVAL_OUTPUT_METHOD_XML", "ATTRVAL_OUTPUT_METHOD_TEXT", "ATTRVAL_PRESERVE", "ATTRVAL_STRIP", "ATTRVAL_YES", "ATTRVAL_NO", "ATTRVAL_ALPHABETIC", "ATTRVAL_OTHER", "ATTRVAL_TRADITIONAL", "ATTRVAL_SINGLE", "ATTRVAL_MULTI", "ATTRVAL_ANY", "ATTRVAL_DEFAULT_PREFIX", "NUMBERLETTER_ALPHABETIC", "NUMBERLETTER_TRADITIONAL", "NUMBERLEVEL_SINGLE", "NUMBERLEVEL_MULTI", "NUMBERLEVEL_ANY", "MAX_MULTI_COUNTING_DEPTH", "ATTRVAL_THIS", "ATTRVAL_PARENT", "ATTRVAL_ANCESTOR", "ATTRVAL_ID", "ATTRVAL_DATATYPE_TEXT", "ATTRVAL_DATATYPE_NUMBER", "ATTRVAL_ORDER_ASCENDING", "ATTRVAL_ORDER_DESCENDING", "ATTRVAL_CASEORDER_UPPER", "ATTRVAL_CASEORDER_LOWER", "SORTDATATYPE_TEXT", "SORTDATATYPE_NUMBER", "SORTORDER_ASCENDING", "SORTORDER_DESCENDING", "SORTCASEORDER_UPPERFIRST", "SORTCASEORDER_LOWERFIRST", "ATTRVAL_INFINITY", "ATTRVAL_NAN", "DEFAULT_DECIMAL_FORMAT", "ATTRNAME_XXXX" ]
}