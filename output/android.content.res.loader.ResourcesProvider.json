{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/loader/ResourcesProvider.java",
  "packageName" : "android.content.res.loader",
  "className" : "ResourcesProvider",
  "comment" : "\n * Provides methods to load resources data from APKs ({@code .apk}) and resources tables\n * (eg. {@code resources.arsc}) for use with {@link ResourcesLoader ResourcesLoader(s)}.\n ",
  "links" : [ "android.content.res.loader.ResourcesLoader" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpenCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApkAssets",
    "type" : "ApkAssets",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ResourcesProvider empty(@NonNull AssetsProvider assetsProvider)",
    "returnType" : "ResourcesProvider",
    "comment" : "\n     * Creates an empty ResourcesProvider with no resource data. This is useful for loading\n     * file-based assets not associated with resource identifiers.\n     *\n     * @param assetsProvider the assets provider that implements the loading of file-based resources\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ResourcesProvider loadOverlay(@NonNull OverlayInfo overlayInfo) throws IOException",
    "returnType" : "ResourcesProvider",
    "comment" : "\n     * Creates a ResourcesProvider instance from the specified overlay information.\n     *\n     * <p>In order to enable the registered overlays, an application can create a {@link\n     * ResourcesProvider} instance according to the specified {@link OverlayInfo} instance and put\n     * them into a {@link ResourcesLoader} instance. The application calls {@link\n     * android.content.res.Resources#addLoaders(ResourcesLoader...)} to load the overlays.\n     *\n     * @param overlayInfo is the information about the specified overlay\n     * @return the resources provider instance for the {@code overlayInfo}\n     * @throws IOException when the files can't be loaded.\n     * @see OverlayManager#getOverlayInfosForTarget(String) to get the list of overlay info.\n     ",
    "links" : [ "android.content.om.OverlayInfo", "android.content.res.Resources#addLoaders(ResourcesLoader...)", "android.content.res.loader.ResourcesProvider", "android.content.res.loader.ResourcesLoader" ]
  }, {
    "name" : "public static ResourcesProvider loadFromApk(@NonNull ParcelFileDescriptor fileDescriptor) throws IOException",
    "returnType" : "ResourcesProvider",
    "comment" : "\n     * Creates a ResourcesProvider from an APK ({@code .apk}) file descriptor.\n     *\n     * <p>The file descriptor is duplicated and the original may be closed by the application at any\n     * time without affecting the ResourcesProvider.\n     *\n     * @param fileDescriptor the file descriptor of the APK to load\n     *\n     * @see ParcelFileDescriptor#open(File, int)\n     * @see android.system.Os#memfd_create(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ResourcesProvider loadFromApk(@NonNull ParcelFileDescriptor fileDescriptor, @Nullable AssetsProvider assetsProvider) throws IOException",
    "returnType" : "ResourcesProvider",
    "comment" : "\n     * Creates a ResourcesProvider from an APK ({@code .apk}) file descriptor.\n     *\n     * <p>The file descriptor is duplicated and the original may be closed by the application at any\n     * time without affecting the ResourcesProvider.\n     *\n     * <p>The assets provider can override the loading of files within the APK and can provide\n     * entirely new files that do not exist in the APK.\n     *\n     * @param fileDescriptor the file descriptor of the APK to load\n     * @param assetsProvider the assets provider that overrides the loading of file-based resources\n     *\n     * @see ParcelFileDescriptor#open(File, int)\n     * @see android.system.Os#memfd_create(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ResourcesProvider loadFromApk(@NonNull ParcelFileDescriptor fileDescriptor, long offset, long length, @Nullable AssetsProvider assetsProvider) throws IOException",
    "returnType" : "ResourcesProvider",
    "comment" : "\n     * Creates a ResourcesProvider from an APK ({@code .apk}) file descriptor.\n     *\n     * <p>The file descriptor is duplicated and the original may be closed by the application at any\n     * time without affecting the ResourcesProvider.\n     *\n     * <p>The assets provider can override the loading of files within the APK and can provide\n     * entirely new files that do not exist in the APK.\n     *\n     * @param fileDescriptor the file descriptor of the APK to load\n     * @param offset The location within the file that the apk starts. This must be 0 if length is\n     *               {@link AssetFileDescriptor#UNKNOWN_LENGTH}.\n     * @param length The number of bytes of the apk, or {@link AssetFileDescriptor#UNKNOWN_LENGTH}\n     *               if it extends to the end of the file.\n     * @param assetsProvider the assets provider that overrides the loading of file-based resources\n     *\n     * @see ParcelFileDescriptor#open(File, int)\n     * @see android.system.Os#memfd_create(String, int)\n     * @hide\n     ",
    "links" : [ "android.content.res.AssetFileDescriptor#UNKNOWN_LENGTH" ]
  }, {
    "name" : "public static ResourcesProvider loadFromTable(@NonNull ParcelFileDescriptor fileDescriptor, @Nullable AssetsProvider assetsProvider) throws IOException",
    "returnType" : "ResourcesProvider",
    "comment" : "\n     * Creates a ResourcesProvider from a resources table ({@code .arsc}) file descriptor.\n     *\n     * <p>The file descriptor is duplicated and the original may be closed by the application at any\n     * time without affecting the ResourcesProvider.\n     *\n     * <p>The resources table format is not an archive format and therefore cannot asset files\n     * within itself. The assets provider can instead provide files that are potentially referenced\n     * by path in the resources table.\n     *\n     * @param fileDescriptor the file descriptor of the resources table to load\n     * @param assetsProvider the assets provider that implements the loading of file-based resources\n     *\n     * @see ParcelFileDescriptor#open(File, int)\n     * @see android.system.Os#memfd_create(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ResourcesProvider loadFromTable(@NonNull ParcelFileDescriptor fileDescriptor, long offset, long length, @Nullable AssetsProvider assetsProvider) throws IOException",
    "returnType" : "ResourcesProvider",
    "comment" : "\n     * Creates a ResourcesProvider from a resources table ({@code .arsc}) file descriptor.\n     *\n     * The file descriptor is duplicated and the original may be closed by the application at any\n     * time without affecting the ResourcesProvider.\n     *\n     * <p>The resources table format is not an archive format and therefore cannot asset files\n     * within itself. The assets provider can instead provide files that are potentially referenced\n     * by path in the resources table.\n     *\n     * @param fileDescriptor the file descriptor of the resources table to load\n     * @param offset The location within the file that the table starts. This must be 0 if length is\n     *               {@link AssetFileDescriptor#UNKNOWN_LENGTH}.\n     * @param length The number of bytes of the table, or {@link AssetFileDescriptor#UNKNOWN_LENGTH}\n     *               if it extends to the end of the file.\n     * @param assetsProvider the assets provider that overrides the loading of file-based resources\n     *\n     * @see ParcelFileDescriptor#open(File, int)\n     * @see android.system.Os#memfd_create(String, int)\n     * @hide\n     ",
    "links" : [ "android.content.res.AssetFileDescriptor#UNKNOWN_LENGTH" ]
  }, {
    "name" : "public static ResourcesProvider loadFromSplit(@NonNull Context context, @NonNull String splitName) throws IOException",
    "returnType" : "ResourcesProvider",
    "comment" : "\n     * Read from a split installed alongside the application, which may not have been\n     * loaded initially because the application requested isolated split loading.\n     *\n     * @param context a context of the package that contains the split\n     * @param splitName the name of the split to load\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ResourcesProvider loadFromDirectory(@NonNull String path, @Nullable AssetsProvider assetsProvider) throws IOException",
    "returnType" : "ResourcesProvider",
    "comment" : "\n     * Creates a ResourcesProvider from a directory path.\n     *\n     * File-based resources will be resolved within the directory as if the directory is an APK.\n     *\n     * @param path the path of the directory to treat as an APK\n     * @param assetsProvider the assets provider that overrides the loading of file-based resources\n     ",
    "links" : [ ]
  }, {
    "name" : "public ApkAssets getApkAssets()",
    "returnType" : "ApkAssets",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " final void incrementRefCount()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void decrementRefCount()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Frees internal data structures. Closed providers can no longer be added to\n     * {@link ResourcesLoader ResourcesLoader(s)}.\n     *\n     * @throws IllegalStateException if provider is currently used by a ResourcesLoader\n     ",
    "links" : [ "android.content.res.loader.ResourcesLoader" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ResourcesProvider empty(@NonNull AssetsProvider assetsProvider)", "public static ResourcesProvider loadOverlay(@NonNull OverlayInfo overlayInfo) throws IOException", "public static ResourcesProvider loadFromApk(@NonNull ParcelFileDescriptor fileDescriptor) throws IOException", "public static ResourcesProvider loadFromApk(@NonNull ParcelFileDescriptor fileDescriptor, @Nullable AssetsProvider assetsProvider) throws IOException", "public static ResourcesProvider loadFromApk(@NonNull ParcelFileDescriptor fileDescriptor, long offset, long length, @Nullable AssetsProvider assetsProvider) throws IOException", "public static ResourcesProvider loadFromTable(@NonNull ParcelFileDescriptor fileDescriptor, @Nullable AssetsProvider assetsProvider) throws IOException", "public static ResourcesProvider loadFromTable(@NonNull ParcelFileDescriptor fileDescriptor, long offset, long length, @Nullable AssetsProvider assetsProvider) throws IOException", "public static ResourcesProvider loadFromSplit(@NonNull Context context, @NonNull String splitName) throws IOException", "public static ResourcesProvider loadFromDirectory(@NonNull String path, @Nullable AssetsProvider assetsProvider) throws IOException", "public ApkAssets getApkAssets()", " final void incrementRefCount()", " final void decrementRefCount()", "public void close()", "protected void finalize() throws Throwable" ],
  "variableNames" : [ "TAG", "mLock", "mOpen", "mOpenCount", "mApkAssets" ]
}