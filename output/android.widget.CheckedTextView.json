{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/CheckedTextView.java",
  "packageName" : "android.widget",
  "className" : "CheckedTextView",
  "comment" : "\n * An extension to {@link TextView} that supports the {@link Checkable}\n * interface and displays.\n * <p>\n * This is useful when used in a {@link android.widget.ListView ListView} where\n * the {@link android.widget.ListView#setChoiceMode(int) setChoiceMode} has\n * been set to something other than\n * {@link android.widget.ListView#CHOICE_MODE_NONE CHOICE_MODE_NONE}.\n *\n * @attr ref android.R.styleable#CheckedTextView_checked\n * @attr ref android.R.styleable#CheckedTextView_checkMark\n ",
  "variables" : [ {
    "name" : "mChecked",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCheckMarkResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCheckMarkDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCheckMarkTintList",
    "type" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCheckMarkBlendMode",
    "type" : "BlendMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasCheckMarkTint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasCheckMarkTintMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBasePadding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCheckMarkWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCheckMarkGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNeedRequestlayout",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHECKED_STATE_SET",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void toggle()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isChecked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setChecked(boolean checked)",
    "returnType" : "void",
    "comment" : "\n     * Sets the checked state of this view.\n     *\n     * @param checked {@code true} set the state to checked, {@code false} to\n     *                uncheck\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCheckMarkDrawable(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the check mark to the drawable with the specified resource ID.\n     * <p>\n     * When this view is checked, the drawable's state set will include\n     * {@link android.R.attr#state_checked}.\n     *\n     * @param resId the resource identifier of drawable to use as the check\n     *              mark\n     * @attr ref android.R.styleable#CheckedTextView_checkMark\n     * @see #setCheckMarkDrawable(Drawable)\n     * @see #getCheckMarkDrawable()\n     ",
    "links" : [ "android.R.attr#state_checked" ]
  }, {
    "name" : "public void setCheckMarkDrawable(@Nullable Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Set the check mark to the specified drawable.\n     * <p>\n     * When this view is checked, the drawable's state set will include\n     * {@link android.R.attr#state_checked}.\n     *\n     * @param d the drawable to use for the check mark\n     * @attr ref android.R.styleable#CheckedTextView_checkMark\n     * @see #setCheckMarkDrawable(int)\n     * @see #getCheckMarkDrawable()\n     ",
    "links" : [ "android.R.attr#state_checked" ]
  }, {
    "name" : "private void setCheckMarkDrawableInternal(@Nullable Drawable d, @DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCheckMarkTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the check mark drawable. Does not modify the\n     * current tint mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setCheckMarkDrawable(Drawable)} will\n     * automatically mutate the drawable and apply the specified tint and\n     * tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#CheckedTextView_checkMarkTint\n     * @see #getCheckMarkTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "#setCheckMarkDrawable(Drawable)", "android.graphics.drawable.Drawable#setTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public ColorStateList getCheckMarkTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns the tint applied to the check mark drawable, if specified.\n     *\n     * @return the tint applied to the check mark drawable\n     * @attr ref android.R.styleable#CheckedTextView_checkMarkTint\n     * @see #setCheckMarkTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCheckMarkTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setCheckMarkTintList(ColorStateList)} to the check mark\n     * drawable. The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#CheckedTextView_checkMarkTintMode\n     * @see #setCheckMarkTintList(ColorStateList)\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setCheckMarkTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setCheckMarkTintBlendMode(@Nullable BlendMode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setCheckMarkTintList(ColorStateList)} to the check mark\n     * drawable. The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#CheckedTextView_checkMarkTintMode\n     * @see #setCheckMarkTintList(ColorStateList)\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setCheckMarkTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public PorterDuff.Mode getCheckMarkTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the check mark\n     * drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the check mark\n     *         drawable\n     * @attr ref android.R.styleable#CheckedTextView_checkMarkTintMode\n     * @see #setCheckMarkTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getCheckMarkTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the check mark\n     * drawable, if specified.\n     *\n     * @return the blending mode used to apply the tint to the check mark\n     *         drawable\n     * @attr ref android.R.styleable#CheckedTextView_checkMarkTintMode\n     * @see #setCheckMarkTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyCheckMarkTint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVisibility(int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpDrawablesToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean verifyDrawable(@NonNull Drawable who)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getCheckMarkDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets the checkmark drawable\n     *\n     * @return The drawable use to represent the checkmark, if any.\n     *\n     * @see #setCheckMarkDrawable(Drawable)\n     * @see #setCheckMarkDrawable(int)\n     *\n     * @attr ref android.R.styleable#CheckedTextView_checkMark\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void internalSetPadding(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRtlPropertiesChanged(int layoutDirection)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updatePadding()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setBasePadding(boolean checkmarkAtStart)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isCheckMarkAtStart()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int[] onCreateDrawableState(int extraSpace)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void drawableHotspotChanged(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mChecked", "mCheckMarkResource", "mCheckMarkDrawable", "mCheckMarkTintList", "mCheckMarkBlendMode", "mHasCheckMarkTint", "mHasCheckMarkTintMode", "mBasePadding", "mCheckMarkWidth", "mCheckMarkGravity", "mNeedRequestlayout", "CHECKED_STATE_SET" ],
  "methodNames" : [ "public void toggle()", "public boolean isChecked()", "public void setChecked(boolean checked)", "public void setCheckMarkDrawable(@DrawableRes int resId)", "public void setCheckMarkDrawable(@Nullable Drawable d)", "private void setCheckMarkDrawableInternal(@Nullable Drawable d, @DrawableRes int resId)", "public void setCheckMarkTintList(@Nullable ColorStateList tint)", "public ColorStateList getCheckMarkTintList()", "public void setCheckMarkTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setCheckMarkTintBlendMode(@Nullable BlendMode tintMode)", "public PorterDuff.Mode getCheckMarkTintMode()", "public BlendMode getCheckMarkTintBlendMode()", "private void applyCheckMarkTint()", "public void setVisibility(int visibility)", "public void jumpDrawablesToCurrentState()", "protected boolean verifyDrawable(@NonNull Drawable who)", "public Drawable getCheckMarkDrawable()", "protected void internalSetPadding(int left, int top, int right, int bottom)", "public void onRtlPropertiesChanged(int layoutDirection)", "private void updatePadding()", "private void setBasePadding(boolean checkmarkAtStart)", "private boolean isCheckMarkAtStart()", "protected void onDraw(Canvas canvas)", "protected int[] onCreateDrawableState(int extraSpace)", "protected void drawableStateChanged()", "public void drawableHotspotChanged(float x, float y)", "public CharSequence getAccessibilityClassName()", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)" ]
}