{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/admin/DeviceAdminInfo.java",
  "packageName" : "android.app.admin",
  "className" : "DeviceAdminInfo",
  "comment" : "\n * This class is used to specify meta information of a device administrator\n * component.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USES_POLICY_ORGANIZATION_OWNED_PROFILE_OWNER",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: profile owner on an organization-owned\n     * device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USES_POLICY_DEVICE_OWNER",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: device owner meta-policy\n     * for an admin that is designated as owner of the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USES_POLICY_PROFILE_OWNER",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: profile owner meta-policy\n     * for admins that have been installed as owner of some user profile.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USES_POLICY_LIMIT_PASSWORD",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: limit the passwords\n     * that the user can select, via {@link DevicePolicyManager#setPasswordQuality}\n     * and {@link DevicePolicyManager#setPasswordMinimumLength}.\n     *\n     * <p>To control this policy, the device admin must be a device owner or profile owner,\n     * and must have a \"limit-password\" tag in the \"uses-policies\" section of its meta-data.\n     * If used by a device owner, the policy only affects the primary user and its profiles,\n     * but not any secondary users on the device.\n     ",
    "links" : [ "DevicePolicyManager#setPasswordQuality", "DevicePolicyManager#setPasswordMinimumLength" ]
  }, {
    "name" : "USES_POLICY_WATCH_LOGIN",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: able to watch login\n     * attempts from the user, via {@link DeviceAdminReceiver#ACTION_PASSWORD_FAILED},\n     * {@link DeviceAdminReceiver#ACTION_PASSWORD_SUCCEEDED}, and\n     * {@link DevicePolicyManager#getCurrentFailedPasswordAttempts}.\n     *\n     * <p>To control this policy, the device admin must have a \"watch-login\"\n     * tag in the \"uses-policies\" section of its meta-data.\n     ",
    "links" : [ "DeviceAdminReceiver#ACTION_PASSWORD_FAILED", "DeviceAdminReceiver#ACTION_PASSWORD_SUCCEEDED", "DevicePolicyManager#getCurrentFailedPasswordAttempts" ]
  }, {
    "name" : "USES_POLICY_RESET_PASSWORD",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: able to reset the\n     * user's password via\n     * {@link DevicePolicyManager#resetPassword}.\n     *\n     * <p>To control this policy, the device admin must have a \"reset-password\"\n     * tag in the \"uses-policies\" section of its meta-data.\n     ",
    "links" : [ "DevicePolicyManager#resetPassword" ]
  }, {
    "name" : "USES_POLICY_FORCE_LOCK",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: able to force the device\n     * to lock via{@link DevicePolicyManager#lockNow} or limit the\n     * maximum lock timeout for the device via\n     * {@link DevicePolicyManager#setMaximumTimeToLock}.\n     *\n     * <p>To control this policy, the device admin must have a \"force-lock\"\n     * tag in the \"uses-policies\" section of its meta-data.\n     ",
    "links" : [ "DevicePolicyManager#lockNow", "DevicePolicyManager#setMaximumTimeToLock" ]
  }, {
    "name" : "USES_POLICY_WIPE_DATA",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: able to factory\n     * reset the device, erasing all of the user's data, via\n     * {@link DevicePolicyManager#wipeData}.\n     *\n     * <p>To control this policy, the device admin must have a \"wipe-data\"\n     * tag in the \"uses-policies\" section of its meta-data.\n     ",
    "links" : [ "DevicePolicyManager#wipeData" ]
  }, {
    "name" : "USES_POLICY_SETS_GLOBAL_PROXY",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: able to specify the\n     * device Global Proxy, via {@link DevicePolicyManager#setGlobalProxy}.\n     *\n     * <p>To control this policy, the device admin must have a \"set-global-proxy\"\n     * tag in the \"uses-policies\" section of its meta-data.\n     * @hide\n     ",
    "links" : [ "DevicePolicyManager#setGlobalProxy" ]
  }, {
    "name" : "USES_POLICY_EXPIRE_PASSWORD",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: force the user to\n     * change their password after an administrator-defined time limit.\n     *\n     * <p>To control this policy, the device admin must be a device owner or profile owner,\n     * and must have an \"expire-password\" tag in the \"uses-policies\" section of its meta-data.\n     * If used by a device owner, the policy only affects the primary user and its profiles,\n     * but not any secondary users on the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "USES_ENCRYPTED_STORAGE",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: require encryption of stored data.\n     *\n     * <p>To control this policy, the device admin must have a \"encrypted-storage\"\n     * tag in the \"uses-policies\" section of its meta-data.\n     ",
    "links" : [ ]
  }, {
    "name" : "USES_POLICY_DISABLE_CAMERA",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: disables use of all device cameras.\n     *\n     * <p>To control this policy, the device admin must be a device owner or profile owner,\n     * and must have a \"disable-camera\" tag in the \"uses-policies\" section of its meta-data.\n     * If used by a device owner, the policy affects all users on the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "USES_POLICY_DISABLE_KEYGUARD_FEATURES",
    "type" : "int",
    "comment" : "\n     * A type of policy that this device admin can use: disables use of keyguard features.\n     *\n     * <p>To control this policy, the device admin must be a device owner or profile owner,\n     * and must have a \"disable-keyguard-features\" tag in the \"uses-policies\" section of its\n     * meta-data.  If used by a device owner, the policy only affects the primary user and\n     * its profiles, but not any secondary users on the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "sPoliciesDisplayOrder",
    "type" : "ArrayList<PolicyInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sKnownPolicies",
    "type" : "HashMap<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRevKnownPolicies",
    "type" : "SparseArray<PolicyInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityInfo",
    "type" : "ActivityInfo",
    "comment" : "\n     * The BroadcastReceiver that implements this device admin component.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVisible",
    "type" : "boolean",
    "comment" : "\n     * Whether this should be visible to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUsesPolicies",
    "type" : "int",
    "comment" : "\n     * The policies this administrator needs access to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSupportsTransferOwnership",
    "type" : "boolean",
    "comment" : "\n     * Whether this administrator can be a target in an ownership transfer.\n     *\n     * @see DevicePolicyManager#transferOwnership(ComponentName, ComponentName, PersistableBundle)\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<DeviceAdminInfo>",
    "comment" : "\n     * Used to make this class parcelable.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Return the .apk package that implements this device admin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getReceiverName()",
    "returnType" : "String",
    "comment" : "\n     * Return the class name of the receiver component that implements\n     * this device admin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ActivityInfo getActivityInfo()",
    "returnType" : "ActivityInfo",
    "comment" : "\n     * Return the raw information about the receiver implementing this\n     * device admin.  Do not modify the returned object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return the component of the receiver that implements this device admin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadLabel(PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Load the user-displayed label for this device admin.\n     *\n     * @param pm Supply a PackageManager used to load the device admin's\n     * resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadDescription(PackageManager pm) throws NotFoundException",
    "returnType" : "CharSequence",
    "comment" : "\n     * Load user-visible description associated with this device admin.\n     *\n     * @param pm Supply a PackageManager used to load the device admin's\n     * resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadIcon(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Load the user-displayed icon for this device admin.\n     *\n     * @param pm Supply a PackageManager used to load the device admin's\n     * resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this device admin would like to be visible to the\n     * user, even when it is not enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean usesPolicy(int policyIdent)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the device admin has requested that it be able to use\n     * the given policy control.  The possible policy identifier inputs are:\n     * {@link #USES_POLICY_LIMIT_PASSWORD}, {@link #USES_POLICY_WATCH_LOGIN},\n     * {@link #USES_POLICY_RESET_PASSWORD}, {@link #USES_POLICY_FORCE_LOCK},\n     * {@link #USES_POLICY_WIPE_DATA},\n     * {@link #USES_POLICY_EXPIRE_PASSWORD}, {@link #USES_ENCRYPTED_STORAGE},\n     * {@link #USES_POLICY_DISABLE_CAMERA}.\n     ",
    "links" : [ "#USES_POLICY_LIMIT_PASSWORD", "#USES_POLICY_WATCH_LOGIN", "#USES_POLICY_RESET_PASSWORD", "#USES_POLICY_FORCE_LOCK", "#USES_POLICY_WIPE_DATA", "#USES_POLICY_EXPIRE_PASSWORD", "#USES_ENCRYPTED_STORAGE", "#USES_POLICY_DISABLE_CAMERA" ]
  }, {
    "name" : "public String getTagForPolicy(int policyIdent)",
    "returnType" : "String",
    "comment" : "\n     * Return the XML tag name for the given policy identifier.  Valid identifiers\n     * are as per {@link #usesPolicy(int)}.  If the given identifier is not\n     * known, null is returned.\n     ",
    "links" : [ "#usesPolicy" ]
  }, {
    "name" : "public boolean supportsTransferOwnership()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if this administrator can be a target in an ownership transfer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<PolicyInfo> getUsedPolicies()",
    "returnType" : "ArrayList<PolicyInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writePoliciesToXml(XmlSerializer out) throws IllegalArgumentException, IllegalStateException, IOException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void readPoliciesFromXml(XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dump(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used to package this object into a {@link Parcel}.\n     *\n     * @param dest The {@link Parcel} to be written.\n     * @param flags The flags used for parceling.\n     ",
    "links" : [ "Parcel", "Parcel" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "USES_POLICY_ORGANIZATION_OWNED_PROFILE_OWNER", "USES_POLICY_DEVICE_OWNER", "USES_POLICY_PROFILE_OWNER", "USES_POLICY_LIMIT_PASSWORD", "USES_POLICY_WATCH_LOGIN", "USES_POLICY_RESET_PASSWORD", "USES_POLICY_FORCE_LOCK", "USES_POLICY_WIPE_DATA", "USES_POLICY_SETS_GLOBAL_PROXY", "USES_POLICY_EXPIRE_PASSWORD", "USES_ENCRYPTED_STORAGE", "USES_POLICY_DISABLE_CAMERA", "USES_POLICY_DISABLE_KEYGUARD_FEATURES", "sPoliciesDisplayOrder", "sKnownPolicies", "sRevKnownPolicies", "mActivityInfo", "mVisible", "mUsesPolicies", "mSupportsTransferOwnership", "CREATOR" ],
  "methodNames" : [ "public String getPackageName()", "public String getReceiverName()", "public ActivityInfo getActivityInfo()", "public ComponentName getComponent()", "public CharSequence loadLabel(PackageManager pm)", "public CharSequence loadDescription(PackageManager pm) throws NotFoundException", "public Drawable loadIcon(PackageManager pm)", "public boolean isVisible()", "public boolean usesPolicy(int policyIdent)", "public String getTagForPolicy(int policyIdent)", "public boolean supportsTransferOwnership()", "public ArrayList<PolicyInfo> getUsedPolicies()", "public void writePoliciesToXml(XmlSerializer out) throws IllegalArgumentException, IllegalStateException, IOException", "public void readPoliciesFromXml(XmlPullParser parser) throws XmlPullParserException, IOException", "public void dump(Printer pw, String prefix)", "public String toString()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ]
}