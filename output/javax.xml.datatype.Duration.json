{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/datatype/Duration.java",
  "packageName" : "javax.xml.datatype",
  "className" : "Duration",
  "comment" : "\n * <p>Immutable representation of a time span as defined in\n * the W3C XML Schema 1.0 specification.</p>\n *\n * <p>A Duration object represents a period of Gregorian time,\n * which consists of six fields (years, months, days, hours,\n * minutes, and seconds) plus a sign (+/-) field.</p>\n *\n * <p>The first five fields have non-negative (>=0) integers or null\n * (which represents that the field is not set),\n * and the seconds field has a non-negative decimal or null.\n * A negative sign indicates a negative duration.</p>\n *\n * <p>This class provides a number of methods that make it easy\n * to use for the duration datatype of XML Schema 1.0 with\n * the errata.</p>\n *\n * <h2>Order relationship</h2>\n * <p>Duration objects only have partial order, where two values A and B\n * maybe either:</p>\n * <ol>\n *  <li>A&lt;B (A is shorter than B)\n *  <li>A&gt;B (A is longer than B)\n *  <li>A==B   (A and B are of the same duration)\n *  <li>A&lt;>B (Comparison between A and B is indeterminate)\n * </ol>\n *\n * <p>For example, 30 days cannot be meaningfully compared to one month.\n * The {@link #compare(Duration duration)} method implements this\n * relationship.</p>\n *\n * <p>See the {@link #isLongerThan(Duration)} method for details about\n * the order relationship among <code>Duration</code> objects.</p>\n *\n * <h2>Operations over Duration</h2>\n * <p>This class provides a set of basic arithmetic operations, such\n * as addition, subtraction and multiplication.\n * Because durations don't have total order, an operation could\n * fail for some combinations of operations. For example, you cannot\n * subtract 15 days from 1 month. See the javadoc of those methods\n * for detailed conditions where this could happen.</p>\n *\n * <p>Also, division of a duration by a number is not provided because\n * the <code>Duration</code> class can only deal with finite precision\n * decimal numbers. For example, one cannot represent 1 sec divided by 3.</p>\n *\n * <p>However, you could substitute a division by 3 with multiplying\n * by numbers such as 0.3 or 0.333.</p>\n *\n * <h2>Range of allowed values</h2>\n * <p>\n * Because some operations of <code>Duration</code> rely on {@link Calendar}\n * even though {@link Duration} can hold very large or very small values,\n * some of the methods may not work correctly on such <code>Duration</code>s.\n * The impacted methods document their dependency on {@link Calendar}.\n *\n *\n * @author <a href=\"mailto:Joseph.Fialli@Sun.COM\">Joseph Fialli</a>\n * @author <a href=\"mailto:Kohsuke.Kawaguchi@Sun.com\">Kohsuke Kawaguchi</a>\n * @author <a href=\"mailto:Jeff.Suttor@Sun.com\">Jeff Suttor</a>\n * @version $Revision: 759828 $, $Date: 2009-03-29 18:26:29 -0700 (Sun, 29 Mar 2009) $\n * @see XMLGregorianCalendar#add(Duration)\n * @since 1.5\n ",
  "links" : [ "java.util.Calendar", "javax.xml.datatype.Duration", "#isLongerThan(Duration)", "#compare(Duration" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public QName getXMLSchemaType()",
    "returnType" : "QName",
    "comment" : "\n     * <p>Return the name of the XML Schema date/time type that this instance\n     * maps to. Type is computed based on fields that are set,\n     * i.e. {@link #isSet(DatatypeConstants.Field field)} == <code>true</code>.</p>\n     *\n     * <table border=\"2\" rules=\"all\" cellpadding=\"2\">\n     *   <thead>\n     *     <tr>\n     *       <th align=\"center\" colspan=\"7\">\n     *         Required fields for XML Schema 1.0 Date/Time Datatypes.<br/>\n     *         <i>(timezone is optional for all date/time datatypes)</i>\n     *       </th>\n     *     </tr>\n     *   </thead>\n     *   <tbody>\n     *     <tr>\n     *       <td>Datatype</td>\n     *       <td>year</td>\n     *       <td>month</td>\n     *       <td>day</td>\n     *       <td>hour</td>\n     *       <td>minute</td>\n     *       <td>second</td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#DURATION}</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#DURATION_DAYTIME}</td>\n     *       <td></td>\n     *       <td></td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#DURATION_YEARMONTH}</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *     </tr>\n     *   </tbody>\n     * </table>\n     *\n     * @return one of the following constants:\n     *   {@link DatatypeConstants#DURATION},\n     *   {@link DatatypeConstants#DURATION_DAYTIME} or\n     *   {@link DatatypeConstants#DURATION_YEARMONTH}.\n     *\n     * @throws IllegalStateException If the combination of set fields does not match one of the XML Schema date/time datatypes.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#DURATION_YEARMONTH", "javax.xml.datatype.DatatypeConstants#DURATION_DAYTIME", "javax.xml.datatype.DatatypeConstants#DURATION", "#isSet(DatatypeConstants.Field" ]
  }, {
    "name" : "public abstract int getSign()",
    "returnType" : "int",
    "comment" : "\n     * Returns the sign of this duration in -1,0, or 1.\n     *\n     * @return\n     *      -1 if this duration is negative, 0 if the duration is zero,\n     *      and 1 if the duration is positive.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getYears()",
    "returnType" : "int",
    "comment" : "\n     * <p>Get the years value of this <code>Duration</code> as an <code>int</code> or <code>0</code> if not present.</p>\n     *\n     * <p><code>getYears()</code> is a convenience method for\n     * {@link #getField(DatatypeConstants.Field field) getField(DatatypeConstants.YEARS)}.</p>\n     *\n     * <p>As the return value is an <code>int</code>, an incorrect value will be returned for <code>Duration</code>s\n     * with years that go beyond the range of an <code>int</code>.\n     * Use {@link #getField(DatatypeConstants.Field field) getField(DatatypeConstants.YEARS)} to avoid possible loss of precision.</p>\n     *\n     * @return If the years field is present, return its value as an <code>int</code>, else return <code>0</code>.\n     ",
    "links" : [ "#getField(DatatypeConstants.Field" ]
  }, {
    "name" : "public int getMonths()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the value of the MONTHS field as an integer value,\n     * or 0 if not present.\n     *\n     * This method works just like {@link #getYears()} except\n     * that this method works on the MONTHS field.\n     *\n     * @return Months of this <code>Duration</code>.\n     ",
    "links" : [ "#getYears()" ]
  }, {
    "name" : "public int getDays()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the value of the DAYS field as an integer value,\n     * or 0 if not present.\n     *\n     * This method works just like {@link #getYears()} except\n     * that this method works on the DAYS field.\n     *\n     * @return Days of this <code>Duration</code>.\n     ",
    "links" : [ "#getYears()" ]
  }, {
    "name" : "public int getHours()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the value of the HOURS field as an integer value,\n     * or 0 if not present.\n     *\n     * This method works just like {@link #getYears()} except\n     * that this method works on the HOURS field.\n     *\n     * @return Hours of this <code>Duration</code>.\n     *\n     ",
    "links" : [ "#getYears()" ]
  }, {
    "name" : "public int getMinutes()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the value of the MINUTES field as an integer value,\n     * or 0 if not present.\n     *\n     * This method works just like {@link #getYears()} except\n     * that this method works on the MINUTES field.\n     *\n     * @return Minutes of this <code>Duration</code>.\n     *\n     ",
    "links" : [ "#getYears()" ]
  }, {
    "name" : "public int getSeconds()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the value of the SECONDS field as an integer value,\n     * or 0 if not present.\n     *\n     * This method works just like {@link #getYears()} except\n     * that this method works on the SECONDS field.\n     *\n     * @return seconds in the integer value. The fraction of seconds\n     *   will be discarded (for example, if the actual value is 2.5,\n     *   this method returns 2)\n     ",
    "links" : [ "#getYears()" ]
  }, {
    "name" : "public long getTimeInMillis(final Calendar startInstant)",
    "returnType" : "long",
    "comment" : "\n     * <p>Returns the length of the duration in milliseconds.</p>\n     *\n     * <p>If the seconds field carries more digits than millisecond order,\n     * those will be simply discarded (or in other words, rounded to zero.)\n     * For example, for any Calendar value <code>x</code>,</p>\n     * <pre>\n     * <code>new Duration(\"PT10.00099S\").getTimeInMills(x) == 10000</code>.\n     * <code>new Duration(\"-PT10.00099S\").getTimeInMills(x) == -10000</code>.\n     * </pre>\n     *\n     * <p>\n     * Note that this method uses the {@link #addTo(Calendar)} method,\n     * which may work incorrectly with <code>Duration</code> objects with\n     * very large values in its fields. See the {@link #addTo(Calendar)}\n     * method for details.\n     *\n     * @param startInstant\n     *      The length of a month/year varies. The <code>startInstant</code> is\n     *      used to disambiguate this variance. Specifically, this method\n     *      returns the difference between <code>startInstant</code> and\n     *      <code>startInstant+duration</code>\n     *\n     * @return milliseconds between <code>startInstant</code> and\n     *   <code>startInstant</code> plus this <code>Duration</code>\n     *\n     * @throws NullPointerException if <code>startInstant</code> parameter\n     * is null.\n     *\n     ",
    "links" : [ "#addTo(Calendar)" ]
  }, {
    "name" : "public long getTimeInMillis(final Date startInstant)",
    "returnType" : "long",
    "comment" : "\n     * <p>Returns the length of the duration in milliseconds.</p>\n     *\n     * <p>If the seconds field carries more digits than millisecond order,\n     * those will be simply discarded (or in other words, rounded to zero.)\n     * For example, for any <code>Date</code> value <code>x</code>,</p>\n     * <pre>\n     * <code>new Duration(\"PT10.00099S\").getTimeInMills(x) == 10000</code>.\n     * <code>new Duration(\"-PT10.00099S\").getTimeInMills(x) == -10000</code>.\n     * </pre>\n     *\n     * <p>\n     * Note that this method uses the {@link #addTo(Date)} method,\n     * which may work incorrectly with <code>Duration</code> objects with\n     * very large values in its fields. See the {@link #addTo(Date)}\n     * method for details.\n     *\n     * @param startInstant\n     *      The length of a month/year varies. The <code>startInstant</code> is\n     *      used to disambiguate this variance. Specifically, this method\n     *      returns the difference between <code>startInstant</code> and\n     *      <code>startInstant+duration</code>.\n     *\n     * @throws NullPointerException\n     *      If the startInstant parameter is null.\n     *\n     * @return milliseconds between <code>startInstant</code> and\n     *   <code>startInstant</code> plus this <code>Duration</code>\n     *\n     * @see #getTimeInMillis(Calendar)\n     ",
    "links" : [ "#addTo(Date)" ]
  }, {
    "name" : "public abstract Number getField(final DatatypeConstants.Field field)",
    "returnType" : "Number",
    "comment" : "\n     * Gets the value of a field.\n     *\n     * Fields of a duration object may contain arbitrary large value.\n     * Therefore this method is designed to return a {@link Number} object.\n     *\n     * In case of YEARS, MONTHS, DAYS, HOURS, and MINUTES, the returned\n     * number will be a non-negative integer. In case of seconds,\n     * the returned number may be a non-negative decimal value.\n     *\n     * @param field\n     *      one of the six Field constants (YEARS,MONTHS,DAYS,HOURS,\n     *      MINUTES, or SECONDS.)\n     * @return\n     *      If the specified field is present, this method returns\n     *      a non-null non-negative {@link Number} object that\n     *      represents its value. If it is not present, return null.\n     *      For YEARS, MONTHS, DAYS, HOURS, and MINUTES, this method\n     *      returns a {@link java.math.BigInteger} object. For SECONDS, this\n     *      method returns a {@link java.math.BigDecimal}.\n     *\n     * @throws NullPointerException If the <code>field</code> is <code>null</code>.\n     ",
    "links" : [ "java.math.BigDecimal", "Number", "java.math.BigInteger" ]
  }, {
    "name" : "private int getFieldValueAsInt(final DatatypeConstants.Field field)",
    "returnType" : "int",
    "comment" : "\n     * Gets the value of a field as an <code>int</code>.\n     *\n     * @param field\n     *      one of the six Field constants (YEARS,MONTHS,DAYS,HOURS,\n     *      MINUTES, or SECONDS.)\n     * @return\n     *      If the field is present, return its value as an <code>int</code>,\n     *      else return <code>0</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isSet(final DatatypeConstants.Field field)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a field is set.\n     *\n     * A field of a duration object may or may not be present.\n     * This method can be used to test if a field is present.\n     *\n     * @param field\n     *      one of the six Field constants (YEARS,MONTHS,DAYS,HOURS,\n     *      MINUTES, or SECONDS.)\n     * @return\n     *      true if the field is present. false if not.\n     *\n     * @throws NullPointerException\n     *      If the field parameter is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Duration add(final Duration rhs)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Computes a new duration whose value is <code>this+rhs</code>.</p>\n     *\n     * <p>For example,</p>\n     * <pre>\n     * \"1 day\" + \"-3 days\" = \"-2 days\"\n     * \"1 year\" + \"1 day\" = \"1 year and 1 day\"\n     * \"-(1 hour,50 minutes)\" + \"-20 minutes\" = \"-(1 hours,70 minutes)\"\n     * \"15 hours\" + \"-3 days\" = \"-(2 days,9 hours)\"\n     * \"1 year\" + \"-1 day\" = IllegalStateException\n     * </pre>\n     *\n     * <p>Since there's no way to meaningfully subtract 1 day from 1 month,\n     * there are cases where the operation fails in\n     * {@link IllegalStateException}.</p>\n     *\n     * <p>\n     * Formally, the computation is defined as follows.</p>\n     * <p>\n     * Firstly, we can assume that two <code>Duration</code>s to be added\n     * are both positive without losing generality (i.e.,\n     * <code>(-X)+Y=Y-X</code>, <code>X+(-Y)=X-Y</code>,\n     * <code>(-X)+(-Y)=-(X+Y)</code>)\n     *\n     * <p>\n     * Addition of two positive <code>Duration</code>s are simply defined as\n     * field by field addition where missing fields are treated as 0.\n     * <p>\n     * A field of the resulting <code>Duration</code> will be unset if and\n     * only if respective fields of two input <code>Duration</code>s are unset.\n     * <p>\n     * Note that <code>lhs.add(rhs)</code> will be always successful if\n     * <code>lhs.signum()*rhs.signum()!=-1</code> or both of them are\n     * normalized.</p>\n     *\n     * @param rhs <code>Duration</code> to add to this <code>Duration</code>\n     *\n     * @return\n     *      non-null valid Duration object.\n     *\n     * @throws NullPointerException\n     *      If the rhs parameter is null.\n     * @throws IllegalStateException\n     *      If two durations cannot be meaningfully added. For\n     *      example, adding negative one day to one month causes\n     *      this exception.\n     *\n     *\n     * @see #subtract(Duration)\n     ",
    "links" : [ "IllegalStateException" ]
  }, {
    "name" : "public abstract void addTo(Calendar calendar)",
    "returnType" : "void",
    "comment" : "\n     * Adds this duration to a {@link Calendar} object.\n     *\n     * <p>\n     * Calls {@link java.util.Calendar#add(int,int)} in the\n     * order of YEARS, MONTHS, DAYS, HOURS, MINUTES, SECONDS, and MILLISECONDS\n     * if those fields are present. Because the {@link Calendar} class\n     * uses int to hold values, there are cases where this method\n     * won't work correctly (for example if values of fields\n     * exceed the range of int.)\n     * </p>\n     *\n     * <p>\n     * Also, since this duration class is a Gregorian duration, this\n     * method will not work correctly if the given {@link Calendar}\n     * object is based on some other calendar systems.\n     * </p>\n     *\n     * <p>\n     * Any fractional parts of this <code>Duration</code> object\n     * beyond milliseconds will be simply ignored. For example, if\n     * this duration is \"P1.23456S\", then 1 is added to SECONDS,\n     * 234 is added to MILLISECONDS, and the rest will be unused.\n     * </p>\n     *\n     * <p>\n     * Note that because {@link Calendar#add(int, int)} is using\n     * <tt>int</tt>, <code>Duration</code> with values beyond the\n     * range of <tt>int</tt> in its fields\n     * will cause overflow/underflow to the given {@link Calendar}.\n     * {@link XMLGregorianCalendar#add(Duration)} provides the same\n     * basic operation as this method while avoiding\n     * the overflow/underflow issues.\n     *\n     * @param calendar\n     *      A calendar object whose value will be modified.\n     * @throws NullPointerException\n     *      if the calendar parameter is null.\n     ",
    "links" : [ "java.util.Calendar", "java.util.Calendar#add(int", "javax.xml.datatype.XMLGregorianCalendar#add(Duration)" ]
  }, {
    "name" : "public void addTo(Date date)",
    "returnType" : "void",
    "comment" : "\n     * Adds this duration to a {@link Date} object.\n     *\n     * <p>\n     * The given date is first converted into\n     * a {@link java.util.GregorianCalendar}, then the duration\n     * is added exactly like the {@link #addTo(Calendar)} method.\n     *\n     * <p>\n     * The updated time instant is then converted back into a\n     * {@link Date} object and used to update the given {@link Date} object.\n     *\n     * <p>\n     * This somewhat redundant computation is necessary to unambiguously\n     * determine the duration of months and years.\n     *\n     * @param date\n     *      A date object whose value will be modified.\n     * @throws NullPointerException\n     *      if the date parameter is null.\n     ",
    "links" : [ "java.util.GregorianCalendar", "java.util.Date", "#addTo(Calendar)" ]
  }, {
    "name" : "public Duration subtract(final Duration rhs)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Computes a new duration whose value is <code>this-rhs</code>.</p>\n     *\n     * <p>For example:</p>\n     * <pre>\n     * \"1 day\" - \"-3 days\" = \"4 days\"\n     * \"1 year\" - \"1 day\" = IllegalStateException\n     * \"-(1 hour,50 minutes)\" - \"-20 minutes\" = \"-(1hours,30 minutes)\"\n     * \"15 hours\" - \"-3 days\" = \"3 days and 15 hours\"\n     * \"1 year\" - \"-1 day\" = \"1 year and 1 day\"\n     * </pre>\n     *\n     * <p>Since there's no way to meaningfully subtract 1 day from 1 month,\n     * there are cases where the operation fails in {@link IllegalStateException}.</p>\n     *\n     * <p>Formally the computation is defined as follows.\n     * First, we can assume that two <code>Duration</code>s are both positive\n     * without losing generality.  (i.e.,\n     * <code>(-X)-Y=-(X+Y)</code>, <code>X-(-Y)=X+Y</code>,\n     * <code>(-X)-(-Y)=-(X-Y)</code>)</p>\n     *\n     * <p>Then two durations are subtracted field by field.\n     * If the sign of any non-zero field <tt>F</tt> is different from\n     * the sign of the most significant field,\n     * 1 (if <tt>F</tt> is negative) or -1 (otherwise)\n     * will be borrowed from the next bigger unit of <tt>F</tt>.</p>\n     *\n     * <p>This process is repeated until all the non-zero fields have\n     * the same sign.</p>\n     *\n     * <p>If a borrow occurs in the days field (in other words, if\n     * the computation needs to borrow 1 or -1 month to compensate\n     * days), then the computation fails by throwing an\n     * {@link IllegalStateException}.</p>\n     *\n     * @param rhs <code>Duration</code> to subtract from this <code>Duration</code>.\n     *\n     * @return New <code>Duration</code> created from subtracting <code>rhs</code> from this <code>Duration</code>.\n     *\n     * @throws IllegalStateException\n     *      If two durations cannot be meaningfully subtracted. For\n     *      example, subtracting one day from one month causes\n     *      this exception.\n     *\n     * @throws NullPointerException\n     *      If the rhs parameter is null.\n     *\n     * @see #add(Duration)\n     ",
    "links" : [ "IllegalStateException" ]
  }, {
    "name" : "public Duration multiply(int factor)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Computes a new duration whose value is <code>factor</code> times\n     * longer than the value of this duration.</p>\n     *\n     * <p>This method is provided for the convenience.\n     * It is functionally equivalent to the following code:</p>\n     * <pre>\n     * multiply(new BigDecimal(String.valueOf(factor)))\n     * </pre>\n     *\n     * @param factor Factor times longer of new <code>Duration</code> to create.\n     *\n     * @return New <code>Duration</code> that is <code>factor</code>times longer than this <code>Duration</code>.\n     *\n     * @see #multiply(BigDecimal)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Duration multiply(final BigDecimal factor)",
    "returnType" : "Duration",
    "comment" : "\n     * Computes a new duration whose value is <code>factor</code> times\n     * longer than the value of this duration.\n     *\n     * <p>\n     * For example,\n     * <pre>\n     * \"P1M\" (1 month) * \"12\" = \"P12M\" (12 months)\n     * \"PT1M\" (1 min) * \"0.3\" = \"PT18S\" (18 seconds)\n     * \"P1M\" (1 month) * \"1.5\" = IllegalStateException\n     * </pre>\n     *\n     * <p>\n     * Since the <code>Duration</code> class is immutable, this method\n     * doesn't change the value of this object. It simply computes\n     * a new Duration object and returns it.\n     *\n     * <p>\n     * The operation will be performed field by field with the precision\n     * of {@link BigDecimal}. Since all the fields except seconds are\n     * restricted to hold integers,\n     * any fraction produced by the computation will be\n     * carried down toward the next lower unit. For example,\n     * if you multiply \"P1D\" (1 day) with \"0.5\", then it will be 0.5 day,\n     * which will be carried down to \"PT12H\" (12 hours).\n     * When fractions of month cannot be meaningfully carried down\n     * to days, or year to months, this will cause an\n     * {@link IllegalStateException} to be thrown.\n     * For example if you multiple one month by 0.5.</p>\n     *\n     * <p>\n     * To avoid {@link IllegalStateException}, use\n     * the {@link #normalizeWith(Calendar)} method to remove the years\n     * and months fields.\n     *\n     * @param factor to multiply by\n     *\n     * @return\n     *      returns a non-null valid <code>Duration</code> object\n     *\n     * @throws IllegalStateException if operation produces fraction in\n     * the months field.\n     *\n     * @throws NullPointerException if the <code>factor</code> parameter is\n     * <code>null</code>.\n     *\n     ",
    "links" : [ "java.math.BigDecimal", "IllegalStateException", "#normalizeWith(Calendar)" ]
  }, {
    "name" : "public abstract Duration negate()",
    "returnType" : "Duration",
    "comment" : "\n     * Returns a new <code>Duration</code> object whose\n     * value is <code>-this</code>.\n     *\n     * <p>\n     * Since the <code>Duration</code> class is immutable, this method\n     * doesn't change the value of this object. It simply computes\n     * a new Duration object and returns it.\n     *\n     * @return\n     *      always return a non-null valid <code>Duration</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Duration normalizeWith(final Calendar startTimeInstant)",
    "returnType" : "Duration",
    "comment" : "\n     * <p>Converts the years and months fields into the days field\n     * by using a specific time instant as the reference point.</p>\n     *\n     * <p>For example, duration of one month normalizes to 31 days\n     * given the start time instance \"July 8th 2003, 17:40:32\".</p>\n     *\n     * <p>Formally, the computation is done as follows:</p>\n     * <ol>\n     *  <li>the given Calendar object is cloned</li>\n     *  <li>the years, months and days fields will be added to the {@link Calendar} object\n     *      by using the {@link Calendar#add(int,int)} method</li>\n     *  <li>the difference between the two Calendars in computed in milliseconds and converted to days,\n     *     if a remainder occurs due to Daylight Savings Time, it is discarded</li>\n     *  <li>the computed days, along with the hours, minutes and seconds\n     *      fields of this duration object is used to construct a new\n     *      Duration object.</li>\n     * </ol>\n     *\n     * <p>Note that since the Calendar class uses <code>int</code> to\n     * hold the value of year and month, this method may produce\n     * an unexpected result if this duration object holds\n     * a very large value in the years or months fields.</p>\n     *\n     * @param startTimeInstant <code>Calendar</code> reference point.\n     *\n     * @return <code>Duration</code> of years and months of this <code>Duration</code> as days.\n     *\n     * @throws NullPointerException If the startTimeInstant parameter is null.\n     ",
    "links" : [ "java.util.Calendar", "java.util.Calendar#add(int" ]
  }, {
    "name" : "public abstract int compare(final Duration duration)",
    "returnType" : "int",
    "comment" : "\n     * <p>Partial order relation comparison with this <code>Duration</code> instance.</p>\n     *\n     * <p>Comparison result must be in accordance with\n     * <a href=\"http://www.w3.org/TR/xmlschema-2/#duration-order\">W3C XML Schema 1.0 Part 2, Section 3.2.7.6.2,\n     * <i>Order relation on duration</i></a>.</p>\n     *\n     * <p>Return:</p>\n     * <ul>\n     *   <li>{@link DatatypeConstants#LESSER} if this <code>Duration</code> is shorter than <code>duration</code> parameter</li>\n     *   <li>{@link DatatypeConstants#EQUAL} if this <code>Duration</code> is equal to <code>duration</code> parameter</li>\n     *   <li>{@link DatatypeConstants#GREATER} if this <code>Duration</code> is longer than <code>duration</code> parameter</li>\n     *   <li>{@link DatatypeConstants#INDETERMINATE} if a conclusive partial order relation cannot be determined</li>\n     * </ul>\n     *\n     * @param duration to compare\n     *\n     * @return the relationship between <code>this</code> <code>Duration</code>and <code>duration</code> parameter as\n     *   {@link DatatypeConstants#LESSER}, {@link DatatypeConstants#EQUAL}, {@link DatatypeConstants#GREATER}\n     *   or {@link DatatypeConstants#INDETERMINATE}.\n     *\n     * @throws UnsupportedOperationException If the underlying implementation\n     *   cannot reasonably process the request, e.g. W3C XML Schema allows for\n     *   arbitrarily large/small/precise values, the request may be beyond the\n     *   implementations capability.\n     * @throws NullPointerException if <code>duration</code> is <code>null</code>.\n     *\n     * @see #isShorterThan(Duration)\n     * @see #isLongerThan(Duration)\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#GREATER", "javax.xml.datatype.DatatypeConstants#LESSER", "javax.xml.datatype.DatatypeConstants#INDETERMINATE", "javax.xml.datatype.DatatypeConstants#EQUAL" ]
  }, {
    "name" : "public boolean isLongerThan(final Duration duration)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Checks if this duration object is strictly longer than\n     * another <code>Duration</code> object.</p>\n     *\n     * <p>Duration X is \"longer\" than Y if and only if X>Y\n     * as defined in the section 3.2.6.2 of the XML Schema 1.0\n     * specification.</p>\n     *\n     * <p>For example, \"P1D\" (one day) > \"PT12H\" (12 hours) and\n     * \"P2Y\" (two years) > \"P23M\" (23 months).</p>\n     *\n     * @param duration <code>Duration</code> to test this <code>Duration</code> against.\n     *\n     * @throws UnsupportedOperationException If the underlying implementation\n     *   cannot reasonably process the request, e.g. W3C XML Schema allows for\n     *   arbitrarily large/small/precise values, the request may be beyond the\n     *   implementations capability.\n     * @throws NullPointerException If <code>duration</code> is null.\n     *\n     * @return\n     *      true if the duration represented by this object\n     *      is longer than the given duration. false otherwise.\n     *\n     * @see #isShorterThan(Duration)\n     * @see #compare(Duration duration)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isShorterThan(final Duration duration)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Checks if this duration object is strictly shorter than\n     * another <code>Duration</code> object.</p>\n     *\n     * @param duration <code>Duration</code> to test this <code>Duration</code> against.\n     *\n     * @return <code>true</code> if <code>duration</code> parameter is shorter than this <code>Duration</code>,\n     *   else <code>false</code>.\n     *\n     * @throws UnsupportedOperationException If the underlying implementation\n     *   cannot reasonably process the request, e.g. W3C XML Schema allows for\n     *   arbitrarily large/small/precise values, the request may be beyond the\n     *   implementations capability.\n     * @throws NullPointerException if <code>duration</code> is null.\n     *\n     * @see #isLongerThan(Duration duration)\n     * @see #compare(Duration duration)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(final Object duration)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Checks if this duration object has the same duration\n     * as another <code>Duration</code> object.</p>\n     *\n     * <p>For example, \"P1D\" (1 day) is equal to \"PT24H\" (24 hours).</p>\n     *\n     * <p>Duration X is equal to Y if and only if time instant\n     * t+X and t+Y are the same for all the test time instants\n     * specified in the section 3.2.6.2 of the XML Schema 1.0\n     * specification.</p>\n     *\n     * <p>Note that there are cases where two <code>Duration</code>s are\n     * \"incomparable\" to each other, like one month and 30 days.\n     * For example,</p>\n     * <pre>\n     * !new Duration(\"P1M\").isShorterThan(new Duration(\"P30D\"))\n     * !new Duration(\"P1M\").isLongerThan(new Duration(\"P30D\"))\n     * !new Duration(\"P1M\").equals(new Duration(\"P30D\"))\n     * </pre>\n     *\n     * @param duration\n     *      A non-null valid <code>Duration</code> object.\n     *\n     * @return\n     *      <code>true</code> if this duration is the same length as\n     *         <code>duration</code>.\n     *      <code>false</code> if <code>duration</code> is not a\n     *         <code>Duration</code> object, is <code>null</code>,\n     *         or its length is different from this duration.\n     *\n     * @throws UnsupportedOperationException If the underlying implementation\n     *   cannot reasonably process the request, e.g. W3C XML Schema allows for\n     *   arbitrarily large/small/precise values, the request may be beyond the\n     *   implementations capability.\n     *\n     * @see #compare(Duration duration)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code consistent with the definition of the equals method.\n     *\n     * @see Object#hashCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * <p>Returns a <code>String</code> representation of this <code>Duration</code> <code>Object</code>.</p>\n     *\n     * <p>The result is formatted according to the XML Schema 1.0 specification and can be always parsed back later into the\n     * equivalent <code>Duration</code> <code>Object</code> by {@link DatatypeFactory#newDuration(String  lexicalRepresentation)}.</p>\n     *\n     * <p>Formally, the following holds for any <code>Duration</code>\n     * <code>Object</code> x:</p>\n     * <pre>\n     * new Duration(x.toString()).equals(x)\n     * </pre>\n     *\n     * @return A non-<code>null</code> valid <code>String</code> representation of this <code>Duration</code>.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeFactory#newDuration(String" ]
  }, {
    "name" : "private String toString(BigDecimal bd)",
    "returnType" : "String",
    "comment" : "\n     * <p>Turns {@link BigDecimal} to a string representation.</p>\n     *\n     * <p>Due to a behavior change in the {@link BigDecimal#toString()}\n     * method in JDK1.5, this had to be implemented here.</p>\n     *\n     * @param bd <code>BigDecimal</code> to format as a <code>String</code>\n     *\n     * @return  <code>String</code> representation of <code>BigDecimal</code>\n     ",
    "links" : [ "java.math.BigDecimal", "java.math.BigDecimal#toString()" ]
  }, {
    "name" : "private static long getCalendarTimeInMillis(final Calendar cal)",
    "returnType" : "long",
    "comment" : "\n     * <p>Calls the {@link Calendar#getTimeInMillis} method.\n     * Prior to JDK1.4, this method was protected and therefore\n     * cannot be invoked directly.</p>\n     *\n     * <p>TODO: In future, this should be replaced by <code>cal.getTimeInMillis()</code>.</p>\n     *\n     * @param cal <code>Calendar</code> to get time in milliseconds.\n     *\n     * @return Milliseconds of <code>cal</code>.\n     ",
    "links" : [ "java.util.Calendar#getTimeInMillis" ]
  } ],
  "methodNames" : [ "public QName getXMLSchemaType()", "public abstract int getSign()", "public int getYears()", "public int getMonths()", "public int getDays()", "public int getHours()", "public int getMinutes()", "public int getSeconds()", "public long getTimeInMillis(final Calendar startInstant)", "public long getTimeInMillis(final Date startInstant)", "public abstract Number getField(final DatatypeConstants.Field field)", "private int getFieldValueAsInt(final DatatypeConstants.Field field)", "public abstract boolean isSet(final DatatypeConstants.Field field)", "public abstract Duration add(final Duration rhs)", "public abstract void addTo(Calendar calendar)", "public void addTo(Date date)", "public Duration subtract(final Duration rhs)", "public Duration multiply(int factor)", "public abstract Duration multiply(final BigDecimal factor)", "public abstract Duration negate()", "public abstract Duration normalizeWith(final Calendar startTimeInstant)", "public abstract int compare(final Duration duration)", "public boolean isLongerThan(final Duration duration)", "public boolean isShorterThan(final Duration duration)", "public boolean equals(final Object duration)", "public abstract int hashCode()", "public String toString()", "private String toString(BigDecimal bd)", "private static long getCalendarTimeInMillis(final Calendar cal)" ],
  "variableNames" : [ ]
}