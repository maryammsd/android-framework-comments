{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/animation/Keyframe.java",
  "packageName" : "android.animation",
  "className" : "Keyframe",
  "comment" : "\n * This class holds a time/value pair for an animation. The Keyframe class is used\n * by {@link ValueAnimator} to define the values that the animation target will have over the course\n * of the animation. As the time proceeds from one keyframe to the other, the value of the\n * target object will animate between the value at the previous keyframe and the value at the\n * next keyframe. Each keyframe also holds an optional {@link TimeInterpolator}\n * object, which defines the time interpolation over the intervalue preceding the keyframe.\n *\n * <p>The Keyframe class itself is abstract. The type-specific factory methods will return\n * a subclass of Keyframe specific to the type of value being stored. This is done to improve\n * performance when dealing with the most common cases (e.g., <code>float</code> and\n * <code>int</code> values). Other types will fall into a more general Keyframe class that\n * treats its values as Objects. Unless your animation requires dealing with a custom type\n * or a data structure that needs to be animated directly (and evaluated using an implementation\n * of {@link TypeEvaluator}), you should stick to using float and int as animations using those\n * types have lower runtime overhead than other types.</p>\n ",
  "links" : [ "android.animation.TypeEvaluator", "android.animation.TimeInterpolator", "android.animation.ValueAnimator" ],
  "variables" : [ {
    "name" : "mHasValue",
    "type" : "boolean",
    "comment" : "\n     * Flag to indicate whether this keyframe has a valid value. This flag is used when an\n     * animation first starts, to populate placeholder keyframes with real values derived\n     * from the target object.\n     ",
    "links" : [ ]
  }, {
    "name" : "mValueWasSetOnStart",
    "type" : "boolean",
    "comment" : "\n     * Flag to indicate whether the value in the keyframe was read from the target object or not.\n     * If so, its value will be recalculated if target changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFraction",
    "type" : "float",
    "comment" : "\n     * The time at which mValue will hold true.\n     ",
    "links" : [ ]
  }, {
    "name" : "mValueType",
    "type" : "Class",
    "comment" : "\n     * The type of the value in this Keyframe. This type is determined at construction time,\n     * based on the type of the <code>value</code> object passed into the constructor.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "\n     * The optional time interpolator for the interval preceding this keyframe. A null interpolator\n     * (the default) results in linear interpolation over the interval.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Keyframe ofInt(float fraction, int value)",
    "returnType" : "Keyframe",
    "comment" : "\n     * Constructs a Keyframe object with the given time and value. The time defines the\n     * time, as a proportion of an overall animation's duration, at which the value will hold true\n     * for the animation. The value for the animation between keyframes will be calculated as\n     * an interpolation between the values at those keyframes.\n     *\n     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction\n     * of time elapsed of the overall animation duration.\n     * @param value The value that the object will animate to as the animation time approaches\n     * the time in this keyframe, and the value animated from as the time passes the time in\n     * this keyframe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Keyframe ofInt(float fraction)",
    "returnType" : "Keyframe",
    "comment" : "\n     * Constructs a Keyframe object with the given time. The value at this time will be derived\n     * from the target object when the animation first starts (note that this implies that keyframes\n     * with no initial value must be used as part of an {@link ObjectAnimator}).\n     * The time defines the\n     * time, as a proportion of an overall animation's duration, at which the value will hold true\n     * for the animation. The value for the animation between keyframes will be calculated as\n     * an interpolation between the values at those keyframes.\n     *\n     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction\n     * of time elapsed of the overall animation duration.\n     ",
    "links" : [ "android.animation.ObjectAnimator" ]
  }, {
    "name" : "public static Keyframe ofFloat(float fraction, float value)",
    "returnType" : "Keyframe",
    "comment" : "\n     * Constructs a Keyframe object with the given time and value. The time defines the\n     * time, as a proportion of an overall animation's duration, at which the value will hold true\n     * for the animation. The value for the animation between keyframes will be calculated as\n     * an interpolation between the values at those keyframes.\n     *\n     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction\n     * of time elapsed of the overall animation duration.\n     * @param value The value that the object will animate to as the animation time approaches\n     * the time in this keyframe, and the value animated from as the time passes the time in\n     * this keyframe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Keyframe ofFloat(float fraction)",
    "returnType" : "Keyframe",
    "comment" : "\n     * Constructs a Keyframe object with the given time. The value at this time will be derived\n     * from the target object when the animation first starts (note that this implies that keyframes\n     * with no initial value must be used as part of an {@link ObjectAnimator}).\n     * The time defines the\n     * time, as a proportion of an overall animation's duration, at which the value will hold true\n     * for the animation. The value for the animation between keyframes will be calculated as\n     * an interpolation between the values at those keyframes.\n     *\n     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction\n     * of time elapsed of the overall animation duration.\n     ",
    "links" : [ "android.animation.ObjectAnimator" ]
  }, {
    "name" : "public static Keyframe ofObject(float fraction, Object value)",
    "returnType" : "Keyframe",
    "comment" : "\n     * Constructs a Keyframe object with the given time and value. The time defines the\n     * time, as a proportion of an overall animation's duration, at which the value will hold true\n     * for the animation. The value for the animation between keyframes will be calculated as\n     * an interpolation between the values at those keyframes.\n     *\n     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction\n     * of time elapsed of the overall animation duration.\n     * @param value The value that the object will animate to as the animation time approaches\n     * the time in this keyframe, and the value animated from as the time passes the time in\n     * this keyframe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Keyframe ofObject(float fraction)",
    "returnType" : "Keyframe",
    "comment" : "\n     * Constructs a Keyframe object with the given time. The value at this time will be derived\n     * from the target object when the animation first starts (note that this implies that keyframes\n     * with no initial value must be used as part of an {@link ObjectAnimator}).\n     * The time defines the\n     * time, as a proportion of an overall animation's duration, at which the value will hold true\n     * for the animation. The value for the animation between keyframes will be calculated as\n     * an interpolation between the values at those keyframes.\n     *\n     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction\n     * of time elapsed of the overall animation duration.\n     ",
    "links" : [ "android.animation.ObjectAnimator" ]
  }, {
    "name" : "public boolean hasValue()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this keyframe has a valid value. This method is called internally when\n     * an {@link ObjectAnimator} first starts; keyframes without values are assigned values at\n     * that time by deriving the value for the property from the target object.\n     *\n     * @return boolean Whether this object has a value assigned.\n     ",
    "links" : [ "android.animation.ObjectAnimator" ]
  }, {
    "name" : " boolean valueWasSetOnStart()",
    "returnType" : "boolean",
    "comment" : "\n     * If the Keyframe's value was acquired from the target object, this flag should be set so that,\n     * if target changes, value will be reset.\n     *\n     * @return boolean Whether this Keyframe's value was retieved from the target object or not.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setValueWasSetOnStart(boolean valueWasSetOnStart)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Object getValue()",
    "returnType" : "Object",
    "comment" : "\n     * Gets the value for this Keyframe.\n     *\n     * @return The value for this Keyframe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setValue(Object value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value for this Keyframe.\n     *\n     * @param value value for this Keyframe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFraction()",
    "returnType" : "float",
    "comment" : "\n     * Gets the time for this keyframe, as a fraction of the overall animation duration.\n     *\n     * @return The time associated with this keyframe, as a fraction of the overall animation\n     * duration. This should be a value between 0 and 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFraction(float fraction)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time for this keyframe, as a fraction of the overall animation duration.\n     *\n     * @param fraction time associated with this keyframe, as a fraction of the overall animation\n     * duration. This should be a value between 0 and 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeInterpolator getInterpolator()",
    "returnType" : "TimeInterpolator",
    "comment" : "\n     * Gets the optional interpolator for this Keyframe. A value of <code>null</code> indicates\n     * that there is no interpolation, which is the same as linear interpolation.\n     *\n     * @return The optional interpolator for this Keyframe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInterpolator(TimeInterpolator interpolator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the optional interpolator for this Keyframe. A value of <code>null</code> indicates\n     * that there is no interpolation, which is the same as linear interpolation.\n     *\n     * @return The optional interpolator for this Keyframe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class getType()",
    "returnType" : "Class",
    "comment" : "\n     * Gets the type of keyframe. This information is used by ValueAnimator to determine the type of\n     * {@link TypeEvaluator} to use when calculating values between keyframes. The type is based\n     * on the type of Keyframe created.\n     *\n     * @return The type of the value stored in the Keyframe.\n     ",
    "links" : [ "android.animation.TypeEvaluator" ]
  }, {
    "name" : "public abstract Keyframe clone()",
    "returnType" : "Keyframe",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Keyframe ofInt(float fraction, int value)", "public static Keyframe ofInt(float fraction)", "public static Keyframe ofFloat(float fraction, float value)", "public static Keyframe ofFloat(float fraction)", "public static Keyframe ofObject(float fraction, Object value)", "public static Keyframe ofObject(float fraction)", "public boolean hasValue()", " boolean valueWasSetOnStart()", " void setValueWasSetOnStart(boolean valueWasSetOnStart)", "public abstract Object getValue()", "public abstract void setValue(Object value)", "public float getFraction()", "public void setFraction(float fraction)", "public TimeInterpolator getInterpolator()", "public void setInterpolator(TimeInterpolator interpolator)", "public Class getType()", "public abstract Keyframe clone()" ],
  "variableNames" : [ "mHasValue", "mValueWasSetOnStart", "mFraction", "mValueType", "mInterpolator" ]
}