{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/CacheValue.java",
  "packageName" : "android.icu.impl",
  "className" : "CacheValue",
  "comment" : "\n * Value type for cache items:\n * Holds a value either via a direct reference or via a {@link Reference},\n * depending on the current \"strength\" when {@code getInstance()} was called.\n *\n * <p>The value is <i>conceptually<i> immutable.\n * If it is held via a direct reference, then it is actually immutable.\n *\n * <p>A {@code Reference} may be cleared (garbage-collected),\n * after which {@code get()} returns null.\n * It can then be reset via {@code resetIfAbsent()}.\n * The new value should be the same as, or equivalent to, the old value.\n *\n * <p>Null values are supported. They can be distinguished from cleared values\n * via {@code isNull()}.\n *\n * @param <V> Cache instance value type\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "java.lang.ref.Reference" ],
  "variables" : [ {
    "name" : "strength",
    "type" : "Strength",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NULL_VALUE",
    "type" : "CacheValue",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setStrength(Strength strength)",
    "returnType" : "void",
    "comment" : "\n     * Changes the \"strength\" of value references for subsequent {@code getInstance()} calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean futureInstancesWillBeStrong()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the \"strength\" is set to {@code STRONG}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CacheValue<V> getInstance(V value)",
    "returnType" : "CacheValue<V>",
    "comment" : "\n     * Returns a CacheValue instance that holds the value.\n     * It holds it directly if the value is null or if the current \"strength\" is {@code STRONG}.\n     * Otherwise, it holds it via a {@link Reference}.\n     ",
    "links" : [ "java.lang.ref.Reference" ]
  }, {
    "name" : "public boolean isNull()",
    "returnType" : "boolean",
    "comment" : "\n     * Distinguishes a null value from a Reference value that has been cleared.\n     *\n     * @return true if this object represents a null value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract V get()",
    "returnType" : "V",
    "comment" : "\n     * Returns the value (which can be null),\n     * or null if it was held in a Reference and has been cleared.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract V resetIfCleared(V value)",
    "returnType" : "V",
    "comment" : "\n     * If the value was held via a {@link Reference} which has been cleared,\n     * then it is replaced with a new {@link Reference} to the new value,\n     * and the new value is returned.\n     * The old and new values should be the same or equivalent.\n     *\n     * <p>Otherwise the old value is returned.\n     *\n     * @param value Replacement value, for when the current {@link Reference} has been cleared.\n     * @return The old or new value.\n     ",
    "links" : [ "java.lang.ref.Reference" ]
  } ],
  "methodNames" : [ "public static void setStrength(Strength strength)", "public static boolean futureInstancesWillBeStrong()", "public static CacheValue<V> getInstance(V value)", "public boolean isNull()", "public abstract V get()", "public abstract V resetIfCleared(V value)" ],
  "variableNames" : [ "strength", "NULL_VALUE" ]
}