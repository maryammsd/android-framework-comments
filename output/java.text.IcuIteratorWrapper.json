{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/IcuIteratorWrapper.java",
  "packageName" : "java.text",
  "className" : "IcuIteratorWrapper",
  "comment" : "\n * <p>A subclass of BreakIterator whose behavior is specified using a list of rules.</p>\n *\n * <p>There are two kinds of rules, which are separated by semicolons: <i>substitutions</i>\n * and <i>regular expressions.</i></p>\n *\n * <p>A substitution rule defines a name that can be used in place of an expression. It\n * consists of a name, which is a string of characters contained in angle brackets, an equals\n * sign, and an expression. (There can be no whitespace on either side of the equals sign.)\n * To keep its syntactic meaning intact, the expression must be enclosed in parentheses or\n * square brackets. A substitution is visible after its definition, and is filled in using\n * simple textual substitution. Substitution definitions can contain other substitutions, as\n * long as those substitutions have been defined first. Substitutions are generally used to\n * make the regular expressions (which can get quite complex) shorted and easier to read.\n * They typically define either character categories or commonly-used subexpressions.</p>\n *\n * <p>There is one special substitution.&nbsp; If the description defines a substitution\n * called &quot;&lt;ignore&gt;&quot;, the expression must be a [] expression, and the\n * expression defines a set of characters (the &quot;<em>ignore characters</em>&quot;) that\n * will be transparent to the BreakIterator.&nbsp; A sequence of characters will break the\n * same way it would if any ignore characters it contains are taken out.&nbsp; Break\n * positions never occur befoer ignore characters.</p>\n *\n * <p>A regular expression uses a subset of the normal Unix regular-expression syntax, and\n * defines a sequence of characters to be kept together. With one significant exception, the\n * iterator uses a longest-possible-match algorithm when matching text to regular\n * expressions. The iterator also treats descriptions containing multiple regular expressions\n * as if they were ORed together (i.e., as if they were separated by |).</p>\n *\n * <p>The special characters recognized by the regular-expression parser are as follows:</p>\n *\n * <blockquote>\n * <table border=\"1\" width=\"100%\">\n * <tr>\n * <td width=\"6%\">*</td>\n * <td width=\"94%\">Specifies that the expression preceding the asterisk may occur any number\n * of times (including not at all).</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">{}</td>\n * <td width=\"94%\">Encloses a sequence of characters that is optional.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">()</td>\n * <td width=\"94%\">Encloses a sequence of characters.&nbsp; If followed by *, the sequence\n * repeats.&nbsp; Otherwise, the parentheses are just a grouping device and a way to delimit\n * the ends of expressions containing |.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">|</td>\n * <td width=\"94%\">Separates two alternative sequences of characters.&nbsp; Either one\n * sequence or the other, but not both, matches this expression.&nbsp; The | character can\n * only occur inside ().</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">.</td>\n * <td width=\"94%\">Matches any character.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">*?</td>\n * <td width=\"94%\">Specifies a non-greedy asterisk.&nbsp; *? works the same way as *, except\n * when there is overlap between the last group of characters in the expression preceding the\n * * and the first group of characters following the *.&nbsp; When there is this kind of\n * overlap, * will match the longest sequence of characters that match the expression before\n * the *, and *? will match the shortest sequence of characters matching the expression\n * before the *?.&nbsp; For example, if you have &quot;xxyxyyyxyxyxxyxyxyy&quot; in the text,\n * &quot;x[xy]*x&quot; will match through to the last x (i.e., &quot;<strong>xxyxyyyxyxyxxyxyx</strong>yy&quot;,\n * but &quot;x[xy]*?x&quot; will only match the first two xes (&quot;<strong>xx</strong>yxyyyxyxyxxyxyxyy&quot;).</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">[]</td>\n * <td width=\"94%\">Specifies a group of alternative characters.&nbsp; A [] expression will\n * match any single character that is specified in the [] expression.&nbsp; For more on the\n * syntax of [] expressions, see below.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">/</td>\n * <td width=\"94%\">Specifies where the break position should go if text matches this\n * expression.&nbsp; (e.g., &quot;[a-z]&#42;/[:Zs:]*[1-0]&quot; will match if the iterator sees a\n * run\n * of letters, followed by a run of whitespace, followed by a digit, but the break position\n * will actually go before the whitespace).&nbsp; Expressions that don't contain / put the\n * break position at the end of the matching text.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">\\</td>\n * <td width=\"94%\">Escape character.&nbsp; The \\ itself is ignored, but causes the next\n * character to be treated as literal character.&nbsp; This has no effect for many\n * characters, but for the characters listed above, this deprives them of their special\n * meaning.&nbsp; (There are no special escape sequences for Unicode characters, or tabs and\n * newlines; these are all handled by a higher-level protocol.&nbsp; In a Java string,\n * &quot;\\n&quot; will be converted to a literal newline character by the time the\n * regular-expression parser sees it.&nbsp; Of course, this means that \\ sequences that are\n * visible to the regexp parser must be written as \\\\ when inside a Java string.)&nbsp; All\n * characters in the ASCII range except for letters, digits, and control characters are\n * reserved characters to the parser and must be preceded by \\ even if they currently don't\n * mean anything.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">!</td>\n * <td width=\"94%\">If ! appears at the beginning of a regular expression, it tells the regexp\n * parser that this expression specifies the backwards-iteration behavior of the iterator,\n * and not its normal iteration behavior.&nbsp; This is generally only used in situations\n * where the automatically-generated backwards-iteration brhavior doesn't produce\n * satisfactory results and must be supplemented with extra client-specified rules.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\"><em>(all others)</em></td>\n * <td width=\"94%\">All other characters are treated as literal characters, which must match\n * the corresponding character(s) in the text exactly.</td>\n * </tr>\n * </table>\n * </blockquote>\n *\n * <p>Within a [] expression, a number of other special characters can be used to specify\n * groups of characters:</p>\n *\n * <blockquote>\n * <table border=\"1\" width=\"100%\">\n * <tr>\n * <td width=\"6%\">-</td>\n * <td width=\"94%\">Specifies a range of matching characters.&nbsp; For example\n * &quot;[a-p]&quot; matches all lowercase Latin letters from a to p (inclusive).&nbsp; The -\n * sign specifies ranges of continuous Unicode numeric values, not ranges of characters in a\n * language's alphabetical order: &quot;[a-z]&quot; doesn't include capital letters, nor does\n * it include accented letters such as a-umlaut.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">::</td>\n * <td width=\"94%\">A pair of colons containing a one- or two-letter code matches all\n * characters in the corresponding Unicode category.&nbsp; The two-letter codes are the same\n * as the two-letter codes in the Unicode database (for example, &quot;[:Sc::Sm:]&quot;\n * matches all currency symbols and all math symbols).&nbsp; Specifying a one-letter code is\n * the same as specifying all two-letter codes that begin with that letter (for example,\n * &quot;[:L:]&quot; matches all letters, and is equivalent to\n * &quot;[:Lu::Ll::Lo::Lm::Lt:]&quot;).&nbsp; Anything other than a valid two-letter Unicode\n * category code or a single letter that begins a Unicode category code is illegal within\n * colons.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">[]</td>\n * <td width=\"94%\">[] expressions can nest.&nbsp; This has no effect, except when used in\n * conjunction with the ^ token.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\">^</td>\n * <td width=\"94%\">Excludes the character (or the characters in the [] expression) following\n * it from the group of characters.&nbsp; For example, &quot;[a-z^p]&quot; matches all Latin\n * lowercase letters except p.&nbsp; &quot;[:L:^[&#92;u4e00-&#92;u9fff]]&quot; matches all letters\n * except the Han ideographs.</td>\n * </tr>\n * <tr>\n * <td width=\"6%\"><em>(all others)</em></td>\n * <td width=\"94%\">All other characters are treated as literal characters.&nbsp; (For\n * example, &quot;[aeiou]&quot; specifies just the letters a, e, i, o, and u.)</td>\n * </tr>\n * </table>\n * </blockquote>\n *\n * <p>For a more complete explanation, see <a\n * href=\"http://www.ibm.com/java/education/boundaries/boundaries.html\">http://www.ibm.com/java/education/boundaries/boundaries.html</a>.\n * &nbsp; For examples, see the resource data (which is annotated).</p>\n *\n * @author Richard Gillam\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "wrapped",
    "type" : "android.icu.text.BreakIterator",
    "comment" : " The wrapped ICU implementation. Non-final for #clone() ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Clones this iterator.\n     *\n     * @return A newly-constructed IcuIteratorWrapper with the same\n     * behavior as this one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if both BreakIterators are of the same class, have the same\n     * rules, and iterate over the same text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns text\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Compute a hashcode for this BreakIterator\n     *\n     * @return A hash code\n     ",
    "links" : [ ]
  }, {
    "name" : "public int first()",
    "returnType" : "int",
    "comment" : "\n     * Sets the current iteration position to the beginning of the text.\n     * (i.e., the CharacterIterator's starting offset).\n     *\n     * @return The offset of the beginning of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int last()",
    "returnType" : "int",
    "comment" : "\n     * Sets the current iteration position to the end of the text.\n     * (i.e., the CharacterIterator's ending offset).\n     *\n     * @return The text's past-the-end offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int next(int n)",
    "returnType" : "int",
    "comment" : "\n     * Advances the iterator either forward or backward the specified number of steps.\n     * Negative values move backward, and positive values move forward.  This is\n     * equivalent to repeatedly calling next() or previous().\n     *\n     * @param n The number of steps to move.  The sign indicates the direction\n     *          (negative is backwards, and positive is forwards).\n     * @return The character offset of the boundary position n boundaries away from\n     * the current one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int next()",
    "returnType" : "int",
    "comment" : "\n     * Advances the iterator to the next boundary position.\n     *\n     * @return The position of the first boundary after this one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int previous()",
    "returnType" : "int",
    "comment" : "\n     * Advances the iterator backwards, to the last boundary preceding this one.\n     *\n     * @return The position of the last boundary position preceding this one.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static final void checkOffset(int offset, CharacterIterator text)",
    "returnType" : "void",
    "comment" : "\n     * Throw IllegalArgumentException unless begin <= offset < end.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int following(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Sets the iterator to refer to the first boundary position following\n     * the specified position.\n     *\n     * @return The position of the first break after the current position.\n     * @offset The position from which to begin searching for a break position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int preceding(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Sets the iterator to refer to the last boundary position before the\n     * specified position.\n     *\n     * @return The position of the last boundary before the starting position.\n     * @offset The position to begin searching for a break from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBoundary(int offset)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specfied position is a boundary position.  As a side\n     * effect, leaves the iterator pointing to the first boundary position at\n     * or after \"offset\".\n     *\n     * @param offset the offset to check.\n     * @return True if \"offset\" is a boundary position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int current()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current iteration position.\n     *\n     * @return The current iteration position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharacterIterator getText()",
    "returnType" : "CharacterIterator",
    "comment" : "\n     * Return a CharacterIterator over the text being analyzed.  This version\n     * of this method returns the actual CharacterIterator we're using internally.\n     * Changing the state of this iterator can have undefined consequences.  If\n     * you need to change it, clone it first.\n     *\n     * @return An iterator over the text being analyzed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(String newText)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setText(CharacterIterator newText)",
    "returnType" : "void",
    "comment" : "\n     * Set the iterator to analyze a new piece of text.  This function resets\n     * the current iteration position to the beginning of the text.\n     *\n     * @param newText An iterator over the text to analyze.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object clone()", "public boolean equals(Object that)", "public String toString()", "public int hashCode()", "public int first()", "public int last()", "public int next(int n)", "public int next()", "public int previous()", "protected static final void checkOffset(int offset, CharacterIterator text)", "public int following(int offset)", "public int preceding(int offset)", "public boolean isBoundary(int offset)", "public int current()", "public CharacterIterator getText()", "public void setText(String newText)", "public void setText(CharacterIterator newText)" ],
  "variableNames" : [ "wrapped" ]
}