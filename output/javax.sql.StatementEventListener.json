{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/sql/StatementEventListener.java",
  "packageName" : "javax.sql",
  "className" : "StatementEventListener",
  "comment" : "\n * An object that registers to be notified of events that occur on PreparedStatements\n * that are in the Statement pool.\n * <p>\n * The JDBC 3.0 specification added the maxStatements\n * <code>ConnectionPooledDataSource</code> property to provide a standard mechanism for\n * enabling the pooling of <code>PreparedStatements</code>\n * and to specify the size of the statement\n * pool.  However, there was no way for a driver to notify an external\n * statement pool when a <code>PreparedStatement</code> becomes invalid.  For some databases, a\n * statement becomes invalid if a DDL operation is performed that affects the\n * table.  For example an application may create a temporary table to do some work\n * on the table and then destroy it.  It may later recreate the same table when\n * it is needed again.  Some databases will invalidate any prepared statements\n * that reference the temporary table when the table is dropped.\n * <p>\n * Similar to the methods defined in the <code>ConnectionEventListener</code> interface,\n * the driver will call the <code>StatementEventListener.statementErrorOccurred</code>\n * method prior to throwing any exceptions when it detects a statement is invalid.\n * The driver will also call the <code>StatementEventListener.statementClosed</code>\n * method when a <code>PreparedStatement</code> is closed.\n * <p>\n * Methods which allow a component to register a StatementEventListener with a\n * <code>PooledConnection</code> have been added to the <code>PooledConnection</code> interface.\n * <p>\n * @since 1.6\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void statementClosed(StatementEvent event)",
    "returnType" : "void",
    "comment" : "\n   * The driver calls this method on all <code>StatementEventListener</code>s registered on the connection when it detects that a\n   * <code>PreparedStatement</code> is closed.\n   *\n   * @param event an event object describing the source of\n   * the event and that the <code>PreparedStatement</code> was closed.\n   * @since 1.6\n   ",
    "links" : [ ]
  }, {
    "name" : " void statementErrorOccurred(StatementEvent event)",
    "returnType" : "void",
    "comment" : "\n         * The driver calls this method on all <code>StatementEventListener</code>s\n         * registered on the connection when it detects that a\n         * <code>PreparedStatement</code> is invalid. The driver calls this method\n         * just before it throws the <code>SQLException</code>,\n         * contained in the given event, to the application.\n         * <p>\n         * @param event         an event object describing the source of the event,\n         *                                      the statement that is invalid and the exception the\n         *                                      driver is about to throw.  The source of the event is\n         *                                      the <code>PooledConnection</code> which the invalid <code>PreparedStatement</code>\n         * is associated with.\n         * <p>\n         * @since 1.6\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void statementClosed(StatementEvent event)", " void statementErrorOccurred(StatementEvent event)" ],
  "variableNames" : [ ]
}