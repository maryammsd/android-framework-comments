{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/ReduceOps.java",
  "packageName" : "java.util.stream",
  "className" : "ReduceOps",
  "comment" : "\n * Factory for creating instances of {@code TerminalOp} that implement\n * reductions.\n *\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static TerminalOp<T, U> makeRef(U seed, BiFunction<U, ? super T, U> reducer, BinaryOperator<U> combiner)",
    "returnType" : "TerminalOp<T, U>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * reference values.\n     *\n     * @param <T> the type of the input elements\n     * @param <U> the type of the result\n     * @param seed the identity element for the reduction\n     * @param reducer the accumulating function that incorporates an additional\n     *        input element into the result\n     * @param combiner the combining function that combines two intermediate\n     *        results\n     * @return a {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<T, Optional<T>> makeRef(BinaryOperator<T> operator)",
    "returnType" : "TerminalOp<T, Optional<T>>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * reference values producing an optional reference result.\n     *\n     * @param <T> The type of the input elements, and the type of the result\n     * @param operator The reducing function\n     * @return A {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<T, I> makeRef(Collector<? super T, I, ?> collector)",
    "returnType" : "TerminalOp<T, I>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a mutable reduce on\n     * reference values.\n     *\n     * @param <T> the type of the input elements\n     * @param <I> the type of the intermediate reduction result\n     * @param collector a {@code Collector} defining the reduction\n     * @return a {@code ReduceOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<T, R> makeRef(Supplier<R> seedFactory, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> reducer)",
    "returnType" : "TerminalOp<T, R>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a mutable reduce on\n     * reference values.\n     *\n     * @param <T> the type of the input elements\n     * @param <R> the type of the result\n     * @param seedFactory a factory to produce a new base accumulator\n     * @param accumulator a function to incorporate an element into an\n     *        accumulator\n     * @param reducer a function to combine an accumulator into another\n     * @return a {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<T, Long> makeRefCounting()",
    "returnType" : "TerminalOp<T, Long>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that counts the number of stream\n     * elements.  If the size of the pipeline is known then count is the size\n     * and there is no need to evaluate the pipeline.  If the size of the\n     * pipeline is non known then count is produced, via reduction, using a\n     * {@link CountingSink}.\n     *\n     * @param <T> the type of the input elements\n     * @return a {@code TerminalOp} implementing the counting\n     ",
    "links" : [ "CountingSink" ]
  }, {
    "name" : "public static TerminalOp<Integer, Integer> makeInt(int identity, IntBinaryOperator operator)",
    "returnType" : "TerminalOp<Integer, Integer>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code int} values.\n     *\n     * @param identity the identity for the combining function\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<Integer, OptionalInt> makeInt(IntBinaryOperator operator)",
    "returnType" : "TerminalOp<Integer, OptionalInt>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code int} values, producing an optional integer result.\n     *\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<Integer, R> makeInt(Supplier<R> supplier, ObjIntConsumer<R> accumulator, BinaryOperator<R> combiner)",
    "returnType" : "TerminalOp<Integer, R>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a mutable reduce on\n     * {@code int} values.\n     *\n     * @param <R> The type of the result\n     * @param supplier a factory to produce a new accumulator of the result type\n     * @param accumulator a function to incorporate an int into an\n     *        accumulator\n     * @param combiner a function to combine an accumulator into another\n     * @return A {@code ReduceOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<Integer, Long> makeIntCounting()",
    "returnType" : "TerminalOp<Integer, Long>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that counts the number of stream\n     * elements.  If the size of the pipeline is known then count is the size\n     * and there is no need to evaluate the pipeline.  If the size of the\n     * pipeline is non known then count is produced, via reduction, using a\n     * {@link CountingSink}.\n     *\n     * @return a {@code TerminalOp} implementing the counting\n     ",
    "links" : [ "CountingSink" ]
  }, {
    "name" : "public static TerminalOp<Long, Long> makeLong(long identity, LongBinaryOperator operator)",
    "returnType" : "TerminalOp<Long, Long>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code long} values.\n     *\n     * @param identity the identity for the combining function\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<Long, OptionalLong> makeLong(LongBinaryOperator operator)",
    "returnType" : "TerminalOp<Long, OptionalLong>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code long} values, producing an optional long result.\n     *\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<Long, R> makeLong(Supplier<R> supplier, ObjLongConsumer<R> accumulator, BinaryOperator<R> combiner)",
    "returnType" : "TerminalOp<Long, R>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a mutable reduce on\n     * {@code long} values.\n     *\n     * @param <R> the type of the result\n     * @param supplier a factory to produce a new accumulator of the result type\n     * @param accumulator a function to incorporate an int into an\n     *        accumulator\n     * @param combiner a function to combine an accumulator into another\n     * @return a {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<Long, Long> makeLongCounting()",
    "returnType" : "TerminalOp<Long, Long>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that counts the number of stream\n     * elements.  If the size of the pipeline is known then count is the size\n     * and there is no need to evaluate the pipeline.  If the size of the\n     * pipeline is non known then count is produced, via reduction, using a\n     * {@link CountingSink}.\n     *\n     * @return a {@code TerminalOp} implementing the counting\n     ",
    "links" : [ "CountingSink" ]
  }, {
    "name" : "public static TerminalOp<Double, Double> makeDouble(double identity, DoubleBinaryOperator operator)",
    "returnType" : "TerminalOp<Double, Double>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code double} values.\n     *\n     * @param identity the identity for the combining function\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<Double, OptionalDouble> makeDouble(DoubleBinaryOperator operator)",
    "returnType" : "TerminalOp<Double, OptionalDouble>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code double} values, producing an optional double result.\n     *\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<Double, R> makeDouble(Supplier<R> supplier, ObjDoubleConsumer<R> accumulator, BinaryOperator<R> combiner)",
    "returnType" : "TerminalOp<Double, R>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that implements a mutable reduce on\n     * {@code double} values.\n     *\n     * @param <R> the type of the result\n     * @param supplier a factory to produce a new accumulator of the result type\n     * @param accumulator a function to incorporate an int into an\n     *        accumulator\n     * @param combiner a function to combine an accumulator into another\n     * @return a {@code TerminalOp} implementing the reduction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TerminalOp<Double, Long> makeDoubleCounting()",
    "returnType" : "TerminalOp<Double, Long>",
    "comment" : "\n     * Constructs a {@code TerminalOp} that counts the number of stream\n     * elements.  If the size of the pipeline is known then count is the size\n     * and there is no need to evaluate the pipeline.  If the size of the\n     * pipeline is non known then count is produced, via reduction, using a\n     * {@link CountingSink}.\n     *\n     * @return a {@code TerminalOp} implementing the counting\n     ",
    "links" : [ "CountingSink" ]
  } ],
  "methodNames" : [ "public static TerminalOp<T, U> makeRef(U seed, BiFunction<U, ? super T, U> reducer, BinaryOperator<U> combiner)", "public static TerminalOp<T, Optional<T>> makeRef(BinaryOperator<T> operator)", "public static TerminalOp<T, I> makeRef(Collector<? super T, I, ?> collector)", "public static TerminalOp<T, R> makeRef(Supplier<R> seedFactory, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> reducer)", "public static TerminalOp<T, Long> makeRefCounting()", "public static TerminalOp<Integer, Integer> makeInt(int identity, IntBinaryOperator operator)", "public static TerminalOp<Integer, OptionalInt> makeInt(IntBinaryOperator operator)", "public static TerminalOp<Integer, R> makeInt(Supplier<R> supplier, ObjIntConsumer<R> accumulator, BinaryOperator<R> combiner)", "public static TerminalOp<Integer, Long> makeIntCounting()", "public static TerminalOp<Long, Long> makeLong(long identity, LongBinaryOperator operator)", "public static TerminalOp<Long, OptionalLong> makeLong(LongBinaryOperator operator)", "public static TerminalOp<Long, R> makeLong(Supplier<R> supplier, ObjLongConsumer<R> accumulator, BinaryOperator<R> combiner)", "public static TerminalOp<Long, Long> makeLongCounting()", "public static TerminalOp<Double, Double> makeDouble(double identity, DoubleBinaryOperator operator)", "public static TerminalOp<Double, OptionalDouble> makeDouble(DoubleBinaryOperator operator)", "public static TerminalOp<Double, R> makeDouble(Supplier<R> supplier, ObjDoubleConsumer<R> accumulator, BinaryOperator<R> combiner)", "public static TerminalOp<Double, Long> makeDoubleCounting()" ],
  "variableNames" : [ ]
}