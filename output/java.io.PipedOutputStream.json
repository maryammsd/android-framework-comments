{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/PipedOutputStream.java",
  "packageName" : "java.io",
  "className" : "PipedOutputStream",
  "comment" : "\n * A piped output stream can be connected to a piped input stream\n * to create a communications pipe. The piped output stream is the\n * sending end of the pipe. Typically, data is written to a\n * <code>PipedOutputStream</code> object by one thread and data is\n * read from the connected <code>PipedInputStream</code> by some\n * other thread. Attempting to use both objects from a single thread\n * is not recommended as it may deadlock the thread.\n * The pipe is said to be <a id=BROKEN> <i>broken</i> </a> if a\n * thread that was reading data bytes from the connected piped input\n * stream is no longer alive.\n *\n * @author  James Gosling\n * @see     java.io.PipedInputStream\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sink",
    "type" : "PipedInputStream",
    "comment" : " REMIND: identification of the read and write sides needs to be\n           more sophisticated.  Either using thread groups (but what about\n           pipes within a thread?) or using finalization (but it may be a\n           long time until the next GC). ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized void connect(PipedInputStream snk) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Connects this piped output stream to a receiver. If this object\n     * is already connected to some other piped input stream, an\n     * <code>IOException</code> is thrown.\n     * <p>\n     * If <code>snk</code> is an unconnected piped input stream and\n     * <code>src</code> is an unconnected piped output stream, they may\n     * be connected by either the call:\n     * <blockquote><pre>\n     * src.connect(snk)</pre></blockquote>\n     * or the call:\n     * <blockquote><pre>\n     * snk.connect(src)</pre></blockquote>\n     * The two calls have the same effect.\n     *\n     * @param      snk   the piped input stream to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified <code>byte</code> to the piped output stream.\n     * <p>\n     * Implements the <code>write</code> method of <code>OutputStream</code>.\n     *\n     * @param      b   the <code>byte</code> to be written.\n     * @exception IOException if the pipe is <a href=#BROKEN> broken</a>,\n     *          {@link #connect(java.io.PipedInputStream) unconnected},\n     *          closed, or if an I/O error occurs.\n     ",
    "links" : [ "#connect(java.io.PipedInputStream)" ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes <code>len</code> bytes from the specified byte array\n     * starting at offset <code>off</code> to this piped output stream.\n     * This method blocks until all the bytes are written to the output\n     * stream.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception IOException if the pipe is <a href=#BROKEN> broken</a>,\n     *          {@link #connect(java.io.PipedInputStream) unconnected},\n     *          closed, or if an I/O error occurs.\n     ",
    "links" : [ "#connect(java.io.PipedInputStream)" ]
  }, {
    "name" : "public synchronized void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes this output stream and forces any buffered output bytes\n     * to be written out.\n     * This will notify any readers that bytes are waiting in the pipe.\n     *\n     * @exception IOException if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this piped output stream and releases any system resources\n     * associated with this stream. This stream may no longer be used for\n     * writing bytes.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized void connect(PipedInputStream snk) throws IOException", "public void write(int b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException", "public synchronized void flush() throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ "sink" ]
}