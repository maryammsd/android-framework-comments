{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/Half.java",
  "packageName" : "android.util",
  "className" : "Half",
  "comment" : "\n * <p>The {@code Half} class is a wrapper and a utility class to manipulate half-precision 16-bit\n * <a href=\"https://en.wikipedia.org/wiki/Half-precision_floating-point_format\">IEEE 754</a>\n * floating point data types (also called fp16 or binary16). A half-precision float can be\n * created from or converted to single-precision floats, and is stored in a short data type.\n * To distinguish short values holding half-precision floats from regular short values,\n * it is recommended to use the <code>@HalfFloat</code> annotation.</p>\n *\n * <p>The IEEE 754 standard specifies an fp16 as having the following format:</p>\n * <ul>\n * <li>Sign bit: 1 bit</li>\n * <li>Exponent width: 5 bits</li>\n * <li>Significand: 10 bits</li>\n * </ul>\n *\n * <p>The format is laid out as follows:</p>\n * <pre>\n * 1   11111   1111111111\n * ^   --^--   -----^----\n * sign  |          |_______ significand\n *       |\n *       -- exponent\n * </pre>\n *\n * <p>Half-precision floating points can be useful to save memory and/or\n * bandwidth at the expense of range and precision when compared to single-precision\n * floating points (fp32).</p>\n * <p>To help you decide whether fp16 is the right storage type for you need, please\n * refer to the table below that shows the available precision throughout the range of\n * possible values. The <em>precision</em> column indicates the step size between two\n * consecutive numbers in a specific part of the range.</p>\n *\n * <table summary=\"Precision of fp16 across the range\">\n *     <tr><th>Range start</th><th>Precision</th></tr>\n *     <tr><td>0</td><td>1 &frasl; 16,777,216</td></tr>\n *     <tr><td>1 &frasl; 16,384</td><td>1 &frasl; 16,777,216</td></tr>\n *     <tr><td>1 &frasl; 8,192</td><td>1 &frasl; 8,388,608</td></tr>\n *     <tr><td>1 &frasl; 4,096</td><td>1 &frasl; 4,194,304</td></tr>\n *     <tr><td>1 &frasl; 2,048</td><td>1 &frasl; 2,097,152</td></tr>\n *     <tr><td>1 &frasl; 1,024</td><td>1 &frasl; 1,048,576</td></tr>\n *     <tr><td>1 &frasl; 512</td><td>1 &frasl; 524,288</td></tr>\n *     <tr><td>1 &frasl; 256</td><td>1 &frasl; 262,144</td></tr>\n *     <tr><td>1 &frasl; 128</td><td>1 &frasl; 131,072</td></tr>\n *     <tr><td>1 &frasl; 64</td><td>1 &frasl; 65,536</td></tr>\n *     <tr><td>1 &frasl; 32</td><td>1 &frasl; 32,768</td></tr>\n *     <tr><td>1 &frasl; 16</td><td>1 &frasl; 16,384</td></tr>\n *     <tr><td>1 &frasl; 8</td><td>1 &frasl; 8,192</td></tr>\n *     <tr><td>1 &frasl; 4</td><td>1 &frasl; 4,096</td></tr>\n *     <tr><td>1 &frasl; 2</td><td>1 &frasl; 2,048</td></tr>\n *     <tr><td>1</td><td>1 &frasl; 1,024</td></tr>\n *     <tr><td>2</td><td>1 &frasl; 512</td></tr>\n *     <tr><td>4</td><td>1 &frasl; 256</td></tr>\n *     <tr><td>8</td><td>1 &frasl; 128</td></tr>\n *     <tr><td>16</td><td>1 &frasl; 64</td></tr>\n *     <tr><td>32</td><td>1 &frasl; 32</td></tr>\n *     <tr><td>64</td><td>1 &frasl; 16</td></tr>\n *     <tr><td>128</td><td>1 &frasl; 8</td></tr>\n *     <tr><td>256</td><td>1 &frasl; 4</td></tr>\n *     <tr><td>512</td><td>1 &frasl; 2</td></tr>\n *     <tr><td>1,024</td><td>1</td></tr>\n *     <tr><td>2,048</td><td>2</td></tr>\n *     <tr><td>4,096</td><td>4</td></tr>\n *     <tr><td>8,192</td><td>8</td></tr>\n *     <tr><td>16,384</td><td>16</td></tr>\n *     <tr><td>32,768</td><td>32</td></tr>\n * </table>\n *\n * <p>This table shows that numbers higher than 1024 lose all fractional precision.</p>\n ",
  "variables" : [ {
    "name" : "SIZE",
    "type" : "int",
    "comment" : "\n     * The number of bits used to represent a half-precision float value.\n     ",
    "links" : [ ]
  }, {
    "name" : "EPSILON",
    "type" : "short",
    "comment" : "\n     * Epsilon is the difference between 1.0 and the next value representable\n     * by a half-precision floating-point.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_EXPONENT",
    "type" : "int",
    "comment" : "\n     * Maximum exponent a finite half-precision float may have.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_EXPONENT",
    "type" : "int",
    "comment" : "\n     * Minimum exponent a normalized half-precision float may have.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOWEST_VALUE",
    "type" : "short",
    "comment" : "\n     * Smallest negative value a half-precision float may have.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_VALUE",
    "type" : "short",
    "comment" : "\n     * Maximum positive finite value a half-precision float may have.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_NORMAL",
    "type" : "short",
    "comment" : "\n     * Smallest positive normal value a half-precision float may have.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_VALUE",
    "type" : "short",
    "comment" : "\n     * Smallest positive non-zero value a half-precision float may have.\n     ",
    "links" : [ ]
  }, {
    "name" : "NaN",
    "type" : "short",
    "comment" : "\n     * A Not-a-Number representation of a half-precision float.\n     ",
    "links" : [ ]
  }, {
    "name" : "NEGATIVE_INFINITY",
    "type" : "short",
    "comment" : "\n     * Negative infinity of type half-precision float.\n     ",
    "links" : [ ]
  }, {
    "name" : "NEGATIVE_ZERO",
    "type" : "short",
    "comment" : "\n     * Negative 0 of type half-precision float.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITIVE_INFINITY",
    "type" : "short",
    "comment" : "\n     * Positive infinity of type half-precision float.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITIVE_ZERO",
    "type" : "short",
    "comment" : "\n     * Positive 0 of type half-precision float.\n     ",
    "links" : [ ]
  }, {
    "name" : "mValue",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public short halfValue()",
    "returnType" : "short",
    "comment" : "\n     * Returns the half-precision value of this {@code Half} as a {@code short}\n     * containing the bit representation described in {@link Half}.\n     *\n     * @return The half-precision float value represented by this object\n     ",
    "links" : [ "Half" ]
  }, {
    "name" : "public byte byteValue()",
    "returnType" : "byte",
    "comment" : "\n     * Returns the value of this {@code Half} as a {@code byte} after\n     * a narrowing primitive conversion.\n     *\n     * @return The half-precision float value represented by this object\n     *         converted to type {@code byte}\n     ",
    "links" : [ ]
  }, {
    "name" : "public short shortValue()",
    "returnType" : "short",
    "comment" : "\n     * Returns the value of this {@code Half} as a {@code short} after\n     * a narrowing primitive conversion.\n     *\n     * @return The half-precision float value represented by this object\n     *         converted to type {@code short}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of this {@code Half} as a {@code int} after\n     * a narrowing primitive conversion.\n     *\n     * @return The half-precision float value represented by this object\n     *         converted to type {@code int}\n     ",
    "links" : [ ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of this {@code Half} as a {@code long} after\n     * a narrowing primitive conversion.\n     *\n     * @return The half-precision float value represented by this object\n     *         converted to type {@code long}\n     ",
    "links" : [ ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the value of this {@code Half} as a {@code float} after\n     * a widening primitive conversion.\n     *\n     * @return The half-precision float value represented by this object\n     *         converted to type {@code float}\n     ",
    "links" : [ ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the value of this {@code Half} as a {@code double} after\n     * a widening primitive conversion.\n     *\n     * @return The half-precision float value represented by this object\n     *         converted to type {@code double}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNaN()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this {@code Half} value represents a Not-a-Number,\n     * false otherwise.\n     *\n     * @return True if the value is a NaN, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object against the specified object. The result is {@code true}\n     * if and only if the argument is not {@code null} and is a {@code Half} object\n     * that represents the same half-precision value as the this object. Two\n     * half-precision values are considered to be the same if and only if the method\n     * {@link #halfToIntBits(short)} returns an identical {@code int} value for both.\n     *\n     * @param o The object to compare\n     * @return True if the objects are the same, false otherwise\n     *\n     * @see #halfToIntBits(short)\n     ",
    "links" : [ "#halfToIntBits" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for this {@code Half} object. The result is the\n     * integer bit representation, exactly as produced by the method\n     * {@link #halfToIntBits(short)}, of the primitive half-precision float\n     * value represented by this {@code Half} object.\n     *\n     * @return A hash code value for this object\n     ",
    "links" : [ "#halfToIntBits" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the specified half-precision\n     * float value. See {@link #toString(short)} for more information.\n     *\n     * @return A string representation of this {@code Half} object\n     ",
    "links" : [ "#toString" ]
  }, {
    "name" : "public int compareTo(@NonNull Half h)",
    "returnType" : "int",
    "comment" : "\n     * <p>Compares the two specified half-precision float values. The following\n     * conditions apply during the comparison:</p>\n     *\n     * <ul>\n     * <li>{@link #NaN} is considered by this method to be equal to itself and greater\n     * than all other half-precision float values (including {@code #POSITIVE_INFINITY})</li>\n     * <li>{@link #POSITIVE_ZERO} is considered by this method to be greater than\n     * {@link #NEGATIVE_ZERO}.</li>\n     * </ul>\n     *\n     * @param h The half-precision float value to compare to the half-precision value\n     *          represented by this {@code Half} object\n     *\n     * @return  The value {@code 0} if {@code x} is numerically equal to {@code y}; a\n     *          value less than {@code 0} if {@code x} is numerically less than {@code y};\n     *          and a value greater than {@code 0} if {@code x} is numerically greater\n     *          than {@code y}\n     ",
    "links" : [ "#NaN", "#POSITIVE_ZERO", "#NEGATIVE_ZERO" ]
  }, {
    "name" : "public static int hashCode(@HalfFloat short h)",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for a half-precision float value.\n     *\n     * @param h The value to hash\n     *\n     * @return A hash code value for a half-precision float value\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(@HalfFloat short x, @HalfFloat short y)",
    "returnType" : "int",
    "comment" : "\n     * <p>Compares the two specified half-precision float values. The following\n     * conditions apply during the comparison:</p>\n     *\n     * <ul>\n     * <li>{@link #NaN} is considered by this method to be equal to itself and greater\n     * than all other half-precision float values (including {@code #POSITIVE_INFINITY})</li>\n     * <li>{@link #POSITIVE_ZERO} is considered by this method to be greater than\n     * {@link #NEGATIVE_ZERO}.</li>\n     * </ul>\n     *\n     * @param x The first half-precision float value to compare.\n     * @param y The second half-precision float value to compare\n     *\n     * @return  The value {@code 0} if {@code x} is numerically equal to {@code y}, a\n     *          value less than {@code 0} if {@code x} is numerically less than {@code y},\n     *          and a value greater than {@code 0} if {@code x} is numerically greater\n     *          than {@code y}\n     ",
    "links" : [ "#NaN", "#POSITIVE_ZERO", "#NEGATIVE_ZERO" ]
  }, {
    "name" : "public static short halfToShortBits(@HalfFloat short h)",
    "returnType" : "short",
    "comment" : "\n     * <p>Returns a representation of the specified half-precision float value\n     * according to the bit layout described in {@link Half}.</p>\n     *\n     * <p>Similar to {@link #halfToIntBits(short)}, this method collapses all\n     * possible Not-a-Number values to a single canonical Not-a-Number value\n     * defined by {@link #NaN}.</p>\n     *\n     * @param h A half-precision float value\n     * @return The bits that represent the half-precision float value\n     *\n     * @see #halfToIntBits(short)\n     ",
    "links" : [ "Half", "#halfToIntBits", "#NaN" ]
  }, {
    "name" : "public static int halfToIntBits(@HalfFloat short h)",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns a representation of the specified half-precision float value\n     * according to the bit layout described in {@link Half}.</p>\n     *\n     * <p>Unlike {@link #halfToRawIntBits(short)}, this method collapses all\n     * possible Not-a-Number values to a single canonical Not-a-Number value\n     * defined by {@link #NaN}.</p>\n     *\n     * @param h A half-precision float value\n     * @return The bits that represent the half-precision float value\n     *\n     * @see #halfToRawIntBits(short)\n     * @see #halfToShortBits(short)\n     * @see #intBitsToHalf(int)\n     ",
    "links" : [ "Half", "#halfToRawIntBits", "#NaN" ]
  }, {
    "name" : "public static int halfToRawIntBits(@HalfFloat short h)",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns a representation of the specified half-precision float value\n     * according to the bit layout described in {@link Half}.</p>\n     *\n     * <p>The argument is considered to be a representation of a half-precision\n     * float value according to the bit layout described in {@link Half}. The 16\n     * most significant bits of the returned value are set to 0.</p>\n     *\n     * @param h A half-precision float value\n     * @return The bits that represent the half-precision float value\n     *\n     * @see #halfToIntBits(short)\n     * @see #intBitsToHalf(int)\n     ",
    "links" : [ "Half", "Half" ]
  }, {
    "name" : "public static short intBitsToHalf(int bits)",
    "returnType" : "short",
    "comment" : "\n     * <p>Returns the half-precision float value corresponding to a given\n     * bit representation.</p>\n     *\n     * <p>The argument is considered to be a representation of a half-precision\n     * float value according to the bit layout described in {@link Half}. The 16\n     * most significant bits of the argument are ignored.</p>\n     *\n     * @param bits An integer\n     * @return The half-precision float value with the same bit pattern\n     ",
    "links" : [ "Half" ]
  }, {
    "name" : "public static short copySign(@HalfFloat short magnitude, @HalfFloat short sign)",
    "returnType" : "short",
    "comment" : "\n     * Returns the first parameter with the sign of the second parameter.\n     * This method treats NaNs as having a sign.\n     *\n     * @param magnitude A half-precision float value providing the magnitude of the result\n     * @param sign  A half-precision float value providing the sign of the result\n     * @return A value with the magnitude of the first parameter and the sign\n     *         of the second parameter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static short abs(@HalfFloat short h)",
    "returnType" : "short",
    "comment" : "\n     * Returns the absolute value of the specified half-precision float.\n     * Special values are handled in the following ways:\n     * <ul>\n     * <li>If the specified half-precision float is NaN, the result is NaN</li>\n     * <li>If the specified half-precision float is zero (negative or positive),\n     * the result is positive zero (see {@link #POSITIVE_ZERO})</li>\n     * <li>If the specified half-precision float is infinity (negative or positive),\n     * the result is positive infinity (see {@link #POSITIVE_INFINITY})</li>\n     * </ul>\n     *\n     * @param h A half-precision float value\n     * @return The absolute value of the specified half-precision float\n     ",
    "links" : [ "#POSITIVE_ZERO", "#POSITIVE_INFINITY" ]
  }, {
    "name" : "public static short round(@HalfFloat short h)",
    "returnType" : "short",
    "comment" : "\n     * Returns the closest integral half-precision float value to the specified\n     * half-precision float value. Special values are handled in the\n     * following ways:\n     * <ul>\n     * <li>If the specified half-precision float is NaN, the result is NaN</li>\n     * <li>If the specified half-precision float is infinity (negative or positive),\n     * the result is infinity (with the same sign)</li>\n     * <li>If the specified half-precision float is zero (negative or positive),\n     * the result is zero (with the same sign)</li>\n     * </ul>\n     *\n     * <p class=note>\n     * <strong>Note:</strong> Unlike the identically named\n     * <code class=prettyprint>int java.lang.Math.round(float)</code> method,\n     * this returns a Half value stored in a short, <strong>not</strong> an\n     * actual short integer result.\n     *\n     * @param h A half-precision float value\n     * @return The value of the specified half-precision float rounded to the nearest\n     *         half-precision float value\n     ",
    "links" : [ ]
  }, {
    "name" : "public static short ceil(@HalfFloat short h)",
    "returnType" : "short",
    "comment" : "\n     * Returns the smallest half-precision float value toward negative infinity\n     * greater than or equal to the specified half-precision float value.\n     * Special values are handled in the following ways:\n     * <ul>\n     * <li>If the specified half-precision float is NaN, the result is NaN</li>\n     * <li>If the specified half-precision float is infinity (negative or positive),\n     * the result is infinity (with the same sign)</li>\n     * <li>If the specified half-precision float is zero (negative or positive),\n     * the result is zero (with the same sign)</li>\n     * </ul>\n     *\n     * @param h A half-precision float value\n     * @return The smallest half-precision float value toward negative infinity\n     *         greater than or equal to the specified half-precision float value\n     ",
    "links" : [ ]
  }, {
    "name" : "public static short floor(@HalfFloat short h)",
    "returnType" : "short",
    "comment" : "\n     * Returns the largest half-precision float value toward positive infinity\n     * less than or equal to the specified half-precision float value.\n     * Special values are handled in the following ways:\n     * <ul>\n     * <li>If the specified half-precision float is NaN, the result is NaN</li>\n     * <li>If the specified half-precision float is infinity (negative or positive),\n     * the result is infinity (with the same sign)</li>\n     * <li>If the specified half-precision float is zero (negative or positive),\n     * the result is zero (with the same sign)</li>\n     * </ul>\n     *\n     * @param h A half-precision float value\n     * @return The largest half-precision float value toward positive infinity\n     *         less than or equal to the specified half-precision float value\n     ",
    "links" : [ ]
  }, {
    "name" : "public static short trunc(@HalfFloat short h)",
    "returnType" : "short",
    "comment" : "\n     * Returns the truncated half-precision float value of the specified\n     * half-precision float value. Special values are handled in the following ways:\n     * <ul>\n     * <li>If the specified half-precision float is NaN, the result is NaN</li>\n     * <li>If the specified half-precision float is infinity (negative or positive),\n     * the result is infinity (with the same sign)</li>\n     * <li>If the specified half-precision float is zero (negative or positive),\n     * the result is zero (with the same sign)</li>\n     * </ul>\n     *\n     * @param h A half-precision float value\n     * @return The truncated half-precision float value of the specified\n     *         half-precision float value\n     ",
    "links" : [ ]
  }, {
    "name" : "public static short min(@HalfFloat short x, @HalfFloat short y)",
    "returnType" : "short",
    "comment" : "\n     * Returns the smaller of two half-precision float values (the value closest\n     * to negative infinity). Special values are handled in the following ways:\n     * <ul>\n     * <li>If either value is NaN, the result is NaN</li>\n     * <li>{@link #NEGATIVE_ZERO} is smaller than {@link #POSITIVE_ZERO}</li>\n     * </ul>\n     *\n     * @param x The first half-precision value\n     * @param y The second half-precision value\n     * @return The smaller of the two specified half-precision values\n     ",
    "links" : [ "#NEGATIVE_ZERO", "#POSITIVE_ZERO" ]
  }, {
    "name" : "public static short max(@HalfFloat short x, @HalfFloat short y)",
    "returnType" : "short",
    "comment" : "\n     * Returns the larger of two half-precision float values (the value closest\n     * to positive infinity). Special values are handled in the following ways:\n     * <ul>\n     * <li>If either value is NaN, the result is NaN</li>\n     * <li>{@link #POSITIVE_ZERO} is greater than {@link #NEGATIVE_ZERO}</li>\n     * </ul>\n     *\n     * @param x The first half-precision value\n     * @param y The second half-precision value\n     *\n     * @return The larger of the two specified half-precision values\n     ",
    "links" : [ "#POSITIVE_ZERO", "#NEGATIVE_ZERO" ]
  }, {
    "name" : "public static boolean less(@HalfFloat short x, @HalfFloat short y)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the first half-precision float value is less (smaller\n     * toward negative infinity) than the second half-precision float value.\n     * If either of the values is NaN, the result is false.\n     *\n     * @param x The first half-precision value\n     * @param y The second half-precision value\n     *\n     * @return True if x is less than y, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean lessEquals(@HalfFloat short x, @HalfFloat short y)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the first half-precision float value is less (smaller\n     * toward negative infinity) than or equal to the second half-precision\n     * float value. If either of the values is NaN, the result is false.\n     *\n     * @param x The first half-precision value\n     * @param y The second half-precision value\n     *\n     * @return True if x is less than or equal to y, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean greater(@HalfFloat short x, @HalfFloat short y)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the first half-precision float value is greater (larger\n     * toward positive infinity) than the second half-precision float value.\n     * If either of the values is NaN, the result is false.\n     *\n     * @param x The first half-precision value\n     * @param y The second half-precision value\n     *\n     * @return True if x is greater than y, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean greaterEquals(@HalfFloat short x, @HalfFloat short y)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the first half-precision float value is greater (larger\n     * toward positive infinity) than or equal to the second half-precision float\n     * value. If either of the values is NaN, the result is false.\n     *\n     * @param x The first half-precision value\n     * @param y The second half-precision value\n     *\n     * @return True if x is greater than y, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean equals(@HalfFloat short x, @HalfFloat short y)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the two half-precision float values are equal.\n     * If either of the values is NaN, the result is false. {@link #POSITIVE_ZERO}\n     * and {@link #NEGATIVE_ZERO} are considered equal.\n     *\n     * @param x The first half-precision value\n     * @param y The second half-precision value\n     *\n     * @return True if x is equal to y, false otherwise\n     ",
    "links" : [ "#POSITIVE_ZERO", "#NEGATIVE_ZERO" ]
  }, {
    "name" : "public static int getSign(@HalfFloat short h)",
    "returnType" : "int",
    "comment" : "\n     * Returns the sign of the specified half-precision float.\n     *\n     * @param h A half-precision float value\n     * @return 1 if the value is positive, -1 if the value is negative\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getExponent(@HalfFloat short h)",
    "returnType" : "int",
    "comment" : "\n     * Returns the unbiased exponent used in the representation of\n     * the specified  half-precision float value. if the value is NaN\n     * or infinite, this* method returns {@link #MAX_EXPONENT} + 1.\n     * If the argument is 0 or a subnormal representation, this method\n     * returns {@link #MIN_EXPONENT} - 1.\n     *\n     * @param h A half-precision float value\n     * @return The unbiased exponent of the specified value\n     ",
    "links" : [ "#MAX_EXPONENT", "#MIN_EXPONENT" ]
  }, {
    "name" : "public static int getSignificand(@HalfFloat short h)",
    "returnType" : "int",
    "comment" : "\n     * Returns the significand, or mantissa, used in the representation\n     * of the specified half-precision float value.\n     *\n     * @param h A half-precision float value\n     * @return The significand, or significand, of the specified vlaue\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isInfinite(@HalfFloat short h)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified half-precision float value represents\n     * infinity, false otherwise.\n     *\n     * @param h A half-precision float value\n     * @return True if the value is positive infinity or negative infinity,\n     *         false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNaN(@HalfFloat short h)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified half-precision float value represents\n     * a Not-a-Number, false otherwise.\n     *\n     * @param h A half-precision float value\n     * @return True if the value is a NaN, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNormalized(@HalfFloat short h)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified half-precision float value is normalized\n     * (does not have a subnormal representation). If the specified value is\n     * {@link #POSITIVE_INFINITY}, {@link #NEGATIVE_INFINITY},\n     * {@link #POSITIVE_ZERO}, {@link #NEGATIVE_ZERO}, NaN or any subnormal\n     * number, this method returns false.\n     *\n     * @param h A half-precision float value\n     * @return True if the value is normalized, false otherwise\n     ",
    "links" : [ "#POSITIVE_INFINITY", "#NEGATIVE_INFINITY", "#POSITIVE_ZERO", "#NEGATIVE_ZERO" ]
  }, {
    "name" : "public static float toFloat(@HalfFloat short h)",
    "returnType" : "float",
    "comment" : "\n     * <p>Converts the specified half-precision float value into a\n     * single-precision float value. The following special cases are handled:</p>\n     * <ul>\n     * <li>If the input is {@link #NaN}, the returned value is {@link Float#NaN}</li>\n     * <li>If the input is {@link #POSITIVE_INFINITY} or\n     * {@link #NEGATIVE_INFINITY}, the returned value is respectively\n     * {@link Float#POSITIVE_INFINITY} or {@link Float#NEGATIVE_INFINITY}</li>\n     * <li>If the input is 0 (positive or negative), the returned value is +/-0.0f</li>\n     * <li>Otherwise, the returned value is a normalized single-precision float value</li>\n     * </ul>\n     *\n     * @param h The half-precision float value to convert to single-precision\n     * @return A normalized single-precision float value\n     ",
    "links" : [ "#NaN", "Float#NaN", "#POSITIVE_INFINITY", "#NEGATIVE_INFINITY", "Float#POSITIVE_INFINITY", "Float#NEGATIVE_INFINITY" ]
  }, {
    "name" : "public static short toHalf(float f)",
    "returnType" : "short",
    "comment" : "\n     * <p>Converts the specified single-precision float value into a\n     * half-precision float value. The following special cases are handled:</p>\n     * <ul>\n     * <li>If the input is NaN (see {@link Float#isNaN(float)}), the returned\n     * value is {@link #NaN}</li>\n     * <li>If the input is {@link Float#POSITIVE_INFINITY} or\n     * {@link Float#NEGATIVE_INFINITY}, the returned value is respectively\n     * {@link #POSITIVE_INFINITY} or {@link #NEGATIVE_INFINITY}</li>\n     * <li>If the input is 0 (positive or negative), the returned value is\n     * {@link #POSITIVE_ZERO} or {@link #NEGATIVE_ZERO}</li>\n     * <li>If the input is a less than {@link #MIN_VALUE}, the returned value\n     * is flushed to {@link #POSITIVE_ZERO} or {@link #NEGATIVE_ZERO}</li>\n     * <li>If the input is a less than {@link #MIN_NORMAL}, the returned value\n     * is a denorm half-precision float</li>\n     * <li>Otherwise, the returned value is rounded to the nearest\n     * representable half-precision float value</li>\n     * </ul>\n     *\n     * @param f The single-precision float value to convert to half-precision\n     * @return A half-precision float value\n     ",
    "links" : [ "Float#isNaN", "#NaN", "Float#POSITIVE_INFINITY", "Float#NEGATIVE_INFINITY", "#POSITIVE_INFINITY", "#NEGATIVE_INFINITY", "#POSITIVE_ZERO", "#NEGATIVE_ZERO", "#MIN_VALUE", "#POSITIVE_ZERO", "#NEGATIVE_ZERO", "#MIN_NORMAL" ]
  }, {
    "name" : "public static Half valueOf(@HalfFloat short h)",
    "returnType" : "Half",
    "comment" : "\n     * Returns a {@code Half} instance representing the specified\n     * half-precision float value.\n     *\n     * @param h A half-precision float value\n     * @return a {@code Half} instance representing {@code h}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Half valueOf(float f)",
    "returnType" : "Half",
    "comment" : "\n     * Returns a {@code Half} instance representing the specified float value.\n     *\n     * @param f A float value\n     * @return a {@code Half} instance representing {@code f}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Half valueOf(@NonNull String s)",
    "returnType" : "Half",
    "comment" : "\n     * Returns a {@code Half} instance representing the specified string value.\n     * Calling this method is equivalent to calling\n     * <code>toHalf(Float.parseString(h))</code>. See {@link Float#valueOf(String)}\n     * for more information on the format of the string representation.\n     *\n     * @param s The string to be parsed\n     * @return a {@code Half} instance representing {@code h}\n     * @throws NumberFormatException if the string does not contain a parsable\n     *         half-precision float value\n     ",
    "links" : [ "Float#valueOf" ]
  }, {
    "name" : "public static short parseHalf(@NonNull String s) throws NumberFormatException",
    "returnType" : "short",
    "comment" : "\n     * Returns the half-precision float value represented by the specified string.\n     * Calling this method is equivalent to calling\n     * <code>toHalf(Float.parseString(h))</code>. See {@link Float#valueOf(String)}\n     * for more information on the format of the string representation.\n     *\n     * @param s The string to be parsed\n     * @return A half-precision float value represented by the string\n     * @throws NumberFormatException if the string does not contain a parsable\n     *         half-precision float value\n     ",
    "links" : [ "Float#valueOf" ]
  }, {
    "name" : "public static String toString(@HalfFloat short h)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the specified half-precision\n     * float value. Calling this method is equivalent to calling\n     * <code>Float.toString(toFloat(h))</code>. See {@link Float#toString(float)}\n     * for more information on the format of the string representation.\n     *\n     * @param h A half-precision float value\n     * @return A string representation of the specified value\n     ",
    "links" : [ "Float#toString" ]
  }, {
    "name" : "public static String toHexString(@HalfFloat short h)",
    "returnType" : "String",
    "comment" : "\n     * <p>Returns a hexadecimal string representation of the specified half-precision\n     * float value. If the value is a NaN, the result is <code>\"NaN\"</code>,\n     * otherwise the result follows this format:</p>\n     * <ul>\n     * <li>If the sign is positive, no sign character appears in the result</li>\n     * <li>If the sign is negative, the first character is <code>'-'</code></li>\n     * <li>If the value is inifinity, the string is <code>\"Infinity\"</code></li>\n     * <li>If the value is 0, the string is <code>\"0x0.0p0\"</code></li>\n     * <li>If the value has a normalized representation, the exponent and\n     * significand are represented in the string in two fields. The significand\n     * starts with <code>\"0x1.\"</code> followed by its lowercase hexadecimal\n     * representation. Trailing zeroes are removed unless all digits are 0, then\n     * a single zero is used. The significand representation is followed by the\n     * exponent, represented by <code>\"p\"</code>, itself followed by a decimal\n     * string of the unbiased exponent</li>\n     * <li>If the value has a subnormal representation, the significand starts\n     * with <code>\"0x0.\"</code> followed by its lowercase hexadecimal\n     * representation. Trailing zeroes are removed unless all digits are 0, then\n     * a single zero is used. The significand representation is followed by the\n     * exponent, represented by <code>\"p-14\"</code></li>\n     * </ul>\n     *\n     * @param h A half-precision float value\n     * @return A hexadecimal string representation of the specified value\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SIZE", "EPSILON", "MAX_EXPONENT", "MIN_EXPONENT", "LOWEST_VALUE", "MAX_VALUE", "MIN_NORMAL", "MIN_VALUE", "NaN", "NEGATIVE_INFINITY", "NEGATIVE_ZERO", "POSITIVE_INFINITY", "POSITIVE_ZERO", "mValue" ],
  "methodNames" : [ "public short halfValue()", "public byte byteValue()", "public short shortValue()", "public int intValue()", "public long longValue()", "public float floatValue()", "public double doubleValue()", "public boolean isNaN()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public String toString()", "public int compareTo(@NonNull Half h)", "public static int hashCode(@HalfFloat short h)", "public static int compare(@HalfFloat short x, @HalfFloat short y)", "public static short halfToShortBits(@HalfFloat short h)", "public static int halfToIntBits(@HalfFloat short h)", "public static int halfToRawIntBits(@HalfFloat short h)", "public static short intBitsToHalf(int bits)", "public static short copySign(@HalfFloat short magnitude, @HalfFloat short sign)", "public static short abs(@HalfFloat short h)", "public static short round(@HalfFloat short h)", "public static short ceil(@HalfFloat short h)", "public static short floor(@HalfFloat short h)", "public static short trunc(@HalfFloat short h)", "public static short min(@HalfFloat short x, @HalfFloat short y)", "public static short max(@HalfFloat short x, @HalfFloat short y)", "public static boolean less(@HalfFloat short x, @HalfFloat short y)", "public static boolean lessEquals(@HalfFloat short x, @HalfFloat short y)", "public static boolean greater(@HalfFloat short x, @HalfFloat short y)", "public static boolean greaterEquals(@HalfFloat short x, @HalfFloat short y)", "public static boolean equals(@HalfFloat short x, @HalfFloat short y)", "public static int getSign(@HalfFloat short h)", "public static int getExponent(@HalfFloat short h)", "public static int getSignificand(@HalfFloat short h)", "public static boolean isInfinite(@HalfFloat short h)", "public static boolean isNaN(@HalfFloat short h)", "public static boolean isNormalized(@HalfFloat short h)", "public static float toFloat(@HalfFloat short h)", "public static short toHalf(float f)", "public static Half valueOf(@HalfFloat short h)", "public static Half valueOf(float f)", "public static Half valueOf(@NonNull String s)", "public static short parseHalf(@NonNull String s) throws NumberFormatException", "public static String toString(@HalfFloat short h)", "public static String toHexString(@HalfFloat short h)" ]
}