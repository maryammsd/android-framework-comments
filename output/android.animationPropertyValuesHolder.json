{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/animation/PropertyValuesHolder.java",
  "packageName" : "android.animation",
  "className" : "PropertyValuesHolder",
  "comment" : "\n * This class holds information about a property and the values that that property\n * should take on during an animation. PropertyValuesHolder objects can be used to create\n * animations with ValueAnimator or ObjectAnimator that operate on several different properties\n * in parallel.\n ",
  "variables" : [ {
    "name" : "mPropertyName",
    "type" : "String",
    "comment" : "\n     * The name of the property associated with the values. This need not be a real property,\n     * unless this object is being used with ObjectAnimator. But this is the name by which\n     * aniamted values are looked up with getAnimatedValue(String) in ValueAnimator.\n     ",
    "links" : [ ]
  }, {
    "name" : "mProperty",
    "type" : "Property",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mSetter",
    "type" : "Method",
    "comment" : "\n     * The setter function, if needed. ObjectAnimator hands off this functionality to\n     * PropertyValuesHolder, since it holds all of the per-property information. This\n     * property is automatically\n     * derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.\n     ",
    "links" : [ ]
  }, {
    "name" : "mGetter",
    "type" : "Method",
    "comment" : "\n     * The getter function, if needed. ObjectAnimator hands off this functionality to\n     * PropertyValuesHolder, since it holds all of the per-property information. This\n     * property is automatically\n     * derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.\n     * The getter is only derived and used if one of the values is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "mValueType",
    "type" : "Class",
    "comment" : "\n     * The type of values supplied. This information is used both in deriving the setter/getter\n     * functions and in deriving the type of TypeEvaluator.\n     ",
    "links" : [ ]
  }, {
    "name" : "mKeyframes",
    "type" : "Keyframes",
    "comment" : "\n     * The set of keyframes (time/value pairs) that define this animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "sIntEvaluator",
    "type" : "TypeEvaluator",
    "comment" : " type evaluators for the primitive types handled by this implementation",
    "links" : [ ]
  }, {
    "name" : "sFloatEvaluator",
    "type" : "TypeEvaluator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLOAT_VARIANTS",
    "type" : "Class[]",
    "comment" : " So we supply an ordered array of other types to try before giving up.",
    "links" : [ ]
  }, {
    "name" : "INTEGER_VARIANTS",
    "type" : "Class[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOUBLE_VARIANTS",
    "type" : "Class[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSetterPropertyMap",
    "type" : "HashMap<Class, HashMap<String, Method>>",
    "comment" : " combination. No need to use reflection on the combination more than once.",
    "links" : [ ]
  }, {
    "name" : "sGetterPropertyMap",
    "type" : "HashMap<Class, HashMap<String, Method>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpValueArray",
    "type" : "Object[]",
    "comment" : " Used to pass single value to varargs parameter in setter invocation",
    "links" : [ ]
  }, {
    "name" : "mEvaluator",
    "type" : "TypeEvaluator",
    "comment" : "\n     * The type evaluator used to calculate the animated values. This evaluator is determined\n     * automatically based on the type of the start/end objects passed into the constructor,\n     * but the system only knows about the primitive types int and float. Any other\n     * type will need to set the evaluator to a custom evaluator for that type.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimatedValue",
    "type" : "Object",
    "comment" : "\n     * The value most recently calculated by calculateValue(). This is set during\n     * that function and might be retrieved later either by ValueAnimator.animatedValue() or\n     * by the property-setting logic in ObjectAnimator.animatedValue().\n     ",
    "links" : [ ]
  }, {
    "name" : "mConverter",
    "type" : "TypeConverter",
    "comment" : "\n     * Converts from the source Object type to the setter Object type.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static PropertyValuesHolder ofInt(String propertyName, int... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property name and\n     * set of int values.\n     * @param propertyName The name of the property being animated.\n     * @param values The values that the named property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofInt(Property<?, Integer> property, int... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property and\n     * set of int values.\n     * @param property The property being animated. Should not be null.\n     * @param values The values that the property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofMultiInt(String propertyName, int[][] values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property name and\n     * set of <code>int[]</code> values. At least two <code>int[]</code> values must be supplied,\n     * a start and end value. If more values are supplied, the values will be animated from the\n     * start, through all intermediate values to the end value. When used with ObjectAnimator,\n     * the elements of the array represent the parameters of the setter function.\n     *\n     * @param propertyName The name of the property being animated. Can also be the\n     *                     case-sensitive name of the entire setter method. Should not be null.\n     * @param values The values that the property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     * @see IntArrayEvaluator#IntArrayEvaluator(int[])\n     * @see ObjectAnimator#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofMultiInt(String propertyName, Path path)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property name to use\n     * as a multi-int setter. The values are animated along the path, with the first\n     * parameter of the setter set to the x coordinate and the second set to the y coordinate.\n     *\n     * @param propertyName The name of the property being animated. Can also be the\n     *                     case-sensitive name of the entire setter method. Should not be null.\n     *                     The setter must take exactly two <code>int</code> parameters.\n     * @param path The Path along which the values should be animated.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     * @see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofMultiInt(String propertyName, TypeConverter<V, int[]> converter, TypeEvaluator<V> evaluator, V... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property and\n     * set of Object values for use with ObjectAnimator multi-value setters. The Object\n     * values are converted to <code>int[]</code> using the converter.\n     *\n     * @param propertyName The property being animated or complete name of the setter.\n     *                     Should not be null.\n     * @param converter Used to convert the animated value to setter parameters.\n     * @param evaluator A TypeEvaluator that will be called on each animation frame to\n     * provide the necessary interpolation between the Object values to derive the animated\n     * value.\n     * @param values The values that the property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     * @see ObjectAnimator#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])\n     * @see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofMultiInt(String propertyName, TypeConverter<T, int[]> converter, TypeEvaluator<T> evaluator, Keyframe... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder object with the specified property name or\n     * setter name for use in a multi-int setter function using ObjectAnimator. The values can be\n     * of any type, but the type should be consistent so that the supplied\n     * {@link android.animation.TypeEvaluator} can be used to to evaluate the animated value. The\n     * <code>converter</code> converts the values to parameters in the setter function.\n     *\n     * <p>At least two values must be supplied, a start and an end value.</p>\n     *\n     * @param propertyName The name of the property to associate with the set of values. This\n     *                     may also be the complete name of a setter function.\n     * @param converter    Converts <code>values</code> into int parameters for the setter.\n     *                     Can be null if the Keyframes have int[] values.\n     * @param evaluator    Used to interpolate between values.\n     * @param values       The values at specific fractional times to evaluate between\n     * @return A PropertyValuesHolder for a multi-int parameter setter.\n     ",
    "links" : [ "android.animation.TypeEvaluator" ]
  }, {
    "name" : "public static PropertyValuesHolder ofFloat(String propertyName, float... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property name and\n     * set of float values.\n     * @param propertyName The name of the property being animated.\n     * @param values The values that the named property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofFloat(Property<?, Float> property, float... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property and\n     * set of float values.\n     * @param property The property being animated. Should not be null.\n     * @param values The values that the property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofMultiFloat(String propertyName, float[][] values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property name and\n     * set of <code>float[]</code> values. At least two <code>float[]</code> values must be supplied,\n     * a start and end value. If more values are supplied, the values will be animated from the\n     * start, through all intermediate values to the end value. When used with ObjectAnimator,\n     * the elements of the array represent the parameters of the setter function.\n     *\n     * @param propertyName The name of the property being animated. Can also be the\n     *                     case-sensitive name of the entire setter method. Should not be null.\n     * @param values The values that the property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     * @see FloatArrayEvaluator#FloatArrayEvaluator(float[])\n     * @see ObjectAnimator#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofMultiFloat(String propertyName, Path path)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property name to use\n     * as a multi-float setter. The values are animated along the path, with the first\n     * parameter of the setter set to the x coordinate and the second set to the y coordinate.\n     *\n     * @param propertyName The name of the property being animated. Can also be the\n     *                     case-sensitive name of the entire setter method. Should not be null.\n     *                     The setter must take exactly two <code>float</code> parameters.\n     * @param path The Path along which the values should be animated.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     * @see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofMultiFloat(String propertyName, TypeConverter<V, float[]> converter, TypeEvaluator<V> evaluator, V... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property and\n     * set of Object values for use with ObjectAnimator multi-value setters. The Object\n     * values are converted to <code>float[]</code> using the converter.\n     *\n     * @param propertyName The property being animated or complete name of the setter.\n     *                     Should not be null.\n     * @param converter Used to convert the animated value to setter parameters.\n     * @param evaluator A TypeEvaluator that will be called on each animation frame to\n     * provide the necessary interpolation between the Object values to derive the animated\n     * value.\n     * @param values The values that the property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     * @see ObjectAnimator#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofMultiFloat(String propertyName, TypeConverter<T, float[]> converter, TypeEvaluator<T> evaluator, Keyframe... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder object with the specified property name or\n     * setter name for use in a multi-float setter function using ObjectAnimator. The values can be\n     * of any type, but the type should be consistent so that the supplied\n     * {@link android.animation.TypeEvaluator} can be used to to evaluate the animated value. The\n     * <code>converter</code> converts the values to parameters in the setter function.\n     *\n     * <p>At least two values must be supplied, a start and an end value.</p>\n     *\n     * @param propertyName The name of the property to associate with the set of values. This\n     *                     may also be the complete name of a setter function.\n     * @param converter    Converts <code>values</code> into float parameters for the setter.\n     *                     Can be null if the Keyframes have float[] values.\n     * @param evaluator    Used to interpolate between values.\n     * @param values       The values at specific fractional times to evaluate between\n     * @return A PropertyValuesHolder for a multi-float parameter setter.\n     ",
    "links" : [ "android.animation.TypeEvaluator" ]
  }, {
    "name" : "public static PropertyValuesHolder ofObject(String propertyName, TypeEvaluator evaluator, Object... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property name and\n     * set of Object values. This variant also takes a TypeEvaluator because the system\n     * cannot automatically interpolate between objects of unknown type.\n     *\n     * <p><strong>Note:</strong> The Object values are stored as references to the original\n     * objects, which means that changes to those objects after this method is called will\n     * affect the values on the PropertyValuesHolder. If the objects will be mutated externally\n     * after this method is called, callers should pass a copy of those objects instead.\n     *\n     * @param propertyName The name of the property being animated.\n     * @param evaluator A TypeEvaluator that will be called on each animation frame to\n     * provide the necessary interpolation between the Object values to derive the animated\n     * value.\n     * @param values The values that the named property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofObject(String propertyName, TypeConverter<PointF, ?> converter, Path path)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property name and\n     * a Path along which the values should be animated. This variant supports a\n     * <code>TypeConverter</code> to convert from <code>PointF</code> to the target\n     * type.\n     *\n     * <p>The PointF passed to <code>converter</code> or <code>property</code>, if\n     * <code>converter</code> is <code>null</code>, is reused on each animation frame and should\n     * not be stored by the setter or TypeConverter.</p>\n     *\n     * @param propertyName The name of the property being animated.\n     * @param converter Converts a PointF to the type associated with the setter. May be\n     *                  null if conversion is unnecessary.\n     * @param path The Path along which the values should be animated.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofObject(Property property, TypeEvaluator<V> evaluator, V... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property and\n     * set of Object values. This variant also takes a TypeEvaluator because the system\n     * cannot automatically interpolate between objects of unknown type.\n     *\n     * <p><strong>Note:</strong> The Object values are stored as references to the original\n     * objects, which means that changes to those objects after this method is called will\n     * affect the values on the PropertyValuesHolder. If the objects will be mutated externally\n     * after this method is called, callers should pass a copy of those objects instead.\n     *\n     * @param property The property being animated. Should not be null.\n     * @param evaluator A TypeEvaluator that will be called on each animation frame to\n     * provide the necessary interpolation between the Object values to derive the animated\n     * value.\n     * @param values The values that the property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofObject(Property<?, V> property, TypeConverter<T, V> converter, TypeEvaluator<T> evaluator, T... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property and\n     * set of Object values. This variant also takes a TypeEvaluator because the system\n     * cannot automatically interpolate between objects of unknown type. This variant also\n     * takes a <code>TypeConverter</code> to convert from animated values to the type\n     * of the property. If only one value is supplied, the <code>TypeConverter</code>\n     * must be a {@link android.animation.BidirectionalTypeConverter} to retrieve the current\n     * value.\n     *\n     * <p><strong>Note:</strong> The Object values are stored as references to the original\n     * objects, which means that changes to those objects after this method is called will\n     * affect the values on the PropertyValuesHolder. If the objects will be mutated externally\n     * after this method is called, callers should pass a copy of those objects instead.\n     *\n     * @param property The property being animated. Should not be null.\n     * @param converter Converts the animated object to the Property type.\n     * @param evaluator A TypeEvaluator that will be called on each animation frame to\n     * provide the necessary interpolation between the Object values to derive the animated\n     * value.\n     * @param values The values that the property will animate between.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     * @see #setConverter(TypeConverter)\n     * @see TypeConverter\n     ",
    "links" : [ "android.animation.BidirectionalTypeConverter" ]
  }, {
    "name" : "public static PropertyValuesHolder ofObject(Property<?, V> property, TypeConverter<PointF, V> converter, Path path)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder with a given property and\n     * a Path along which the values should be animated. This variant supports a\n     * <code>TypeConverter</code> to convert from <code>PointF</code> to the target\n     * type.\n     *\n     * <p>The PointF passed to <code>converter</code> or <code>property</code>, if\n     * <code>converter</code> is <code>null</code>, is reused on each animation frame and should\n     * not be stored by the setter or TypeConverter.</p>\n     *\n     * @param property The property being animated. Should not be null.\n     * @param converter Converts a PointF to the type associated with the setter. May be\n     *                  null if conversion is unnecessary.\n     * @param path The Path along which the values should be animated.\n     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PropertyValuesHolder ofKeyframe(String propertyName, Keyframe... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder object with the specified property name and set\n     * of values. These values can be of any type, but the type should be consistent so that\n     * an appropriate {@link android.animation.TypeEvaluator} can be found that matches\n     * the common type.\n     * <p>If there is only one value, it is assumed to be the end value of an animation,\n     * and an initial value will be derived, if possible, by calling a getter function\n     * on the object. Also, if any value is null, the value will be filled in when the animation\n     * starts in the same way. This mechanism of automatically getting null values only works\n     * if the PropertyValuesHolder object is used in conjunction\n     * {@link ObjectAnimator}, and with a getter function\n     * derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has\n     * no way of determining what the value should be.\n     * @param propertyName The name of the property associated with this set of values. This\n     * can be the actual property name to be used when using a ObjectAnimator object, or\n     * just a name used to get animated values, such as if this object is used with an\n     * ValueAnimator object.\n     * @param values The set of values to animate between.\n     ",
    "links" : [ "android.animation.TypeEvaluator", "ObjectAnimator" ]
  }, {
    "name" : "public static PropertyValuesHolder ofKeyframe(Property property, Keyframe... values)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "\n     * Constructs and returns a PropertyValuesHolder object with the specified property and set\n     * of values. These values can be of any type, but the type should be consistent so that\n     * an appropriate {@link android.animation.TypeEvaluator} can be found that matches\n     * the common type.\n     * <p>If there is only one value, it is assumed to be the end value of an animation,\n     * and an initial value will be derived, if possible, by calling the property's\n     * {@link android.util.Property#get(Object)} function.\n     * Also, if any value is null, the value will be filled in when the animation\n     * starts in the same way. This mechanism of automatically getting null values only works\n     * if the PropertyValuesHolder object is used in conjunction with\n     * {@link ObjectAnimator}, since otherwise PropertyValuesHolder has\n     * no way of determining what the value should be.\n     * @param property The property associated with this set of values. Should not be null.\n     * @param values The set of values to animate between.\n     ",
    "links" : [ "android.animation.TypeEvaluator", "android.util.Property#get", "ObjectAnimator" ]
  }, {
    "name" : " static PropertyValuesHolder ofKeyframes(String propertyName, Keyframes keyframes)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static PropertyValuesHolder ofKeyframes(Property property, Keyframes keyframes)",
    "returnType" : "PropertyValuesHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIntValues(int... values)",
    "returnType" : "void",
    "comment" : "\n     * Set the animated values for this object to this set of ints.\n     * If there is only one value, it is assumed to be the end value of an animation,\n     * and an initial value will be derived, if possible, by calling a getter function\n     * on the object. Also, if any value is null, the value will be filled in when the animation\n     * starts in the same way. This mechanism of automatically getting null values only works\n     * if the PropertyValuesHolder object is used in conjunction\n     * {@link ObjectAnimator}, and with a getter function\n     * derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has\n     * no way of determining what the value should be.\n     *\n     * @param values One or more values that the animation will animate between.\n     ",
    "links" : [ "ObjectAnimator" ]
  }, {
    "name" : "public void setFloatValues(float... values)",
    "returnType" : "void",
    "comment" : "\n     * Set the animated values for this object to this set of floats.\n     * If there is only one value, it is assumed to be the end value of an animation,\n     * and an initial value will be derived, if possible, by calling a getter function\n     * on the object. Also, if any value is null, the value will be filled in when the animation\n     * starts in the same way. This mechanism of automatically getting null values only works\n     * if the PropertyValuesHolder object is used in conjunction\n     * {@link ObjectAnimator}, and with a getter function\n     * derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has\n     * no way of determining what the value should be.\n     *\n     * @param values One or more values that the animation will animate between.\n     ",
    "links" : [ "ObjectAnimator" ]
  }, {
    "name" : "public void setKeyframes(Keyframe... values)",
    "returnType" : "void",
    "comment" : "\n     * Set the animated values for this object to this set of Keyframes.\n     *\n     * @param values One or more values that the animation will animate between.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setObjectValues(Object... values)",
    "returnType" : "void",
    "comment" : "\n     * Set the animated values for this object to this set of Objects.\n     * If there is only one value, it is assumed to be the end value of an animation,\n     * and an initial value will be derived, if possible, by calling a getter function\n     * on the object. Also, if any value is null, the value will be filled in when the animation\n     * starts in the same way. This mechanism of automatically getting null values only works\n     * if the PropertyValuesHolder object is used in conjunction\n     * {@link ObjectAnimator}, and with a getter function\n     * derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has\n     * no way of determining what the value should be.\n     *\n     * <p><strong>Note:</strong> The Object values are stored as references to the original\n     * objects, which means that changes to those objects after this method is called will\n     * affect the values on the PropertyValuesHolder. If the objects will be mutated externally\n     * after this method is called, callers should pass a copy of those objects instead.\n     *\n     * @param values One or more values that the animation will animate between.\n     ",
    "links" : [ "ObjectAnimator" ]
  }, {
    "name" : "public void setConverter(TypeConverter converter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the converter to convert from the values type to the setter's parameter type.\n     * If only one value is supplied, <var>converter</var> must be a\n     * {@link android.animation.BidirectionalTypeConverter}.\n     * @param converter The converter to use to convert values.\n     ",
    "links" : [ "android.animation.BidirectionalTypeConverter" ]
  }, {
    "name" : "private Method getPropertyFunction(Class targetClass, String prefix, Class valueType)",
    "returnType" : "Method",
    "comment" : "\n     * Determine the setter or getter function using the JavaBeans convention of setFoo or\n     * getFoo for a property named 'foo'. This function figures out what the name of the\n     * function should be and uses reflection to find the Method with that name on the\n     * target object.\n     *\n     * @param targetClass The class to search for the method\n     * @param prefix \"set\" or \"get\", depending on whether we need a setter or getter.\n     * @param valueType The type of the parameter (in the case of a setter). This type\n     * is derived from the values set on this PropertyValuesHolder. This type is used as\n     * a first guess at the parameter type, but we check for methods with several different\n     * types to avoid problems with slight mis-matches between supplied values and actual\n     * value types used on the setter.\n     * @return Method the method associated with mPropertyName.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Method setupSetterOrGetter(Class targetClass, HashMap<Class, HashMap<String, Method>> propertyMapMap, String prefix, Class valueType)",
    "returnType" : "Method",
    "comment" : "\n     * Returns the setter or getter requested. This utility function checks whether the\n     * requested method exists in the propertyMapMap cache. If not, it calls another\n     * utility function to request the Method from the targetClass directly.\n     * @param targetClass The Class on which the requested method should exist.\n     * @param propertyMapMap The cache of setters/getters derived so far.\n     * @param prefix \"set\" or \"get\", for the setter or getter.\n     * @param valueType The type of parameter passed into the method (null for getter).\n     * @return Method the method associated with mPropertyName.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setupSetter(Class targetClass)",
    "returnType" : "void",
    "comment" : "\n     * Utility function to get the setter from targetClass\n     * @param targetClass The Class on which the requested method should exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setupGetter(Class targetClass)",
    "returnType" : "void",
    "comment" : "\n     * Utility function to get the getter from targetClass\n     ",
    "links" : [ ]
  }, {
    "name" : " void setupSetterAndGetter(Object target)",
    "returnType" : "void",
    "comment" : "\n     * Internal function (called from ObjectAnimator) to set up the setter and getter\n     * prior to running the animation. If the setter has not been manually set for this\n     * object, it will be derived automatically given the property name, target object, and\n     * types of values supplied. If no getter has been set, it will be supplied iff any of the\n     * supplied values was null. If there is a null value, then the getter (supplied or derived)\n     * will be called to set those null values to the current value of the property\n     * on the target object.\n     * @param target The object on which the setter (and possibly getter) exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object convertBack(Object value)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupValue(Object target, Keyframe kf)",
    "returnType" : "void",
    "comment" : "\n     * Utility function to set the value stored in a particular Keyframe. The value used is\n     * whatever the value is for the property name specified in the keyframe on the target object.\n     *\n     * @param target The target object from which the current value should be extracted.\n     * @param kf The keyframe which holds the property name and value.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setupStartValue(Object target)",
    "returnType" : "void",
    "comment" : "\n     * This function is called by ObjectAnimator when setting the start values for an animation.\n     * The start values are set according to the current values in the target object. The\n     * property whose value is extracted is whatever is specified by the propertyName of this\n     * PropertyValuesHolder object.\n     *\n     * @param target The object which holds the start values that should be set.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setupEndValue(Object target)",
    "returnType" : "void",
    "comment" : "\n     * This function is called by ObjectAnimator when setting the end values for an animation.\n     * The end values are set according to the current values in the target object. The\n     * property whose value is extracted is whatever is specified by the propertyName of this\n     * PropertyValuesHolder object.\n     *\n     * @param target The object which holds the start values that should be set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PropertyValuesHolder clone()",
    "returnType" : "PropertyValuesHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setAnimatedValue(Object target)",
    "returnType" : "void",
    "comment" : "\n     * Internal function to set the value on the target object, using the setter set up\n     * earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator\n     * to handle turning the value calculated by ValueAnimator into a value set on the object\n     * according to the name of the property.\n     * @param target The target object on which the value is set\n     ",
    "links" : [ ]
  }, {
    "name" : " void init()",
    "returnType" : "void",
    "comment" : "\n     * Internal function, called by ValueAnimator, to set up the TypeEvaluator that will be used\n     * to calculate animated values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEvaluator(TypeEvaluator evaluator)",
    "returnType" : "void",
    "comment" : "\n     * The TypeEvaluator will be automatically determined based on the type of values\n     * supplied to PropertyValuesHolder. The evaluator can be manually set, however, if so\n     * desired. This may be important in cases where either the type of the values supplied\n     * do not match the way that they should be interpolated between, or if the values\n     * are of a custom type or one not currently understood by the animation system. Currently,\n     * only values of type float and int (and their Object equivalents: Float\n     * and Integer) are  correctly interpolated; all other types require setting a TypeEvaluator.\n     * @param evaluator\n     ",
    "links" : [ ]
  }, {
    "name" : " void calculateValue(float fraction)",
    "returnType" : "void",
    "comment" : "\n     * Function used to calculate the value according to the evaluator set up for\n     * this PropertyValuesHolder object. This function is called by ValueAnimator.animateValue().\n     *\n     * @param fraction The elapsed, interpolated fraction of the animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPropertyName(String propertyName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the name of the property that will be animated. This name is used to derive\n     * a setter function that will be called to set animated values.\n     * For example, a property name of <code>foo</code> will result\n     * in a call to the function <code>setFoo()</code> on the target object. If either\n     * <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will\n     * also be derived and called.\n     *\n     * <p>Note that the setter function derived from this property name\n     * must take the same parameter type as the\n     * <code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to\n     * the setter function will fail.</p>\n     *\n     * @param propertyName The name of the property being animated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperty(Property property)",
    "returnType" : "void",
    "comment" : "\n     * Sets the property that will be animated.\n     *\n     * <p>Note that if this PropertyValuesHolder object is used with ObjectAnimator, the property\n     * must exist on the target object specified in that ObjectAnimator.</p>\n     *\n     * @param property The property being animated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPropertyName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of the property that will be animated. This name will be used to derive\n     * a setter function that will be called to set animated values.\n     * For example, a property name of <code>foo</code> will result\n     * in a call to the function <code>setFoo()</code> on the target object. If either\n     * <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will\n     * also be derived and called.\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getAnimatedValue()",
    "returnType" : "Object",
    "comment" : "\n     * Internal function, called by ValueAnimator and ObjectAnimator, to retrieve the value\n     * most recently calculated in calculateValue().\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getPropertyValues(PropertyValues values)",
    "returnType" : "void",
    "comment" : "\n     * PropertyValuesHolder is Animators use to hold internal animation related data.\n     * Therefore, in order to replicate the animation behavior, we need to get data out of\n     * PropertyValuesHolder.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class getValueType()",
    "returnType" : "Class",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String getMethodName(String prefix, String propertyName)",
    "returnType" : "String",
    "comment" : "\n     * Utility method to derive a setter/getter method name from a property name, where the\n     * prefix is typically \"set\" or \"get\" and the first letter of the property name is\n     * capitalized.\n     *\n     * @param prefix The precursor to the method name, before the property name begins, typically\n     * \"set\" or \"get\".\n     * @param propertyName The name of the property that represents the bulk of the method name\n     * after the prefix. The first letter of this word will be capitalized in the resulting\n     * method name.\n     * @return String the property name converted to a method name according to the conventions\n     * specified above.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetIntMethod(Class targetClass, String methodName)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetFloatMethod(Class targetClass, String methodName)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetMultipleIntMethod(Class targetClass, String methodName, int numParams)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetMultipleFloatMethod(Class targetClass, String methodName, int numParams)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nCallIntMethod(Object target, long methodID, int arg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nCallFloatMethod(Object target, long methodID, float arg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nCallTwoIntMethod(Object target, long methodID, int arg1, int arg2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nCallFourIntMethod(Object target, long methodID, int arg1, int arg2, int arg3, int arg4)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nCallMultipleIntMethod(Object target, long methodID, int[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nCallTwoFloatMethod(Object target, long methodID, float arg1, float arg2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nCallFourFloatMethod(Object target, long methodID, float arg1, float arg2, float arg3, float arg4)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nCallMultipleFloatMethod(Object target, long methodID, float[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPropertyName", "mProperty", "mSetter", "mGetter", "mValueType", "mKeyframes", "sIntEvaluator", "sFloatEvaluator", "FLOAT_VARIANTS", "INTEGER_VARIANTS", "DOUBLE_VARIANTS", "sSetterPropertyMap", "sGetterPropertyMap", "mTmpValueArray", "mEvaluator", "mAnimatedValue", "mConverter" ],
  "methodNames" : [ "public static PropertyValuesHolder ofInt(String propertyName, int... values)", "public static PropertyValuesHolder ofInt(Property<?, Integer> property, int... values)", "public static PropertyValuesHolder ofMultiInt(String propertyName, int[][] values)", "public static PropertyValuesHolder ofMultiInt(String propertyName, Path path)", "public static PropertyValuesHolder ofMultiInt(String propertyName, TypeConverter<V, int[]> converter, TypeEvaluator<V> evaluator, V... values)", "public static PropertyValuesHolder ofMultiInt(String propertyName, TypeConverter<T, int[]> converter, TypeEvaluator<T> evaluator, Keyframe... values)", "public static PropertyValuesHolder ofFloat(String propertyName, float... values)", "public static PropertyValuesHolder ofFloat(Property<?, Float> property, float... values)", "public static PropertyValuesHolder ofMultiFloat(String propertyName, float[][] values)", "public static PropertyValuesHolder ofMultiFloat(String propertyName, Path path)", "public static PropertyValuesHolder ofMultiFloat(String propertyName, TypeConverter<V, float[]> converter, TypeEvaluator<V> evaluator, V... values)", "public static PropertyValuesHolder ofMultiFloat(String propertyName, TypeConverter<T, float[]> converter, TypeEvaluator<T> evaluator, Keyframe... values)", "public static PropertyValuesHolder ofObject(String propertyName, TypeEvaluator evaluator, Object... values)", "public static PropertyValuesHolder ofObject(String propertyName, TypeConverter<PointF, ?> converter, Path path)", "public static PropertyValuesHolder ofObject(Property property, TypeEvaluator<V> evaluator, V... values)", "public static PropertyValuesHolder ofObject(Property<?, V> property, TypeConverter<T, V> converter, TypeEvaluator<T> evaluator, T... values)", "public static PropertyValuesHolder ofObject(Property<?, V> property, TypeConverter<PointF, V> converter, Path path)", "public static PropertyValuesHolder ofKeyframe(String propertyName, Keyframe... values)", "public static PropertyValuesHolder ofKeyframe(Property property, Keyframe... values)", " static PropertyValuesHolder ofKeyframes(String propertyName, Keyframes keyframes)", " static PropertyValuesHolder ofKeyframes(Property property, Keyframes keyframes)", "public void setIntValues(int... values)", "public void setFloatValues(float... values)", "public void setKeyframes(Keyframe... values)", "public void setObjectValues(Object... values)", "public void setConverter(TypeConverter converter)", "private Method getPropertyFunction(Class targetClass, String prefix, Class valueType)", "private Method setupSetterOrGetter(Class targetClass, HashMap<Class, HashMap<String, Method>> propertyMapMap, String prefix, Class valueType)", " void setupSetter(Class targetClass)", "private void setupGetter(Class targetClass)", " void setupSetterAndGetter(Object target)", "private Object convertBack(Object value)", "private void setupValue(Object target, Keyframe kf)", " void setupStartValue(Object target)", " void setupEndValue(Object target)", "public PropertyValuesHolder clone()", " void setAnimatedValue(Object target)", " void init()", "public void setEvaluator(TypeEvaluator evaluator)", " void calculateValue(float fraction)", "public void setPropertyName(String propertyName)", "public void setProperty(Property property)", "public String getPropertyName()", " Object getAnimatedValue()", "public void getPropertyValues(PropertyValues values)", "public Class getValueType()", "public String toString()", " static String getMethodName(String prefix, String propertyName)", "private static native long nGetIntMethod(Class targetClass, String methodName)", "private static native long nGetFloatMethod(Class targetClass, String methodName)", "private static native long nGetMultipleIntMethod(Class targetClass, String methodName, int numParams)", "private static native long nGetMultipleFloatMethod(Class targetClass, String methodName, int numParams)", "private static native void nCallIntMethod(Object target, long methodID, int arg)", "private static native void nCallFloatMethod(Object target, long methodID, float arg)", "private static native void nCallTwoIntMethod(Object target, long methodID, int arg1, int arg2)", "private static native void nCallFourIntMethod(Object target, long methodID, int arg1, int arg2, int arg3, int arg4)", "private static native void nCallMultipleIntMethod(Object target, long methodID, int[] args)", "private static native void nCallTwoFloatMethod(Object target, long methodID, float arg1, float arg2)", "private static native void nCallFourFloatMethod(Object target, long methodID, float arg1, float arg2, float arg3, float arg4)", "private static native void nCallMultipleFloatMethod(Object target, long methodID, float[] args)" ]
}