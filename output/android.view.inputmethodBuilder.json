{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/inputmethod/CursorAnchorInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link CursorAnchorInfo}. This class is not designed to be thread-safe.\n     ",
  "variables" : [ {
    "name" : "mSelectionStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComposingTextStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComposingText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsertionMarkerHorizontal",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsertionMarkerTop",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsertionMarkerBaseline",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsertionMarkerBottom",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsertionMarkerFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacterBoundsArrayBuilder",
    "type" : "SparseRectFArrayBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatrixValues",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatrixInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setSelectionRange(final int newStart, final int newEnd)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the text range of the selection. Calling this can be skipped if there is no\n         * selection.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setComposingText(final int composingTextStart, final CharSequence composingText)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the text range of the composing text. Calling this can be skipped if there is\n         * no composing text.\n         * @param composingTextStart index where the composing text starts.\n         * @param composingText the entire composing text.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setInsertionMarkerLocation(final float horizontalPosition, final float lineTop, final float lineBaseline, final float lineBottom, final int flags)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the location of the text insertion point (zero width cursor) as a rectangle in\n         * local coordinates. Calling this can be skipped when there is no text insertion point;\n         * however if there is an insertion point, editors must call this method.\n         * @param horizontalPosition horizontal position of the insertion marker, in the local\n         * coordinates that will be transformed with the transformation matrix when rendered on the\n         * screen. This should be calculated or compatible with\n         * {@link Layout#getPrimaryHorizontal(int)}.\n         * @param lineTop vertical position of the insertion marker, in the local coordinates that\n         * will be transformed with the transformation matrix when rendered on the screen. This\n         * should be calculated or compatible with {@link Layout#getLineTop(int)}.\n         * @param lineBaseline vertical position of the insertion marker, in the local coordinates\n         * that will be transformed with the transformation matrix when rendered on the screen. This\n         * should be calculated or compatible with {@link Layout#getLineBaseline(int)}.\n         * @param lineBottom vertical position of the insertion marker, in the local coordinates\n         * that will be transformed with the transformation matrix when rendered on the screen. This\n         * should be calculated or compatible with {@link Layout#getLineBottom(int)}.\n         * @param flags flags of the insertion marker. See {@link #FLAG_HAS_VISIBLE_REGION} for\n         * example.\n         ",
    "links" : [ "Layout#getPrimaryHorizontal", "Layout#getLineTop", "Layout#getLineBaseline", "Layout#getLineBottom", "#FLAG_HAS_VISIBLE_REGION" ]
  }, {
    "name" : "public Builder addCharacterBounds(final int index, final float left, final float top, final float right, final float bottom, final int flags)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds the bounding box of the character specified with the index.\n         *\n         * @param index index of the character in Java chars units. Must be specified in\n         * ascending order across successive calls.\n         * @param left x coordinate of the left edge of the character in local coordinates.\n         * @param top y coordinate of the top edge of the character in local coordinates.\n         * @param right x coordinate of the right edge of the character in local coordinates.\n         * @param bottom y coordinate of the bottom edge of the character in local coordinates.\n         * @param flags flags for this character bounds. See {@link #FLAG_HAS_VISIBLE_REGION},\n         * {@link #FLAG_HAS_INVISIBLE_REGION} and {@link #FLAG_IS_RTL}. These flags must be\n         * specified when necessary.\n         * @throws IllegalArgumentException If the index is a negative value, or not greater than\n         * all of the previously called indices.\n         ",
    "links" : [ "#FLAG_HAS_VISIBLE_REGION", "#FLAG_HAS_INVISIBLE_REGION", "#FLAG_IS_RTL" ]
  }, {
    "name" : "public Builder setMatrix(final Matrix matrix)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the matrix that transforms local coordinates into screen coordinates.\n         * @param matrix transformation matrix from local coordinates into screen coordinates. null\n         * is interpreted as an identity matrix.\n         ",
    "links" : [ ]
  }, {
    "name" : "public CursorAnchorInfo build()",
    "returnType" : "CursorAnchorInfo",
    "comment" : "\n         * @return {@link CursorAnchorInfo} using parameters in this {@link Builder}.\n         * @throws IllegalArgumentException if one or more positional parameters are specified but\n         * the coordinate transformation matrix is not provided via {@link #setMatrix(Matrix)}.\n         ",
    "links" : [ "CursorAnchorInfo", "Builder", "#setMatrix" ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n         * Resets the internal state so that this instance can be reused to build another\n         * instance of {@link CursorAnchorInfo}.\n         ",
    "links" : [ "CursorAnchorInfo" ]
  } ],
  "variableNames" : [ "mSelectionStart", "mSelectionEnd", "mComposingTextStart", "mComposingText", "mInsertionMarkerHorizontal", "mInsertionMarkerTop", "mInsertionMarkerBaseline", "mInsertionMarkerBottom", "mInsertionMarkerFlags", "mCharacterBoundsArrayBuilder", "mMatrixValues", "mMatrixInitialized" ],
  "methodNames" : [ "public Builder setSelectionRange(final int newStart, final int newEnd)", "public Builder setComposingText(final int composingTextStart, final CharSequence composingText)", "public Builder setInsertionMarkerLocation(final float horizontalPosition, final float lineTop, final float lineBaseline, final float lineBottom, final int flags)", "public Builder addCharacterBounds(final int index, final float left, final float top, final float right, final float bottom, final int flags)", "public Builder setMatrix(final Matrix matrix)", "public CursorAnchorInfo build()", "public void reset()" ]
}