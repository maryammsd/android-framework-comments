{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/SearchDialog.java",
  "packageName" : "android.app",
  "className" : "SearchDialog",
  "comment" : "\n * Search dialog. This is controlled by the \n * SearchManager and runs in the current foreground process.\n * \n * @hide\n ",
  "variables" : [ {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : " Debugging support",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INSTANCE_KEY_COMPONENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INSTANCE_KEY_APPDATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INSTANCE_KEY_USER_QUERY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IME_OPTION_NO_MICROPHONE",
    "type" : "String",
    "comment" : " a microphone button since one already exists in the search dialog.",
    "links" : [ ]
  }, {
    "name" : "SEARCH_PLATE_LEFT_PADDING_NON_GLOBAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBadgeLabel",
    "type" : "TextView",
    "comment" : " views & widgets",
    "links" : [ ]
  }, {
    "name" : "mAppIcon",
    "type" : "ImageView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchAutoComplete",
    "type" : "AutoCompleteTextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchPlate",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchView",
    "type" : "SearchView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorkingSpinner",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseSearch",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchable",
    "type" : "SearchableInfo",
    "comment" : " interaction with searchable application",
    "links" : [ ]
  }, {
    "name" : "mLaunchComponent",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppSearchData",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVoiceWebSearchIntent",
    "type" : "Intent",
    "comment" : " For voice searching",
    "links" : [ ]
  }, {
    "name" : "mVoiceAppSearchIntent",
    "type" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserQuery",
    "type" : "String",
    "comment" : " the suggestion, the resulting string is saved.",
    "links" : [ ]
  }, {
    "name" : "mSearchAutoCompleteImeOptions",
    "type" : "int",
    "comment" : " Last known IME options value for the search edit text.",
    "links" : [ ]
  }, {
    "name" : "mConfChangeListener",
    "type" : "BroadcastReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnCloseListener",
    "type" : "SearchView.OnCloseListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnQueryChangeListener",
    "type" : "SearchView.OnQueryTextListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnSuggestionSelectionListener",
    "type" : "SearchView.OnSuggestionListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static int resolveDialogTheme(Context context)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onCreate(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "\n     * Create the search dialog and any resources that are used for the\n     * entire lifetime of the dialog.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void createContentView()",
    "returnType" : "void",
    "comment" : "\n     * We recreate the dialog view each time it becomes visible so as to limit\n     * the scope of any problems with the contained resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean show(String initialQuery, boolean selectInitialQuery, ComponentName componentName, Bundle appSearchData)",
    "returnType" : "boolean",
    "comment" : "\n     * Set up the search dialog\n     * \n     * @return true if search dialog launched, false if not\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean doShow(String initialQuery, boolean selectInitialQuery, ComponentName componentName, Bundle appSearchData)",
    "returnType" : "boolean",
    "comment" : "\n     * Does the rest of the work required to show the search dialog. Called by\n     * {@link #show(String, boolean, ComponentName, Bundle)} and\n     *\n     * @return true if search dialog showed, false if not\n     ",
    "links" : [ "#show" ]
  }, {
    "name" : "private boolean show(ComponentName componentName, Bundle appSearchData)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets up the search dialog and shows it.\n     * \n     * @return <code>true</code> if search dialog launched\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStop()",
    "returnType" : "void",
    "comment" : "\n     * The search dialog is being dismissed, so handle all of the local shutdown operations.\n     * \n     * This function is designed to be idempotent so that dismiss() can be safely called at any time\n     * (even if already closed) and more likely to really dump any memory.  No leaks!\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWorking(boolean working)",
    "returnType" : "void",
    "comment" : "\n     * Sets the search dialog to the 'working' state, which shows a working spinner in the\n     * right hand size of the text field.\n     * \n     * @param working true to show spinner, false to hide spinner\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle onSaveInstanceState()",
    "returnType" : "Bundle",
    "comment" : "\n     * Save the minimal set of data necessary to recreate the search\n     * \n     * @return A bundle with the state of the dialog, or {@code null} if the search\n     *         dialog is not showing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "\n     * Restore the state of the dialog from a previously saved bundle.\n     * \n     * @param savedInstanceState The state of the dialog previously saved by\n     *     {@link #onSaveInstanceState()}.\n     ",
    "links" : [ "#onSaveInstanceState" ]
  }, {
    "name" : "public void onConfigurationChanged()",
    "returnType" : "void",
    "comment" : "\n     * Called after resources have changed, e.g. after screen rotation or locale change.\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isLandscapeMode(Context context)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean enoughToFilter()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateUI()",
    "returnType" : "void",
    "comment" : "\n     * Update the UI according to the info in the current value of {@link #mSearchable}.\n     ",
    "links" : [ "#mSearchable" ]
  }, {
    "name" : "private void updateSearchAutoComplete()",
    "returnType" : "void",
    "comment" : "\n     * Updates the auto-complete text view.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateSearchAppIcon()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSearchBadge()",
    "returnType" : "void",
    "comment" : "\n     * Setup the search \"Badge\" if requested by mode flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * {@link Dialog#onTouchEvent(MotionEvent)} will cancel the dialog only when the\n     * touch is outside the window. But the window includes space for the drop-down,\n     * so we also cancel on taps outside the search bar when the drop-down is not showing.\n     ",
    "links" : [ "Dialog#onTouchEvent" ]
  }, {
    "name" : "private boolean isOutOfBounds(View v, MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void hide()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void launchQuerySearch()",
    "returnType" : "void",
    "comment" : "\n     * Launch a search for the text in the query text field.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void launchQuerySearch(int actionKey, String actionMsg)",
    "returnType" : "void",
    "comment" : "\n     * Launch a search for the text in the query text field.\n     *\n     * @param actionKey The key code of the action key that was pressed,\n     *        or {@link KeyEvent#KEYCODE_UNKNOWN} if none.\n     * @param actionMsg The message for the action key that was pressed,\n     *        or <code>null</code> if none.\n     ",
    "links" : [ "KeyEvent#KEYCODE_UNKNOWN" ]
  }, {
    "name" : "private void launchIntent(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Launches an intent, including any special intent handling.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setListSelection(int index)",
    "returnType" : "void",
    "comment" : "\n     * Sets the list item selection in the AutoCompleteTextView's ListView.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Intent createIntent(String action, Uri data, String extraData, String query, int actionKey, String actionMsg)",
    "returnType" : "Intent",
    "comment" : "\n     * Constructs an intent from the given information and the search dialog state.\n     * \n     * @param action Intent action.\n     * @param data Intent data, or <code>null</code>.\n     * @param extraData Data for {@link SearchManager#EXTRA_DATA_KEY} or <code>null</code>.\n     * @param query Intent query, or <code>null</code>.\n     * @param actionKey The key code of the action key that was pressed,\n     *        or {@link KeyEvent#KEYCODE_UNKNOWN} if none.\n     * @param actionMsg The message for the action key that was pressed,\n     *        or <code>null</code> if none.\n     * @param mode The search mode, one of the acceptable values for\n     *             {@link SearchManager#SEARCH_MODE}, or {@code null}.\n     * @return The intent.\n     ",
    "links" : [ "SearchManager#EXTRA_DATA_KEY", "KeyEvent#KEYCODE_UNKNOWN", "SearchManager#SEARCH_MODE" ]
  }, {
    "name" : "private boolean isEmpty(AutoCompleteTextView actv)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onBackPressed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean onClosePressed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setUserQuery(String query)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text in the query box, updating the suggestions.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DBG", "LOG_TAG", "INSTANCE_KEY_COMPONENT", "INSTANCE_KEY_APPDATA", "INSTANCE_KEY_USER_QUERY", "IME_OPTION_NO_MICROPHONE", "SEARCH_PLATE_LEFT_PADDING_NON_GLOBAL", "mBadgeLabel", "mAppIcon", "mSearchAutoComplete", "mSearchPlate", "mSearchView", "mWorkingSpinner", "mCloseSearch", "mSearchable", "mLaunchComponent", "mAppSearchData", "mActivityContext", "mVoiceWebSearchIntent", "mVoiceAppSearchIntent", "mUserQuery", "mSearchAutoCompleteImeOptions", "mConfChangeListener", "mOnCloseListener", "mOnQueryChangeListener", "mOnSuggestionSelectionListener" ],
  "methodNames" : [ " static int resolveDialogTheme(Context context)", "protected void onCreate(Bundle savedInstanceState)", "private void createContentView()", "public boolean show(String initialQuery, boolean selectInitialQuery, ComponentName componentName, Bundle appSearchData)", "private boolean doShow(String initialQuery, boolean selectInitialQuery, ComponentName componentName, Bundle appSearchData)", "private boolean show(ComponentName componentName, Bundle appSearchData)", "public void onStart()", "public void onStop()", "public void setWorking(boolean working)", "public Bundle onSaveInstanceState()", "public void onRestoreInstanceState(Bundle savedInstanceState)", "public void onConfigurationChanged()", " static boolean isLandscapeMode(Context context)", "private boolean enoughToFilter()", "private void updateUI()", "private void updateSearchAutoComplete()", "private void updateSearchAppIcon()", "private void updateSearchBadge()", "public boolean onTouchEvent(MotionEvent event)", "private boolean isOutOfBounds(View v, MotionEvent event)", "public void hide()", "public void launchQuerySearch()", "protected void launchQuerySearch(int actionKey, String actionMsg)", "private void launchIntent(Intent intent)", "public void setListSelection(int index)", "private Intent createIntent(String action, Uri data, String extraData, String query, int actionKey, String actionMsg)", "private boolean isEmpty(AutoCompleteTextView actv)", "public void onBackPressed()", "private boolean onClosePressed()", "private void setUserQuery(String query)" ]
}