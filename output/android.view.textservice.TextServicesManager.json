{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/textservice/TextServicesManager.java",
  "packageName" : "android.view.textservice",
  "className" : "TextServicesManager",
  "comment" : "\n * System API to the overall text services, which arbitrates interaction between applications\n * and text services.\n *\n * The user can change the current text services in Settings. And also applications can specify\n * the target text services.\n *\n * <h3>Architecture Overview</h3>\n *\n * <p>There are three primary parties involved in the text services\n * framework (TSF) architecture:</p>\n *\n * <ul>\n * <li> The <strong>text services manager</strong> as expressed by this class\n * is the central point of the system that manages interaction between all\n * other parts.  It is expressed as the client-side API here which exists\n * in each application context and communicates with a global system service\n * that manages the interaction across all processes.\n * <li> A <strong>text service</strong> implements a particular\n * interaction model allowing the client application to retrieve information of text.\n * The system binds to the current text service that is in use, causing it to be created and run.\n * <li> Multiple <strong>client applications</strong> arbitrate with the text service\n * manager for connections to text services.\n * </ul>\n *\n * <h3>Text services sessions</h3>\n * <ul>\n * <li>The <strong>spell checker session</strong> is one of the text services.\n * {@link android.view.textservice.SpellCheckerSession}</li>\n * </ul>\n *\n ",
  "links" : [ "android.view.textservice.SpellCheckerSession" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "TextServicesManager",
    "comment" : "\n     * @deprecated Do not use. Just kept because of {@link UnsupportedAppUsage} in\n     * {@link #getInstance()}.\n     ",
    "links" : [ "android.compat.annotation.UnsupportedAppUsage", "#getInstance()" ]
  }, {
    "name" : "mService",
    "type" : "ITextServicesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputMethodManager",
    "type" : "InputMethodManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TextServicesManager createInstance(@NonNull Context context) throws ServiceNotFoundException",
    "returnType" : "TextServicesManager",
    "comment" : "\n     * The factory method of {@link TextServicesManager}.\n     *\n     * @param context {@link Context} from which {@link TextServicesManager} should be instantiated.\n     * @return {@link TextServicesManager} that is associated with {@link Context#getUserId()}.\n     * @throws ServiceNotFoundException When {@link TextServicesManager} is not available.\n     * @hide\n     ",
    "links" : [ "android.content.Context#getUserId()", "android.content.Context", "com.android.internal.textservice.ITextServicesManager" ]
  }, {
    "name" : "public static TextServicesManager getInstance()",
    "returnType" : "TextServicesManager",
    "comment" : "\n     * @deprecated Do not use. Just kept because of {@link UnsupportedAppUsage} in\n     * {@link #getInstance()}.\n     * @hide\n     ",
    "links" : [ "android.compat.annotation.UnsupportedAppUsage", "#getInstance()" ]
  }, {
    "name" : "public InputMethodManager getInputMethodManager()",
    "returnType" : "InputMethodManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static String parseLanguageFromLocaleString(String locale)",
    "returnType" : "String",
    "comment" : "\n     * Returns the language component of a given locale string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SpellCheckerSession newSpellCheckerSession(@Nullable Bundle bundle, @Nullable Locale locale, @NonNull SpellCheckerSessionListener listener, boolean referToSpellCheckerLanguageSettings)",
    "returnType" : "SpellCheckerSession",
    "comment" : "\n     * Get a spell checker session from the spell checker.\n     *\n     * <p>{@link SuggestionsInfo#RESULT_ATTR_IN_THE_DICTIONARY},\n     * {@link SuggestionsInfo#RESULT_ATTR_LOOKS_LIKE_TYPO}, and\n     * {@link SuggestionsInfo#RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS} will be passed to the spell\n     * checker as supported attributes.\n     *\n     * @param locale the locale for the spell checker. If {@code locale} is null and\n     * referToSpellCheckerLanguageSettings is true, the locale specified in Settings will be\n     * returned. If {@code locale} is not null and referToSpellCheckerLanguageSettings is true,\n     * the locale specified in Settings will be returned only when it is same as {@code locale}.\n     * Exceptionally, when referToSpellCheckerLanguageSettings is true and {@code locale} is\n     * only language (e.g. \"en\"), the specified locale in Settings (e.g. \"en_US\") will be\n     * selected.\n     * @param listener a spell checker session lister for getting results from the spell checker.\n     * @param referToSpellCheckerLanguageSettings if true, the session for one of enabled\n     * languages in settings will be returned.\n     * @return a spell checker session of the spell checker\n     ",
    "links" : [ "android.view.textservice.SuggestionsInfo#RESULT_ATTR_LOOKS_LIKE_TYPO", "android.view.textservice.SuggestionsInfo#RESULT_ATTR_IN_THE_DICTIONARY", "android.view.textservice.SuggestionsInfo#RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS" ]
  }, {
    "name" : "public SpellCheckerSession newSpellCheckerSession(@NonNull SpellCheckerSessionParams params, @NonNull @CallbackExecutor Executor executor, @NonNull SpellCheckerSessionListener listener)",
    "returnType" : "SpellCheckerSession",
    "comment" : "\n     * Get a spell checker session from the spell checker.\n     *\n     * @param params The parameters passed to the spell checker.\n     * @param executor The executor on which {@code listener} will be called back.\n     * @param listener a spell checker session lister for getting results from the spell checker.\n     * @return The spell checker session of the spell checker.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SpellCheckerInfo[] getEnabledSpellCheckers()",
    "returnType" : "SpellCheckerInfo[]",
    "comment" : "\n     * Deprecated. Use {@link #getEnabledSpellCheckerInfos()} instead.\n     * @hide\n     ",
    "links" : [ "#getEnabledSpellCheckerInfos()" ]
  }, {
    "name" : "public List<SpellCheckerInfo> getEnabledSpellCheckerInfos()",
    "returnType" : "List<SpellCheckerInfo>",
    "comment" : "\n     * Retrieve the list of currently enabled spell checkers.\n     *\n     * <p> Note: The results are filtered by the rules of\n     * <a href=\"/training/basics/intents/package-visibility\">package visibility</a>, except for\n     * the currently active spell checker.\n     *\n     * @return The list of currently enabled spell checkers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SpellCheckerInfo getCurrentSpellCheckerInfo()",
    "returnType" : "SpellCheckerInfo",
    "comment" : "\n     * Retrieve the currently active spell checker, or null if there is none.\n     *\n     * @return The current active spell checker info.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SpellCheckerInfo getCurrentSpellChecker()",
    "returnType" : "SpellCheckerInfo",
    "comment" : "\n     * Deprecated. Use {@link #getCurrentSpellCheckerInfo()} instead.\n     * @hide\n     ",
    "links" : [ "#getCurrentSpellCheckerInfo()" ]
  }, {
    "name" : "public SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean allowImplicitlySelectedSubtype)",
    "returnType" : "SpellCheckerSubtype",
    "comment" : "\n     * Retrieve the selected subtype of the selected spell checker, or null if there is none.\n     *\n     * @param allowImplicitlySelectedSubtype {@code true} to return the default language matching\n     * system locale if there's no subtype selected explicitly, otherwise, returns null.\n     * @return The meta information of the selected subtype of the selected spell checker.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSpellCheckerEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the spell checker is enabled or not.\n     *\n     * @return {@code true} if spell checker is enabled, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " void finishSpellCheckerService(ISpellCheckerSessionListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static TextServicesManager createInstance(@NonNull Context context) throws ServiceNotFoundException", "public static TextServicesManager getInstance()", "public InputMethodManager getInputMethodManager()", "private static String parseLanguageFromLocaleString(String locale)", "public SpellCheckerSession newSpellCheckerSession(@Nullable Bundle bundle, @Nullable Locale locale, @NonNull SpellCheckerSessionListener listener, boolean referToSpellCheckerLanguageSettings)", "public SpellCheckerSession newSpellCheckerSession(@NonNull SpellCheckerSessionParams params, @NonNull @CallbackExecutor Executor executor, @NonNull SpellCheckerSessionListener listener)", "public SpellCheckerInfo[] getEnabledSpellCheckers()", "public List<SpellCheckerInfo> getEnabledSpellCheckerInfos()", "public SpellCheckerInfo getCurrentSpellCheckerInfo()", "public SpellCheckerInfo getCurrentSpellChecker()", "public SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean allowImplicitlySelectedSubtype)", "public boolean isSpellCheckerEnabled()", " void finishSpellCheckerService(ISpellCheckerSessionListener listener)" ],
  "variableNames" : [ "TAG", "DBG", "sInstance", "mService", "mUserId", "mInputMethodManager" ]
}