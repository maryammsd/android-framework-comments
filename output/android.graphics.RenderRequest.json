{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/HardwareBufferRenderer.java",
  "packageName" : "android.graphics",
  "className" : "RenderRequest",
  "comment" : "\n     * Sets the parameters that can be used to control a render request for a {@link\n     * HardwareBufferRenderer}. This is not thread-safe and must not be held on to for longer than a\n     * single request.\n     ",
  "links" : [ "android.graphics.HardwareBufferRenderer" ],
  "variables" : [ {
    "name" : "mColorSpace",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransform",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void draw(@NonNull Executor executor, @NonNull Consumer<RenderResult> renderCallback)",
    "returnType" : "void",
    "comment" : "\n         * Syncs the RenderNode tree to the render thread and requests content to be drawn. This\n         * {@link RenderRequest} instance should no longer be used after calling this method. The\n         * system internally may reuse instances of {@link RenderRequest} to reduce allocation\n         * churn.\n         *\n         * @param executor Executor used to deliver callbacks\n         * @param renderCallback Callback invoked when rendering is complete. This includes a\n         * {@link RenderResult} that provides a {@link SyncFence} that should be waited upon for\n         * completion before consuming the rendered output in the provided {@link HardwareBuffer}\n         * instance.\n         *\n         * @throws IllegalStateException if attempt to draw is made when\n         * {@link HardwareBufferRenderer#isClosed()} returns true\n         ",
    "links" : [ "android.graphics.HardwareBufferRenderer#isClosed()", "RenderResult", "RenderRequest", "android.hardware.HardwareBuffer", "android.hardware.SyncFence" ]
  }, {
    "name" : "private void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RenderRequest setColorSpace(@Nullable ColorSpace colorSpace)",
    "returnType" : "RenderRequest",
    "comment" : "\n         * Configures the color space which the content should be rendered in. This affects\n         * how the framework will interpret the color at each pixel. The color space provided here\n         * must be non-null, RGB based and leverage an ICC parametric curve. The min/max values\n         * of the components should not reduce the numerical range compared to the previously\n         * assigned color space. If left unspecified, the default color space of SRGB will be used.\n         *\n         * @param colorSpace The color space the content should be rendered in. If null is provided\n         * the default of SRGB will be used.\n         ",
    "links" : [ ]
  }, {
    "name" : "public RenderRequest setBufferTransform(@SurfaceControl.BufferTransform int bufferTransform)",
    "returnType" : "RenderRequest",
    "comment" : "\n         * Specifies a transform to be applied before content is rendered. This is useful\n         * for pre-rotating content for the current display orientation to increase performance\n         * of displaying the associated buffer. This transformation will also adjust the light\n         * source position for the specified rotation.\n         * @see SurfaceControl.Transaction#setBufferTransform(SurfaceControl, int)\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void draw(@NonNull Executor executor, @NonNull Consumer<RenderResult> renderCallback)", "private void reset()", "public RenderRequest setColorSpace(@Nullable ColorSpace colorSpace)", "public RenderRequest setBufferTransform(@SurfaceControl.BufferTransform int bufferTransform)" ],
  "variableNames" : [ "mColorSpace", "mTransform" ]
}