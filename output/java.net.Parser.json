{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/URI.java",
  "packageName" : "java.net",
  "className" : "Parser",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "input",
    "type" : "String",
    "comment" : " URI input string",
    "links" : [ ]
  }, {
    "name" : "requireServerAuthority",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ipv6byteCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void fail(String reason) throws URISyntaxException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fail(String reason, int p) throws URISyntaxException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void failExpecting(String expected, int p) throws URISyntaxException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void failExpecting(String expected, String prior, int p) throws URISyntaxException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String substring(int start, int end)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private char charAt(int p)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean at(int start, int end, char c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean at(int start, int end, String s)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int scan(int start, int end, char c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int scan(int start, int end, String err, String stop)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int scanEscape(int start, int n, char first) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int scan(int start, int n, long lowMask, long highMask) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkChars(int start, int end, long lowMask, long highMask, String what) throws URISyntaxException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkChar(int p, long lowMask, long highMask, String what) throws URISyntaxException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void parse(boolean rsa) throws URISyntaxException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseHierarchical(int start, int n) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseAuthority(int start, int n) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseServer(int start, int n) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int scanByte(int start, int n) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int scanIPv4Address(int start, int n, boolean strict) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int takeIPv4Address(int start, int n, String expected) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseIPv4Address(int start, int n)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseHostname(int start, int n) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseIPv6Reference(int start, int n) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int scanHexPost(int start, int n) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int scanHexSeq(int start, int n) throws URISyntaxException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void fail(String reason) throws URISyntaxException", "private void fail(String reason, int p) throws URISyntaxException", "private void failExpecting(String expected, int p) throws URISyntaxException", "private void failExpecting(String expected, String prior, int p) throws URISyntaxException", "private String substring(int start, int end)", "private char charAt(int p)", "private boolean at(int start, int end, char c)", "private boolean at(int start, int end, String s)", "private int scan(int start, int end, char c)", "private int scan(int start, int end, String err, String stop)", "private int scanEscape(int start, int n, char first) throws URISyntaxException", "private int scan(int start, int n, long lowMask, long highMask) throws URISyntaxException", "private void checkChars(int start, int end, long lowMask, long highMask, String what) throws URISyntaxException", "private void checkChar(int p, long lowMask, long highMask, String what) throws URISyntaxException", " void parse(boolean rsa) throws URISyntaxException", "private int parseHierarchical(int start, int n) throws URISyntaxException", "private int parseAuthority(int start, int n) throws URISyntaxException", "private int parseServer(int start, int n) throws URISyntaxException", "private int scanByte(int start, int n) throws URISyntaxException", "private int scanIPv4Address(int start, int n, boolean strict) throws URISyntaxException", "private int takeIPv4Address(int start, int n, String expected) throws URISyntaxException", "private int parseIPv4Address(int start, int n)", "private int parseHostname(int start, int n) throws URISyntaxException", "private int parseIPv6Reference(int start, int n) throws URISyntaxException", "private int scanHexPost(int start, int n) throws URISyntaxException", "private int scanHexSeq(int start, int n) throws URISyntaxException" ],
  "variableNames" : [ "input", "requireServerAuthority", "ipv6byteCount" ]
}