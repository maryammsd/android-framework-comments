{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/KeyStore.java",
  "packageName" : "java.security",
  "className" : "Builder",
  "comment" : "\n     * A description of a to-be-instantiated KeyStore object.\n     *\n     * <p>An instance of this class encapsulates the information needed to\n     * instantiate and initialize a KeyStore object. That process is\n     * triggered when the {@linkplain #getKeyStore} method is called.\n     *\n     * <p>This makes it possible to decouple configuration from KeyStore\n     * object creation and e.g. delay a password prompt until it is\n     * needed.\n     *\n     * @see KeyStore\n     * @see javax.net.ssl.KeyStoreBuilderParameters\n     * @since 1.5\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MAX_CALLBACK_TRIES",
    "type" : "int",
    "comment" : " maximum times to try the callbackhandler if the password is wrong",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract KeyStore getKeyStore() throws KeyStoreException",
    "returnType" : "KeyStore",
    "comment" : "\n         * Returns the KeyStore described by this object.\n         *\n         * @return the {@code KeyStore} described by this object\n         * @exception KeyStoreException if an error occurred during the\n         *   operation, for example if the KeyStore could not be\n         *   instantiated or loaded\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract ProtectionParameter getProtectionParameter(String alias) throws KeyStoreException",
    "returnType" : "ProtectionParameter",
    "comment" : "\n         * Returns the ProtectionParameters that should be used to obtain\n         * the {@link KeyStore.Entry Entry} with the given alias.\n         * The {@code getKeyStore} method must be invoked before this\n         * method may be called.\n         *\n         * @return the ProtectionParameters that should be used to obtain\n         *   the {@link KeyStore.Entry Entry} with the given alias.\n         * @param alias the alias of the KeyStore entry\n         * @throws NullPointerException if alias is null\n         * @throws KeyStoreException if an error occurred during the\n         *   operation\n         * @throws IllegalStateException if the getKeyStore method has\n         *   not been invoked prior to calling this method\n         ",
    "links" : [ "KeyStore.Entry" ]
  }, {
    "name" : "public static Builder newInstance(final KeyStore keyStore, final ProtectionParameter protectionParameter)",
    "returnType" : "Builder",
    "comment" : "\n         * Returns a new Builder that encapsulates the given KeyStore.\n         * The {@linkplain #getKeyStore} method of the returned object\n         * will return {@code keyStore}, the {@linkplain\n         * #getProtectionParameter getProtectionParameter()} method will\n         * return {@code protectionParameters}.\n         *\n         * <p> This is useful if an existing KeyStore object needs to be\n         * used with Builder-based APIs.\n         *\n         * @return a new Builder object\n         * @param keyStore the KeyStore to be encapsulated\n         * @param protectionParameter the ProtectionParameter used to\n         *   protect the KeyStore entries\n         * @throws NullPointerException if keyStore or\n         *   protectionParameters is null\n         * @throws IllegalArgumentException if the keyStore has not been\n         *   initialized\n         ",
    "links" : [ ]
  }, {
    "name" : "public static Builder newInstance(String type, Provider provider, File file, ProtectionParameter protection)",
    "returnType" : "Builder",
    "comment" : "\n         * Returns a new Builder object.\n         *\n         * <p>The first call to the {@link #getKeyStore} method on the returned\n         * builder will create a KeyStore of type {@code type} and call\n         * its {@link KeyStore#load load()} method.\n         * The {@code inputStream} argument is constructed from\n         * {@code file}.\n         * If {@code protection} is a\n         * {@code PasswordProtection}, the password is obtained by\n         * calling the {@code getPassword} method.\n         * Otherwise, if {@code protection} is a\n         * {@code CallbackHandlerProtection}, the password is obtained\n         * by invoking the CallbackHandler.\n         *\n         * <p>Subsequent calls to {@link #getKeyStore} return the same object\n         * as the initial call. If the initial call failed with a\n         * KeyStoreException, subsequent calls also throw a\n         * KeyStoreException.\n         *\n         * <p>The KeyStore is instantiated from {@code provider} if\n         * non-null. Otherwise, all installed providers are searched.\n         *\n         * <p>Calls to {@link #getProtectionParameter getProtectionParameter()}\n         * will return a {@link KeyStore.PasswordProtection PasswordProtection}\n         * object encapsulating the password that was used to invoke the\n         * {@code load} method.\n         *\n         * <p><em>Note</em> that the {@link #getKeyStore} method is executed\n         * within the {@link AccessControlContext} of the code invoking this\n         * method.\n         *\n         * @return a new Builder object\n         * @param type the type of KeyStore to be constructed\n         * @param provider the provider from which the KeyStore is to\n         *   be instantiated (or null)\n         * @param file the File that contains the KeyStore data\n         * @param protection the ProtectionParameter securing the KeyStore data\n         * @throws NullPointerException if type, file or protection is null\n         * @throws IllegalArgumentException if protection is not an instance\n         *   of either PasswordProtection or CallbackHandlerProtection; or\n         *   if file does not exist or does not refer to a normal file\n         ",
    "links" : [ "java.security.AccessControlContext", "KeyStore.PasswordProtection", "java.security.KeyStore#load", "#getKeyStore", "#getProtectionParameter" ]
  }, {
    "name" : "public static Builder newInstance(File file, ProtectionParameter protection)",
    "returnType" : "Builder",
    "comment" : "\n         * Returns a new Builder object.\n         *\n         * <p>The first call to the {@link #getKeyStore} method on the returned\n         * builder will create a KeyStore using {@code file} to detect the\n         * keystore type and then call its {@link KeyStore#load load()} method.\n         * It uses the same algorithm to determine the keystore type as\n         * described in {@link KeyStore#getInstance(File, LoadStoreParameter)}.\n         * The {@code inputStream} argument is constructed from {@code file}.\n         * If {@code protection} is a {@code PasswordProtection}, the password\n         * is obtained by calling the {@code getPassword} method.\n         * Otherwise, if {@code protection} is a\n         * {@code CallbackHandlerProtection},\n         * the password is obtained by invoking the CallbackHandler.\n         *\n         * <p>Subsequent calls to {@link #getKeyStore} return the same object\n         * as the initial call. If the initial call failed with a\n         * KeyStoreException, subsequent calls also throw a KeyStoreException.\n         *\n         * <p>Calls to {@link #getProtectionParameter getProtectionParameter()}\n         * will return a {@link KeyStore.PasswordProtection PasswordProtection}\n         * object encapsulating the password that was used to invoke the\n         * {@code load} method.\n         *\n         * <p><em>Note</em> that the {@link #getKeyStore} method is executed\n         * within the {@link AccessControlContext} of the code invoking this\n         * method.\n         *\n         * @return a new Builder object\n         * @param file the File that contains the KeyStore data\n         * @param protection the ProtectionParameter securing the KeyStore data\n         * @throws NullPointerException if file or protection is null\n         * @throws IllegalArgumentException if protection is not an instance\n         *   of either PasswordProtection or CallbackHandlerProtection; or\n         *   if file does not exist or does not refer to a normal file\n         *\n         * @since 9\n         ",
    "links" : [ "java.security.AccessControlContext", "KeyStore.PasswordProtection", "java.security.KeyStore#getInstance(File", "java.security.KeyStore#load", "#getKeyStore", "#getProtectionParameter" ]
  }, {
    "name" : "public static Builder newInstance(final String type, final Provider provider, final ProtectionParameter protection)",
    "returnType" : "Builder",
    "comment" : "\n         * Returns a new Builder object.\n         *\n         * <p>Each call to the {@link #getKeyStore} method on the returned\n         * builder will return a new KeyStore object of type {@code type}.\n         * Its {@link KeyStore#load(KeyStore.LoadStoreParameter) load()}\n         * method is invoked using a\n         * {@code LoadStoreParameter} that encapsulates\n         * {@code protection}.\n         *\n         * <p>The KeyStore is instantiated from {@code provider} if\n         * non-null. Otherwise, all installed providers are searched.\n         *\n         * <p>Calls to {@link #getProtectionParameter getProtectionParameter()}\n         * will return {@code protection}.\n         *\n         * <p><em>Note</em> that the {@link #getKeyStore} method is executed\n         * within the {@link AccessControlContext} of the code invoking this\n         * method.\n         *\n         * @return a new Builder object\n         * @param type the type of KeyStore to be constructed\n         * @param provider the provider from which the KeyStore is to\n         *   be instantiated (or null)\n         * @param protection the ProtectionParameter securing the Keystore\n         * @throws NullPointerException if type or protection is null\n         ",
    "links" : [ "java.security.AccessControlContext", "#getKeyStore", "java.security.KeyStore#load(KeyStore.LoadStoreParameter)", "#getProtectionParameter" ]
  } ],
  "methodNames" : [ "public abstract KeyStore getKeyStore() throws KeyStoreException", "public abstract ProtectionParameter getProtectionParameter(String alias) throws KeyStoreException", "public static Builder newInstance(final KeyStore keyStore, final ProtectionParameter protectionParameter)", "public static Builder newInstance(String type, Provider provider, File file, ProtectionParameter protection)", "public static Builder newInstance(File file, ProtectionParameter protection)", "public static Builder newInstance(final String type, final Provider provider, final ProtectionParameter protection)" ],
  "variableNames" : [ "MAX_CALLBACK_TRIES" ]
}