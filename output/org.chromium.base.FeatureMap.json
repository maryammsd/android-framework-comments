{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/FeatureMap.java",
  "packageName" : "org.chromium.base",
  "className" : "FeatureMap",
  "comment" : "\n * Java accessor for state of feature flags and their field trial parameters.\n *\n * This class provides methods to access values of feature flags listed in a native feature list\n * and to access their field trial parameters.\n *\n * This class needs to be derived for each native feature list (such as a component's feature list)\n * and the derived class must implement the abstract {@link #getNativeMap()} by calling a JNI method\n * to get the pointer to the base::android::FeatureMap. The derived class will provide Java code\n * access to the list of base::Features passed to the base::android::FeatureMap.\n ",
  "links" : [ "#getNativeMap()" ],
  "variables" : [ {
    "name" : "mNativeMapPtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected abstract long getNativeMap()",
    "returnType" : "long",
    "comment" : "\n     * Should return the native pointer to the specific base::FeatureMap for the component/layer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabledInNative(String featureName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the specified feature is enabled or not.\n     *\n     * Calling this has the side effect of bucketing this client, which may cause an experiment to\n     * be marked as active.\n     *\n     * Should be called only after native is loaded. If {@link FeatureList#isInitialized()} returns\n     * true, this method is safe to call.  In tests, this will return any values set through\n     * {@link FeatureList#setTestFeatures(Map)}, even before native is loaded.\n     *\n     * @param featureName The name of the feature to query.\n     * @return Whether the feature is enabled or not.\n     ",
    "links" : [ "org.chromium.base.FeatureList#setTestFeatures(Map)", "org.chromium.base.FeatureList#isInitialized()" ]
  }, {
    "name" : "public String getFieldTrialParamByFeature(String featureName, String paramName)",
    "returnType" : "String",
    "comment" : "\n     * Returns a field trial param for the specified feature.\n     *\n     * @param featureName The name of the feature to retrieve a param for.\n     * @param paramName The name of the param for which to get as an integer.\n     * @return The parameter value as a String. The string is empty if the feature does not exist or\n     *   the specified parameter does not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getFieldTrialParamByFeatureAsBoolean(String featureName, String paramName, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns a field trial param as a boolean for the specified feature.\n     *\n     * @param featureName The name of the feature to retrieve a param for.\n     * @param paramName The name of the param for which to get as an integer.\n     * @param defaultValue The boolean value to use if the param is not available.\n     * @return The parameter value as a boolean. Default value if the feature does not exist or the\n     *         specified parameter does not exist or its string value is neither \"true\" nor \"false\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFieldTrialParamByFeatureAsInt(String featureName, String paramName, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Returns a field trial param as an int for the specified feature.\n     *\n     * @param featureName The name of the feature to retrieve a param for.\n     * @param paramName The name of the param for which to get as an integer.\n     * @param defaultValue The integer value to use if the param is not available.\n     * @return The parameter value as an int. Default value if the feature does not exist or the\n     *         specified parameter does not exist or its string value does not represent an int.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getFieldTrialParamByFeatureAsDouble(String featureName, String paramName, double defaultValue)",
    "returnType" : "double",
    "comment" : "\n     * Returns a field trial param as a double for the specified feature.\n     *\n     * @param featureName The name of the feature to retrieve a param for.\n     * @param paramName The name of the param for which to get as an integer.\n     * @param defaultValue The double value to use if the param is not available.\n     * @return The parameter value as a double. Default value if the feature does not exist or the\n     *         specified parameter does not exist or its string value does not represent a double.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getFieldTrialParamsForFeature(String featureName)",
    "returnType" : "Map<String, String>",
    "comment" : " Returns all the field trial parameters for the specified feature. ",
    "links" : [ ]
  }, {
    "name" : "public MutableFlagWithSafeDefault mutableFlagWithSafeDefault(String featureName, boolean defaultValue)",
    "returnType" : "MutableFlagWithSafeDefault",
    "comment" : " Create a {@link MutableFlagWithSafeDefault} in this FeatureMap. ",
    "links" : [ "org.chromium.base.MutableFlagWithSafeDefault" ]
  }, {
    "name" : "private void ensureNativeMapInit()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract long getNativeMap()", "public boolean isEnabledInNative(String featureName)", "public String getFieldTrialParamByFeature(String featureName, String paramName)", "public boolean getFieldTrialParamByFeatureAsBoolean(String featureName, String paramName, boolean defaultValue)", "public int getFieldTrialParamByFeatureAsInt(String featureName, String paramName, int defaultValue)", "public double getFieldTrialParamByFeatureAsDouble(String featureName, String paramName, double defaultValue)", "public Map<String, String> getFieldTrialParamsForFeature(String featureName)", "public MutableFlagWithSafeDefault mutableFlagWithSafeDefault(String featureName, boolean defaultValue)", "private void ensureNativeMapInit()" ],
  "variableNames" : [ "mNativeMapPtr" ]
}