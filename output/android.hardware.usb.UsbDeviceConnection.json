{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/usb/UsbDeviceConnection.java",
  "packageName" : "android.hardware.usb",
  "className" : "UsbDeviceConnection",
  "comment" : "\n * This class is used for sending and receiving data and control messages to a USB device.\n * Instances of this class are created by {@link UsbManager#openDevice}.\n ",
  "links" : [ "android.hardware.usb.UsbManager#openDevice" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDevice",
    "type" : "UsbDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : " used by the JNI code",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean open(String name, ParcelFileDescriptor pfd, @NonNull Context context)",
    "returnType" : "boolean",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : " boolean isOpen()",
    "returnType" : "boolean",
    "comment" : "*\n     * @return If this connection is currently open and usable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * @return The application context the connection was created for.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean cancelRequest(UsbRequest request)",
    "returnType" : "boolean",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : " boolean queueRequest(UsbRequest request, ByteBuffer buffer, int length)",
    "returnType" : "boolean",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : " boolean queueRequest(UsbRequest request, @Nullable ByteBuffer buffer)",
    "returnType" : "boolean",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Releases all system resources related to the device.\n     * Once the object is closed it cannot be used again.\n     * The client must call {@link UsbManager#openDevice} again\n     * to retrieve a new instance to reestablish communication with the device.\n     ",
    "links" : [ "android.hardware.usb.UsbManager#openDevice" ]
  }, {
    "name" : "public int getFileDescriptor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the native file descriptor for the device, or\n     * -1 if the device is not opened.\n     * This is intended for passing to native code to access the device.\n     *\n     * @return the native file descriptor\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getRawDescriptors()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the raw USB descriptors for the device.\n     * This can be used to access descriptors not supported directly\n     * via the higher level APIs.\n     *\n     * @return raw USB descriptors\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean claimInterface(UsbInterface intf, boolean force)",
    "returnType" : "boolean",
    "comment" : "\n     * Claims exclusive access to a {@link android.hardware.usb.UsbInterface}.\n     * This must be done before sending or receiving data on any\n     * {@link android.hardware.usb.UsbEndpoint}s belonging to the interface.\n     *\n     * @param intf the interface to claim\n     * @param force true to disconnect kernel driver if necessary\n     * @return true if the interface was successfully claimed\n     ",
    "links" : [ "android.hardware.usb.UsbEndpoint", "android.hardware.usb.UsbInterface" ]
  }, {
    "name" : "public boolean releaseInterface(UsbInterface intf)",
    "returnType" : "boolean",
    "comment" : "\n     * Releases exclusive access to a {@link android.hardware.usb.UsbInterface}.\n     *\n     * @return true if the interface was successfully released\n     ",
    "links" : [ "android.hardware.usb.UsbInterface" ]
  }, {
    "name" : "public boolean setInterface(UsbInterface intf)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the current {@link android.hardware.usb.UsbInterface}.\n     * Used to select between two interfaces with the same ID but different alternate setting.\n     *\n     * @return true if the interface was successfully selected\n     ",
    "links" : [ "android.hardware.usb.UsbInterface" ]
  }, {
    "name" : "public boolean setConfiguration(UsbConfiguration configuration)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the device's current {@link android.hardware.usb.UsbConfiguration}.\n     *\n     * @return true if the configuration was successfully set\n     ",
    "links" : [ "android.hardware.usb.UsbConfiguration" ]
  }, {
    "name" : "public int controlTransfer(int requestType, int request, int value, int index, @Nullable byte[] buffer, int length, int timeout)",
    "returnType" : "int",
    "comment" : "\n     * Performs a control transaction on endpoint zero for this device.\n     * The direction of the transfer is determined by the request type.\n     * If requestType & {@link UsbConstants#USB_ENDPOINT_DIR_MASK} is\n     * {@link UsbConstants#USB_DIR_OUT}, then the transfer is a write,\n     * and if it is {@link UsbConstants#USB_DIR_IN}, then the transfer\n     * is a read.\n     * <p>\n     * This method transfers data starting from index 0 in the buffer.\n     * To specify a different offset, use\n     * {@link #controlTransfer(int, int, int, int, byte[], int, int, int)}.\n     * </p>\n     *\n     * @param requestType request type for this transaction\n     * @param request request ID for this transaction\n     * @param value value field for this transaction\n     * @param index index field for this transaction\n     * @param buffer buffer for data portion of transaction,\n     * or null if no data needs to be sent or received\n     * @param length the length of the data to send or receive\n     * @param timeout in milliseconds\n     * @return length of data transferred (or zero) for success,\n     * or negative value for failure\n     ",
    "links" : [ "#controlTransfer(int", "android.hardware.usb.UsbConstants#USB_DIR_OUT", "android.hardware.usb.UsbConstants#USB_DIR_IN", "android.hardware.usb.UsbConstants#USB_ENDPOINT_DIR_MASK" ]
  }, {
    "name" : "public int controlTransfer(int requestType, int request, int value, int index, @Nullable byte[] buffer, int offset, int length, int timeout)",
    "returnType" : "int",
    "comment" : "\n     * Performs a control transaction on endpoint zero for this device.\n     * The direction of the transfer is determined by the request type.\n     * If requestType & {@link UsbConstants#USB_ENDPOINT_DIR_MASK} is\n     * {@link UsbConstants#USB_DIR_OUT}, then the transfer is a write,\n     * and if it is {@link UsbConstants#USB_DIR_IN}, then the transfer\n     * is a read.\n     *\n     * @param requestType request type for this transaction\n     * @param request request ID for this transaction\n     * @param value value field for this transaction\n     * @param index index field for this transaction\n     * @param buffer buffer for data portion of transaction,\n     * or null if no data needs to be sent or received\n     * @param offset the index of the first byte in the buffer to send or receive\n     * @param length the length of the data to send or receive\n     * @param timeout in milliseconds\n     * @return length of data transferred (or zero) for success,\n     * or negative value for failure\n     ",
    "links" : [ "android.hardware.usb.UsbConstants#USB_DIR_OUT", "android.hardware.usb.UsbConstants#USB_DIR_IN", "android.hardware.usb.UsbConstants#USB_ENDPOINT_DIR_MASK" ]
  }, {
    "name" : "public int bulkTransfer(UsbEndpoint endpoint, byte[] buffer, int length, int timeout)",
    "returnType" : "int",
    "comment" : "\n     * Performs a bulk transaction on the given endpoint.\n     * The direction of the transfer is determined by the direction of the endpoint.\n     * <p>\n     * This method transfers data starting from index 0 in the buffer.\n     * To specify a different offset, use\n     * {@link #bulkTransfer(UsbEndpoint, byte[], int, int, int)}.\n     * </p>\n     *\n     * @param endpoint the endpoint for this transaction\n     * @param buffer buffer for data to send or receive; can be {@code null} to wait for next\n     *               transaction without reading data\n     * @param length the length of the data to send or receive. Before\n     *               {@value Build.VERSION_CODES#P}, a value larger than 16384 bytes\n     *               would be truncated down to 16384. In API {@value Build.VERSION_CODES#P}\n     *               and after, any value of length is valid.\n     * @param timeout in milliseconds, 0 is infinite\n     * @return length of data transferred (or zero) for success,\n     * or negative value for failure\n     ",
    "links" : [ "#bulkTransfer(UsbEndpoint" ]
  }, {
    "name" : "public int bulkTransfer(UsbEndpoint endpoint, byte[] buffer, int offset, int length, int timeout)",
    "returnType" : "int",
    "comment" : "\n     * Performs a bulk transaction on the given endpoint.\n     * The direction of the transfer is determined by the direction of the endpoint.\n     *\n     * @param endpoint the endpoint for this transaction\n     * @param buffer buffer for data to send or receive\n     * @param offset the index of the first byte in the buffer to send or receive\n     * @param length the length of the data to send or receive. Before\n     *               {@value Build.VERSION_CODES#P}, a value larger than 16384 bytes\n     *               would be truncated down to 16384. In API {@value Build.VERSION_CODES#P}\n     *               and after, any value of length is valid.\n     * @param timeout in milliseconds, 0 is infinite\n     * @return length of data transferred (or zero) for success,\n     * or negative value for failure\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean resetDevice()",
    "returnType" : "boolean",
    "comment" : "\n     * Reset USB port for the connected device.\n     *\n     * @return true if reset succeeds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public UsbRequest requestWait()",
    "returnType" : "UsbRequest",
    "comment" : "\n     * Waits for the result of a {@link android.hardware.usb.UsbRequest#queue} operation\n     * <p>Note that this may return requests queued on multiple\n     * {@link android.hardware.usb.UsbEndpoint}s. When multiple endpoints are in use,\n     * {@link android.hardware.usb.UsbRequest#getEndpoint} and {@link\n     * android.hardware.usb.UsbRequest#getClientData} can be useful in determining how to process\n     * the result of this function.</p>\n     *\n     * @return a completed USB request, or null if an error occurred\n     *\n     * @throws IllegalArgumentException Before API {@value Build.VERSION_CODES#O}: if the number of\n     *                                  bytes read or written is more than the limit of the\n     *                                  request's buffer. The number of bytes is determined by the\n     *                                  {@code length} parameter of\n     *                                  {@link UsbRequest#queue(ByteBuffer, int)}\n     * @throws BufferOverflowException In API {@value Build.VERSION_CODES#O} and after: if the\n     *                                 number of bytes read or written is more than the limit of the\n     *                                 request's buffer. The number of bytes is determined by the\n     *                                 {@code length} parameter of\n     *                                 {@link UsbRequest#queue(ByteBuffer, int)}\n     ",
    "links" : [ "android.hardware.usb.UsbRequest#queue(ByteBuffer", "android.hardware.usb.UsbEndpoint", "android.hardware.usb.UsbRequest#queue", "android.hardware.usb.UsbRequest#getEndpoint", "android.hardware.usb.UsbRequest#getClientData" ]
  }, {
    "name" : "public UsbRequest requestWait(long timeout) throws TimeoutException",
    "returnType" : "UsbRequest",
    "comment" : "\n     * Waits for the result of a {@link android.hardware.usb.UsbRequest#queue} operation\n     * <p>Note that this may return requests queued on multiple\n     * {@link android.hardware.usb.UsbEndpoint}s. When multiple endpoints are in use,\n     * {@link android.hardware.usb.UsbRequest#getEndpoint} and {@link\n     * android.hardware.usb.UsbRequest#getClientData} can be useful in determining how to process\n     * the result of this function.</p>\n     * <p>Android processes {@link UsbRequest UsbRequests} asynchronously. Hence it is not\n     * guaranteed that {@link #requestWait(long) requestWait(0)} returns a request that has been\n     * queued right before even if the request could have been processed immediately.</p>\n     *\n     * @param timeout timeout in milliseconds. If 0 this method does not wait.\n     *\n     * @return a completed USB request, or {@code null} if an error occurred\n     *\n     * @throws BufferOverflowException if the number of bytes read or written is more than the\n     *                                 limit of the request's buffer. The number of bytes is\n     *                                 determined by the {@code length} parameter of\n     *                                 {@link UsbRequest#queue(ByteBuffer, int)}\n     * @throws TimeoutException if no request was received in {@code timeout} milliseconds.\n     ",
    "links" : [ "android.hardware.usb.UsbRequest", "android.hardware.usb.UsbRequest#queue(ByteBuffer", "android.hardware.usb.UsbEndpoint", "#requestWait(long)", "android.hardware.usb.UsbRequest#queue", "android.hardware.usb.UsbRequest#getEndpoint", "android.hardware.usb.UsbRequest#getClientData" ]
  }, {
    "name" : "public String getSerial()",
    "returnType" : "String",
    "comment" : "\n     * Returns the serial number for the device.\n     * This will return null if the device has not been opened.\n     *\n     * @return the device serial number\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkBounds(byte[] buffer, int start, int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_open(String deviceName, FileDescriptor pfd)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void native_close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int native_get_fd()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native byte[] native_get_desc()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_claim_interface(int interfaceID, boolean force)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_release_interface(int interfaceID)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_set_interface(int interfaceID, int alternateSetting)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_set_configuration(int configurationID)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int native_control_request(int requestType, int request, int value, int index, byte[] buffer, int offset, int length, int timeout)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int native_bulk_request(int endpoint, byte[] buffer, int offset, int length, int timeout)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native UsbRequest native_request_wait(long timeout) throws TimeoutException",
    "returnType" : "UsbRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native String native_get_serial()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_reset_device()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean open(String name, ParcelFileDescriptor pfd, @NonNull Context context)", " boolean isOpen()", "public Context getContext()", " boolean cancelRequest(UsbRequest request)", " boolean queueRequest(UsbRequest request, ByteBuffer buffer, int length)", " boolean queueRequest(UsbRequest request, @Nullable ByteBuffer buffer)", "public void close()", "public int getFileDescriptor()", "public byte[] getRawDescriptors()", "public boolean claimInterface(UsbInterface intf, boolean force)", "public boolean releaseInterface(UsbInterface intf)", "public boolean setInterface(UsbInterface intf)", "public boolean setConfiguration(UsbConfiguration configuration)", "public int controlTransfer(int requestType, int request, int value, int index, @Nullable byte[] buffer, int length, int timeout)", "public int controlTransfer(int requestType, int request, int value, int index, @Nullable byte[] buffer, int offset, int length, int timeout)", "public int bulkTransfer(UsbEndpoint endpoint, byte[] buffer, int length, int timeout)", "public int bulkTransfer(UsbEndpoint endpoint, byte[] buffer, int offset, int length, int timeout)", "public boolean resetDevice()", "public UsbRequest requestWait()", "public UsbRequest requestWait(long timeout) throws TimeoutException", "public String getSerial()", "private static void checkBounds(byte[] buffer, int start, int length)", "protected void finalize() throws Throwable", "private native boolean native_open(String deviceName, FileDescriptor pfd)", "private native void native_close()", "private native int native_get_fd()", "private native byte[] native_get_desc()", "private native boolean native_claim_interface(int interfaceID, boolean force)", "private native boolean native_release_interface(int interfaceID)", "private native boolean native_set_interface(int interfaceID, int alternateSetting)", "private native boolean native_set_configuration(int configurationID)", "private native int native_control_request(int requestType, int request, int value, int index, byte[] buffer, int offset, int length, int timeout)", "private native int native_bulk_request(int endpoint, byte[] buffer, int offset, int length, int timeout)", "private native UsbRequest native_request_wait(long timeout) throws TimeoutException", "private native String native_get_serial()", "private native boolean native_reset_device()" ],
  "variableNames" : [ "TAG", "mDevice", "mContext", "mNativeContext", "mCloseGuard", "mLock" ]
}