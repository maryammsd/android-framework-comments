{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/GeomagneticField.java",
  "packageName" : "android.hardware",
  "className" : "GeomagneticField",
  "comment" : "\n * Estimates magnetic field at a given point on\n * Earth, and in particular, to compute the magnetic declination from true\n * north.\n *\n * <p>This uses the World Magnetic Model produced by the United States National\n * Geospatial-Intelligence Agency.  More details about the model can be found at\n * <a href=\"http://www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml\">http://www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml</a>.\n * This class currently uses WMM-2020 which is valid until 2025, but should\n * produce acceptable results for several years after that. Future versions of\n * Android may use a newer version of the model.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mX",
    "type" : "float",
    "comment" : " coordinates.",
    "links" : [ ]
  }, {
    "name" : "mY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mZ",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGcLatitudeRad",
    "type" : "float",
    "comment" : " Geocentric coordinates -- set by computeGeocentricCoordinates.",
    "links" : [ ]
  }, {
    "name" : "mGcLongitudeRad",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGcRadiusKm",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EARTH_SEMI_MAJOR_AXIS_KM",
    "type" : "float",
    "comment" : " Constants from WGS84 (the coordinate system used by GPS)",
    "links" : [ ]
  }, {
    "name" : "EARTH_SEMI_MINOR_AXIS_KM",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EARTH_REFERENCE_RADIUS_KM",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "G_COEFF",
    "type" : "float[][]",
    "comment" : " NOAA Technical Report: The US/UK World Magnetic Model for 2020-2025",
    "links" : [ ]
  }, {
    "name" : "H_COEFF",
    "type" : "float[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELTA_G",
    "type" : "float[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELTA_H",
    "type" : "float[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BASE_TIME",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCHMIDT_QUASI_NORM_FACTORS",
    "type" : "float[][]",
    "comment" : " don't depend on input variables at all.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public float getX()",
    "returnType" : "float",
    "comment" : "\n     * @return The X (northward) component of the magnetic field in nanoteslas.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getY()",
    "returnType" : "float",
    "comment" : "\n     * @return The Y (eastward) component of the magnetic field in nanoteslas.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getZ()",
    "returnType" : "float",
    "comment" : "\n     * @return The Z (downward) component of the magnetic field in nanoteslas.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getDeclination()",
    "returnType" : "float",
    "comment" : "\n     * @return The declination of the horizontal component of the magnetic\n     *         field from true north, in degrees (i.e. positive means the\n     *         magnetic field is rotated east that much from true north).\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getInclination()",
    "returnType" : "float",
    "comment" : "\n     * @return The inclination of the magnetic field in degrees -- positive\n     *         means the magnetic field is rotated downwards.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getHorizontalStrength()",
    "returnType" : "float",
    "comment" : "\n     * @return  Horizontal component of the field strength in nanoteslas.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFieldStrength()",
    "returnType" : "float",
    "comment" : "\n     * @return  Total field strength in nanoteslas.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void computeGeocentricCoordinates(float gdLatitudeDeg, float gdLongitudeDeg, float altitudeMeters)",
    "returnType" : "void",
    "comment" : "\n     * @param gdLatitudeDeg\n     *            Latitude in WGS84 geodetic coordinates.\n     * @param gdLongitudeDeg\n     *            Longitude in WGS84 geodetic coordinates.\n     * @param altitudeMeters\n     *            Altitude above sea level in WGS84 geodetic coordinates.\n     * @return Geocentric latitude (i.e. angle between closest point on the\n     *         equator and this point, at the center of the earth.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static float[][] computeSchmidtQuasiNormFactors(int maxN)",
    "returnType" : "float[][]",
    "comment" : "\n     * Compute the ration between the Gauss-normalized associated Legendre\n     * functions and the Schmidt quasi-normalized version. This is equivalent to\n     * sqrt((m==0?1:2)*(n-m)!/(n+m!))*(2n-1)!!/(n-m)!\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public float getX()", "public float getY()", "public float getZ()", "public float getDeclination()", "public float getInclination()", "public float getHorizontalStrength()", "public float getFieldStrength()", "private void computeGeocentricCoordinates(float gdLatitudeDeg, float gdLongitudeDeg, float altitudeMeters)", "private static float[][] computeSchmidtQuasiNormFactors(int maxN)" ],
  "variableNames" : [ "mX", "mY", "mZ", "mGcLatitudeRad", "mGcLongitudeRad", "mGcRadiusKm", "EARTH_SEMI_MAJOR_AXIS_KM", "EARTH_SEMI_MINOR_AXIS_KM", "EARTH_REFERENCE_RADIUS_KM", "G_COEFF", "H_COEFF", "DELTA_G", "DELTA_H", "BASE_TIME", "SCHMIDT_QUASI_NORM_FACTORS" ]
}