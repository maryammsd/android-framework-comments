{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/utils/Messages.java",
  "packageName" : "org.apache.xml.serializer.utils",
  "className" : "Messages",
  "comment" : "\n * A utility class for issuing error messages.\n * \n * A user of this class normally would create a singleton \n * instance of this class, passing the name\n * of the message class on the constructor. For example:\n * <CODE>\n * static Messages x = new Messages(\"org.package.MyMessages\");\n * </CODE>\n * Later the message is typically generated this way if there are no \n * substitution arguments:\n * <CODE>\n * String msg = x.createMessage(org.package.MyMessages.KEY_ONE, null); \n * </CODE>\n * If there are arguments substitutions then something like this:\n * <CODE>\n * String filename = ...;\n * String directory = ...;\n * String msg = x.createMessage(org.package.MyMessages.KEY_TWO, \n *   new Object[] {filename, directory) ); \n * </CODE>\n *  \n * The constructor of an instance of this class must be given\n * the class name of a class that extends java.util.ListResourceBundle \n * (\"org.package.MyMessages\" in the example above).  \n * The name should not have any language suffix \n * which will be added automatically by this utility class.\n * \n * The message class (\"org.package.MyMessages\")\n * must define the abstract method getContents() that is\n * declared in its base class, for example:\n * <CODE>\n * public Object[][] getContents() {return contents;}\n * </CODE>\n * \n * It is suggested that the message class expose its\n * message keys like this:\n * <CODE>\n *   public static final String KEY_ONE = \"KEY1\";\n *   public static final String KEY_TWO = \"KEY2\";\n *   . . . \n * </CODE>\n * and used through their names (KEY_ONE ...) rather than\n * their values (\"KEY1\" ...).\n * \n * The field contents (returned by getContents()\n * should be initialized something like this:\n * <CODE>\n * public static final Object[][] contents = {\n * { KEY_ONE, \"Something has gone wrong!\" },\n * { KEY_TWO, \"The file ''{0}'' does not exist in directory ''{1}''.\" },\n * . . .\n * { KEY_N, \"Message N\" }  }\n * </CODE>\n * \n * Where that section of code with the KEY to Message mappings\n * (where the message classes 'contents' field is initialized)\n * can have the Message strings translated in an alternate language\n * in a errorResourceClass with a language suffix.\n * \n * More sophisticated use of this class would be to pass null\n * when contructing it, but then call loadResourceBundle()\n * before creating any messages.\n * \n * This class is not a public API, it is only public because it is \n * used in org.apache.xml.serializer.\n *\n *  @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_locale",
    "type" : "Locale",
    "comment" : " The local object to use.  ",
    "links" : [ ]
  }, {
    "name" : "m_resourceBundle",
    "type" : "ListResourceBundle",
    "comment" : " The language specific resource object for messages.  ",
    "links" : [ ]
  }, {
    "name" : "m_resourceBundleName",
    "type" : "String",
    "comment" : " The class name of the error message string table with no language suffix. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private Locale getLocale()",
    "returnType" : "Locale",
    "comment" : "\n     * Get the Locale object that is being used.\n     * \n     * @return non-null reference to Locale object.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "private ListResourceBundle getResourceBundle()",
    "returnType" : "ListResourceBundle",
    "comment" : "\n     * Get the ListResourceBundle being used by this Messages instance which was\n     * previously set by a call to loadResourceBundle(className)\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String createMessage(String msgKey, Object[] args)",
    "returnType" : "String",
    "comment" : "\n     * Creates a message from the specified key and replacement\n     * arguments, localized to the given locale.\n     *\n     * @param msgKey  The key for the message text.\n     * @param args    The arguments to be used as replacement text\n     * in the message created.\n     *\n     * @return The formatted message string.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "private final String createMsg(ListResourceBundle fResourceBundle, String msgKey, Object[] args)",
    "returnType" : "String",
    "comment" : "\n     * Creates a message from the specified key and replacement\n     * arguments, localized to the given locale.\n     *\n     * @param errorCode The key for the message text.\n     *\n     * @param fResourceBundle The resource bundle to use.\n     * @param msgKey  The message key to use.\n     * @param args      The arguments to be used as replacement text\n     *                  in the message created.\n     *\n     * @return The formatted message string.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "private ListResourceBundle loadResourceBundle(String resourceBundle) throws MissingResourceException",
    "returnType" : "ListResourceBundle",
    "comment" : "\n     * Return a named ResourceBundle for a particular locale.  This method mimics the behavior\n     * of ResourceBundle.getBundle().\n     * \n     * @param className the name of the class that implements ListResourceBundle,\n     * without language suffix.\n     * @return the ResourceBundle\n     * @throws MissingResourceException\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getResourceSuffix(Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Return the resource file suffic for the indicated locale\n     * For most locales, this will be based the language code.  However\n     * for Chinese, we do distinguish between Taiwan and PRC\n     *\n     * @param locale the locale\n     * @return an String suffix which can be appended to a resource name\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private Locale getLocale()", "private ListResourceBundle getResourceBundle()", "public final String createMessage(String msgKey, Object[] args)", "private final String createMsg(ListResourceBundle fResourceBundle, String msgKey, Object[] args)", "private ListResourceBundle loadResourceBundle(String resourceBundle) throws MissingResourceException", "private static String getResourceSuffix(Locale locale)" ],
  "variableNames" : [ "m_locale", "m_resourceBundle", "m_resourceBundleName" ]
}