{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/SearchManager.java",
  "packageName" : "android.app",
  "className" : "SearchManager",
  "comment" : "\n * This class provides access to the system search services.\n *\n * <p>In practice, you won't interact with this class directly, as search\n * services are provided through methods in {@link android.app.Activity Activity}\n * and the {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH}\n * {@link android.content.Intent Intent}.\n *\n * <p>\n * {@link Configuration#UI_MODE_TYPE_WATCH} does not support this system service.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using the search dialog and adding search\n * suggestions in your application, read the\n * <a href=\"{@docRoot}guide/topics/search/index.html\">Search</a> developer guide.</p>\n * </div>\n ",
  "variables" : [ {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_KEY",
    "type" : "char",
    "comment" : "\n     * This is a shortcut definition for the default menu key to use for invoking search.\n     *\n     * See Menu.Item.setAlphabeticShortcut() for more information.\n     ",
    "links" : [ ]
  }, {
    "name" : "MENU_KEYCODE",
    "type" : "int",
    "comment" : "\n     * This is a shortcut definition for the default menu key to use for invoking search.\n     *\n     * See Menu.Item.setAlphabeticShortcut() for more information.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUERY",
    "type" : "String",
    "comment" : "\n     * Intent extra data key: Use this key with\n     * {@link android.content.Intent#getStringExtra\n     *  content.Intent.getStringExtra()}\n     * to obtain the query string from Intent.ACTION_SEARCH.\n     ",
    "links" : [ "android.content.Intent#getStringExtra" ]
  }, {
    "name" : "USER_QUERY",
    "type" : "String",
    "comment" : "\n     * Intent extra data key: Use this key with\n     * {@link android.content.Intent#getStringExtra\n     *  content.Intent.getStringExtra()}\n     * to obtain the query string typed in by the user.\n     * This may be different from the value of {@link #QUERY}\n     * if the intent is the result of selecting a suggestion.\n     * In that case, {@link #QUERY} will contain the value of\n     * {@link #SUGGEST_COLUMN_QUERY} for the suggestion, and\n     * {@link #USER_QUERY} will contain the string typed by the\n     * user.\n     ",
    "links" : [ "android.content.Intent#getStringExtra", "#QUERY", "#QUERY", "#SUGGEST_COLUMN_QUERY", "#USER_QUERY" ]
  }, {
    "name" : "APP_DATA",
    "type" : "String",
    "comment" : "\n     * Intent extra data key: Use this key with Intent.ACTION_SEARCH and\n     * {@link android.content.Intent#getBundleExtra\n     *  content.Intent.getBundleExtra()}\n     * to obtain any additional app-specific data that was inserted by the\n     * activity that launched the search.\n     ",
    "links" : [ "android.content.Intent#getBundleExtra" ]
  }, {
    "name" : "SEARCH_MODE",
    "type" : "String",
    "comment" : "\n     * Intent extra data key: Use {@link android.content.Intent#getBundleExtra\n     * content.Intent.getBundleExtra(SEARCH_MODE)} to get the search mode used\n     * to launch the intent.\n     * The only current value for this is {@link #MODE_GLOBAL_SEARCH_SUGGESTION}.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Intent#getBundleExtra", "#MODE_GLOBAL_SEARCH_SUGGESTION" ]
  }, {
    "name" : "ACTION_KEY",
    "type" : "String",
    "comment" : "\n     * Intent extra data key: Use this key with Intent.ACTION_SEARCH and\n     * {@link android.content.Intent#getIntExtra content.Intent.getIntExtra()}\n     * to obtain the keycode that the user used to trigger this query.  It will be zero if the\n     * user simply pressed the \"GO\" button on the search UI.  This is primarily used in conjunction\n     * with the keycode attribute in the actionkey element of your searchable.xml configuration\n     * file.\n     ",
    "links" : [ "android.content.Intent#getIntExtra" ]
  }, {
    "name" : "EXTRA_DATA_KEY",
    "type" : "String",
    "comment" : "\n     * Intent extra data key: This key will be used for the extra populated by the\n     * {@link #SUGGEST_COLUMN_INTENT_EXTRA_DATA} column.\n     ",
    "links" : [ "#SUGGEST_COLUMN_INTENT_EXTRA_DATA" ]
  }, {
    "name" : "EXTRA_SELECT_QUERY",
    "type" : "String",
    "comment" : "\n     * Boolean extra data key for {@link #INTENT_ACTION_GLOBAL_SEARCH} intents. If {@code true},\n     * the initial query should be selected when the global search activity is started, so\n     * that the user can easily replace it with another query.\n     ",
    "links" : [ "#INTENT_ACTION_GLOBAL_SEARCH" ]
  }, {
    "name" : "EXTRA_NEW_SEARCH",
    "type" : "String",
    "comment" : "\n     * Boolean extra data key for {@link Intent#ACTION_WEB_SEARCH} intents.  If {@code true},\n     * this search should open a new browser window, rather than using an existing one.\n     ",
    "links" : [ "Intent#ACTION_WEB_SEARCH" ]
  }, {
    "name" : "EXTRA_WEB_SEARCH_PENDINGINTENT",
    "type" : "String",
    "comment" : "\n     * Extra data key for {@link Intent#ACTION_WEB_SEARCH}. If set, the value must be a\n     * {@link PendingIntent}. The search activity handling the {@link Intent#ACTION_WEB_SEARCH}\n     * intent will fill in and launch the pending intent. The data URI will be filled in with an\n     * http or https URI, and {@link android.provider.Browser#EXTRA_HEADERS} may be filled in.\n     ",
    "links" : [ "Intent#ACTION_WEB_SEARCH", "PendingIntent", "Intent#ACTION_WEB_SEARCH", "android.provider.Browser#EXTRA_HEADERS" ]
  }, {
    "name" : "CURSOR_EXTRA_KEY_IN_PROGRESS",
    "type" : "String",
    "comment" : "\n     * Boolean extra data key for a suggestion provider to return in {@link Cursor#getExtras} to\n     * indicate that the search is not complete yet. This can be used by the search UI\n     * to indicate that a search is in progress. The suggestion provider can return partial results\n     * this way and send a change notification on the cursor when more results are available.\n     ",
    "links" : [ "Cursor#getExtras" ]
  }, {
    "name" : "ACTION_MSG",
    "type" : "String",
    "comment" : "\n     * Intent extra data key: Use this key with Intent.ACTION_SEARCH and\n     * {@link android.content.Intent#getStringExtra content.Intent.getStringExtra()}\n     * to obtain the action message that was defined for a particular search action key and/or\n     * suggestion.  It will be null if the search was launched by typing \"enter\", touching the\n     * \"GO\" button, or other means not involving any action key.\n     ",
    "links" : [ "android.content.Intent#getStringExtra" ]
  }, {
    "name" : "FLAG_QUERY_REFINEMENT",
    "type" : "int",
    "comment" : "\n     * Flag to specify that the entry can be used for query refinement, i.e., the query text\n     * in the search field can be replaced with the text in this entry, when a query refinement\n     * icon is clicked. The suggestion list should show such a clickable icon beside the entry.\n     * <p>Use this flag as a bit-field for {@link #SUGGEST_COLUMN_FLAGS}.\n     ",
    "links" : [ "#SUGGEST_COLUMN_FLAGS" ]
  }, {
    "name" : "SUGGEST_URI_PATH_QUERY",
    "type" : "String",
    "comment" : "\n     * Uri path for queried suggestions data.  This is the path that the search manager\n     * will use when querying your content provider for suggestions data based on user input\n     * (e.g. looking for partial matches).\n     * Typically you'll use this with a URI matcher.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_MIME_TYPE",
    "type" : "String",
    "comment" : "\n     * MIME type for suggestions data.  You'll use this in your suggestions content provider\n     * in the getType() function.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_URI_PATH_SHORTCUT",
    "type" : "String",
    "comment" : "\n     * Uri path for shortcut validation.  This is the path that the search manager will use when\n     * querying your content provider to refresh a shortcutted suggestion result and to check if it\n     * is still valid.  When asked, a source may return an up to date result, or no result.  No\n     * result indicates the shortcut refers to a no longer valid sugggestion.\n     *\n     * @see #SUGGEST_COLUMN_SHORTCUT_ID\n     ",
    "links" : [ ]
  }, {
    "name" : "SHORTCUT_MIME_TYPE",
    "type" : "String",
    "comment" : "\n     * MIME type for shortcut validation.  You'll use this in your suggestions content provider\n     * in the getType() function.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_FORMAT",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Unused - can be null or column can be omitted.</i>\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_TEXT_1",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Required.</i>  This is the primary line of text that\n     * will be presented to the user as the suggestion.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_TEXT_2",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,\n     *  then all suggestions will be provided in a two-line format.  The second line of text is in\n     *  a much smaller appearance.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_TEXT_2_URL",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Optional.</i> This is a URL that will be shown\n     * as the second line of text instead of {@link #SUGGEST_COLUMN_TEXT_2}. This is a separate\n     * column so that the search UI knows to display the text as a URL, e.g. by using a different\n     * color. If this column is absent, or has the value {@code null},\n     * {@link #SUGGEST_COLUMN_TEXT_2} will be used instead.\n     ",
    "links" : [ "#SUGGEST_COLUMN_TEXT_2", "#SUGGEST_COLUMN_TEXT_2" ]
  }, {
    "name" : "SUGGEST_COLUMN_ICON_1",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,\n     *  then all suggestions will be provided in a format that includes space for two small icons,\n     *  one at the left and one at the right of each suggestion.  The data in the column must\n     *  be a resource ID of a drawable, or a URI in one of the following formats:\n     *\n     * <ul>\n     * <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li>\n     * <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE})</li>\n     * <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li>\n     * </ul>\n     *\n     * See {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n     * for more information on these schemes.\n     ",
    "links" : [ "android.content.ContentResolver#SCHEME_CONTENT", "android.content.ContentResolver#SCHEME_ANDROID_RESOURCE", "android.content.ContentResolver#SCHEME_FILE", "android.content.ContentResolver#openAssetFileDescriptor" ]
  }, {
    "name" : "SUGGEST_COLUMN_ICON_2",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,\n     *  then all suggestions will be provided in a format that includes space for two small icons,\n     *  one at the left and one at the right of each suggestion.  The data in the column must\n     *  be a resource ID of a drawable, or a URI in one of the following formats:\n     *\n     * <ul>\n     * <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li>\n     * <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE})</li>\n     * <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li>\n     * </ul>\n     *\n     * See {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n     * for more information on these schemes.\n     ",
    "links" : [ "android.content.ContentResolver#SCHEME_CONTENT", "android.content.ContentResolver#SCHEME_ANDROID_RESOURCE", "android.content.ContentResolver#SCHEME_FILE", "android.content.ContentResolver#openAssetFileDescriptor" ]
  }, {
    "name" : "SUGGEST_COLUMN_RESULT_CARD_IMAGE",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,\n     * then the image will be displayed when forming the suggestion. The suggested dimension for\n     * the image is 270x400 px for portrait mode and 400x225 px for landscape mode. The data in the\n     * column must be a resource ID of a drawable, or a URI in one of the following formats:\n     *\n     * <ul>\n     * <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li>\n     * <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE})</li>\n     * <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li>\n     * </ul>\n     *\n     * See {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}\n     * for more information on these schemes.\n     ",
    "links" : [ "android.content.ContentResolver#SCHEME_CONTENT", "android.content.ContentResolver#SCHEME_ANDROID_RESOURCE", "android.content.ContentResolver#SCHEME_FILE", "android.content.ContentResolver#openAssetFileDescriptor" ]
  }, {
    "name" : "SUGGEST_COLUMN_INTENT_ACTION",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>\n     * this element exists at the given row, this is the action that will be used when\n     * forming the suggestion's intent.  If the element is not provided, the action will be taken\n     * from the android:searchSuggestIntentAction field in your XML metadata.  <i>At least one of\n     * these must be present for the suggestion to generate an intent.</i>  Note:  If your action is\n     * the same for all suggestions, it is more efficient to specify it using XML metadata and omit\n     * it from the cursor.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_INTENT_DATA",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>\n     * this element exists at the given row, this is the data that will be used when\n     * forming the suggestion's intent.  If the element is not provided, the data will be taken\n     * from the android:searchSuggestIntentData field in your XML metadata.  If neither source\n     * is provided, the Intent's data field will be null.  Note:  If your data is\n     * the same for all suggestions, or can be described using a constant part and a specific ID,\n     * it is more efficient to specify it using XML metadata and omit it from the cursor.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_INTENT_EXTRA_DATA",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>\n     * this element exists at the given row, this is the data that will be used when\n     * forming the suggestion's intent. If not provided, the Intent's extra data field will be null.\n     * This column allows suggestions to provide additional arbitrary data which will be included as\n     * an extra under the key {@link #EXTRA_DATA_KEY}.\n     ",
    "links" : [ "#EXTRA_DATA_KEY" ]
  }, {
    "name" : "SUGGEST_COLUMN_INTENT_DATA_ID",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>\n     * this element exists at the given row, then \"/\" and this value will be appended to the data\n     * field in the Intent.  This should only be used if the data field has already been set to an\n     * appropriate base string.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_QUERY",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor.  <i>Required if action is\n     * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH}, optional otherwise.</i>  If this\n     * column exists <i>and</i> this element exists at the given row, this is the data that will be\n     * used when forming the suggestion's query.\n     ",
    "links" : [ "android.content.Intent#ACTION_SEARCH" ]
  }, {
    "name" : "SUGGEST_COLUMN_SHORTCUT_ID",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  This column is used to indicate whether\n     * a search suggestion should be stored as a shortcut, and whether it should be refreshed.  If\n     * missing, the result will be stored as a shortcut and never validated.  If set to\n     * {@link #SUGGEST_NEVER_MAKE_SHORTCUT}, the result will not be stored as a shortcut.\n     * Otherwise, the shortcut id will be used to check back for an up to date suggestion using\n     * {@link #SUGGEST_URI_PATH_SHORTCUT}.\n     ",
    "links" : [ "#SUGGEST_NEVER_MAKE_SHORTCUT", "#SUGGEST_URI_PATH_SHORTCUT" ]
  }, {
    "name" : "SUGGEST_COLUMN_SPINNER_WHILE_REFRESHING",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i> This column is used to specify\n     * that a spinner should be shown in lieu of an icon2 while the shortcut of this suggestion\n     * is being refreshed.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content is media type, you\n     * should provide this column so search app could understand more about your content. The data\n     * in the column must specify the MIME type of the content.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_IS_LIVE",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content is media type, you\n     * should provide this column to specify whether your content is live media such as live video\n     * or live audio. The value in the column is of integer type with value of either 0 indicating\n     * non-live content or 1 indicating live content.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_VIDEO_WIDTH",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content is video, you should\n     * provide this column to specify the number of vertical lines. The data in the column is of\n     * integer type.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_VIDEO_HEIGHT",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content is video, you should\n     * provide this column to specify the number of horizontal lines. The data in the column is of\n     * integer type.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_AUDIO_CHANNEL_CONFIG",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content contains audio, you\n     * should provide this column to specify the audio channel configuration. The data in the\n     * column is string with format like \"channels.subchannels\" such as \"1.0\" or \"5.1\".\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_PURCHASE_PRICE",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content is purchasable, you\n     * should provide this column to specify the displayable string representation of the purchase\n     * price of your content including the currency and the amount. If it's free, you should\n     * provide localized string to specify that it's free. This column can be omitted if the content\n     * is not applicable to purchase.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_RENTAL_PRICE",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content is rentable, you\n     * should provide this column to specify the displayable string representation of the rental\n     * price of your content including the currency and the amount. If it's free, you should\n     * provide localized string to specify that it's free. This column can be omitted if the\n     * content is not applicable to rent.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_RATING_STYLE",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content has a rating, you\n     * should provide this column to specify the rating style of your content. The data in the\n     * column must be one of the constant values specified in {@link android.media.Rating}\n     ",
    "links" : [ "android.media.Rating" ]
  }, {
    "name" : "SUGGEST_COLUMN_RATING_SCORE",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content has a rating, you\n     * should provide this column to specify the rating score of your content. The data in the\n     * column is of float type. See {@link android.media.Rating} about valid rating scores for each\n     * rating style.\n     ",
    "links" : [ "android.media.Rating" ]
  }, {
    "name" : "SUGGEST_COLUMN_PRODUCTION_YEAR",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content is video or audio and\n     * has a known production year, you should provide this column to specify the production year\n     * of your content. The data in the column is of integer type.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_DURATION",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i>  If your content is video or audio, you\n     * should provide this column to specify the duration of your content in milliseconds. The data\n     * in the column is of long type.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGEST_COLUMN_FLAGS",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i> This column is used to specify\n     * additional flags per item. Multiple flags can be specified.\n     * <p>\n     * Must be one of {@link #FLAG_QUERY_REFINEMENT} or 0 to indicate no flags.\n     * </p>\n     ",
    "links" : [ "#FLAG_QUERY_REFINEMENT" ]
  }, {
    "name" : "SUGGEST_COLUMN_LAST_ACCESS_HINT",
    "type" : "String",
    "comment" : "\n     * Column name for suggestions cursor. <i>Optional.</i> This column may be\n     * used to specify the time in {@link System#currentTimeMillis\n     * System.currentTImeMillis()} (wall time in UTC) when an item was last\n     * accessed within the results-providing application. If set, this may be\n     * used to show more-recently-used items first.\n     ",
    "links" : [ "System#currentTimeMillis" ]
  }, {
    "name" : "SUGGEST_NEVER_MAKE_SHORTCUT",
    "type" : "String",
    "comment" : "\n     * Column value for suggestion column {@link #SUGGEST_COLUMN_SHORTCUT_ID} when a suggestion\n     * should not be stored as a shortcut in global search.\n     ",
    "links" : [ "#SUGGEST_COLUMN_SHORTCUT_ID" ]
  }, {
    "name" : "SUGGEST_PARAMETER_LIMIT",
    "type" : "String",
    "comment" : "\n     * Query parameter added to suggestion queries to limit the number of suggestions returned.\n     * This limit is only advisory and suggestion providers may chose to ignore it.\n     ",
    "links" : [ ]
  }, {
    "name" : "INTENT_ACTION_GLOBAL_SEARCH",
    "type" : "String",
    "comment" : "\n     * Intent action for starting the global search activity.\n     * The global search provider should handle this intent.\n     *\n     * Supported extra data keys: {@link #QUERY},\n     * {@link #EXTRA_SELECT_QUERY},\n     * {@link #APP_DATA}.\n     ",
    "links" : [ "#QUERY", "#EXTRA_SELECT_QUERY", "#APP_DATA" ]
  }, {
    "name" : "INTENT_ACTION_SEARCH_SETTINGS",
    "type" : "String",
    "comment" : "\n     * Intent action for starting the global search settings activity.\n     * The global search provider should handle this intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "INTENT_ACTION_WEB_SEARCH_SETTINGS",
    "type" : "String",
    "comment" : "\n     * Intent action for starting a web search provider's settings activity.\n     * Web search providers should handle this intent if they have provider-specific\n     * settings to implement.\n     ",
    "links" : [ ]
  }, {
    "name" : "INTENT_ACTION_SEARCHABLES_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent action broadcasted to inform that the searchables list or default have changed.\n     * Components should handle this intent if they cache any searchable data and wish to stay\n     * up to date on changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent action to be broadcast to inform that the global search provider\n     * has changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "INTENT_ACTION_SEARCH_SETTINGS_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent action broadcasted to inform that the search settings have changed in some way.\n     * Either searchables have been enabled or disabled, or a different web search provider\n     * has been chosen.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_IS_VOICE",
    "type" : "String",
    "comment" : "\n     * This means that context is voice, and therefore the SearchDialog should\n     * continue showing the microphone until the user indicates that he/she does\n     * not want to re-speak (e.g. by typing).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_VOICE_SEARCH",
    "type" : "String",
    "comment" : "\n     * This means that the voice icon should not be shown at all, because the\n     * current search engine does not support voice search.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ISearchManager",
    "comment" : "\n     * Reference to the shared system search service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "mDismissListener",
    "type" : "OnDismissListener",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "mCancelListener",
    "type" : "OnCancelListener",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "mSearchDialog",
    "type" : "SearchDialog",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void startSearch(String initialQuery, boolean selectInitialQuery, ComponentName launchActivity, Bundle appSearchData, boolean globalSearch)",
    "returnType" : "void",
    "comment" : "\n     * Launch search UI.\n     *\n     * <p>The search manager will open a search widget in an overlapping\n     * window, and the underlying activity may be obscured.  The search\n     * entry state will remain in effect until one of the following events:\n     * <ul>\n     * <li>The user completes the search.  In most cases this will launch\n     * a search intent.</li>\n     * <li>The user uses the back, home, or other keys to exit the search.</li>\n     * <li>The application calls the {@link #stopSearch}\n     * method, which will hide the search window and return focus to the\n     * activity from which it was launched.</li>\n     *\n     * <p>Most applications will <i>not</i> use this interface to invoke search.\n     * The primary method for invoking search is to call\n     * {@link android.app.Activity#onSearchRequested Activity.onSearchRequested()} or\n     * {@link android.app.Activity#startSearch Activity.startSearch()}.\n     *\n     * @param initialQuery A search string can be pre-entered here, but this\n     * is typically null or empty.\n     * @param selectInitialQuery If true, the initial query will be preselected, which means that\n     * any further typing will replace it.  This is useful for cases where an entire pre-formed\n     * query is being inserted.  If false, the selection point will be placed at the end of the\n     * inserted query.  This is useful when the inserted query is text that the user entered,\n     * and the user would expect to be able to keep typing.  <i>This parameter is only meaningful\n     * if initialQuery is a non-empty string.</i>\n     * @param launchActivity The ComponentName of the activity that has launched this search.\n     * @param appSearchData An application can insert application-specific\n     * context here, in order to improve quality or specificity of its own\n     * searches.  This data will be returned with SEARCH intent(s).  Null if\n     * no extra data is required.\n     * @param globalSearch If false, this will only launch the search that has been specifically\n     * defined by the application (which is usually defined as a local search).  If no default\n     * search is defined in the current application or activity, global search will be launched.\n     * If true, this will always launch a platform-global (e.g. web-based) search instead.\n     *\n     * @see android.app.Activity#onSearchRequested\n     * @see #stopSearch\n     ",
    "links" : [ "#stopSearch", "android.app.Activity#onSearchRequested", "android.app.Activity#startSearch" ]
  }, {
    "name" : "public void startSearch(String initialQuery, boolean selectInitialQuery, ComponentName launchActivity, Bundle appSearchData, boolean globalSearch, Rect sourceBounds)",
    "returnType" : "void",
    "comment" : "\n     * As {@link #startSearch(String, boolean, ComponentName, Bundle, boolean)} but including\n     * source bounds for the global search intent.\n     *\n     * @hide\n     ",
    "links" : [ "#startSearch" ]
  }, {
    "name" : "private void ensureSearchDialog()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void startGlobalSearch(String initialQuery, boolean selectInitialQuery, Bundle appSearchData, Rect sourceBounds)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> getGlobalSearchActivities()",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Returns a list of installed apps that handle the global search\n     * intent.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getGlobalSearchActivity()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Gets the name of the global search activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getWebSearchActivity()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Gets the name of the web search activity.\n     *\n     * @return The name of the default activity for web searches. This activity\n     *         can be used to get web search suggestions. Returns {@code null} if\n     *         there is no default web search activity.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void triggerSearch(String query, ComponentName launchActivity, Bundle appSearchData)",
    "returnType" : "void",
    "comment" : "\n     * Similar to {@link #startSearch} but actually fires off the search query after invoking\n     * the search dialog.  Made available for testing purposes.\n     *\n     * @param query The query to trigger.  If empty, request will be ignored.\n     * @param launchActivity The ComponentName of the activity that has launched this search.\n     * @param appSearchData An application can insert application-specific\n     * context here, in order to improve quality or specificity of its own\n     * searches.  This data will be returned with SEARCH intent(s).  Null if\n     * no extra data is required.\n     *\n     * @see #startSearch\n     ",
    "links" : [ "#startSearch" ]
  }, {
    "name" : "public void stopSearch()",
    "returnType" : "void",
    "comment" : "\n     * Terminate search UI.\n     *\n     * <p>Typically the user will terminate the search UI by launching a\n     * search or by canceling.  This function allows the underlying application\n     * or activity to cancel the search prematurely (for any reason).\n     *\n     * <p>This function can be safely called at any time (even if no search is active.)\n     *\n     * <p>{@link Configuration#UI_MODE_TYPE_TELEVISION} does not support this method.\n     *\n     * @see #startSearch\n     ",
    "links" : [ "Configuration#UI_MODE_TYPE_TELEVISION" ]
  }, {
    "name" : "public boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if the Search UI is currently displayed.\n     *\n     * This is provided primarily for application test purposes.\n     *\n     * @return Returns true if the search UI is currently displayed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDismissListener(final OnDismissListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set or clear the callback that will be invoked whenever the search UI is dismissed.\n     *\n     * <p>{@link Configuration#UI_MODE_TYPE_TELEVISION} does not support this method.\n     *\n     * @param listener The {@link OnDismissListener} to use, or null.\n     ",
    "links" : [ "Configuration#UI_MODE_TYPE_TELEVISION", "OnDismissListener" ]
  }, {
    "name" : "public void setOnCancelListener(OnCancelListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set or clear the callback that will be invoked whenever the search UI is canceled.\n     *\n     * <p>{@link Configuration#UI_MODE_TYPE_TELEVISION} does not support this method.\n     *\n     * @param listener The {@link OnCancelListener} to use, or null.\n     ",
    "links" : [ "Configuration#UI_MODE_TYPE_TELEVISION", "OnCancelListener" ]
  }, {
    "name" : "public void onCancel(DialogInterface dialog)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This method is an obsolete internal implementation detail. Do not use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDismiss(DialogInterface dialog)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This method is an obsolete internal implementation detail. Do not use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SearchableInfo getSearchableInfo(ComponentName componentName)",
    "returnType" : "SearchableInfo",
    "comment" : "\n     * Gets information about a searchable activity.\n     *\n     * @param componentName The activity to get searchable information for.\n     * @return Searchable information, or <code>null</code> if the activity does not\n     *         exist, or is not searchable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor getSuggestions(SearchableInfo searchable, String query)",
    "returnType" : "Cursor",
    "comment" : "\n     * Gets a cursor with search suggestions.\n     *\n     * @param searchable Information about how to get the suggestions.\n     * @param query The search text entered (so far).\n     * @return a cursor with suggestions, or <code>null</null> the suggestion query failed.\n     *\n     * @hide because SearchableInfo is not part of the API.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor getSuggestions(SearchableInfo searchable, String query, int limit)",
    "returnType" : "Cursor",
    "comment" : "\n     * Gets a cursor with search suggestions.\n     *\n     * @param searchable Information about how to get the suggestions.\n     * @param query The search text entered (so far).\n     * @param limit The query limit to pass to the suggestion provider. This is advisory,\n     *        the returned cursor may contain more rows. Pass {@code -1} for no limit.\n     * @return a cursor with suggestions, or <code>null</null> the suggestion query failed.\n     *\n     * @hide because SearchableInfo is not part of the API.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<SearchableInfo> getSearchablesInGlobalSearch()",
    "returnType" : "List<SearchableInfo>",
    "comment" : "\n     * Returns a list of the searchable activities that can be included in global search.\n     *\n     * @return a list containing searchable information for all searchable activities\n     *         that have the <code>android:includeInGlobalSearch</code> attribute set\n     *         in their searchable meta-data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent getAssistIntent(boolean inclContext)",
    "returnType" : "Intent",
    "comment" : "\n     * Gets an intent for launching installed assistant activity, or null if not available.\n     * @return The assist intent.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void launchAssist(@Nullable Bundle args)",
    "returnType" : "void",
    "comment" : "\n     * Starts the {@link android.provider.Settings.Secure#ASSISTANT assistant}.\n     *\n     * @param args a {@code Bundle} that will be passed to the assistant's\n     *         {@link android.service.voice.VoiceInteractionSession#onShow VoiceInteractionSession}\n     *         (or as {@link Intent#getExtras() extras} along\n     *         {@link Intent#ACTION_ASSIST ACTION_ASSIST} for legacy assistants)\n     *\n     * @hide\n     ",
    "links" : [ "android.provider.Settings.Secure#ASSISTANT", "android.service.voice.VoiceInteractionSession#onShow", "Intent#getExtras", "Intent#ACTION_ASSIST" ]
  } ],
  "variableNames" : [ "DBG", "TAG", "MENU_KEY", "MENU_KEYCODE", "QUERY", "USER_QUERY", "APP_DATA", "SEARCH_MODE", "ACTION_KEY", "EXTRA_DATA_KEY", "EXTRA_SELECT_QUERY", "EXTRA_NEW_SEARCH", "EXTRA_WEB_SEARCH_PENDINGINTENT", "CURSOR_EXTRA_KEY_IN_PROGRESS", "ACTION_MSG", "FLAG_QUERY_REFINEMENT", "SUGGEST_URI_PATH_QUERY", "SUGGEST_MIME_TYPE", "SUGGEST_URI_PATH_SHORTCUT", "SHORTCUT_MIME_TYPE", "SUGGEST_COLUMN_FORMAT", "SUGGEST_COLUMN_TEXT_1", "SUGGEST_COLUMN_TEXT_2", "SUGGEST_COLUMN_TEXT_2_URL", "SUGGEST_COLUMN_ICON_1", "SUGGEST_COLUMN_ICON_2", "SUGGEST_COLUMN_RESULT_CARD_IMAGE", "SUGGEST_COLUMN_INTENT_ACTION", "SUGGEST_COLUMN_INTENT_DATA", "SUGGEST_COLUMN_INTENT_EXTRA_DATA", "SUGGEST_COLUMN_INTENT_DATA_ID", "SUGGEST_COLUMN_QUERY", "SUGGEST_COLUMN_SHORTCUT_ID", "SUGGEST_COLUMN_SPINNER_WHILE_REFRESHING", "SUGGEST_COLUMN_CONTENT_TYPE", "SUGGEST_COLUMN_IS_LIVE", "SUGGEST_COLUMN_VIDEO_WIDTH", "SUGGEST_COLUMN_VIDEO_HEIGHT", "SUGGEST_COLUMN_AUDIO_CHANNEL_CONFIG", "SUGGEST_COLUMN_PURCHASE_PRICE", "SUGGEST_COLUMN_RENTAL_PRICE", "SUGGEST_COLUMN_RATING_STYLE", "SUGGEST_COLUMN_RATING_SCORE", "SUGGEST_COLUMN_PRODUCTION_YEAR", "SUGGEST_COLUMN_DURATION", "SUGGEST_COLUMN_FLAGS", "SUGGEST_COLUMN_LAST_ACCESS_HINT", "SUGGEST_NEVER_MAKE_SHORTCUT", "SUGGEST_PARAMETER_LIMIT", "INTENT_ACTION_GLOBAL_SEARCH", "INTENT_ACTION_SEARCH_SETTINGS", "INTENT_ACTION_WEB_SEARCH_SETTINGS", "INTENT_ACTION_SEARCHABLES_CHANGED", "INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED", "INTENT_ACTION_SEARCH_SETTINGS_CHANGED", "CONTEXT_IS_VOICE", "DISABLE_VOICE_SEARCH", "mService", "mContext", "mHandler", "mDismissListener", "mCancelListener", "mSearchDialog" ],
  "methodNames" : [ "public void startSearch(String initialQuery, boolean selectInitialQuery, ComponentName launchActivity, Bundle appSearchData, boolean globalSearch)", "public void startSearch(String initialQuery, boolean selectInitialQuery, ComponentName launchActivity, Bundle appSearchData, boolean globalSearch, Rect sourceBounds)", "private void ensureSearchDialog()", " void startGlobalSearch(String initialQuery, boolean selectInitialQuery, Bundle appSearchData, Rect sourceBounds)", "public List<ResolveInfo> getGlobalSearchActivities()", "public ComponentName getGlobalSearchActivity()", "public ComponentName getWebSearchActivity()", "public void triggerSearch(String query, ComponentName launchActivity, Bundle appSearchData)", "public void stopSearch()", "public boolean isVisible()", "public void setOnDismissListener(final OnDismissListener listener)", "public void setOnCancelListener(OnCancelListener listener)", "public void onCancel(DialogInterface dialog)", "public void onDismiss(DialogInterface dialog)", "public SearchableInfo getSearchableInfo(ComponentName componentName)", "public Cursor getSuggestions(SearchableInfo searchable, String query)", "public Cursor getSuggestions(SearchableInfo searchable, String query, int limit)", "public List<SearchableInfo> getSearchablesInGlobalSearch()", "public Intent getAssistIntent(boolean inclContext)", "public void launchAssist(@Nullable Bundle args)" ]
}