{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/soundtrigger/SoundTriggerInstrumentation.java",
  "packageName" : "android.media.soundtrigger",
  "className" : "RecognitionSession",
  "comment" : "\n     * Session associated with a recognition start in the fake STHAL.\n     * Can be used to get information about the started recognition, register a callback\n     * for future events associated with this recognition, and triggering\n     * recognition events or aborts.\n     * This session is invalid once the recognition is stopped, caused by a\n     * {@link RecognitionSession#triggerAbortRecognition()},\n     * {@link RecognitionSession#triggerRecognitionEvent(byte[], List)},\n     * the client stopping recognition, or any operation which invalidates the\n     * {@link ModelSession} which the session was created from.\n     * Further injections on an invalidated session will not be respected, and no future\n     * callbacks will be delivered.\n     * @hide\n     ",
  "links" : [ "#triggerAbortRecognition()", "ModelSession", "#triggerRecognitionEvent(byte" ],
  "variables" : [ {
    "name" : "mAudioSession",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecognitionConfig",
    "type" : "SoundTrigger.RecognitionConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInjectRecognitionEvent",
    "type" : "IInjectRecognitionEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecognitionExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecognitionCallback",
    "type" : "RecognitionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDroppedConsumerList",
    "type" : "List<Consumer<RecognitionCallback>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getAudioSession()",
    "returnType" : "int",
    "comment" : "\n         * Get an integer token representing the audio session associated with this\n         * recognition in the STHAL.\n         * @return - The session token.\n         ",
    "links" : [ ]
  }, {
    "name" : "public SoundTrigger.RecognitionConfig getRecognitionConfig()",
    "returnType" : "SoundTrigger.RecognitionConfig",
    "comment" : "\n         * Get the recognition config used to start this recognition.\n         * @return - The config passed to the HAL for startRecognition.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void triggerRecognitionEvent(@NonNull byte[] data, @Nullable List<SoundTrigger.KeyphraseRecognitionExtra> phraseExtras)",
    "returnType" : "void",
    "comment" : "\n         * Trigger a recognition in the fake STHAL.\n         * @param data - The opaque data buffer included in the recognition event.\n         * @param phraseExtras - Keyphrase metadata included in the event. The\n         *                       event must include metadata for the keyphrase id\n         *                       associated with this model to be received by the\n         *                       client application.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void triggerAbortRecognition()",
    "returnType" : "void",
    "comment" : "\n         * Trigger an abort recognition event in the fake HAL. This represents a\n         * preemptive ending of the recognition session by the HAL, despite no\n         * recognition detection. Typically occurs during contention for microphone\n         * usage, or if model limits are hit.\n         * See {@link SoundTriggerInstrumentation#setResourceContention(boolean)} to block\n         * subsequent downward calls for contention reasons.\n         ",
    "links" : [ "android.media.soundtrigger.SoundTriggerInstrumentation#setResourceContention(boolean)" ]
  }, {
    "name" : "public void setRecognitionCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RecognitionCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Registers the recognition callback associated with this session. Events associated\n         * with this recognition session will be reported via this callback.\n         * See {@link RecognitionCallback}\n         * @param executor - Executor which the callback is dispatched on\n         * @param callback - Recognition callback for reporting recognition session events.\n         ",
    "links" : [ "RecognitionCallback" ]
  }, {
    "name" : "public void clearRecognitionCallback()",
    "returnType" : "void",
    "comment" : "\n         * Clear the recognition callback associated with this session, if any has been\n         * set by {@link #setRecognitionCallback(Executor, RecognitionCallback)}.\n         ",
    "links" : [ "#setRecognitionCallback(Executor" ]
  }, {
    "name" : "private void wrap(Consumer<RecognitionCallback> consumer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getAudioSession()", "public SoundTrigger.RecognitionConfig getRecognitionConfig()", "public void triggerRecognitionEvent(@NonNull byte[] data, @Nullable List<SoundTrigger.KeyphraseRecognitionExtra> phraseExtras)", "public void triggerAbortRecognition()", "public void setRecognitionCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RecognitionCallback callback)", "public void clearRecognitionCallback()", "private void wrap(Consumer<RecognitionCallback> consumer)" ],
  "variableNames" : [ "mAudioSession", "mRecognitionConfig", "mInjectRecognitionEvent", "mRecognitionExecutor", "mRecognitionCallback", "mDroppedConsumerList" ]
}