{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/apk/VerityBuilder.java",
  "packageName" : "android.util.apk",
  "className" : "VerityBuilder",
  "comment" : "\n * VerityBuilder builds the verity Merkle tree and other metadata.  The generated tree format can\n * be stored on disk for fs-verity setup and used by kernel.  The builder support standard\n * fs-verity, and Android specific apk-verity that requires additional kernel patches.\n *\n * <p>Unlike a regular Merkle tree of fs-verity, the apk-verity tree does not cover the file content\n * fully, and has to skip APK Signing Block with some special treatment for the \"Central Directory\n * offset\" field of ZIP End of Central Directory.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CHUNK_SIZE_BYTES",
    "type" : "int",
    "comment" : " Typical Linux block size",
    "links" : [ ]
  }, {
    "name" : "DIGEST_SIZE_BYTES",
    "type" : "int",
    "comment" : " SHA-256 size",
    "links" : [ ]
  }, {
    "name" : "FSVERITY_HEADER_SIZE_BYTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZIP_EOCD_CENTRAL_DIR_OFFSET_FIELD_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZIP_EOCD_CENTRAL_DIR_OFFSET_FIELD_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JCA_DIGEST_ALGORITHM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SALT",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MMAP_REGION_SIZE_BYTES",
    "type" : "int",
    "comment" : " thus the syscall overhead is not too big.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static VerityResult generateApkVerityTree(@NonNull RandomAccessFile apk, @Nullable SignatureInfo signatureInfo, @NonNull ByteBufferFactory bufferFactory) throws IOException, SecurityException, NoSuchAlgorithmException, DigestException",
    "returnType" : "VerityResult",
    "comment" : "\n     * Generates the 4k, SHA-256 based Merkle tree for the given APK and stores in the {@link\n     * ByteBuffer} created by the {@link ByteBufferFactory}.  The Merkle tree does not cover Signing\n     * Block specificed in {@code signatureInfo}.  The output is suitable to be used as the on-disk\n     * format for fs-verity to use (with elide and patch extensions).\n     *\n     * @return VerityResult containing a buffer with the generated Merkle tree stored at the\n     *         front, the tree size, and the calculated root hash.\n     ",
    "links" : [ "android.util.apk.ByteBufferFactory", "java.nio.ByteBuffer" ]
  }, {
    "name" : "private static VerityResult generateVerityTreeInternal(@NonNull RandomAccessFile apk, @NonNull ByteBufferFactory bufferFactory, @Nullable SignatureInfo signatureInfo) throws IOException, SecurityException, NoSuchAlgorithmException, DigestException",
    "returnType" : "VerityResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void generateApkVerityFooter(@NonNull RandomAccessFile apk, @NonNull SignatureInfo signatureInfo, @NonNull ByteBuffer footerOutput) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static byte[] generateFsVerityRootHash(@NonNull String apkPath, byte[] salt, @NonNull ByteBufferFactory bufferFactory) throws IOException, NoSuchAlgorithmException, DigestException",
    "returnType" : "byte[]",
    "comment" : "\n     * Generates the fs-verity hash tree. It is the actual verity tree format on disk, as is\n     * re-generated on device.\n     *\n     * The tree is built bottom up. The bottom level has 256-bit digest for each 4 KB block in the\n     * input file.  If the total size is larger than 4 KB, take this level as input and repeat the\n     * same procedure, until the level is within 4 KB.  If salt is given, it will apply to each\n     * digestion before the actual data.\n     *\n     * The returned root hash is calculated from the last level of 4 KB chunk, similarly with salt.\n     *\n     * @return the root hash of the generated hash tree.\n     ",
    "links" : [ ]
  }, {
    "name" : " static byte[] generateApkVerity(@NonNull String apkPath, @NonNull ByteBufferFactory bufferFactory, @NonNull SignatureInfo signatureInfo) throws IOException, SignatureNotFoundException, SecurityException, DigestException, NoSuchAlgorithmException",
    "returnType" : "byte[]",
    "comment" : "\n     * Generates the apk-verity header and hash tree to be used by kernel for the given apk. This\n     * method does not check whether the root hash exists in the Signing Block or not.\n     *\n     * <p>The output is stored in the {@link ByteBuffer} created by the given {@link\n     * ByteBufferFactory}.\n     *\n     * @return the root hash of the generated hash tree.\n     ",
    "links" : [ "android.util.apk.ByteBufferFactory", "java.nio.ByteBuffer" ]
  }, {
    "name" : "private static void consumeByChunk(DataDigester digester, DataSource source, int chunkSize) throws IOException, DigestException",
    "returnType" : "void",
    "comment" : "\n     * Digest the source by chunk in the given range.  If the last chunk is not a full chunk,\n     * digest the remaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void generateFsVerityDigestAtLeafLevel(RandomAccessFile file, @Nullable byte[] salt, ByteBuffer output) throws IOException, NoSuchAlgorithmException, DigestException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void generateApkVerityDigestAtLeafLevel(RandomAccessFile apk, SignatureInfo signatureInfo, byte[] salt, ByteBuffer output) throws IOException, NoSuchAlgorithmException, DigestException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static byte[] generateFsVerityTreeInternal(@NonNull RandomAccessFile apk, @Nullable byte[] salt, @NonNull int[] levelOffset, @NonNull ByteBuffer output) throws IOException, NoSuchAlgorithmException, DigestException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static byte[] generateVerityTreeInternal(@NonNull RandomAccessFile apk, @Nullable SignatureInfo signatureInfo, @Nullable byte[] salt, @NonNull int[] levelOffset, @NonNull ByteBuffer output) throws IOException, NoSuchAlgorithmException, DigestException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ByteBuffer generateApkVerityHeader(ByteBuffer buffer, long fileSize, byte[] salt)",
    "returnType" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ByteBuffer generateApkVerityExtensions(ByteBuffer buffer, long signingBlockOffset, long signingBlockSize, long eocdOffset)",
    "returnType" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int[] calculateVerityLevelOffset(long fileSize)",
    "returnType" : "int[]",
    "comment" : "\n     * Returns an array of summed area table of level size in the verity tree.  In other words, the\n     * returned array is offset of each level in the verity tree file format, plus an additional\n     * offset of the next non-existing level (i.e. end of the last level + 1).  Thus the array size\n     * is level + 1.  Thus, the returned array is guarantee to have at least 2 elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void assertSigningBlockAlignedAndHasFullPages(@NonNull SignatureInfo signatureInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ByteBuffer slice(ByteBuffer buffer, int begin, int end)",
    "returnType" : "ByteBuffer",
    "comment" : " Returns a slice of the buffer which shares content with the provided buffer. ",
    "links" : [ ]
  }, {
    "name" : "private static void skip(ByteBuffer buffer, int bytes)",
    "returnType" : "void",
    "comment" : " Skip the {@code ByteBuffer} position by {@code bytes}. ",
    "links" : [ ]
  }, {
    "name" : "private static long divideRoundup(long dividend, long divisor)",
    "returnType" : "long",
    "comment" : " Divides a number and round up to the closest integer. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static VerityResult generateApkVerityTree(@NonNull RandomAccessFile apk, @Nullable SignatureInfo signatureInfo, @NonNull ByteBufferFactory bufferFactory) throws IOException, SecurityException, NoSuchAlgorithmException, DigestException", "private static VerityResult generateVerityTreeInternal(@NonNull RandomAccessFile apk, @NonNull ByteBufferFactory bufferFactory, @Nullable SignatureInfo signatureInfo) throws IOException, SecurityException, NoSuchAlgorithmException, DigestException", " static void generateApkVerityFooter(@NonNull RandomAccessFile apk, @NonNull SignatureInfo signatureInfo, @NonNull ByteBuffer footerOutput) throws IOException", "public static byte[] generateFsVerityRootHash(@NonNull String apkPath, byte[] salt, @NonNull ByteBufferFactory bufferFactory) throws IOException, NoSuchAlgorithmException, DigestException", " static byte[] generateApkVerity(@NonNull String apkPath, @NonNull ByteBufferFactory bufferFactory, @NonNull SignatureInfo signatureInfo) throws IOException, SignatureNotFoundException, SecurityException, DigestException, NoSuchAlgorithmException", "private static void consumeByChunk(DataDigester digester, DataSource source, int chunkSize) throws IOException, DigestException", "private static void generateFsVerityDigestAtLeafLevel(RandomAccessFile file, @Nullable byte[] salt, ByteBuffer output) throws IOException, NoSuchAlgorithmException, DigestException", "private static void generateApkVerityDigestAtLeafLevel(RandomAccessFile apk, SignatureInfo signatureInfo, byte[] salt, ByteBuffer output) throws IOException, NoSuchAlgorithmException, DigestException", "private static byte[] generateFsVerityTreeInternal(@NonNull RandomAccessFile apk, @Nullable byte[] salt, @NonNull int[] levelOffset, @NonNull ByteBuffer output) throws IOException, NoSuchAlgorithmException, DigestException", "private static byte[] generateVerityTreeInternal(@NonNull RandomAccessFile apk, @Nullable SignatureInfo signatureInfo, @Nullable byte[] salt, @NonNull int[] levelOffset, @NonNull ByteBuffer output) throws IOException, NoSuchAlgorithmException, DigestException", "private static ByteBuffer generateApkVerityHeader(ByteBuffer buffer, long fileSize, byte[] salt)", "private static ByteBuffer generateApkVerityExtensions(ByteBuffer buffer, long signingBlockOffset, long signingBlockSize, long eocdOffset)", "private static int[] calculateVerityLevelOffset(long fileSize)", "private static void assertSigningBlockAlignedAndHasFullPages(@NonNull SignatureInfo signatureInfo)", "private static ByteBuffer slice(ByteBuffer buffer, int begin, int end)", "private static void skip(ByteBuffer buffer, int bytes)", "private static long divideRoundup(long dividend, long divisor)" ],
  "variableNames" : [ "CHUNK_SIZE_BYTES", "DIGEST_SIZE_BYTES", "FSVERITY_HEADER_SIZE_BYTES", "ZIP_EOCD_CENTRAL_DIR_OFFSET_FIELD_SIZE", "ZIP_EOCD_CENTRAL_DIR_OFFSET_FIELD_OFFSET", "JCA_DIGEST_ALGORITHM", "DEFAULT_SALT", "MMAP_REGION_SIZE_BYTES" ]
}