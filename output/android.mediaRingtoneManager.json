{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/RingtoneManager.java",
  "packageName" : "android.media",
  "className" : "RingtoneManager",
  "comment" : "\n * RingtoneManager provides access to ringtones, notification, and other types\n * of sounds. It manages querying the different media providers and combines the\n * results into a single cursor. It also provides a {@link Ringtone} for each\n * ringtone. We generically call these sounds ringtones, however the\n * {@link #TYPE_RINGTONE} refers to the type of sounds that are suitable for the\n * phone ringer.\n * <p>\n * To show a ringtone picker to the user, use the\n * {@link #ACTION_RINGTONE_PICKER} intent to launch the picker as a subactivity.\n * \n * @see Ringtone\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_RINGTONE",
    "type" : "int",
    "comment" : "\n     * Type that refers to sounds that are used for the phone ringer.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_NOTIFICATION",
    "type" : "int",
    "comment" : "\n     * Type that refers to sounds that are used for notifications.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ALARM",
    "type" : "int",
    "comment" : "\n     * Type that refers to sounds that are used for the alarm.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ALL",
    "type" : "int",
    "comment" : "\n     * All types of sounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RINGTONE_PICKER",
    "type" : "String",
    "comment" : "\n     * Activity Action: Shows a ringtone picker.\n     * <p>\n     * Input: {@link #EXTRA_RINGTONE_EXISTING_URI},\n     * {@link #EXTRA_RINGTONE_SHOW_DEFAULT},\n     * {@link #EXTRA_RINGTONE_SHOW_SILENT}, {@link #EXTRA_RINGTONE_TYPE},\n     * {@link #EXTRA_RINGTONE_DEFAULT_URI}, {@link #EXTRA_RINGTONE_TITLE},\n     * <p>\n     * Output: {@link #EXTRA_RINGTONE_PICKED_URI}.\n     ",
    "links" : [ "#EXTRA_RINGTONE_EXISTING_URI", "#EXTRA_RINGTONE_SHOW_DEFAULT", "#EXTRA_RINGTONE_SHOW_SILENT", "#EXTRA_RINGTONE_TYPE", "#EXTRA_RINGTONE_DEFAULT_URI", "#EXTRA_RINGTONE_TITLE", "#EXTRA_RINGTONE_PICKED_URI" ]
  }, {
    "name" : "EXTRA_RINGTONE_SHOW_DEFAULT",
    "type" : "String",
    "comment" : "\n     * Given to the ringtone picker as a boolean. Whether to show an item for\n     * \"Default\".\n     * \n     * @see #ACTION_RINGTONE_PICKER\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RINGTONE_SHOW_SILENT",
    "type" : "String",
    "comment" : "\n     * Given to the ringtone picker as a boolean. Whether to show an item for\n     * \"Silent\". If the \"Silent\" item is picked,\n     * {@link #EXTRA_RINGTONE_PICKED_URI} will be null.\n     * \n     * @see #ACTION_RINGTONE_PICKER\n     ",
    "links" : [ "#EXTRA_RINGTONE_PICKED_URI" ]
  }, {
    "name" : "EXTRA_RINGTONE_INCLUDE_DRM",
    "type" : "String",
    "comment" : "\n     * Given to the ringtone picker as a boolean. Whether to include DRM ringtones.\n     * @deprecated DRM ringtones are no longer supported\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RINGTONE_EXISTING_URI",
    "type" : "String",
    "comment" : "\n     * Given to the ringtone picker as a {@link Uri}. The {@link Uri} of the\n     * current ringtone, which will be used to show a checkmark next to the item\n     * for this {@link Uri}. If showing an item for \"Default\" (@see\n     * {@link #EXTRA_RINGTONE_SHOW_DEFAULT}), this can also be one of\n     * {@link System#DEFAULT_RINGTONE_URI},\n     * {@link System#DEFAULT_NOTIFICATION_URI}, or\n     * {@link System#DEFAULT_ALARM_ALERT_URI} to have the \"Default\" item\n     * checked.\n     * \n     * @see #ACTION_RINGTONE_PICKER\n     ",
    "links" : [ "Uri", "Uri", "Uri", "#EXTRA_RINGTONE_SHOW_DEFAULT", "System#DEFAULT_RINGTONE_URI", "System#DEFAULT_NOTIFICATION_URI", "System#DEFAULT_ALARM_ALERT_URI" ]
  }, {
    "name" : "EXTRA_RINGTONE_DEFAULT_URI",
    "type" : "String",
    "comment" : "\n     * Given to the ringtone picker as a {@link Uri}. The {@link Uri} of the\n     * ringtone to play when the user attempts to preview the \"Default\"\n     * ringtone. This can be one of {@link System#DEFAULT_RINGTONE_URI},\n     * {@link System#DEFAULT_NOTIFICATION_URI}, or\n     * {@link System#DEFAULT_ALARM_ALERT_URI} to have the \"Default\" point to\n     * the current sound for the given default sound type. If you are showing a\n     * ringtone picker for some other type of sound, you are free to provide any\n     * {@link Uri} here.\n     ",
    "links" : [ "Uri", "Uri", "System#DEFAULT_RINGTONE_URI", "System#DEFAULT_NOTIFICATION_URI", "System#DEFAULT_ALARM_ALERT_URI", "Uri" ]
  }, {
    "name" : "EXTRA_RINGTONE_TYPE",
    "type" : "String",
    "comment" : "\n     * Given to the ringtone picker as an int. Specifies which ringtone type(s) should be\n     * shown in the picker. One or more of {@link #TYPE_RINGTONE},\n     * {@link #TYPE_NOTIFICATION}, {@link #TYPE_ALARM}, or {@link #TYPE_ALL}\n     * (bitwise-ored together).\n     ",
    "links" : [ "#TYPE_RINGTONE", "#TYPE_NOTIFICATION", "#TYPE_ALARM", "#TYPE_ALL" ]
  }, {
    "name" : "EXTRA_RINGTONE_TITLE",
    "type" : "String",
    "comment" : "\n     * Given to the ringtone picker as a {@link CharSequence}. The title to\n     * show for the ringtone picker. This has a default value that is suitable\n     * in most cases.\n     ",
    "links" : [ "CharSequence" ]
  }, {
    "name" : "EXTRA_RINGTONE_AUDIO_ATTRIBUTES_FLAGS",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Given to the ringtone picker as an int. Additional AudioAttributes flags to use\n     * when playing the ringtone in the picker.\n     * @see #ACTION_RINGTONE_PICKER\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RINGTONE_PICKED_URI",
    "type" : "String",
    "comment" : "\n     * Returned from the ringtone picker as a {@link Uri}.\n     * <p>\n     * It will be one of:\n     * <li> the picked ringtone,\n     * <li> a {@link Uri} that equals {@link System#DEFAULT_RINGTONE_URI},\n     * {@link System#DEFAULT_NOTIFICATION_URI}, or\n     * {@link System#DEFAULT_ALARM_ALERT_URI} if the default was chosen,\n     * <li> null if the \"Silent\" item was picked.\n     * \n     * @see #ACTION_RINGTONE_PICKER\n     ",
    "links" : [ "Uri", "Uri", "System#DEFAULT_RINGTONE_URI", "System#DEFAULT_NOTIFICATION_URI", "System#DEFAULT_ALARM_ALERT_URI" ]
  }, {
    "name" : "INTERNAL_COLUMNS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEDIA_COLUMNS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_COLUMN_INDEX",
    "type" : "int",
    "comment" : "\n     * The column index (in the cursor returned by {@link #getCursor()} for the\n     * row ID.\n     ",
    "links" : [ "#getCursor" ]
  }, {
    "name" : "TITLE_COLUMN_INDEX",
    "type" : "int",
    "comment" : "\n     * The column index (in the cursor returned by {@link #getCursor()} for the\n     * title.\n     ",
    "links" : [ "#getCursor" ]
  }, {
    "name" : "URI_COLUMN_INDEX",
    "type" : "int",
    "comment" : "\n     * The column index (in the cursor returned by {@link #getCursor()} for the\n     * media provider's URI.\n     ",
    "links" : [ "#getCursor" ]
  }, {
    "name" : "mActivity",
    "type" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCursor",
    "type" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilterColumns",
    "type" : "List<String>",
    "comment" : "\n     * If a column (item from this list) exists in the Cursor, its value must\n     * be true (value of 1) for the row to be returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStopPreviousRingtone",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviousRingtone",
    "type" : "Ringtone",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludeParentRingtones",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setType(int type)",
    "returnType" : "void",
    "comment" : "\n     * Sets which type(s) of ringtones will be listed by this.\n     * \n     * @param type The type(s), one or more of {@link #TYPE_RINGTONE},\n     *            {@link #TYPE_NOTIFICATION}, {@link #TYPE_ALARM},\n     *            {@link #TYPE_ALL}.\n     * @see #EXTRA_RINGTONE_TYPE           \n     ",
    "links" : [ "#TYPE_RINGTONE", "#TYPE_NOTIFICATION", "#TYPE_ALARM", "#TYPE_ALL" ]
  }, {
    "name" : "public int inferStreamType()",
    "returnType" : "int",
    "comment" : "\n     * Infers the volume stream type based on what type of ringtones this\n     * manager is returning.\n     * \n     * @return The stream type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStopPreviousRingtone(boolean stopPreviousRingtone)",
    "returnType" : "void",
    "comment" : "\n     * Whether retrieving another {@link Ringtone} will stop playing the\n     * previously retrieved {@link Ringtone}.\n     * <p>\n     * If this is false, make sure to {@link Ringtone#stop()} any previous\n     * ringtones to free resources.\n     * \n     * @param stopPreviousRingtone If true, the previously retrieved\n     *            {@link Ringtone} will be stopped.\n     ",
    "links" : [ "Ringtone", "Ringtone", "Ringtone#stop", "Ringtone" ]
  }, {
    "name" : "public boolean getStopPreviousRingtone()",
    "returnType" : "boolean",
    "comment" : "\n     * @see #setStopPreviousRingtone(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopPreviousRingtone()",
    "returnType" : "void",
    "comment" : "\n     * Stops playing the last {@link Ringtone} retrieved from this.\n     ",
    "links" : [ "Ringtone" ]
  }, {
    "name" : "public boolean getIncludeDrm()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether DRM ringtones will be included.\n     * \n     * @return Whether DRM ringtones will be included.\n     * @see #setIncludeDrm(boolean)\n     * Obsolete - always returns false\n     * @deprecated DRM ringtones are no longer supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIncludeDrm(boolean includeDrm)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether to include DRM ringtones.\n     * \n     * @param includeDrm Whether to include DRM ringtones.\n     * Obsolete - no longer has any effect\n     * @deprecated DRM ringtones are no longer supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor getCursor()",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns a {@link Cursor} of all the ringtones available. The returned\n     * cursor will be the same cursor returned each time this method is called,\n     * so do not {@link Cursor#close()} the cursor. The cursor can be\n     * {@link Cursor#deactivate()} safely.\n     * <p>\n     * If {@link RingtoneManager#RingtoneManager(Activity)} was not used, the\n     * caller should manage the returned cursor through its activity's life\n     * cycle to prevent leaking the cursor.\n     * <p>\n     * Note that the list of ringtones available will differ depending on whether the caller\n     * has the {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} permission.\n     *\n     * @return A {@link Cursor} of all the ringtones available.\n     * @see #ID_COLUMN_INDEX\n     * @see #TITLE_COLUMN_INDEX\n     * @see #URI_COLUMN_INDEX\n     ",
    "links" : [ "Cursor", "Cursor#close", "Cursor#deactivate", "RingtoneManager#RingtoneManager", "android.Manifest.permission#READ_EXTERNAL_STORAGE", "Cursor" ]
  }, {
    "name" : "private Cursor getParentProfileRingtones()",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Ringtone getRingtone(int position)",
    "returnType" : "Ringtone",
    "comment" : "\n     * Gets a {@link Ringtone} for the ringtone at the given position in the\n     * {@link Cursor}.\n     * \n     * @param position The position (in the {@link Cursor}) of the ringtone.\n     * @return A {@link Ringtone} pointing to the ringtone.\n     ",
    "links" : [ "Ringtone", "Cursor", "Cursor", "Ringtone" ]
  }, {
    "name" : "public Uri getRingtoneUri(int position)",
    "returnType" : "Uri",
    "comment" : "\n     * Gets a {@link Uri} for the ringtone at the given position in the {@link Cursor}.\n     * \n     * @param position The position (in the {@link Cursor}) of the ringtone.\n     * @return A {@link Uri} pointing to the ringtone.\n     ",
    "links" : [ "Uri", "Cursor", "Cursor", "Uri" ]
  }, {
    "name" : "private static Uri getUriFromCursor(Context context, Cursor cursor)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getRingtonePosition(Uri ringtoneUri)",
    "returnType" : "int",
    "comment" : "\n     * Gets the position of a {@link Uri} within this {@link RingtoneManager}.\n     * \n     * @param ringtoneUri The {@link Uri} to retreive the position of.\n     * @return The position of the {@link Uri}, or -1 if it cannot be found.\n     ",
    "links" : [ "Uri", "RingtoneManager", "Uri", "Uri" ]
  }, {
    "name" : "public static Uri getValidRingtoneUri(Context context)",
    "returnType" : "Uri",
    "comment" : "\n     * Returns a valid ringtone URI. No guarantees on which it returns. If it\n     * cannot find one, returns null. If it can only find one on external storage and the caller\n     * doesn't have the {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} permission,\n     * returns null.\n     *\n     * @param context The context to use for querying.\n     * @return A ringtone URI, or null if one cannot be found.\n     ",
    "links" : [ "android.Manifest.permission#READ_EXTERNAL_STORAGE" ]
  }, {
    "name" : "private static Uri getValidRingtoneUriFromCursorAndClose(Context context, Cursor cursor)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Cursor getInternalRingtones()",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Cursor getMediaRingtones()",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Cursor getMediaRingtones(Context context)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setFilterColumnsList(int type)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String constructBooleanTrueWhereClause(List<String> columns)",
    "returnType" : "String",
    "comment" : "\n     * Constructs a where clause that consists of at least one column being 1\n     * (true). This is used to find all matching sounds for the given sound\n     * types (ringtone, notifications, etc.)\n     * \n     * @param columns The columns that must be true.\n     * @return The where clause.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, Context context)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Ringtone getRingtone(final Context context, Uri ringtoneUri)",
    "returnType" : "Ringtone",
    "comment" : "\n     * Returns a {@link Ringtone} for a given sound URI.\n     * <p>\n     * If the given URI cannot be opened for any reason, this method will\n     * attempt to fallback on another sound. If it cannot find any, it will\n     * return null.\n     * \n     * @param context A context used to query.\n     * @param ringtoneUri The {@link Uri} of a sound or ringtone.\n     * @return A {@link Ringtone} for the given URI, or null.\n     ",
    "links" : [ "Ringtone", "Uri", "Ringtone" ]
  }, {
    "name" : "public static Ringtone getRingtone(final Context context, Uri ringtoneUri, @Nullable VolumeShaper.Configuration volumeShaperConfig)",
    "returnType" : "Ringtone",
    "comment" : "\n     * Returns a {@link Ringtone} with {@link VolumeShaper} if required for a given sound URI.\n     * <p>\n     * If the given URI cannot be opened for any reason, this method will\n     * attempt to fallback on another sound. If it cannot find any, it will\n     * return null.\n     *\n     * @param context A context used to query.\n     * @param ringtoneUri The {@link Uri} of a sound or ringtone.\n     * @param volumeShaperConfig config for volume shaper of the ringtone if applied.\n     * @return A {@link Ringtone} for the given URI, or null.\n     *\n     * @hide\n     ",
    "links" : [ "Ringtone", "VolumeShaper", "Uri", "Ringtone" ]
  }, {
    "name" : "private static Ringtone getRingtone(final Context context, Uri ringtoneUri, int streamType)",
    "returnType" : "Ringtone",
    "comment" : "\n     * Returns a {@link Ringtone} for a given sound URI on the given stream\n     * type. Normally, if you change the stream type on the returned\n     * {@link Ringtone}, it will re-create the {@link MediaPlayer}. This is just\n     * an optimized route to avoid that.\n     * \n     * @param streamType The stream type for the ringtone, or -1 if it should\n     *            not be set (and the default used instead).\n     * @see #getRingtone(Context, Uri)\n     ",
    "links" : [ "Ringtone", "Ringtone", "MediaPlayer" ]
  }, {
    "name" : "private static Ringtone getRingtone(final Context context, Uri ringtoneUri, int streamType, @Nullable VolumeShaper.Configuration volumeShaperConfig)",
    "returnType" : "Ringtone",
    "comment" : "\n     * Returns a {@link Ringtone} with {@link VolumeShaper} if required for a given sound URI on\n     * the given stream type. Normally, if you change the stream type on the returned\n     * {@link Ringtone}, it will re-create the {@link MediaPlayer}. This is just\n     * an optimized route to avoid that.\n     *\n     * @param streamType The stream type for the ringtone, or -1 if it should\n     *            not be set (and the default used instead).\n     * @param volumeShaperConfig config for volume shaper of the ringtone if applied.\n     * @see #getRingtone(Context, Uri)\n     ",
    "links" : [ "Ringtone", "VolumeShaper", "Ringtone", "MediaPlayer" ]
  }, {
    "name" : "public static void disableSyncFromParent(Context userContext)",
    "returnType" : "void",
    "comment" : "\n     * Disables Settings.System.SYNC_PARENT_SOUNDS.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void enableSyncFromParent(Context userContext)",
    "returnType" : "void",
    "comment" : "\n     * Enables Settings.System.SYNC_PARENT_SOUNDS for the content's user\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri getActualDefaultRingtoneUri(Context context, int type)",
    "returnType" : "Uri",
    "comment" : "\n     * Gets the current default sound's {@link Uri}. This will give the actual\n     * sound {@link Uri}, instead of using this, most clients can use\n     * {@link System#DEFAULT_RINGTONE_URI}.\n     * \n     * @param context A context used for querying.\n     * @param type The type whose default sound should be returned. One of\n     *            {@link #TYPE_RINGTONE}, {@link #TYPE_NOTIFICATION}, or\n     *            {@link #TYPE_ALARM}.\n     * @return A {@link Uri} pointing to the default sound for the sound type.\n     * @see #setActualDefaultRingtoneUri(Context, int, Uri)\n     ",
    "links" : [ "Uri", "Uri", "System#DEFAULT_RINGTONE_URI", "#TYPE_RINGTONE", "#TYPE_NOTIFICATION", "#TYPE_ALARM", "Uri" ]
  }, {
    "name" : "public static void setActualDefaultRingtoneUri(Context context, int type, Uri ringtoneUri)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link Uri} of the default sound for a given sound type.\n     * \n     * @param context A context used for querying.\n     * @param type The type whose default sound should be set. One of\n     *            {@link #TYPE_RINGTONE}, {@link #TYPE_NOTIFICATION}, or\n     *            {@link #TYPE_ALARM}.\n     * @param ringtoneUri A {@link Uri} pointing to the default sound to set.\n     * @see #getActualDefaultRingtoneUri(Context, int)\n     ",
    "links" : [ "Uri", "#TYPE_RINGTONE", "#TYPE_NOTIFICATION", "#TYPE_ALARM", "Uri" ]
  }, {
    "name" : "private static boolean isInternalRingtoneUri(Uri uri)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isExternalRingtoneUri(Uri uri)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isRingtoneUriInStorage(Uri ringtone, Uri storage)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri addCustomExternalRingtone(@NonNull final Uri fileUri, final int type) throws FileNotFoundException, IllegalArgumentException, IOException",
    "returnType" : "Uri",
    "comment" : "\n     * Adds an audio file to the list of ringtones.\n     *\n     * After making sure the given file is an audio file, copies the file to the ringtone storage,\n     * and asks the system to scan that file. This call will block until\n     * the scan is completed.\n     *\n     * The directory where the copied file is stored is the directory that matches the ringtone's\n     * type, which is one of: {@link android.is.Environment#DIRECTORY_RINGTONES};\n     * {@link android.is.Environment#DIRECTORY_NOTIFICATIONS};\n     * {@link android.is.Environment#DIRECTORY_ALARMS}.\n     *\n     * This does not allow modifying the type of an existing ringtone file. To change type, use the\n     * APIs in {@link android.content.ContentResolver} to update the corresponding columns.\n     *\n     * @param fileUri Uri of the file to be added as ringtone. Must be a media file.\n     * @param type The type of the ringtone to be added. Must be one of {@link #TYPE_RINGTONE},\n     *            {@link #TYPE_NOTIFICATION}, or {@link #TYPE_ALARM}.\n     *\n     * @return The Uri of the installed ringtone, which may be the Uri of {@param fileUri} if it is\n     *         already in ringtone storage.\n     *\n     * @throws FileNotFoundexception if an appropriate unique filename to save the new ringtone file\n     *         as cannot be found, for example if the unique name is too long.\n     * @throws IllegalArgumentException if {@param fileUri} does not point to an existing audio\n     *         file, or if the {@param type} is not one of the accepted ringtone types.\n     * @throws IOException if the audio file failed to copy to ringtone storage; for example, if\n     *         external storage was not available, or if the file was copied but the media scanner\n     *         did not recognize it as a ringtone.\n     *\n     * @hide\n     ",
    "links" : [ "android.is.Environment#DIRECTORY_RINGTONES", "android.is.Environment#DIRECTORY_NOTIFICATIONS", "android.is.Environment#DIRECTORY_ALARMS", "android.content.ContentResolver", "#TYPE_RINGTONE", "#TYPE_NOTIFICATION", "#TYPE_ALARM" ]
  }, {
    "name" : "private static final String getExternalDirectoryForType(final int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static InputStream openRingtone(Context context, Uri uri) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Try opening the given ringtone locally first, but failover to\n     * {@link IRingtonePlayer} if we can't access it directly. Typically happens\n     * when process doesn't hold\n     * {@link android.Manifest.permission#READ_EXTERNAL_STORAGE}.\n     ",
    "links" : [ "IRingtonePlayer", "android.Manifest.permission#READ_EXTERNAL_STORAGE" ]
  }, {
    "name" : "private static String getSettingForType(int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Uri getCacheForType(int type)",
    "returnType" : "Uri",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static Uri getCacheForType(int type, int userId)",
    "returnType" : "Uri",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDefault(Uri ringtoneUri)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given {@link Uri} is one of the default ringtones.\n     * \n     * @param ringtoneUri The ringtone {@link Uri} to be checked.\n     * @return Whether the {@link Uri} is a default.\n     ",
    "links" : [ "Uri", "Uri", "Uri" ]
  }, {
    "name" : "public static int getDefaultType(Uri defaultRingtoneUri)",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of a default {@link Uri}.\n     * \n     * @param defaultRingtoneUri The default {@link Uri}. For example,\n     *            {@link System#DEFAULT_RINGTONE_URI},\n     *            {@link System#DEFAULT_NOTIFICATION_URI}, or\n     *            {@link System#DEFAULT_ALARM_ALERT_URI}.\n     * @return The type of the defaultRingtoneUri, or -1.\n     ",
    "links" : [ "Uri", "Uri", "System#DEFAULT_RINGTONE_URI", "System#DEFAULT_NOTIFICATION_URI", "System#DEFAULT_ALARM_ALERT_URI" ]
  }, {
    "name" : "public static Uri getDefaultUri(int type)",
    "returnType" : "Uri",
    "comment" : "\n     * Returns the {@link Uri} for the default ringtone of a particular type.\n     * Rather than returning the actual ringtone's sound {@link Uri}, this will\n     * return the symbolic {@link Uri} which will resolved to the actual sound\n     * when played.\n     * \n     * @param type The ringtone type whose default should be returned.\n     * @return The {@link Uri} of the default ringtone for the given type.\n     ",
    "links" : [ "Uri", "Uri", "Uri", "Uri" ]
  }, {
    "name" : "public static AssetFileDescriptor openDefaultRingtoneUri(@NonNull Context context, @NonNull Uri uri) throws FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * Opens a raw file descriptor to read the data under the given default URI.\n     *\n     * @param context the Context to use when resolving the Uri.\n     * @param uri The desired default URI to open.\n     * @return a new AssetFileDescriptor pointing to the file. You own this descriptor\n     * and are responsible for closing it when done. This value may be {@code null}.\n     * @throws FileNotFoundException if the provided URI could not be opened.\n     * @see #getDefaultUri\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasHapticChannels(int position)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the {@link Ringtone} at the given position in the\n     * {@link Cursor} contains haptic channels.\n     *\n     * @param position The position (in the {@link Cursor}) of the ringtone.\n     * @return true if the ringtone contains haptic channels.\n     ",
    "links" : [ "Ringtone", "Cursor", "Cursor" ]
  }, {
    "name" : "public static boolean hasHapticChannels(@NonNull Uri ringtoneUri)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the {@link Ringtone} from a given sound URI contains\n     * haptic channels or not.\n     *\n     * @param ringtoneUri The {@link Uri} of a sound or ringtone.\n     * @return true if the ringtone contains haptic channels.\n     ",
    "links" : [ "Ringtone", "Uri" ]
  }, {
    "name" : "private static Context createPackageContextAsUser(Context context, int userId)",
    "returnType" : "Context",
    "comment" : "\n     * Attempts to create a context for the given user.\n     *\n     * @return created context, or null if package does not exist\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void ensureDefaultRingtones(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "\n     * Ensure that ringtones have been set at least once on this device. This\n     * should be called after the device has finished scanned all media on\n     * {@link MediaStore#VOLUME_INTERNAL}, so that default ringtones can be\n     * configured.\n     *\n     * @hide\n     ",
    "links" : [ "MediaStore#VOLUME_INTERNAL" ]
  }, {
    "name" : "private static String getDefaultRingtoneSetting(int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getDefaultRingtoneFilename(int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "TYPE_RINGTONE", "TYPE_NOTIFICATION", "TYPE_ALARM", "TYPE_ALL", "ACTION_RINGTONE_PICKER", "EXTRA_RINGTONE_SHOW_DEFAULT", "EXTRA_RINGTONE_SHOW_SILENT", "EXTRA_RINGTONE_INCLUDE_DRM", "EXTRA_RINGTONE_EXISTING_URI", "EXTRA_RINGTONE_DEFAULT_URI", "EXTRA_RINGTONE_TYPE", "EXTRA_RINGTONE_TITLE", "EXTRA_RINGTONE_AUDIO_ATTRIBUTES_FLAGS", "EXTRA_RINGTONE_PICKED_URI", "INTERNAL_COLUMNS", "MEDIA_COLUMNS", "ID_COLUMN_INDEX", "TITLE_COLUMN_INDEX", "URI_COLUMN_INDEX", "mActivity", "mContext", "mCursor", "mType", "mFilterColumns", "mStopPreviousRingtone", "mPreviousRingtone", "mIncludeParentRingtones" ],
  "methodNames" : [ "public void setType(int type)", "public int inferStreamType()", "public void setStopPreviousRingtone(boolean stopPreviousRingtone)", "public boolean getStopPreviousRingtone()", "public void stopPreviousRingtone()", "public boolean getIncludeDrm()", "public void setIncludeDrm(boolean includeDrm)", "public Cursor getCursor()", "private Cursor getParentProfileRingtones()", "public Ringtone getRingtone(int position)", "public Uri getRingtoneUri(int position)", "private static Uri getUriFromCursor(Context context, Cursor cursor)", "public int getRingtonePosition(Uri ringtoneUri)", "public static Uri getValidRingtoneUri(Context context)", "private static Uri getValidRingtoneUriFromCursorAndClose(Context context, Cursor cursor)", "private Cursor getInternalRingtones()", "private Cursor getMediaRingtones()", "private Cursor getMediaRingtones(Context context)", "private void setFilterColumnsList(int type)", "private static String constructBooleanTrueWhereClause(List<String> columns)", "private Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)", "private Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, Context context)", "public static Ringtone getRingtone(final Context context, Uri ringtoneUri)", "public static Ringtone getRingtone(final Context context, Uri ringtoneUri, @Nullable VolumeShaper.Configuration volumeShaperConfig)", "private static Ringtone getRingtone(final Context context, Uri ringtoneUri, int streamType)", "private static Ringtone getRingtone(final Context context, Uri ringtoneUri, int streamType, @Nullable VolumeShaper.Configuration volumeShaperConfig)", "public static void disableSyncFromParent(Context userContext)", "public static void enableSyncFromParent(Context userContext)", "public static Uri getActualDefaultRingtoneUri(Context context, int type)", "public static void setActualDefaultRingtoneUri(Context context, int type, Uri ringtoneUri)", "private static boolean isInternalRingtoneUri(Uri uri)", "private static boolean isExternalRingtoneUri(Uri uri)", "private static boolean isRingtoneUriInStorage(Uri ringtone, Uri storage)", "public Uri addCustomExternalRingtone(@NonNull final Uri fileUri, final int type) throws FileNotFoundException, IllegalArgumentException, IOException", "private static final String getExternalDirectoryForType(final int type)", "private static InputStream openRingtone(Context context, Uri uri) throws IOException", "private static String getSettingForType(int type)", "public static Uri getCacheForType(int type)", "public static Uri getCacheForType(int type, int userId)", "public static boolean isDefault(Uri ringtoneUri)", "public static int getDefaultType(Uri defaultRingtoneUri)", "public static Uri getDefaultUri(int type)", "public static AssetFileDescriptor openDefaultRingtoneUri(@NonNull Context context, @NonNull Uri uri) throws FileNotFoundException", "public boolean hasHapticChannels(int position)", "public static boolean hasHapticChannels(@NonNull Uri ringtoneUri)", "private static Context createPackageContextAsUser(Context context, int userId)", "public static void ensureDefaultRingtones(@NonNull Context context)", "private static String getDefaultRingtoneSetting(int type)", "private static String getDefaultRingtoneFilename(int type)" ]
}