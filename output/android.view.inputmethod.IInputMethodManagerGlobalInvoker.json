{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/IInputMethodManagerGlobalInvoker.java",
  "packageName" : "android.view.inputmethod",
  "className" : "IInputMethodManagerGlobalInvoker",
  "comment" : "\n * A global wrapper to directly invoke {@link IInputMethodManager} IPCs.\n *\n * <p>All public static methods are guaranteed to be thread-safe.</p>\n *\n * <p>All public methods are guaranteed to do nothing when {@link IInputMethodManager} is\n * unavailable.</p>\n *\n * <p>If you want to use any of this method outside of {@code android.view.inputmethod}, create\n * a wrapper method in {@link InputMethodManagerGlobal} instead of making this class public.</p>\n ",
  "links" : [ "android.view.inputmethod.InputMethodManagerGlobal", "com.android.internal.view.IInputMethodManager" ],
  "variables" : [ {
    "name" : "sServiceCache",
    "type" : "IInputMethodManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTrackerServiceCache",
    "type" : "IImeTracker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCurStartInputSeq",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static boolean isAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if {@link IInputMethodManager} is available.\n     ",
    "links" : [ "com.android.internal.view.IInputMethodManager" ]
  }, {
    "name" : " static IInputMethodManager getService()",
    "returnType" : "IInputMethodManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void handleRemoteExceptionOrRethrow(@NonNull RemoteException e, @Nullable Consumer<RemoteException> exceptionHandler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void startProtoDump(byte[] protoDump, int source, String where, @Nullable Consumer<RemoteException> exceptionHandler)",
    "returnType" : "void",
    "comment" : "\n     * Invokes {@link IInputMethodManager#startProtoDump(byte[], int, String)}.\n     *\n     * @param protoDump client or service side information to be stored by the server\n     * @param source where the information is coming from, refer to\n     *               {@link com.android.internal.inputmethod.ImeTracing#IME_TRACING_FROM_CLIENT} and\n     *               {@link com.android.internal.inputmethod.ImeTracing#IME_TRACING_FROM_IMS}\n     * @param where where the information is coming from.\n     * @param exceptionHandler an optional {@link RemoteException} handler.\n     ",
    "links" : [ "com.android.internal.view.IInputMethodManager#startProtoDump(byte", "com.android.internal.inputmethod.ImeTracing#IME_TRACING_FROM_IMS", "android.os.RemoteException", "com.android.internal.inputmethod.ImeTracing#IME_TRACING_FROM_CLIENT" ]
  }, {
    "name" : " static void startImeTrace(@Nullable Consumer<RemoteException> exceptionHandler)",
    "returnType" : "void",
    "comment" : "\n     * Invokes {@link IInputMethodManager#startImeTrace()}.\n     *\n     * @param exceptionHandler an optional {@link RemoteException} handler.\n     ",
    "links" : [ "com.android.internal.view.IInputMethodManager#startImeTrace()", "android.os.RemoteException" ]
  }, {
    "name" : " static void stopImeTrace(@Nullable Consumer<RemoteException> exceptionHandler)",
    "returnType" : "void",
    "comment" : "\n     * Invokes {@link IInputMethodManager#stopImeTrace()}.\n     *\n     * @param exceptionHandler an optional {@link RemoteException} handler.\n     ",
    "links" : [ "com.android.internal.view.IInputMethodManager#stopImeTrace()", "android.os.RemoteException" ]
  }, {
    "name" : " static boolean isImeTraceEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IInputMethodManager#isImeTraceEnabled()}.\n     *\n     * @return The return value of {@link IInputMethodManager#isImeTraceEnabled()}.\n     ",
    "links" : [ "com.android.internal.view.IInputMethodManager#isImeTraceEnabled()" ]
  }, {
    "name" : " static void removeImeSurface(@Nullable Consumer<RemoteException> exceptionHandler)",
    "returnType" : "void",
    "comment" : "\n     * Invokes {@link IInputMethodManager#removeImeSurface()}\n     ",
    "links" : [ "com.android.internal.view.IInputMethodManager#removeImeSurface()" ]
  }, {
    "name" : " static void addClient(@NonNull IInputMethodClient client, @NonNull IRemoteInputConnection fallbackInputConnection, int untrustedDisplayId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static InputMethodInfo getCurrentInputMethodInfoAsUser(@UserIdInt int userId)",
    "returnType" : "InputMethodInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static List<InputMethodInfo> getInputMethodList(@UserIdInt int userId, @DirectBootAwareness int directBootAwareness)",
    "returnType" : "List<InputMethodInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static List<InputMethodInfo> getEnabledInputMethodList(@UserIdInt int userId)",
    "returnType" : "List<InputMethodInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static List<InputMethodSubtype> getEnabledInputMethodSubtypeList(@Nullable String imiId, boolean allowsImplicitlyEnabledSubtypes, @UserIdInt int userId)",
    "returnType" : "List<InputMethodSubtype>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static InputMethodSubtype getLastInputMethodSubtype(@UserIdInt int userId)",
    "returnType" : "InputMethodSubtype",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean showSoftInput(@NonNull IInputMethodClient client, @Nullable IBinder windowToken, @NonNull ImeTracker.Token statsToken, @InputMethodManager.ShowFlags int flags, int lastClickToolType, @Nullable ResultReceiver resultReceiver, @SoftInputShowHideReason int reason)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean hideSoftInput(@NonNull IInputMethodClient client, @Nullable IBinder windowToken, @NonNull ImeTracker.Token statsToken, @InputMethodManager.HideFlags int flags, @Nullable ResultReceiver resultReceiver, @SoftInputShowHideReason int reason)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void hideSoftInputFromServerForTest()",
    "returnType" : "void",
    "comment" : " TODO(b/293640003): Remove method once Flags.useZeroJankProxy() is enabled.",
    "links" : [ ]
  }, {
    "name" : " static InputBindResult startInputOrWindowGainedFocus(@StartInputReason int startInputReason, @NonNull IInputMethodClient client, @Nullable IBinder windowToken, @StartInputFlags int startInputFlags, @WindowManager.LayoutParams.SoftInputModeFlags int softInputMode, @WindowManager.LayoutParams.Flags int windowFlags, @Nullable EditorInfo editorInfo, @Nullable IRemoteInputConnection remoteInputConnection, @Nullable IRemoteAccessibilityInputConnection remoteAccessibilityInputConnection, int unverifiedTargetSdkVersion, @UserIdInt int userId, @NonNull ImeOnBackInvokedDispatcher imeDispatcher)",
    "returnType" : "InputBindResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int startInputOrWindowGainedFocusAsync(@StartInputReason int startInputReason, @NonNull IInputMethodClient client, @Nullable IBinder windowToken, @StartInputFlags int startInputFlags, @WindowManager.LayoutParams.SoftInputModeFlags int softInputMode, @WindowManager.LayoutParams.Flags int windowFlags, @Nullable EditorInfo editorInfo, @Nullable IRemoteInputConnection remoteInputConnection, @Nullable IRemoteAccessibilityInputConnection remoteAccessibilityInputConnection, int unverifiedTargetSdkVersion, @UserIdInt int userId, @NonNull ImeOnBackInvokedDispatcher imeDispatcher)",
    "returnType" : "int",
    "comment" : "\n     * Returns a sequence number for startInput.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int advanceAngGetStartInputSequenceNumber()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void showInputMethodPickerFromClient(@NonNull IInputMethodClient client, int auxiliarySubtypeMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void showInputMethodPickerFromSystem(int auxiliarySubtypeMode, int displayId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isInputMethodPickerShownForTest()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static InputMethodSubtype getCurrentInputMethodSubtype(@UserIdInt int userId)",
    "returnType" : "InputMethodSubtype",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void setAdditionalInputMethodSubtypes(@NonNull String imeId, @NonNull InputMethodSubtype[] subtypes, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void setExplicitlyEnabledInputMethodSubtypes(@NonNull String imeId, @NonNull int[] subtypeHashCodes, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int getInputMethodWindowVisibleHeight(@NonNull IInputMethodClient client)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void reportPerceptibleAsync(@NonNull IBinder windowToken, boolean perceptible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void removeImeSurfaceFromWindowAsync(@NonNull IBinder windowToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void startStylusHandwriting(@NonNull IInputMethodClient client)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean startConnectionlessStylusHandwriting(@NonNull IInputMethodClient client, @UserIdInt int userId, @Nullable CursorAnchorInfo cursorAnchorInfo, @Nullable String delegatePackageName, @Nullable String delegatorPackageName, @NonNull IConnectionlessHandwritingCallback callback)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void prepareStylusHandwritingDelegation(@NonNull IInputMethodClient client, @UserIdInt int userId, @NonNull String delegatePackageName, @NonNull String delegatorPackageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean acceptStylusHandwritingDelegation(@NonNull IInputMethodClient client, @UserIdInt int userId, @NonNull String delegatePackageName, @NonNull String delegatorPackageName, @InputMethodManager.HandwritingDelegateFlags int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean acceptStylusHandwritingDelegationAsync(@NonNull IInputMethodClient client, @UserIdInt int userId, @NonNull String delegatePackageName, @NonNull String delegatorPackageName, @InputMethodManager.HandwritingDelegateFlags int flags, @NonNull IBooleanListener callback)",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if method is invoked ",
    "links" : [ ]
  }, {
    "name" : " static boolean isStylusHandwritingAvailableAsUser(@UserIdInt int userId, boolean connectionless)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void addVirtualStylusIdForTestSession(IInputMethodClient client)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void setStylusWindowIdleTimeoutForTest(IInputMethodClient client, @DurationMillisLong long timeout)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static ImeTracker.Token onStart(@NonNull String tag, int uid, @ImeTracker.Type int type, @ImeTracker.Origin int origin, @SoftInputShowHideReason int reason, boolean fromUser)",
    "returnType" : "ImeTracker.Token",
    "comment" : " @see com.android.server.inputmethod.ImeTrackerService#onStart ",
    "links" : [ ]
  }, {
    "name" : " static void onProgress(@NonNull IBinder binder, @ImeTracker.Phase int phase)",
    "returnType" : "void",
    "comment" : " @see com.android.server.inputmethod.ImeTrackerService#onProgress ",
    "links" : [ ]
  }, {
    "name" : " static void onFailed(@NonNull ImeTracker.Token statsToken, @ImeTracker.Phase int phase)",
    "returnType" : "void",
    "comment" : " @see com.android.server.inputmethod.ImeTrackerService#onFailed ",
    "links" : [ ]
  }, {
    "name" : " static void onCancelled(@NonNull ImeTracker.Token statsToken, @ImeTracker.Phase int phase)",
    "returnType" : "void",
    "comment" : " @see com.android.server.inputmethod.ImeTrackerService#onCancelled ",
    "links" : [ ]
  }, {
    "name" : " static void onShown(@NonNull ImeTracker.Token statsToken)",
    "returnType" : "void",
    "comment" : " @see com.android.server.inputmethod.ImeTrackerService#onShown ",
    "links" : [ ]
  }, {
    "name" : " static void onHidden(@NonNull ImeTracker.Token statsToken)",
    "returnType" : "void",
    "comment" : " @see com.android.server.inputmethod.ImeTrackerService#onHidden ",
    "links" : [ ]
  }, {
    "name" : " static boolean hasPendingImeVisibilityRequests()",
    "returnType" : "boolean",
    "comment" : " @see com.android.server.inputmethod.ImeTrackerService#hasPendingImeVisibilityRequests ",
    "links" : [ ]
  }, {
    "name" : " static void finishTrackingPendingImeVisibilityRequests()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static IImeTracker getImeTrackerService()",
    "returnType" : "IImeTracker",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static boolean isAvailable()", " static IInputMethodManager getService()", "private static void handleRemoteExceptionOrRethrow(@NonNull RemoteException e, @Nullable Consumer<RemoteException> exceptionHandler)", " static void startProtoDump(byte[] protoDump, int source, String where, @Nullable Consumer<RemoteException> exceptionHandler)", " static void startImeTrace(@Nullable Consumer<RemoteException> exceptionHandler)", " static void stopImeTrace(@Nullable Consumer<RemoteException> exceptionHandler)", " static boolean isImeTraceEnabled()", " static void removeImeSurface(@Nullable Consumer<RemoteException> exceptionHandler)", " static void addClient(@NonNull IInputMethodClient client, @NonNull IRemoteInputConnection fallbackInputConnection, int untrustedDisplayId)", " static InputMethodInfo getCurrentInputMethodInfoAsUser(@UserIdInt int userId)", " static List<InputMethodInfo> getInputMethodList(@UserIdInt int userId, @DirectBootAwareness int directBootAwareness)", " static List<InputMethodInfo> getEnabledInputMethodList(@UserIdInt int userId)", " static List<InputMethodSubtype> getEnabledInputMethodSubtypeList(@Nullable String imiId, boolean allowsImplicitlyEnabledSubtypes, @UserIdInt int userId)", " static InputMethodSubtype getLastInputMethodSubtype(@UserIdInt int userId)", " static boolean showSoftInput(@NonNull IInputMethodClient client, @Nullable IBinder windowToken, @NonNull ImeTracker.Token statsToken, @InputMethodManager.ShowFlags int flags, int lastClickToolType, @Nullable ResultReceiver resultReceiver, @SoftInputShowHideReason int reason)", " static boolean hideSoftInput(@NonNull IInputMethodClient client, @Nullable IBinder windowToken, @NonNull ImeTracker.Token statsToken, @InputMethodManager.HideFlags int flags, @Nullable ResultReceiver resultReceiver, @SoftInputShowHideReason int reason)", " static void hideSoftInputFromServerForTest()", " static InputBindResult startInputOrWindowGainedFocus(@StartInputReason int startInputReason, @NonNull IInputMethodClient client, @Nullable IBinder windowToken, @StartInputFlags int startInputFlags, @WindowManager.LayoutParams.SoftInputModeFlags int softInputMode, @WindowManager.LayoutParams.Flags int windowFlags, @Nullable EditorInfo editorInfo, @Nullable IRemoteInputConnection remoteInputConnection, @Nullable IRemoteAccessibilityInputConnection remoteAccessibilityInputConnection, int unverifiedTargetSdkVersion, @UserIdInt int userId, @NonNull ImeOnBackInvokedDispatcher imeDispatcher)", " static int startInputOrWindowGainedFocusAsync(@StartInputReason int startInputReason, @NonNull IInputMethodClient client, @Nullable IBinder windowToken, @StartInputFlags int startInputFlags, @WindowManager.LayoutParams.SoftInputModeFlags int softInputMode, @WindowManager.LayoutParams.Flags int windowFlags, @Nullable EditorInfo editorInfo, @Nullable IRemoteInputConnection remoteInputConnection, @Nullable IRemoteAccessibilityInputConnection remoteAccessibilityInputConnection, int unverifiedTargetSdkVersion, @UserIdInt int userId, @NonNull ImeOnBackInvokedDispatcher imeDispatcher)", "private static int advanceAngGetStartInputSequenceNumber()", " static void showInputMethodPickerFromClient(@NonNull IInputMethodClient client, int auxiliarySubtypeMode)", " static void showInputMethodPickerFromSystem(int auxiliarySubtypeMode, int displayId)", " static boolean isInputMethodPickerShownForTest()", " static InputMethodSubtype getCurrentInputMethodSubtype(@UserIdInt int userId)", " static void setAdditionalInputMethodSubtypes(@NonNull String imeId, @NonNull InputMethodSubtype[] subtypes, @UserIdInt int userId)", " static void setExplicitlyEnabledInputMethodSubtypes(@NonNull String imeId, @NonNull int[] subtypeHashCodes, @UserIdInt int userId)", " static int getInputMethodWindowVisibleHeight(@NonNull IInputMethodClient client)", " static void reportPerceptibleAsync(@NonNull IBinder windowToken, boolean perceptible)", " static void removeImeSurfaceFromWindowAsync(@NonNull IBinder windowToken)", " static void startStylusHandwriting(@NonNull IInputMethodClient client)", " static boolean startConnectionlessStylusHandwriting(@NonNull IInputMethodClient client, @UserIdInt int userId, @Nullable CursorAnchorInfo cursorAnchorInfo, @Nullable String delegatePackageName, @Nullable String delegatorPackageName, @NonNull IConnectionlessHandwritingCallback callback)", " static void prepareStylusHandwritingDelegation(@NonNull IInputMethodClient client, @UserIdInt int userId, @NonNull String delegatePackageName, @NonNull String delegatorPackageName)", " static boolean acceptStylusHandwritingDelegation(@NonNull IInputMethodClient client, @UserIdInt int userId, @NonNull String delegatePackageName, @NonNull String delegatorPackageName, @InputMethodManager.HandwritingDelegateFlags int flags)", " static boolean acceptStylusHandwritingDelegationAsync(@NonNull IInputMethodClient client, @UserIdInt int userId, @NonNull String delegatePackageName, @NonNull String delegatorPackageName, @InputMethodManager.HandwritingDelegateFlags int flags, @NonNull IBooleanListener callback)", " static boolean isStylusHandwritingAvailableAsUser(@UserIdInt int userId, boolean connectionless)", " static void addVirtualStylusIdForTestSession(IInputMethodClient client)", " static void setStylusWindowIdleTimeoutForTest(IInputMethodClient client, @DurationMillisLong long timeout)", " static ImeTracker.Token onStart(@NonNull String tag, int uid, @ImeTracker.Type int type, @ImeTracker.Origin int origin, @SoftInputShowHideReason int reason, boolean fromUser)", " static void onProgress(@NonNull IBinder binder, @ImeTracker.Phase int phase)", " static void onFailed(@NonNull ImeTracker.Token statsToken, @ImeTracker.Phase int phase)", " static void onCancelled(@NonNull ImeTracker.Token statsToken, @ImeTracker.Phase int phase)", " static void onShown(@NonNull ImeTracker.Token statsToken)", " static void onHidden(@NonNull ImeTracker.Token statsToken)", " static boolean hasPendingImeVisibilityRequests()", " static void finishTrackingPendingImeVisibilityRequests()", "private static IImeTracker getImeTrackerService()" ],
  "variableNames" : [ "sServiceCache", "sTrackerServiceCache", "sCurStartInputSeq" ]
}