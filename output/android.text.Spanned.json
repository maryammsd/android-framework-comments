{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/Spanned.java",
  "packageName" : "android.text",
  "className" : "Spanned",
  "comment" : "\n * This is the interface for text that has markup objects attached to\n * ranges of it.  Not all text classes have mutable markup or text;\n * see {@link Spannable} for mutable markup and {@link Editable} for\n * mutable text.\n ",
  "links" : [ "android.text.Spannable", "android.text.Editable" ],
  "variables" : [ {
    "name" : "SPAN_POINT_MARK_MASK",
    "type" : "int",
    "comment" : "\n     * Bitmask of bits that are relevent for controlling point/mark behavior\n     * of spans.\n     *\n     * MARK and POINT are conceptually located <i>between</i> two adjacent characters.\n     * A MARK is \"attached\" to the character before, while a POINT will stick to the character\n     * after. The insertion cursor is conceptually located between the MARK and the POINT.\n     *\n     * As a result, inserting a new character between a MARK and a POINT will leave the MARK\n     * unchanged, while the POINT will be shifted, now located after the inserted character and\n     * still glued to the same character after it.\n     *\n     * Depending on whether the insertion happens at the beginning or the end of a span, the span\n     * will hence be expanded to <i>include</i> the new character (when the span is using a MARK at\n     * its beginning or a POINT at its end) or it will be <i>excluded</i>.\n     *\n     * Note that <i>before</i> and <i>after</i> here refer to offsets in the String, which are\n     * independent from the visual representation of the text (left-to-right or right-to-left).\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_MARK_MARK",
    "type" : "int",
    "comment" : "\n     * 0-length spans with type SPAN_MARK_MARK behave like text marks:\n     * they remain at their original offset when text is inserted\n     * at that offset. Conceptually, the text is added after the mark.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_MARK_POINT",
    "type" : "int",
    "comment" : "\n     * SPAN_MARK_POINT is a synonym for {@link #SPAN_INCLUSIVE_INCLUSIVE}.\n     ",
    "links" : [ "#SPAN_INCLUSIVE_INCLUSIVE" ]
  }, {
    "name" : "SPAN_POINT_MARK",
    "type" : "int",
    "comment" : "\n     * SPAN_POINT_MARK is a synonym for {@link #SPAN_EXCLUSIVE_EXCLUSIVE}.\n     ",
    "links" : [ "#SPAN_EXCLUSIVE_EXCLUSIVE" ]
  }, {
    "name" : "SPAN_POINT_POINT",
    "type" : "int",
    "comment" : "\n     * 0-length spans with type SPAN_POINT_POINT behave like cursors:\n     * they are pushed forward by the length of the insertion when text\n     * is inserted at their offset.\n     * The text is conceptually inserted before the point.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_PARAGRAPH",
    "type" : "int",
    "comment" : "\n     * SPAN_PARAGRAPH behaves like SPAN_INCLUSIVE_EXCLUSIVE\n     * (SPAN_MARK_MARK), except that if either end of the span is\n     * at the end of the buffer, that end behaves like _POINT\n     * instead (so SPAN_INCLUSIVE_INCLUSIVE if it starts in the\n     * middle and ends at the end, or SPAN_EXCLUSIVE_INCLUSIVE\n     * if it both starts and ends at the end).\n     * <p>\n     * Its endpoints must be the start or end of the buffer or\n     * immediately after a \\n character, and if the \\n\n     * that anchors it is deleted, the endpoint is pulled to the\n     * next \\n that follows in the buffer (or to the end of\n     * the buffer). If a span with SPAN_PARAGRAPH flag is pasted\n     * into another text and the paragraph boundary constraint\n     * is not satisfied, the span is discarded.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_INCLUSIVE_EXCLUSIVE",
    "type" : "int",
    "comment" : "\n     * Non-0-length spans of type SPAN_INCLUSIVE_EXCLUSIVE expand\n     * to include text inserted at their starting point but not at their\n     * ending point.  When 0-length, they behave like marks.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_INCLUSIVE_INCLUSIVE",
    "type" : "int",
    "comment" : "\n     * Spans of type SPAN_INCLUSIVE_INCLUSIVE expand\n     * to include text inserted at either their starting or ending point.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_EXCLUSIVE_EXCLUSIVE",
    "type" : "int",
    "comment" : "\n     * Spans of type SPAN_EXCLUSIVE_EXCLUSIVE do not expand\n     * to include text inserted at either their starting or ending point.\n     * They can never have a length of 0 and are automatically removed\n     * from the buffer if all the text they cover is removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_EXCLUSIVE_INCLUSIVE",
    "type" : "int",
    "comment" : "\n     * Non-0-length spans of type SPAN_EXCLUSIVE_INCLUSIVE expand\n     * to include text inserted at their ending point but not at their\n     * starting point.  When 0-length, they behave like points.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_COMPOSING",
    "type" : "int",
    "comment" : "\n     * This flag is set on spans that are being used to apply temporary\n     * styling information on the composing text of an input method, so that\n     * they can be found and removed when the composing text is being\n     * replaced.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_INTERMEDIATE",
    "type" : "int",
    "comment" : "\n     * This flag will be set for intermediate span changes, meaning there\n     * is guaranteed to be another change following it.  Typically it is\n     * used for {@link Selection} which automatically uses this with the first\n     * offset it sets when updating the selection.\n     ",
    "links" : [ "android.text.Selection" ]
  }, {
    "name" : "SPAN_USER_SHIFT",
    "type" : "int",
    "comment" : "\n     * The bits numbered SPAN_USER_SHIFT and above are available\n     * for callers to use to store scalar data associated with their\n     * span object.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_USER",
    "type" : "int",
    "comment" : "\n     * The bits specified by the SPAN_USER bitfield are available\n     * for callers to use to store scalar data associated with their\n     * span object.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_PRIORITY_SHIFT",
    "type" : "int",
    "comment" : "\n     * The bits numbered just above SPAN_PRIORITY_SHIFT determine the order\n     * of change notifications -- higher numbers go first.  You probably\n     * don't need to set this; it is used so that when text changes, the\n     * text layout gets the chance to update itself before any other\n     * callbacks can inquire about the layout of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPAN_PRIORITY",
    "type" : "int",
    "comment" : "\n     * The bits specified by the SPAN_PRIORITY bitmap determine the order\n     * of change notifications -- higher numbers go first.  You probably\n     * don't need to set this; it is used so that when text changes, the\n     * text layout gets the chance to update itself before any other\n     * callbacks can inquire about the layout of the text.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public T[] getSpans(int start, int end, Class<T> type)",
    "returnType" : "T[]",
    "comment" : "\n     * Return an array of the markup objects attached to the specified\n     * slice of this CharSequence and whose type is the specified type\n     * or a subclass of it.  Specify Object.class for the type if you\n     * want all the objects regardless of type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSpanStart(Object tag)",
    "returnType" : "int",
    "comment" : "\n     * Return the beginning of the range of text to which the specified\n     * markup object is attached, or -1 if the object is not attached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSpanEnd(Object tag)",
    "returnType" : "int",
    "comment" : "\n     * Return the end of the range of text to which the specified\n     * markup object is attached, or -1 if the object is not attached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSpanFlags(Object tag)",
    "returnType" : "int",
    "comment" : "\n     * Return the flags that were specified when {@link Spannable#setSpan} was\n     * used to attach the specified markup object, or 0 if the specified\n     * object has not been attached.\n     ",
    "links" : [ "android.text.Spannable#setSpan" ]
  }, {
    "name" : "public int nextSpanTransition(int start, int limit, Class type)",
    "returnType" : "int",
    "comment" : "\n     * Return the first offset greater than <code>start</code> where a markup\n     * object of class <code>type</code> begins or ends, or <code>limit</code>\n     * if there are no starts or ends greater than <code>start</code> but less\n     * than <code>limit</code>. Specify <code>null</code> or Object.class for\n     * the type if you want every transition regardless of type.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public T[] getSpans(int start, int end, Class<T> type)", "public int getSpanStart(Object tag)", "public int getSpanEnd(Object tag)", "public int getSpanFlags(Object tag)", "public int nextSpanTransition(int start, int limit, Class type)" ],
  "variableNames" : [ "SPAN_POINT_MARK_MASK", "SPAN_MARK_MARK", "SPAN_MARK_POINT", "SPAN_POINT_MARK", "SPAN_POINT_POINT", "SPAN_PARAGRAPH", "SPAN_INCLUSIVE_EXCLUSIVE", "SPAN_INCLUSIVE_INCLUSIVE", "SPAN_EXCLUSIVE_EXCLUSIVE", "SPAN_EXCLUSIVE_INCLUSIVE", "SPAN_COMPOSING", "SPAN_INTERMEDIATE", "SPAN_USER_SHIFT", "SPAN_USER", "SPAN_PRIORITY_SHIFT", "SPAN_PRIORITY" ]
}