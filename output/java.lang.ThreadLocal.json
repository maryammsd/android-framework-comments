{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/ThreadLocal.java",
  "packageName" : "java.lang",
  "className" : "ThreadLocal",
  "comment" : "\n * This class provides thread-local variables.  These variables differ from\n * their normal counterparts in that each thread that accesses one (via its\n * {@code get} or {@code set} method) has its own, independently initialized\n * copy of the variable.  {@code ThreadLocal} instances are typically private\n * static fields in classes that wish to associate state with a thread (e.g.,\n * a user ID or Transaction ID).\n *\n * <p>For example, the class below generates unique identifiers local to each\n * thread.\n * A thread's id is assigned the first time it invokes {@code ThreadId.get()}\n * and remains unchanged on subsequent calls.\n * <pre>\n * import java.util.concurrent.atomic.AtomicInteger;\n *\n * public class ThreadId {\n *     // Atomic integer containing the next thread ID to be assigned\n *     private static final AtomicInteger nextId = new AtomicInteger(0);\n *\n *     // Thread local variable containing each thread's ID\n *     private static final ThreadLocal&lt;Integer&gt; threadId =\n *         new ThreadLocal&lt;Integer&gt;() {\n *             &#64;Override protected Integer initialValue() {\n *                 return nextId.getAndIncrement();\n *         }\n *     };\n *\n *     // Returns the current thread's unique ID, assigning it if necessary\n *     public static int get() {\n *         return threadId.get();\n *     }\n * }\n * </pre>\n * <p>Each thread holds an implicit reference to its copy of a thread-local\n * variable as long as the thread is alive and the {@code ThreadLocal}\n * instance is accessible; after a thread goes away, all of its copies of\n * thread-local instances are subject to garbage collection (unless other\n * references to these copies exist).\n *\n * @author  Josh Bloch and Doug Lea\n * @since   1.2\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "threadLocalHashCode",
    "type" : "int",
    "comment" : "\n     * ThreadLocals rely on per-thread linear-probe hash maps attached\n     * to each thread (Thread.threadLocals and\n     * inheritableThreadLocals).  The ThreadLocal objects act as keys,\n     * searched via threadLocalHashCode.  This is a custom hash code\n     * (useful only within ThreadLocalMaps) that eliminates collisions\n     * in the common case where consecutively constructed ThreadLocals\n     * are used by the same threads, while remaining well-behaved in\n     * less common cases.\n     ",
    "links" : [ ]
  }, {
    "name" : "nextHashCode",
    "type" : "AtomicInteger",
    "comment" : "\n     * The next hash code to be given out. Updated atomically. Starts at\n     * zero.\n     ",
    "links" : [ ]
  }, {
    "name" : "HASH_INCREMENT",
    "type" : "int",
    "comment" : "\n     * The difference between successively generated hash codes - turns\n     * implicit sequential thread-local IDs into near-optimally spread\n     * multiplicative hash values for power-of-two-sized tables.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int nextHashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the next hash code.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected T initialValue()",
    "returnType" : "T",
    "comment" : "\n     * Returns the current thread's \"initial value\" for this\n     * thread-local variable.  This method will be invoked the first\n     * time a thread accesses the variable with the {@link #get}\n     * method, unless the thread previously invoked the {@link #set}\n     * method, in which case the {@code initialValue} method will not\n     * be invoked for the thread.  Normally, this method is invoked at\n     * most once per thread, but it may be invoked again in case of\n     * subsequent invocations of {@link #remove} followed by {@link #get}.\n     *\n     * <p>This implementation simply returns {@code null}; if the\n     * programmer desires thread-local variables to have an initial\n     * value other than {@code null}, {@code ThreadLocal} must be\n     * subclassed, and this method overridden.  Typically, an\n     * anonymous inner class will be used.\n     *\n     * @return the initial value for this thread-local\n     ",
    "links" : [ "#get", "#remove", "#set" ]
  }, {
    "name" : "public static ThreadLocal<S> withInitial(Supplier<? extends S> supplier)",
    "returnType" : "ThreadLocal<S>",
    "comment" : "\n     * Creates a thread local variable. The initial value of the variable is\n     * determined by invoking the {@code get} method on the {@code Supplier}.\n     *\n     * @param <S> the type of the thread local's value\n     * @param supplier the supplier to be used to determine the initial value\n     * @return a new thread local variable\n     * @throws NullPointerException if the specified supplier is null\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public T get()",
    "returnType" : "T",
    "comment" : "\n     * Returns the value in the current thread's copy of this\n     * thread-local variable.  If the variable has no value for the\n     * current thread, it is first initialized to the value returned\n     * by an invocation of the {@link #initialValue} method.\n     *\n     * @return the current thread's value of this thread-local\n     ",
    "links" : [ "#initialValue" ]
  }, {
    "name" : " boolean isPresent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if there is a value in the current thread's copy of\n     * this thread-local variable, even if that values is {@code null}.\n     *\n     * @return {@code true} if current thread has associated value in this\n     *         thread-local variable; {@code false} if not\n     ",
    "links" : [ ]
  }, {
    "name" : "private T setInitialValue()",
    "returnType" : "T",
    "comment" : "\n     * Variant of set() to establish initialValue. Used instead\n     * of set() in case user has overridden the set() method.\n     *\n     * @return the initial value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(T value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current thread's copy of this thread-local variable\n     * to the specified value.  Most subclasses will have no need to\n     * override this method, relying solely on the {@link #initialValue}\n     * method to set the values of thread-locals.\n     *\n     * @param value the value to be stored in the current thread's copy of\n     *        this thread-local.\n     ",
    "links" : [ "#initialValue" ]
  }, {
    "name" : "public void remove()",
    "returnType" : "void",
    "comment" : "\n     * Removes the current thread's value for this thread-local\n     * variable.  If this thread-local variable is subsequently\n     * {@linkplain #get read} by the current thread, its value will be\n     * reinitialized by invoking its {@link #initialValue} method,\n     * unless its value is {@linkplain #set set} by the current thread\n     * in the interim.  This may result in multiple invocations of the\n     * {@code initialValue} method in the current thread.\n     *\n     * @since 1.5\n     ",
    "links" : [ "#initialValue" ]
  }, {
    "name" : " ThreadLocalMap getMap(Thread t)",
    "returnType" : "ThreadLocalMap",
    "comment" : "\n     * Get the map associated with a ThreadLocal. Overridden in\n     * InheritableThreadLocal.\n     *\n     * @param  t the current thread\n     * @return the map\n     ",
    "links" : [ ]
  }, {
    "name" : " void createMap(Thread t, T firstValue)",
    "returnType" : "void",
    "comment" : "\n     * Create the map associated with a ThreadLocal. Overridden in\n     * InheritableThreadLocal.\n     *\n     * @param t the current thread\n     * @param firstValue value for the initial entry of the map\n     ",
    "links" : [ ]
  }, {
    "name" : " static ThreadLocalMap createInheritedMap(ThreadLocalMap parentMap)",
    "returnType" : "ThreadLocalMap",
    "comment" : "\n     * Factory method to create map of inherited thread locals.\n     * Designed to be called only from Thread constructor.\n     *\n     * @param  parentMap the map associated with parent thread\n     * @return a map containing the parent's inheritable bindings\n     ",
    "links" : [ ]
  }, {
    "name" : " T childValue(T parentValue)",
    "returnType" : "T",
    "comment" : "\n     * Method childValue is visibly defined in subclass\n     * InheritableThreadLocal, but is internally defined here for the\n     * sake of providing createInheritedMap factory method without\n     * needing to subclass the map class in InheritableThreadLocal.\n     * This technique is preferable to the alternative of embedding\n     * instanceof tests in methods.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int nextHashCode()", "protected T initialValue()", "public static ThreadLocal<S> withInitial(Supplier<? extends S> supplier)", "public T get()", " boolean isPresent()", "private T setInitialValue()", "public void set(T value)", "public void remove()", " ThreadLocalMap getMap(Thread t)", " void createMap(Thread t, T firstValue)", " static ThreadLocalMap createInheritedMap(ThreadLocalMap parentMap)", " T childValue(T parentValue)" ],
  "variableNames" : [ "threadLocalHashCode", "nextHashCode", "HASH_INCREMENT" ]
}