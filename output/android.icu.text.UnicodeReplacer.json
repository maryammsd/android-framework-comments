{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/UnicodeReplacer.java",
  "packageName" : "android.icu.text",
  "className" : "UnicodeReplacer",
  "comment" : "\n * <code>UnicodeReplacer</code> defines a protocol for objects that\n * replace a range of characters in a Replaceable string with output\n * text.  The replacement is done via the Replaceable API so as to\n * preserve out-of-band data.\n * @author Alan Liu\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract int replace(Replaceable text, int start, int limit, int[] cursor)",
    "returnType" : "int",
    "comment" : "\n     * Replace characters in 'text' from 'start' to 'limit' with the\n     * output text of this object.  Update the 'cursor' parameter to\n     * give the cursor position and return the length of the\n     * replacement text.\n     *\n     * @param text the text to be matched\n     * @param start inclusive start index of text to be replaced\n     * @param limit exclusive end index of text to be replaced;\n     * must be greater than or equal to start\n     * @param cursor output parameter for the cursor position.\n     * Not all replacer objects will update this, but in a complete\n     * tree of replacer objects, representing the entire output side\n     * of a transliteration rule, at least one must update it.\n     * @return the number of 16-bit code units in the text replacing\n     * the characters at offsets start..(limit-1) in text\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String toReplacerPattern(boolean escapeUnprintable)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this replacer.  If the\n     * result of calling this function is passed to the appropriate\n     * parser, typically TransliteratorParser, it will produce another\n     * replacer that is equal to this one.\n     * @param escapeUnprintable if true then convert unprintable\n     * character to their hex escape representations, \\\\uxxxx or\n     * \\\\Uxxxxxxxx.  Unprintable characters are defined by\n     * Utility.isUnprintable().\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addReplacementSetTo(UnicodeSet toUnionTo)",
    "returnType" : "void",
    "comment" : "\n     * Union the set of all characters that may output by this object\n     * into the given set.\n     * @param toUnionTo the set into which to union the output characters\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int replace(Replaceable text, int start, int limit, int[] cursor)", "public abstract String toReplacerPattern(boolean escapeUnprintable)", "public abstract void addReplacementSetTo(UnicodeSet toUnionTo)" ],
  "variableNames" : [ ]
}