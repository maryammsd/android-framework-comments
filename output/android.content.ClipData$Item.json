{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/ClipData.java",
  "packageName" : "android.content",
  "className" : "Item",
  "comment" : "\n     * Description of a single item in a ClipData.\n     *\n     * <p>The types than an individual item can currently contain are:</p>\n     *\n     * <ul>\n     * <li> Text: a basic string of text.  This is actually a CharSequence,\n     * so it can be formatted text supported by corresponding Android built-in\n     * style spans.  (Custom application spans are not supported and will be\n     * stripped when transporting through the clipboard.)\n     * <li> Intent: an arbitrary Intent object.  A typical use is the shortcut\n     * to create when pasting a clipped item on to the home screen.\n     * <li> Uri: a URI reference.  This may be any URI (such as an http: URI\n     * representing a bookmark), however it is often a content: URI.  Using\n     * content provider references as clips like this allows an application to\n     * share complex or large clips through the standard content provider\n     * facilities.\n     * </ul>\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHtmlText",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntent",
    "type" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntentSender",
    "type" : "IntentSender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextLinks",
    "type" : "TextLinks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityInfo",
    "type" : "ActivityInfo",
    "comment" : " if the data is obtained from {@link #copyForTransferWithActivityInfo}",
    "links" : [ "#copyForTransferWithActivityInfo" ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Retrieve the raw text contained in this Item.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getHtmlText()",
    "returnType" : "String",
    "comment" : "\n         * Retrieve the raw HTML text contained in this Item.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Intent getIntent()",
    "returnType" : "Intent",
    "comment" : "\n         * Retrieve the raw Intent contained in this Item.\n         ",
    "links" : [ ]
  }, {
    "name" : "public IntentSender getIntentSender()",
    "returnType" : "IntentSender",
    "comment" : "\n         * Returns the {@link IntentSender} in this Item.\n         ",
    "links" : [ "android.content.IntentSender" ]
  }, {
    "name" : "public Uri getUri()",
    "returnType" : "Uri",
    "comment" : "\n         * Retrieve the raw URI contained in this Item.\n         ",
    "links" : [ ]
  }, {
    "name" : "public ActivityInfo getActivityInfo()",
    "returnType" : "ActivityInfo",
    "comment" : "\n         * Retrieve the activity info contained in this Item.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setActivityInfo(ActivityInfo info)",
    "returnType" : "void",
    "comment" : "\n         * Updates the activity info for in this Item.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public TextLinks getTextLinks()",
    "returnType" : "TextLinks",
    "comment" : "\n         * Returns the results of text classification run on the raw text contained in this item,\n         * if it was performed, and if any entities were found in the text. Classification is\n         * generally only performed on the first item in clip data, and only if the text is below a\n         * certain length.\n         *\n         * <p>Returns {@code null} if classification was not performed, or if no entities were\n         * found in the text.\n         *\n         * @see ClipDescription#getConfidenceScore(String)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setTextLinks(TextLinks textLinks)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence coerceToText(Context context)",
    "returnType" : "CharSequence",
    "comment" : "BEGIN_INCLUDE(coerceToText)",
    "links" : [ ]
  }, {
    "name" : "public CharSequence coerceToStyledText(Context context)",
    "returnType" : "CharSequence",
    "comment" : "\n         * Like {@link #coerceToHtmlText(Context)}, but any text that would\n         * be returned as HTML formatting will be returned as text with\n         * style spans.\n         * @param context The caller's Context, from which its ContentResolver\n         * and other things can be retrieved.\n         * @return Returns the item's textual representation.\n         ",
    "links" : [ "#coerceToHtmlText(Context)" ]
  }, {
    "name" : "public String coerceToHtmlText(Context context)",
    "returnType" : "String",
    "comment" : "\n         * Turn this item into HTML text, regardless of the type of data it\n         * actually contains.\n         *\n         * <p>The algorithm for deciding what text to return is:\n         * <ul>\n         * <li> If {@link #getHtmlText} is non-null, return that.\n         * <li> If {@link #getText} is non-null, return that, converting to\n         * valid HTML text.  If this text contains style spans,\n         * {@link Html#toHtml(Spanned) Html.toHtml(Spanned)} is used to\n         * convert them to HTML formatting.\n         * <li> If {@link #getUri} is non-null, try to retrieve its data\n         * as a text stream from its content provider.  If the provider can\n         * supply text/html data, that will be preferred and returned as-is.\n         * Otherwise, any text/* data will be returned and escaped to HTML.\n         * If it is not a content: URI or the content provider does not supply\n         * a text representation, HTML text containing a link to the URI\n         * will be returned.\n         * <li> If {@link #getIntent} is non-null, convert that to an intent:\n         * URI and return as an HTML link.\n         * <li> Otherwise, return an empty string.\n         * </ul>\n         *\n         * @param context The caller's Context, from which its ContentResolver\n         * and other things can be retrieved.\n         * @return Returns the item's representation as HTML text.\n         ",
    "links" : [ "#getHtmlText", "android.text.Html#toHtml(Spanned)", "#getUri", "#getIntent", "#getText" ]
  }, {
    "name" : "private CharSequence coerceToHtmlOrStyledText(Context context, boolean styled)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String uriToHtml(String uri)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CharSequence uriToStyledText(String uri)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void toShortString(StringBuilder b, boolean redactContent)",
    "returnType" : "void",
    "comment" : "\n         * Appends this item to the given builder.\n         * @param redactContent If true, redacts common forms of PII; otherwise appends full\n         *                      details.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public CharSequence getText()", "public String getHtmlText()", "public Intent getIntent()", "public IntentSender getIntentSender()", "public Uri getUri()", "public ActivityInfo getActivityInfo()", "public void setActivityInfo(ActivityInfo info)", "public TextLinks getTextLinks()", "public void setTextLinks(TextLinks textLinks)", "public CharSequence coerceToText(Context context)", "public CharSequence coerceToStyledText(Context context)", "public String coerceToHtmlText(Context context)", "private CharSequence coerceToHtmlOrStyledText(Context context, boolean styled)", "private String uriToHtml(String uri)", "private CharSequence uriToStyledText(String uri)", "public String toString()", "public void toShortString(StringBuilder b, boolean redactContent)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)" ],
  "variableNames" : [ "mText", "mHtmlText", "mIntent", "mIntentSender", "mUri", "mTextLinks", "mActivityInfo" ]
}