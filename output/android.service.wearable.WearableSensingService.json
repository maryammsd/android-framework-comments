{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/wearable/WearableSensingService.java",
  "packageName" : "android.service.wearable",
  "className" : "WearableSensingService",
  "comment" : "\n * Abstract base class for sensing with wearable devices. An example of this is {@link\n *AmbientContextEvent} detection.\n *\n * <p> A service that provides requested sensing events to the system, such as a {@link\n *AmbientContextEvent}. The system's default WearableSensingService implementation is configured in\n * {@code config_defaultWearableSensingService}. If this config has no value, a stub is\n * returned.\n *\n * <p> An implementation of a WearableSensingService should be an isolated service. Using the\n * \"isolatedProcess=true\" attribute in the service's configurations. </p>\n **\n * <pre>\n * {@literal\n * <service android:name=\".YourWearableSensingService\"\n *          android:permission=\"android.permission.BIND_WEARABLE_SENSING_SERVICE\"\n *          android:isolatedProcess=\"true\">\n * </service>}\n * </pre>\n *\n * <p>The use of \"Wearable\" here is not the same as the Android Wear platform and should be treated\n * separately. </p>\n *\n * @hide\n ",
  "links" : [ "android.app.ambientcontext.AmbientContextEvent" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_RESPONSE_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * The bundle key for this class of object, used in {@code RemoteCallback#sendResult}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HOTWORD_AUDIO_STREAM_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * The bundle key for hotword audio stream, used in {@code RemoteCallback#sendResult}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service. To be supported, the\n     * service must also require the\n     * {@link android.Manifest.permission#BIND_WEARABLE_SENSING_SERVICE}\n     * permission so that other applications can not abuse it.\n     ",
    "links" : [ "android.Manifest.permission#BIND_WEARABLE_SENSING_SERVICE", "android.content.Intent" ]
  }, {
    "name" : "OPEN_FILE_TIMEOUT",
    "type" : "Duration",
    "comment" : " Timeout to prevent thread from waiting on the openFile future indefinitely.",
    "links" : [ ]
  }, {
    "name" : "mDataRequestObserverIdToRequesterMap",
    "type" : "SparseArray<WearableSensingDataRequester>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWearableSensingCallback",
    "type" : "IWearableSensingCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSecureConnectionProvided(@NonNull ParcelFileDescriptor secureWearableConnection, @NonNull Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when a secure connection to the wearable is available. See {@link\n     * WearableSensingManager#provideConnection(ParcelFileDescriptor, Executor, Consumer)}\n     * for details about the secure connection.\n     *\n     * <p>When the {@code secureWearableConnection} is closed, the system will send a {@link\n     * WearableSensingManager#STATUS_CHANNEL_ERROR} status code to the status consumer provided by\n     * the caller of {@link WearableSensingManager#provideConnection(ParcelFileDescriptor,\n     * Executor, Consumer)}.\n     *\n     * <p>The implementing class should override this method. It should return an appropriate status\n     * code via {@code statusConsumer} after receiving the {@code secureWearableConnection}.\n     *\n     * @param secureWearableConnection The secure connection to the wearable.\n     * @param statusConsumer The consumer for the service status.\n     ",
    "links" : [ "android.app.wearable.WearableSensingManager#STATUS_CHANNEL_ERROR", "android.app.wearable.WearableSensingManager#provideConnection(ParcelFileDescriptor" ]
  }, {
    "name" : "public abstract void onDataStreamProvided(@NonNull ParcelFileDescriptor parcelFileDescriptor, @NonNull Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when a data stream to the wearable is provided. This data stream can be used to obtain\n     * data from a wearable device. It is up to the implementation to maintain the data stream and\n     * close the data stream when it is finished.\n     *\n     * @param parcelFileDescriptor The data stream to the wearable\n     * @param statusConsumer the consumer for the service status.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onDataProvided(@NonNull PersistableBundle data, @Nullable SharedMemory sharedMemory, @NonNull Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when configurations and read-only data in a {@link PersistableBundle} can be used by\n     * the WearableSensingService and sends the result to the {@link Consumer} right after the call.\n     * It is dependent on the application to define the type of data to provide. This is used by\n     * applications that will also provide an implementation of an isolated WearableSensingService.\n     * If the data was provided successfully {@link WearableSensingManager#STATUS_SUCCESS} will be\n     * provided.\n     *\n     * @param data Application configuration data to provide to the {@link WearableSensingService}.\n     *     PersistableBundle does not allow any remotable objects or other contents that can be used\n     *     to communicate with other processes.\n     * @param sharedMemory The unrestricted data blob to provide to the {@link\n     *     WearableSensingService}. Use this to provide the sensing models data or other such data\n     *     to the trusted process.\n     * @param statusConsumer the consumer for the service status.\n     ",
    "links" : [ "java.util.function.Consumer", "android.app.wearable.WearableSensingManager#STATUS_SUCCESS", "android.os.PersistableBundle", "android.service.wearable.WearableSensingService" ]
  }, {
    "name" : "public void onDataRequestObserverRegistered(int dataType, @NonNull String packageName, @NonNull WearableSensingDataRequester dataRequester, @NonNull Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when a data request observer is registered. Each request must not be larger than\n     * {@link WearableSensingDataRequest#getMaxRequestSize()}. In addition, at most {@link\n     * WearableSensingDataRequester#getRateLimit()} requests can be sent every rolling {@link\n     * WearableSensingDataRequester#getRateLimitWindowSize()}. Requests that are too large or too\n     * frequent will be dropped by the system. See {@link\n     * WearableSensingDataRequester#requestData(WearableSensingDataRequest, Consumer)} for details\n     * about the status code returned for each request.\n     *\n     * <p>The implementing class should override this method. After the data requester is received,\n     * it should send a {@link WearableSensingManager#STATUS_SUCCESS} status code to the {@code\n     * statusConsumer} unless it encounters an error condition described by a status code listed in\n     * {@link WearableSensingManager}, such as {@link\n     * WearableSensingManager#STATUS_WEARABLE_UNAVAILABLE}, in which case it should return the\n     * corresponding status code.\n     *\n     * @param dataType The data type the observer is registered for. Values are defined by the\n     *     application that implements this class.\n     * @param packageName The package name of the app that will receive the requests.\n     * @param dataRequester A handle to the observer registered. It can be used to request data of\n     *     the specified data type.\n     * @param statusConsumer the consumer for the status of the data request observer registration.\n     *     This is different from the status for each data request.\n     ",
    "links" : [ "android.service.wearable.WearableSensingDataRequester#getRateLimit()", "android.service.wearable.WearableSensingDataRequester#requestData(WearableSensingDataRequest", "android.app.wearable.WearableSensingManager#STATUS_WEARABLE_UNAVAILABLE", "android.app.wearable.WearableSensingManager#STATUS_SUCCESS", "android.app.wearable.WearableSensingManager", "android.app.wearable.WearableSensingDataRequest#getMaxRequestSize()", "android.service.wearable.WearableSensingDataRequester#getRateLimitWindowSize()" ]
  }, {
    "name" : "public void onDataRequestObserverUnregistered(int dataType, @NonNull String packageName, @NonNull WearableSensingDataRequester dataRequester, @NonNull Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when a data request observer is unregistered.\n     *\n     * <p>The implementing class should override this method. It should send a {@link\n     * WearableSensingManager#STATUS_SUCCESS} status code to the {@code statusConsumer} unless it\n     * encounters an error condition described by a status code listed in {@link\n     * WearableSensingManager}, such as {@link WearableSensingManager#STATUS_WEARABLE_UNAVAILABLE},\n     * in which case it should return the corresponding status code.\n     *\n     * @param dataType The data type the observer is for.\n     * @param packageName The package name of the app that will receive the requests sent to the\n     *     dataRequester.\n     * @param dataRequester A handle to the observer to be unregistered. It is the exact same\n     *     instance provided in a previous {@link #onDataRequestConsumerRegistered(int, String,\n     *     WearableSensingDataRequester, Consumer)} invocation.\n     * @param statusConsumer the consumer for the status of the data request observer\n     *     unregistration. This is different from the status for each data request.\n     ",
    "links" : [ "#onDataRequestConsumerRegistered(int", "android.app.wearable.WearableSensingManager#STATUS_WEARABLE_UNAVAILABLE", "android.app.wearable.WearableSensingManager#STATUS_SUCCESS", "android.app.wearable.WearableSensingManager" ]
  }, {
    "name" : "public void onStartHotwordRecognition(@NonNull Consumer<HotwordAudioStream> hotwordAudioConsumer, @NonNull Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when the wearable is requested to start hotword recognition.\n     *\n     * <p>This method is expected to be overridden by a derived class. The implementation should\n     * store the {@code hotwordAudioConsumer} and send it the audio data when first-stage hotword is\n     * detected from the wearable. It should also send a {@link\n     * WearableSensingManager#STATUS_SUCCESS} status code to the {@code statusConsumer} unless it\n     * encounters an error condition described by a status code listed in {@link\n     * WearableSensingManager}, such as {@link WearableSensingManager#STATUS_WEARABLE_UNAVAILABLE},\n     * in which case it should return the corresponding status code.\n     *\n     * <p>The implementation should also store the {@code statusConsumer}. If the wearable stops\n     * listening for hotword for any reason other than {@link #onStopListeningForHotword(Consumer)}\n     * being invoked, it should send an appropriate status code listed in {@link\n     * WearableSensingManager} to {@code statusConsumer}. If the error condition cannot be described\n     * by any of those status codes, it should send a {@link WearableSensingManager#STATUS_UNKNOWN}.\n     *\n     * <p>If this method is called again, the implementation should use the new {@code\n     * hotwordAudioConsumer} and discard any previous ones it received.\n     *\n     * <p>At this time, the {@code timestamp} field in the {@link HotwordAudioStream} is not used\n     * and will be discarded by the system.\n     *\n     * @param hotwordAudioConsumer The consumer for the wearable hotword audio data.\n     * @param statusConsumer The consumer for the service status.\n     ",
    "links" : [ "#onStopListeningForHotword(Consumer)", "android.service.voice.HotwordAudioStream", "android.app.wearable.WearableSensingManager#STATUS_WEARABLE_UNAVAILABLE", "android.app.wearable.WearableSensingManager#STATUS_SUCCESS", "android.app.wearable.WearableSensingManager", "android.app.wearable.WearableSensingManager#STATUS_UNKNOWN" ]
  }, {
    "name" : "public void onStopHotwordRecognition(@NonNull Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when the wearable is requested to stop hotword recognition.\n     *\n     * <p>This method is expected to be overridden by a derived class. It should send a {@link\n     * WearableSensingManager#STATUS_SUCCESS} status code to the {@code statusConsumer} unless it\n     * encounters an error condition described by a status code listed in {@link\n     * WearableSensingManager}, such as {@link WearableSensingManager#STATUS_WEARABLE_UNAVAILABLE},\n     * in which case it should return the corresponding status code.\n     *\n     * @param statusConsumer The consumer for the service status.\n     ",
    "links" : [ "android.app.wearable.WearableSensingManager#STATUS_WEARABLE_UNAVAILABLE", "android.app.wearable.WearableSensingManager#STATUS_SUCCESS", "android.app.wearable.WearableSensingManager" ]
  }, {
    "name" : "public void onValidatedByHotwordDetectionService()",
    "returnType" : "void",
    "comment" : "\n     * Called when hotword audio data sent to the {@code hotwordAudioConsumer} in {@link\n     * #onStartListeningForHotword(Consumer, Consumer)} is accepted by the\n     * {@link android.service.voice.HotwordDetectionService} as valid hotword.\n     *\n     * <p>After the implementation of this class sends the hotword audio data to the {@code\n     * hotwordAudioConsumer} in {@link #onStartListeningForHotword(Consumer,\n     * Consumer)}, the system will forward the data into {@link\n     * android.service.voice.HotwordDetectionService} (which runs in an isolated process) for\n     * second-stage hotword detection. If accepted as valid hotword there, this method will be\n     * called, and then the system will send the data to the currently active {@link\n     * android.service.voice.AlwaysOnHotwordDetector} (which may not run in an isolated process).\n     *\n     * <p>This method is expected to be overridden by a derived class. The implementation must\n     * request the wearable to turn on the microphone indicator to notify the user that audio data\n     * is being used outside of the isolated environment.\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#onStartListeningForHotword(Consumer", "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "public void onStopHotwordAudioStream()",
    "returnType" : "void",
    "comment" : "\n     * Called when the currently active hotword audio stream is no longer needed.\n     *\n     * <p>This method can be called as a result of hotword rejection by {@link\n     * android.service.voice.HotwordDetectionService}, or the {@link\n     * android.service.voice.AlwaysOnHotwordDetector} closing the data stream it received, or a\n     * non-recoverable error occurred before the data reaches the {@link\n     * android.service.voice.HotwordDetectionService} or the {@link\n     * android.service.voice.AlwaysOnHotwordDetector}.\n     *\n     * <p>This method is expected to be overridden by a derived class. The implementation should\n     * stop sending hotword audio data to the {@code hotwordAudioConsumer} in {@link\n     * #onStartListeningForHotword(Consumer, Consumer)}\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#onStartListeningForHotword(Consumer", "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "public abstract void onStartDetection(@NonNull AmbientContextEventRequest request, @NonNull String packageName, @NonNull Consumer<AmbientContextDetectionServiceStatus> statusConsumer, @NonNull Consumer<AmbientContextDetectionResult> detectionResultConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when a client app requests starting detection of the events in the request. The\n     * implementation should keep track of whether the user has explicitly consented to detecting\n     * the events using on-going ambient sensor (e.g. microphone), and agreed to share the\n     * detection results with this client app. If the user has not consented, the detection\n     * should not start, and the statusConsumer should get a response with STATUS_ACCESS_DENIED.\n     * If the user has made the consent and the underlying services are available, the\n     * implementation should start detection and provide detected events to the\n     * detectionResultConsumer. If the type of event needs immediate attention, the implementation\n     * should send result as soon as detected. Otherwise, the implementation can batch response.\n     * The ongoing detection will keep running, until onStopDetection is called. If there were\n     * previously requested detections from the same package, regardless of the type of events in\n     * the request, the previous request will be replaced with the new request and pending events\n     * are discarded.\n     *\n     * @param request The request with events to detect.\n     * @param packageName the requesting app's package name\n     * @param statusConsumer the consumer for the service status.\n     * @param detectionResultConsumer the consumer for the detected event\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onStopDetection(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Stops detection of the events. Events that are not being detected will be ignored.\n     *\n     * @param packageName stops detection for the given package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onQueryServiceStatus(@NonNull Set<Integer> eventTypes, @NonNull String packageName, @NonNull Consumer<AmbientContextDetectionServiceStatus> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when a query for the detection status occurs. The implementation should check\n     * the detection status of the requested events for the package, and provide results in a\n     * {@link AmbientContextDetectionServiceStatus} for the consumer.\n     *\n     * @param eventTypes The events to check for status.\n     * @param packageName the requesting app's package name\n     * @param consumer the consumer for the query results\n     ",
    "links" : [ "android.service.ambientcontext.AmbientContextDetectionServiceStatus" ]
  }, {
    "name" : "public FileInputStream openFileInput(@SuppressLint(\"InvalidNullabilityOverride\") @NonNull String fileName) throws FileNotFoundException",
    "returnType" : "FileInputStream",
    "comment" : " MissingNullability",
    "links" : [ ]
  }, {
    "name" : "private static Integer[] intArrayToIntegerArray(@NonNull int[] integerSet)",
    "returnType" : "Integer[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static WearableSensingDataRequester createDataRequester(RemoteCallback dataRequestCallback)",
    "returnType" : "WearableSensingDataRequester",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Consumer<Integer> createWearableStatusConsumer(RemoteCallback statusCallback)",
    "returnType" : "Consumer<Integer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final IBinder onBind(@NonNull Intent intent)", "public void onSecureConnectionProvided(@NonNull ParcelFileDescriptor secureWearableConnection, @NonNull Consumer<Integer> statusConsumer)", "public abstract void onDataStreamProvided(@NonNull ParcelFileDescriptor parcelFileDescriptor, @NonNull Consumer<Integer> statusConsumer)", "public abstract void onDataProvided(@NonNull PersistableBundle data, @Nullable SharedMemory sharedMemory, @NonNull Consumer<Integer> statusConsumer)", "public void onDataRequestObserverRegistered(int dataType, @NonNull String packageName, @NonNull WearableSensingDataRequester dataRequester, @NonNull Consumer<Integer> statusConsumer)", "public void onDataRequestObserverUnregistered(int dataType, @NonNull String packageName, @NonNull WearableSensingDataRequester dataRequester, @NonNull Consumer<Integer> statusConsumer)", "public void onStartHotwordRecognition(@NonNull Consumer<HotwordAudioStream> hotwordAudioConsumer, @NonNull Consumer<Integer> statusConsumer)", "public void onStopHotwordRecognition(@NonNull Consumer<Integer> statusConsumer)", "public void onValidatedByHotwordDetectionService()", "public void onStopHotwordAudioStream()", "public abstract void onStartDetection(@NonNull AmbientContextEventRequest request, @NonNull String packageName, @NonNull Consumer<AmbientContextDetectionServiceStatus> statusConsumer, @NonNull Consumer<AmbientContextDetectionResult> detectionResultConsumer)", "public abstract void onStopDetection(@NonNull String packageName)", "public abstract void onQueryServiceStatus(@NonNull Set<Integer> eventTypes, @NonNull String packageName, @NonNull Consumer<AmbientContextDetectionServiceStatus> consumer)", "public FileInputStream openFileInput(@SuppressLint(\"InvalidNullabilityOverride\") @NonNull String fileName) throws FileNotFoundException", "private static Integer[] intArrayToIntegerArray(@NonNull int[] integerSet)", "private static WearableSensingDataRequester createDataRequester(RemoteCallback dataRequestCallback)", "private static Consumer<Integer> createWearableStatusConsumer(RemoteCallback statusCallback)" ],
  "variableNames" : [ "TAG", "STATUS_RESPONSE_BUNDLE_KEY", "HOTWORD_AUDIO_STREAM_BUNDLE_KEY", "SERVICE_INTERFACE", "OPEN_FILE_TIMEOUT", "mDataRequestObserverIdToRequesterMap", "mWearableSensingCallback" ]
}