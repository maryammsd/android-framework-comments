{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/VintfObject.java",
  "packageName" : "android.os",
  "className" : "VintfObject",
  "comment" : "\n * Java API for libvintf.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static native String[] report()",
    "returnType" : "String[]",
    "comment" : "\n     * Slurps all device information (both manifests and both matrices)\n     * and report them.\n     * If any error in getting one of the manifests, it is not included in\n     * the list.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int verify(String[] packageInfo)",
    "returnType" : "int",
    "comment" : "\n     * Verify that the given metadata for an OTA package is compatible with\n     * this device.\n     *\n     * @param packageInfo a list of serialized form of HalManifest's /\n     * CompatibilityMatri'ces (XML).\n     * @return = 0 if success (compatible)\n     *         &gt; 0 if incompatible\n     *         &lt; 0 if any error (mount partition fails, illformed XML, etc.)\n     *\n     * @deprecated Checking compatibility against an OTA package is no longer\n     * supported because the format of VINTF metadata in the OTA package may not\n     * be recognized by the current system.\n     *\n     * <p>\n     * <ul>\n     * <li>This function always returns 0 for non-empty {@code packageInfo}.\n     * </li>\n     * <li>This function returns the result of {@link #verifyWithoutAvb} for\n     * null or empty {@code packageInfo}.</li>\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "#verifyWithoutAvb" ]
  }, {
    "name" : "public static native int verifyWithoutAvb()",
    "returnType" : "int",
    "comment" : "\n     * Verify Vintf compatibility on the device without checking AVB\n     * (Android Verified Boot). It is useful to verify a running system\n     * image where AVB check is irrelevant.\n     *\n     * @return = 0 if success (compatible)\n     *         > 0 if incompatible\n     *         < 0 if any error (mount partition fails, illformed XML, etc.)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native String[] getHalNamesAndVersions()",
    "returnType" : "String[]",
    "comment" : "\n     * @return a list of HAL names and versions that is supported by this\n     * device as stated in device and framework manifests. For example,\n     * [\"android.hidl.manager@1.0\", \"android.hardware.camera.device@1.0\",\n     *  \"android.hardware.camera.device@3.2\"]. There are no duplicates.\n     *\n     * For AIDL HALs, the version is stripped away\n     * (e.g. \"android.hardware.light\").\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native String getSepolicyVersion()",
    "returnType" : "String",
    "comment" : "\n     * @return the BOARD_SEPOLICY_VERS build flag available in device manifest.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native Map<String, String[]> getVndkSnapshots()",
    "returnType" : "Map<String, String[]>",
    "comment" : "\n     * @return a list of VNDK snapshots supported by the framework, as\n     * specified in framework manifest. For example,\n     * [(\"27\", [\"libjpeg.so\", \"libbase.so\"]),\n     *  (\"28\", [\"libjpeg.so\", \"libbase.so\"])]\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native Long getTargetFrameworkCompatibilityMatrixVersion()",
    "returnType" : "Long",
    "comment" : "\n     * @return Target Framework Compatibility Matrix (FCM) version, a number\n     * specified in the device manifest indicating the FCM version that the\n     * device manifest implements. Null if device manifest doesn't specify this\n     * number (for legacy devices).\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG" ],
  "methodNames" : [ "public static native String[] report()", "public static int verify(String[] packageInfo)", "public static native int verifyWithoutAvb()", "public static native String[] getHalNamesAndVersions()", "public static native String getSepolicyVersion()", "public static native Map<String, String[]> getVndkSnapshots()", "public static native Long getTargetFrameworkCompatibilityMatrixVersion()" ]
}