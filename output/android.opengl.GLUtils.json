{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/opengl/GLUtils.java",
  "packageName" : "android.opengl",
  "className" : "GLUtils",
  "comment" : "",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static int getInternalFormat(Bitmap bitmap)",
    "returnType" : "int",
    "comment" : "\n     * return the internal format as defined by OpenGL ES of the supplied bitmap.\n     * @param bitmap\n     * @return the internal format of the bitmap.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getType(Bitmap bitmap)",
    "returnType" : "int",
    "comment" : "\n     * Return the type as defined by OpenGL ES of the supplied bitmap, if there\n     * is one. If the bitmap is stored in a compressed format, it may not have\n     * a valid OpenGL ES type.\n     * @throws IllegalArgumentException if the bitmap does not have a type.\n     * @param bitmap\n     * @return the OpenGL ES type of the bitmap.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void texImage2D(int target, int level, int internalformat, Bitmap bitmap, int border)",
    "returnType" : "void",
    "comment" : "\n     * Calls glTexImage2D() on the current OpenGL context. If no context is\n     * current the behavior is the same as calling glTexImage2D() with  no\n     * current context, that is, eglGetError() will return the appropriate\n     * error.\n     * Unlike glTexImage2D() bitmap cannot be null and will raise an exception\n     * in that case.\n     * All other parameters are identical to those used for glTexImage2D().\n     *\n     * NOTE: this method doesn't change GL_UNPACK_ALIGNMENT, you must make\n     * sure to set it properly according to the supplied bitmap.\n     *\n     * Whether or not bitmap can have non power of two dimensions depends on\n     * the current OpenGL context. Always check glGetError() some time\n     * after calling this method, just like when using OpenGL directly.\n     *\n     * @param target\n     * @param level\n     * @param internalformat\n     * @param bitmap\n     * @param border\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void texImage2D(int target, int level, int internalformat, Bitmap bitmap, int type, int border)",
    "returnType" : "void",
    "comment" : "\n     * A version of texImage2D() that takes an explicit type parameter\n     * as defined by the OpenGL ES specification. The actual type and\n     * internalformat of the bitmap must be compatible with the specified\n     * type and internalformat parameters.\n     *\n     * @param target\n     * @param level\n     * @param internalformat\n     * @param bitmap\n     * @param type\n     * @param border\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void texImage2D(int target, int level, Bitmap bitmap, int border)",
    "returnType" : "void",
    "comment" : "\n     * A version of texImage2D that determines the internalFormat and type\n     * automatically.\n     *\n     * @param target\n     * @param level\n     * @param bitmap\n     * @param border\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void texSubImage2D(int target, int level, int xoffset, int yoffset, Bitmap bitmap)",
    "returnType" : "void",
    "comment" : "\n     * Calls glTexSubImage2D() on the current OpenGL context. If no context is\n     * current the behavior is the same as calling glTexSubImage2D() with  no\n     * current context, that is, eglGetError() will return the appropriate\n     * error.\n     * Unlike glTexSubImage2D() bitmap cannot be null and will raise an exception\n     * in that case.\n     * All other parameters are identical to those used for glTexSubImage2D().\n     *\n     * NOTE: this method doesn't change GL_UNPACK_ALIGNMENT, you must make\n     * sure to set it properly according to the supplied bitmap.\n     *\n     * Whether or not bitmap can have non power of two dimensions depends on\n     * the current OpenGL context. Always check glGetError() some time\n     * after calling this method, just like when using OpenGL directly.\n     *\n     * @param target\n     * @param level\n     * @param xoffset\n     * @param yoffset\n     * @param bitmap\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void texSubImage2D(int target, int level, int xoffset, int yoffset, Bitmap bitmap, int format, int type)",
    "returnType" : "void",
    "comment" : "\n     * A version of texSubImage2D() that takes an explicit type parameter\n     * as defined by the OpenGL ES specification.\n     *\n     * @param target\n     * @param level\n     * @param xoffset\n     * @param yoffset\n     * @param bitmap\n     * @param type\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getEGLErrorString(int error)",
    "returnType" : "String",
    "comment" : "\n     * Return a string for the EGL error code, or the hex representation\n     * if the error is unknown.\n     *\n     * @param error The EGL error to convert into a String.\n     *\n     * @return An error string corresponding to the EGL error code.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native int native_getInternalFormat(Bitmap bitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int native_getType(Bitmap bitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int native_texImage2D(int target, int level, int internalformat, Bitmap bitmap, int type, int border)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int native_texSubImage2D(int target, int level, int xoffset, int yoffset, Bitmap bitmap, int format, int type)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static int getInternalFormat(Bitmap bitmap)", "public static int getType(Bitmap bitmap)", "public static void texImage2D(int target, int level, int internalformat, Bitmap bitmap, int border)", "public static void texImage2D(int target, int level, int internalformat, Bitmap bitmap, int type, int border)", "public static void texImage2D(int target, int level, Bitmap bitmap, int border)", "public static void texSubImage2D(int target, int level, int xoffset, int yoffset, Bitmap bitmap)", "public static void texSubImage2D(int target, int level, int xoffset, int yoffset, Bitmap bitmap, int format, int type)", "public static String getEGLErrorString(int error)", "private static native int native_getInternalFormat(Bitmap bitmap)", "private static native int native_getType(Bitmap bitmap)", "private static native int native_texImage2D(int target, int level, int internalformat, Bitmap bitmap, int type, int border)", "private static native int native_texSubImage2D(int target, int level, int xoffset, int yoffset, Bitmap bitmap, int format, int type)" ]
}