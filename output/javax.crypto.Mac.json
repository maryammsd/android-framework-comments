{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/Mac.java",
  "packageName" : "javax.crypto",
  "className" : "Mac",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "spi",
    "type" : "MacSpi",
    "comment" : " The provider implementation (delegate)",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : " The name of the MAC algorithm.",
    "links" : [ ]
  }, {
    "name" : "initialized",
    "type" : "boolean",
    "comment" : " Has this object been initialized?",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "warnCount",
    "type" : "int",
    "comment" : " max number of debug warnings to print from chooseFirstProvider()",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the algorithm name of this <code>Mac</code> object.\n     *\n     * <p>This is the same name that was specified in one of the\n     * <code>getInstance</code> calls that created this\n     * <code>Mac</code> object.\n     *\n     * @return the algorithm name of this <code>Mac</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Mac getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "Mac",
    "comment" : "\n     * Returns a <code>Mac</code> object that implements the\n     * specified MAC algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new Mac object encapsulating the\n     * MacSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested MAC algorithm.\n     * See the Mac section in the <a href=\n     *   \"{@docRoot}/../technotes/guides/security/StandardNames.html#Mac\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @return the new <code>Mac</code> object.\n     *\n     * @exception NoSuchAlgorithmException if no Provider supports a\n     *          MacSpi implementation for the\n     *          specified algorithm.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "#getProviders()" ]
  }, {
    "name" : "public static final Mac getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "Mac",
    "comment" : "\n     * Returns a <code>Mac</code> object that implements the\n     * specified MAC algorithm.\n     *\n     * <p> A new Mac object encapsulating the\n     * MacSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested MAC algorithm.\n     * See the Mac section in the <a href=\n     *   \"{@docRoot}/../technotes/guides/security/StandardNames.html#Mac\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new <code>Mac</code> object.\n     *\n     * @exception NoSuchAlgorithmException if a MacSpi\n     *          implementation for the specified algorithm is not\n     *          available from the specified provider.\n     *\n     * @exception NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @exception IllegalArgumentException if the <code>provider</code>\n     *          is null or empty.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "#getProviders()" ]
  }, {
    "name" : "public static final Mac getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "Mac",
    "comment" : "\n     * Returns a <code>Mac</code> object that implements the\n     * specified MAC algorithm.\n     *\n     * <p> A new Mac object encapsulating the\n     * MacSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the standard name of the requested MAC algorithm.\n     * See the Mac section in the <a href=\n     *   \"{@docRoot}/../technotes/guides/security/StandardNames.html#Mac\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return the new <code>Mac</code> object.\n     *\n     * @exception NoSuchAlgorithmException if a MacSpi\n     *          implementation for the specified algorithm is not available\n     *          from the specified Provider object.\n     *\n     * @exception IllegalArgumentException if the <code>provider</code>\n     *          is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : " void chooseFirstProvider()",
    "returnType" : "void",
    "comment" : "\n     * Choose the Spi from the first provider available. Used if\n     * delayed provider selection is not possible because init()\n     * is not the first method called.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void chooseProvider(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this <code>Mac</code> object.\n     *\n     * @return the provider of this <code>Mac</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getMacLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the MAC in bytes.\n     *\n     * @return the MAC length in bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(Key key) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this <code>Mac</code> object with the given key.\n     *\n     * @param key the key.\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * initializing this MAC.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this <code>Mac</code> object with the given key and\n     * algorithm parameters.\n     *\n     * @param key the key.\n     * @param params the algorithm parameters.\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * initializing this MAC.\n     * @exception InvalidAlgorithmParameterException if the given algorithm\n     * parameters are inappropriate for this MAC.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void update(byte input) throws IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Processes the given byte.\n     *\n     * @param input the input byte to be processed.\n     *\n     * @exception IllegalStateException if this <code>Mac</code> has not been\n     * initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void update(byte[] input) throws IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Processes the given array of bytes.\n     *\n     * @param input the array of bytes to be processed.\n     *\n     * @exception IllegalStateException if this <code>Mac</code> has not been\n     * initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void update(byte[] input, int offset, int len) throws IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Processes the first <code>len</code> bytes in <code>input</code>,\n     * starting at <code>offset</code> inclusive.\n     *\n     * @param input the input buffer.\n     * @param offset the offset in <code>input</code> where the input starts.\n     * @param len the number of bytes to process.\n     *\n     * @exception IllegalStateException if this <code>Mac</code> has not been\n     * initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void update(ByteBuffer input)",
    "returnType" : "void",
    "comment" : "\n     * Processes <code>input.remaining()</code> bytes in the ByteBuffer\n     * <code>input</code>, starting at <code>input.position()</code>.\n     * Upon return, the buffer's position will be equal to its limit;\n     * its limit will not have changed.\n     *\n     * @param input the ByteBuffer\n     *\n     * @exception IllegalStateException if this <code>Mac</code> has not been\n     * initialized.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] doFinal() throws IllegalStateException",
    "returnType" : "byte[]",
    "comment" : "\n     * Finishes the MAC operation.\n     *\n     * <p>A call to this method resets this <code>Mac</code> object to the\n     * state it was in when previously initialized via a call to\n     * <code>init(Key)</code> or\n     * <code>init(Key, AlgorithmParameterSpec)</code>.\n     * That is, the object is reset and available to generate another MAC from\n     * the same key, if desired, via new calls to <code>update</code> and\n     * <code>doFinal</code>.\n     * (In order to reuse this <code>Mac</code> object with a different key,\n     * it must be reinitialized via a call to <code>init(Key)</code> or\n     * <code>init(Key, AlgorithmParameterSpec)</code>.\n     *\n     * @return the MAC result.\n     *\n     * @exception IllegalStateException if this <code>Mac</code> has not been\n     * initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void doFinal(byte[] output, int outOffset) throws ShortBufferException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Finishes the MAC operation.\n     *\n     * <p>A call to this method resets this <code>Mac</code> object to the\n     * state it was in when previously initialized via a call to\n     * <code>init(Key)</code> or\n     * <code>init(Key, AlgorithmParameterSpec)</code>.\n     * That is, the object is reset and available to generate another MAC from\n     * the same key, if desired, via new calls to <code>update</code> and\n     * <code>doFinal</code>.\n     * (In order to reuse this <code>Mac</code> object with a different key,\n     * it must be reinitialized via a call to <code>init(Key)</code> or\n     * <code>init(Key, AlgorithmParameterSpec)</code>.\n     *\n     * <p>The MAC result is stored in <code>output</code>, starting at\n     * <code>outOffset</code> inclusive.\n     *\n     * @param output the buffer where the MAC result is stored\n     * @param outOffset the offset in <code>output</code> where the MAC is\n     * stored\n     *\n     * @exception ShortBufferException if the given output buffer is too small\n     * to hold the result\n     * @exception IllegalStateException if this <code>Mac</code> has not been\n     * initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] doFinal(byte[] input) throws IllegalStateException",
    "returnType" : "byte[]",
    "comment" : "\n     * Processes the given array of bytes and finishes the MAC operation.\n     *\n     * <p>A call to this method resets this <code>Mac</code> object to the\n     * state it was in when previously initialized via a call to\n     * <code>init(Key)</code> or\n     * <code>init(Key, AlgorithmParameterSpec)</code>.\n     * That is, the object is reset and available to generate another MAC from\n     * the same key, if desired, via new calls to <code>update</code> and\n     * <code>doFinal</code>.\n     * (In order to reuse this <code>Mac</code> object with a different key,\n     * it must be reinitialized via a call to <code>init(Key)</code> or\n     * <code>init(Key, AlgorithmParameterSpec)</code>.\n     *\n     * @param input data in bytes\n     * @return the MAC result.\n     *\n     * @exception IllegalStateException if this <code>Mac</code> has not been\n     * initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets this <code>Mac</code> object.\n     *\n     * <p>A call to this method resets this <code>Mac</code> object to the\n     * state it was in when previously initialized via a call to\n     * <code>init(Key)</code> or\n     * <code>init(Key, AlgorithmParameterSpec)</code>.\n     * That is, the object is reset and available to generate another MAC from\n     * the same key, if desired, via new calls to <code>update</code> and\n     * <code>doFinal</code>.\n     * (In order to reuse this <code>Mac</code> object with a different key,\n     * it must be reinitialized via a call to <code>init(Key)</code> or\n     * <code>init(Key, AlgorithmParameterSpec)</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Returns a clone if the provider implementation is cloneable.\n     *\n     * @return a clone if the provider implementation is cloneable.\n     *\n     * @exception CloneNotSupportedException if this is called on a\n     * delegate that does not support <code>Cloneable</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MacSpi getCurrentSpi()",
    "returnType" : "MacSpi",
    "comment" : "\n     * Returns the {@code MacSpi} backing this {@code Mac} or {@code null} if no {@code MacSpi} is\n     * backing this {@code Mac}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String getAlgorithm()", "public static final Mac getInstance(String algorithm) throws NoSuchAlgorithmException", "public static final Mac getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static final Mac getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", " void chooseFirstProvider()", "private void chooseProvider(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException", "public final Provider getProvider()", "public final int getMacLength()", "public final void init(Key key) throws InvalidKeyException", "public final void init(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException", "public final void update(byte input) throws IllegalStateException", "public final void update(byte[] input) throws IllegalStateException", "public final void update(byte[] input, int offset, int len) throws IllegalStateException", "public final void update(ByteBuffer input)", "public final byte[] doFinal() throws IllegalStateException", "public final void doFinal(byte[] output, int outOffset) throws ShortBufferException, IllegalStateException", "public final byte[] doFinal(byte[] input) throws IllegalStateException", "public final void reset()", "public final Object clone() throws CloneNotSupportedException", "public MacSpi getCurrentSpi()" ],
  "variableNames" : [ "provider", "spi", "algorithm", "initialized", "lock", "warnCount" ]
}