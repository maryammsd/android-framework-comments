{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaScannerConnection.java",
  "packageName" : "android.media",
  "className" : "MediaScannerConnection",
  "comment" : "\n * MediaScannerConnection provides a way for applications to pass a\n * newly created or downloaded media file to the media scanner service.\n * The media scanner service will read metadata from the file and add\n * the file to the media content provider.\n * The MediaScannerConnectionClient provides an interface for the\n * media scanner service to return the Uri for a newly scanned file\n * to the client of the MediaScannerConnection class.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClient",
    "type" : "MediaScannerConnectionClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProvider",
    "type" : "ContentProviderClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IMediaScannerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "IMediaScannerListener.Stub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void connect()",
    "returnType" : "void",
    "comment" : "\n     * Initiates a connection to the media scanner service.\n     * {@link MediaScannerConnectionClient#onMediaScannerConnected()}\n     * will be called when the connection is established.\n     ",
    "links" : [ "#onMediaScannerConnected()" ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Releases the connection to the media scanner service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether we are connected to the media scanner service\n     * @return true if we are connected, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scanFile(String path, String mimeType)",
    "returnType" : "void",
    "comment" : "\n     * Requests the media scanner to scan a file.\n     * Success or failure of the scanning operation cannot be determined until\n     * {@link MediaScannerConnectionClient#onScanCompleted(String, Uri)} is called.\n     *\n     * @param path the path to the file to be scanned.\n     * @param mimeType  an optional mimeType for the file.\n     * If mimeType is null, then the mimeType will be inferred from the file extension.\n     ",
    "links" : [ "#onScanCompleted(String" ]
  }, {
    "name" : "public static void scanFile(Context context, String[] paths, String[] mimeTypes, OnScanCompletedListener callback)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for constructing a {@link MediaScannerConnection}, calling\n     * {@link #connect} on it, and calling {@link #scanFile(String, String)} with the given\n     * <var>path</var> and <var>mimeType</var> when the connection is\n     * established.\n     * @param context The caller's Context, required for establishing a connection to\n     * the media scanner service.\n     * Success or failure of the scanning operation cannot be determined until\n     * {@link MediaScannerConnectionClient#onScanCompleted(String, Uri)} is called.\n     * @param paths Array of paths to be scanned.\n     * @param mimeTypes Optional array of MIME types for each path.\n     * If mimeType is null, then the mimeType will be inferred from the file extension.\n     * @param callback Optional callback through which you can receive the\n     * scanned URI and MIME type; If null, the file will be scanned but\n     * you will not get a result back.\n     * @see #scanFile(String, String)\n     ",
    "links" : [ "android.media.MediaScannerConnection", "#onScanCompleted(String", "#connect", "#scanFile(String" ]
  }, {
    "name" : "private static Uri scanFileQuietly(ContentProviderClient client, File file)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void runCallBack(Context context, OnScanCompletedListener callback, String path, Uri uri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(ComponentName className, IBinder service)",
    "returnType" : "void",
    "comment" : "\n     * Part of the ServiceConnection interface.  Do not call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected(ComponentName className)",
    "returnType" : "void",
    "comment" : "\n     * Part of the ServiceConnection interface.  Do not call.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mContext", "mClient", "mProvider", "mService", "mConnected", "mListener" ],
  "methodNames" : [ "public void connect()", "public void disconnect()", "public synchronized boolean isConnected()", "public void scanFile(String path, String mimeType)", "public static void scanFile(Context context, String[] paths, String[] mimeTypes, OnScanCompletedListener callback)", "private static Uri scanFileQuietly(ContentProviderClient client, File file)", "private static void runCallBack(Context context, OnScanCompletedListener callback, String path, Uri uri)", "public void onServiceConnected(ComponentName className, IBinder service)", "public void onServiceDisconnected(ComponentName className)" ]
}