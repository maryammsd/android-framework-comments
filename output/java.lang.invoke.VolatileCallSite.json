{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/invoke/VolatileCallSite.java",
  "packageName" : "java.lang.invoke",
  "className" : "VolatileCallSite",
  "comment" : "\n * A {@code VolatileCallSite} is a {@link CallSite} whose target acts like a volatile variable.\n * An {@code invokedynamic} instruction linked to a {@code VolatileCallSite} sees updates\n * to its call site target immediately, even if the update occurs in another thread.\n * There may be a performance penalty for such tight coupling between threads.\n * <p>\n * In other respects, a {@code VolatileCallSite} is interchangeable\n * with {@code MutableCallSite}.\n * @see MutableCallSite\n * @author John Rose, JSR 292 EG\n ",
  "links" : [ "java.lang.invoke.CallSite" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public final MethodHandle getTarget()",
    "returnType" : "MethodHandle",
    "comment" : "\n     * Returns the target method of the call site, which behaves\n     * like a {@code volatile} field of the {@code VolatileCallSite}.\n     * <p>\n     * The interactions of {@code getTarget} with memory are the same\n     * as of a read from a {@code volatile} field.\n     * <p>\n     * In particular, the current thread is required to issue a fresh\n     * read of the target from memory, and must not fail to see\n     * a recent update to the target by another thread.\n     *\n     * @return the linkage state of this call site, a method handle which can change over time\n     * @see #setTarget\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTarget(MethodHandle newTarget)",
    "returnType" : "void",
    "comment" : "\n     * Updates the target method of this call site, as a volatile variable.\n     * The type of the new target must agree with the type of the old target.\n     * <p>\n     * The interactions with memory are the same as of a write to a volatile field.\n     * In particular, any threads is guaranteed to see the updated target\n     * the next time it calls {@code getTarget}.\n     * @param newTarget the new target\n     * @throws NullPointerException if the proposed new target is null\n     * @throws WrongMethodTypeException if the proposed new target\n     *         has a method type that differs from the previous target\n     * @see #getTarget\n     ",
    "links" : [ ]
  }, {
    "name" : "public final MethodHandle dynamicInvoker()",
    "returnType" : "MethodHandle",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final MethodHandle getTarget()", "public void setTarget(MethodHandle newTarget)", "public final MethodHandle dynamicInvoker()" ],
  "variableNames" : [ ]
}