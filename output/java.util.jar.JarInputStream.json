{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/jar/JarInputStream.java",
  "packageName" : "java.util.jar",
  "className" : "JarInputStream",
  "comment" : "\n * The <code>JarInputStream</code> class is used to read the contents of\n * a JAR file from any input stream. It extends the class\n * <code>java.util.zip.ZipInputStream</code> with support for reading\n * an optional <code>Manifest</code> entry. The <code>Manifest</code>\n * can be used to store meta-information about the JAR file and its entries.\n *\n * @author  David Connelly\n * @see     Manifest\n * @see     java.util.zip.ZipInputStream\n * @since   1.2\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "man",
    "type" : "Manifest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "first",
    "type" : "JarEntry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "jv",
    "type" : "JarVerifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mev",
    "type" : "ManifestEntryVerifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "doVerify",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tryManifest",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private JarEntry checkManifest(JarEntry e) throws IOException",
    "returnType" : "JarEntry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private byte[] getBytes(InputStream is) throws IOException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Manifest getManifest()",
    "returnType" : "Manifest",
    "comment" : "\n     * Returns the <code>Manifest</code> for this JAR file, or\n     * <code>null</code> if none.\n     *\n     * @return the <code>Manifest</code> for this JAR file, or\n     *         <code>null</code> if none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ZipEntry getNextEntry() throws IOException",
    "returnType" : "ZipEntry",
    "comment" : "\n     * Reads the next ZIP file entry and positions the stream at the\n     * beginning of the entry data. If verification has been enabled,\n     * any invalid signature detected while positioning the stream for\n     * the next entry will result in an exception.\n     * @exception ZipException if a ZIP file error has occurred\n     * @exception IOException if an I/O error has occurred\n     * @exception SecurityException if any of the jar file entries\n     *         are incorrectly signed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JarEntry getNextJarEntry() throws IOException",
    "returnType" : "JarEntry",
    "comment" : "\n     * Reads the next JAR file entry and positions the stream at the\n     * beginning of the entry data. If verification has been enabled,\n     * any invalid signature detected while positioning the stream for\n     * the next entry will result in an exception.\n     * @return the next JAR file entry, or null if there are no more entries\n     * @exception ZipException if a ZIP file error has occurred\n     * @exception IOException if an I/O error has occurred\n     * @exception SecurityException if any of the jar file entries\n     *         are incorrectly signed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads from the current JAR file entry into an array of bytes.\n     * If <code>len</code> is not zero, the method\n     * blocks until some input is available; otherwise, no\n     * bytes are read and <code>0</code> is returned.\n     * If verification has been enabled, any invalid signature\n     * on the current entry will be reported at some point before the\n     * end of the entry is reached.\n     * @param b the buffer into which the data is read\n     * @param off the start offset in the destination array <code>b</code>\n     * @param len the maximum number of bytes to read\n     * @return the actual number of bytes read, or -1 if the end of the\n     *         entry is reached\n     * @exception  NullPointerException If <code>b</code> is <code>null</code>.\n     * @exception  IndexOutOfBoundsException If <code>off</code> is negative,\n     * <code>len</code> is negative, or <code>len</code> is greater than\n     * <code>b.length - off</code>\n     * @exception ZipException if a ZIP file error has occurred\n     * @exception IOException if an I/O error has occurred\n     * @exception SecurityException if any of the jar file entries\n     *         are incorrectly signed.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected ZipEntry createZipEntry(String name)",
    "returnType" : "ZipEntry",
    "comment" : "\n     * Creates a new <code>JarEntry</code> (<code>ZipEntry</code>) for the\n     * specified JAR file entry name. The manifest attributes of\n     * the specified JAR file entry name will be copied to the new\n     * <CODE>JarEntry</CODE>.\n     *\n     * @param name the name of the JAR/ZIP file entry\n     * @return the <code>JarEntry</code> object just created\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private JarEntry checkManifest(JarEntry e) throws IOException", "private byte[] getBytes(InputStream is) throws IOException", "public Manifest getManifest()", "public ZipEntry getNextEntry() throws IOException", "public JarEntry getNextJarEntry() throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "protected ZipEntry createZipEntry(String name)" ],
  "variableNames" : [ "man", "first", "jv", "mev", "doVerify", "tryManifest" ]
}