{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Short.java",
  "packageName" : "java.lang",
  "className" : "Short",
  "comment" : "\n * The {@code Short} class wraps a value of primitive type {@code\n * short} in an object.  An object of type {@code Short} contains a\n * single field whose type is {@code short}.\n *\n * <p>In addition, this class provides several methods for converting\n * a {@code short} to a {@code String} and a {@code String} to a\n * {@code short}, as well as other constants and methods useful when\n * dealing with a {@code short}.\n *\n * <!-- Android-removed: paragraph on ValueBased\n * <p>This is a <a href=\"{@docRoot}/java.base/java/lang/doc-files/ValueBased.html\">value-based</a>\n * class; programmers should treat instances that are\n * {@linkplain #equals(Object) equal} as interchangeable and should not\n * use instances for synchronization, or unpredictable behavior may\n * occur. For example, in a future release, synchronization may fail.\n * -->\n *\n * @author  Nakul Saraiya\n * @author  Joseph D. Darcy\n * @see     java.lang.Number\n * @since   1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MIN_VALUE",
    "type" : "short",
    "comment" : "\n     * A constant holding the minimum value a {@code short} can\n     * have, -2<sup>15</sup>.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_VALUE",
    "type" : "short",
    "comment" : "\n     * A constant holding the maximum value a {@code short} can\n     * have, 2<sup>15</sup>-1.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE",
    "type" : "Class<Short>",
    "comment" : "\n     * The {@code Class} instance representing the primitive type\n     * {@code short}.\n     ",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "short",
    "comment" : "\n     * The value of the {@code Short}.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "SIZE",
    "type" : "int",
    "comment" : "\n     * The number of bits used to represent a {@code short} value in two's\n     * complement binary form.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "BYTES",
    "type" : "int",
    "comment" : "\n     * The number of bytes used to represent a {@code short} value in two's\n     * complement binary form.\n     *\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.1. for interoperability ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String toString(short s)",
    "returnType" : "String",
    "comment" : "\n     * Returns a new {@code String} object representing the\n     * specified {@code short}. The radix is assumed to be 10.\n     *\n     * @param s the {@code short} to be converted\n     * @return the string representation of the specified {@code short}\n     * @see java.lang.Integer#toString(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static short parseShort(String s, int radix) throws NumberFormatException",
    "returnType" : "short",
    "comment" : "\n     * Parses the string argument as a signed {@code short} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits, of the specified radix (as\n     * determined by whether {@link java.lang.Character#digit(char,\n     * int)} returns a nonnegative value) except that the first\n     * character may be an ASCII minus sign {@code '-'}\n     * ({@code '\\u005Cu002D'}) to indicate a negative value or an\n     * ASCII plus sign {@code '+'} ({@code '\\u005Cu002B'}) to\n     * indicate a positive value.  The resulting {@code short} value\n     * is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li> The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li> The radix is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li> Any character of the string is not a digit of the\n     * specified radix, except that the first character may be a minus\n     * sign {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li> The value represented by the string is not a value of type\n     * {@code short}.\n     * </ul>\n     *\n     * @param s         the {@code String} containing the\n     *                  {@code short} representation to be parsed\n     * @param radix     the radix to be used while parsing {@code s}\n     * @return          the {@code short} represented by the string\n     *                  argument in the specified radix.\n     * @throws          NumberFormatException If the {@code String}\n     *                  does not contain a parsable {@code short}.\n     ",
    "links" : [ "java.lang.Character#digit(char", "java.lang.Character#MIN_RADIX", "java.lang.Character#MAX_RADIX" ]
  }, {
    "name" : "public static short parseShort(String s) throws NumberFormatException",
    "returnType" : "short",
    "comment" : "\n     * Parses the string argument as a signed decimal {@code\n     * short}. The characters in the string must all be decimal\n     * digits, except that the first character may be an ASCII minus\n     * sign {@code '-'} ({@code '\\u005Cu002D'}) to indicate a\n     * negative value or an ASCII plus sign {@code '+'}\n     * ({@code '\\u005Cu002B'}) to indicate a positive value.  The\n     * resulting {@code short} value is returned, exactly as if the\n     * argument and the radix 10 were given as arguments to the {@link\n     * #parseShort(java.lang.String, int)} method.\n     *\n     * @param s a {@code String} containing the {@code short}\n     *          representation to be parsed\n     * @return  the {@code short} value represented by the\n     *          argument in decimal.\n     * @throws  NumberFormatException If the string does not\n     *          contain a parsable {@code short}.\n     ",
    "links" : [ "#parseShort(java.lang.String" ]
  }, {
    "name" : "public static Short valueOf(String s, int radix) throws NumberFormatException",
    "returnType" : "Short",
    "comment" : "\n     * Returns a {@code Short} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed {@code short} in\n     * the radix specified by the second argument, exactly as if the\n     * argument were given to the {@link #parseShort(java.lang.String,\n     * int)} method. The result is a {@code Short} object that\n     * represents the {@code short} value specified by the string.\n     *\n     * <p>In other words, this method returns a {@code Short} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Short(Short.parseShort(s, radix))}\n     * </blockquote>\n     *\n     * @param s         the string to be parsed\n     * @param radix     the radix to be used in interpreting {@code s}\n     * @return          a {@code Short} object holding the value\n     *                  represented by the string argument in the\n     *                  specified radix.\n     * @throws          NumberFormatException If the {@code String} does\n     *                  not contain a parsable {@code short}.\n     ",
    "links" : [ "#parseShort(java.lang.String" ]
  }, {
    "name" : "public static Short valueOf(String s) throws NumberFormatException",
    "returnType" : "Short",
    "comment" : "\n     * Returns a {@code Short} object holding the\n     * value given by the specified {@code String}. The argument\n     * is interpreted as representing a signed decimal\n     * {@code short}, exactly as if the argument were given to\n     * the {@link #parseShort(java.lang.String)} method. The result is\n     * a {@code Short} object that represents the\n     * {@code short} value specified by the string.\n     *\n     * <p>In other words, this method returns a {@code Short} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Short(Short.parseShort(s))}\n     * </blockquote>\n     *\n     * @param s the string to be parsed\n     * @return  a {@code Short} object holding the value\n     *          represented by the string argument\n     * @throws  NumberFormatException If the {@code String} does\n     *          not contain a parsable {@code short}.\n     ",
    "links" : [ "#parseShort(java.lang.String)" ]
  }, {
    "name" : "public Optional<DynamicConstantDesc<Short>> describeConstable()",
    "returnType" : "Optional<DynamicConstantDesc<Short>>",
    "comment" : "\n     * Returns an {@link Optional} containing the nominal descriptor for this\n     * instance.\n     *\n     * @return an {@link Optional} describing the {@linkplain Short} instance\n     * @since 15\n     * @hide\n     ",
    "links" : [ "java.util.Optional" ]
  }, {
    "name" : "public static Short valueOf(short s)",
    "returnType" : "Short",
    "comment" : "\n     * Returns a {@code Short} instance representing the specified\n     * {@code short} value.\n     * If a new {@code Short} instance is not required, this method\n     * should generally be used in preference to the constructor\n     * {@link #Short(short)}, as this method is likely to yield\n     * significantly better space and time performance by caching\n     * frequently requested values.\n     *\n     * This method will always cache values in the range -128 to 127,\n     * inclusive, and may cache other values outside of this range.\n     *\n     * @param  s a short value.\n     * @return a {@code Short} instance representing {@code s}.\n     * @since  1.5\n     ",
    "links" : [ "#Short(short)" ]
  }, {
    "name" : "public static Short decode(String nm) throws NumberFormatException",
    "returnType" : "Short",
    "comment" : "\n     * Decodes a {@code String} into a {@code Short}.\n     * Accepts decimal, hexadecimal, and octal numbers given by\n     * the following grammar:\n     *\n     * <blockquote>\n     * <dl>\n     * <dt><i>DecodableString:</i>\n     * <dd><i>Sign<sub>opt</sub> DecimalNumeral</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code 0x} <i>HexDigits</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code 0X} <i>HexDigits</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code #} <i>HexDigits</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code 0} <i>OctalDigits</i>\n     *\n     * <dt><i>Sign:</i>\n     * <dd>{@code -}\n     * <dd>{@code +}\n     * </dl>\n     * </blockquote>\n     *\n     * <i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>\n     * are as defined in section {@jls 3.10.1} of\n     * <cite>The Java Language Specification</cite>,\n     * except that underscores are not accepted between digits.\n     *\n     * <p>The sequence of characters following an optional\n     * sign and/or radix specifier (\"{@code 0x}\", \"{@code 0X}\",\n     * \"{@code #}\", or leading zero) is parsed as by the {@code\n     * Short.parseShort} method with the indicated radix (10, 16, or\n     * 8).  This sequence of characters must represent a positive\n     * value or a {@link NumberFormatException} will be thrown.  The\n     * result is negated if first character of the specified {@code\n     * String} is the minus sign.  No whitespace characters are\n     * permitted in the {@code String}.\n     *\n     * @param     nm the {@code String} to decode.\n     * @return    a {@code Short} object holding the {@code short}\n     *            value represented by {@code nm}\n     * @throws    NumberFormatException  if the {@code String} does not\n     *            contain a parsable {@code short}.\n     * @see java.lang.Short#parseShort(java.lang.String, int)\n     ",
    "links" : [ "java.lang.NumberFormatException" ]
  }, {
    "name" : "public byte byteValue()",
    "returnType" : "byte",
    "comment" : "\n     * Returns the value of this {@code Short} as a {@code byte} after\n     * a narrowing primitive conversion.\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public short shortValue()",
    "returnType" : "short",
    "comment" : "\n     * Returns the value of this {@code Short} as a\n     * {@code short}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of this {@code Short} as an {@code int} after\n     * a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of this {@code Short} as a {@code long} after\n     * a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the value of this {@code Short} as a {@code float}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the value of this {@code Short} as a {@code double}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@code String} object representing this\n     * {@code Short}'s value.  The value is converted to signed\n     * decimal representation and returned as a string, exactly as if\n     * the {@code short} value were given as an argument to the\n     * {@link java.lang.Short#toString(short)} method.\n     *\n     * @return  a string representation of the value of this object in\n     *          base&nbsp;10.\n     ",
    "links" : [ "java.lang.Short#toString(short)" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for this {@code Short}; equal to the result\n     * of invoking {@code intValue()}.\n     *\n     * @return a hash code value for this {@code Short}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int hashCode(short value)",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for a {@code short} value; compatible with\n     * {@code Short.hashCode()}.\n     *\n     * @param value the value to hash\n     * @return a hash code value for a {@code short} value.\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object to the specified object.  The result is\n     * {@code true} if and only if the argument is not\n     * {@code null} and is a {@code Short} object that\n     * contains the same {@code short} value as this object.\n     *\n     * @param obj       the object to compare with\n     * @return          {@code true} if the objects are the same;\n     *                  {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(Short anotherShort)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code Short} objects numerically.\n     *\n     * @param   anotherShort   the {@code Short} to be compared.\n     * @return  the value {@code 0} if this {@code Short} is\n     *          equal to the argument {@code Short}; a value less than\n     *          {@code 0} if this {@code Short} is numerically less\n     *          than the argument {@code Short}; and a value greater than\n     *           {@code 0} if this {@code Short} is numerically\n     *           greater than the argument {@code Short} (signed\n     *           comparison).\n     * @since   1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(short x, short y)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code short} values numerically.\n     * The value returned is identical to what would be returned by:\n     * <pre>\n     *    Short.valueOf(x).compareTo(Short.valueOf(y))\n     * </pre>\n     *\n     * @param  x the first {@code short} to compare\n     * @param  y the second {@code short} to compare\n     * @return the value {@code 0} if {@code x == y};\n     *         a value less than {@code 0} if {@code x < y}; and\n     *         a value greater than {@code 0} if {@code x > y}\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compareUnsigned(short x, short y)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code short} values numerically treating the values\n     * as unsigned.\n     *\n     * @param  x the first {@code short} to compare\n     * @param  y the second {@code short} to compare\n     * @return the value {@code 0} if {@code x == y}; a value less\n     *         than {@code 0} if {@code x < y} as unsigned values; and\n     *         a value greater than {@code 0} if {@code x > y} as\n     *         unsigned values\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public static short reverseBytes(short i)",
    "returnType" : "short",
    "comment" : "\n     * Returns the value obtained by reversing the order of the bytes in the\n     * two's complement representation of the specified {@code short} value.\n     *\n     * @param i the value whose bytes are to be reversed\n     * @return the value obtained by reversing (or, equivalently, swapping)\n     *     the bytes in the specified {@code short} value.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int toUnsignedInt(short x)",
    "returnType" : "int",
    "comment" : "\n     * Converts the argument to an {@code int} by an unsigned\n     * conversion.  In an unsigned conversion to an {@code int}, the\n     * high-order 16 bits of the {@code int} are zero and the\n     * low-order 16 bits are equal to the bits of the {@code short} argument.\n     *\n     * Consequently, zero and positive {@code short} values are mapped\n     * to a numerically equal {@code int} value and negative {@code\n     * short} values are mapped to an {@code int} value equal to the\n     * input plus 2<sup>16</sup>.\n     *\n     * @param  x the value to convert to an unsigned {@code int}\n     * @return the argument converted to {@code int} by an unsigned\n     *         conversion\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long toUnsignedLong(short x)",
    "returnType" : "long",
    "comment" : "\n     * Converts the argument to a {@code long} by an unsigned\n     * conversion.  In an unsigned conversion to a {@code long}, the\n     * high-order 48 bits of the {@code long} are zero and the\n     * low-order 16 bits are equal to the bits of the {@code short} argument.\n     *\n     * Consequently, zero and positive {@code short} values are mapped\n     * to a numerically equal {@code long} value and negative {@code\n     * short} values are mapped to a {@code long} value equal to the\n     * input plus 2<sup>16</sup>.\n     *\n     * @param  x the value to convert to an unsigned {@code long}\n     * @return the argument converted to {@code long} by an unsigned\n     *         conversion\n     * @since 1.8\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String toString(short s)", "public static short parseShort(String s, int radix) throws NumberFormatException", "public static short parseShort(String s) throws NumberFormatException", "public static Short valueOf(String s, int radix) throws NumberFormatException", "public static Short valueOf(String s) throws NumberFormatException", "public Optional<DynamicConstantDesc<Short>> describeConstable()", "public static Short valueOf(short s)", "public static Short decode(String nm) throws NumberFormatException", "public byte byteValue()", "public short shortValue()", "public int intValue()", "public long longValue()", "public float floatValue()", "public double doubleValue()", "public String toString()", "public int hashCode()", "public static int hashCode(short value)", "public boolean equals(Object obj)", "public int compareTo(Short anotherShort)", "public static int compare(short x, short y)", "public static int compareUnsigned(short x, short y)", "public static short reverseBytes(short i)", "public static int toUnsignedInt(short x)", "public static long toUnsignedLong(short x)" ],
  "variableNames" : [ "MIN_VALUE", "MAX_VALUE", "TYPE", "value", "SIZE", "BYTES", "serialVersionUID" ]
}