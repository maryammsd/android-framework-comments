{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/format/Time.java",
  "packageName" : "android.text.format",
  "className" : "Time",
  "comment" : "\n * An alternative to the {@link java.util.Calendar} and\n * {@link java.util.GregorianCalendar} classes. An instance of the Time class represents\n * a moment in time, specified with second precision. It is modelled after\n * struct tm. This class is not thread-safe and does not consider leap seconds.\n *\n * <p>This class has a number of issues and it is recommended that\n * {@link java.util.GregorianCalendar} is used instead.\n *\n * <p>Known issues:\n * <ul>\n *     <li>For historical reasons when performing time calculations all arithmetic currently takes\n *     place using 32-bit integers. This limits the reliable time range representable from 1902\n *     until 2037.See the wikipedia article on the\n *     <a href=\"http://en.wikipedia.org/wiki/Year_2038_problem\">Year 2038 problem</a> for details.\n *     Do not rely on this behavior; it may change in the future.\n *     </li>\n *     <li>Calling {@link #switchTimezone(String)} on a date that cannot exist, such as a wall time\n *     that was skipped due to a DST transition, will result in a date in 1969 (i.e. -1, or 1 second\n *     before 1st Jan 1970 UTC).</li>\n *     <li>Much of the formatting / parsing assumes ASCII text and is therefore not suitable for\n *     use with non-ASCII scripts.</li>\n *     <li>No support for pseudo-zones like \"GMT-07:00\".</li>\n * </ul>\n *\n * @deprecated Use {@link java.util.GregorianCalendar} instead.\n ",
  "variables" : [ {
    "name" : "Y_M_D_T_H_M_S_000",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Y_M_D_T_H_M_S_000_Z",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Y_M_D",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIMEZONE_UTC",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EPOCH_JULIAN_DAY",
    "type" : "int",
    "comment" : "\n     * The Julian day of the epoch, that is, January 1, 1970 on the Gregorian\n     * calendar.\n     ",
    "links" : [ ]
  }, {
    "name" : "MONDAY_BEFORE_JULIAN_EPOCH",
    "type" : "int",
    "comment" : "\n     * The Julian day of the Monday in the week of the epoch, December 29, 1969\n     * on the Gregorian calendar.\n     ",
    "links" : [ ]
  }, {
    "name" : "allDay",
    "type" : "boolean",
    "comment" : "\n     * True if this is an allDay event. The hour, minute, second fields are\n     * all zero, and the date is displayed the same in all time zones.\n     ",
    "links" : [ ]
  }, {
    "name" : "second",
    "type" : "int",
    "comment" : "\n     * Seconds [0-61] (2 leap seconds allowed)\n     ",
    "links" : [ ]
  }, {
    "name" : "minute",
    "type" : "int",
    "comment" : "\n     * Minute [0-59]\n     ",
    "links" : [ ]
  }, {
    "name" : "hour",
    "type" : "int",
    "comment" : "\n     * Hour of day [0-23]\n     ",
    "links" : [ ]
  }, {
    "name" : "monthDay",
    "type" : "int",
    "comment" : "\n     * Day of month [1-31]\n     ",
    "links" : [ ]
  }, {
    "name" : "month",
    "type" : "int",
    "comment" : "\n     * Month [0-11]\n     ",
    "links" : [ ]
  }, {
    "name" : "year",
    "type" : "int",
    "comment" : "\n     * Year. For example, 1970.\n     ",
    "links" : [ ]
  }, {
    "name" : "weekDay",
    "type" : "int",
    "comment" : "\n     * Day of week [0-6]\n     ",
    "links" : [ ]
  }, {
    "name" : "yearDay",
    "type" : "int",
    "comment" : "\n     * Day of year [0-365]\n     ",
    "links" : [ ]
  }, {
    "name" : "isDst",
    "type" : "int",
    "comment" : "\n     * This time is in daylight savings time. One of:\n     * <ul>\n     * <li><b>positive</b> - in dst</li>\n     * <li><b>0</b> - not in dst</li>\n     * <li><b>negative</b> - unknown</li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "gmtoff",
    "type" : "long",
    "comment" : "\n     * Offset in seconds from UTC including any DST offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "timezone",
    "type" : "String",
    "comment" : "\n     * The timezone for this Time.  Should not be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECOND",
    "type" : "int",
    "comment" : "\n     * Define symbolic constants for accessing the fields in this class. Used in\n     * getActualMaximum().\n     ",
    "links" : [ ]
  }, {
    "name" : "MINUTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOUR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONTH_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEEK_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "YEAR_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEEK_NUM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUNDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TUESDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEDNESDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THURSDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FRIDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SATURDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "calculator",
    "type" : "TimeCalculator",
    "comment" : " An object that is reused for date calculations.",
    "links" : [ ]
  }, {
    "name" : "DAYS_PER_MONTH",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sThursdayOffset",
    "type" : "int[]",
    "comment" : "\n     * This array is indexed by the weekDay field (SUNDAY=0, MONDAY=1, etc.)\n     * and gives a number that can be added to the yearDay to give the\n     * closest Thursday yearDay.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initialize(String timezoneId)",
    "returnType" : "void",
    "comment" : " Initialize the Time to 00:00:00 1/1/1970 in the specified timezone. ",
    "links" : [ ]
  }, {
    "name" : "public long normalize(boolean ignoreDst)",
    "returnType" : "long",
    "comment" : "\n     * Ensures the values in each field are in range. For example if the\n     * current value of this calendar is March 32, normalize() will convert it\n     * to April 1. It also fills in weekDay, yearDay, isDst and gmtoff.\n     *\n     * <p>\n     * If \"ignoreDst\" is true, then this method sets the \"isDst\" field to -1\n     * (the \"unknown\" value) before normalizing.  It then computes the\n     * time in milliseconds and sets the correct value for \"isDst\" if the\n     * fields resolve to a valid date / time.\n     *\n     * <p>\n     * See {@link #toMillis(boolean)} for more information about when to\n     * use <tt>true</tt> or <tt>false</tt> for \"ignoreDst\" and when {@code -1}\n     * might be returned.\n     *\n     * @return the UTC milliseconds since the epoch, or {@code -1}\n     ",
    "links" : [ "#toMillis" ]
  }, {
    "name" : "public void switchTimezone(String timezone)",
    "returnType" : "void",
    "comment" : "\n     * Convert this time object so the time represented remains the same, but is\n     * instead located in a different timezone. This method automatically calls\n     * normalize() in some cases.\n     *\n     * <p>This method can return incorrect results if the date / time cannot be normalized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getActualMaximum(int field)",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum possible value for the given field given the value of\n     * the other fields. Requires that it be normalized for MONTH_DAY and\n     * YEAR_DAY.\n     * @param field one of the constants for HOUR, MINUTE, SECOND, etc.\n     * @return the maximum value for the field.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear(String timezoneId)",
    "returnType" : "void",
    "comment" : "\n     * Clears all values, setting the timezone to the given timezone. Sets isDst\n     * to a negative value to mean \"unknown\".\n     * @param timezoneId the timezone to use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(Time a, Time b)",
    "returnType" : "int",
    "comment" : "\n     * Compare two {@code Time} objects and return a negative number if {@code\n     * a} is less than {@code b}, a positive number if {@code a} is greater than\n     * {@code b}, or 0 if they are equal.\n     *\n     * <p>\n     * This method can return an incorrect answer when the date / time fields of\n     * either {@code Time} have been set to a local time that contradicts the\n     * available timezone information.\n     *\n     * @param a first {@code Time} instance to compare\n     * @param b second {@code Time} instance to compare\n     * @throws NullPointerException if either argument is {@code null}\n     * @throws IllegalArgumentException if {@link #allDay} is true but {@code\n     *             hour}, {@code minute}, and {@code second} are not 0.\n     * @return a negative result if {@code a} is earlier, a positive result if\n     *         {@code b} is earlier, or 0 if they are equal.\n     ",
    "links" : [ "#allDay" ]
  }, {
    "name" : "public String format(String format)",
    "returnType" : "String",
    "comment" : "\n     * Print the current value given the format string provided. See man\n     * strftime for what means what. The final string must be less than 256\n     * characters.\n     * @param format a string containing the desired format.\n     * @return a String containing the current time expressed in the current locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the current time in YYYYMMDDTHHMMSS&lt;tz&gt; format\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean parse(String s)",
    "returnType" : "boolean",
    "comment" : "\n     * Parses a date-time string in either the RFC 2445 format or an abbreviated\n     * format that does not include the \"time\" field.  For example, all of the\n     * following strings are valid:\n     *\n     * <ul>\n     *   <li>\"20081013T160000Z\"</li>\n     *   <li>\"20081013T160000\"</li>\n     *   <li>\"20081013\"</li>\n     * </ul>\n     *\n     * Returns whether or not the time is in UTC (ends with Z).  If the string\n     * ends with \"Z\" then the timezone is set to UTC.  If the date-time string\n     * included only a date and no time field, then the <code>allDay</code>\n     * field of this Time class is set to true and the <code>hour</code>,\n     * <code>minute</code>, and <code>second</code> fields are set to zero;\n     * otherwise (a time field was included in the date-time string)\n     * <code>allDay</code> is set to false. The fields <code>weekDay</code>,\n     * <code>yearDay</code>, and <code>gmtoff</code> are always set to zero,\n     * and the field <code>isDst</code> is set to -1 (unknown).  To set those\n     * fields, call {@link #normalize(boolean)} after parsing.\n     *\n     * To parse a date-time string and convert it to UTC milliseconds, do\n     * something like this:\n     *\n     * <pre>\n     *   Time time = new Time();\n     *   String date = \"20081013T160000Z\";\n     *   time.parse(date);\n     *   long millis = time.normalize(false);\n     * </pre>\n     *\n     * @param s the string to parse\n     * @return true if the resulting time value is in UTC time\n     * @throws android.util.TimeFormatException if s cannot be parsed.\n     ",
    "links" : [ "#normalize" ]
  }, {
    "name" : "private boolean parseInternal(String s)",
    "returnType" : "boolean",
    "comment" : "\n     * Parse a time in the current zone in YYYYMMDDTHHMMSS format.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkChar(String s, int spos, char expected)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getChar(String s, int spos, int mul)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean parse3339(String s)",
    "returnType" : "boolean",
    "comment" : "\n     * Parse a time in RFC 3339 format.  This method also parses simple dates\n     * (that is, strings that contain no time or time offset).  For example,\n     * all of the following strings are valid:\n     *\n     * <ul>\n     *   <li>\"2008-10-13T16:00:00.000Z\"</li>\n     *   <li>\"2008-10-13T16:00:00.000+07:00\"</li>\n     *   <li>\"2008-10-13T16:00:00.000-07:00\"</li>\n     *   <li>\"2008-10-13\"</li>\n     * </ul>\n     *\n     * <p>\n     * If the string contains a time and time offset, then the time offset will\n     * be used to convert the time value to UTC.\n     * </p>\n     *\n     * <p>\n     * If the given string contains just a date (with no time field), then\n     * the {@link #allDay} field is set to true and the {@link #hour},\n     * {@link #minute}, and  {@link #second} fields are set to zero.\n     * </p>\n     *\n     * <p>\n     * Returns true if the resulting time value is in UTC time.\n     * </p>\n     *\n     * @param s the string to parse\n     * @return true if the resulting time value is in UTC time\n     * @throws android.util.TimeFormatException if s cannot be parsed.\n     ",
    "links" : [ "#allDay", "#hour", "#minute", "#second" ]
  }, {
    "name" : "private boolean parse3339Internal(String s)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getCurrentTimezone()",
    "returnType" : "String",
    "comment" : "\n     * Returns the timezone string that is currently set for the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setToNow()",
    "returnType" : "void",
    "comment" : "\n     * Sets the time of the given Time object to the current time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long toMillis(boolean ignoreDst)",
    "returnType" : "long",
    "comment" : "\n     * Converts this time to milliseconds. Suitable for interacting with the\n     * standard java libraries. The time is in UTC milliseconds since the epoch.\n     * This does an implicit normalization to compute the milliseconds but does\n     * <em>not</em> change any of the fields in this Time object.  If you want\n     * to normalize the fields in this Time object and also get the milliseconds\n     * then use {@link #normalize(boolean)}.\n     *\n     * <p>\n     * If \"ignoreDst\" is false, then this method uses the current setting of the\n     * \"isDst\" field and will adjust the returned time if the \"isDst\" field is\n     * wrong for the given time.  See the sample code below for an example of\n     * this.\n     *\n     * <p>\n     * If \"ignoreDst\" is true, then this method ignores the current setting of\n     * the \"isDst\" field in this Time object and will instead figure out the\n     * correct value of \"isDst\" (as best it can) from the fields in this\n     * Time object.  The only case where this method cannot figure out the\n     * correct value of the \"isDst\" field is when the time is inherently\n     * ambiguous because it falls in the hour that is repeated when switching\n     * from Daylight-Saving Time to Standard Time.\n     *\n     * <p>\n     * Here is an example where <tt>toMillis(true)</tt> adjusts the time,\n     * assuming that DST changes at 2am on Sunday, Nov 4, 2007.\n     *\n     * <pre>\n     * Time time = new Time();\n     * time.set(4, 10, 2007);  // set the date to Nov 4, 2007, 12am\n     * time.normalize(false);       // this sets isDst = 1\n     * time.monthDay += 1;     // changes the date to Nov 5, 2007, 12am\n     * millis = time.toMillis(false);   // millis is Nov 4, 2007, 11pm\n     * millis = time.toMillis(true);    // millis is Nov 5, 2007, 12am\n     * </pre>\n     *\n     * <p>\n     * To avoid this problem, use <tt>toMillis(true)</tt>\n     * after adding or subtracting days or explicitly setting the \"monthDay\"\n     * field.  On the other hand, if you are adding\n     * or subtracting hours or minutes, then you should use\n     * <tt>toMillis(false)</tt>.\n     *\n     * <p>\n     * You should also use <tt>toMillis(false)</tt> if you want\n     * to read back the same milliseconds that you set with {@link #set(long)}\n     * or {@link #set(Time)} or after parsing a date string.\n     *\n     * <p>\n     * This method can return {@code -1} when the date / time fields have been\n     * set to a local time that conflicts with available timezone information.\n     * For example, when daylight savings transitions cause an hour to be\n     * skipped: times within that hour will return {@code -1} if isDst =\n     * {@code -1}.\n     ",
    "links" : [ "#normalize", "#set", "#set" ]
  }, {
    "name" : "public void set(long millis)",
    "returnType" : "void",
    "comment" : "\n     * Sets the fields in this Time object given the UTC milliseconds.  After\n     * this method returns, all the fields are normalized.\n     * This also sets the \"isDst\" field to the correct value.\n     *\n     * @param millis the time in UTC milliseconds since the epoch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String format2445()",
    "returnType" : "String",
    "comment" : "\n     * Format according to RFC 2445 DATE-TIME type.\n     *\n     * <p>The same as format(\"%Y%m%dT%H%M%S\"), or format(\"%Y%m%dT%H%M%SZ\") for a Time with a\n     * timezone set to \"UTC\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(Time that)",
    "returnType" : "void",
    "comment" : "\n     * Copy the value of that to this Time object. No normalization happens.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(int second, int minute, int hour, int monthDay, int month, int year)",
    "returnType" : "void",
    "comment" : "\n     * Sets the fields. Sets weekDay, yearDay and gmtoff to 0, and isDst to -1.\n     * Call {@link #normalize(boolean)} if you need those.\n     ",
    "links" : [ "#normalize" ]
  }, {
    "name" : "public void set(int monthDay, int month, int year)",
    "returnType" : "void",
    "comment" : "\n     * Sets the date from the given fields.  Also sets allDay to true.\n     * Sets weekDay, yearDay and gmtoff to 0, and isDst to -1.\n     * Call {@link #normalize(boolean)} if you need those.\n     *\n     * @param monthDay the day of the month (in the range [1,31])\n     * @param month the zero-based month number (in the range [0,11])\n     * @param year the year\n     ",
    "links" : [ "#normalize" ]
  }, {
    "name" : "public boolean before(Time that)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the time represented by this Time object occurs before\n     * the given time.\n     *\n     * <p>\n     * Equivalent to {@code Time.compare(this, that) < 0}. See\n     * {@link #compare(Time, Time)} for details.\n     *\n     * @param that a given Time object to compare against\n     * @return true if this time is less than the given time\n     ",
    "links" : [ "#compare" ]
  }, {
    "name" : "public boolean after(Time that)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the time represented by this Time object occurs after\n     * the given time.\n     *\n     * <p>\n     * Equivalent to {@code Time.compare(this, that) > 0}. See\n     * {@link #compare(Time, Time)} for details.\n     *\n     * @param that a given Time object to compare against\n     * @return true if this time is greater than the given time\n     ",
    "links" : [ "#compare" ]
  }, {
    "name" : "public int getWeekNumber()",
    "returnType" : "int",
    "comment" : "\n     * Computes the week number according to ISO 8601.  The current Time\n     * object must already be normalized because this method uses the\n     * yearDay and weekDay fields.\n     *\n     * <p>\n     * In IS0 8601, weeks start on Monday.\n     * The first week of the year (week 1) is defined by ISO 8601 as the\n     * first week with four or more of its days in the starting year.\n     * Or equivalently, the week containing January 4.  Or equivalently,\n     * the week with the year's first Thursday in it.\n     * </p>\n     *\n     * <p>\n     * The week number can be calculated by counting Thursdays.  Week N\n     * contains the Nth Thursday of the year.\n     * </p>\n     *\n     * @return the ISO week number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String format3339(boolean allDay)",
    "returnType" : "String",
    "comment" : "\n     * Return a string in the RFC 3339 format.\n     * <p>\n     * If allDay is true, expresses the time as Y-M-D</p>\n     * <p>\n     * Otherwise, if the timezone is UTC, expresses the time as Y-M-D-T-H-M-S UTC</p>\n     * <p>\n     * Otherwise the time is expressed the time as Y-M-D-T-H-M-S +- GMT</p>\n     * @return string in the RFC 3339 format.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isEpoch(Time time)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the instant of the supplied time would be for the\n     * Gregorian calendar date January 1, 1970 <em>for a user observing UTC\n     * </em>, i.e. the timezone of the time object is ignored.\n     * <p>\n     * See {@link #getJulianDay(long, long)} for how to determine the Julian day\n     * for the timezone of the time object.\n     * <p>\n     * This method can return an incorrect answer when the date / time fields have\n     * been set to a local time that contradicts the available timezone information.\n     *\n     * @param time the time to test\n     * @return true if epoch.\n     ",
    "links" : [ "#getJulianDay" ]
  }, {
    "name" : "public static int getJulianDay(long millis, long gmtoffSeconds)",
    "returnType" : "int",
    "comment" : "\n     * Computes the Julian day number for a point in time in a particular\n     * timezone. The Julian day for a given calendar date is the same for\n     * every timezone. For example, the Julian day for July 1, 2008 is\n     * 2454649.\n     *\n     * <p>Callers must pass the time in UTC millisecond (as can be returned\n     * by {@link #toMillis(boolean)} or {@link #normalize(boolean)})\n     * and the offset from UTC of the timezone in seconds at that time (as\n     * might be in {@link #gmtoff}).\n     *\n     * <p>The Julian day is useful for testing if two events occur on the\n     * same calendar date and for determining the relative time of an event\n     * from the present (\"yesterday\", \"3 days ago\", etc.).\n     *\n     * @param millis the time in UTC milliseconds\n     * @param gmtoffSeconds the offset from UTC in seconds\n     * @return the Julian day\n     * @deprecated Use {@link java.time.temporal.JulianFields#JULIAN_DAY} instead.\n     ",
    "links" : [ "#toMillis", "#normalize", "#gmtoff", "java.time.temporal.JulianFields#JULIAN_DAY" ]
  }, {
    "name" : "public long setJulianDay(int julianDay)",
    "returnType" : "long",
    "comment" : "\n     * <p>Sets the time from the given Julian day number, which must be based on\n     * the same timezone that is set in this Time object.  The \"gmtoff\" field\n     * need not be initialized because the given Julian day may have a different\n     * GMT offset than whatever is currently stored in this Time object anyway.\n     * After this method returns all the fields will be normalized and the time\n     * will be set to 12am at the beginning of the given Julian day.\n     * </p>\n     *\n     * <p>\n     * The only exception to this is if 12am does not exist for that day because\n     * of daylight saving time.  For example, Cairo, Eqypt moves time ahead one\n     * hour at 12am on April 25, 2008 and there are a few other places that\n     * also change daylight saving time at 12am.  In those cases, the time\n     * will be set to 1am.\n     * </p>\n     *\n     * @param julianDay the Julian day in the timezone for this Time object\n     * @return the UTC milliseconds for the beginning of the Julian day\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getWeeksSinceEpochFromJulianDay(int julianDay, int firstDayOfWeek)",
    "returnType" : "int",
    "comment" : "\n     * Returns the week since {@link #EPOCH_JULIAN_DAY} (Jan 1, 1970) adjusted\n     * for first day of week. This takes a julian day and the week start day and\n     * calculates which week since {@link #EPOCH_JULIAN_DAY} that day occurs in,\n     * starting at 0. *Do not* use this to compute the ISO week number for the\n     * year.\n     *\n     * @param julianDay The julian day to calculate the week number for\n     * @param firstDayOfWeek Which week day is the first day of the week, see\n     *            {@link #SUNDAY}\n     * @return Weeks since the epoch\n     ",
    "links" : [ "#EPOCH_JULIAN_DAY", "#EPOCH_JULIAN_DAY", "#SUNDAY" ]
  }, {
    "name" : "public static int getJulianMondayFromWeeksSinceEpoch(int week)",
    "returnType" : "int",
    "comment" : "\n     * Takes a number of weeks since the epoch and calculates the Julian day of\n     * the Monday for that week. This assumes that the week containing the\n     * {@link #EPOCH_JULIAN_DAY} is considered week 0. It returns the Julian day\n     * for the Monday week weeks after the Monday of the week containing the\n     * epoch.\n     *\n     * @param week Number of weeks since the epoch\n     * @return The julian day for the Monday of the given week since the epoch\n     ",
    "links" : [ "#EPOCH_JULIAN_DAY" ]
  } ],
  "variableNames" : [ "Y_M_D_T_H_M_S_000", "Y_M_D_T_H_M_S_000_Z", "Y_M_D", "TIMEZONE_UTC", "EPOCH_JULIAN_DAY", "MONDAY_BEFORE_JULIAN_EPOCH", "allDay", "second", "minute", "hour", "monthDay", "month", "year", "weekDay", "yearDay", "isDst", "gmtoff", "timezone", "SECOND", "MINUTE", "HOUR", "MONTH_DAY", "MONTH", "YEAR", "WEEK_DAY", "YEAR_DAY", "WEEK_NUM", "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "calculator", "DAYS_PER_MONTH", "sThursdayOffset" ],
  "methodNames" : [ "private void initialize(String timezoneId)", "public long normalize(boolean ignoreDst)", "public void switchTimezone(String timezone)", "public int getActualMaximum(int field)", "public void clear(String timezoneId)", "public static int compare(Time a, Time b)", "public String format(String format)", "public String toString()", "public boolean parse(String s)", "private boolean parseInternal(String s)", "private void checkChar(String s, int spos, char expected)", "private static int getChar(String s, int spos, int mul)", "public boolean parse3339(String s)", "private boolean parse3339Internal(String s)", "public static String getCurrentTimezone()", "public void setToNow()", "public long toMillis(boolean ignoreDst)", "public void set(long millis)", "public String format2445()", "public void set(Time that)", "public void set(int second, int minute, int hour, int monthDay, int month, int year)", "public void set(int monthDay, int month, int year)", "public boolean before(Time that)", "public boolean after(Time that)", "public int getWeekNumber()", "public String format3339(boolean allDay)", "public static boolean isEpoch(Time time)", "public static int getJulianDay(long millis, long gmtoffSeconds)", "public long setJulianDay(int julianDay)", "public static int getWeeksSinceEpochFromJulianDay(int julianDay, int firstDayOfWeek)", "public static int getJulianMondayFromWeeksSinceEpoch(int week)" ]
}