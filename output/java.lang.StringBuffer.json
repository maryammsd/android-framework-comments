{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/StringBuffer.java",
  "packageName" : "java.lang",
  "className" : "StringBuffer",
  "comment" : "\n * A thread-safe, mutable sequence of characters.\n * A string buffer is like a {@link String}, but can be modified. At any\n * point in time it contains some particular sequence of characters, but\n * the length and content of the sequence can be changed through certain\n * method calls.\n * <p>\n * String buffers are safe for use by multiple threads. The methods\n * are synchronized where necessary so that all the operations on any\n * particular instance behave as if they occur in some serial order\n * that is consistent with the order of the method calls made by each of\n * the individual threads involved.\n * <p>\n * The principal operations on a {@code StringBuffer} are the\n * {@code append} and {@code insert} methods, which are\n * overloaded so as to accept data of any type. Each effectively\n * converts a given datum to a string and then appends or inserts the\n * characters of that string to the string buffer. The\n * {@code append} method always adds these characters at the end\n * of the buffer; the {@code insert} method adds the characters at\n * a specified point.\n * <p>\n * For example, if {@code z} refers to a string buffer object\n * whose current contents are {@code \"start\"}, then\n * the method call {@code z.append(\"le\")} would cause the string\n * buffer to contain {@code \"startle\"}, whereas\n * {@code z.insert(4, \"le\")} would alter the string buffer to\n * contain {@code \"starlet\"}.\n * <p>\n * In general, if sb refers to an instance of a {@code StringBuffer},\n * then {@code sb.append(x)} has the same effect as\n * {@code sb.insert(sb.length(), x)}.\n * <p>\n * Whenever an operation occurs involving a source sequence (such as\n * appending or inserting from a source sequence), this class synchronizes\n * only on the string buffer performing the operation, not on the source.\n * Note that while {@code StringBuffer} is designed to be safe to use\n * concurrently from multiple threads, if the constructor or the\n * {@code append} or {@code insert} operation is passed a source sequence\n * that is shared across threads, the calling code must ensure\n * that the operation has a consistent and unchanging view of the source\n * sequence for the duration of the operation.\n * This could be satisfied by the caller holding a lock during the\n * operation's call, by using an immutable source sequence, or by not\n * sharing the source sequence across threads.\n * <p>\n * Every string buffer has a capacity. As long as the length of the\n * character sequence contained in the string buffer does not exceed\n * the capacity, it is not necessary to allocate a new internal\n * buffer array. If the internal buffer overflows, it is\n * automatically made larger.\n * <p>\n * Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n * <p>\n * As of  release JDK 5, this class has been supplemented with an equivalent\n * class designed for use by a single thread, {@link StringBuilder}.  The\n * {@code StringBuilder} class should generally be used in preference to\n * this one, as it supports all of the same operations but it is faster, as\n * it performs no synchronization.\n *\n * @apiNote\n * {@code StringBuffer} implements {@code Comparable} but does not override\n * {@link Object#equals equals}. Thus, the natural ordering of {@code StringBuffer}\n * is inconsistent with equals. Care should be exercised if {@code StringBuffer}\n * objects are used as keys in a {@code SortedMap} or elements in a {@code SortedSet}.\n * See {@link Comparable}, {@link java.util.SortedMap SortedMap}, or\n * {@link java.util.SortedSet SortedSet} for more information.\n *\n * @author      Arthur van Hoff\n * @see     java.lang.StringBuilder\n * @see     java.lang.String\n * @since   1.0\n ",
  "links" : [ "java.lang.Object#equals", "java.util.SortedSet", "java.lang.StringBuilder", "java.lang.Comparable", "java.lang.String", "java.lang.NullPointerException", "java.util.SortedMap" ],
  "variables" : [ {
    "name" : "toStringCache",
    "type" : "String",
    "comment" : "\n     * A cache of the last value returned by toString. Cleared\n     * whenever the StringBuffer is modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.0.2 for interoperability ",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "java.io.ObjectStreamField[]",
    "comment" : "\n     * Serializable fields for StringBuffer.\n     *\n     * @serialField value  char[]\n     *              The backing character array of this StringBuffer.\n     * @serialField count int\n     *              The number of characters in this StringBuffer.\n     * @serialField shared  boolean\n     *              A flag indicating whether the backing array is shared.\n     *              The value is ignored upon deserialization.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized int compareTo(StringBuffer another)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code StringBuffer} instances lexicographically. This method\n     * follows the same rules for lexicographical comparison as defined in the\n     * {@linkplain java.lang.CharSequence#compare(java.lang.CharSequence,\n     * java.lang.CharSequence)  CharSequence.compare(this, another)} method.\n     *\n     * <p>\n     * For finer-grained, locale-sensitive String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @implNote\n     * This method synchronizes on {@code this}, the current object, but not\n     * {@code StringBuffer another} with which {@code this StringBuffer} is compared.\n     *\n     * @param another the {@code StringBuffer} to be compared with\n     *\n     * @return  the value {@code 0} if this {@code StringBuffer} contains the same\n     * character sequence as that of the argument {@code StringBuffer}; a negative integer\n     * if this {@code StringBuffer} is lexicographically less than the\n     * {@code StringBuffer} argument; or a positive integer if this {@code StringBuffer}\n     * is lexicographically greater than the {@code StringBuffer} argument.\n     *\n     * @since 11\n     ",
    "links" : [ "java.text.Collator" ]
  }, {
    "name" : "public synchronized int length()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized int capacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void ensureCapacity(int minimumCapacity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void trimToSize()",
    "returnType" : "void",
    "comment" : "\n     * @since      1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setLength(int newLength)",
    "returnType" : "void",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @see        #length()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized char charAt(int index)",
    "returnType" : "char",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @see        #length()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int codePointAt(int index)",
    "returnType" : "int",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since      1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int codePointBefore(int index)",
    "returnType" : "int",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since     1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int codePointCount(int beginIndex, int endIndex)",
    "returnType" : "int",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since     1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int offsetByCodePoints(int index, int codePointOffset)",
    "returnType" : "int",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since     1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)",
    "returnType" : "void",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setCharAt(int index, char ch)",
    "returnType" : "void",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @see        #length()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(Object obj)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(String str)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(StringBuffer sb)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Appends the specified {@code StringBuffer} to this sequence.\n     * <p>\n     * The characters of the {@code StringBuffer} argument are appended,\n     * in order, to the contents of this {@code StringBuffer}, increasing the\n     * length of this {@code StringBuffer} by the length of the argument.\n     * If {@code sb} is {@code null}, then the four characters\n     * {@code \"null\"} are appended to this {@code StringBuffer}.\n     * <p>\n     * Let <i>n</i> be the length of the old character sequence, the one\n     * contained in the {@code StringBuffer} just prior to execution of the\n     * {@code append} method. Then the character at index <i>k</i> in\n     * the new character sequence is equal to the character at index <i>k</i>\n     * in the old character sequence, if <i>k</i> is less than <i>n</i>;\n     * otherwise, it is equal to the character at index <i>k-n</i> in the\n     * argument {@code sb}.\n     * <p>\n     * This method synchronizes on {@code this}, the destination\n     * object, but does not synchronize on the source ({@code sb}).\n     *\n     * @param   sb   the {@code StringBuffer} to append.\n     * @return  a reference to this object.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " synchronized StringBuffer append(AbstractStringBuilder asb)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(CharSequence s)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Appends the specified {@code CharSequence} to this\n     * sequence.\n     * <p>\n     * The characters of the {@code CharSequence} argument are appended,\n     * in order, increasing the length of this sequence by the length of the\n     * argument.\n     *\n     * <p>The result of this method is exactly the same as if it were an\n     * invocation of this.append(s, 0, s.length());\n     *\n     * <p>This method synchronizes on {@code this}, the destination\n     * object, but does not synchronize on the source ({@code s}).\n     *\n     * <p>If {@code s} is {@code null}, then the four characters\n     * {@code \"null\"} are appended.\n     *\n     * @param   s the {@code CharSequence} to append.\n     * @return  a reference to this object.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(CharSequence s, int start, int end)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since      1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(char[] str)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(char[] str, int offset, int len)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(boolean b)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(char c)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(int i)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer appendCodePoint(int codePoint)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(long lng)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(float f)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer append(double d)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer delete(int start, int end)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     * @since      1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer deleteCharAt(int index)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     * @since      1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer replace(int start, int end, String str)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     * @since      1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String substring(int start)",
    "returnType" : "String",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     * @since      1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized CharSequence subSequence(int start, int end)",
    "returnType" : "CharSequence",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since      1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String substring(int start, int end)",
    "returnType" : "String",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     * @since      1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer insert(int index, char[] str, int offset, int len)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     * @since      1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer insert(int offset, Object obj)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer insert(int offset, String str)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer insert(int offset, char[] str)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer insert(int dstOffset, CharSequence s)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since      1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer insert(int dstOffset, CharSequence s, int start, int end)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since      1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer insert(int offset, boolean b)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer insert(int offset, char c)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer insert(int offset, int i)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer insert(int offset, long l)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer insert(int offset, float f)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer insert(int offset, double d)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(String str)",
    "returnType" : "int",
    "comment" : "\n     * @since      1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int indexOf(String str, int fromIndex)",
    "returnType" : "int",
    "comment" : "\n     * @since      1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public int lastIndexOf(String str)",
    "returnType" : "int",
    "comment" : "\n     * @since      1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int lastIndexOf(String str, int fromIndex)",
    "returnType" : "int",
    "comment" : "\n     * @since      1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized StringBuffer reverse()",
    "returnType" : "StringBuffer",
    "comment" : "\n     * @since   1.0.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * readObject is called to restore the state of the StringBuffer from\n     * a stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * readObject is called to restore the state of the StringBuffer from\n     * a stream.\n     ",
    "links" : [ ]
  }, {
    "name" : " synchronized void getBytes(byte[] dst, int dstBegin, byte coder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized int compareTo(StringBuffer another)", "public synchronized int length()", "public synchronized int capacity()", "public synchronized void ensureCapacity(int minimumCapacity)", "public synchronized void trimToSize()", "public synchronized void setLength(int newLength)", "public synchronized char charAt(int index)", "public synchronized int codePointAt(int index)", "public synchronized int codePointBefore(int index)", "public synchronized int codePointCount(int beginIndex, int endIndex)", "public synchronized int offsetByCodePoints(int index, int codePointOffset)", "public synchronized void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)", "public synchronized void setCharAt(int index, char ch)", "public synchronized StringBuffer append(Object obj)", "public synchronized StringBuffer append(String str)", "public synchronized StringBuffer append(StringBuffer sb)", " synchronized StringBuffer append(AbstractStringBuilder asb)", "public synchronized StringBuffer append(CharSequence s)", "public synchronized StringBuffer append(CharSequence s, int start, int end)", "public synchronized StringBuffer append(char[] str)", "public synchronized StringBuffer append(char[] str, int offset, int len)", "public synchronized StringBuffer append(boolean b)", "public synchronized StringBuffer append(char c)", "public synchronized StringBuffer append(int i)", "public synchronized StringBuffer appendCodePoint(int codePoint)", "public synchronized StringBuffer append(long lng)", "public synchronized StringBuffer append(float f)", "public synchronized StringBuffer append(double d)", "public synchronized StringBuffer delete(int start, int end)", "public synchronized StringBuffer deleteCharAt(int index)", "public synchronized StringBuffer replace(int start, int end, String str)", "public synchronized String substring(int start)", "public synchronized CharSequence subSequence(int start, int end)", "public synchronized String substring(int start, int end)", "public synchronized StringBuffer insert(int index, char[] str, int offset, int len)", "public synchronized StringBuffer insert(int offset, Object obj)", "public synchronized StringBuffer insert(int offset, String str)", "public synchronized StringBuffer insert(int offset, char[] str)", "public StringBuffer insert(int dstOffset, CharSequence s)", "public synchronized StringBuffer insert(int dstOffset, CharSequence s, int start, int end)", "public StringBuffer insert(int offset, boolean b)", "public synchronized StringBuffer insert(int offset, char c)", "public StringBuffer insert(int offset, int i)", "public StringBuffer insert(int offset, long l)", "public StringBuffer insert(int offset, float f)", "public StringBuffer insert(int offset, double d)", "public int indexOf(String str)", "public synchronized int indexOf(String str, int fromIndex)", "public int lastIndexOf(String str)", "public synchronized int lastIndexOf(String str, int fromIndex)", "public synchronized StringBuffer reverse()", "public synchronized String toString()", "private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", " synchronized void getBytes(byte[] dst, int dstBegin, byte coder)" ],
  "variableNames" : [ "toStringCache", "serialVersionUID", "serialPersistentFields" ]
}