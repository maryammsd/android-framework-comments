{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/SizeF.java",
  "packageName" : "android.util",
  "className" : "SizeF",
  "comment" : "\n * Immutable class for describing width and height dimensions in some arbitrary\n * unit.\n * <p>\n * Width and height are finite values stored as a floating point representation.\n * </p>\n ",
  "variables" : [ {
    "name" : "mWidth",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public float getWidth()",
    "returnType" : "float",
    "comment" : "\n     * Get the width of the size (as an arbitrary unit).\n     * @return width\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getHeight()",
    "returnType" : "float",
    "comment" : "\n     * Get the height of the size (as an arbitrary unit).\n     * @return height\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(final Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this size is equal to another size.\n     *\n     * <p>Two sizes are equal if and only if both their widths and heights are the same.</p>\n     *\n     * <p>For this purpose, the width/height float values are considered to be the same if and only\n     * if the method {@link Float#floatToIntBits(float)} returns the identical {@code int} value\n     * when applied to each.</p>\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "#floatToIntBits(float)" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the size represented as a string with the format {@code \"WxH\"}\n     *\n     * @return string representation of the size\n     ",
    "links" : [ ]
  }, {
    "name" : "private static NumberFormatException invalidSizeF(String s)",
    "returnType" : "NumberFormatException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static SizeF parseSizeF(String string) throws NumberFormatException",
    "returnType" : "SizeF",
    "comment" : "\n     * Parses the specified string as a size value.\n     * <p>\n     * The ASCII characters {@code \\}{@code u002a} ('*') and\n     * {@code \\}{@code u0078} ('x') are recognized as separators between\n     * the width and height.</p>\n     * <p>\n     * For any {@code SizeF s}: {@code SizeF.parseSizeF(s.toString()).equals(s)}.\n     * However, the method also handles sizes expressed in the\n     * following forms:</p>\n     * <p>\n     * \"<i>width</i>{@code x}<i>height</i>\" or\n     * \"<i>width</i>{@code *}<i>height</i>\" {@code => new SizeF(width, height)},\n     * where <i>width</i> and <i>height</i> are string floats potentially\n     * containing a sign, such as \"-10.3\", \"+7\" or \"5.2\", but not containing\n     * an {@code 'x'} (such as a float in hexadecimal string format).</p>\n     *\n     * <pre>{@code\n     * SizeF.parseSizeF(\"3.2*+6\").equals(new SizeF(3.2f, 6.0f)) == true\n     * SizeF.parseSizeF(\"-3x-6\").equals(new SizeF(-3.0f, -6.0f)) == true\n     * SizeF.parseSizeF(\"4 by 3\") => throws NumberFormatException\n     * }</pre>\n     *\n     * @param string the string representation of a size value.\n     * @return the size value represented by {@code string}.\n     *\n     * @throws NumberFormatException if {@code string} cannot be parsed\n     * as a size value.\n     * @throws NullPointerException if {@code string} was {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mWidth", "mHeight" ],
  "methodNames" : [ "public float getWidth()", "public float getHeight()", "public boolean equals(final Object obj)", "public String toString()", "private static NumberFormatException invalidSizeF(String s)", "public static SizeF parseSizeF(String string) throws NumberFormatException", "public int hashCode()" ]
}