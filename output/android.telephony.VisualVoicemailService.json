{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/VisualVoicemailService.java",
  "packageName" : "android.telephony",
  "className" : "VisualVoicemailService",
  "comment" : "\n * This service is implemented by dialer apps that wishes to handle OMTP or similar visual\n * voicemails. Telephony binds to this service when the cell service is first connected, a visual\n * voicemail SMS has been received, or when a SIM has been removed. Telephony will only bind to the\n * default dialer for such events (See {@link TelecomManager#getDefaultDialerPackage()}). The\n * {@link android.service.carrier.CarrierMessagingService} precedes the VisualVoicemailService in\n * the SMS filtering chain and may intercept the visual voicemail SMS before it reaches this\n * service.\n * <p>\n * To extend this class, The service must be declared in the manifest file with\n * the {@link android.Manifest.permission#BIND_VISUAL_VOICEMAIL_SERVICE} permission and include an\n * intent filter with the {@link #SERVICE_INTERFACE} action.\n * <p>\n * Below is an example manifest registration for a {@code VisualVoicemailService}.\n * <pre>\n * {@code\n * <service android:name=\"your.package.YourVisualVoicemailServiceImplementation\"\n *          android:permission=\"android.permission.BIND_VISUAL_VOICEMAIL_SERVICE\">\n *      <intent-filter>\n *          <action android:name=\"android.telephony.VisualVoicemailService\"/>\n *      </intent-filter>\n * </service>\n * }\n * </pre>\n ",
  "links" : [ "android.telecom.TelecomManager#getDefaultDialerPackage()", "#SERVICE_INTERFACE", "android.service.carrier.CarrierMessagingService", "android.Manifest.permission#BIND_VISUAL_VOICEMAIL_SERVICE" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "MSG_ON_CELL_SERVICE_CONNECTED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MSG_ON_SMS_RECEIVED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MSG_ON_SIM_REMOVED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MSG_TASK_ENDED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MSG_TASK_STOPPED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_PHONE_ACCOUNT_HANDLE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_SMS",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMessenger",
    "type" : "Messenger",
    "comment" : "\n     * Handles messages sent by telephony.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onCellServiceConnected(VisualVoicemailTask task, PhoneAccountHandle phoneAccountHandle)",
    "returnType" : "void",
    "comment" : "\n     * Called when the cellular service is connected on a {@link PhoneAccountHandle} for the first\n     * time, or when the carrier config has changed. It will not be called when the signal is lost\n     * then restored.\n     *\n     * @param task The task representing this event. {@link VisualVoicemailTask#finish()} must be\n     * called when the task is completed.\n     * @param phoneAccountHandle The {@link PhoneAccountHandle} triggering this event.\n     ",
    "links" : [ "android.telecom.PhoneAccountHandle", "#finish()" ]
  }, {
    "name" : "public abstract void onSmsReceived(VisualVoicemailTask task, VisualVoicemailSms sms)",
    "returnType" : "void",
    "comment" : "\n     * Called when a SMS matching the {@link VisualVoicemailSmsFilterSettings} set by\n     * {@link TelephonyManager#setVisualVoicemailSmsFilterSettings(VisualVoicemailSmsFilterSettings)\n     * }\n     * is received.\n     *\n     * @param task The task representing this event. {@link VisualVoicemailTask#finish()} must be\n     * called when the task is completed.\n     * @param sms The content of the received SMS.\n     ",
    "links" : [ "android.telephony.VisualVoicemailSmsFilterSettings", "#finish()", "android.telephony.TelephonyManager#setVisualVoicemailSmsFilterSettings(VisualVoicemailSmsFilterSettings)" ]
  }, {
    "name" : "public abstract void onSimRemoved(VisualVoicemailTask task, PhoneAccountHandle phoneAccountHandle)",
    "returnType" : "void",
    "comment" : "\n     * Called when a SIM is removed.\n     *\n     * @param task The task representing this event. {@link VisualVoicemailTask#finish()} must be\n     * called when the task is completed.\n     * @param phoneAccountHandle The {@link PhoneAccountHandle} triggering this event.\n     ",
    "links" : [ "android.telecom.PhoneAccountHandle", "#finish()" ]
  }, {
    "name" : "public abstract void onStopped(VisualVoicemailTask task)",
    "returnType" : "void",
    "comment" : "\n     * Called before the system is about to terminate a task. The service should persist any\n     * necessary data and call finish on the task immediately.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void setSmsFilterSettings(Context context, PhoneAccountHandle phoneAccountHandle, VisualVoicemailSmsFilterSettings settings)",
    "returnType" : "void",
    "comment" : "\n     * Set the visual voicemail SMS filter settings for the VisualVoicemailService.\n     * {@link #onSmsReceived(VisualVoicemailTask, VisualVoicemailSms)} will be called when\n     * a SMS matching the settings is received. The caller should have\n     * {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE} and implements a\n     * VisualVoicemailService.\n     * <p>\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}\n     *\n     * @param phoneAccountHandle The account to apply the settings to.\n     * @param settings The settings for the filter, or {@code null} to disable the filter.\n     *\n     * @hide\n     ",
    "links" : [ "#onSmsReceived(VisualVoicemailTask", "android.Manifest.permission#READ_PHONE_STATE" ]
  }, {
    "name" : "public static final void sendVisualVoicemailSms(Context context, PhoneAccountHandle phoneAccountHandle, String number, short port, String text, PendingIntent sentIntent)",
    "returnType" : "void",
    "comment" : "\n     * Send a visual voicemail SMS. The caller must be the current default dialer.\n     * <p>\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#SEND_SMS SEND_SMS}\n     *\n     * @param phoneAccountHandle The account to send the SMS with.\n     * @param number The destination number.\n     * @param port The destination port for data SMS, or 0 for text SMS.\n     * @param text The message content. For data sms, it will be encoded as a UTF-8 byte stream.\n     * @param sentIntent The sent intent passed to the {@link SmsManager}\n     *\n     * @throws SecurityException if the caller is not the current default dialer\n     *\n     * @see SmsManager#sendDataMessage(String, String, short, byte[], PendingIntent, PendingIntent)\n     * @see SmsManager#sendTextMessage(String, String, String, PendingIntent, PendingIntent)\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.SmsManager", "android.Manifest.permission#SEND_SMS" ]
  }, {
    "name" : "private static int getSubId(Context context, PhoneAccountHandle phoneAccountHandle)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public IBinder onBind(Intent intent)", "public abstract void onCellServiceConnected(VisualVoicemailTask task, PhoneAccountHandle phoneAccountHandle)", "public abstract void onSmsReceived(VisualVoicemailTask task, VisualVoicemailSms sms)", "public abstract void onSimRemoved(VisualVoicemailTask task, PhoneAccountHandle phoneAccountHandle)", "public abstract void onStopped(VisualVoicemailTask task)", "public static final void setSmsFilterSettings(Context context, PhoneAccountHandle phoneAccountHandle, VisualVoicemailSmsFilterSettings settings)", "public static final void sendVisualVoicemailSms(Context context, PhoneAccountHandle phoneAccountHandle, String number, short port, String text, PendingIntent sentIntent)", "private static int getSubId(Context context, PhoneAccountHandle phoneAccountHandle)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "MSG_ON_CELL_SERVICE_CONNECTED", "MSG_ON_SMS_RECEIVED", "MSG_ON_SIM_REMOVED", "MSG_TASK_ENDED", "MSG_TASK_STOPPED", "DATA_PHONE_ACCOUNT_HANDLE", "DATA_SMS", "mMessenger" ]
}