{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/PackageParser.java",
  "packageName" : "android.content.pm",
  "className" : "SplitDependencyLoader",
  "comment" : "\n     * A helper class that implements the dependency tree traversal for splits. Callbacks\n     * are implemented by subclasses to notify whether a split has already been constructed\n     * and is cached, and to actually create the split requested.\n     *\n     * This helper is meant to be subclassed so as to reduce the number of allocations\n     * needed to make use of it.\n     *\n     * All inputs and outputs are assumed to be indices into an array of splits.\n     *\n     * @hide\n     * @deprecated Do not use. New changes should use\n     * {@link android.content.pm.split.SplitDependencyLoader} instead.\n     ",
  "links" : [ "android.content.pm.split.SplitDependencyLoader" ],
  "variables" : [ {
    "name" : "mDependencies",
    "type" : "SparseArray<int[]>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void loadDependenciesForSplit(@IntRange(from = 0) int splitIdx) throws E",
    "returnType" : "void",
    "comment" : "\n         * Traverses the dependency tree and constructs any splits that are not already\n         * cached. This routine short-circuits and skips the creation of splits closer to the\n         * root if they are cached, as reported by the subclass implementation of\n         * {@link #isSplitCached(int)}. The construction of splits is delegated to the subclass\n         * implementation of {@link #constructSplit(int, int[], int)}.\n         * @param splitIdx The index of the split to load. 0 represents the base Application.\n         ",
    "links" : [ "#isSplitCached(int)", "#constructSplit(int" ]
  }, {
    "name" : "private int[] collectConfigSplitIndices(int splitIdx)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract boolean isSplitCached(@IntRange(from = 0) int splitIdx)",
    "returnType" : "boolean",
    "comment" : "\n         * Subclass to report whether the split at `splitIdx` is cached and need not be constructed.\n         * It is assumed that if `splitIdx` is cached, any parent of `splitIdx` is also cached.\n         * @param splitIdx The index of the split to check for in the cache.\n         * @return true if the split is cached and does not need to be constructed.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void constructSplit(@IntRange(from = 0) int splitIdx, @NonNull @IntRange(from = 1) int[] configSplitIndices, @IntRange(from = -1) int parentSplitIdx) throws E",
    "returnType" : "void",
    "comment" : "\n         * Subclass to construct a split at index `splitIdx` with parent split `parentSplitIdx`.\n         * The result is expected to be cached by the subclass in its own structures.\n         * @param splitIdx The index of the split to construct. 0 represents the base Application.\n         * @param configSplitIndices The array of configuration splits to load along with this\n         *                           split. May be empty (length == 0) but never null.\n         * @param parentSplitIdx The index of the parent split. -1 if there is no parent.\n         * @throws E Subclass defined exception representing failure to construct a split.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static int[] append(int[] src, int elem)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static SparseArray<int[]> createDependenciesFromPackage(PackageLite pkg) throws SplitDependencyLoader.IllegalDependencyException",
    "returnType" : "SparseArray<int[]>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void loadDependenciesForSplit(@IntRange(from = 0) int splitIdx) throws E", "private int[] collectConfigSplitIndices(int splitIdx)", "protected abstract boolean isSplitCached(@IntRange(from = 0) int splitIdx)", "protected abstract void constructSplit(@IntRange(from = 0) int splitIdx, @NonNull @IntRange(from = 1) int[] configSplitIndices, @IntRange(from = -1) int parentSplitIdx) throws E", "private static int[] append(int[] src, int elem)", "public static SparseArray<int[]> createDependenciesFromPackage(PackageLite pkg) throws SplitDependencyLoader.IllegalDependencyException" ],
  "variableNames" : [ "mDependencies" ]
}