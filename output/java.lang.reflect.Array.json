{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/Array.java",
  "packageName" : "java.lang.reflect",
  "className" : "Array",
  "comment" : "\n * The {@code Array} class provides static methods to dynamically create and\n * access Java arrays.\n *\n * <p>{@code Array} permits widening conversions to occur during a get or set\n * operation, but throws an {@code IllegalArgumentException} if a narrowing\n * conversion would occur.\n *\n * @author Nakul Saraiya\n * @since 1.1\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Object newInstance(Class<?> componentType, int length) throws NegativeArraySizeException",
    "returnType" : "Object",
    "comment" : "\n     * Creates a new array with the specified component type and\n     * length.\n     * Invoking this method is equivalent to creating an array\n     * as follows:\n     * <blockquote>\n     * <pre>\n     * int[] x = {length};\n     * Array.newInstance(componentType, x);\n     * </pre>\n     * </blockquote>\n     *\n     * <p>The number of dimensions of the new array must not\n     * exceed 255.\n     *\n     * @param componentType the {@code Class} object representing the\n     * component type of the new array\n     * @param length the length of the new array\n     * @return the new array\n     * @exception NullPointerException if the specified\n     * {@code componentType} parameter is null\n     * @exception IllegalArgumentException if componentType is {@link\n     * Void#TYPE} or if the number of dimensions of the requested array\n     * instance exceed 255.\n     * @exception NegativeArraySizeException if the specified {@code length}\n     * is negative\n     ",
    "links" : [ "#TYPE" ]
  }, {
    "name" : "public static Object newInstance(Class<?> componentType, int... dimensions) throws IllegalArgumentException, NegativeArraySizeException",
    "returnType" : "Object",
    "comment" : "\n     * Creates a new array\n     * with the specified component type and dimensions.\n     * If {@code componentType}\n     * represents a non-array class or interface, the new array\n     * has {@code dimensions.length} dimensions and\n     * {@code componentType} as its component type. If\n     * {@code componentType} represents an array class, the\n     * number of dimensions of the new array is equal to the sum\n     * of {@code dimensions.length} and the number of\n     * dimensions of {@code componentType}. In this case, the\n     * component type of the new array is the component type of\n     * {@code componentType}.\n     *\n     * <p>The number of dimensions of the new array must not\n     * exceed 255.\n     *\n     * @param componentType the {@code Class} object representing the component\n     * type of the new array\n     * @param dimensions an array of {@code int} representing the dimensions of\n     * the new array\n     * @return the new array\n     * @exception NullPointerException if the specified\n     * {@code componentType} argument is null\n     * @exception IllegalArgumentException if the specified {@code dimensions}\n     * argument is a zero-dimensional array, if componentType is {@link\n     * Void#TYPE}, or if the number of dimensions of the requested array\n     * instance exceed 255.\n     * @exception NegativeArraySizeException if any of the components in\n     * the specified {@code dimensions} argument is negative.\n     ",
    "links" : [ "#TYPE" ]
  }, {
    "name" : "public static int getLength(Object array)",
    "returnType" : "int",
    "comment" : " Android-changed: Removal of explicit throws IllegalArgumentException from method signature.",
    "links" : [ ]
  }, {
    "name" : "public static Object get(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "Object",
    "comment" : " Android-changed: Non-native implementation of get(Object, int).",
    "links" : [ ]
  }, {
    "name" : "public static boolean getBoolean(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "boolean",
    "comment" : " Android-changed: Non-native implementation of getBoolean(Object, int).",
    "links" : [ ]
  }, {
    "name" : "public static byte getByte(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "byte",
    "comment" : " Android-changed: Non-native implementation of getByte(Object, int).",
    "links" : [ ]
  }, {
    "name" : "public static char getChar(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "char",
    "comment" : " Android-changed: Non-native implementation of getChar(Object, int).",
    "links" : [ ]
  }, {
    "name" : "public static short getShort(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "short",
    "comment" : " Android-changed: Non-native implementation of getShort(Object, int).",
    "links" : [ ]
  }, {
    "name" : "public static int getInt(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "int",
    "comment" : " Android-changed: Non-native implementation of getInt(Object, int).",
    "links" : [ ]
  }, {
    "name" : "public static long getLong(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "long",
    "comment" : " Android-changed: Non-native implementation of getLong(Object, int).",
    "links" : [ ]
  }, {
    "name" : "public static float getFloat(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "float",
    "comment" : " Android-changed: Non-native implementation of getFloat(Object, int).",
    "links" : [ ]
  }, {
    "name" : "public static double getDouble(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "double",
    "comment" : " Android-changed: Non-native implementation of getDouble(Object, int).",
    "links" : [ ]
  }, {
    "name" : "public static void set(Object array, int index, Object value) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "void",
    "comment" : " Android-changed: Non-native implementation of set(Object, int, Object).",
    "links" : [ ]
  }, {
    "name" : "public static void setBoolean(Object array, int index, boolean z)",
    "returnType" : "void",
    "comment" : " Android-changed: Removal of explicit runtime exceptions throws clause.",
    "links" : [ ]
  }, {
    "name" : "public static void setByte(Object array, int index, byte b) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "void",
    "comment" : " Android-changed: Non-native implementation of setByte(Object, int, byte).",
    "links" : [ ]
  }, {
    "name" : "public static void setChar(Object array, int index, char c) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "void",
    "comment" : " Android-changed: Non-native implementation of setChar(Object, int, char).",
    "links" : [ ]
  }, {
    "name" : "public static void setShort(Object array, int index, short s) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "void",
    "comment" : " Android-changed: Non-native implementation of setShort(Object, int, short).",
    "links" : [ ]
  }, {
    "name" : "public static void setInt(Object array, int index, int i) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "void",
    "comment" : " Android-changed: Non-native implementation of setInt(Object, int, int).",
    "links" : [ ]
  }, {
    "name" : "public static void setLong(Object array, int index, long l) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "void",
    "comment" : " Android-changed: Non-native implementation of setBoolean(Object, int, long).",
    "links" : [ ]
  }, {
    "name" : "public static void setFloat(Object array, int index, float f) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the indexed component of the specified array\n     * object to the specified {@code float} value.\n     * @param array the array\n     * @param index the index into the array\n     * @param f the new value of the indexed component\n     * @exception NullPointerException If the specified object argument\n     * is null\n     * @exception IllegalArgumentException If the specified object argument\n     * is not an array, or if the specified value cannot be converted\n     * to the underlying array's component type by an identity or a\n     * primitive widening conversion\n     * @exception ArrayIndexOutOfBoundsException If the specified {@code index}\n     * argument is negative, or if it is greater than or equal to\n     * the length of the specified array\n     * @see Array#set\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDouble(Object array, int index, double d) throws IllegalArgumentException, ArrayIndexOutOfBoundsException",
    "returnType" : "void",
    "comment" : " Android-changed: Non-native implementation of setDouble(Object, int, double).",
    "links" : [ ]
  }, {
    "name" : "private static Object newArray(Class<?> componentType, int length) throws NegativeArraySizeException",
    "returnType" : "Object",
    "comment" : " Android-changed: Non-native implementation of newArray(Class, int).",
    "links" : [ ]
  }, {
    "name" : "private static native Object createMultiArray(Class<?> componentType, int[] dimensions) throws NegativeArraySizeException",
    "returnType" : "Object",
    "comment" : "\n     * Create a multi-dimensional array of objects with the specified type.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native Object createObjectArray(Class<?> componentType, int length) throws NegativeArraySizeException",
    "returnType" : "Object",
    "comment" : "\n     * Create a one-dimensional array of objects with the specified type.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IllegalArgumentException notAnArray(Object o)",
    "returnType" : "IllegalArgumentException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static IllegalArgumentException incompatibleType(Object o)",
    "returnType" : "IllegalArgumentException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static RuntimeException badArray(Object array)",
    "returnType" : "RuntimeException",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Object newInstance(Class<?> componentType, int length) throws NegativeArraySizeException", "public static Object newInstance(Class<?> componentType, int... dimensions) throws IllegalArgumentException, NegativeArraySizeException", "public static int getLength(Object array)", "public static Object get(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static boolean getBoolean(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static byte getByte(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static char getChar(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static short getShort(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static int getInt(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static long getLong(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static float getFloat(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static double getDouble(Object array, int index) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static void set(Object array, int index, Object value) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static void setBoolean(Object array, int index, boolean z)", "public static void setByte(Object array, int index, byte b) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static void setChar(Object array, int index, char c) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static void setShort(Object array, int index, short s) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static void setInt(Object array, int index, int i) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static void setLong(Object array, int index, long l) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static void setFloat(Object array, int index, float f) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "public static void setDouble(Object array, int index, double d) throws IllegalArgumentException, ArrayIndexOutOfBoundsException", "private static Object newArray(Class<?> componentType, int length) throws NegativeArraySizeException", "private static native Object createMultiArray(Class<?> componentType, int[] dimensions) throws NegativeArraySizeException", "private static native Object createObjectArray(Class<?> componentType, int length) throws NegativeArraySizeException", "private static IllegalArgumentException notAnArray(Object o)", "private static IllegalArgumentException incompatibleType(Object o)", "private static RuntimeException badArray(Object array)" ],
  "variableNames" : [ ]
}