{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/LocationRequest.java",
  "packageName" : "android.location",
  "className" : "Builder",
  "comment" : "\n     * A builder class for {@link LocationRequest}.\n     ",
  "links" : [ "android.location.LocationRequest" ],
  "variables" : [ {
    "name" : "mIntervalMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQuality",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDurationMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxUpdates",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinUpdateIntervalMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinUpdateDistanceMeters",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxUpdateDelayMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHiddenFromAppOps",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdasGnssBypass",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBypass",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLowPower",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorkSource",
    "type" : "WorkSource",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setIntervalMillis(@IntRange(from = 0) long intervalMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the request interval. The request interval may be set to {@link #PASSIVE_INTERVAL}\n         * which indicates this request will not actively generate location updates (and thus will\n         * not be power blamed for location), but may receive location updates generated as a result\n         * of other location requests. A passive request must always have an explicit minimum\n         * update interval set.\n         *\n         * <p>Locations may be available at a faster interval than specified here, see\n         * {@link #setMinUpdateIntervalMillis(long)} for the behavior in that case.\n         ",
    "links" : [ "#setMinUpdateIntervalMillis(long)", "#PASSIVE_INTERVAL" ]
  }, {
    "name" : "public Builder setQuality(@Quality int quality)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the request quality. The quality is a hint to providers on how they should weigh\n         * power vs accuracy tradeoffs. High accuracy locations may cost more power to produce, and\n         * lower accuracy locations may cost less power to produce. Defaults to\n         * {@link #QUALITY_BALANCED_POWER_ACCURACY}.\n         ",
    "links" : [ "#QUALITY_BALANCED_POWER_ACCURACY" ]
  }, {
    "name" : "public Builder setQuality(@NonNull Criteria criteria)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDurationMillis(@IntRange(from = 1) long durationMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the duration this request will continue before being automatically removed. Defaults\n         * to <code>Long.MAX_VALUE</code>, which represents an unlimited duration.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMaxUpdates(@IntRange(from = 1, to = Integer.MAX_VALUE) int maxUpdates)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum number of location updates for this request before this request is\n         * automatically removed. Defaults to <code>Integer.MAX_VALUE</code>, which represents an\n         * unlimited number of updates.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMinUpdateIntervalMillis(@IntRange(from = 0) long minUpdateIntervalMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an explicit minimum update interval. If location updates are available faster than\n         * the request interval then an update will only occur if the minimum update interval has\n         * expired since the last location update. Defaults to no explicit minimum update interval\n         * set, which means some sensible default between 0 and the interval will be chosen. The\n         * exact value is not specified at the moment. If an exact known value is required, clients\n         * should set an explicit value themselves.\n         *\n         * <p class=note><strong>Note:</strong> Some allowance for jitter is already built into the\n         * minimum update interval, so you need not worry about updates blocked simply because they\n         * arrived a fraction of a second earlier than expected.\n         *\n         * <p class=\"note\"><strong>Note:</strong> When {@link #build()} is invoked, the minimum of\n         * the interval and the minimum update interval will be used as the minimum update interval\n         * of the built request.\n         ",
    "links" : [ "#build()" ]
  }, {
    "name" : "public Builder clearMinUpdateIntervalMillis()",
    "returnType" : "Builder",
    "comment" : "\n         * Clears an explicitly set minimum update interval and reverts to an implicit minimum\n         * update interval (ie, the minimum update interval is some sensible default between 0 and\n         * the interval).\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMinUpdateDistanceMeters(@FloatRange(from = 0, to = Float.MAX_VALUE) float minUpdateDistanceMeters)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the minimum update distance between location updates. If a potential location\n         * update is closer to the last location update than the minimum update distance, then\n         * the potential location update will not occur. Defaults to 0, which represents no minimum\n         * update distance.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMaxUpdateDelayMillis(@IntRange(from = 0) long maxUpdateDelayMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum time any location update may be delayed, and thus grouped with following\n         * updates to enable location batching. If the maximum update delay is equal to or greater\n         * than twice the interval, then location providers may provide batched results. Defaults to\n         * 0, which represents no batching allowed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setHiddenFromAppOps(boolean hiddenFromAppOps)",
    "returnType" : "Builder",
    "comment" : "\n         * If set to true, indicates that app ops should not be updated with location usage due to\n         * this request. This implies that someone else (usually the creator of the location\n         * request) is responsible for updating app ops as appropriate. Defaults to false.\n         *\n         * <p>Permissions enforcement occurs when resulting location request is actually used, not\n         * when this method is invoked.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAdasGnssBypass(boolean adasGnssBypass)",
    "returnType" : "Builder",
    "comment" : "\n         * If set to true, indicates that the client is an ADAS (Advanced Driving Assistance\n         * Systems) client, which requires access to GNSS even if location settings would normally\n         * deny this, in order to enable auto safety features. This field is only respected on\n         * automotive devices, and only if the client is recognized as a legitimate ADAS\n         * application. Defaults to false.\n         *\n         * <p>Permissions enforcement occurs when resulting location request is actually used, not\n         * when this method is invoked.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLocationSettingsIgnored(boolean locationSettingsIgnored)",
    "returnType" : "Builder",
    "comment" : "\n         * If set to true, indicates that location settings, throttling, background location limits,\n         * and any other possible limiting factors should be ignored in order to satisfy this\n         * request. This is only intended for use in user initiated emergency situations, and\n         * should be used extremely cautiously. Defaults to false.\n         *\n         * <p>Permissions enforcement occurs when resulting location request is actually used, not\n         * when this method is invoked.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLowPower(boolean lowPower)",
    "returnType" : "Builder",
    "comment" : "\n         * It set to true, indicates that extreme trade-offs should be made if possible to save\n         * power for this request. This usually involves specialized hardware modes which can\n         * greatly affect the quality of locations. Not all devices may support this. Defaults to\n         * false.\n         *\n         * <p>Permissions enforcement occurs when resulting location request is actually used, not\n         * when this method is invoked.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setWorkSource(@Nullable WorkSource workSource)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the work source to use for power blame for this location request. Defaults to an\n         * empty WorkSource, which implies the system is free to assign power blame as it determines\n         * best for this request (which usually means blaming the owner of the location listener).\n         *\n         * <p>Permissions enforcement occurs when resulting location request is actually used, not\n         * when this method is invoked.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest build()",
    "returnType" : "LocationRequest",
    "comment" : "\n         * Builds a location request from this builder. If an explicit minimum update interval is\n         * set, the minimum update interval of the location request will be the minimum of the\n         * interval and minimum update interval.\n         *\n         * <p>If building a passive request then you must have set an explicit minimum update\n         * interval.\n         *\n         * @throws IllegalStateException if building a passive request with no explicit minimum\n         * update interval set\n         * @return a new location request\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setIntervalMillis(@IntRange(from = 0) long intervalMillis)", "public Builder setQuality(@Quality int quality)", "public Builder setQuality(@NonNull Criteria criteria)", "public Builder setDurationMillis(@IntRange(from = 1) long durationMillis)", "public Builder setMaxUpdates(@IntRange(from = 1, to = Integer.MAX_VALUE) int maxUpdates)", "public Builder setMinUpdateIntervalMillis(@IntRange(from = 0) long minUpdateIntervalMillis)", "public Builder clearMinUpdateIntervalMillis()", "public Builder setMinUpdateDistanceMeters(@FloatRange(from = 0, to = Float.MAX_VALUE) float minUpdateDistanceMeters)", "public Builder setMaxUpdateDelayMillis(@IntRange(from = 0) long maxUpdateDelayMillis)", "public Builder setHiddenFromAppOps(boolean hiddenFromAppOps)", "public Builder setAdasGnssBypass(boolean adasGnssBypass)", "public Builder setLocationSettingsIgnored(boolean locationSettingsIgnored)", "public Builder setLowPower(boolean lowPower)", "public Builder setWorkSource(@Nullable WorkSource workSource)", "public LocationRequest build()" ],
  "variableNames" : [ "mIntervalMillis", "mQuality", "mDurationMillis", "mMaxUpdates", "mMinUpdateIntervalMillis", "mMinUpdateDistanceMeters", "mMaxUpdateDelayMillis", "mHiddenFromAppOps", "mAdasGnssBypass", "mBypass", "mLowPower", "mWorkSource" ]
}