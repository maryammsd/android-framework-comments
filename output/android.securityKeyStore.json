{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/security/KeyStore.java",
  "packageName" : "android.security",
  "className" : "KeyStore",
  "comment" : "\n * @hide This should not be made public in its present form because it\n * assumes that private and secret key bytes are available and would\n * preclude the use of hardware crypto.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_ERROR",
    "type" : "int",
    "comment" : " ResponseCodes - see system/security/keystore/include/keystore/keystore.h",
    "links" : [ ]
  }, {
    "name" : "LOCKED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNINITIALIZED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_DENIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_NOT_FOUND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALUE_CORRUPTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_ACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WRONG_PASSWORD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_ALREADY_EXISTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANNOT_ATTEST_IDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HARDWARE_TYPE_UNAVAILABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_AUTH_NEEDED",
    "type" : "int",
    "comment" : "\n     * Per operation authentication is needed before this operation is valid.\n     * This is returned from {@link #begin} when begin succeeds but the operation uses\n     * per-operation authentication and must authenticate before calling {@link #update} or\n     * {@link #finish}.\n     ",
    "links" : [ "#begin", "#update", "#finish" ]
  }, {
    "name" : "KEY_PERMANENTLY_INVALIDATED",
    "type" : "int",
    "comment" : " Used when a user changes their pin, invalidating old auth bound keys.",
    "links" : [ ]
  }, {
    "name" : "UID_SELF",
    "type" : "int",
    "comment" : " Used for UID field to indicate the calling UID.",
    "links" : [ ]
  }, {
    "name" : "FLAG_NONE",
    "type" : "int",
    "comment" : " Flags for \"put\" \"import\" and \"generate\"",
    "links" : [ ]
  }, {
    "name" : "FLAG_ENCRYPTED",
    "type" : "int",
    "comment" : "\n     * Indicates that this key (or key pair) must be encrypted at rest. This will protect the key\n     * (or key pair) with the secure lock screen credential (e.g., password, PIN, or pattern).\n     *\n     * <p>Note that this requires that the secure lock screen (e.g., password, PIN, pattern) is set\n     * up, otherwise key (or key pair) generation or import will fail. Moreover, this key (or key\n     * pair) will be deleted when the secure lock screen is disabled or reset (e.g., by the user or\n     * a Device Administrator). Finally, this key (or key pair) cannot be used until the user\n     * unlocks the secure lock screen after boot.\n     *\n     * @see KeyguardManager#isDeviceSecure()\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SOFTWARE",
    "type" : "int",
    "comment" : "\n     * Select Software keymaster device, which as of this writing is the lowest security\n     * level available on an android device. If neither FLAG_STRONGBOX nor FLAG_SOFTWARE is provided\n     * A TEE based keymaster implementation is implied.\n     *\n     * Need to be in sync with KeyStoreFlag in system/security/keystore/include/keystore/keystore.h\n     * For historical reasons this corresponds to the KEYSTORE_FLAG_FALLBACK flag.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CRITICAL_TO_DEVICE_ENCRYPTION",
    "type" : "int",
    "comment" : "\n     * A private flag that's only available to system server to indicate that this key is part of\n     * device encryption flow so it receives special treatment from keystore. For example this key\n     * will not be super encrypted, and it will be stored separately under an unique UID instead\n     * of the caller UID i.e. SYSTEM.\n     *\n     * Need to be in sync with KeyStoreFlag in system/security/keystore/include/keystore/keystore.h\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_STRONGBOX",
    "type" : "int",
    "comment" : "\n     * Select Strongbox keymaster device, which as of this writing the the highest security level\n     * available an android devices. If neither FLAG_STRONGBOX nor FLAG_SOFTWARE is provided\n     * A TEE based keymaster implementation is implied.\n     *\n     * Need to be in sync with KeyStoreFlag in system/security/keystore/include/keystore/keystore.h\n     ",
    "links" : [ ]
  }, {
    "name" : "mError",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IKeystoreService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_OK",
    "type" : "int",
    "comment" : " Keep in sync with confirmationui/1.0/types.hal.",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_CANCELED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_ABORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_OPERATION_PENDING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_IGNORED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_SYSTEM_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_UNIMPLEMENTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_UNEXPECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_UIERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_UIERROR_MISSING_GLYPH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_UIERROR_MESSAGE_TOO_LONG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIRMATIONUI_UIERROR_MALFORMED_UTF8_ENCODING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Context getApplicationContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static KeyStore getInstance()",
    "returnType" : "KeyStore",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized IBinder getToken()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public State state(int userId)",
    "returnType" : "State",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public State state()",
    "returnType" : "State",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isUnlocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] get(String key, int uid)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] get(String key)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] get(String key, int uid, boolean suppressKeyNotFoundWarning)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] get(String key, boolean suppressKeyNotFoundWarning)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean put(String key, byte[] value, int uid, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int insert(String key, byte[] value, int uid, int flags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int delete2(String key, int uid)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean delete(String key, int uid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean delete(String key)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(String key, int uid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(String key)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] list(String prefix, int uid)",
    "returnType" : "String[]",
    "comment" : "\n     * List all entries in the keystore for {@code uid} starting with {@code prefix}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] listUidsOfAuthBoundKeys()",
    "returnType" : "int[]",
    "comment" : "\n     * List uids of all keys that are auth bound to the current user.\n     * Only system is allowed to call this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] list(String prefix)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean lock(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempt to lock the keystore for {@code user}.\n     *\n     * @param userId Android user to lock.\n     * @return whether {@code user}'s keystore was locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean lock()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean unlock(int userId, String password)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempt to unlock the keystore for {@code user} with the password {@code password}.\n     * This is required before keystore entries created with FLAG_ENCRYPTED can be accessed or\n     * created.\n     *\n     * @param userId Android user ID to operate on\n     * @param password user's keystore password. Should be the most recent value passed to\n     * {@link #onUserPasswordChanged} for the user.\n     *\n     * @return whether the keystore was unlocked.\n     ",
    "links" : [ "#onUserPasswordChanged" ]
  }, {
    "name" : "public boolean unlock(String password)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the keystore for {@code userId} is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String grant(String key, int uid)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean ungrant(String key, int uid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getmtime(String key, int uid)",
    "returnType" : "long",
    "comment" : "\n     * Returns the last modification time of the key in milliseconds since the\n     * epoch. Will return -1L if the key could not be found or other error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getmtime(String key)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardwareBacked()",
    "returnType" : "boolean",
    "comment" : " TODO: remove this when it's removed from Settings",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardwareBacked(String keyType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean clearUid(int uid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLastError()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addRngEntropy(byte[] data, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int generateKeyInternal(String alias, KeymasterArguments args, byte[] entropy, int uid, int flags, KeyCharacteristics outCharacteristics) throws RemoteException, ExecutionException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int generateKey(String alias, KeymasterArguments args, byte[] entropy, int uid, int flags, KeyCharacteristics outCharacteristics)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int generateKey(String alias, KeymasterArguments args, byte[] entropy, int flags, KeyCharacteristics outCharacteristics)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getKeyCharacteristics(String alias, KeymasterBlob clientId, KeymasterBlob appId, int uid, KeyCharacteristics outCharacteristics)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getKeyCharacteristics(String alias, KeymasterBlob clientId, KeymasterBlob appId, KeyCharacteristics outCharacteristics)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int importKeyInternal(String alias, KeymasterArguments args, int format, byte[] keyData, int uid, int flags, KeyCharacteristics outCharacteristics) throws RemoteException, ExecutionException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int importKey(String alias, KeymasterArguments args, int format, byte[] keyData, int uid, int flags, KeyCharacteristics outCharacteristics)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int importKey(String alias, KeymasterArguments args, int format, byte[] keyData, int flags, KeyCharacteristics outCharacteristics)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getAlgorithmFromPKCS8(byte[] keyData)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private KeymasterArguments makeLegacyArguments(String algorithm)",
    "returnType" : "KeymasterArguments",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean importKey(String alias, byte[] keyData, int uid, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int importWrappedKeyInternal(String wrappedKeyAlias, byte[] wrappedKey, String wrappingKeyAlias, byte[] maskingKey, KeymasterArguments args, long rootSid, long fingerprintSid, KeyCharacteristics outCharacteristics) throws RemoteException, ExecutionException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int importWrappedKey(String wrappedKeyAlias, byte[] wrappedKey, String wrappingKeyAlias, byte[] maskingKey, KeymasterArguments args, long rootSid, long fingerprintSid, int uid, KeyCharacteristics outCharacteristics)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ExportResult exportKey(String alias, int format, KeymasterBlob clientId, KeymasterBlob appId, int uid)",
    "returnType" : "ExportResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ExportResult exportKey(String alias, int format, KeymasterBlob clientId, KeymasterBlob appId)",
    "returnType" : "ExportResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public OperationResult begin(String alias, int purpose, boolean pruneable, KeymasterArguments args, byte[] entropy, int uid)",
    "returnType" : "OperationResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public OperationResult begin(String alias, int purpose, boolean pruneable, KeymasterArguments args, byte[] entropy)",
    "returnType" : "OperationResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public OperationResult update(IBinder token, KeymasterArguments arguments, byte[] input)",
    "returnType" : "OperationResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public OperationResult finish(IBinder token, KeymasterArguments arguments, byte[] input, byte[] signature, byte[] entropy)",
    "returnType" : "OperationResult",
    "comment" : "\n     * Android KeyStore finish operation.\n     *\n     * @param token Authentication token.\n     * @param arguments Keymaster arguments\n     * @param input Optional additional input data.\n     * @param signature Optional signature to be verified.\n     * @param entropy Optional additional entropy\n     * @return OperationResult that will indicate success or error of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OperationResult finish(IBinder token, KeymasterArguments arguments, byte[] signature)",
    "returnType" : "OperationResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int abort(IBinder token)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int addAuthToken(byte[] authToken)",
    "returnType" : "int",
    "comment" : "\n     * Add an authentication record to the keystore authorization table.\n     *\n     * @param authToken The packed bytes of a hw_auth_token_t to be provided to keymaster.\n     * @return {@code KeyStore.NO_ERROR} on success, otherwise an error value corresponding to\n     * a {@code KeymasterDefs.KM_ERROR_} value or {@code KeyStore} ResponseCode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onUserPasswordChanged(int userId, String newPassword)",
    "returnType" : "boolean",
    "comment" : "\n     * Notify keystore that a user's password has changed.\n     *\n     * @param userId the user whose password changed.\n     * @param newPassword the new password or \"\" if the password was removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onUserAdded(int userId, int parentId)",
    "returnType" : "void",
    "comment" : "\n     * Notify keystore that a user was added.\n     *\n     * @param userId the new user.\n     * @param parentId the parent of the new user, or -1 if the user has no parent. If parentId is\n     * specified then the new user's keystore will be intialized with the same secure lockscreen\n     * password as the parent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onUserAdded(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Notify keystore that a user was added.\n     *\n     * @param userId the new user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onUserRemoved(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Notify keystore that a user was removed.\n     *\n     * @param userId the removed user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onUserPasswordChanged(String newPassword)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onUserLockedStateChanged(int userHandle, boolean locked)",
    "returnType" : "void",
    "comment" : "\n     * Notify keystore about the latest user locked state. This is to support keyguard-bound key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int attestKey(String alias, KeymasterArguments params, KeymasterCertificateChain outChain)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int attestDeviceIds(KeymasterArguments params, KeymasterCertificateChain outChain)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDeviceOffBody()",
    "returnType" : "void",
    "comment" : "\n     * Notify keystore that the device went off-body.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int presentConfirmationPrompt(IBinder listener, String promptText, byte[] extraData, String locale, int uiOptionsAsFlags)",
    "returnType" : "int",
    "comment" : "\n     * Requests keystore call into the confirmationui HAL to display a prompt.\n     *\n     * @param listener the binder to use for callbacks.\n     * @param promptText the prompt to display.\n     * @param extraData extra data / nonce from application.\n     * @param locale the locale as a BCP 47 langauge tag.\n     * @param uiOptionsAsFlags the UI options to use, as flags.\n     * @return one of the {@code CONFIRMATIONUI_*} constants, for\n     * example {@code KeyStore.CONFIRMATIONUI_OK}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int cancelConfirmationPrompt(IBinder listener)",
    "returnType" : "int",
    "comment" : "\n     * Requests keystore call into the confirmationui HAL to cancel displaying a prompt.\n     *\n     * @param listener the binder passed to the {@link #presentConfirmationPrompt} method.\n     * @return one of the {@code CONFIRMATIONUI_*} constants, for\n     * example {@code KeyStore.CONFIRMATIONUI_OK}.\n     ",
    "links" : [ "#presentConfirmationPrompt" ]
  }, {
    "name" : "public boolean isConfirmationPromptSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Requests keystore to check if the confirmationui HAL is available.\n     *\n     * @return whether the confirmationUI HAL is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static KeyStoreException getKeyStoreException(int errorCode)",
    "returnType" : "KeyStoreException",
    "comment" : "\n     * Returns a {@link KeyStoreException} corresponding to the provided keystore/keymaster error\n     * code.\n     ",
    "links" : [ "KeyStoreException" ]
  }, {
    "name" : "public InvalidKeyException getInvalidKeyException(String keystoreKeyAlias, int uid, KeyStoreException e)",
    "returnType" : "InvalidKeyException",
    "comment" : "\n     * Returns an {@link InvalidKeyException} corresponding to the provided\n     * {@link KeyStoreException}.\n     ",
    "links" : [ "InvalidKeyException", "KeyStoreException" ]
  }, {
    "name" : "public InvalidKeyException getInvalidKeyException(String keystoreKeyAlias, int uid, int errorCode)",
    "returnType" : "InvalidKeyException",
    "comment" : "\n     * Returns an {@link InvalidKeyException} corresponding to the provided keystore/keymaster error\n     * code.\n     ",
    "links" : [ "InvalidKeyException" ]
  }, {
    "name" : "private static R interruptedPreservingGet(CompletableFuture<R> future) throws ExecutionException",
    "returnType" : "R",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "NO_ERROR", "LOCKED", "UNINITIALIZED", "SYSTEM_ERROR", "PROTOCOL_ERROR", "PERMISSION_DENIED", "KEY_NOT_FOUND", "VALUE_CORRUPTED", "UNDEFINED_ACTION", "WRONG_PASSWORD", "KEY_ALREADY_EXISTS", "CANNOT_ATTEST_IDS", "HARDWARE_TYPE_UNAVAILABLE", "OP_AUTH_NEEDED", "KEY_PERMANENTLY_INVALIDATED", "UID_SELF", "FLAG_NONE", "FLAG_ENCRYPTED", "FLAG_SOFTWARE", "FLAG_CRITICAL_TO_DEVICE_ENCRYPTION", "FLAG_STRONGBOX", "mError", "mBinder", "mContext", "mToken", "CONFIRMATIONUI_OK", "CONFIRMATIONUI_CANCELED", "CONFIRMATIONUI_ABORTED", "CONFIRMATIONUI_OPERATION_PENDING", "CONFIRMATIONUI_IGNORED", "CONFIRMATIONUI_SYSTEM_ERROR", "CONFIRMATIONUI_UNIMPLEMENTED", "CONFIRMATIONUI_UNEXPECTED", "CONFIRMATIONUI_UIERROR", "CONFIRMATIONUI_UIERROR_MISSING_GLYPH", "CONFIRMATIONUI_UIERROR_MESSAGE_TOO_LONG", "CONFIRMATIONUI_UIERROR_MALFORMED_UTF8_ENCODING" ],
  "methodNames" : [ "public static Context getApplicationContext()", "public static KeyStore getInstance()", "private synchronized IBinder getToken()", "public State state(int userId)", "public State state()", "public boolean isUnlocked()", "public byte[] get(String key, int uid)", "public byte[] get(String key)", "public byte[] get(String key, int uid, boolean suppressKeyNotFoundWarning)", "public byte[] get(String key, boolean suppressKeyNotFoundWarning)", "public boolean put(String key, byte[] value, int uid, int flags)", "public int insert(String key, byte[] value, int uid, int flags)", " int delete2(String key, int uid)", "public boolean delete(String key, int uid)", "public boolean delete(String key)", "public boolean contains(String key, int uid)", "public boolean contains(String key)", "public String[] list(String prefix, int uid)", "public int[] listUidsOfAuthBoundKeys()", "public String[] list(String prefix)", "public boolean lock(int userId)", "public boolean lock()", "public boolean unlock(int userId, String password)", "public boolean unlock(String password)", "public boolean isEmpty(int userId)", "public boolean isEmpty()", "public String grant(String key, int uid)", "public boolean ungrant(String key, int uid)", "public long getmtime(String key, int uid)", "public long getmtime(String key)", "public boolean isHardwareBacked()", "public boolean isHardwareBacked(String keyType)", "public boolean clearUid(int uid)", "public int getLastError()", "public boolean addRngEntropy(byte[] data, int flags)", "private int generateKeyInternal(String alias, KeymasterArguments args, byte[] entropy, int uid, int flags, KeyCharacteristics outCharacteristics) throws RemoteException, ExecutionException", "public int generateKey(String alias, KeymasterArguments args, byte[] entropy, int uid, int flags, KeyCharacteristics outCharacteristics)", "public int generateKey(String alias, KeymasterArguments args, byte[] entropy, int flags, KeyCharacteristics outCharacteristics)", "public int getKeyCharacteristics(String alias, KeymasterBlob clientId, KeymasterBlob appId, int uid, KeyCharacteristics outCharacteristics)", "public int getKeyCharacteristics(String alias, KeymasterBlob clientId, KeymasterBlob appId, KeyCharacteristics outCharacteristics)", "private int importKeyInternal(String alias, KeymasterArguments args, int format, byte[] keyData, int uid, int flags, KeyCharacteristics outCharacteristics) throws RemoteException, ExecutionException", "public int importKey(String alias, KeymasterArguments args, int format, byte[] keyData, int uid, int flags, KeyCharacteristics outCharacteristics)", "public int importKey(String alias, KeymasterArguments args, int format, byte[] keyData, int flags, KeyCharacteristics outCharacteristics)", "private String getAlgorithmFromPKCS8(byte[] keyData)", "private KeymasterArguments makeLegacyArguments(String algorithm)", "public boolean importKey(String alias, byte[] keyData, int uid, int flags)", "private int importWrappedKeyInternal(String wrappedKeyAlias, byte[] wrappedKey, String wrappingKeyAlias, byte[] maskingKey, KeymasterArguments args, long rootSid, long fingerprintSid, KeyCharacteristics outCharacteristics) throws RemoteException, ExecutionException", "public int importWrappedKey(String wrappedKeyAlias, byte[] wrappedKey, String wrappingKeyAlias, byte[] maskingKey, KeymasterArguments args, long rootSid, long fingerprintSid, int uid, KeyCharacteristics outCharacteristics)", "public ExportResult exportKey(String alias, int format, KeymasterBlob clientId, KeymasterBlob appId, int uid)", "public ExportResult exportKey(String alias, int format, KeymasterBlob clientId, KeymasterBlob appId)", "public OperationResult begin(String alias, int purpose, boolean pruneable, KeymasterArguments args, byte[] entropy, int uid)", "public OperationResult begin(String alias, int purpose, boolean pruneable, KeymasterArguments args, byte[] entropy)", "public OperationResult update(IBinder token, KeymasterArguments arguments, byte[] input)", "public OperationResult finish(IBinder token, KeymasterArguments arguments, byte[] input, byte[] signature, byte[] entropy)", "public OperationResult finish(IBinder token, KeymasterArguments arguments, byte[] signature)", "public int abort(IBinder token)", "public int addAuthToken(byte[] authToken)", "public boolean onUserPasswordChanged(int userId, String newPassword)", "public void onUserAdded(int userId, int parentId)", "public void onUserAdded(int userId)", "public void onUserRemoved(int userId)", "public boolean onUserPasswordChanged(String newPassword)", "public void onUserLockedStateChanged(int userHandle, boolean locked)", "public int attestKey(String alias, KeymasterArguments params, KeymasterCertificateChain outChain)", "public int attestDeviceIds(KeymasterArguments params, KeymasterCertificateChain outChain)", "public void onDeviceOffBody()", "public int presentConfirmationPrompt(IBinder listener, String promptText, byte[] extraData, String locale, int uiOptionsAsFlags)", "public int cancelConfirmationPrompt(IBinder listener)", "public boolean isConfirmationPromptSupported()", "public static KeyStoreException getKeyStoreException(int errorCode)", "public InvalidKeyException getInvalidKeyException(String keystoreKeyAlias, int uid, KeyStoreException e)", "public InvalidKeyException getInvalidKeyException(String keystoreKeyAlias, int uid, int errorCode)", "private static R interruptedPreservingGet(CompletableFuture<R> future) throws ExecutionException" ]
}