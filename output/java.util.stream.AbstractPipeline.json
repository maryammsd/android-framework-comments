{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/AbstractPipeline.java",
  "packageName" : "java.util.stream",
  "className" : "AbstractPipeline",
  "comment" : " Android-changed: Made public for CTS tests only.",
  "links" : [ ],
  "variables" : [ {
    "name" : "MSG_STREAM_LINKED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CONSUMED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sourceStage",
    "type" : "AbstractPipeline",
    "comment" : "\n     * Backlink to the head of the pipeline chain (self if this is the source\n     * stage).\n     ",
    "links" : [ ]
  }, {
    "name" : "previousStage",
    "type" : "AbstractPipeline",
    "comment" : "\n     * The \"upstream\" pipeline, or null if this is the source stage.\n     ",
    "links" : [ ]
  }, {
    "name" : "sourceOrOpFlags",
    "type" : "int",
    "comment" : "\n     * The operation flags for the intermediate operation represented by this\n     * pipeline object.\n     ",
    "links" : [ ]
  }, {
    "name" : "nextStage",
    "type" : "AbstractPipeline",
    "comment" : "\n     * The next stage in the pipeline, or null if this is the last stage.\n     * Effectively final at the point of linking to the next pipeline.\n     ",
    "links" : [ ]
  }, {
    "name" : "depth",
    "type" : "int",
    "comment" : "\n     * The number of intermediate operations between this pipeline object\n     * and the stream source if sequential, or the previous stateful if parallel.\n     * Valid at the point of pipeline preparation for evaluation.\n     ",
    "links" : [ ]
  }, {
    "name" : "combinedFlags",
    "type" : "int",
    "comment" : "\n     * The combined source and operation flags for the source and all operations\n     * up to and including the operation represented by this pipeline object.\n     * Valid at the point of pipeline preparation for evaluation.\n     ",
    "links" : [ ]
  }, {
    "name" : "sourceSpliterator",
    "type" : "Spliterator<?>",
    "comment" : "\n     * The source spliterator. Only valid for the head pipeline.\n     * Before the pipeline is consumed if non-null then {@code sourceSupplier}\n     * must be null. After the pipeline is consumed if non-null then is set to\n     * null.\n     ",
    "links" : [ ]
  }, {
    "name" : "sourceSupplier",
    "type" : "Supplier<? extends Spliterator<?>>",
    "comment" : "\n     * The source supplier. Only valid for the head pipeline. Before the\n     * pipeline is consumed if non-null then {@code sourceSpliterator} must be\n     * null. After the pipeline is consumed if non-null then is set to null.\n     ",
    "links" : [ ]
  }, {
    "name" : "linkedOrConsumed",
    "type" : "boolean",
    "comment" : "\n     * True if this pipeline has been linked or consumed\n     ",
    "links" : [ ]
  }, {
    "name" : "sourceAnyStateful",
    "type" : "boolean",
    "comment" : "\n     * True if there are any stateful ops in the pipeline; only valid for the\n     * source stage.\n     ",
    "links" : [ ]
  }, {
    "name" : "sourceCloseAction",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parallel",
    "type" : "boolean",
    "comment" : "\n     * True if pipeline is parallel, otherwise the pipeline is sequential; only\n     * valid for the source stage.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final R evaluate(TerminalOp<E_OUT, R> terminalOp)",
    "returnType" : "R",
    "comment" : "\n     * Evaluate the pipeline with a terminal operation to produce a result.\n     *\n     * @param <R> the type of result\n     * @param terminalOp the terminal operation to be applied to the pipeline.\n     * @return the result\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Node<E_OUT> evaluateToArrayNode(IntFunction<E_OUT[]> generator)",
    "returnType" : "Node<E_OUT>",
    "comment" : "\n     * Collect the elements output from the pipeline stage.\n     *\n     * @param generator the array generator to be used to create array instances\n     * @return a flat array-backed Node that holds the collected output elements\n     ",
    "links" : [ ]
  }, {
    "name" : " final Spliterator<E_OUT> sourceStageSpliterator()",
    "returnType" : "Spliterator<E_OUT>",
    "comment" : "\n     * Gets the source stage spliterator if this pipeline stage is the source\n     * stage.  The pipeline is consumed after this method is called and\n     * returns successfully.\n     *\n     * @return the source stage spliterator\n     * @throws IllegalStateException if this pipeline stage is not the source\n     *         stage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final S sequential()",
    "returnType" : "S",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final S parallel()",
    "returnType" : "S",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public S onClose(Runnable closeHandler)",
    "returnType" : "S",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E_OUT> spliterator()",
    "returnType" : "Spliterator<E_OUT>",
    "comment" : " Primitive specialization use co-variant overrides, hence is not final",
    "links" : [ ]
  }, {
    "name" : "public final boolean isParallel()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getStreamFlags()",
    "returnType" : "int",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : "private Spliterator<?> sourceSpliterator(int terminalFlags)",
    "returnType" : "Spliterator<?>",
    "comment" : "\n     * Get the source spliterator for this pipeline stage.  For a sequential or\n     * stateless parallel pipeline, this is the source spliterator.  For a\n     * stateful parallel pipeline, this is a spliterator describing the results\n     * of all computations up to and including the most recent stateful\n     * operation.\n     ",
    "links" : [ ]
  }, {
    "name" : " final StreamShape getSourceShape()",
    "returnType" : "StreamShape",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final long exactOutputSizeIfKnown(Spliterator<P_IN> spliterator)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long exactOutputSize(long previousSize)",
    "returnType" : "long",
    "comment" : "\n     * Returns the exact output size of the pipeline given the exact size reported by the previous stage.\n     *\n     * @param previousSize the exact size reported by the previous stage\n     * @return the output size of this stage\n     ",
    "links" : [ ]
  }, {
    "name" : " final S wrapAndCopyInto(S sink, Spliterator<P_IN> spliterator)",
    "returnType" : "S",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void copyInto(Sink<P_IN> wrappedSink, Spliterator<P_IN> spliterator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final boolean copyIntoWithCancel(Sink<P_IN> wrappedSink, Spliterator<P_IN> spliterator)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getStreamAndOpFlags()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final boolean isOrdered()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Sink<P_IN> wrapSink(Sink<E_OUT> sink)",
    "returnType" : "Sink<P_IN>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Spliterator<E_OUT> wrapSpliterator(Spliterator<P_IN> sourceSpliterator)",
    "returnType" : "Spliterator<E_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Node<E_OUT> evaluate(Spliterator<P_IN> spliterator, boolean flatten, IntFunction<E_OUT[]> generator)",
    "returnType" : "Node<E_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract StreamShape getOutputShape()",
    "returnType" : "StreamShape",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : "public abstract Node<E_OUT> evaluateToNode(PipelineHelper<E_OUT> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<E_OUT[]> generator)",
    "returnType" : "Node<E_OUT>",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : "public abstract Spliterator<E_OUT> wrap(PipelineHelper<E_OUT> ph, Supplier<Spliterator<P_IN>> supplier, boolean isParallel)",
    "returnType" : "Spliterator<E_OUT>",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : "public abstract Spliterator<E_OUT> lazySpliterator(Supplier<? extends Spliterator<E_OUT>> supplier)",
    "returnType" : "Spliterator<E_OUT>",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean forEachWithCancel(Spliterator<E_OUT> spliterator, Sink<E_OUT> sink)",
    "returnType" : "boolean",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : "public abstract Node.Builder<E_OUT> makeNodeBuilder(long exactSizeIfKnown, IntFunction<E_OUT[]> generator)",
    "returnType" : "Node.Builder<E_OUT>",
    "comment" : "\n     * Make a node builder compatible with this stream shape.\n     *\n     * @param exactSizeIfKnown if {@literal >=0}, then a node builder will be\n     * created that has a fixed capacity of at most sizeIfKnown elements. If\n     * {@literal < 0}, then the node builder has an unfixed capacity. A fixed\n     * capacity node builder will throw exceptions if an element is added after\n     * builder has reached capacity, or is built before the builder has reached\n     * capacity.\n     *\n     * @param generator the array generator to be used to create instances of a\n     * T[] array. For implementations supporting primitive nodes, this parameter\n     * may be ignored.\n     * @return a node builder\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean opIsStateful()",
    "returnType" : "boolean",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : "public abstract Sink<E_IN> opWrapSink(int flags, Sink<E_OUT> sink)",
    "returnType" : "Sink<E_IN>",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : "public Node<E_OUT> opEvaluateParallel(PipelineHelper<E_OUT> helper, Spliterator<P_IN> spliterator, IntFunction<E_OUT[]> generator)",
    "returnType" : "Node<E_OUT>",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E_OUT> opEvaluateParallelLazy(PipelineHelper<E_OUT> helper, Spliterator<P_IN> spliterator)",
    "returnType" : "Spliterator<E_OUT>",
    "comment" : "\n     * Returns a {@code Spliterator} describing a parallel evaluation of the\n     * operation, using the specified {@code PipelineHelper} which describes the\n     * upstream intermediate operations.  Only called on stateful operations.\n     * It is not necessary (though acceptable) to do a full computation of the\n     * result here; it is preferable, if possible, to describe the result via a\n     * lazily evaluated spliterator.\n     *\n     * @implSpec The default implementation behaves as if:\n     * <pre>{@code\n     *     return evaluateParallel(helper, i -> (E_OUT[]) new\n     * Object[i]).spliterator();\n     * }</pre>\n     * and is suitable for implementations that cannot do better than a full\n     * synchronous evaluation.\n     *\n     * @param helper the pipeline helper\n     * @param spliterator the source {@code Spliterator}\n     * @return a {@code Spliterator} describing the result of the evaluation\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " final R evaluate(TerminalOp<E_OUT, R> terminalOp)", "public final Node<E_OUT> evaluateToArrayNode(IntFunction<E_OUT[]> generator)", " final Spliterator<E_OUT> sourceStageSpliterator()", "public final S sequential()", "public final S parallel()", "public void close()", "public S onClose(Runnable closeHandler)", "public Spliterator<E_OUT> spliterator()", "public final boolean isParallel()", "public final int getStreamFlags()", "private Spliterator<?> sourceSpliterator(int terminalFlags)", " final StreamShape getSourceShape()", " final long exactOutputSizeIfKnown(Spliterator<P_IN> spliterator)", " long exactOutputSize(long previousSize)", " final S wrapAndCopyInto(S sink, Spliterator<P_IN> spliterator)", " final void copyInto(Sink<P_IN> wrappedSink, Spliterator<P_IN> spliterator)", " final boolean copyIntoWithCancel(Sink<P_IN> wrappedSink, Spliterator<P_IN> spliterator)", "public final int getStreamAndOpFlags()", " final boolean isOrdered()", "public final Sink<P_IN> wrapSink(Sink<E_OUT> sink)", " final Spliterator<E_OUT> wrapSpliterator(Spliterator<P_IN> sourceSpliterator)", "public final Node<E_OUT> evaluate(Spliterator<P_IN> spliterator, boolean flatten, IntFunction<E_OUT[]> generator)", "public abstract StreamShape getOutputShape()", "public abstract Node<E_OUT> evaluateToNode(PipelineHelper<E_OUT> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<E_OUT[]> generator)", "public abstract Spliterator<E_OUT> wrap(PipelineHelper<E_OUT> ph, Supplier<Spliterator<P_IN>> supplier, boolean isParallel)", "public abstract Spliterator<E_OUT> lazySpliterator(Supplier<? extends Spliterator<E_OUT>> supplier)", "public abstract boolean forEachWithCancel(Spliterator<E_OUT> spliterator, Sink<E_OUT> sink)", "public abstract Node.Builder<E_OUT> makeNodeBuilder(long exactSizeIfKnown, IntFunction<E_OUT[]> generator)", "public abstract boolean opIsStateful()", "public abstract Sink<E_IN> opWrapSink(int flags, Sink<E_OUT> sink)", "public Node<E_OUT> opEvaluateParallel(PipelineHelper<E_OUT> helper, Spliterator<P_IN> spliterator, IntFunction<E_OUT[]> generator)", "public Spliterator<E_OUT> opEvaluateParallelLazy(PipelineHelper<E_OUT> helper, Spliterator<P_IN> spliterator)" ],
  "variableNames" : [ "MSG_STREAM_LINKED", "MSG_CONSUMED", "sourceStage", "previousStage", "sourceOrOpFlags", "nextStage", "depth", "combinedFlags", "sourceSpliterator", "sourceSupplier", "linkedOrConsumed", "sourceAnyStateful", "sourceCloseAction", "parallel" ]
}