{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/accessibilityservice/AccessibilityService.java",
  "packageName" : "android.accessibilityservice",
  "className" : "MagnificationController",
  "comment" : "\n     * Used to control and query the state of display magnification.\n     ",
  "variables" : [ {
    "name" : "mService",
    "type" : "AccessibilityService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayMap<OnMagnificationChangedListener, Handler>",
    "comment" : "\n         * Map of listeners to their handlers. Lazily created when adding the\n         * first magnification listener.\n         ",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void onServiceConnectedLocked()",
    "returnType" : "void",
    "comment" : "\n         * Called when the service is connected.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addListener(@NonNull OnMagnificationChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Adds the specified change listener to the list of magnification\n         * change listeners. The callback will occur on the service's main\n         * thread.\n         *\n         * @param listener the listener to add, must be non-{@code null}\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addListener(@NonNull OnMagnificationChangedListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n         * Adds the specified change listener to the list of magnification\n         * change listeners. The callback will occur on the specified\n         * {@link Handler}'s thread, or on the service's main thread if the\n         * handler is {@code null}.\n         *\n         * @param listener the listener to add, must be non-null\n         * @param handler the handler on which the callback should execute, or\n         *        {@code null} to execute on the service's main thread\n         ",
    "links" : [ "android.os.Handler" ]
  }, {
    "name" : "public boolean removeListener(@NonNull OnMagnificationChangedListener listener)",
    "returnType" : "boolean",
    "comment" : "\n         * Removes the specified change listener from the list of magnification change listeners.\n         *\n         * @param listener the listener to remove, must be non-null\n         * @return {@code true} if the listener was removed, {@code false} otherwise\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setMagnificationCallbackEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchMagnificationChanged(@NonNull final Region region, final float scale, final float centerX, final float centerY)",
    "returnType" : "void",
    "comment" : "\n         * Dispatches magnification changes to any registered listeners. This\n         * should be called on the service's main thread.\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getScale()",
    "returnType" : "float",
    "comment" : "\n         * Returns the current magnification scale.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will\n         * return a default value of {@code 1.0f}.\n         *\n         * @return the current magnification scale\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()" ]
  }, {
    "name" : "public float getCenterX()",
    "returnType" : "float",
    "comment" : "\n         * Returns the unscaled screen-relative X coordinate of the focal\n         * center of the magnified region. This is the point around which\n         * zooming occurs and is guaranteed to lie within the magnified\n         * region.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will\n         * return a default value of {@code 0.0f}.\n         *\n         * @return the unscaled screen-relative X coordinate of the center of\n         *         the magnified region\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()" ]
  }, {
    "name" : "public float getCenterY()",
    "returnType" : "float",
    "comment" : "\n         * Returns the unscaled screen-relative Y coordinate of the focal\n         * center of the magnified region. This is the point around which\n         * zooming occurs and is guaranteed to lie within the magnified\n         * region.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will\n         * return a default value of {@code 0.0f}.\n         *\n         * @return the unscaled screen-relative Y coordinate of the center of\n         *         the magnified region\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()" ]
  }, {
    "name" : "public Region getMagnificationRegion()",
    "returnType" : "Region",
    "comment" : "\n         * Returns the region of the screen currently active for magnification. Changes to\n         * magnification scale and center only affect this portion of the screen. The rest of the\n         * screen, for example input methods, cannot be magnified. This region is relative to the\n         * unscaled screen and is independent of the scale and center point.\n         * <p>\n         * The returned region will be empty if magnification is not active. Magnification is active\n         * if magnification gestures are enabled or if a service is running that can control\n         * magnification.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will\n         * return an empty region.\n         *\n         * @return the region of the screen currently active for magnification, or an empty region\n         * if magnification is not active.\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()" ]
  }, {
    "name" : "public boolean reset(boolean animate)",
    "returnType" : "boolean",
    "comment" : "\n         * Resets magnification scale and center to their default (e.g. no\n         * magnification) values.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will have\n         * no effect and return {@code false}.\n         *\n         * @param animate {@code true} to animate from the current scale and\n         *                center or {@code false} to reset the scale and center\n         *                immediately\n         * @return {@code true} on success, {@code false} on failure\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()" ]
  }, {
    "name" : "public boolean setScale(float scale, boolean animate)",
    "returnType" : "boolean",
    "comment" : "\n         * Sets the magnification scale.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will have\n         * no effect and return {@code false}.\n         *\n         * @param scale the magnification scale to set, must be >= 1 and <= 8\n         * @param animate {@code true} to animate from the current scale or\n         *                {@code false} to set the scale immediately\n         * @return {@code true} on success, {@code false} on failure\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()" ]
  }, {
    "name" : "public boolean setCenter(float centerX, float centerY, boolean animate)",
    "returnType" : "boolean",
    "comment" : "\n         * Sets the center of the magnified viewport.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will have\n         * no effect and return {@code false}.\n         *\n         * @param centerX the unscaled screen-relative X coordinate on which to\n         *                center the viewport\n         * @param centerY the unscaled screen-relative Y coordinate on which to\n         *                center the viewport\n         * @param animate {@code true} to animate from the current viewport\n         *                center or {@code false} to set the center immediately\n         * @return {@code true} on success, {@code false} on failure\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()" ]
  } ],
  "variableNames" : [ "mService", "mDisplayId", "mListeners", "mLock" ],
  "methodNames" : [ " void onServiceConnectedLocked()", "public void addListener(@NonNull OnMagnificationChangedListener listener)", "public void addListener(@NonNull OnMagnificationChangedListener listener, @Nullable Handler handler)", "public boolean removeListener(@NonNull OnMagnificationChangedListener listener)", "private void setMagnificationCallbackEnabled(boolean enabled)", " void dispatchMagnificationChanged(@NonNull final Region region, final float scale, final float centerX, final float centerY)", "public float getScale()", "public float getCenterX()", "public float getCenterY()", "public Region getMagnificationRegion()", "public boolean reset(boolean animate)", "public boolean setScale(float scale, boolean animate)", "public boolean setCenter(float centerX, float centerY, boolean animate)" ]
}