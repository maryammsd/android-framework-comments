{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/SearchResult.java",
  "packageName" : "android.app.appsearch",
  "className" : "MatchInfo",
  "comment" : "\n     * This class represents match objects for any snippets that might be present in {@link\n     * SearchResults} from a query. Using this class, you can get:\n     *\n     * <ul>\n     *   <li>the full text - all of the text in that String property\n     *   <li>the exact term match - the 'term' (full word) that matched the query\n     *   <li>the subterm match - the portion of the matched term that appears in the query\n     *   <li>a suggested text snippet - a portion of the full text surrounding the exact term match,\n     *       set to term boundaries. The size of the snippet is specified in {@link\n     *       SearchSpec.Builder#setMaxSnippetSize}\n     * </ul>\n     *\n     * for each match in the document.\n     *\n     * <p>Class Example 1:\n     *\n     * <p>A document contains the following text in property \"subject\":\n     *\n     * <p>\"A commonly used fake word is foo. Another nonsense word that’s used a lot is bar.\"\n     *\n     * <p>If the queryExpression is \"foo\" and {@link SearchSpec#getMaxSnippetSize} is 10,\n     *\n     * <ul>\n     *   <li>{@link MatchInfo#getPropertyPath()} returns \"subject\"\n     *   <li>{@link MatchInfo#getFullText()} returns \"A commonly used fake word is foo. Another\n     *       nonsense word that’s used a lot is bar.\"\n     *   <li>{@link MatchInfo#getExactMatchRange()} returns [29, 32]\n     *   <li>{@link MatchInfo#getExactMatch()} returns \"foo\"\n     *   <li>{@link MatchInfo#getSubmatchRange()} returns [29, 32]\n     *   <li>{@link MatchInfo#getSubmatch()} returns \"foo\"\n     *   <li>{@link MatchInfo#getSnippetRange()} returns [26, 33]\n     *   <li>{@link MatchInfo#getSnippet()} returns \"is foo.\"\n     * </ul>\n     *\n     * <p>\n     *\n     * <p>Class Example 2:\n     *\n     * <p>A document contains one property named \"subject\" and one property named \"sender\" which\n     * contains a \"name\" property.\n     *\n     * <p>In this case, we will have 2 property paths: {@code sender.name} and {@code subject}.\n     *\n     * <p>Let {@code sender.name = \"Test Name Jr.\"} and {@code subject = \"Testing 1 2 3\"}\n     *\n     * <p>If the queryExpression is \"Test\" with {@link SearchSpec#TERM_MATCH_PREFIX} and {@link\n     * SearchSpec#getMaxSnippetSize} is 10. We will have 2 matches:\n     *\n     * <p>Match-1\n     *\n     * <ul>\n     *   <li>{@link MatchInfo#getPropertyPath()} returns \"sender.name\"\n     *   <li>{@link MatchInfo#getFullText()} returns \"Test Name Jr.\"\n     *   <li>{@link MatchInfo#getExactMatchRange()} returns [0, 4]\n     *   <li>{@link MatchInfo#getExactMatch()} returns \"Test\"\n     *   <li>{@link MatchInfo#getSubmatchRange()} returns [0, 4]\n     *   <li>{@link MatchInfo#getSubmatch()} returns \"Test\"\n     *   <li>{@link MatchInfo#getSnippetRange()} returns [0, 9]\n     *   <li>{@link MatchInfo#getSnippet()} returns \"Test Name\"\n     * </ul>\n     *\n     * <p>Match-2\n     *\n     * <ul>\n     *   <li>{@link MatchInfo#getPropertyPath()} returns \"subject\"\n     *   <li>{@link MatchInfo#getFullText()} returns \"Testing 1 2 3\"\n     *   <li>{@link MatchInfo#getExactMatchRange()} returns [0, 7]\n     *   <li>{@link MatchInfo#getExactMatch()} returns \"Testing\"\n     *   <li>{@link MatchInfo#getSubmatchRange()} returns [0, 4]\n     *   <li>{@link MatchInfo#getSubmatch()} returns \"Test\"\n     *   <li>{@link MatchInfo#getSnippetRange()} returns [0, 9]\n     *   <li>{@link MatchInfo#getSnippet()} returns \"Testing 1\"\n     * </ul>\n     ",
  "links" : [ "#getPropertyPath()", "#getSubmatch()", "#getExactMatch()", "#getSnippetRange()", "SearchSpec.Builder#setMaxSnippetSize", "android.app.appsearch.SearchResults", "#getSnippet()", "#getExactMatchRange()", "#getFullText()", "#getSubmatchRange()", "android.app.appsearch.SearchSpec#getMaxSnippetSize", "android.app.appsearch.SearchSpec#TERM_MATCH_PREFIX" ],
  "variables" : [ {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<MatchInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPropertyPath",
    "type" : "String",
    "comment" : " The path of the matching snippet property. ",
    "links" : [ ]
  }, {
    "name" : "mExactMatchRangeStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExactMatchRangeEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubmatchRangeStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubmatchRangeEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnippetRangeStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnippetRangeEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPropertyPathObject",
    "type" : "PropertyPath",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDocument",
    "type" : "GenericDocument",
    "comment" : "\n         * Document which the match comes from.\n         *\n         * <p>If this is {@code null}, methods which require access to the document, like {@link\n         * #getExactMatch}, will throw {@link NullPointerException}.\n         ",
    "links" : [ "#getExactMatch", "NullPointerException" ]
  }, {
    "name" : "mFullText",
    "type" : "String",
    "comment" : " Full text of the matched property. Populated on first use. ",
    "links" : [ ]
  }, {
    "name" : "mExactMatchRangeCached",
    "type" : "MatchRange",
    "comment" : " Range of property that exactly matched the query. Populated on first use. ",
    "links" : [ ]
  }, {
    "name" : "mSubmatchRangeCached",
    "type" : "MatchRange",
    "comment" : "\n         * Range of property that corresponds to the subsequence of the exact match that directly\n         * matches a query term. Populated on first use.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWindowRangeCached",
    "type" : "MatchRange",
    "comment" : " Range of some reasonable amount of context around the query. Populated on first use. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getPropertyPath()",
    "returnType" : "String",
    "comment" : "\n         * Gets the property path corresponding to the given entry.\n         *\n         * <p>A property path is a '.' - delimited sequence of property names indicating which\n         * property in the document these snippets correspond to.\n         *\n         * <p>Example properties: 'body', 'sender.name', 'sender.emailaddress', etc. For class\n         * example 1 this returns \"subject\"\n         ",
    "links" : [ ]
  }, {
    "name" : "public PropertyPath getPropertyPathObject()",
    "returnType" : "PropertyPath",
    "comment" : "\n         * Gets a {@link PropertyPath} object representing the property path corresponding to the\n         * given entry.\n         *\n         * <p>Methods such as {@link GenericDocument#getPropertyDocument} accept a path as a string\n         * rather than a {@link PropertyPath} object. However, you may want to manipulate the path\n         * before getting a property document. This method returns a {@link PropertyPath} rather\n         * than a String for easier path manipulation, which can then be converted to a String.\n         *\n         * @see #getPropertyPath\n         * @see PropertyPath\n         ",
    "links" : [ "android.app.appsearch.PropertyPath", "android.app.appsearch.GenericDocument#getPropertyDocument" ]
  }, {
    "name" : "public String getFullText()",
    "returnType" : "String",
    "comment" : "\n         * Gets the full text corresponding to the given entry.\n         *\n         * <p>Class example 1: this returns \"A commonly used fake word is foo. Another nonsense word\n         * that's used a lot is bar.\"\n         *\n         * <p>Class example 2: for the first {@link MatchInfo}, this returns \"Test Name Jr.\" and,\n         * for the second {@link MatchInfo}, this returns \"Testing 1 2 3\".\n         ",
    "links" : [ "MatchInfo" ]
  }, {
    "name" : "public MatchRange getExactMatchRange()",
    "returnType" : "MatchRange",
    "comment" : "\n         * Gets the {@link MatchRange} of the exact term of the given entry that matched the query.\n         *\n         * <p>Class example 1: this returns [29, 32].\n         *\n         * <p>Class example 2: for the first {@link MatchInfo}, this returns [0, 4] and, for the\n         * second {@link MatchInfo}, this returns [0, 7].\n         ",
    "links" : [ "MatchInfo", "MatchRange" ]
  }, {
    "name" : "public CharSequence getExactMatch()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Gets the exact term of the given entry that matched the query.\n         *\n         * <p>Class example 1: this returns \"foo\".\n         *\n         * <p>Class example 2: for the first {@link MatchInfo}, this returns \"Test\" and, for the\n         * second {@link MatchInfo}, this returns \"Testing\".\n         ",
    "links" : [ "MatchInfo" ]
  }, {
    "name" : "public MatchRange getSubmatchRange()",
    "returnType" : "MatchRange",
    "comment" : "\n         * Gets the {@link MatchRange} of the exact term subsequence of the given entry that matched\n         * the query.\n         *\n         * <p>Class example 1: this returns [29, 32].\n         *\n         * <p>Class example 2: for the first {@link MatchInfo}, this returns [0, 4] and, for the\n         * second {@link MatchInfo}, this returns [0, 4].\n         ",
    "links" : [ "MatchInfo", "MatchRange" ]
  }, {
    "name" : "public CharSequence getSubmatch()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Gets the exact term subsequence of the given entry that matched the query.\n         *\n         * <p>Class example 1: this returns \"foo\".\n         *\n         * <p>Class example 2: for the first {@link MatchInfo}, this returns \"Test\" and, for the\n         * second {@link MatchInfo}, this returns \"Test\".\n         ",
    "links" : [ "MatchInfo" ]
  }, {
    "name" : "public MatchRange getSnippetRange()",
    "returnType" : "MatchRange",
    "comment" : "\n         * Gets the snippet {@link MatchRange} corresponding to the given entry.\n         *\n         * <p>Only populated when set maxSnippetSize > 0 in {@link\n         * SearchSpec.Builder#setMaxSnippetSize}.\n         *\n         * <p>Class example 1: this returns [29, 41].\n         *\n         * <p>Class example 2: for the first {@link MatchInfo}, this returns [0, 9] and, for the\n         * second {@link MatchInfo}, this returns [0, 13].\n         ",
    "links" : [ "SearchSpec.Builder#setMaxSnippetSize", "MatchInfo", "MatchRange" ]
  }, {
    "name" : "public CharSequence getSnippet()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Gets the snippet corresponding to the given entry.\n         *\n         * <p>Snippet - Provides a subset of the content to display. Only populated when requested\n         * maxSnippetSize > 0. The size of this content can be changed by {@link\n         * SearchSpec.Builder#setMaxSnippetSize}. Windowing is centered around the middle of the\n         * matched token with content on either side clipped to token boundaries.\n         *\n         * <p>Class example 1: this returns \"foo. Another\".\n         *\n         * <p>Class example 2: for the first {@link MatchInfo}, this returns \"Test Name\" and, for\n         * the second {@link MatchInfo}, this returns \"Testing 1 2 3\".\n         ",
    "links" : [ "SearchSpec.Builder#setMaxSnippetSize", "MatchInfo" ]
  }, {
    "name" : "private CharSequence getSubstring(MatchRange range)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkSubmatchSupported()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getPropertyValues(GenericDocument document, String propertyName)",
    "returnType" : "String",
    "comment" : " Extracts the matching string from the document. ",
    "links" : [ ]
  }, {
    "name" : " void setDocument(@NonNull GenericDocument document)",
    "returnType" : "void",
    "comment" : "\n         * Sets the {@link GenericDocument} for {@link MatchInfo}.\n         *\n         * <p>{@link MatchInfo} lacks a constructor that populates {@link MatchInfo#mDocument} This\n         * provides the ability to set {@link MatchInfo#mDocument}\n         ",
    "links" : [ "#mDocument", "MatchInfo", "android.app.appsearch.GenericDocument" ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getPropertyPath()", "public PropertyPath getPropertyPathObject()", "public String getFullText()", "public MatchRange getExactMatchRange()", "public CharSequence getExactMatch()", "public MatchRange getSubmatchRange()", "public CharSequence getSubmatch()", "public MatchRange getSnippetRange()", "public CharSequence getSnippet()", "private CharSequence getSubstring(MatchRange range)", "private void checkSubmatchSupported()", "private static String getPropertyValues(GenericDocument document, String propertyName)", " void setDocument(@NonNull GenericDocument document)", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "CREATOR", "mPropertyPath", "mExactMatchRangeStart", "mExactMatchRangeEnd", "mSubmatchRangeStart", "mSubmatchRangeEnd", "mSnippetRangeStart", "mSnippetRangeEnd", "mPropertyPathObject", "mDocument", "mFullText", "mExactMatchRangeCached", "mSubmatchRangeCached", "mWindowRangeCached" ]
}