{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/aware/TlvBufferUtils.java",
  "packageName" : "android.net.wifi.aware",
  "className" : "TlvConstructor",
  "comment" : "\n     * Utility class to construct byte arrays using the TLV format -\n     * Type/Length/Value.\n     * <p>\n     * A constructor is created specifying the size of the Type (T) and Length\n     * (L) fields. A specification of zero size T field is allowed - resulting\n     * in LV type format.\n     * <p>\n     * The byte array is either provided (using\n     * {@link TlvConstructor#wrap(byte[])}) or allocated (using\n     * {@link TlvConstructor#allocate(int)}).\n     * <p>\n     * Values are added to the structure using the {@code TlvConstructor.put*()}\n     * methods.\n     * <p>\n     * The final byte array is obtained using {@link TlvConstructor#getArray()}.\n     ",
  "links" : [ "#allocate(int)", "#getArray()", "#wrap(byte" ],
  "variables" : [ {
    "name" : "mTypeSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLengthSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mByteOrder",
    "type" : "ByteOrder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArray",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArrayLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPosition",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public TlvConstructor setByteOrder(ByteOrder byteOrder)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Configure the TLV constructor to use a particular byte order. Should be\n         * {@link ByteOrder#BIG_ENDIAN} (the default at construction) or\n         * {@link ByteOrder#LITTLE_ENDIAN}.\n         *\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ "java.nio.ByteOrder#BIG_ENDIAN", "java.nio.ByteOrder#LITTLE_ENDIAN" ]
  }, {
    "name" : "public TlvConstructor wrap(@Nullable byte[] array)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Set the byte array to be used to construct the TLV.\n         *\n         * @param array Byte array to be formatted.\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public TlvConstructor allocate(int capacity)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Allocates a new byte array to be used to construct a TLV.\n         *\n         * @param capacity The size of the byte array to be allocated.\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public TlvConstructor allocateAndPut(@Nullable List<byte[]> list)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Creates a TLV array (of the previously specified Type and Length sizes) from the input\n         * list. Allocates an array matching the contents (and required Type and Length\n         * fields), copies the contents, and set the Length fields. The Type field is set to 0.\n         *\n         * @param list A list of fields to be added to the TLV buffer.\n         * @return The constructor of the TLV.\n         ",
    "links" : [ ]
  }, {
    "name" : "public TlvConstructor putByte(int type, byte b)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Copies a byte into the TLV with the indicated type. For an LV\n         * formatted structure (i.e. typeLength=0 in {@link TlvConstructor\n         * TlvConstructor(int, int)} ) the type field is ignored.\n         *\n         * @param type The value to be placed into the Type field.\n         * @param b The byte to be inserted into the structure.\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ "TlvConstructorTlvConstructor(int" ]
  }, {
    "name" : "public TlvConstructor putRawByte(byte b)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Copies a raw byte into the TLV buffer - without a type or a length.\n         *\n         * @param b The byte to be inserted into the structure.\n         * @return The constructor to facilitate chaining {@code cts.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public TlvConstructor putByteArray(int type, @Nullable byte[] array, int offset, int length)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Copies a byte array into the TLV with the indicated type. For an LV\n         * formatted structure (i.e. typeLength=0 in {@link TlvConstructor\n         * TlvConstructor(int, int)} ) the type field is ignored.\n         *\n         * @param type The value to be placed into the Type field.\n         * @param array The array to be copied into the TLV structure.\n         * @param offset Start copying from the array at the specified offset.\n         * @param length Copy the specified number (length) of bytes from the\n         *            array.\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ "TlvConstructorTlvConstructor(int" ]
  }, {
    "name" : "public TlvConstructor putByteArray(int type, @Nullable byte[] array)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Copies a byte array into the TLV with the indicated type. For an LV\n         * formatted structure (i.e. typeLength=0 in {@link TlvConstructor\n         * TlvConstructor(int, int)} ) the type field is ignored.\n         *\n         * @param type The value to be placed into the Type field.\n         * @param array The array to be copied (in full) into the TLV structure.\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ "TlvConstructorTlvConstructor(int" ]
  }, {
    "name" : "public TlvConstructor putRawByteArray(@Nullable byte[] array)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Copies a byte array into the TLV - without a type or a length.\n         *\n         * @param array The array to be copied (in full) into the TLV structure.\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public TlvConstructor putZeroLengthElement(int type)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Places a zero length element (i.e. Length field = 0) into the TLV.\n         * For an LV formatted structure (i.e. typeLength=0 in\n         * {@link TlvConstructor TlvConstructor(int, int)} ) the type field is\n         * ignored.\n         *\n         * @param type The value to be placed into the Type field.\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ "TlvConstructor" ]
  }, {
    "name" : "public TlvConstructor putShort(int type, short data)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Copies short into the TLV with the indicated type. For an LV\n         * formatted structure (i.e. typeLength=0 in {@link TlvConstructor\n         * TlvConstructor(int, int)} ) the type field is ignored.\n         *\n         * @param type The value to be placed into the Type field.\n         * @param data The short to be inserted into the structure.\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ "TlvConstructorTlvConstructor(int" ]
  }, {
    "name" : "public TlvConstructor putInt(int type, int data)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Copies integer into the TLV with the indicated type. For an LV\n         * formatted structure (i.e. typeLength=0 in {@link TlvConstructor\n         * TlvConstructor(int, int)} ) the type field is ignored.\n         *\n         * @param type The value to be placed into the Type field.\n         * @param data The integer to be inserted into the structure.\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ "TlvConstructorTlvConstructor(int" ]
  }, {
    "name" : "public TlvConstructor putString(int type, @Nullable String data)",
    "returnType" : "TlvConstructor",
    "comment" : "\n         * Copies a String's byte representation into the TLV with the indicated\n         * type. For an LV formatted structure (i.e. typeLength=0 in\n         * {@link TlvConstructor TlvConstructor(int, int)} ) the type field is\n         * ignored.\n         *\n         * @param type The value to be placed into the Type field.\n         * @param data The string whose bytes are to be inserted into the\n         *            structure.\n         * @return The constructor to facilitate chaining\n         *         {@code ctr.putXXX(..).putXXX(..)}.\n         ",
    "links" : [ "TlvConstructor" ]
  }, {
    "name" : "public byte[] getArray()",
    "returnType" : "byte[]",
    "comment" : "\n         * Returns the constructed TLV formatted byte-array. This array is a copy of the wrapped\n         * or allocated array - truncated to just the significant bytes - i.e. those written into\n         * the (T)LV.\n         *\n         * @return The byte array containing the TLV formatted structure.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int getActualLength()",
    "returnType" : "int",
    "comment" : "\n         * Returns the size of the TLV formatted portion of the wrapped or\n         * allocated byte array. The array itself is returned with\n         * {@link TlvConstructor#getArray()}.\n         *\n         * @return The size of the TLV formatted portion of the byte array.\n         ",
    "links" : [ "#getArray()" ]
  }, {
    "name" : "private void checkLength(int dataLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkRawLength(int dataLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addHeader(int type, int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public TlvConstructor setByteOrder(ByteOrder byteOrder)", "public TlvConstructor wrap(@Nullable byte[] array)", "public TlvConstructor allocate(int capacity)", "public TlvConstructor allocateAndPut(@Nullable List<byte[]> list)", "public TlvConstructor putByte(int type, byte b)", "public TlvConstructor putRawByte(byte b)", "public TlvConstructor putByteArray(int type, @Nullable byte[] array, int offset, int length)", "public TlvConstructor putByteArray(int type, @Nullable byte[] array)", "public TlvConstructor putRawByteArray(@Nullable byte[] array)", "public TlvConstructor putZeroLengthElement(int type)", "public TlvConstructor putShort(int type, short data)", "public TlvConstructor putInt(int type, int data)", "public TlvConstructor putString(int type, @Nullable String data)", "public byte[] getArray()", "private int getActualLength()", "private void checkLength(int dataLength)", "private void checkRawLength(int dataLength)", "private void addHeader(int type, int length)" ],
  "variableNames" : [ "mTypeSize", "mLengthSize", "mByteOrder", "mArray", "mArrayLength", "mPosition" ]
}