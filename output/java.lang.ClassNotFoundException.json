{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/ClassNotFoundException.java",
  "packageName" : "java.lang",
  "className" : "ClassNotFoundException",
  "comment" : "\n * Thrown when an application tries to load in a class through its\n * string name using:\n * <ul>\n * <li>The {@code forName} method in class {@code Class}.\n * <li>The {@code findSystemClass} method in class\n *     {@code ClassLoader} .\n * <li>The {@code loadClass} method in class {@code ClassLoader}.\n * </ul>\n * <p>\n * but no definition for the class with the specified name could be found.\n *\n * @see     java.lang.Class#forName(java.lang.String)\n * @see     java.lang.ClassLoader#findSystemClass(java.lang.String)\n * @see     java.lang.ClassLoader#loadClass(java.lang.String, boolean)\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * use serialVersionUID from JDK 1.1.X for interoperability\n     ",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : "\n     * Serializable fields for ClassNotFoundException.\n     *\n     * @serialField ex Throwable  the {@code Throwable}\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Throwable getException()",
    "returnType" : "Throwable",
    "comment" : "\n     * Returns the exception that was raised if an error occurred while\n     * attempting to load the class. Otherwise, returns {@code null}.\n     *\n     * @apiNote\n     * This method predates the general-purpose exception chaining facility.\n     * The {@link Throwable#getCause()} method is now the preferred means of\n     * obtaining this information.\n     *\n     * @return the {@code Exception} that was raised while loading a class\n     * @since 1.2\n     ",
    "links" : [ "java.lang.Throwable#getCause()" ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes the ClassNotFoundException instance from a stream\n     * and initialize the cause properly when deserializing from an older\n     * version.\n     *\n     * The getException and getCause method returns the private \"ex\" field\n     * in the older implementation and ClassNotFoundException::cause\n     * was set to null.\n     *\n     * @param  s the {@code ObjectInputStream} from which data is read\n     * @throws IOException if an I/O error occurs\n     * @throws ClassNotFoundException if a serialized class cannot be loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * To maintain compatibility with older implementation, write a serial\n     * \"ex\" field with the cause as the value.\n     *\n     * @param  out the {@code ObjectOutputStream} to which data is written\n     * @throws IOException if an I/O error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Throwable getException()", "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException", "private void writeObject(ObjectOutputStream out) throws IOException" ],
  "variableNames" : [ "serialVersionUID", "serialPersistentFields" ]
}