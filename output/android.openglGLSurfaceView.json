{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/opengl/GLSurfaceView.java",
  "packageName" : "android.opengl",
  "className" : "GLSurfaceView",
  "comment" : "\n * An implementation of SurfaceView that uses the dedicated surface for\n * displaying OpenGL rendering.\n * <p>\n * A GLSurfaceView provides the following features:\n * <p>\n * <ul>\n * <li>Manages a surface, which is a special piece of memory that can be\n * composited into the Android view system.\n * <li>Manages an EGL display, which enables OpenGL to render into a surface.\n * <li>Accepts a user-provided Renderer object that does the actual rendering.\n * <li>Renders on a dedicated thread to decouple rendering performance from the\n * UI thread.\n * <li>Supports both on-demand and continuous rendering.\n * <li>Optionally wraps, traces, and/or error-checks the renderer's OpenGL calls.\n * </ul>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about how to use OpenGL, read the\n * <a href=\"{@docRoot}guide/topics/graphics/opengl.html\">OpenGL</a> developer guide.</p>\n * </div>\n *\n * <h3>Using GLSurfaceView</h3>\n * <p>\n * Typically you use GLSurfaceView by subclassing it and overriding one or more of the\n * View system input event methods. If your application does not need to override event\n * methods then GLSurfaceView can be used as-is. For the most part\n * GLSurfaceView behavior is customized by calling \"set\" methods rather than by subclassing.\n * For example, unlike a regular View, drawing is delegated to a separate Renderer object which\n * is registered with the GLSurfaceView\n * using the {@link #setRenderer(Renderer)} call.\n * <p>\n * <h3>Initializing GLSurfaceView</h3>\n * All you have to do to initialize a GLSurfaceView is call {@link #setRenderer(Renderer)}.\n * However, if desired, you can modify the default behavior of GLSurfaceView by calling one or\n * more of these methods before calling setRenderer:\n * <ul>\n * <li>{@link #setDebugFlags(int)}\n * <li>{@link #setEGLConfigChooser(boolean)}\n * <li>{@link #setEGLConfigChooser(EGLConfigChooser)}\n * <li>{@link #setEGLConfigChooser(int, int, int, int, int, int)}\n * <li>{@link #setGLWrapper(GLWrapper)}\n * </ul>\n * <p>\n * <h4>Specifying the android.view.Surface</h4>\n * By default GLSurfaceView will create a PixelFormat.RGB_888 format surface. If a translucent\n * surface is required, call getHolder().setFormat(PixelFormat.TRANSLUCENT).\n * The exact format of a TRANSLUCENT surface is device dependent, but it will be\n * a 32-bit-per-pixel surface with 8 bits per component.\n * <p>\n * <h4>Choosing an EGL Configuration</h4>\n * A given Android device may support multiple EGLConfig rendering configurations.\n * The available configurations may differ in how many channels of data are present, as\n * well as how many bits are allocated to each channel. Therefore, the first thing\n * GLSurfaceView has to do when starting to render is choose what EGLConfig to use.\n * <p>\n * By default GLSurfaceView chooses a EGLConfig that has an RGB_888 pixel format,\n * with at least a 16-bit depth buffer and no stencil.\n * <p>\n * If you would prefer a different EGLConfig\n * you can override the default behavior by calling one of the\n * setEGLConfigChooser methods.\n * <p>\n * <h4>Debug Behavior</h4>\n * You can optionally modify the behavior of GLSurfaceView by calling\n * one or more of the debugging methods {@link #setDebugFlags(int)},\n * and {@link #setGLWrapper}. These methods may be called before and/or after setRenderer, but\n * typically they are called before setRenderer so that they take effect immediately.\n * <p>\n * <h4>Setting a Renderer</h4>\n * Finally, you must call {@link #setRenderer} to register a {@link Renderer}.\n * The renderer is\n * responsible for doing the actual OpenGL rendering.\n * <p>\n * <h3>Rendering Mode</h3>\n * Once the renderer is set, you can control whether the renderer draws\n * continuously or on-demand by calling\n * {@link #setRenderMode}. The default is continuous rendering.\n * <p>\n * <h3>Activity Life-cycle</h3>\n * A GLSurfaceView must be notified when to pause and resume rendering. GLSurfaceView clients\n * are required to call {@link #onPause()} when the activity stops and\n * {@link #onResume()} when the activity starts. These calls allow GLSurfaceView to\n * pause and resume the rendering thread, and also allow GLSurfaceView to release and recreate\n * the OpenGL display.\n * <p>\n * <h3>Handling events</h3>\n * <p>\n * To handle an event you will typically subclass GLSurfaceView and override the\n * appropriate method, just as you would with any other View. However, when handling\n * the event, you may need to communicate with the Renderer object\n * that's running in the rendering thread. You can do this using any\n * standard Java cross-thread communication mechanism. In addition,\n * one relatively easy way to communicate with your renderer is\n * to call\n * {@link #queueEvent(Runnable)}. For example:\n * <pre class=\"prettyprint\">\n * class MyGLSurfaceView extends GLSurfaceView {\n *\n *     private MyRenderer mMyRenderer;\n *\n *     public void start() {\n *         mMyRenderer = ...;\n *         setRenderer(mMyRenderer);\n *     }\n *\n *     public boolean onKeyDown(int keyCode, KeyEvent event) {\n *         if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {\n *             queueEvent(new Runnable() {\n *                 // This method will be called on the rendering\n *                 // thread:\n *                 public void run() {\n *                     mMyRenderer.handleDpadCenter();\n *                 }});\n *             return true;\n *         }\n *         return super.onKeyDown(keyCode, event);\n *     }\n * }\n * </pre>\n *\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_ATTACH_DETACH",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_THREADS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_PAUSE_RESUME",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_SURFACE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_RENDERER",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_RENDERER_DRAW_FRAME",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EGL",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RENDERMODE_WHEN_DIRTY",
    "type" : "int",
    "comment" : "\n     * The renderer only renders\n     * when the surface is created, or when {@link #requestRender} is called.\n     *\n     * @see #getRenderMode()\n     * @see #setRenderMode(int)\n     * @see #requestRender()\n     ",
    "links" : [ "#requestRender" ]
  }, {
    "name" : "RENDERMODE_CONTINUOUSLY",
    "type" : "int",
    "comment" : "\n     * The renderer is called\n     * continuously to re-render the scene.\n     *\n     * @see #getRenderMode()\n     * @see #setRenderMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_CHECK_GL_ERROR",
    "type" : "int",
    "comment" : "\n     * Check glError() after every GL call and throw an exception if glError indicates\n     * that an error has occurred. This can be used to help track down which OpenGL ES call\n     * is causing an error.\n     *\n     * @see #getDebugFlags\n     * @see #setDebugFlags\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_LOG_GL_CALLS",
    "type" : "int",
    "comment" : "\n     * Log GL calls to the system log at \"verbose\" level with tag \"GLSurfaceView\".\n     *\n     * @see #getDebugFlags\n     * @see #setDebugFlags\n     ",
    "links" : [ ]
  }, {
    "name" : "sGLThreadManager",
    "type" : "GLThreadManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThisWeakRef",
    "type" : "WeakReference<GLSurfaceView>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGLThread",
    "type" : "GLThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenderer",
    "type" : "Renderer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDetached",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEGLConfigChooser",
    "type" : "EGLConfigChooser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEGLContextFactory",
    "type" : "EGLContextFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEGLWindowSurfaceFactory",
    "type" : "EGLWindowSurfaceFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGLWrapper",
    "type" : "GLWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDebugFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEGLContextClientVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreserveEGLContextOnPause",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGLWrapper(GLWrapper glWrapper)",
    "returnType" : "void",
    "comment" : "\n     * Set the glWrapper. If the glWrapper is not null, its\n     * {@link GLWrapper#wrap(GL)} method is called\n     * whenever a surface is created. A GLWrapper can be used to wrap\n     * the GL object that's passed to the renderer. Wrapping a GL\n     * object enables examining and modifying the behavior of the\n     * GL calls made by the renderer.\n     * <p>\n     * Wrapping is typically used for debugging purposes.\n     * <p>\n     * The default value is null.\n     * @param glWrapper the new GLWrapper\n     ",
    "links" : [ "GLWrapper#wrap" ]
  }, {
    "name" : "public void setDebugFlags(int debugFlags)",
    "returnType" : "void",
    "comment" : "\n     * Set the debug flags to a new value. The value is\n     * constructed by OR-together zero or more\n     * of the DEBUG_CHECK_* constants. The debug flags take effect\n     * whenever a surface is created. The default value is zero.\n     * @param debugFlags the new debug flags\n     * @see #DEBUG_CHECK_GL_ERROR\n     * @see #DEBUG_LOG_GL_CALLS\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDebugFlags()",
    "returnType" : "int",
    "comment" : "\n     * Get the current value of the debug flags.\n     * @return the current value of the debug flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPreserveEGLContextOnPause(boolean preserveOnPause)",
    "returnType" : "void",
    "comment" : "\n     * Control whether the EGL context is preserved when the GLSurfaceView is paused and\n     * resumed.\n     * <p>\n     * If set to true, then the EGL context may be preserved when the GLSurfaceView is paused.\n     * <p>\n     * Prior to API level 11, whether the EGL context is actually preserved or not\n     * depends upon whether the Android device can support an arbitrary number of\n     * EGL contexts or not. Devices that can only support a limited number of EGL\n     * contexts must release the EGL context in order to allow multiple applications\n     * to share the GPU.\n     * <p>\n     * If set to false, the EGL context will be released when the GLSurfaceView is paused,\n     * and recreated when the GLSurfaceView is resumed.\n     * <p>\n     *\n     * The default is false.\n     *\n     * @param preserveOnPause preserve the EGL context when paused\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getPreserveEGLContextOnPause()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the EGL context will be preserved when paused\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRenderer(Renderer renderer)",
    "returnType" : "void",
    "comment" : "\n     * Set the renderer associated with this view. Also starts the thread that\n     * will call the renderer, which in turn causes the rendering to start.\n     * <p>This method should be called once and only once in the life-cycle of\n     * a GLSurfaceView.\n     * <p>The following GLSurfaceView methods can only be called <em>before</em>\n     * setRenderer is called:\n     * <ul>\n     * <li>{@link #setEGLConfigChooser(boolean)}\n     * <li>{@link #setEGLConfigChooser(EGLConfigChooser)}\n     * <li>{@link #setEGLConfigChooser(int, int, int, int, int, int)}\n     * </ul>\n     * <p>\n     * The following GLSurfaceView methods can only be called <em>after</em>\n     * setRenderer is called:\n     * <ul>\n     * <li>{@link #getRenderMode()}\n     * <li>{@link #onPause()}\n     * <li>{@link #onResume()}\n     * <li>{@link #queueEvent(Runnable)}\n     * <li>{@link #requestRender()}\n     * <li>{@link #setRenderMode(int)}\n     * </ul>\n     *\n     * @param renderer the renderer to use to perform OpenGL drawing.\n     ",
    "links" : [ "#setEGLConfigChooser", "#setEGLConfigChooser", "#setEGLConfigChooser", "#getRenderMode", "#onPause", "#onResume", "#queueEvent", "#requestRender", "#setRenderMode" ]
  }, {
    "name" : "public void setEGLContextFactory(EGLContextFactory factory)",
    "returnType" : "void",
    "comment" : "\n     * Install a custom EGLContextFactory.\n     * <p>If this method is\n     * called, it must be called before {@link #setRenderer(Renderer)}\n     * is called.\n     * <p>\n     * If this method is not called, then by default\n     * a context will be created with no shared context and\n     * with a null attribute list.\n     ",
    "links" : [ "#setRenderer" ]
  }, {
    "name" : "public void setEGLWindowSurfaceFactory(EGLWindowSurfaceFactory factory)",
    "returnType" : "void",
    "comment" : "\n     * Install a custom EGLWindowSurfaceFactory.\n     * <p>If this method is\n     * called, it must be called before {@link #setRenderer(Renderer)}\n     * is called.\n     * <p>\n     * If this method is not called, then by default\n     * a window surface will be created with a null attribute list.\n     ",
    "links" : [ "#setRenderer" ]
  }, {
    "name" : "public void setEGLConfigChooser(EGLConfigChooser configChooser)",
    "returnType" : "void",
    "comment" : "\n     * Install a custom EGLConfigChooser.\n     * <p>If this method is\n     * called, it must be called before {@link #setRenderer(Renderer)}\n     * is called.\n     * <p>\n     * If no setEGLConfigChooser method is called, then by default the\n     * view will choose an EGLConfig that is compatible with the current\n     * android.view.Surface, with a depth buffer depth of\n     * at least 16 bits.\n     * @param configChooser\n     ",
    "links" : [ "#setRenderer" ]
  }, {
    "name" : "public void setEGLConfigChooser(boolean needDepth)",
    "returnType" : "void",
    "comment" : "\n     * Install a config chooser which will choose a config\n     * as close to 16-bit RGB as possible, with or without an optional depth\n     * buffer as close to 16-bits as possible.\n     * <p>If this method is\n     * called, it must be called before {@link #setRenderer(Renderer)}\n     * is called.\n     * <p>\n     * If no setEGLConfigChooser method is called, then by default the\n     * view will choose an RGB_888 surface with a depth buffer depth of\n     * at least 16 bits.\n     *\n     * @param needDepth\n     ",
    "links" : [ "#setRenderer" ]
  }, {
    "name" : "public void setEGLConfigChooser(int redSize, int greenSize, int blueSize, int alphaSize, int depthSize, int stencilSize)",
    "returnType" : "void",
    "comment" : "\n     * Install a config chooser which will choose a config\n     * with at least the specified depthSize and stencilSize,\n     * and exactly the specified redSize, greenSize, blueSize and alphaSize.\n     * <p>If this method is\n     * called, it must be called before {@link #setRenderer(Renderer)}\n     * is called.\n     * <p>\n     * If no setEGLConfigChooser method is called, then by default the\n     * view will choose an RGB_888 surface with a depth buffer depth of\n     * at least 16 bits.\n     *\n     ",
    "links" : [ "#setRenderer" ]
  }, {
    "name" : "public void setEGLContextClientVersion(int version)",
    "returnType" : "void",
    "comment" : "\n     * Inform the default EGLContextFactory and default EGLConfigChooser\n     * which EGLContext client version to pick.\n     * <p>Use this method to create an OpenGL ES 2.0-compatible context.\n     * Example:\n     * <pre class=\"prettyprint\">\n     *     public MyView(Context context) {\n     *         super(context);\n     *         setEGLContextClientVersion(2); // Pick an OpenGL ES 2.0 context.\n     *         setRenderer(new MyRenderer());\n     *     }\n     * </pre>\n     * <p>Note: Activities which require OpenGL ES 2.0 should indicate this by\n     * setting @lt;uses-feature android:glEsVersion=\"0x00020000\" /> in the activity's\n     * AndroidManifest.xml file.\n     * <p>If this method is called, it must be called before {@link #setRenderer(Renderer)}\n     * is called.\n     * <p>This method only affects the behavior of the default EGLContexFactory and the\n     * default EGLConfigChooser. If\n     * {@link #setEGLContextFactory(EGLContextFactory)} has been called, then the supplied\n     * EGLContextFactory is responsible for creating an OpenGL ES 2.0-compatible context.\n     * If\n     * {@link #setEGLConfigChooser(EGLConfigChooser)} has been called, then the supplied\n     * EGLConfigChooser is responsible for choosing an OpenGL ES 2.0-compatible config.\n     * @param version The EGLContext client version to choose. Use 2 for OpenGL ES 2.0\n     ",
    "links" : [ "#setRenderer", "#setEGLContextFactory", "#setEGLConfigChooser" ]
  }, {
    "name" : "public void setRenderMode(int renderMode)",
    "returnType" : "void",
    "comment" : "\n     * Set the rendering mode. When renderMode is\n     * RENDERMODE_CONTINUOUSLY, the renderer is called\n     * repeatedly to re-render the scene. When renderMode\n     * is RENDERMODE_WHEN_DIRTY, the renderer only rendered when the surface\n     * is created, or when {@link #requestRender} is called. Defaults to RENDERMODE_CONTINUOUSLY.\n     * <p>\n     * Using RENDERMODE_WHEN_DIRTY can improve battery life and overall system performance\n     * by allowing the GPU and CPU to idle when the view does not need to be updated.\n     * <p>\n     * This method can only be called after {@link #setRenderer(Renderer)}\n     *\n     * @param renderMode one of the RENDERMODE_X constants\n     * @see #RENDERMODE_CONTINUOUSLY\n     * @see #RENDERMODE_WHEN_DIRTY\n     ",
    "links" : [ "#requestRender", "#setRenderer" ]
  }, {
    "name" : "public int getRenderMode()",
    "returnType" : "int",
    "comment" : "\n     * Get the current rendering mode. May be called\n     * from any thread. Must not be called before a renderer has been set.\n     * @return the current rendering mode.\n     * @see #RENDERMODE_CONTINUOUSLY\n     * @see #RENDERMODE_WHEN_DIRTY\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestRender()",
    "returnType" : "void",
    "comment" : "\n     * Request that the renderer render a frame.\n     * This method is typically used when the render mode has been set to\n     * {@link #RENDERMODE_WHEN_DIRTY}, so that frames are only rendered on demand.\n     * May be called\n     * from any thread. Must not be called before a renderer has been set.\n     ",
    "links" : [ "#RENDERMODE_WHEN_DIRTY" ]
  }, {
    "name" : "public void surfaceCreated(SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "\n     * This method is part of the SurfaceHolder.Callback interface, and is\n     * not normally called or subclassed by clients of GLSurfaceView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void surfaceDestroyed(SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "\n     * This method is part of the SurfaceHolder.Callback interface, and is\n     * not normally called or subclassed by clients of GLSurfaceView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void surfaceChanged(SurfaceHolder holder, int format, int w, int h)",
    "returnType" : "void",
    "comment" : "\n     * This method is part of the SurfaceHolder.Callback interface, and is\n     * not normally called or subclassed by clients of GLSurfaceView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void surfaceRedrawNeededAsync(SurfaceHolder holder, Runnable finishDrawing)",
    "returnType" : "void",
    "comment" : "\n     * This method is part of the SurfaceHolder.Callback2 interface, and is\n     * not normally called or subclassed by clients of GLSurfaceView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void surfaceRedrawNeeded(SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "\n     * This method is part of the SurfaceHolder.Callback2 interface, and is\n     * not normally called or subclassed by clients of GLSurfaceView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPause()",
    "returnType" : "void",
    "comment" : "\n     * Pause the rendering thread, optionally tearing down the EGL context\n     * depending upon the value of {@link #setPreserveEGLContextOnPause(boolean)}.\n     *\n     * This method should be called when it is no longer desirable for the\n     * GLSurfaceView to continue rendering, such as in response to\n     * {@link android.app.Activity#onStop Activity.onStop}.\n     *\n     * Must not be called before a renderer has been set.\n     ",
    "links" : [ "#setPreserveEGLContextOnPause", "android.app.Activity#onStop" ]
  }, {
    "name" : "public void onResume()",
    "returnType" : "void",
    "comment" : "\n     * Resumes the rendering thread, re-creating the OpenGL context if necessary. It\n     * is the counterpart to {@link #onPause()}.\n     *\n     * This method should typically be called in\n     * {@link android.app.Activity#onStart Activity.onStart}.\n     *\n     * Must not be called before a renderer has been set.\n     ",
    "links" : [ "#onPause", "android.app.Activity#onStart" ]
  }, {
    "name" : "public void queueEvent(Runnable r)",
    "returnType" : "void",
    "comment" : "\n     * Queue a runnable to be run on the GL rendering thread. This can be used\n     * to communicate with the Renderer on the rendering thread.\n     * Must not be called before a renderer has been set.\n     * @param r the runnable to be run on the GL rendering thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "\n     * This method is used as part of the View class and is not normally\n     * called or subclassed by clients of GLSurfaceView.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkRenderThreadState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "LOG_ATTACH_DETACH", "LOG_THREADS", "LOG_PAUSE_RESUME", "LOG_SURFACE", "LOG_RENDERER", "LOG_RENDERER_DRAW_FRAME", "LOG_EGL", "RENDERMODE_WHEN_DIRTY", "RENDERMODE_CONTINUOUSLY", "DEBUG_CHECK_GL_ERROR", "DEBUG_LOG_GL_CALLS", "sGLThreadManager", "mThisWeakRef", "mGLThread", "mRenderer", "mDetached", "mEGLConfigChooser", "mEGLContextFactory", "mEGLWindowSurfaceFactory", "mGLWrapper", "mDebugFlags", "mEGLContextClientVersion", "mPreserveEGLContextOnPause" ],
  "methodNames" : [ "protected void finalize() throws Throwable", "private void init()", "public void setGLWrapper(GLWrapper glWrapper)", "public void setDebugFlags(int debugFlags)", "public int getDebugFlags()", "public void setPreserveEGLContextOnPause(boolean preserveOnPause)", "public boolean getPreserveEGLContextOnPause()", "public void setRenderer(Renderer renderer)", "public void setEGLContextFactory(EGLContextFactory factory)", "public void setEGLWindowSurfaceFactory(EGLWindowSurfaceFactory factory)", "public void setEGLConfigChooser(EGLConfigChooser configChooser)", "public void setEGLConfigChooser(boolean needDepth)", "public void setEGLConfigChooser(int redSize, int greenSize, int blueSize, int alphaSize, int depthSize, int stencilSize)", "public void setEGLContextClientVersion(int version)", "public void setRenderMode(int renderMode)", "public int getRenderMode()", "public void requestRender()", "public void surfaceCreated(SurfaceHolder holder)", "public void surfaceDestroyed(SurfaceHolder holder)", "public void surfaceChanged(SurfaceHolder holder, int format, int w, int h)", "public void surfaceRedrawNeededAsync(SurfaceHolder holder, Runnable finishDrawing)", "public void surfaceRedrawNeeded(SurfaceHolder holder)", "public void onPause()", "public void onResume()", "public void queueEvent(Runnable r)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "private void checkRenderThreadState()" ]
}