{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Path.java",
  "packageName" : "android.graphics",
  "className" : "Path",
  "comment" : "\n * The Path class encapsulates compound (multiple contour) geometric paths\n * consisting of straight line segments, quadratic curves, and cubic curves.\n * It can be drawn with canvas.drawPath(path, paint), either filled or stroked\n * (based on the paint's Style), or it can be used for clipping or to draw\n * text on a path.\n ",
  "variables" : [ {
    "name" : "sRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativePath",
    "type" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "isSimplePath",
    "type" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "rects",
    "type" : "Region",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastDirection",
    "type" : "Direction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFillTypeArray",
    "type" : "FillType[]",
    "comment" : " these must be in the same order as their native values",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Clear any lines and curves from the path, making it empty.\n     * This does NOT change the fill-type setting.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rewind()",
    "returnType" : "void",
    "comment" : "\n     * Rewinds the path: clears any lines and curves from the path but\n     * keeps the internal data structure for faster reuse.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(@NonNull Path src)",
    "returnType" : "void",
    "comment" : " Replace the contents of this with the contents of src.\n    ",
    "links" : [ ]
  }, {
    "name" : "public boolean op(@NonNull Path path, @NonNull Op op)",
    "returnType" : "boolean",
    "comment" : "\n     * Set this path to the result of applying the Op to this path and the specified path.\n     * The resulting path will be constructed from non-overlapping contours.\n     * The curve order is reduced where possible so that cubics may be turned\n     * into quadratics, and quadratics maybe turned into lines.\n     *\n     * @param path The second operand (for difference, the subtrahend)\n     *\n     * @return True if operation succeeded, false otherwise and this path remains unmodified.\n     *\n     * @see Op\n     * @see #op(Path, Path, android.graphics.Path.Op)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean op(@NonNull Path path1, @NonNull Path path2, @NonNull Op op)",
    "returnType" : "boolean",
    "comment" : "\n     * Set this path to the result of applying the Op to the two specified paths.\n     * The resulting path will be constructed from non-overlapping contours.\n     * The curve order is reduced where possible so that cubics may be turned\n     * into quadratics, and quadratics maybe turned into lines.\n     *\n     * @param path1 The first operand (for difference, the minuend)\n     * @param path2 The second operand (for difference, the subtrahend)\n     *\n     * @return True if operation succeeded, false otherwise and this path remains unmodified.\n     *\n     * @see Op\n     * @see #op(Path, android.graphics.Path.Op)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConvex()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the path's convexity, as defined by the content of the path.\n     * <p>\n     * A path is convex if it has a single contour, and only ever curves in a\n     * single direction.\n     * <p>\n     * This function will calculate the convexity of the path from its control\n     * points, and cache the result.\n     *\n     * @return True if the path is convex.\n     *\n     * @deprecated This method is not reliable. The way convexity is computed may change from\n     * release to release, and convexity could change based on a matrix as well. This method was\n     * useful when non-convex Paths were unable to be used in certain contexts, but that is no\n     * longer the case.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FillType getFillType()",
    "returnType" : "FillType",
    "comment" : "\n     * Return the path's fill type. This defines how \"inside\" is\n     * computed. The default value is WINDING.\n     *\n     * @return the path's fill type\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFillType(@NonNull FillType ft)",
    "returnType" : "void",
    "comment" : "\n     * Set the path's fill type. This defines how \"inside\" is computed.\n     *\n     * @param ft The new fill type for this path\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInverseFillType()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the filltype is one of the INVERSE variants\n     *\n     * @return true if the filltype is one of the INVERSE variants\n     ",
    "links" : [ ]
  }, {
    "name" : "public void toggleInverseFillType()",
    "returnType" : "void",
    "comment" : "\n     * Toggles the INVERSE state of the filltype\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the path is empty (contains no lines or curves)\n     *\n     * @return true if the path is empty (contains no lines or curves)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRect(@Nullable RectF rect)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the path specifies a rectangle. If so, and if rect is\n     * not null, set rect to the bounds of the path. If the path does not\n     * specify a rectangle, return false and ignore rect.\n     *\n     * @param rect If not null, returns the bounds of the path if it specifies\n     *             a rectangle\n     * @return     true if the path specifies a rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void computeBounds(@NonNull RectF bounds, boolean exact)",
    "returnType" : "void",
    "comment" : "\n     * Compute the bounds of the control points of the path, and write the\n     * answer into bounds. If the path contains 0 or 1 points, the bounds is\n     * set to (0,0,0,0)\n     *\n     * @param bounds Returns the computed bounds of the path's control points.\n     * @param exact This parameter is no longer used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void incReserve(int extraPtCount)",
    "returnType" : "void",
    "comment" : "\n     * Hint to the path to prepare for adding more points. This can allow the\n     * path to more efficiently allocate its storage.\n     *\n     * @param extraPtCount The number of extra points that may be added to this\n     *                     path\n     ",
    "links" : [ ]
  }, {
    "name" : "public void moveTo(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Set the beginning of the next contour to the point (x,y).\n     *\n     * @param x The x-coordinate of the start of a new contour\n     * @param y The y-coordinate of the start of a new contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rMoveTo(float dx, float dy)",
    "returnType" : "void",
    "comment" : "\n     * Set the beginning of the next contour relative to the last point on the\n     * previous contour. If there is no previous contour, this is treated the\n     * same as moveTo().\n     *\n     * @param dx The amount to add to the x-coordinate of the end of the\n     *           previous contour, to specify the start of a new contour\n     * @param dy The amount to add to the y-coordinate of the end of the\n     *           previous contour, to specify the start of a new contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void lineTo(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Add a line from the last point to the specified point (x,y).\n     * If no moveTo() call has been made for this contour, the first point is\n     * automatically set to (0,0).\n     *\n     * @param x The x-coordinate of the end of a line\n     * @param y The y-coordinate of the end of a line\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rLineTo(float dx, float dy)",
    "returnType" : "void",
    "comment" : "\n     * Same as lineTo, but the coordinates are considered relative to the last\n     * point on this contour. If there is no previous point, then a moveTo(0,0)\n     * is inserted automatically.\n     *\n     * @param dx The amount to add to the x-coordinate of the previous point on\n     *           this contour, to specify a line\n     * @param dy The amount to add to the y-coordinate of the previous point on\n     *           this contour, to specify a line\n     ",
    "links" : [ ]
  }, {
    "name" : "public void quadTo(float x1, float y1, float x2, float y2)",
    "returnType" : "void",
    "comment" : "\n     * Add a quadratic bezier from the last point, approaching control point\n     * (x1,y1), and ending at (x2,y2). If no moveTo() call has been made for\n     * this contour, the first point is automatically set to (0,0).\n     *\n     * @param x1 The x-coordinate of the control point on a quadratic curve\n     * @param y1 The y-coordinate of the control point on a quadratic curve\n     * @param x2 The x-coordinate of the end point on a quadratic curve\n     * @param y2 The y-coordinate of the end point on a quadratic curve\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rQuadTo(float dx1, float dy1, float dx2, float dy2)",
    "returnType" : "void",
    "comment" : "\n     * Same as quadTo, but the coordinates are considered relative to the last\n     * point on this contour. If there is no previous point, then a moveTo(0,0)\n     * is inserted automatically.\n     *\n     * @param dx1 The amount to add to the x-coordinate of the last point on\n     *            this contour, for the control point of a quadratic curve\n     * @param dy1 The amount to add to the y-coordinate of the last point on\n     *            this contour, for the control point of a quadratic curve\n     * @param dx2 The amount to add to the x-coordinate of the last point on\n     *            this contour, for the end point of a quadratic curve\n     * @param dy2 The amount to add to the y-coordinate of the last point on\n     *            this contour, for the end point of a quadratic curve\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cubicTo(float x1, float y1, float x2, float y2, float x3, float y3)",
    "returnType" : "void",
    "comment" : "\n     * Add a cubic bezier from the last point, approaching control points\n     * (x1,y1) and (x2,y2), and ending at (x3,y3). If no moveTo() call has been\n     * made for this contour, the first point is automatically set to (0,0).\n     *\n     * @param x1 The x-coordinate of the 1st control point on a cubic curve\n     * @param y1 The y-coordinate of the 1st control point on a cubic curve\n     * @param x2 The x-coordinate of the 2nd control point on a cubic curve\n     * @param y2 The y-coordinate of the 2nd control point on a cubic curve\n     * @param x3 The x-coordinate of the end point on a cubic curve\n     * @param y3 The y-coordinate of the end point on a cubic curve\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rCubicTo(float x1, float y1, float x2, float y2, float x3, float y3)",
    "returnType" : "void",
    "comment" : "\n     * Same as cubicTo, but the coordinates are considered relative to the\n     * current point on this contour. If there is no previous point, then a\n     * moveTo(0,0) is inserted automatically.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void arcTo(@NonNull RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo)",
    "returnType" : "void",
    "comment" : "\n     * Append the specified arc to the path as a new contour. If the start of\n     * the path is different from the path's current last point, then an\n     * automatic lineTo() is added to connect the current contour to the\n     * start of the arc. However, if the path is empty, then we call moveTo()\n     * with the first point of the arc.\n     *\n     * @param oval        The bounds of oval defining shape and size of the arc\n     * @param startAngle  Starting angle (in degrees) where the arc begins\n     * @param sweepAngle  Sweep angle (in degrees) measured clockwise, treated\n     *                    mod 360.\n     * @param forceMoveTo If true, always begin a new contour with the arc\n     ",
    "links" : [ ]
  }, {
    "name" : "public void arcTo(@NonNull RectF oval, float startAngle, float sweepAngle)",
    "returnType" : "void",
    "comment" : "\n     * Append the specified arc to the path as a new contour. If the start of\n     * the path is different from the path's current last point, then an\n     * automatic lineTo() is added to connect the current contour to the\n     * start of the arc. However, if the path is empty, then we call moveTo()\n     * with the first point of the arc.\n     *\n     * @param oval        The bounds of oval defining shape and size of the arc\n     * @param startAngle  Starting angle (in degrees) where the arc begins\n     * @param sweepAngle  Sweep angle (in degrees) measured clockwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)",
    "returnType" : "void",
    "comment" : "\n     * Append the specified arc to the path as a new contour. If the start of\n     * the path is different from the path's current last point, then an\n     * automatic lineTo() is added to connect the current contour to the\n     * start of the arc. However, if the path is empty, then we call moveTo()\n     * with the first point of the arc.\n     *\n     * @param startAngle  Starting angle (in degrees) where the arc begins\n     * @param sweepAngle  Sweep angle (in degrees) measured clockwise, treated\n     *                    mod 360.\n     * @param forceMoveTo If true, always begin a new contour with the arc\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the current contour. If the current point is not equal to the\n     * first point of the contour, a line segment is automatically added.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void detectSimplePath(float left, float top, float right, float bottom, Direction dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addRect(@NonNull RectF rect, @NonNull Direction dir)",
    "returnType" : "void",
    "comment" : "\n     * Add a closed rectangle contour to the path\n     *\n     * @param rect The rectangle to add as a closed contour to the path\n     * @param dir  The direction to wind the rectangle's contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRect(float left, float top, float right, float bottom, @NonNull Direction dir)",
    "returnType" : "void",
    "comment" : "\n     * Add a closed rectangle contour to the path\n     *\n     * @param left   The left side of a rectangle to add to the path\n     * @param top    The top of a rectangle to add to the path\n     * @param right  The right side of a rectangle to add to the path\n     * @param bottom The bottom of a rectangle to add to the path\n     * @param dir    The direction to wind the rectangle's contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOval(@NonNull RectF oval, @NonNull Direction dir)",
    "returnType" : "void",
    "comment" : "\n     * Add a closed oval contour to the path\n     *\n     * @param oval The bounds of the oval to add as a closed contour to the path\n     * @param dir  The direction to wind the oval's contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOval(float left, float top, float right, float bottom, @NonNull Direction dir)",
    "returnType" : "void",
    "comment" : "\n     * Add a closed oval contour to the path\n     *\n     * @param dir The direction to wind the oval's contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addCircle(float x, float y, float radius, @NonNull Direction dir)",
    "returnType" : "void",
    "comment" : "\n     * Add a closed circle contour to the path\n     *\n     * @param x   The x-coordinate of the center of a circle to add to the path\n     * @param y   The y-coordinate of the center of a circle to add to the path\n     * @param radius The radius of a circle to add to the path\n     * @param dir    The direction to wind the circle's contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addArc(@NonNull RectF oval, float startAngle, float sweepAngle)",
    "returnType" : "void",
    "comment" : "\n     * Add the specified arc to the path as a new contour.\n     *\n     * @param oval The bounds of oval defining the shape and size of the arc\n     * @param startAngle Starting angle (in degrees) where the arc begins\n     * @param sweepAngle Sweep angle (in degrees) measured clockwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle)",
    "returnType" : "void",
    "comment" : "\n     * Add the specified arc to the path as a new contour.\n     *\n     * @param startAngle Starting angle (in degrees) where the arc begins\n     * @param sweepAngle Sweep angle (in degrees) measured clockwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRoundRect(@NonNull RectF rect, float rx, float ry, @NonNull Direction dir)",
    "returnType" : "void",
    "comment" : "\n        * Add a closed round-rectangle contour to the path\n     *\n     * @param rect The bounds of a round-rectangle to add to the path\n     * @param rx   The x-radius of the rounded corners on the round-rectangle\n     * @param ry   The y-radius of the rounded corners on the round-rectangle\n     * @param dir  The direction to wind the round-rectangle's contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRoundRect(float left, float top, float right, float bottom, float rx, float ry, @NonNull Direction dir)",
    "returnType" : "void",
    "comment" : "\n     * Add a closed round-rectangle contour to the path\n     *\n     * @param rx   The x-radius of the rounded corners on the round-rectangle\n     * @param ry   The y-radius of the rounded corners on the round-rectangle\n     * @param dir  The direction to wind the round-rectangle's contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRoundRect(@NonNull RectF rect, @NonNull float[] radii, @NonNull Direction dir)",
    "returnType" : "void",
    "comment" : "\n     * Add a closed round-rectangle contour to the path. Each corner receives\n     * two radius values [X, Y]. The corners are ordered top-left, top-right,\n     * bottom-right, bottom-left\n     *\n     * @param rect The bounds of a round-rectangle to add to the path\n     * @param radii Array of 8 values, 4 pairs of [X,Y] radii\n     * @param dir  The direction to wind the round-rectangle's contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRoundRect(float left, float top, float right, float bottom, @NonNull float[] radii, @NonNull Direction dir)",
    "returnType" : "void",
    "comment" : "\n     * Add a closed round-rectangle contour to the path. Each corner receives\n     * two radius values [X, Y]. The corners are ordered top-left, top-right,\n     * bottom-right, bottom-left\n     *\n     * @param radii Array of 8 values, 4 pairs of [X,Y] radii\n     * @param dir  The direction to wind the round-rectangle's contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addPath(@NonNull Path src, float dx, float dy)",
    "returnType" : "void",
    "comment" : "\n     * Add a copy of src to the path, offset by (dx,dy)\n     *\n     * @param src The path to add as a new contour\n     * @param dx  The amount to translate the path in X as it is added\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addPath(@NonNull Path src)",
    "returnType" : "void",
    "comment" : "\n     * Add a copy of src to the path\n     *\n     * @param src The path that is appended to the current path\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addPath(@NonNull Path src, @NonNull Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Add a copy of src to the path, transformed by matrix\n     *\n     * @param src The path to add as a new contour\n     ",
    "links" : [ ]
  }, {
    "name" : "public void offset(float dx, float dy, @Nullable Path dst)",
    "returnType" : "void",
    "comment" : "\n     * Offset the path by (dx,dy)\n     *\n     * @param dx  The amount in the X direction to offset the entire path\n     * @param dy  The amount in the Y direction to offset the entire path\n     * @param dst The translated path is written here. If this is null, then\n     *            the original path is modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void offset(float dx, float dy)",
    "returnType" : "void",
    "comment" : "\n     * Offset the path by (dx,dy)\n     *\n     * @param dx The amount in the X direction to offset the entire path\n     * @param dy The amount in the Y direction to offset the entire path\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLastPoint(float dx, float dy)",
    "returnType" : "void",
    "comment" : "\n     * Sets the last point of the path.\n     *\n     * @param dx The new X coordinate for the last point\n     * @param dy The new Y coordinate for the last point\n     ",
    "links" : [ ]
  }, {
    "name" : "public void transform(@NonNull Matrix matrix, @Nullable Path dst)",
    "returnType" : "void",
    "comment" : "\n     * Transform the points in this path by matrix, and write the answer\n     * into dst. If dst is null, then the the original path is modified.\n     *\n     * @param matrix The matrix to apply to the path\n     * @param dst    The transformed path is written here. If dst is null,\n     *               then the the original path is modified\n     ",
    "links" : [ ]
  }, {
    "name" : "public void transform(@NonNull Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Transform the points in this path by matrix.\n     *\n     * @param matrix The matrix to apply to the path\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long readOnlyNI()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " final long mutateNI()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float[] approximate(@FloatRange(from = 0) float acceptableError)",
    "returnType" : "float[]",
    "comment" : "\n     * Approximate the <code>Path</code> with a series of line segments.\n     * This returns float[] with the array containing point components.\n     * There are three components for each point, in order:\n     * <ul>\n     *     <li>Fraction along the length of the path that the point resides</li>\n     *     <li>The x coordinate of the point</li>\n     *     <li>The y coordinate of the point</li>\n     * </ul>\n     * <p>Two points may share the same fraction along its length when there is\n     * a move action within the Path.</p>\n     *\n     * @param acceptableError The acceptable error for a line on the\n     *                        Path. Typically this would be 0.5 so that\n     *                        the error is less than half a pixel.\n     * @return An array of components for points approximating the Path.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nInit()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nInit(long nPath)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSet(long native_dst, long nSrc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nComputeBounds(long nPath, RectF bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nIncReserve(long nPath, int extraPtCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nMoveTo(long nPath, float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nRMoveTo(long nPath, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nLineTo(long nPath, float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nRLineTo(long nPath, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nQuadTo(long nPath, float x1, float y1, float x2, float y2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nRQuadTo(long nPath, float dx1, float dy1, float dx2, float dy2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nCubicTo(long nPath, float x1, float y1, float x2, float y2, float x3, float y3)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nRCubicTo(long nPath, float x1, float y1, float x2, float y2, float x3, float y3)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nArcTo(long nPath, float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nClose(long nPath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddRect(long nPath, float left, float top, float right, float bottom, int dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddOval(long nPath, float left, float top, float right, float bottom, int dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddCircle(long nPath, float x, float y, float radius, int dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddArc(long nPath, float left, float top, float right, float bottom, float startAngle, float sweepAngle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddRoundRect(long nPath, float left, float top, float right, float bottom, float rx, float ry, int dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddRoundRect(long nPath, float left, float top, float right, float bottom, float[] radii, int dir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddPath(long nPath, long src, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddPath(long nPath, long src)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddPath(long nPath, long src, long matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nOffset(long nPath, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetLastPoint(long nPath, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nTransform(long nPath, long matrix, long dst_path)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nTransform(long nPath, long matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nOp(long path1, long path2, int op, long result)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float[] nApproximate(long nPath, float error)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nIsRect(long nPath, RectF rect)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nReset(long nPath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nRewind(long nPath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nIsEmpty(long nPath)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nIsConvex(long nPath)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetFillType(long nPath)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetFillType(long nPath, int ft)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "sRegistry", "mNativePath", "isSimplePath", "rects", "mLastDirection", "sFillTypeArray" ],
  "methodNames" : [ "public void reset()", "public void rewind()", "public void set(@NonNull Path src)", "public boolean op(@NonNull Path path, @NonNull Op op)", "public boolean op(@NonNull Path path1, @NonNull Path path2, @NonNull Op op)", "public boolean isConvex()", "public FillType getFillType()", "public void setFillType(@NonNull FillType ft)", "public boolean isInverseFillType()", "public void toggleInverseFillType()", "public boolean isEmpty()", "public boolean isRect(@Nullable RectF rect)", "public void computeBounds(@NonNull RectF bounds, boolean exact)", "public void incReserve(int extraPtCount)", "public void moveTo(float x, float y)", "public void rMoveTo(float dx, float dy)", "public void lineTo(float x, float y)", "public void rLineTo(float dx, float dy)", "public void quadTo(float x1, float y1, float x2, float y2)", "public void rQuadTo(float dx1, float dy1, float dx2, float dy2)", "public void cubicTo(float x1, float y1, float x2, float y2, float x3, float y3)", "public void rCubicTo(float x1, float y1, float x2, float y2, float x3, float y3)", "public void arcTo(@NonNull RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo)", "public void arcTo(@NonNull RectF oval, float startAngle, float sweepAngle)", "public void arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)", "public void close()", "private void detectSimplePath(float left, float top, float right, float bottom, Direction dir)", "public void addRect(@NonNull RectF rect, @NonNull Direction dir)", "public void addRect(float left, float top, float right, float bottom, @NonNull Direction dir)", "public void addOval(@NonNull RectF oval, @NonNull Direction dir)", "public void addOval(float left, float top, float right, float bottom, @NonNull Direction dir)", "public void addCircle(float x, float y, float radius, @NonNull Direction dir)", "public void addArc(@NonNull RectF oval, float startAngle, float sweepAngle)", "public void addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle)", "public void addRoundRect(@NonNull RectF rect, float rx, float ry, @NonNull Direction dir)", "public void addRoundRect(float left, float top, float right, float bottom, float rx, float ry, @NonNull Direction dir)", "public void addRoundRect(@NonNull RectF rect, @NonNull float[] radii, @NonNull Direction dir)", "public void addRoundRect(float left, float top, float right, float bottom, @NonNull float[] radii, @NonNull Direction dir)", "public void addPath(@NonNull Path src, float dx, float dy)", "public void addPath(@NonNull Path src)", "public void addPath(@NonNull Path src, @NonNull Matrix matrix)", "public void offset(float dx, float dy, @Nullable Path dst)", "public void offset(float dx, float dy)", "public void setLastPoint(float dx, float dy)", "public void transform(@NonNull Matrix matrix, @Nullable Path dst)", "public void transform(@NonNull Matrix matrix)", "public final long readOnlyNI()", " final long mutateNI()", "public float[] approximate(@FloatRange(from = 0) float acceptableError)", "private static native long nInit()", "private static native long nInit(long nPath)", "private static native long nGetFinalizer()", "private static native void nSet(long native_dst, long nSrc)", "private static native void nComputeBounds(long nPath, RectF bounds)", "private static native void nIncReserve(long nPath, int extraPtCount)", "private static native void nMoveTo(long nPath, float x, float y)", "private static native void nRMoveTo(long nPath, float dx, float dy)", "private static native void nLineTo(long nPath, float x, float y)", "private static native void nRLineTo(long nPath, float dx, float dy)", "private static native void nQuadTo(long nPath, float x1, float y1, float x2, float y2)", "private static native void nRQuadTo(long nPath, float dx1, float dy1, float dx2, float dy2)", "private static native void nCubicTo(long nPath, float x1, float y1, float x2, float y2, float x3, float y3)", "private static native void nRCubicTo(long nPath, float x1, float y1, float x2, float y2, float x3, float y3)", "private static native void nArcTo(long nPath, float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)", "private static native void nClose(long nPath)", "private static native void nAddRect(long nPath, float left, float top, float right, float bottom, int dir)", "private static native void nAddOval(long nPath, float left, float top, float right, float bottom, int dir)", "private static native void nAddCircle(long nPath, float x, float y, float radius, int dir)", "private static native void nAddArc(long nPath, float left, float top, float right, float bottom, float startAngle, float sweepAngle)", "private static native void nAddRoundRect(long nPath, float left, float top, float right, float bottom, float rx, float ry, int dir)", "private static native void nAddRoundRect(long nPath, float left, float top, float right, float bottom, float[] radii, int dir)", "private static native void nAddPath(long nPath, long src, float dx, float dy)", "private static native void nAddPath(long nPath, long src)", "private static native void nAddPath(long nPath, long src, long matrix)", "private static native void nOffset(long nPath, float dx, float dy)", "private static native void nSetLastPoint(long nPath, float dx, float dy)", "private static native void nTransform(long nPath, long matrix, long dst_path)", "private static native void nTransform(long nPath, long matrix)", "private static native boolean nOp(long path1, long path2, int op, long result)", "private static native float[] nApproximate(long nPath, float error)", "private static native boolean nIsRect(long nPath, RectF rect)", "private static native void nReset(long nPath)", "private static native void nRewind(long nPath)", "private static native boolean nIsEmpty(long nPath)", "private static native boolean nIsConvex(long nPath)", "private static native int nGetFillType(long nPath)", "private static native void nSetFillType(long nPath, int ft)" ]
}