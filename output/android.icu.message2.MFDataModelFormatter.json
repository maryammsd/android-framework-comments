{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/message2/MFDataModelFormatter.java",
  "packageName" : "android.icu.message2",
  "className" : "MFDataModelFormatter",
  "comment" : " TODO: move this in the MessageFormatter?",
  "links" : [ ],
  "variables" : [ {
    "name" : "locale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dm",
    "type" : "MFDataModel.Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "standardFunctions",
    "type" : "MFFunctionRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "customFunctions",
    "type" : "MFFunctionRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_REGISTY",
    "type" : "MFFunctionRegistry",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " String format(Map<String, Object> arguments)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Pattern findBestMatchingPattern(SelectMessage sm, Map<String, Object> variables, Map<String, Object> arguments)",
    "returnType" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int sortVariants(IntVarTuple o1, IntVarTuple o2)",
    "returnType" : "int",
    "comment" : " spec:\n     * `SortVariants` is a method whose single argument is\n     * a list of (integer, _variant_) tuples.\n     * It returns a list of (integer, _variant_) tuples.\n     * Any implementation of `SortVariants` is acceptable\n     * as long as it satisfies the following requirements:\n     *\n     * 1. Let `sortable` be an arbitrary list of (integer, _variant_) tuples.\n     * 1. Let `sorted` be `SortVariants(sortable)`.\n     * 1. `sorted` is the result of sorting `sortable` using the following comparator:\n     *    1. `(i1, v1)` <= `(i2, v2)` if and only if `i1 <= i2`.\n     * 1. The sort is stable (pairs of tuples from `sortable` that are equal\n     *    in their first element have the same relative order in `sorted`).\n     ",
    "links" : [ ]
  }, {
    "name" : "private List<String> matchSelectorKeys(ResolvedSelector rv, List<String> keys)",
    "returnType" : "List<String>",
    "comment" : "\n     * spec:\n     * The method MatchSelectorKeys is determined by the implementation.\n     * It takes as arguments a resolved _selector_ value `rv` and a list of string keys `keys`,\n     * and returns a list of string keys in preferential order.\n     * The returned list MUST contain only unique elements of the input list `keys`.\n     * The returned list MAY be empty.\n     * The most-preferred key is first,\n     * with each successive key appearing in order by decreasing preference.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void formattingError(String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private FormatterFactory getFormattingFunctionFactoryByName(Object toFormat, String functionName)",
    "returnType" : "FormatterFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Object resolveLiteralOrVariable(LiteralOrVariableRef value, Map<String, Object> localVars, Map<String, Object> arguments)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Map<String, Object> convertOptions(Map<String, Option> options, Map<String, Object> localVars, Map<String, Object> arguments)",
    "returnType" : "Map<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private FormattedPlaceholder formatExpression(Expression expression, Map<String, Object> variables, Map<String, Object> arguments)",
    "returnType" : "FormattedPlaceholder",
    "comment" : "\n     * Formats an expression.\n     *\n     * @param expression the expression to format\n     * @param variables local variables, created from declarations (`.input` and `.local`)\n     * @param arguments the arguments passed at runtime to be formatted (`mf.format(arguments)`)\n     ",
    "links" : [ ]
  }, {
    "name" : "private Map<String, Object> resolveDeclarations(List<MFDataModel.Declaration> declarations, Map<String, Object> arguments)",
    "returnType" : "Map<String, Object>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " String format(Map<String, Object> arguments)", "private Pattern findBestMatchingPattern(SelectMessage sm, Map<String, Object> variables, Map<String, Object> arguments)", "private static int sortVariants(IntVarTuple o1, IntVarTuple o2)", "private List<String> matchSelectorKeys(ResolvedSelector rv, List<String> keys)", "private static void formattingError(String message)", "private FormatterFactory getFormattingFunctionFactoryByName(Object toFormat, String functionName)", "private static Object resolveLiteralOrVariable(LiteralOrVariableRef value, Map<String, Object> localVars, Map<String, Object> arguments)", "private static Map<String, Object> convertOptions(Map<String, Option> options, Map<String, Object> localVars, Map<String, Object> arguments)", "private FormattedPlaceholder formatExpression(Expression expression, Map<String, Object> variables, Map<String, Object> arguments)", "private Map<String, Object> resolveDeclarations(List<MFDataModel.Declaration> declarations, Map<String, Object> arguments)" ],
  "variableNames" : [ "locale", "dm", "standardFunctions", "customFunctions", "EMPTY_REGISTY" ]
}