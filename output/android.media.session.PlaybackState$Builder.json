{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/session/PlaybackState.java",
  "packageName" : "android.media.session",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link PlaybackState} objects.\n     ",
  "links" : [ "android.media.session.PlaybackState" ],
  "variables" : [ {
    "name" : "mCustomActions",
    "type" : "List<PlaybackState.CustomAction>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPosition",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBufferedPosition",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpeed",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActions",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorMessage",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveItemId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setState(@State int state, long position, float playbackSpeed, long updateTime)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the current state of playback.\n         * <p>\n         * The position must be in ms and indicates the current playback\n         * position within the item. If the position is unknown use\n         * {@link #PLAYBACK_POSITION_UNKNOWN}. When not using an unknown\n         * position the time at which the position was updated must be provided.\n         * It is okay to use {@link SystemClock#elapsedRealtime()} if the\n         * current position was just retrieved.\n         * <p>\n         * The speed is a multiple of normal playback and should be 0 when\n         * paused and negative when rewinding. Normal playback speed is 1.0.\n         * <p>\n         * The state must be one of the following:\n         * <ul>\n         * <li> {@link PlaybackState#STATE_NONE}</li>\n         * <li> {@link PlaybackState#STATE_STOPPED}</li>\n         * <li> {@link PlaybackState#STATE_PLAYING}</li>\n         * <li> {@link PlaybackState#STATE_PAUSED}</li>\n         * <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li>\n         * <li> {@link PlaybackState#STATE_REWINDING}</li>\n         * <li> {@link PlaybackState#STATE_BUFFERING}</li>\n         * <li> {@link PlaybackState#STATE_ERROR}</li>\n         * <li> {@link PlaybackState#STATE_CONNECTING}</li>\n         * <li> {@link PlaybackState#STATE_SKIPPING_TO_PREVIOUS}</li>\n         * <li> {@link PlaybackState#STATE_SKIPPING_TO_NEXT}</li>\n         * <li> {@link PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM}</li>\n         * <li> {@link PlaybackState#STATE_PLAYBACK_SUPPRESSED}</li>\n         * </ul>\n         *\n         * @param state The current state of playback.\n         * @param position The position in the current item in ms.\n         * @param playbackSpeed The current speed of playback as a multiple of\n         *            normal playback.\n         * @param updateTime The time in the {@link SystemClock#elapsedRealtime}\n         *            timebase that the position was updated at.\n         * @return this\n         ",
    "links" : [ "#PLAYBACK_POSITION_UNKNOWN", "android.media.session.PlaybackState#STATE_SKIPPING_TO_NEXT", "android.media.session.PlaybackState#STATE_REWINDING", "android.media.session.PlaybackState#STATE_BUFFERING", "android.media.session.PlaybackState#STATE_PLAYBACK_SUPPRESSED", "android.os.SystemClock#elapsedRealtime()", "android.media.session.PlaybackState#STATE_ERROR", "android.media.session.PlaybackState#STATE_NONE", "android.media.session.PlaybackState#STATE_CONNECTING", "android.os.SystemClock#elapsedRealtime", "android.media.session.PlaybackState#STATE_STOPPED", "android.media.session.PlaybackState#STATE_FAST_FORWARDING", "android.media.session.PlaybackState#STATE_PLAYING", "android.media.session.PlaybackState#STATE_PAUSED", "android.media.session.PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM", "android.media.session.PlaybackState#STATE_SKIPPING_TO_PREVIOUS" ]
  }, {
    "name" : "public Builder setState(@State int state, long position, float playbackSpeed)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the current state of playback.\n         * <p>\n         * The position must be in ms and indicates the current playback\n         * position within the item. If the position is unknown use\n         * {@link #PLAYBACK_POSITION_UNKNOWN}. The update time will be set to\n         * the current {@link SystemClock#elapsedRealtime()}.\n         * <p>\n         * The speed is a multiple of normal playback and should be 0 when\n         * paused and negative when rewinding. Normal playback speed is 1.0.\n         * <p>\n         * The state must be one of the following:\n         * <ul>\n         * <li> {@link PlaybackState#STATE_NONE}</li>\n         * <li> {@link PlaybackState#STATE_STOPPED}</li>\n         * <li> {@link PlaybackState#STATE_PLAYING}</li>\n         * <li> {@link PlaybackState#STATE_PAUSED}</li>\n         * <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li>\n         * <li> {@link PlaybackState#STATE_REWINDING}</li>\n         * <li> {@link PlaybackState#STATE_BUFFERING}</li>\n         * <li> {@link PlaybackState#STATE_ERROR}</li>\n         * <li> {@link PlaybackState#STATE_CONNECTING}</li>\n         * <li> {@link PlaybackState#STATE_SKIPPING_TO_PREVIOUS}</li>\n         * <li> {@link PlaybackState#STATE_SKIPPING_TO_NEXT}</li>\n         * <li> {@link PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM}</li>\n         * <li> {@link PlaybackState#STATE_PLAYBACK_SUPPRESSED}</li>\n         * </ul>\n         *\n         * @param state The current state of playback.\n         * @param position The position in the current item in ms.\n         * @param playbackSpeed The current speed of playback as a multiple of\n         *            normal playback.\n         * @return this\n         ",
    "links" : [ "#PLAYBACK_POSITION_UNKNOWN", "android.media.session.PlaybackState#STATE_SKIPPING_TO_NEXT", "android.media.session.PlaybackState#STATE_REWINDING", "android.media.session.PlaybackState#STATE_BUFFERING", "android.media.session.PlaybackState#STATE_PLAYBACK_SUPPRESSED", "android.os.SystemClock#elapsedRealtime()", "android.media.session.PlaybackState#STATE_ERROR", "android.media.session.PlaybackState#STATE_NONE", "android.media.session.PlaybackState#STATE_CONNECTING", "android.media.session.PlaybackState#STATE_STOPPED", "android.media.session.PlaybackState#STATE_FAST_FORWARDING", "android.media.session.PlaybackState#STATE_PLAYING", "android.media.session.PlaybackState#STATE_PAUSED", "android.media.session.PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM", "android.media.session.PlaybackState#STATE_SKIPPING_TO_PREVIOUS" ]
  }, {
    "name" : "public Builder setActions(@Actions long actions)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the current actions available on this session. This should use a\n         * bitmask of possible actions.\n         * <ul>\n         * <li> {@link PlaybackState#ACTION_SKIP_TO_PREVIOUS}</li>\n         * <li> {@link PlaybackState#ACTION_REWIND}</li>\n         * <li> {@link PlaybackState#ACTION_PLAY}</li>\n         * <li> {@link PlaybackState#ACTION_PAUSE}</li>\n         * <li> {@link PlaybackState#ACTION_STOP}</li>\n         * <li> {@link PlaybackState#ACTION_FAST_FORWARD}</li>\n         * <li> {@link PlaybackState#ACTION_SKIP_TO_NEXT}</li>\n         * <li> {@link PlaybackState#ACTION_SEEK_TO}</li>\n         * <li> {@link PlaybackState#ACTION_SET_RATING}</li>\n         * <li> {@link PlaybackState#ACTION_PLAY_PAUSE}</li>\n         * <li> {@link PlaybackState#ACTION_PLAY_FROM_MEDIA_ID}</li>\n         * <li> {@link PlaybackState#ACTION_PLAY_FROM_SEARCH}</li>\n         * <li> {@link PlaybackState#ACTION_SKIP_TO_QUEUE_ITEM}</li>\n         * <li> {@link PlaybackState#ACTION_PLAY_FROM_URI}</li>\n         * <li> {@link PlaybackState#ACTION_PREPARE}</li>\n         * <li> {@link PlaybackState#ACTION_PREPARE_FROM_MEDIA_ID}</li>\n         * <li> {@link PlaybackState#ACTION_PREPARE_FROM_SEARCH}</li>\n         * <li> {@link PlaybackState#ACTION_PREPARE_FROM_URI}</li>\n         * <li> {@link PlaybackState#ACTION_SET_PLAYBACK_SPEED}</li>\n         * </ul>\n         *\n         * @param actions The set of actions allowed.\n         * @return this\n         ",
    "links" : [ "android.media.session.PlaybackState#ACTION_SET_PLAYBACK_SPEED", "android.media.session.PlaybackState#ACTION_SKIP_TO_PREVIOUS", "android.media.session.PlaybackState#ACTION_SKIP_TO_NEXT", "android.media.session.PlaybackState#ACTION_PREPARE_FROM_SEARCH", "android.media.session.PlaybackState#ACTION_SEEK_TO", "android.media.session.PlaybackState#ACTION_PAUSE", "android.media.session.PlaybackState#ACTION_PLAY", "android.media.session.PlaybackState#ACTION_SKIP_TO_QUEUE_ITEM", "android.media.session.PlaybackState#ACTION_SET_RATING", "android.media.session.PlaybackState#ACTION_PLAY_FROM_URI", "android.media.session.PlaybackState#ACTION_PREPARE", "android.media.session.PlaybackState#ACTION_PREPARE_FROM_MEDIA_ID", "android.media.session.PlaybackState#ACTION_PLAY_FROM_MEDIA_ID", "android.media.session.PlaybackState#ACTION_REWIND", "android.media.session.PlaybackState#ACTION_PREPARE_FROM_URI", "android.media.session.PlaybackState#ACTION_STOP", "android.media.session.PlaybackState#ACTION_FAST_FORWARD", "android.media.session.PlaybackState#ACTION_PLAY_FROM_SEARCH", "android.media.session.PlaybackState#ACTION_PLAY_PAUSE" ]
  }, {
    "name" : "public Builder addCustomAction(String action, String name, int icon)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a custom action to the playback state. Actions can be used to\n         * expose additional functionality to {@link MediaController\n         * MediaControllers} beyond what is offered by the standard transport\n         * controls.\n         * <p>\n         * e.g. start a radio station based on the current item or skip ahead by\n         * 30 seconds.\n         *\n         * @param action An identifier for this action. It can be sent back to\n         *            the {@link MediaSession} through\n         *            {@link MediaController.TransportControls#sendCustomAction(String, Bundle)}.\n         * @param name The display name for the action. If text is shown with\n         *            the action or used for accessibility, this is what should\n         *            be used.\n         * @param icon The resource action of the icon that should be displayed\n         *            for the action. The resource should be in the package of\n         *            the {@link MediaSession}.\n         * @return this\n         ",
    "links" : [ "android.media.session.MediaSession", "MediaControllerMediaControllers", "MediaController.TransportControls#sendCustomAction(String" ]
  }, {
    "name" : "public Builder addCustomAction(PlaybackState.CustomAction customAction)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a custom action to the playback state. Actions can be used to expose additional\n         * functionality to {@link MediaController MediaControllers} beyond what is offered by the\n         * standard transport controls.\n         * <p>\n         * An example of an action would be to start a radio station based on the current item\n         * or to skip ahead by 30 seconds.\n         *\n         * @param customAction The custom action to add to the {@link PlaybackState}.\n         * @return this\n         ",
    "links" : [ "android.media.session.PlaybackState", "android.media.session.MediaController" ]
  }, {
    "name" : "public Builder setBufferedPosition(long bufferedPosition)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the current buffered position in ms. This is the farthest\n         * playback point that can be reached from the current position using\n         * only buffered content.\n         *\n         * @param bufferedPosition The position in ms that playback is buffered\n         *            to.\n         * @return this\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setActiveQueueItemId(long id)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the active item in the play queue by specifying its id. The\n         * default value is {@link MediaSession.QueueItem#UNKNOWN_ID}\n         *\n         * @param id The id of the active item.\n         * @return this\n         ",
    "links" : [ "MediaSession.QueueItem#UNKNOWN_ID" ]
  }, {
    "name" : "public Builder setErrorMessage(CharSequence error)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a user readable error message. This should be set when the state\n         * is {@link PlaybackState#STATE_ERROR}.\n         *\n         * @param error The error message for display to the user.\n         * @return this\n         ",
    "links" : [ "android.media.session.PlaybackState#STATE_ERROR" ]
  }, {
    "name" : "public Builder setExtras(Bundle extras)",
    "returnType" : "Builder",
    "comment" : "\n         * Set any custom extras to be included with the playback state.\n         *\n         * @param extras The extras to include.\n         * @return this\n         ",
    "links" : [ ]
  }, {
    "name" : "public PlaybackState build()",
    "returnType" : "PlaybackState",
    "comment" : "\n         * Build and return the {@link PlaybackState} instance with these\n         * values.\n         *\n         * @return A new state instance.\n         ",
    "links" : [ "android.media.session.PlaybackState" ]
  } ],
  "methodNames" : [ "public Builder setState(@State int state, long position, float playbackSpeed, long updateTime)", "public Builder setState(@State int state, long position, float playbackSpeed)", "public Builder setActions(@Actions long actions)", "public Builder addCustomAction(String action, String name, int icon)", "public Builder addCustomAction(PlaybackState.CustomAction customAction)", "public Builder setBufferedPosition(long bufferedPosition)", "public Builder setActiveQueueItemId(long id)", "public Builder setErrorMessage(CharSequence error)", "public Builder setExtras(Bundle extras)", "public PlaybackState build()" ],
  "variableNames" : [ "mCustomActions", "mState", "mPosition", "mBufferedPosition", "mSpeed", "mActions", "mErrorMessage", "mUpdateTime", "mActiveItemId", "mExtras" ]
}