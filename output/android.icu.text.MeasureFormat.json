{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/MeasureFormat.java",
  "packageName" : "android.icu.text",
  "className" : "MeasureFormat",
  "comment" : "\n * A formatter for Measure objects.\n *\n * <p>\n * <strong>IMPORTANT:</strong> New users are strongly encouraged to see if\n * {@link NumberFormatter} fits their use case.  Although not deprecated, this\n * class, MeasureFormat, is provided for backwards compatibility only, and has\n * much more limited capabilities.\n * <hr>\n *\n * <p>\n * To format a Measure object, first create a formatter object using a MeasureFormat factory method. Then\n * use that object's format or formatMeasures methods.\n *\n * Here is sample code:\n *\n * <pre>\n * MeasureFormat fmtFr = MeasureFormat.getInstance(ULocale.FRENCH, FormatWidth.SHORT);\n * Measure measure = new Measure(23, MeasureUnit.CELSIUS);\n *\n * // Output: 23 °C\n * System.out.println(fmtFr.format(measure));\n *\n * Measure measureF = new Measure(70, MeasureUnit.FAHRENHEIT);\n *\n * // Output: 70 °F\n * System.out.println(fmtFr.format(measureF));\n *\n * MeasureFormat fmtFrFull = MeasureFormat.getInstance(ULocale.FRENCH, FormatWidth.WIDE);\n * // Output: 70 pieds et 5,3 pouces\n * System.out.println(fmtFrFull.formatMeasures(new Measure(70, MeasureUnit.FOOT),\n *         new Measure(5.3, MeasureUnit.INCH)));\n *\n * // Output: 1 pied et 1 pouce\n * System.out.println(\n *         fmtFrFull.formatMeasures(new Measure(1, MeasureUnit.FOOT), new Measure(1, MeasureUnit.INCH)));\n *\n * MeasureFormat fmtFrNarrow = MeasureFormat.getInstance(ULocale.FRENCH, FormatWidth.NARROW);\n * // Output: 1′ 1″\n * System.out.println(fmtFrNarrow.formatMeasures(new Measure(1, MeasureUnit.FOOT),\n *         new Measure(1, MeasureUnit.INCH)));\n *\n * MeasureFormat fmtEn = MeasureFormat.getInstance(ULocale.ENGLISH, FormatWidth.WIDE);\n *\n * // Output: 1 inch, 2 feet\n * fmtEn.formatMeasures(new Measure(1, MeasureUnit.INCH), new Measure(2, MeasureUnit.FOOT));\n * </pre>\n * <p>\n * This class does not do conversions from one unit to another. It simply formats whatever units it is\n * given\n * <p>\n * This class is immutable and thread-safe so long as its deprecated subclass, TimeUnitFormat, is never\n * used. TimeUnitFormat is not thread-safe, and is mutable. Although this class has existing subclasses,\n * this class does not support new sub-classes.\n *\n * @see android.icu.text.UFormat\n * @author Alan Liu\n ",
  "links" : [ "android.icu.number.LocalizedNumberFormatter" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Generated by serialver from JDK 1.4.1_01",
    "links" : [ ]
  }, {
    "name" : "formatWidth",
    "type" : "FormatWidth",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rules",
    "type" : "PluralRules",
    "comment" : " PluralRules is documented as being immutable which implies thread-safety.",
    "links" : [ ]
  }, {
    "name" : "numericFormatters",
    "type" : "NumericFormatters",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "numberFormat",
    "type" : "NumberFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "numberFormatter",
    "type" : "LocalizedNumberFormatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "localeToNumericDurationFormatters",
    "type" : "SimpleCache<ULocale, NumericFormatters>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hmsTo012",
    "type" : "Map<MeasureUnit, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEASURE_FORMAT",
    "type" : "int",
    "comment" : " For serialization: sub-class types.",
    "links" : [ ]
  }, {
    "name" : "TIME_UNIT_FORMAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CURRENCY_FORMAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUMBER_FORMATTER_STANDARD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUMBER_FORMATTER_CURRENCY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUMBER_FORMATTER_INTEGER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "formatter1",
    "type" : "NumberFormatterCacheEntry",
    "comment" : " formatter1 is most recently used.",
    "links" : [ ]
  }, {
    "name" : "formatter2",
    "type" : "NumberFormatterCacheEntry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "formatter3",
    "type" : "NumberFormatterCacheEntry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "localeIdToRangeFormat",
    "type" : "Map<ULocale, String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MeasureFormat getInstance(ULocale locale, FormatWidth formatWidth)",
    "returnType" : "MeasureFormat",
    "comment" : "\n     * Create a format from the locale, formatWidth, and format.\n     *\n     * @param locale\n     *            the locale.\n     * @param formatWidth\n     *            hints how long formatted strings should be.\n     * @return The new MeasureFormat object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasureFormat getInstance(Locale locale, FormatWidth formatWidth)",
    "returnType" : "MeasureFormat",
    "comment" : "\n     * Create a format from the {@link java.util.Locale} and formatWidth.\n     *\n     * @param locale\n     *            the {@link java.util.Locale}.\n     * @param formatWidth\n     *            hints how long formatted strings should be.\n     * @return The new MeasureFormat object.\n     ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public static MeasureFormat getInstance(ULocale locale, FormatWidth formatWidth, NumberFormat format)",
    "returnType" : "MeasureFormat",
    "comment" : "\n     * Create a format from the locale, formatWidth, and format.\n     *\n     * @param locale\n     *            the locale.\n     * @param formatWidth\n     *            hints how long formatted strings should be.\n     * @param format\n     *            This is defensively copied.\n     * @return The new MeasureFormat object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasureFormat getInstance(Locale locale, FormatWidth formatWidth, NumberFormat format)",
    "returnType" : "MeasureFormat",
    "comment" : "\n     * Create a format from the {@link java.util.Locale}, formatWidth, and format.\n     *\n     * @param locale\n     *            the {@link java.util.Locale}.\n     * @param formatWidth\n     *            hints how long formatted strings should be.\n     * @param format\n     *            This is defensively copied.\n     * @return The new MeasureFormat object.\n     ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition fpos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Able to format Collection&lt;? extends Measure&gt;, Measure[], and Measure by delegating to\n     * formatMeasures. If the pos argument identifies a NumberFormat field, then its indices are set to\n     * the beginning and end of the first such field encountered. MeasureFormat itself does not supply\n     * any fields.\n     *\n     * Calling a <code>formatMeasures</code> method is preferred over calling this method as they give\n     * better performance.\n     *\n     * @param obj\n     *            must be a Collection&lt;? extends Measure&gt;, Measure[], or Measure object.\n     * @param toAppendTo\n     *            Formatted string appended here.\n     * @param fpos\n     *            Identifies a field in the formatted text.\n     * @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Measure parseObject(String source, ParsePosition pos)",
    "returnType" : "Measure",
    "comment" : "\n     * Parses text from a string to produce a <code>Measure</code>.\n     *\n     * @see java.text.Format#parseObject(java.lang.String, java.text.ParsePosition)\n     * @throws UnsupportedOperationException\n     *             Not supported.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String formatMeasures(Measure... measures)",
    "returnType" : "String",
    "comment" : "\n     * Format a sequence of measures. Uses the ListFormatter unit lists. So, for example, one could\n     * format “3 feet, 2 inches”. Zero values are formatted (eg, “3 feet, 0 inches”). It is the caller’s\n     * responsibility to have the appropriate values in appropriate order, and using the appropriate\n     * Number values. Typically the units should be in descending order, with all but the last Measure\n     * having integer values (eg, not “3.2 feet, 2 inches”).\n     *\n     * @param measures\n     *            a sequence of one or more measures.\n     * @return the formatted string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder formatMeasurePerUnit(Measure measure, MeasureUnit perUnit, StringBuilder appendTo, FieldPosition pos)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Formats a single measure per unit.\n     *\n     * An example of such a formatted string is \"3.5 meters per second.\"\n     *\n     * @param measure\n     *            the measure object. In above example, 3.5 meters.\n     * @param perUnit\n     *            the per unit. In above example, it is MeasureUnit.SECOND\n     * @param appendTo\n     *            formatted string appended here.\n     * @param pos\n     *            The field position.\n     * @return appendTo.\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder formatMeasures(StringBuilder appendTo, FieldPosition fpos, Measure... measures)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Formats a sequence of measures.\n     *\n     * If the fieldPosition argument identifies a NumberFormat field, then its indices are set to the\n     * beginning and end of the first such field encountered. MeasureFormat itself does not supply any\n     * fields.\n     *\n     * @param appendTo\n     *            the formatted string appended here.\n     * @param fpos\n     *            Identifies a field in the formatted text.\n     * @param measures\n     *            the measures to format.\n     * @return appendTo.\n     * @see MeasureFormat#formatMeasures(Measure...)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void formatMeasuresInternal(Appendable appendTo, FieldPosition fieldPosition, Measure... measures)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getUnitDisplayName(MeasureUnit unit)",
    "returnType" : "String",
    "comment" : "\n     * Gets the display name of the specified {@link MeasureUnit} corresponding to the current locale and\n     * format width.\n     *\n     * @param unit\n     *            The unit for which to get a display name.\n     * @return The display name in the locale and width specified in {@link MeasureFormat#getInstance},\n     *         or null if there is no display name available for the specified unit.\n     ",
    "links" : [ "android.icu.text.MeasureFormat#getInstance", "android.icu.util.MeasureUnit" ]
  }, {
    "name" : "public final boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Two MeasureFormats, a and b, are equal if and only if they have the same formatWidth, locale, and\n     * equal number formats.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public MeasureFormat.FormatWidth getWidth()",
    "returnType" : "MeasureFormat.FormatWidth",
    "comment" : "\n     * Get the format width this instance is using.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ULocale getLocale()",
    "returnType" : "ULocale",
    "comment" : "\n     * Get the locale of this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NumberFormat getNumberFormat()",
    "returnType" : "NumberFormat",
    "comment" : "\n     * Get a copy of the number format.\n     ",
    "links" : [ ]
  }, {
    "name" : " NumberFormat getNumberFormatInternal()",
    "returnType" : "NumberFormat",
    "comment" : "\n     * Get a copy of the number format without cloning. Internal method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasureFormat getCurrencyFormat(ULocale locale)",
    "returnType" : "MeasureFormat",
    "comment" : "\n     * Return a formatter for CurrencyAmount objects in the given locale.\n     *\n     * @param locale\n     *            desired locale\n     * @return a formatter object\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasureFormat getCurrencyFormat(Locale locale)",
    "returnType" : "MeasureFormat",
    "comment" : "\n     * Return a formatter for CurrencyAmount objects in the given {@link java.util.Locale}.\n     *\n     * @param locale\n     *            desired {@link java.util.Locale}\n     * @return a formatter object\n     ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public static MeasureFormat getCurrencyFormat()",
    "returnType" : "MeasureFormat",
    "comment" : "\n     * Return a formatter for CurrencyAmount objects in the default <code>FORMAT</code> locale.\n     *\n     * @return a formatter object\n     * @see Category#FORMAT\n     ",
    "links" : [ ]
  }, {
    "name" : " MeasureFormat withLocale(ULocale locale)",
    "returnType" : "MeasureFormat",
    "comment" : " This method changes the NumberFormat object as well to match the new locale.",
    "links" : [ ]
  }, {
    "name" : " MeasureFormat withNumberFormat(NumberFormat format)",
    "returnType" : "MeasureFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static NumericFormatters loadNumericFormatters(ULocale locale)",
    "returnType" : "NumericFormatters",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized LocalizedNumberFormatter getUnitFormatterFromCache(int type, MeasureUnit unit, MeasureUnit perUnit)",
    "returnType" : "LocalizedNumberFormatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized void clearCache()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " LocalizedNumberFormatter getNumberFormatter()",
    "returnType" : "LocalizedNumberFormatter",
    "comment" : " Can be overridden by subclasses:",
    "links" : [ ]
  }, {
    "name" : "private FormattedStringBuilder formatMeasure(Measure measure)",
    "returnType" : "FormattedStringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private FormattedStringBuilder formatMeasureInteger(Measure measure)",
    "returnType" : "FormattedStringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void formatMeasuresSlowTrack(ListFormatter listFormatter, Appendable appendTo, FieldPosition fieldPosition, Measure... measures)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String loadNumericDurationFormat(ICUResourceBundle r, String type)",
    "returnType" : "String",
    "comment" : " type is one of \"hm\", \"ms\" or \"hms\"",
    "links" : [ ]
  }, {
    "name" : "private static Number[] toHMS(Measure[] measures)",
    "returnType" : "Number[]",
    "comment" : " returned array will be null.",
    "links" : [ ]
  }, {
    "name" : "private void formatNumeric(Number[] hms, Appendable appendable)",
    "returnType" : "void",
    "comment" : " values in hms with 0.",
    "links" : [ ]
  }, {
    "name" : " Object toTimeUnitProxy()",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Object toCurrencyProxy()",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object writeReplace() throws ObjectStreamException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static FormatWidth fromFormatWidthOrdinal(int ordinal)",
    "returnType" : "FormatWidth",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getRangeFormat(ULocale forLocale, FormatWidth width)",
    "returnType" : "String",
    "comment" : "\n     * Return a formatter (compiled SimpleFormatter pattern) for a range, such as \"{0}–{1}\".\n     *\n     * @param forLocale\n     *            locale to get the format for\n     * @param width\n     *            the format width\n     * @return range formatter, such as \"{0}–{1}\"\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static MeasureFormat getInstance(ULocale locale, FormatWidth formatWidth)", "public static MeasureFormat getInstance(Locale locale, FormatWidth formatWidth)", "public static MeasureFormat getInstance(ULocale locale, FormatWidth formatWidth, NumberFormat format)", "public static MeasureFormat getInstance(Locale locale, FormatWidth formatWidth, NumberFormat format)", "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition fpos)", "public Measure parseObject(String source, ParsePosition pos)", "public final String formatMeasures(Measure... measures)", "public StringBuilder formatMeasurePerUnit(Measure measure, MeasureUnit perUnit, StringBuilder appendTo, FieldPosition pos)", "public StringBuilder formatMeasures(StringBuilder appendTo, FieldPosition fpos, Measure... measures)", "private void formatMeasuresInternal(Appendable appendTo, FieldPosition fieldPosition, Measure... measures)", "public String getUnitDisplayName(MeasureUnit unit)", "public final boolean equals(Object other)", "public final int hashCode()", "public MeasureFormat.FormatWidth getWidth()", "public final ULocale getLocale()", "public NumberFormat getNumberFormat()", " NumberFormat getNumberFormatInternal()", "public static MeasureFormat getCurrencyFormat(ULocale locale)", "public static MeasureFormat getCurrencyFormat(Locale locale)", "public static MeasureFormat getCurrencyFormat()", " MeasureFormat withLocale(ULocale locale)", " MeasureFormat withNumberFormat(NumberFormat format)", "private static NumericFormatters loadNumericFormatters(ULocale locale)", "private synchronized LocalizedNumberFormatter getUnitFormatterFromCache(int type, MeasureUnit unit, MeasureUnit perUnit)", " synchronized void clearCache()", " LocalizedNumberFormatter getNumberFormatter()", "private FormattedStringBuilder formatMeasure(Measure measure)", "private FormattedStringBuilder formatMeasureInteger(Measure measure)", "private void formatMeasuresSlowTrack(ListFormatter listFormatter, Appendable appendTo, FieldPosition fieldPosition, Measure... measures)", "private static String loadNumericDurationFormat(ICUResourceBundle r, String type)", "private static Number[] toHMS(Measure[] measures)", "private void formatNumeric(Number[] hms, Appendable appendable)", " Object toTimeUnitProxy()", " Object toCurrencyProxy()", "private Object writeReplace() throws ObjectStreamException", "private static FormatWidth fromFormatWidthOrdinal(int ordinal)", "public static String getRangeFormat(ULocale forLocale, FormatWidth width)" ],
  "variableNames" : [ "serialVersionUID", "formatWidth", "rules", "numericFormatters", "numberFormat", "numberFormatter", "localeToNumericDurationFormatters", "hmsTo012", "MEASURE_FORMAT", "TIME_UNIT_FORMAT", "CURRENCY_FORMAT", "NUMBER_FORMATTER_STANDARD", "NUMBER_FORMATTER_CURRENCY", "NUMBER_FORMATTER_INTEGER", "formatter1", "formatter2", "formatter3", "localeIdToRangeFormat" ]
}