{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/CookieStore.java",
  "packageName" : "java.net",
  "className" : "CookieStore",
  "comment" : "\n * A CookieStore object represents a storage for cookie. Can store and retrieve\n * cookies.\n *\n * <p>{@link CookieManager} will call {@code CookieStore.add} to save cookies\n * for every incoming HTTP response, and call {@code CookieStore.get} to\n * retrieve cookie for every outgoing HTTP request. A CookieStore\n * is responsible for removing HttpCookie instances which have expired.\n *\n * @author Edward Wang\n * @since 1.6\n ",
  "links" : [ "java.net.CookieManager" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void add(URI uri, HttpCookie cookie)",
    "returnType" : "void",
    "comment" : "\n     * Adds one HTTP cookie to the store. This is called for every\n     * incoming HTTP response.\n     *\n     * <p>A cookie to store may or may not be associated with an URI. If it\n     * is not associated with an URI, the cookie's domain and path attribute\n     * will indicate where it comes from. If it is associated with an URI and\n     * its domain and path attribute are not specified, given URI will indicate\n     * where this cookie comes from.\n     *\n     * <p>If a cookie corresponding to the given URI already exists,\n     * then it is replaced with the new one.\n     *\n     * @param uri       the uri this cookie associated with.\n     *                  if {@code null}, this cookie will not be associated\n     *                  with an URI\n     * @param cookie    the cookie to store\n     *\n     * @throws NullPointerException if {@code cookie} is {@code null}\n     *\n     * @see #get\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<HttpCookie> get(URI uri)",
    "returnType" : "List<HttpCookie>",
    "comment" : "\n     * Retrieve cookies associated with given URI, or whose domain matches the\n     * given URI. Only cookies that have not expired are returned.\n     * This is called for every outgoing HTTP request.\n     *\n     * @return          an immutable list of HttpCookie,\n     *                  return empty list if no cookies match the given URI\n     *\n     * @param uri       the uri associated with the cookies to be returned\n     *\n     * @throws NullPointerException if {@code uri} is {@code null}\n     *\n     * @see #add\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<HttpCookie> getCookies()",
    "returnType" : "List<HttpCookie>",
    "comment" : "\n     * Get all not-expired cookies in cookie store.\n     *\n     * @return          an immutable list of http cookies;\n     *                  return empty list if there's no http cookie in store\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<URI> getURIs()",
    "returnType" : "List<URI>",
    "comment" : "\n     * Get all URIs which identify the cookies in this cookie store.\n     *\n     * @return          an immutable list of URIs;\n     *                  return empty list if no cookie in this cookie store\n     *                  is associated with an URI\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(URI uri, HttpCookie cookie)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove a cookie from store.\n     *\n     * @param uri       the uri this cookie associated with.\n     *                  if {@code null}, the cookie to be removed is not associated\n     *                  with an URI when added; if not {@code null}, the cookie\n     *                  to be removed is associated with the given URI when added.\n     * @param cookie    the cookie to remove\n     *\n     * @return          {@code true} if this store contained the specified cookie\n     *\n     * @throws NullPointerException if {@code cookie} is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll()",
    "returnType" : "boolean",
    "comment" : "\n     * Remove all cookies in this cookie store.\n     *\n     * @return          {@code true} if this store changed as a result of the call\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void add(URI uri, HttpCookie cookie)", "public List<HttpCookie> get(URI uri)", "public List<HttpCookie> getCookies()", "public List<URI> getURIs()", "public boolean remove(URI uri, HttpCookie cookie)", "public boolean removeAll()" ],
  "variableNames" : [ ]
}