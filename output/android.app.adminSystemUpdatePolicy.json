{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/admin/SystemUpdatePolicy.java",
  "packageName" : "android.app.admin",
  "className" : "SystemUpdatePolicy",
  "comment" : "\n * Determines when over-the-air system updates are installed on a device. Only a device policy\n * controller (DPC) running in device owner mode can set an update policy for the device—by calling\n * the {@code DevicePolicyManager} method\n * {@link DevicePolicyManager#setSystemUpdatePolicy setSystemUpdatePolicy()}. An update\n * policy affects the pending system update (if there is one) and any future updates for the device.\n *\n * <p>If a policy is set on a device, the system doesn't notify the user about updates.</p>\n * <h3>Example</h3>\n *\n * <p>The example below shows how a DPC might set a maintenance window for system updates:</p>\n * <pre><code>\n * private final MAINTENANCE_WINDOW_START = 1380; // 11pm\n * private final MAINTENANCE_WINDOW_END = 120; // 2am\n *\n * // ...\n *\n * // Create the system update policy\n * SystemUpdatePolicy policy = SystemUpdatePolicy.createWindowedInstallPolicy(\n *     MAINTENANCE_WINDOW_START, MAINTENANCE_WINDOW_END);\n *\n * // Get a DevicePolicyManager instance to set the policy on the device\n * DevicePolicyManager dpm =\n *     (DevicePolicyManager) context.getSystemService(Context.DEVICE_POLICY_SERVICE);\n * ComponentName adminComponent = getComponentName(context);\n * dpm.setSystemUpdatePolicy(adminComponent, policy);\n * </code></pre>\n *\n * <h3>Developer guide</h3>\n * To learn more, read <a href=\"{@docRoot}work/dpc/system-updates\">Manage system updates</a>.\n *\n * @see DevicePolicyManager#setSystemUpdatePolicy\n * @see DevicePolicyManager#getSystemUpdatePolicy\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown policy type, used only internally.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INSTALL_AUTOMATIC",
    "type" : "int",
    "comment" : "\n     * Installs system updates (without user interaction) as soon as they become available. Setting\n     * this policy type immediately installs any pending updates that might be postponed or waiting\n     * for a maintenance window.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INSTALL_WINDOWED",
    "type" : "int",
    "comment" : "\n     * Installs system updates (without user interaction) during a daily maintenance window. Set the\n     * start and end of the daily maintenance window, as minutes of the day, when creating a new\n     * {@code TYPE_INSTALL_WINDOWED} policy. See\n     * {@link #createWindowedInstallPolicy createWindowedInstallPolicy()}.\n     *\n     * <p>No connectivity, not enough disk space, or a low battery are typical reasons Android might\n     * not install a system update in the daily maintenance window. After 30 days trying to install\n     * an update in the maintenance window (regardless of policy changes in this period), the system\n     * prompts the device user to install the update.\n     ",
    "links" : [ "#createWindowedInstallPolicy" ]
  }, {
    "name" : "TYPE_POSTPONE",
    "type" : "int",
    "comment" : "\n     * Postpones the installation of system updates for 30 days. After the 30-day period has ended,\n     * the system prompts the device user to install the update.\n     *\n     * <p>The system limits each update to one 30-day postponement. The period begins when the\n     * system first postpones the update and setting new {@code TYPE_POSTPONE} policies won’t extend\n     * the period. If, after 30 days the update isn’t installed (through policy changes), the system\n     * prompts the user to install the update.\n     *\n     * <p><strong>Note</strong>: Device manufacturers or carriers might choose to exempt important\n     * security updates from a postponement policy. Exempted updates notify the device user when\n     * they become available.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PAUSE",
    "type" : "int",
    "comment" : "\n     * Incoming system updates (including security updates) should be blocked. This flag is not\n     * exposed to third-party apps (and any attempt to set it will raise exceptions). This is used\n     * to represent the current installation option type to the privileged system update clients,\n     * for example to indicate OTA freeze is currently in place or when system is outside a daily\n     * maintenance window.\n     *\n     * @see InstallationOption\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_POLICY_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_INSTALL_WINDOW_START",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_INSTALL_WINDOW_END",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_FREEZE_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_FREEZE_START",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_FREEZE_END",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WINDOW_BOUNDARY",
    "type" : "int",
    "comment" : "\n     * The upper boundary of the daily maintenance window: 24 * 60 minutes.\n     ",
    "links" : [ ]
  }, {
    "name" : "FREEZE_PERIOD_MAX_LENGTH",
    "type" : "int",
    "comment" : "\n     * The maximum length of a single freeze period: 90  days.\n     ",
    "links" : [ ]
  }, {
    "name" : "FREEZE_PERIOD_MIN_SEPARATION",
    "type" : "int",
    "comment" : "\n     * The minimum allowed time between two adjacent freeze period (from the end of the first\n     * freeze period to the start of the second freeze period, both exclusive): 60 days.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPolicyType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaintenanceWindowStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaintenanceWindowEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFreezePeriods",
    "type" : "ArrayList<FreezePeriod>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SystemUpdatePolicy>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SystemUpdatePolicy createAutomaticInstallPolicy()",
    "returnType" : "SystemUpdatePolicy",
    "comment" : "\n     * Create a policy object and set it to install update automatically as soon as one is\n     * available.\n     *\n     * @see #TYPE_INSTALL_AUTOMATIC\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SystemUpdatePolicy createWindowedInstallPolicy(int startTime, int endTime)",
    "returnType" : "SystemUpdatePolicy",
    "comment" : "\n     * Create a policy object and set it to: new system update will only be installed automatically\n     * when the system clock is inside a daily maintenance window. If the start and end times are\n     * the same, the window is considered to include the <i>whole 24 hours</i>. That is, updates can\n     * install at any time. If start time is later than end time, the window is considered spanning\n     * midnight (i.e. the end time denotes a time on the next day). The maintenance window will last\n     * for 30 days for any given update, after which the window will no longer be effective and\n     * the pending update will be made available for manual installation as if no system update\n     * policy were set on the device. See {@link #TYPE_INSTALL_WINDOWED} for the details of this\n     * policy's behavior.\n     *\n     * @param startTime the start of the maintenance window, measured as the number of minutes from\n     *            midnight in the device's local time. Must be in the range of [0, 1440).\n     * @param endTime the end of the maintenance window, measured as the number of minutes from\n     *            midnight in the device's local time. Must be in the range of [0, 1440).\n     * @throws IllegalArgumentException If the {@code startTime} or {@code endTime} isn't in the\n     *            accepted range.\n     * @return The configured policy.\n     * @see #TYPE_INSTALL_WINDOWED\n     ",
    "links" : [ "#TYPE_INSTALL_WINDOWED" ]
  }, {
    "name" : "public static SystemUpdatePolicy createPostponeInstallPolicy()",
    "returnType" : "SystemUpdatePolicy",
    "comment" : "\n     * Create a policy object and set it to block installation for a maximum period of 30 days.\n     * To learn more about this policy's behavior, see {@link #TYPE_POSTPONE}.\n     *\n     * <p><b>Note: </b> security updates (e.g. monthly security patches) will <i>not</i> be affected\n     * by this policy.\n     *\n     * @see #TYPE_POSTPONE\n     ",
    "links" : [ "#TYPE_POSTPONE" ]
  }, {
    "name" : "public int getPolicyType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of system update policy, or -1 if no policy has been set.\n     *\n     @return The policy type or -1 if the type isn't set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInstallWindowStart()",
    "returnType" : "int",
    "comment" : "\n     * Get the start of the maintenance window.\n     *\n     * @return the start of the maintenance window measured as the number of minutes from midnight,\n     * or -1 if the policy does not have a maintenance window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInstallWindowEnd()",
    "returnType" : "int",
    "comment" : "\n     * Get the end of the maintenance window.\n     *\n     * @return the end of the maintenance window measured as the number of minutes from midnight,\n     * or -1 if the policy does not have a maintenance window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Return if this object represents a valid policy with:\n     * 1. Correct type\n     * 2. Valid maintenance window if applicable\n     * 3. Valid freeze periods\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void validateType()",
    "returnType" : "void",
    "comment" : "\n     * Validate the type and maintenance window (if applicable) of this policy object,\n     * throws {@link IllegalArgumentException} if it's invalid.\n     * @hide\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "public SystemUpdatePolicy setFreezePeriods(List<FreezePeriod> freezePeriods)",
    "returnType" : "SystemUpdatePolicy",
    "comment" : "\n     * Configure a list of freeze periods on top of the current policy. When the device's clock is\n     * within any of the freeze periods, all incoming system updates including security patches will\n     * be blocked and cannot be installed. When the device is outside the freeze periods, the normal\n     * policy behavior will apply.\n     * <p>\n     * Each individual freeze period is allowed to be at most 90 days long, and adjacent freeze\n     * periods need to be at least 60 days apart. Also, the list of freeze periods should not\n     * contain duplicates or overlap with each other. If any of these conditions is not met, a\n     * {@link ValidationFailedException} will be thrown.\n     * <p>\n     * Handling of leap year: we ignore leap years in freeze period calculations, in particular,\n     * <ul>\n     * <li>When a freeze period is defined, February 29th is disregarded so even though a freeze\n     * period can be specified to start or end on February 29th, it will be treated as if the period\n     * started or ended on February 28th.</li>\n     * <li>When applying freeze period behavior to the device, a system clock of February 29th is\n     * treated as if it were February 28th</li>\n     * <li>When calculating the number of days of a freeze period or separation between two freeze\n     * periods, February 29th is also ignored and not counted as one day.</li>\n     * </ul>\n     *\n     * @param freezePeriods the list of freeze periods\n     * @throws ValidationFailedException if the supplied freeze periods do not meet the\n     *         requirement set above\n     * @return this instance\n     ",
    "links" : [ "ValidationFailedException" ]
  }, {
    "name" : "public List<FreezePeriod> getFreezePeriods()",
    "returnType" : "List<FreezePeriod>",
    "comment" : "\n     * Returns the list of freeze periods previously set on this system update policy object.\n     *\n     * @return the list of freeze periods, or an empty list if none was set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Pair<LocalDate, LocalDate> getCurrentFreezePeriod(LocalDate now)",
    "returnType" : "Pair<LocalDate, LocalDate>",
    "comment" : "\n     * Returns the real calendar dates of the current freeze period, or null if the device\n     * is not in a freeze period at the moment.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private long timeUntilNextFreezePeriod(long now)",
    "returnType" : "long",
    "comment" : "\n     * Returns time (in milliseconds) until the start of the next freeze period, assuming now\n     * is not within a freeze period.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void validateFreezePeriods()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void validateAgainstPreviousFreezePeriod(LocalDate prevPeriodStart, LocalDate prevPeriodEnd, LocalDate now)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public InstallationOption getInstallationOptionAt(long when)",
    "returnType" : "InstallationOption",
    "comment" : "\n     * Returns the installation option at the specified time, under the current\n     * {@code SystemUpdatePolicy} object. This is a convenience method for system update clients\n     * so they can instantiate this policy at any given time and find out what to do with incoming\n     * system updates, without the need of examining the overall policy structure.\n     *\n     * Normally the system update clients will query the current installation option by calling this\n     * method with the current timestamp, and act on the returned option until its effective time\n     * lapses. It can then query the latest option using a new timestamp. It should also listen\n     * for {@code DevicePolicyManager#ACTION_SYSTEM_UPDATE_POLICY_CHANGED} broadcast, in case the\n     * whole policy is updated.\n     *\n     * @param when At what time the intallation option is being queried, specified in number of\n           milliseonds since the epoch.\n     * @see InstallationOption\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private InstallationOption getInstallationOptionRegardlessFreezeAt(long when)",
    "returnType" : "InstallationOption",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static LocalDate roundUpLeapDay(LocalDate date)",
    "returnType" : "LocalDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static LocalDate millisToDate(long when)",
    "returnType" : "LocalDate",
    "comment" : " Convert a timestamp since epoch to a LocalDate using default timezone, truncating\n     * the hour/min/seconds part.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long dateToMillis(LocalDate when)",
    "returnType" : "long",
    "comment" : "\n     * Returns the timestamp since epoch of a LocalDate, assuming the time is 00:00:00.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static SystemUpdatePolicy restoreFromXml(XmlPullParser parser)",
    "returnType" : "SystemUpdatePolicy",
    "comment" : "\n     * Restore a previously saved SystemUpdatePolicy from XML. No need to validate\n     * the reconstructed policy since the XML is supposed to be created by the\n     * system server from a validated policy object previously.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void saveToXml(XmlSerializer out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "TYPE_UNKNOWN", "TYPE_INSTALL_AUTOMATIC", "TYPE_INSTALL_WINDOWED", "TYPE_POSTPONE", "TYPE_PAUSE", "KEY_POLICY_TYPE", "KEY_INSTALL_WINDOW_START", "KEY_INSTALL_WINDOW_END", "KEY_FREEZE_TAG", "KEY_FREEZE_START", "KEY_FREEZE_END", "WINDOW_BOUNDARY", "FREEZE_PERIOD_MAX_LENGTH", "FREEZE_PERIOD_MIN_SEPARATION", "mPolicyType", "mMaintenanceWindowStart", "mMaintenanceWindowEnd", "mFreezePeriods", "CREATOR" ],
  "methodNames" : [ "public static SystemUpdatePolicy createAutomaticInstallPolicy()", "public static SystemUpdatePolicy createWindowedInstallPolicy(int startTime, int endTime)", "public static SystemUpdatePolicy createPostponeInstallPolicy()", "public int getPolicyType()", "public int getInstallWindowStart()", "public int getInstallWindowEnd()", "public boolean isValid()", "public void validateType()", "public SystemUpdatePolicy setFreezePeriods(List<FreezePeriod> freezePeriods)", "public List<FreezePeriod> getFreezePeriods()", "public Pair<LocalDate, LocalDate> getCurrentFreezePeriod(LocalDate now)", "private long timeUntilNextFreezePeriod(long now)", "public void validateFreezePeriods()", "public void validateAgainstPreviousFreezePeriod(LocalDate prevPeriodStart, LocalDate prevPeriodEnd, LocalDate now)", "public InstallationOption getInstallationOptionAt(long when)", "private InstallationOption getInstallationOptionRegardlessFreezeAt(long when)", "private static LocalDate roundUpLeapDay(LocalDate date)", "private static LocalDate millisToDate(long when)", "private static long dateToMillis(LocalDate when)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public static SystemUpdatePolicy restoreFromXml(XmlPullParser parser)", "public void saveToXml(XmlSerializer out) throws IOException" ]
}