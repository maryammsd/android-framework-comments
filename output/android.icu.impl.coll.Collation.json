{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/Collation.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "Collation",
  "comment" : "\n * Collation v2 basic definitions and static helper functions.\n *\n * Data structures except for expansion tables store 32-bit CEs which are\n * either specials (see tags below) or are compact forms of 64-bit CEs.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SENTINEL_CP",
    "type" : "int",
    "comment" : " UChar32 U_SENTINEL.\n     * TODO: Create a common, public constant?\n     ",
    "links" : [ ]
  }, {
    "name" : "LESS",
    "type" : "int",
    "comment" : " ICU4J just returns int. We use these constants for ease of porting.",
    "links" : [ ]
  }, {
    "name" : "EQUAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GREATER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TERMINATOR_BYTE",
    "type" : "int",
    "comment" : " Special sort key bytes for all levels.",
    "links" : [ ]
  }, {
    "name" : "LEVEL_SEPARATOR_BYTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BEFORE_WEIGHT16",
    "type" : "int",
    "comment" : " The secondary/tertiary lower limit for tailoring before any root elements. ",
    "links" : [ ]
  }, {
    "name" : "MERGE_SEPARATOR_BYTE",
    "type" : "int",
    "comment" : "\n     * Merge-sort-key separator.\n     * Same as the unique primary and identical-level weights of U+FFFE.\n     * Must not be used as primary compression low terminator.\n     * Otherwise usable.\n     ",
    "links" : [ ]
  }, {
    "name" : "MERGE_SEPARATOR_PRIMARY",
    "type" : "long",
    "comment" : " U+FFFE",
    "links" : [ ]
  }, {
    "name" : "MERGE_SEPARATOR_CE32",
    "type" : "int",
    "comment" : " U+FFFE",
    "links" : [ ]
  }, {
    "name" : "PRIMARY_COMPRESSION_LOW_BYTE",
    "type" : "int",
    "comment" : "\n     * Primary compression low terminator, must be greater than MERGE_SEPARATOR_BYTE.\n     * Reserved value in primary second byte if the lead byte is compressible.\n     * Otherwise usable in all CE weight bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIMARY_COMPRESSION_HIGH_BYTE",
    "type" : "int",
    "comment" : "\n     * Primary compression high terminator.\n     * Reserved value in primary second byte if the lead byte is compressible.\n     * Otherwise usable in all CE weight bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMMON_BYTE",
    "type" : "int",
    "comment" : " Default secondary/tertiary weight lead byte. ",
    "links" : [ ]
  }, {
    "name" : "COMMON_WEIGHT16",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMMON_SECONDARY_CE",
    "type" : "int",
    "comment" : " Middle 16 bits of a CE with a common secondary weight. ",
    "links" : [ ]
  }, {
    "name" : "COMMON_TERTIARY_CE",
    "type" : "int",
    "comment" : " Lower 16 bits of a CE with a common tertiary weight. ",
    "links" : [ ]
  }, {
    "name" : "COMMON_SEC_AND_TER_CE",
    "type" : "int",
    "comment" : " Lower 32 bits of a CE with common secondary and tertiary weights. ",
    "links" : [ ]
  }, {
    "name" : "SECONDARY_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CASE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDARY_AND_CASE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ONLY_TERTIARY_MASK",
    "type" : "int",
    "comment" : " Only the 2*6 bits for the pure tertiary weight. ",
    "links" : [ ]
  }, {
    "name" : "ONLY_SEC_TER_MASK",
    "type" : "int",
    "comment" : " Only the secondary & tertiary bits; no case, no quaternary. ",
    "links" : [ ]
  }, {
    "name" : "CASE_AND_TERTIARY_MASK",
    "type" : "int",
    "comment" : " Case bits and tertiary bits. ",
    "links" : [ ]
  }, {
    "name" : "QUATERNARY_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CASE_AND_QUATERNARY_MASK",
    "type" : "int",
    "comment" : " Case bits and quaternary bits. ",
    "links" : [ ]
  }, {
    "name" : "UNASSIGNED_IMPLICIT_BYTE",
    "type" : "int",
    "comment" : " compressible",
    "links" : [ ]
  }, {
    "name" : "FIRST_UNASSIGNED_PRIMARY",
    "type" : "long",
    "comment" : "\n     * First unassigned: AlphabeticIndex overflow boundary.\n     * We want a 3-byte primary so that it fits into the root elements table.\n     *\n     * This 3-byte primary will not collide with\n     * any unassigned-implicit 4-byte primaries because\n     * the first few hundred Unicode code points all have real mappings.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRAIL_WEIGHT_BYTE",
    "type" : "int",
    "comment" : " not compressible",
    "links" : [ ]
  }, {
    "name" : "FIRST_TRAILING_PRIMARY",
    "type" : "long",
    "comment" : " [first trailing]",
    "links" : [ ]
  }, {
    "name" : "MAX_PRIMARY",
    "type" : "long",
    "comment" : " U+FFFF",
    "links" : [ ]
  }, {
    "name" : "MAX_REGULAR_CE32",
    "type" : "int",
    "comment" : " U+FFFF",
    "links" : [ ]
  }, {
    "name" : "FFFD_PRIMARY",
    "type" : "long",
    "comment" : " We use the third-highest primary weight for U+FFFD (as in UCA 6.3+).",
    "links" : [ ]
  }, {
    "name" : "FFFD_CE32",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPECIAL_CE32_LOW_BYTE",
    "type" : "int",
    "comment" : "\n     * A CE32 is special if its low byte is this or greater.\n     * Impossible case bits 11 mark special CE32s.\n     * This value itself is used to indicate a fallback to the base collator.\n     ",
    "links" : [ ]
  }, {
    "name" : "FALLBACK_CE32",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LONG_PRIMARY_CE32_LOW_BYTE",
    "type" : "int",
    "comment" : " SPECIAL_CE32_LOW_BYTE | LONG_PRIMARY_TAG",
    "links" : [ ]
  }, {
    "name" : "UNASSIGNED_CE32",
    "type" : "int",
    "comment" : " Compute an unassigned-implicit CE.",
    "links" : [ ]
  }, {
    "name" : "NO_CE32",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_CE_PRIMARY",
    "type" : "long",
    "comment" : " not a left-adjusted weight",
    "links" : [ ]
  }, {
    "name" : "NO_CE_WEIGHT16",
    "type" : "int",
    "comment" : " weight of LEVEL_SEPARATOR_BYTE",
    "links" : [ ]
  }, {
    "name" : "NO_CE",
    "type" : "long",
    "comment" : " NO_CE_PRIMARY, NO_CE_WEIGHT16, NO_CE_WEIGHT16",
    "links" : [ ]
  }, {
    "name" : "NO_LEVEL",
    "type" : "int",
    "comment" : " Unspecified level. ",
    "links" : [ ]
  }, {
    "name" : "PRIMARY_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDARY_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CASE_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TERTIARY_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUATERNARY_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IDENTICAL_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZERO_LEVEL",
    "type" : "int",
    "comment" : " Beyond sort key bytes. ",
    "links" : [ ]
  }, {
    "name" : "NO_LEVEL_FLAG",
    "type" : "int",
    "comment" : "\n     * Sort key level flags: xx_FLAG = 1 << xx_LEVEL.\n     * In Java, use enum Level with flag() getters, or use EnumSet rather than hand-made bit sets.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIMARY_LEVEL_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDARY_LEVEL_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CASE_LEVEL_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TERTIARY_LEVEL_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUATERNARY_LEVEL_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IDENTICAL_LEVEL_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZERO_LEVEL_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FALLBACK_TAG",
    "type" : "int",
    "comment" : "\n     * Fall back to the base collator.\n     * This is the tag value in SPECIAL_CE32_LOW_BYTE and FALLBACK_CE32.\n     * Bits 31..8: Unused, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG_PRIMARY_TAG",
    "type" : "int",
    "comment" : "\n     * Long-primary CE with COMMON_SEC_AND_TER_CE.\n     * Bits 31..8: Three-byte primary.\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG_SECONDARY_TAG",
    "type" : "int",
    "comment" : "\n     * Long-secondary CE with zero primary.\n     * Bits 31..16: Secondary weight.\n     * Bits 15.. 8: Tertiary weight.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESERVED_TAG_3",
    "type" : "int",
    "comment" : "\n     * Unused.\n     * May be used in the future for single-byte secondary CEs (SHORT_SECONDARY_TAG),\n     * storing the secondary in bits 31..24, the ccc in bits 23..16,\n     * and the tertiary in bits 15..8.\n     ",
    "links" : [ ]
  }, {
    "name" : "LATIN_EXPANSION_TAG",
    "type" : "int",
    "comment" : "\n     * Latin mini expansions of two simple CEs [pp, 05, tt] [00, ss, 05].\n     * Bits 31..24: Single-byte primary weight pp of the first CE.\n     * Bits 23..16: Tertiary weight tt of the first CE.\n     * Bits 15.. 8: Secondary weight ss of the second CE.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXPANSION32_TAG",
    "type" : "int",
    "comment" : "\n     * Points to one or more simple/long-primary/long-secondary 32-bit CE32s.\n     * Bits 31..13: Index into int table.\n     * Bits 12.. 8: Length=1..31.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXPANSION_TAG",
    "type" : "int",
    "comment" : "\n     * Points to one or more 64-bit CEs.\n     * Bits 31..13: Index into CE table.\n     * Bits 12.. 8: Length=1..31.\n     ",
    "links" : [ ]
  }, {
    "name" : "BUILDER_DATA_TAG",
    "type" : "int",
    "comment" : "\n     * Builder data, used only in the CollationDataBuilder, not in runtime data.\n     *\n     * If bit 8 is 0: Builder context, points to a list of context-sensitive mappings.\n     * Bits 31..13: Index to the builder's list of ConditionalCE32 for this character.\n     * Bits 12.. 9: Unused, 0.\n     *\n     * If bit 8 is 1 (IS_BUILDER_JAMO_CE32): Builder-only jamoCE32 value.\n     * The builder fetches the Jamo CE32 from the trie.\n     * Bits 31..13: Jamo code point.\n     * Bits 12.. 9: Unused, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREFIX_TAG",
    "type" : "int",
    "comment" : "\n     * Points to prefix trie.\n     * Bits 31..13: Index into prefix/contraction data.\n     * Bits 12.. 8: Unused, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTRACTION_TAG",
    "type" : "int",
    "comment" : "\n     * Points to contraction data.\n     * Bits 31..13: Index into prefix/contraction data.\n     * Bits 12..11: Unused, 0.\n     * Bit      10: CONTRACT_TRAILING_CCC flag.\n     * Bit       9: CONTRACT_NEXT_CCC flag.\n     * Bit       8: CONTRACT_SINGLE_CP_NO_MATCH flag.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIGIT_TAG",
    "type" : "int",
    "comment" : "\n     * Decimal digit.\n     * Bits 31..13: Index into int table for non-numeric-collation CE32.\n     * Bit      12: Unused, 0.\n     * Bits 11.. 8: Digit value 0..9.\n     ",
    "links" : [ ]
  }, {
    "name" : "U0000_TAG",
    "type" : "int",
    "comment" : "\n     * Tag for U+0000, for moving the NUL-termination handling\n     * from the regular fastpath into specials-handling code.\n     * Bits 31..8: Unused, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "HANGUL_TAG",
    "type" : "int",
    "comment" : "\n     * Tag for a Hangul syllable.\n     * Bits 31..9: Unused, 0.\n     * Bit      8: HANGUL_NO_SPECIAL_JAMO flag.\n     ",
    "links" : [ ]
  }, {
    "name" : "LEAD_SURROGATE_TAG",
    "type" : "int",
    "comment" : "\n     * Tag for a lead surrogate code unit.\n     * Optional optimization for UTF-16 string processing.\n     * Bits 31..10: Unused, 0.\n     *       9.. 8: =0: All associated supplementary code points are unassigned-implicit.\n     *              =1: All associated supplementary code points fall back to the base data.\n     *              else: (Normally 2) Look up the data for the supplementary code point.\n     ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_TAG",
    "type" : "int",
    "comment" : "\n     * Tag for CEs with primary weights in code point order.\n     * Bits 31..13: Index into CE table, for one data \"CE\".\n     * Bits 12.. 8: Unused, 0.\n     *\n     * This data \"CE\" has the following bit fields:\n     * Bits 63..32: Three-byte primary pppppp00.\n     *      31.. 8: Start/base code point of the in-order range.\n     *           7: Flag isCompressible primary.\n     *       6.. 0: Per-code point primary-weight increment.\n     ",
    "links" : [ ]
  }, {
    "name" : "IMPLICIT_TAG",
    "type" : "int",
    "comment" : "\n     * Implicit CE tag. Compute an unassigned-implicit CE.\n     * All bits are set (UNASSIGNED_CE32=0xffffffff).\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_EXPANSION_LENGTH",
    "type" : "int",
    "comment" : "\n     * We limit the number of CEs in an expansion\n     * so that we can use a small number of length bits in the data structure,\n     * and so that an implementation can copy CEs at runtime without growing a destination buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTRACT_SINGLE_CP_NO_MATCH",
    "type" : "int",
    "comment" : "\n     * Set if there is no match for the single (no-suffix) character itself.\n     * This is only possible if there is a prefix.\n     * In this case, discontiguous contraction matching cannot add combining marks\n     * starting from an empty suffix.\n     * The default CE32 is used anyway if there is no suffix match.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTRACT_NEXT_CCC",
    "type" : "int",
    "comment" : " Set if the first character of every contraction suffix has lccc!=0. ",
    "links" : [ ]
  }, {
    "name" : "CONTRACT_TRAILING_CCC",
    "type" : "int",
    "comment" : " Set if any contraction suffix ends with lccc!=0. ",
    "links" : [ ]
  }, {
    "name" : "HANGUL_NO_SPECIAL_JAMO",
    "type" : "int",
    "comment" : " For HANGUL_TAG: None of its Jamo CE32s isSpecialCE32(). ",
    "links" : [ ]
  }, {
    "name" : "LEAD_ALL_UNASSIGNED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEAD_ALL_FALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEAD_MIXED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEAD_TYPE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static boolean isAssignedCE32(int ce32)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int makeLongPrimaryCE32(long p)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long primaryFromLongPrimaryCE32(int ce32)",
    "returnType" : "long",
    "comment" : " Turns the long-primary CE32 into a primary weight pppppp00. ",
    "links" : [ ]
  }, {
    "name" : " static long ceFromLongPrimaryCE32(int ce32)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int makeLongSecondaryCE32(int lower32)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long ceFromLongSecondaryCE32(int ce32)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int makeCE32FromTagIndexAndLength(int tag, int index, int length)",
    "returnType" : "int",
    "comment" : " Makes a special CE32 with tag, index and length. ",
    "links" : [ ]
  }, {
    "name" : " static int makeCE32FromTagAndIndex(int tag, int index)",
    "returnType" : "int",
    "comment" : " Makes a special CE32 with only tag and index. ",
    "links" : [ ]
  }, {
    "name" : " static boolean isSpecialCE32(int ce32)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int tagFromCE32(int ce32)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean hasCE32Tag(int ce32, int tag)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isLongPrimaryCE32(int ce32)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isSimpleOrLongCE32(int ce32)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isSelfContainedCE32(int ce32)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the ce32 yields one or more CEs without further data lookups\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isPrefixCE32(int ce32)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isContractionCE32(int ce32)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean ce32HasContext(int ce32)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long latinCE0FromCE32(int ce32)",
    "returnType" : "long",
    "comment" : "\n     * Get the first of the two Latin-expansion CEs encoded in ce32.\n     * @see LATIN_EXPANSION_TAG\n     ",
    "links" : [ ]
  }, {
    "name" : " static long latinCE1FromCE32(int ce32)",
    "returnType" : "long",
    "comment" : "\n     * Get the second of the two Latin-expansion CEs encoded in ce32.\n     * @see LATIN_EXPANSION_TAG\n     ",
    "links" : [ ]
  }, {
    "name" : " static int indexFromCE32(int ce32)",
    "returnType" : "int",
    "comment" : "\n     * Returns the data index from a special CE32.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int lengthFromCE32(int ce32)",
    "returnType" : "int",
    "comment" : "\n     * Returns the data length from a ce32.\n     ",
    "links" : [ ]
  }, {
    "name" : " static char digitFromCE32(int ce32)",
    "returnType" : "char",
    "comment" : "\n     * Returns the digit value from a DIGIT_TAG ce32.\n     ",
    "links" : [ ]
  }, {
    "name" : " static long ceFromSimpleCE32(int ce32)",
    "returnType" : "long",
    "comment" : " Returns a 64-bit CE from a simple CE32 (not special). ",
    "links" : [ ]
  }, {
    "name" : " static long ceFromCE32(int ce32)",
    "returnType" : "long",
    "comment" : " Returns a 64-bit CE from a simple/long-primary/long-secondary CE32. ",
    "links" : [ ]
  }, {
    "name" : "public static long makeCE(long p)",
    "returnType" : "long",
    "comment" : " Creates a CE from a primary weight. ",
    "links" : [ ]
  }, {
    "name" : " static long makeCE(long p, int s, int t, int q)",
    "returnType" : "long",
    "comment" : "\n     * Creates a CE from a primary weight,\n     * 16-bit secondary/tertiary weights, and a 2-bit quaternary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long incTwoBytePrimaryByOffset(long basePrimary, boolean isCompressible, int offset)",
    "returnType" : "long",
    "comment" : "\n     * Increments a 2-byte primary by a code point offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long incThreeBytePrimaryByOffset(long basePrimary, boolean isCompressible, int offset)",
    "returnType" : "long",
    "comment" : "\n     * Increments a 3-byte primary by a code point offset.\n     ",
    "links" : [ ]
  }, {
    "name" : " static long decTwoBytePrimaryByOneStep(long basePrimary, boolean isCompressible, int step)",
    "returnType" : "long",
    "comment" : "\n     * Decrements a 2-byte primary by one range step (1..0x7f).\n     ",
    "links" : [ ]
  }, {
    "name" : " static long decThreeBytePrimaryByOneStep(long basePrimary, boolean isCompressible, int step)",
    "returnType" : "long",
    "comment" : "\n     * Decrements a 3-byte primary by one range step (1..0x7f).\n     ",
    "links" : [ ]
  }, {
    "name" : " static long getThreeBytePrimaryForOffsetData(int c, long dataCE)",
    "returnType" : "long",
    "comment" : "\n     * Computes a 3-byte primary for c's OFFSET_TAG data \"CE\".\n     ",
    "links" : [ ]
  }, {
    "name" : " static long unassignedPrimaryFromCodePoint(int c)",
    "returnType" : "long",
    "comment" : "\n     * Returns the unassigned-character implicit primary weight for any valid code point c.\n     ",
    "links" : [ ]
  }, {
    "name" : " static long unassignedCEFromCodePoint(int c)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static boolean isAssignedCE32(int ce32)", " static int makeLongPrimaryCE32(long p)", " static long primaryFromLongPrimaryCE32(int ce32)", " static long ceFromLongPrimaryCE32(int ce32)", " static int makeLongSecondaryCE32(int lower32)", " static long ceFromLongSecondaryCE32(int ce32)", " static int makeCE32FromTagIndexAndLength(int tag, int index, int length)", " static int makeCE32FromTagAndIndex(int tag, int index)", " static boolean isSpecialCE32(int ce32)", " static int tagFromCE32(int ce32)", " static boolean hasCE32Tag(int ce32, int tag)", " static boolean isLongPrimaryCE32(int ce32)", " static boolean isSimpleOrLongCE32(int ce32)", " static boolean isSelfContainedCE32(int ce32)", " static boolean isPrefixCE32(int ce32)", " static boolean isContractionCE32(int ce32)", " static boolean ce32HasContext(int ce32)", " static long latinCE0FromCE32(int ce32)", " static long latinCE1FromCE32(int ce32)", " static int indexFromCE32(int ce32)", " static int lengthFromCE32(int ce32)", " static char digitFromCE32(int ce32)", " static long ceFromSimpleCE32(int ce32)", " static long ceFromCE32(int ce32)", "public static long makeCE(long p)", " static long makeCE(long p, int s, int t, int q)", "public static long incTwoBytePrimaryByOffset(long basePrimary, boolean isCompressible, int offset)", "public static long incThreeBytePrimaryByOffset(long basePrimary, boolean isCompressible, int offset)", " static long decTwoBytePrimaryByOneStep(long basePrimary, boolean isCompressible, int step)", " static long decThreeBytePrimaryByOneStep(long basePrimary, boolean isCompressible, int step)", " static long getThreeBytePrimaryForOffsetData(int c, long dataCE)", " static long unassignedPrimaryFromCodePoint(int c)", " static long unassignedCEFromCodePoint(int c)" ],
  "variableNames" : [ "SENTINEL_CP", "LESS", "EQUAL", "GREATER", "TERMINATOR_BYTE", "LEVEL_SEPARATOR_BYTE", "BEFORE_WEIGHT16", "MERGE_SEPARATOR_BYTE", "MERGE_SEPARATOR_PRIMARY", "MERGE_SEPARATOR_CE32", "PRIMARY_COMPRESSION_LOW_BYTE", "PRIMARY_COMPRESSION_HIGH_BYTE", "COMMON_BYTE", "COMMON_WEIGHT16", "COMMON_SECONDARY_CE", "COMMON_TERTIARY_CE", "COMMON_SEC_AND_TER_CE", "SECONDARY_MASK", "CASE_MASK", "SECONDARY_AND_CASE_MASK", "ONLY_TERTIARY_MASK", "ONLY_SEC_TER_MASK", "CASE_AND_TERTIARY_MASK", "QUATERNARY_MASK", "CASE_AND_QUATERNARY_MASK", "UNASSIGNED_IMPLICIT_BYTE", "FIRST_UNASSIGNED_PRIMARY", "TRAIL_WEIGHT_BYTE", "FIRST_TRAILING_PRIMARY", "MAX_PRIMARY", "MAX_REGULAR_CE32", "FFFD_PRIMARY", "FFFD_CE32", "SPECIAL_CE32_LOW_BYTE", "FALLBACK_CE32", "LONG_PRIMARY_CE32_LOW_BYTE", "UNASSIGNED_CE32", "NO_CE32", "NO_CE_PRIMARY", "NO_CE_WEIGHT16", "NO_CE", "NO_LEVEL", "PRIMARY_LEVEL", "SECONDARY_LEVEL", "CASE_LEVEL", "TERTIARY_LEVEL", "QUATERNARY_LEVEL", "IDENTICAL_LEVEL", "ZERO_LEVEL", "NO_LEVEL_FLAG", "PRIMARY_LEVEL_FLAG", "SECONDARY_LEVEL_FLAG", "CASE_LEVEL_FLAG", "TERTIARY_LEVEL_FLAG", "QUATERNARY_LEVEL_FLAG", "IDENTICAL_LEVEL_FLAG", "ZERO_LEVEL_FLAG", "FALLBACK_TAG", "LONG_PRIMARY_TAG", "LONG_SECONDARY_TAG", "RESERVED_TAG_3", "LATIN_EXPANSION_TAG", "EXPANSION32_TAG", "EXPANSION_TAG", "BUILDER_DATA_TAG", "PREFIX_TAG", "CONTRACTION_TAG", "DIGIT_TAG", "U0000_TAG", "HANGUL_TAG", "LEAD_SURROGATE_TAG", "OFFSET_TAG", "IMPLICIT_TAG", "MAX_EXPANSION_LENGTH", "MAX_INDEX", "CONTRACT_SINGLE_CP_NO_MATCH", "CONTRACT_NEXT_CCC", "CONTRACT_TRAILING_CCC", "HANGUL_NO_SPECIAL_JAMO", "LEAD_ALL_UNASSIGNED", "LEAD_ALL_FALLBACK", "LEAD_MIXED", "LEAD_TYPE_MASK" ]
}