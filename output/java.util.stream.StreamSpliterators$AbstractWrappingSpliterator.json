{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/StreamSpliterators.java",
  "packageName" : "java.util.stream",
  "className" : "AbstractWrappingSpliterator",
  "comment" : "\n     * Abstract wrapping spliterator that binds to the spliterator of a\n     * pipeline helper on first operation.\n     *\n     * <p>This spliterator is not late-binding and will bind to the source\n     * spliterator when first operated on.\n     *\n     * <p>A wrapping spliterator produced from a sequential stream\n     * cannot be split if there are stateful operations present.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "isParallel",
    "type" : "boolean",
    "comment" : "\n         * True if this spliterator supports splitting\n         ",
    "links" : [ ]
  }, {
    "name" : "ph",
    "type" : "PipelineHelper<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "spliteratorSupplier",
    "type" : "Supplier<Spliterator<P_IN>>",
    "comment" : "\n         * Supplier for the source spliterator.  Client provides either a\n         * spliterator or a supplier.\n         ",
    "links" : [ ]
  }, {
    "name" : "spliterator",
    "type" : "Spliterator<P_IN>",
    "comment" : "\n         * Source spliterator.  Either provided from client or obtained from\n         * supplier.\n         ",
    "links" : [ ]
  }, {
    "name" : "bufferSink",
    "type" : "Sink<P_IN>",
    "comment" : "\n         * Sink chain for the downstream stages of the pipeline, ultimately\n         * leading to the buffer. Used during partial traversal.\n         ",
    "links" : [ ]
  }, {
    "name" : "pusher",
    "type" : "BooleanSupplier",
    "comment" : "\n         * A function that advances one element of the spliterator, pushing\n         * it to bufferSink.  Returns whether any elements were processed.\n         * Used during partial traversal.\n         ",
    "links" : [ ]
  }, {
    "name" : "nextToConsume",
    "type" : "long",
    "comment" : " Next element to consume from the buffer, used during partial traversal ",
    "links" : [ ]
  }, {
    "name" : "buffer",
    "type" : "T_BUFFER",
    "comment" : " Buffer into which elements are pushed.  Used during partial traversal. ",
    "links" : [ ]
  }, {
    "name" : "finished",
    "type" : "boolean",
    "comment" : "\n         * True if full traversal has occurred (with possible cancellation).\n         * If doing a partial traversal, there may be still elements in buffer.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final void init()",
    "returnType" : "void",
    "comment" : "\n         * Called before advancing to set up spliterator, if needed.\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean doAdvance()",
    "returnType" : "boolean",
    "comment" : "\n         * Get an element from the source, pushing it into the sink chain,\n         * setting up the buffer if needed\n         * @return whether there are elements to consume from the buffer\n         ",
    "links" : [ ]
  }, {
    "name" : " abstract AbstractWrappingSpliterator<P_IN, P_OUT, ?> wrap(Spliterator<P_IN> s)",
    "returnType" : "AbstractWrappingSpliterator<P_IN, P_OUT, ?>",
    "comment" : "\n         * Invokes the shape-specific constructor with the provided arguments\n         * and returns the result.\n         ",
    "links" : [ ]
  }, {
    "name" : " abstract void initPartialTraversalState()",
    "returnType" : "void",
    "comment" : "\n         * Initializes buffer, sink chain, and pusher for a shape-specific\n         * implementation.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<P_OUT> trySplit()",
    "returnType" : "Spliterator<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean fillBuffer()",
    "returnType" : "boolean",
    "comment" : "\n         * If the buffer is empty, push elements into the sink chain until\n         * the source is empty or cancellation is requested.\n         * @return whether there are elements to consume from the buffer\n         ",
    "links" : [ ]
  }, {
    "name" : "public final long estimateSize()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long getExactSizeIfKnown()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int characteristics()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Comparator<? super P_OUT> getComparator()",
    "returnType" : "Comparator<? super P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " final void init()", " final boolean doAdvance()", " abstract AbstractWrappingSpliterator<P_IN, P_OUT, ?> wrap(Spliterator<P_IN> s)", " abstract void initPartialTraversalState()", "public Spliterator<P_OUT> trySplit()", "private boolean fillBuffer()", "public final long estimateSize()", "public final long getExactSizeIfKnown()", "public final int characteristics()", "public Comparator<? super P_OUT> getComparator()", "public final String toString()" ],
  "variableNames" : [ "isParallel", "ph", "spliteratorSupplier", "spliterator", "bufferSink", "pusher", "nextToConsume", "buffer", "finished" ]
}