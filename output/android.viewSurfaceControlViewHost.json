{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/SurfaceControlViewHost.java",
  "packageName" : "android.view",
  "className" : "SurfaceControlViewHost",
  "comment" : "\n * Utility class for adding a View hierarchy to a {@link SurfaceControl}. The View hierarchy\n * will render in to a root SurfaceControl, and receive input based on the SurfaceControl's\n * placement on-screen. The primary usage of this class is to embed a View hierarchy from\n * one process in to another. After the SurfaceControlViewHost has been set up in the embedded\n * content provider, we can send the {@link SurfaceControlViewHost.SurfacePackage}\n * to the host process. The host process can then attach the hierarchy to a SurfaceView within\n * its own by calling\n * {@link SurfaceView#setChildSurfacePackage}.\n ",
  "variables" : [ {
    "name" : "mViewRoot",
    "type" : "ViewRootImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWm",
    "type" : "WindowlessWindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceControl",
    "type" : "SurfaceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityEmbeddedConnection",
    "type" : "IAccessibilityEmbeddedConnection",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SurfacePackage getSurfacePackage()",
    "returnType" : "SurfacePackage",
    "comment" : "\n     * Return a SurfacePackage for the root SurfaceControl of the embedded hierarchy.\n     * Rather than be directly reparented using {@link SurfaceControl.Transaction} this\n     * SurfacePackage should be passed to {@link SurfaceView#setChildSurfacePackage}\n     * which will not only reparent the Surface, but ensure the accessibility hierarchies\n     * are linked.\n     ",
    "links" : [ "SurfaceControl.Transaction", "SurfaceView#setChildSurfacePackage" ]
  }, {
    "name" : "public void setView(@NonNull View view, @NonNull WindowManager.LayoutParams attrs)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setView(@NonNull View view, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Set the root view of the SurfaceControlViewHost. This view will render in to\n     * the SurfaceControl, and receive input based on the SurfaceControls positioning on\n     * screen. It will be laid as if it were in a window of the passed in width and height.\n     *\n     * @param view The View to add\n     * @param width The width to layout the View within, in pixels.\n     * @param height The height to layout the View within, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getView()",
    "returnType" : "View",
    "comment" : "\n     * @return The view passed to setView, or null if none has been passed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IWindow getWindowToken()",
    "returnType" : "IWindow",
    "comment" : "\n     * @return the ViewRootImpl wrapped by this host.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public WindowlessWindowManager getWindowlessWM()",
    "returnType" : "WindowlessWindowManager",
    "comment" : "\n     * @return the WindowlessWindowManager instance that this host is attached to.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void relayout(WindowManager.LayoutParams attrs)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void relayout(int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Modify the size of the root view.\n     *\n     * @param width Width in pixels\n     * @param height Height in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Trigger the tear down of the embedded view hierarchy and release the SurfaceControl.\n     * This will result in onDispatchedFromWindow being dispatched to the embedded view hierarchy\n     * and render the object unusable.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mViewRoot", "mWm", "mSurfaceControl", "mAccessibilityEmbeddedConnection" ],
  "methodNames" : [ "protected void finalize() throws Throwable", "public SurfacePackage getSurfacePackage()", "public void setView(@NonNull View view, @NonNull WindowManager.LayoutParams attrs)", "public void setView(@NonNull View view, int width, int height)", "public View getView()", "public IWindow getWindowToken()", "public WindowlessWindowManager getWindowlessWM()", "public void relayout(WindowManager.LayoutParams attrs)", "public void relayout(int width, int height)", "public void release()" ]
}