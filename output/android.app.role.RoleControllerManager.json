{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/role/RoleControllerManager.java",
  "packageName" : "android.app.role",
  "className" : "RoleControllerManager",
  "comment" : "\n * Interface for communicating with the role controller.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REQUEST_TIMEOUT_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRemoteServiceComponentName",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRemoteServicesLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRemoteServices",
    "type" : "SparseArray<ServiceConnector<IRoleController>>",
    "comment" : "\n     * Global remote services (per user) used by all {@link RoleControllerManager managers}.\n     ",
    "links" : [ "android.app.role.RoleControllerManager" ]
  }, {
    "name" : "mRemoteService",
    "type" : "ServiceConnector<IRoleController>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void initializeRemoteServiceComponentName(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "\n     * Initialize the remote service component name once so that we can avoid acquiring the\n     * PackageManagerService lock in constructor.\n     *\n     * @see #createWithInitializedRemoteServiceComponentName(Handler, Context)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static RoleControllerManager createWithInitializedRemoteServiceComponentName(@NonNull Handler handler, @NonNull Context context)",
    "returnType" : "RoleControllerManager",
    "comment" : "\n     * Create a {@link RoleControllerManager} instance with the initialized remote service component\n     * name so that we can avoid acquiring the PackageManagerService lock in constructor.\n     *\n     * @see #initializeRemoteServiceComponentName(Context)\n     *\n     * @hide\n     ",
    "links" : [ "android.app.role.RoleControllerManager" ]
  }, {
    "name" : "private static ComponentName getRemoteServiceComponentName(@NonNull Context context)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void grantDefaultRoles(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * @see RoleControllerService#onGrantDefaultRoles()\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onAddRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags, @NonNull RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @see RoleControllerService#onAddRoleHolder(String, String, int)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRemoveRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags, @NonNull RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @see RoleControllerService#onRemoveRoleHolder(String, String, int)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onClearRoleHolders(@NonNull String roleName, @RoleManager.ManageHoldersFlags int flags, @NonNull RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @see RoleControllerService#onClearRoleHolders(String, int)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void isApplicationQualifiedForRole(@NonNull String roleName, @NonNull String packageName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * @see RoleControllerService#onIsApplicationQualifiedForRole(String, String)\n     *\n     * @deprecated Use {@link #isApplicationVisibleForRole(String, String, Executor, Consumer)}\n     *             instead.\n     *\n     * @hide\n     ",
    "links" : [ "#isApplicationVisibleForRole(String" ]
  }, {
    "name" : "public void isApplicationVisibleForRole(@NonNull String roleName, @NonNull String packageName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * @see RoleControllerService#onIsApplicationVisibleForRole(String, String)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void isRoleVisible(@NonNull String roleName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * @see RoleControllerService#onIsRoleVisible(String)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void propagateCallback(AndroidFuture<Bundle> operation, String opName, @CallbackExecutor @NonNull Executor executor, Consumer<Boolean> destination)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void propagateCallback(AndroidFuture<Bundle> operation, String opName, RemoteCallback destination)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "REQUEST_TIMEOUT_MILLIS", "sRemoteServiceComponentName", "sRemoteServicesLock", "sRemoteServices", "mRemoteService" ],
  "methodNames" : [ "public static void initializeRemoteServiceComponentName(@NonNull Context context)", "public static RoleControllerManager createWithInitializedRemoteServiceComponentName(@NonNull Handler handler, @NonNull Context context)", "private static ComponentName getRemoteServiceComponentName(@NonNull Context context)", "public void grantDefaultRoles(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void onAddRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags, @NonNull RemoteCallback callback)", "public void onRemoveRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags, @NonNull RemoteCallback callback)", "public void onClearRoleHolders(@NonNull String roleName, @RoleManager.ManageHoldersFlags int flags, @NonNull RemoteCallback callback)", "public void isApplicationQualifiedForRole(@NonNull String roleName, @NonNull String packageName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void isApplicationVisibleForRole(@NonNull String roleName, @NonNull String packageName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void isRoleVisible(@NonNull String roleName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "private void propagateCallback(AndroidFuture<Bundle> operation, String opName, @CallbackExecutor @NonNull Executor executor, Consumer<Boolean> destination)", "private void propagateCallback(AndroidFuture<Bundle> operation, String opName, RemoteCallback destination)" ]
}