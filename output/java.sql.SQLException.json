{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/SQLException.java",
  "packageName" : "java.sql",
  "className" : "SQLException",
  "comment" : "\n * <P>An exception that provides information on a database access\n * error or other errors.\n *\n * <P>Each <code>SQLException</code> provides several kinds of information:\n * <UL>\n *   <LI> a string describing the error.  This is used as the Java Exception\n *       message, available via the method <code>getMesasge</code>.\n *   <LI> a \"SQLstate\" string, which follows either the XOPEN SQLstate conventions\n *        or the SQL:2003 conventions.\n *       The values of the SQLState string are described in the appropriate spec.\n *       The <code>DatabaseMetaData</code> method <code>getSQLStateType</code>\n *       can be used to discover whether the driver returns the XOPEN type or\n *       the SQL:2003 type.\n *   <LI> an integer error code that is specific to each vendor.  Normally this will\n *       be the actual error code returned by the underlying database.\n *   <LI> a chain to a next Exception.  This can be used to provide additional\n *       error information.\n *   <LI> the causal relationship, if any for this <code>SQLException</code>.\n * </UL>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SQLState",
    "type" : "String",
    "comment" : "\n         * @serial\n         ",
    "links" : [ ]
  }, {
    "name" : "vendorCode",
    "type" : "int",
    "comment" : "\n         * @serial\n         ",
    "links" : [ ]
  }, {
    "name" : "next",
    "type" : "SQLException",
    "comment" : "\n         * @serial\n         ",
    "links" : [ ]
  }, {
    "name" : "nextUpdater",
    "type" : "AtomicReferenceFieldUpdater<SQLException, SQLException>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getSQLState()",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the SQLState for this <code>SQLException</code> object.\n     *\n     * @return the SQLState value\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getErrorCode()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the vendor-specific exception code\n     * for this <code>SQLException</code> object.\n     *\n     * @return the vendor's error code\n     ",
    "links" : [ ]
  }, {
    "name" : "public SQLException getNextException()",
    "returnType" : "SQLException",
    "comment" : "\n     * Retrieves the exception chained to this\n     * <code>SQLException</code> object by setNextException(SQLException ex).\n     *\n     * @return the next <code>SQLException</code> object in the chain;\n     *         <code>null</code> if there are none\n     * @see #setNextException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNextException(SQLException ex)",
    "returnType" : "void",
    "comment" : "\n     * Adds an <code>SQLException</code> object to the end of the chain.\n     *\n     * @param ex the new exception that will be added to the end of\n     *            the <code>SQLException</code> chain\n     * @see #getNextException\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Throwable> iterator()",
    "returnType" : "Iterator<Throwable>",
    "comment" : "\n     * Returns an iterator over the chained SQLExceptions.  The iterator will\n     * be used to iterate over each SQLException and its underlying cause\n     * (if any).\n     *\n     * @return an iterator over the chained SQLExceptions and causes in the proper\n     * order\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getSQLState()", "public int getErrorCode()", "public SQLException getNextException()", "public void setNextException(SQLException ex)", "public Iterator<Throwable> iterator()" ],
  "variableNames" : [ "SQLState", "vendorCode", "next", "nextUpdater", "serialVersionUID" ]
}