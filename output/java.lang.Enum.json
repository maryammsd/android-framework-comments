{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Enum.java",
  "packageName" : "java.lang",
  "className" : "Enum",
  "comment" : "\n * This is the common base class of all Java language enumeration classes.\n *\n * More information about enums, including descriptions of the\n * implicitly declared methods synthesized by the compiler, can be\n * found in section {@jls 8.9} of <cite>The Java Language\n * Specification</cite>.\n *\n * Enumeration classes are all serializable and receive special handling\n * by the serialization mechanism. The serialized representation used\n * for enum constants cannot be customized. Declarations of methods\n * and fields that would otherwise interact with serialization are\n * ignored, including {@code serialVersionUID}; see the <cite>Java\n * Object Serialization Specification</cite> for details.\n *\n * <p> Note that when using an enumeration type as the type of a set\n * or as the type of the keys in a map, specialized and efficient\n * {@linkplain java.util.EnumSet set} and {@linkplain\n * java.util.EnumMap map} implementations are available.\n *\n * @param <E> The type of the enum subclass\n * @serial exclude\n * @author  Josh Bloch\n * @author  Neal Gafter\n * @see     Class#getEnumConstants()\n * @see     java.util.EnumSet\n * @see     java.util.EnumMap\n * @jls 8.9 Enum Classes\n * @jls 8.9.3 Enum Members\n * @since   1.5\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "name",
    "type" : "String",
    "comment" : "\n     * The name of this enum constant, as declared in the enum declaration.\n     * Most programmers should use the {@link #toString} method rather than\n     * accessing this field.\n     ",
    "links" : [ "#toString" ]
  }, {
    "name" : "ordinal",
    "type" : "int",
    "comment" : "\n     * The ordinal of this enumeration constant (its position\n     * in the enum declaration, where the initial constant is assigned\n     * an ordinal of zero).\n     *\n     * Most programmers will have no use for this field.  It is designed\n     * for use by sophisticated enum-based data structures, such as\n     * {@link java.util.EnumSet} and {@link java.util.EnumMap}.\n     ",
    "links" : [ "java.util.EnumMap", "java.util.EnumSet" ]
  }, {
    "name" : "sharedConstantsCache",
    "type" : "BasicLruCache<Class<? extends Enum>, Object[]>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String name()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this enum constant, exactly as declared in its\n     * enum declaration.\n     *\n     * <b>Most programmers should use the {@link #toString} method in\n     * preference to this one, as the toString method may return\n     * a more user-friendly name.</b>  This method is designed primarily for\n     * use in specialized situations where correctness depends on getting the\n     * exact name, which will not vary from release to release.\n     *\n     * @return the name of this enum constant\n     ",
    "links" : [ "#toString" ]
  }, {
    "name" : "public final int ordinal()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ordinal of this enumeration constant (its position\n     * in its enum declaration, where the initial constant is assigned\n     * an ordinal of zero).\n     *\n     * Most programmers will have no use for this method.  It is\n     * designed for use by sophisticated enum-based data structures, such\n     * as {@link java.util.EnumSet} and {@link java.util.EnumMap}.\n     *\n     * @return the ordinal of this enumeration constant\n     ",
    "links" : [ "java.util.EnumMap", "java.util.EnumSet" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this enum constant, as contained in the\n     * declaration.  This method may be overridden, though it typically\n     * isn't necessary or desirable.  An enum class should override this\n     * method when a more \"programmer-friendly\" string form exists.\n     *\n     * @return the name of this enum constant\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified object is equal to this\n     * enum constant.\n     *\n     * @param other the object to be compared for equality with this object.\n     * @return  true if the specified object is equal to this\n     *          enum constant.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for this enum constant.\n     *\n     * @return a hash code for this enum constant.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Throws CloneNotSupportedException.  This guarantees that enums\n     * are never cloned, which is necessary to preserve their \"singleton\"\n     * status.\n     *\n     * @return (never returns)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int compareTo(E o)",
    "returnType" : "int",
    "comment" : "\n     * Compares this enum with the specified object for order.  Returns a\n     * negative integer, zero, or a positive integer as this object is less\n     * than, equal to, or greater than the specified object.\n     *\n     * Enum constants are only comparable to other enum constants of the\n     * same enum type.  The natural order implemented by this\n     * method is the order in which the constants are declared.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Class<E> getDeclaringClass()",
    "returnType" : "Class<E>",
    "comment" : "\n     * Returns the Class object corresponding to this enum constant's\n     * enum type.  Two enum constants e1 and  e2 are of the\n     * same enum type if and only if\n     *   e1.getDeclaringClass() == e2.getDeclaringClass().\n     * (The value returned by this method may differ from the one returned\n     * by the {@link Object#getClass} method for enum constants with\n     * constant-specific class bodies.)\n     *\n     * @return the Class object corresponding to this enum constant's\n     *     enum type\n     ",
    "links" : [ "java.lang.Object#getClass" ]
  }, {
    "name" : "public final Optional<EnumDesc<E>> describeConstable()",
    "returnType" : "Optional<EnumDesc<E>>",
    "comment" : "\n     * Returns an enum descriptor {@code EnumDesc} for this instance, if one can be\n     * constructed, or an empty {@link Optional} if one cannot be.\n     *\n     * @return An {@link Optional} containing the resulting nominal descriptor,\n     * or an empty {@link Optional} if one cannot be constructed.\n     * @since 12\n     * @hide\n     ",
    "links" : [ "java.util.Optional" ]
  }, {
    "name" : "public static T valueOf(Class<T> enumClass, String name)",
    "returnType" : "T",
    "comment" : "\n    public static <T extends Enum<T>> T valueOf(Class<T> enumClass,\n                                                String name) {\n        T result = enumClass.enumConstantDirectory().get(name);\n        if (result != null)\n            return result;\n        if (name == null)\n            throw new NullPointerException(\"Name is null\");\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Object[] enumValues(Class<? extends Enum> clazz)",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static T[] getSharedConstants(Class<T> enumType)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns a shared, mutable array containing the constants of this enum. It\n     * is an error to modify the returned array.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void finalize()",
    "returnType" : "void",
    "comment" : "\n     * enum classes cannot have finalize methods.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * prevent default deserialization\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObjectNoData() throws ObjectStreamException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String name()", "public final int ordinal()", "public String toString()", "public final boolean equals(Object other)", "public final int hashCode()", "protected final Object clone() throws CloneNotSupportedException", "public final int compareTo(E o)", "public final Class<E> getDeclaringClass()", "public final Optional<EnumDesc<E>> describeConstable()", "public static T valueOf(Class<T> enumClass, String name)", "private static Object[] enumValues(Class<? extends Enum> clazz)", "public static T[] getSharedConstants(Class<T> enumType)", "protected final void finalize()", "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException", "private void readObjectNoData() throws ObjectStreamException" ],
  "variableNames" : [ "name", "ordinal", "sharedConstantsCache" ]
}