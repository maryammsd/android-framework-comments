{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/pdf/PdfEditor.java",
  "packageName" : "android.graphics.pdf",
  "className" : "PdfEditor",
  "comment" : "\n * Class for editing PDF files.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sPdfiumLock",
    "type" : "Object",
    "comment" : "\n     * Any call the native pdfium code has to be single threaded as the library does not support\n     * parallel use.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeDocument",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPageCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInput",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getPageCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of pages in the document.\n     *\n     * @return The page count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removePage(int pageIndex)",
    "returnType" : "void",
    "comment" : "\n     * Removes the page with a given index.\n     *\n     * @param pageIndex The page to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTransformAndClip(int pageIndex, @Nullable Matrix transform, @Nullable Rect clip)",
    "returnType" : "void",
    "comment" : "\n     * Sets a transformation and clip for a given page. The transformation matrix if\n     * non-null must be affine as per {@link android.graphics.Matrix#isAffine()}. If\n     * the clip is null, then no clipping is performed.\n     *\n     * @param pageIndex The page whose transform to set.\n     * @param transform The transformation to apply.\n     * @param clip The clip to apply.\n     ",
    "links" : [ "android.graphics.Matrix#isAffine()" ]
  }, {
    "name" : "public void getPageSize(int pageIndex, @NonNull Point outSize)",
    "returnType" : "void",
    "comment" : "\n     * Gets the size of a given page in mils (1/72\").\n     *\n     * @param pageIndex The page index.\n     * @param outSize The size output.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getPageMediaBox(int pageIndex, @NonNull Rect outMediaBox)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the media box of a given page in mils (1/72\").\n     *\n     * @param pageIndex The page index.\n     * @param outMediaBox The media box output.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPageMediaBox(int pageIndex, @NonNull Rect mediaBox)",
    "returnType" : "void",
    "comment" : "\n     * Sets the media box of a given page in mils (1/72\").\n     *\n     * @param pageIndex The page index.\n     * @param mediaBox The media box.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getPageCropBox(int pageIndex, @NonNull Rect outCropBox)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the crop box of a given page in mils (1/72\").\n     *\n     * @param pageIndex The page index.\n     * @param outCropBox The crop box output.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPageCropBox(int pageIndex, @NonNull Rect cropBox)",
    "returnType" : "void",
    "comment" : "\n     * Sets the crop box of a given page in mils (1/72\").\n     *\n     * @param pageIndex The page index.\n     * @param cropBox The crop box.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldScaleForPrinting()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the document prefers to be scaled for printing.\n     *\n     * @return Whether to scale the document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(ParcelFileDescriptor output) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the PDF file to the provided destination.\n     * <p>\n     * <strong>Note:</strong> This method takes ownership of the passed in file\n     * descriptor and is responsible for closing it when writing completes.\n     * </p>\n     * @param output The destination.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this editor. You should not use this instance\n     * after this method is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doClose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfClosed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfPageNotInDocument(int pageIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfNotNullAndNotAfine(Matrix matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfOutSizeNull(Point outSize)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfOutMediaBoxNull(Rect outMediaBox)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfMediaBoxNull(Rect mediaBox)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfOutCropBoxNull(Rect outCropBox)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfCropBoxNull(Rect cropBox)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeOpen(int fd, long size)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClose(long documentPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetPageCount(long documentPtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeRemovePage(long documentPtr, int pageIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWrite(long documentPtr, int fd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetTransformAndClip(long documentPtr, int pageIndex, long transformPtr, int clipLeft, int clipTop, int clipRight, int clipBottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeGetPageSize(long documentPtr, int pageIndex, Point outSize)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetPageMediaBox(long documentPtr, int pageIndex, Rect outMediaBox)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetPageMediaBox(long documentPtr, int pageIndex, Rect mediaBox)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetPageCropBox(long documentPtr, int pageIndex, Rect outMediaBox)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetPageCropBox(long documentPtr, int pageIndex, Rect mediaBox)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeScaleForPrinting(long documentPtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getPageCount()", "public void removePage(int pageIndex)", "public void setTransformAndClip(int pageIndex, @Nullable Matrix transform, @Nullable Rect clip)", "public void getPageSize(int pageIndex, @NonNull Point outSize)", "public boolean getPageMediaBox(int pageIndex, @NonNull Rect outMediaBox)", "public void setPageMediaBox(int pageIndex, @NonNull Rect mediaBox)", "public boolean getPageCropBox(int pageIndex, @NonNull Rect outCropBox)", "public void setPageCropBox(int pageIndex, @NonNull Rect cropBox)", "public boolean shouldScaleForPrinting()", "public void write(ParcelFileDescriptor output) throws IOException", "public void close()", "protected void finalize() throws Throwable", "private void doClose()", "private void throwIfClosed()", "private void throwIfPageNotInDocument(int pageIndex)", "private void throwIfNotNullAndNotAfine(Matrix matrix)", "private void throwIfOutSizeNull(Point outSize)", "private void throwIfOutMediaBoxNull(Rect outMediaBox)", "private void throwIfMediaBoxNull(Rect mediaBox)", "private void throwIfOutCropBoxNull(Rect outCropBox)", "private void throwIfCropBoxNull(Rect cropBox)", "private static native long nativeOpen(int fd, long size)", "private static native void nativeClose(long documentPtr)", "private static native int nativeGetPageCount(long documentPtr)", "private static native int nativeRemovePage(long documentPtr, int pageIndex)", "private static native void nativeWrite(long documentPtr, int fd)", "private static native void nativeSetTransformAndClip(long documentPtr, int pageIndex, long transformPtr, int clipLeft, int clipTop, int clipRight, int clipBottom)", "private static native void nativeGetPageSize(long documentPtr, int pageIndex, Point outSize)", "private static native boolean nativeGetPageMediaBox(long documentPtr, int pageIndex, Rect outMediaBox)", "private static native void nativeSetPageMediaBox(long documentPtr, int pageIndex, Rect mediaBox)", "private static native boolean nativeGetPageCropBox(long documentPtr, int pageIndex, Rect outMediaBox)", "private static native void nativeSetPageCropBox(long documentPtr, int pageIndex, Rect mediaBox)", "private static native boolean nativeScaleForPrinting(long documentPtr)" ],
  "variableNames" : [ "sPdfiumLock", "mCloseGuard", "mNativeDocument", "mPageCount", "mInput" ]
}