{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/AnimatedVectorDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "VectorDrawableAnimatorRT",
  "comment" : "\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "START_ANIMATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REVERSE_ANIMATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESET_ANIMATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "END_ANIMATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SAMPLE_POINTS",
    "type" : "int",
    "comment" : " If the duration of an animation is more than 300 frames, we cap the sample size to 300.",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "AnimatorListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartDelays",
    "type" : "LongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpValues",
    "type" : "PropertyValuesHolder.PropertyValues",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSetPtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContainsSequentialAnimators",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsReversible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsInfinite",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSetRefBasePtr",
    "type" : "VirtualRefBasePtr",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastSeenTarget",
    "type" : "WeakReference<RenderNode>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastListenerId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingAnimationActions",
    "type" : "IntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawable",
    "type" : "AnimatedVectorDrawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTotalDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void init(@NonNull AnimatorSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseAnimatorSet(AnimatorSet set, long startTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createRTAnimator(ObjectAnimator animator, long startTime)",
    "returnType" : "void",
    "comment" : " this step further up the chain in the parser to avoid the detour.",
    "links" : [ ]
  }, {
    "name" : "private void createRTAnimatorForGroup(PropertyValuesHolder[] values, ObjectAnimator animator, VectorDrawable.VGroup target, long startTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createRTAnimatorForPath(ObjectAnimator animator, VectorDrawable.VPath target, long startTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createRTAnimatorForFullPath(ObjectAnimator animator, VectorDrawable.VFullPath target, long startTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createRTAnimatorForRootGroup(PropertyValuesHolder[] values, ObjectAnimator animator, VectorDrawable.VectorDrawableState target, long startTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getFrameCount(long duration)",
    "returnType" : "int",
    "comment" : "\n         * Calculate the amount of frames an animation will run based on duration.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static float[] createFloatDataPoints(PropertyValuesHolder.PropertyValues.DataSource dataSource, long duration)",
    "returnType" : "float[]",
    "comment" : " in native.",
    "links" : [ ]
  }, {
    "name" : "private static int[] createIntDataPoints(PropertyValuesHolder.PropertyValues.DataSource dataSource, long duration)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createNativeChildAnimator(long propertyPtr, long extraDelay, ObjectAnimator animator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void recordLastSeenTarget(RecordingCanvas canvas)",
    "returnType" : "void",
    "comment" : "\n         * Holds a weak reference to the target that was last seen (through the RecordingCanvas\n         * in the last draw call), so that when animator set needs to start, we can add the animator\n         * to the last seen RenderNode target and start right away.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void handlePendingAction(int pendingAnimationAction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean useLastSeenTarget()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean useTarget(RenderNode target)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void invalidateOwningView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addPendingAction(int pendingAnimationAction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void end()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reverse()",
    "returnType" : "void",
    "comment" : " animators or when the animator set has a start delay",
    "links" : [ ]
  }, {
    "name" : "private void startAnimation()",
    "returnType" : "void",
    "comment" : " This should only be called after animator has been added to the RenderNode target.",
    "links" : [ ]
  }, {
    "name" : "private void endAnimation()",
    "returnType" : "void",
    "comment" : " This should only be called after animator has been added to the RenderNode target.",
    "links" : [ ]
  }, {
    "name" : "private void resetAnimation()",
    "returnType" : "void",
    "comment" : " This should only be called after animator has been added to the RenderNode target.",
    "links" : [ ]
  }, {
    "name" : "private void reverseAnimation()",
    "returnType" : "void",
    "comment" : " This should only be called after animator has been added to the RenderNode target.",
    "links" : [ ]
  }, {
    "name" : "public long getAnimatorNativePtr()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canReverse()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStarted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setListener(AnimatorListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeListener(AnimatorListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInfinite()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pause()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resume()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onAnimationEnd(int listenerId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void callOnFinished(VectorDrawableAnimatorRT set, int id)",
    "returnType" : "void",
    "comment" : " onFinished: should be called from native",
    "links" : [ ]
  }, {
    "name" : "private void transferPendingActions(VectorDrawableAnimator animatorSet)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getTotalDuration()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void init(@NonNull AnimatorSet set)", "private void parseAnimatorSet(AnimatorSet set, long startTime)", "private void createRTAnimator(ObjectAnimator animator, long startTime)", "private void createRTAnimatorForGroup(PropertyValuesHolder[] values, ObjectAnimator animator, VectorDrawable.VGroup target, long startTime)", "private void createRTAnimatorForPath(ObjectAnimator animator, VectorDrawable.VPath target, long startTime)", "private void createRTAnimatorForFullPath(ObjectAnimator animator, VectorDrawable.VFullPath target, long startTime)", "private void createRTAnimatorForRootGroup(PropertyValuesHolder[] values, ObjectAnimator animator, VectorDrawable.VectorDrawableState target, long startTime)", "private static int getFrameCount(long duration)", "private static float[] createFloatDataPoints(PropertyValuesHolder.PropertyValues.DataSource dataSource, long duration)", "private static int[] createIntDataPoints(PropertyValuesHolder.PropertyValues.DataSource dataSource, long duration)", "private void createNativeChildAnimator(long propertyPtr, long extraDelay, ObjectAnimator animator)", "protected void recordLastSeenTarget(RecordingCanvas canvas)", "private void handlePendingAction(int pendingAnimationAction)", "private boolean useLastSeenTarget()", "private boolean useTarget(RenderNode target)", "private void invalidateOwningView()", "private void addPendingAction(int pendingAnimationAction)", "public void start()", "public void end()", "public void reset()", "public void reverse()", "private void startAnimation()", "private void endAnimation()", "private void resetAnimation()", "private void reverseAnimation()", "public long getAnimatorNativePtr()", "public boolean canReverse()", "public boolean isStarted()", "public boolean isRunning()", "public void setListener(AnimatorListener listener)", "public void removeListener(AnimatorListener listener)", "public void onDraw(Canvas canvas)", "public boolean isInfinite()", "public void pause()", "public void resume()", "private void onAnimationEnd(int listenerId)", "private static void callOnFinished(VectorDrawableAnimatorRT set, int id)", "private void transferPendingActions(VectorDrawableAnimator animatorSet)", "public long getTotalDuration()" ],
  "variableNames" : [ "START_ANIMATION", "REVERSE_ANIMATION", "RESET_ANIMATION", "END_ANIMATION", "MAX_SAMPLE_POINTS", "mHandler", "mListener", "mStartDelays", "mTmpValues", "mSetPtr", "mContainsSequentialAnimators", "mStarted", "mInitialized", "mIsReversible", "mIsInfinite", "mSetRefBasePtr", "mLastSeenTarget", "mLastListenerId", "mPendingAnimationActions", "mDrawable", "mTotalDuration" ]
}