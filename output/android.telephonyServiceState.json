{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/ServiceState.java",
  "packageName" : "android.telephony",
  "className" : "ServiceState",
  "comment" : "\n * Contains phone state and service related information.\n *\n * The following phone information is included in returned ServiceState:\n *\n * <ul>\n *   <li>Service state: IN_SERVICE, OUT_OF_SERVICE, EMERGENCY_ONLY, POWER_OFF\n *   <li>Duplex mode: UNKNOWN, FDD, TDD\n *   <li>Roaming indicator\n *   <li>Operator name, short name and numeric id\n *   <li>Network selection mode\n * </ul>\n *\n * For historical reasons this class is not declared as final; however,\n * it should be treated as though it were final.\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : " STOPSHIP if true",
    "links" : [ ]
  }, {
    "name" : "STATE_IN_SERVICE",
    "type" : "int",
    "comment" : " 0",
    "links" : [ ]
  }, {
    "name" : "STATE_OUT_OF_SERVICE",
    "type" : "int",
    "comment" : "\n     * Phone is not registered with any operator, the phone\n     * can be currently searching a new operator to register to, or not\n     * searching to registration at all, or registration is denied, or radio\n     * signal is not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_EMERGENCY_ONLY",
    "type" : "int",
    "comment" : "TODO: This state is not used anymore. It should be deprecated in a future release.",
    "links" : [ ]
  }, {
    "name" : "STATE_POWER_OFF",
    "type" : "int",
    "comment" : " 3",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_RANGE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates frequency range is unknown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_RANGE_LOW",
    "type" : "int",
    "comment" : "\n     * Indicates the frequency range is below 1GHz.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_RANGE_MID",
    "type" : "int",
    "comment" : "\n     * Indicates the frequency range is between 1GHz to 3GHz.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_RANGE_HIGH",
    "type" : "int",
    "comment" : "\n     * Indicates the frequency range is between 3GHz and 6GHz.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_RANGE_MMWAVE",
    "type" : "int",
    "comment" : "\n     * Indicates the frequency range is above 6GHz (millimeter wave frequency).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_RANGE_ORDER",
    "type" : "List<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DUPLEX_MODE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Duplex mode for the phone is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "DUPLEX_MODE_FDD",
    "type" : "int",
    "comment" : "\n     * Duplex mode for the phone is frequency-division duplexing.\n     ",
    "links" : [ ]
  }, {
    "name" : "DUPLEX_MODE_TDD",
    "type" : "int",
    "comment" : "\n     * Duplex mode for the phone is time-division duplexing.\n     ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_UNKNOWN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_GPRS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_EDGE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_UMTS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_IS95A",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_IS95B",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_1xRTT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_EVDO_0",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_EVDO_A",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_HSDPA",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_HSUPA",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_HSPA",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_EVDO_B",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_EHRPD",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_LTE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_HSPAP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_GSM",
    "type" : "int",
    "comment" : "\n     * GSM radio technology only supports voice. It does not support data.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_TD_SCDMA",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_IWLAN",
    "type" : "int",
    "comment" : "\n     * IWLAN\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_LTE_CA",
    "type" : "int",
    "comment" : "\n     * LTE_CA\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_TECHNOLOGY_NR",
    "type" : "int",
    "comment" : "\n     * NR(New Radio) 5G.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NEXT_RIL_RADIO_TECHNOLOGY",
    "type" : "int",
    "comment" : "\n     * The number of the radio technologies.\n     ",
    "links" : [ ]
  }, {
    "name" : "RIL_RADIO_CDMA_TECHNOLOGY_BITMASK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mVoiceRegState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataRegState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROAMING_TYPE_NOT_ROAMING",
    "type" : "int",
    "comment" : "\n     * Not roaming, registered in home network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROAMING_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * registered in a roaming network, but can not tell if it's domestic or international.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROAMING_TYPE_DOMESTIC",
    "type" : "int",
    "comment" : "\n     * registered in a domestic roaming network\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROAMING_TYPE_INTERNATIONAL",
    "type" : "int",
    "comment" : "\n     * registered in an international roaming network\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_ID",
    "type" : "int",
    "comment" : "\n     * Unknown ID. Could be returned by {@link #getCdmaNetworkId()} or {@link #getCdmaSystemId()}\n     ",
    "links" : [ "#getCdmaNetworkId", "#getCdmaSystemId" ]
  }, {
    "name" : "EXTRA_SERVICE_STATE",
    "type" : "String",
    "comment" : "\n     * A parcelable extra used with {@link Intent#ACTION_SERVICE_STATE} representing the service\n     * state.\n     * @hide\n     ",
    "links" : [ "Intent#ACTION_SERVICE_STATE" ]
  }, {
    "name" : "mOperatorAlphaLong",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperatorAlphaShort",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperatorNumeric",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsManualNetworkSelection",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEmergencyOnly",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCssIndicator",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCdmaRoamingIndicator",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCdmaDefaultRoamingIndicator",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCdmaEriIconIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCdmaEriIconMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNrFrequencyRange",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelNumber",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCellBandwidths",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLteEarfcnRsrpBoost",
    "type" : "int",
    "comment" : " EARFCN stands for E-UTRA Absolute Radio Frequency Channel Number,\n     * Reference: 3GPP TS 36.104 5.4.3 ",
    "links" : [ ]
  }, {
    "name" : "mNetworkRegistrationInfos",
    "type" : "List<NetworkRegistrationInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperatorAlphaLongRaw",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperatorAlphaShortRaw",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsDataRoamingFromRegistration",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsIwlanPreferred",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ServiceState>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final String getRoamingLogString(int roamingType)",
    "returnType" : "String",
    "comment" : "\n     * get String description of roaming type\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ServiceState newFromBundle(@NonNull Bundle m)",
    "returnType" : "ServiceState",
    "comment" : "\n     * Create a new ServiceState from a intent notifier Bundle\n     *\n     * This method is used to get ServiceState object from extras upon receiving\n     * {@link Intent#ACTION_SERVICE_STATE}.\n     *\n     * @param m Bundle from intent notifier\n     * @return newly created ServiceState\n     * @hide\n     ",
    "links" : [ "Intent#ACTION_SERVICE_STATE" ]
  }, {
    "name" : "protected void copyFrom(ServiceState s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * Get current voice service state\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVoiceRegState()",
    "returnType" : "int",
    "comment" : "\n     * Get current voice service state\n     *\n     * @see #STATE_IN_SERVICE\n     * @see #STATE_OUT_OF_SERVICE\n     * @see #STATE_EMERGENCY_ONLY\n     * @see #STATE_POWER_OFF\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDataRegState()",
    "returnType" : "int",
    "comment" : "\n     * Get current data registration state.\n     *\n     * @see #STATE_IN_SERVICE\n     * @see #STATE_OUT_OF_SERVICE\n     * @see #STATE_EMERGENCY_ONLY\n     * @see #STATE_POWER_OFF\n     *\n     * @return current data registration state\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDataRegistrationState()",
    "returnType" : "int",
    "comment" : "\n     * Get current data registration state.\n     *\n     * @see #STATE_IN_SERVICE\n     * @see #STATE_OUT_OF_SERVICE\n     * @see #STATE_EMERGENCY_ONLY\n     * @see #STATE_POWER_OFF\n     *\n     * @return current data registration state\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDuplexMode()",
    "returnType" : "int",
    "comment" : "\n     * Get the current duplex mode\n     *\n     * @see #DUPLEX_MODE_UNKNOWN\n     * @see #DUPLEX_MODE_FDD\n     * @see #DUPLEX_MODE_TDD\n     *\n     * @return Current {@code DuplexMode} for the phone\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChannelNumber()",
    "returnType" : "int",
    "comment" : "\n     * Get the channel number of the current primary serving cell, or -1 if unknown\n     *\n     * <p>This is EARFCN for LTE, UARFCN for UMTS, and ARFCN for GSM.\n     *\n     * @return Channel number of primary serving cell\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getCellBandwidths()",
    "returnType" : "int[]",
    "comment" : "\n     * Get an array of cell bandwidths (kHz) for the current serving cells\n     *\n     * @return Current serving cell bandwidths\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getRoaming()",
    "returnType" : "boolean",
    "comment" : "\n     * Get current roaming indicator of phone\n     * (note: not just decoding from TS 27.007 7.2)\n     *\n     * @return true if TS 27.007 7.2 roaming is true\n     *              and ONS is different from SPN\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getVoiceRoaming()",
    "returnType" : "boolean",
    "comment" : "\n     * Get current voice network roaming status\n     * @return roaming status\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVoiceRoamingType()",
    "returnType" : "int",
    "comment" : "\n     * Get current voice network roaming type\n     * @return roaming type\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDataRoaming()",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether the current data network is roaming.\n     * This value may be overwritten by resource overlay or carrier configuration.\n     * @see #getDataRoamingFromRegistration() to get the value from the network registration.\n     * @return roaming type\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDataRoamingFromRegistration(boolean dataRoaming)",
    "returnType" : "void",
    "comment" : "\n     * Set whether the data network registration state is roaming.\n     * This should only be set to the roaming value received\n     * once the data registration phase has completed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDataRoamingFromRegistration()",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether data network registration state is roaming.\n     * This value is set directly from the modem and will not be overwritten\n     * by resource overlay or carrier configuration.\n     * @return true if registration indicates roaming, false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDataRoamingType()",
    "returnType" : "int",
    "comment" : "\n     * Get current data network roaming type\n     * @return roaming type\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmergencyOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCdmaRoamingIndicator()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCdmaDefaultRoamingIndicator()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCdmaEriIconIndex()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCdmaEriIconMode()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOperatorAlphaLong()",
    "returnType" : "String",
    "comment" : "\n     * Get current registered operator name in long alphanumeric format.\n     *\n     * In GSM/UMTS, long format can be up to 16 characters long.\n     * In CDMA, returns the ERI text, if set. Otherwise, returns the ONS.\n     *\n     * @return long name of operator, null if unregistered or unknown\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getVoiceOperatorAlphaLong()",
    "returnType" : "String",
    "comment" : "\n     * Get current registered voice network operator name in long alphanumeric format.\n     * @return long name of operator\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOperatorAlphaShort()",
    "returnType" : "String",
    "comment" : "\n     * Get current registered operator name in short alphanumeric format.\n     *\n     * In GSM/UMTS, short format can be up to 8 characters long.\n     *\n     * @return short name of operator, null if unregistered or unknown\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getVoiceOperatorAlphaShort()",
    "returnType" : "String",
    "comment" : "\n     * Get current registered voice network operator name in short alphanumeric format.\n     * @return short name of operator, null if unregistered or unknown\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDataOperatorAlphaShort()",
    "returnType" : "String",
    "comment" : "\n     * Get current registered data network operator name in short alphanumeric format.\n     * @return short name of operator, null if unregistered or unknown\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOperatorAlpha()",
    "returnType" : "String",
    "comment" : "\n     * Get current registered operator name in long alphanumeric format if\n     * available or short otherwise.\n     *\n     * @see #getOperatorAlphaLong\n     * @see #getOperatorAlphaShort\n     *\n     * @return name of operator, null if unregistered or unknown\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOperatorNumeric()",
    "returnType" : "String",
    "comment" : "\n     * The country code can be decoded using\n     * {@link com.android.internal.telephony.MccTable#countryCodeForMcc(int)}.\n     ",
    "links" : [ "com.android.internal.telephony.MccTable#countryCodeForMcc" ]
  }, {
    "name" : "public String getVoiceOperatorNumeric()",
    "returnType" : "String",
    "comment" : "\n     * Get current registered voice network operator numeric id.\n     * @return numeric format of operator, null if unregistered or unknown\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDataOperatorNumeric()",
    "returnType" : "String",
    "comment" : "\n     * Get current registered data network operator numeric id.\n     * @return numeric format of operator, null if unregistered or unknown\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getIsManualSelection()",
    "returnType" : "boolean",
    "comment" : "\n     * Get current network selection mode.\n     *\n     * @return true if manual mode, false if automatic mode\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String roamingTypeToString(@RoamingType int roamingType)",
    "returnType" : "String",
    "comment" : "\n     * Convert roaming type to string\n     *\n     * @param roamingType roaming type\n     * @return The roaming type in string format\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String rilRadioTechnologyToString(int rt)",
    "returnType" : "String",
    "comment" : "\n     * Convert radio technology to String\n     *\n     * @param rt radioTechnology\n     * @return String representation of the RAT\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String frequencyRangeToString(@FrequencyRange int range)",
    "returnType" : "String",
    "comment" : "\n     * Convert frequency range into string\n     *\n     * @param range The cellular frequency range\n     * @return Frequency range in string format\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String rilServiceStateToString(int serviceState)",
    "returnType" : "String",
    "comment" : "\n     * Convert RIL Service State to String\n     *\n     * @param serviceState\n     * @return String representation of the ServiceState\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStateOutOfService()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStateOff()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setState(int state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVoiceRegState(int state)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDataRegState(int state)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setCellBandwidths(int[] bandwidths)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setChannelNumber(int channelNumber)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setRoaming(boolean roaming)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVoiceRoaming(boolean roaming)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setVoiceRoamingType(@RoamingType int type)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDataRoaming(boolean dataRoaming)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDataRoamingType(@RoamingType int type)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setEmergencyOnly(boolean emergencyOnly)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCdmaRoamingIndicator(int roaming)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCdmaDefaultRoamingIndicator(int roaming)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCdmaEriIconIndex(int index)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCdmaEriIconMode(int mode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperatorName(String longName, String shortName, String numeric)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOperatorAlphaLong(@Nullable String longName)",
    "returnType" : "void",
    "comment" : "\n     * In CDMA, mOperatorAlphaLong can be set from the ERI text.\n     * This is done from the GsmCdmaPhone and not from the ServiceStateTracker.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIsManualSelection(boolean isManual)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean equalsHandlesNulls(Object a, Object b)",
    "returnType" : "boolean",
    "comment" : "\n     * Test whether two objects hold the same data values or both are null.\n     *\n     * @param a first obj\n     * @param b second obj\n     * @return true if two objects equal or both are null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setFromNotifierBundle(Bundle m)",
    "returnType" : "void",
    "comment" : "\n     * Set ServiceState based on intent notifier map.\n     *\n     * @param m intent notifier map\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fillInNotifierBundle(@NonNull Bundle m)",
    "returnType" : "void",
    "comment" : "\n     * Set intent notifier Bundle based on service state.\n     *\n     * Put ServiceState object and its fields into bundle which is used by TelephonyRegistry\n     * to broadcast {@link Intent#ACTION_SERVICE_STATE}.\n     *\n     * @param m intent notifier Bundle\n     * @hide\n     *\n     ",
    "links" : [ "Intent#ACTION_SERVICE_STATE" ]
  }, {
    "name" : "public void setRilVoiceRadioTechnology(@RilRadioTechnology int rt)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setRilDataRadioTechnology(@RilRadioTechnology int rt)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUsingCarrierAggregation()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setIsUsingCarrierAggregation(boolean ca)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getNrFrequencyRange()",
    "returnType" : "int",
    "comment" : "\n     * Get the 5G NR frequency range the device is currently registered.\n     *\n     * @return the frequency range of 5G NR.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNrState()",
    "returnType" : "int",
    "comment" : "\n     * Get the NR 5G state of the mobile data network.\n     * @return the NR 5G state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNrFrequencyRange(@FrequencyRange int nrFrequencyRange)",
    "returnType" : "void",
    "comment" : "\n     * @param nrFrequencyRange the frequency range of 5G NR.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLteEarfcnRsrpBoost()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setLteEarfcnRsrpBoost(int LteEarfcnRsrpBoost)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setCssIndicator(int css)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setCdmaSystemAndNetworkId(int systemId, int networkId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getRilVoiceRadioTechnology()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getRilDataRadioTechnology()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getRadioTechnology()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @Deprecated to be removed Q3 2013 use {@link #getRilDataRadioTechnology} or\n     * {@link #getRilVoiceRadioTechnology}\n     ",
    "links" : [ "#getRilDataRadioTechnology", "#getRilVoiceRadioTechnology" ]
  }, {
    "name" : "public static int rilRadioTechnologyToNetworkType(@RilRadioTechnology int rat)",
    "returnType" : "int",
    "comment" : "\n     * Transform RIL radio technology {@link RilRadioTechnology} value to Network\n     * type {@link NetworkType}.\n     *\n     * @param rat The RIL radio technology {@link RilRadioTechnology}.\n     * @return The network type {@link NetworkType}.\n     *\n     * @hide\n     ",
    "links" : [ "RilRadioTechnology", "NetworkType", "RilRadioTechnology", "NetworkType" ]
  }, {
    "name" : "public static int rilRadioTechnologyToAccessNetworkType(@RilRadioTechnology int rt)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int networkTypeToRilRadioTechnology(int networkType)",
    "returnType" : "int",
    "comment" : "\n     * Transform network type {@link NetworkType} value to RIL radio technology\n     * {@link RilRadioTechnology}.\n     *\n     * @param networkType The network type {@link NetworkType}.\n     * @return The RIL radio technology {@link RilRadioTechnology}.\n     *\n     * @hide\n     ",
    "links" : [ "NetworkType", "RilRadioTechnology", "NetworkType", "RilRadioTechnology" ]
  }, {
    "name" : "public int getDataNetworkType()",
    "returnType" : "int",
    "comment" : "\n     * Get current data network type.\n     *\n     * Note that for IWLAN AP-assisted mode device, which is reporting both camped access networks\n     * (cellular RAT and IWLAN)at the same time, this API is simulating the old legacy mode device\n     * behavior,\n     *\n     * @return Current data network type\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVoiceNetworkType()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getCssIndicator()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getCdmaNetworkId()",
    "returnType" : "int",
    "comment" : "\n     * Get the CDMA NID (Network Identification Number), a number uniquely identifying a network\n     * within a wireless system. (Defined in 3GPP2 C.S0023 3.4.8)\n     * @return The CDMA NID or {@link #UNKNOWN_ID} if not available.\n     ",
    "links" : [ "#UNKNOWN_ID" ]
  }, {
    "name" : "public int getCdmaSystemId()",
    "returnType" : "int",
    "comment" : "\n     * Get the CDMA SID (System Identification Number), a number uniquely identifying a wireless\n     * system. (Defined in 3GPP2 C.S0023 3.4.8)\n     * @return The CDMA SID or {@link #UNKNOWN_ID} if not available.\n     ",
    "links" : [ "#UNKNOWN_ID" ]
  }, {
    "name" : "public static boolean isGsm(int radioTechnology)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isCdma(int radioTechnology)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isPsOnlyTech(int radioTechnology)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean bearerBitmapHasCdma(int networkTypeBitmask)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean bitmaskHasTech(int bearerBitmask, int radioTech)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getBitmaskForTech(int radioTech)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getBitmaskFromString(String bearerList)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int convertNetworkTypeBitmaskToBearerBitmask(int networkTypeBitmask)",
    "returnType" : "int",
    "comment" : "\n     * Convert network type bitmask to bearer bitmask.\n     *\n     * @param networkTypeBitmask The network type bitmask value\n     * @return The bearer bitmask value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int convertBearerBitmaskToNetworkTypeBitmask(int bearerBitmask)",
    "returnType" : "int",
    "comment" : "\n     * Convert bearer bitmask to network type bitmask.\n     *\n     * @param bearerBitmask The bearer bitmask value.\n     * @return The network type bitmask value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ServiceState mergeServiceStates(ServiceState baseSs, ServiceState voiceSs)",
    "returnType" : "ServiceState",
    "comment" : "\n     * Returns a merged ServiceState consisting of the base SS with voice settings from the\n     * voice SS. The voice SS is only used if it is IN_SERVICE (otherwise the base SS is returned).\n     * @hide\n     * ",
    "links" : [ ]
  }, {
    "name" : "public List<NetworkRegistrationInfo> getNetworkRegistrationInfoList()",
    "returnType" : "List<NetworkRegistrationInfo>",
    "comment" : "\n     * Get all of the available network registration info.\n     *\n     * @return List of {@link NetworkRegistrationInfo}\n     ",
    "links" : [ "NetworkRegistrationInfo" ]
  }, {
    "name" : "public List<NetworkRegistrationInfo> getNetworkRegistrationInfoListForTransportType(@TransportType int transportType)",
    "returnType" : "List<NetworkRegistrationInfo>",
    "comment" : "\n     * Get the network registration info list for the transport type.\n     *\n     * @param transportType The transport type\n     * @return List of {@link NetworkRegistrationInfo}\n     * @hide\n     ",
    "links" : [ "NetworkRegistrationInfo" ]
  }, {
    "name" : "public List<NetworkRegistrationInfo> getNetworkRegistrationInfoListForDomain(@Domain int domain)",
    "returnType" : "List<NetworkRegistrationInfo>",
    "comment" : "\n     * Get the network registration info list for the network domain.\n     *\n     * @param domain The network {@link NetworkRegistrationInfo.Domain domain}\n     * @return List of {@link NetworkRegistrationInfo}\n     * @hide\n     ",
    "links" : [ "NetworkRegistrationInfo.Domain", "NetworkRegistrationInfo" ]
  }, {
    "name" : "public NetworkRegistrationInfo getNetworkRegistrationInfo(@Domain int domain, @TransportType int transportType)",
    "returnType" : "NetworkRegistrationInfo",
    "comment" : "\n     * Get the network registration state for the transport type and network domain.\n     * If multiple domains are in the input bitmask, only the first one from\n     * networkRegistrationInfo.getDomain() will be returned.\n     *\n     * @param domain The network {@link NetworkRegistrationInfo.Domain domain}\n     * @param transportType The transport type\n     * @return The matching {@link NetworkRegistrationInfo}\n     * @hide\n     ",
    "links" : [ "NetworkRegistrationInfo.Domain", "NetworkRegistrationInfo" ]
  }, {
    "name" : "public void addNetworkRegistrationInfo(NetworkRegistrationInfo nri)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getBetterNRFrequencyRange(int range1, int range2)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ServiceState createLocationInfoSanitizedCopy(boolean removeCoarseLocation)",
    "returnType" : "ServiceState",
    "comment" : "\n     * Returns a copy of self with location-identifying information removed.\n     * Always clears the NetworkRegistrationInfo's CellIdentity fields, but if removeCoarseLocation\n     * is true, clears other info as well.\n     *\n     * @param removeCoarseLocation Whether to also remove coarse location information.\n     *                             if false, it only clears fine location information such as\n     *                             NetworkRegistrationInfo's CellIdentity fields; If true, it will\n     *                             also remove other location information such as operator's MCC\n     *                             and MNC.\n     * @return the copied ServiceState with location info sanitized.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperatorAlphaLongRaw(String operatorAlphaLong)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOperatorAlphaLongRaw()",
    "returnType" : "String",
    "comment" : "\n     * The current registered raw data network operator name in long alphanumeric format.\n     *\n     * The long format can be up to 16 characters long.\n     *\n     * @return long raw name of operator, null if unregistered or unknown\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOperatorAlphaShortRaw(String operatorAlphaShort)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOperatorAlphaShortRaw()",
    "returnType" : "String",
    "comment" : "\n     * The current registered raw data network operator name in short alphanumeric format.\n     *\n     * The short format can be up to 8 characters long.\n     *\n     * @return short raw name of operator, null if unregistered or unknown\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIwlanPreferred(boolean isIwlanPreferred)",
    "returnType" : "void",
    "comment" : "\n     * Set to {@code true} if any data network is preferred on IWLAN.\n     *\n     * @param isIwlanPreferred {@code true} if IWLAN is preferred.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIwlanPreferred()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if any data network is preferred on IWLAN.\n     *\n     * Note only when this value is true, {@link #getDataNetworkType()} will return\n     * {@link TelephonyManager#NETWORK_TYPE_IWLAN} when AP-assisted mode device camps on both\n     * cellular and IWLAN. This value does not affect legacy mode devices as the data network\n     * type is directly reported by the modem.\n     *\n     * @hide\n     ",
    "links" : [ "#getDataNetworkType", "TelephonyManager#NETWORK_TYPE_IWLAN" ]
  }, {
    "name" : "public boolean isSearching()",
    "returnType" : "boolean",
    "comment" : "\n     * This indicates whether the device is searching for service.\n     *\n     * This API reports the modem searching status for\n     * {@link AccessNetworkConstants#TRANSPORT_TYPE_WWAN} (cellular) service in either\n     * {@link NetworkRegistrationInfo#DOMAIN_CS} or {@link NetworkRegistrationInfo#DOMAIN_PS}.\n     * This API will not report searching status for\n     * {@link AccessNetworkConstants#TRANSPORT_TYPE_WLAN}.\n     *\n     * @return {@code true} whenever the modem is searching for service.\n     ",
    "links" : [ "AccessNetworkConstants#TRANSPORT_TYPE_WWAN", "NetworkRegistrationInfo#DOMAIN_CS", "NetworkRegistrationInfo#DOMAIN_PS", "AccessNetworkConstants#TRANSPORT_TYPE_WLAN" ]
  } ],
  "variableNames" : [ "LOG_TAG", "DBG", "VDBG", "STATE_IN_SERVICE", "STATE_OUT_OF_SERVICE", "STATE_EMERGENCY_ONLY", "STATE_POWER_OFF", "FREQUENCY_RANGE_UNKNOWN", "FREQUENCY_RANGE_LOW", "FREQUENCY_RANGE_MID", "FREQUENCY_RANGE_HIGH", "FREQUENCY_RANGE_MMWAVE", "FREQUENCY_RANGE_ORDER", "DUPLEX_MODE_UNKNOWN", "DUPLEX_MODE_FDD", "DUPLEX_MODE_TDD", "RIL_RADIO_TECHNOLOGY_UNKNOWN", "RIL_RADIO_TECHNOLOGY_GPRS", "RIL_RADIO_TECHNOLOGY_EDGE", "RIL_RADIO_TECHNOLOGY_UMTS", "RIL_RADIO_TECHNOLOGY_IS95A", "RIL_RADIO_TECHNOLOGY_IS95B", "RIL_RADIO_TECHNOLOGY_1xRTT", "RIL_RADIO_TECHNOLOGY_EVDO_0", "RIL_RADIO_TECHNOLOGY_EVDO_A", "RIL_RADIO_TECHNOLOGY_HSDPA", "RIL_RADIO_TECHNOLOGY_HSUPA", "RIL_RADIO_TECHNOLOGY_HSPA", "RIL_RADIO_TECHNOLOGY_EVDO_B", "RIL_RADIO_TECHNOLOGY_EHRPD", "RIL_RADIO_TECHNOLOGY_LTE", "RIL_RADIO_TECHNOLOGY_HSPAP", "RIL_RADIO_TECHNOLOGY_GSM", "RIL_RADIO_TECHNOLOGY_TD_SCDMA", "RIL_RADIO_TECHNOLOGY_IWLAN", "RIL_RADIO_TECHNOLOGY_LTE_CA", "RIL_RADIO_TECHNOLOGY_NR", "NEXT_RIL_RADIO_TECHNOLOGY", "RIL_RADIO_CDMA_TECHNOLOGY_BITMASK", "mVoiceRegState", "mDataRegState", "ROAMING_TYPE_NOT_ROAMING", "ROAMING_TYPE_UNKNOWN", "ROAMING_TYPE_DOMESTIC", "ROAMING_TYPE_INTERNATIONAL", "UNKNOWN_ID", "EXTRA_SERVICE_STATE", "mOperatorAlphaLong", "mOperatorAlphaShort", "mOperatorNumeric", "mIsManualNetworkSelection", "mIsEmergencyOnly", "mCssIndicator", "mNetworkId", "mSystemId", "mCdmaRoamingIndicator", "mCdmaDefaultRoamingIndicator", "mCdmaEriIconIndex", "mCdmaEriIconMode", "mNrFrequencyRange", "mChannelNumber", "mCellBandwidths", "mLteEarfcnRsrpBoost", "mNetworkRegistrationInfos", "mOperatorAlphaLongRaw", "mOperatorAlphaShortRaw", "mIsDataRoamingFromRegistration", "mIsIwlanPreferred", "CREATOR" ],
  "methodNames" : [ "public static final String getRoamingLogString(int roamingType)", "public static ServiceState newFromBundle(@NonNull Bundle m)", "protected void copyFrom(ServiceState s)", "public void writeToParcel(Parcel out, int flags)", "public int describeContents()", "public int getState()", "public int getVoiceRegState()", "public int getDataRegState()", "public int getDataRegistrationState()", "public int getDuplexMode()", "public int getChannelNumber()", "public int[] getCellBandwidths()", "public boolean getRoaming()", "public boolean getVoiceRoaming()", "public int getVoiceRoamingType()", "public boolean getDataRoaming()", "public void setDataRoamingFromRegistration(boolean dataRoaming)", "public boolean getDataRoamingFromRegistration()", "public int getDataRoamingType()", "public boolean isEmergencyOnly()", "public int getCdmaRoamingIndicator()", "public int getCdmaDefaultRoamingIndicator()", "public int getCdmaEriIconIndex()", "public int getCdmaEriIconMode()", "public String getOperatorAlphaLong()", "public String getVoiceOperatorAlphaLong()", "public String getOperatorAlphaShort()", "public String getVoiceOperatorAlphaShort()", "public String getDataOperatorAlphaShort()", "public String getOperatorAlpha()", "public String getOperatorNumeric()", "public String getVoiceOperatorNumeric()", "public String getDataOperatorNumeric()", "public boolean getIsManualSelection()", "public int hashCode()", "public boolean equals(Object o)", "public static String roamingTypeToString(@RoamingType int roamingType)", "public static String rilRadioTechnologyToString(int rt)", "public static String frequencyRangeToString(@FrequencyRange int range)", "public static String rilServiceStateToString(int serviceState)", "public String toString()", "private void init()", "public void setStateOutOfService()", "public void setStateOff()", "public void setState(int state)", "public void setVoiceRegState(int state)", "public void setDataRegState(int state)", "public void setCellBandwidths(int[] bandwidths)", "public void setChannelNumber(int channelNumber)", "public void setRoaming(boolean roaming)", "public void setVoiceRoaming(boolean roaming)", "public void setVoiceRoamingType(@RoamingType int type)", "public void setDataRoaming(boolean dataRoaming)", "public void setDataRoamingType(@RoamingType int type)", "public void setEmergencyOnly(boolean emergencyOnly)", "public void setCdmaRoamingIndicator(int roaming)", "public void setCdmaDefaultRoamingIndicator(int roaming)", "public void setCdmaEriIconIndex(int index)", "public void setCdmaEriIconMode(int mode)", "public void setOperatorName(String longName, String shortName, String numeric)", "public void setOperatorAlphaLong(@Nullable String longName)", "public void setIsManualSelection(boolean isManual)", "private static boolean equalsHandlesNulls(Object a, Object b)", "private void setFromNotifierBundle(Bundle m)", "public void fillInNotifierBundle(@NonNull Bundle m)", "public void setRilVoiceRadioTechnology(@RilRadioTechnology int rt)", "public void setRilDataRadioTechnology(@RilRadioTechnology int rt)", "public boolean isUsingCarrierAggregation()", "public void setIsUsingCarrierAggregation(boolean ca)", "public int getNrFrequencyRange()", "public int getNrState()", "public void setNrFrequencyRange(@FrequencyRange int nrFrequencyRange)", "public int getLteEarfcnRsrpBoost()", "public void setLteEarfcnRsrpBoost(int LteEarfcnRsrpBoost)", "public void setCssIndicator(int css)", "public void setCdmaSystemAndNetworkId(int systemId, int networkId)", "public int getRilVoiceRadioTechnology()", "public int getRilDataRadioTechnology()", "public int getRadioTechnology()", "public static int rilRadioTechnologyToNetworkType(@RilRadioTechnology int rat)", "public static int rilRadioTechnologyToAccessNetworkType(@RilRadioTechnology int rt)", "public static int networkTypeToRilRadioTechnology(int networkType)", "public int getDataNetworkType()", "public int getVoiceNetworkType()", "public int getCssIndicator()", "public int getCdmaNetworkId()", "public int getCdmaSystemId()", "public static boolean isGsm(int radioTechnology)", "public static boolean isCdma(int radioTechnology)", "public static boolean isPsOnlyTech(int radioTechnology)", "public static boolean bearerBitmapHasCdma(int networkTypeBitmask)", "public static boolean bitmaskHasTech(int bearerBitmask, int radioTech)", "public static int getBitmaskForTech(int radioTech)", "public static int getBitmaskFromString(String bearerList)", "public static int convertNetworkTypeBitmaskToBearerBitmask(int networkTypeBitmask)", "public static int convertBearerBitmaskToNetworkTypeBitmask(int bearerBitmask)", "public static ServiceState mergeServiceStates(ServiceState baseSs, ServiceState voiceSs)", "public List<NetworkRegistrationInfo> getNetworkRegistrationInfoList()", "public List<NetworkRegistrationInfo> getNetworkRegistrationInfoListForTransportType(@TransportType int transportType)", "public List<NetworkRegistrationInfo> getNetworkRegistrationInfoListForDomain(@Domain int domain)", "public NetworkRegistrationInfo getNetworkRegistrationInfo(@Domain int domain, @TransportType int transportType)", "public void addNetworkRegistrationInfo(NetworkRegistrationInfo nri)", "public static final int getBetterNRFrequencyRange(int range1, int range2)", "public ServiceState createLocationInfoSanitizedCopy(boolean removeCoarseLocation)", "public void setOperatorAlphaLongRaw(String operatorAlphaLong)", "public String getOperatorAlphaLongRaw()", "public void setOperatorAlphaShortRaw(String operatorAlphaShort)", "public String getOperatorAlphaShortRaw()", "public void setIwlanPreferred(boolean isIwlanPreferred)", "public boolean isIwlanPreferred()", "public boolean isSearching()" ]
}