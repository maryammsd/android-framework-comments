{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/StringBuilder.java",
  "packageName" : "java.lang",
  "className" : "StringBuilder",
  "comment" : "\n * A mutable sequence of characters.  This class provides an API compatible\n * with {@code StringBuffer}, but with no guarantee of synchronization.\n * This class is designed for use as a drop-in replacement for\n * {@code StringBuffer} in places where the string buffer was being\n * used by a single thread (as is generally the case).   Where possible,\n * it is recommended that this class be used in preference to\n * {@code StringBuffer} as it will be faster under most implementations.\n *\n * <p>The principal operations on a {@code StringBuilder} are the\n * {@code append} and {@code insert} methods, which are\n * overloaded so as to accept data of any type. Each effectively\n * converts a given datum to a string and then appends or inserts the\n * characters of that string to the string builder. The\n * {@code append} method always adds these characters at the end\n * of the builder; the {@code insert} method adds the characters at\n * a specified point.\n * <p>\n * For example, if {@code z} refers to a string builder object\n * whose current contents are \"{@code start}\", then\n * the method call {@code z.append(\"le\")} would cause the string\n * builder to contain \"{@code startle}\", whereas\n * {@code z.insert(4, \"le\")} would alter the string builder to\n * contain \"{@code starlet}\".\n * <p>\n * In general, if sb refers to an instance of a {@code StringBuilder},\n * then {@code sb.append(x)} has the same effect as\n * {@code sb.insert(sb.length(), x)}.\n * <p>\n * Every string builder has a capacity. As long as the length of the\n * character sequence contained in the string builder does not exceed\n * the capacity, it is not necessary to allocate a new internal\n * buffer. If the internal buffer overflows, it is automatically made larger.\n *\n * <p>Instances of {@code StringBuilder} are not safe for\n * use by multiple threads. If such synchronization is required then it is\n * recommended that {@link java.lang.StringBuffer} be used.\n *\n * <p>Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * @apiNote\n * {@code StringBuilder} implements {@code Comparable} but does not override\n * {@link Object#equals equals}. Thus, the natural ordering of {@code StringBuilder}\n * is inconsistent with equals. Care should be exercised if {@code StringBuilder}\n * objects are used as keys in a {@code SortedMap} or elements in a {@code SortedSet}.\n * See {@link Comparable}, {@link java.util.SortedMap SortedMap}, or\n * {@link java.util.SortedSet SortedSet} for more information.\n *\n * @author      Michael McCloskey\n * @see         java.lang.StringBuffer\n * @see         java.lang.String\n * @since       1.5\n ",
  "links" : [ "java.lang.Object#equals", "java.util.SortedSet", "java.lang.StringBuffer", "java.lang.Comparable", "java.lang.NullPointerException", "java.util.SortedMap" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID for interoperability ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int compareTo(StringBuilder another)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code StringBuilder} instances lexicographically. This method\n     * follows the same rules for lexicographical comparison as defined in the\n     * {@linkplain java.lang.CharSequence#compare(java.lang.CharSequence,\n     * java.lang.CharSequence)  CharSequence.compare(this, another)} method.\n     *\n     * <p>\n     * For finer-grained, locale-sensitive String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param another the {@code StringBuilder} to be compared with\n     *\n     * @return  the value {@code 0} if this {@code StringBuilder} contains the same\n     * character sequence as that of the argument {@code StringBuilder}; a negative integer\n     * if this {@code StringBuilder} is lexicographically less than the\n     * {@code StringBuilder} argument; or a positive integer if this {@code StringBuilder}\n     * is lexicographically greater than the {@code StringBuilder} argument.\n     *\n     * @since 11\n     ",
    "links" : [ "java.text.Collator" ]
  }, {
    "name" : "public StringBuilder append(Object obj)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(String str)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(StringBuffer sb)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Appends the specified {@code StringBuffer} to this sequence.\n     * <p>\n     * The characters of the {@code StringBuffer} argument are appended,\n     * in order, to this sequence, increasing the\n     * length of this sequence by the length of the argument.\n     * If {@code sb} is {@code null}, then the four characters\n     * {@code \"null\"} are appended to this sequence.\n     * <p>\n     * Let <i>n</i> be the length of this character sequence just prior to\n     * execution of the {@code append} method. Then the character at index\n     * <i>k</i> in the new character sequence is equal to the character at\n     * index <i>k</i> in the old character sequence, if <i>k</i> is less than\n     * <i>n</i>; otherwise, it is equal to the character at index <i>k-n</i>\n     * in the argument {@code sb}.\n     *\n     * @param   sb   the {@code StringBuffer} to append.\n     * @return  a reference to this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(CharSequence s)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(CharSequence s, int start, int end)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws     IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(char[] str)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(char[] str, int offset, int len)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(boolean b)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(char c)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(int i)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(long lng)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(float f)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(double d)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder appendCodePoint(int codePoint)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder delete(int start, int end)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder deleteCharAt(int index)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder replace(int start, int end, String str)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int index, char[] str, int offset, int len)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int offset, Object obj)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int offset, String str)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int offset, char[] str)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int dstOffset, CharSequence s)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int dstOffset, CharSequence s, int start, int end)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int offset, boolean b)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int offset, char c)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int offset, int i)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int offset, long l)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int offset, float f)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder insert(int offset, double d)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(String str)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(String str, int fromIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int lastIndexOf(String str)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int lastIndexOf(String str, int fromIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder reverse()",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Save the state of the {@code StringBuilder} instance to a stream\n     * (that is, serialize it).\n     *\n     * @serialData the number of characters currently stored in the string\n     *             builder ({@code int}), followed by the characters in the\n     *             string builder ({@code char[]}).   The length of the\n     *             {@code char} array may be greater than the number of\n     *             characters currently stored in the string builder, in which\n     *             case extra characters are ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * readObject is called to restore the state of the StringBuffer from\n     * a stream.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int compareTo(StringBuilder another)", "public StringBuilder append(Object obj)", "public StringBuilder append(String str)", "public StringBuilder append(StringBuffer sb)", "public StringBuilder append(CharSequence s)", "public StringBuilder append(CharSequence s, int start, int end)", "public StringBuilder append(char[] str)", "public StringBuilder append(char[] str, int offset, int len)", "public StringBuilder append(boolean b)", "public StringBuilder append(char c)", "public StringBuilder append(int i)", "public StringBuilder append(long lng)", "public StringBuilder append(float f)", "public StringBuilder append(double d)", "public StringBuilder appendCodePoint(int codePoint)", "public StringBuilder delete(int start, int end)", "public StringBuilder deleteCharAt(int index)", "public StringBuilder replace(int start, int end, String str)", "public StringBuilder insert(int index, char[] str, int offset, int len)", "public StringBuilder insert(int offset, Object obj)", "public StringBuilder insert(int offset, String str)", "public StringBuilder insert(int offset, char[] str)", "public StringBuilder insert(int dstOffset, CharSequence s)", "public StringBuilder insert(int dstOffset, CharSequence s, int start, int end)", "public StringBuilder insert(int offset, boolean b)", "public StringBuilder insert(int offset, char c)", "public StringBuilder insert(int offset, int i)", "public StringBuilder insert(int offset, long l)", "public StringBuilder insert(int offset, float f)", "public StringBuilder insert(int offset, double d)", "public int indexOf(String str)", "public int indexOf(String str, int fromIndex)", "public int lastIndexOf(String str)", "public int lastIndexOf(String str, int fromIndex)", "public StringBuilder reverse()", "public String toString()", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID" ]
}