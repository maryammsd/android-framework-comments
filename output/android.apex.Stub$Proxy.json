{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/apex/IApexService.java",
  "packageName" : "android.apex",
  "className" : "Proxy",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mRemote",
    "type" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String getInterfaceDescriptor()",
    "returnType" : "java.lang.String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void submitStagedSession(android.apex.ApexSessionParams params, android.apex.ApexInfoList packages) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void markStagedSessionReady(int session_id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void markStagedSessionSuccessful(int session_id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.apex.ApexSessionInfo[] getSessions() throws android.os.RemoteException",
    "returnType" : "android.apex.ApexSessionInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.apex.ApexSessionInfo getStagedSessionInfo(int session_id) throws android.os.RemoteException",
    "returnType" : "android.apex.ApexSessionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.apex.ApexInfo[] getStagedApexInfos(android.apex.ApexSessionParams params) throws android.os.RemoteException",
    "returnType" : "android.apex.ApexInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.apex.ApexInfo[] getActivePackages() throws android.os.RemoteException",
    "returnType" : "android.apex.ApexInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.apex.ApexInfo[] getAllPackages() throws android.os.RemoteException",
    "returnType" : "android.apex.ApexInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void abortStagedSession(int session_id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void revertActiveSessions() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void snapshotCeData(int user_id, int rollback_id, java.lang.String apex_name) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Copies the CE apex data directory for the given user to the backup\n       * location.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void restoreCeData(int user_id, int rollback_id, java.lang.String apex_name) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Restores the snapshot of the CE apex data directory for the given user and\n       * apex. Note the snapshot will be deleted after restoration succeeded.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void destroyDeSnapshots(int rollback_id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Deletes device-encrypted snapshots for the given rollback id. ",
    "links" : [ ]
  }, {
    "name" : "public void destroyCeSnapshots(int user_id, int rollback_id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Deletes credential-encrypted snapshots for the given user, for the given rollback id. ",
    "links" : [ ]
  }, {
    "name" : "public void destroyCeSnapshotsNotSpecified(int user_id, int[] retain_rollback_ids) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Deletes all credential-encrypted snapshots for the given user, except for\n       * those listed in retain_rollback_ids.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void unstagePackages(java.util.List<java.lang.String> active_package_paths) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.apex.ApexInfo getActivePackage(java.lang.String package_name) throws android.os.RemoteException",
    "returnType" : "android.apex.ApexInfo",
    "comment" : "\n       * Returns the active package corresponding to |package_name| and null\n       * if none exists.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void stagePackages(java.util.List<java.lang.String> package_tmp_paths) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Not meant for use outside of testing. The call will not be\n       * functional on user builds.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void resumeRevertIfNeeded() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Not meant for use outside of testing. The call will not be\n       * functional on user builds.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void remountPackages() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Forces apexd to remount all active packages.\n       * \n       * This call is mostly useful for speeding up development of APEXes.\n       * Instead of going through a full APEX installation that requires a reboot,\n       * developers can incorporate this method in much faster `adb sync` based\n       * workflow:\n       * \n       * 1. adb shell stop\n       * 2. adb sync\n       * 3. adb shell cmd -w apexservice remountPackages\n       * 4. adb shell start\n       * \n       * Note, that for an APEX package will be successfully remounted only if\n       * there are no alive processes holding a reference to it.\n       * \n       * Not meant for use outside of testing. This call will not be functional\n       * on user builds. Only root is allowed to call this method.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void recollectPreinstalledData(java.util.List<java.lang.String> paths) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Forces apexd to recollect pre-installed data from the given |paths|.\n       * \n       * Not meant for use outside of testing. This call will not be functional\n       * on user builds. Only root is allowed to call this method.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void recollectDataApex(java.lang.String path, java.lang.String decompression_dir) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Forces apexd to recollect data apex from the given |path|.\n       * \n       * Not meant for use outside of testing. This call will not be functional\n       * on user builds. Only root is allowed to call this method.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void markBootCompleted() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Informs apexd that the boot has completed. ",
    "links" : [ ]
  }, {
    "name" : "public long calculateSizeForCompressedApex(android.apex.CompressedApexInfoList compressed_apex_info_list) throws android.os.RemoteException",
    "returnType" : "long",
    "comment" : "\n       * Assuming the provided compressed APEX will be installed on next boot,\n       * calculate how much space will be required for decompression\n       ",
    "links" : [ ]
  }, {
    "name" : "public void reserveSpaceForCompressedApex(android.apex.CompressedApexInfoList compressed_apex_info_list) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Reserve space on /data partition for compressed APEX decompression. Returns error if\n       * reservation fails. If empty list is passed, then reserved space is deallocated.\n       ",
    "links" : [ ]
  }, {
    "name" : "public android.apex.ApexInfo installAndActivatePackage(java.lang.String packagePath, boolean force) throws android.os.RemoteException",
    "returnType" : "android.apex.ApexInfo",
    "comment" : " Performs a non-staged install of the given APEX. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public android.os.IBinder asBinder()", "public java.lang.String getInterfaceDescriptor()", "public void submitStagedSession(android.apex.ApexSessionParams params, android.apex.ApexInfoList packages) throws android.os.RemoteException", "public void markStagedSessionReady(int session_id) throws android.os.RemoteException", "public void markStagedSessionSuccessful(int session_id) throws android.os.RemoteException", "public android.apex.ApexSessionInfo[] getSessions() throws android.os.RemoteException", "public android.apex.ApexSessionInfo getStagedSessionInfo(int session_id) throws android.os.RemoteException", "public android.apex.ApexInfo[] getStagedApexInfos(android.apex.ApexSessionParams params) throws android.os.RemoteException", "public android.apex.ApexInfo[] getActivePackages() throws android.os.RemoteException", "public android.apex.ApexInfo[] getAllPackages() throws android.os.RemoteException", "public void abortStagedSession(int session_id) throws android.os.RemoteException", "public void revertActiveSessions() throws android.os.RemoteException", "public void snapshotCeData(int user_id, int rollback_id, java.lang.String apex_name) throws android.os.RemoteException", "public void restoreCeData(int user_id, int rollback_id, java.lang.String apex_name) throws android.os.RemoteException", "public void destroyDeSnapshots(int rollback_id) throws android.os.RemoteException", "public void destroyCeSnapshots(int user_id, int rollback_id) throws android.os.RemoteException", "public void destroyCeSnapshotsNotSpecified(int user_id, int[] retain_rollback_ids) throws android.os.RemoteException", "public void unstagePackages(java.util.List<java.lang.String> active_package_paths) throws android.os.RemoteException", "public android.apex.ApexInfo getActivePackage(java.lang.String package_name) throws android.os.RemoteException", "public void stagePackages(java.util.List<java.lang.String> package_tmp_paths) throws android.os.RemoteException", "public void resumeRevertIfNeeded() throws android.os.RemoteException", "public void remountPackages() throws android.os.RemoteException", "public void recollectPreinstalledData(java.util.List<java.lang.String> paths) throws android.os.RemoteException", "public void recollectDataApex(java.lang.String path, java.lang.String decompression_dir) throws android.os.RemoteException", "public void markBootCompleted() throws android.os.RemoteException", "public long calculateSizeForCompressedApex(android.apex.CompressedApexInfoList compressed_apex_info_list) throws android.os.RemoteException", "public void reserveSpaceForCompressedApex(android.apex.CompressedApexInfoList compressed_apex_info_list) throws android.os.RemoteException", "public android.apex.ApexInfo installAndActivatePackage(java.lang.String packagePath, boolean force) throws android.os.RemoteException" ],
  "variableNames" : [ "mRemote" ]
}