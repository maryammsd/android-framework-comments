{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/DecimalQuantity.java",
  "packageName" : "android.icu.impl.number",
  "className" : "DecimalQuantity",
  "comment" : "\n * An interface representing a number to be processed by the decimal formatting pipeline. Includes\n * methods for rounding, plural rules, and decimal digit extraction.\n *\n * <p>\n * By design, this is NOT IMMUTABLE and NOT THREAD SAFE. It is intended to be an intermediate object\n * holding state during a pass through the decimal formatting pipeline.\n *\n * <p>\n * Implementations of this interface are free to use any internal storage mechanism.\n *\n * <p>\n * TODO: Should I change this to an abstract class so that logic for min/max digits doesn't need to be\n * copied to every implementation?\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void setMinInteger(int minInt)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum integer digits that this {@link DecimalQuantity} should generate.\n     * This method does not perform rounding.\n     *\n     * @param minInt\n     *            The minimum number of integer digits.\n     ",
    "links" : [ "android.icu.impl.number.DecimalQuantity" ]
  }, {
    "name" : "public void setMinFraction(int minFrac)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum fraction digits that this {@link DecimalQuantity} should generate.\n     * This method does not perform rounding.\n     *\n     * @param minFrac\n     *            The minimum number of fraction digits.\n     ",
    "links" : [ "android.icu.impl.number.DecimalQuantity" ]
  }, {
    "name" : "public void applyMaxInteger(int maxInt)",
    "returnType" : "void",
    "comment" : "\n     * Truncates digits from the upper magnitude of the number in order to satisfy the\n     * specified maximum number of integer digits.\n     *\n     * @param maxInt\n     *            The maximum number of integer digits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void roundToIncrement(BigDecimal roundingInterval, MathContext mathContext)",
    "returnType" : "void",
    "comment" : "\n     * Rounds the number to a specified interval, such as 0.05.\n     *\n     * <p>\n     * If rounding to a power of ten, use the more efficient {@link #roundToMagnitude} instead.\n     *\n     * @param roundingInterval\n     *            The increment to which to round.\n     * @param mathContext\n     *            The {@link MathContext} to use if rounding is necessary. Undefined behavior if null.\n     ",
    "links" : [ "#roundToMagnitude", "java.math.MathContext" ]
  }, {
    "name" : "public void roundToNickel(int magnitude, MathContext mathContext)",
    "returnType" : "void",
    "comment" : "\n     * Rounds the number to the nearest multiple of 5 at the specified magnitude.\n     * For example, when magnitude == -2, this performs rounding to the nearest 0.05.\n     *\n     * @param magnitude\n     *            The magnitude at which the digit should become either 0 or 5.\n     * @param mathContext\n     *            Rounding strategy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void roundToMagnitude(int roundingMagnitude, MathContext mathContext)",
    "returnType" : "void",
    "comment" : "\n     * Rounds the number to a specified magnitude (power of ten).\n     *\n     * @param roundingMagnitude\n     *            The power of ten to which to round. For example, a value of -2 will round to 2 decimal\n     *            places.\n     * @param mathContext\n     *            The {@link MathContext} to use if rounding is necessary. Undefined behavior if null.\n     ",
    "links" : [ "java.math.MathContext" ]
  }, {
    "name" : "public void roundToInfinity()",
    "returnType" : "void",
    "comment" : "\n     * Rounds the number to an infinite number of decimal points. This has no effect except for forcing\n     * the double in {@link DecimalQuantity_AbstractBCD} to adopt its exact representation.\n     ",
    "links" : [ "android.icu.impl.number.DecimalQuantity_AbstractBCD" ]
  }, {
    "name" : "public void multiplyBy(BigDecimal multiplicand)",
    "returnType" : "void",
    "comment" : "\n     * Multiply the internal value.\n     *\n     * @param multiplicand\n     *            The value by which to multiply.\n     ",
    "links" : [ ]
  }, {
    "name" : " void negate()",
    "returnType" : "void",
    "comment" : " Flips the sign from positive to negative and back. ",
    "links" : [ ]
  }, {
    "name" : "public void adjustMagnitude(int delta)",
    "returnType" : "void",
    "comment" : "\n     * Scales the number by a power of ten. For example, if the value is currently \"1234.56\", calling\n     * this method with delta=-3 will change the value to \"1.23456\".\n     *\n     * @param delta\n     *            The number of magnitudes of ten to change by.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMagnitude() throws ArithmeticException",
    "returnType" : "int",
    "comment" : "\n     * @return The power of ten corresponding to the most significant nonzero digit.\n     * @throws ArithmeticException\n     *             If the value represented is zero.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getExponent()",
    "returnType" : "int",
    "comment" : "\n     * @return The value of the (suppressed) exponent after the number has been\n     * put into a notation with exponents (ex: compact, scientific).  Ex: given\n     * the number 1000 as \"1K\" / \"1E3\", the return value will be 3 (positive).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void adjustExponent(int delta)",
    "returnType" : "void",
    "comment" : "\n     * Adjusts the value for the (suppressed) exponent stored when using\n     * notation with exponents (ex: compact, scientific).\n     *\n     * <p>Adjusting the exponent is decoupled from {@link #adjustMagnitude} in\n     * order to allow flexibility for {@link StandardPlural} to be selected in\n     * formatting (ex: for compact notation) either with or without the exponent\n     * applied in the value of the number.\n     * @param delta\n     *             The value to adjust the exponent by.\n     ",
    "links" : [ "android.icu.impl.StandardPlural", "#adjustMagnitude" ]
  }, {
    "name" : "public void resetExponent()",
    "returnType" : "void",
    "comment" : "\n     * Resets the DecimalQuantity to the value before adjustMagnitude and adjustExponent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isZeroish()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the value represented by this {@link DecimalQuantity} is\n     * zero, infinity, or NaN.\n     ",
    "links" : [ "android.icu.impl.number.DecimalQuantity" ]
  }, {
    "name" : "public boolean isNegative()",
    "returnType" : "boolean",
    "comment" : " @return Whether the value represented by this {@link DecimalQuantity} is less than zero. ",
    "links" : [ "android.icu.impl.number.DecimalQuantity" ]
  }, {
    "name" : "public Signum signum()",
    "returnType" : "Signum",
    "comment" : " @return The appropriate value from the Signum enum. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInfinite()",
    "returnType" : "boolean",
    "comment" : " @return Whether the value represented by this {@link DecimalQuantity} is infinite. ",
    "links" : [ "android.icu.impl.number.DecimalQuantity" ]
  }, {
    "name" : "public boolean isNaN()",
    "returnType" : "boolean",
    "comment" : " @return Whether the value represented by this {@link DecimalQuantity} is not a number. ",
    "links" : [ "android.icu.impl.number.DecimalQuantity" ]
  }, {
    "name" : "public double toDouble()",
    "returnType" : "double",
    "comment" : " @return The value contained in this {@link DecimalQuantity} approximated as a double. ",
    "links" : [ "android.icu.impl.number.DecimalQuantity" ]
  }, {
    "name" : "public BigDecimal toBigDecimal()",
    "returnType" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long toLong(boolean truncateIfOverflow)",
    "returnType" : "long",
    "comment" : "\n     * Returns a long approximating the decimal quantity. A long can only represent the\n     * integral part of the number.  Note: this method incorporates the value of\n     * {@code getExponent} (for cases such as compact notation) to return the proper long\n     * value represented by the result.\n     *\n     * @param truncateIfOverflow if false and the number does NOT fit, fails with an error.\n     *        See comment about call site guards in DecimalQuantity_AbstractBCD.java\n     * @return A 64-bit integer representation of the internal number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setToBigDecimal(BigDecimal input)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int maxRepresentableDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StandardPlural getStandardPlural(PluralRules rules)",
    "returnType" : "StandardPlural",
    "comment" : "\n     * Computes the plural form for this number based on the specified set of rules.\n     *\n     * @param rules\n     *            A {@link PluralRules} object representing the set of rules.\n     * @return The {@link StandardPlural} according to the PluralRules. If the plural form is not in the\n     *         set of standard plurals, {@link StandardPlural#OTHER} is returned instead.\n     ",
    "links" : [ "android.icu.impl.StandardPlural", "android.icu.impl.StandardPlural#OTHER", "android.icu.text.PluralRules" ]
  }, {
    "name" : "public byte getDigit(int magnitude)",
    "returnType" : "byte",
    "comment" : "\n     * Gets the digit at the specified magnitude. For example, if the represented number is 12.3,\n     * getDigit(-1) returns 3, since 3 is the digit corresponding to 10^-1.\n     *\n     * @param magnitude\n     *            The magnitude of the digit.\n     * @return The digit at the specified magnitude.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUpperDisplayMagnitude()",
    "returnType" : "int",
    "comment" : "\n     * Gets the largest power of ten that needs to be displayed. The value returned by this function will\n     * be bounded between minInt and maxInt.\n     *\n     * @return The highest-magnitude digit to be displayed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLowerDisplayMagnitude()",
    "returnType" : "int",
    "comment" : "\n     * Gets the smallest power of ten that needs to be displayed. The value returned by this function\n     * will be bounded between -minFrac and -maxFrac.\n     *\n     * @return The lowest-magnitude digit to be displayed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toPlainString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the string in \"plain\" format (no exponential notation) using ASCII digits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toExponentString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the string using ASCII digits and using exponential notation for non-zero\n     * exponents, following the UTS 35 specification for plural rule samples.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalQuantity createCopy()",
    "returnType" : "DecimalQuantity",
    "comment" : "\n     * Like clone, but without the restrictions of the Cloneable interface clone.\n     *\n     * @return A copy of this instance which can be mutated without affecting this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(DecimalQuantity other)",
    "returnType" : "void",
    "comment" : "\n     * Sets this instance to be equal to another instance.\n     *\n     * @param other\n     *            The instance to copy from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getPositionFingerprint()",
    "returnType" : "long",
    "comment" : " This method is for internal testing only. ",
    "links" : [ ]
  }, {
    "name" : "public void populateUFieldPosition(FieldPosition fp)",
    "returnType" : "void",
    "comment" : "\n     * If the given {@link FieldPosition} is a {@link UFieldPosition}, populates it with the fraction\n     * length and fraction long value. If the argument is not a {@link UFieldPosition}, nothing happens.\n     *\n     * @param fp\n     *            The {@link UFieldPosition} to populate.\n     ",
    "links" : [ "java.text.FieldPosition", "android.icu.text.UFieldPosition" ]
  } ],
  "methodNames" : [ "public void setMinInteger(int minInt)", "public void setMinFraction(int minFrac)", "public void applyMaxInteger(int maxInt)", "public void roundToIncrement(BigDecimal roundingInterval, MathContext mathContext)", "public void roundToNickel(int magnitude, MathContext mathContext)", "public void roundToMagnitude(int roundingMagnitude, MathContext mathContext)", "public void roundToInfinity()", "public void multiplyBy(BigDecimal multiplicand)", " void negate()", "public void adjustMagnitude(int delta)", "public int getMagnitude() throws ArithmeticException", "public int getExponent()", "public void adjustExponent(int delta)", "public void resetExponent()", "public boolean isZeroish()", "public boolean isNegative()", "public Signum signum()", "public boolean isInfinite()", "public boolean isNaN()", "public double toDouble()", "public BigDecimal toBigDecimal()", "public long toLong(boolean truncateIfOverflow)", "public void setToBigDecimal(BigDecimal input)", "public int maxRepresentableDigits()", "public StandardPlural getStandardPlural(PluralRules rules)", "public byte getDigit(int magnitude)", "public int getUpperDisplayMagnitude()", "public int getLowerDisplayMagnitude()", "public String toPlainString()", "public String toExponentString()", "public DecimalQuantity createCopy()", "public void copyFrom(DecimalQuantity other)", "public long getPositionFingerprint()", "public void populateUFieldPosition(FieldPosition fp)" ],
  "variableNames" : [ ]
}