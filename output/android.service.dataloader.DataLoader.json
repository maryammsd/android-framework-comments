{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/dataloader/DataLoaderService.java",
  "packageName" : "android.service.dataloader",
  "className" : "DataLoader",
  "comment" : "\n     * DataLoader interface. Each instance corresponds to a single installation session.\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean onCreate(@NonNull DataLoaderParams dataLoaderParams, @NonNull FileSystemConnector connector)",
    "returnType" : "boolean",
    "comment" : "\n         * A virtual constructor.\n         *\n         * @param dataLoaderParams parameters set in the installation session\n         * {@link android.content.pm.PackageInstaller.SessionParams#setDataLoaderParams}\n         * @param connector Wrapper providing access to the installation image.\n         * @return true if initialization of a DataLoader was successful. False will notify the\n         * Installer {@link android.content.pm.PackageInstaller#STATUS_PENDING_STREAMING} and\n         * interrupt the session commit. The Installer is supposed to make sure DataLoader can\n         * proceed and then commit the session\n         * {@link android.content.pm.PackageInstaller.Session#commit}.\n         ",
    "links" : [ "android.content.pm.PackageInstaller.SessionParams#setDataLoaderParams", "android.content.pm.PackageInstaller#STATUS_PENDING_STREAMING", "android.content.pm.PackageInstaller.Session#commit" ]
  }, {
    "name" : " boolean onPrepareImage(@NonNull Collection<InstallationFile> addedFiles, @NonNull Collection<String> removedFiles)",
    "returnType" : "boolean",
    "comment" : "\n         * Prepare installation image. After this method succeeds installer will validate the files\n         * and continue installation.\n         * The method should block until the files are prepared for installation.\n         * This can take up to session lifetime (~day). If the session lifetime is exceeded then\n         * any attempts to write new data will fail.\n         *\n         * Example implementation:\n         * <code>\n         *     String localPath = \"/data/local/tmp/base.apk\";\n         *     session.addFile(LOCATION_DATA_APP, \"base\", 123456, localPath.getBytes(UTF_8), null);\n         *     ...\n         *     // onPrepareImage\n         *     for (InstallationFile file : addedFiles) {\n         *         String localPath = new String(file.getMetadata(), UTF_8);\n         *         File source = new File(localPath);\n         *         ParcelFileDescriptor fd = ParcelFileDescriptor.open(source, MODE_READ_ONLY);\n         *         try {\n         *             mConnector.writeData(file.getName(), 0, fd.getStatSize(), fd);\n         *         } finally {\n         *             IoUtils.closeQuietly(fd);\n         *         }\n         *     }\n         * </code>\n         * It is recommended to stream data into installation session directly from source, e.g.\n         * cloud data storage, to save local disk space.\n         *\n         * @param addedFiles   list of files created in this installation session\n         * {@link android.content.pm.PackageInstaller.Session#addFile}\n         * @param removedFiles list of files removed in this installation session\n         * {@link android.content.pm.PackageInstaller.Session#removeFile}\n         * @return false if unable to create and populate all addedFiles. Installation will fail.\n         ",
    "links" : [ "android.content.pm.PackageInstaller.Session#addFile", "android.content.pm.PackageInstaller.Session#removeFile" ]
  } ],
  "methodNames" : [ " boolean onCreate(@NonNull DataLoaderParams dataLoaderParams, @NonNull FileSystemConnector connector)", " boolean onPrepareImage(@NonNull Collection<InstallationFile> addedFiles, @NonNull Collection<String> removedFiles)" ],
  "variableNames" : [ ]
}