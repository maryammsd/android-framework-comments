{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/DownloadManager.java",
  "packageName" : "android.app",
  "className" : "Request",
  "comment" : "\n     * This class contains all the information necessary to request a new download. The URI is the\n     * only required parameter.\n     *\n     * Note that the default download destination is a shared volume where the system might delete\n     * your file if it needs to reclaim space for system use. If this is a problem, use a location\n     * on external storage (see {@link #setDestinationUri(Uri)}.\n     ",
  "variables" : [ {
    "name" : "NETWORK_MOBILE",
    "type" : "int",
    "comment" : "\n         * Bit flag for {@link #setAllowedNetworkTypes} corresponding to\n         * {@link ConnectivityManager#TYPE_MOBILE}.\n         ",
    "links" : [ "#setAllowedNetworkTypes", "android.net.ConnectivityManager#TYPE_MOBILE" ]
  }, {
    "name" : "NETWORK_WIFI",
    "type" : "int",
    "comment" : "\n         * Bit flag for {@link #setAllowedNetworkTypes} corresponding to\n         * {@link ConnectivityManager#TYPE_WIFI}.\n         ",
    "links" : [ "#setAllowedNetworkTypes", "android.net.ConnectivityManager#TYPE_WIFI" ]
  }, {
    "name" : "NETWORK_BLUETOOTH",
    "type" : "int",
    "comment" : "\n         * Bit flag for {@link #setAllowedNetworkTypes} corresponding to\n         * {@link ConnectivityManager#TYPE_BLUETOOTH}.\n         * @hide\n         ",
    "links" : [ "#setAllowedNetworkTypes", "android.net.ConnectivityManager#TYPE_BLUETOOTH" ]
  }, {
    "name" : "mUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestinationUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestHeaders",
    "type" : "List<Pair<String, String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMimeType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedNetworkTypes",
    "type" : "int",
    "comment" : " default to all network types allowed",
    "links" : [ ]
  }, {
    "name" : "mRoamingAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMeteredAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsVisibleInDownloadsUi",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScannable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCANNABLE_VALUE_YES",
    "type" : "int",
    "comment" : " if a file is designated as a MediaScanner scannable file, the following value is\n         * stored in the database column {@link Downloads.Impl#COLUMN_MEDIA_SCANNED}.\n         ",
    "links" : [ "Downloads.Impl#COLUMN_MEDIA_SCANNED" ]
  }, {
    "name" : "SCANNABLE_VALUE_NO",
    "type" : "int",
    "comment" : " if a file is designated as a file that should not be scanned by MediaScanner,\n         * the following value is stored in the database column\n         * {@link Downloads.Impl#COLUMN_MEDIA_SCANNED}.\n         ",
    "links" : [ "Downloads.Impl#COLUMN_MEDIA_SCANNED" ]
  }, {
    "name" : "VISIBILITY_VISIBLE",
    "type" : "int",
    "comment" : "\n         * This download is visible but only shows in the notifications\n         * while it's in progress.\n         ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_VISIBLE_NOTIFY_COMPLETED",
    "type" : "int",
    "comment" : "\n         * This download is visible and shows in the notifications while\n         * in progress and after completion.\n         ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_HIDDEN",
    "type" : "int",
    "comment" : "\n         * This download doesn't show in the UI or in the notifications.\n         ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION",
    "type" : "int",
    "comment" : "\n         * This download shows in the notifications after completion ONLY.\n         * It is usuable only with\n         * {@link DownloadManager#addCompletedDownload(String, String,\n         * boolean, String, String, long, boolean)}.\n         ",
    "links" : [ "android.app.DownloadManager#addCompletedDownload(String" ]
  }, {
    "name" : "mNotificationVisibility",
    "type" : "int",
    "comment" : " can take any of the following values: {@link #VISIBILITY_HIDDEN}\n         * {@link #VISIBILITY_VISIBLE_NOTIFY_COMPLETED}, {@link #VISIBILITY_VISIBLE},\n         * {@link #VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION}\n         ",
    "links" : [ "#VISIBILITY_VISIBLE", "#VISIBILITY_HIDDEN", "#VISIBILITY_VISIBLE_NOTIFY_COMPLETED", "#VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION" ]
  } ],
  "methods" : [ {
    "name" : "public Request setDestinationUri(Uri uri)",
    "returnType" : "Request",
    "comment" : "\n         * Set the local destination for the downloaded file. Must be a file URI to a path on\n         * external storage, and the calling application must have the WRITE_EXTERNAL_STORAGE\n         * permission.\n         * <p>\n         * The downloaded file is not scanned by MediaScanner.\n         * But it can be made scannable by calling {@link #allowScanningByMediaScanner()}.\n         * <p>\n         * By default, downloads are saved to a generated filename in the shared download cache and\n         * may be deleted by the system at any time to reclaim space.\n         *\n         * <p> For applications targeting {@link android.os.Build.VERSION_CODES#Q} or above,\n         * {@link android.Manifest.permission#WRITE_EXTERNAL_STORAGE WRITE EXTERNAL_STORAGE}\n         * permission is not needed and the {@code uri} must refer to a path within the\n         * directories owned by the application (e.g. {@link Context#getExternalFilesDir(String)})\n         * or a path within the top-level Downloads directory (as returned by\n         * {@link Environment#getExternalStoragePublicDirectory(String)} with\n         * {@link Environment#DIRECTORY_DOWNLOADS}).\n         *\n         * @param uri a file {@link Uri} indicating the destination for the downloaded file.\n         * @return this object\n         ",
    "links" : [ "android.Manifest.permission#WRITE_EXTERNAL_STORAGE", "#allowScanningByMediaScanner()", "android.os.Build.VERSION_CODES#Q", "android.net.Uri", "android.content.Context#getExternalFilesDir(String)", "android.os.Environment#getExternalStoragePublicDirectory(String)", "android.os.Environment#DIRECTORY_DOWNLOADS" ]
  }, {
    "name" : "public Request setDestinationInExternalFilesDir(Context context, String dirType, String subPath)",
    "returnType" : "Request",
    "comment" : "\n         * Set the local destination for the downloaded file to a path within\n         * the application's external files directory (as returned by\n         * {@link Context#getExternalFilesDir(String)}.\n         * <p>\n         * The downloaded file is not scanned by MediaScanner. But it can be\n         * made scannable by calling {@link #allowScanningByMediaScanner()}.\n         *\n         * @param context the {@link Context} to use in determining the external\n         *            files directory\n         * @param dirType the directory type to pass to\n         *            {@link Context#getExternalFilesDir(String)}\n         * @param subPath the path within the external directory, including the\n         *            destination filename\n         * @return this object\n         * @throws IllegalStateException If the external storage directory\n         *             cannot be found or created.\n         ",
    "links" : [ "android.content.Context", "#allowScanningByMediaScanner()", "android.content.Context#getExternalFilesDir(String)" ]
  }, {
    "name" : "public Request setDestinationInExternalPublicDir(String dirType, String subPath)",
    "returnType" : "Request",
    "comment" : "\n         * Set the local destination for the downloaded file to a path within\n         * the public external storage directory (as returned by\n         * {@link Environment#getExternalStoragePublicDirectory(String)}).\n         * <p>\n         * The downloaded file is not scanned by MediaScanner. But it can be\n         * made scannable by calling {@link #allowScanningByMediaScanner()}.\n         *\n         * <p> For applications targeting {@link android.os.Build.VERSION_CODES#Q} or above,\n         * {@link android.Manifest.permission#WRITE_EXTERNAL_STORAGE WRITE_EXTERNAL_STORAGE}\n         * permission is not needed and the {@code dirType} must be one of the known public\n         * directories like {@link Environment#DIRECTORY_DOWNLOADS},\n         * {@link Environment#DIRECTORY_PICTURES}, {@link Environment#DIRECTORY_MOVIES}, etc.\n         *\n         * @param dirType the directory type to pass to {@link Environment#getExternalStoragePublicDirectory(String)}\n         * @param subPath the path within the external directory, including the\n         *            destination filename\n         * @return this object\n         * @throws IllegalStateException If the external storage directory\n         *             cannot be found or created.\n         ",
    "links" : [ "android.Manifest.permission#WRITE_EXTERNAL_STORAGE", "#allowScanningByMediaScanner()", "android.os.Build.VERSION_CODES#Q", "android.os.Environment#DIRECTORY_PICTURES", "android.os.Environment#getExternalStoragePublicDirectory(String)", "android.os.Environment#DIRECTORY_DOWNLOADS", "android.os.Environment#DIRECTORY_MOVIES" ]
  }, {
    "name" : "private void setDestinationFromBase(File base, String subPath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void allowScanningByMediaScanner()",
    "returnType" : "void",
    "comment" : "\n         * If the file to be downloaded is to be scanned by MediaScanner, this method\n         * should be called before {@link DownloadManager#enqueue(Request)} is called.\n         *\n         * @deprecated Starting in Q, this value is ignored. Files downloaded to\n         * directories owned by applications (e.g. {@link Context#getExternalFilesDir(String)})\n         * will not be scanned by MediaScanner and the rest will be scanned.\n         ",
    "links" : [ "android.app.DownloadManager#enqueue(Request)", "android.content.Context#getExternalFilesDir(String)" ]
  }, {
    "name" : "public Request addRequestHeader(String header, String value)",
    "returnType" : "Request",
    "comment" : "\n         * Add an HTTP header to be included with the download request.  The header will be added to\n         * the end of the list.\n         * @param header HTTP header name\n         * @param value header value\n         * @return this object\n         * @see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">HTTP/1.1\n         *      Message Headers</a>\n         ",
    "links" : [ ]
  }, {
    "name" : "public Request setTitle(CharSequence title)",
    "returnType" : "Request",
    "comment" : "\n         * Set the title of this download, to be displayed in notifications (if enabled).  If no\n         * title is given, a default one will be assigned based on the download filename, once the\n         * download starts.\n         * @return this object\n         ",
    "links" : [ ]
  }, {
    "name" : "public Request setDescription(CharSequence description)",
    "returnType" : "Request",
    "comment" : "\n         * Set a description of this download, to be displayed in notifications (if enabled)\n         * @return this object\n         ",
    "links" : [ ]
  }, {
    "name" : "public Request setMimeType(String mimeType)",
    "returnType" : "Request",
    "comment" : "\n         * Set the MIME content type of this download.  This will override the content type declared\n         * in the server's response.\n         * @see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7\">HTTP/1.1\n         *      Media Types</a>\n         * @return this object\n         ",
    "links" : [ ]
  }, {
    "name" : "public Request setShowRunningNotification(boolean show)",
    "returnType" : "Request",
    "comment" : "\n         * Control whether a system notification is posted by the download manager while this\n         * download is running. If enabled, the download manager posts notifications about downloads\n         * through the system {@link android.app.NotificationManager}. By default, a notification is\n         * shown.\n         *\n         * If set to false, this requires the permission\n         * android.permission.DOWNLOAD_WITHOUT_NOTIFICATION.\n         *\n         * @param show whether the download manager should show a notification for this download.\n         * @return this object\n         * @deprecated use {@link #setNotificationVisibility(int)}\n         ",
    "links" : [ "android.app.NotificationManager", "#setNotificationVisibility(int)" ]
  }, {
    "name" : "public Request setNotificationVisibility(int visibility)",
    "returnType" : "Request",
    "comment" : "\n         * Control whether a system notification is posted by the download manager while this\n         * download is running or when it is completed.\n         * If enabled, the download manager posts notifications about downloads\n         * through the system {@link android.app.NotificationManager}.\n         * By default, a notification is shown only when the download is in progress.\n         *<p>\n         * It can take the following values: {@link #VISIBILITY_HIDDEN},\n         * {@link #VISIBILITY_VISIBLE},\n         * {@link #VISIBILITY_VISIBLE_NOTIFY_COMPLETED}.\n         *<p>\n         * If set to {@link #VISIBILITY_HIDDEN}, this requires the permission\n         * android.permission.DOWNLOAD_WITHOUT_NOTIFICATION.\n         *\n         * @param visibility the visibility setting value\n         * @return this object\n         ",
    "links" : [ "#VISIBILITY_VISIBLE", "android.app.NotificationManager", "#VISIBILITY_HIDDEN", "#VISIBILITY_VISIBLE_NOTIFY_COMPLETED" ]
  }, {
    "name" : "public Request setAllowedNetworkTypes(int flags)",
    "returnType" : "Request",
    "comment" : "\n         * Restrict the types of networks over which this download may proceed.\n         * By default, all network types are allowed. Consider using\n         * {@link #setAllowedOverMetered(boolean)} instead, since it's more\n         * flexible.\n         * <p>\n         * As of {@link android.os.Build.VERSION_CODES#N}, setting only the\n         * {@link #NETWORK_WIFI} flag here is equivalent to calling\n         * {@link #setAllowedOverMetered(boolean)} with {@code false}.\n         *\n         * @param flags any combination of the NETWORK_* bit flags.\n         * @return this object\n         ",
    "links" : [ "#setAllowedOverMetered(boolean)", "#NETWORK_WIFI", "android.os.Build.VERSION_CODES#N" ]
  }, {
    "name" : "public Request setAllowedOverRoaming(boolean allowed)",
    "returnType" : "Request",
    "comment" : "\n         * Set whether this download may proceed over a roaming connection.  By default, roaming is\n         * allowed.\n         * @param allowed whether to allow a roaming connection to be used\n         * @return this object\n         ",
    "links" : [ ]
  }, {
    "name" : "public Request setAllowedOverMetered(boolean allow)",
    "returnType" : "Request",
    "comment" : "\n         * Set whether this download may proceed over a metered network\n         * connection. By default, metered networks are allowed.\n         *\n         * @see ConnectivityManager#isActiveNetworkMetered()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Request setRequiresCharging(boolean requiresCharging)",
    "returnType" : "Request",
    "comment" : "\n         * Specify that to run this download, the device needs to be plugged in.\n         * This defaults to false.\n         *\n         * @param requiresCharging Whether or not the device is plugged in.\n         * @see android.app.job.JobInfo.Builder#setRequiresCharging(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Request setRequiresDeviceIdle(boolean requiresDeviceIdle)",
    "returnType" : "Request",
    "comment" : "\n         * Specify that to run, the download needs the device to be in idle\n         * mode. This defaults to false.\n         * <p>\n         * Idle mode is a loose definition provided by the system, which means\n         * that the device is not in use, and has not been in use for some time.\n         *\n         * @param requiresDeviceIdle Whether or not the device need be within an\n         *            idle maintenance window.\n         * @see android.app.job.JobInfo.Builder#setRequiresDeviceIdle(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Request setVisibleInDownloadsUi(boolean isVisible)",
    "returnType" : "Request",
    "comment" : "\n         * Set whether this download should be displayed in the system's Downloads UI. True by\n         * default.\n         * @param isVisible whether to display this download in the Downloads UI\n         * @return this object\n         *\n         * @deprecated Starting in Q, this value is ignored. Only files downloaded to\n         * public Downloads directory (as returned by\n         * {@link Environment#getExternalStoragePublicDirectory(String)} with\n         * {@link Environment#DIRECTORY_DOWNLOADS}) will be visible in system's Downloads UI\n         * and the rest will not be visible.\n         * (e.g. {@link Context#getExternalFilesDir(String)}) will not be visible.\n         ",
    "links" : [ "android.content.Context#getExternalFilesDir(String)", "android.os.Environment#getExternalStoragePublicDirectory(String)", "android.os.Environment#DIRECTORY_DOWNLOADS" ]
  }, {
    "name" : " ContentValues toContentValues(String packageName)",
    "returnType" : "ContentValues",
    "comment" : "\n         * @return ContentValues to be passed to DownloadProvider.insert()\n         ",
    "links" : [ ]
  }, {
    "name" : "private void encodeHttpHeaders(ContentValues values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void putIfNonNull(ContentValues contentValues, String key, Object value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "NETWORK_MOBILE", "NETWORK_WIFI", "NETWORK_BLUETOOTH", "mUri", "mDestinationUri", "mRequestHeaders", "mTitle", "mDescription", "mMimeType", "mAllowedNetworkTypes", "mRoamingAllowed", "mMeteredAllowed", "mFlags", "mIsVisibleInDownloadsUi", "mScannable", "SCANNABLE_VALUE_YES", "SCANNABLE_VALUE_NO", "VISIBILITY_VISIBLE", "VISIBILITY_VISIBLE_NOTIFY_COMPLETED", "VISIBILITY_HIDDEN", "VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION", "mNotificationVisibility" ],
  "methodNames" : [ "public Request setDestinationUri(Uri uri)", "public Request setDestinationInExternalFilesDir(Context context, String dirType, String subPath)", "public Request setDestinationInExternalPublicDir(String dirType, String subPath)", "private void setDestinationFromBase(File base, String subPath)", "public void allowScanningByMediaScanner()", "public Request addRequestHeader(String header, String value)", "public Request setTitle(CharSequence title)", "public Request setDescription(CharSequence description)", "public Request setMimeType(String mimeType)", "public Request setShowRunningNotification(boolean show)", "public Request setNotificationVisibility(int visibility)", "public Request setAllowedNetworkTypes(int flags)", "public Request setAllowedOverRoaming(boolean allowed)", "public Request setAllowedOverMetered(boolean allow)", "public Request setRequiresCharging(boolean requiresCharging)", "public Request setRequiresDeviceIdle(boolean requiresDeviceIdle)", "public Request setVisibleInDownloadsUi(boolean isVisible)", " ContentValues toContentValues(String packageName)", "private void encodeHttpHeaders(ContentValues values)", "private void putIfNonNull(ContentValues contentValues, String key, Object value)" ]
}