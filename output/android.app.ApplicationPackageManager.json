{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ApplicationPackageManager.java",
  "packageName" : "android.app",
  "className" : "ApplicationPackageManager",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_ICONS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_EPHEMERAL_COOKIE_MAX_SIZE_BYTES",
    "type" : "int",
    "comment" : " 16KB",
    "links" : [ ]
  }, {
    "name" : "sDefaultFlags",
    "type" : "int",
    "comment" : " Default flags to use with PackageManager when no flags are given.",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CHECKSUMS",
    "type" : "int",
    "comment" : " Default set of checksums - includes all available checksums.\n     * @see PackageManager#requestChecksums  ",
    "links" : [ ]
  }, {
    "name" : "APP_PERMISSION_BUTTON_ALLOW_ALWAYS",
    "type" : "String",
    "comment" : " Name of the resource which provides background permission button string",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_CONTROLLER_RESOURCE_PACKAGE",
    "type" : "String",
    "comment" : " Name of the package which the permission controller's resources are in.",
    "links" : [ ]
  }, {
    "name" : "mUserManager",
    "type" : "UserManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPermissionManager",
    "type" : "PermissionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstaller",
    "type" : "PackageInstaller",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArtManager",
    "type" : "ArtManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDevicePolicyManager",
    "type" : "DevicePolicyManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPermissionsControllerPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelegates",
    "type" : "ArrayList<MoveCallbackDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageMonitorCallbacks",
    "type" : "ArraySet<IRemoteCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasSystemFeatureCache",
    "type" : "PropertyInvalidatedCache<HasSystemFeatureQuery, Boolean>",
    "comment" : " hold at least 150 entries.",
    "links" : [ ]
  }, {
    "name" : "CACHE_KEY_PACKAGES_FOR_UID_PROPERTY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGetPackagesForUidCache",
    "type" : "PropertyInvalidatedCache<Integer, GetPackagesForUidResult>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedSafeMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPM",
    "type" : "IPackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserUnlocked",
    "type" : "boolean",
    "comment" : " Assume locked until we hear otherwise ",
    "links" : [ ]
  }, {
    "name" : "sSync",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIconCache",
    "type" : "ArrayMap<ResourceName, WeakReference<Drawable.ConstantState>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sStringCache",
    "type" : "ArrayMap<ResourceName, WeakReference<CharSequence>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " UserManager getUserManager()",
    "returnType" : "UserManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DevicePolicyManager getDevicePolicyManager()",
    "returnType" : "DevicePolicyManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PermissionManager getPermissionManager()",
    "returnType" : "PermissionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getUserId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageInfo getPackageInfo(String packageName, int flags) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageInfo getPackageInfo(String packageName, PackageInfoFlags flags) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageInfo getPackageInfo(VersionedPackage versionedPackage, int flags) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageInfo getPackageInfo(VersionedPackage versionedPackage, PackageInfoFlags flags) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageInfo getPackageInfoAsUser(String packageName, int flags, int userId) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageInfo getPackageInfoAsUser(String packageName, PackageInfoFlags flags, int userId) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] currentToCanonicalPackageNames(String[] names)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] canonicalToCurrentPackageNames(String[] names)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent getLaunchIntentForPackage(String packageName)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent getLeanbackLaunchIntentForPackage(String packageName)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent getCarLaunchIntentForPackage(String packageName)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Intent getLaunchIntentForPackageAndCategory(String packageName, String category)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IntentSender getLaunchIntentSenderForPackage(@NonNull String packageName)",
    "returnType" : "IntentSender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getPackageGids(String packageName) throws NameNotFoundException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getPackageGids(String packageName, int flags) throws NameNotFoundException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getPackageGids(String packageName, PackageInfoFlags flags) throws NameNotFoundException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPackageUid(String packageName, int flags) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPackageUid(String packageName, PackageInfoFlags flags) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPackageUidAsUser(String packageName, int userId) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPackageUidAsUser(String packageName, int flags, int userId) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPackageUidAsUser(String packageName, PackageInfoFlags flags, int userId) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PermissionGroupInfo> getAllPermissionGroups(int flags)",
    "returnType" : "List<PermissionGroupInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PermissionGroupInfo getPermissionGroupInfo(String groupName, int flags) throws NameNotFoundException",
    "returnType" : "PermissionGroupInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PermissionInfo getPermissionInfo(String permName, int flags) throws NameNotFoundException",
    "returnType" : "PermissionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PermissionInfo> queryPermissionsByGroup(String groupName, int flags) throws NameNotFoundException",
    "returnType" : "List<PermissionInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getPlatformPermissionsForGroup(@NonNull String permissionGroupName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<List<String>> callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getGroupOfPlatformPermission(@NonNull String permissionName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<String> callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean arePermissionsIndividuallyControlled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isWirelessConsentModeEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfo(String packageName, int flags) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfo(String packageName, ApplicationInfoFlags flags) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfoAsUser(String packageName, int flags, int userId) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfoAsUser(String packageName, ApplicationInfoFlags flags, int userId) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ApplicationInfo maybeAdjustApplicationInfo(ApplicationInfo info)",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTargetSdkVersion(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityInfo getActivityInfo(ComponentName className, int flags) throws NameNotFoundException",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityInfo getActivityInfo(ComponentName className, ComponentInfoFlags flags) throws NameNotFoundException",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityInfo getReceiverInfo(ComponentName className, int flags) throws NameNotFoundException",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityInfo getReceiverInfo(ComponentName className, ComponentInfoFlags flags) throws NameNotFoundException",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ServiceInfo getServiceInfo(ComponentName className, int flags) throws NameNotFoundException",
    "returnType" : "ServiceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ServiceInfo getServiceInfo(ComponentName className, ComponentInfoFlags flags) throws NameNotFoundException",
    "returnType" : "ServiceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ProviderInfo getProviderInfo(ComponentName className, int flags) throws NameNotFoundException",
    "returnType" : "ProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ProviderInfo getProviderInfo(ComponentName className, ComponentInfoFlags flags) throws NameNotFoundException",
    "returnType" : "ProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getSystemSharedLibraryNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<SharedLibraryInfo> getSharedLibraries(int flags)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<SharedLibraryInfo> getSharedLibraries(PackageInfoFlags flags)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : " @hide\n     * @param flags ",
    "links" : [ ]
  }, {
    "name" : "public List<SharedLibraryInfo> getSharedLibrariesAsUser(int flags, int userId)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<SharedLibraryInfo> getSharedLibrariesAsUser(PackageInfoFlags flags, int userId)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<SharedLibraryInfo> getDeclaredSharedLibraries(@NonNull String packageName, int flags)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<SharedLibraryInfo> getDeclaredSharedLibraries(@NonNull String packageName, PackageInfoFlags flags)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getServicesSystemSharedLibraryPackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getSharedSystemSharedLibraryPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ChangedPackages getChangedPackages(int sequenceNumber)",
    "returnType" : "ChangedPackages",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FeatureInfo[] getSystemAvailableFeatures()",
    "returnType" : "FeatureInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSystemFeature(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSystemFeature(String name, int version)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disableHasSystemFeatureCache()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void invalidateHasSystemFeatureCache()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int checkPermission(String permName, String pkgName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPermissionRevokedByPolicy(String permName, String pkgName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPermissionControllerPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSdkSandboxPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addPermission(PermissionInfo info)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addPermissionAsync(PermissionInfo info)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removePermission(String name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void grantRuntimePermission(String packageName, String permissionName, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void revokeRuntimePermission(String packageName, String permName, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void revokeRuntimePermission(String packageName, String permName, UserHandle user, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPermissionFlags(String permName, String packageName, UserHandle user)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updatePermissionFlags(String permName, String packageName, int flagMask, int flagValues, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getWhitelistedRestrictedPermissions(@NonNull String packageName, @PermissionWhitelistFlags int flags)",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permName, @PermissionWhitelistFlags int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setAutoRevokeWhitelisted(@NonNull String packageName, boolean whitelisted)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoRevokeWhitelisted(@NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removeWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permName, @PermissionWhitelistFlags int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldShowRequestPermissionRationale(String permName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent buildRequestPermissionsIntent(@NonNull String[] permissions)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getBackgroundPermissionOptionLabel()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkSignatures(String pkg1, String pkg2)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkSignatures(int uid1, int uid2)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSigningCertificate(String packageName, byte[] certificate, @CertificateInputType int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSigningCertificate(int uid, byte[] certificate, @CertificateInputType int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<byte[]> encodeCertificates(List<Certificate> certs) throws CertificateEncodingException",
    "returnType" : "List<byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestChecksums(@NonNull String packageName, boolean includeSplits, @Checksum.TypeMask int required, @NonNull List<Certificate> trustedInstallers, @NonNull OnChecksumsReadyListener onChecksumsReadyListener) throws CertificateEncodingException, NameNotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getPackagesForUid(int uid)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void disableGetPackagesForUidCache()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void invalidateGetPackagesForUidCache()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getNameForUid(int uid)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getNamesForUids(int[] uids)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getUidForSharedUser(String sharedUserName) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ModuleInfo> getInstalledModules(int flags)",
    "returnType" : "List<ModuleInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ModuleInfo getModuleInfo(String packageName, int flags) throws NameNotFoundException",
    "returnType" : "ModuleInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getInstalledPackages(int flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getInstalledPackages(PackageInfoFlags flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getInstalledPackagesAsUser(int flags, int userId)",
    "returnType" : "List<PackageInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getInstalledPackagesAsUser(PackageInfoFlags flags, int userId)",
    "returnType" : "List<PackageInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getAppMetadata(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAppMetadataSource(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getPackagesHoldingPermissions(String[] permissions, int flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getPackagesHoldingPermissions(String[] permissions, PackageInfoFlags flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ApplicationInfo> getInstalledApplications(int flags)",
    "returnType" : "List<ApplicationInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ApplicationInfo> getInstalledApplications(ApplicationInfoFlags flags)",
    "returnType" : "List<ApplicationInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ApplicationInfo> getInstalledApplicationsAsUser(int flags, int userId)",
    "returnType" : "List<ApplicationInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<ApplicationInfo> getInstalledApplicationsAsUser(ApplicationInfoFlags flags, int userId)",
    "returnType" : "List<ApplicationInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<InstantAppInfo> getInstantApps()",
    "returnType" : "List<InstantAppInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getInstantAppIcon(String packageName)",
    "returnType" : "Drawable",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInstantApp()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInstantApp(String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInstantAppCookieMaxBytes()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInstantAppCookieMaxSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getInstantAppCookie()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearInstantAppCookie()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateInstantAppCookie(@NonNull byte[] cookie)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setInstantAppCookie(@NonNull byte[] cookie)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveActivity(Intent intent, int flags)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveActivity(Intent intent, ResolveInfoFlags flags)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveActivityAsUser(Intent intent, int flags, int userId)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveActivityAsUser(Intent intent, ResolveInfoFlags flags, int userId)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivities(Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivities(Intent intent, ResolveInfoFlags flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivitiesAsUser(Intent intent, int flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : " @hide Same as above but for a specific user ",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivitiesAsUser(Intent intent, ResolveInfoFlags flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : " @hide Same as above but for a specific user ",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivityOptions(ComponentName caller, Intent[] specifics, Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivityOptions(ComponentName caller, List<Intent> specifics, Intent intent, ResolveInfoFlags flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceiversAsUser(Intent intent, int flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceiversAsUser(Intent intent, ResolveInfoFlags flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceivers(Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceivers(Intent intent, ResolveInfoFlags flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveServiceAsUser(Intent intent, int flags, @UserIdInt int userId)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveServiceAsUser(Intent intent, ResolveInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveService(Intent intent, int flags)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveService(Intent intent, ResolveInfoFlags flags)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentServicesAsUser(Intent intent, int flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentServicesAsUser(Intent intent, ResolveInfoFlags flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentServices(Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentServices(Intent intent, ResolveInfoFlags flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentContentProvidersAsUser(Intent intent, int flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentContentProvidersAsUser(Intent intent, ResolveInfoFlags flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentContentProviders(Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentContentProviders(Intent intent, ResolveInfoFlags flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ProviderInfo resolveContentProvider(String name, int flags)",
    "returnType" : "ProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ProviderInfo resolveContentProvider(String name, ComponentInfoFlags flags)",
    "returnType" : "ProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ProviderInfo resolveContentProviderAsUser(String name, int flags, int userId)",
    "returnType" : "ProviderInfo",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public ProviderInfo resolveContentProviderAsUser(String name, ComponentInfoFlags flags, int userId)",
    "returnType" : "ProviderInfo",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public List<ProviderInfo> queryContentProviders(String processName, int uid, int flags)",
    "returnType" : "List<ProviderInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ProviderInfo> queryContentProviders(String processName, int uid, ComponentInfoFlags flags)",
    "returnType" : "List<ProviderInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ProviderInfo> queryContentProviders(String processName, int uid, int flags, String metaDataKey)",
    "returnType" : "List<ProviderInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ProviderInfo> queryContentProviders(String processName, int uid, ComponentInfoFlags flags, String metaDataKey)",
    "returnType" : "List<ProviderInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InstrumentationInfo getInstrumentationInfo(ComponentName className, int flags) throws NameNotFoundException",
    "returnType" : "InstrumentationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<InstrumentationInfo> queryInstrumentation(String targetPackage, int flags)",
    "returnType" : "List<InstrumentationInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawable(String packageName, @DrawableRes int resId, @Nullable ApplicationInfo appInfo)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityIcon(ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityIcon(Intent intent) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDefaultActivityIcon()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationIcon(ApplicationInfo info)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationIcon(String packageName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityBanner(ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityBanner(Intent intent) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationBanner(ApplicationInfo info)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationBanner(String packageName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityLogo(ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityLogo(Intent intent) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationLogo(ApplicationInfo info)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationLogo(String packageName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getUserBadgedIcon(Drawable icon, UserHandle user)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getUpdatableUserIconBadgeId(UserHandle user)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getDefaultUserIconBadge(UserHandle user)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getUserBadgedDrawableForDensity(Drawable drawable, UserHandle user, Rect badgeLocation, int badgeDensity)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getUserBadgeColor(UserHandle user, boolean checkTheme)",
    "returnType" : "int",
    "comment" : "\n     * Returns the color of the user's actual badge (not the badge's shadow).\n     * @param checkTheme whether to check the theme to determine the badge color. This should be\n     *                   true if the background is determined by the theme. Otherwise, if\n     *                   checkTheme is false, returns the color assuming a light background.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getUserBadgeForDensity(UserHandle user, int density)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getUpdatableUserBadgeId(UserHandle user)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getDefaultUserBadgeForDensity(UserHandle user, int density)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getUserBadgeForDensityNoBackground(UserHandle user, int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the badge color based on whether device has dark theme enabled or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable getDefaultUserBadgeNoBackgroundForDensity(UserHandle user, int density)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getDrawableForDensity(int drawableId, int density)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getProfileIconForDensity(UserHandle user, int drawableId, int density)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getUserBadgedLabel(CharSequence label, UserHandle user)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResourcesForActivity(ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResourcesForApplication(@NonNull ApplicationInfo app) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResourcesForApplication(@NonNull ApplicationInfo app, @Nullable Configuration configuration) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResourcesForApplication(String appPackageName) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResourcesForApplicationAsUser(String appPackageName, int userId) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSafeMode()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnPermissionsChangeListener(OnPermissionsChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnPermissionsChangeListener(OnPermissionsChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void configurationChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long updateFlagsForPackage(long flags, int userId)",
    "returnType" : "long",
    "comment" : "\n     * Update given flags when being used to request {@link PackageInfo}.\n     ",
    "links" : [ "android.content.pm.ArchivedPackageInfo" ]
  }, {
    "name" : "private long updateFlagsForApplication(long flags, int userId)",
    "returnType" : "long",
    "comment" : "\n     * Update given flags when being used to request {@link ApplicationInfo}.\n     ",
    "links" : [ "android.content.pm.ApplicationInfo" ]
  }, {
    "name" : "private long updateFlagsForComponent(@ComponentInfoFlagsBits long flags, int userId, Intent intent)",
    "returnType" : "long",
    "comment" : "\n     * Update given flags when being used to request {@link ComponentInfo}.\n     ",
    "links" : [ "android.content.pm.ComponentInfo" ]
  }, {
    "name" : "private void onImplicitDirectBoot(int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getCachedIcon(@NonNull ResourceName name)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void putCachedIcon(@NonNull ResourceName name, @NonNull Drawable dr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void handlePackageBroadcast(int cmd, String[] pkgList, boolean hasPkgInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CharSequence getCachedString(ResourceName name)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void putCachedString(ResourceName name, CharSequence cs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText(String packageName, @StringRes int resid, ApplicationInfo appInfo)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public XmlResourceParser getXml(String packageName, @XmlRes int resid, ApplicationInfo appInfo)",
    "returnType" : "XmlResourceParser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getApplicationLabel(ApplicationInfo info)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int installExistingPackage(String packageName) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int installExistingPackage(String packageName, int installReason) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int installExistingPackageAsUser(String packageName, int userId) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int installExistingPackageAsUser(String packageName, int installReason, int userId) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void verifyPendingInstall(int id, int response)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void verifyIntentFilter(int id, int verificationCode, List<String> failedDomains)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntentVerificationStatusAsUser(String packageName, int userId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean updateIntentVerificationStatusAsUser(String packageName, int status, int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<IntentFilterVerificationInfo> getIntentFilterVerifications(String packageName)",
    "returnType" : "List<IntentFilterVerificationInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<IntentFilter> getAllIntentFilters(String packageName)",
    "returnType" : "List<IntentFilter>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDefaultBrowserPackageNameAsUser(int userId)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setDefaultBrowserPackageNameAsUser(String packageName, int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInstallerPackageName(String targetPackage, String installerPackageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUpdateAvailable(String packageName, boolean updateAvailable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getInstallerPackageName(String packageName)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InstallSourceInfo getInstallSourceInfo(String packageName) throws NameNotFoundException",
    "returnType" : "InstallSourceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAppArchivable(String packageName) throws NameNotFoundException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMoveStatus(int moveId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerMoveCallback(MoveCallback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterMoveCallback(MoveCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int movePackage(String packageName, VolumeInfo vol)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VolumeInfo getPackageCurrentVolume(ApplicationInfo app)",
    "returnType" : "VolumeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected VolumeInfo getPackageCurrentVolume(ApplicationInfo app, StorageManager storage)",
    "returnType" : "VolumeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<VolumeInfo> getPackageCandidateVolumes(ApplicationInfo app)",
    "returnType" : "List<VolumeInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected List<VolumeInfo> getPackageCandidateVolumes(ApplicationInfo app, StorageManager storageManager, IPackageManager pm)",
    "returnType" : "List<VolumeInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean isForceAllowOnExternal(Context context)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean isAllow3rdPartyOnInternal(Context context)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isPackageCandidateVolume(ContextImpl context, ApplicationInfo app, VolumeInfo vol, IPackageManager pm)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int movePrimaryStorage(VolumeInfo vol)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VolumeInfo getPrimaryStorageCurrentVolume()",
    "returnType" : "VolumeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<VolumeInfo> getPrimaryStorageCandidateVolumes()",
    "returnType" : "List<VolumeInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isPrimaryStorageCandidateVolume(VolumeInfo vol)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deletePackage(String packageName, IPackageDeleteObserver observer, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deletePackageAsUser(String packageName, IPackageDeleteObserver observer, int flags, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearApplicationUserData(String packageName, IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deleteApplicationCacheFiles(String packageName, IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deleteApplicationCacheFilesAsUser(String packageName, int userId, IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void freeStorageAndNotify(String volumeUuid, long idealStorageSize, IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void freeStorage(String volumeUuid, long freeStorageSize, IntentSender pi)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] setDistractingPackageRestrictions(String[] packages, int distractionFlags)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] setPackagesSuspended(String[] packageNames, boolean suspended, PersistableBundle appExtras, PersistableBundle launcherExtras, String dialogMessage)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] setPackagesSuspended(String[] packageNames, boolean suspended, PersistableBundle appExtras, PersistableBundle launcherExtras, SuspendDialogInfo dialogInfo)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] setPackagesSuspended(String[] packageNames, boolean suspended, PersistableBundle appExtras, PersistableBundle launcherExtras, SuspendDialogInfo dialogInfo, int flags)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getUnsuspendablePackages(String[] packageNames)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle getSuspendedPackageAppExtras()",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSuspendingPackage(String suspendedPackage)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageSuspendedForUser(String packageName, int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageSuspended(String packageName) throws NameNotFoundException",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageSuspended()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageQuarantined(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageStopped(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationCategoryHint(String packageName, int categoryHint)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void getPackageSizeInfoAsUser(String packageName, int userHandle, IPackageStatsObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addPackageToPreferred(String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removePackageFromPreferred(String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getPreferredPackages(int flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addPreferredActivityAsUser(IntentFilter filter, int match, ComponentName[] set, ComponentName activity, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replacePreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replacePreferredActivityAsUser(IntentFilter filter, int match, ComponentName[] set, ComponentName activity, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearPackagePreferredActivities(String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addUniquePreferredActivity(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPreferredActivities(List<IntentFilter> outFilters, List<ComponentName> outActivities, String packageName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getHomeActivities(List<ResolveInfo> outActivities)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSyntheticAppDetailsActivityEnabled(String packageName, boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getSyntheticAppDetailsActivityEnabled(String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setComponentEnabledSetting(ComponentName componentName, int newState, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setComponentEnabledSettings(List<ComponentEnabledSetting> settings)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getComponentEnabledSetting(ComponentName componentName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationEnabledSetting(String packageName, int newState, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getApplicationEnabledSetting(String packageName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flushPackageRestrictionsAsUser(int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setApplicationHiddenSettingAsUser(String packageName, boolean hidden, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getApplicationHiddenSettingAsUser(String packageName, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSystemAppState(String packageName, @SystemAppState int state)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public KeySet getKeySetByAlias(String packageName, String alias)",
    "returnType" : "KeySet",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public KeySet getSigningKeySet(String packageName)",
    "returnType" : "KeySet",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSignedBy(String packageName, KeySet ks)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSignedByExactly(String packageName, KeySet ks)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public VerifierDeviceIdentity getVerifierDeviceIdentity()",
    "returnType" : "VerifierDeviceIdentity",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUpgrade()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeviceUpgrading()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageInstaller getPackageInstaller()",
    "returnType" : "PackageInstaller",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageAvailable(String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addCrossProfileIntentFilter(IntentFilter filter, int sourceUserId, int targetUserId, int flags)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeCrossProfileIntentFilter(IntentFilter filter, int sourceUserId, int targetUserId, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearCrossProfileIntentFilters(int sourceUserId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadItemIcon(PackageItemInfo itemInfo, ApplicationInfo appInfo)",
    "returnType" : "Drawable",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadUnbadgedItemIcon(@NonNull PackageItemInfo itemInfo, @Nullable ApplicationInfo appInfo)",
    "returnType" : "Drawable",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable getBadgedDrawable(Drawable drawable, Drawable badgeDrawable, Rect badgeLocation, boolean tryBadgeInPlace)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasUserBadge(int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInstallReason(String packageName, UserHandle user)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canRequestPackageInstalls()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getInstantAppResolverSettingsComponent()",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getInstantAppInstallerComponent()",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getInstantAppAndroidId(String packageName, UserHandle user)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerDexModule(@NonNull String dexModule, @Nullable DexModuleRegisterCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getHarmfulAppWarning(String packageName)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHarmfulAppWarning(String packageName, CharSequence warning)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArtManager getArtManager()",
    "returnType" : "ArtManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDefaultTextClassifierPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSystemTextClassifierPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getAttentionServicePackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getRotationResolverPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getWellbeingPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getAppPredictionServicePackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSystemCaptionsServicePackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSetupWizardPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getIncidentReportApproverPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageStateProtected(String packageName, int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendDeviceCustomizationReadyBroadcast()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoRevokeWhitelisted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMimeGroup(String mimeGroup, Set<String> mimeTypes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getMimeGroup(String group)",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Property getProperty(String propertyName, String packageName) throws NameNotFoundException",
    "returnType" : "Property",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Property getProperty(String propertyName, ComponentName component) throws NameNotFoundException",
    "returnType" : "Property",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Property getPropertyAsUser(@NonNull String propertyName, @NonNull String packageName, @Nullable String className, int userId) throws NameNotFoundException",
    "returnType" : "Property",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Property> queryApplicationProperty(String propertyName)",
    "returnType" : "List<Property>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Property> queryActivityProperty(String propertyName)",
    "returnType" : "List<Property>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Property> queryProviderProperty(String propertyName)",
    "returnType" : "List<Property>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Property> queryReceiverProperty(String propertyName)",
    "returnType" : "List<Property>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Property> queryServiceProperty(String propertyName)",
    "returnType" : "List<Property>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canPackageQuery(@NonNull String sourcePackageName, @NonNull String targetPackageName) throws NameNotFoundException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean[] canPackageQuery(@NonNull String sourcePackageName, @NonNull String[] targetPackageNames) throws NameNotFoundException",
    "returnType" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void makeUidVisible(int recipientUid, int visibleUid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArchivedPackageInfo getArchivedPackage(@NonNull String packageName)",
    "returnType" : "ArchivedPackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canUserUninstall(String packageName, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldShowNewAppInstalledNotification()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void relinquishUpdateOwnership(String targetPackage)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerPackageMonitorCallback(@NonNull IRemoteCallback callback, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterPackageMonitorCallback(@NonNull IRemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getArchivedAppIcon(String packageName)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T parseAndroidManifest(@NonNull File apkFile, @NonNull Function<XmlResourceParser, T> parserFunction) throws IOException",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static XmlResourceParser getAndroidManifestParser(@NonNull File apkFile) throws IOException",
    "returnType" : "XmlResourceParser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TypedArray extractPackageItemInfoAttributes(PackageItemInfo info, String name, String rootTag, int[] attributes)",
    "returnType" : "TypedArray",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " UserManager getUserManager()", " DevicePolicyManager getDevicePolicyManager()", "private PermissionManager getPermissionManager()", "public int getUserId()", "public PackageInfo getPackageInfo(String packageName, int flags) throws NameNotFoundException", "public PackageInfo getPackageInfo(String packageName, PackageInfoFlags flags) throws NameNotFoundException", "public PackageInfo getPackageInfo(VersionedPackage versionedPackage, int flags) throws NameNotFoundException", "public PackageInfo getPackageInfo(VersionedPackage versionedPackage, PackageInfoFlags flags) throws NameNotFoundException", "public PackageInfo getPackageInfoAsUser(String packageName, int flags, int userId) throws NameNotFoundException", "public PackageInfo getPackageInfoAsUser(String packageName, PackageInfoFlags flags, int userId) throws NameNotFoundException", "public String[] currentToCanonicalPackageNames(String[] names)", "public String[] canonicalToCurrentPackageNames(String[] names)", "public Intent getLaunchIntentForPackage(String packageName)", "public Intent getLeanbackLaunchIntentForPackage(String packageName)", "public Intent getCarLaunchIntentForPackage(String packageName)", "private Intent getLaunchIntentForPackageAndCategory(String packageName, String category)", "public IntentSender getLaunchIntentSenderForPackage(@NonNull String packageName)", "public int[] getPackageGids(String packageName) throws NameNotFoundException", "public int[] getPackageGids(String packageName, int flags) throws NameNotFoundException", "public int[] getPackageGids(String packageName, PackageInfoFlags flags) throws NameNotFoundException", "public int getPackageUid(String packageName, int flags) throws NameNotFoundException", "public int getPackageUid(String packageName, PackageInfoFlags flags) throws NameNotFoundException", "public int getPackageUidAsUser(String packageName, int userId) throws NameNotFoundException", "public int getPackageUidAsUser(String packageName, int flags, int userId) throws NameNotFoundException", "public int getPackageUidAsUser(String packageName, PackageInfoFlags flags, int userId) throws NameNotFoundException", "public List<PermissionGroupInfo> getAllPermissionGroups(int flags)", "public PermissionGroupInfo getPermissionGroupInfo(String groupName, int flags) throws NameNotFoundException", "public PermissionInfo getPermissionInfo(String permName, int flags) throws NameNotFoundException", "public List<PermissionInfo> queryPermissionsByGroup(String groupName, int flags) throws NameNotFoundException", "public void getPlatformPermissionsForGroup(@NonNull String permissionGroupName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<List<String>> callback)", "public void getGroupOfPlatformPermission(@NonNull String permissionName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<String> callback)", "public boolean arePermissionsIndividuallyControlled()", "public boolean isWirelessConsentModeEnabled()", "public ApplicationInfo getApplicationInfo(String packageName, int flags) throws NameNotFoundException", "public ApplicationInfo getApplicationInfo(String packageName, ApplicationInfoFlags flags) throws NameNotFoundException", "public ApplicationInfo getApplicationInfoAsUser(String packageName, int flags, int userId) throws NameNotFoundException", "public ApplicationInfo getApplicationInfoAsUser(String packageName, ApplicationInfoFlags flags, int userId) throws NameNotFoundException", "private static ApplicationInfo maybeAdjustApplicationInfo(ApplicationInfo info)", "public int getTargetSdkVersion(@NonNull String packageName) throws NameNotFoundException", "public ActivityInfo getActivityInfo(ComponentName className, int flags) throws NameNotFoundException", "public ActivityInfo getActivityInfo(ComponentName className, ComponentInfoFlags flags) throws NameNotFoundException", "public ActivityInfo getReceiverInfo(ComponentName className, int flags) throws NameNotFoundException", "public ActivityInfo getReceiverInfo(ComponentName className, ComponentInfoFlags flags) throws NameNotFoundException", "public ServiceInfo getServiceInfo(ComponentName className, int flags) throws NameNotFoundException", "public ServiceInfo getServiceInfo(ComponentName className, ComponentInfoFlags flags) throws NameNotFoundException", "public ProviderInfo getProviderInfo(ComponentName className, int flags) throws NameNotFoundException", "public ProviderInfo getProviderInfo(ComponentName className, ComponentInfoFlags flags) throws NameNotFoundException", "public String[] getSystemSharedLibraryNames()", "public List<SharedLibraryInfo> getSharedLibraries(int flags)", "public List<SharedLibraryInfo> getSharedLibraries(PackageInfoFlags flags)", "public List<SharedLibraryInfo> getSharedLibrariesAsUser(int flags, int userId)", "public List<SharedLibraryInfo> getSharedLibrariesAsUser(PackageInfoFlags flags, int userId)", "public List<SharedLibraryInfo> getDeclaredSharedLibraries(@NonNull String packageName, int flags)", "public List<SharedLibraryInfo> getDeclaredSharedLibraries(@NonNull String packageName, PackageInfoFlags flags)", "public String getServicesSystemSharedLibraryPackageName()", "public String getSharedSystemSharedLibraryPackageName()", "public ChangedPackages getChangedPackages(int sequenceNumber)", "public FeatureInfo[] getSystemAvailableFeatures()", "public boolean hasSystemFeature(String name)", "public boolean hasSystemFeature(String name, int version)", "public void disableHasSystemFeatureCache()", "public static void invalidateHasSystemFeatureCache()", "public int checkPermission(String permName, String pkgName)", "public boolean isPermissionRevokedByPolicy(String permName, String pkgName)", "public String getPermissionControllerPackageName()", "public String getSdkSandboxPackageName()", "public boolean addPermission(PermissionInfo info)", "public boolean addPermissionAsync(PermissionInfo info)", "public void removePermission(String name)", "public void grantRuntimePermission(String packageName, String permissionName, UserHandle user)", "public void revokeRuntimePermission(String packageName, String permName, UserHandle user)", "public void revokeRuntimePermission(String packageName, String permName, UserHandle user, String reason)", "public int getPermissionFlags(String permName, String packageName, UserHandle user)", "public void updatePermissionFlags(String permName, String packageName, int flagMask, int flagValues, UserHandle user)", "public Set<String> getWhitelistedRestrictedPermissions(@NonNull String packageName, @PermissionWhitelistFlags int flags)", "public boolean addWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permName, @PermissionWhitelistFlags int flags)", "public boolean setAutoRevokeWhitelisted(@NonNull String packageName, boolean whitelisted)", "public boolean isAutoRevokeWhitelisted(@NonNull String packageName)", "public boolean removeWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permName, @PermissionWhitelistFlags int flags)", "public boolean shouldShowRequestPermissionRationale(String permName)", "public Intent buildRequestPermissionsIntent(@NonNull String[] permissions)", "public CharSequence getBackgroundPermissionOptionLabel()", "public int checkSignatures(String pkg1, String pkg2)", "public int checkSignatures(int uid1, int uid2)", "public boolean hasSigningCertificate(String packageName, byte[] certificate, @CertificateInputType int type)", "public boolean hasSigningCertificate(int uid, byte[] certificate, @CertificateInputType int type)", "private static List<byte[]> encodeCertificates(List<Certificate> certs) throws CertificateEncodingException", "public void requestChecksums(@NonNull String packageName, boolean includeSplits, @Checksum.TypeMask int required, @NonNull List<Certificate> trustedInstallers, @NonNull OnChecksumsReadyListener onChecksumsReadyListener) throws CertificateEncodingException, NameNotFoundException", "public String[] getPackagesForUid(int uid)", "public static void disableGetPackagesForUidCache()", "public static void invalidateGetPackagesForUidCache()", "public String getNameForUid(int uid)", "public String[] getNamesForUids(int[] uids)", "public int getUidForSharedUser(String sharedUserName) throws NameNotFoundException", "public List<ModuleInfo> getInstalledModules(int flags)", "public ModuleInfo getModuleInfo(String packageName, int flags) throws NameNotFoundException", "public List<PackageInfo> getInstalledPackages(int flags)", "public List<PackageInfo> getInstalledPackages(PackageInfoFlags flags)", "public List<PackageInfo> getInstalledPackagesAsUser(int flags, int userId)", "public List<PackageInfo> getInstalledPackagesAsUser(PackageInfoFlags flags, int userId)", "public PersistableBundle getAppMetadata(@NonNull String packageName) throws NameNotFoundException", "public int getAppMetadataSource(@NonNull String packageName) throws NameNotFoundException", "public List<PackageInfo> getPackagesHoldingPermissions(String[] permissions, int flags)", "public List<PackageInfo> getPackagesHoldingPermissions(String[] permissions, PackageInfoFlags flags)", "public List<ApplicationInfo> getInstalledApplications(int flags)", "public List<ApplicationInfo> getInstalledApplications(ApplicationInfoFlags flags)", "public List<ApplicationInfo> getInstalledApplicationsAsUser(int flags, int userId)", "public List<ApplicationInfo> getInstalledApplicationsAsUser(ApplicationInfoFlags flags, int userId)", "public List<InstantAppInfo> getInstantApps()", "public Drawable getInstantAppIcon(String packageName)", "public boolean isInstantApp()", "public boolean isInstantApp(String packageName)", "public int getInstantAppCookieMaxBytes()", "public int getInstantAppCookieMaxSize()", "public byte[] getInstantAppCookie()", "public void clearInstantAppCookie()", "public void updateInstantAppCookie(@NonNull byte[] cookie)", "public boolean setInstantAppCookie(@NonNull byte[] cookie)", "public ResolveInfo resolveActivity(Intent intent, int flags)", "public ResolveInfo resolveActivity(Intent intent, ResolveInfoFlags flags)", "public ResolveInfo resolveActivityAsUser(Intent intent, int flags, int userId)", "public ResolveInfo resolveActivityAsUser(Intent intent, ResolveInfoFlags flags, int userId)", "public List<ResolveInfo> queryIntentActivities(Intent intent, int flags)", "public List<ResolveInfo> queryIntentActivities(Intent intent, ResolveInfoFlags flags)", "public List<ResolveInfo> queryIntentActivitiesAsUser(Intent intent, int flags, int userId)", "public List<ResolveInfo> queryIntentActivitiesAsUser(Intent intent, ResolveInfoFlags flags, int userId)", "public List<ResolveInfo> queryIntentActivityOptions(ComponentName caller, Intent[] specifics, Intent intent, int flags)", "public List<ResolveInfo> queryIntentActivityOptions(ComponentName caller, List<Intent> specifics, Intent intent, ResolveInfoFlags flags)", "public List<ResolveInfo> queryBroadcastReceiversAsUser(Intent intent, int flags, int userId)", "public List<ResolveInfo> queryBroadcastReceiversAsUser(Intent intent, ResolveInfoFlags flags, int userId)", "public List<ResolveInfo> queryBroadcastReceivers(Intent intent, int flags)", "public List<ResolveInfo> queryBroadcastReceivers(Intent intent, ResolveInfoFlags flags)", "public ResolveInfo resolveServiceAsUser(Intent intent, int flags, @UserIdInt int userId)", "public ResolveInfo resolveServiceAsUser(Intent intent, ResolveInfoFlags flags, @UserIdInt int userId)", "public ResolveInfo resolveService(Intent intent, int flags)", "public ResolveInfo resolveService(Intent intent, ResolveInfoFlags flags)", "public List<ResolveInfo> queryIntentServicesAsUser(Intent intent, int flags, int userId)", "public List<ResolveInfo> queryIntentServicesAsUser(Intent intent, ResolveInfoFlags flags, int userId)", "public List<ResolveInfo> queryIntentServices(Intent intent, int flags)", "public List<ResolveInfo> queryIntentServices(Intent intent, ResolveInfoFlags flags)", "public List<ResolveInfo> queryIntentContentProvidersAsUser(Intent intent, int flags, int userId)", "public List<ResolveInfo> queryIntentContentProvidersAsUser(Intent intent, ResolveInfoFlags flags, int userId)", "public List<ResolveInfo> queryIntentContentProviders(Intent intent, int flags)", "public List<ResolveInfo> queryIntentContentProviders(Intent intent, ResolveInfoFlags flags)", "public ProviderInfo resolveContentProvider(String name, int flags)", "public ProviderInfo resolveContentProvider(String name, ComponentInfoFlags flags)", "public ProviderInfo resolveContentProviderAsUser(String name, int flags, int userId)", "public ProviderInfo resolveContentProviderAsUser(String name, ComponentInfoFlags flags, int userId)", "public List<ProviderInfo> queryContentProviders(String processName, int uid, int flags)", "public List<ProviderInfo> queryContentProviders(String processName, int uid, ComponentInfoFlags flags)", "public List<ProviderInfo> queryContentProviders(String processName, int uid, int flags, String metaDataKey)", "public List<ProviderInfo> queryContentProviders(String processName, int uid, ComponentInfoFlags flags, String metaDataKey)", "public InstrumentationInfo getInstrumentationInfo(ComponentName className, int flags) throws NameNotFoundException", "public List<InstrumentationInfo> queryInstrumentation(String targetPackage, int flags)", "public Drawable getDrawable(String packageName, @DrawableRes int resId, @Nullable ApplicationInfo appInfo)", "public Drawable getActivityIcon(ComponentName activityName) throws NameNotFoundException", "public Drawable getActivityIcon(Intent intent) throws NameNotFoundException", "public Drawable getDefaultActivityIcon()", "public Drawable getApplicationIcon(ApplicationInfo info)", "public Drawable getApplicationIcon(String packageName) throws NameNotFoundException", "public Drawable getActivityBanner(ComponentName activityName) throws NameNotFoundException", "public Drawable getActivityBanner(Intent intent) throws NameNotFoundException", "public Drawable getApplicationBanner(ApplicationInfo info)", "public Drawable getApplicationBanner(String packageName) throws NameNotFoundException", "public Drawable getActivityLogo(ComponentName activityName) throws NameNotFoundException", "public Drawable getActivityLogo(Intent intent) throws NameNotFoundException", "public Drawable getApplicationLogo(ApplicationInfo info)", "public Drawable getApplicationLogo(String packageName) throws NameNotFoundException", "public Drawable getUserBadgedIcon(Drawable icon, UserHandle user)", "private String getUpdatableUserIconBadgeId(UserHandle user)", "private Drawable getDefaultUserIconBadge(UserHandle user)", "public Drawable getUserBadgedDrawableForDensity(Drawable drawable, UserHandle user, Rect badgeLocation, int badgeDensity)", "private int getUserBadgeColor(UserHandle user, boolean checkTheme)", "public Drawable getUserBadgeForDensity(UserHandle user, int density)", "private String getUpdatableUserBadgeId(UserHandle user)", "private Drawable getDefaultUserBadgeForDensity(UserHandle user, int density)", "public Drawable getUserBadgeForDensityNoBackground(UserHandle user, int density)", "private Drawable getDefaultUserBadgeNoBackgroundForDensity(UserHandle user, int density)", "private Drawable getDrawableForDensity(int drawableId, int density)", "private Drawable getProfileIconForDensity(UserHandle user, int drawableId, int density)", "public CharSequence getUserBadgedLabel(CharSequence label, UserHandle user)", "public Resources getResourcesForActivity(ComponentName activityName) throws NameNotFoundException", "public Resources getResourcesForApplication(@NonNull ApplicationInfo app) throws NameNotFoundException", "public Resources getResourcesForApplication(@NonNull ApplicationInfo app, @Nullable Configuration configuration) throws NameNotFoundException", "public Resources getResourcesForApplication(String appPackageName) throws NameNotFoundException", "public Resources getResourcesForApplicationAsUser(String appPackageName, int userId) throws NameNotFoundException", "public boolean isSafeMode()", "public void addOnPermissionsChangeListener(OnPermissionsChangedListener listener)", "public void removeOnPermissionsChangeListener(OnPermissionsChangedListener listener)", " static void configurationChanged()", "private long updateFlagsForPackage(long flags, int userId)", "private long updateFlagsForApplication(long flags, int userId)", "private long updateFlagsForComponent(@ComponentInfoFlagsBits long flags, int userId, Intent intent)", "private void onImplicitDirectBoot(int userId)", "private Drawable getCachedIcon(@NonNull ResourceName name)", "private void putCachedIcon(@NonNull ResourceName name, @NonNull Drawable dr)", " static void handlePackageBroadcast(int cmd, String[] pkgList, boolean hasPkgInfo)", "private CharSequence getCachedString(ResourceName name)", "private void putCachedString(ResourceName name, CharSequence cs)", "public CharSequence getText(String packageName, @StringRes int resid, ApplicationInfo appInfo)", "public XmlResourceParser getXml(String packageName, @XmlRes int resid, ApplicationInfo appInfo)", "public CharSequence getApplicationLabel(ApplicationInfo info)", "public int installExistingPackage(String packageName) throws NameNotFoundException", "public int installExistingPackage(String packageName, int installReason) throws NameNotFoundException", "public int installExistingPackageAsUser(String packageName, int userId) throws NameNotFoundException", "private int installExistingPackageAsUser(String packageName, int installReason, int userId) throws NameNotFoundException", "public void verifyPendingInstall(int id, int response)", "public void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay)", "public void verifyIntentFilter(int id, int verificationCode, List<String> failedDomains)", "public int getIntentVerificationStatusAsUser(String packageName, int userId)", "public boolean updateIntentVerificationStatusAsUser(String packageName, int status, int userId)", "public List<IntentFilterVerificationInfo> getIntentFilterVerifications(String packageName)", "public List<IntentFilter> getAllIntentFilters(String packageName)", "public String getDefaultBrowserPackageNameAsUser(int userId)", "public boolean setDefaultBrowserPackageNameAsUser(String packageName, int userId)", "public void setInstallerPackageName(String targetPackage, String installerPackageName)", "public void setUpdateAvailable(String packageName, boolean updateAvailable)", "public String getInstallerPackageName(String packageName)", "public InstallSourceInfo getInstallSourceInfo(String packageName) throws NameNotFoundException", "public boolean isAppArchivable(String packageName) throws NameNotFoundException", "public int getMoveStatus(int moveId)", "public void registerMoveCallback(MoveCallback callback, Handler handler)", "public void unregisterMoveCallback(MoveCallback callback)", "public int movePackage(String packageName, VolumeInfo vol)", "public VolumeInfo getPackageCurrentVolume(ApplicationInfo app)", "protected VolumeInfo getPackageCurrentVolume(ApplicationInfo app, StorageManager storage)", "public List<VolumeInfo> getPackageCandidateVolumes(ApplicationInfo app)", "protected List<VolumeInfo> getPackageCandidateVolumes(ApplicationInfo app, StorageManager storageManager, IPackageManager pm)", "protected boolean isForceAllowOnExternal(Context context)", "protected boolean isAllow3rdPartyOnInternal(Context context)", "private boolean isPackageCandidateVolume(ContextImpl context, ApplicationInfo app, VolumeInfo vol, IPackageManager pm)", "public int movePrimaryStorage(VolumeInfo vol)", "public VolumeInfo getPrimaryStorageCurrentVolume()", "public List<VolumeInfo> getPrimaryStorageCandidateVolumes()", "private static boolean isPrimaryStorageCandidateVolume(VolumeInfo vol)", "public void deletePackage(String packageName, IPackageDeleteObserver observer, int flags)", "public void deletePackageAsUser(String packageName, IPackageDeleteObserver observer, int flags, int userId)", "public void clearApplicationUserData(String packageName, IPackageDataObserver observer)", "public void deleteApplicationCacheFiles(String packageName, IPackageDataObserver observer)", "public void deleteApplicationCacheFilesAsUser(String packageName, int userId, IPackageDataObserver observer)", "public void freeStorageAndNotify(String volumeUuid, long idealStorageSize, IPackageDataObserver observer)", "public void freeStorage(String volumeUuid, long freeStorageSize, IntentSender pi)", "public String[] setDistractingPackageRestrictions(String[] packages, int distractionFlags)", "public String[] setPackagesSuspended(String[] packageNames, boolean suspended, PersistableBundle appExtras, PersistableBundle launcherExtras, String dialogMessage)", "public String[] setPackagesSuspended(String[] packageNames, boolean suspended, PersistableBundle appExtras, PersistableBundle launcherExtras, SuspendDialogInfo dialogInfo)", "public String[] setPackagesSuspended(String[] packageNames, boolean suspended, PersistableBundle appExtras, PersistableBundle launcherExtras, SuspendDialogInfo dialogInfo, int flags)", "public String[] getUnsuspendablePackages(String[] packageNames)", "public Bundle getSuspendedPackageAppExtras()", "public String getSuspendingPackage(String suspendedPackage)", "public boolean isPackageSuspendedForUser(String packageName, int userId)", "public boolean isPackageSuspended(String packageName) throws NameNotFoundException", "public boolean isPackageSuspended()", "public boolean isPackageQuarantined(@NonNull String packageName) throws NameNotFoundException", "public boolean isPackageStopped(@NonNull String packageName) throws NameNotFoundException", "public void setApplicationCategoryHint(String packageName, int categoryHint)", "public void getPackageSizeInfoAsUser(String packageName, int userHandle, IPackageStatsObserver observer)", "public void addPackageToPreferred(String packageName)", "public void removePackageFromPreferred(String packageName)", "public List<PackageInfo> getPreferredPackages(int flags)", "public void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity)", "public void addPreferredActivityAsUser(IntentFilter filter, int match, ComponentName[] set, ComponentName activity, int userId)", "public void replacePreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity)", "public void replacePreferredActivityAsUser(IntentFilter filter, int match, ComponentName[] set, ComponentName activity, int userId)", "public void clearPackagePreferredActivities(String packageName)", "public void addUniquePreferredActivity(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity)", "public int getPreferredActivities(List<IntentFilter> outFilters, List<ComponentName> outActivities, String packageName)", "public ComponentName getHomeActivities(List<ResolveInfo> outActivities)", "public void setSyntheticAppDetailsActivityEnabled(String packageName, boolean enabled)", "public boolean getSyntheticAppDetailsActivityEnabled(String packageName)", "public void setComponentEnabledSetting(ComponentName componentName, int newState, int flags)", "public void setComponentEnabledSettings(List<ComponentEnabledSetting> settings)", "public int getComponentEnabledSetting(ComponentName componentName)", "public void setApplicationEnabledSetting(String packageName, int newState, int flags)", "public int getApplicationEnabledSetting(String packageName)", "public void flushPackageRestrictionsAsUser(int userId)", "public boolean setApplicationHiddenSettingAsUser(String packageName, boolean hidden, UserHandle user)", "public boolean getApplicationHiddenSettingAsUser(String packageName, UserHandle user)", "public void setSystemAppState(String packageName, @SystemAppState int state)", "public KeySet getKeySetByAlias(String packageName, String alias)", "public KeySet getSigningKeySet(String packageName)", "public boolean isSignedBy(String packageName, KeySet ks)", "public boolean isSignedByExactly(String packageName, KeySet ks)", "public VerifierDeviceIdentity getVerifierDeviceIdentity()", "public boolean isUpgrade()", "public boolean isDeviceUpgrading()", "public PackageInstaller getPackageInstaller()", "public boolean isPackageAvailable(String packageName)", "public void addCrossProfileIntentFilter(IntentFilter filter, int sourceUserId, int targetUserId, int flags)", "public boolean removeCrossProfileIntentFilter(IntentFilter filter, int sourceUserId, int targetUserId, int flags)", "public void clearCrossProfileIntentFilters(int sourceUserId)", "public Drawable loadItemIcon(PackageItemInfo itemInfo, ApplicationInfo appInfo)", "public Drawable loadUnbadgedItemIcon(@NonNull PackageItemInfo itemInfo, @Nullable ApplicationInfo appInfo)", "private Drawable getBadgedDrawable(Drawable drawable, Drawable badgeDrawable, Rect badgeLocation, boolean tryBadgeInPlace)", "private boolean hasUserBadge(int userId)", "public int getInstallReason(String packageName, UserHandle user)", "public boolean canRequestPackageInstalls()", "public ComponentName getInstantAppResolverSettingsComponent()", "public ComponentName getInstantAppInstallerComponent()", "public String getInstantAppAndroidId(String packageName, UserHandle user)", "public void registerDexModule(@NonNull String dexModule, @Nullable DexModuleRegisterCallback callback)", "public CharSequence getHarmfulAppWarning(String packageName)", "public void setHarmfulAppWarning(String packageName, CharSequence warning)", "public ArtManager getArtManager()", "public String getDefaultTextClassifierPackageName()", "public String getSystemTextClassifierPackageName()", "public String getAttentionServicePackageName()", "public String getRotationResolverPackageName()", "public String getWellbeingPackageName()", "public String getAppPredictionServicePackageName()", "public String getSystemCaptionsServicePackageName()", "public String getSetupWizardPackageName()", "public String getIncidentReportApproverPackageName()", "public boolean isPackageStateProtected(String packageName, int userId)", "public void sendDeviceCustomizationReadyBroadcast()", "public boolean isAutoRevokeWhitelisted()", "public void setMimeGroup(String mimeGroup, Set<String> mimeTypes)", "public Set<String> getMimeGroup(String group)", "public Property getProperty(String propertyName, String packageName) throws NameNotFoundException", "public Property getProperty(String propertyName, ComponentName component) throws NameNotFoundException", "public Property getPropertyAsUser(@NonNull String propertyName, @NonNull String packageName, @Nullable String className, int userId) throws NameNotFoundException", "public List<Property> queryApplicationProperty(String propertyName)", "public List<Property> queryActivityProperty(String propertyName)", "public List<Property> queryProviderProperty(String propertyName)", "public List<Property> queryReceiverProperty(String propertyName)", "public List<Property> queryServiceProperty(String propertyName)", "public boolean canPackageQuery(@NonNull String sourcePackageName, @NonNull String targetPackageName) throws NameNotFoundException", "public boolean[] canPackageQuery(@NonNull String sourcePackageName, @NonNull String[] targetPackageNames) throws NameNotFoundException", "public void makeUidVisible(int recipientUid, int visibleUid)", "public ArchivedPackageInfo getArchivedPackage(@NonNull String packageName)", "public boolean canUserUninstall(String packageName, UserHandle user)", "public boolean shouldShowNewAppInstalledNotification()", "public void relinquishUpdateOwnership(String targetPackage)", "public void registerPackageMonitorCallback(@NonNull IRemoteCallback callback, int userId)", "public void unregisterPackageMonitorCallback(@NonNull IRemoteCallback callback)", "private Drawable getArchivedAppIcon(String packageName)", "public T parseAndroidManifest(@NonNull File apkFile, @NonNull Function<XmlResourceParser, T> parserFunction) throws IOException", "private static XmlResourceParser getAndroidManifestParser(@NonNull File apkFile) throws IOException", "public TypedArray extractPackageItemInfoAttributes(PackageItemInfo info, String name, String rootTag, int[] attributes)" ],
  "variableNames" : [ "TAG", "DEBUG_ICONS", "DEFAULT_EPHEMERAL_COOKIE_MAX_SIZE_BYTES", "sDefaultFlags", "DEFAULT_CHECKSUMS", "APP_PERMISSION_BUTTON_ALLOW_ALWAYS", "PERMISSION_CONTROLLER_RESOURCE_PACKAGE", "mUserManager", "mPermissionManager", "mInstaller", "mArtManager", "mDevicePolicyManager", "mPermissionsControllerPackageName", "mDelegates", "mPackageMonitorCallbacks", "mHasSystemFeatureCache", "CACHE_KEY_PACKAGES_FOR_UID_PROPERTY", "mGetPackagesForUidCache", "mCachedSafeMode", "mContext", "mPM", "mUserUnlocked", "sSync", "sIconCache", "sStringCache" ]
}