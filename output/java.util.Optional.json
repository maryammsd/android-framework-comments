{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Optional.java",
  "packageName" : "java.util",
  "className" : "Optional",
  "comment" : "\n * A container object which may or may not contain a non-{@code null} value.\n * If a value is present, {@code isPresent()} returns {@code true}. If no\n * value is present, the object is considered <i>empty</i> and\n * {@code isPresent()} returns {@code false}.\n *\n * <p>Additional methods that depend on the presence or absence of a contained\n * value are provided, such as {@link #orElse(Object) orElse()}\n * (returns a default value if no value is present) and\n * {@link #ifPresent(Consumer) ifPresent()} (performs an\n * action if a value is present).\n *\n * <p>This is a <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/doc-files/ValueBased.html\">value-based</a>\n * class; programmers should treat instances that are\n * {@linkplain #equals(Object) equal} as interchangeable and should not\n * use instances for synchronization, or unpredictable behavior may\n * occur. For example, in a future release, synchronization may fail.\n *\n * @apiNote\n * {@code Optional} is primarily intended for use as a method return type where\n * there is a clear need to represent \"no result,\" and where using {@code null}\n * is likely to cause errors. A variable whose type is {@code Optional} should\n * never itself be {@code null}; it should always point to an {@code Optional}\n * instance.\n *\n * @param <T> the type of value\n * @since 1.8\n ",
  "links" : [ "#orElse(Object)", "#ifPresent(Consumer)" ],
  "variables" : [ {
    "name" : "EMPTY",
    "type" : "Optional<?>",
    "comment" : "\n     * Common instance for {@code empty()}.\n     ",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "T",
    "comment" : "\n     * If non-null, the value; if null, indicates no value is present\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Optional<T> empty()",
    "returnType" : "Optional<T>",
    "comment" : "\n     * Returns an empty {@code Optional} instance.  No value is present for this\n     * {@code Optional}.\n     *\n     * @apiNote\n     * Though it may be tempting to do so, avoid testing if an object is empty\n     * by comparing with {@code ==} or {@code !=} against instances returned by\n     * {@code Optional.empty()}.  There is no guarantee that it is a singleton.\n     * Instead, use {@link #isEmpty()} or {@link #isPresent()}.\n     *\n     * @param <T> The type of the non-existent value\n     * @return an empty {@code Optional}\n     ",
    "links" : [ "#isEmpty()", "#isPresent()" ]
  }, {
    "name" : "public static Optional<T> of(T value)",
    "returnType" : "Optional<T>",
    "comment" : "\n     * Returns an {@code Optional} describing the given non-{@code null}\n     * value.\n     *\n     * @param value the value to describe, which must be non-{@code null}\n     * @param <T> the type of the value\n     * @return an {@code Optional} with the value present\n     * @throws NullPointerException if value is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Optional<T> ofNullable(T value)",
    "returnType" : "Optional<T>",
    "comment" : "\n     * Returns an {@code Optional} describing the given value, if\n     * non-{@code null}, otherwise returns an empty {@code Optional}.\n     *\n     * @param value the possibly-{@code null} value to describe\n     * @param <T> the type of the value\n     * @return an {@code Optional} with a present value if the specified value\n     *         is non-{@code null}, otherwise an empty {@code Optional}\n     ",
    "links" : [ ]
  }, {
    "name" : "public T get()",
    "returnType" : "T",
    "comment" : "\n     * If a value is present, returns the value, otherwise throws\n     * {@code NoSuchElementException}.\n     *\n     * @apiNote\n     * The preferred alternative to this method is {@link #orElseThrow()}.\n     *\n     * @return the non-{@code null} value described by this {@code Optional}\n     * @throws NoSuchElementException if no value is present\n     ",
    "links" : [ "#orElseThrow()" ]
  }, {
    "name" : "public boolean isPresent()",
    "returnType" : "boolean",
    "comment" : "\n     * If a value is present, returns {@code true}, otherwise {@code false}.\n     *\n     * @return {@code true} if a value is present, otherwise {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * If a value is  not present, returns {@code true}, otherwise\n     * {@code false}.\n     *\n     * @return  {@code true} if a value is not present, otherwise {@code false}\n     * @since   11\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ifPresent(Consumer<? super T> action)",
    "returnType" : "void",
    "comment" : "\n     * If a value is present, performs the given action with the value,\n     * otherwise does nothing.\n     *\n     * @param action the action to be performed, if a value is present\n     * @throws NullPointerException if value is present and the given action is\n     *         {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ifPresentOrElse(Consumer<? super T> action, Runnable emptyAction)",
    "returnType" : "void",
    "comment" : "\n     * If a value is present, performs the given action with the value,\n     * otherwise performs the given empty-based action.\n     *\n     * @param action the action to be performed, if a value is present\n     * @param emptyAction the empty-based action to be performed, if no value is\n     *        present\n     * @throws NullPointerException if a value is present and the given action\n     *         is {@code null}, or no value is present and the given empty-based\n     *         action is {@code null}.\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public Optional<T> filter(Predicate<? super T> predicate)",
    "returnType" : "Optional<T>",
    "comment" : "\n     * If a value is present, and the value matches the given predicate,\n     * returns an {@code Optional} describing the value, otherwise returns an\n     * empty {@code Optional}.\n     *\n     * @param predicate the predicate to apply to a value, if present\n     * @return an {@code Optional} describing the value of this\n     *         {@code Optional}, if a value is present and the value matches the\n     *         given predicate, otherwise an empty {@code Optional}\n     * @throws NullPointerException if the predicate is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Optional<U> map(Function<? super T, ? extends U> mapper)",
    "returnType" : "Optional<U>",
    "comment" : "\n     * If a value is present, returns an {@code Optional} describing (as if by\n     * {@link #ofNullable}) the result of applying the given mapping function to\n     * the value, otherwise returns an empty {@code Optional}.\n     *\n     * <p>If the mapping function returns a {@code null} result then this method\n     * returns an empty {@code Optional}.\n     *\n     * @apiNote\n     * This method supports post-processing on {@code Optional} values, without\n     * the need to explicitly check for a return status.  For example, the\n     * following code traverses a stream of URIs, selects one that has not\n     * yet been processed, and creates a path from that URI, returning\n     * an {@code Optional<Path>}:\n     *\n     * <pre>{@code\n     *     Optional<Path> p =\n     *         uris.stream().filter(uri -> !isProcessedYet(uri))\n     *                       .findFirst()\n     *                       .map(Paths::get);\n     * }</pre>\n     *\n     * Here, {@code findFirst} returns an {@code Optional<URI>}, and then\n     * {@code map} returns an {@code Optional<Path>} for the desired\n     * URI if one exists.\n     *\n     * @param mapper the mapping function to apply to a value, if present\n     * @param <U> The type of the value returned from the mapping function\n     * @return an {@code Optional} describing the result of applying a mapping\n     *         function to the value of this {@code Optional}, if a value is\n     *         present, otherwise an empty {@code Optional}\n     * @throws NullPointerException if the mapping function is {@code null}\n     ",
    "links" : [ "#ofNullable" ]
  }, {
    "name" : "public Optional<U> flatMap(Function<? super T, ? extends Optional<? extends U>> mapper)",
    "returnType" : "Optional<U>",
    "comment" : "\n     * If a value is present, returns the result of applying the given\n     * {@code Optional}-bearing mapping function to the value, otherwise returns\n     * an empty {@code Optional}.\n     *\n     * <p>This method is similar to {@link #map(Function)}, but the mapping\n     * function is one whose result is already an {@code Optional}, and if\n     * invoked, {@code flatMap} does not wrap it within an additional\n     * {@code Optional}.\n     *\n     * @param <U> The type of value of the {@code Optional} returned by the\n     *            mapping function\n     * @param mapper the mapping function to apply to a value, if present\n     * @return the result of applying an {@code Optional}-bearing mapping\n     *         function to the value of this {@code Optional}, if a value is\n     *         present, otherwise an empty {@code Optional}\n     * @throws NullPointerException if the mapping function is {@code null} or\n     *         returns a {@code null} result\n     ",
    "links" : [ "#map(Function)" ]
  }, {
    "name" : "public Optional<T> or(Supplier<? extends Optional<? extends T>> supplier)",
    "returnType" : "Optional<T>",
    "comment" : "\n     * If a value is present, returns an {@code Optional} describing the value,\n     * otherwise returns an {@code Optional} produced by the supplying function.\n     *\n     * @param supplier the supplying function that produces an {@code Optional}\n     *        to be returned\n     * @return returns an {@code Optional} describing the value of this\n     *         {@code Optional}, if a value is present, otherwise an\n     *         {@code Optional} produced by the supplying function.\n     * @throws NullPointerException if the supplying function is {@code null} or\n     *         produces a {@code null} result\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public Stream<T> stream()",
    "returnType" : "Stream<T>",
    "comment" : "\n     * If a value is present, returns a sequential {@link Stream} containing\n     * only that value, otherwise returns an empty {@code Stream}.\n     *\n     * @apiNote\n     * This method can be used to transform a {@code Stream} of optional\n     * elements to a {@code Stream} of present value elements:\n     * <pre>{@code\n     *     Stream<Optional<T>> os = ..\n     *     Stream<T> s = os.flatMap(Optional::stream)\n     * }</pre>\n     *\n     * @return the optional value as a {@code Stream}\n     * @since 9\n     ",
    "links" : [ "java.util.stream.Stream" ]
  }, {
    "name" : "public T orElse(T other)",
    "returnType" : "T",
    "comment" : "\n     * If a value is present, returns the value, otherwise returns\n     * {@code other}.\n     *\n     * @param other the value to be returned, if no value is present.\n     *        May be {@code null}.\n     * @return the value, if present, otherwise {@code other}\n     ",
    "links" : [ ]
  }, {
    "name" : "public T orElseGet(Supplier<? extends T> supplier)",
    "returnType" : "T",
    "comment" : "\n     * If a value is present, returns the value, otherwise returns the result\n     * produced by the supplying function.\n     *\n     * @param supplier the supplying function that produces a value to be returned\n     * @return the value, if present, otherwise the result produced by the\n     *         supplying function\n     * @throws NullPointerException if no value is present and the supplying\n     *         function is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public T orElseThrow()",
    "returnType" : "T",
    "comment" : "\n     * If a value is present, returns the value, otherwise throws\n     * {@code NoSuchElementException}.\n     *\n     * @return the non-{@code null} value described by this {@code Optional}\n     * @throws NoSuchElementException if no value is present\n     * @since 10\n     ",
    "links" : [ ]
  }, {
    "name" : "public T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X",
    "returnType" : "T",
    "comment" : "\n     * If a value is present, returns the value, otherwise throws an exception\n     * produced by the exception supplying function.\n     *\n     * @apiNote\n     * A method reference to the exception constructor with an empty argument\n     * list can be used as the supplier. For example,\n     * {@code IllegalStateException::new}\n     *\n     * @param <X> Type of the exception to be thrown\n     * @param exceptionSupplier the supplying function that produces an\n     *        exception to be thrown\n     * @return the value, if present\n     * @throws X if no value is present\n     * @throws NullPointerException if no value is present and the exception\n     *          supplying function is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether some other object is \"equal to\" this {@code Optional}.\n     * The other object is considered equal if:\n     * <ul>\n     * <li>it is also an {@code Optional} and;\n     * <li>both instances have no value present or;\n     * <li>the present values are \"equal to\" each other via {@code equals()}.\n     * </ul>\n     *\n     * @param obj an object to be tested for equality\n     * @return {@code true} if the other object is \"equal to\" this object\n     *         otherwise {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code of the value, if present, otherwise {@code 0}\n     * (zero) if no value is present.\n     *\n     * @return hash code value of the present value or {@code 0} if no value is\n     *         present\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a non-empty string representation of this {@code Optional}\n     * suitable for debugging.  The exact presentation format is unspecified and\n     * may vary between implementations and versions.\n     *\n     * @implSpec\n     * If a value is present the result must include its string representation\n     * in the result.  Empty and present {@code Optional}s must be unambiguously\n     * differentiable.\n     *\n     * @return the string representation of this instance\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Optional<T> empty()", "public static Optional<T> of(T value)", "public static Optional<T> ofNullable(T value)", "public T get()", "public boolean isPresent()", "public boolean isEmpty()", "public void ifPresent(Consumer<? super T> action)", "public void ifPresentOrElse(Consumer<? super T> action, Runnable emptyAction)", "public Optional<T> filter(Predicate<? super T> predicate)", "public Optional<U> map(Function<? super T, ? extends U> mapper)", "public Optional<U> flatMap(Function<? super T, ? extends Optional<? extends U>> mapper)", "public Optional<T> or(Supplier<? extends Optional<? extends T>> supplier)", "public Stream<T> stream()", "public T orElse(T other)", "public T orElseGet(Supplier<? extends T> supplier)", "public T orElseThrow()", "public T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "EMPTY", "value" ]
}