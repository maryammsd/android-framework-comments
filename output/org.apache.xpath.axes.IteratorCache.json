{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/NodeSequence.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "IteratorCache",
  "comment" : "\n    * Each NodeSequence object has an iterator which is \"walked\".\n    * As an iterator is walked one obtains nodes from it.\n    * As those nodes are obtained they may be cached, making\n    * the next walking of a copy or clone of the iterator faster.\n    * This field (m_cache) is a reference to such a cache, \n    * which is populated as the iterator is walked.\n    * <p>\n    * Note that multiple NodeSequence objects may hold a \n    * reference to the same cache, and also \n    * (and this is important) the same iterator.\n    * The iterator and its cache may be shared among \n    * many NodeSequence objects.\n    * <p>\n    * If one of the NodeSequence objects walks ahead\n    * of the others it fills in the cache.\n    * As the others NodeSequence objects catch up they\n    * get their values from\n    * the cache rather than the iterator itself, so\n    * the iterator is only ever walked once and everyone\n    * benefits from the cache.\n    * <p>\n    * At some point the cache may be\n    * complete due to walking to the end of one of\n    * the copies of the iterator, and the cache is\n    * then marked as \"complete\".\n    * and the cache will have no more nodes added to it.\n    * <p>\n    * Its use-count is the number of NodeSequence objects that use it.\n    ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_vec2",
    "type" : "NodeVector",
    "comment" : "\n        * A list of nodes already obtained from the iterator.\n        * As the iterator is walked the nodes obtained from\n        * it are appended to this list.\n        * <p>\n        * Both an iterator and its corresponding cache can\n        * be shared by multiple NodeSequence objects.\n        * <p>\n        * For example, consider three NodeSequence objects\n        * ns1, ns2 and ns3 doing such sharing, and the\n        * nodes to be obtaind from the iterator being \n        * the sequence { 33, 11, 44, 22, 55 }.\n        * <p>\n        * If ns3.nextNode() is called 3 times the the\n        * underlying iterator will have walked through\n        * 33, 11, 55 and these three nodes will have been put\n        * in the cache.\n        * <p>\n        * If ns2.nextNode() is called 2 times it will return\n        * 33 and 11 from the cache, leaving the iterator alone.\n        * <p>\n        * If ns1.nextNode() is called 6 times it will return\n        * 33 and 11 from the cache, then get 44, 22, 55 from\n        * the iterator, and appending 44, 22, 55 to the cache.\n        * On the sixth call it is found that the iterator is\n        * exhausted and the cache is marked complete.\n        * <p>\n        * Should ns2 or ns3 have nextNode() called they will\n        * know that the cache is complete, and they will\n        * obtain all subsequent nodes from the cache.\n        * <p>\n        * Note that the underlying iterator, though shared\n        * is only ever walked once. \n        ",
    "links" : [ ]
  }, {
    "name" : "m_isComplete2",
    "type" : "boolean",
    "comment" : "\n         * true if the associated iterator is exhausted and\n         * all nodes obtained from it are in the cache.\n         ",
    "links" : [ ]
  }, {
    "name" : "m_useCount2",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private int useCount()",
    "returnType" : "int",
    "comment" : "\n         * Returns count of how many NodeSequence objects share this\n         * IteratorCache object.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void increaseUseCount()",
    "returnType" : "void",
    "comment" : "\n         * This method is called when yet another\n         * NodeSequence object uses, or shares\n         * this same cache.\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setVector(NodeVector nv)",
    "returnType" : "void",
    "comment" : "\n         * Sets the NodeVector that holds the\n         * growing list of nodes as they are appended\n         * to the cached list.\n         ",
    "links" : [ ]
  }, {
    "name" : "private NodeVector getVector()",
    "returnType" : "NodeVector",
    "comment" : "\n         * Get the cached list of nodes obtained from\n         * the iterator so far.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setCacheComplete(boolean b)",
    "returnType" : "void",
    "comment" : "\n         * Call this method with 'true' if the\n         * iterator is exhausted and the cached list\n         * is complete, or no longer growing.\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean isComplete()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if no cache is complete\n         * and immutable.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private int useCount()", "private void increaseUseCount()", "private void setVector(NodeVector nv)", "private NodeVector getVector()", "private void setCacheComplete(boolean b)", "private boolean isComplete()" ],
  "variableNames" : [ "m_vec2", "m_isComplete2", "m_useCount2" ]
}