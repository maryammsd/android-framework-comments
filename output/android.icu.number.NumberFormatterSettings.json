{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/number/NumberFormatterSettings.java",
  "packageName" : "android.icu.number",
  "className" : "NumberFormatterSettings",
  "comment" : "\n * An abstract base class for specifying settings related to number formatting. This class is implemented\n * by {@link UnlocalizedNumberFormatter} and {@link LocalizedNumberFormatter}. This class is not intended\n * for public subclassing.\n *\n * @see NumberFormatter\n ",
  "links" : [ "android.icu.number.LocalizedNumberFormatter", "android.icu.number.UnlocalizedNumberFormatter" ],
  "variables" : [ {
    "name" : "KEY_MACROS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_LOCALE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_NOTATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_UNIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_PRECISION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_ROUNDING_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_GROUPING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_PADDER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_INTEGER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SYMBOLS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_UNIT_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SIGN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DECIMAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SCALE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_THRESHOLD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_PER_UNIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_USAGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_UNIT_DISPLAY_CASE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parent",
    "type" : "NumberFormatterSettings<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "key",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "resolvedMacros",
    "type" : "MacroProps",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public T notation(Notation notation)",
    "returnType" : "T",
    "comment" : "\n     * Specifies the notation style (simple, scientific, or compact) for rendering numbers.\n     *\n     * <ul>\n     * <li>Simple notation: \"12,300\"\n     * <li>Scientific notation: \"1.23E4\"\n     * <li>Compact notation: \"12K\"\n     * </ul>\n     *\n     * <p>\n     * All notation styles will be properly localized with locale data, and all notation styles are\n     * compatible with units, rounding strategies, and other number formatter settings.\n     *\n     * <p>\n     * Pass this method the return value of a {@link Notation} factory method. For example:\n     *\n     * <pre>\n     * NumberFormatter.with().notation(Notation.compactShort())\n     * </pre>\n     *\n     * The default is to use simple notation.\n     *\n     * @param notation\n     *            The notation strategy to use.\n     * @return The fluent chain.\n     * @see Notation\n     ",
    "links" : [ "android.icu.number.Notation" ]
  }, {
    "name" : "public T unit(MeasureUnit unit)",
    "returnType" : "T",
    "comment" : "\n     * Specifies the unit (unit of measure, currency, or percent) to associate with rendered numbers.\n     *\n     * <ul>\n     * <li>Unit of measure: \"12.3 meters\"\n     * <li>Currency: \"$12.30\"\n     * <li>Percent: \"12.3%\"\n     * </ul>\n     *\n     * <p>\n     * <strong>Note:</strong> The unit can also be specified by passing a {@link Measure} to\n     * {@link LocalizedNumberFormatter#format(Measure)}. Units specified via the format method take\n     * precedence over units specified here. This setter is designed for situations when the unit is\n     * constant for the duration of the number formatting process.\n     *\n     * <p>\n     * All units will be properly localized with locale data, and all units are compatible with notation\n     * styles, rounding strategies, and other number formatter settings.\n     *\n     * <p>\n     * Pass this method any instance of {@link MeasureUnit}. For units of measure:\n     *\n     * <pre>\n     * NumberFormatter.with().unit(MeasureUnit.METER)\n     * </pre>\n     *\n     * Currency:\n     *\n     * <pre>\n     * NumberFormatter.with().unit(Currency.getInstance(\"USD\"))\n     * </pre>\n     *\n     * <p>\n     * See {@link #perUnit} for information on how to format strings like \"5 meters per second\".\n     *\n     * <p>\n     * If the input usage is correctly set the output unit <b>will change</b>\n     * according to {@code usage}, {@code locale} and {@code unit} value.\n     * </p>\n     *\n     * @param unit\n     *            The unit to render.\n     * @return The fluent chain.\n     * @see MeasureUnit\n     * @see Currency\n     * @see #perUnit\n     ",
    "links" : [ "#perUnit", "android.icu.number.LocalizedNumberFormatter#format(Measure)", "android.icu.util.Measure", "android.icu.util.MeasureUnit" ]
  }, {
    "name" : "public T perUnit(MeasureUnit perUnit)",
    "returnType" : "T",
    "comment" : "\n     * Sets a unit to be used in the denominator. For example, to format \"3 m/s\", pass METER to the unit\n     * and SECOND to the perUnit.\n     *\n     * <p>\n     * Pass this method any instance of {@link MeasureUnit}. For example:\n     *\n     * <pre>\n     * NumberFormatter.with().unit(MeasureUnit.METER).perUnit(MeasureUnit.SECOND)\n     * </pre>\n     *\n     * <p>\n     * The default is not to display any unit in the denominator.\n     *\n     * <p>\n     * If a per-unit is specified without a primary unit via {@link #unit}, the behavior is undefined.\n     *\n     * @param perUnit\n     *            The unit to render in the denominator.\n     * @return The fluent chain\n     * @see #unit\n     ",
    "links" : [ "#unit", "android.icu.util.MeasureUnit" ]
  }, {
    "name" : "public T precision(Precision precision)",
    "returnType" : "T",
    "comment" : "\n     * Specifies the rounding precision to use when formatting numbers.\n     *\n     * <ul>\n     * <li>Round to 3 decimal places: \"3.142\"\n     * <li>Round to 3 significant figures: \"3.14\"\n     * <li>Round to the closest nickel: \"3.15\"\n     * <li>Do not perform rounding: \"3.1415926...\"\n     * </ul>\n     *\n     * <p>\n     * Pass this method the return value of one of the factory methods on {@link Precision}. For example:\n     *\n     * <pre>\n     * NumberFormatter.with().precision(Precision.fixedFraction(2))\n     * </pre>\n     *\n     * <p>\n     * In most cases, the default rounding precision is to round to 6 fraction places; i.e.,\n     * <code>Precision.maxFraction(6)</code>. The exceptions are if compact notation is being used, then\n     * the compact notation rounding precision is used (see {@link Notation#compactShort} for details), or\n     * if the unit is a currency, then standard currency rounding is used, which varies from currency to\n     * currency (see {@link Precision#currency} for details).\n     *\n     * @param precision\n     *            The rounding precision to use.\n     * @return The fluent chain.\n     * @see Precision\n     ",
    "links" : [ "android.icu.number.Precision", "android.icu.number.Notation#compactShort", "android.icu.number.Precision#currency" ]
  }, {
    "name" : "public T roundingMode(RoundingMode roundingMode)",
    "returnType" : "T",
    "comment" : "\n     * Specifies how to determine the direction to round a number when it has more digits than fit in the\n     * desired precision.  When formatting 1.235:\n     *\n     * <ul>\n     * <li>Ceiling rounding mode with integer precision: \"2\"\n     * <li>Half-down rounding mode with 2 fixed fraction digits: \"1.23\"\n     * <li>Half-up rounding mode with 2 fixed fraction digits: \"1.24\"\n     * </ul>\n     *\n     * The default is HALF_EVEN. For more information on rounding mode, see the ICU userguide here:\n     *\n     * https://unicode-org.github.io/icu/userguide/format_parse/numbers/rounding-modes\n     *\n     * @param roundingMode\n     *            The rounding mode to use.\n     * @return The fluent chain.\n     * @see Precision\n     ",
    "links" : [ ]
  }, {
    "name" : "public T grouping(GroupingStrategy strategy)",
    "returnType" : "T",
    "comment" : "\n     * Specifies the grouping strategy to use when formatting numbers.\n     *\n     * <ul>\n     * <li>Default grouping: \"12,300\" and \"1,230\"\n     * <li>Grouping with at least 2 digits: \"12,300\" and \"1230\"\n     * <li>No grouping: \"12300\" and \"1230\"\n     * </ul>\n     *\n     * <p>\n     * The exact grouping widths will be chosen based on the locale.\n     *\n     * <p>\n     * Pass this method an element from the {@link GroupingStrategy} enum. For example:\n     *\n     * <pre>\n     * NumberFormatter.with().grouping(GroupingStrategy.MIN2)\n     * </pre>\n     *\n     * The default is to perform grouping according to locale data; most locales, but not all locales,\n     * enable it by default.\n     *\n     * @param strategy\n     *            The grouping strategy to use.\n     * @return The fluent chain.\n     * @see GroupingStrategy\n     ",
    "links" : [ "android.icu.number.NumberFormatter.GroupingStrategy" ]
  }, {
    "name" : "public T integerWidth(IntegerWidth style)",
    "returnType" : "T",
    "comment" : "\n     * Specifies the minimum and maximum number of digits to render before the decimal mark.\n     *\n     * <ul>\n     * <li>Zero minimum integer digits: \".08\"\n     * <li>One minimum integer digit: \"0.08\"\n     * <li>Two minimum integer digits: \"00.08\"\n     * </ul>\n     *\n     * <p>\n     * Pass this method the return value of {@link IntegerWidth#zeroFillTo(int)}. For example:\n     *\n     * <pre>\n     * NumberFormatter.with().integerWidth(IntegerWidth.zeroFillTo(2))\n     * </pre>\n     *\n     * The default is to have one minimum integer digit.\n     *\n     * @param style\n     *            The integer width to use.\n     * @return The fluent chain.\n     * @see IntegerWidth\n     ",
    "links" : [ "android.icu.number.IntegerWidth#zeroFillTo(int)" ]
  }, {
    "name" : "public T symbols(DecimalFormatSymbols symbols)",
    "returnType" : "T",
    "comment" : "\n     * Specifies the symbols (decimal separator, grouping separator, percent sign, numerals, etc.) to use\n     * when rendering numbers.\n     *\n     * <ul>\n     * <li><em>en_US</em> symbols: \"12,345.67\"\n     * <li><em>fr_FR</em> symbols: \"12&nbsp;345,67\"\n     * <li><em>de_CH</em> symbols: \"12’345.67\"\n     * <li><em>my_MY</em> symbols: \"၁၂,၃၄၅.၆၇\"\n     * </ul>\n     *\n     * <p>\n     * Pass this method an instance of {@link DecimalFormatSymbols}. For example:\n     *\n     * <pre>\n     * NumberFormatter.with().symbols(DecimalFormatSymbols.getInstance(new ULocale(\"de_CH\")))\n     * </pre>\n     *\n     * <p>\n     * <strong>Note:</strong> DecimalFormatSymbols automatically chooses the best numbering system based\n     * on the locale. In the examples above, the first three are using the Latin numbering system, and\n     * the fourth is using the Myanmar numbering system.\n     *\n     * <p>\n     * <strong>Note:</strong> The instance of DecimalFormatSymbols will be copied: changes made to the\n     * symbols object after passing it into the fluent chain will not be seen.\n     *\n     * <p>\n     * <strong>Note:</strong> Calling this method will override the NumberingSystem previously specified\n     * in {@link #symbols(NumberingSystem)}.\n     *\n     * <p>\n     * The default is to choose the symbols based on the locale specified in the fluent chain.\n     *\n     * @param symbols\n     *            The DecimalFormatSymbols to use.\n     * @return The fluent chain.\n     * @see DecimalFormatSymbols\n     ",
    "links" : [ "#symbols(NumberingSystem)", "android.icu.text.DecimalFormatSymbols" ]
  }, {
    "name" : "public T symbols(NumberingSystem ns)",
    "returnType" : "T",
    "comment" : "\n     * Specifies that the given numbering system should be used when fetching symbols.\n     *\n     * <ul>\n     * <li>Latin numbering system: \"12,345\"\n     * <li>Myanmar numbering system: \"၁၂,၃၄၅\"\n     * <li>Math Sans Bold numbering system: \"\uD835\uDFED\uD835\uDFEE,\uD835\uDFEF\uD835\uDFF0\uD835\uDFF1\"\n     * </ul>\n     *\n     * <p>\n     * Pass this method an instance of {@link NumberingSystem}. For example, to force the locale to\n     * always use the Latin alphabet numbering system (ASCII digits):\n     *\n     * <pre>\n     * NumberFormatter.with().symbols(NumberingSystem.LATIN)\n     * </pre>\n     *\n     * <p>\n     * <strong>Note:</strong> Calling this method will override the DecimalFormatSymbols previously\n     * specified in {@link #symbols(DecimalFormatSymbols)}.\n     *\n     * <p>\n     * The default is to choose the best numbering system for the locale.\n     *\n     * @param ns\n     *            The NumberingSystem to use.\n     * @return The fluent chain.\n     * @see NumberingSystem\n     ",
    "links" : [ "android.icu.text.NumberingSystem", "#symbols(DecimalFormatSymbols)" ]
  }, {
    "name" : "public T unitWidth(UnitWidth style)",
    "returnType" : "T",
    "comment" : "\n     * Sets the width of the unit (measure unit or currency). Most common values:\n     *\n     * <ul>\n     * <li>Short: \"$12.00\", \"12 m\"\n     * <li>ISO Code: \"USD 12.00\"\n     * <li>Full name: \"12.00 US dollars\", \"12 meters\"\n     * </ul>\n     *\n     * <p>\n     * Pass an element from the {@link UnitWidth} enum to this setter. For example:\n     *\n     * <pre>\n     * NumberFormatter.with().unitWidth(UnitWidth.FULL_NAME)\n     * </pre>\n     *\n     * <p>\n     * The default is the SHORT width.\n     *\n     * @param style\n     *            The width to use when rendering numbers.\n     * @return The fluent chain\n     * @see UnitWidth\n     ",
    "links" : [ "android.icu.number.NumberFormatter.UnitWidth" ]
  }, {
    "name" : "public T sign(SignDisplay style)",
    "returnType" : "T",
    "comment" : "\n     * Sets the plus/minus sign display strategy. Most common values:\n     *\n     * <ul>\n     * <li>Auto: \"123\", \"-123\"\n     * <li>Always: \"+123\", \"-123\"\n     * <li>Accounting: \"$123\", \"($123)\"\n     * </ul>\n     *\n     * <p>\n     * Pass an element from the {@link SignDisplay} enum to this setter. For example:\n     *\n     * <pre>\n     * NumberFormatter.with().sign(SignDisplay.ALWAYS)\n     * </pre>\n     *\n     * <p>\n     * The default is AUTO sign display.\n     *\n     * @param style\n     *            The sign display strategy to use when rendering numbers.\n     * @return The fluent chain\n     * @see SignDisplay\n     ",
    "links" : [ "android.icu.number.NumberFormatter.SignDisplay" ]
  }, {
    "name" : "public T decimal(DecimalSeparatorDisplay style)",
    "returnType" : "T",
    "comment" : "\n     * Sets the decimal separator display strategy. This affects integer numbers with no fraction part.\n     * Most common values:\n     *\n     * <ul>\n     * <li>Auto: \"1\"\n     * <li>Always: \"1.\"\n     * </ul>\n     *\n     * <p>\n     * Pass an element from the {@link DecimalSeparatorDisplay} enum to this setter. For example:\n     *\n     * <pre>\n     * NumberFormatter.with().decimal(DecimalSeparatorDisplay.ALWAYS)\n     * </pre>\n     *\n     * <p>\n     * The default is AUTO decimal separator display.\n     *\n     * @param style\n     *            The decimal separator display strategy to use when rendering numbers.\n     * @return The fluent chain\n     * @see DecimalSeparatorDisplay\n     ",
    "links" : [ "android.icu.number.NumberFormatter.DecimalSeparatorDisplay" ]
  }, {
    "name" : "public T scale(Scale scale)",
    "returnType" : "T",
    "comment" : "\n     * Sets a scale (multiplier) to be used to scale the number by an arbitrary amount before formatting.\n     * Most common values:\n     *\n     * <ul>\n     * <li>Multiply by 100: useful for percentages.\n     * <li>Multiply by an arbitrary value: useful for unit conversions.\n     * </ul>\n     *\n     * <p>\n     * Pass an element from a {@link Scale} factory method to this setter. For example:\n     *\n     * <pre>\n     * NumberFormatter.with().scale(Scale.powerOfTen(2))\n     * </pre>\n     *\n     * <p>\n     * The default is to not apply any multiplier.\n     *\n     * @param scale\n     *            An amount to be multiplied against numbers before formatting.\n     * @return The fluent chain\n     * @see Scale\n     ",
    "links" : [ "android.icu.number.Scale" ]
  }, {
    "name" : "public T usage(String usage)",
    "returnType" : "T",
    "comment" : "\n     * Specifies the usage for which numbers will be formatted (\"person-height\",\n     * \"road\", \"rainfall\", etc.)\n     *\n     * <p>\n     * When a {@code usage} is specified, the output unit will change depending on the\n     * {@code Locale} and the unit quantity. For example, formatting length\n     * measurements specified in meters:\n     *\n     * <pre>\n     * NumberFormatter.with().usage(\"person\").unit(MeasureUnit.METER).locale(new ULocale(\"en-US\"))\n     * </pre>\n     * <ul>\n     *   <li> When formatting 0.25, the output will be \"10 inches\".\n     *   <li> When formatting 1.50, the output will be \"4 feet and 11 inches\".\n     * </ul>\n     *\n     * <p>\n     * The input unit specified via unit() determines the type of measurement\n     * being formatted (e.g. \"length\" when the unit is \"foot\"). The usage\n     * requested will be looked for only within this category of measurement\n     * units.\n     *\n     * <p>\n     * The output unit can be found via FormattedNumber.getOutputUnit().\n     *\n     * <p>\n     * If the usage has multiple parts (e.g. \"land-agriculture-grain\") and does\n     * not match a known usage preference, the last part will be dropped\n     * repeatedly until a match is found (e.g. trying \"land-agriculture\", then\n     * \"land\"). If a match is still not found, usage will fall back to\n     * \"default\".\n     *\n     * <p>\n     * Setting usage to an empty string clears the usage (disables usage-based\n     * localized formatting).\n     *\n     * <p>\n     * Setting a usage string but not a correct input unit will result in an\n     * U_ILLEGAL_ARGUMENT_ERROR.\n     *\n     * <p>\n     * When using usage, specifying rounding or precision is unnecessary.\n     * Specifying a precision in some manner will override the default\n     * formatting.\n     *\n     * @param usage A usage parameter from the units resource.\n     * @return The fluent chain\n     * @throws IllegalArgumentException in case of Setting a usage string but not a correct input unit.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T displayOptions(DisplayOptions displayOptions)",
    "returnType" : "T",
    "comment" : "\n     * Specifies the {@code DisplayOptions}. For example, {@code GrammaticalCase} specifies\n     * the desired case for a unit formatter's output (e.g. accusative, dative, genitive).\n     *\n     * @return The fluent chain.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T unitDisplayCase(String unitDisplayCase)",
    "returnType" : "T",
    "comment" : "\n     * Specifies the desired case for a unit formatter's output (e.g.\n     * accusative, dative, genitive).\n     *\n     * @return The fluent chain\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public T macros(MacroProps macros)",
    "returnType" : "T",
    "comment" : "\n     * Internal method to set a starting macros.\n     *\n     * @deprecated ICU 60 This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public T padding(Padder padder)",
    "returnType" : "T",
    "comment" : "\n     * Set the padding strategy. May be added to ICU 61; see #13338.\n     *\n     * @deprecated ICU 60 This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public T threshold(Long threshold)",
    "returnType" : "T",
    "comment" : "\n     * Internal fluent setter to support a custom regulation threshold. A threshold of 1 causes the data\n     * structures to be built right away. A threshold of 0 prevents the data structures from being built.\n     *\n     * @deprecated ICU 60 This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toSkeleton()",
    "returnType" : "String",
    "comment" : "\n     * Creates a skeleton string representation of this number formatter. A skeleton string is a\n     * locale-agnostic serialized form of a number formatter.\n     * <p>\n     * Not all options are capable of being represented in the skeleton string; for example, a\n     * DecimalFormatSymbols object. If any such option is encountered, an\n     * {@link UnsupportedOperationException} is thrown.\n     * <p>\n     * The returned skeleton is in normalized form, such that two number formatters with equivalent\n     * behavior should produce the same skeleton.\n     * <p>\n     * For more information on number skeleton strings, see:\n     * https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html\n     *\n     * @return A number skeleton string with behavior corresponding to this number formatter.\n     * @throws UnsupportedOperationException\n     *             If the number formatter has an option that cannot be represented in a skeleton string.\n     * @hide unsupported on Android\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : " abstract T create(int key, Object value)",
    "returnType" : "T",
    "comment" : " package-protected ",
    "links" : [ ]
  }, {
    "name" : " MacroProps resolve()",
    "returnType" : "MacroProps",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public T notation(Notation notation)", "public T unit(MeasureUnit unit)", "public T perUnit(MeasureUnit perUnit)", "public T precision(Precision precision)", "public T roundingMode(RoundingMode roundingMode)", "public T grouping(GroupingStrategy strategy)", "public T integerWidth(IntegerWidth style)", "public T symbols(DecimalFormatSymbols symbols)", "public T symbols(NumberingSystem ns)", "public T unitWidth(UnitWidth style)", "public T sign(SignDisplay style)", "public T decimal(DecimalSeparatorDisplay style)", "public T scale(Scale scale)", "public T usage(String usage)", "public T displayOptions(DisplayOptions displayOptions)", "public T unitDisplayCase(String unitDisplayCase)", "public T macros(MacroProps macros)", "public T padding(Padder padder)", "public T threshold(Long threshold)", "public String toSkeleton()", " abstract T create(int key, Object value)", " MacroProps resolve()", "public int hashCode()", "public boolean equals(Object other)" ],
  "variableNames" : [ "KEY_MACROS", "KEY_LOCALE", "KEY_NOTATION", "KEY_UNIT", "KEY_PRECISION", "KEY_ROUNDING_MODE", "KEY_GROUPING", "KEY_PADDER", "KEY_INTEGER", "KEY_SYMBOLS", "KEY_UNIT_WIDTH", "KEY_SIGN", "KEY_DECIMAL", "KEY_SCALE", "KEY_THRESHOLD", "KEY_PER_UNIT", "KEY_USAGE", "KEY_UNIT_DISPLAY_CASE", "KEY_MAX", "parent", "key", "value", "resolvedMacros" ]
}