{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/Conference.java",
  "packageName" : "android.telecom",
  "className" : "Conference",
  "comment" : "\n * Represents a conference call which can contain any number of {@link Connection} objects.\n ",
  "links" : [ "android.telecom.Connection" ],
  "variables" : [ {
    "name" : "CONNECT_TIME_NOT_SPECIFIED",
    "type" : "long",
    "comment" : "\n     * Used to indicate that the conference connection time is not specified.  If not specified,\n     * Telecom will set the connect time.\n     ",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "Set<Listener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildConnections",
    "type" : "List<Connection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnmodifiableChildConnections",
    "type" : "List<Connection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConferenceableConnections",
    "type" : "List<Connection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnmodifiableConferenceableConnections",
    "type" : "List<Connection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTelecomCallId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPhoneAccount",
    "type" : "PhoneAccountHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallAudioState",
    "type" : "CallAudioState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallEndpoint",
    "type" : "CallEndpoint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisconnectCause",
    "type" : "DisconnectCause",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionCapabilities",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionProperties",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisconnectMessage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectTimeMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionStartElapsedRealTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatusHints",
    "type" : "StatusHints",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviousExtraKeys",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtrasLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddress",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddressPresentation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerDisplayName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerDisplayNamePresentation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallDirection",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRingbackRequested",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsMultiparty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionDeathListener",
    "type" : "Connection.Listener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getTelecomCallId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the telecom internal call ID associated with this conference.\n     * <p>\n     * Note: This is ONLY used for debugging purposes so that the Telephony stack can better\n     * associate logs in Telephony with those in Telecom.\n     * The ID returned should not be used for any other purpose.\n     *\n     * @return The telecom call ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setTelecomCallId(String telecomCallId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the telecom internal call ID associated with this conference.\n     *\n     * @param telecomCallId The telecom call ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final PhoneAccountHandle getPhoneAccountHandle()",
    "returnType" : "PhoneAccountHandle",
    "comment" : "\n     * Returns the {@link PhoneAccountHandle} the conference call is being placed through.\n     *\n     * @return A {@code PhoneAccountHandle} object representing the PhoneAccount of the conference.\n     ",
    "links" : [ "android.telecom.PhoneAccountHandle" ]
  }, {
    "name" : "public final List<Connection> getConnections()",
    "returnType" : "List<Connection>",
    "comment" : "\n     * Returns the list of connections currently associated with the conference call.\n     *\n     * @return A list of {@code Connection} objects which represent the children of the conference.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getState()",
    "returnType" : "int",
    "comment" : "\n     * Gets the state of the conference call. See {@link Connection} for valid values.\n     *\n     * @return A constant representing the state the conference call is currently in.\n     ",
    "links" : [ "android.telecom.Connection" ]
  }, {
    "name" : "public final boolean isRingbackRequested()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this conference is requesting that the system play a ringback tone\n     * on its behalf. A ringback tone may be played when an outgoing conference is in the process of\n     * connecting to give the user an audible indication of that process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getConnectionCapabilities()",
    "returnType" : "int",
    "comment" : "\n     * Returns the capabilities of the conference. See {@code CAPABILITY_*} constants in class\n     * {@link Connection} for valid values.\n     *\n     * @return A bitmask of the capabilities of the conference call.\n     ",
    "links" : [ "android.telecom.Connection" ]
  }, {
    "name" : "public final int getConnectionProperties()",
    "returnType" : "int",
    "comment" : "\n     * Returns the properties of the conference. See {@code PROPERTY_*} constants in class\n     * {@link Connection} for valid values.\n     *\n     * @return A bitmask of the properties of the conference call.\n     ",
    "links" : [ "android.telecom.Connection" ]
  }, {
    "name" : "public final AudioState getAudioState()",
    "returnType" : "AudioState",
    "comment" : "\n     * @return The audio state of the conference, describing how its audio is currently\n     *         being routed by the system. This is {@code null} if this Conference\n     *         does not directly know about its audio state.\n     * @deprecated Use {@link #getCallAudioState()} instead.\n     * @hide\n     ",
    "links" : [ "#getCallAudioState()" ]
  }, {
    "name" : "public final CallAudioState getCallAudioState()",
    "returnType" : "CallAudioState",
    "comment" : "\n     * @return The audio state of the conference, describing how its audio is currently\n     *         being routed by the system. This is {@code null} if this Conference\n     *         does not directly know about its audio state.\n     * @deprecated Use {@link #getCurrentCallEndpoint()},\n     * {@link #onAvailableCallEndpointsChanged(List)} and\n     * {@link #onMuteStateChanged(boolean)} instead.\n     ",
    "links" : [ "#getCurrentCallEndpoint()", "#onMuteStateChanged(boolean)", "#onAvailableCallEndpointsChanged(List)" ]
  }, {
    "name" : "public final CallEndpoint getCurrentCallEndpoint()",
    "returnType" : "CallEndpoint",
    "comment" : "\n     * Obtains the current CallEndpoint.\n     *\n     * @return An object encapsulating the CallEndpoint.\n     ",
    "links" : [ ]
  }, {
    "name" : "public VideoProvider getVideoProvider()",
    "returnType" : "VideoProvider",
    "comment" : "\n     * Returns VideoProvider of the primary call. This can be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVideoState()",
    "returnType" : "int",
    "comment" : "\n     * Returns video state of the primary call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDisconnect()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} when the Conference and all it's {@link Connection}s should\n     * be disconnected.\n     ",
    "links" : [ "android.telecom.Conference", "android.telecom.Connection" ]
  }, {
    "name" : "public void onSeparate(Connection connection)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} when the specified {@link Connection} should be separated\n     * from the conference call.\n     *\n     * @param connection The connection to separate.\n     ",
    "links" : [ "android.telecom.Conference", "android.telecom.Connection" ]
  }, {
    "name" : "public void onMerge(Connection connection)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} when the specified {@link Connection} should merged with the\n     * conference call.\n     *\n     * @param connection The {@code Connection} to merge.\n     ",
    "links" : [ "android.telecom.Conference", "android.telecom.Connection" ]
  }, {
    "name" : "public void onHold()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} when it should be put on hold.\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public void onUnhold()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} when it should be moved from a held to active state.\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public void onMerge()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} when the child calls should be merged.  Only invoked if the\n     * conference contains the capability {@link Connection#CAPABILITY_MERGE_CONFERENCE}.\n     ",
    "links" : [ "android.telecom.Conference", "android.telecom.Connection#CAPABILITY_MERGE_CONFERENCE" ]
  }, {
    "name" : "public void onSwap()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} when the child calls should be swapped. Only invoked if the\n     * conference contains the capability {@link Connection#CAPABILITY_SWAP_CONFERENCE}.\n     ",
    "links" : [ "android.telecom.Conference", "android.telecom.Connection#CAPABILITY_SWAP_CONFERENCE" ]
  }, {
    "name" : "public void onPlayDtmfTone(char c)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} of a request to play a DTMF tone.\n     *\n     * @param c A DTMF character.\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public void onStopDtmfTone()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} of a request to stop any currently playing DTMF tones.\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public void onAudioStateChanged(AudioState state)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} that the {@link #getAudioState()} property has a new value.\n     *\n     * @param state The new call audio state.\n     * @deprecated Use {@link #onCallAudioStateChanged(CallAudioState)} instead.\n     * @hide\n     ",
    "links" : [ "android.telecom.Conference", "#onCallAudioStateChanged(CallAudioState)", "#getAudioState()" ]
  }, {
    "name" : "public void onCallAudioStateChanged(CallAudioState state)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} that the {@link #getCallAudioState()} property has a new\n     * value.\n     *\n     * @param state The new call audio state.\n     * @deprecated Use {@link #onCallEndpointChanged(CallEndpoint)},\n     * {@link #onAvailableCallEndpointsChanged(List)} and\n     * {@link #onMuteStateChanged(boolean)} instead.\n     ",
    "links" : [ "#onCallEndpointChanged(CallEndpoint)", "#onMuteStateChanged(boolean)", "android.telecom.Conference", "#getCallAudioState()", "#onAvailableCallEndpointsChanged(List)" ]
  }, {
    "name" : "public void onCallEndpointChanged(@NonNull CallEndpoint callEndpoint)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} that the audio endpoint has been changed.\n     *\n     * @param callEndpoint The new call endpoint.\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public void onAvailableCallEndpointsChanged(@NonNull List<CallEndpoint> availableEndpoints)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} that the available call endpoints have been changed.\n     *\n     * @param availableEndpoints The available call endpoints.\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public void onMuteStateChanged(boolean isMuted)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} that its audio mute state has been changed.\n     *\n     * @param isMuted The new mute state.\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public void onConnectionAdded(Connection connection)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} that a {@link Connection} has been added to it.\n     *\n     * @param connection The newly added connection.\n     ",
    "links" : [ "android.telecom.Conference", "android.telecom.Connection" ]
  }, {
    "name" : "public void onAddConferenceParticipants(@NonNull List<Uri> participants)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the {@link Conference} of a request to add a new participants to the conference call\n     * @param participants that will be added to this conference call\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public void onAnswer(@VideoProfile.VideoState int videoState)",
    "returnType" : "void",
    "comment" : "\n     * Notifies this Conference, which is in {@code STATE_RINGING}, of\n     * a request to accept.\n     * For managed {@link ConnectionService}s, this will be called when the user answers a call via\n     * the default dialer's {@link InCallService}.\n     *\n     * @param videoState The video state in which to answer the connection.\n     ",
    "links" : [ "android.telecom.InCallService", "android.telecom.ConnectionService" ]
  }, {
    "name" : "public final void onAnswer()",
    "returnType" : "void",
    "comment" : "\n     * Notifies this Conference, which is in {@code STATE_RINGING}, of\n     * a request to accept.\n     * For managed {@link ConnectionService}s, this will be called when the user answers a call via\n     * the default dialer's {@link InCallService}.\n     * @hide\n     ",
    "links" : [ "android.telecom.InCallService", "android.telecom.ConnectionService" ]
  }, {
    "name" : "public void onReject()",
    "returnType" : "void",
    "comment" : "\n     * Notifies this Conference, which is in {@code STATE_RINGING}, of\n     * a request to reject.\n     * For managed {@link ConnectionService}s, this will be called when the user rejects a call via\n     * the default dialer's {@link InCallService}.\n     ",
    "links" : [ "android.telecom.InCallService", "android.telecom.ConnectionService" ]
  }, {
    "name" : "public final void setOnHold()",
    "returnType" : "void",
    "comment" : "\n     * Sets state to be on hold.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setDialing()",
    "returnType" : "void",
    "comment" : "\n     * Sets state to be dialing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setRinging()",
    "returnType" : "void",
    "comment" : "\n     * Sets state to be ringing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setActive()",
    "returnType" : "void",
    "comment" : "\n     * Sets state to be active.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setDisconnected(DisconnectCause disconnectCause)",
    "returnType" : "void",
    "comment" : "\n     * Sets state to disconnected.\n     *\n     * @param disconnectCause The reason for the disconnection, as described by\n     *     {@link android.telecom.DisconnectCause}.\n     ",
    "links" : [ "android.telecom.DisconnectCause" ]
  }, {
    "name" : "public final DisconnectCause getDisconnectCause()",
    "returnType" : "DisconnectCause",
    "comment" : "\n     * @return The {@link DisconnectCause} for this connection.\n     ",
    "links" : [ "android.telecom.DisconnectCause" ]
  }, {
    "name" : "public final void setConnectionCapabilities(int connectionCapabilities)",
    "returnType" : "void",
    "comment" : "\n     * Sets the capabilities of a conference. See {@code CAPABILITY_*} constants of class\n     * {@link Connection} for valid values.\n     *\n     * @param connectionCapabilities A bitmask of the {@code Capabilities} of the conference call.\n     ",
    "links" : [ "android.telecom.Connection" ]
  }, {
    "name" : "public final void setConnectionProperties(int connectionProperties)",
    "returnType" : "void",
    "comment" : "\n     * Sets the properties of a conference. See {@code PROPERTY_*} constants of class\n     * {@link Connection} for valid values.\n     *\n     * @param connectionProperties A bitmask of the {@code Properties} of the conference call.\n     ",
    "links" : [ "android.telecom.Connection" ]
  }, {
    "name" : "public final boolean addConnection(Connection connection)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the specified connection as a child of this conference.\n     *\n     * @param connection The connection to add.\n     * @return True if the connection was successfully added.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void removeConnection(Connection connection)",
    "returnType" : "void",
    "comment" : "\n     * Removes the specified connection as a child of this conference.\n     *\n     * @param connection The connection to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setConferenceableConnections(List<Connection> conferenceableConnections)",
    "returnType" : "void",
    "comment" : "\n     * Sets the connections with which this connection can be conferenced.\n     *\n     * @param conferenceableConnections The set of connections this connection can conference with.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setRingbackRequested(boolean ringback)",
    "returnType" : "void",
    "comment" : "\n     * Requests that the framework play a ringback tone. This is to be invoked by implementations\n     * that do not play a ringback tone themselves in the conference's audio stream.\n     *\n     * @param ringback Whether the ringback tone is to be played.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setVideoState(Connection c, int videoState)",
    "returnType" : "void",
    "comment" : "\n     * Set the video state for the conference.\n     * Valid values: {@link VideoProfile#STATE_AUDIO_ONLY},\n     * {@link VideoProfile#STATE_BIDIRECTIONAL},\n     * {@link VideoProfile#STATE_TX_ENABLED},\n     * {@link VideoProfile#STATE_RX_ENABLED}.\n     *\n     * @param videoState The new video state.\n     ",
    "links" : [ "android.telecom.VideoProfile#STATE_BIDIRECTIONAL", "android.telecom.VideoProfile#STATE_RX_ENABLED", "android.telecom.VideoProfile#STATE_AUDIO_ONLY", "android.telecom.VideoProfile#STATE_TX_ENABLED" ]
  }, {
    "name" : "public final void setVideoProvider(Connection c, Connection.VideoProvider videoProvider)",
    "returnType" : "void",
    "comment" : "\n     * Sets the video connection provider.\n     *\n     * @param videoProvider The video provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void fireOnConferenceableConnectionsChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final List<Connection> getConferenceableConnections()",
    "returnType" : "List<Connection>",
    "comment" : "\n     * Returns the connections with which this connection can be conferenced.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Tears down the conference object and any of its current connections.\n     ",
    "links" : [ ]
  }, {
    "name" : " final Conference addListener(Listener listener)",
    "returnType" : "Conference",
    "comment" : "\n     * Add a listener to be notified of a state change.\n     *\n     * @param listener The new listener.\n     * @return This conference.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " final Conference removeListener(Listener listener)",
    "returnType" : "Conference",
    "comment" : "\n     * Removes the specified listener.\n     *\n     * @param listener The listener to remove.\n     * @return This conference.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Connection getPrimaryConnection()",
    "returnType" : "Connection",
    "comment" : "\n     * Retrieves the primary connection associated with the conference.  The primary connection is\n     * the connection from which the conference will retrieve its current state.\n     *\n     * @return The primary connection.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setConnectTimeMillis(long connectTimeMillis)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link #setConnectionTime}.\n     ",
    "links" : [ "#setConnectionTime" ]
  }, {
    "name" : "public final void setConnectionTime(@IntRange(from = 0) long connectionTimeMillis)",
    "returnType" : "void",
    "comment" : "\n     * Sets the connection start time of the {@code Conference}.  This is used in the call log to\n     * indicate the date and time when the conference took place.\n     * <p>\n     * Should be specified in wall-clock time returned by {@link System#currentTimeMillis()}.\n     * <p>\n     * When setting the connection time, you should always set the connection elapsed time via\n     * {@link #setConnectionStartElapsedRealtimeMillis(long)} to ensure the duration is reflected.\n     *\n     * @param connectionTimeMillis The connection time, in milliseconds, as returned by\n     *                             {@link System#currentTimeMillis()}.\n     ",
    "links" : [ "#currentTimeMillis()", "#setConnectionStartElapsedRealtimeMillis(long)" ]
  }, {
    "name" : "public final void setConnectionStartElapsedRealTime(long connectionStartElapsedRealTime)",
    "returnType" : "void",
    "comment" : "\n     * Sets the start time of the {@link Conference} which is the basis for the determining the\n     * duration of the {@link Conference}.\n     * <p>\n     * You should use a value returned by {@link SystemClock#elapsedRealtime()} to ensure that time\n     * zone changes do not impact the conference duration.\n     * <p>\n     * When setting this, you should also set the connection time via\n     * {@link #setConnectionTime(long)}.\n     *\n     * @param connectionStartElapsedRealTime The connection time, as measured by\n     * {@link SystemClock#elapsedRealtime()}.\n     * @deprecated use {@link #setConnectionStartElapsedRealtimeMillis(long)} instead.\n     ",
    "links" : [ "#setConnectionTime(long)", "android.telecom.Conference", "#setConnectionStartElapsedRealtimeMillis(long)", "android.os.SystemClock#elapsedRealtime()" ]
  }, {
    "name" : "public final void setConnectionStartElapsedRealtimeMillis(@ElapsedRealtimeLong long connectionStartElapsedRealTime)",
    "returnType" : "void",
    "comment" : "\n     * Sets the start time of the {@link Conference} which is the basis for the determining the\n     * duration of the {@link Conference}.\n     * <p>\n     * You should use a value returned by {@link SystemClock#elapsedRealtime()} to ensure that time\n     * zone changes do not impact the conference duration.\n     * <p>\n     * When setting this, you should also set the connection time via\n     * {@link #setConnectionTime(long)}.\n     *\n     * @param connectionStartElapsedRealTime The connection time, as measured by\n     * {@link SystemClock#elapsedRealtime()}.\n     ",
    "links" : [ "#setConnectionTime(long)", "android.telecom.Conference", "android.os.SystemClock#elapsedRealtime()" ]
  }, {
    "name" : "public final long getConnectTimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link #getConnectionTime}.\n     ",
    "links" : [ "#getConnectionTime" ]
  }, {
    "name" : "public final long getConnectionTime()",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the connection start time of the {@code Conference}, if specified.  A value of\n     * {@link #CONNECT_TIME_NOT_SPECIFIED} indicates that Telecom should determine the start time\n     * of the conference.\n     *\n     * @return The time at which the {@code Conference} was connected.\n     ",
    "links" : [ "#CONNECT_TIME_NOT_SPECIFIED" ]
  }, {
    "name" : "public final long getConnectionStartElapsedRealtimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the connection start time of the {@link Conference}, if specified.  A value of\n     * {@link #CONNECT_TIME_NOT_SPECIFIED} indicates that Telecom should determine the start time\n     * of the conference.\n     * <p>\n     * This is based on the value of {@link SystemClock#elapsedRealtime()} to ensure that it is not\n     * impacted by wall clock changes (user initiated, network initiated, time zone change, etc).\n     * <p>\n     * Note: This is only exposed for use by the Telephony framework which needs it to copy\n     * conference start times among conference participants.  It is exposed as a system API since it\n     * has no general use other than to the Telephony framework.\n     *\n     * @return The elapsed time at which the {@link Conference} was connected.\n     ",
    "links" : [ "#CONNECT_TIME_NOT_SPECIFIED", "android.telecom.Conference", "android.os.SystemClock#elapsedRealtime()" ]
  }, {
    "name" : " final void setCallAudioState(CallAudioState state)",
    "returnType" : "void",
    "comment" : "\n     * Inform this Conference that the state of its audio output has been changed externally.\n     *\n     * @param state The new audio state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " final void setCallEndpoint(CallEndpoint endpoint)",
    "returnType" : "void",
    "comment" : "\n     * Inform this Conference that the audio endpoint has been changed.\n     *\n     * @param endpoint The new call endpoint.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " final void setAvailableCallEndpoints(List<CallEndpoint> availableEndpoints)",
    "returnType" : "void",
    "comment" : "\n     * Inform this Conference that the available call endpoints have been changed.\n     *\n     * @param availableEndpoints The available call endpoints.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " final void setMuteState(boolean isMuted)",
    "returnType" : "void",
    "comment" : "\n     * Inform this Conference that its audio mute state has been changed.\n     *\n     * @param isMuted The new mute state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setState(int newState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Conference createFailedConference(@NonNull DisconnectCause disconnectCause, @NonNull PhoneAccountHandle phoneAccount)",
    "returnType" : "Conference",
    "comment" : "\n     * Return a {@code Conference} which represents a failed conference attempt. The returned\n     * {@code Conference} will have a {@link android.telecom.DisconnectCause} and as specified,\n     * and a {@link #getState()} of {@code STATE_DISCONNECTED}.\n     * <p>\n     * The returned {@code Conference} can be assumed to {@link #destroy()} itself when appropriate,\n     * so users of this method need not maintain a reference to its return value to destroy it.\n     *\n     * @param disconnectCause The disconnect cause, ({@see android.telecomm.DisconnectCause}).\n     * @return A {@code Conference} which indicates failure.\n     ",
    "links" : [ "#getState()", "android.telecom.DisconnectCause", "#destroy()" ]
  }, {
    "name" : "private final void clearConferenceableList()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setStatusHints(StatusHints statusHints)",
    "returnType" : "void",
    "comment" : "\n     * Sets the label and icon status to display in the InCall UI.\n     *\n     * @param statusHints The status label and icon to set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final StatusHints getStatusHints()",
    "returnType" : "StatusHints",
    "comment" : "\n     * @return The status hints for this conference.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setExtras(@Nullable Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Replaces all the extras associated with this {@code Conference}.\n     * <p>\n     * New or existing keys are replaced in the {@code Conference} extras.  Keys which are no longer\n     * in the new extras, but were present the last time {@code setExtras} was called are removed.\n     * <p>\n     * Alternatively you may use the {@link #putExtras(Bundle)}, and\n     * {@link #removeExtras(String...)} methods to modify the extras.\n     * <p>\n     * No assumptions should be made as to how an In-Call UI or service will handle these extras.\n     * Keys should be fully qualified (e.g., com.example.extras.MY_EXTRA) to avoid conflicts.\n     *\n     * @param extras The extras associated with this {@code Conference}.\n     ",
    "links" : [ "#putExtras(Bundle)", "#removeExtras(String...)" ]
  }, {
    "name" : "public final void putExtras(@NonNull Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Adds some extras to this {@link Conference}.  Existing keys are replaced and new ones are\n     * added.\n     * <p>\n     * No assumptions should be made as to how an In-Call UI or service will handle these extras.\n     * Keys should be fully qualified (e.g., com.example.MY_EXTRA) to avoid conflicts.\n     *\n     * @param extras The extras to add.\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public final void putExtra(String key, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a boolean extra to this {@link Conference}.\n     *\n     * @param key The extra key.\n     * @param value The value.\n     * @hide\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public final void putExtra(String key, int value)",
    "returnType" : "void",
    "comment" : "\n     * Adds an integer extra to this {@link Conference}.\n     *\n     * @param key The extra key.\n     * @param value The value.\n     * @hide\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public final void putExtra(String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a string extra to this {@link Conference}.\n     *\n     * @param key The extra key.\n     * @param value The value.\n     * @hide\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public final void removeExtras(List<String> keys)",
    "returnType" : "void",
    "comment" : "\n     * Removes extras from this {@link Conference}.\n     *\n     * @param keys The keys of the extras to remove.\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public final void removeExtras(String... keys)",
    "returnType" : "void",
    "comment" : "\n     * Removes extras from this {@link Conference}.\n     *\n     * @param keys The keys of the extras to remove.\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public final Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the extras associated with this conference.\n     * <p>\n     * Extras should be updated using {@link #putExtras(Bundle)} and {@link #removeExtras(List)}.\n     * <p>\n     * Telecom or an {@link InCallService} can also update the extras via\n     * {@link android.telecom.Call#putExtras(Bundle)}, and\n     * {@link Call#removeExtras(List)}.\n     * <p>\n     * The conference is notified of changes to the extras made by Telecom or an\n     * {@link InCallService} by {@link #onExtrasChanged(Bundle)}.\n     *\n     * @return The extras associated with this connection.\n     ",
    "links" : [ "android.telecom.InCallService", "#onExtrasChanged(Bundle)", "#removeExtras(List)", "#putExtras(Bundle)", "android.telecom.Call#removeExtras(List)", "android.telecom.Call#putExtras(Bundle)" ]
  }, {
    "name" : "public void onExtrasChanged(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Notifies this {@link Conference} of a change to the extras made outside the\n     * {@link ConnectionService}.\n     * <p>\n     * These extras changes can originate from Telecom itself, or from an {@link InCallService} via\n     * {@link android.telecom.Call#putExtras(Bundle)}, and\n     * {@link Call#removeExtras(List)}.\n     *\n     * @param extras The new extras bundle.\n     ",
    "links" : [ "android.telecom.InCallService", "android.telecom.Conference", "android.telecom.ConnectionService", "android.telecom.Call#removeExtras(List)", "android.telecom.Call#putExtras(Bundle)" ]
  }, {
    "name" : "public void setConferenceState(boolean isConference)",
    "returnType" : "void",
    "comment" : "\n     * Set whether Telecom should treat this {@link Conference} as a multiparty conference call or\n     * if it should treat it as a single-party call.\n     * This method is used as part of a workaround regarding IMS conference calls and user\n     * expectation.  In IMS, once a conference is formed, the UE is connected to an IMS conference\n     * server.  If all participants of the conference drop out of the conference except for one, the\n     * UE is still connected to the IMS conference server.  At this point, the user logically\n     * assumes they're no longer in a conference, yet the underlying network actually is.\n     * To help provide a better user experiece, IMS conference calls can pretend to actually be a\n     * single-party call when the participant count drops to 1.  Although the dialer/phone app\n     * could perform this trickery, it makes sense to do this in Telephony since a fix there will\n     * ensure that bluetooth head units, auto and wearable apps all behave consistently.\n     * <p>\n     * This API is intended for use by the platform Telephony stack only.\n     *\n     * @param isConference {@code true} if this {@link Conference} should be treated like a\n     *      conference call, {@code false} if it should be treated like a single-party call.\n     * @hide\n     ",
    "links" : [ "android.telecom.Conference" ]
  }, {
    "name" : "public final void setCallDirection(@Call.Details.CallDirection int callDirection)",
    "returnType" : "void",
    "comment" : "\n     * Sets the call direction of this {@link Conference}. By default, all {@link Conference}s have\n     * a direction of {@link android.telecom.Call.Details.CallDirection#DIRECTION_UNKNOWN}. The\n     * direction of a {@link Conference} is only applicable to the case where\n     * {@link #setConferenceState(boolean)} has been set to {@code false}, otherwise the direction\n     * will be ignored.\n     * @param callDirection The direction of the conference.\n     * @hide\n     ",
    "links" : [ "android.telecom.Conference", "#setConferenceState(boolean)", "android.telecom.Call.Details.CallDirection#DIRECTION_UNKNOWN" ]
  }, {
    "name" : "public boolean isMultiparty()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the {@link Conference} is considered \"multiparty\" or not.  By default all\n     * conferences are considered multiparty.  A multiparty conference is one where there are\n     * multiple conference participants (other than the host) in the conference.\n     * This is tied to {@link #setConferenceState(boolean)}, which is used for some use cases to\n     * have a conference appear as if it is a standalone call, in which case the conference will\n     * no longer be multiparty.\n     * @return {@code true} if conference is treated as a conference (i.e. it is multiparty),\n     * {@code false} if it should emulate a standalone call (i.e. not multiparty).\n     * @hide\n     ",
    "links" : [ "android.telecom.Conference", "#setConferenceState(boolean)" ]
  }, {
    "name" : "public final void setAddress(@NonNull Uri address, @TelecomManager.Presentation int presentation)",
    "returnType" : "void",
    "comment" : "\n     * Sets the address of this {@link Conference}.  Used when {@link #setConferenceState(boolean)}\n     * is called to mark a conference temporarily as NOT a conference.\n     * <p>\n     * Note: This is a Telephony-specific implementation detail related to IMS conferences.  It is\n     * not intended for use outside of the Telephony stack.\n     *\n     * @param address The new address.\n     * @param presentation The presentation requirements for the address.\n     *        See {@link TelecomManager} for valid values.\n     * @hide\n     ",
    "links" : [ "android.telecom.Conference", "#setConferenceState(boolean)", "android.telecom.TelecomManager" ]
  }, {
    "name" : "public final Uri getAddress()",
    "returnType" : "Uri",
    "comment" : "\n     * Returns the \"address\" associated with the conference.  This is applicable in two cases:\n     * <ol>\n     *     <li>When {@link #setConferenceState(boolean)} is used to mark a conference as\n     *     temporarily \"not a conference\"; we need to present the correct address in the in-call\n     *     UI.</li>\n     *     <li>When the conference is not hosted on the current device, we need to know the address\n     *     information for the purpose of showing the original address to the user, as well as for\n     *     logging to the call log.</li>\n     * </ol>\n     * @return The address of the conference, or {@code null} if not applicable.\n     * @hide\n     ",
    "links" : [ "#setConferenceState(boolean)" ]
  }, {
    "name" : "public final int getAddressPresentation()",
    "returnType" : "int",
    "comment" : "\n     * Returns the address presentation associated with the conference.\n     * <p>\n     * This is applicable in two cases:\n     * <ol>\n     *     <li>When {@link #setConferenceState(boolean)} is used to mark a conference as\n     *     temporarily \"not a conference\"; we need to present the correct address presentation in\n     *     the in-call UI.</li>\n     *     <li>When the conference is not hosted on the current device, we need to know the address\n     *     presentation information for the purpose of showing the original address to the user, as\n     *     well as for logging to the call log.</li>\n     * </ol>\n     * @return The address presentation of the conference.\n     * @hide\n     ",
    "links" : [ "#setConferenceState(boolean)" ]
  }, {
    "name" : "public final String getCallerDisplayName()",
    "returnType" : "String",
    "comment" : "\n     * @return The caller display name (CNAP).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getCallerDisplayNamePresentation()",
    "returnType" : "int",
    "comment" : "\n     * @return The presentation requirements for the handle.\n     *         See {@link TelecomManager} for valid values.\n     * @hide\n     ",
    "links" : [ "android.telecom.TelecomManager" ]
  }, {
    "name" : "public final int getCallDirection()",
    "returnType" : "int",
    "comment" : "\n     * @return The call direction of this conference. Only applicable when\n     * {@link #setConferenceState(boolean)} is set to false.\n     * @hide\n     ",
    "links" : [ "#setConferenceState(boolean)" ]
  }, {
    "name" : "public final void setCallerDisplayName(@NonNull String callerDisplayName, @TelecomManager.Presentation int presentation)",
    "returnType" : "void",
    "comment" : "\n     * Sets the caller display name (CNAP) of this {@link Conference}.  Used when\n     * {@link #setConferenceState(boolean)} is called to mark a conference temporarily as NOT a\n     * conference.\n     * <p>\n     * Note: This is a Telephony-specific implementation detail related to IMS conferences.  It is\n     * not intended for use outside of the Telephony stack.\n     *\n     * @param callerDisplayName The new display name.\n     * @param presentation The presentation requirements for the handle.\n     *        See {@link TelecomManager} for valid values.\n     * @hide\n     ",
    "links" : [ "android.telecom.Conference", "#setConferenceState(boolean)", "android.telecom.TelecomManager" ]
  }, {
    "name" : " final void handleExtrasChanged(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Handles a change to extras received from Telecom.\n     *\n     * @param extras The new extras.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendConferenceEvent(@NonNull String event, @Nullable Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Sends an event associated with this {@link Conference} with associated event extras to the\n     * {@link InCallService}.\n     * <p>\n     * Connection events are used to communicate point in time information from a\n     * {@link ConnectionService} to an {@link InCallService} implementation.  An example of a\n     * custom connection event includes notifying the UI when a WIFI call has been handed over to\n     * LTE, which the InCall UI might use to inform the user that billing charges may apply.  The\n     * Android Telephony framework will send the {@link Connection#EVENT_MERGE_COMPLETE}\n     * connection event when a call to {@link Call#mergeConference()} has completed successfully.\n     * <p>\n     * Events are exposed to {@link InCallService} implementations via\n     * {@link Call.Callback#onConnectionEvent(Call, String, Bundle)}.\n     * <p>\n     * No assumptions should be made as to how an In-Call UI or service will handle these events.\n     * The {@link ConnectionService} must assume that the In-Call UI could even chose to ignore\n     * some events altogether.\n     * <p>\n     * Events should be fully qualified (e.g. {@code com.example.event.MY_EVENT}) to avoid\n     * conflicts between {@link ConnectionService} implementations.  Further, custom\n     * {@link ConnectionService} implementations shall not re-purpose events in the\n     * {@code android.*} namespace, nor shall they define new event types in this namespace.  When\n     * defining a custom event type, ensure the contents of the extras {@link Bundle} is clearly\n     * defined.  Extra keys for this bundle should be named similar to the event type (e.g.\n     * {@code com.example.extra.MY_EXTRA}).\n     * <p>\n     * When defining events and the associated extras, it is important to keep their behavior\n     * consistent when the associated {@link ConnectionService} is updated.  Support for deprecated\n     * events/extras should me maintained to ensure backwards compatibility with older\n     * {@link InCallService} implementations which were built to support the older behavior.\n     * <p>\n     * Expected connection events from the Telephony stack are:\n     * <p>\n     * <ul>\n     *      <li>{@link Connection#EVENT_CALL_HOLD_FAILED} with {@code null} {@code extras} when the\n     *      {@link Conference} could not be held.</li>\n     *      <li>{@link Connection#EVENT_MERGE_START} with {@code null} {@code extras} when a new\n     *      call is being merged into the conference.</li>\n     *      <li>{@link Connection#EVENT_MERGE_COMPLETE} with {@code null} {@code extras} a new call\n     *      has completed being merged into the conference.</li>\n     *      <li>{@link Connection#EVENT_CALL_MERGE_FAILED} with {@code null} {@code extras} a new\n     *      call has failed to merge into the conference (the dialer app can determine which call\n     *      failed to merge based on the fact that the call still exists outside of the conference\n     *      at the end of the merge process).</li>\n     * </ul>\n     *\n     * @param event The conference event.\n     * @param extras Optional bundle containing extra information associated with the event.\n     ",
    "links" : [ "android.telecom.InCallService", "android.telecom.Connection#EVENT_MERGE_START", "android.os.Bundle", "android.telecom.Connection#EVENT_MERGE_COMPLETE", "android.telecom.Conference", "android.telecom.Call#mergeConference()", "android.telecom.Connection#EVENT_CALL_MERGE_FAILED", "android.telecom.ConnectionService", "Call.Callback#onConnectionEvent(Call", "android.telecom.Connection#EVENT_CALL_HOLD_FAILED" ]
  } ],
  "methodNames" : [ "public final String getTelecomCallId()", "public final void setTelecomCallId(String telecomCallId)", "public final PhoneAccountHandle getPhoneAccountHandle()", "public final List<Connection> getConnections()", "public final int getState()", "public final boolean isRingbackRequested()", "public final int getConnectionCapabilities()", "public final int getConnectionProperties()", "public final AudioState getAudioState()", "public final CallAudioState getCallAudioState()", "public final CallEndpoint getCurrentCallEndpoint()", "public VideoProvider getVideoProvider()", "public int getVideoState()", "public void onDisconnect()", "public void onSeparate(Connection connection)", "public void onMerge(Connection connection)", "public void onHold()", "public void onUnhold()", "public void onMerge()", "public void onSwap()", "public void onPlayDtmfTone(char c)", "public void onStopDtmfTone()", "public void onAudioStateChanged(AudioState state)", "public void onCallAudioStateChanged(CallAudioState state)", "public void onCallEndpointChanged(@NonNull CallEndpoint callEndpoint)", "public void onAvailableCallEndpointsChanged(@NonNull List<CallEndpoint> availableEndpoints)", "public void onMuteStateChanged(boolean isMuted)", "public void onConnectionAdded(Connection connection)", "public void onAddConferenceParticipants(@NonNull List<Uri> participants)", "public void onAnswer(@VideoProfile.VideoState int videoState)", "public final void onAnswer()", "public void onReject()", "public final void setOnHold()", "public final void setDialing()", "public final void setRinging()", "public final void setActive()", "public final void setDisconnected(DisconnectCause disconnectCause)", "public final DisconnectCause getDisconnectCause()", "public final void setConnectionCapabilities(int connectionCapabilities)", "public final void setConnectionProperties(int connectionProperties)", "public final boolean addConnection(Connection connection)", "public final void removeConnection(Connection connection)", "public final void setConferenceableConnections(List<Connection> conferenceableConnections)", "public final void setRingbackRequested(boolean ringback)", "public final void setVideoState(Connection c, int videoState)", "public final void setVideoProvider(Connection c, Connection.VideoProvider videoProvider)", "private final void fireOnConferenceableConnectionsChanged()", "public final List<Connection> getConferenceableConnections()", "public final void destroy()", " final Conference addListener(Listener listener)", " final Conference removeListener(Listener listener)", "public Connection getPrimaryConnection()", "public final void setConnectTimeMillis(long connectTimeMillis)", "public final void setConnectionTime(@IntRange(from = 0) long connectionTimeMillis)", "public final void setConnectionStartElapsedRealTime(long connectionStartElapsedRealTime)", "public final void setConnectionStartElapsedRealtimeMillis(@ElapsedRealtimeLong long connectionStartElapsedRealTime)", "public final long getConnectTimeMillis()", "public final long getConnectionTime()", "public final long getConnectionStartElapsedRealtimeMillis()", " final void setCallAudioState(CallAudioState state)", " final void setCallEndpoint(CallEndpoint endpoint)", " final void setAvailableCallEndpoints(List<CallEndpoint> availableEndpoints)", " final void setMuteState(boolean isMuted)", "private void setState(int newState)", "public static Conference createFailedConference(@NonNull DisconnectCause disconnectCause, @NonNull PhoneAccountHandle phoneAccount)", "private final void clearConferenceableList()", "public String toString()", "public final void setStatusHints(StatusHints statusHints)", "public final StatusHints getStatusHints()", "public final void setExtras(@Nullable Bundle extras)", "public final void putExtras(@NonNull Bundle extras)", "public final void putExtra(String key, boolean value)", "public final void putExtra(String key, int value)", "public final void putExtra(String key, String value)", "public final void removeExtras(List<String> keys)", "public final void removeExtras(String... keys)", "public final Bundle getExtras()", "public void onExtrasChanged(Bundle extras)", "public void setConferenceState(boolean isConference)", "public final void setCallDirection(@Call.Details.CallDirection int callDirection)", "public boolean isMultiparty()", "public final void setAddress(@NonNull Uri address, @TelecomManager.Presentation int presentation)", "public final Uri getAddress()", "public final int getAddressPresentation()", "public final String getCallerDisplayName()", "public final int getCallerDisplayNamePresentation()", "public final int getCallDirection()", "public final void setCallerDisplayName(@NonNull String callerDisplayName, @TelecomManager.Presentation int presentation)", " final void handleExtrasChanged(Bundle extras)", "public void sendConferenceEvent(@NonNull String event, @Nullable Bundle extras)" ],
  "variableNames" : [ "CONNECT_TIME_NOT_SPECIFIED", "mListeners", "mChildConnections", "mUnmodifiableChildConnections", "mConferenceableConnections", "mUnmodifiableConferenceableConnections", "mTelecomCallId", "mPhoneAccount", "mCallAudioState", "mCallEndpoint", "mState", "mDisconnectCause", "mConnectionCapabilities", "mConnectionProperties", "mDisconnectMessage", "mConnectTimeMillis", "mConnectionStartElapsedRealTime", "mStatusHints", "mExtras", "mPreviousExtraKeys", "mExtrasLock", "mAddress", "mAddressPresentation", "mCallerDisplayName", "mCallerDisplayNamePresentation", "mCallDirection", "mRingbackRequested", "mIsMultiparty", "mConnectionDeathListener" ]
}