{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/AVT.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "AVT",
  "comment" : "\n * Class to hold an Attribute Value Template.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USE_OBJECT_POOL",
    "type" : "boolean",
    "comment" : "\n    *We are not going to use the object pool if USE_OBJECT_POOL == false.\n  ",
    "links" : [ ]
  }, {
    "name" : "INIT_BUFFER_CHUNK_BITS",
    "type" : "int",
    "comment" : "\n    * INIT_BUFFER_CHUNK_BITS is used to set initial size of\n    * of the char m_array in FastStringBuffer if USE_OBJECT_POOL == false. \n    * size = 2^ INIT_BUFFER_CHUNK_BITS, INIT_BUFFER_CHUNK_BITS = 7 \n    * corresponds size = 256. \n  ",
    "links" : [ ]
  }, {
    "name" : "m_simpleString",
    "type" : "String",
    "comment" : "\n   * If the AVT is not complex, just hold the simple string.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_parts",
    "type" : "Vector",
    "comment" : "\n   * If the AVT is complex, hold a Vector of AVTParts.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_rawName",
    "type" : "String",
    "comment" : "\n   * The name of the attribute.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_name",
    "type" : "String",
    "comment" : "\n   * The name of the attribute.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_uri",
    "type" : "String",
    "comment" : "\n   * The namespace URI of the owning attribute.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getRawName()",
    "returnType" : "String",
    "comment" : "\n   * Get the raw name of the attribute, with the prefix unprocessed.\n   *\n   * @return non-null reference to prefixed name.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRawName(String rawName)",
    "returnType" : "void",
    "comment" : "\n   * Get the raw name of the attribute, with the prefix unprocessed.\n   *\n   * @param rawName non-null reference to prefixed name.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n   * Get the local name of the attribute.\n   *\n   * @return non-null reference to name string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setName(String name)",
    "returnType" : "void",
    "comment" : "\n   * Set the local name of the attribute.\n   *\n   * @param name non-null reference to name string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getURI()",
    "returnType" : "String",
    "comment" : "\n   * Get the namespace URI of the attribute.\n   *\n   * @return non-null reference to URI, \"\" if null namespace.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setURI(String uri)",
    "returnType" : "void",
    "comment" : "\n   * Get the namespace URI of the attribute.\n   *\n   * @param uri non-null reference to URI, \"\" if null namespace.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getSimpleString()",
    "returnType" : "String",
    "comment" : "\n   * Get the AVT as the original string.\n   *\n   * @return The AVT as the original string\n   ",
    "links" : [ ]
  }, {
    "name" : "public String evaluate(XPathContext xctxt, int context, org.apache.xml.utils.PrefixResolver nsNode) throws javax.xml.transform.TransformerException",
    "returnType" : "String",
    "comment" : "\n   * Evaluate the AVT and return a String.\n   *\n   * @param xctxt Te XPathContext to use to evaluate this.\n   * @param context The current source tree context.\n   * @param nsNode The current namespace context (stylesheet tree context).\n   *\n   * @return The AVT evaluated as a string\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isContextInsensitive()",
    "returnType" : "boolean",
    "comment" : "\n   * Test whether the AVT is insensitive to the context in which\n   *  it is being evaluated. This is intended to facilitate\n   *  compilation of templates, by allowing simple AVTs to be\n   *  converted back into strings.\n   *\n   *  Currently the only case we recognize is simple strings.\n   * ADDED 9/5/2000 to support compilation experiment\n   *\n   * @return True if the m_simpleString member of this AVT is not null\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean canTraverseOutsideSubtree()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this expression or it's subexpressions can traverse outside\n   * the current subtree.\n   *\n   * @return true if traversal outside the context node's subtree can occur.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame \n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list \n   * should be searched backwards for the first qualified name that \n   * corresponds to the variable reference qname.  The position of the \n   * QName in the vector from the start of the vector will be its position \n   * in the stack frame (but variables above the globalsTop value will need \n   * to be offset to the current stack frame).\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callVisitors(XSLTVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * @see XSLTVisitable#callVisitors(XSLTVisitor)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSimple()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if this AVT is simple\n   ",
    "links" : [ ]
  }, {
    "name" : "private final FastStringBuffer getBuffer()",
    "returnType" : "FastStringBuffer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getRawName()", "public void setRawName(String rawName)", "public String getName()", "public void setName(String name)", "public String getURI()", "public void setURI(String uri)", "public String getSimpleString()", "public String evaluate(XPathContext xctxt, int context, org.apache.xml.utils.PrefixResolver nsNode) throws javax.xml.transform.TransformerException", "public boolean isContextInsensitive()", "public boolean canTraverseOutsideSubtree()", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public void callVisitors(XSLTVisitor visitor)", "public boolean isSimple()", "private final FastStringBuffer getBuffer()" ],
  "variableNames" : [ "serialVersionUID", "USE_OBJECT_POOL", "INIT_BUFFER_CHUNK_BITS", "m_simpleString", "m_parts", "m_rawName", "m_name", "m_uri" ]
}