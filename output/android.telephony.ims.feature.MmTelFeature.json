{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/feature/MmTelFeature.java",
  "packageName" : "android.telephony.ims.feature",
  "className" : "MmTelFeature",
  "comment" : "\n * Base implementation for Voice and SMS (IR-92) and Video (IR-94) IMS support.\n *\n * Any class wishing to use MmTelFeature should extend this class and implement all methods that the\n * service supports.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSmsImpl",
    "type" : "ImsSmsImplBase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficCallbacks",
    "type" : "HashMap<ImsTrafficSessionCallback, ImsTrafficSessionCallbackWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImsMMTelBinder",
    "type" : "IImsMmTelFeature",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROCESS_CALL_IMS",
    "type" : "int",
    "comment" : "\n     * To be returned by {@link #shouldProcessCall(String[])} when the ImsService should process the\n     * outgoing call as IMS.\n     * @hide\n     ",
    "links" : [ "#shouldProcessCall(String" ]
  }, {
    "name" : "PROCESS_CALL_CSFB",
    "type" : "int",
    "comment" : "\n     * To be returned by {@link #shouldProcessCall(String[])} when the telephony framework should\n     * not process the outgoing call as IMS and should instead use circuit switch.\n     * @hide\n     ",
    "links" : [ "#shouldProcessCall(String" ]
  }, {
    "name" : "EXTRA_IS_USSD",
    "type" : "String",
    "comment" : "\n     * If the flag is present and true, it indicates that the incoming call is for USSD.\n     * <p>\n     * This is an optional boolean flag.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_IS_UNKNOWN_CALL",
    "type" : "String",
    "comment" : "\n     * If this flag is present and true, this call is marked as an unknown dialing call instead\n     * of an incoming call. An example of such a call is a call that is originated by sending\n     * commands (like AT commands) directly to the modem without Android involvement or dialing\n     * calls appearing over IMS when the modem does a silent redial from circuit-switched to IMS in\n     * certain situations.\n     * <p>\n     * This is an optional boolean flag.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_HANDLER_ANDROID",
    "type" : "int",
    "comment" : "\n    * Audio Handler - Android\n    * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_HANDLER_BASEBAND",
    "type" : "int",
    "comment" : "\n    * Audio Handler - Baseband\n    * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "EPS_FALLBACK_REASON_INVALID",
    "type" : "int",
    "comment" : "\n     * Default value. Internal use only.\n     * This value should not be used to trigger EPS fallback.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EPS_FALLBACK_REASON_NO_NETWORK_TRIGGER",
    "type" : "int",
    "comment" : "\n     * If the network only supports the EPS fallback in 5G NR SA for voice calling and the EPS\n     * Fallback procedure by the network during the call setup is not triggered, UE initiated\n     * fallback will be triggered with this reason. The modem shall locally release the 5G NR\n     * SA RRC connection and acquire the LTE network and perform a tracking area update\n     * procedure. After the EPS fallback procedure is completed, the call setup for voice will\n     * be established if there is no problem.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EPS_FALLBACK_REASON_NO_NETWORK_RESPONSE",
    "type" : "int",
    "comment" : "\n     * If the UE doesn't receive any response for SIP INVITE within a certain timeout in 5G NR\n     * SA for MO voice calling, the device determines that voice call is not available in 5G and\n     * terminates all active SIP dialogs and SIP requests and enters IMS non-registered state.\n     * In that case, UE initiated fallback will be triggered with this reason. The modem shall\n     * reset modem's data buffer of IMS PDU to prevent the ghost call. After the EPS fallback\n     * procedure is completed, VoLTE call could be tried if there is no problem.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_TRAFFIC_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * Default value for initialization. Internal use only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_TRAFFIC_TYPE_EMERGENCY",
    "type" : "int",
    "comment" : "\n     * Emergency call\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_TRAFFIC_TYPE_EMERGENCY_SMS",
    "type" : "int",
    "comment" : "\n     * Emergency SMS\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_TRAFFIC_TYPE_VOICE",
    "type" : "int",
    "comment" : "\n     * Voice call\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_TRAFFIC_TYPE_VIDEO",
    "type" : "int",
    "comment" : "\n     * Video call\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_TRAFFIC_TYPE_SMS",
    "type" : "int",
    "comment" : "\n     * SMS over IMS\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_TRAFFIC_TYPE_REGISTRATION",
    "type" : "int",
    "comment" : "\n     * IMS registration and subscription for reg event package (signaling)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_TRAFFIC_TYPE_UT_XCAP",
    "type" : "int",
    "comment" : "\n     * Ut/XCAP (XML Configuration Access Protocol)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_TRAFFIC_DIRECTION_INCOMING",
    "type" : "int",
    "comment" : "\n     * Indicates that the traffic is an incoming traffic.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_TRAFFIC_DIRECTION_OUTGOING",
    "type" : "int",
    "comment" : "\n     * Indicates that the traffic is an outgoing traffic.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "IImsMmTelListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void setListener(IImsMmTelListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @param listener A {@link Listener} used when the MmTelFeature receives an incoming call and\n     *     notifies the framework.\n     ",
    "links" : [ "android.telephony.ims.ImsCallSessionListener" ]
  }, {
    "name" : "private IImsMmTelListener getListener()",
    "returnType" : "IImsMmTelListener",
    "comment" : "\n     * @return the listener associated with this MmTelFeature. May be null if it has not been set\n     * by the framework yet.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final MmTelCapabilities queryCapabilityStatus()",
    "returnType" : "MmTelCapabilities",
    "comment" : "\n     * The current capability status that this MmTelFeature has defined is available. This\n     * configuration will be used by the platform to figure out which capabilities are CURRENTLY\n     * available to be used.\n     *\n     * Should be a subset of the capabilities that are enabled by the framework in\n     * {@link #changeEnabledCapabilities}.\n     * @return A copy of the current MmTelFeature capability status.\n     * @hide\n     ",
    "links" : [ "#changeEnabledCapabilities" ]
  }, {
    "name" : "public final void notifyCapabilitiesStatusChanged(@NonNull MmTelCapabilities c)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that the status of the Capabilities has changed. Even though the\n     * MmTelFeature capability may be enabled by the framework, the status may be disabled due to\n     * the feature being unavailable from the network.\n     * @param c The current capability status of the MmTelFeature. If a capability is disabled, then\n     * the status of that capability is disabled. This can happen if the network does not currently\n     * support the capability that is enabled. A capability that is disabled by the framework (via\n     * {@link #changeEnabledCapabilities}) should also show the status as disabled.\n     * @hide\n     ",
    "links" : [ "#changeEnabledCapabilities" ]
  }, {
    "name" : "public final void notifyMediaQualityStatusChanged(@NonNull MediaQualityStatus status)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that the measured media quality has crossed a threshold set by {@link\n     * MmTelFeature#setMediaThreshold}\n     *\n     * @param status current media quality status measured.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsMmTelFeature#setMediaThreshold" ]
  }, {
    "name" : "public final void notifyIncomingCall(@NonNull ImsCallSessionImplBase c, @NonNull Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework of an incoming call.\n     * @param c The {@link ImsCallSessionImplBase} of the new incoming call.\n     * @param extras A bundle containing extra parameters related to the call. See\n     * {@link #EXTRA_IS_UNKNOWN_CALL} and {@link #EXTRA_IS_USSD} above.\n     * @hide\n     *\n     * @deprecated use {@link #notifyIncomingCall(ImsCallSessionImplBase, String, Bundle)} instead\n     ",
    "links" : [ "#EXTRA_IS_USSD", "android.telephony.ims.stub.ImsCallSessionImplBase", "#notifyIncomingCall(ImsCallSessionImplBase", "#EXTRA_IS_UNKNOWN_CALL" ]
  }, {
    "name" : "public final ImsCallSessionListener notifyIncomingCall(@NonNull ImsCallSessionImplBase c, @NonNull String callId, @NonNull Bundle extras)",
    "returnType" : "ImsCallSessionListener",
    "comment" : "\n     * Notify the framework of an incoming call.\n     * @param c The {@link ImsCallSessionImplBase} of the new incoming call.\n     * @param callId The call ID of the session of the new incoming call.\n     * @param extras A bundle containing extra parameters related to the call. See\n     * {@link #EXTRA_IS_UNKNOWN_CALL} and {@link #EXTRA_IS_USSD} above.\n     * @return The listener used by the framework to listen to call session events created\n     *         from the ImsService.\n     *         If this method returns {@code null}, then the call could not be placed.\n     * @hide\n     ",
    "links" : [ "#EXTRA_IS_USSD", "android.telephony.ims.stub.ImsCallSessionImplBase", "#EXTRA_IS_UNKNOWN_CALL" ]
  }, {
    "name" : "public final void notifyRejectedCall(@NonNull ImsCallProfile callProfile, @NonNull ImsReasonInfo reason)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that a call has been implicitly rejected by this MmTelFeature\n     * during call setup.\n     * @param callProfile The {@link ImsCallProfile} IMS call profile with details.\n     *        This can be null if no call information is available for the rejected call.\n     * @param reason The {@link ImsReasonInfo} call rejection reason.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile", "android.telephony.ims.ImsReasonInfo" ]
  }, {
    "name" : "public final void notifyIncomingCallSession(IImsCallSession c, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void notifyVoiceMessageCountUpdate(int count)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework of a change in the Voice Message count.\n     * @link count the new Voice Message count.\n     * @hide\n     ",
    "links" : [ "count" ]
  }, {
    "name" : "public final void setCallAudioHandler(@ImsAudioHandler int imsAudioHandler)",
    "returnType" : "void",
    "comment" : "\n     * Sets the audio handler for this connection. The vendor IMS stack will invoke this API\n     * to inform Telephony/Telecom layers about which audio handlers i.e. either Android or Modem\n     * shall be used for handling the IMS call audio.\n     *\n     * @param imsAudioHandler {@link MmTelFeature#ImsAudioHandler} used to handle the audio\n     *        for this IMS call.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsMmTelFeature#ImsAudioHandler" ]
  }, {
    "name" : "public final void triggerEpsFallback(@EpsFallbackReason int reason)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the EPS fallback procedure.\n     *\n     * @param reason specifies the reason that causes EPS fallback.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void startImsTrafficSession(@ImsTrafficType int trafficType, @AccessNetworkConstants.RadioAccessNetworkType int accessNetworkType, @ImsTrafficDirection int trafficDirection, @NonNull Executor executor, @NonNull ImsTrafficSessionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Starts a new IMS traffic session with the framework.\n     *\n     * This API notifies the NAS and RRC layers of the modem that IMS traffic of type\n     * {@link ImsTrafficType} is starting for the IMS session represented by a\n     * {@link ImsTrafficSessionCallback}. The {@link ImsTrafficSessionCallback}\n     * will notify the caller when IMS traffic is ready to start via the\n     * {@link ImsTrafficSessionCallback#onReady()} callback. If there was an error starting\n     * IMS traffic for the specified traffic type, {@link ImsTrafficSessionCallback#onError()} will\n     * be called, which will also notify the caller of the reason of the failure.\n     *\n     * If there is a handover that changes the {@link AccessNetworkConstants#RadioAccessNetworkType}\n     * of this IMS traffic session, then {@link #modifyImsTrafficSession} should be called. This is\n     * used, for example, when a WiFi <-> cellular handover occurs.\n     *\n     * Once the IMS traffic session is finished, {@link #stopImsTrafficSession} must be called.\n     *\n     * Note: This API will be used to prioritize RF resources in case of DSDS. The service priority\n     * is EMERGENCY > EMERGENCY SMS > VOICE > VIDEO > SMS > REGISTRATION > Ut/XCAP. RF\n     * shall be prioritized to the subscription which handles the higher priority service.\n     * When both subscriptions are handling the same type of service, then RF shall be\n     * prioritized to the voice preferred sub.\n     *\n     * @param trafficType The {@link ImsTrafficType} type for IMS traffic.\n     * @param accessNetworkType The {@link AccessNetworkConstants#RadioAccessNetworkType} type of\n     *        the radio access network.\n     * @param trafficDirection Indicates whether traffic is originated by mobile originated or\n     *        mobile terminated use case eg. MO/MT call/SMS etc.\n     * @param executor The Executor that will be used to call the {@link ImsTrafficSessionCallback}.\n     * @param callback The session representing the IMS Session associated with a specific\n     *        trafficType. This callback instance should only be used for the specified traffic type\n     *        until {@link #stopImsTrafficSession} is called.\n     *\n     * @see modifyImsTrafficSession\n     * @see stopImsTrafficSession\n     *\n     * @hide\n     ",
    "links" : [ "#stopImsTrafficSession", "android.telephony.ims.aidl.IImsTrafficSessionCallback", "android.telephony.AccessNetworkConstants#RadioAccessNetworkType", "ImsTrafficType", "android.telephony.ims.aidl.IImsTrafficSessionCallback#onReady()", "android.telephony.ims.aidl.IImsTrafficSessionCallback#onError()", "#modifyImsTrafficSession" ]
  }, {
    "name" : "public final void modifyImsTrafficSession(@AccessNetworkConstants.RadioAccessNetworkType int accessNetworkType, @NonNull ImsTrafficSessionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Modifies an existing IMS traffic session represented by the associated\n     * {@link ImsTrafficSessionCallback}.\n     *\n     * The {@link ImsTrafficSessionCallback} will notify the caller when IMS traffic is ready to\n     * start after modification using the {@link ImsTrafficSessionCallback#onReady()} callback.\n     * If there was an error modifying IMS traffic for the new radio access network type type,\n     * {@link ImsTrafficSessionCallback#onError()} will be called, which will also notify the\n     * caller of the reason of the failure.\n     *\n     * @param accessNetworkType The {@link AccessNetworkConstants#RadioAccessNetworkType} type of\n     *        the radio access network.\n     * @param callback The callback registered with {@link #startImsTrafficSession}.\n     *\n     * @see startImsTrafficSession\n     * @see stopImsTrafficSession\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsTrafficSessionCallback", "android.telephony.AccessNetworkConstants#RadioAccessNetworkType", "android.telephony.ims.aidl.IImsTrafficSessionCallback#onReady()", "#startImsTrafficSession", "android.telephony.ims.aidl.IImsTrafficSessionCallback#onError()" ]
  }, {
    "name" : "public final void stopImsTrafficSession(@NonNull ImsTrafficSessionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the framework that the IMS traffic session represented by the associated\n     * {@link ImsTrafficSessionCallback} has ended.\n     *\n     * @param callback The callback registered with {@link #startImsTrafficSession}.\n     *\n     * @see startImsTrafficSession\n     * @see modifyImsTrafficSession\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsTrafficSessionCallback", "#startImsTrafficSession" ]
  }, {
    "name" : "public boolean queryCapabilityConfiguration(@MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech)",
    "returnType" : "boolean",
    "comment" : "\n     * Provides the MmTelFeature with the ability to return the framework Capability Configuration\n     * for a provided Capability. If the framework calls {@link #changeEnabledCapabilities} and\n     * includes a capability A to enable or disable, this method should return the correct enabled\n     * status for capability A.\n     * @param capability The capability that we are querying the configuration for.\n     * @return true if the capability is enabled, false otherwise.\n     * @hide\n     ",
    "links" : [ "#changeEnabledCapabilities" ]
  }, {
    "name" : "public void changeEnabledCapabilities(@NonNull CapabilityChangeRequest request, @NonNull CapabilityCallbackProxy c)",
    "returnType" : "void",
    "comment" : "\n     * The MmTelFeature should override this method to handle the enabling/disabling of\n     * MmTel Features, defined in {@link MmTelCapabilities.MmTelCapability}. The framework assumes\n     * the {@link CapabilityChangeRequest} was processed successfully. If a subset of capabilities\n     * could not be set to their new values,\n     * {@link CapabilityCallbackProxy#onChangeCapabilityConfigurationError} must be called\n     * individually for each capability whose processing resulted in an error.\n     *\n     * Enabling/Disabling a capability here indicates that the capability should be registered or\n     * deregistered (depending on the capability change) and become available or unavailable to\n     * the framework.\n     * @hide\n     ",
    "links" : [ "#onChangeCapabilityConfigurationError", "MmTelCapabilities.MmTelCapability", "android.telephony.ims.feature.CapabilityChangeRequest" ]
  }, {
    "name" : "public void setMediaThreshold(@MediaQualityStatus.MediaSessionType int mediaSessionType, @NonNull MediaThreshold mediaThreshold)",
    "returnType" : "void",
    "comment" : "\n     * Called by the framework to pass {@link MediaThreshold}. The MmTelFeature should override this\n     * method to get Media quality threshold. This will pass the consolidated threshold values from\n     * Telephony framework. IMS provider needs to monitor media quality of active call and notify\n     * media quality {@link #notifyMediaQualityStatusChanged(MediaQualityStatus)} when the measured\n     * media quality crosses at least one of {@link MediaThreshold} set by this.\n     *\n     * @param mediaSessionType media session type for this Threshold info.\n     * @param mediaThreshold media threshold information\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.MediaThreshold", "#notifyMediaQualityStatusChanged(MediaQualityStatus)" ]
  }, {
    "name" : "public void clearMediaThreshold(@MediaQualityStatus.MediaSessionType int mediaSessionType)",
    "returnType" : "void",
    "comment" : "\n     * The MmTelFeature should override this method to clear Media quality thresholds that were\n     * registered and stop media quality status updates.\n     *\n     * @param mediaSessionType media session type\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public MediaQualityStatus queryMediaQualityStatus(@MediaQualityStatus.MediaSessionType int mediaSessionType)",
    "returnType" : "MediaQualityStatus",
    "comment" : "\n     * IMS provider should override this method to return currently measured media quality status.\n     *\n     * <p/>\n     * If media quality status is not yet measured after call is active, it needs to notify media\n     * quality status {@link #notifyMediaQualityStatusChanged(MediaQualityStatus)} when the first\n     * measurement is done.\n     *\n     * @param mediaSessionType media session type\n     * @return Current media quality status. It could be null if media quality status is not\n     *         measured yet or {@link MediaThreshold} was not set corresponding to the media session\n     *         type.\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.MediaThreshold", "#notifyMediaQualityStatusChanged(MediaQualityStatus)" ]
  }, {
    "name" : "public ImsCallProfile createCallProfile(int callSessionType, int callType)",
    "returnType" : "ImsCallProfile",
    "comment" : "\n     * Creates a {@link ImsCallProfile} from the service capabilities & IMS registration state.\n     *\n     * @param callSessionType a service type that is specified in {@link ImsCallProfile}\n     *        {@link ImsCallProfile#SERVICE_TYPE_NONE}\n     *        {@link ImsCallProfile#SERVICE_TYPE_NORMAL}\n     *        {@link ImsCallProfile#SERVICE_TYPE_EMERGENCY}\n     * @param callType a call type that is specified in {@link ImsCallProfile}\n     *        {@link ImsCallProfile#CALL_TYPE_VOICE}\n     *        {@link ImsCallProfile#CALL_TYPE_VT}\n     *        {@link ImsCallProfile#CALL_TYPE_VT_TX}\n     *        {@link ImsCallProfile#CALL_TYPE_VT_RX}\n     *        {@link ImsCallProfile#CALL_TYPE_VT_NODIR}\n     *        {@link ImsCallProfile#CALL_TYPE_VS}\n     *        {@link ImsCallProfile#CALL_TYPE_VS_TX}\n     *        {@link ImsCallProfile#CALL_TYPE_VS_RX}\n     * @return a {@link ImsCallProfile} object\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile#SERVICE_TYPE_NONE", "android.telephony.ims.ImsCallProfile", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VT_NODIR", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VT_RX", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VS_RX", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VOICE", "android.telephony.ims.ImsCallProfile#SERVICE_TYPE_NORMAL", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VT_TX", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VS_TX", "android.telephony.ims.ImsCallProfile#SERVICE_TYPE_EMERGENCY", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VT", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VS" ]
  }, {
    "name" : "public void changeOfferedRtpHeaderExtensionTypes(@NonNull Set<RtpHeaderExtensionType> extensionTypes)",
    "returnType" : "void",
    "comment" : "\n     * Called by the framework to report a change to the RTP header extension types which should be\n     * offered during SDP negotiation (see RFC8285 for more information).\n     * <p>\n     * The {@link ImsService} should report the RTP header extensions which were accepted during\n     * SDP negotiation using {@link ImsCallProfile#setAcceptedRtpHeaderExtensionTypes(Set)}.\n     *\n     * @param extensionTypes The RTP header extensions the framework wishes to offer during\n     *                       outgoing and incoming call setup.  An empty list indicates that there\n     *                       are no framework defined RTP header extension types to offer.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile#setAcceptedRtpHeaderExtensionTypes(Set)", "android.telephony.ims.ImsService" ]
  }, {
    "name" : "public IImsCallSession createCallSessionInterface(ImsCallProfile profile) throws RemoteException",
    "returnType" : "IImsCallSession",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ImsCallSessionImplBase createCallSession(@NonNull ImsCallProfile profile)",
    "returnType" : "ImsCallSessionImplBase",
    "comment" : "\n     * Creates an {@link ImsCallSession} with the specified call profile.\n     * Use other methods, if applicable, instead of interacting with\n     * {@link ImsCallSession} directly.\n     *\n     * @param profile a call profile to make the call\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.ImsCallSession" ]
  }, {
    "name" : "public int shouldProcessCall(@NonNull String[] numbers)",
    "returnType" : "int",
    "comment" : "\n     * Called by the framework to determine if the outgoing call, designated by the outgoing\n     * {@link String}s, should be processed as an IMS call or CSFB call. If this method's\n     * functionality is not overridden, the platform will process every call as IMS as long as the\n     * MmTelFeature reports that the {@link MmTelCapabilities#CAPABILITY_TYPE_VOICE} capability is\n     * available.\n     * @param numbers An array of {@link String}s that will be used for placing the call. There can\n     *         be multiple {@link String}s listed in the case when we want to place an outgoing\n     *         call as a conference.\n     * @return a {@link ProcessCallResult} to the framework, which will be used to determine if the\n     *        call will be placed over IMS or via CSFB.\n     * @hide\n     ",
    "links" : [ "#CAPABILITY_TYPE_VOICE", "String", "ProcessCallResult" ]
  }, {
    "name" : "protected IImsUt getUtInterface() throws RemoteException",
    "returnType" : "IImsUt",
    "comment" : "\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected IImsEcbm getEcbmInterface() throws RemoteException",
    "returnType" : "IImsEcbm",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IImsMultiEndpoint getMultiEndpointInterface() throws RemoteException",
    "returnType" : "IImsMultiEndpoint",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ImsSmsImplBase getImsSmsImpl()",
    "returnType" : "ImsSmsImplBase",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ImsUtImplBase getUt()",
    "returnType" : "ImsUtImplBase",
    "comment" : "\n     * @return The {@link ImsUtImplBase} Ut interface implementation for the supplementary service\n     * configuration.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.stub.ImsUtImplBase" ]
  }, {
    "name" : "public ImsEcbmImplBase getEcbm()",
    "returnType" : "ImsEcbmImplBase",
    "comment" : "\n     * @return The {@link ImsEcbmImplBase} Emergency call-back mode interface for emergency VoLTE\n     * calls that support it.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.stub.ImsEcbmImplBase" ]
  }, {
    "name" : "public ImsMultiEndpointImplBase getMultiEndpoint()",
    "returnType" : "ImsMultiEndpointImplBase",
    "comment" : "\n     * @return The {@link ImsMultiEndpointImplBase} implementation for implementing Dialog event\n     * package processing for multi-endpoint.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.stub.ImsMultiEndpointImplBase" ]
  }, {
    "name" : "public void setUiTtyMode(int mode, @Nullable Message onCompleteMessage)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current UI TTY mode for the MmTelFeature.\n     * @param mode An integer containing the new UI TTY Mode, can consist of\n     *         {@link TelecomManager#TTY_MODE_OFF},\n     *         {@link TelecomManager#TTY_MODE_FULL},\n     *         {@link TelecomManager#TTY_MODE_HCO},\n     *         {@link TelecomManager#TTY_MODE_VCO}\n     * @param onCompleteMessage If non-null, this MmTelFeature should call this {@link Message} when\n     *         the operation is complete by using the associated {@link android.os.Messenger} in\n     *         {@link Message#replyTo}. For example:\n     * {@code\n     *     // Set UI TTY Mode and other operations...\n     *     try {\n     *         // Notify framework that the mode was changed.\n     *         Messenger uiMessenger = onCompleteMessage.replyTo;\n     *         uiMessenger.send(onCompleteMessage);\n     *     } catch (RemoteException e) {\n     *         // Remote side is dead\n     *     }\n     * }\n     * @hide\n     ",
    "links" : [ "android.os.Message", "android.telecom.TelecomManager#TTY_MODE_FULL", "android.telecom.TelecomManager#TTY_MODE_HCO", "android.os.Messenger", "android.telecom.TelecomManager#TTY_MODE_OFF", "android.os.Message#replyTo", "android.telecom.TelecomManager#TTY_MODE_VCO" ]
  }, {
    "name" : "public void setTerminalBasedCallWaitingStatus(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the MmTelFeature of the enablement status of terminal based call waiting\n     *\n     * If the terminal based call waiting is provisioned,\n     * IMS controls the enablement of terminal based call waiting which is defined\n     * in 3GPP TS 24.615.\n     *\n     * @param enabled user setting controlling whether or not call waiting is enabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifySrvccStarted(@NonNull Consumer<List<SrvccCall>> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the MmTelFeature that the network has initiated an SRVCC (Single radio voice\n     * call continuity) for all IMS calls. When the network initiates an SRVCC, calls from\n     * the LTE domain are handed over to the legacy circuit switched domain. The modem requires\n     * knowledge of ongoing calls in the IMS domain in order to complete the SRVCC operation.\n     * <p>\n     * @param consumer The callback used to notify the framework of the list of IMS calls and their\n     * state at the time of the SRVCC.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifySrvccCompleted()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the MmTelFeature that the SRVCC is completed and the calls have been moved\n     * over to the circuit-switched domain.\n     * {@link android.telephony.CarrierConfigManager.ImsVoice#KEY_SRVCC_TYPE_INT_ARRAY}\n     * specifies the calls can be moved. Other calls will be disconnected.\n     * <p>\n     * The MmTelFeature may now release all resources related to the IMS calls.\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.CarrierConfigManager.ImsVoice#KEY_SRVCC_TYPE_INT_ARRAY" ]
  }, {
    "name" : "public void notifySrvccFailed()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the MmTelFeature that the SRVCC has failed.\n     *\n     * The handover can fail by encountering a failure at the radio level\n     * or temporary MSC server internal errors in handover procedure.\n     * Refer to 3GPP TS 23.216 section 8 Handover Failure.\n     * <p>\n     * IMS service will recover and continue calls over IMS.\n     * Per TS 24.237 12.2.4.2, UE shall send SIP UPDATE request containing the reason-text\n     * set to \"failure to transition to CS domain\".\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifySrvccCanceled()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the MmTelFeature that the SRVCC has been canceled.\n     *\n     * Since the state of network can be changed, the network can decide to terminate\n     * the handover procedure before its completion and to return to its state before the handover\n     * procedure was triggered.\n     * Refer to 3GPP TS 23.216 section 8.1.3 Handover Cancellation.\n     *\n     * <p>\n     * IMS service will recover and continue calls over IMS.\n     * Per TS 24.237 12.2.4.2, UE shall send SIP UPDATE request containing the reason-text\n     * set to \"handover canceled\".\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setSmsListener(IImsSmsListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendSms(int token, int messageRef, String format, String smsc, boolean isRetry, byte[] pdu)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onMemoryAvailable(int token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void acknowledgeSms(int token, int messageRef, @ImsSmsImplBase.DeliverStatusResult int result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void acknowledgeSms(int token, int messageRef, @ImsSmsImplBase.DeliverStatusResult int result, byte[] pdu)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void acknowledgeSmsReport(int token, int messageRef, @ImsSmsImplBase.StatusReportResult int result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onSmsReady()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ImsSmsImplBase getSmsImplementation()",
    "returnType" : "ImsSmsImplBase",
    "comment" : "\n     * Must be overridden by IMS Provider to be able to support SMS over IMS. Otherwise a default\n     * non-functional implementation is returned.\n     *\n     * @return an instance of {@link ImsSmsImplBase} which should be implemented by the IMS\n     * Provider.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.stub.ImsSmsImplBase" ]
  }, {
    "name" : "private String getSmsFormat()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onFeatureRemoved()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFeatureReady()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final IImsMmTelFeature getBinder()",
    "returnType" : "IImsMmTelFeature",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setDefaultExecutor(@NonNull Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * Set default Executor from ImsService.\n     * @param executor The default executor for the framework to use when executing the methods\n     * overridden by the implementation of MmTelFeature.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void setListener(IImsMmTelListener listener)", "private IImsMmTelListener getListener()", "public final MmTelCapabilities queryCapabilityStatus()", "public final void notifyCapabilitiesStatusChanged(@NonNull MmTelCapabilities c)", "public final void notifyMediaQualityStatusChanged(@NonNull MediaQualityStatus status)", "public final void notifyIncomingCall(@NonNull ImsCallSessionImplBase c, @NonNull Bundle extras)", "public final ImsCallSessionListener notifyIncomingCall(@NonNull ImsCallSessionImplBase c, @NonNull String callId, @NonNull Bundle extras)", "public final void notifyRejectedCall(@NonNull ImsCallProfile callProfile, @NonNull ImsReasonInfo reason)", "public final void notifyIncomingCallSession(IImsCallSession c, Bundle extras)", "public final void notifyVoiceMessageCountUpdate(int count)", "public final void setCallAudioHandler(@ImsAudioHandler int imsAudioHandler)", "public final void triggerEpsFallback(@EpsFallbackReason int reason)", "public final void startImsTrafficSession(@ImsTrafficType int trafficType, @AccessNetworkConstants.RadioAccessNetworkType int accessNetworkType, @ImsTrafficDirection int trafficDirection, @NonNull Executor executor, @NonNull ImsTrafficSessionCallback callback)", "public final void modifyImsTrafficSession(@AccessNetworkConstants.RadioAccessNetworkType int accessNetworkType, @NonNull ImsTrafficSessionCallback callback)", "public final void stopImsTrafficSession(@NonNull ImsTrafficSessionCallback callback)", "public boolean queryCapabilityConfiguration(@MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech)", "public void changeEnabledCapabilities(@NonNull CapabilityChangeRequest request, @NonNull CapabilityCallbackProxy c)", "public void setMediaThreshold(@MediaQualityStatus.MediaSessionType int mediaSessionType, @NonNull MediaThreshold mediaThreshold)", "public void clearMediaThreshold(@MediaQualityStatus.MediaSessionType int mediaSessionType)", "public MediaQualityStatus queryMediaQualityStatus(@MediaQualityStatus.MediaSessionType int mediaSessionType)", "public ImsCallProfile createCallProfile(int callSessionType, int callType)", "public void changeOfferedRtpHeaderExtensionTypes(@NonNull Set<RtpHeaderExtensionType> extensionTypes)", "public IImsCallSession createCallSessionInterface(ImsCallProfile profile) throws RemoteException", "public ImsCallSessionImplBase createCallSession(@NonNull ImsCallProfile profile)", "public int shouldProcessCall(@NonNull String[] numbers)", "protected IImsUt getUtInterface() throws RemoteException", "protected IImsEcbm getEcbmInterface() throws RemoteException", "public IImsMultiEndpoint getMultiEndpointInterface() throws RemoteException", "public ImsSmsImplBase getImsSmsImpl()", "public ImsUtImplBase getUt()", "public ImsEcbmImplBase getEcbm()", "public ImsMultiEndpointImplBase getMultiEndpoint()", "public void setUiTtyMode(int mode, @Nullable Message onCompleteMessage)", "public void setTerminalBasedCallWaitingStatus(boolean enabled)", "public void notifySrvccStarted(@NonNull Consumer<List<SrvccCall>> consumer)", "public void notifySrvccCompleted()", "public void notifySrvccFailed()", "public void notifySrvccCanceled()", "private void setSmsListener(IImsSmsListener listener)", "private void sendSms(int token, int messageRef, String format, String smsc, boolean isRetry, byte[] pdu)", "private void onMemoryAvailable(int token)", "private void acknowledgeSms(int token, int messageRef, @ImsSmsImplBase.DeliverStatusResult int result)", "private void acknowledgeSms(int token, int messageRef, @ImsSmsImplBase.DeliverStatusResult int result, byte[] pdu)", "private void acknowledgeSmsReport(int token, int messageRef, @ImsSmsImplBase.StatusReportResult int result)", "private void onSmsReady()", "public ImsSmsImplBase getSmsImplementation()", "private String getSmsFormat()", "public void onFeatureRemoved()", "public void onFeatureReady()", "public final IImsMmTelFeature getBinder()", "public final void setDefaultExecutor(@NonNull Executor executor)" ],
  "variableNames" : [ "LOG_TAG", "mExecutor", "mSmsImpl", "mTrafficCallbacks", "mImsMMTelBinder", "PROCESS_CALL_IMS", "PROCESS_CALL_CSFB", "EXTRA_IS_USSD", "EXTRA_IS_UNKNOWN_CALL", "AUDIO_HANDLER_ANDROID", "AUDIO_HANDLER_BASEBAND", "EPS_FALLBACK_REASON_INVALID", "EPS_FALLBACK_REASON_NO_NETWORK_TRIGGER", "EPS_FALLBACK_REASON_NO_NETWORK_RESPONSE", "IMS_TRAFFIC_TYPE_NONE", "IMS_TRAFFIC_TYPE_EMERGENCY", "IMS_TRAFFIC_TYPE_EMERGENCY_SMS", "IMS_TRAFFIC_TYPE_VOICE", "IMS_TRAFFIC_TYPE_VIDEO", "IMS_TRAFFIC_TYPE_SMS", "IMS_TRAFFIC_TYPE_REGISTRATION", "IMS_TRAFFIC_TYPE_UT_XCAP", "IMS_TRAFFIC_DIRECTION_INCOMING", "IMS_TRAFFIC_DIRECTION_OUTGOING", "mListener" ]
}