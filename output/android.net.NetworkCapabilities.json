{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkCapabilities.java",
  "packageName" : "android.net",
  "className" : "NetworkCapabilities",
  "comment" : "\n * Representation of the capabilities of an active network.\n *\n * <p>@see <a href=\"https://developer.android.com/training/basics/network-ops/reading-network-state>\n * this general guide</a> on how to use NetworkCapabilities and related classes.\n *\n * <p>NetworkCapabilities represent what a network can do and what its\n * characteristics are like. The principal attribute of NetworkCapabilities\n * is in the capabilities bits, which are checked with\n * {@link #hasCapability(int)}. See the list of capabilities and each\n * capability for a description of what it means.\n *\n * <p>Some prime examples include {@code NET_CAPABILITY_MMS}, which means that the\n * network is capable of sending MMS. A network without this capability\n * is not capable of sending MMS.\n * <p>The {@code NET_CAPABILITY_INTERNET} capability means that the network is\n * configured to reach the general Internet. It may or may not actually\n * provide connectivity ; the {@code NET_CAPABILITY_VALIDATED} bit indicates that\n * the system found actual connectivity to the general Internet the last\n * time it checked. Apps interested in actual connectivity should usually\n * look at both these capabilities.\n * <p>The {@code NET_CAPABILITY_NOT_METERED} capability is set for networks that\n * do not bill the user for consumption of bytes. Applications are\n * encouraged to consult this to determine appropriate usage, and to\n * limit usage of metered network where possible, including deferring\n * big downloads until such a time that an unmetered network is connected.\n * Also see {@link android.app.job.JobScheduler} to help with scheduling such\n * downloads, in particular\n * {@link android.app.job.JobInfo.Builder#setRequiredNetwork(NetworkRequest)}.\n * <p>NetworkCapabilities contain a number of other capabilities that\n * represent what modern networks can and can't do. Look up the individual\n * capabilities in this class to learn about each of them.\n *\n * <p>NetworkCapabilities typically represent attributes that can apply to\n * any network. The attributes that apply only to specific transports like\n * cellular or Wi-Fi can be found in the specifier (for requestable attributes)\n * or in the transport info (for non-requestable ones). See\n * {@link #getNetworkSpecifier} and {@link #getTransportInfo}. An app would\n * downcast these to the specific class for the transport they need if they\n * are interested in transport-specific attributes. Also see\n * {@link android.net.wifi.WifiNetworkSpecifier} or\n * {@link android.net.wifi.WifiInfo} for some examples of each of these.\n *\n * <p>NetworkCapabilities also contains other attributes like the estimated\n * upstream and downstream bandwidth and the specific transport of that\n * network (e.g. {@link #TRANSPORT_CELLULAR}). Generally, apps should normally\n * have little reason to check for the type of transport ; for example, to\n * query whether a network costs money to the user, do not look at the\n * transport, but instead look at the absence or presence of\n * {@link #NET_CAPABILITY_NOT_METERED} which will correctly account for\n * metered Wi-Fis and free of charge cell connections.\n *\n * <p>The system communicates with apps about connected networks and uses\n * NetworkCapabilities to express these capabilities about these networks.\n * Apps should register callbacks with the {@link ConnectivityManager#requestNetwork}\n * or {@link ConnectivityManager#registerNetworkCallback} family of methods\n * to learn about the capabilities of a network on a continuous basis\n * and be able to react to changes to capabilities. For quick debugging Android also\n * provides {@link ConnectivityManager#getNetworkCapabilities(Network)},\n * but the dynamic nature of networking makes this ill-suited to production\n * code since capabilities obtained in this way can go stale immediately.\n *\n * <p>Also see {@link NetworkRequest} which uses the same capabilities\n * together with {@link ConnectivityManager#requestNetwork} for how to\n * request the system brings up the kind of network your application needs.\n ",
  "links" : [ "#TRANSPORT_CELLULAR", "android.app.job.JobScheduler", "android.net.wifi.WifiInfo", "#getTransportInfo", "android.net.NetworkRequest", "android.net.ConnectivityManager#registerNetworkCallback", "android.app.job.JobInfo.Builder#setRequiredNetwork(NetworkRequest)", "#NET_CAPABILITY_NOT_METERED", "android.net.ConnectivityManager#requestNetwork", "android.net.ConnectivityManager#getNetworkCapabilities(Network)", "#hasCapability(int)", "android.net.wifi.WifiNetworkSpecifier", "#getNetworkSpecifier" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REDACT_NONE",
    "type" : "long",
    "comment" : "\n     * Don't redact any fields since the receiving app holds all the necessary permissions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REDACT_FOR_ACCESS_FINE_LOCATION",
    "type" : "long",
    "comment" : "\n     * Redact any fields that need {@link android.Manifest.permission#ACCESS_FINE_LOCATION}\n     * permission since the receiving app does not hold this permission or the location toggle\n     * is off.\n     *\n     * @see android.Manifest.permission#ACCESS_FINE_LOCATION\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "REDACT_FOR_LOCAL_MAC_ADDRESS",
    "type" : "long",
    "comment" : "\n     * Redact any fields that need {@link android.Manifest.permission#LOCAL_MAC_ADDRESS}\n     * permission since the receiving app does not hold this permission.\n     *\n     * @see android.Manifest.permission#LOCAL_MAC_ADDRESS\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#LOCAL_MAC_ADDRESS" ]
  }, {
    "name" : "REDACT_FOR_NETWORK_SETTINGS",
    "type" : "long",
    "comment" : "\n     *\n     * Redact any fields that need {@link android.Manifest.permission#NETWORK_SETTINGS}\n     * permission since the receiving app does not hold this permission.\n     *\n     * @see android.Manifest.permission#NETWORK_SETTINGS\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#NETWORK_SETTINGS" ]
  }, {
    "name" : "REDACT_ALL",
    "type" : "long",
    "comment" : "\n     * Redact all fields in this object that require any relevant permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mPrivateDnsBroken",
    "type" : "boolean",
    "comment" : " Set to true when private DNS is broken.",
    "links" : [ ]
  }, {
    "name" : "mUnderlyingNetworks",
    "type" : "List<Network>",
    "comment" : " This is an unmodifiable list and it will be returned as is in the getter.",
    "links" : [ ]
  }, {
    "name" : "mRequestorUid",
    "type" : "int",
    "comment" : "\n     * Uid of the app making the request.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRequestorPackageName",
    "type" : "String",
    "comment" : "\n     * Package name of the app making the request.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_ENTERPRISE_ID_1",
    "type" : "int",
    "comment" : "\n     * Enterprise capability identifier 1. It will be used to uniquely identify specific\n     * enterprise network.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_ENTERPRISE_ID_2",
    "type" : "int",
    "comment" : "\n     * Enterprise capability identifier 2. It will be used to uniquely identify specific\n     * enterprise network.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_ENTERPRISE_ID_3",
    "type" : "int",
    "comment" : "\n     * Enterprise capability identifier 3. It will be used to uniquely identify specific\n     * enterprise network.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_ENTERPRISE_ID_4",
    "type" : "int",
    "comment" : "\n     * Enterprise capability identifier 4. It will be used to uniquely identify specific\n     * enterprise network.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_ENTERPRISE_ID_5",
    "type" : "int",
    "comment" : "\n     * Enterprise capability identifier 5. It will be used to uniquely identify specific\n     * enterprise network.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALL_VALID_ENTERPRISE_IDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnterpriseId",
    "type" : "int",
    "comment" : "\n     * Bitfield representing the network's enterprise capability identifier.  If any are specified\n     * they will be satisfied by any Network that matches all of them.\n     * See {@link #addEnterpriseId(int)} for details on how masks are added\n     ",
    "links" : [ "#addEnterpriseId(int)" ]
  }, {
    "name" : "mNetworkCapabilities",
    "type" : "long",
    "comment" : "\n     * Represents the network's capabilities.  If any are specified they will be satisfied\n     * by any Network that matches all of them.\n     ",
    "links" : [ ]
  }, {
    "name" : "mForbiddenNetworkCapabilities",
    "type" : "long",
    "comment" : "\n     * If any capabilities specified here they must not exist in the matching Network.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_MMS",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach the\n     * carrier's MMSC for sending and receiving MMS messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_SUPL",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach the carrier's\n     * SUPL server, used to retrieve GPS information.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_DUN",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach the carrier's\n     * DUN or tethering gateway.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_FOTA",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach the carrier's\n     * FOTA portal, used for over the air updates.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_IMS",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach the carrier's\n     * IMS servers, used for network registration and signaling.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_CBS",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach the carrier's\n     * CBS servers, used for carrier specific services.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_WIFI_P2P",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach a Wi-Fi direct\n     * peer.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_IA",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach a carrier's\n     * Initial Attach servers.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_RCS",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach a carrier's\n     * RCS servers, used for Rich Communication Services.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_XCAP",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach a carrier's\n     * XCAP servers, used for configuration and control.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_EIMS",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach a carrier's\n     * Emergency IMS servers or other services, used for network signaling\n     * during emergency calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_NOT_METERED",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is unmetered.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_INTERNET",
    "type" : "int",
    "comment" : "\n     * Indicates that this network should be able to reach the internet.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_NOT_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is available for general use.  If this is not set\n     * applications should not attempt to communicate on this network.  Note that this\n     * is simply informative and not enforcement - enforcement is handled via other means.\n     * Set by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_TRUSTED",
    "type" : "int",
    "comment" : "\n     * Indicates that the user has indicated implicit trust of this network.  This\n     * generally means it's a sim-selected carrier, a plugged in ethernet, a paired\n     * BT device or a wifi the user asked to connect to.  Untrusted networks\n     * are probably limited to unknown wifi AP.  Set by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_NOT_VPN",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is not a VPN.  This capability is set by default and should be\n     * explicitly cleared for VPN networks.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_VALIDATED",
    "type" : "int",
    "comment" : "\n     * Indicates that connectivity on this network was successfully validated. For example, for a\n     * network with NET_CAPABILITY_INTERNET, it means that Internet connectivity was successfully\n     * detected.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_CAPTIVE_PORTAL",
    "type" : "int",
    "comment" : "\n     * Indicates that this network was found to have a captive portal in place last time it was\n     * probed.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_NOT_ROAMING",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is not roaming.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_FOREGROUND",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is available for use by apps, and not a network that is being\n     * kept up in the background to facilitate fast network switching.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_NOT_CONGESTED",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is not congested.\n     * <p>\n     * When a network is congested, applications should defer network traffic\n     * that can be done at a later time, such as uploading analytics.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_NOT_SUSPENDED",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is not currently suspended.\n     * <p>\n     * When a network is suspended, the network's IP addresses and any connections\n     * established on the network remain valid, but the network is temporarily unable\n     * to transfer data. This can happen, for example, if a cellular network experiences\n     * a temporary loss of signal, such as when driving through a tunnel, etc.\n     * A network with this capability is not suspended, so is expected to be able to\n     * transfer data.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_OEM_PAID",
    "type" : "int",
    "comment" : "\n     * Indicates that traffic that goes through this network is paid by oem. For example,\n     * this network can be used by system apps to upload telemetry data.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_MCX",
    "type" : "int",
    "comment" : "\n     * Indicates this is a network that has the ability to reach a carrier's Mission Critical\n     * servers.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_PARTIAL_CONNECTIVITY",
    "type" : "int",
    "comment" : "\n     * Indicates that this network was tested to only provide partial connectivity.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_TEMPORARILY_NOT_METERED",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is temporarily unmetered.\n     * <p>\n     * This capability will be set for networks that are generally metered, but are currently\n     * unmetered, e.g., because the user is in a particular area. This capability can be changed at\n     * any time. When it is removed, applications are responsible for stopping any data transfer\n     * that should not occur on a metered network.\n     * Note that most apps should use {@link #NET_CAPABILITY_NOT_METERED} instead. For more\n     * information, see https://developer.android.com/about/versions/11/features/5g#meteredness.\n     ",
    "links" : [ "#NET_CAPABILITY_NOT_METERED" ]
  }, {
    "name" : "NET_CAPABILITY_OEM_PRIVATE",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is private to the OEM and meant only for OEM use.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_VEHICLE_INTERNAL",
    "type" : "int",
    "comment" : "\n     * Indicates this is an internal vehicle network, meant to communicate with other\n     * automotive systems.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_NOT_VCN_MANAGED",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is not subsumed by a Virtual Carrier Network (VCN).\n     * <p>\n     * To provide an experience on a VCN similar to a single traditional carrier network, in\n     * some cases the system sets this bit is set by default in application's network requests,\n     * and may choose to remove it at its own discretion when matching the request to a network.\n     * <p>\n     * Applications that want to know about a Virtual Carrier Network's underlying networks,\n     * for example to use them for multipath purposes, should remove this bit from their network\n     * requests ; the system will not add it back once removed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_ENTERPRISE",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is intended for enterprise use.\n     * <p>\n     * 5G URSP rules may indicate that all data should use a connection dedicated for enterprise\n     * use. If the enterprise capability is requested, all enterprise traffic will be routed over\n     * the connection with this capability.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_VSIM",
    "type" : "int",
    "comment" : "\n     * Indicates that this network has ability to access the carrier's Virtual Sim service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_BIP",
    "type" : "int",
    "comment" : "\n     * Indicates that this network has ability to support Bearer Independent Protol.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_HEAD_UNIT",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is connected to an automotive head unit.\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_MMTEL",
    "type" : "int",
    "comment" : "\n     * Indicates that this network has ability to support MMTEL (Multimedia Telephony service).\n     ",
    "links" : [ ]
  }, {
    "name" : "NET_CAPABILITY_PRIORITIZE_LATENCY",
    "type" : "int",
    "comment" : "\n     * Indicates that this network should be able to prioritize latency for the internet.\n     *\n     * Starting with {@link Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, requesting this capability with\n     * {@link ConnectivityManager#requestNetwork} requires declaration in the self-certified\n     * network capabilities. See {@link NetworkRequest} for the self-certification documentation.\n     ",
    "links" : [ "android.net.ConnectivityManager#requestNetwork", "Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.net.NetworkRequest" ]
  }, {
    "name" : "NET_CAPABILITY_PRIORITIZE_BANDWIDTH",
    "type" : "int",
    "comment" : "\n     * Indicates that this network should be able to prioritize bandwidth for the internet.\n     *\n     * Starting with {@link Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, requesting this capability with\n     * {@link ConnectivityManager#requestNetwork} requires declaration in the self-certified\n     * network capabilities. See {@link NetworkRequest} for the self-certification documentation.\n     ",
    "links" : [ "android.net.ConnectivityManager#requestNetwork", "Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.net.NetworkRequest" ]
  }, {
    "name" : "NET_CAPABILITY_LOCAL_NETWORK",
    "type" : "int",
    "comment" : "\n     * Indicates that this network is a local network.\n     *\n     * Local networks are networks where the device is not obtaining IP addresses from the\n     * network, but advertising IP addresses itself. Examples of local networks are:\n     * <ul>\n     * <li>USB tethering or Wi-Fi hotspot networks to which the device is sharing its Internet\n     * connectivity.\n     * <li>Thread networks where the current device is the Thread Border Router.\n     * <li>Wi-Fi P2P networks where the current device is the Group Owner.\n     * </ul>\n     *\n     * Networks used to obtain Internet access are never local networks.\n     *\n     * Apps that target an SDK before {@link Build.VERSION_CODES.VANILLA_ICE_CREAM} will not see\n     * networks with this capability unless they explicitly set the NET_CAPABILITY_LOCAL_NETWORK\n     * in their NetworkRequests.\n     ",
    "links" : [ "Build.VERSION_CODES.VANILLA_ICE_CREAM" ]
  }, {
    "name" : "MAX_NET_CAPABILITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALL_VALID_CAPABILITIES",
    "type" : "long",
    "comment" : " Set all bits up to the MAX_NET_CAPABILITY-th bit",
    "links" : [ ]
  }, {
    "name" : "MUTABLE_CAPABILITIES",
    "type" : "long",
    "comment" : "\n     * Network capabilities that are expected to be mutable, i.e., can change while a particular\n     * network is connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "NON_REQUESTABLE_CAPABILITIES",
    "type" : "long",
    "comment" : " in an infinite loop about these.",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CAPABILITIES",
    "type" : "long",
    "comment" : "\n     * Capabilities that are set by default when the object is constructed.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONNECTIVITY_MANAGED_CAPABILITIES",
    "type" : "long",
    "comment" : "\n     * Capabilities that are managed by ConnectivityService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TEST_NETWORKS_ALLOWED_CAPABILITIES",
    "type" : "long",
    "comment" : "\n     * Capabilities that are allowed for all test networks. This list must be set so that it is safe\n     * for an unprivileged user to create a network with these capabilities via shell. As such, it\n     * must never contain capabilities that are generally useful to the system, such as INTERNET,\n     * IMS, SUPL, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEST_NETWORKS_EXTRA_ALLOWED_CAPABILITIES_ON_NON_CELL",
    "type" : "long",
    "comment" : "\n     * Extra allowed capabilities for test networks that do not have TRANSPORT_CELLULAR. Test\n     * networks with TRANSPORT_CELLULAR must not have those capabilities in order to mitigate\n     * the risk of being used by running apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransportTypes",
    "type" : "long",
    "comment" : "\n     * Representing the transport type.  Apps should generally not care about transport.  A\n     * request for a fast internet connection could be satisfied by a number of different\n     * transports.  If any are specified here it will be satisfied a Network that matches\n     * any of them.  If a caller doesn't care about the transport it should not specify any.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_CELLULAR",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses a Cellular transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_WIFI",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses a Wi-Fi transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_BLUETOOTH",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses a Bluetooth transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_ETHERNET",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses an Ethernet transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_VPN",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses a VPN transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_WIFI_AWARE",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses a Wi-Fi Aware transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_LOWPAN",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses a LoWPAN transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_TEST",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses a Test-only virtual interface as a transport.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_USB",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses a USB transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_THREAD",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses a Thread transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_SATELLITE",
    "type" : "int",
    "comment" : "\n     * Indicates this network uses a Satellite transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_TRANSPORT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MAX_TRANSPORT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ALL_VALID_TRANSPORTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNRESTRICTED_TEST_NETWORKS_ALLOWED_TRANSPORTS",
    "type" : "long",
    "comment" : "\n     * Allowed transports on an unrestricted test network (in addition to TRANSPORT_TEST).\n     ",
    "links" : [ ]
  }, {
    "name" : "mOwnerUid",
    "type" : "int",
    "comment" : "\n     * UID of the app that owns this network, or Process#INVALID_UID if none/unknown.\n     *\n     * <p>This field keeps track of the UID of the app that created this network and is in charge of\n     * its lifecycle. This could be the UID of apps such as the Wifi network suggestor, the running\n     * VPN, or Carrier Service app managing a cellular data connection.\n     *\n     * <p>For NetworkCapability instances being sent from ConnectivityService, this value MUST be\n     * reset to Process.INVALID_UID unless all the following conditions are met:\n     *\n     * <p>The caller is the network owner, AND one of the following sets of requirements is met:\n     *\n     * <ol>\n     *   <li>The described Network is a VPN\n     * </ol>\n     *\n     * <p>OR:\n     *\n     * <ol>\n     *   <li>The calling app is the network owner\n     *   <li>The calling app has the ACCESS_FINE_LOCATION permission granted\n     *   <li>The user's location toggle is on\n     * </ol>\n     *\n     * This is because the owner UID is location-sensitive. The apps that request a network could\n     * know where the device is if they can tell for sure the system has connected to the network\n     * they requested.\n     *\n     * <p>This is populated by the network agents and for the NetworkCapabilities instance sent by\n     * an app to the System Server, the value MUST be reset to Process.INVALID_UID by the system\n     * server.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdministratorUids",
    "type" : "int[]",
    "comment" : "\n     * UIDs of packages that are administrators of this network, or empty if none.\n     *\n     * <p>This field tracks the UIDs of packages that have permission to manage this network.\n     *\n     * <p>Network owners will also be listed as administrators.\n     *\n     * <p>For NetworkCapability instances being sent from the System Server, this value MUST be\n     * empty unless the destination is 1) the System Server, or 2) Telephony. In either case, the\n     * receiving entity must have the ACCESS_FINE_LOCATION permission and target R+.\n     *\n     * <p>When received from an app in a NetworkRequest this is always cleared out by the system\n     * server. This field is never used for matching NetworkRequests to NetworkAgents.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINK_BANDWIDTH_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Value indicating that link bandwidth is unspecified.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLinkUpBandwidthKbps",
    "type" : "int",
    "comment" : "\n     * Passive link bandwidth.  This is a rough guide of the expected peak bandwidth\n     * for the first hop on the given transport.  It is not measured, but may take into account\n     * link parameters (Radio technology, allocated channels, etc).\n     ",
    "links" : [ ]
  }, {
    "name" : "mLinkDownBandwidthKbps",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkSpecifier",
    "type" : "NetworkSpecifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransportInfo",
    "type" : "TransportInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_STRENGTH_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Magic value that indicates no signal strength provided. A request specifying this value is\n     * always satisfied.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSignalStrength",
    "type" : "int",
    "comment" : "\n     * Signal strength. This is a signed integer, and higher values indicate better signal.\n     * The exact units are bearer-dependent. For example, Wi-Fi uses RSSI.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUids",
    "type" : "ArraySet<UidRange>",
    "comment" : "\n     * List of UIDs this network applies to. No restriction if null.\n     * <p>\n     * For networks, mUids represent the list of network this applies to, and null means this\n     * network applies to all UIDs.\n     * For requests, mUids is the list of UIDs this network MUST apply to to match ; ALL UIDs\n     * must be included in a network so that they match. As an exception to the general rule,\n     * a null mUids field for requests mean \"no requirements\" rather than what the general rule\n     * would suggest (\"must apply to all UIDs\") : this is because this has shown to be what users\n     * of this API expect in practice. A network that must match all UIDs can still be\n     * expressed with a set ranging the entire set of possible UIDs.\n     * <p>\n     * mUids is typically (and at this time, only) used by VPN. This network is only available to\n     * the UIDs in this list, and it is their default network. Apps in this list that wish to\n     * bypass the VPN can do so iff the VPN app allows them to or if they are privileged. If this\n     * member is null, then the network is not restricted by app UID. If it's an empty list, then\n     * it means nobody can use it.\n     * As a special exception, the app managing this network (as identified by its UID stored in\n     * mOwnerUid) can always see this network. This is embodied by a special check in\n     * satisfiedByUids. That still does not mean the network necessarily <strong>applies</strong>\n     * to the app that manages it as determined by #appliesToUid.\n     * <p>\n     * Please note that in principle a single app can be associated with multiple UIDs because\n     * each app will have a different UID when it's run as a different (macro-)user. A single\n     * macro user can only have a single active VPN app at any given time however.\n     * <p>\n     * Also please be aware this class does not try to enforce any normalization on this. Callers\n     * can only alter the UIDs by setting them wholesale : this class does not provide any utility\n     * to add or remove individual UIDs or ranges. If callers have any normalization needs on\n     * their own (like requiring sortedness or no overlap) they need to enforce it\n     * themselves. Some of the internal methods also assume this is normalized as in no adjacent\n     * or overlapping ranges are present.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAllowedUids",
    "type" : "ArraySet<Integer>",
    "comment" : "\n     * List of UIDs that can always access this network.\n     * <p>\n     * UIDs in this list have access to this network, even if the network doesn't have the\n     * {@link #NET_CAPABILITY_NOT_RESTRICTED} capability and the UID does not hold the\n     * {@link android.Manifest.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS} permission.\n     * This is only useful for restricted networks. For non-restricted networks it has no effect.\n     * <p>\n     * This is disallowed in {@link NetworkRequest}, and can only be set by network agents. Network\n     * agents also have restrictions on how they can set these ; they can only back a public\n     * Android API. As such, Ethernet agents can set this when backing the per-UID access API, and\n     * Telephony can set exactly one UID which has to match the manager app for the associated\n     * subscription. Failure to comply with these rules will see this member cleared.\n     * <p>\n     * This member is never null, but can be empty.\n     * @hide\n     ",
    "links" : [ "#NET_CAPABILITY_NOT_RESTRICTED", "android.Manifest.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS", "android.net.NetworkRequest" ]
  }, {
    "name" : "mSSID",
    "type" : "String",
    "comment" : "\n     * The SSID of the network, or null if not applicable or unknown.\n     * <p>\n     * This is filled in by wifi code.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NetworkCapabilities>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubIds",
    "type" : "ArraySet<Integer>",
    "comment" : "\n     * Set of the subscription IDs that identifies the network or request, empty if none.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getEnterpriseIdsInternal()",
    "returnType" : "int",
    "comment" : "\n     * Gets the enterprise IDs as an int. Internal callers only.\n     *\n     * DO NOT USE THIS if not immediately collapsing back into a scalar. Instead,\n     * prefer getEnterpriseIds/hasEnterpriseId.\n     *\n     * @return the internal, version-dependent int representing enterprise ids\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getEnterpriseIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Get enteprise identifiers set.\n     *\n     * Get all the enterprise capabilities identifier set on this {@code NetworkCapability}\n     * If NET_CAPABILITY_ENTERPRISE is set and no enterprise ID is set, it is\n     * considered to have NET_CAPABILITY_ENTERPRISE by default.\n     * @return all the enterprise capabilities identifier set.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnterpriseId(@EnterpriseId int enterpriseId)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests for the presence of an enterprise capability identifier on this instance.\n     *\n     * If NET_CAPABILITY_ENTERPRISE is set and no enterprise ID is set, it is\n     * considered to have NET_CAPABILITY_ENTERPRISE by default.\n     * @param enterpriseId the enterprise capability identifier to be tested for.\n     * @return {@code true} if set on this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearAll()",
    "returnType" : "void",
    "comment" : "\n     * Completely clears the contents of this object, removing even the capabilities that are set\n     * by default when the object is constructed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(@NonNull NetworkCapabilities nc)",
    "returnType" : "void",
    "comment" : "\n     * Set all contents of this object to the contents of a NetworkCapabilities.\n     *\n     * @param nc Original NetworkCapabilities\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities addCapability(@NetCapability int capability)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Adds the given capability to this {@code NetworkCapability} instance.\n     * Note that when searching for a network to satisfy a request, all capabilities\n     * requested must be satisfied.\n     * <p>\n     * If the capability was previously added to the list of forbidden capabilities (either\n     * by default or added using {@link #addForbiddenCapability(int)}), then it will be removed\n     * from the list of forbidden capabilities as well.\n     *\n     * @param capability the capability to be added.\n     * @return This NetworkCapabilities instance, to facilitate chaining.\n     * @hide\n     ",
    "links" : [ "#addForbiddenCapability(int)" ]
  }, {
    "name" : "public void addForbiddenCapability(@NetCapability int capability)",
    "returnType" : "void",
    "comment" : "\n     * Adds the given capability to the list of forbidden capabilities of this\n     * {@code NetworkCapability} instance. Note that when searching for a network to\n     * satisfy a request, the network must not contain any capability from forbidden capability\n     * list.\n     * <p>\n     * If the capability was previously added to the list of required capabilities (for\n     * example, it was there by default or added using {@link #addCapability(int)} method), then\n     * it will be removed from the list of required capabilities as well.\n     *\n     * @see #addCapability(int)\n     * @hide\n     ",
    "links" : [ "#addCapability(int)" ]
  }, {
    "name" : "public NetworkCapabilities removeCapability(@NetCapability int capability)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Removes (if found) the given capability from this {@code NetworkCapability}\n     * instance that were added via addCapability(int) or setCapabilities(int[], int[]).\n     *\n     * @param capability the capability to be removed.\n     * @return This NetworkCapabilities instance, to facilitate chaining.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities removeForbiddenCapability(@NetCapability int capability)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Removes (if found) the given forbidden capability from this {@link NetworkCapabilities}\n     * instance that were added via addForbiddenCapability(int) or setCapabilities(int[], int[]).\n     *\n     * @param capability the capability to be removed.\n     * @return This NetworkCapabilities instance, to facilitate chaining.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkCapabilities" ]
  }, {
    "name" : "public NetworkCapabilities removeAllForbiddenCapabilities()",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Removes all forbidden capabilities from this {@link NetworkCapabilities} instance.\n     * @return This NetworkCapabilities instance, to facilitate chaining.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkCapabilities" ]
  }, {
    "name" : "public NetworkCapabilities setCapability(@NetCapability int capability, boolean value)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Sets (or clears) the given capability on this {@link NetworkCapabilities}\n     * instance.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkCapabilities" ]
  }, {
    "name" : "public long getCapabilitiesInternal()",
    "returnType" : "long",
    "comment" : "\n     * Gets the capabilities as an int. Internal callers only.\n     *\n     * DO NOT USE THIS if not immediately collapsing back into a scalar. Instead,\n     * prefer getCapabilities/hasCapability.\n     *\n     * @return an internal, version-dependent int representing the capabilities\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getCapabilities()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets all the capabilities set on this {@code NetworkCapability} instance.\n     *\n     * @return an array of capability values for this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getForbiddenCapabilities()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets all the forbidden capabilities set on this {@code NetworkCapability} instance.\n     *\n     * @return an array of forbidden capability values for this instance.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCapabilities(@NetCapability int[] capabilities, @NetCapability int[] forbiddenCapabilities)",
    "returnType" : "void",
    "comment" : "\n     * Sets all the capabilities set on this {@code NetworkCapability} instance.\n     * This overwrites any existing capabilities.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCapabilities(@NetCapability int[] capabilities)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated use {@link #setCapabilities(int[], int[])}\n     * @hide\n     ",
    "links" : [ "#setCapabilities(int" ]
  }, {
    "name" : "public NetworkCapabilities addEnterpriseId(@EnterpriseId int enterpriseId)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Adds the given enterprise capability identifier to this {@code NetworkCapability} instance.\n     * Note that when searching for a network to satisfy a request, all capabilities identifier\n     * requested must be satisfied.\n     *\n     * @param enterpriseId the enterprise capability identifier to be added.\n     * @return This NetworkCapabilities instance, to facilitate chaining.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private NetworkCapabilities removeEnterpriseId(@EnterpriseId int enterpriseId)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Removes (if found) the given enterprise capability identifier from this\n     * {@code NetworkCapability} instance that were added via addEnterpriseId(int)\n     *\n     * @param enterpriseId the enterprise capability identifier to be removed.\n     * @return This NetworkCapabilities instance, to facilitate chaining.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUnderlyingNetworks(@Nullable List<Network> networks)",
    "returnType" : "void",
    "comment" : "\n     * Set the underlying networks of this network.\n     *\n     * @param networks The underlying networks of this network.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Network> getUnderlyingNetworks()",
    "returnType" : "List<Network>",
    "comment" : "\n     * Get the underlying networks of this network. If the caller doesn't have one of\n     * {@link android.Manifest.permission.NETWORK_FACTORY},\n     * {@link android.Manifest.permission.NETWORK_SETTINGS} and\n     * {@link NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK}, this is always redacted to null and\n     * it will be never useful to the caller.\n     *\n     * @return <li>If the list is null, this network hasn't declared underlying networks.</li>\n     *         <li>If the list is empty, this network has declared that it has no underlying\n     *         networks or it doesn't run on any of the available networks.</li>\n     *         <li>The list can contain multiple underlying networks, e.g. a VPN running over\n     *         multiple networks at the same time.</li>\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.NETWORK_SETTINGS", "android.Manifest.permission.NETWORK_FACTORY", "NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK" ]
  }, {
    "name" : "private boolean equalsUnderlyingNetworks(@NonNull NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCapability(@NetCapability int capability)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests for the presence of a capability on this instance.\n     *\n     * @param capability the capability to be tested for.\n     * @return {@code true} if set on this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasForbiddenCapability(@NetCapability int capability)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests for the presence of a forbidden capability on this instance.\n     *\n     * @param capability the capability to be tested for.\n     * @return {@code true} if this capability is set forbidden on this instance.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasConnectivityManagedCapability()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this NetworkCapabilities has connectivity-managed capabilities or not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCapabilityCarrierName(@NetCapability int capability)",
    "returnType" : "String",
    "comment" : "\n     * Get the name of the given capability that carriers use.\n     * If the capability does not have a carrier-name, returns null.\n     *\n     * @param capability The capability to get the carrier-name of.\n     * @return The carrier-name of the capability, or null if it doesn't exist.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String describeFirstNonRequestableCapability()",
    "returnType" : "String",
    "comment" : "\n     * Convenience function that returns a human-readable description of the first mutable\n     * capability we find. Used to present an error message to apps that request mutable\n     * capabilities.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean equalsEnterpriseCapabilitiesId(@NonNull NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean satisfiedByEnterpriseCapabilitiesId(@NonNull NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean satisfiedByNetCapabilities(@NonNull NetworkCapabilities nc, boolean onlyImmutable)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equalsNetCapabilities(@NonNull NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private boolean equalsNetCapabilitiesRequestable(@NonNull NetworkCapabilities that)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void maybeMarkCapabilitiesRestricted()",
    "returnType" : "void",
    "comment" : "\n     * Removes the NET_CAPABILITY_NOT_RESTRICTED capability if inferring the network is restricted.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void restrictCapabilitesForTestNetwork(int creatorUid)",
    "returnType" : "void",
    "comment" : "\n     * @see #restrictCapabilitiesForTestNetwork(int)\n     * @deprecated Use {@link #restrictCapabilitiesForTestNetwork(int)} (without the typo) instead.\n     * @hide\n     ",
    "links" : [ "#restrictCapabilitiesForTestNetwork(int)" ]
  }, {
    "name" : "public void restrictCapabilitiesForTestNetwork(int creatorUid)",
    "returnType" : "void",
    "comment" : "\n     * Test networks have strong restrictions on what capabilities they can have. Enforce these\n     * restrictions.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidTransport(@Transport int transportType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities addTransportType(@Transport int transportType)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Adds the given transport type to this {@code NetworkCapability} instance.\n     * Multiple transports may be applied.  Note that when searching\n     * for a network to satisfy a request, any listed in the request will satisfy the request.\n     * For example {@code TRANSPORT_WIFI} and {@code TRANSPORT_ETHERNET} added to a\n     * {@code NetworkCapabilities} would cause either a Wi-Fi network or an Ethernet network\n     * to be selected.  This is logically different than\n     * {@code NetworkCapabilities.NET_CAPABILITY_*} listed above.\n     *\n     * @param transportType the transport type to be added.\n     * @return This NetworkCapabilities instance, to facilitate chaining.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities removeTransportType(@Transport int transportType)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Removes (if found) the given transport from this {@code NetworkCapability} instance.\n     *\n     * @param transportType the transport type to be removed.\n     * @return This NetworkCapabilities instance, to facilitate chaining.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setTransportType(@Transport int transportType, boolean value)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Sets (or clears) the given transport on this {@link NetworkCapabilities}\n     * instance.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.NetworkCapabilities" ]
  }, {
    "name" : "public int[] getTransportTypes()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets all the transports set on this {@code NetworkCapability} instance.\n     *\n     * @return an array of transport type values for this instance.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTransportTypesInternal()",
    "returnType" : "long",
    "comment" : "\n     * Gets the transports as an int. Internal callers only.\n     *\n     * Prefer getTransportTypes/hasTransportType if not immediately collapsing back into a scalar.\n     *\n     * @return a long integer representing the transport types.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTransportTypes(@Transport int[] transportTypes)",
    "returnType" : "void",
    "comment" : "\n     * Sets all the transports set on this {@code NetworkCapability} instance.\n     * This overwrites any existing transports.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTransport(@Transport int transportType)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests for the presence of a transport on this instance.\n     *\n     * @param transportType the transport type to be tested for.\n     * @return {@code true} if set on this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSingleTransport(@Transport int transportType)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff this NetworkCapabilities has the specified transport and no other.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSingleTransportBesidesTest(@Transport int transportType)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff this NC has the specified transport and no other, ignoring TRANSPORT_TEST.\n     *\n     * If this NC has the passed transport and no other, this method returns true.\n     * If this NC has the passed transport, TRANSPORT_TEST and no other, this method returns true.\n     * Otherwise, this method returns false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean satisfiedByTransportTypes(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equalsTransportTypes(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setOwnerUid(final int uid)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Set the UID of the owner app.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOwnerUid()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the UID of the app that owns this network.\n     *\n     * <p>For user privacy reasons, this field will only be populated if the following conditions\n     * are met:\n     *\n     * <p>The caller is the network owner, AND one of the following sets of requirements is met:\n     *\n     * <ol>\n     *   <li>The described Network is a VPN\n     * </ol>\n     *\n     * <p>OR:\n     *\n     * <ol>\n     *   <li>The calling app is the network owner\n     *   <li>The calling app has the ACCESS_FINE_LOCATION permission granted\n     *   <li>The user's location toggle is on\n     * </ol>\n     *\n     * Instances of NetworkCapabilities sent to apps without the appropriate permissions will have\n     * this field cleared out.\n     *\n     * <p>\n     * This field will only be populated for VPN and wifi network suggestor apps (i.e using\n     * {@link android.net.wifi.WifiNetworkSuggestion WifiNetworkSuggestion}), and only for the\n     * network they own. In the case of wifi network suggestors apps, this field is also location\n     * sensitive, so the app needs to hold {@link android.Manifest.permission#ACCESS_FINE_LOCATION}\n     * permission. If the app targets SDK version greater than or equal to\n     * {@link Build.VERSION_CODES#S}, then they also need to use\n     * {@link NetworkCallback#FLAG_INCLUDE_LOCATION_INFO} to get the info in their callback. If the\n     * apps targets SDK version equal to {{@link Build.VERSION_CODES#R}, this field will always be\n     * included. The app will be blamed for location access if this field is included.\n     * </p>\n     ",
    "links" : [ "android.net.ConnectivityManager.NetworkCallback#FLAG_INCLUDE_LOCATION_INFO", "Build.VERSION_CODES#S", "android.Manifest.permission#ACCESS_FINE_LOCATION", "Build.VERSION_CODES#R", "android.net.wifi.WifiNetworkSuggestion" ]
  }, {
    "name" : "private boolean equalsOwnerUid(@NonNull final NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setAdministratorUids(@NonNull final int[] administratorUids)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Sets the int[] of UIDs that are administrators of this network.\n     *\n     * <p>UIDs included in administratorUids gain administrator privileges over this Network.\n     * Examples of UIDs that should be included in administratorUids are:\n     *\n     * <ul>\n     *   <li>Carrier apps with privileges for the relevant subscription\n     *   <li>Active VPN apps\n     *   <li>Other application groups with a particular Network-related role\n     * </ul>\n     *\n     * <p>In general, user-supplied networks (such as WiFi networks) do not have an administrator.\n     *\n     * <p>An app is granted owner privileges over Networks that it supplies. The owner UID MUST\n     * always be included in administratorUids.\n     *\n     * <p>The administrator UIDs are set by network agents.\n     *\n     * @param administratorUids the UIDs to be set as administrators of this Network.\n     * @throws IllegalArgumentException if duplicate UIDs are contained in administratorUids\n     * @see #mAdministratorUids\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getAdministratorUids()",
    "returnType" : "int[]",
    "comment" : "\n     * Retrieves the UIDs that are administrators of this Network.\n     *\n     * <p>This is only populated in NetworkCapabilities objects that come from network agents for\n     * networks that are managed by specific apps on the system, such as carrier privileged apps or\n     * wifi suggestion apps. This will include the network owner.\n     *\n     * @return the int[] of UIDs that are administrators of this Network\n     * @see #mAdministratorUids\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equalsAdministratorUids(@NonNull final NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the set of administrator UIDs of this network is the same as that of the passed one.\n     *\n     * <p>The administrator UIDs must be in sorted order.\n     *\n     * <p>nc is assumed non-null. Else, NPE.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setLinkUpstreamBandwidthKbps(int upKbps)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Sets the upstream bandwidth for this network in Kbps.  This always only refers to\n     * the estimated first hop transport bandwidth.\n     * <p>\n     * @see Builder#setLinkUpstreamBandwidthKbps\n     *\n     * @param upKbps the estimated first hop upstream (device to network) bandwidth.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLinkUpstreamBandwidthKbps()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the upstream bandwidth for this network in Kbps.  This always only refers to\n     * the estimated first hop transport bandwidth.\n     *\n     * @return The estimated first hop upstream (device to network) bandwidth.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setLinkDownstreamBandwidthKbps(int downKbps)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Sets the downstream bandwidth for this network in Kbps.  This always only refers to\n     * the estimated first hop transport bandwidth.\n     * <p>\n     * @see Builder#setLinkUpstreamBandwidthKbps\n     *\n     * @param downKbps the estimated first hop downstream (network to device) bandwidth.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLinkDownstreamBandwidthKbps()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the downstream bandwidth for this network in Kbps.  This always only refers to\n     * the estimated first hop transport bandwidth.\n     *\n     * @return The estimated first hop downstream (network to device) bandwidth.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean satisfiedByLinkBandwidths(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean equalsLinkBandwidths(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int minBandwidth(int a, int b)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int maxBandwidth(int a, int b)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setNetworkSpecifier(@NonNull NetworkSpecifier networkSpecifier)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Sets the optional bearer specific network specifier.\n     * This has no meaning if a single transport is also not specified, so calling\n     * this without a single transport set will generate an exception, as will\n     * subsequently adding or removing transports after this is set.\n     * </p>\n     *\n     * @param networkSpecifier A concrete, parcelable framework class that extends\n     *                         NetworkSpecifier.\n     * @return This NetworkCapabilities instance, to facilitate chaining.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean specifierAcceptableForMultipleTransports(long transportTypes)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setTransportInfo(@NonNull TransportInfo transportInfo)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Sets the optional transport specific information.\n     *\n     * @param transportInfo A concrete, parcelable framework class that extends\n     * {@link TransportInfo}.\n     * @return This NetworkCapabilities instance, to facilitate chaining.\n     * @hide\n     ",
    "links" : [ "android.net.TransportInfo" ]
  }, {
    "name" : "public NetworkSpecifier getNetworkSpecifier()",
    "returnType" : "NetworkSpecifier",
    "comment" : "\n     * Gets the optional bearer specific network specifier. May be {@code null} if not set.\n     *\n     * @return The optional {@link NetworkSpecifier} specifying the bearer specific network\n     *         specifier or {@code null}.\n     ",
    "links" : [ "android.net.NetworkSpecifier" ]
  }, {
    "name" : "public TransportInfo getTransportInfo()",
    "returnType" : "TransportInfo",
    "comment" : "\n     * Returns a transport-specific information container. The application may cast this\n     * container to a concrete sub-class based on its knowledge of the network request. The\n     * application should be able to deal with a {@code null} return value or an invalid case,\n     * e.g. use {@code instanceof} operator to verify expected type.\n     *\n     * @return A concrete implementation of the {@link TransportInfo} class or null if not\n     * available for the network.\n     ",
    "links" : [ "android.net.TransportInfo" ]
  }, {
    "name" : "private boolean satisfiedBySpecifier(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean equalsSpecifier(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean equalsTransportInfo(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setSignalStrength(int signalStrength)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Sets the signal strength. This is a signed integer, with higher values indicating a stronger\n     * signal. The exact units are bearer-dependent. For example, Wi-Fi uses the same RSSI units\n     * reported by wifi code.\n     * <p>\n     * Note that when used to register a network callback, this specifies the minimum acceptable\n     * signal strength. When received as the state of an existing network it specifies the current\n     * value. A value of {@link #SIGNAL_STRENGTH_UNSPECIFIED} means no value when received and has\n     * no effect when requesting a callback.\n     *\n     * @param signalStrength the bearer-specific signal strength.\n     * @hide\n     ",
    "links" : [ "#SIGNAL_STRENGTH_UNSPECIFIED" ]
  }, {
    "name" : "public boolean hasSignalStrength()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this object specifies a signal strength.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSignalStrength()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the signal strength.\n     *\n     * @return The bearer-specific signal strength.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean satisfiedBySignalStrength(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean equalsSignalStrength(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setSingleUid(int uid)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Convenience method to set the UIDs this network applies to to a single UID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setUids(@Nullable Set<Range<Integer>> uids)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Set the list of UIDs this network applies to.\n     * This makes a copy of the set so that callers can't modify it after the call.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Range<Integer>> getUids()",
    "returnType" : "Set<Range<Integer>>",
    "comment" : "\n     * Get the list of UIDs this network applies to.\n     * This returns a copy of the set so that callers can't modify the original object.\n     *\n     * @return the list of UIDs this network applies to. If {@code null}, then the network applies\n     *         to all UIDs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<UidRange> getUidRanges()",
    "returnType" : "Set<UidRange>",
    "comment" : "\n     * Get the list of UIDs this network applies to.\n     * This returns a copy of the set so that callers can't modify the original object.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean appliesToUid(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Test whether this network applies to this UID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equalsUids(@NonNull NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the set of UIDs that this network applies to is the same as the passed network.\n     * <p>\n     * This test only checks whether equal range objects are in both sets. It will\n     * return false if the ranges are not exactly the same, even if the covered UIDs\n     * are for an equivalent result.\n     * <p>\n     * Note that this method is not very optimized, which is fine as long as it's not used very\n     * often.\n     * <p>\n     * nc is assumed nonnull, else NPE.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean satisfiedByUids(@NonNull NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Test whether the passed NetworkCapabilities satisfies the UIDs this capabilities require.\n     *\n     * This method is called on the NetworkCapabilities embedded in a request with the\n     * capabilities of an available network. It checks whether all the UIDs from this listen\n     * (representing the UIDs that must have access to the network) are satisfied by the UIDs\n     * in the passed nc (representing the UIDs that this network is available to).\n     * <p>\n     * As a special exception, the UID that created the passed network (as represented by its\n     * mOwnerUid field) always satisfies a NetworkRequest requiring it (of LISTEN\n     * or REQUEST types alike), even if the network does not apply to it. That is so a VPN app\n     * can see its own network when it listens for it.\n     * <p>\n     * nc is assumed nonnull. Else, NPE.\n     * @see #appliesToUid\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean appliesToUidRange(@NonNull UidRange requiredRange)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this network applies to the passed ranges.\n     * This assumes that to apply, the passed range has to be entirely contained\n     * within one of the ranges this network applies to. If the ranges are not normalized,\n     * this method may return false even though all required UIDs are covered because no\n     * single range contained them all.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAllowedUids(@NonNull final Set<Integer> uids)",
    "returnType" : "void",
    "comment" : "\n     * Set the list of UIDs that can always access this network.\n     * @param uids\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Integer> getAllowedUids()",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * The list of UIDs that can always access this network.\n     *\n     * The UIDs in this list can always access this network, even if it is restricted and\n     * the UID doesn't hold the USE_RESTRICTED_NETWORKS permission. This is defined by the\n     * network agent in charge of creating the network.\n     *\n     * The UIDs are only visible to network factories and the system server, since the system\n     * server makes sure to redact them before sending a NetworkCapabilities to a process\n     * that doesn't hold the permission.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArraySet<Integer> getAllowedUidsNoCopy()",
    "returnType" : "ArraySet<Integer>",
    "comment" : " of the defensive copy.",
    "links" : [ ]
  }, {
    "name" : "public boolean isUidWithAccess(int uid)",
    "returnType" : "boolean",
    "comment" : " TODO : should this be \"doesUidHaveAccess\" and check the USE_RESTRICTED_NETWORKS permission ?",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAllowedUids()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether any UID is in the list of access UIDs\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean equalsAllowedUids(@NonNull NetworkCapabilities other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setSSID(@Nullable String ssid)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Sets the SSID of this network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSsid()",
    "returnType" : "String",
    "comment" : "\n     * Gets the SSID of this network, or null if none or unknown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equalsSSID(@NonNull NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the SSID of this network is the same as the SSID of the passed network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean satisfiedBySSID(@NonNull NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the SSID requirements of this object are matched by the passed object.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean satisfiedByNetworkCapabilities(NetworkCapabilities nc, boolean onlyImmutable)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if our requirements are satisfied by the given {@code NetworkCapabilities}.\n     *\n     * @param nc the {@code NetworkCapabilities} that may or may not satisfy our requirements.\n     * @param onlyImmutable if {@code true}, do not consider mutable requirements such as link\n     *         bandwidth, signal strength, or validation / captive portal status.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean satisfiedByNetworkCapabilities(@Nullable NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if our requirements are satisfied by the given {@code NetworkCapabilities}.\n     *\n     * @param nc the {@code NetworkCapabilities} that may or may not satisfy our requirements.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean satisfiedByImmutableNetworkCapabilities(@Nullable NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if our immutable requirements are satisfied by the given {@code NetworkCapabilities}.\n     *\n     * @param nc the {@code NetworkCapabilities} that may or may not satisfy our requirements.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String describeImmutableDifferences(@Nullable NetworkCapabilities that)",
    "returnType" : "String",
    "comment" : "\n     * Checks that our immutable capabilities are the same as those of the given\n     * {@code NetworkCapabilities} and return a String describing any difference.\n     * The returned String is empty if there is no difference.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String describeCapsDifferencesFrom(@Nullable final NetworkCapabilities old)",
    "returnType" : "String",
    "comment" : "\n     * Returns a short but human-readable string of updates from an older set of capabilities.\n     * @param old the old capabilities to diff from\n     * @return a string fit for logging differences, or null if no differences.\n     *         this never returns the empty string. See BitUtils#describeDifferences.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equalRequestableCapabilities(@Nullable NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks that our requestable capabilities are the same as those of the given\n     * {@code NetworkCapabilities}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeParcelableArraySet(Parcel in, @Nullable ArraySet<T> val, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String capabilityNamesOf(@Nullable @NetCapability int[] capabilities)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String capabilityNameOf(@NetCapability int capability)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String enterpriseIdNameOf(@NetCapability int capability)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String transportNamesOf(@Nullable @Transport int[] types)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String transportNameOf(@Transport int transport)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkValidTransportType(@Transport int transport)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidCapability(@NetworkCapabilities.NetCapability int capability)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkValidCapability(@NetworkCapabilities.NetCapability int capability)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidEnterpriseId(@NetworkCapabilities.EnterpriseId int enterpriseId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkValidEnterpriseId(@NetworkCapabilities.EnterpriseId int enterpriseId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isMetered()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this {@code NetworkCapability} instance is metered.\n     *\n     * @return {@code true} if {@code NET_CAPABILITY_NOT_METERED} is not set on this instance.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPrivateDnsBroken()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if private dns is broken.\n     *\n     * @return {@code true} if private DNS is broken on this network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPrivateDnsBroken(boolean broken)",
    "returnType" : "void",
    "comment" : "\n     * Set mPrivateDnsBroken to true when private dns is broken.\n     *\n     * @param broken the status of private DNS to be set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean equalsPrivateDnsBroken(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setRequestorUid(int uid)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Set the UID of the app making the request.\n     *\n     * For instances of NetworkCapabilities representing a request, sets the\n     * UID of the app making the request. For a network created by the system,\n     * sets the UID of the only app whose requests can match this network.\n     * This can be set to {@link Process#INVALID_UID} if there is no such app,\n     * or if this instance of NetworkCapabilities is about to be sent to a\n     * party that should not learn about this.\n     *\n     * @param uid UID of the app.\n     * @hide\n     ",
    "links" : [ "android.os.Process#INVALID_UID" ]
  }, {
    "name" : "public int getRequestorUid()",
    "returnType" : "int",
    "comment" : "\n     * Returns the UID of the app making the request.\n     *\n     * For a NetworkRequest being made by an app, contains the app's UID. For a network\n     * created by the system, contains the UID of the only app whose requests can match\n     * this network, or {@link Process#INVALID_UID} if none or if the\n     * caller does not have permission to learn about this.\n     *\n     * @return the uid of the app making the request.\n     * @hide\n     ",
    "links" : [ "android.os.Process#INVALID_UID" ]
  }, {
    "name" : "public NetworkCapabilities setRequestorPackageName(@NonNull String packageName)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Set the package name of the app making the request.\n     *\n     * For instances of NetworkCapabilities representing a request, sets the\n     * package name of the app making the request. For a network created by the system,\n     * sets the package name of the only app whose requests can match this network.\n     * This can be set to null if there is no such app, or if this instance of\n     * NetworkCapabilities is about to be sent to a party that should not learn about this.\n     *\n     * @param packageName package name of the app.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRequestorPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the package name of the app making the request.\n     *\n     * For a NetworkRequest being made by an app, contains the app's package name. For a\n     * network created by the system, contains the package name of the only app whose\n     * requests can match this network, or null if none or if the caller does not have\n     * permission to learn about this.\n     *\n     * @return the package name of the app making the request.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setRequestorUidAndPackageName(int uid, @NonNull String packageName)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Set the uid and package name of the app causing this network to exist.\n     *\n     * See {@link #setRequestorUid} and {@link #setRequestorPackageName}\n     *\n     * @param uid UID of the app.\n     * @param packageName package name of the app.\n     * @hide\n     ",
    "links" : [ "#setRequestorUid", "#setRequestorPackageName" ]
  }, {
    "name" : "private boolean satisfiedByRequestor(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Test whether the passed NetworkCapabilities satisfies the requestor restrictions of this\n     * capabilities.\n     *\n     * This method is called on the NetworkCapabilities embedded in a request with the\n     * capabilities of an available network. If the available network, sets a specific\n     * requestor (by uid and optionally package name), then this will only match a request from the\n     * same app. If either of the capabilities have an unset uid or package name, then it matches\n     * everything.\n     * <p>\n     * nc is assumed nonnull. Else, NPE.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean equalsRequestor(NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NetworkCapabilities setSubscriptionIds(@NonNull Set<Integer> subIds)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n     * Sets the subscription ID set that associated to this network or request.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Integer> getSubscriptionIds()",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Gets the subscription ID set that associated to this network or request.\n     *\n     * <p>Instances of NetworkCapabilities will only have this field populated by the system if the\n     * receiver holds the NETWORK_FACTORY permission. In all other cases, it will be the empty set.\n     *\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean equalsSubscriptionIds(@NonNull NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the subscription ID set of this network is the same as that of the passed one.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean satisfiedBySubscriptionIds(@NonNull NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the subscription ID set requirements of this object are matched by the passed one.\n     * If specified in the request, the passed one need to have at least one subId and at least\n     * one of them needs to be in the request set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getApplicableRedactions()",
    "returnType" : "long",
    "comment" : "\n     * Returns a bitmask of all the applicable redactions (based on the permissions held by the\n     * receiving app) to be performed on this object.\n     *\n     * @return bitmask of redactions applicable on this instance.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private NetworkCapabilities removeDefaultCapabilites()",
    "returnType" : "NetworkCapabilities",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getEnterpriseIdsInternal()", "public int[] getEnterpriseIds()", "public boolean hasEnterpriseId(@EnterpriseId int enterpriseId)", "public void clearAll()", "public void set(@NonNull NetworkCapabilities nc)", "public NetworkCapabilities addCapability(@NetCapability int capability)", "public void addForbiddenCapability(@NetCapability int capability)", "public NetworkCapabilities removeCapability(@NetCapability int capability)", "public NetworkCapabilities removeForbiddenCapability(@NetCapability int capability)", "public NetworkCapabilities removeAllForbiddenCapabilities()", "public NetworkCapabilities setCapability(@NetCapability int capability, boolean value)", "public long getCapabilitiesInternal()", "public int[] getCapabilities()", "public int[] getForbiddenCapabilities()", "public void setCapabilities(@NetCapability int[] capabilities, @NetCapability int[] forbiddenCapabilities)", "public void setCapabilities(@NetCapability int[] capabilities)", "public NetworkCapabilities addEnterpriseId(@EnterpriseId int enterpriseId)", "private NetworkCapabilities removeEnterpriseId(@EnterpriseId int enterpriseId)", "public void setUnderlyingNetworks(@Nullable List<Network> networks)", "public List<Network> getUnderlyingNetworks()", "private boolean equalsUnderlyingNetworks(@NonNull NetworkCapabilities nc)", "public boolean hasCapability(@NetCapability int capability)", "public boolean hasForbiddenCapability(@NetCapability int capability)", "public boolean hasConnectivityManagedCapability()", "public static String getCapabilityCarrierName(@NetCapability int capability)", "public String describeFirstNonRequestableCapability()", "private boolean equalsEnterpriseCapabilitiesId(@NonNull NetworkCapabilities nc)", "private boolean satisfiedByEnterpriseCapabilitiesId(@NonNull NetworkCapabilities nc)", "private boolean satisfiedByNetCapabilities(@NonNull NetworkCapabilities nc, boolean onlyImmutable)", "public boolean equalsNetCapabilities(@NonNull NetworkCapabilities nc)", "private boolean equalsNetCapabilitiesRequestable(@NonNull NetworkCapabilities that)", "public void maybeMarkCapabilitiesRestricted()", "public void restrictCapabilitesForTestNetwork(int creatorUid)", "public void restrictCapabilitiesForTestNetwork(int creatorUid)", "public static boolean isValidTransport(@Transport int transportType)", "public NetworkCapabilities addTransportType(@Transport int transportType)", "public NetworkCapabilities removeTransportType(@Transport int transportType)", "public NetworkCapabilities setTransportType(@Transport int transportType, boolean value)", "public int[] getTransportTypes()", "public long getTransportTypesInternal()", "public void setTransportTypes(@Transport int[] transportTypes)", "public boolean hasTransport(@Transport int transportType)", "public boolean hasSingleTransport(@Transport int transportType)", "public boolean hasSingleTransportBesidesTest(@Transport int transportType)", "private boolean satisfiedByTransportTypes(NetworkCapabilities nc)", "public boolean equalsTransportTypes(NetworkCapabilities nc)", "public NetworkCapabilities setOwnerUid(final int uid)", "public int getOwnerUid()", "private boolean equalsOwnerUid(@NonNull final NetworkCapabilities nc)", "public NetworkCapabilities setAdministratorUids(@NonNull final int[] administratorUids)", "public int[] getAdministratorUids()", "public boolean equalsAdministratorUids(@NonNull final NetworkCapabilities nc)", "public NetworkCapabilities setLinkUpstreamBandwidthKbps(int upKbps)", "public int getLinkUpstreamBandwidthKbps()", "public NetworkCapabilities setLinkDownstreamBandwidthKbps(int downKbps)", "public int getLinkDownstreamBandwidthKbps()", "private boolean satisfiedByLinkBandwidths(NetworkCapabilities nc)", "private boolean equalsLinkBandwidths(NetworkCapabilities nc)", "public static int minBandwidth(int a, int b)", "public static int maxBandwidth(int a, int b)", "public NetworkCapabilities setNetworkSpecifier(@NonNull NetworkSpecifier networkSpecifier)", "private boolean specifierAcceptableForMultipleTransports(long transportTypes)", "public NetworkCapabilities setTransportInfo(@NonNull TransportInfo transportInfo)", "public NetworkSpecifier getNetworkSpecifier()", "public TransportInfo getTransportInfo()", "private boolean satisfiedBySpecifier(NetworkCapabilities nc)", "private boolean equalsSpecifier(NetworkCapabilities nc)", "private boolean equalsTransportInfo(NetworkCapabilities nc)", "public NetworkCapabilities setSignalStrength(int signalStrength)", "public boolean hasSignalStrength()", "public int getSignalStrength()", "private boolean satisfiedBySignalStrength(NetworkCapabilities nc)", "private boolean equalsSignalStrength(NetworkCapabilities nc)", "public NetworkCapabilities setSingleUid(int uid)", "public NetworkCapabilities setUids(@Nullable Set<Range<Integer>> uids)", "public Set<Range<Integer>> getUids()", "public Set<UidRange> getUidRanges()", "public boolean appliesToUid(int uid)", "public boolean equalsUids(@NonNull NetworkCapabilities nc)", "public boolean satisfiedByUids(@NonNull NetworkCapabilities nc)", "public boolean appliesToUidRange(@NonNull UidRange requiredRange)", "public void setAllowedUids(@NonNull final Set<Integer> uids)", "public Set<Integer> getAllowedUids()", "public ArraySet<Integer> getAllowedUidsNoCopy()", "public boolean isUidWithAccess(int uid)", "public boolean hasAllowedUids()", "private boolean equalsAllowedUids(@NonNull NetworkCapabilities other)", "public NetworkCapabilities setSSID(@Nullable String ssid)", "public String getSsid()", "public boolean equalsSSID(@NonNull NetworkCapabilities nc)", "public boolean satisfiedBySSID(@NonNull NetworkCapabilities nc)", "private boolean satisfiedByNetworkCapabilities(NetworkCapabilities nc, boolean onlyImmutable)", "public boolean satisfiedByNetworkCapabilities(@Nullable NetworkCapabilities nc)", "public boolean satisfiedByImmutableNetworkCapabilities(@Nullable NetworkCapabilities nc)", "public String describeImmutableDifferences(@Nullable NetworkCapabilities that)", "public String describeCapsDifferencesFrom(@Nullable final NetworkCapabilities old)", "public boolean equalRequestableCapabilities(@Nullable NetworkCapabilities nc)", "public boolean equals(@Nullable Object obj)", "public int hashCode()", "public int describeContents()", "private void writeParcelableArraySet(Parcel in, @Nullable ArraySet<T> val, int flags)", "public void writeToParcel(Parcel dest, int flags)", "public String toString()", "public static String capabilityNamesOf(@Nullable @NetCapability int[] capabilities)", "public static String capabilityNameOf(@NetCapability int capability)", "private static String enterpriseIdNameOf(@NetCapability int capability)", "public static String transportNamesOf(@Nullable @Transport int[] types)", "public static String transportNameOf(@Transport int transport)", "private static void checkValidTransportType(@Transport int transport)", "private static boolean isValidCapability(@NetworkCapabilities.NetCapability int capability)", "private static void checkValidCapability(@NetworkCapabilities.NetCapability int capability)", "private static boolean isValidEnterpriseId(@NetworkCapabilities.EnterpriseId int enterpriseId)", "private static void checkValidEnterpriseId(@NetworkCapabilities.EnterpriseId int enterpriseId)", "public boolean isMetered()", "public boolean isPrivateDnsBroken()", "public void setPrivateDnsBroken(boolean broken)", "private boolean equalsPrivateDnsBroken(NetworkCapabilities nc)", "public NetworkCapabilities setRequestorUid(int uid)", "public int getRequestorUid()", "public NetworkCapabilities setRequestorPackageName(@NonNull String packageName)", "public String getRequestorPackageName()", "public NetworkCapabilities setRequestorUidAndPackageName(int uid, @NonNull String packageName)", "private boolean satisfiedByRequestor(NetworkCapabilities nc)", "private boolean equalsRequestor(NetworkCapabilities nc)", "public NetworkCapabilities setSubscriptionIds(@NonNull Set<Integer> subIds)", "public Set<Integer> getSubscriptionIds()", "private boolean equalsSubscriptionIds(@NonNull NetworkCapabilities nc)", "private boolean satisfiedBySubscriptionIds(@NonNull NetworkCapabilities nc)", "public long getApplicableRedactions()", "private NetworkCapabilities removeDefaultCapabilites()" ],
  "variableNames" : [ "TAG", "REDACT_NONE", "REDACT_FOR_ACCESS_FINE_LOCATION", "REDACT_FOR_LOCAL_MAC_ADDRESS", "REDACT_FOR_NETWORK_SETTINGS", "REDACT_ALL", "mPrivateDnsBroken", "mUnderlyingNetworks", "mRequestorUid", "mRequestorPackageName", "NET_ENTERPRISE_ID_1", "NET_ENTERPRISE_ID_2", "NET_ENTERPRISE_ID_3", "NET_ENTERPRISE_ID_4", "NET_ENTERPRISE_ID_5", "ALL_VALID_ENTERPRISE_IDS", "mEnterpriseId", "mNetworkCapabilities", "mForbiddenNetworkCapabilities", "NET_CAPABILITY_MMS", "NET_CAPABILITY_SUPL", "NET_CAPABILITY_DUN", "NET_CAPABILITY_FOTA", "NET_CAPABILITY_IMS", "NET_CAPABILITY_CBS", "NET_CAPABILITY_WIFI_P2P", "NET_CAPABILITY_IA", "NET_CAPABILITY_RCS", "NET_CAPABILITY_XCAP", "NET_CAPABILITY_EIMS", "NET_CAPABILITY_NOT_METERED", "NET_CAPABILITY_INTERNET", "NET_CAPABILITY_NOT_RESTRICTED", "NET_CAPABILITY_TRUSTED", "NET_CAPABILITY_NOT_VPN", "NET_CAPABILITY_VALIDATED", "NET_CAPABILITY_CAPTIVE_PORTAL", "NET_CAPABILITY_NOT_ROAMING", "NET_CAPABILITY_FOREGROUND", "NET_CAPABILITY_NOT_CONGESTED", "NET_CAPABILITY_NOT_SUSPENDED", "NET_CAPABILITY_OEM_PAID", "NET_CAPABILITY_MCX", "NET_CAPABILITY_PARTIAL_CONNECTIVITY", "NET_CAPABILITY_TEMPORARILY_NOT_METERED", "NET_CAPABILITY_OEM_PRIVATE", "NET_CAPABILITY_VEHICLE_INTERNAL", "NET_CAPABILITY_NOT_VCN_MANAGED", "NET_CAPABILITY_ENTERPRISE", "NET_CAPABILITY_VSIM", "NET_CAPABILITY_BIP", "NET_CAPABILITY_HEAD_UNIT", "NET_CAPABILITY_MMTEL", "NET_CAPABILITY_PRIORITIZE_LATENCY", "NET_CAPABILITY_PRIORITIZE_BANDWIDTH", "NET_CAPABILITY_LOCAL_NETWORK", "MAX_NET_CAPABILITY", "ALL_VALID_CAPABILITIES", "MUTABLE_CAPABILITIES", "NON_REQUESTABLE_CAPABILITIES", "DEFAULT_CAPABILITIES", "CONNECTIVITY_MANAGED_CAPABILITIES", "TEST_NETWORKS_ALLOWED_CAPABILITIES", "TEST_NETWORKS_EXTRA_ALLOWED_CAPABILITIES_ON_NON_CELL", "mTransportTypes", "TRANSPORT_CELLULAR", "TRANSPORT_WIFI", "TRANSPORT_BLUETOOTH", "TRANSPORT_ETHERNET", "TRANSPORT_VPN", "TRANSPORT_WIFI_AWARE", "TRANSPORT_LOWPAN", "TRANSPORT_TEST", "TRANSPORT_USB", "TRANSPORT_THREAD", "TRANSPORT_SATELLITE", "MIN_TRANSPORT", "MAX_TRANSPORT", "ALL_VALID_TRANSPORTS", "TRANSPORT_NAMES", "UNRESTRICTED_TEST_NETWORKS_ALLOWED_TRANSPORTS", "mOwnerUid", "mAdministratorUids", "LINK_BANDWIDTH_UNSPECIFIED", "mLinkUpBandwidthKbps", "mLinkDownBandwidthKbps", "mNetworkSpecifier", "mTransportInfo", "SIGNAL_STRENGTH_UNSPECIFIED", "mSignalStrength", "mUids", "mAllowedUids", "mSSID", "CREATOR", "mSubIds" ]
}