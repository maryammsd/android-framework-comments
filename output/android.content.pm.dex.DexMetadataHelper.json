{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/dex/DexMetadataHelper.java",
  "packageName" : "android.content.pm.dex",
  "className" : "DexMetadataHelper",
  "comment" : "\n * Helper class used to compute and validate the location of dex metadata files.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " $> adb shell 'setprop log.tag.DexMetadataHelper VERBOSE' ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_DM_JSON_MANIFEST_REQUIRED",
    "type" : "String",
    "comment" : " $> adb shell 'setprop pm.dexopt.dm.require_manifest true' ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_DM_FSVERITY_REQUIRED",
    "type" : "String",
    "comment" : " $> adb shell 'setprop pm.dexopt.dm.require_fsverity true' ",
    "links" : [ ]
  }, {
    "name" : "DEX_METADATA_FILE_EXTENSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isDexMetadataFile(File file)",
    "returnType" : "boolean",
    "comment" : " Return true if the given file is a dex metadata file. ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDexMetadataPath(String path)",
    "returnType" : "boolean",
    "comment" : " Return true if the given path is a dex metadata path. ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFsVerityRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether fs-verity is required to install a dex metadata\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getPackageDexMetadataSize(PackageLite pkg)",
    "returnType" : "long",
    "comment" : "\n     * Return the size (in bytes) of all dex metadata files associated with the given package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static File findDexMetadataForFile(File targetFile)",
    "returnType" : "File",
    "comment" : "\n     * Search for the dex metadata file associated with the given target file.\n     * If it exists, the method returns the dex metadata file; otherwise it returns null.\n     *\n     * Note that this performs a loose matching suitable to be used in the InstallerSession logic.\n     * i.e. the method will attempt to match the {@code dmFile} regardless of {@code targetFile}\n     * extension (e.g. 'foo.dm' will match 'foo' or 'foo.apk').\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Map<String, String> getPackageDexMetadata(PackageLite pkg)",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Return the dex metadata files for the given package as a map\n     * [code path -> dex metadata path].\n     *\n     * NOTE: involves I/O checks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Map<String, String> buildPackageApkToDexMetadataMap(List<String> codePaths)",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Look up the dex metadata files for the given code paths building the map\n     * [code path -> dex metadata].\n     *\n     * For each code path (.apk) the method checks if a matching dex metadata file (.dm) exists.\n     * If it does it adds the pair to the returned map.\n     *\n     * Note that this method will do a loose\n     * matching based on the extension ('foo.dm' will match 'foo.apk' or 'foo').\n     *\n     * This should only be used for code paths extracted from a package structure after the naming\n     * was enforced in the installer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String buildDexMetadataPathForApk(String codePath)",
    "returnType" : "String",
    "comment" : "\n     * Return the dex metadata path associated with the given code path.\n     * (replaces '.apk' extension with '.dm')\n     *\n     * @throws IllegalArgumentException if the code path is not an .apk.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String buildDexMetadataPathForFile(File targetFile)",
    "returnType" : "String",
    "comment" : "\n     * Return the dex metadata path corresponding to the given {@code targetFile} using a loose\n     * matching.\n     * i.e. the method will attempt to match the {@code dmFile} regardless of {@code targetFile}\n     * extension (e.g. 'foo.dm' will match 'foo' or 'foo.apk').\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult validateDexMetadataFile(ParseInput input, String dmaPath, String packageName, long versionCode)",
    "returnType" : "ParseResult",
    "comment" : "\n     * Validate that the given file is a dex metadata archive.\n     * This is just a validation that the file is a zip archive that contains a manifest.json\n     * with the package name and version code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult validateDexMetadataFile(ParseInput input, String dmaPath, String packageName, long versionCode, boolean requireManifest)",
    "returnType" : "ParseResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult validateDexMetadataManifest(ParseInput input, String dmaPath, StrictJarFile jarFile, String packageName, long versionCode, boolean requireManifest) throws IOException",
    "returnType" : "ParseResult",
    "comment" : " Ensure that packageName and versionCode match the manifest.json in the .dm file ",
    "links" : [ ]
  }, {
    "name" : "public static void validateDexPaths(String[] paths)",
    "returnType" : "void",
    "comment" : "\n     * Validates that all dex metadata paths in the given list have a matching apk.\n     * (for any foo.dm there should be either a 'foo' of a 'foo.apk' file).\n     * If that's not the case it throws {@code IllegalStateException}.\n     *\n     * This is used to perform a basic check during adb install commands.\n     * (The installer does not support stand alone .dm files)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isDexMetadataFile(File file)", "private static boolean isDexMetadataPath(String path)", "public static boolean isFsVerityRequired()", "public static long getPackageDexMetadataSize(PackageLite pkg)", "public static File findDexMetadataForFile(File targetFile)", "private static Map<String, String> getPackageDexMetadata(PackageLite pkg)", "public static Map<String, String> buildPackageApkToDexMetadataMap(List<String> codePaths)", "public static String buildDexMetadataPathForApk(String codePath)", "private static String buildDexMetadataPathForFile(File targetFile)", "public static ParseResult validateDexMetadataFile(ParseInput input, String dmaPath, String packageName, long versionCode)", "public static ParseResult validateDexMetadataFile(ParseInput input, String dmaPath, String packageName, long versionCode, boolean requireManifest)", "private static ParseResult validateDexMetadataManifest(ParseInput input, String dmaPath, StrictJarFile jarFile, String packageName, long versionCode, boolean requireManifest) throws IOException", "public static void validateDexPaths(String[] paths)" ],
  "variableNames" : [ "TAG", "DEBUG", "PROPERTY_DM_JSON_MANIFEST_REQUIRED", "PROPERTY_DM_FSVERITY_REQUIRED", "DEX_METADATA_FILE_EXTENSION" ]
}