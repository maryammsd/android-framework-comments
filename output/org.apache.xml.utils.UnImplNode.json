{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/UnImplNode.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "UnImplNode",
  "comment" : "\n * To be subclassed by classes that wish to fake being nodes.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "fDocumentURI",
    "type" : "String",
    "comment" : " DOM Level 3 feature: documentURI ",
    "links" : [ ]
  }, {
    "name" : "actualEncoding",
    "type" : "String",
    "comment" : " DOM Level 3 feature: Document actualEncoding ",
    "links" : [ ]
  }, {
    "name" : "xmlEncoding",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "xmlStandalone",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "xmlVersion",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void error(String msg)",
    "returnType" : "void",
    "comment" : "\n   * Throw an error.\n   *\n   * @param msg Message Key for the error\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(String msg, Object[] args)",
    "returnType" : "void",
    "comment" : "\n   * Throw an error.\n   *\n   * @param msg Message Key for the error\n   * @param args Array of arguments to be used in the error message\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node appendChild(Node newChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @param newChild New node to append to the list of this node's children\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChildNodes()",
    "returnType" : "boolean",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return false\n   ",
    "links" : [ ]
  }, {
    "name" : "public short getNodeType()",
    "returnType" : "short",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return 0\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getParentNode()",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeList getChildNodes()",
    "returnType" : "NodeList",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getFirstChild()",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getLastChild()",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getNextSibling()",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.NodeList\n   *\n   * @return 0\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node item(int index)",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.NodeList\n   *\n   * @param index index of a child of this node in its list of children\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Document getOwnerDocument()",
    "returnType" : "Document",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getTagName()",
    "returnType" : "String",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void normalize()",
    "returnType" : "void",
    "comment" : " Unimplemented. See org.w3c.dom.Node ",
    "links" : [ ]
  }, {
    "name" : "public NodeList getElementsByTagName(String name)",
    "returnType" : "NodeList",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param name Name of the element\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Attr removeAttributeNode(Attr oldAttr) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param oldAttr Attribute to be removed from this node's list of attributes\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Attr setAttributeNode(Attr newAttr) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param newAttr Attribute node to be added to this node's list of attributes\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttribute(String name)",
    "returnType" : "boolean",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   *\n   * @param name Name of an attribute\n   *\n   * @return false\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttributeNS(String name, String x)",
    "returnType" : "boolean",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   *\n   * @param name\n   * @param x\n   *\n   * @return false\n   ",
    "links" : [ ]
  }, {
    "name" : "public Attr getAttributeNode(String name)",
    "returnType" : "Attr",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   *\n   * @param name Attribute node name\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void removeAttribute(String name) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param name Attribute node name to remove from list of attributes\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setAttribute(String name, String value) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param name Name of attribute to set\n   * @param value Value of attribute\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getAttribute(String name)",
    "returnType" : "String",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param name Name of attribute to get\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttributes()",
    "returnType" : "boolean",
    "comment" : "\n   * Unimplemented. Introduced in DOM Level 2.\n   *\n   * @return false\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeList getElementsByTagNameNS(String namespaceURI, String localName)",
    "returnType" : "NodeList",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param namespaceURI Namespace URI of the element\n   * @param localName Local part of qualified name of the element\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Attr setAttributeNodeNS(Attr newAttr) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param newAttr Attribute to set\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Attr getAttributeNodeNS(String namespaceURI, String localName)",
    "returnType" : "Attr",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param namespaceURI Namespace URI of attribute node to get\n   * @param localName Local part of qualified name of attribute node to get\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void removeAttributeNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param namespaceURI Namespace URI of attribute node to remove\n   * @param localName Local part of qualified name of attribute node to remove\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setAttributeNS(String namespaceURI, String qualifiedName, String value) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param namespaceURI Namespace URI of attribute node to set\n   * NEEDSDOC @param qualifiedName\n   * @param value value of attribute\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getAttributeNS(String namespaceURI, String localName)",
    "returnType" : "String",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param namespaceURI Namespace URI of attribute node to get\n   * @param localName Local part of qualified name of attribute node to get\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getPreviousSibling()",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node cloneNode(boolean deep)",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @param deep Flag indicating whether to clone deep (clone member variables)\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeValue() throws DOMException",
    "returnType" : "String",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setNodeValue(String nodeValue) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @param nodeValue Value to set this node to\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setValue(String value) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @param value Value to set this node to\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Element getOwnerElement()",
    "returnType" : "Element",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSpecified()",
    "returnType" : "boolean",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return False\n   ",
    "links" : [ ]
  }, {
    "name" : "public NamedNodeMap getAttributes()",
    "returnType" : "NamedNodeMap",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node insertBefore(Node newChild, Node refChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @param newChild New child node to insert\n   * @param refChild Insert in front of this child\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node replaceChild(Node newChild, Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @param newChild Replace existing child with this one\n   * @param oldChild Existing child to be replaced\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node removeChild(Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @param oldChild Child to be removed\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSupported(String feature, String version)",
    "returnType" : "boolean",
    "comment" : "\n   * Tests whether the DOM implementation implements a specific feature and\n   * that feature is supported by this node.\n   * @param feature The name of the feature to test. This is the same name\n   *   which can be passed to the method <code>hasFeature</code> on\n   *   <code>DOMImplementation</code>.\n   * @param version This is the version number of the feature to test. In\n   *   Level 2, version 1, this is the string \"2.0\". If the version is not\n   *   specified, supporting any version of the feature will cause the\n   *   method to return <code>true</code>.\n   *\n   * @return Returns <code>false</code>\n   * @since DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURI()",
    "returnType" : "String",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix()",
    "returnType" : "String",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPrefix(String prefix) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @param prefix Prefix to set for this node\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName()",
    "returnType" : "String",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public DocumentType getDoctype()",
    "returnType" : "DocumentType",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public DOMImplementation getImplementation()",
    "returnType" : "DOMImplementation",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Element getDocumentElement()",
    "returnType" : "Element",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Element createElement(String tagName) throws DOMException",
    "returnType" : "Element",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param tagName Element tag name\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public DocumentFragment createDocumentFragment()",
    "returnType" : "DocumentFragment",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Text createTextNode(String data)",
    "returnType" : "Text",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param data Data for text node\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Comment createComment(String data)",
    "returnType" : "Comment",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param data Data for comment\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public CDATASection createCDATASection(String data) throws DOMException",
    "returnType" : "CDATASection",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param data Data for CDATA section\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException",
    "returnType" : "ProcessingInstruction",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param target Target for Processing instruction\n   * @param data Data for Processing instruction\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Attr createAttribute(String name) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param name Attribute name\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public EntityReference createEntityReference(String name) throws DOMException",
    "returnType" : "EntityReference",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param name Entity Reference name\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node importNode(Node importedNode, boolean deep) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param importedNode The node to import.\n   * @param deep         If <code>true</code>, recursively import the subtree under\n   *   the specified node; if <code>false</code>, import only the node\n   *   itself, as explained above. This has no effect on <code>Attr</code>\n   *   , <code>EntityReference</code>, and <code>Notation</code> nodes.\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException",
    "returnType" : "Element",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param namespaceURI Namespace URI for the element\n   * @param qualifiedName Qualified name of the element\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param namespaceURI Namespace URI of the attribute\n   * @param qualifiedName Qualified name of the attribute\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Element getElementById(String elementId)",
    "returnType" : "Element",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Document\n   *\n   * @param elementId ID of the element to get\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setData(String data) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Set Node data\n   *\n   *\n   * @param data data to set for this node\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String substringData(int offset, int count) throws DOMException",
    "returnType" : "String",
    "comment" : "\n   * Unimplemented.\n   *\n   * @param offset Start offset of substring to extract.\n   * @param count The length of the substring to extract.\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendData(String arg) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented.\n   *\n   * @param arg String data to append\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void insertData(int offset, String arg) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented.\n   *\n   * @param offset Start offset of substring to insert.\n   * NEEDSDOC @param arg\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void deleteData(int offset, int count) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented.\n   *\n   * @param offset Start offset of substring to delete.\n   * @param count The length of the substring to delete.\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void replaceData(int offset, int count, String arg) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   * Unimplemented.\n   *\n   * @param offset Start offset of substring to replace.\n   * @param count The length of the substring to replace.\n   * @param arg substring to replace with\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Text splitText(int offset) throws DOMException",
    "returnType" : "Text",
    "comment" : "\n   * Unimplemented.\n   *\n   * @param offset Offset into text to split\n   *\n   * @return null, unimplemented\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node adoptNode(Node source) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * NEEDSDOC Method adoptNode \n   *\n   *\n   * NEEDSDOC @param source\n   *\n   * NEEDSDOC (adoptNode) @return\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getInputEncoding()",
    "returnType" : "String",
    "comment" : "\n   * <p>Based on the <a\n   * href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document\n   * Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>.\n   * <p>\n   * An attribute specifying, as part of the XML declaration, the encoding\n   * of this document. This is <code>null</code> when unspecified.\n   * @since DOM Level 3\n   *\n   * NEEDSDOC ($objectName$) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setInputEncoding(String encoding)",
    "returnType" : "void",
    "comment" : "\n   * <p>Based on the <a\n   * href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document\n   * Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>.\n   * <p>\n   * An attribute specifying, as part of the XML declaration, the encoding\n   * of this document. This is <code>null</code> when unspecified.\n   * @since DOM Level 3\n   *\n   * NEEDSDOC @param encoding\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getStrictErrorChecking()",
    "returnType" : "boolean",
    "comment" : "\n   * <p>Based on the <a\n   * href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document\n   * Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>.\n   * <p>\n   * An attribute specifying whether errors checking is enforced or not.\n   * When set to <code>false</code>, the implementation is free to not\n   * test every possible error case normally defined on DOM operations,\n   * and not raise any <code>DOMException</code>. In case of error, the\n   * behavior is undefined. This attribute is <code>true</code> by\n   * defaults.\n   * @since DOM Level 3\n   *\n   * NEEDSDOC ($objectName$) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setStrictErrorChecking(boolean strictErrorChecking)",
    "returnType" : "void",
    "comment" : "\n   * <p>Based on the <a\n   * href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document\n   * Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>.\n   * <p>\n   * An attribute specifying whether errors checking is enforced or not.\n   * When set to <code>false</code>, the implementation is free to not\n   * test every possible error case normally defined on DOM operations,\n   * and not raise any <code>DOMException</code>. In case of error, the\n   * behavior is undefined. This attribute is <code>true</code> by\n   * defaults.\n   * @since DOM Level 3\n   *\n   * NEEDSDOC @param strictErrorChecking\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object setUserData(String key, Object data, UserDataHandler handler)",
    "returnType" : "Object",
    "comment" : " RAMESH : Pending proper implementation of DOM Level 3    ",
    "links" : [ ]
  }, {
    "name" : "public Object getUserData(String key)",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the object associated to a key on a this node. The object\n     * must first have been set to this node by calling\n     * <code>setUserData</code> with the same key.\n     * @param key The key the object is associated to.\n     * @return Returns the <code>DOMObject</code> associated to the given key\n     *   on this node, or <code>null</code> if there was none.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getFeature(String feature, String version)",
    "returnType" : "Object",
    "comment" : "\n     *  This method returns a specialized object which implements the\n     * specialized APIs of the specified feature and version. The\n     * specialized object may also be obtained by using binding-specific\n     * casting methods but is not necessarily expected to, as discussed in Mixed DOM implementations.\n     * @param feature The name of the feature requested (case-insensitive).\n     * @param version  This is the version number of the feature to test. If\n     *   the version is <code>null</code> or the empty string, supporting\n     *   any version of the feature will cause the method to return an\n     *   object that supports at least one version of the feature.\n     * @return  Returns an object which implements the specialized APIs of\n     *   the specified feature and version, if any, or <code>null</code> if\n     *   there is no object which implements interfaces associated with that\n     *   feature. If the <code>DOMObject</code> returned by this method\n     *   implements the <code>Node</code> interface, it must delegate to the\n     *   primary core <code>Node</code> and not return results inconsistent\n     *   with the primary core <code>Node</code> such as attributes,\n     *   childNodes, etc.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEqualNode(Node arg)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether two nodes are equal.\n     * <br>This method tests for equality of nodes, not sameness (i.e.,\n     * whether the two nodes are references to the same object) which can be\n     * tested with <code>Node.isSameNode</code>. All nodes that are the same\n     * will also be equal, though the reverse may not be true.\n     * <br>Two nodes are equal if and only if the following conditions are\n     * satisfied: The two nodes are of the same type.The following string\n     * attributes are equal: <code>nodeName</code>, <code>localName</code>,\n     * <code>namespaceURI</code>, <code>prefix</code>, <code>nodeValue</code>\n     * , <code>baseURI</code>. This is: they are both <code>null</code>, or\n     * they have the same length and are character for character identical.\n     * The <code>attributes</code> <code>NamedNodeMaps</code> are equal.\n     * This is: they are both <code>null</code>, or they have the same\n     * length and for each node that exists in one map there is a node that\n     * exists in the other map and is equal, although not necessarily at the\n     * same index.The <code>childNodes</code> <code>NodeLists</code> are\n     * equal. This is: they are both <code>null</code>, or they have the\n     * same length and contain equal nodes at the same index. This is true\n     * for <code>Attr</code> nodes as for any other type of node. Note that\n     * normalization can affect equality; to avoid this, nodes should be\n     * normalized before being compared.\n     * <br>For two <code>DocumentType</code> nodes to be equal, the following\n     * conditions must also be satisfied: The following string attributes\n     * are equal: <code>publicId</code>, <code>systemId</code>,\n     * <code>internalSubset</code>.The <code>entities</code>\n     * <code>NamedNodeMaps</code> are equal.The <code>notations</code>\n     * <code>NamedNodeMaps</code> are equal.\n     * <br>On the other hand, the following do not affect equality: the\n     * <code>ownerDocument</code> attribute, the <code>specified</code>\n     * attribute for <code>Attr</code> nodes, the\n     * <code>isWhitespaceInElementContent</code> attribute for\n     * <code>Text</code> nodes, as well as any user data or event listeners\n     * registered on the nodes.\n     * @param arg The node to compare equality with.\n     * @param deep If <code>true</code>, recursively compare the subtrees; if\n     *   <code>false</code>, compare only the nodes themselves (and its\n     *   attributes, if it is an <code>Element</code>).\n     * @return If the nodes, and possibly subtrees are equal,\n     *   <code>true</code> otherwise <code>false</code>.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String lookupNamespaceURI(String specifiedPrefix)",
    "returnType" : "String",
    "comment" : "\n     * DOM Level 3:\n     * Look up the namespace URI associated to the given prefix, starting from this node.\n     * Use lookupNamespaceURI(null) to lookup the default namespace\n     *\n     * @param namespaceURI\n     * @return th URI for the namespace\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultNamespace(String namespaceURI)",
    "returnType" : "boolean",
    "comment" : "\n     *  DOM Level 3:\n     *  This method checks if the specified <code>namespaceURI</code> is the\n     *  default namespace or not.\n     *  @param namespaceURI The namespace URI to look for.\n     *  @return  <code>true</code> if the specified <code>namespaceURI</code>\n     *   is the default namespace, <code>false</code> otherwise.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String lookupPrefix(String namespaceURI)",
    "returnType" : "String",
    "comment" : "\n     *\n     * DOM Level 3:\n     * Look up the prefix associated to the given namespace URI, starting from this node.\n     *\n     * @param namespaceURI\n     * @return the prefix for the namespace\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameNode(Node other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this node is the same node as the given one.\n     * <br>This method provides a way to determine whether two\n     * <code>Node</code> references returned by the implementation reference\n     * the same object. When two <code>Node</code> references are references\n     * to the same object, even if through a proxy, the references may be\n     * used completely interchangably, such that all attributes have the\n     * same values and calling the same DOM method on either reference\n     * always has exactly the same effect.\n     * @param other The node to test against.\n     * @return Returns <code>true</code> if the nodes are the same,\n     *   <code>false</code> otherwise.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTextContent(String textContent) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * This attribute returns the text content of this node and its\n     * descendants. When it is defined to be null, setting it has no effect.\n     * When set, any possible children this node may have are removed and\n     * replaced by a single <code>Text</code> node containing the string\n     * this attribute is set to. On getting, no serialization is performed,\n     * the returned string does not contain any markup. No whitespace\n     * normalization is performed, the returned string does not contain the\n     * element content whitespaces . Similarly, on setting, no parsing is\n     * performed either, the input string is taken as pure textual content.\n     * <br>The string returned is made of the text content of this node\n     * depending on its type, as defined below:\n     * <table border='1'>\n     * <tr>\n     * <th>Node type</th>\n     * <th>Content</th>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,\n     * DOCUMENT_FRAGMENT_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>\n     * attribute value of every child node, excluding COMMENT_NODE and\n     * PROCESSING_INSTRUCTION_NODE nodes</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,\n     * CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * <code>nodeValue</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * null</td>\n     * </tr>\n     * </table>\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.\n     * @exception DOMException\n     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than\n     *   fit in a <code>DOMString</code> variable on the implementation\n     *   platform.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTextContent() throws DOMException",
    "returnType" : "String",
    "comment" : "\n     * This attribute returns the text content of this node and its\n     * descendants. When it is defined to be null, setting it has no effect.\n     * When set, any possible children this node may have are removed and\n     * replaced by a single <code>Text</code> node containing the string\n     * this attribute is set to. On getting, no serialization is performed,\n     * the returned string does not contain any markup. No whitespace\n     * normalization is performed, the returned string does not contain the\n     * element content whitespaces . Similarly, on setting, no parsing is\n     * performed either, the input string is taken as pure textual content.\n     * <br>The string returned is made of the text content of this node\n     * depending on its type, as defined below:\n     * <table border='1'>\n     * <tr>\n     * <th>Node type</th>\n     * <th>Content</th>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,\n     * DOCUMENT_FRAGMENT_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>\n     * attribute value of every child node, excluding COMMENT_NODE and\n     * PROCESSING_INSTRUCTION_NODE nodes</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,\n     * CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * <code>nodeValue</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * null</td>\n     * </tr>\n     * </table>\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.\n     * @exception DOMException\n     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than\n     *   fit in a <code>DOMString</code> variable on the implementation\n     *   platform.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public short compareDocumentPosition(Node other) throws DOMException",
    "returnType" : "short",
    "comment" : "\n     * Compares a node with this node with regard to their position in the\n     * document.\n     * @param other The node to compare against this node.\n     * @return Returns how the given node is positioned relatively to this\n     *   node.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseURI()",
    "returnType" : "String",
    "comment" : "\n     * The absolute base URI of this node or <code>null</code> if undefined.\n     * This value is computed according to . However, when the\n     * <code>Document</code> supports the feature \"HTML\" , the base URI is\n     * computed using first the value of the href attribute of the HTML BASE\n     * element if any, and the value of the <code>documentURI</code>\n     * attribute from the <code>Document</code> interface otherwise.\n     * <br> When the node is an <code>Element</code>, a <code>Document</code>\n     * or a a <code>ProcessingInstruction</code>, this attribute represents\n     * the properties [base URI] defined in . When the node is a\n     * <code>Notation</code>, an <code>Entity</code>, or an\n     * <code>EntityReference</code>, this attribute represents the\n     * properties [declaration base URI] in the . How will this be affected\n     * by resolution of relative namespace URIs issue?It's not.Should this\n     * only be on Document, Element, ProcessingInstruction, Entity, and\n     * Notation nodes, according to the infoset? If not, what is it equal to\n     * on other nodes? Null? An empty string? I think it should be the\n     * parent's.No.Should this be read-only and computed or and actual\n     * read-write attribute?Read-only and computed (F2F 19 Jun 2000 and\n     * teleconference 30 May 2001).If the base HTML element is not yet\n     * attached to a document, does the insert change the Document.baseURI?\n     * Yes. (F2F 26 Sep 2001)\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node renameNode(Node n, String namespaceURI, String name) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * DOM Level 3\n     * Renaming node\n     ",
    "links" : [ ]
  }, {
    "name" : "public void normalizeDocument()",
    "returnType" : "void",
    "comment" : "\n     *  DOM Level 3\n     *  Normalize document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DOMConfiguration getDomConfig()",
    "returnType" : "DOMConfiguration",
    "comment" : "\n     *  The configuration used when <code>Document.normalizeDocument</code> is\n     * invoked.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentURI(String documentURI)",
    "returnType" : "void",
    "comment" : "\n     * DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDocumentURI()",
    "returnType" : "String",
    "comment" : "\n     * DOM Level 3\n     * The location of the document or <code>null</code> if undefined.\n     * <br>Beware that when the <code>Document</code> supports the feature\n     * \"HTML\" , the href attribute of the HTML BASE element takes precedence\n     * over this attribute.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getActualEncoding()",
    "returnType" : "String",
    "comment" : "\n     * DOM Level 3\n     * An attribute specifying the actual encoding of this document. This is\n     * <code>null</code> otherwise.\n     * <br> This attribute represents the property [character encoding scheme]\n     * defined in .\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setActualEncoding(String value)",
    "returnType" : "void",
    "comment" : "\n     * DOM Level 3\n     * An attribute specifying the actual encoding of this document. This is\n     * <code>null</code> otherwise.\n     * <br> This attribute represents the property [character encoding scheme]\n     * defined in .\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Text replaceWholeText(String content) throws DOMException",
    "returnType" : "Text",
    "comment" : "\n     * DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getWholeText()",
    "returnType" : "String",
    "comment" : "\n     * DOM Level 3\n     * Returns all text of <code>Text</code> nodes logically-adjacent text\n     * nodes to this node, concatenated in document order.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWhitespaceInElementContent()",
    "returnType" : "boolean",
    "comment" : "\n     * DOM Level 3\n     * Returns whether this text node contains whitespace in element content,\n     * often abusively called \"ignorable whitespace\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttribute(boolean id)",
    "returnType" : "void",
    "comment" : "\n     * NON-DOM: set the type of this attribute to be ID type.\n     *\n     * @param id\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttribute(String name, boolean makeId)",
    "returnType" : "void",
    "comment" : "\n     * DOM Level 3: register the given attribute node as an ID attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttributeNode(Attr at, boolean makeId)",
    "returnType" : "void",
    "comment" : "\n     * DOM Level 3: register the given attribute node as an ID attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttributeNS(String namespaceURI, String localName, boolean makeId)",
    "returnType" : "void",
    "comment" : "\n     * DOM Level 3: register the given attribute node as an ID attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "public TypeInfo getSchemaTypeInfo()",
    "returnType" : "TypeInfo",
    "comment" : "\n     * Method getSchemaTypeInfo.\n     * @return TypeInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isId()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getXmlEncoding()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXmlEncoding(String xmlEncoding)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getXmlStandalone()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXmlStandalone(boolean xmlStandalone) throws DOMException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getXmlVersion()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXmlVersion(String xmlVersion) throws DOMException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void error(String msg)", "public void error(String msg, Object[] args)", "public Node appendChild(Node newChild) throws DOMException", "public boolean hasChildNodes()", "public short getNodeType()", "public Node getParentNode()", "public NodeList getChildNodes()", "public Node getFirstChild()", "public Node getLastChild()", "public Node getNextSibling()", "public int getLength()", "public Node item(int index)", "public Document getOwnerDocument()", "public String getTagName()", "public String getNodeName()", "public void normalize()", "public NodeList getElementsByTagName(String name)", "public Attr removeAttributeNode(Attr oldAttr) throws DOMException", "public Attr setAttributeNode(Attr newAttr) throws DOMException", "public boolean hasAttribute(String name)", "public boolean hasAttributeNS(String name, String x)", "public Attr getAttributeNode(String name)", "public void removeAttribute(String name) throws DOMException", "public void setAttribute(String name, String value) throws DOMException", "public String getAttribute(String name)", "public boolean hasAttributes()", "public NodeList getElementsByTagNameNS(String namespaceURI, String localName)", "public Attr setAttributeNodeNS(Attr newAttr) throws DOMException", "public Attr getAttributeNodeNS(String namespaceURI, String localName)", "public void removeAttributeNS(String namespaceURI, String localName) throws DOMException", "public void setAttributeNS(String namespaceURI, String qualifiedName, String value) throws DOMException", "public String getAttributeNS(String namespaceURI, String localName)", "public Node getPreviousSibling()", "public Node cloneNode(boolean deep)", "public String getNodeValue() throws DOMException", "public void setNodeValue(String nodeValue) throws DOMException", "public void setValue(String value) throws DOMException", "public Element getOwnerElement()", "public boolean getSpecified()", "public NamedNodeMap getAttributes()", "public Node insertBefore(Node newChild, Node refChild) throws DOMException", "public Node replaceChild(Node newChild, Node oldChild) throws DOMException", "public Node removeChild(Node oldChild) throws DOMException", "public boolean isSupported(String feature, String version)", "public String getNamespaceURI()", "public String getPrefix()", "public void setPrefix(String prefix) throws DOMException", "public String getLocalName()", "public DocumentType getDoctype()", "public DOMImplementation getImplementation()", "public Element getDocumentElement()", "public Element createElement(String tagName) throws DOMException", "public DocumentFragment createDocumentFragment()", "public Text createTextNode(String data)", "public Comment createComment(String data)", "public CDATASection createCDATASection(String data) throws DOMException", "public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException", "public Attr createAttribute(String name) throws DOMException", "public EntityReference createEntityReference(String name) throws DOMException", "public Node importNode(Node importedNode, boolean deep) throws DOMException", "public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException", "public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException", "public Element getElementById(String elementId)", "public void setData(String data) throws DOMException", "public String substringData(int offset, int count) throws DOMException", "public void appendData(String arg) throws DOMException", "public void insertData(int offset, String arg) throws DOMException", "public void deleteData(int offset, int count) throws DOMException", "public void replaceData(int offset, int count, String arg) throws DOMException", "public Text splitText(int offset) throws DOMException", "public Node adoptNode(Node source) throws DOMException", "public String getInputEncoding()", "public void setInputEncoding(String encoding)", "public boolean getStrictErrorChecking()", "public void setStrictErrorChecking(boolean strictErrorChecking)", "public Object setUserData(String key, Object data, UserDataHandler handler)", "public Object getUserData(String key)", "public Object getFeature(String feature, String version)", "public boolean isEqualNode(Node arg)", "public String lookupNamespaceURI(String specifiedPrefix)", "public boolean isDefaultNamespace(String namespaceURI)", "public String lookupPrefix(String namespaceURI)", "public boolean isSameNode(Node other)", "public void setTextContent(String textContent) throws DOMException", "public String getTextContent() throws DOMException", "public short compareDocumentPosition(Node other) throws DOMException", "public String getBaseURI()", "public Node renameNode(Node n, String namespaceURI, String name) throws DOMException", "public void normalizeDocument()", "public DOMConfiguration getDomConfig()", "public void setDocumentURI(String documentURI)", "public String getDocumentURI()", "public String getActualEncoding()", "public void setActualEncoding(String value)", "public Text replaceWholeText(String content) throws DOMException", "public String getWholeText()", "public boolean isWhitespaceInElementContent()", "public void setIdAttribute(boolean id)", "public void setIdAttribute(String name, boolean makeId)", "public void setIdAttributeNode(Attr at, boolean makeId)", "public void setIdAttributeNS(String namespaceURI, String localName, boolean makeId)", "public TypeInfo getSchemaTypeInfo()", "public boolean isId()", "public String getXmlEncoding()", "public void setXmlEncoding(String xmlEncoding)", "public boolean getXmlStandalone()", "public void setXmlStandalone(boolean xmlStandalone) throws DOMException", "public String getXmlVersion()", "public void setXmlVersion(String xmlVersion) throws DOMException" ],
  "variableNames" : [ "fDocumentURI", "actualEncoding", "xmlEncoding", "xmlStandalone", "xmlVersion" ]
}