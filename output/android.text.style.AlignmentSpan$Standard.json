{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/style/AlignmentSpan.java",
  "packageName" : "android.text.style",
  "className" : "Standard",
  "comment" : "\n     * Default implementation of the {@link AlignmentSpan}.\n     * <p>\n     * For example, a text written in a left to right language, like English, which is by default\n     * aligned to the left, can be aligned opposite to the layout direction like this:\n     * <pre>{@code SpannableString string = new SpannableString(\"Text with opposite alignment\");\n     *string.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0,\n     *string.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}</pre>\n     * <img src=\"{@docRoot}reference/android/images/text/style/ltralignmentspan.png\" />\n     * <figcaption>Align left to right text opposite to the layout direction.</figcaption>\n     * <p>\n     * A text written in a right to left language, like Hebrew, which is by default aligned to the\n     * right, can be aligned opposite to the layout direction like this:\n     * <pre>{@code SpannableString string = new SpannableString(\"טקסט עם יישור הפוך\");\n     *string.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0,\n     *string.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}</pre>\n     * <img src=\"{@docRoot}reference/android/images/text/style/rtlalignmentspan.png\" />\n     * <figcaption>Align right to left text opposite to the layout direction.</figcaption>\n     ",
  "links" : [ "android.text.style.AlignmentSpan" ],
  "variables" : [ {
    "name" : "mAlignment",
    "type" : "Layout.Alignment",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getSpanTypeId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanTypeIdInternal()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcelInternal(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Layout.Alignment getAlignment()",
    "returnType" : "Layout.Alignment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getSpanTypeId()", "public int getSpanTypeIdInternal()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public void writeToParcelInternal(@NonNull Parcel dest, int flags)", "public Layout.Alignment getAlignment()", "public String toString()" ],
  "variableNames" : [ "mAlignment" ]
}