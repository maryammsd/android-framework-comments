{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/Streams.java",
  "packageName" : "java.util.stream",
  "className" : "RangeIntSpliterator",
  "comment" : "\n     * An {@code int} range spliterator.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "from",
    "type" : "int",
    "comment" : " All elements are traversed if from == upTo & last == 0",
    "links" : [ ]
  }, {
    "name" : "upTo",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "last",
    "type" : "int",
    "comment" : " elements have been traversed",
    "links" : [ ]
  }, {
    "name" : "BALANCED_SPLIT_THRESHOLD",
    "type" : "int",
    "comment" : "\n         * The spliterator size below which the spliterator will be split\n         * at the mid-point to produce balanced splits. Above this size the\n         * spliterator will be split at a ratio of\n         * 1:(RIGHT_BALANCED_SPLIT_RATIO - 1)\n         * to produce right-balanced splits.\n         *\n         * <p>Such splitting ensures that for very large ranges that the left\n         * side of the range will more likely be processed at a lower-depth\n         * than a balanced tree at the expense of a higher-depth for the right\n         * side of the range.\n         *\n         * <p>This is optimized for cases such as IntStream.range(0, Integer.MAX_VALUE)\n         * that is likely to be augmented with a limit operation that limits the\n         * number of elements to a count lower than this threshold.\n         ",
    "links" : [ ]
  }, {
    "name" : "RIGHT_BALANCED_SPLIT_RATIO",
    "type" : "int",
    "comment" : "\n         * The split ratio of the left and right split when the spliterator\n         * size is above BALANCED_SPLIT_THRESHOLD.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean tryAdvance(IntConsumer consumer)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEachRemaining(IntConsumer consumer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long estimateSize()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int characteristics()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Comparator<? super Integer> getComparator()",
    "returnType" : "Comparator<? super Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Spliterator.OfInt trySplit()",
    "returnType" : "Spliterator.OfInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int splitPoint(long size)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean tryAdvance(IntConsumer consumer)", "public void forEachRemaining(IntConsumer consumer)", "public long estimateSize()", "public int characteristics()", "public Comparator<? super Integer> getComparator()", "public Spliterator.OfInt trySplit()", "private int splitPoint(long size)" ],
  "variableNames" : [ "from", "upTo", "last", "BALANCED_SPLIT_THRESHOLD", "RIGHT_BALANCED_SPLIT_RATIO" ]
}