{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/location/ContextHubTransaction.java",
  "packageName" : "android.hardware.location",
  "className" : "ContextHubTransaction",
  "comment" : "\n * A class describing a request sent to the Context Hub Service.\n *\n * This object is generated as a result of an asynchronous request sent to the Context Hub\n * through the ContextHubManager APIs. The caller can either retrieve the result\n * synchronously through a blocking call ({@link #waitForResponse(long, TimeUnit)}) or\n * asynchronously through a user-defined listener\n * ({@link #setOnCompleteListener(OnCompleteListener, Executor)} )}).\n *\n * @param <T> the type of the contents in the transaction response\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_LOAD_NANOAPP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_UNLOAD_NANOAPP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_ENABLE_NANOAPP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_DISABLE_NANOAPP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_QUERY_NANOAPPS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILED_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Generic failure mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILED_BAD_PARAMS",
    "type" : "int",
    "comment" : "\n     * Failure mode when the request parameters were not valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILED_UNINITIALIZED",
    "type" : "int",
    "comment" : "\n     * Failure mode when the Context Hub is not initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILED_BUSY",
    "type" : "int",
    "comment" : "\n     * Failure mode when there are too many transactions pending.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILED_AT_HUB",
    "type" : "int",
    "comment" : "\n     * Failure mode when the request went through, but failed asynchronously at the hub.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILED_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Failure mode when the transaction has timed out.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILED_SERVICE_INTERNAL_FAILURE",
    "type" : "int",
    "comment" : "\n     * Failure mode when the transaction has failed internally at the service.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILED_HAL_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * Failure mode when the Context Hub HAL was not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransactionType",
    "type" : "int",
    "comment" : "\n     * The type of the transaction.\n     ",
    "links" : [ ]
  }, {
    "name" : "mResponse",
    "type" : "ContextHubTransaction.Response<T>",
    "comment" : "\n     * The response of the transaction.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "\n     * The executor to invoke the onComplete async callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "ContextHubTransaction.OnCompleteListener<T>",
    "comment" : "\n     * The listener to be invoked when the transaction completes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDoneSignal",
    "type" : "CountDownLatch",
    "comment" : "\n     * Synchronization latch used to block on response.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsResponseSet",
    "type" : "boolean",
    "comment" : "\n     * true if the response has been set throught setResponse, false otherwise.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String typeToString(@Type int type, boolean upperCase)",
    "returnType" : "String",
    "comment" : "\n     * Converts a transaction type to a human-readable string\n     *\n     * @param type the type of a transaction\n     * @param upperCase {@code true} if upper case the first letter, {@code false} otherwise\n     * @return a string describing the transaction\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * @return the type of the transaction\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContextHubTransaction.Response<T> waitForResponse(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException",
    "returnType" : "ContextHubTransaction.Response<T>",
    "comment" : "\n     * Waits to receive the asynchronous transaction result.\n     *\n     * This function blocks until the Context Hub Service has received a response\n     * for the transaction represented by this object by the Context Hub, or a\n     * specified timeout period has elapsed.\n     *\n     * If the specified timeout has passed, a TimeoutException will be thrown and the caller may\n     * retry the invocation of this method at a later time.\n     *\n     * @param timeout the timeout duration\n     * @param unit the unit of the timeout\n     *\n     * @return the transaction response\n     *\n     * @throws InterruptedException if the current thread is interrupted while waiting for response\n     * @throws TimeoutException if the timeout period has passed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnCompleteListener(@NonNull ContextHubTransaction.OnCompleteListener<T> listener, @NonNull @CallbackExecutor Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to be invoked invoked when the transaction completes.\n     *\n     * This function provides an asynchronous approach to retrieve the result of the\n     * transaction. When the transaction response has been provided by the Context Hub,\n     * the given listener will be invoked.\n     *\n     * If the transaction has already completed at the time of invocation, the listener\n     * will be immediately invoked. If the transaction has been invalidated,\n     * the listener will never be invoked.\n     *\n     * A transaction can be invalidated if the process owning the transaction is no longer active\n     * and the reference to this object is lost.\n     *\n     * This method or {@link #setOnCompleteListener(ContextHubTransaction.OnCompleteListener)} can\n     * only be invoked once, or an IllegalStateException will be thrown.\n     *\n     * @param listener the listener to be invoked upon completion\n     * @param executor the executor to invoke the callback\n     *\n     * @throws IllegalStateException if this method is called multiple times\n     * @throws NullPointerException if the callback or handler is null\n     ",
    "links" : [ "#setOnCompleteListener(ContextHubTransaction.OnCompleteListener)" ]
  }, {
    "name" : "public void setOnCompleteListener(@NonNull ContextHubTransaction.OnCompleteListener<T> listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to be invoked invoked when the transaction completes.\n     *\n     * Equivalent to {@link #setOnCompleteListener(ContextHubTransaction.OnCompleteListener,\n     * Executor)} with the executor using the main thread's Looper.\n     *\n     * This method or {@link #setOnCompleteListener(ContextHubTransaction.OnCompleteListener,\n     * Executor)} can only be invoked once, or an IllegalStateException will be thrown.\n     *\n     * @param listener the listener to be invoked upon completion\n     *\n     * @throws IllegalStateException if this method is called multiple times\n     * @throws NullPointerException if the callback is null\n     ",
    "links" : [ "#setOnCompleteListener(ContextHubTransaction.OnCompleteListener" ]
  }, {
    "name" : " void setResponse(ContextHubTransaction.Response<T> response)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "TYPE_LOAD_NANOAPP", "TYPE_UNLOAD_NANOAPP", "TYPE_ENABLE_NANOAPP", "TYPE_DISABLE_NANOAPP", "TYPE_QUERY_NANOAPPS", "RESULT_SUCCESS", "RESULT_FAILED_UNKNOWN", "RESULT_FAILED_BAD_PARAMS", "RESULT_FAILED_UNINITIALIZED", "RESULT_FAILED_BUSY", "RESULT_FAILED_AT_HUB", "RESULT_FAILED_TIMEOUT", "RESULT_FAILED_SERVICE_INTERNAL_FAILURE", "RESULT_FAILED_HAL_UNAVAILABLE", "mTransactionType", "mResponse", "mExecutor", "mListener", "mDoneSignal", "mIsResponseSet" ],
  "methodNames" : [ "public static String typeToString(@Type int type, boolean upperCase)", "public int getType()", "public ContextHubTransaction.Response<T> waitForResponse(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException", "public void setOnCompleteListener(@NonNull ContextHubTransaction.OnCompleteListener<T> listener, @NonNull @CallbackExecutor Executor executor)", "public void setOnCompleteListener(@NonNull ContextHubTransaction.OnCompleteListener<T> listener)", " void setResponse(ContextHubTransaction.Response<T> response)" ]
}