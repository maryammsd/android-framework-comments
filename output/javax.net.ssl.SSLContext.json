{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SSLContext.java",
  "packageName" : "javax.net.ssl",
  "className" : "SSLContext",
  "comment" : "\n * Instances of this class represent a secure socket protocol\n * implementation which acts as a factory for secure socket\n * factories or <code>SSLEngine</code>s. This class is initialized\n * with an optional set of key and trust managers and source of\n * secure random bytes.\n *\n * <p> Android provides the following <code>SSLContext</code> protocols:\n * <table>\n *   <thead>\n *     <tr>\n *       <th>Algorithm</th>\n *       <th>Supported API Levels</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>Default</td>\n *       <td>10+</td>\n *     </tr>\n *     <tr>\n *       <td>SSL</td>\n *       <td>10+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSLv3</td>\n *       <td>10-25</td>\n *     </tr>\n *     <tr>\n *       <td>TLS</td>\n *       <td>1+</td>\n *     </tr>\n *     <tr>\n *       <td>TLSv1</td>\n *       <td>10+</td>\n *     </tr>\n *     <tr>\n *       <td>TLSv1.1</td>\n *       <td>16+</td>\n *     </tr>\n *     <tr>\n *       <td>TLSv1.2</td>\n *       <td>16+</td>\n *     </tr>\n *     <tr>\n *       <td>TLSv1.3</td>\n *       <td>29+</td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * This protocol is described in the <a href=\n * \"{@docRoot}/../technotes/guides/security/StandardNames.html#SSLContext\">\n * SSLContext section</a> of the\n * Java Cryptography Architecture Standard Algorithm Name Documentation.\n *\n * @since 1.4\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "contextSpi",
    "type" : "SSLContextSpi",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protocol",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultContext",
    "type" : "SSLContext",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized SSLContext getDefault() throws NoSuchAlgorithmException",
    "returnType" : "SSLContext",
    "comment" : "\n     * Returns the default SSL context.\n     *\n     * <p>If a default context was set using the {@link #setDefault\n     * SSLContext.setDefault()} method, it is returned. Otherwise, the first\n     * call of this method triggers the call\n     * <code>SSLContext.getInstance(\"Default\")</code>.\n     * If successful, that object is made the default SSL context and returned.\n     *\n     * <p>The default context is immediately\n     * usable and does not require {@linkplain #init initialization}.\n     *\n     * @return the default SSL context\n     * @throws NoSuchAlgorithmException if the\n     *   {@link SSLContext#getInstance SSLContext.getInstance()} call fails\n     * @since 1.6\n     ",
    "links" : [ "javax.net.ssl.SSLContext#getInstance", "#setDefaultSSLContext.setDefault()" ]
  }, {
    "name" : "public static synchronized void setDefault(SSLContext context)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default SSL context. It will be returned by subsequent calls\n     * to {@link #getDefault}. The default context must be immediately usable\n     * and not require {@linkplain #init initialization}.\n     * <p>\n     * Developers are <em>strongly</em> discouraged from changing the default {@code SSLContext} as\n     * it is used as the Android default for secure communication by APIs like\n     * {@link SSLSocketFactory#getDefault()}, {@link SSLServerSocketFactory#getDefault()} and\n     * {@link HttpsURLConnection}.\n     *\n     * @param context the SSLContext\n     * @throws  NullPointerException if context is null\n     * @throws  SecurityException if a security manager exists and its\n     *          <code>checkPermission</code> method does not allow\n     *          <code>SSLPermission(\"setDefaultSSLContext\")</code>\n     * @since 1.6\n     ",
    "links" : [ "javax.net.ssl.HttpsURLConnection", "javax.net.ssl.SSLSocketFactory#getDefault()", "#getDefault", "javax.net.ssl.SSLServerSocketFactory#getDefault()" ]
  }, {
    "name" : "public static SSLContext getInstance(String protocol) throws NoSuchAlgorithmException",
    "returnType" : "SSLContext",
    "comment" : "\n     * Returns a <code>SSLContext</code> object that implements the\n     * specified secure socket protocol.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new SSLContext object encapsulating the\n     * SSLContextSpi implementation from the first\n     * Provider that supports the specified protocol is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param protocol the standard name of the requested protocol.\n     *          See the SSLContext section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#SSLContext\">\n     *          Java Cryptography Architecture Standard Algorithm Name\n     *          Documentation</a>\n     *          for information about standard protocol names.\n     *\n     * @return the new <code>SSLContext</code> object.\n     *\n     * @exception NoSuchAlgorithmException if no Provider supports a\n     *          SSLContextSpi implementation for the\n     *          specified protocol.\n     * @exception NullPointerException if protocol is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "#getProviders()" ]
  }, {
    "name" : "public static SSLContext getInstance(String protocol, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "SSLContext",
    "comment" : "\n     * Returns a <code>SSLContext</code> object that implements the\n     * specified secure socket protocol.\n     *\n     * <p> A new SSLContext object encapsulating the\n     * SSLContextSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param protocol the standard name of the requested protocol.\n     *          See the SSLContext section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#SSLContext\">\n     *          Java Cryptography Architecture Standard Algorithm Name\n     *          Documentation</a>\n     *          for information about standard protocol names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new <code>SSLContext</code> object.\n     *\n     * @throws NoSuchAlgorithmException if a SSLContextSpi\n     *          implementation for the specified protocol is not\n     *          available from the specified provider.\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @throws IllegalArgumentException if the provider name is null or empty.\n     * @throws NullPointerException if protocol is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "#getProviders()" ]
  }, {
    "name" : "public static SSLContext getInstance(String protocol, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "SSLContext",
    "comment" : "\n     * Returns a <code>SSLContext</code> object that implements the\n     * specified secure socket protocol.\n     *\n     * <p> A new SSLContext object encapsulating the\n     * SSLContextSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param protocol the standard name of the requested protocol.\n     *          See the SSLContext section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#SSLContext\">\n     *          Java Cryptography Architecture Standard Algorithm Name\n     *          Documentation</a>\n     *          for information about standard protocol names.\n     *\n     * @param provider an instance of the provider.\n     *\n     * @return the new <code>SSLContext</code> object.\n     *\n     * @throws NoSuchAlgorithmException if a SSLContextSpi\n     *          implementation for the specified protocol is not available\n     *          from the specified Provider object.\n     *\n     * @throws IllegalArgumentException if the provider is null.\n     * @throws NullPointerException if protocol is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getProtocol()",
    "returnType" : "String",
    "comment" : "\n     * Returns the protocol name of this <code>SSLContext</code> object.\n     *\n     * <p>This is the same name that was specified in one of the\n     * <code>getInstance</code> calls that created this\n     * <code>SSLContext</code> object.\n     *\n     * @return the protocol name of this <code>SSLContext</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this <code>SSLContext</code> object.\n     *\n     * @return the provider of this <code>SSLContext</code> object\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(KeyManager[] km, TrustManager[] tm, SecureRandom random) throws KeyManagementException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this context. Either of the first two parameters\n     * may be null in which case the installed security providers will\n     * be searched for the highest priority implementation of the\n     * appropriate factory. Likewise, the secure random parameter may\n     * be null in which case the default implementation will be used.\n     * <P>\n     * Only the first instance of a particular key and/or trust manager\n     * implementation type in the array is used.  (For example, only\n     * the first javax.net.ssl.X509KeyManager in the array will be used.)\n     *\n     * @param km the sources of authentication keys or null\n     * @param tm the sources of peer authentication trust decisions or null\n     * @param random the source of randomness for this generator or null\n     * @throws KeyManagementException if this operation fails\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SSLSocketFactory getSocketFactory()",
    "returnType" : "SSLSocketFactory",
    "comment" : "\n     * Returns a <code>SocketFactory</code> object for this\n     * context.\n     *\n     * @return the <code>SocketFactory</code> object\n     * @throws IllegalStateException if the SSLContextImpl requires\n     *          initialization and the <code>init()</code> has not been called\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SSLServerSocketFactory getServerSocketFactory()",
    "returnType" : "SSLServerSocketFactory",
    "comment" : "\n     * Returns a <code>ServerSocketFactory</code> object for\n     * this context.\n     *\n     * @return the <code>ServerSocketFactory</code> object\n     * @throws IllegalStateException if the SSLContextImpl requires\n     *          initialization and the <code>init()</code> has not been called\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SSLEngine createSSLEngine()",
    "returnType" : "SSLEngine",
    "comment" : "\n     * Creates a new <code>SSLEngine</code> using this context.\n     * <P>\n     * Applications using this factory method are providing no hints\n     * for an internal session reuse strategy. If hints are desired,\n     * {@link #createSSLEngine(String, int)} should be used\n     * instead.\n     * <P>\n     * Some cipher suites (such as Kerberos) require remote hostname\n     * information, in which case this factory method should not be used.\n     *\n     * @return  the <code>SSLEngine</code> object\n     * @throws  UnsupportedOperationException if the underlying provider\n     *          does not implement the operation.\n     * @throws  IllegalStateException if the SSLContextImpl requires\n     *          initialization and the <code>init()</code> has not been called\n     * @since   1.5\n     ",
    "links" : [ "#createSSLEngine(String" ]
  }, {
    "name" : "public final SSLEngine createSSLEngine(String peerHost, int peerPort)",
    "returnType" : "SSLEngine",
    "comment" : "\n     * Creates a new <code>SSLEngine</code> using this context using\n     * advisory peer information.\n     * <P>\n     * Applications using this factory method are providing hints\n     * for an internal session reuse strategy.\n     * <P>\n     * Some cipher suites (such as Kerberos) require remote hostname\n     * information, in which case peerHost needs to be specified.\n     *\n     * @param   peerHost the non-authoritative name of the host\n     * @param   peerPort the non-authoritative port\n     * @return  the new <code>SSLEngine</code> object\n     * @throws  UnsupportedOperationException if the underlying provider\n     *          does not implement the operation.\n     * @throws  IllegalStateException if the SSLContextImpl requires\n     *          initialization and the <code>init()</code> has not been called\n     * @since   1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SSLSessionContext getServerSessionContext()",
    "returnType" : "SSLSessionContext",
    "comment" : "\n     * Returns the server session context, which represents the set of\n     * SSL sessions available for use during the handshake phase of\n     * server-side SSL sockets.\n     * <P>\n     * This context may be unavailable in some environments, in which\n     * case this method returns null. For example, when the underlying\n     * SSL provider does not provide an implementation of SSLSessionContext\n     * interface, this method returns null. A non-null session context\n     * is returned otherwise.\n     *\n     * @return server session context bound to this SSL context\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SSLSessionContext getClientSessionContext()",
    "returnType" : "SSLSessionContext",
    "comment" : "\n     * Returns the client session context, which represents the set of\n     * SSL sessions available for use during the handshake phase of\n     * client-side SSL sockets.\n     * <P>\n     * This context may be unavailable in some environments, in which\n     * case this method returns null. For example, when the underlying\n     * SSL provider does not provide an implementation of SSLSessionContext\n     * interface, this method returns null. A non-null session context\n     * is returned otherwise.\n     *\n     * @return client session context bound to this SSL context\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SSLParameters getDefaultSSLParameters()",
    "returnType" : "SSLParameters",
    "comment" : "\n     * Returns a copy of the SSLParameters indicating the default\n     * settings for this SSL context.\n     *\n     * <p>The parameters will always have the ciphersuites and protocols\n     * arrays set to non-null values.\n     *\n     * @return a copy of the SSLParameters object with the default settings\n     * @throws UnsupportedOperationException if the default SSL parameters\n     *   could not be obtained.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SSLParameters getSupportedSSLParameters()",
    "returnType" : "SSLParameters",
    "comment" : "\n     * Returns a copy of the SSLParameters indicating the supported\n     * settings for this SSL context.\n     *\n     * <p>The parameters will always have the ciphersuites and protocols\n     * arrays set to non-null values.\n     *\n     * @return a copy of the SSLParameters object with the supported\n     *   settings\n     * @throws UnsupportedOperationException if the supported SSL parameters\n     *   could not be obtained.\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static synchronized SSLContext getDefault() throws NoSuchAlgorithmException", "public static synchronized void setDefault(SSLContext context)", "public static SSLContext getInstance(String protocol) throws NoSuchAlgorithmException", "public static SSLContext getInstance(String protocol, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static SSLContext getInstance(String protocol, Provider provider) throws NoSuchAlgorithmException", "public final String getProtocol()", "public final Provider getProvider()", "public final void init(KeyManager[] km, TrustManager[] tm, SecureRandom random) throws KeyManagementException", "public final SSLSocketFactory getSocketFactory()", "public final SSLServerSocketFactory getServerSocketFactory()", "public final SSLEngine createSSLEngine()", "public final SSLEngine createSSLEngine(String peerHost, int peerPort)", "public final SSLSessionContext getServerSessionContext()", "public final SSLSessionContext getClientSessionContext()", "public final SSLParameters getDefaultSSLParameters()", "public final SSLParameters getSupportedSSLParameters()" ],
  "variableNames" : [ "provider", "contextSpi", "protocol", "defaultContext" ]
}