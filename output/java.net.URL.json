{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/URL.java",
  "packageName" : "java.net",
  "className" : "URL",
  "comment" : "\n * Class {@code URL} represents a Uniform Resource\n * Locator, a pointer to a \"resource\" on the World\n * Wide Web. A resource can be something as simple as a file or a\n * directory, or it can be a reference to a more complicated object,\n * such as a query to a database or to a search engine. More\n * information on the types of URLs and their formats can be found at:\n * <a href=\n * \"http://web.archive.org/web/20051219043731/http://archive.ncsa.uiuc.edu/SDG/Software/Mosaic/Demo/url-primer.html\">\n * <i>Types of URL</i></a>\n * <p>\n * In general, a URL can be broken into several parts. Consider the\n * following example:\n * <blockquote><pre>\n *     http://www.example.com/docs/resource1.html\n * </pre></blockquote>\n * <p>\n * The URL above indicates that the protocol to use is\n * {@code http} (HyperText Transfer Protocol) and that the\n * information resides on a host machine named\n * {@code www.example.com}. The information on that host\n * machine is named {@code /docs/resource1.html}. The exact\n * meaning of this name on the host machine is both protocol\n * dependent and host dependent. The information normally resides in\n * a file, but it could be generated on the fly. This component of\n * the URL is called the <i>path</i> component.\n * <p>\n * A URL can optionally specify a \"port\", which is the\n * port number to which the TCP connection is made on the remote host\n * machine. If the port is not specified, the default port for\n * the protocol is used instead. For example, the default port for\n * {@code http} is {@code 80}. An alternative port could be\n * specified as:\n * <blockquote><pre>\n *     http://www.example.com:1080/docs/resource1.html\n * </pre></blockquote>\n * <p>\n * The syntax of {@code URL} is defined by  <a\n * href=\"http://www.ietf.org/rfc/rfc2396.txt\"><i>RFC&nbsp;2396: Uniform\n * Resource Identifiers (URI): Generic Syntax</i></a>, amended by <a\n * href=\"http://www.ietf.org/rfc/rfc2732.txt\"><i>RFC&nbsp;2732: Format for\n * Literal IPv6 Addresses in URLs</i></a>. The Literal IPv6 address format\n * also supports scope_ids. The syntax and usage of scope_ids is described\n * <a href=\"Inet6Address.html#scoped\">here</a>.\n * <p>\n * A URL may have appended to it a \"fragment\", also known\n * as a \"ref\" or a \"reference\". The fragment is indicated by the sharp\n * sign character \"#\" followed by more characters. For example,\n * <blockquote><pre>\n *     http://java.sun.com/index.html#chapter1\n * </pre></blockquote>\n * <p>\n * This fragment is not technically part of the URL. Rather, it\n * indicates that after the specified resource is retrieved, the\n * application is specifically interested in that part of the\n * document that has the tag {@code chapter1} attached to it. The\n * meaning of a tag is resource specific.\n * <p>\n * An application can also specify a \"relative URL\",\n * which contains only enough information to reach the resource\n * relative to another URL. Relative URLs are frequently used within\n * HTML pages. For example, if the contents of the URL:\n * <blockquote><pre>\n *     http://java.sun.com/index.html\n * </pre></blockquote>\n * contained within it the relative URL:\n * <blockquote><pre>\n *     FAQ.html\n * </pre></blockquote>\n * it would be a shorthand for:\n * <blockquote><pre>\n *     http://java.sun.com/FAQ.html\n * </pre></blockquote>\n * <p>\n * The relative URL need not specify all the components of a URL. If\n * the protocol, host name, or port number is missing, the value is\n * inherited from the fully specified URL. The file component must be\n * specified. The optional fragment is not inherited.\n * <p>\n * The URL class does not itself encode or decode any URL components\n * according to the escaping mechanism defined in RFC2396. It is the\n * responsibility of the caller to encode any fields, which need to be\n * escaped prior to calling URL, and also to decode any escaped fields,\n * that are returned from URL. Furthermore, because URL has no knowledge\n * of URL escaping, it does not recognise equivalence between the encoded\n * or decoded form of the same URL. For example, the two URLs:<br>\n * <pre>    http://foo.com/hello world/ and http://foo.com/hello%20world</pre>\n * would be considered not equal to each other.\n * <p>\n * Note, the {@link java.net.URI} class does perform escaping of its\n * component fields in certain circumstances. The recommended way\n * to manage the encoding and decoding of URLs is to use {@link java.net.URI},\n * and to convert between these two classes using {@link #toURI()} and\n * {@link URI#toURL()}.\n * <p>\n * The {@link URLEncoder} and {@link URLDecoder} classes can also be\n * used, but only for HTML form encoding, which is not the same\n * as the encoding scheme defined in RFC2396.\n *\n * @author  James Gosling\n * @since JDK1.0\n ",
  "links" : [ "java.net.URLEncoder", "java.net.URLDecoder", "#toURI()", "java.net.URI#toURL()", "java.net.URI" ],
  "variables" : [ {
    "name" : "BUILTIN_HANDLER_CLASS_NAMES",
    "type" : "Set<String>",
    "comment" : " static final String BUILTIN_HANDLERS_PREFIX = \"sun.net.www.protocol\";",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protocolPathProp",
    "type" : "String",
    "comment" : "\n     * The property which specifies the package prefix list to be scanned\n     * for protocol handlers.  The value of this property (if any) should\n     * be a vertical bar delimited list of package names to search through\n     * for a protocol handler to load.  The policy of this class is that\n     * all protocol handlers will be in a class called <protocolname>.Handler,\n     * and each package in the list is examined in turn for a matching\n     * handler.  If none are found (or the property is not specified), the\n     * default package prefix, sun.net.www.protocol, is used.  The search\n     * proceeds from the first package in the list to the last and stops\n     * when a match is found.\n     ",
    "links" : [ ]
  }, {
    "name" : "protocol",
    "type" : "String",
    "comment" : "\n     * The protocol to use (ftp, http, nntp, ... etc.) .\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "host",
    "type" : "String",
    "comment" : "\n     * The host name to connect to.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "port",
    "type" : "int",
    "comment" : "\n     * The protocol port to connect to.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "file",
    "type" : "String",
    "comment" : "\n     * The specified file name on that host. {@code file} is\n     * defined as {@code path[?query]}\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "query",
    "type" : "String",
    "comment" : "\n     * The query part of this URL.\n     ",
    "links" : [ ]
  }, {
    "name" : "authority",
    "type" : "String",
    "comment" : "\n     * The authority part of this URL.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "path",
    "type" : "String",
    "comment" : "\n     * The path part of this URL.\n     ",
    "links" : [ ]
  }, {
    "name" : "userInfo",
    "type" : "String",
    "comment" : "\n     * The userinfo part of this URL.\n     ",
    "links" : [ ]
  }, {
    "name" : "ref",
    "type" : "String",
    "comment" : "\n     * # reference.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "hostAddress",
    "type" : "InetAddress",
    "comment" : "\n     * The host's IP address, used in equals and hashCode.\n     * Computed on demand. An uninitialized or unknown hostAddress is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "handler",
    "type" : "URLStreamHandler",
    "comment" : "\n     * The URLStreamHandler for this URL.\n     ",
    "links" : [ ]
  }, {
    "name" : "hashCode",
    "type" : "int",
    "comment" : " Our hash code.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "tempState",
    "type" : "UrlDeserializedState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "factory",
    "type" : "URLStreamHandlerFactory",
    "comment" : "\n     * The URLStreamHandler factory.\n     ",
    "links" : [ ]
  }, {
    "name" : "handlers",
    "type" : "Hashtable<String, URLStreamHandler>",
    "comment" : "\n     * A table of protocol handlers.\n     ",
    "links" : [ ]
  }, {
    "name" : "streamHandlerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : "\n     * @serialField    protocol String\n     *\n     * @serialField    host String\n     *\n     * @serialField    port int\n     *\n     * @serialField    authority String\n     *\n     * @serialField    file String\n     *\n     * @serialField    ref String\n     *\n     * @serialField    hashCode int\n     *\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private boolean isValidProtocol(String protocol)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if specified string is a valid protocol name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkSpecifyHandler(SecurityManager sm)",
    "returnType" : "void",
    "comment" : "\n     * Checks for permission to specify a stream handler.\n     ",
    "links" : [ ]
  }, {
    "name" : " void set(String protocol, String host, int port, String file, String ref)",
    "returnType" : "void",
    "comment" : "\n     * Sets the fields of the URL. This is not a public method so that\n     * only URLStreamHandlers can modify URL fields. URLs are\n     * otherwise constant.\n     *\n     * @param protocol the name of the protocol to use\n     * @param host the name of the host\n       @param port the port number on the host\n     * @param file the file on the host\n     * @param ref the internal reference in the URL\n     ",
    "links" : [ ]
  }, {
    "name" : " void set(String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)",
    "returnType" : "void",
    "comment" : "\n     * Sets the specified 8 fields of the URL. This is not a public method so\n     * that only URLStreamHandlers can modify URL fields. URLs are otherwise\n     * constant.\n     *\n     * @param protocol the name of the protocol to use\n     * @param host the name of the host\n     * @param port the port number on the host\n     * @param authority the authority part for the url\n     * @param userInfo the username and password\n     * @param path the file on the host\n     * @param ref the internal reference in the URL\n     * @param query the query part of this URL\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getQuery()",
    "returnType" : "String",
    "comment" : "\n     * Gets the query part of this {@code URL}.\n     *\n     * @return  the query part of this {@code URL},\n     * or <CODE>null</CODE> if one does not exist\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPath()",
    "returnType" : "String",
    "comment" : "\n     * Gets the path part of this {@code URL}.\n     *\n     * @return  the path part of this {@code URL}, or an\n     * empty string if one does not exist\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getUserInfo()",
    "returnType" : "String",
    "comment" : "\n     * Gets the userInfo part of this {@code URL}.\n     *\n     * @return  the userInfo part of this {@code URL}, or\n     * <CODE>null</CODE> if one does not exist\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAuthority()",
    "returnType" : "String",
    "comment" : "\n     * Gets the authority part of this {@code URL}.\n     *\n     * @return  the authority part of this {@code URL}\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPort()",
    "returnType" : "int",
    "comment" : "\n     * Gets the port number of this {@code URL}.\n     *\n     * @return  the port number, or -1 if the port is not set\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultPort()",
    "returnType" : "int",
    "comment" : "\n     * Gets the default port number of the protocol associated\n     * with this {@code URL}. If the URL scheme or the URLStreamHandler\n     * for the URL do not define a default port number,\n     * then -1 is returned.\n     *\n     * @return  the port number\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getProtocol()",
    "returnType" : "String",
    "comment" : "\n     * Gets the protocol name of this {@code URL}.\n     *\n     * @return  the protocol of this {@code URL}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getHost()",
    "returnType" : "String",
    "comment" : "\n     * Gets the host name of this {@code URL}, if applicable.\n     * The format of the host conforms to RFC 2732, i.e. for a\n     * literal IPv6 address, this method will return the IPv6 address\n     * enclosed in square brackets ({@code '['} and {@code ']'}).\n     *\n     * @return  the host name of this {@code URL}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getFile()",
    "returnType" : "String",
    "comment" : "\n     * Gets the file name of this {@code URL}.\n     * The returned file portion will be\n     * the same as <CODE>getPath()</CODE>, plus the concatenation of\n     * the value of <CODE>getQuery()</CODE>, if any. If there is\n     * no query portion, this method and <CODE>getPath()</CODE> will\n     * return identical results.\n     *\n     * @return  the file name of this {@code URL},\n     * or an empty string if one does not exist\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRef()",
    "returnType" : "String",
    "comment" : "\n     * Gets the anchor (also known as the \"reference\") of this\n     * {@code URL}.\n     *\n     * @return  the anchor (also known as the \"reference\") of this\n     *          {@code URL}, or <CODE>null</CODE> if one does not exist\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this URL for equality with another object.<p>\n     *\n     * If the given object is not a URL then this method immediately returns\n     * {@code false}.<p>\n     *\n     * Two URL objects are equal if they have the same protocol, reference\n     * equivalent hosts, have the same port number on the host, and the same\n     * file and fragment of the file.<p>\n     *\n     * Returns true if this URL equals {@code o}. URLs are equal if they have\n     * the same protocol, host, port, file, and reference.\n     *\n     * <h3>Network I/O Warning</h3>\n     * <p>Some implementations of URL.equals() resolve host names over the\n     * network. This is problematic:\n     * <ul>\n     * <li><strong>The network may be slow.</strong> Many classes, including\n     * core collections like {@link java.util.Map Map} and {@link java.util.Set\n     * Set} expect that {@code equals} and {@code hashCode} will return quickly.\n     * By violating this assumption, this method posed potential performance\n     * problems.\n     * <li><strong>Equal IP addresses do not imply equal content.</strong>\n     * Virtual hosting permits unrelated sites to share an IP address. This\n     * method could report two otherwise unrelated URLs to be equal because\n     * they're hosted on the same server.</li>\n     * <li><strong>The network may not be available.</strong> Two URLs could be\n     * equal when a network is available and unequal otherwise.</li>\n     * <li><strong>The network may change.</strong> The IP address for a given\n     * host name varies by network and over time. This is problematic for mobile\n     * devices. Two URLs could be equal on some networks and unequal on\n     * others.</li>\n     * </ul>\n     * <p>This problem is fixed in Android 4.0 (Ice Cream Sandwich). In that\n     * release, URLs are only equal if their host names are equal (ignoring\n     * case).\n     *\n     * @param   obj   the URL to compare against.\n     * @return  {@code true} if the objects are the same;\n     *          {@code false} otherwise.\n     ",
    "links" : [ "java.util.Map", "java.util.SetSet" ]
  }, {
    "name" : "public synchronized int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Creates an integer suitable for hash table indexing.<p>\n     *\n     * The hash code is based upon all the URL components relevant for URL\n     * comparison. As such, this operation is a blocking operation.<p>\n     *\n     * @return  a hash code for this {@code URL}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sameFile(URL other)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares two URLs, excluding the fragment component.<p>\n     *\n     * Returns {@code true} if this {@code URL} and the\n     * {@code other} argument are equal without taking the\n     * fragment component into consideration.\n     *\n     * @param   other   the {@code URL} to compare against.\n     * @return  {@code true} if they reference the same remote object;\n     *          {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Constructs a string representation of this {@code URL}. The\n     * string is created by calling the {@code toExternalForm}\n     * method of the stream protocol handler for this object.\n     *\n     * @return  a string representation of this object.\n     * @see     java.net.URL#URL(java.lang.String, java.lang.String, int,\n     *                  java.lang.String)\n     * @see     java.net.URLStreamHandler#toExternalForm(java.net.URL)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toExternalForm()",
    "returnType" : "String",
    "comment" : "\n     * Constructs a string representation of this {@code URL}. The\n     * string is created by calling the {@code toExternalForm}\n     * method of the stream protocol handler for this object.\n     *\n     * @return  a string representation of this object.\n     * @see     java.net.URL#URL(java.lang.String, java.lang.String,\n     *                  int, java.lang.String)\n     * @see     java.net.URLStreamHandler#toExternalForm(java.net.URL)\n     ",
    "links" : [ ]
  }, {
    "name" : "public URI toURI() throws URISyntaxException",
    "returnType" : "URI",
    "comment" : "\n     * Returns a {@link java.net.URI} equivalent to this URL.\n     * This method functions in the same way as {@code new URI (this.toString())}.\n     * <p>Note, any URL instance that complies with RFC 2396 can be converted\n     * to a URI. However, some URLs that are not strictly in compliance\n     * can not be converted to a URI.\n     *\n     * @exception URISyntaxException if this URL is not formatted strictly according to\n     *            to RFC2396 and cannot be converted to a URI.\n     *\n     * @return    a URI instance equivalent to this URL.\n     * @since 1.5\n     ",
    "links" : [ "java.net.URI" ]
  }, {
    "name" : "public URLConnection openConnection() throws java.io.IOException",
    "returnType" : "URLConnection",
    "comment" : "\n     * Returns a {@link java.net.URLConnection URLConnection} instance that\n     * represents a connection to the remote object referred to by the\n     * {@code URL}.\n     *\n     * <P>A new instance of {@linkplain java.net.URLConnection URLConnection} is\n     * created every time when invoking the\n     * {@linkplain java.net.URLStreamHandler#openConnection(URL)\n     * URLStreamHandler.openConnection(URL)} method of the protocol handler for\n     * this URL.</P>\n     *\n     * <P>It should be noted that a URLConnection instance does not establish\n     * the actual network connection on creation. This will happen only when\n     * calling {@linkplain java.net.URLConnection#connect() URLConnection.connect()}.</P>\n     *\n     * <P>If for the URL's protocol (such as HTTP or JAR), there\n     * exists a public, specialized URLConnection subclass belonging\n     * to one of the following packages or one of their subpackages:\n     * java.lang, java.io, java.util, java.net, the connection\n     * returned will be of that subclass. For example, for HTTP an\n     * HttpURLConnection will be returned, and for JAR a\n     * JarURLConnection will be returned.</P>\n     *\n     * @return     a {@link java.net.URLConnection URLConnection} linking\n     *             to the URL.\n     * @exception  IOException  if an I/O exception occurs.\n     * @see        java.net.URL#URL(java.lang.String, java.lang.String,\n     *             int, java.lang.String)\n     ",
    "links" : [ "java.net.URLConnection" ]
  }, {
    "name" : "public URLConnection openConnection(Proxy proxy) throws java.io.IOException",
    "returnType" : "URLConnection",
    "comment" : "\n     * Same as {@link #openConnection()}, except that the connection will be\n     * made through the specified proxy; Protocol handlers that do not\n     * support proxing will ignore the proxy parameter and make a\n     * normal connection.\n     *\n     * Invoking this method preempts the system's default ProxySelector\n     * settings.\n     *\n     * @param      proxy the Proxy through which this connection\n     *             will be made. If direct connection is desired,\n     *             Proxy.NO_PROXY should be specified.\n     * @return     a {@code URLConnection} to the URL.\n     * @exception  IOException  if an I/O exception occurs.\n     * @exception  SecurityException if a security manager is present\n     *             and the caller doesn't have permission to connect\n     *             to the proxy.\n     * @exception  IllegalArgumentException will be thrown if proxy is null,\n     *             or proxy has the wrong type\n     * @exception  UnsupportedOperationException if the subclass that\n     *             implements the protocol handler doesn't support\n     *             this method.\n     * @see        java.net.URL#URL(java.lang.String, java.lang.String,\n     *             int, java.lang.String)\n     * @see        java.net.URLConnection\n     * @see        java.net.URLStreamHandler#openConnection(java.net.URL,\n     *             java.net.Proxy)\n     * @since      1.5\n     ",
    "links" : [ "#openConnection()" ]
  }, {
    "name" : "public final InputStream openStream() throws java.io.IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Opens a connection to this {@code URL} and returns an\n     * {@code InputStream} for reading from that connection. This\n     * method is a shorthand for:\n     * <blockquote><pre>\n     *     openConnection().getInputStream()\n     * </pre></blockquote>\n     *\n     * @return     an input stream for reading from the URL connection.\n     * @exception  IOException  if an I/O exception occurs.\n     * @see        java.net.URL#openConnection()\n     * @see        java.net.URLConnection#getInputStream()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Object getContent() throws java.io.IOException",
    "returnType" : "Object",
    "comment" : "\n     * Gets the contents of this URL. This method is a shorthand for:\n     * <blockquote><pre>\n     *     openConnection().getContent()\n     * </pre></blockquote>\n     *\n     * @return     the contents of this URL.\n     * @exception  IOException  if an I/O exception occurs.\n     * @see        java.net.URLConnection#getContent()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Object getContent(Class[] classes) throws java.io.IOException",
    "returnType" : "Object",
    "comment" : "\n     * Gets the contents of this URL. This method is a shorthand for:\n     * <blockquote><pre>\n     *     openConnection().getContent(Class[])\n     * </pre></blockquote>\n     *\n     * @param classes an array of Java types\n     * @return     the content object of this URL that is the first match of\n     *               the types specified in the classes array.\n     *               null if none of the requested types are supported.\n     * @exception  IOException  if an I/O exception occurs.\n     * @see        java.net.URLConnection#getContent(Class[])\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setURLStreamHandlerFactory(URLStreamHandlerFactory fac)",
    "returnType" : "void",
    "comment" : "\n     * Sets an application's {@code URLStreamHandlerFactory}.\n     * This method can be called at most once in a given Java Virtual\n     * Machine.\n     *\n     *<p> The {@code URLStreamHandlerFactory} instance is used to\n     *construct a stream protocol handler from a protocol name.\n     *\n     * <p> If there is a security manager, this method first calls\n     * the security manager's {@code checkSetFactory} method\n     * to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * @param      fac   the desired factory.\n     * @exception  Error  if the application has already set a factory.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkSetFactory} method doesn't allow\n     *             the operation.\n     * @see        java.net.URL#URL(java.lang.String, java.lang.String,\n     *             int, java.lang.String)\n     * @see        java.net.URLStreamHandlerFactory\n     * @see        SecurityManager#checkSetFactory\n     ",
    "links" : [ ]
  }, {
    "name" : " static URLStreamHandler getURLStreamHandler(String protocol)",
    "returnType" : "URLStreamHandler",
    "comment" : "\n     * Returns the Stream Handler.\n     * @param protocol the protocol to use\n     ",
    "links" : [ ]
  }, {
    "name" : "private static URLStreamHandler createBuiltinHandler(String protocol) throws ClassNotFoundException, InstantiationException, IllegalAccessException",
    "returnType" : "URLStreamHandler",
    "comment" : "\n     * Returns an instance of the built-in handler for the given protocol, or null if none exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Set<String> createBuiltinHandlerClassNames()",
    "returnType" : "Set<String>",
    "comment" : " Names of implementation classes returned by {@link #createBuiltinHandler(String)}. ",
    "links" : [ "#createBuiltinHandler(String)" ]
  }, {
    "name" : "private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * WriteObject is called to save the state of the URL to an\n     * ObjectOutputStream. The handler is not saved since it is\n     * specific to this system.\n     *\n     * @serialData the default write object value. When read back in,\n     * the reader must ensure that calling getURLStreamHandler with\n     * the protocol variable returns a valid URLStreamHandler and\n     * throw an IOException if it does not.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * readObject is called to restore the state of the URL from the\n     * stream.  It reads the components of the URL and finds the local\n     * stream handler.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object readResolve() throws ObjectStreamException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private URL setDeserializedFields(URLStreamHandler handler)",
    "returnType" : "URL",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private URL fabricateNewURL() throws InvalidObjectException",
    "returnType" : "URL",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isBuiltinStreamHandler(String handlerClassName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setSerializedHashCode(int hc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private boolean isValidProtocol(String protocol)", "private void checkSpecifyHandler(SecurityManager sm)", " void set(String protocol, String host, int port, String file, String ref)", " void set(String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)", "public String getQuery()", "public String getPath()", "public String getUserInfo()", "public String getAuthority()", "public int getPort()", "public int getDefaultPort()", "public String getProtocol()", "public String getHost()", "public String getFile()", "public String getRef()", "public boolean equals(Object obj)", "public synchronized int hashCode()", "public boolean sameFile(URL other)", "public String toString()", "public String toExternalForm()", "public URI toURI() throws URISyntaxException", "public URLConnection openConnection() throws java.io.IOException", "public URLConnection openConnection(Proxy proxy) throws java.io.IOException", "public final InputStream openStream() throws java.io.IOException", "public final Object getContent() throws java.io.IOException", "public final Object getContent(Class[] classes) throws java.io.IOException", "public static void setURLStreamHandlerFactory(URLStreamHandlerFactory fac)", " static URLStreamHandler getURLStreamHandler(String protocol)", "private static URLStreamHandler createBuiltinHandler(String protocol) throws ClassNotFoundException, InstantiationException, IllegalAccessException", "private static Set<String> createBuiltinHandlerClassNames()", "private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException", "private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException", "private Object readResolve() throws ObjectStreamException", "private URL setDeserializedFields(URLStreamHandler handler)", "private URL fabricateNewURL() throws InvalidObjectException", "private boolean isBuiltinStreamHandler(String handlerClassName)", "private void resetState()", "private void setSerializedHashCode(int hc)" ],
  "variableNames" : [ "BUILTIN_HANDLER_CLASS_NAMES", "serialVersionUID", "protocolPathProp", "protocol", "host", "port", "file", "query", "authority", "path", "userInfo", "ref", "hostAddress", "handler", "hashCode", "tempState", "factory", "handlers", "streamHandlerLock", "serialPersistentFields" ]
}