{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/functions/FunctionDef1Arg.java",
  "packageName" : "org.apache.xpath.functions",
  "className" : "FunctionDef1Arg",
  "comment" : "\n * Base class for functions that accept one argument that can be defaulted if\n * not specified.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected int getArg0AsNode(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Execute the first argument expression that is expected to return a\n   * nodeset.  If the argument is null, then return the current context node.\n   *\n   * @param xctxt Runtime XPath context.\n   *\n   * @return The first node of the executed nodeset, or the current context\n   *         node if the first argument is null.\n   *\n   * @throws javax.xml.transform.TransformerException if an error occurs while\n   *                                   executing the argument expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean Arg0IsNodesetExpr()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the expression is a nodeset expression.\n   * @return true if the expression can be represented as a nodeset.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected XMLString getArg0AsString(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XMLString",
    "comment" : "\n   * Execute the first argument expression that is expected to return a\n   * string.  If the argument is null, then get the string value from the\n   * current context node.\n   *\n   * @param xctxt Runtime XPath context.\n   *\n   * @return The string value of the first argument, or the string value of the\n   *         current context node if the first argument is null.\n   *\n   * @throws javax.xml.transform.TransformerException if an error occurs while\n   *                                   executing the argument expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected double getArg0AsNumber(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "double",
    "comment" : "\n   * Execute the first argument expression that is expected to return a\n   * number.  If the argument is null, then get the number value from the\n   * current context node.\n   *\n   * @param xctxt Runtime XPath context.\n   *\n   * @return The number value of the first argument, or the number value of the\n   *         current context node if the first argument is null.\n   *\n   * @throws javax.xml.transform.TransformerException if an error occurs while\n   *                                   executing the argument expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void checkNumberArgs(int argNum) throws WrongNumberArgsException",
    "returnType" : "void",
    "comment" : "\n   * Check that the number of arguments passed to this function is correct.\n   *\n   * @param argNum The number of arguments that is being passed to the function.\n   *\n   * @throws WrongNumberArgsException if the number of arguments is not 0 or 1.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void reportWrongNumberArgs() throws WrongNumberArgsException",
    "returnType" : "void",
    "comment" : "\n   * Constructs and throws a WrongNumberArgException with the appropriate\n   * message for this function object.\n   *\n   * @throws WrongNumberArgsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean canTraverseOutsideSubtree()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this expression or it's subexpressions can traverse outside\n   * the current subtree.\n   *\n   * @return true if traversal outside the context node's subtree can occur.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected int getArg0AsNode(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public boolean Arg0IsNodesetExpr()", "protected XMLString getArg0AsString(XPathContext xctxt) throws javax.xml.transform.TransformerException", "protected double getArg0AsNumber(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public void checkNumberArgs(int argNum) throws WrongNumberArgsException", "protected void reportWrongNumberArgs() throws WrongNumberArgsException", "public boolean canTraverseOutsideSubtree()" ],
  "variableNames" : [ "serialVersionUID" ]
}