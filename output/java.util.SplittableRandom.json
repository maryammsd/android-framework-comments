{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/SplittableRandom.java",
  "packageName" : "java.util",
  "className" : "SplittableRandom",
  "comment" : "\n * A generator of uniform pseudorandom values (with period 2<sup>64</sup>)\n * applicable for use in (among other contexts) isolated parallel\n * computations that may generate subtasks. Class {@code SplittableRandom}\n * supports methods for producing pseudorandom numbers of type {@code int},\n * {@code long}, and {@code double} with similar usages as for class\n * {@link java.util.Random} but differs in the following ways:\n *\n * <ul>\n *\n * <li>Series of generated values pass the DieHarder suite testing\n * independence and uniformity properties of random number generators.\n * (Most recently validated with <a\n * href=\"http://www.phy.duke.edu/~rgb/General/dieharder.php\"> version\n * 3.31.1</a>.) These tests validate only the methods for certain\n * types and ranges, but similar properties are expected to hold, at\n * least approximately, for others as well. The <em>period</em>\n * (length of any series of generated values before it repeats) is\n * 2<sup>64</sup>. </li>\n *\n * <li> Method {@link #split} constructs and returns a new\n * SplittableRandom instance that shares no mutable state with the\n * current instance. However, with very high probability, the\n * values collectively generated by the two objects have the same\n * statistical properties as if the same quantity of values were\n * generated by a single thread using a single {@code\n * SplittableRandom} object.  </li>\n *\n * <li>Instances of SplittableRandom are <em>not</em> thread-safe.\n * They are designed to be split, not shared, across threads. For\n * example, a {@link java.util.concurrent.ForkJoinTask\n * fork/join-style} computation using random numbers might include a\n * construction of the form {@code new\n * Subtask(aSplittableRandom.split()).fork()}.\n *\n * <li>This class provides additional methods for generating random\n * streams, that employ the above techniques when used in {@code\n * stream.parallel()} mode.</li>\n *\n * </ul>\n *\n * <p>Instances of {@code SplittableRandom} are not cryptographically\n * secure.  Consider instead using {@link java.security.SecureRandom}\n * in security-sensitive applications. Additionally,\n * default-constructed instances do not use a cryptographically random\n * seed unless the {@linkplain System#getProperty system property}\n * {@code java.util.secureRandomSeed} is set to {@code true}.\n *\n * @author  Guy Steele\n * @author  Doug Lea\n * @since   1.8\n ",
  "links" : [ "java.security.SecureRandom", "#split", "java.util.concurrent.ForkJoinTaskfork", "java.util.Random" ],
  "variables" : [ {
    "name" : "GOLDEN_GAMMA",
    "type" : "long",
    "comment" : "\n     * The golden ratio scaled to 64bits, used as the initial gamma\n     * value for (unsplit) SplittableRandoms.\n     ",
    "links" : [ ]
  }, {
    "name" : "seed",
    "type" : "long",
    "comment" : "\n     * The seed. Updated only via method nextSeed.\n     ",
    "links" : [ ]
  }, {
    "name" : "gamma",
    "type" : "long",
    "comment" : "\n     * The step value.\n     ",
    "links" : [ ]
  }, {
    "name" : "proxy",
    "type" : "AbstractSplittableGeneratorProxy",
    "comment" : "\n     * Proxy object to non-public RandomSupportAbstractSplittableGenerator.\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultGen",
    "type" : "AtomicLong",
    "comment" : "\n     * The seed generator for default constructors.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static long mix64(long z)",
    "returnType" : "long",
    "comment" : "\n     * Computes Stafford variant 13 of 64bit mix function.\n     * http://zimbry.blogspot.com/2011/09/better-bit-mixing-improving-on.html\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int mix32(long z)",
    "returnType" : "int",
    "comment" : "\n     * Returns the 32 high bits of Stafford variant 4 mix64 function as int.\n     * http://zimbry.blogspot.com/2011/09/better-bit-mixing-improving-on.html\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long mixGamma(long z)",
    "returnType" : "long",
    "comment" : "\n     * Returns the gamma value to use for a new split instance.\n     * Uses the 64bit mix function from MurmurHash3.\n     * https://github.com/aappleby/smhasher/wiki/MurmurHash3\n     ",
    "links" : [ ]
  }, {
    "name" : "private long nextSeed()",
    "returnType" : "long",
    "comment" : "\n     * Adds gamma to seed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SplittableRandom split()",
    "returnType" : "SplittableRandom",
    "comment" : "\n     * Constructs and returns a new SplittableRandom instance that\n     * shares no mutable state with this instance. However, with very\n     * high probability, the set of values collectively generated by\n     * the two objects has the same statistical properties as if the\n     * same quantity of values were generated by a single thread using\n     * a single SplittableRandom object.  Either or both of the two\n     * objects may be further split using the {@code split()} method,\n     * and the same expected statistical properties apply to the\n     * entire set of generators constructed by such recursive\n     * splitting.\n     *\n     * @return the new SplittableRandom instance\n     ",
    "links" : [ ]
  }, {
    "name" : "public SplittableRandom split(SplittableGenerator source)",
    "returnType" : "SplittableRandom",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @since 17\n     ",
    "links" : [ ]
  }, {
    "name" : "public int nextInt()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long nextLong()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void nextBytes(byte[] bytes)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @since 10\n     ",
    "links" : [ ]
  }, {
    "name" : "public Stream<SplittableGenerator> splits()",
    "returnType" : "Stream<SplittableGenerator>",
    "comment" : "\n     * {@inheritDoc}\n     * @implSpec {@inheritDoc}\n     * @since 17\n     ",
    "links" : [ ]
  }, {
    "name" : "public Stream<SplittableGenerator> splits(long streamSize)",
    "returnType" : "Stream<SplittableGenerator>",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @implSpec {@inheritDoc}\n     * @since 17\n     ",
    "links" : [ ]
  }, {
    "name" : "public Stream<SplittableGenerator> splits(SplittableGenerator source)",
    "returnType" : "Stream<SplittableGenerator>",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @implSpec {@inheritDoc}\n     * @since 17\n     ",
    "links" : [ ]
  }, {
    "name" : "public Stream<SplittableGenerator> splits(long streamSize, SplittableGenerator source)",
    "returnType" : "Stream<SplittableGenerator>",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @implSpec {@inheritDoc}\n     * @since 17\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints(long streamSize)",
    "returnType" : "IntStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number\n     * of pseudorandom {@code int} values from this generator and/or\n     * one split from it.\n     *\n     * @param streamSize the number of values to generate\n     * @return a stream of pseudorandom {@code int} values\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints()",
    "returnType" : "IntStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code int}\n     * values from this generator and/or one split from it.\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * ints(Long.MAX_VALUE)}.\n     *\n     * @return a stream of pseudorandom {@code int} values\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",
    "returnType" : "IntStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number\n     * of pseudorandom {@code int} values from this generator and/or one split\n     * from it; each value conforms to the given origin (inclusive) and bound\n     * (exclusive).\n     *\n     * @param streamSize the number of values to generate\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code int} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero, or {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints(int randomNumberOrigin, int randomNumberBound)",
    "returnType" : "IntStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code\n     * int} values from this generator and/or one split from it; each value\n     * conforms to the given origin (inclusive) and bound (exclusive).\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * ints(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n     *\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code int} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongStream longs(long streamSize)",
    "returnType" : "LongStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number\n     * of pseudorandom {@code long} values from this generator and/or\n     * one split from it.\n     *\n     * @param streamSize the number of values to generate\n     * @return a stream of pseudorandom {@code long} values\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongStream longs()",
    "returnType" : "LongStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code\n     * long} values from this generator and/or one split from it.\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * longs(Long.MAX_VALUE)}.\n     *\n     * @return a stream of pseudorandom {@code long} values\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound)",
    "returnType" : "LongStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number of\n     * pseudorandom {@code long} values from this generator and/or one split\n     * from it; each value conforms to the given origin (inclusive) and bound\n     * (exclusive).\n     *\n     * @param streamSize the number of values to generate\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code long} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero, or {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongStream longs(long randomNumberOrigin, long randomNumberBound)",
    "returnType" : "LongStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code\n     * long} values from this generator and/or one split from it; each value\n     * conforms to the given origin (inclusive) and bound (exclusive).\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n     *\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code long} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     ",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream doubles(long streamSize)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number of\n     * pseudorandom {@code double} values from this generator and/or one split\n     * from it; each value is between zero (inclusive) and one (exclusive).\n     *\n     * @param streamSize the number of values to generate\n     * @return a stream of {@code double} values\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero\n     ",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream doubles()",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code\n     * double} values from this generator and/or one split from it; each value\n     * is between zero (inclusive) and one (exclusive).\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * doubles(Long.MAX_VALUE)}.\n     *\n     * @return a stream of pseudorandom {@code double} values\n     ",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number of\n     * pseudorandom {@code double} values from this generator and/or one split\n     * from it; each value conforms to the given origin (inclusive) and bound\n     * (exclusive).\n     *\n     * @param streamSize the number of values to generate\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code double} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero, or {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     ",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code\n     * double} values from this generator and/or one split from it; each value\n     * conforms to the given origin (inclusive) and bound (exclusive).\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * doubles(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n     *\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code double} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static long mix64(long z)", "private static int mix32(long z)", "private static long mixGamma(long z)", "private long nextSeed()", "public SplittableRandom split()", "public SplittableRandom split(SplittableGenerator source)", "public int nextInt()", "public long nextLong()", "public void nextBytes(byte[] bytes)", "public Stream<SplittableGenerator> splits()", "public Stream<SplittableGenerator> splits(long streamSize)", "public Stream<SplittableGenerator> splits(SplittableGenerator source)", "public Stream<SplittableGenerator> splits(long streamSize, SplittableGenerator source)", "public IntStream ints(long streamSize)", "public IntStream ints()", "public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound)", "public IntStream ints(int randomNumberOrigin, int randomNumberBound)", "public LongStream longs(long streamSize)", "public LongStream longs()", "public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound)", "public LongStream longs(long randomNumberOrigin, long randomNumberBound)", "public DoubleStream doubles(long streamSize)", "public DoubleStream doubles()", "public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)", "public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound)" ],
  "variableNames" : [ "GOLDEN_GAMMA", "seed", "gamma", "proxy", "defaultGen" ]
}