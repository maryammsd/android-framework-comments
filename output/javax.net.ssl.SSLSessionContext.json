{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SSLSessionContext.java",
  "packageName" : "javax.net.ssl",
  "className" : "SSLSessionContext",
  "comment" : "\n * A <code>SSLSessionContext</code> represents a set of\n * <code>SSLSession</code>s associated with a single entity. For example,\n * it could be associated with a server or client who participates in many\n * sessions concurrently.\n * <p>\n * Not all environments will contain session contexts.\n * <p>\n * There are <code>SSLSessionContext</code> parameters that affect how\n * sessions are stored:\n * <UL>\n *      <LI>Sessions can be set to expire after a specified\n *      time limit.\n *      <LI>The number of sessions that can be stored in context\n *      can be limited.\n * </UL>\n * A session can be retrieved based on its session id, and all session id's\n * in a <code>SSLSessionContext</code> can be listed.\n *\n * @see SSLSession\n *\n * @since 1.4\n * @author Nathan Abramson\n * @author David Brownell\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public SSLSession getSession(byte[] sessionId)",
    "returnType" : "SSLSession",
    "comment" : "\n     * Returns the <code>SSLSession</code> bound to the specified session id.\n     *\n     * @param sessionId the Session identifier\n     * @return the <code>SSLSession</code> or null if\n     * the specified session id does not refer to a valid SSLSession.\n     *\n     * @throws NullPointerException if <code>sessionId</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<byte[]> getIds()",
    "returnType" : "Enumeration<byte[]>",
    "comment" : "\n     * Returns an Enumeration of all session id's grouped under this\n     * <code>SSLSessionContext</code>.\n     *\n     * @return an enumeration of all the Session id's\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSessionTimeout(int seconds) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Sets the timeout limit for <code>SSLSession</code> objects grouped\n     * under this <code>SSLSessionContext</code>.\n     * <p>\n     * If the timeout limit is set to 't' seconds, a session exceeds the\n     * timeout limit 't' seconds after its creation time.\n     * When the timeout limit is exceeded for a session, the\n     * <code>SSLSession</code> object is invalidated and future connections\n     * cannot resume or rejoin the session.\n     * A check for sessions exceeding the timeout is made immediately whenever\n     * the timeout limit is changed for this <code>SSLSessionContext</code>.\n     *\n     * @apiNote Note that the JDK Implementation uses default values for both\n     *          the session cache size and timeout.  See\n     *          {@code getSessionCacheSize} and {@code getSessionTimeout} for\n     *          more information.  Applications should consider their\n     *          performance requirements and override the defaults if necessary.\n     *\n     * @param seconds the new session timeout limit in seconds; zero means\n     *        there is no limit.\n     *\n     * @throws IllegalArgumentException if the timeout specified is {@code < 0}.\n     *\n     * @see #getSessionTimeout\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSessionTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Returns the timeout limit of <code>SSLSession</code> objects grouped\n     * under this <code>SSLSessionContext</code>.\n     * <p>\n     * If the timeout limit is set to 't' seconds, a session exceeds the\n     * timeout limit 't' seconds after its creation time.\n     * When the timeout limit is exceeded for a session, the\n     * <code>SSLSession</code> object is invalidated and future connections\n     * cannot resume or rejoin the session.\n     * A check for sessions exceeding the timeout limit is made immediately\n     * whenever the timeout limit is changed for this\n     * <code>SSLSessionContext</code>.\n     *\n     * @implNote The JDK implementation returns the session timeout as set by\n     *           the {@code setSessionTimeout} method, or if not set, a default\n     *           value of 86400 seconds (24 hours).\n     *\n     * @return the session timeout limit in seconds; zero means there is no\n     *         limit.\n     *\n     * @see #setSessionTimeout\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSessionCacheSize(int size) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Sets the size of the cache used for storing <code>SSLSession</code>\n     * objects grouped under this <code>SSLSessionContext</code>.\n     *\n     * @apiNote Note that the JDK Implementation uses default values for both\n     *          the session cache size and timeout.  See\n     *          {@code getSessionCacheSize} and {@code getSessionTimeout} for\n     *          more information.  Applications should consider their\n     *          performance requirements and override the defaults if necessary.\n     *\n     * @param size the new session cache size limit; zero means there is no\n     *        limit.\n     *\n     * @throws IllegalArgumentException if the specified size is {@code < 0}.\n     *\n     * @see #getSessionCacheSize\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSessionCacheSize()",
    "returnType" : "int",
    "comment" : "\n     * Returns the size of the cache used for storing <code>SSLSession</code>\n     * objects grouped under this <code>SSLSessionContext</code>.\n     *\n     * @implNote The JDK implementation returns the cache size as set by\n     *           the {@code setSessionCacheSize} method, or if not set, the\n     *           value of the {@code javax.net.ssl.sessionCacheSize}\n     *           system property.  If neither is set, it returns a default\n     *           value of 20480.\n     *\n     * @return size of the session cache; zero means there is no size limit.\n     *\n     * @see #setSessionCacheSize\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SSLSession getSession(byte[] sessionId)", "public Enumeration<byte[]> getIds()", "public void setSessionTimeout(int seconds) throws IllegalArgumentException", "public int getSessionTimeout()", "public void setSessionCacheSize(int size) throws IllegalArgumentException", "public int getSessionCacheSize()" ],
  "variableNames" : [ ]
}