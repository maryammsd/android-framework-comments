{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/IPackageManagerNative.java",
  "packageName" : "android.content.pm",
  "className" : "Default",
  "comment" : " Default implementation for IPackageManagerNative. ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public java.lang.String[] getNamesForUids(int[] uids) throws android.os.RemoteException",
    "returnType" : "java.lang.String[]",
    "comment" : "\n     * Returns a set of names for the given UIDs.\n     * IMPORTANT: Unlike the Java version of this API, unknown UIDs are\n     * not represented by 'null's. Instead, they are represented by empty\n     * strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPackageUid(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Return the UID associated with the given package name.\n     * Note that the same package will have different UIDs under different UserHandle on\n     * the same device.\n     * @param packageName The full name (i.e. com.google.apps.contacts) of the desired package.\n     * @param flags Additional option flags to modify the data returned.\n     * @param userId The user handle identifier to look up the package under.\n     * @return Returns an integer UID who owns the given package name, or -1 if no such package is\n     *            available to the caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String getInstallerForPackage(java.lang.String packageName) throws android.os.RemoteException",
    "returnType" : "java.lang.String",
    "comment" : "\n     * Returns the name of the installer (a package) which installed the named\n     * package. Preloaded packages return the string \"preload\". Sideloaded packages\n     * return an empty string. Unknown or unknowable are returned as empty strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getVersionCodeForPackage(java.lang.String packageName) throws android.os.RemoteException",
    "returnType" : "long",
    "comment" : "\n     * Returns the version code of the named package.\n     * Unknown or unknowable versions are returned as 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[] packageNames) throws android.os.RemoteException",
    "returnType" : "boolean[]",
    "comment" : "\n     * Return if each app, identified by its package name allows its audio to be recorded.\n     * Unknown packages are mapped to false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLocationFlags(java.lang.String packageName) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Returns a set of bitflags about package location.\n     * LOCATION_SYSTEM: getApplicationInfo(packageName).isSystemApp()\n     * LOCATION_VENDOR: getApplicationInfo(packageName).isVendor()\n     * LOCATION_PRODUCT: getApplicationInfo(packageName).isProduct()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTargetSdkVersionForPackage(java.lang.String packageName) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Returns the target SDK version for the given package.\n     * Unknown packages will cause the call to fail. The caller must check the\n     * returned Status before using the result of this function.\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String getModuleMetadataPackageName() throws android.os.RemoteException",
    "returnType" : "java.lang.String",
    "comment" : "\n     * Returns the name of module metadata package, or empty string if device doesn't have such\n     * package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSha256SigningCertificate(java.lang.String packageName, byte[] certificate) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the package has the SHA 256 version of the signing certificate.\n     * @see PackageManager#hasSigningCertificate(String, byte[], int), where type\n     * has been set to {@link PackageManager#CERT_INPUT_SHA256}.\n     ",
    "links" : [ "android.content.pm.PackageManager#CERT_INPUT_SHA256" ]
  }, {
    "name" : "public boolean isPackageDebuggable(java.lang.String packageName) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the debug flag for the given package.\n     * Unknown packages will cause the call to fail.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSystemFeature(java.lang.String featureName, int version) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the given feature name and version is one of the available\n     * features as returned by {@link PackageManager#getSystemAvailableFeatures()}. Since\n     * features are defined to always be backwards compatible, this returns true\n     * if the available feature version is greater than or equal to the\n     * requested version.\n     ",
    "links" : [ "android.content.pm.PackageManager#getSystemAvailableFeatures()" ]
  }, {
    "name" : "public void registerStagedApexObserver(android.content.pm.IStagedApexObserver observer) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Register a observer for change in set of staged APEX ready for installation ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterStagedApexObserver(android.content.pm.IStagedApexObserver observer) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Unregister an existing staged apex observer.\n     * This does nothing if this observer was not already registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String[] getStagedApexModuleNames() throws android.os.RemoteException",
    "returnType" : "java.lang.String[]",
    "comment" : " Get APEX module names of all APEX that are staged ready for installation ",
    "links" : [ ]
  }, {
    "name" : "public android.content.pm.StagedApexInfo getStagedApexInfo(java.lang.String moduleName) throws android.os.RemoteException",
    "returnType" : "android.content.pm.StagedApexInfo",
    "comment" : "\n     * Get information of APEX which is staged ready for installation.\n     * Returns null if no such APEX is found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public java.lang.String[] getNamesForUids(int[] uids) throws android.os.RemoteException", "public int getPackageUid(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException", "public java.lang.String getInstallerForPackage(java.lang.String packageName) throws android.os.RemoteException", "public long getVersionCodeForPackage(java.lang.String packageName) throws android.os.RemoteException", "public boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[] packageNames) throws android.os.RemoteException", "public int getLocationFlags(java.lang.String packageName) throws android.os.RemoteException", "public int getTargetSdkVersionForPackage(java.lang.String packageName) throws android.os.RemoteException", "public java.lang.String getModuleMetadataPackageName() throws android.os.RemoteException", "public boolean hasSha256SigningCertificate(java.lang.String packageName, byte[] certificate) throws android.os.RemoteException", "public boolean isPackageDebuggable(java.lang.String packageName) throws android.os.RemoteException", "public boolean hasSystemFeature(java.lang.String featureName, int version) throws android.os.RemoteException", "public void registerStagedApexObserver(android.content.pm.IStagedApexObserver observer) throws android.os.RemoteException", "public void unregisterStagedApexObserver(android.content.pm.IStagedApexObserver observer) throws android.os.RemoteException", "public java.lang.String[] getStagedApexModuleNames() throws android.os.RemoteException", "public android.content.pm.StagedApexInfo getStagedApexInfo(java.lang.String moduleName) throws android.os.RemoteException", "public android.os.IBinder asBinder()" ],
  "variableNames" : [ ]
}