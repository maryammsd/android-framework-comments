{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/constant/DynamicCallSiteDesc.java",
  "packageName" : "java.lang.constant",
  "className" : "DynamicCallSiteDesc",
  "comment" : "\n * A <a href=\"package-summary.html#nominal\">nominal descriptor</a> for an\n * {@code invokedynamic} call site.\n *\n * <p>Concrete subtypes of {@linkplain DynamicCallSiteDesc} should be immutable\n * and their behavior should not rely on object identity.\n *\n * @since 12\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "bootstrapMethod",
    "type" : "DirectMethodHandleDesc",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bootstrapArgs",
    "type" : "ConstantDesc[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "invocationName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "invocationType",
    "type" : "MethodTypeDesc",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DynamicCallSiteDesc of(DirectMethodHandleDesc bootstrapMethod, String invocationName, MethodTypeDesc invocationType, ConstantDesc... bootstrapArgs)",
    "returnType" : "DynamicCallSiteDesc",
    "comment" : "\n     * Creates a nominal descriptor for an {@code invokedynamic} call site.\n     *\n     * @param bootstrapMethod a {@link DirectMethodHandleDesc} describing the\n     *                        bootstrap method for the {@code invokedynamic}\n     * @param invocationName The unqualified name that would appear in the {@code NameAndType}\n     *                       operand of the {@code invokedynamic}\n     * @param invocationType a {@link MethodTypeDesc} describing the invocation\n     *                       type that would appear in the {@code NameAndType}\n     *                       operand of the {@code invokedynamic}\n     * @param bootstrapArgs {@link ConstantDesc}s describing the static arguments\n     *                      to the bootstrap, that would appear in the\n     *                      {@code BootstrapMethods} attribute\n     * @return the nominal descriptor\n     * @throws NullPointerException if any parameter or its contents are {@code null}\n     * @throws IllegalArgumentException if the invocation name has the incorrect\n     * format\n     * @jvms 4.2.2 Unqualified Names\n     ",
    "links" : [ "java.lang.constant.ConstantDesc", "java.lang.constant.MethodTypeDesc", "java.lang.constant.DirectMethodHandleDesc" ]
  }, {
    "name" : "public static DynamicCallSiteDesc of(DirectMethodHandleDesc bootstrapMethod, String invocationName, MethodTypeDesc invocationType)",
    "returnType" : "DynamicCallSiteDesc",
    "comment" : "\n     * Creates a nominal descriptor for an {@code invokedynamic} call site whose\n     * bootstrap method has no static arguments.\n     *\n     * @param bootstrapMethod The bootstrap method for the {@code invokedynamic}\n     * @param invocationName The invocationName that would appear in the\n     * {@code NameAndType} operand of the {@code invokedynamic}\n     * @param invocationType The invocation invocationType that would appear\n     * in the {@code NameAndType} operand of the {@code invokedynamic}\n     * @return the nominal descriptor\n     * @throws NullPointerException if any parameter is null\n     * @throws IllegalArgumentException if the invocation name has the incorrect\n     * format\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DynamicCallSiteDesc of(DirectMethodHandleDesc bootstrapMethod, MethodTypeDesc invocationType)",
    "returnType" : "DynamicCallSiteDesc",
    "comment" : "\n     * Creates a nominal descriptor for an {@code invokedynamic} call site whose\n     * bootstrap method has no static arguments and for which the name parameter\n     * is {@link ConstantDescs#DEFAULT_NAME}.\n     *\n     * @param bootstrapMethod a {@link DirectMethodHandleDesc} describing the\n     *                        bootstrap method for the {@code invokedynamic}\n     * @param invocationType a {@link MethodTypeDesc} describing the invocation\n     *                       type that would appear in the {@code NameAndType}\n     *                       operand of the {@code invokedynamic}\n     * @return the nominal descriptor\n     * @throws NullPointerException if any parameter is null\n     ",
    "links" : [ "java.lang.constant.MethodTypeDesc", "java.lang.constant.DirectMethodHandleDesc", "java.lang.constant.ConstantDescs#DEFAULT_NAME" ]
  }, {
    "name" : "public DynamicCallSiteDesc withArgs(ConstantDesc... bootstrapArgs)",
    "returnType" : "DynamicCallSiteDesc",
    "comment" : "\n     * Returns a nominal descriptor for an {@code invokedynamic} call site whose\n     * bootstrap method, name, and invocation type are the same as this one, but\n     * with the specified bootstrap arguments.\n     *\n     * @param bootstrapArgs {@link ConstantDesc}s describing the static arguments\n     *                      to the bootstrap, that would appear in the\n     *                      {@code BootstrapMethods} attribute\n     * @return the nominal descriptor\n     * @throws NullPointerException if the argument or its contents are {@code null}\n     ",
    "links" : [ "java.lang.constant.ConstantDesc" ]
  }, {
    "name" : "public DynamicCallSiteDesc withNameAndType(String invocationName, MethodTypeDesc invocationType)",
    "returnType" : "DynamicCallSiteDesc",
    "comment" : "\n     * Returns a nominal descriptor for an {@code invokedynamic} call site whose\n     * bootstrap and bootstrap arguments are the same as this one, but with the\n     * specified invocationName and invocation invocationType\n     *\n     * @param invocationName The unqualified name that would appear in the {@code NameAndType}\n     *                       operand of the {@code invokedynamic}\n     * @param invocationType a {@link MethodTypeDesc} describing the invocation\n     *                       type that would appear in the {@code NameAndType}\n     *                       operand of the {@code invokedynamic}\n     * @return the nominal descriptor\n     * @throws NullPointerException if any parameter is null\n     * @throws IllegalArgumentException if the invocation name has the incorrect\n     * format\n     * @jvms 4.2.2 Unqualified Names\n     ",
    "links" : [ "java.lang.constant.MethodTypeDesc" ]
  }, {
    "name" : "public String invocationName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the invocation name that would appear in the {@code NameAndType}\n     * operand of the {@code invokedynamic}.\n     *\n     * @return the invocation name\n     ",
    "links" : [ ]
  }, {
    "name" : "public MethodTypeDesc invocationType()",
    "returnType" : "MethodTypeDesc",
    "comment" : "\n     * Returns a {@link MethodTypeDesc} describing the invocation type that\n     * would appear in the {@code NameAndType} operand of the {@code invokedynamic}.\n     *\n     * @return the invocation type\n     ",
    "links" : [ "java.lang.constant.MethodTypeDesc" ]
  }, {
    "name" : "public MethodHandleDesc bootstrapMethod()",
    "returnType" : "MethodHandleDesc",
    "comment" : "\n     * Returns a {@link MethodHandleDesc} describing the bootstrap method for\n     * the {@code invokedynamic}.\n     *\n     * @return the bootstrap method for the {@code invokedynamic}\n     ",
    "links" : [ "java.lang.constant.MethodHandleDesc" ]
  }, {
    "name" : "public ConstantDesc[] bootstrapArgs()",
    "returnType" : "ConstantDesc[]",
    "comment" : "\n     * Returns {@link ConstantDesc}s describing the bootstrap arguments for the\n     * {@code invokedynamic}. The returned array is always non-null. A zero\n     * length array is returned if this {@linkplain DynamicCallSiteDesc} has no\n     * bootstrap arguments.\n     *\n     * @return the bootstrap arguments for the {@code invokedynamic}\n     ",
    "links" : [ "java.lang.constant.ConstantDesc" ]
  }, {
    "name" : "public CallSite resolveCallSiteDesc(MethodHandles.Lookup lookup) throws Throwable",
    "returnType" : "CallSite",
    "comment" : "\n     * Reflectively invokes the bootstrap method with the specified arguments,\n     * and return the resulting {@link CallSite}\n     *\n     * @param lookup The {@link MethodHandles.Lookup} used to resolve class names\n     * @return the {@link CallSite}\n     * @throws Throwable if any exception is thrown by the bootstrap method\n     ",
    "links" : [ "MethodHandles.Lookup", "java.lang.invoke.CallSite" ]
  }, {
    "name" : "public final boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object with this descriptor for equality.  Returns\n     * {@code true} if and only if the specified object is also a\n     * {@linkplain DynamicCallSiteDesc}, and both descriptors have equal\n     * bootstrap methods, bootstrap argument lists, invocation name, and\n     * invocation type.\n     *\n     * @param o the {@code DynamicCallSiteDesc} to compare to this\n     *       {@code DynamicCallSiteDesc}\n     * @return {@code true} if the specified {@code DynamicCallSiteDesc}\n     *      is equal to this {@code DynamicCallSiteDesc}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a compact textual description of this call site description,\n     * including the bootstrap method, the invocation name and type, and\n     * the static bootstrap arguments.\n     *\n     * @return A compact textual description of this call site descriptor\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static DynamicCallSiteDesc of(DirectMethodHandleDesc bootstrapMethod, String invocationName, MethodTypeDesc invocationType, ConstantDesc... bootstrapArgs)", "public static DynamicCallSiteDesc of(DirectMethodHandleDesc bootstrapMethod, String invocationName, MethodTypeDesc invocationType)", "public static DynamicCallSiteDesc of(DirectMethodHandleDesc bootstrapMethod, MethodTypeDesc invocationType)", "public DynamicCallSiteDesc withArgs(ConstantDesc... bootstrapArgs)", "public DynamicCallSiteDesc withNameAndType(String invocationName, MethodTypeDesc invocationType)", "public String invocationName()", "public MethodTypeDesc invocationType()", "public MethodHandleDesc bootstrapMethod()", "public ConstantDesc[] bootstrapArgs()", "public CallSite resolveCallSiteDesc(MethodHandles.Lookup lookup) throws Throwable", "public final boolean equals(Object o)", "public final int hashCode()", "public String toString()" ],
  "variableNames" : [ "bootstrapMethod", "bootstrapArgs", "invocationName", "invocationType" ]
}