{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/PushbackInputStream.java",
  "packageName" : "java.io",
  "className" : "PushbackInputStream",
  "comment" : "\n * A <code>PushbackInputStream</code> adds\n * functionality to another input stream, namely\n * the  ability to \"push back\" or \"unread\" bytes,\n * by storing pushed-back bytes in an internal buffer.\n * This is useful in situations where\n * it is convenient for a fragment of code\n * to read an indefinite number of data bytes\n * that  are delimited by a particular byte\n * value; after reading the terminating byte,\n * the  code fragment can \"unread\" it, so that\n * the next read operation on the input stream\n * will reread the byte that was pushed back.\n * For example, bytes representing the  characters\n * constituting an identifier might be terminated\n * by a byte representing an  operator character;\n * a method whose job is to read just an identifier\n * can read until it  sees the operator and\n * then push the operator back to be re-read.\n *\n * @author  David Connelly\n * @author  Jonathan Payne\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : "\n     * The pushback buffer.\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : "\n     * The position within the pushback buffer from which the next byte will\n     * be read.  When the buffer is empty, <code>pos</code> is equal to\n     * <code>buf.length</code>; when the buffer is full, <code>pos</code> is\n     * equal to zero.\n     *\n     * @since   1.1\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Check to make sure that this stream has not been closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads the next byte of data from this input stream. The value\n     * byte is returned as an <code>int</code> in the range\n     * <code>0</code> to <code>255</code>. If no byte is available\n     * because the end of the stream has been reached, the value\n     * <code>-1</code> is returned. This method blocks until input data\n     * is available, the end of the stream is detected, or an exception\n     * is thrown.\n     *\n     * <p> This method returns the most recently pushed-back byte, if there is\n     * one, and otherwise calls the <code>read</code> method of its underlying\n     * input stream and returns whatever value that method returns.\n     *\n     * @return     the next byte of data, or <code>-1</code> if the end of the\n     *             stream has been reached.\n     * @exception  IOException  if this input stream has been closed by\n     *             invoking its {@link #close()} method,\n     *             or an I/O error occurs.\n     * @see        java.io.InputStream#read()\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to <code>len</code> bytes of data from this input stream into\n     * an array of bytes.  This method first reads any pushed-back bytes; after\n     * that, if fewer than <code>len</code> bytes have been read then it\n     * reads from the underlying input stream. If <code>len</code> is not zero, the method\n     * blocks until at least 1 byte of input is available; otherwise, no\n     * bytes are read and <code>0</code> is returned.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in the destination array <code>b</code>\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1</code> if there is no more data because the end of\n     *             the stream has been reached.\n     * @exception  NullPointerException If <code>b</code> is <code>null</code>.\n     * @exception  IndexOutOfBoundsException If <code>off</code> is negative,\n     * <code>len</code> is negative, or <code>len</code> is greater than\n     * <code>b.length - off</code>\n     * @exception  IOException  if this input stream has been closed by\n     *             invoking its {@link #close()} method,\n     *             or an I/O error occurs.\n     * @see        java.io.InputStream#read(byte[], int, int)\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public void unread(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Pushes back a byte by copying it to the front of the pushback buffer.\n     * After this method returns, the next byte to be read will have the value\n     * <code>(byte)b</code>.\n     *\n     * @param      b   the <code>int</code> value whose low-order\n     *                  byte is to be pushed back.\n     * @exception IOException If there is not enough room in the pushback\n     *            buffer for the byte, or this input stream has been closed by\n     *            invoking its {@link #close()} method.\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public void unread(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Pushes back a portion of an array of bytes by copying it to the front\n     * of the pushback buffer.  After this method returns, the next byte to be\n     * read will have the value <code>b[off]</code>, the byte after that will\n     * have the value <code>b[off+1]</code>, and so forth.\n     *\n     * @param b the byte array to push back.\n     * @param off the start offset of the data.\n     * @param len the number of bytes to push back.\n     * @exception IOException If there is not enough room in the pushback\n     *            buffer for the specified number of bytes,\n     *            or this input stream has been closed by\n     *            invoking its {@link #close()} method.\n     * @since     1.1\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public void unread(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Pushes back an array of bytes by copying it to the front of the\n     * pushback buffer.  After this method returns, the next byte to be read\n     * will have the value <code>b[0]</code>, the byte after that will have the\n     * value <code>b[1]</code>, and so forth.\n     *\n     * @param b the byte array to push back\n     * @exception IOException If there is not enough room in the pushback\n     *            buffer for the specified number of bytes,\n     *            or this input stream has been closed by\n     *            invoking its {@link #close()} method.\n     * @since     1.1\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the number of bytes that can be read (or\n     * skipped over) from this input stream without blocking by the next\n     * invocation of a method for this input stream. The next invocation might be\n     * the same thread or another thread.  A single read or skip of this\n     * many bytes will not block, but may read or skip fewer bytes.\n     *\n     * <p> The method returns the sum of the number of bytes that have been\n     * pushed back and the value returned by {@link\n     * java.io.FilterInputStream#available available}.\n     *\n     * @return     the number of bytes that can be read (or skipped over) from\n     *             the input stream without blocking.\n     * @exception  IOException  if this input stream has been closed by\n     *             invoking its {@link #close()} method,\n     *             or an I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     * @see        java.io.InputStream#available()\n     ",
    "links" : [ "java.io.FilterInputStream#available", "#close()" ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips over and discards <code>n</code> bytes of data from this\n     * input stream. The <code>skip</code> method may, for a variety of\n     * reasons, end up skipping over some smaller number of bytes,\n     * possibly zero.  If <code>n</code> is negative, no bytes are skipped.\n     *\n     * <p> The <code>skip</code> method of <code>PushbackInputStream</code>\n     * first skips over the bytes in the pushback buffer, if any.  It then\n     * calls the <code>skip</code> method of the underlying input stream if\n     * more bytes need to be skipped.  The actual number of bytes skipped\n     * is returned.\n     *\n     * @param      n  {@inheritDoc}\n     * @return     {@inheritDoc}\n     * @throws     IOException  if the stream has been closed by\n     *             invoking its {@link #close()} method,\n     *             {@code in.skip(n)} throws an IOException,\n     *             or an I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     * @see        java.io.InputStream#skip(long n)\n     * @since      1.2\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this input stream supports the <code>mark</code> and\n     * <code>reset</code> methods, which it does not.\n     *\n     * @return   <code>false</code>, since this class does not support the\n     *           <code>mark</code> and <code>reset</code> methods.\n     * @see     java.io.InputStream#mark(int)\n     * @see     java.io.InputStream#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void mark(int readlimit)",
    "returnType" : "void",
    "comment" : "\n     * Marks the current position in this input stream.\n     *\n     * <p> The <code>mark</code> method of <code>PushbackInputStream</code>\n     * does nothing.\n     *\n     * @param   readlimit   the maximum limit of bytes that can be read before\n     *                      the mark position becomes invalid.\n     * @see     java.io.InputStream#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Repositions this stream to the position at the time the\n     * <code>mark</code> method was last called on this input stream.\n     *\n     * <p> The method <code>reset</code> for class\n     * <code>PushbackInputStream</code> does nothing except throw an\n     * <code>IOException</code>.\n     *\n     * @exception  IOException  if this method is invoked.\n     * @see     java.io.InputStream#mark(int)\n     * @see     java.io.IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this input stream and releases any system resources\n     * associated with the stream.\n     * Once the stream has been closed, further read(), unread(),\n     * available(), reset(), or skip() invocations will throw an IOException.\n     * Closing a previously closed stream has no effect.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureOpen() throws IOException", "public int read() throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public void unread(int b) throws IOException", "public void unread(byte[] b, int off, int len) throws IOException", "public void unread(byte[] b) throws IOException", "public int available() throws IOException", "public long skip(long n) throws IOException", "public boolean markSupported()", "public synchronized void mark(int readlimit)", "public synchronized void reset() throws IOException", "public synchronized void close() throws IOException" ],
  "variableNames" : [ "buf", "pos" ]
}