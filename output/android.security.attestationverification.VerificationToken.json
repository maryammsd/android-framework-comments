{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/attestationverification/VerificationToken.java",
  "packageName" : "android.security.attestationverification",
  "className" : "VerificationToken",
  "comment" : "\n * Token representing the result of an attestation verification, which can be passed to other parts\n * of the OS or other apps as proof of the verification.\n *\n * Tokens are only valid within the same UID (which means within a single app unless the deprecated\n * android:sharedUserId manifest value is used).\n *\n * @hide\n * @see Bundle#putParcelable(String, Parcelable)\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mAttestationProfile",
    "type" : "AttestationProfile",
    "comment" : "\n     * The attestation profile which was used to perform the verification.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLocalBindingType",
    "type" : "int",
    "comment" : "\n     * The local binding type of the local binding data used to perform the verification.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mRequirements",
    "type" : "Bundle",
    "comment" : "\n     * The requirements used to perform the verification.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mVerificationResult",
    "type" : "int",
    "comment" : "\n     * The result of the {@link AttestationVerificationManager#verifyAttestation(int, int, Bundle,\n     * byte[], Executor, BiConsumer)} call. This value is kept hidden to prevent token holders from\n     * accidentally reading this value without calling {@code verifyToken}. Do <b>not</b> use this\n     * value directly; call {@link AttestationVerificationManager#verifyToken(VerificationToken,\n     * Duration)} to verify a valid token and it will return this value.\n     *\n     * If the token is valid, this value is returned directly by {#verifyToken}.\n     *\n     * @hide\n     ",
    "links" : [ "android.security.attestationverification.AttestationVerificationManager#verifyToken(VerificationToken", "android.security.attestationverification.AttestationVerificationManager#verifyAttestation(int" ]
  }, {
    "name" : "mVerificationTime",
    "type" : "java.time.Instant",
    "comment" : "\n     * Time when the token was generated, set by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHmac",
    "type" : "byte[]",
    "comment" : "\n     * A Hash-based message authentication code used to verify the contents and authenticity of the\n     * rest of the token. The hash is created using a secret key known only to the system server.\n     * When verifying the token, the system re-hashes the token and verifies the generated HMAC is\n     * the same.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mUid",
    "type" : "int",
    "comment" : "\n     * The UID of the process which called {@code verifyAttestation} to create the token, as\n     * returned by {@link Binder#getCallingUid()}. Calls to {@code verifyToken} will fail if the UID\n     * of calling process does not match this value. This ensures that tokens cannot be shared\n     * between UIDs.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Binder#getCallingUid()" ]
  }, {
    "name" : "sParcellingForVerificationTime",
    "type" : "Parcelling<java.time.Instant>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<VerificationToken>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public AttestationProfile getAttestationProfile()",
    "returnType" : "AttestationProfile",
    "comment" : "\n     * The attestation profile which was used to perform the verification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLocalBindingType()",
    "returnType" : "int",
    "comment" : "\n     * The local binding type of the local binding data used to perform the verification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getRequirements()",
    "returnType" : "Bundle",
    "comment" : "\n     * The requirements used to perform the verification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVerificationResult()",
    "returnType" : "int",
    "comment" : "\n     * The result of the {@link AttestationVerificationManager#verifyAttestation(int, int, Bundle,\n     * byte[], Executor, BiConsumer)} call. This value is kept hidden to prevent token holders from\n     * accidentally reading this value without calling {@code verifyToken}. Do <b>not</b> use this\n     * value directly; call {@link AttestationVerificationManager#verifyToken(VerificationToken,\n     * Duration)} to verify a valid token and it will return this value.\n     *\n     * If the token is valid, this value is returned directly by {#verifyToken}.\n     *\n     * @hide\n     ",
    "links" : [ "android.security.attestationverification.AttestationVerificationManager#verifyToken(VerificationToken", "android.security.attestationverification.AttestationVerificationManager#verifyAttestation(int" ]
  }, {
    "name" : "public java.time.Instant getVerificationTime()",
    "returnType" : "java.time.Instant",
    "comment" : "\n     * Time when the token was generated, set by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getHmac()",
    "returnType" : "byte[]",
    "comment" : "\n     * A Hash-based message authentication code used to verify the contents and authenticity of the\n     * rest of the token. The hash is created using a secret key known only to the system server.\n     * When verifying the token, the system re-hashes the token and verifies the generated HMAC is\n     * the same.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUid()",
    "returnType" : "int",
    "comment" : "\n     * The UID of the process which called {@code verifyAttestation} to create the token, as\n     * returned by {@link Binder#getCallingUid()}. Calls to {@code verifyToken} will fail if the UID\n     * of calling process does not match this value. This ensures that tokens cannot be shared\n     * between UIDs.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Binder#getCallingUid()" ]
  }, {
    "name" : "public void writeToParcel(@NonNull android.os.Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public AttestationProfile getAttestationProfile()", "public int getLocalBindingType()", "public Bundle getRequirements()", "public int getVerificationResult()", "public java.time.Instant getVerificationTime()", "public byte[] getHmac()", "public int getUid()", "public void writeToParcel(@NonNull android.os.Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ],
  "variableNames" : [ "mAttestationProfile", "mLocalBindingType", "mRequirements", "mVerificationResult", "mVerificationTime", "mHmac", "mUid", "sParcellingForVerificationTime", "CREATOR" ]
}