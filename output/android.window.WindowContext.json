{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/WindowContext.java",
  "packageName" : "android.window",
  "className" : "WindowContext",
  "comment" : "\n * {@link WindowContext} is a context for non-activity windows such as\n * {@link android.view.WindowManager.LayoutParams#TYPE_APPLICATION_OVERLAY} windows or system\n * windows. Its resources and configuration are adjusted to the area of the display that will be\n * used when a new window is added via {@link android.view.WindowManager#addView}.\n *\n * @see Context#createWindowContext(int, Bundle)\n * @hide\n ",
  "links" : [ "android.view.WindowManager.LayoutParams#TYPE_APPLICATION_OVERLAY", "android.view.WindowManager#addView", "android.window.WindowContext" ],
  "variables" : [ {
    "name" : "mWindowManager",
    "type" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOptions",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacksController",
    "type" : "ComponentCallbacksController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mController",
    "type" : "WindowContextController",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void attachToDisplayArea()",
    "returnType" : "void",
    "comment" : "\n     * Attaches this {@link WindowContext} to the {@link com.android.server.wm.DisplayArea}\n     * specified by {@code mType}, {@link #getDisplayId() display ID} and {@code mOptions}\n     * to receive configuration changes.\n     ",
    "links" : [ "com.android.server.wm.DisplayArea", "#getDisplayId()", "android.window.WindowContext" ]
  }, {
    "name" : "public Object getSystemService(String name)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : " Used for test to invoke because we can't invoke finalize directly. ",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerComponentCallbacks(@NonNull ComponentCallbacks callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterComponentCallbacks(@NonNull ComponentCallbacks callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchConfigurationChanged(@NonNull Configuration newConfig)",
    "returnType" : "void",
    "comment" : " Dispatch {@link Configuration} to each {@link ComponentCallbacks}. ",
    "links" : [ "android.content.res.Configuration", "android.content.ComponentCallbacks" ]
  }, {
    "name" : "public int getWindowType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle getWindowContextOptions()",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void attachToDisplayArea()", "public Object getSystemService(String name)", "protected void finalize() throws Throwable", "public void release()", "public void destroy()", "public void registerComponentCallbacks(@NonNull ComponentCallbacks callback)", "public void unregisterComponentCallbacks(@NonNull ComponentCallbacks callback)", "public void dispatchConfigurationChanged(@NonNull Configuration newConfig)", "public int getWindowType()", "public Bundle getWindowContextOptions()" ],
  "variableNames" : [ "mWindowManager", "mType", "mOptions", "mCallbacksController", "mController" ]
}