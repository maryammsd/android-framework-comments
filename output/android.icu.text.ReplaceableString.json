{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/ReplaceableString.java",
  "packageName" : "android.icu.text",
  "className" : "ReplaceableString",
  "comment" : "\n * <code>ReplaceableString</code> is an adapter class that implements the\n * <code>Replaceable</code> API around an ordinary <code>StringBuffer</code>.\n *\n * <p><em>Note:</em> This class does not support attributes and is not\n * intended for general use.  Most clients will need to implement\n * {@link Replaceable} in their text representation class.\n *\n * @see Replaceable\n * @author Alan Liu\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "android.icu.text.Replaceable" ],
  "variables" : [ {
    "name" : "buf",
    "type" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the contents of this object as a <code>String</code>.\n     * @return string contents of this object\n     ",
    "links" : [ ]
  }, {
    "name" : "public String substring(int start, int limit)",
    "returnType" : "String",
    "comment" : "\n     * Return a substring of the given string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of characters contained in this object.\n     * <code>Replaceable</code> API.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char charAt(int offset)",
    "returnType" : "char",
    "comment" : "\n     * Return the character at the given position in this object.\n     * <code>Replaceable</code> API.\n     * @param offset offset into the contents, from 0 to\n     * <code>length()</code> - 1\n     ",
    "links" : [ ]
  }, {
    "name" : "public int char32At(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Return the 32-bit code point at the given 16-bit offset into\n     * the text.  This assumes the text is stored as 16-bit code units\n     * with surrogate pairs intermixed.  If the offset of a leading or\n     * trailing code unit of a surrogate pair is given, return the\n     * code point of the surrogate pair.\n     * @param offset an integer between 0 and <code>length()</code>-1\n     * inclusive\n     * @return 32-bit code point of text at given offset\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getChars(int srcStart, int srcLimit, char[] dst, int dstStart)",
    "returnType" : "void",
    "comment" : "\n     * Copies characters from this object into the destination\n     * character array.  The first character to be copied is at index\n     * <code>srcStart</code>; the last character to be copied is at\n     * index <code>srcLimit-1</code> (thus the total number of\n     * characters to be copied is <code>srcLimit-srcStart</code>). The\n     * characters are copied into the subarray of <code>dst</code>\n     * starting at index <code>dstStart</code> and ending at index\n     * <code>dstStart + (srcLimit-srcStart) - 1</code>.\n     *\n     * @param srcStart the beginning index to copy, inclusive; <code>0\n     * &lt;= start &lt;= limit</code>.\n     * @param srcLimit the ending index to copy, exclusive;\n     * <code>start &lt;= limit &lt;= length()</code>.\n     * @param dst the destination array.\n     * @param dstStart the start offset in the destination array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void replace(int start, int limit, String text)",
    "returnType" : "void",
    "comment" : "\n     * Replace zero or more characters with new characters.\n     * <code>Replaceable</code> API.\n     * @param start the beginning index, inclusive; <code>0 &lt;= start\n     * &lt;= limit</code>.\n     * @param limit the ending index, exclusive; <code>start &lt;= limit\n     * &lt;= length()</code>.\n     * @param text new text to replace characters <code>start</code> to\n     * <code>limit - 1</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void replace(int start, int limit, char[] chars, int charsStart, int charsLen)",
    "returnType" : "void",
    "comment" : "\n     * Replace a substring of this object with the given text.\n     * @param start the beginning index, inclusive; <code>0 &lt;= start\n     * &lt;= limit</code>.\n     * @param limit the ending index, exclusive; <code>start &lt;= limit\n     * &lt;= length()</code>.\n     * @param chars the text to replace characters <code>start</code>\n     * to <code>limit - 1</code>\n     * @param charsStart the beginning index into <code>chars</code>,\n     * inclusive; <code>0 &lt;= start &lt;= limit</code>.\n     * @param charsLen the number of characters of <code>chars</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copy(int start, int limit, int dest)",
    "returnType" : "void",
    "comment" : "\n     * Copy a substring of this object, retaining attribute (out-of-band)\n     * information.  This method is used to duplicate or reorder substrings.\n     * The destination index must not overlap the source range.\n     *\n     * @param start the beginning index, inclusive; <code>0 &lt;= start &lt;=\n     * limit</code>.\n     * @param limit the ending index, exclusive; <code>start &lt;= limit &lt;=\n     * length()</code>.\n     * @param dest the destination index.  The characters from\n     * <code>start..limit-1</code> will be copied to <code>dest</code>.\n     * Implementations of this method may assume that <code>dest &lt;= start ||\n     * dest &gt;= limit</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMetaData()",
    "returnType" : "boolean",
    "comment" : "\n     * Implements Replaceable\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String toString()", "public String substring(int start, int limit)", "public int length()", "public char charAt(int offset)", "public int char32At(int offset)", "public void getChars(int srcStart, int srcLimit, char[] dst, int dstStart)", "public void replace(int start, int limit, String text)", "public void replace(int start, int limit, char[] chars, int charsStart, int charsLen)", "public void copy(int start, int limit, int dest)", "public boolean hasMetaData()" ],
  "variableNames" : [ "buf" ]
}