{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/PackageInstaller.java",
  "packageName" : "android.content.pm",
  "className" : "Session",
  "comment" : "\n     * An installation that is being actively staged. For an install to succeed,\n     * all existing and new packages must have identical package names, version\n     * codes, and signing certificates.\n     * <p>\n     * A session may contain any number of split packages. If the application\n     * does not yet exist, this session must include a base package.\n     * <p>\n     * If an APK included in this session is already defined by the existing\n     * installation (for example, the same split name), the APK in this session\n     * will replace the existing APK.\n     * <p>\n     * In such a case that multiple packages need to be committed simultaneously,\n     * multiple sessions can be referenced by a single multi-package session.\n     * This session is created with no package name and calling\n     * {@link SessionParams#setMultiPackage()}. The individual session IDs can be\n     * added with {@link #addChildSessionId(int)} and commit of the multi-package\n     * session will result in all child sessions being committed atomically.\n     ",
  "links" : [ "#setMultiPackage()", "#addChildSessionId(int)" ],
  "variables" : [ {
    "name" : "mSession",
    "type" : "IPackageInstallerSession",
    "comment" : " {@hide} ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setProgress(float progress)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setStagingProgress(float progress)",
    "returnType" : "void",
    "comment" : "\n         * Set current progress of staging this session. Valid values are\n         * anywhere between 0 and 1.\n         * <p>\n         * Note that this progress may not directly correspond to the value\n         * reported by {@link SessionCallback#onProgressChanged(int, float)}, as\n         * the system may carve out a portion of the overall progress to\n         * represent its own internal installation work.\n         ",
    "links" : [ "#onProgressChanged(int" ]
  }, {
    "name" : "public void addProgress(float progress)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream openWrite(@NonNull String name, long offsetBytes, long lengthBytes) throws IOException",
    "returnType" : "OutputStream",
    "comment" : "\n         * Open a stream to write an APK file into the session.\n         * <p>\n         * The returned stream will start writing data at the requested offset\n         * in the underlying file, which can be used to resume a partially\n         * written file. If a valid file length is specified, the system will\n         * preallocate the underlying disk space to optimize placement on disk.\n         * It's strongly recommended to provide a valid file length when known.\n         * <p>\n         * You can write data into the returned stream, optionally call\n         * {@link #fsync(OutputStream)} as needed to ensure bytes have been\n         * persisted to disk, and then close when finished. All streams must be\n         * closed before calling {@link #commit(IntentSender)}.\n         *\n         * @param name arbitrary, unique name of your choosing to identify the\n         *            APK being written. You can open a file again for\n         *            additional writes (such as after a reboot) by using the\n         *            same name. This name is only meaningful within the context\n         *            of a single install session.\n         * @param offsetBytes offset into the file to begin writing at, or 0 to\n         *            start at the beginning of the file.\n         * @param lengthBytes total size of the file being written, used to\n         *            preallocate the underlying disk space, or -1 if unknown.\n         *            The system may clear various caches as needed to allocate\n         *            this space.\n         * @throws IOException if trouble opening the file for writing, such as\n         *             lack of disk space or unavailable media.\n         * @throws SecurityException if called after the session has been\n         *             sealed or abandoned\n         ",
    "links" : [ "#commit(IntentSender)", "#fsync(OutputStream)" ]
  }, {
    "name" : "public void write(@NonNull String name, long offsetBytes, long lengthBytes, @NonNull ParcelFileDescriptor fd) throws IOException",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void stageViaHardLink(String target) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Populate an APK file by creating a hard link to avoid the need to copy.\n         * <p>\n         * Note this API is used by RollbackManager only and can only be called from system_server.\n         * {@code target} will be relabeled if link is created successfully. RollbackManager has\n         * to delete {@code target} when the session is committed successfully to avoid SELinux\n         * label conflicts.\n         * <p>\n         * Note No more bytes should be written to the file once the link is created successfully.\n         *\n         * @param target the path of the link target\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void fsync(@NonNull OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Ensure that any outstanding data for given stream has been committed\n         * to disk. This is only valid for streams returned from\n         * {@link #openWrite(String, long, long)}.\n         ",
    "links" : [ "#openWrite(String" ]
  }, {
    "name" : "public String[] getNames() throws IOException",
    "returnType" : "String[]",
    "comment" : "\n         * Return all APK names contained in this session.\n         * <p>\n         * This returns all names which have been previously written through\n         * {@link #openWrite(String, long, long)} as part of this session.\n         *\n         * @throws SecurityException if called after the session has been abandoned.\n         ",
    "links" : [ "#openWrite(String" ]
  }, {
    "name" : "public InputStream openRead(@NonNull String name) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n         * Open a stream to read an APK file from the session.\n         * <p>\n         * This is only valid for names which have been previously written\n         * through {@link #openWrite(String, long, long)} as part of this\n         * session. For example, this stream may be used to calculate a\n         * {@link MessageDigest} of a written APK before committing.\n         *\n         * @throws SecurityException if called after the session has been\n         *             committed or abandoned.\n         ",
    "links" : [ "#openWrite(String", "java.security.MessageDigest" ]
  }, {
    "name" : "public void removeSplit(@NonNull String splitName) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Removes a split.\n         * <p>\n         * Split removals occur prior to adding new APKs. If upgrading a feature\n         * split, it is not expected nor desirable to remove the split prior to\n         * upgrading.\n         * <p>\n         * When split removal is bundled with new APKs, the packageName must be\n         * identical.\n         ",
    "links" : [ ]
  }, {
    "name" : "public DataLoaderParams getDataLoaderParams()",
    "returnType" : "DataLoaderParams",
    "comment" : "\n         * @return data loader params or null if the session is not using one.\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addFile(@FileLocation int location, @NonNull String name, long lengthBytes, @NonNull byte[] metadata, @Nullable byte[] signature)",
    "returnType" : "void",
    "comment" : "\n         * Adds a file to session. On commit this file will be pulled from DataLoader {@code\n         * android.service.dataloader.DataLoaderService.DataLoader}.\n         *\n         * @param location target location for the file. Possible values:\n         *            {@link #LOCATION_DATA_APP},\n         *            {@link #LOCATION_MEDIA_OBB},\n         *            {@link #LOCATION_MEDIA_DATA}.\n         * @param name arbitrary, unique name of your choosing to identify the\n         *            APK being written. You can open a file again for\n         *            additional writes (such as after a reboot) by using the\n         *            same name. This name is only meaningful within the context\n         *            of a single install session.\n         * @param lengthBytes total size of the file being written.\n         *            The system may clear various caches as needed to allocate\n         *            this space.\n         * @param metadata additional info use by DataLoader to pull data for the file.\n         * @param signature additional file signature, e.g.\n         *                  <a href=\"https://source.android.com/security/apksigning/v4.html\">APK Signature Scheme v4</a>\n         * @throws SecurityException if called after the session has been\n         *             sealed or abandoned\n         * @throws IllegalStateException if called for non-streaming session\n         *\n         * @see android.content.pm.InstallationFile\n         *\n         * {@hide}\n         ",
    "links" : [ "#LOCATION_MEDIA_OBB", "#LOCATION_MEDIA_DATA", "#LOCATION_DATA_APP" ]
  }, {
    "name" : "public void removeFile(@FileLocation int location, @NonNull String name)",
    "returnType" : "void",
    "comment" : "\n         * Removes a file.\n         *\n         * @param location target location for the file. Possible values:\n         *            {@link #LOCATION_DATA_APP},\n         *            {@link #LOCATION_MEDIA_OBB},\n         *            {@link #LOCATION_MEDIA_DATA}.\n         * @param name name of a file, e.g. split.\n         * @throws SecurityException if called after the session has been\n         *             sealed or abandoned\n         * @throws IllegalStateException if called for non-DataLoader session\n         * {@hide}\n         ",
    "links" : [ "#LOCATION_MEDIA_OBB", "#LOCATION_MEDIA_DATA", "#LOCATION_DATA_APP" ]
  }, {
    "name" : "public void setChecksums(@NonNull String name, @NonNull List<Checksum> checksums, @Nullable byte[] signature) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Sets installer-provided checksums for the APK file in session.\n         *\n         * @param name      previously written as part of this session.\n         *                  {@link #openWrite}\n         * @param checksums installer intends to make available via\n         *                  {@link PackageManager#requestChecksums} or {@link #requestChecksums}.\n         * @param signature DER PKCS#7 detached signature bytes over binary serialized checksums\n         *                  to enable integrity checking for the checksums or null for no integrity\n         *                  checking. {@link PackageManager#requestChecksums} will return\n         *                  the certificate used to create signature.\n         *                  Binary format for checksums:\n         *                  <pre>{@code DataOutputStream dos;\n         *                  dos.writeInt(checksum.getType());\n         *                  dos.writeInt(checksum.getValue().length);\n         *                  dos.write(checksum.getValue());}</pre>\n         *                  If using <b>openssl cms</b>, make sure to specify -binary -nosmimecap.\n         *                  @see <a href=\"https://www.openssl.org/docs/man1.0.2/man1/cms.html\">openssl cms</a>\n         * @throws SecurityException if called after the session has been\n         *                           committed or abandoned.\n         * @throws IllegalStateException if checksums for this file have already been added.\n         * @deprecated  do not use installer-provided checksums,\n         *              use platform-enforced checksums\n         *              e.g. {@link Checksum#TYPE_WHOLE_MERKLE_ROOT_4K_SHA256}\n         *              in {@link PackageManager#requestChecksums}.\n         ",
    "links" : [ "android.content.pm.Checksum#TYPE_WHOLE_MERKLE_ROOT_4K_SHA256", "android.content.pm.PackageManager#requestChecksums", "#openWrite", "#requestChecksums" ]
  }, {
    "name" : "private static List<byte[]> encodeCertificates(List<Certificate> certs) throws CertificateEncodingException",
    "returnType" : "List<byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestChecksums(@NonNull String name, @Checksum.TypeMask int required, @NonNull List<Certificate> trustedInstallers, @NonNull @CallbackExecutor Executor executor, @NonNull PackageManager.OnChecksumsReadyListener onChecksumsReadyListener) throws CertificateEncodingException, FileNotFoundException",
    "returnType" : "void",
    "comment" : "\n         * Requests checksums for the APK file in session.\n         * <p>\n         * A possible use case is replying to {@link Intent#ACTION_PACKAGE_NEEDS_VERIFICATION}\n         * broadcast.\n         * The checksums will be returned asynchronously via onChecksumsReadyListener.\n         * <p>\n         * By default returns all readily available checksums:\n         * <ul>\n         * <li>enforced by platform,\n         * <li>enforced by the installer.\n         * </ul>\n         * If the caller needs a specific checksum type, they can specify it as required.\n         * <p>\n         * <b>Caution: Android can not verify installer-provided checksums. Make sure you specify\n         * trusted installers.</b>\n         * <p>\n         * @param name      previously written as part of this session.\n         *                  {@link #openWrite}\n         * @param required to explicitly request the checksum types. Will incur significant\n         *                 CPU/memory/disk usage.\n         * @param trustedInstallers for checksums enforced by installer, which installers are to be\n         *                          trusted.\n         *                          {@link PackageManager#TRUST_ALL} will return checksums from any\n         *                          installer,\n         *                          {@link PackageManager#TRUST_NONE} disables optimized\n         *                          installer-enforced checksums, otherwise the list has to be\n         *                          a non-empty list of certificates.\n         * @param executor the {@link Executor} on which to invoke the callback\n         * @param onChecksumsReadyListener called once when the results are available.\n         * @throws CertificateEncodingException if an encoding error occurs for trustedInstallers.\n         * @throws FileNotFoundException if the file does not exist.\n         * @throws IllegalArgumentException if the list of trusted installer certificates is empty.\n         ",
    "links" : [ "android.content.pm.PackageManager#TRUST_NONE", "#openWrite", "android.app.PendingIntent#ACTION_PACKAGE_NEEDS_VERIFICATION", "android.annotation.CallbackExecutor", "android.content.pm.PackageManager#TRUST_ALL" ]
  }, {
    "name" : "public void commit(@NonNull IntentSender statusReceiver)",
    "returnType" : "void",
    "comment" : "\n         * Attempt to commit everything staged in this session. This may require\n         * user intervention, and so it may not happen immediately. The final\n         * result of the commit will be reported through the given callback.\n         * <p>\n         * Once this method is called, the session is sealed and no additional mutations may be\n         * performed on the session. In case of device reboot or data loader transient failure\n         * before the session has been finalized, you may commit the session again.\n         * <p>\n         * If the installer is the device owner, the affiliated profile owner, or has received\n         * user pre-approval of this session, there will be no user intervention.\n         *\n         * @param statusReceiver Called when the state of the session changes. Intents\n         *                       sent to this receiver contain {@link #EXTRA_STATUS}. Refer to the\n         *                       individual status codes on how to handle them.\n         *\n         * @throws SecurityException if streams opened through\n         *             {@link #openWrite(String, long, long)} are still open.\n         * @throws IllegalArgumentException if the {@code statusReceiver} from an immutable\n         *             {@link android.app.PendingIntent} when caller has a target SDK of API\n         *             version 35 or above.\n         *\n         * @see android.app.admin.DevicePolicyManager\n         * @see #requestUserPreapproval\n         ",
    "links" : [ "#openWrite(String", "android.app.PendingIntent", "#EXTRA_STATUS" ]
  }, {
    "name" : "public void commitTransferred(@NonNull IntentSender statusReceiver)",
    "returnType" : "void",
    "comment" : "\n         * Attempt to commit a session that has been {@link #transfer(String) transferred}.\n         *\n         * <p>If the device reboots before the session has been finalized, you may commit the\n         * session again.\n         *\n         * <p>The caller of this method is responsible to ensure the safety of the session. As the\n         * session was created by another - usually less trusted - app, it is paramount that before\n         * committing <u>all</u> public and system {@link SessionInfo properties of the session}\n         * and <u>all</u> {@link #openRead(String) APKs} are verified by the caller. It might happen\n         * that new properties are added to the session with a new API revision. In this case the\n         * callers need to be updated.\n         *\n         * @param statusReceiver Called when the state of the session changes. Intents\n         *                       sent to this receiver contain {@link #EXTRA_STATUS}. Refer to the\n         *                       individual status codes on how to handle them.\n         * @throws IllegalArgumentException if the {@code statusReceiver} from an immutable\n         *             {@link android.app.PendingIntent} when caller has a target SDK of API\n         *             35 or above.\n         *\n         * @hide\n         ",
    "links" : [ "#openRead(String)", "#transfer(String)", "SessionInfo", "android.app.PendingIntent", "#EXTRA_STATUS" ]
  }, {
    "name" : "public void transfer(@NonNull String packageName) throws PackageManager.NameNotFoundException",
    "returnType" : "void",
    "comment" : "\n         * Transfer the session to a new owner.\n         * <p>\n         * Only sessions that update the installing app can be transferred.\n         * <p>\n         * After the transfer to a package with a different uid all method calls on the session\n         * will cause {@link SecurityException}s.\n         * <p>\n         * Once this method is called, the session is sealed and no additional mutations beside\n         * committing it may be performed on the session.\n         *\n         * @param packageName The package of the new owner. Needs to hold the INSTALL_PACKAGES\n         *                    permission.\n         *\n         * @throws PackageManager.NameNotFoundException if the new owner could not be found.\n         * @throws SecurityException if called after the session has been committed or abandoned.\n         * @throws IllegalStateException if streams opened through\n         *                                  {@link #openWrite(String, long, long) are still open.\n         * @throws IllegalArgumentException if {@code packageName} is invalid.\n         ",
    "links" : [ "#openWrite(String", "SecurityException" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n         * Release this session object. You can open the session again if it\n         * hasn't been finalized.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void abandon()",
    "returnType" : "void",
    "comment" : "\n         * Completely abandon this session, destroying all staged data and\n         * rendering it invalid. Abandoned sessions will be reported to\n         * {@link SessionCallback} listeners as failures. This is equivalent to\n         * {@link #abandonSession(int)}.\n         * <p>If the parent is abandoned, all children will also be abandoned. Any written data\n         * would be destroyed and the created {@link Session} information will be discarded.</p>\n         ",
    "links" : [ "#abandonSession(int)", "SessionCallback", "Session" ]
  }, {
    "name" : "public boolean isMultiPackage()",
    "returnType" : "boolean",
    "comment" : "\n         * @return {@code true} if this session will commit more than one package when it is\n         * committed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStaged()",
    "returnType" : "boolean",
    "comment" : "\n         * @return {@code true} if this session will be staged and applied at next reboot.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getInstallFlags()",
    "returnType" : "int",
    "comment" : "\n         * @return Session's {@link SessionParams#installFlags}.\n         * @hide\n         ",
    "links" : [ "#installFlags" ]
  }, {
    "name" : "public int getParentSessionId()",
    "returnType" : "int",
    "comment" : "\n         * @return the session ID of the multi-package session that this belongs to or\n         * {@link SessionInfo#INVALID_ID} if it does not belong to a multi-package session.\n         ",
    "links" : [ "#INVALID_ID" ]
  }, {
    "name" : "public int[] getChildSessionIds()",
    "returnType" : "int[]",
    "comment" : "\n         * @return the set of session IDs that will be committed atomically when this session is\n         * committed if this is a multi-package session or null if none exist.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addChildSessionId(int sessionId)",
    "returnType" : "void",
    "comment" : "\n         * Adds a session ID to the set of sessions that will be committed atomically\n         * when this session is committed.\n         *\n         * <p>If the parent is staged or has rollback enabled, all children must have\n         * the same properties.</p>\n         * <p>If the parent is abandoned, all children will also be abandoned.</p>\n         *\n         * @param sessionId the session ID to add to this multi-package session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void removeChildSessionId(int sessionId)",
    "returnType" : "void",
    "comment" : "\n         * Removes a session ID from the set of sessions that will be committed\n         * atomically when this session is committed.\n         *\n         * @param sessionId the session ID to remove from this multi-package session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getAppMetadata()",
    "returnType" : "PersistableBundle",
    "comment" : "\n         * @return A PersistableBundle containing the app metadata set with\n         * {@link Session#setAppMetadata(PersistableBundle)}. In the case where this data does not\n         * exist, an empty PersistableBundle is returned.\n         ",
    "links" : [ "#setAppMetadata(PersistableBundle)" ]
  }, {
    "name" : "private OutputStream openWriteAppMetadata() throws IOException",
    "returnType" : "OutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAppMetadata(@Nullable PersistableBundle data) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Optionally set the app metadata. The size of this data cannot exceed the maximum allowed.\n         * Any existing data from the previous install will not be retained even if no data is set\n         * for the current install session. Setting data to null or an empty PersistableBundle will\n         * remove any metadata that has previously been set in the same session.\n         *\n         * @param data a PersistableBundle containing the app metadata.\n         * @throws IOException if writing the data fails.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestUserPreapproval(@NonNull PreapprovalDetails details, @NonNull IntentSender statusReceiver)",
    "returnType" : "void",
    "comment" : "\n         * Attempt to request the approval before committing this session.\n         *\n         * For installers that have been granted the\n         * {@link android.Manifest.permission#REQUEST_INSTALL_PACKAGES REQUEST_INSTALL_PACKAGES}\n         * permission, they can request the approval from users before\n         * {@link Session#commit(IntentSender)} is called. This may require user intervention as\n         * well. When user intervention is required, installers will receive a\n         * {@link #STATUS_PENDING_USER_ACTION} callback, and {@link #STATUS_SUCCESS} otherwise.\n         * In case that requesting user pre-approval is not available, installers will receive\n         * {@link #STATUS_FAILURE_BLOCKED} instead. Note that if the users decline the request,\n         * this session will be abandoned.\n         *\n         * If user intervention is required but never resolved, or requesting user\n         * pre-approval is not available, you may still call {@link Session#commit(IntentSender)}\n         * as the typical installation.\n         *\n         * @param details the adequate context to this session for requesting the approval from\n         *                users prior to commit.\n         * @param statusReceiver called when the state of the session changes.\n         *                       Intents sent to this receiver contain {@link #EXTRA_STATUS}\n         *                       and the {@link #EXTRA_PRE_APPROVAL} would be {@code true}.\n         *                       Refer to the individual status codes on how to handle them.\n         *\n         * @throws IllegalArgumentException when {@link PreapprovalDetails} is {@code null}.\n         * @throws IllegalArgumentException if {@link IntentSender} is {@code null}.\n         * @throws IllegalStateException if called on a multi-package session (no matter\n         *                               the parent session or any of the children sessions).\n         * @throws IllegalStateException if called again after this method has been called on\n         *                               this session.\n         * @throws SecurityException when the caller does not own this session.\n         * @throws SecurityException if called after the session has been committed or abandoned.\n         ",
    "links" : [ "#STATUS_PENDING_USER_ACTION", "#STATUS_FAILURE_BLOCKED", "android.content.IntentSender", "#EXTRA_PRE_APPROVAL", "#STATUS_SUCCESS", "PreapprovalDetails", "android.Manifest.permission#REQUEST_INSTALL_PACKAGES", "#commit(IntentSender)", "#EXTRA_STATUS" ]
  }, {
    "name" : "public boolean isApplicationEnabledSettingPersistent()",
    "returnType" : "boolean",
    "comment" : "\n         * @return {@code true} if this session will keep the existing application enabled setting\n         * after installation.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequestUpdateOwnership()",
    "returnType" : "boolean",
    "comment" : "\n         * @return {@code true} if the installer requested the update ownership enforcement\n         * for the packages in this session.\n         *\n         * @see PackageInstaller.SessionParams#setRequestUpdateOwnership\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setPreVerifiedDomains(@NonNull Set<String> preVerifiedDomains)",
    "returnType" : "void",
    "comment" : "\n         * Sets the pre-verified domains for the app to be installed. By setting pre-verified\n         * domains, the installer allows the app to be opened by the app links of these domains\n         * immediately after it is installed.\n         *\n         * <p>The specified pre-verified domains should be a subset of the hostnames declared with\n         * {@code android:host} and {@code android:autoVerify=true} in the intent filters of the\n         * AndroidManifest.xml of the app. If some of the specified domains are not declared in\n         * the manifest, they will be ignored.</p>\n         * <p>If this API is called multiple times on the same {@link #Session}, the last call\n         * overrides the previous ones.</p>\n         * <p>The instant app installer is the only entity that may call this API.\n         * </p>\n         *\n         * @param preVerifiedDomains domains that are already pre-verified by the installer.\n         *\n         * @throws IllegalArgumentException if the number or the total size of the pre-verified\n         *                                  domains exceeds the maximum allowed, or if the domain\n         *                                  names contain invalid characters.\n         * @throws SecurityException if called from an installer that is not the instant app\n         *                           installer of the device, or if called after the session has\n         *                           been committed or abandoned.\n         *\n         * @hide\n         ",
    "links" : [ "#Session" ]
  }, {
    "name" : "public Set<String> getPreVerifiedDomains()",
    "returnType" : "Set<String>",
    "comment" : "\n         * Retrieve the pre-verified domains set in a session.\n         * See {@link #setPreVerifiedDomains(Set)} for the definition of pre-verified domains.\n         *\n         * @throws SecurityException if called from an installer that is not the owner of the\n         *                           session, or if called after the session has been committed or\n         *                           abandoned.\n         * @hide\n         ",
    "links" : [ "#setPreVerifiedDomains(Set)" ]
  } ],
  "methodNames" : [ "public void setProgress(float progress)", "public void setStagingProgress(float progress)", "public void addProgress(float progress)", "public OutputStream openWrite(@NonNull String name, long offsetBytes, long lengthBytes) throws IOException", "public void write(@NonNull String name, long offsetBytes, long lengthBytes, @NonNull ParcelFileDescriptor fd) throws IOException", "public void stageViaHardLink(String target) throws IOException", "public void fsync(@NonNull OutputStream out) throws IOException", "public String[] getNames() throws IOException", "public InputStream openRead(@NonNull String name) throws IOException", "public void removeSplit(@NonNull String splitName) throws IOException", "public DataLoaderParams getDataLoaderParams()", "public void addFile(@FileLocation int location, @NonNull String name, long lengthBytes, @NonNull byte[] metadata, @Nullable byte[] signature)", "public void removeFile(@FileLocation int location, @NonNull String name)", "public void setChecksums(@NonNull String name, @NonNull List<Checksum> checksums, @Nullable byte[] signature) throws IOException", "private static List<byte[]> encodeCertificates(List<Certificate> certs) throws CertificateEncodingException", "public void requestChecksums(@NonNull String name, @Checksum.TypeMask int required, @NonNull List<Certificate> trustedInstallers, @NonNull @CallbackExecutor Executor executor, @NonNull PackageManager.OnChecksumsReadyListener onChecksumsReadyListener) throws CertificateEncodingException, FileNotFoundException", "public void commit(@NonNull IntentSender statusReceiver)", "public void commitTransferred(@NonNull IntentSender statusReceiver)", "public void transfer(@NonNull String packageName) throws PackageManager.NameNotFoundException", "public void close()", "public void abandon()", "public boolean isMultiPackage()", "public boolean isStaged()", "public int getInstallFlags()", "public int getParentSessionId()", "public int[] getChildSessionIds()", "public void addChildSessionId(int sessionId)", "public void removeChildSessionId(int sessionId)", "public PersistableBundle getAppMetadata()", "private OutputStream openWriteAppMetadata() throws IOException", "public void setAppMetadata(@Nullable PersistableBundle data) throws IOException", "public void requestUserPreapproval(@NonNull PreapprovalDetails details, @NonNull IntentSender statusReceiver)", "public boolean isApplicationEnabledSettingPersistent()", "public boolean isRequestUpdateOwnership()", "public void setPreVerifiedDomains(@NonNull Set<String> preVerifiedDomains)", "public Set<String> getPreVerifiedDomains()" ],
  "variableNames" : [ "mSession" ]
}