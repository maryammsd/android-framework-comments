{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/Parser.java",
  "packageName" : "org.xml.sax",
  "className" : "Parser",
  "comment" : "\n * Basic interface for SAX (Simple API for XML) parsers.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This was the main event supplier interface for SAX1; it has\n * been replaced in SAX2 by {@link org.xml.sax.XMLReader XMLReader},\n * which includes Namespace support and sophisticated configurability\n * and extensibility.</p>\n *\n * <p>All SAX1 parsers must implement this basic interface: it allows\n * applications to register handlers for different types of events\n * and to initiate a parse from a URI, or a character stream.</p>\n *\n * <p>All SAX1 parsers must also implement a zero-argument constructor\n * (though other constructors are also allowed).</p>\n *\n * <p>SAX1 parsers are reusable but not re-entrant: the application\n * may reuse a parser object (possibly with a different input source)\n * once the first parse has completed successfully, but it may not\n * invoke the parse() methods recursively within a parse.</p>\n *\n * @deprecated This interface has been replaced by the SAX2\n *             {@link org.xml.sax.XMLReader XMLReader}\n *             interface, which includes Namespace support.\n * @since SAX 1.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.EntityResolver\n * @see org.xml.sax.DTDHandler\n * @see org.xml.sax.DocumentHandler\n * @see org.xml.sax.ErrorHandler\n * @see org.xml.sax.HandlerBase\n * @see org.xml.sax.InputSource\n ",
  "links" : [ "org.xml.sax.XMLReader" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void setLocale(Locale locale) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Allow an application to request a locale for errors and warnings.\n     *\n     * <p>SAX parsers are not required to provide localisation for errors\n     * and warnings; if they cannot support the requested locale,\n     * however, they must throw a SAX exception.  Applications may\n     * not request a locale change in the middle of a parse.</p>\n     *\n     * @param locale A Java Locale object.\n     * @exception org.xml.sax.SAXException Throws an exception\n     *            (using the previous or default locale) if the\n     *            requested locale is not supported.\n     * @see org.xml.sax.SAXException\n     * @see org.xml.sax.SAXParseException\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setEntityResolver(EntityResolver resolver)",
    "returnType" : "void",
    "comment" : "\n     * Allow an application to register a custom entity resolver.\n     *\n     * <p>If the application does not register an entity resolver, the\n     * SAX parser will resolve system identifiers and open connections\n     * to entities itself (this is the default behaviour implemented in\n     * HandlerBase).</p>\n     *\n     * <p>Applications may register a new or different entity resolver\n     * in the middle of a parse, and the SAX parser must begin using\n     * the new resolver immediately.</p>\n     *\n     * @param resolver The object for resolving entities.\n     * @see EntityResolver\n     * @see HandlerBase\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDTDHandler(DTDHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Allow an application to register a DTD event handler.\n     *\n     * <p>If the application does not register a DTD handler, all DTD\n     * events reported by the SAX parser will be silently\n     * ignored (this is the default behaviour implemented by\n     * HandlerBase).</p>\n     *\n     * <p>Applications may register a new or different\n     * handler in the middle of a parse, and the SAX parser must\n     * begin using the new handler immediately.</p>\n     *\n     * @param handler The DTD handler.\n     * @see DTDHandler\n     * @see HandlerBase\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDocumentHandler(DocumentHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Allow an application to register a document event handler.\n     *\n     * <p>If the application does not register a document handler, all\n     * document events reported by the SAX parser will be silently\n     * ignored (this is the default behaviour implemented by\n     * HandlerBase).</p>\n     *\n     * <p>Applications may register a new or different handler in the\n     * middle of a parse, and the SAX parser must begin using the new\n     * handler immediately.</p>\n     *\n     * @param handler The document handler.\n     * @see DocumentHandler\n     * @see HandlerBase\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setErrorHandler(ErrorHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Allow an application to register an error event handler.\n     *\n     * <p>If the application does not register an error event handler,\n     * all error events reported by the SAX parser will be silently\n     * ignored, except for fatalError, which will throw a SAXException\n     * (this is the default behaviour implemented by HandlerBase).</p>\n     *\n     * <p>Applications may register a new or different handler in the\n     * middle of a parse, and the SAX parser must begin using the new\n     * handler immediately.</p>\n     *\n     * @param handler The error handler.\n     * @see ErrorHandler\n     * @see SAXException\n     * @see HandlerBase\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void parse(InputSource source) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse an XML document.\n     *\n     * <p>The application can use this method to instruct the SAX parser\n     * to begin parsing an XML document from any valid input\n     * source (a character stream, a byte stream, or a URI).</p>\n     *\n     * <p>Applications may not invoke this method while a parse is in\n     * progress (they should create a new Parser instead for each\n     * additional XML document).  Once a parse is complete, an\n     * application may reuse the same Parser object, possibly with a\n     * different input source.</p>\n     *\n     * @param source The input source for the top-level of the\n     *        XML document.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @exception java.io.IOException An IO exception from the parser,\n     *            possibly from a byte stream or character stream\n     *            supplied by the application.\n     * @see org.xml.sax.InputSource\n     * @see #parse(java.lang.String)\n     * @see #setEntityResolver\n     * @see #setDTDHandler\n     * @see #setDocumentHandler\n     * @see #setErrorHandler\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void parse(String systemId) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse an XML document from a system identifier (URI).\n     *\n     * <p>This method is a shortcut for the common case of reading a\n     * document from a system identifier.  It is the exact\n     * equivalent of the following:</p>\n     *\n     * <pre>\n     * parse(new InputSource(systemId));\n     * </pre>\n     *\n     * <p>If the system identifier is a URL, it must be fully resolved\n     * by the application before it is passed to the parser.</p>\n     *\n     * @param systemId The system identifier (URI).\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @exception java.io.IOException An IO exception from the parser,\n     *            possibly from a byte stream or character stream\n     *            supplied by the application.\n     * @see #parse(org.xml.sax.InputSource)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void setLocale(Locale locale) throws SAXException", "public abstract void setEntityResolver(EntityResolver resolver)", "public abstract void setDTDHandler(DTDHandler handler)", "public abstract void setDocumentHandler(DocumentHandler handler)", "public abstract void setErrorHandler(ErrorHandler handler)", "public abstract void parse(InputSource source) throws SAXException, IOException", "public abstract void parse(String systemId) throws SAXException, IOException" ],
  "variableNames" : [ ]
}