{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/EnumSet.java",
  "packageName" : "java.util",
  "className" : "EnumSet",
  "comment" : "\n * A specialized {@link Set} implementation for use with enum types.  All of\n * the elements in an enum set must come from a single enum type that is\n * specified, explicitly or implicitly, when the set is created.  Enum sets\n * are represented internally as bit vectors.  This representation is\n * extremely compact and efficient. The space and time performance of this\n * class should be good enough to allow its use as a high-quality, typesafe\n * alternative to traditional {@code int}-based \"bit flags.\"  Even bulk\n * operations (such as {@code containsAll} and {@code retainAll}) should\n * run very quickly if their argument is also an enum set.\n *\n * <p>The iterator returned by the {@code iterator} method traverses the\n * elements in their <i>natural order</i> (the order in which the enum\n * constants are declared).  The returned iterator is <i>weakly\n * consistent</i>: it will never throw {@link ConcurrentModificationException}\n * and it may or may not show the effects of any modifications to the set that\n * occur while the iteration is in progress.\n *\n * <p>Null elements are not permitted.  Attempts to insert a null element\n * will throw {@link NullPointerException}.  Attempts to test for the\n * presence of a null element or to remove one will, however, function\n * properly.\n *\n * <P>Like most collection implementations, {@code EnumSet} is not\n * synchronized.  If multiple threads access an enum set concurrently, and at\n * least one of the threads modifies the set, it should be synchronized\n * externally.  This is typically accomplished by synchronizing on some\n * object that naturally encapsulates the enum set.  If no such object exists,\n * the set should be \"wrapped\" using the {@link Collections#synchronizedSet}\n * method.  This is best done at creation time, to prevent accidental\n * unsynchronized access:\n *\n * <pre>\n * Set&lt;MyEnum&gt; s = Collections.synchronizedSet(EnumSet.noneOf(MyEnum.class));\n * </pre>\n *\n * <p>Implementation note: All basic operations execute in constant time.\n * They are likely (though not guaranteed) to be much faster than their\n * {@link HashSet} counterparts.  Even bulk operations execute in\n * constant time if their argument is also an enum set.\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @author Josh Bloch\n * @since 1.5\n * @see EnumMap\n ",
  "links" : [ "java.util.HashSet", "java.util.Collections#synchronizedSet", "NullPointerException", "java.util.Set", "java.util.ConcurrentModificationException" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " declare EnumSet.class serialization compatibility with JDK 8",
    "links" : [ ]
  }, {
    "name" : "elementType",
    "type" : "Class<E>",
    "comment" : "\n     * The class of all the elements of this set.\n     ",
    "links" : [ ]
  }, {
    "name" : "universe",
    "type" : "Enum<?>[]",
    "comment" : "\n     * All of the values comprising E.  (Cached for performance.)\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static EnumSet<E> noneOf(Class<E> elementType)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an empty enum set with the specified element type.\n     *\n     * @param <E> The class of the elements in the set\n     * @param elementType the class object of the element type for this enum\n     *     set\n     * @return An empty enum set of the specified type.\n     * @throws NullPointerException if {@code elementType} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static EnumSet<E> allOf(Class<E> elementType)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set containing all of the elements in the specified\n     * element type.\n     *\n     * @param <E> The class of the elements in the set\n     * @param elementType the class object of the element type for this enum\n     *     set\n     * @return An enum set containing all the elements in the specified type.\n     * @throws NullPointerException if {@code elementType} is null\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void addAll()",
    "returnType" : "void",
    "comment" : "\n     * Adds all of the elements from the appropriate enum type to this enum\n     * set, which is empty prior to the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static EnumSet<E> copyOf(EnumSet<E> s)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set with the same element type as the specified enum\n     * set, initially containing the same elements (if any).\n     *\n     * @param <E> The class of the elements in the set\n     * @param s the enum set from which to initialize this enum set\n     * @return A copy of the specified enum set.\n     * @throws NullPointerException if {@code s} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static EnumSet<E> copyOf(Collection<E> c)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set initialized from the specified collection.  If\n     * the specified collection is an {@code EnumSet} instance, this static\n     * factory method behaves identically to {@link #copyOf(EnumSet)}.\n     * Otherwise, the specified collection must contain at least one element\n     * (in order to determine the new enum set's element type).\n     *\n     * @param <E> The class of the elements in the collection\n     * @param c the collection from which to initialize this enum set\n     * @return An enum set initialized from the given collection.\n     * @throws IllegalArgumentException if {@code c} is not an\n     *     {@code EnumSet} instance and contains no elements\n     * @throws NullPointerException if {@code c} is null\n     ",
    "links" : [ "#copyOf(EnumSet)" ]
  }, {
    "name" : "public static EnumSet<E> complementOf(EnumSet<E> s)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set with the same element type as the specified enum\n     * set, initially containing all the elements of this type that are\n     * <i>not</i> contained in the specified set.\n     *\n     * @param <E> The class of the elements in the enum set\n     * @param s the enum set from whose complement to initialize this enum set\n     * @return The complement of the specified set in this set\n     * @throws NullPointerException if {@code s} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static EnumSet<E> of(E e)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set initially containing the specified element.\n     *\n     * Overloadings of this method exist to initialize an enum set with\n     * one through five elements.  A sixth overloading is provided that\n     * uses the varargs feature.  This overloading may be used to create\n     * an enum set initially containing an arbitrary number of elements, but\n     * is likely to run slower than the overloadings that do not use varargs.\n     *\n     * @param <E> The class of the specified element and of the set\n     * @param e the element that this set is to contain initially\n     * @throws NullPointerException if {@code e} is null\n     * @return an enum set initially containing the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public static EnumSet<E> of(E e1, E e2)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set initially containing the specified elements.\n     *\n     * Overloadings of this method exist to initialize an enum set with\n     * one through five elements.  A sixth overloading is provided that\n     * uses the varargs feature.  This overloading may be used to create\n     * an enum set initially containing an arbitrary number of elements, but\n     * is likely to run slower than the overloadings that do not use varargs.\n     *\n     * @param <E> The class of the parameter elements and of the set\n     * @param e1 an element that this set is to contain initially\n     * @param e2 another element that this set is to contain initially\n     * @throws NullPointerException if any parameters are null\n     * @return an enum set initially containing the specified elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public static EnumSet<E> of(E e1, E e2, E e3)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set initially containing the specified elements.\n     *\n     * Overloadings of this method exist to initialize an enum set with\n     * one through five elements.  A sixth overloading is provided that\n     * uses the varargs feature.  This overloading may be used to create\n     * an enum set initially containing an arbitrary number of elements, but\n     * is likely to run slower than the overloadings that do not use varargs.\n     *\n     * @param <E> The class of the parameter elements and of the set\n     * @param e1 an element that this set is to contain initially\n     * @param e2 another element that this set is to contain initially\n     * @param e3 another element that this set is to contain initially\n     * @throws NullPointerException if any parameters are null\n     * @return an enum set initially containing the specified elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public static EnumSet<E> of(E e1, E e2, E e3, E e4)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set initially containing the specified elements.\n     *\n     * Overloadings of this method exist to initialize an enum set with\n     * one through five elements.  A sixth overloading is provided that\n     * uses the varargs feature.  This overloading may be used to create\n     * an enum set initially containing an arbitrary number of elements, but\n     * is likely to run slower than the overloadings that do not use varargs.\n     *\n     * @param <E> The class of the parameter elements and of the set\n     * @param e1 an element that this set is to contain initially\n     * @param e2 another element that this set is to contain initially\n     * @param e3 another element that this set is to contain initially\n     * @param e4 another element that this set is to contain initially\n     * @throws NullPointerException if any parameters are null\n     * @return an enum set initially containing the specified elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public static EnumSet<E> of(E e1, E e2, E e3, E e4, E e5)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set initially containing the specified elements.\n     *\n     * Overloadings of this method exist to initialize an enum set with\n     * one through five elements.  A sixth overloading is provided that\n     * uses the varargs feature.  This overloading may be used to create\n     * an enum set initially containing an arbitrary number of elements, but\n     * is likely to run slower than the overloadings that do not use varargs.\n     *\n     * @param <E> The class of the parameter elements and of the set\n     * @param e1 an element that this set is to contain initially\n     * @param e2 another element that this set is to contain initially\n     * @param e3 another element that this set is to contain initially\n     * @param e4 another element that this set is to contain initially\n     * @param e5 another element that this set is to contain initially\n     * @throws NullPointerException if any parameters are null\n     * @return an enum set initially containing the specified elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public static EnumSet<E> of(E first, E... rest)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set initially containing the specified elements.\n     * This factory, whose parameter list uses the varargs feature, may\n     * be used to create an enum set initially containing an arbitrary\n     * number of elements, but it is likely to run slower than the overloadings\n     * that do not use varargs.\n     *\n     * @param <E> The class of the parameter elements and of the set\n     * @param first an element that the set is to contain initially\n     * @param rest the remaining elements the set is to contain initially\n     * @throws NullPointerException if any of the specified elements are null,\n     *     or if {@code rest} is null\n     * @return an enum set initially containing the specified elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public static EnumSet<E> range(E from, E to)",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Creates an enum set initially containing all of the elements in the\n     * range defined by the two specified endpoints.  The returned set will\n     * contain the endpoints themselves, which may be identical but must not\n     * be out of order.\n     *\n     * @param <E> The class of the parameter elements and of the set\n     * @param from the first element in the range\n     * @param to the last element in the range\n     * @throws NullPointerException if {@code from} or {@code to} are null\n     * @throws IllegalArgumentException if {@code from.compareTo(to) > 0}\n     * @return an enum set initially containing all of the elements in the\n     *         range defined by the two specified endpoints\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void addRange(E from, E to)",
    "returnType" : "void",
    "comment" : "\n     * Adds the specified range to this enum set, which is empty prior\n     * to the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public EnumSet<E> clone()",
    "returnType" : "EnumSet<E>",
    "comment" : "\n     * Returns a copy of this set.\n     *\n     * @return a copy of this set\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void complement()",
    "returnType" : "void",
    "comment" : "\n     * Complements the contents of this enum set.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void typeCheck(E e)",
    "returnType" : "void",
    "comment" : "\n     * Throws an exception if e is not of the correct type for this enum set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static E[] getUniverse(Class<E> elementType)",
    "returnType" : "E[]",
    "comment" : "\n     * Returns all of the values comprising E.\n     * The result is uncloned, cached, and shared by all callers.\n     ",
    "links" : [ ]
  }, {
    "name" : " Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a\n     * <a href=\"{@docRoot}/serialized-form.html#java.util.EnumSet.SerializationProxy\">\n     * SerializationProxy</a>\n     * representing the state of this instance.\n     *\n     * @return a {@link SerializationProxy}\n     * representing the state of this instance\n     ",
    "links" : [ "SerializationProxy" ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * Throws {@code InvalidObjectException}.\n     * @param s the stream\n     * @throws java.io.InvalidObjectException always\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObjectNoData() throws java.io.InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * Throws {@code InvalidObjectException}.\n     * @throws java.io.InvalidObjectException always\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static EnumSet<E> noneOf(Class<E> elementType)", "public static EnumSet<E> allOf(Class<E> elementType)", " abstract void addAll()", "public static EnumSet<E> copyOf(EnumSet<E> s)", "public static EnumSet<E> copyOf(Collection<E> c)", "public static EnumSet<E> complementOf(EnumSet<E> s)", "public static EnumSet<E> of(E e)", "public static EnumSet<E> of(E e1, E e2)", "public static EnumSet<E> of(E e1, E e2, E e3)", "public static EnumSet<E> of(E e1, E e2, E e3, E e4)", "public static EnumSet<E> of(E e1, E e2, E e3, E e4, E e5)", "public static EnumSet<E> of(E first, E... rest)", "public static EnumSet<E> range(E from, E to)", " abstract void addRange(E from, E to)", "public EnumSet<E> clone()", " abstract void complement()", " final void typeCheck(E e)", "private static E[] getUniverse(Class<E> elementType)", " Object writeReplace()", "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException", "private void readObjectNoData() throws java.io.InvalidObjectException" ],
  "variableNames" : [ "serialVersionUID", "elementType", "universe" ]
}