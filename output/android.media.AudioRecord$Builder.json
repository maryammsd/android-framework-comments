{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioRecord.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link AudioRecord} objects.\n     * Use this class to configure and create an <code>AudioRecord</code> instance. By setting the\n     * recording source and audio format parameters, you indicate which of\n     * those vary from the default behavior on the device.\n     * <p> Here is an example where <code>Builder</code> is used to specify all {@link AudioFormat}\n     * parameters, to be used by a new <code>AudioRecord</code> instance:\n     *\n     * <pre class=\"prettyprint\">\n     * AudioRecord recorder = new AudioRecord.Builder()\n     *         .setAudioSource(MediaRecorder.AudioSource.VOICE_COMMUNICATION)\n     *         .setAudioFormat(new AudioFormat.Builder()\n     *                 .setEncoding(AudioFormat.ENCODING_PCM_16BIT)\n     *                 .setSampleRate(32000)\n     *                 .setChannelMask(AudioFormat.CHANNEL_IN_MONO)\n     *                 .build())\n     *         .setBufferSizeInBytes(2*minBuffSize)\n     *         .build();\n     * </pre>\n     * <p>\n     * If the audio source is not set with {@link #setAudioSource(int)},\n     * {@link MediaRecorder.AudioSource#DEFAULT} is used.\n     * <br>If the audio format is not specified or is incomplete, its channel configuration will be\n     * {@link AudioFormat#CHANNEL_IN_MONO}, and the encoding will be\n     * {@link AudioFormat#ENCODING_PCM_16BIT}.\n     * The sample rate will depend on the device actually selected for capture and can be queried\n     * with {@link #getSampleRate()} method.\n     * <br>If the buffer size is not specified with {@link #setBufferSizeInBytes(int)},\n     * the minimum buffer size for the source is used.\n     ",
  "links" : [ "#getSampleRate()", "MediaRecorder.AudioSource#DEFAULT", "android.media.AudioFormat", "#setBufferSizeInBytes(int)", "android.media.AudioRecord", "#setAudioSource(int)", "android.media.AudioFormat#CHANNEL_IN_MONO", "android.media.AudioFormat#ENCODING_PCM_16BIT" ],
  "variables" : [ {
    "name" : "ERROR_MESSAGE_SOURCE_MISMATCH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioPlaybackCaptureConfiguration",
    "type" : "AudioPlaybackCaptureConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributes",
    "type" : "AudioAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBufferSizeInBytes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrivacySensitive",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxSharedAudioHistoryMs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallRedirectionMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsHotwordStream",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsHotwordLookback",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIVACY_SENSITIVE_DEFAULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIVACY_SENSITIVE_DISABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIVACY_SENSITIVE_ENABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setAudioSource(@Source int source) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * @param source the audio source.\n         * See {@link MediaRecorder.AudioSource} for the supported audio source definitions.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "MediaRecorder.AudioSource" ]
  }, {
    "name" : "public Builder setContext(@NonNull Context context)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the context the record belongs to. This context will be used to pull information,\n         * such as {@link android.content.AttributionSource} and device specific session ids,\n         * which will be associated with the {@link AudioRecord} the AudioRecord.\n         * However, the context itself will not be retained by the AudioRecord.\n         * @param context a non-null {@link Context} instance\n         * @return the same Builder instance.\n         ",
    "links" : [ "android.content.Context", "android.content.AttributionSource", "android.media.AudioRecord" ]
  }, {
    "name" : "public Builder setAudioAttributes(@NonNull AudioAttributes attributes) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * To be only used by system components. Allows specifying non-public capture presets\n         * @param attributes a non-null {@link AudioAttributes} instance that contains the capture\n         *     preset to be used.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder setAudioFormat(@NonNull AudioFormat format) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the format of the audio data to be captured.\n         * @param format a non-null {@link AudioFormat} instance\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.AudioFormat" ]
  }, {
    "name" : "public Builder setBufferSizeInBytes(int bufferSizeInBytes) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the total size (in bytes) of the buffer where audio data is written\n         * during the recording. New audio data can be read from this buffer in smaller chunks\n         * than this size. See {@link #getMinBufferSize(int, int, int)} to determine the minimum\n         * required buffer size for the successful creation of an AudioRecord instance.\n         * Since bufferSizeInBytes may be internally increased to accommodate the source\n         * requirements, use {@link #getBufferSizeInFrames()} to determine the actual buffer size\n         * in frames.\n         * @param bufferSizeInBytes a value strictly greater than 0\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "#getBufferSizeInFrames()", "#getMinBufferSize(int" ]
  }, {
    "name" : "public Builder setAudioPlaybackCaptureConfig(@NonNull AudioPlaybackCaptureConfiguration config)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the {@link AudioRecord} to record audio played by other apps.\n         *\n         * @param config Defines what apps to record audio from (i.e., via either their uid or\n         *               the type of audio).\n         * @throws IllegalStateException if called in conjunction with {@link #setAudioSource(int)}.\n         * @throws NullPointerException if {@code config} is null.\n         ",
    "links" : [ "android.media.AudioRecord", "#setAudioSource(int)" ]
  }, {
    "name" : "public Builder setPrivacySensitive(boolean privacySensitive)",
    "returnType" : "Builder",
    "comment" : "\n         * Indicates that this capture request is privacy sensitive and that\n         * any concurrent capture is not permitted.\n         * <p>\n         * The default is not privacy sensitive except when the audio source set with\n         * {@link #setAudioSource(int)} is {@link MediaRecorder.AudioSource#VOICE_COMMUNICATION} or\n         * {@link MediaRecorder.AudioSource#CAMCORDER}.\n         * <p>\n         * Always takes precedence over default from audio source when set explicitly.\n         * <p>\n         * Using this API is only permitted when the audio source is one of:\n         * <ul>\n         * <li>{@link MediaRecorder.AudioSource#MIC}</li>\n         * <li>{@link MediaRecorder.AudioSource#CAMCORDER}</li>\n         * <li>{@link MediaRecorder.AudioSource#VOICE_RECOGNITION}</li>\n         * <li>{@link MediaRecorder.AudioSource#VOICE_COMMUNICATION}</li>\n         * <li>{@link MediaRecorder.AudioSource#UNPROCESSED}</li>\n         * <li>{@link MediaRecorder.AudioSource#VOICE_PERFORMANCE}</li>\n         * </ul>\n         * Invoking {@link #build()} will throw an UnsupportedOperationException if this\n         * condition is not met.\n         * @param privacySensitive True if capture from this AudioRecord must be marked as privacy\n         * sensitive, false otherwise.\n         ",
    "links" : [ "MediaRecorder.AudioSource#CAMCORDER", "MediaRecorder.AudioSource#VOICE_PERFORMANCE", "#build()", "MediaRecorder.AudioSource#MIC", "#setAudioSource(int)", "MediaRecorder.AudioSource#UNPROCESSED", "MediaRecorder.AudioSource#VOICE_RECOGNITION", "MediaRecorder.AudioSource#VOICE_COMMUNICATION" ]
  }, {
    "name" : "public Builder setSessionId(int sessionId) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * To be only used by system components.\n         *\n         * Note, that if there's a device specific session id asociated with the context, explicitly\n         * setting a session id using this method will override it.\n         * @param sessionId ID of audio session the AudioRecord must be attached to, or\n         *     {@link AudioManager#AUDIO_SESSION_ID_GENERATE} if the session isn't known at\n         *     construction time.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.AudioManager#AUDIO_SESSION_ID_GENERATE" ]
  }, {
    "name" : "private AudioRecord buildAudioPlaybackCaptureRecord()",
    "returnType" : "AudioRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setCallRedirectionMode(@AudioManager.CallRedirectionMode int callRedirectionMode)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Sets the {@link AudioRecord} call redirection mode.\n         * Used when creating an AudioRecord to extract audio from call downlink path. The mode\n         * indicates if the call is a PSTN call or a VoIP call in which case a dynamic audio\n         * policy is created to forward all playback with voice communication usage this record.\n         *\n         * @param callRedirectionMode one of\n         * {@link AudioManager#CALL_REDIRECT_NONE},\n         * {@link AudioManager#CALL_REDIRECT_PSTN},\n         * or {@link AAudioManager#CALL_REDIRECT_VOIP}.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException if {@code callRedirectionMode} is not valid.\n         ",
    "links" : [ "android.media.AudioManager#CALL_REDIRECT_PSTN", "android.media.AudioManager#CALL_REDIRECT_NONE", "#CALL_REDIRECT_VOIP", "android.media.AudioRecord" ]
  }, {
    "name" : "private AudioRecord buildCallExtractionRecord()",
    "returnType" : "AudioRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setMaxSharedAudioHistoryMillis(long maxSharedAudioHistoryMillis) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Specifies the maximum duration in the past of the this AudioRecord's capture buffer\n         * that can be shared with another app by calling\n         * {@link AudioRecord#shareAudioHistory(String, long)}.\n         * @param maxSharedAudioHistoryMillis the maximum duration that will be available\n         *                                    in milliseconds.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         *\n         ",
    "links" : [ "android.media.AudioRecord#shareAudioHistory(String" ]
  }, {
    "name" : "public Builder setSharedAudioEvent(@NonNull MediaSyncEvent event) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Indicates that this AudioRecord will use the audio history shared by another app's\n         * AudioRecord. See {@link AudioRecord#shareAudioHistory(String, long)}.\n         * The audio session ID set with {@link AudioRecord.Builder#setSessionId(int)} will be\n         * ignored if this method is used.\n         * @param event The {@link MediaSyncEvent} provided by the app sharing its audio history\n         *              with this AudioRecord.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.MediaSyncEvent", "android.media.AudioRecord#shareAudioHistory(String", "AudioRecord.Builder#setSessionId(int)" ]
  }, {
    "name" : "public Builder setRequestHotwordStream(boolean hotwordContent)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Set to indicate that the requested AudioRecord object should produce the same type\n         * of audio content that the hotword recognition model consumes. SoundTrigger hotword\n         * recognition will not be disrupted. The source in the set AudioAttributes and the set\n         * audio source will be overridden if this API is used.\n         * <br> Use {@link AudioManager#isHotwordStreamSupported(boolean)} to query support.\n         * @param hotwordContent true if AudioRecord should produce content captured from the\n         *        hotword pipeline. false if AudioRecord should produce content captured outside\n         *        the hotword pipeline.\n         * @return the same Builder instance.\n         *",
    "links" : [ "android.media.AudioManager#isHotwordStreamSupported(boolean)" ]
  }, {
    "name" : "public Builder setRequestHotwordLookbackStream(boolean hotwordLookbackContent)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Set to indicate that the requested AudioRecord object should produce the same type\n         * of audio content that the hotword recognition model consumes and that the stream will\n         * be able to provide buffered audio content from an unspecified duration prior to stream\n         * open. The source in the set AudioAttributes and the set audio source will be overridden\n         * if this API is used.\n         * <br> Use {@link AudioManager#isHotwordStreamSupported(boolean)} to query support.\n         * <br> If this is set, {@link AudioRecord.Builder#setRequestHotwordStream(boolean)}\n         * must not be set, or {@link AudioRecord.Builder#build()} will throw.\n         * @param hotwordLookbackContent true if AudioRecord should produce content captured from\n         *        the hotword pipeline with capture content from prior to open. false if AudioRecord\n         *        should not capture such content.\n         * to stream open is requested.\n         * @return the same Builder instance.\n         *",
    "links" : [ "AudioRecord.Builder#setRequestHotwordStream(boolean)", "android.media.AudioManager#isHotwordStreamSupported(boolean)", "AudioRecord.Builder#build()" ]
  }, {
    "name" : "public AudioRecord build() throws UnsupportedOperationException",
    "returnType" : "AudioRecord",
    "comment" : "\n         * @return a new {@link AudioRecord} instance successfully initialized with all\n         *     the parameters set on this <code>Builder</code>.\n         * @throws UnsupportedOperationException if the parameters set on the <code>Builder</code>\n         *     were incompatible, if the parameters are not supported by the device, if the caller\n         *     does not hold the appropriate permissions, or if the device was not available.\n         ",
    "links" : [ "android.media.AudioRecord" ]
  } ],
  "methodNames" : [ "public Builder setAudioSource(@Source int source) throws IllegalArgumentException", "public Builder setContext(@NonNull Context context)", "public Builder setAudioAttributes(@NonNull AudioAttributes attributes) throws IllegalArgumentException", "public Builder setAudioFormat(@NonNull AudioFormat format) throws IllegalArgumentException", "public Builder setBufferSizeInBytes(int bufferSizeInBytes) throws IllegalArgumentException", "public Builder setAudioPlaybackCaptureConfig(@NonNull AudioPlaybackCaptureConfiguration config)", "public Builder setPrivacySensitive(boolean privacySensitive)", "public Builder setSessionId(int sessionId) throws IllegalArgumentException", "private AudioRecord buildAudioPlaybackCaptureRecord()", "public Builder setCallRedirectionMode(@AudioManager.CallRedirectionMode int callRedirectionMode)", "private AudioRecord buildCallExtractionRecord()", "public Builder setMaxSharedAudioHistoryMillis(long maxSharedAudioHistoryMillis) throws IllegalArgumentException", "public Builder setSharedAudioEvent(@NonNull MediaSyncEvent event) throws IllegalArgumentException", "public Builder setRequestHotwordStream(boolean hotwordContent)", "public Builder setRequestHotwordLookbackStream(boolean hotwordLookbackContent)", "public AudioRecord build() throws UnsupportedOperationException" ],
  "variableNames" : [ "ERROR_MESSAGE_SOURCE_MISMATCH", "mAudioPlaybackCaptureConfiguration", "mAttributes", "mFormat", "mContext", "mBufferSizeInBytes", "mSessionId", "mPrivacySensitive", "mMaxSharedAudioHistoryMs", "mCallRedirectionMode", "mIsHotwordStream", "mIsHotwordLookback", "PRIVACY_SENSITIVE_DEFAULT", "PRIVACY_SENSITIVE_DISABLED", "PRIVACY_SENSITIVE_ENABLED" ]
}