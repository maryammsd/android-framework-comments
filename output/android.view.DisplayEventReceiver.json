{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/DisplayEventReceiver.java",
  "packageName" : "android.view",
  "className" : "DisplayEventReceiver",
  "comment" : "\n * Provides a low-level mechanism for an application to receive display events\n * such as vertical sync.\n *\n * The display event receive is NOT thread safe.  Moreover, its methods must only\n * be called on the Looper thread to which it is attached.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "VSYNC_SOURCE_APP",
    "type" : "int",
    "comment" : "\n     * When retrieving vsync events, this specifies that the vsync event should happen at the normal\n     * vsync-app tick.\n     * <p>\n     * Keep in sync with frameworks/native/libs/gui/aidl/android/gui/ISurfaceComposer.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "VSYNC_SOURCE_SURFACE_FLINGER",
    "type" : "int",
    "comment" : "\n     * When retrieving vsync events, this specifies that the vsync event should happen whenever\n     * Surface Flinger is processing a frame.\n     * <p>\n     * Keep in sync with frameworks/native/libs/gui/aidl/android/gui/ISurfaceComposer.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_REGISTRATION_MODE_CHANGED_FLAG",
    "type" : "int",
    "comment" : "\n     * Specifies to generate mode changed events from Surface Flinger.\n     * <p>\n     * Keep in sync with frameworks/native/libs/gui/aidl/android/gui/ISurfaceComposer.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_REGISTRATION_FRAME_RATE_OVERRIDE_FLAG",
    "type" : "int",
    "comment" : "\n     * Specifies to generate frame rate override events from Surface Flinger.\n     * <p>\n     * Keep in sync with frameworks/native/libs/gui/aidl/android/gui/ISurfaceComposer.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReceiverPtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessageQueue",
    "type" : "MessageQueue",
    "comment" : " GC'd while the native peer of the receiver is using them.",
    "links" : [ ]
  }, {
    "name" : "mVsyncEventData",
    "type" : "VsyncEventData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNativeAllocationRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFreeNativeResources",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeInit(WeakReference<DisplayEventReceiver> receiver, WeakReference<VsyncEventData> vsyncEventData, MessageQueue messageQueue, int vsyncSource, int eventRegistration, long layerHandle)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetDisplayEventReceiverFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeScheduleVsync(long receiverPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native VsyncEventData nativeGetLatestVsyncEventData(long receiverPtr)",
    "returnType" : "VsyncEventData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispose()",
    "returnType" : "void",
    "comment" : "\n     * Disposes the receiver.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onVsync(long timestampNanos, long physicalDisplayId, int frame, VsyncEventData vsyncEventData)",
    "returnType" : "void",
    "comment" : "\n     * Called when a vertical sync pulse is received.\n     * The recipient should render a frame and then call {@link #scheduleVsync}\n     * to schedule the next vertical sync pulse.\n     *\n     * @param timestampNanos The timestamp of the pulse, in the {@link System#nanoTime()}\n     * timebase.\n     * @param physicalDisplayId Stable display ID that uniquely describes a (display, port) pair.\n     * @param frame The frame number.  Increases by one for each vertical sync interval.\n     * @param vsyncEventData The vsync event data.\n     ",
    "links" : [ "#scheduleVsync", "#nanoTime()" ]
  }, {
    "name" : "public void onHotplug(long timestampNanos, long physicalDisplayId, boolean connected)",
    "returnType" : "void",
    "comment" : "\n     * Called when a display hotplug event is received.\n     *\n     * @param timestampNanos The timestamp of the event, in the {@link System#nanoTime()}\n     * timebase.\n     * @param physicalDisplayId Stable display ID that uniquely describes a (display, port) pair.\n     * @param connected True if the display is connected, false if it disconnected.\n     ",
    "links" : [ "#nanoTime()" ]
  }, {
    "name" : "public void onHotplugConnectionError(long timestampNanos, int connectionError)",
    "returnType" : "void",
    "comment" : "\n     * Called when a display hotplug event with connection error is received.\n     *\n     * @param timestampNanos The timestamp of the event, in the {@link System#nanoTime()}\n     * timebase.\n     * @param connectionError the hotplug connection error code.\n     ",
    "links" : [ "#nanoTime()" ]
  }, {
    "name" : "public void onModeChanged(long timestampNanos, long physicalDisplayId, int modeId, long renderPeriod)",
    "returnType" : "void",
    "comment" : "\n     * Called when a display mode changed event is received.\n     *\n     * @param timestampNanos The timestamp of the event, in the {@link System#nanoTime()}\n     * timebase.\n     * @param physicalDisplayId Stable display ID that uniquely describes a (display, port) pair.\n     * @param modeId The new mode Id\n     * @param renderPeriod The render frame period, which is a multiple of the mode's vsync period\n     ",
    "links" : [ "#nanoTime()" ]
  }, {
    "name" : "public void onHdcpLevelsChanged(long physicalDisplayId, int connectedLevel, int maxLevel)",
    "returnType" : "void",
    "comment" : "\n     * Called when a display hdcp levels change event is received.\n     *\n     * @param physicalDisplayId Stable display ID that uniquely describes a (display, port) pair.\n     * @param connectedLevel the new connected HDCP level\n     * @param maxLevel the maximum HDCP level\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFrameRateOverridesChanged(long timestampNanos, long physicalDisplayId, FrameRateOverride[] overrides)",
    "returnType" : "void",
    "comment" : "\n     * Called when frame rate override event is received.\n     *\n     * @param timestampNanos The timestamp of the event, in the {@link System#nanoTime()}\n     * timebase.\n     * @param physicalDisplayId Stable display ID that uniquely describes a (display, port) pair.\n     * @param overrides The mappings from uid to frame rates\n     ",
    "links" : [ "#nanoTime()" ]
  }, {
    "name" : "public void scheduleVsync()",
    "returnType" : "void",
    "comment" : "\n     * Schedules a single vertical sync pulse to be delivered when the next\n     * display frame begins.\n     ",
    "links" : [ ]
  }, {
    "name" : " VsyncEventData getLatestVsyncEventData()",
    "returnType" : "VsyncEventData",
    "comment" : "\n     * Gets the latest vsync event data from surface flinger.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void dispatchVsync(long timestampNanos, long physicalDisplayId, int frame)",
    "returnType" : "void",
    "comment" : " Called from native code.",
    "links" : [ ]
  }, {
    "name" : "private void dispatchHotplug(long timestampNanos, long physicalDisplayId, boolean connected)",
    "returnType" : "void",
    "comment" : " Called from native code.",
    "links" : [ ]
  }, {
    "name" : "private void dispatchHotplugConnectionError(long timestampNanos, int connectionError)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchModeChanged(long timestampNanos, long physicalDisplayId, int modeId, long renderPeriod)",
    "returnType" : "void",
    "comment" : " Called from native code.",
    "links" : [ ]
  }, {
    "name" : "private void dispatchFrameRateOverrides(long timestampNanos, long physicalDisplayId, FrameRateOverride[] overrides)",
    "returnType" : "void",
    "comment" : " Called from native code.",
    "links" : [ ]
  }, {
    "name" : "private void dispatchHdcpLevelsChanged(long physicalDisplayId, int connectedLevel, int maxLevel)",
    "returnType" : "void",
    "comment" : " Called from native code.",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static native long nativeInit(WeakReference<DisplayEventReceiver> receiver, WeakReference<VsyncEventData> vsyncEventData, MessageQueue messageQueue, int vsyncSource, int eventRegistration, long layerHandle)", "private static native long nativeGetDisplayEventReceiverFinalizer()", "private static native void nativeScheduleVsync(long receiverPtr)", "private static native VsyncEventData nativeGetLatestVsyncEventData(long receiverPtr)", "public void dispose()", "public void onVsync(long timestampNanos, long physicalDisplayId, int frame, VsyncEventData vsyncEventData)", "public void onHotplug(long timestampNanos, long physicalDisplayId, boolean connected)", "public void onHotplugConnectionError(long timestampNanos, int connectionError)", "public void onModeChanged(long timestampNanos, long physicalDisplayId, int modeId, long renderPeriod)", "public void onHdcpLevelsChanged(long physicalDisplayId, int connectedLevel, int maxLevel)", "public void onFrameRateOverridesChanged(long timestampNanos, long physicalDisplayId, FrameRateOverride[] overrides)", "public void scheduleVsync()", " VsyncEventData getLatestVsyncEventData()", "private void dispatchVsync(long timestampNanos, long physicalDisplayId, int frame)", "private void dispatchHotplug(long timestampNanos, long physicalDisplayId, boolean connected)", "private void dispatchHotplugConnectionError(long timestampNanos, int connectionError)", "private void dispatchModeChanged(long timestampNanos, long physicalDisplayId, int modeId, long renderPeriod)", "private void dispatchFrameRateOverrides(long timestampNanos, long physicalDisplayId, FrameRateOverride[] overrides)", "private void dispatchHdcpLevelsChanged(long physicalDisplayId, int connectedLevel, int maxLevel)" ],
  "variableNames" : [ "VSYNC_SOURCE_APP", "VSYNC_SOURCE_SURFACE_FLINGER", "EVENT_REGISTRATION_MODE_CHANGED_FLAG", "EVENT_REGISTRATION_FRAME_RATE_OVERRIDE_FLAG", "TAG", "mReceiverPtr", "mMessageQueue", "mVsyncEventData", "sNativeAllocationRegistry", "mFreeNativeResources" ]
}