{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/LauncherApps.java",
  "packageName" : "android.content.pm",
  "className" : "ShortcutQuery",
  "comment" : "\n     * Represents a query passed to {@link #getShortcuts(ShortcutQuery, UserHandle)}.\n     ",
  "variables" : [ {
    "name" : "FLAG_MATCH_DYNAMIC",
    "type" : "int",
    "comment" : "\n         * Include dynamic shortcuts in the result.\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_GET_DYNAMIC",
    "type" : "int",
    "comment" : " @hide kept for unit tests ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MATCH_PINNED",
    "type" : "int",
    "comment" : "\n         * Include pinned shortcuts in the result.\n         *\n         * <p>If you are the selected assistant app, and wishes to fetch all shortcuts that the\n         * user owns on the launcher (or by other launchers, in case the user has multiple), use\n         * {@link #FLAG_MATCH_PINNED_BY_ANY_LAUNCHER} instead.\n         *\n         * <p>If you're a regular launcher app, there's no way to get shortcuts pinned by other\n         * launchers, and {@link #FLAG_MATCH_PINNED_BY_ANY_LAUNCHER} will be ignored. So use this\n         * flag to get own pinned shortcuts.\n         ",
    "links" : [ "#FLAG_MATCH_PINNED_BY_ANY_LAUNCHER" ]
  }, {
    "name" : "FLAG_GET_PINNED",
    "type" : "int",
    "comment" : " @hide kept for unit tests ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MATCH_MANIFEST",
    "type" : "int",
    "comment" : "\n         * Include manifest shortcuts in the result.\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MATCH_CACHED",
    "type" : "int",
    "comment" : "\n         * Include cached shortcuts in the result.\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_GET_MANIFEST",
    "type" : "int",
    "comment" : " @hide kept for unit tests ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MATCH_PINNED_BY_ANY_LAUNCHER",
    "type" : "int",
    "comment" : "\n         * Include all pinned shortcuts by any launchers, not just by the caller,\n         * in the result.\n         *\n         * <p>The caller must be the selected assistant app to use this flag, or have the system\n         * {@code ACCESS_SHORTCUTS} permission.\n         *\n         * <p>If you are the selected assistant app, and wishes to fetch all shortcuts that the\n         * user owns on the launcher (or by other launchers, in case the user has multiple), use\n         * {@link #FLAG_MATCH_PINNED_BY_ANY_LAUNCHER} instead.\n         *\n         * <p>If you're a regular launcher app (or any app that's not the selected assistant app)\n         * then this flag will be ignored.\n         ",
    "links" : [ "#FLAG_MATCH_PINNED_BY_ANY_LAUNCHER" ]
  }, {
    "name" : "FLAG_MATCH_ALL_KINDS",
    "type" : "int",
    "comment" : "\n         * FLAG_MATCH_DYNAMIC | FLAG_MATCH_PINNED | FLAG_MATCH_MANIFEST | FLAG_MATCH_CACHED\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MATCH_ALL_KINDS_WITH_ALL_PINNED",
    "type" : "int",
    "comment" : "\n         * FLAG_MATCH_DYNAMIC | FLAG_MATCH_PINNED | FLAG_MATCH_MANIFEST | FLAG_MATCH_ALL_PINNED\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_GET_ALL_KINDS",
    "type" : "int",
    "comment" : " @hide kept for unit tests ",
    "links" : [ ]
  }, {
    "name" : "FLAG_GET_KEY_FIELDS_ONLY",
    "type" : "int",
    "comment" : "\n         * Requests \"key\" fields only.  See {@link ShortcutInfo#hasKeyFieldsOnly()}'s javadoc to\n         * see which fields fields \"key\".\n         * This allows quicker access to shortcut information in order to\n         * determine whether the caller's in-memory cache needs to be updated.\n         *\n         * <p>Typically, launcher applications cache all or most shortcut information\n         * in memory in order to show shortcuts without a delay.\n         *\n         * When a given launcher application wants to update its cache, such as when its process\n         * restarts, it can fetch shortcut information with this flag.\n         * The application can then check {@link ShortcutInfo#getLastChangedTimestamp()} for each\n         * shortcut, fetching a shortcut's non-key information only if that shortcut has been\n         * updated.\n         *\n         * @see ShortcutManager\n         ",
    "links" : [ "android.content.pm.ShortcutInfo#getLastChangedTimestamp()", "android.content.pm.ShortcutInfo#hasKeyFieldsOnly()" ]
  }, {
    "name" : "mChangedSince",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortcutIds",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocusIds",
    "type" : "List<LocusId>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivity",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQueryFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ShortcutQuery setChangedSince(long changedSince)",
    "returnType" : "ShortcutQuery",
    "comment" : "\n         * If non-zero, returns only shortcuts that have been added or updated\n         * since the given timestamp, expressed in milliseconds since the Epoch&mdash;see\n         * {@link System#currentTimeMillis()}.\n         ",
    "links" : [ "#currentTimeMillis()" ]
  }, {
    "name" : "public ShortcutQuery setPackage(@Nullable String packageName)",
    "returnType" : "ShortcutQuery",
    "comment" : "\n         * If non-null, returns only shortcuts from the package.\n         ",
    "links" : [ ]
  }, {
    "name" : "public ShortcutQuery setShortcutIds(@Nullable List<String> shortcutIds)",
    "returnType" : "ShortcutQuery",
    "comment" : "\n         * If non-null, return only the specified shortcuts by ID.  When setting this field,\n         * a package name must also be set with {@link #setPackage}.\n         ",
    "links" : [ "#setPackage" ]
  }, {
    "name" : "public ShortcutQuery setLocusIds(@Nullable List<LocusId> locusIds)",
    "returnType" : "ShortcutQuery",
    "comment" : "\n         * If non-null, return only the specified shortcuts by locus ID.  When setting this field,\n         * a package name must also be set with {@link #setPackage}.\n         ",
    "links" : [ "#setPackage" ]
  }, {
    "name" : "public ShortcutQuery setActivity(@Nullable ComponentName activity)",
    "returnType" : "ShortcutQuery",
    "comment" : "\n         * If non-null, returns only shortcuts associated with the activity; i.e.\n         * {@link ShortcutInfo}s whose {@link ShortcutInfo#getActivity()} are equal\n         * to {@code activity}.\n         ",
    "links" : [ "android.content.pm.ShortcutInfo#getActivity()", "android.content.pm.ShortcutInfo" ]
  }, {
    "name" : "public ShortcutQuery setQueryFlags(@QueryFlags int queryFlags)",
    "returnType" : "ShortcutQuery",
    "comment" : "\n         * Set query options.  At least one of the {@code MATCH} flags should be set.  Otherwise,\n         * no shortcuts will be returned.\n         *\n         * <ul>\n         *     <li>{@link #FLAG_MATCH_DYNAMIC}\n         *     <li>{@link #FLAG_MATCH_PINNED}\n         *     <li>{@link #FLAG_MATCH_MANIFEST}\n         *     <li>{@link #FLAG_MATCH_CACHED}\n         *     <li>{@link #FLAG_GET_KEY_FIELDS_ONLY}\n         * </ul>\n         ",
    "links" : [ "#FLAG_MATCH_DYNAMIC", "#FLAG_GET_KEY_FIELDS_ONLY", "#FLAG_MATCH_CACHED", "#FLAG_MATCH_MANIFEST", "#FLAG_MATCH_PINNED" ]
  } ],
  "variableNames" : [ "FLAG_MATCH_DYNAMIC", "FLAG_GET_DYNAMIC", "FLAG_MATCH_PINNED", "FLAG_GET_PINNED", "FLAG_MATCH_MANIFEST", "FLAG_MATCH_CACHED", "FLAG_GET_MANIFEST", "FLAG_MATCH_PINNED_BY_ANY_LAUNCHER", "FLAG_MATCH_ALL_KINDS", "FLAG_MATCH_ALL_KINDS_WITH_ALL_PINNED", "FLAG_GET_ALL_KINDS", "FLAG_GET_KEY_FIELDS_ONLY", "mChangedSince", "mPackage", "mShortcutIds", "mLocusIds", "mActivity", "mQueryFlags" ],
  "methodNames" : [ "public ShortcutQuery setChangedSince(long changedSince)", "public ShortcutQuery setPackage(@Nullable String packageName)", "public ShortcutQuery setShortcutIds(@Nullable List<String> shortcutIds)", "public ShortcutQuery setLocusIds(@Nullable List<LocusId> locusIds)", "public ShortcutQuery setActivity(@Nullable ComponentName activity)", "public ShortcutQuery setQueryFlags(@QueryFlags int queryFlags)" ]
}