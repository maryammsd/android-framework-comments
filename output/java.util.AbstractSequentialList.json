{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/AbstractSequentialList.java",
  "packageName" : "java.util",
  "className" : "AbstractSequentialList",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public E get(int index)",
    "returnType" : "E",
    "comment" : "\n     * Returns the element at the specified position in this list.\n     *\n     * <p>This implementation first gets a list iterator pointing to the\n     * indexed element (with {@code listIterator(index)}).  Then, it gets\n     * the element using {@code ListIterator.next} and returns it.\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E set(int index, E element)",
    "returnType" : "E",
    "comment" : "\n     * Replaces the element at the specified position in this list with the\n     * specified element (optional operation).\n     *\n     * <p>This implementation first gets a list iterator pointing to the\n     * indexed element (with {@code listIterator(index)}).  Then, it gets\n     * the current element using {@code ListIterator.next} and replaces it\n     * with {@code ListIterator.set}.\n     *\n     * <p>Note that this implementation will throw an\n     * {@code UnsupportedOperationException} if the list iterator does not\n     * implement the {@code set} operation.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void add(int index, E element)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the specified position in this list\n     * (optional operation).  Shifts the element currently at that position\n     * (if any) and any subsequent elements to the right (adds one to their\n     * indices).\n     *\n     * <p>This implementation first gets a list iterator pointing to the\n     * indexed element (with {@code listIterator(index)}).  Then, it\n     * inserts the specified element with {@code ListIterator.add}.\n     *\n     * <p>Note that this implementation will throw an\n     * {@code UnsupportedOperationException} if the list iterator does not\n     * implement the {@code add} operation.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E remove(int index)",
    "returnType" : "E",
    "comment" : "\n     * Removes the element at the specified position in this list (optional\n     * operation).  Shifts any subsequent elements to the left (subtracts one\n     * from their indices).  Returns the element that was removed from the\n     * list.\n     *\n     * <p>This implementation first gets a list iterator pointing to the\n     * indexed element (with {@code listIterator(index)}).  Then, it removes\n     * the element with {@code ListIterator.remove}.\n     *\n     * <p>Note that this implementation will throw an\n     * {@code UnsupportedOperationException} if the list iterator does not\n     * implement the {@code remove} operation.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(int index, Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts all of the elements in the specified collection into this\n     * list at the specified position (optional operation).  Shifts the\n     * element currently at that position (if any) and any subsequent\n     * elements to the right (increases their indices).  The new elements\n     * will appear in this list in the order that they are returned by the\n     * specified collection's iterator.  The behavior of this operation is\n     * undefined if the specified collection is modified while the\n     * operation is in progress.  (Note that this will occur if the specified\n     * collection is this list, and it's nonempty.)\n     *\n     * <p>This implementation gets an iterator over the specified collection and\n     * a list iterator over this list pointing to the indexed element (with\n     * {@code listIterator(index)}).  Then, it iterates over the specified\n     * collection, inserting the elements obtained from the iterator into this\n     * list, one at a time, using {@code ListIterator.add} followed by\n     * {@code ListIterator.next} (to skip over the added element).\n     *\n     * <p>Note that this implementation will throw an\n     * {@code UnsupportedOperationException} if the list iterator returned by\n     * the {@code listIterator} method does not implement the {@code add}\n     * operation.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this list (in proper\n     * sequence).<p>\n     *\n     * This implementation merely returns a list iterator over the list.\n     *\n     * @return an iterator over the elements in this list (in proper sequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ListIterator<E> listIterator(int index)",
    "returnType" : "ListIterator<E>",
    "comment" : "\n     * Returns a list iterator over the elements in this list (in proper\n     * sequence).\n     *\n     * @param  index index of first element to be returned from the list\n     *         iterator (by a call to the {@code next} method)\n     * @return a list iterator over the elements in this list (in proper\n     *         sequence)\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public E get(int index)", "public E set(int index, E element)", "public void add(int index, E element)", "public E remove(int index)", "public boolean addAll(int index, Collection<? extends E> c)", "public Iterator<E> iterator()", "public abstract ListIterator<E> listIterator(int index)" ],
  "variableNames" : [ ]
}