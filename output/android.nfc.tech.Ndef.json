{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/nfc/tech/Ndef.java",
  "packageName" : "android.nfc.tech",
  "className" : "Ndef",
  "comment" : "\n * Provides access to NDEF content and operations on a {@link Tag}.\n *\n * <p>Acquire a {@link Ndef} object using {@link #get}.\n *\n * <p>NDEF is an NFC Forum data format. The data formats are implemented in\n * {@link android.nfc.NdefMessage} and\n * {@link android.nfc.NdefRecord}. This class provides methods to\n * retrieve and modify the {@link android.nfc.NdefMessage}\n * on a tag.\n *\n * <p>There are currently four NFC Forum standardized tag types that can be\n * formatted to contain NDEF data.\n * <ul>\n * <li>NFC Forum Type 1 Tag ({@link #NFC_FORUM_TYPE_1}), such as the Innovision Topaz\n * <li>NFC Forum Type 2 Tag ({@link #NFC_FORUM_TYPE_2}), such as the NXP MIFARE Ultralight\n * <li>NFC Forum Type 3 Tag ({@link #NFC_FORUM_TYPE_3}), such as Sony Felica\n * <li>NFC Forum Type 4 Tag ({@link #NFC_FORUM_TYPE_4}), such as NXP MIFARE Desfire\n * </ul>\n * It is mandatory for all Android devices with NFC to correctly enumerate\n * {@link Ndef} on NFC Forum Tag Types 1-4, and implement all NDEF operations\n * as defined in this class.\n *\n * <p>Some vendors have their own well defined specifications for storing NDEF data\n * on tags that do not fall into the above categories. Android devices with NFC\n * should enumerate and implement {@link Ndef} under these vendor specifications\n * where possible, but it is not mandatory. {@link #getType} returns a String\n * describing this specification, for example {@link #MIFARE_CLASSIC} is\n * <code>com.nxp.ndef.mifareclassic</code>.\n *\n * <p>Android devices that support MIFARE Classic must also correctly\n * implement {@link Ndef} on MIFARE Classic tags formatted to NDEF.\n *\n * <p>For guaranteed compatibility across all Android devices with NFC, it is\n * recommended to use NFC Forum Types 1-4 in new deployments of NFC tags\n * with NDEF payload. Vendor NDEF formats will not work on all Android devices.\n *\n * <p class=\"note\"><strong>Note:</strong> Methods that perform I/O operations\n * require the {@link android.Manifest.permission#NFC} permission.\n ",
  "links" : [ "android.Manifest.permission#NFC", "android.nfc.INfcTag", "#get", "#getType", "android.nfc.tech.Ndef", "#NFC_FORUM_TYPE_4", "#NFC_FORUM_TYPE_3", "#NFC_FORUM_TYPE_2", "#NFC_FORUM_TYPE_1", "#MIFARE_CLASSIC", "android.nfc.NdefRecord", "android.nfc.NdefMessage" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NDEF_MODE_READ_ONLY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NDEF_MODE_READ_WRITE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NDEF_MODE_UNKNOWN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NDEF_MSG",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NDEF_MAXLENGTH",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NDEF_CARDSTATE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NDEF_TYPE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_OTHER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_1",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_2",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_3",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_4",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MIFARE_CLASSIC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ICODE_SLI",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NFC_FORUM_TYPE_1",
    "type" : "String",
    "comment" : " NFC Forum Tag Type 1 ",
    "links" : [ ]
  }, {
    "name" : "NFC_FORUM_TYPE_2",
    "type" : "String",
    "comment" : " NFC Forum Tag Type 2 ",
    "links" : [ ]
  }, {
    "name" : "NFC_FORUM_TYPE_3",
    "type" : "String",
    "comment" : " NFC Forum Tag Type 3 ",
    "links" : [ ]
  }, {
    "name" : "NFC_FORUM_TYPE_4",
    "type" : "String",
    "comment" : " NFC Forum Tag Type 4 ",
    "links" : [ ]
  }, {
    "name" : "MIFARE_CLASSIC",
    "type" : "String",
    "comment" : " NDEF on MIFARE Classic ",
    "links" : [ ]
  }, {
    "name" : "ICODE_SLI",
    "type" : "String",
    "comment" : "\n     * NDEF on iCODE SLI\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxNdefSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCardState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNdefMsg",
    "type" : "NdefMessage",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNdefType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Ndef get(Tag tag)",
    "returnType" : "Ndef",
    "comment" : "\n     * Get an instance of {@link Ndef} for the given tag.\n     *\n     * <p>Returns null if {@link Ndef} was not enumerated in {@link Tag#getTechList}.\n     * This indicates the tag is not NDEF formatted, or that this tag\n     * is NDEF formatted but under a vendor specification that this Android\n     * device does not implement.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @param tag an NDEF compatible tag\n     * @return Ndef object\n     ",
    "links" : [ "android.nfc.tech.Ndef", "android.nfc.INfcTag#getTechList" ]
  }, {
    "name" : "public NdefMessage getCachedNdefMessage()",
    "returnType" : "NdefMessage",
    "comment" : "\n     * Get the {@link NdefMessage} that was read from the tag at discovery time.\n     *\n     * <p>If the NDEF Message is modified by an I/O operation then it\n     * will not be updated here, this function only returns what was discovered\n     * when the tag entered the field.\n     * <p>Note that this method may return null if the tag was in the\n     * INITIALIZED state as defined by NFC Forum, as in this state the\n     * tag is formatted to support NDEF but does not contain a message yet.\n     * <p>Does not cause any RF activity and does not block.\n     * @return NDEF Message read from the tag at discovery time, can be null\n     ",
    "links" : [ "android.nfc.NdefMessage" ]
  }, {
    "name" : "public String getType()",
    "returnType" : "String",
    "comment" : "\n     * Get the NDEF tag type.\n     *\n     * <p>Returns one of {@link #NFC_FORUM_TYPE_1}, {@link #NFC_FORUM_TYPE_2},\n     * {@link #NFC_FORUM_TYPE_3}, {@link #NFC_FORUM_TYPE_4},\n     * {@link #MIFARE_CLASSIC} or another NDEF tag type that has not yet been\n     * formalized in this Android API.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return a string representing the NDEF tag type\n     ",
    "links" : [ "#NFC_FORUM_TYPE_4", "#NFC_FORUM_TYPE_3", "#NFC_FORUM_TYPE_2", "#NFC_FORUM_TYPE_1", "#MIFARE_CLASSIC" ]
  }, {
    "name" : "public int getMaxSize()",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum NDEF message size in bytes.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return size in bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWritable()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if the tag is writable.\n     *\n     * <p>NFC Forum tags can be in read-only or read-write states.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * <p>Requires {@link android.Manifest.permission#NFC} permission.\n     *\n     * @return true if the tag is writable\n     ",
    "links" : [ "android.Manifest.permission#NFC" ]
  }, {
    "name" : "public NdefMessage getNdefMessage() throws IOException, FormatException",
    "returnType" : "NdefMessage",
    "comment" : "\n     * Read the current {@link android.nfc.NdefMessage} on this tag.\n     *\n     * <p>This always reads the current NDEF Message stored on the tag.\n     *\n     * <p>Note that this method may return null if the tag was in the\n     * INITIALIZED state as defined by NFC Forum, as in that state the\n     * tag is formatted to support NDEF but does not contain a message yet.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @return the NDEF Message, can be null\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     * @throws FormatException if the NDEF Message on the tag is malformed\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close", "android.nfc.NdefMessage" ]
  }, {
    "name" : "public void writeNdefMessage(NdefMessage msg) throws IOException, FormatException",
    "returnType" : "void",
    "comment" : "\n     * Overwrite the {@link NdefMessage} on this tag.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param msg the NDEF Message to write, must not be null\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     * @throws FormatException if the NDEF Message to write is malformed\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close", "android.nfc.NdefMessage" ]
  }, {
    "name" : "public boolean canMakeReadOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether a tag can be made read-only with {@link #makeReadOnly()}.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return true if it is possible to make this tag read-only\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "#makeReadOnly()" ]
  }, {
    "name" : "public boolean makeReadOnly() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Make a tag read-only.\n     *\n     * <p>This sets the CC field to indicate the tag is read-only,\n     * and where possible permanently sets the lock bits to prevent\n     * any further modification of the memory.\n     * <p>This is a one-way process and cannot be reverted!\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @return true on success, false if it is not possible to make this tag read-only\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  } ],
  "methodNames" : [ "public static Ndef get(Tag tag)", "public NdefMessage getCachedNdefMessage()", "public String getType()", "public int getMaxSize()", "public boolean isWritable()", "public NdefMessage getNdefMessage() throws IOException, FormatException", "public void writeNdefMessage(NdefMessage msg) throws IOException, FormatException", "public boolean canMakeReadOnly()", "public boolean makeReadOnly() throws IOException" ],
  "variableNames" : [ "TAG", "NDEF_MODE_READ_ONLY", "NDEF_MODE_READ_WRITE", "NDEF_MODE_UNKNOWN", "EXTRA_NDEF_MSG", "EXTRA_NDEF_MAXLENGTH", "EXTRA_NDEF_CARDSTATE", "EXTRA_NDEF_TYPE", "TYPE_OTHER", "TYPE_1", "TYPE_2", "TYPE_3", "TYPE_4", "TYPE_MIFARE_CLASSIC", "TYPE_ICODE_SLI", "UNKNOWN", "NFC_FORUM_TYPE_1", "NFC_FORUM_TYPE_2", "NFC_FORUM_TYPE_3", "NFC_FORUM_TYPE_4", "MIFARE_CLASSIC", "ICODE_SLI", "mMaxNdefSize", "mCardState", "mNdefMsg", "mNdefType" ]
}