{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/EdgeEffect.java",
  "packageName" : "android.widget",
  "className" : "EdgeEffect",
  "comment" : "\n * This class performs the graphical effect used at the edges of scrollable widgets\n * when the user scrolls beyond the content bounds in 2D space.\n *\n * <p>EdgeEffect is stateful. Custom widgets using EdgeEffect should create an\n * instance for each edge that should show the effect, feed it input data using\n * the methods {@link #onAbsorb(int)}, {@link #onPull(float)}, and {@link #onRelease()},\n * and draw the effect using {@link #draw(Canvas)} in the widget's overridden\n * {@link android.view.View#draw(Canvas)} method. If {@link #isFinished()} returns\n * false after drawing, the edge effect's animation is not yet complete and the widget\n * should schedule another drawing pass to continue the animation.</p>\n *\n * <p>When drawing, widgets should draw their main content and child views first,\n * usually by invoking <code>super.draw(canvas)</code> from an overridden <code>draw</code>\n * method. (This will invoke onDraw and dispatch drawing to child views as needed.)\n * The edge effect may then be drawn on top of the view's content using the\n * {@link #draw(Canvas)} method.</p>\n ",
  "links" : [ "#onPull(float)", "#draw(Canvas)", "android.view.View#draw(Canvas)", "#onRelease()", "#onAbsorb(int)", "#isFinished()" ],
  "variables" : [ {
    "name" : "USE_STRETCH_EDGE_EFFECT_BY_DEFAULT",
    "type" : "long",
    "comment" : "\n     * This sets the edge effect to use stretch instead of glow.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_BLEND_MODE",
    "type" : "BlendMode",
    "comment" : "\n     * The default blend mode used by {@link EdgeEffect}.\n     ",
    "links" : [ "android.widget.EdgeEffect" ]
  }, {
    "name" : "TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * Completely disable edge effect\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GLOW",
    "type" : "int",
    "comment" : "\n     * Use a color edge glow for the edge effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_STRETCH",
    "type" : "int",
    "comment" : "\n     * Use a stretch for the edge effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_THRESHOLD",
    "type" : "double",
    "comment" : "\n     * The velocity threshold before the spring animation is considered settled.\n     * The idea here is that velocity should be less than 0.1 pixel per second.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINEAR_VELOCITY_TAKE_OVER",
    "type" : "float",
    "comment" : "\n     * The speed at which we should start linearly interpolating to the destination.\n     * When using a spring, as it gets closer to the destination, the speed drops off exponentially.\n     * Instead of landing very slowly, a better experience is achieved if the final\n     * destination is arrived at quicker.\n     ",
    "links" : [ ]
  }, {
    "name" : "VALUE_THRESHOLD",
    "type" : "double",
    "comment" : "\n     * The value threshold before the spring animation is considered close enough to\n     * the destination to be settled. This should be around 0.01 pixel.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINEAR_DISTANCE_TAKE_OVER",
    "type" : "double",
    "comment" : "\n     * The maximum distance at which we should start linearly interpolating to the destination.\n     * When using a spring, as it gets closer to the destination, the speed drops off exponentially.\n     * Instead of landing very slowly, a better experience is achieved if the final\n     * destination is arrived at quicker.\n     ",
    "links" : [ ]
  }, {
    "name" : "NATURAL_FREQUENCY",
    "type" : "double",
    "comment" : "\n     * The natural frequency of the stretch spring.\n     ",
    "links" : [ ]
  }, {
    "name" : "DAMPING_RATIO",
    "type" : "double",
    "comment" : "\n     * The damping ratio of the stretch spring.\n     ",
    "links" : [ ]
  }, {
    "name" : "ON_ABSORB_VELOCITY_ADJUSTMENT",
    "type" : "float",
    "comment" : "\n     * The variation of the velocity for the stretch effect when it meets the bound.\n     * if value is > 1, it will accentuate the absorption of the movement.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINEAR_STRETCH_INTENSITY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXP_STRETCH_INTENSITY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCROLL_DIST_AFFECTED_BY_EXP_STRETCH",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECEDE_TIME",
    "type" : "int",
    "comment" : " Time it will take the effect to fully recede in ms",
    "links" : [ ]
  }, {
    "name" : "PULL_TIME",
    "type" : "int",
    "comment" : " Time it will take before a pulled glow begins receding in ms",
    "links" : [ ]
  }, {
    "name" : "PULL_DECAY_TIME",
    "type" : "int",
    "comment" : " Time it will take in ms for a pulled glow to decay to partial strength before release",
    "links" : [ ]
  }, {
    "name" : "MAX_ALPHA",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GLOW_ALPHA_START",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_GLOW_SCALE",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PULL_GLOW_BEGIN",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_VELOCITY",
    "type" : "int",
    "comment" : " Minimum velocity that will be absorbed",
    "links" : [ ]
  }, {
    "name" : "MAX_VELOCITY",
    "type" : "int",
    "comment" : " Maximum velocity, clamps at this value",
    "links" : [ ]
  }, {
    "name" : "EPSILON",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANGLE",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIN",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COS",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RADIUS_FACTOR",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlowAlpha",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlowScaleY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDistance",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVelocity",
    "type" : "float",
    "comment" : " only for stretch animations",
    "links" : [ ]
  }, {
    "name" : "mGlowAlphaStart",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlowAlphaFinish",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlowScaleYStart",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlowScaleYFinish",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_IDLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_PULL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_ABSORB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_RECEDE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_PULL_DECAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PULL_DISTANCE_ALPHA_GLOW_FACTOR",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_GLOW_FACTOR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPullDistance",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRadius",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBaseGlowScale",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplacement",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetDisplacement",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEdgeEffectType",
    "type" : "int",
    "comment" : "\n     * Current edge effect type, consumers should always query\n     * {@link #getCurrentEdgeEffectBehavior()} instead of this parameter\n     * directly in case animations have been disabled (ex. for accessibility reasons)\n     ",
    "links" : [ "#getCurrentEdgeEffectBehavior()" ]
  }, {
    "name" : "mTmpMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpPoints",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private int getCurrentEdgeEffectBehavior()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSize(int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Set the size of this edge effect in pixels.\n     *\n     * @param width Effect width in pixels\n     * @param height Effect height in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFinished()",
    "returnType" : "boolean",
    "comment" : "\n     * Reports if this EdgeEffect's animation is finished. If this method returns false\n     * after a call to {@link #draw(Canvas)} the host widget should schedule another\n     * drawing pass to continue the animation.\n     *\n     * @return true if animation is finished, false if drawing should continue on the next frame.\n     ",
    "links" : [ "#draw(Canvas)" ]
  }, {
    "name" : "public void finish()",
    "returnType" : "void",
    "comment" : "\n     * Immediately finish the current animation.\n     * After this call {@link #isFinished()} will return true.\n     ",
    "links" : [ "#isFinished()" ]
  }, {
    "name" : "public void onPull(float deltaDistance)",
    "returnType" : "void",
    "comment" : "\n     * A view should call this when content is pulled away from an edge by the user.\n     * This will update the state of the current visual effect and its associated animation.\n     * The host view should always {@link android.view.View#invalidate()} after this\n     * and draw the results accordingly.\n     *\n     * <p>Views using EdgeEffect should favor {@link #onPull(float, float)} when the displacement\n     * of the pull point is known.</p>\n     *\n     * @param deltaDistance Change in distance since the last call. Values may be 0 (no change) to\n     *                      1.f (full length of the view) or negative values to express change\n     *                      back toward the edge reached to initiate the effect.\n     ",
    "links" : [ "android.view.View#invalidate()", "#onPull(float" ]
  }, {
    "name" : "public void onPull(float deltaDistance, float displacement)",
    "returnType" : "void",
    "comment" : "\n     * A view should call this when content is pulled away from an edge by the user.\n     * This will update the state of the current visual effect and its associated animation.\n     * The host view should always {@link android.view.View#invalidate()} after this\n     * and draw the results accordingly.\n     *\n     * @param deltaDistance Change in distance since the last call. Values may be 0 (no change) to\n     *                      1.f (full length of the view) or negative values to express change\n     *                      back toward the edge reached to initiate the effect.\n     * @param displacement The displacement from the starting side of the effect of the point\n     *                     initiating the pull. In the case of touch this is the finger position.\n     *                     Values may be from 0-1.\n     ",
    "links" : [ "android.view.View#invalidate()" ]
  }, {
    "name" : "public float onPullDistance(float deltaDistance, float displacement)",
    "returnType" : "float",
    "comment" : "\n     * A view should call this when content is pulled away from an edge by the user.\n     * This will update the state of the current visual effect and its associated animation.\n     * The host view should always {@link android.view.View#invalidate()} after this\n     * and draw the results accordingly. This works similarly to {@link #onPull(float, float)},\n     * but returns the amount of <code>deltaDistance</code> that has been consumed. If the\n     * {@link #getDistance()} is currently 0 and <code>deltaDistance</code> is negative, this\n     * function will return 0 and the drawn value will remain unchanged.\n     *\n     * This method can be used to reverse the effect from a pull or absorb and partially consume\n     * some of a motion:\n     *\n     * <pre class=\"prettyprint\">\n     *     if (deltaY < 0) {\n     *         float consumed = edgeEffect.onPullDistance(deltaY / getHeight(), x / getWidth());\n     *         deltaY -= consumed * getHeight();\n     *         if (edgeEffect.getDistance() == 0f) edgeEffect.onRelease();\n     *     }\n     * </pre>\n     *\n     * @param deltaDistance Change in distance since the last call. Values may be 0 (no change) to\n     *                      1.f (full length of the view) or negative values to express change\n     *                      back toward the edge reached to initiate the effect.\n     * @param displacement The displacement from the starting side of the effect of the point\n     *                     initiating the pull. In the case of touch this is the finger position.\n     *                     Values may be from 0-1.\n     * @return The amount of <code>deltaDistance</code> that was consumed, a number between\n     * 0 and <code>deltaDistance</code>.\n     ",
    "links" : [ "android.view.View#invalidate()", "#getDistance()", "#onPull(float" ]
  }, {
    "name" : "public float getDistance()",
    "returnType" : "float",
    "comment" : "\n     * Returns the pull distance needed to be released to remove the showing effect.\n     * It is determined by the {@link #onPull(float, float)} <code>deltaDistance</code> and\n     * any animating values, including from {@link #onAbsorb(int)} and {@link #onRelease()}.\n     *\n     * This can be used in conjunction with {@link #onPullDistance(float, float)} to\n     * release the currently showing effect.\n     *\n     * @return The pull distance that must be released to remove the showing effect.\n     ",
    "links" : [ "#onPull(float", "#onPullDistance(float", "#onRelease()", "#onAbsorb(int)" ]
  }, {
    "name" : "public void onRelease()",
    "returnType" : "void",
    "comment" : "\n     * Call when the object is released after being pulled.\n     * This will begin the \"decay\" phase of the effect. After calling this method\n     * the host view should {@link android.view.View#invalidate()} and thereby\n     * draw the results accordingly.\n     ",
    "links" : [ "android.view.View#invalidate()" ]
  }, {
    "name" : "public void onAbsorb(int velocity)",
    "returnType" : "void",
    "comment" : "\n     * Call when the effect absorbs an impact at the given velocity.\n     * Used when a fling reaches the scroll boundary.\n     *\n     * <p>When using a {@link android.widget.Scroller} or {@link android.widget.OverScroller},\n     * the method <code>getCurrVelocity</code> will provide a reasonable approximation\n     * to use here.</p>\n     *\n     * @param velocity Velocity at impact in pixels per second.\n     ",
    "links" : [ "android.widget.OverScroller", "android.widget.Scroller" ]
  }, {
    "name" : "public void setColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Set the color of this edge effect in argb.\n     *\n     * @param color Color in argb\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBlendMode(@Nullable BlendMode blendmode)",
    "returnType" : "void",
    "comment" : "\n     * Set or clear the blend mode. A blend mode defines how source pixels\n     * (generated by a drawing command) are composited with the destination pixels\n     * (content of the render target).\n     * <p />\n     * Pass null to clear any previous blend mode.\n     * <p />\n     *\n     * @see BlendMode\n     *\n     * @param blendmode May be null. The blend mode to be installed in the paint\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColor()",
    "returnType" : "int",
    "comment" : "\n     * Return the color of this edge effect in argb.\n     * @return The color of this edge effect in argb\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Returns the blend mode. A blend mode defines how source pixels\n     * (generated by a drawing command) are composited with the destination pixels\n     * (content of the render target).\n     * <p />\n     *\n     * @return BlendMode\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean draw(Canvas canvas)",
    "returnType" : "boolean",
    "comment" : "\n     * Draw into the provided canvas. Assumes that the canvas has been rotated\n     * accordingly and the size has been set. The effect will be drawn the full\n     * width of X=0 to X=width, beginning from Y=0 and extending to some factor <\n     * 1.f of height. The effect will only be visible on a\n     * hardware canvas, e.g. {@link RenderNode#beginRecording()}.\n     *\n     * @param canvas Canvas to draw into\n     * @return true if drawing should continue beyond this frame to continue the\n     *         animation\n     ",
    "links" : [ "android.graphics.RenderNode#beginRecording()" ]
  }, {
    "name" : "private float min(float f1, float f2, float f3, float f4)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float max(float f1, float f2, float f3, float f4)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaxHeight()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum height that the edge effect will be drawn at given the original\n     * {@link #setSize(int, int) input size}.\n     * @return The maximum height of the edge effect\n     ",
    "links" : [ "#setSize(int" ]
  }, {
    "name" : "private void update()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSpring()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float calculateDistanceFromGlowValues(float scale, float alpha)",
    "returnType" : "float",
    "comment" : "\n     * @return The estimated pull distance as calculated from mGlowScaleY.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isAtEquilibrium()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the spring used for calculating the stretch animation is\n     * considered at rest or false if it is still animating.\n     ",
    "links" : [ ]
  }, {
    "name" : "private float dampStretchVector(float normalizedVec)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private int getCurrentEdgeEffectBehavior()", "public void setSize(int width, int height)", "public boolean isFinished()", "public void finish()", "public void onPull(float deltaDistance)", "public void onPull(float deltaDistance, float displacement)", "public float onPullDistance(float deltaDistance, float displacement)", "public float getDistance()", "public void onRelease()", "public void onAbsorb(int velocity)", "public void setColor(@ColorInt int color)", "public void setBlendMode(@Nullable BlendMode blendmode)", "public int getColor()", "public BlendMode getBlendMode()", "public boolean draw(Canvas canvas)", "private float min(float f1, float f2, float f3, float f4)", "private float max(float f1, float f2, float f3, float f4)", "public int getMaxHeight()", "private void update()", "private void updateSpring()", "private float calculateDistanceFromGlowValues(float scale, float alpha)", "private boolean isAtEquilibrium()", "private float dampStretchVector(float normalizedVec)" ],
  "variableNames" : [ "USE_STRETCH_EDGE_EFFECT_BY_DEFAULT", "DEFAULT_BLEND_MODE", "TYPE_NONE", "TYPE_GLOW", "TYPE_STRETCH", "VELOCITY_THRESHOLD", "LINEAR_VELOCITY_TAKE_OVER", "VALUE_THRESHOLD", "LINEAR_DISTANCE_TAKE_OVER", "NATURAL_FREQUENCY", "DAMPING_RATIO", "ON_ABSORB_VELOCITY_ADJUSTMENT", "LINEAR_STRETCH_INTENSITY", "EXP_STRETCH_INTENSITY", "SCROLL_DIST_AFFECTED_BY_EXP_STRETCH", "TAG", "RECEDE_TIME", "PULL_TIME", "PULL_DECAY_TIME", "MAX_ALPHA", "GLOW_ALPHA_START", "MAX_GLOW_SCALE", "PULL_GLOW_BEGIN", "MIN_VELOCITY", "MAX_VELOCITY", "EPSILON", "ANGLE", "SIN", "COS", "RADIUS_FACTOR", "mGlowAlpha", "mGlowScaleY", "mDistance", "mVelocity", "mGlowAlphaStart", "mGlowAlphaFinish", "mGlowScaleYStart", "mGlowScaleYFinish", "mStartTime", "mDuration", "mInterpolator", "STATE_IDLE", "STATE_PULL", "STATE_ABSORB", "STATE_RECEDE", "STATE_PULL_DECAY", "PULL_DISTANCE_ALPHA_GLOW_FACTOR", "VELOCITY_GLOW_FACTOR", "mState", "mPullDistance", "mBounds", "mWidth", "mHeight", "mPaint", "mRadius", "mBaseGlowScale", "mDisplacement", "mTargetDisplacement", "mEdgeEffectType", "mTmpMatrix", "mTmpPoints" ]
}