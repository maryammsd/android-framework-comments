{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/transformer/TransformerHandlerImpl.java",
  "packageName" : "org.apache.xalan.transformer",
  "className" : "TransformerHandlerImpl",
  "comment" : "\n * A TransformerHandler\n * listens for SAX ContentHandler parse events and transforms\n * them to a Result.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_optimizer",
    "type" : "boolean",
    "comment" : "\n     * The flag for the setting of the optimize feature;\n     ",
    "links" : [ ]
  }, {
    "name" : "m_incremental",
    "type" : "boolean",
    "comment" : "\n     * The flag for the setting of the incremental feature;\n     ",
    "links" : [ ]
  }, {
    "name" : "m_source_location",
    "type" : "boolean",
    "comment" : "\n     * The flag for the setting of the source_location feature;\n     ",
    "links" : [ ]
  }, {
    "name" : "m_insideParse",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " Set to true for diagnostics output.         ",
    "links" : [ ]
  }, {
    "name" : "m_transformer",
    "type" : "TransformerImpl",
    "comment" : "\n   * The transformer this will use to transform a\n   * source tree into a result tree.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_baseSystemID",
    "type" : "String",
    "comment" : " The system ID to use as a base for relative URLs. ",
    "links" : [ ]
  }, {
    "name" : "m_result",
    "type" : "Result",
    "comment" : " The result for the transformation. ",
    "links" : [ ]
  }, {
    "name" : "m_locator",
    "type" : "Locator",
    "comment" : " The locator for this TransformerHandler. ",
    "links" : [ ]
  }, {
    "name" : "m_entityResolver",
    "type" : "EntityResolver",
    "comment" : " The entity resolver to aggregate to. ",
    "links" : [ ]
  }, {
    "name" : "m_dtdHandler",
    "type" : "DTDHandler",
    "comment" : " The DTD handler to aggregate to. ",
    "links" : [ ]
  }, {
    "name" : "m_contentHandler",
    "type" : "ContentHandler",
    "comment" : " The content handler to aggregate to. ",
    "links" : [ ]
  }, {
    "name" : "m_errorHandler",
    "type" : "ErrorHandler",
    "comment" : " The error handler to aggregate to. ",
    "links" : [ ]
  }, {
    "name" : "m_lexicalHandler",
    "type" : "LexicalHandler",
    "comment" : " The lexical handler to aggregate to. ",
    "links" : [ ]
  }, {
    "name" : "m_declHandler",
    "type" : "DeclHandler",
    "comment" : " The decl handler to aggregate to. ",
    "links" : [ ]
  }, {
    "name" : "m_dtm",
    "type" : "DTM",
    "comment" : " The Document Table Instance we are transforming. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void clearCoRoutine()",
    "returnType" : "void",
    "comment" : " \n   * Do what needs to be done to shut down the CoRoutine management.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void clearCoRoutine(SAXException ex)",
    "returnType" : "void",
    "comment" : " \n   * Do what needs to be done to shut down the CoRoutine management.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setResult(Result result) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n   * Enables the user of the TransformerHandler to set the\n   * to set the Result for the transformation.\n   *\n   * @param result A Result instance, should not be null.\n   *\n   * @throws IllegalArgumentException if result is invalid for some reason.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemId(String systemID)",
    "returnType" : "void",
    "comment" : "\n   * Set the base ID (URI or system ID) from where relative\n   * URLs will be resolved.\n   * @param systemID Base URI for the source tree.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getSystemId()",
    "returnType" : "String",
    "comment" : "\n   * Get the base ID (URI or system ID) from where relative\n   * URLs will be resolved.\n   * @return The systemID that was set with {@link #setSystemId}.\n   ",
    "links" : [ "#setSystemId" ]
  }, {
    "name" : "public Transformer getTransformer()",
    "returnType" : "Transformer",
    "comment" : "\n   * Get the Transformer associated with this handler, which\n   * is needed in order to set parameters and output properties.\n   *\n   * @return The Transformer associated with this handler\n   ",
    "links" : [ ]
  }, {
    "name" : "public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException",
    "returnType" : "InputSource",
    "comment" : "\n   * Filter an external entity resolution.\n   *\n   * @param publicId The entity's public identifier, or null.\n   * @param systemId The entity's system identifier.\n   * @return A new InputSource or null for the default.\n   *\n   * @throws IOException\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @throws java.io.IOException The client may throw an\n   *            I/O-related exception while obtaining the\n   *            new InputSource.\n   * @see org.xml.sax.EntityResolver#resolveEntity\n   ",
    "links" : [ ]
  }, {
    "name" : "public void notationDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter a notation declaration event.\n   *\n   * @param name The notation name.\n   * @param publicId The notation's public identifier, or null.\n   * @param systemId The notation's system identifier, or null.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.DTDHandler#notationDecl\n   ",
    "links" : [ ]
  }, {
    "name" : "public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter an unparsed entity declaration event.\n   *\n   * @param name The entity name.\n   * @param publicId The entity's public identifier, or null.\n   * @param systemId The entity's system identifier, or null.\n   * @param notationName The name of the associated notation.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "\n   * Filter a new document locator event.\n   *\n   * @param locator The document locator.\n   * @see org.xml.sax.ContentHandler#setDocumentLocator\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter a start document event.\n   *\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ContentHandler#startDocument\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter an end document event.\n   *\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ContentHandler#endDocument\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter a start Namespace prefix mapping event.\n   *\n   * @param prefix The Namespace prefix.\n   * @param uri The Namespace URI.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ContentHandler#startPrefixMapping\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(String prefix) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter an end Namespace prefix mapping event.\n   *\n   * @param prefix The Namespace prefix.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ContentHandler#endPrefixMapping\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter a start element event.\n   *\n   * @param uri The element's Namespace URI, or the empty string.\n   * @param localName The element's local name, or the empty string.\n   * @param qName The element's qualified (prefixed) name, or the empty\n   *        string.\n   * @param atts The element's attributes.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ContentHandler#startElement\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String uri, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter an end element event.\n   *\n   * @param uri The element's Namespace URI, or the empty string.\n   * @param localName The element's local name, or the empty string.\n   * @param qName The element's qualified (prefixed) name, or the empty\n   *        string.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ContentHandler#endElement\n   ",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter a character data event.\n   *\n   * @param ch An array of characters.\n   * @param start The starting position in the array.\n   * @param length The number of characters to use from the array.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ContentHandler#characters\n   ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter an ignorable whitespace event.\n   *\n   * @param ch An array of characters.\n   * @param start The starting position in the array.\n   * @param length The number of characters to use from the array.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ContentHandler#ignorableWhitespace\n   ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter a processing instruction event.\n   *\n   * @param target The processing instruction target.\n   * @param data The text following the target.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ContentHandler#processingInstruction\n   ",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter a skipped entity event.\n   *\n   * @param name The name of the skipped entity.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ContentHandler#skippedEntity\n   ",
    "links" : [ ]
  }, {
    "name" : "public void warning(SAXParseException e) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter a warning event.\n   *\n   * @param e The nwarning as an exception.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ErrorHandler#warning\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(SAXParseException e) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter an error event.\n   *\n   * @param e The error as an exception.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ErrorHandler#error\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fatalError(SAXParseException e) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Filter a fatal error event.\n   *\n   * @param e The error as an exception.\n   * @throws SAXException The client may throw\n   *            an exception during processing.\n   * @see org.xml.sax.ErrorHandler#fatalError\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startDTD(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the start of DTD declarations, if any.\n   *\n   * <p>Any declarations are assumed to be in the internal subset\n   * unless otherwise indicated by a {@link #startEntity startEntity}\n   * event.</p>\n   *\n   * <p>Note that the start/endDTD events will appear within\n   * the start/endDocument events from ContentHandler and\n   * before the first startElement event.</p>\n   *\n   * @param name The document type name.\n   * @param publicId The declared public identifier for the\n   *        external DTD subset, or null if none was declared.\n   * @param systemId The declared system identifier for the\n   *        external DTD subset, or null if none was declared.\n   * @throws SAXException The application may raise an\n   *            exception.\n   * @see #endDTD\n   * @see #startEntity\n   ",
    "links" : [ "#startEntity" ]
  }, {
    "name" : "public void endDTD() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the end of DTD declarations.\n   *\n   * @throws SAXException The application may raise an exception.\n   * @see #startDTD\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the beginning of an entity in content.\n   *\n   * <p><strong>NOTE:</entity> entity references in attribute\n   * values -- and the start and end of the document entity --\n   * are never reported.</p>\n   *\n   * <p>The start and end of the external DTD subset are reported\n   * using the pseudo-name \"[dtd]\".  All other events must be\n   * properly nested within start/end entity events.</p>\n   *\n   * <p>Note that skipped entities will be reported through the\n   * {@link org.xml.sax.ContentHandler#skippedEntity skippedEntity}\n   * event, which is part of the ContentHandler interface.</p>\n   *\n   * @param name The name of the entity.  If it is a parameter\n   *        entity, the name will begin with '%'.\n   * @throws SAXException The application may raise an exception.\n   * @see #endEntity\n   * @see org.xml.sax.ext.DeclHandler#internalEntityDecl\n   * @see org.xml.sax.ext.DeclHandler#externalEntityDecl\n   ",
    "links" : [ "org.xml.sax.ContentHandler#skippedEntity" ]
  }, {
    "name" : "public void endEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the end of an entity.\n   *\n   * @param name The name of the entity that is ending.\n   * @throws SAXException The application may raise an exception.\n   * @see #startEntity\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the start of a CDATA section.\n   *\n   * <p>The contents of the CDATA section will be reported through\n   * the regular {@link org.xml.sax.ContentHandler#characters\n   * characters} event.</p>\n   *\n   * @throws SAXException The application may raise an exception.\n   * @see #endCDATA\n   ",
    "links" : [ "org.xml.sax.ContentHandler#characterscharacters" ]
  }, {
    "name" : "public void endCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the end of a CDATA section.\n   *\n   * @throws SAXException The application may raise an exception.\n   * @see #startCDATA\n   ",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report an XML comment anywhere in the document.\n   *\n   * <p>This callback will be used for comments inside or outside the\n   * document element, including comments in the external DTD\n   * subset (if read).</p>\n   *\n   * @param ch An array holding the characters in the comment.\n   * @param start The starting position in the array.\n   * @param length The number of characters to use from the array.\n   * @throws SAXException The application may raise an exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void elementDecl(String name, String model) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report an element type declaration.\n   *\n   * <p>The content model will consist of the string \"EMPTY\", the\n   * string \"ANY\", or a parenthesised group, optionally followed\n   * by an occurrence indicator.  The model will be normalized so\n   * that all whitespace is removed,and will include the enclosing\n   * parentheses.</p>\n   *\n   * @param name The element type name.\n   * @param model The content model as a normalized string.\n   * @throws SAXException The application may raise an exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void attributeDecl(String eName, String aName, String type, String valueDefault, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report an attribute type declaration.\n   *\n   * <p>Only the effective (first) declaration for an attribute will\n   * be reported.  The type will be one of the strings \"CDATA\",\n   * \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\",\n   * \"ENTITIES\", or \"NOTATION\", or a parenthesized token group with\n   * the separator \"|\" and all whitespace removed.</p>\n   *\n   * @param eName The name of the associated element.\n   * @param aName The name of the attribute.\n   * @param type A string representing the attribute type.\n   * @param valueDefault A string representing the attribute default\n   *        (\"#IMPLIED\", \"#REQUIRED\", or \"#FIXED\") or null if\n   *        none of these applies.\n   * @param value A string representing the attribute's default value,\n   *        or null if there is none.\n   * @throws SAXException The application may raise an exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void internalEntityDecl(String name, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report an internal entity declaration.\n   *\n   * <p>Only the effective (first) declaration for each entity\n   * will be reported.</p>\n   *\n   * @param name The name of the entity.  If it is a parameter\n   *        entity, the name will begin with '%'.\n   * @param value The replacement text of the entity.\n   * @throws SAXException The application may raise an exception.\n   * @see #externalEntityDecl\n   * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n   ",
    "links" : [ ]
  }, {
    "name" : "public void externalEntityDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report a parsed external entity declaration.\n   *\n   * <p>Only the effective (first) declaration for each entity\n   * will be reported.</p>\n   *\n   * @param name The name of the entity.  If it is a parameter\n   *        entity, the name will begin with '%'.\n   * @param publicId The declared public identifier of the entity, or\n   *        null if none was declared.\n   * @param systemId The declared system identifier of the entity.\n   * @throws SAXException The application may raise an exception.\n   * @see #internalEntityDecl\n   * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void clearCoRoutine()", "protected void clearCoRoutine(SAXException ex)", "public void setResult(Result result) throws IllegalArgumentException", "public void setSystemId(String systemID)", "public String getSystemId()", "public Transformer getTransformer()", "public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException", "public void notationDecl(String name, String publicId, String systemId) throws SAXException", "public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException", "public void setDocumentLocator(Locator locator)", "public void startDocument() throws SAXException", "public void endDocument() throws SAXException", "public void startPrefixMapping(String prefix, String uri) throws SAXException", "public void endPrefixMapping(String prefix) throws SAXException", "public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException", "public void endElement(String uri, String localName, String qName) throws SAXException", "public void characters(char[] ch, int start, int length) throws SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException", "public void processingInstruction(String target, String data) throws SAXException", "public void skippedEntity(String name) throws SAXException", "public void warning(SAXParseException e) throws SAXException", "public void error(SAXParseException e) throws SAXException", "public void fatalError(SAXParseException e) throws SAXException", "public void startDTD(String name, String publicId, String systemId) throws SAXException", "public void endDTD() throws SAXException", "public void startEntity(String name) throws SAXException", "public void endEntity(String name) throws SAXException", "public void startCDATA() throws SAXException", "public void endCDATA() throws SAXException", "public void comment(char[] ch, int start, int length) throws SAXException", "public void elementDecl(String name, String model) throws SAXException", "public void attributeDecl(String eName, String aName, String type, String valueDefault, String value) throws SAXException", "public void internalEntityDecl(String name, String value) throws SAXException", "public void externalEntityDecl(String name, String publicId, String systemId) throws SAXException" ],
  "variableNames" : [ "m_optimizer", "m_incremental", "m_source_location", "m_insideParse", "DEBUG", "m_transformer", "m_baseSystemID", "m_result", "m_locator", "m_entityResolver", "m_dtdHandler", "m_contentHandler", "m_errorHandler", "m_lexicalHandler", "m_declHandler", "m_dtm" ]
}