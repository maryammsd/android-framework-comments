{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/vibrator/persistence/VibrationXmlParser.java",
  "packageName" : "android.os.vibrator.persistence",
  "className" : "VibrationXmlParser",
  "comment" : "\n * Parses XML into a {@link VibrationEffect}.\n *\n * <p>This parser supports a root element that represent a single vibration effect or a selection\n * list of vibration effects.\n *\n * <p>Use the schema at core/xsd/vibrator/vibration/vibration.xsd.\n *\n * <p>When the root element represents a single vibration effect, the format is as follows:\n *\n * * Predefined vibration effects\n *\n * <pre>\n *   {@code\n *     <vibration-effect>\n *       <predefined-effect name=\"click\" />\n *     </vibration-effect>\n *   }\n * </pre>\n *\n * * Waveform vibration effects\n *\n * <pre>\n *   {@code\n *     <vibration-effect>\n *       <waveform-effect>\n *         <waveform-entry amplitude=\"default\" durationMs=\"10\" />\n *         <waveform-entry amplitude=\"0\" durationMs=\"10\" />\n *         <waveform-entry amplitude=\"255\" durationMs=\"100\" />\n *         <repeating>\n *           <waveform-entry amplitude=\"128\" durationMs=\"30\" />\n *           <waveform-entry amplitude=\"192\" durationMs=\"60\" />\n *           <waveform-entry amplitude=\"255\" durationMs=\"20\" />\n *         </repeating>\n *       </waveform-effect>\n *     </vibration-effect>\n *   }\n * </pre>\n *\n * * Primitive composition effects\n *\n * <pre>\n *   {@code\n *     <vibration-effect>\n *       <primitive-effect name=\"click\" />\n *       <primitive-effect name=\"slow_rise\" scale=\"0.8\" />\n *       <primitive-effect name=\"quick_fall\" delayMs=\"50\" />\n *       <primitive-effect name=\"tick\" scale=\"0.5\" delayMs=\"100\" />\n *     </vibration-effect>\n *   }\n * </pre>\n *\n * <p>When the root element represents a selection list of vibration effects, the root tag should be\n * a <vibration-select> tag. The root element should contain a list of vibration serializations.\n * Each vibration within the root-element should follow the format discussed for the\n * <vibration-effect> tag above. See example below:\n *\n * <pre>\n *   {@code\n *     <vibration-select>\n *       <vibration-effect>\n *         <predefined-effect name=\"click\" />\n *       </vibration-effect>\n *       <vibration-effect>\n *         <waveform-effect>\n *           <waveform-entry amplitude=\"default\" durationMs=\"10\" />\n *         </waveform-effect>\n *       </vibration-effect>\n *     </vibration-select>\n *   }\n * </pre>\n *\n * @hide\n ",
  "links" : [ "android.os.VibrationEffect" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APPLICATION_VIBRATION_XML_MIME_TYPE",
    "type" : "String",
    "comment" : "\n     * The MIME type for a xml holding a vibration.\n     *\n     * <p>This should match the type registered at android.mime.types.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ALLOW_HIDDEN_APIS",
    "type" : "int",
    "comment" : " Same as VibrationXmlSerializer",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isSupportedMimeType(@Nullable String mimeType)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this parser supports parsing files of the given MIME type.\n     *\n     * <p>Returns false for {@code null} value.\n     *\n     * <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike the formal\n     * RFC definitions. As a result, you should always write these elements with lower case letters,\n     * or use {@link android.content.Intent#normalizeMimeType} to ensure that they are converted to\n     * lower case.</em>\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Intent#normalizeMimeType" ]
  }, {
    "name" : "public static VibrationEffect parseVibrationEffect(@NonNull Reader reader) throws IOException",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Parses XML content from given input stream into a {@link VibrationEffect}.\n     *\n     * <p>This method parses an XML content that contains a single, complete {@link VibrationEffect}\n     * serialization. As such, the root tag must be a \"vibration\" tag.\n     *\n     * <p>This parser fails silently and returns {@code null} if the content of the input stream\n     * does not follow the schema or has unsupported values.\n     *\n     * @return the {@link VibrationEffect} if parsed successfully, {@code null} otherwise.\n     * @throws IOException error reading from given {@link Reader}\n     *\n     * @hide\n     ",
    "links" : [ "android.os.VibrationEffect", "com.android.internal.vibrator.persistence.XmlReader" ]
  }, {
    "name" : "public static VibrationEffect parseVibrationEffect(@NonNull Reader reader, @Flags int flags) throws IOException",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Parses XML content from given input stream into a {@link VibrationEffect}.\n     *\n     * <p>This method parses an XML content that contains a single, complete {@link VibrationEffect}\n     * serialization. As such, the root tag must be a \"vibration\" tag.\n     *\n     * <p>Same as {@link #parseVibrationEffect(Reader)}, with extra flags to control the parsing\n     * behavior.\n     *\n     * @hide\n     ",
    "links" : [ "#parseVibrationEffect(Reader)", "android.os.VibrationEffect" ]
  }, {
    "name" : "public static ParsedVibration parseDocument(@NonNull Reader reader) throws IOException",
    "returnType" : "ParsedVibration",
    "comment" : "\n     * Parses XML content from given input stream into a {@link ParsedVibration}.\n     *\n     * <p>It supports both the \"vibration\" and \"vibration-select\" root tags.\n     * <ul>\n     *     <li>If \"vibration\" is the root tag, the serialization provided through {@code reader}\n     *         should contain a valid serialization for a single vibration.\n     *     <li>If \"vibration-select\" is the root tag, the serialization may contain one or more\n     *         valid vibration serializations.\n     * </ul>\n     *\n     * <p>After parsing, it returns a {@link ParsedVibration} that opaquely represents the parsed\n     * vibration(s), and the caller can get a concrete {@link VibrationEffect} by resolving this\n     * result to a specific vibrator.\n     *\n     * <p>This parser fails silently and returns {@code null} if the content of the input does not\n     * follow the schema or has unsupported values.\n     *\n     * @return a {@link ParsedVibration}\n     * @throws IOException error reading from given {@link Reader}\n     *\n     * @hide\n     ",
    "links" : [ "android.os.VibrationEffect", "android.os.vibrator.persistence.ParsedVibration", "com.android.internal.vibrator.persistence.XmlReader" ]
  }, {
    "name" : "public static ParsedVibration parseDocument(@NonNull Reader reader, @Flags int flags) throws IOException",
    "returnType" : "ParsedVibration",
    "comment" : "\n     * Parses XML content from given input stream into a {@link ParsedVibration}.\n     *\n     * <p>Same as {@link #parseDocument(Reader)}, with extra flags to control the parsing behavior.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.vibrator.persistence.ParsedVibration", "#parseDocument(Reader)" ]
  }, {
    "name" : "public static ParsedVibration parseElement(@NonNull TypedXmlPullParser parser, @Flags int flags) throws IOException, VibrationXmlParserException",
    "returnType" : "ParsedVibration",
    "comment" : "\n     * Parses XML content from a given open {@link TypedXmlPullParser} into a\n     * {@link ParsedVibration}.\n     *\n     * <p>Same as {@link #parseDocument(Reader, int)}, but, instead of parsing the full XML content,\n     * it takes a parser that points to either a <vibration-effect> or a <vibration-select> start\n     * tag. No other parser position, including start of document, is considered valid.\n     *\n     * <p>This method parses until an end \"vibration-effect\" or \"vibration-select\" tag (depending\n     * on the start tag found at the start of parsing). After a successful parsing, the parser\n     * will point to the end tag.\n     *\n     * @throws IOException error parsing from given {@link TypedXmlPullParser}.\n     * @throws VibrationXmlParserException if the XML tag cannot be parsed into a\n     *      {@link ParsedVibration}. The given {@code parser} might be pointing to a child XML tag\n     *      that caused the parser failure.\n     *\n     * @hide\n     ",
    "links" : [ "#parseDocument(Reader", "android.os.vibrator.persistence.ParsedVibration", "com.android.modules.utils.TypedXmlPullParser" ]
  }, {
    "name" : "private static ParsedVibration parseElementInternal(@NonNull TypedXmlPullParser parser, @Flags int flags) throws IOException, XmlParserException",
    "returnType" : "ParsedVibration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParsedVibration parseVibrationSelectInternal(@NonNull TypedXmlPullParser parser, @Flags int flags) throws IOException, XmlParserException",
    "returnType" : "ParsedVibration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static VibrationEffect parseVibrationEffectInternal(@NonNull TypedXmlPullParser parser, @Flags int flags) throws IOException, XmlParserException",
    "returnType" : "VibrationEffect",
    "comment" : " Parses a single XML element for \"vibration\" tag into a {@link VibrationEffect}. ",
    "links" : [ "android.os.VibrationEffect" ]
  }, {
    "name" : "private static T parseDocumentInternal(@NonNull Reader reader, @Flags int flags, ElementParser<T> parseLogic) throws IOException, XmlParserException, XmlPullParserException",
    "returnType" : "T",
    "comment" : "\n     * This method parses a whole XML document (provided through a {@link Reader}). The root tag is\n     * parsed as per a provided {@link ElementParser}.\n     ",
    "links" : [ "com.android.internal.vibrator.persistence.XmlReader", "ElementParser" ]
  } ],
  "methodNames" : [ "public static boolean isSupportedMimeType(@Nullable String mimeType)", "public static VibrationEffect parseVibrationEffect(@NonNull Reader reader) throws IOException", "public static VibrationEffect parseVibrationEffect(@NonNull Reader reader, @Flags int flags) throws IOException", "public static ParsedVibration parseDocument(@NonNull Reader reader) throws IOException", "public static ParsedVibration parseDocument(@NonNull Reader reader, @Flags int flags) throws IOException", "public static ParsedVibration parseElement(@NonNull TypedXmlPullParser parser, @Flags int flags) throws IOException, VibrationXmlParserException", "private static ParsedVibration parseElementInternal(@NonNull TypedXmlPullParser parser, @Flags int flags) throws IOException, XmlParserException", "private static ParsedVibration parseVibrationSelectInternal(@NonNull TypedXmlPullParser parser, @Flags int flags) throws IOException, XmlParserException", "private static VibrationEffect parseVibrationEffectInternal(@NonNull TypedXmlPullParser parser, @Flags int flags) throws IOException, XmlParserException", "private static T parseDocumentInternal(@NonNull Reader reader, @Flags int flags, ElementParser<T> parseLogic) throws IOException, XmlParserException, XmlPullParserException" ],
  "variableNames" : [ "TAG", "APPLICATION_VIBRATION_XML_MIME_TYPE", "FLAG_ALLOW_HIDDEN_APIS" ]
}