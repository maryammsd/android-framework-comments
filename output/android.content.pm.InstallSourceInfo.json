{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/InstallSourceInfo.java",
  "packageName" : "android.content.pm",
  "className" : "InstallSourceInfo",
  "comment" : "\n * Information about how an app was installed.\n * @see PackageManager#getInstallSourceInfo(String)\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mInitiatingPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitiatingPackageSigningInfo",
    "type" : "SigningInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOriginatingPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstallingPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateOwnerPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<InstallSourceInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getInitiatingPackageName()",
    "returnType" : "String",
    "comment" : "\n     * The name of the package that requested the installation, or null if not available.\n     *\n     * This is normally the same as the installing package name. If the installing package name\n     * is changed, for example by calling\n     * {@link PackageManager#setInstallerPackageName(String, String)}, the initiating package name\n     * remains unchanged. It continues to identify the actual package that performed the install\n     * or update.\n     * <p>\n     * Null may be returned if the app was not installed by a package (e.g. a system app) or if the\n     * initiating package has itself been uninstalled.\n     ",
    "links" : [ "android.content.pm.PackageManager#setInstallerPackageName(String" ]
  }, {
    "name" : "public SigningInfo getInitiatingPackageSigningInfo()",
    "returnType" : "SigningInfo",
    "comment" : "\n     * Information about the signing certificates used to sign the initiating package, if available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOriginatingPackageName()",
    "returnType" : "String",
    "comment" : "\n     * The name of the package on behalf of which the initiating package requested the installation,\n     * or null if not available.\n     * <p>\n     * For example if a downloaded APK is installed via the Package Installer this could be the\n     * app that performed the download. This value is provided by the initiating package and not\n     * verified by the framework.\n     * <p>\n     * Note that the {@code InstallSourceInfo} returned by\n     * {@link PackageManager#getInstallSourceInfo(String)} will not have this information\n     * available unless the calling application holds the INSTALL_PACKAGES permission.\n     ",
    "links" : [ "android.content.pm.PackageManager#getInstallSourceInfo(String)" ]
  }, {
    "name" : "public String getInstallingPackageName()",
    "returnType" : "String",
    "comment" : "\n     * The name of the package responsible for the installation (the installer of record), or null\n     * if not available.\n     * Note that this may differ from the initiating package name and can be modified via\n     * {@link PackageManager#setInstallerPackageName(String, String)}.\n     * <p>\n     * Null may be returned if the app was not installed by a package (e.g. a system app or an app\n     * installed via adb) or if the installing package has itself been uninstalled.\n     ",
    "links" : [ "android.content.pm.PackageManager#setInstallerPackageName(String" ]
  }, {
    "name" : "public String getUpdateOwnerPackageName()",
    "returnType" : "String",
    "comment" : "\n     * The name of the package that is the update owner, or null if not available.\n     *\n     * This indicates the update ownership enforcement is enabled for this app,\n     * and which package is the update owner.\n     *\n     * Returns null if the update ownership enforcement is disabled for the app.\n     *\n     * @see PackageInstaller.SessionParams#setRequestUpdateOwnership\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPackageSource()",
    "returnType" : "int",
    "comment" : "\n     * Information about the package source when installer installed this app.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public String getInitiatingPackageName()", "public SigningInfo getInitiatingPackageSigningInfo()", "public String getOriginatingPackageName()", "public String getInstallingPackageName()", "public String getUpdateOwnerPackageName()", "public int getPackageSource()" ],
  "variableNames" : [ "mInitiatingPackageName", "mInitiatingPackageSigningInfo", "mOriginatingPackageName", "mInstallingPackageName", "mUpdateOwnerPackageName", "mPackageSource", "CREATOR" ]
}