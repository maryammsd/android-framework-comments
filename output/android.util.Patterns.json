{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/Patterns.java",
  "packageName" : "android.util",
  "className" : "Patterns",
  "comment" : "\n * Commonly used regular expression patterns.\n ",
  "variables" : [ {
    "name" : "TOP_LEVEL_DOMAIN_STR",
    "type" : "String",
    "comment" : "\n     *  Regular expression to match all IANA top-level domains.\n     *  List accurate as of 2011/07/18.  List taken from:\n     *  http://data.iana.org/TLD/tlds-alpha-by-domain.txt\n     *  This pattern is auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py\n     *\n     *  @deprecated Due to the recent profileration of gTLDs, this API is\n     *  expected to become out-of-date very quickly. Therefore it is now\n     *  deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "TOP_LEVEL_DOMAIN",
    "type" : "Pattern",
    "comment" : "\n     *  Regular expression pattern to match all IANA top-level domains.\n     *  @deprecated This API is deprecated. See {@link #TOP_LEVEL_DOMAIN_STR}.\n     ",
    "links" : [ "#TOP_LEVEL_DOMAIN_STR" ]
  }, {
    "name" : "TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL",
    "type" : "String",
    "comment" : "\n     *  Regular expression to match all IANA top-level domains for WEB_URL.\n     *  List accurate as of 2011/07/18.  List taken from:\n     *  http://data.iana.org/TLD/tlds-alpha-by-domain.txt\n     *  This pattern is auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py\n     *\n     *  @deprecated This API is deprecated. See {@link #TOP_LEVEL_DOMAIN_STR}.\n     ",
    "links" : [ "#TOP_LEVEL_DOMAIN_STR" ]
  }, {
    "name" : "IANA_TOP_LEVEL_DOMAINS",
    "type" : "String",
    "comment" : "\n     *  Regular expression to match all IANA top-level domains.\n     *\n     *  List accurate as of 2015/11/24.  List taken from:\n     *  http://data.iana.org/TLD/tlds-alpha-by-domain.txt\n     *  This pattern is auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py\n     *\n     *  @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GOOD_IRI_CHAR",
    "type" : "String",
    "comment" : "\n     * Kept for backward compatibility reasons.\n     *\n     * @deprecated Deprecated since it does not include all IRI characters defined in RFC 3987\n     ",
    "links" : [ ]
  }, {
    "name" : "IP_ADDRESS_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IP_ADDRESS",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UCS_CHAR",
    "type" : "String",
    "comment" : "\n     * Valid UCS characters defined in RFC 3987. Excludes space characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "LABEL_CHAR",
    "type" : "String",
    "comment" : "\n     * Valid characters for IRI label defined in RFC 3987.\n     ",
    "links" : [ ]
  }, {
    "name" : "TLD_CHAR",
    "type" : "String",
    "comment" : "\n     * Valid characters for IRI TLD defined in RFC 3987.\n     ",
    "links" : [ ]
  }, {
    "name" : "IRI_LABEL",
    "type" : "String",
    "comment" : "\n     * RFC 1035 Section 2.3.4 limits the labels to a maximum 63 octets.\n     ",
    "links" : [ ]
  }, {
    "name" : "PUNYCODE_TLD",
    "type" : "String",
    "comment" : "\n     * RFC 3492 references RFC 1034 and limits Punycode algorithm output to 63 characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "TLD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOST_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOMAIN_NAME_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOMAIN_NAME",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WORD_BOUNDARY",
    "type" : "String",
    "comment" : " A word boundary or end of input.  This is to stop foo.sure from matching as foo.su ",
    "links" : [ ]
  }, {
    "name" : "USER_INFO",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PORT_NUMBER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PATH_AND_QUERY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEB_URL",
    "type" : "Pattern",
    "comment" : "\n     *  Regular expression pattern to match most part of RFC 3987\n     *  Internationalized URLs, aka IRIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRICT_TLD",
    "type" : "String",
    "comment" : "\n     * Regular expression that matches known TLDs and punycode TLDs\n     ",
    "links" : [ ]
  }, {
    "name" : "STRICT_HOST_NAME",
    "type" : "String",
    "comment" : "\n     * Regular expression that matches host names using {@link #STRICT_TLD}\n     ",
    "links" : [ "#STRICT_TLD" ]
  }, {
    "name" : "STRICT_DOMAIN_NAME",
    "type" : "String",
    "comment" : "\n     * Regular expression that matches domain names using either {@link #STRICT_HOST_NAME} or\n     * {@link #IP_ADDRESS}\n     ",
    "links" : [ "#STRICT_HOST_NAME", "#IP_ADDRESS" ]
  }, {
    "name" : "RELAXED_DOMAIN_NAME",
    "type" : "String",
    "comment" : "\n     * Regular expression that matches domain names without a TLD\n     ",
    "links" : [ ]
  }, {
    "name" : "WEB_URL_WITHOUT_PROTOCOL",
    "type" : "String",
    "comment" : "\n     * Regular expression to match strings that do not start with a supported protocol. The TLDs\n     * are expected to be one of the known TLDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "WEB_URL_WITH_PROTOCOL",
    "type" : "String",
    "comment" : "\n     * Regular expression to match strings that start with a supported protocol. Rules for domain\n     * names and TLDs are more relaxed. TLDs are optional.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTOLINK_WEB_URL",
    "type" : "Pattern",
    "comment" : "\n     * Regular expression pattern to match IRIs. If a string starts with http(s):// the expression\n     * tries to match the URL structure with a relaxed rule for TLDs. If the string does not start\n     * with http(s):// the TLDs are expected to be one of the known TLDs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EMAIL_CHAR",
    "type" : "String",
    "comment" : "\n     * Regular expression for valid email characters. Does not include some of the valid characters\n     * defined in RFC5321: #&~!^`{}/=$*?|\n     ",
    "links" : [ ]
  }, {
    "name" : "EMAIL_ADDRESS_LOCAL_PART",
    "type" : "String",
    "comment" : "\n     * Regular expression for local part of an email address. RFC5321 section 4.5.3.1.1 limits\n     * the local part to be at most 64 octets.\n     ",
    "links" : [ ]
  }, {
    "name" : "EMAIL_ADDRESS_DOMAIN",
    "type" : "String",
    "comment" : "\n     * Regular expression for the domain part of an email address. RFC5321 section 4.5.3.1.2 limits\n     * the domain to be at most 255 octets.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTOLINK_EMAIL_ADDRESS",
    "type" : "Pattern",
    "comment" : "\n     * Regular expression pattern to match email addresses. It excludes double quoted local parts\n     * and the special characters #&~!^`{}/=$*?| that are included in RFC5321.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EMAIL_ADDRESS",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PHONE",
    "type" : "Pattern",
    "comment" : "\n     * This pattern is intended for searching for things that look like they\n     * might be phone numbers in arbitrary text, not for validating whether\n     * something is in fact a phone number.  It will miss many things that\n     * are legitimate phone numbers.\n     *\n     * <p> The pattern matches the following:\n     * <ul>\n     * <li>Optionally, a + sign followed immediately by one or more digits. Spaces, dots, or dashes\n     * may follow.\n     * <li>Optionally, sets of digits in parentheses, separated by spaces, dots, or dashes.\n     * <li>A string starting and ending with a digit, containing digits, spaces, dots, and/or dashes.\n     * </ul>\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final String concatGroups(Matcher matcher)",
    "returnType" : "String",
    "comment" : "\n     *  Convenience method to take all of the non-null matching groups in a\n     *  regex Matcher and return them as a concatenated string.\n     *\n     *  @param matcher      The Matcher object from which grouped text will\n     *                      be extracted\n     *\n     *  @return             A String comprising all of the non-null matched\n     *                      groups concatenated together\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String digitsAndPlusOnly(Matcher matcher)",
    "returnType" : "String",
    "comment" : "\n     * Convenience method to return only the digits and plus signs\n     * in the matching string.\n     *\n     * @param matcher      The Matcher object from which digits and plus will\n     *                     be extracted\n     *\n     * @return             A String comprising all of the digits and plus in\n     *                     the match\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TOP_LEVEL_DOMAIN_STR", "TOP_LEVEL_DOMAIN", "TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL", "IANA_TOP_LEVEL_DOMAINS", "GOOD_IRI_CHAR", "IP_ADDRESS_STRING", "IP_ADDRESS", "UCS_CHAR", "LABEL_CHAR", "TLD_CHAR", "IRI_LABEL", "PUNYCODE_TLD", "TLD", "HOST_NAME", "DOMAIN_NAME_STR", "DOMAIN_NAME", "PROTOCOL", "WORD_BOUNDARY", "USER_INFO", "PORT_NUMBER", "PATH_AND_QUERY", "WEB_URL", "STRICT_TLD", "STRICT_HOST_NAME", "STRICT_DOMAIN_NAME", "RELAXED_DOMAIN_NAME", "WEB_URL_WITHOUT_PROTOCOL", "WEB_URL_WITH_PROTOCOL", "AUTOLINK_WEB_URL", "EMAIL_CHAR", "EMAIL_ADDRESS_LOCAL_PART", "EMAIL_ADDRESS_DOMAIN", "AUTOLINK_EMAIL_ADDRESS", "EMAIL_ADDRESS", "PHONE" ],
  "methodNames" : [ "public static final String concatGroups(Matcher matcher)", "public static final String digitsAndPlusOnly(Matcher matcher)" ]
}