{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/database/sqlite/SQLiteStatement.java",
  "packageName" : "android.database.sqlite",
  "className" : "SQLiteStatement",
  "comment" : "\n * Represents a statement that can be executed against a database.  The statement\n * cannot return multiple rows or columns, but single value (1 x 1) result sets\n * are supported.\n * <p>\n * This class is not thread-safe.\n * </p>\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void execute()",
    "returnType" : "void",
    "comment" : "\n     * Execute this SQL statement, if it is not a SELECT / INSERT / DELETE / UPDATE, for example\n     * CREATE / DROP table, view, trigger, index etc.\n     *\n     * @throws android.database.SQLException If the SQL string is invalid for\n     *         some reason\n     ",
    "links" : [ ]
  }, {
    "name" : "public int executeUpdateDelete()",
    "returnType" : "int",
    "comment" : "\n     * Execute this SQL statement, if the number of rows affected by execution of this SQL\n     * statement is of any importance to the caller - for example, UPDATE / DELETE SQL statements.\n     *\n     * @return the number of rows affected by this SQL statement execution.\n     * @throws android.database.SQLException If the SQL string is invalid for\n     *         some reason\n     ",
    "links" : [ ]
  }, {
    "name" : "public long executeInsert()",
    "returnType" : "long",
    "comment" : "\n     * Execute this SQL statement and return the ID of the row inserted due to this call.\n     * The SQL statement should be an INSERT for this to be a useful call.\n     *\n     * @return the row ID of the last row inserted, if this insert is successful. -1 otherwise.\n     *\n     * @throws android.database.SQLException If the SQL string is invalid for\n     *         some reason\n     ",
    "links" : [ ]
  }, {
    "name" : "public long simpleQueryForLong()",
    "returnType" : "long",
    "comment" : "\n     * Execute a statement that returns a 1 by 1 table with a numeric value.\n     * For example, SELECT COUNT(*) FROM table;\n     *\n     * @return The result of the query.\n     *\n     * @throws android.database.sqlite.SQLiteDoneException if the query returns zero rows\n     ",
    "links" : [ ]
  }, {
    "name" : "public String simpleQueryForString()",
    "returnType" : "String",
    "comment" : "\n     * Execute a statement that returns a 1 by 1 table with a text value.\n     * For example, SELECT COUNT(*) FROM table;\n     *\n     * @return The result of the query.\n     *\n     * @throws android.database.sqlite.SQLiteDoneException if the query returns zero rows\n     ",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor simpleQueryForBlobFileDescriptor()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Executes a statement that returns a 1 by 1 table with a blob value.\n     *\n     * @return A read-only file descriptor for a copy of the blob value, or {@code null}\n     *         if the value is null or could not be read for some reason.\n     *\n     * @throws android.database.sqlite.SQLiteDoneException if the query returns zero rows\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void execute()", "public int executeUpdateDelete()", "public long executeInsert()", "public long simpleQueryForLong()", "public String simpleQueryForString()", "public ParcelFileDescriptor simpleQueryForBlobFileDescriptor()", "public String toString()" ],
  "variableNames" : [ ]
}