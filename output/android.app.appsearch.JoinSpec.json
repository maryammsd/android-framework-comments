{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/JoinSpec.java",
  "packageName" : "android.app.appsearch",
  "className" : "JoinSpec",
  "comment" : "\n * This class represents the specifications for the joining operation in search.\n *\n * <p>Joins are only possible for matching on the qualified id of an outer document and a property\n * value within a subquery document. In the subquery documents, these values may be referred to with\n * a property path such as \"email.recipient.id\" or \"entityId\" or a property expression. One such\n * property expression is \"this.qualifiedId()\", which refers to the document's combined package,\n * database, namespace, and id.\n *\n * <p>Note that in order for perform the join, the property referred to by {@link\n * #getChildPropertyExpression} has to be a property with {@link\n * AppSearchSchema.StringPropertyConfig#getJoinableValueType} set to {@link\n * AppSearchSchema.StringPropertyConfig#JOINABLE_VALUE_TYPE_QUALIFIED_ID}. Otherwise no documents\n * will be joined to any {@link SearchResult}.\n *\n * <p>Take these outer query and subquery results for example:\n *\n * <pre>{@code\n * Outer result {\n *   id: id1\n *   score: 5\n * }\n * Subquery result 1 {\n *   id: id2\n *   score: 2\n *   entityId: pkg$db/ns#id1\n *   notes: This is some doc\n * }\n * Subquery result 2 {\n *   id: id3\n *   score: 3\n *   entityId: pkg$db/ns#id2\n *   notes: This is another doc\n * }\n * }</pre>\n *\n * <p>In this example, subquery result 1 contains a property \"entityId\" whose value is\n * \"pkg$db/ns#id1\", referring to the outer result. If you call {@link Builder} with \"entityId\", we\n * will retrieve the value of the property \"entityId\" from the child document, which is\n * \"pkg$db#ns/id1\". Let's say the qualified id of the outer result is \"pkg$db#ns/id1\". This would\n * mean the subquery result 1 document will be matched to that parent document. This is done by\n * adding a {@link SearchResult} containing the child document to the top-level parent {@link\n * SearchResult#getJoinedResults}.\n *\n * <p>If {@link #getChildPropertyExpression} is \"notes\", we will check the values of the notes\n * property in the subquery results. In subquery result 1, this values is \"This is some doc\", which\n * does not equal the qualified id of the outer query result. As such, subquery result 1 will not be\n * joined to the outer query result.\n *\n * <p>It's possible to define an advanced ranking strategy in the nested {@link SearchSpec} and also\n * use {@link SearchSpec#RANKING_STRATEGY_JOIN_AGGREGATE_SCORE} in the outer {@link SearchSpec}. In\n * this case, the parents will be ranked based on an aggregation, such as the sum, of the signals\n * calculated by scoring the joined documents with the advanced ranking strategy.\n *\n * <p>In terms of scoring, if {@link SearchSpec#RANKING_STRATEGY_JOIN_AGGREGATE_SCORE} is set in\n * {@link SearchSpec#getRankingStrategy}, the scores of the outer SearchResults can be influenced by\n * the ranking signals of the subquery results. For example, if the {@link\n * JoinSpec#getAggregationScoringStrategy} is set to:\n *\n * <ul>\n *   <li>{@link JoinSpec#AGGREGATION_SCORING_MIN_RANKING_SIGNAL}, the ranking signal of the outer\n *       {@link SearchResult} will be set to the minimum of the ranking signals of the subquery\n *       results. In this case, it will be the minimum of 2 and 3, which is 2.\n *   <li>{@link JoinSpec#AGGREGATION_SCORING_MAX_RANKING_SIGNAL}, the ranking signal of the outer\n *       {@link SearchResult} will be 3.\n *   <li>{@link JoinSpec#AGGREGATION_SCORING_AVG_RANKING_SIGNAL}, the ranking signal of the outer\n *       {@link SearchResult} will be 2.5.\n *   <li>{@link JoinSpec#AGGREGATION_SCORING_RESULT_COUNT}, the ranking signal of the outer {@link\n *       SearchResult} will be 2 as there are two joined results.\n *   <li>{@link JoinSpec#AGGREGATION_SCORING_SUM_RANKING_SIGNAL}, the ranking signal of the outer\n *       {@link SearchResult} will be 5, the sum of 2 and 3.\n *   <li>{@link JoinSpec#AGGREGATION_SCORING_OUTER_RESULT_RANKING_SIGNAL}, the ranking signal of the\n *       outer {@link SearchResult} will stay as it is.\n * </ul>\n *\n * <p>Referring to \"this.childrenRankingSignals()\" in the ranking signal of the outer query will\n * return the signals calculated by scoring the joined documents using the scoring strategy in the\n * nested {@link SearchSpec}, as in {@link SearchResult#getRankingSignal}.\n ",
  "links" : [ "android.app.appsearch.JoinSpec#AGGREGATION_SCORING_OUTER_RESULT_RANKING_SIGNAL", "AppSearchSchema.StringPropertyConfig#getJoinableValueType", "android.app.appsearch.JoinSpec#getAggregationScoringStrategy", "android.app.appsearch.SearchSpec#RANKING_STRATEGY_JOIN_AGGREGATE_SCORE", "AppSearchSchema.StringPropertyConfig#JOINABLE_VALUE_TYPE_QUALIFIED_ID", "Builder", "android.app.appsearch.SearchResult#getRankingSignal", "android.app.appsearch.SearchResult#getJoinedResults", "android.app.appsearch.JoinSpec#AGGREGATION_SCORING_MIN_RANKING_SIGNAL", "android.app.appsearch.SearchSpec#getRankingStrategy", "android.app.appsearch.JoinSpec#AGGREGATION_SCORING_RESULT_COUNT", "#getChildPropertyExpression", "android.app.appsearch.JoinSpec#AGGREGATION_SCORING_SUM_RANKING_SIGNAL", "android.app.appsearch.JoinSpec#AGGREGATION_SCORING_AVG_RANKING_SIGNAL", "android.app.appsearch.JoinSpec#AGGREGATION_SCORING_MAX_RANKING_SIGNAL", "android.app.appsearch.SearchResult", "android.app.appsearch.SearchSpec" ],
  "variables" : [ {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<JoinSpec>",
    "comment" : " Creator class for {@link JoinSpec}. ",
    "links" : [ "android.app.appsearch.JoinSpec" ]
  }, {
    "name" : "mNestedQuery",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNestedSearchSpec",
    "type" : "SearchSpec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildPropertyExpression",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxJoinedResultCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAggregationScoringStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAX_JOINED_RESULT_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUALIFIED_ID",
    "type" : "String",
    "comment" : "\n     * A property expression referring to the combined package name, database name, namespace, and\n     * id of the document.\n     *\n     * <p>For instance, if a document with an id of \"id1\" exists in the namespace \"ns\" within the\n     * database \"db\" created by package \"pkg\", this would evaluate to \"pkg$db/ns#id1\".\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AGGREGATION_SCORING_OUTER_RESULT_RANKING_SIGNAL",
    "type" : "int",
    "comment" : "\n     * Do not score the aggregation of joined documents. This is for the case where we want to\n     * perform a join, but keep the parent ranking signal.\n     ",
    "links" : [ ]
  }, {
    "name" : "AGGREGATION_SCORING_RESULT_COUNT",
    "type" : "int",
    "comment" : " Score the aggregation of joined documents by counting the number of results. ",
    "links" : [ ]
  }, {
    "name" : "AGGREGATION_SCORING_MIN_RANKING_SIGNAL",
    "type" : "int",
    "comment" : " Score the aggregation of joined documents using the smallest ranking signal. ",
    "links" : [ ]
  }, {
    "name" : "AGGREGATION_SCORING_AVG_RANKING_SIGNAL",
    "type" : "int",
    "comment" : " Score the aggregation of joined documents using the average ranking signal. ",
    "links" : [ ]
  }, {
    "name" : "AGGREGATION_SCORING_MAX_RANKING_SIGNAL",
    "type" : "int",
    "comment" : " Score the aggregation of joined documents using the largest ranking signal. ",
    "links" : [ ]
  }, {
    "name" : "AGGREGATION_SCORING_SUM_RANKING_SIGNAL",
    "type" : "int",
    "comment" : " Score the aggregation of joined documents using the sum of ranking signal. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getNestedQuery()",
    "returnType" : "String",
    "comment" : " Returns the query to run on the joined documents. ",
    "links" : [ ]
  }, {
    "name" : "public String getChildPropertyExpression()",
    "returnType" : "String",
    "comment" : "\n     * The property expression that is used to get values from child documents, returned from the\n     * nested search. These values are then used to match them to parent documents. These are\n     * analogous to foreign keys.\n     *\n     * @return the property expression to match in the child documents.\n     * @see Builder\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxJoinedResultCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the max amount of {@link SearchResult} objects to return with the parent document,\n     * with a default of 10 SearchResults.\n     ",
    "links" : [ "android.app.appsearch.SearchResult" ]
  }, {
    "name" : "public SearchSpec getNestedSearchSpec()",
    "returnType" : "SearchSpec",
    "comment" : "\n     * Returns the search spec used to retrieve the joined documents.\n     *\n     * <p>If {@link Builder#setNestedSearch} is never called, this will return a {@link SearchSpec}\n     * with all default values. This will match every document, as the nested search query will be\n     * \"\" and no schema will be filtered out.\n     ",
    "links" : [ "#setNestedSearch", "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "public int getAggregationScoringStrategy()",
    "returnType" : "int",
    "comment" : "\n     * Gets the joined document list scoring strategy.\n     *\n     * <p>The default scoring strategy is {@link #AGGREGATION_SCORING_OUTER_RESULT_RANKING_SIGNAL},\n     * which specifies that the score of the outer parent document will be used.\n     *\n     * @see SearchSpec#RANKING_STRATEGY_JOIN_AGGREGATE_SCORE\n     ",
    "links" : [ "#AGGREGATION_SCORING_OUTER_RESULT_RANKING_SIGNAL" ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getNestedQuery()", "public String getChildPropertyExpression()", "public int getMaxJoinedResultCount()", "public SearchSpec getNestedSearchSpec()", "public int getAggregationScoringStrategy()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "CREATOR", "mNestedQuery", "mNestedSearchSpec", "mChildPropertyExpression", "mMaxJoinedResultCount", "mAggregationScoringStrategy", "DEFAULT_MAX_JOINED_RESULT_COUNT", "QUALIFIED_ID", "AGGREGATION_SCORING_OUTER_RESULT_RANKING_SIGNAL", "AGGREGATION_SCORING_RESULT_COUNT", "AGGREGATION_SCORING_MIN_RANKING_SIGNAL", "AGGREGATION_SCORING_AVG_RANKING_SIGNAL", "AGGREGATION_SCORING_MAX_RANKING_SIGNAL", "AGGREGATION_SCORING_SUM_RANKING_SIGNAL" ]
}