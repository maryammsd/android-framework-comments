{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/URLConnection.java",
  "packageName" : "java.net",
  "className" : "URLConnection",
  "comment" : "\n * The abstract class {@code URLConnection} is the superclass\n * of all classes that represent a communications link between the\n * application and a URL. Instances of this class can be used both to\n * read from and to write to the resource referenced by the URL. In\n * general, creating a connection to a URL is a multistep process:\n *\n * <center><table border=2 summary=\"Describes the process of creating a connection to a URL: openConnection() and connect() over time.\">\n * <tr><th>{@code openConnection()}</th>\n *     <th>{@code connect()}</th></tr>\n * <tr><td>Manipulate parameters that affect the connection to the remote\n *         resource.</td>\n *     <td>Interact with the resource; query header fields and\n *         contents.</td></tr>\n * </table>\n * ----------------------------&gt;\n * <br>time</center>\n *\n * <ol>\n * <li>The connection object is created by invoking the\n *     {@code openConnection} method on a URL.\n * <li>The setup parameters and general request properties are manipulated.\n * <li>The actual connection to the remote object is made, using the\n *    {@code connect} method.\n * <li>The remote object becomes available. The header fields and the contents\n *     of the remote object can be accessed.\n * </ol>\n * <p>\n * The setup parameters are modified using the following methods:\n * <ul>\n *   <li>{@code setAllowUserInteraction}\n *   <li>{@code setDoInput}\n *   <li>{@code setDoOutput}\n *   <li>{@code setIfModifiedSince}\n *   <li>{@code setUseCaches}\n * </ul>\n * <p>\n * and the general request properties are modified using the method:\n * <ul>\n *   <li>{@code setRequestProperty}\n * </ul>\n * <p>\n * Default values for the {@code AllowUserInteraction} and\n * {@code UseCaches} parameters can be set using the methods\n * {@code setDefaultAllowUserInteraction} and\n * {@code setDefaultUseCaches}.\n * <p>\n * Each of the above {@code set} methods has a corresponding\n * {@code get} method to retrieve the value of the parameter or\n * general request property. The specific parameters and general\n * request properties that are applicable are protocol specific.\n * <p>\n * The following methods are used to access the header fields and\n * the contents after the connection is made to the remote object:\n * <ul>\n *   <li>{@code getContent}\n *   <li>{@code getHeaderField}\n *   <li>{@code getInputStream}\n *   <li>{@code getOutputStream}\n * </ul>\n * <p>\n * Certain header fields are accessed frequently. The methods:\n * <ul>\n *   <li>{@code getContentEncoding}\n *   <li>{@code getContentLength}\n *   <li>{@code getContentType}\n *   <li>{@code getDate}\n *   <li>{@code getExpiration}\n *   <li>{@code getLastModifed}\n * </ul>\n * <p>\n * provide convenient access to these fields. The\n * {@code getContentType} method is used by the\n * {@code getContent} method to determine the type of the remote\n * object; subclasses may find it convenient to override the\n * {@code getContentType} method.\n * <p>\n * In the common case, all of the pre-connection parameters and\n * general request properties can be ignored: the pre-connection\n * parameters and request properties default to sensible values. For\n * most clients of this interface, there are only two interesting\n * methods: {@code getInputStream} and {@code getContent},\n * which are mirrored in the {@code URL} class by convenience methods.\n * <p>\n * More information on the request properties and header fields of\n * an {@code http} connection can be found at:\n * <blockquote><pre>\n * <a href=\"http://www.ietf.org/rfc/rfc2616.txt\">http://www.ietf.org/rfc/rfc2616.txt</a>\n * </pre></blockquote>\n *\n * Invoking the {@code close()} methods on the {@code InputStream} or {@code OutputStream} of an\n * {@code URLConnection} after a request may free network resources associated with this\n * instance, unless particular protocol specifications specify different behaviours\n * for it.\n *\n * @author  James Gosling\n * @see     java.net.URL#openConnection()\n * @see     java.net.URLConnection#connect()\n * @see     java.net.URLConnection#getContent()\n * @see     java.net.URLConnection#getContentEncoding()\n * @see     java.net.URLConnection#getContentLength()\n * @see     java.net.URLConnection#getContentType()\n * @see     java.net.URLConnection#getDate()\n * @see     java.net.URLConnection#getExpiration()\n * @see     java.net.URLConnection#getHeaderField(int)\n * @see     java.net.URLConnection#getHeaderField(java.lang.String)\n * @see     java.net.URLConnection#getInputStream()\n * @see     java.net.URLConnection#getLastModified()\n * @see     java.net.URLConnection#getOutputStream()\n * @see     java.net.URLConnection#setAllowUserInteraction(boolean)\n * @see     java.net.URLConnection#setDefaultUseCaches(boolean)\n * @see     java.net.URLConnection#setDoInput(boolean)\n * @see     java.net.URLConnection#setDoOutput(boolean)\n * @see     java.net.URLConnection#setIfModifiedSince(long)\n * @see     java.net.URLConnection#setRequestProperty(java.lang.String, java.lang.String)\n * @see     java.net.URLConnection#setUseCaches(boolean)\n * @since   JDK1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "url",
    "type" : "URL",
    "comment" : "\n     * The URL represents the remote object on the World Wide Web to\n     * which this connection is opened.\n     * <p>\n     * The value of this field can be accessed by the\n     * {@code getURL} method.\n     * <p>\n     * The default value of this variable is the value of the URL\n     * argument in the {@code URLConnection} constructor.\n     *\n     * @see     java.net.URLConnection#getURL()\n     * @see     java.net.URLConnection#url\n     ",
    "links" : [ ]
  }, {
    "name" : "doInput",
    "type" : "boolean",
    "comment" : "\n     * This variable is set by the {@code setDoInput} method. Its\n     * value is returned by the {@code getDoInput} method.\n     * <p>\n     * A URL connection can be used for input and/or output. Setting the\n     * {@code doInput} flag to {@code true} indicates that\n     * the application intends to read data from the URL connection.\n     * <p>\n     * The default value of this field is {@code true}.\n     *\n     * @see     java.net.URLConnection#getDoInput()\n     * @see     java.net.URLConnection#setDoInput(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "doOutput",
    "type" : "boolean",
    "comment" : "\n     * This variable is set by the {@code setDoOutput} method. Its\n     * value is returned by the {@code getDoOutput} method.\n     * <p>\n     * A URL connection can be used for input and/or output. Setting the\n     * {@code doOutput} flag to {@code true} indicates\n     * that the application intends to write data to the URL connection.\n     * <p>\n     * The default value of this field is {@code false}.\n     *\n     * @see     java.net.URLConnection#getDoOutput()\n     * @see     java.net.URLConnection#setDoOutput(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultAllowUserInteraction",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowUserInteraction",
    "type" : "boolean",
    "comment" : "\n     * If {@code true}, this {@code URL} is being examined in\n     * a context in which it makes sense to allow user interactions such\n     * as popping up an authentication dialog. If {@code false},\n     * then no user interaction is allowed.\n     * <p>\n     * The value of this field can be set by the\n     * {@code setAllowUserInteraction} method.\n     * Its value is returned by the\n     * {@code getAllowUserInteraction} method.\n     * Its default value is the value of the argument in the last invocation\n     * of the {@code setDefaultAllowUserInteraction} method.\n     *\n     * @see     java.net.URLConnection#getAllowUserInteraction()\n     * @see     java.net.URLConnection#setAllowUserInteraction(boolean)\n     * @see     java.net.URLConnection#setDefaultAllowUserInteraction(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultUseCaches",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "useCaches",
    "type" : "boolean",
    "comment" : "\n     * If {@code true}, the protocol is allowed to use caching\n     * whenever it can. If {@code false}, the protocol must always\n     * try to get a fresh copy of the object.\n     * <p>\n     * This field is set by the {@code setUseCaches} method. Its\n     * value is returned by the {@code getUseCaches} method.\n     * <p>\n     * Its default value is the value given in the last invocation of the\n     * {@code setDefaultUseCaches} method.\n     *\n     * @see     java.net.URLConnection#setUseCaches(boolean)\n     * @see     java.net.URLConnection#getUseCaches()\n     * @see     java.net.URLConnection#setDefaultUseCaches(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "ifModifiedSince",
    "type" : "long",
    "comment" : "\n     * Some protocols support skipping the fetching of the object unless\n     * the object has been modified more recently than a certain time.\n     * <p>\n     * A nonzero value gives a time as the number of milliseconds since\n     * January 1, 1970, GMT. The object is fetched only if it has been\n     * modified more recently than that time.\n     * <p>\n     * This variable is set by the {@code setIfModifiedSince}\n     * method. Its value is returned by the\n     * {@code getIfModifiedSince} method.\n     * <p>\n     * The default value of this field is {@code 0}, indicating\n     * that the fetching must always occur.\n     *\n     * @see     java.net.URLConnection#getIfModifiedSince()\n     * @see     java.net.URLConnection#setIfModifiedSince(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "connected",
    "type" : "boolean",
    "comment" : "\n     * If {@code false}, this connection object has not created a\n     * communications link to the specified URL. If {@code true},\n     * the communications link has been established.\n     ",
    "links" : [ ]
  }, {
    "name" : "connectTimeout",
    "type" : "int",
    "comment" : "\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "readTimeout",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "requests",
    "type" : "MessageHeader",
    "comment" : "\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "fileNameMap",
    "type" : "FileNameMap",
    "comment" : "\n    * @since   JDK1.1\n    ",
    "links" : [ ]
  }, {
    "name" : "factory",
    "type" : "ContentHandlerFactory",
    "comment" : "\n     * The ContentHandler factory.\n     ",
    "links" : [ ]
  }, {
    "name" : "handlers",
    "type" : "Hashtable<String, ContentHandler>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "contentClassPrefix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "contentPathProp",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized FileNameMap getFileNameMap()",
    "returnType" : "FileNameMap",
    "comment" : "\n     * Returns a {@link FileNameMap} implementation suitable for guessing a\n     * content type based on a URL's \"file\" component.\n     *\n     * @see #guessContentTypeFromName(String)\n     * @see #setFileNameMap(java.net.FileNameMap)\n     *\n     ",
    "links" : [ "java.net.FileNameMap" ]
  }, {
    "name" : "public static void setFileNameMap(FileNameMap map)",
    "returnType" : "void",
    "comment" : "\n     * Sets the FileNameMap.\n     * <p>\n     * If there is a security manager, this method first calls\n     * the security manager's {@code checkSetFactory} method\n     * to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * @param map the FileNameMap to be set\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkSetFactory} method doesn't allow the operation.\n     * @see        SecurityManager#checkSetFactory\n     * @see #getFileNameMap()\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void connect() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Opens a communications link to the resource referenced by this\n     * URL, if such a connection has not already been established.\n     * <p>\n     * If the {@code connect} method is called when the connection\n     * has already been opened (indicated by the {@code connected}\n     * field having the value {@code true}), the call is ignored.\n     * <p>\n     * URLConnection objects go through two phases: first they are\n     * created, then they are connected.  After being created, and\n     * before being connected, various options can be specified\n     * (e.g., doInput and UseCaches).  After connecting, it is an\n     * error to try to set them.  Operations that depend on being\n     * connected, like getContentLength, will implicitly perform the\n     * connection, if necessary.\n     *\n     * @throws SocketTimeoutException if the timeout expires before\n     *               the connection can be established\n     * @exception  IOException  if an I/O error occurs while opening the\n     *               connection.\n     * @see java.net.URLConnection#connected\n     * @see #getConnectTimeout()\n     * @see #setConnectTimeout(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setConnectTimeout(int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Sets a specified timeout value, in milliseconds, to be used\n     * when opening a communications link to the resource referenced\n     * by this URLConnection.  If the timeout expires before the\n     * connection can be established, a\n     * java.net.SocketTimeoutException is raised. A timeout of zero is\n     * interpreted as an infinite timeout.\n\n     * <p> Some non-standard implementation of this method may ignore\n     * the specified timeout. To see the connect timeout set, please\n     * call getConnectTimeout().\n     *\n     * <p><strong>Warning</strong>: If the hostname resolves to multiple IP\n     * addresses, Android's default implementation of {@link HttpURLConnection}\n     * will try each in\n     * <a href=\"http://www.ietf.org/rfc/rfc3484.txt\">RFC 3484</a> order. If\n     * connecting to each of these addresses fails, multiple timeouts will\n     * elapse before the connect attempt throws an exception. Host names\n     * that support both IPv6 and IPv4 always have at least 2 IP addresses.\n     *\n     * @param timeout an {@code int} that specifies the connect\n     *               timeout value in milliseconds\n     * @throws IllegalArgumentException if the timeout parameter is negative\n     *\n     * @see #getConnectTimeout()\n     * @see #connect()\n     * @since 1.5\n     ",
    "links" : [ "java.net.HttpURLConnection" ]
  }, {
    "name" : "public int getConnectTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Returns setting for connect timeout.\n     * <p>\n     * 0 return implies that the option is disabled\n     * (i.e., timeout of infinity).\n     *\n     * @return an {@code int} that indicates the connect timeout\n     *         value in milliseconds\n     * @see #setConnectTimeout(int)\n     * @see #connect()\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReadTimeout(int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Sets the read timeout to a specified timeout, in\n     * milliseconds. A non-zero value specifies the timeout when\n     * reading from Input stream when a connection is established to a\n     * resource. If the timeout expires before there is data available\n     * for read, a java.net.SocketTimeoutException is raised. A\n     * timeout of zero is interpreted as an infinite timeout.\n     *\n     *<p> Some non-standard implementation of this method ignores the\n     * specified timeout. To see the read timeout set, please call\n     * getReadTimeout().\n     *\n     * @param timeout an {@code int} that specifies the timeout\n     * value to be used in milliseconds\n     * @throws IllegalArgumentException if the timeout parameter is negative\n     *\n     * @see #getReadTimeout()\n     * @see InputStream#read()\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getReadTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Returns setting for read timeout. 0 return implies that the\n     * option is disabled (i.e., timeout of infinity).\n     *\n     * @return an {@code int} that indicates the read timeout\n     *         value in milliseconds\n     *\n     * @see #setReadTimeout(int)\n     * @see InputStream#read()\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public URL getURL()",
    "returnType" : "URL",
    "comment" : "\n     * Returns the value of this {@code URLConnection}'s {@code URL}\n     * field.\n     *\n     * @return  the value of this {@code URLConnection}'s {@code URL}\n     *          field.\n     * @see     java.net.URLConnection#url\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of the {@code content-length} header field.\n     * <P>\n     * <B>Note</B>: {@link #getContentLengthLong() getContentLengthLong()}\n     * should be preferred over this method, since it returns a {@code long}\n     * instead and is therefore more portable.</P>\n     *\n     * @return  the content length of the resource that this connection's URL\n     *          references, {@code -1} if the content length is not known,\n     *          or if the content length is greater than Integer.MAX_VALUE.\n     ",
    "links" : [ "#getContentLengthLong()" ]
  }, {
    "name" : "public long getContentLengthLong()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the {@code content-length} header field as a\n     * long.\n     *\n     * @return  the content length of the resource that this connection's URL\n     *          references, or {@code -1} if the content length is\n     *          not known.\n     * @since 7.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getContentType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the {@code content-type} header field.\n     *\n     * @return  the content type of the resource that the URL references,\n     *          or {@code null} if not known.\n     * @see     java.net.URLConnection#getHeaderField(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getContentEncoding()",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the {@code content-encoding} header field.\n     *\n     * @return  the content encoding of the resource that the URL references,\n     *          or {@code null} if not known.\n     * @see     java.net.URLConnection#getHeaderField(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getExpiration()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the {@code expires} header field.\n     *\n     * @return  the expiration date of the resource that this URL references,\n     *          or 0 if not known. The value is the number of milliseconds since\n     *          January 1, 1970 GMT.\n     * @see     java.net.URLConnection#getHeaderField(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDate()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the {@code date} header field.\n     *\n     * @return  the sending date of the resource that the URL references,\n     *          or {@code 0} if not known. The value returned is the\n     *          number of milliseconds since January 1, 1970 GMT.\n     * @see     java.net.URLConnection#getHeaderField(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLastModified()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the {@code last-modified} header field.\n     * The result is the number of milliseconds since January 1, 1970 GMT.\n     *\n     * @return  the date the resource referenced by this\n     *          {@code URLConnection} was last modified, or 0 if not known.\n     * @see     java.net.URLConnection#getHeaderField(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getHeaderField(String name)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the named header field.\n     * <p>\n     * If called on a connection that sets the same header multiple times\n     * with possibly different values, only the last value is returned.\n     *\n     *\n     * @param   name   the name of a header field.\n     * @return  the value of the named header field, or {@code null}\n     *          if there is no such field in the header.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<String>> getHeaderFields()",
    "returnType" : "Map<String, List<String>>",
    "comment" : "\n     * Returns an unmodifiable Map of the header fields.\n     * The Map keys are Strings that represent the\n     * response-header field names. Each Map value is an\n     * unmodifiable List of Strings that represents\n     * the corresponding field values.\n     *\n     * @return a Map of header fields\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeaderFieldInt(String name, int Default)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of the named field parsed as a number.\n     * <p>\n     * This form of {@code getHeaderField} exists because some\n     * connection types (e.g., {@code http-ng}) have pre-parsed\n     * headers. Classes for that connection type can override this method\n     * and short-circuit the parsing.\n     *\n     * @param   name      the name of the header field.\n     * @param   Default   the default value.\n     * @return  the value of the named field, parsed as an integer. The\n     *          {@code Default} value is returned if the field is\n     *          missing or malformed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getHeaderFieldLong(String name, long Default)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the named field parsed as a number.\n     * <p>\n     * This form of {@code getHeaderField} exists because some\n     * connection types (e.g., {@code http-ng}) have pre-parsed\n     * headers. Classes for that connection type can override this method\n     * and short-circuit the parsing.\n     *\n     * @param   name      the name of the header field.\n     * @param   Default   the default value.\n     * @return  the value of the named field, parsed as a long. The\n     *          {@code Default} value is returned if the field is\n     *          missing or malformed.\n     * @since 7.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getHeaderFieldDate(String name, long Default)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the named field parsed as date.\n     * The result is the number of milliseconds since January 1, 1970 GMT\n     * represented by the named field.\n     * <p>\n     * This form of {@code getHeaderField} exists because some\n     * connection types (e.g., {@code http-ng}) have pre-parsed\n     * headers. Classes for that connection type can override this method\n     * and short-circuit the parsing.\n     *\n     * @param   name     the name of the header field.\n     * @param   Default   a default value.\n     * @return  the value of the field, parsed as a date. The value of the\n     *          {@code Default} argument is returned if the field is\n     *          missing or malformed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getHeaderFieldKey(int n)",
    "returnType" : "String",
    "comment" : "\n     * Returns the key for the {@code n}<sup>th</sup> header field.\n     * It returns {@code null} if there are fewer than {@code n+1} fields.\n     *\n     * @param   n   an index, where {@code n>=0}\n     * @return  the key for the {@code n}<sup>th</sup> header field,\n     *          or {@code null} if there are fewer than {@code n+1}\n     *          fields.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getHeaderField(int n)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value for the {@code n}<sup>th</sup> header field.\n     * It returns {@code null} if there are fewer than\n     * {@code n+1}fields.\n     * <p>\n     * This method can be used in conjunction with the\n     * {@link #getHeaderFieldKey(int) getHeaderFieldKey} method to iterate through all\n     * the headers in the message.\n     *\n     * @param   n   an index, where {@code n>=0}\n     * @return  the value of the {@code n}<sup>th</sup> header field\n     *          or {@code null} if there are fewer than {@code n+1} fields\n     * @see     java.net.URLConnection#getHeaderFieldKey(int)\n     ",
    "links" : [ "#getHeaderFieldKey(int)" ]
  }, {
    "name" : "public Object getContent() throws IOException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the contents of this URL connection.\n     * <p>\n     * This method first determines the content type of the object by\n     * calling the {@code getContentType} method. If this is\n     * the first time that the application has seen that specific content\n     * type, a content handler for that content type is created:\n     * <ol>\n     * <li>If the application has set up a content handler factory instance\n     *     using the {@code setContentHandlerFactory} method, the\n     *     {@code createContentHandler} method of that instance is called\n     *     with the content type as an argument; the result is a content\n     *     handler for that content type.\n     * <li>If no content handler factory has yet been set up, or if the\n     *     factory's {@code createContentHandler} method returns\n     *     {@code null}, then the application loads the class named:\n     *     <blockquote><pre>\n     *         sun.net.www.content.&lt;<i>contentType</i>&gt;\n     *     </pre></blockquote>\n     *     where &lt;<i>contentType</i>&gt; is formed by taking the\n     *     content-type string, replacing all slash characters with a\n     *     {@code period} ('.'), and all other non-alphanumeric characters\n     *     with the underscore character '{@code _}'. The alphanumeric\n     *     characters are specifically the 26 uppercase ASCII letters\n     *     '{@code A}' through '{@code Z}', the 26 lowercase ASCII\n     *     letters '{@code a}' through '{@code z}', and the 10 ASCII\n     *     digits '{@code 0}' through '{@code 9}'. If the specified\n     *     class does not exist, or is not a subclass of\n     *     {@code ContentHandler}, then an\n     *     {@code UnknownServiceException} is thrown.\n     * </ol>\n     *\n     * @return     the object fetched. The {@code instanceof} operator\n     *               should be used to determine the specific kind of object\n     *               returned.\n     * @exception  IOException              if an I/O error occurs while\n     *               getting the content.\n     * @exception  UnknownServiceException  if the protocol does not support\n     *               the content type.\n     * @see        java.net.ContentHandlerFactory#createContentHandler(java.lang.String)\n     * @see        java.net.URLConnection#getContentType()\n     * @see        java.net.URLConnection#setContentHandlerFactory(java.net.ContentHandlerFactory)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getContent(Class[] classes) throws IOException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the contents of this URL connection.\n     *\n     * @param classes the {@code Class} array\n     * indicating the requested types\n     * @return     the object fetched that is the first match of the type\n     *               specified in the classes array. null if none of\n     *               the requested types are supported.\n     *               The {@code instanceof} operator should be used to\n     *               determine the specific kind of object returned.\n     * @exception  IOException              if an I/O error occurs while\n     *               getting the content.\n     * @exception  UnknownServiceException  if the protocol does not support\n     *               the content type.\n     * @see        java.net.URLConnection#getContent()\n     * @see        java.net.ContentHandlerFactory#createContentHandler(java.lang.String)\n     * @see        java.net.URLConnection#getContent(java.lang.Class[])\n     * @see        java.net.URLConnection#setContentHandlerFactory(java.net.ContentHandlerFactory)\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Permission getPermission() throws IOException",
    "returnType" : "Permission",
    "comment" : "\n     * Returns a permission object representing the permission\n     * necessary to make the connection represented by this\n     * object. This method returns null if no permission is\n     * required to make the connection. By default, this method\n     * returns {@code java.security.AllPermission}. Subclasses\n     * should override this method and return the permission\n     * that best represents the permission required to make a\n     * a connection to the URL. For example, a {@code URLConnection}\n     * representing a {@code file:} URL would return a\n     * {@code java.io.FilePermission} object.\n     *\n     * <p>The permission returned may dependent upon the state of the\n     * connection. For example, the permission before connecting may be\n     * different from that after connecting. For example, an HTTP\n     * sever, say foo.com, may redirect the connection to a different\n     * host, say bar.com. Before connecting the permission returned by\n     * the connection will represent the permission needed to connect\n     * to foo.com, while the permission returned after connecting will\n     * be to bar.com.\n     *\n     * <p>Permissions are generally used for two purposes: to protect\n     * caches of objects obtained through URLConnections, and to check\n     * the right of a recipient to learn about a particular URL. In\n     * the first case, the permission should be obtained\n     * <em>after</em> the object has been obtained. For example, in an\n     * HTTP connection, this will represent the permission to connect\n     * to the host from which the data was ultimately fetched. In the\n     * second case, the permission should be obtained and tested\n     * <em>before</em> connecting.\n     *\n     * @return the permission object representing the permission\n     * necessary to make the connection represented by this\n     * URLConnection.\n     *\n     * @exception IOException if the computation of the permission\n     * requires network or file I/O and an exception occurs while\n     * computing it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream getInputStream() throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Returns an input stream that reads from this open connection.\n     *\n     * A SocketTimeoutException can be thrown when reading from the\n     * returned input stream if the read timeout expires before data\n     * is available for read.\n     *\n     * @return     an input stream that reads from this open connection.\n     * @exception  IOException              if an I/O error occurs while\n     *               creating the input stream.\n     * @exception  UnknownServiceException  if the protocol does not support\n     *               input.\n     * @see #setReadTimeout(int)\n     * @see #getReadTimeout()\n     ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream getOutputStream() throws IOException",
    "returnType" : "OutputStream",
    "comment" : "\n     * Returns an output stream that writes to this connection.\n     *\n     * @return     an output stream that writes to this connection.\n     * @exception  IOException              if an I/O error occurs while\n     *               creating the output stream.\n     * @exception  UnknownServiceException  if the protocol does not support\n     *               output.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@code String} representation of this URL connection.\n     *\n     * @return  a string representation of this {@code URLConnection}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDoInput(boolean doinput)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the {@code doInput} field for this\n     * {@code URLConnection} to the specified value.\n     * <p>\n     * A URL connection can be used for input and/or output.  Set the DoInput\n     * flag to true if you intend to use the URL connection for input,\n     * false if not.  The default is true.\n     *\n     * @param   doinput   the new value.\n     * @throws IllegalStateException if already connected\n     * @see     java.net.URLConnection#doInput\n     * @see #getDoInput()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDoInput()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value of this {@code URLConnection}'s\n     * {@code doInput} flag.\n     *\n     * @return  the value of this {@code URLConnection}'s\n     *          {@code doInput} flag.\n     * @see     #setDoInput(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDoOutput(boolean dooutput)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the {@code doOutput} field for this\n     * {@code URLConnection} to the specified value.\n     * <p>\n     * A URL connection can be used for input and/or output.  Set the DoOutput\n     * flag to true if you intend to use the URL connection for output,\n     * false if not.  The default is false.\n     *\n     * @param   dooutput   the new value.\n     * @throws IllegalStateException if already connected\n     * @see #getDoOutput()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDoOutput()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value of this {@code URLConnection}'s\n     * {@code doOutput} flag.\n     *\n     * @return  the value of this {@code URLConnection}'s\n     *          {@code doOutput} flag.\n     * @see     #setDoOutput(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAllowUserInteraction(boolean allowuserinteraction)",
    "returnType" : "void",
    "comment" : "\n     * Set the value of the {@code allowUserInteraction} field of\n     * this {@code URLConnection}.\n     *\n     * @param   allowuserinteraction   the new value.\n     * @throws IllegalStateException if already connected\n     * @see     #getAllowUserInteraction()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAllowUserInteraction()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value of the {@code allowUserInteraction} field for\n     * this object.\n     *\n     * @return  the value of the {@code allowUserInteraction} field for\n     *          this object.\n     * @see     #setAllowUserInteraction(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDefaultAllowUserInteraction(boolean defaultallowuserinteraction)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default value of the\n     * {@code allowUserInteraction} field for all future\n     * {@code URLConnection} objects to the specified value.\n     *\n     * @param   defaultallowuserinteraction   the new value.\n     * @see     #getDefaultAllowUserInteraction()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getDefaultAllowUserInteraction()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the default value of the {@code allowUserInteraction}\n     * field.\n     * <p>\n     * Ths default is \"sticky\", being a part of the static state of all\n     * URLConnections.  This flag applies to the next, and all following\n     * URLConnections that are created.\n     *\n     * @return  the default value of the {@code allowUserInteraction}\n     *          field.\n     * @see     #setDefaultAllowUserInteraction(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUseCaches(boolean usecaches)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the {@code useCaches} field of this\n     * {@code URLConnection} to the specified value.\n     * <p>\n     * Some protocols do caching of documents.  Occasionally, it is important\n     * to be able to \"tunnel through\" and ignore the caches (e.g., the\n     * \"reload\" button in a browser).  If the UseCaches flag on a connection\n     * is true, the connection is allowed to use whatever caches it can.\n     *  If false, caches are to be ignored.\n     *  The default value comes from DefaultUseCaches, which defaults to\n     * true.\n     *\n     * @param usecaches a {@code boolean} indicating whether\n     * or not to allow caching\n     * @throws IllegalStateException if already connected\n     * @see #getUseCaches()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getUseCaches()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value of this {@code URLConnection}'s\n     * {@code useCaches} field.\n     *\n     * @return  the value of this {@code URLConnection}'s\n     *          {@code useCaches} field.\n     * @see #setUseCaches(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIfModifiedSince(long ifmodifiedsince)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the {@code ifModifiedSince} field of\n     * this {@code URLConnection} to the specified value.\n     *\n     * @param   ifmodifiedsince   the new value.\n     * @throws IllegalStateException if already connected\n     * @see     #getIfModifiedSince()\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getIfModifiedSince()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of this object's {@code ifModifiedSince} field.\n     *\n     * @return  the value of this object's {@code ifModifiedSince} field.\n     * @see #setIfModifiedSince(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDefaultUseCaches()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the default value of a {@code URLConnection}'s\n     * {@code useCaches} flag.\n     * <p>\n     * Ths default is \"sticky\", being a part of the static state of all\n     * URLConnections.  This flag applies to the next, and all following\n     * URLConnections that are created.\n     *\n     * @return  the default value of a {@code URLConnection}'s\n     *          {@code useCaches} flag.\n     * @see     #setDefaultUseCaches(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultUseCaches(boolean defaultusecaches)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default value of the {@code useCaches} field to the\n     * specified value.\n     *\n     * @param   defaultusecaches   the new value.\n     * @see     #getDefaultUseCaches()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRequestProperty(String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the general request property. If a property with the key already\n     * exists, overwrite its value with the new value.\n     *\n     * <p> NOTE: HTTP requires all request properties which can\n     * legally have multiple instances with the same key\n     * to use a comma-separated list syntax which enables multiple\n     * properties to be appended into a single property.\n     *\n     * @param   key     the keyword by which the request is known\n     *                  (e.g., \"{@code Accept}\").\n     * @param   value   the value associated with it.\n     * @throws IllegalStateException if already connected\n     * @throws NullPointerException if key is <CODE>null</CODE>\n     * @see #getRequestProperty(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRequestProperty(String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a general request property specified by a\n     * key-value pair.  This method will not overwrite\n     * existing values associated with the same key.\n     *\n     * @param   key     the keyword by which the request is known\n     *                  (e.g., \"{@code Accept}\").\n     * @param   value  the value associated with it.\n     * @throws IllegalStateException if already connected\n     * @throws NullPointerException if key is null\n     * @see #getRequestProperties()\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRequestProperty(String key)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the named general request property for this\n     * connection.\n     *\n     * @param key the keyword by which the request is known (e.g., \"Accept\").\n     * @return  the value of the named general request property for this\n     *           connection. If key is null, then null is returned.\n     * @throws IllegalStateException if already connected\n     * @see #setRequestProperty(java.lang.String, java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<String>> getRequestProperties()",
    "returnType" : "Map<String, List<String>>",
    "comment" : "\n     * Returns an unmodifiable Map of general request\n     * properties for this connection. The Map keys\n     * are Strings that represent the request-header\n     * field names. Each Map value is a unmodifiable List\n     * of Strings that represents the corresponding\n     * field values.\n     *\n     * @return  a Map of the general request properties for this connection.\n     * @throws IllegalStateException if already connected\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDefaultRequestProperty(String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default value of a general request property. When a\n     * {@code URLConnection} is created, it is initialized with\n     * these properties.\n     *\n     * @param   key     the keyword by which the request is known\n     *                  (e.g., \"{@code Accept}\").\n     * @param   value   the value associated with the key.\n     *\n     * @see java.net.URLConnection#setRequestProperty(java.lang.String,java.lang.String)\n     *\n     * @deprecated The instance specific setRequestProperty method\n     * should be used after an appropriate instance of URLConnection\n     * is obtained. Invoking this method will have no effect.\n     *\n     * @see #getDefaultRequestProperty(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDefaultRequestProperty(String key)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the default request property. Default request\n     * properties are set for every connection.\n     *\n     * @param key the keyword by which the request is known (e.g., \"Accept\").\n     * @return  the value of the default request property\n     * for the specified key.\n     *\n     * @see java.net.URLConnection#getRequestProperty(java.lang.String)\n     *\n     * @deprecated The instance specific getRequestProperty method\n     * should be used after an appropriate instance of URLConnection\n     * is obtained.\n     *\n     * @see #setDefaultRequestProperty(java.lang.String, java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized void setContentHandlerFactory(ContentHandlerFactory fac)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@code ContentHandlerFactory} of an\n     * application. It can be called at most once by an application.\n     * <p>\n     * The {@code ContentHandlerFactory} instance is used to\n     * construct a content handler from a content type\n     * <p>\n     * If there is a security manager, this method first calls\n     * the security manager's {@code checkSetFactory} method\n     * to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * @param      fac   the desired factory.\n     * @exception  Error  if the factory has already been defined.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkSetFactory} method doesn't allow the operation.\n     * @see        java.net.ContentHandlerFactory\n     * @see        java.net.URLConnection#getContent()\n     * @see        SecurityManager#checkSetFactory\n     ",
    "links" : [ ]
  }, {
    "name" : " synchronized ContentHandler getContentHandler() throws IOException",
    "returnType" : "ContentHandler",
    "comment" : "\n     * Gets the Content Handler appropriate for this connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String stripOffParameters(String contentType)",
    "returnType" : "String",
    "comment" : "\n     * Media types are in the format: type/subtype*(; parameter).\n     * For looking up the content handler, we should ignore those\n     * parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ContentHandler lookupContentHandlerClassFor(String contentType) throws InstantiationException, IllegalAccessException, ClassNotFoundException",
    "returnType" : "ContentHandler",
    "comment" : "\n     * Looks for a content handler in a user-defineable set of places.\n     * By default it looks in sun.net.www.content, but users can define a\n     * vertical-bar delimited set of class prefixes to search through in\n     * addition by defining the java.content.handler.pkgs property.\n     * The class name must be of the form:\n     * <pre>\n     *     {package-prefix}.{major}.{minor}\n     * e.g.\n     *     YoyoDyne.experimental.text.plain\n     * </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "private String typeToPackageName(String contentType)",
    "returnType" : "String",
    "comment" : "\n     * Utility function to map a MIME content type into an equivalent\n     * pair of class name components.  For example: \"text/html\" would\n     * be returned as \"text.html\"\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getContentHandlerPkgPrefixes()",
    "returnType" : "String",
    "comment" : "\n     * Returns a vertical bar separated list of package prefixes for potential\n     * content handlers.  Tries to get the java.content.handler.pkgs property\n     * to use as a set of package prefixes to search.  Whether or not\n     * that property has been defined, the sun.net.www.content is always\n     * the last one on the returned package list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String guessContentTypeFromName(String fname)",
    "returnType" : "String",
    "comment" : "\n     * Tries to determine the content type of an object, based\n     * on the specified \"file\" component of a URL.\n     * This is a convenience method that can be used by\n     * subclasses that override the {@code getContentType} method.\n     *\n     * @param   fname   a filename.\n     * @return  a guess as to what the content type of the object is,\n     *          based upon its file name.\n     * @see     java.net.URLConnection#getContentType()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String guessContentTypeFromStream(InputStream is) throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Tries to determine the type of an input stream based on the\n     * characters at the beginning of the input stream. This method can\n     * be used by subclasses that override the\n     * {@code getContentType} method.\n     * <p>\n     * Ideally, this routine would not be needed. But many\n     * {@code http} servers return the incorrect content type; in\n     * addition, there are many nonstandard extensions. Direct inspection\n     * of the bytes to determine the content type is often more accurate\n     * than believing the content type claimed by the {@code http} server.\n     *\n     * @param      is   an input stream that supports marks.\n     * @return     a guess at the content type, or {@code null} if none\n     *             can be determined.\n     * @exception  IOException  if an I/O error occurs while reading the\n     *               input stream.\n     * @see        java.io.InputStream#mark(int)\n     * @see        java.io.InputStream#markSupported()\n     * @see        java.net.URLConnection#getContentType()\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean checkfpx(InputStream is) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Check for FlashPix image data in InputStream is.  Return true if\n     * the stream has FlashPix data, false otherwise.  Before calling this\n     * method, the stream should have already been checked to be sure it\n     * contains Microsoft Structured Storage data.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int readBytes(int[] c, int len, InputStream is) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Tries to read the specified number of bytes from the stream\n     * Returns -1, If EOF is reached before len bytes are read, returns 0\n     * otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long skipForward(InputStream is, long toSkip) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips through the specified number of bytes from the stream\n     * until either EOF is reached, or the specified\n     * number of bytes have been skipped\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static synchronized FileNameMap getFileNameMap()", "public static void setFileNameMap(FileNameMap map)", "public abstract void connect() throws IOException", "public void setConnectTimeout(int timeout)", "public int getConnectTimeout()", "public void setReadTimeout(int timeout)", "public int getReadTimeout()", "public URL getURL()", "public int getContentLength()", "public long getContentLengthLong()", "public String getContentType()", "public String getContentEncoding()", "public long getExpiration()", "public long getDate()", "public long getLastModified()", "public String getHeaderField(String name)", "public Map<String, List<String>> getHeaderFields()", "public int getHeaderFieldInt(String name, int Default)", "public long getHeaderFieldLong(String name, long Default)", "public long getHeaderFieldDate(String name, long Default)", "public String getHeaderFieldKey(int n)", "public String getHeaderField(int n)", "public Object getContent() throws IOException", "public Object getContent(Class[] classes) throws IOException", "public Permission getPermission() throws IOException", "public InputStream getInputStream() throws IOException", "public OutputStream getOutputStream() throws IOException", "public String toString()", "public void setDoInput(boolean doinput)", "public boolean getDoInput()", "public void setDoOutput(boolean dooutput)", "public boolean getDoOutput()", "public void setAllowUserInteraction(boolean allowuserinteraction)", "public boolean getAllowUserInteraction()", "public static void setDefaultAllowUserInteraction(boolean defaultallowuserinteraction)", "public static boolean getDefaultAllowUserInteraction()", "public void setUseCaches(boolean usecaches)", "public boolean getUseCaches()", "public void setIfModifiedSince(long ifmodifiedsince)", "public long getIfModifiedSince()", "public boolean getDefaultUseCaches()", "public void setDefaultUseCaches(boolean defaultusecaches)", "public void setRequestProperty(String key, String value)", "public void addRequestProperty(String key, String value)", "public String getRequestProperty(String key)", "public Map<String, List<String>> getRequestProperties()", "public static void setDefaultRequestProperty(String key, String value)", "public static String getDefaultRequestProperty(String key)", "public static synchronized void setContentHandlerFactory(ContentHandlerFactory fac)", " synchronized ContentHandler getContentHandler() throws IOException", "private String stripOffParameters(String contentType)", "private ContentHandler lookupContentHandlerClassFor(String contentType) throws InstantiationException, IllegalAccessException, ClassNotFoundException", "private String typeToPackageName(String contentType)", "private String getContentHandlerPkgPrefixes()", "public static String guessContentTypeFromName(String fname)", "public static String guessContentTypeFromStream(InputStream is) throws IOException", "private static boolean checkfpx(InputStream is) throws IOException", "private static int readBytes(int[] c, int len, InputStream is) throws IOException", "private static long skipForward(InputStream is, long toSkip) throws IOException" ],
  "variableNames" : [ "url", "doInput", "doOutput", "defaultAllowUserInteraction", "allowUserInteraction", "defaultUseCaches", "useCaches", "ifModifiedSince", "connected", "connectTimeout", "readTimeout", "requests", "fileNameMap", "factory", "handlers", "contentClassPrefix", "contentPathProp" ]
}