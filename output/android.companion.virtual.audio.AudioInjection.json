{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/virtual/audio/AudioInjection.java",
  "packageName" : "android.companion.virtual.audio",
  "className" : "AudioInjection",
  "comment" : " The stop() actually doesn't release resources, so should not force implementing Closeable.",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioTrack",
    "type" : "AudioTrack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlayState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSilent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setSilent(boolean isSilent)",
    "returnType" : "void",
    "comment" : " Sets if the injected microphone sound is silent. ",
    "links" : [ ]
  }, {
    "name" : " void setAudioTrack(@Nullable AudioTrack audioTrack)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AudioTrack} to handle audio injection.\n     *\n     * <p>Callers may call this multiple times with different audio tracks to change the underlying\n     * {@link AudioTrack} without stopping and re-starting injection.\n     *\n     * @param audioTrack The underlying {@link AudioTrack} to use for injection, or null if no audio\n     *   (i.e. silence) should be injected while still keeping the record in a playing state.\n     ",
    "links" : [ "android.media.AudioTrack" ]
  }, {
    "name" : " void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AudioFormat getFormat()",
    "returnType" : "AudioFormat",
    "comment" : " See {@link AudioTrack#getFormat()}. ",
    "links" : [ "android.media.AudioTrack#getFormat()" ]
  }, {
    "name" : "public int write(@NonNull byte[] audioData, int offsetInBytes, int sizeInBytes)",
    "returnType" : "int",
    "comment" : " See {@link AudioTrack#write(byte[], int, int)}. ",
    "links" : [ "android.media.AudioTrack#write(byte" ]
  }, {
    "name" : "public int write(@NonNull byte[] audioData, int offsetInBytes, int sizeInBytes, @AudioTrack.WriteMode int writeMode)",
    "returnType" : "int",
    "comment" : " See {@link AudioTrack#write(byte[], int, int, int)}. ",
    "links" : [ "android.media.AudioTrack#write(byte" ]
  }, {
    "name" : "public int write(@NonNull ByteBuffer audioBuffer, int sizeInBytes, int writeMode)",
    "returnType" : "int",
    "comment" : " See {@link AudioTrack#write(ByteBuffer, int, int)}. ",
    "links" : [ "android.media.AudioTrack#write(ByteBuffer" ]
  }, {
    "name" : "public int write(@NonNull ByteBuffer audioBuffer, int sizeInBytes, @AudioTrack.WriteMode int writeMode, long timestamp)",
    "returnType" : "int",
    "comment" : " See {@link AudioTrack#write(ByteBuffer, int, int, long)}. ",
    "links" : [ "android.media.AudioTrack#write(ByteBuffer" ]
  }, {
    "name" : "public int write(@NonNull float[] audioData, int offsetInFloats, int sizeInFloats, @AudioTrack.WriteMode int writeMode)",
    "returnType" : "int",
    "comment" : " See {@link AudioTrack#write(float[], int, int, int)}. ",
    "links" : [ "android.media.AudioTrack#write(float" ]
  }, {
    "name" : "public int write(@NonNull short[] audioData, int offsetInShorts, int sizeInShorts)",
    "returnType" : "int",
    "comment" : " See {@link AudioTrack#write(short[], int, int)}. ",
    "links" : [ "android.media.AudioTrack#write(short" ]
  }, {
    "name" : "public int write(@NonNull short[] audioData, int offsetInShorts, int sizeInShorts, @AudioTrack.WriteMode int writeMode)",
    "returnType" : "int",
    "comment" : " See {@link AudioTrack#write(short[], int, int, int)}. ",
    "links" : [ "android.media.AudioTrack#write(short" ]
  }, {
    "name" : "public void play()",
    "returnType" : "void",
    "comment" : " See {@link AudioTrack#play()}. ",
    "links" : [ "android.media.AudioTrack#play()" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : " See {@link AudioTrack#stop()}. ",
    "links" : [ "android.media.AudioTrack#stop()" ]
  }, {
    "name" : "public int getPlayState()",
    "returnType" : "int",
    "comment" : " See {@link AudioTrack#getPlayState()}. ",
    "links" : [ "android.media.AudioTrack#getPlayState()" ]
  } ],
  "methodNames" : [ " void setSilent(boolean isSilent)", " void setAudioTrack(@Nullable AudioTrack audioTrack)", " void close()", "public AudioFormat getFormat()", "public int write(@NonNull byte[] audioData, int offsetInBytes, int sizeInBytes)", "public int write(@NonNull byte[] audioData, int offsetInBytes, int sizeInBytes, @AudioTrack.WriteMode int writeMode)", "public int write(@NonNull ByteBuffer audioBuffer, int sizeInBytes, int writeMode)", "public int write(@NonNull ByteBuffer audioBuffer, int sizeInBytes, @AudioTrack.WriteMode int writeMode, long timestamp)", "public int write(@NonNull float[] audioData, int offsetInFloats, int sizeInFloats, @AudioTrack.WriteMode int writeMode)", "public int write(@NonNull short[] audioData, int offsetInShorts, int sizeInShorts)", "public int write(@NonNull short[] audioData, int offsetInShorts, int sizeInShorts, @AudioTrack.WriteMode int writeMode)", "public void play()", "public void stop()", "public int getPlayState()" ],
  "variableNames" : [ "TAG", "mAudioFormat", "mLock", "mAudioTrack", "mPlayState", "mIsSilent" ]
}