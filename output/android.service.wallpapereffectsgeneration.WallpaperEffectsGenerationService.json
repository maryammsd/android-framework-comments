{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/wallpapereffectsgeneration/WallpaperEffectsGenerationService.java",
  "packageName" : "android.service.wallpapereffectsgeneration",
  "className" : "WallpaperEffectsGenerationService",
  "comment" : "\n * A service for handling wallpaper effects generation tasks. It must implement\n * (onGenerateCinematicEffect} method to generate response and call returnCinematicEffectResponse\n * to send the response.\n *\n * <p>To extend this service, you must declare the service in your manifest file with the\n * {@link android.Manifest.permission#BIND_WALLPAPER_EFFECTS_GENERATION} permission and includes\n * an intent filter with the {@link #SERVICE_INTERFACE} action. For example: </p>\n * <pre>\n *     <application>\n *         <service android:name=\".CtsWallpaperEffectsGenerationService\"\n *             android:exported=\"true\"\n *             android:label=\"CtsWallpaperEffectsGenerationService\"\n *             android:permission=\"android.permission.BIND_WALLPAPER_EFFECTS_GENERATION_SERVICE\">\n *             <intent-filter>\n *                 <action android:name=\"android.service.wallpapereffectsgeneration.WallpaperEffectsGenerationService\"\n />\n *             </intent-filter>\n *         </service>\n *         <uses-library android:name=\"android.test.runner\"/>\n *     </application>\n * </pre>\n *\n * @hide\n ",
  "links" : [ "android.Manifest.permission#BIND_WALLPAPER_EFFECTS_GENERATION", "#SERVICE_INTERFACE" ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     *\n     * <p>The service must also require the\n     * {@link android.permission#MANAGE_WALLPAPER_EFFECTS_GENERATION}\n     * permission.\n     *\n     ",
    "links" : [ "android.content.Intent", "android.permission#MANAGE_WALLPAPER_EFFECTS_GENERATION" ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IWallpaperEffectsGenerationManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "IWallpaperEffectsGenerationService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onGenerateCinematicEffect(@NonNull CinematicEffectRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Called when the OS receives a request for generating cinematic effect. On receiving the\n     * request, it extract cinematic information from the input and call\n     * {@link #returnCinematicEffectResponse} with the textured mesh\n     * and metadata wrapped in CinematicEffectResponse.\n     *\n     * @param request the cinematic effect request passed from the client.\n     ",
    "links" : [ "#returnCinematicEffectResponse" ]
  }, {
    "name" : "public final void returnCinematicEffectResponse(@NonNull CinematicEffectResponse response)",
    "returnType" : "void",
    "comment" : "\n     * Returns the cinematic effect response. Must be called when cinematic effect\n     * response is generated and ready to be sent back. Otherwise the response won't be\n     * returned.\n     *\n     * @param response the cinematic effect response returned from service provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onGenerateCinematicEffect(@NonNull CinematicEffectRequest request)", "public final void returnCinematicEffectResponse(@NonNull CinematicEffectResponse response)", "public void onCreate()", "public final IBinder onBind(@NonNull Intent intent)" ],
  "variableNames" : [ "SERVICE_INTERFACE", "DEBUG", "TAG", "mHandler", "mService", "mInterface" ]
}