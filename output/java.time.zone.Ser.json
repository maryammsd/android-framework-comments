{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/zone/Ser.java",
  "packageName" : "java.time.zone",
  "className" : "Ser",
  "comment" : "\n * The shared serialization delegate for this package.\n *\n * @implNote\n * This class is mutable and should be created once per serialization.\n *\n * @serial include\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Serialization version.\n     ",
    "links" : [ ]
  }, {
    "name" : "ZRULES",
    "type" : "byte",
    "comment" : " Type for ZoneRules. ",
    "links" : [ ]
  }, {
    "name" : "ZOT",
    "type" : "byte",
    "comment" : " Type for ZoneOffsetTransition. ",
    "links" : [ ]
  }, {
    "name" : "ZOTRULE",
    "type" : "byte",
    "comment" : " Type for ZoneOffsetTransitionRule. ",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "byte",
    "comment" : " The type being serialized. ",
    "links" : [ ]
  }, {
    "name" : "object",
    "type" : "Serializable",
    "comment" : " The object being serialized. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeExternal(ObjectOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Implements the {@code Externalizable} interface to write the object.\n     * @serialData\n     * Each serializable class is mapped to a type that is the first byte\n     * in the stream.  Refer to each class {@code writeReplace}\n     * serialized form for the value of the type and sequence of values for the type.\n     *\n     * <ul>\n     * <li><a href=\"{@docRoot}/serialized-form.html#java.time.zone.ZoneRules\">ZoneRules.writeReplace</a>\n     * <li><a href=\"{@docRoot}/serialized-form.html#java.time.zone.ZoneOffsetTransition\">ZoneOffsetTransition.writeReplace</a>\n     * <li><a href=\"{@docRoot}/serialized-form.html#java.time.zone.ZoneOffsetTransitionRule\">ZoneOffsetTransitionRule.writeReplace</a>\n     * </ul>\n     *\n     * @param out  the data stream to write to, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " static void write(Object object, DataOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeInternal(byte type, Object object, DataOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Implements the {@code Externalizable} interface to read the object.\n     * @serialData\n     * The streamed type and parameters defined by the type's {@code writeReplace}\n     * method are read and passed to the corresponding static factory for the type\n     * to create a new instance.  That instance is returned as the de-serialized\n     * {@code Ser} object.\n     *\n     * <ul>\n     * <li><a href=\"{@docRoot}/serialized-form.html#java.time.zone.ZoneRules\">ZoneRules</a>\n     * - {@code ZoneRules.of(standardTransitions, standardOffsets, savingsInstantTransitions, wallOffsets, lastRules);}\n     * <li><a href=\"{@docRoot}/serialized-form.html#java.time.zone.ZoneOffsetTransition\">ZoneOffsetTransition</a>\n     * - {@code ZoneOffsetTransition of(LocalDateTime.ofEpochSecond(epochSecond), offsetBefore, offsetAfter);}\n     * <li><a href=\"{@docRoot}/serialized-form.html#java.time.zone.ZoneOffsetTransitionRule\">ZoneOffsetTransitionRule</a>\n     * - {@code ZoneOffsetTransitionRule.of(month, dom, dow, time, timeEndOfDay, timeDefinition, standardOffset, offsetBefore, offsetAfter);}\n     * </ul>\n     * @param in  the data to read, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " static Serializable read(DataInput in) throws IOException, ClassNotFoundException",
    "returnType" : "Serializable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Serializable readInternal(byte type, DataInput in) throws IOException, ClassNotFoundException",
    "returnType" : "Serializable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object readResolve()",
    "returnType" : "Object",
    "comment" : "\n     * Returns the object that will replace this one.\n     *\n     * @return the read object, should never be null\n     ",
    "links" : [ ]
  }, {
    "name" : " static void writeOffset(ZoneOffset offset, DataOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the state to the stream.\n     *\n     * @param offset  the offset, not null\n     * @param out  the output stream, not null\n     * @throws IOException if an error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " static ZoneOffset readOffset(DataInput in) throws IOException",
    "returnType" : "ZoneOffset",
    "comment" : "\n     * Reads the state from the stream.\n     *\n     * @param in  the input stream, not null\n     * @return the created object, not null\n     * @throws IOException if an error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " static void writeEpochSec(long epochSec, DataOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the state to the stream.\n     *\n     * @param epochSec  the epoch seconds, not null\n     * @param out  the output stream, not null\n     * @throws IOException if an error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " static long readEpochSec(DataInput in) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Reads the state from the stream.\n     *\n     * @param in  the input stream, not null\n     * @return the epoch seconds, not null\n     * @throws IOException if an error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeExternal(ObjectOutput out) throws IOException", " static void write(Object object, DataOutput out) throws IOException", "private static void writeInternal(byte type, Object object, DataOutput out) throws IOException", "public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException", " static Serializable read(DataInput in) throws IOException, ClassNotFoundException", "private static Serializable readInternal(byte type, DataInput in) throws IOException, ClassNotFoundException", "private Object readResolve()", " static void writeOffset(ZoneOffset offset, DataOutput out) throws IOException", " static ZoneOffset readOffset(DataInput in) throws IOException", " static void writeEpochSec(long epochSec, DataOutput out) throws IOException", " static long readEpochSec(DataInput in) throws IOException" ],
  "variableNames" : [ "serialVersionUID", "ZRULES", "ZOT", "ZOTRULE", "type", "object" ]
}