{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/FragmentController.java",
  "packageName" : "android.app",
  "className" : "FragmentController",
  "comment" : "\n * Provides integration points with a {@link FragmentManager} for a fragment host.\n * <p>\n * It is the responsibility of the host to take care of the Fragment's lifecycle.\n * The methods provided by {@link FragmentController} are for that purpose.\n *\n * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">Support Library</a>\n *      {@link androidx.fragment.app.FragmentController}\n ",
  "links" : [ "android.app.FragmentController", "androidx.fragment.app.FragmentController", "android.app.FragmentManager" ],
  "variables" : [ {
    "name" : "mHost",
    "type" : "FragmentHostCallback<?>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final FragmentController createController(FragmentHostCallback<?> callbacks)",
    "returnType" : "FragmentController",
    "comment" : "\n     * Returns a {@link FragmentController}.\n     ",
    "links" : [ "android.app.FragmentController" ]
  }, {
    "name" : "public FragmentManager getFragmentManager()",
    "returnType" : "FragmentManager",
    "comment" : "\n     * Returns a {@link FragmentManager} for this controller.\n     ",
    "links" : [ "android.app.FragmentManager" ]
  }, {
    "name" : "public LoaderManager getLoaderManager()",
    "returnType" : "LoaderManager",
    "comment" : "\n     * Returns a {@link LoaderManager}.\n     ",
    "links" : [ "android.app.LoaderManager" ]
  }, {
    "name" : "public Fragment findFragmentByWho(String who)",
    "returnType" : "Fragment",
    "comment" : "\n     * Returns a fragment with the given identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attachHost(Fragment parent)",
    "returnType" : "void",
    "comment" : "\n     * Attaches the host to the FragmentManager for this controller. The host must be\n     * attached before the FragmentManager can be used to manage Fragments.\n     * ",
    "links" : [ ]
  }, {
    "name" : "public View onCreateView(View parent, String name, Context context, AttributeSet attrs)",
    "returnType" : "View",
    "comment" : "\n     * Instantiates a Fragment's view.\n     *\n     * @param parent The parent that the created view will be placed\n     * in; <em>note that this may be null</em>.\n     * @param name Tag name to be inflated.\n     * @param context The context the view is being created in.\n     * @param attrs Inflation attributes as specified in XML file.\n     *\n     * @return view the newly created view\n     ",
    "links" : [ ]
  }, {
    "name" : "public void noteStateNotSaved()",
    "returnType" : "void",
    "comment" : "\n     * Marks the fragment state as unsaved. This allows for \"state loss\" detection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Parcelable saveAllState()",
    "returnType" : "Parcelable",
    "comment" : "\n     * Saves the state for all Fragments.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void restoreAllState(Parcelable state, List<Fragment> nonConfigList)",
    "returnType" : "void",
    "comment" : "\n     * Restores the saved state for all Fragments. The given Fragment list are Fragment\n     * instances retained across configuration changes.\n     *\n     * @see #retainNonConfig()\n     *\n     * @deprecated use {@link #restoreAllState(Parcelable, FragmentManagerNonConfig)}\n     ",
    "links" : [ "#restoreAllState(Parcelable" ]
  }, {
    "name" : "public void restoreAllState(Parcelable state, FragmentManagerNonConfig nonConfig)",
    "returnType" : "void",
    "comment" : "\n     * Restores the saved state for all Fragments. The given FragmentManagerNonConfig are Fragment\n     * instances retained across configuration changes, including nested fragments\n     *\n     * @see #retainNestedNonConfig()\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Fragment> retainNonConfig()",
    "returnType" : "List<Fragment>",
    "comment" : "\n     * Returns a list of Fragments that have opted to retain their instance across\n     * configuration changes.\n     *\n     * @deprecated use {@link #retainNestedNonConfig()} to also track retained\n     *             nested child fragments\n     ",
    "links" : [ "#retainNestedNonConfig()" ]
  }, {
    "name" : "public FragmentManagerNonConfig retainNestedNonConfig()",
    "returnType" : "FragmentManagerNonConfig",
    "comment" : "\n     * Returns a nested tree of Fragments that have opted to retain their instance across\n     * configuration changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchCreate()",
    "returnType" : "void",
    "comment" : "\n     * Moves all Fragments managed by the controller's FragmentManager\n     * into the create state.\n     * <p>Call when Fragments should be created.\n     *\n     * @see Fragment#onCreate(Bundle)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchActivityCreated()",
    "returnType" : "void",
    "comment" : "\n     * Moves all Fragments managed by the controller's FragmentManager\n     * into the activity created state.\n     * <p>Call when Fragments should be informed their host has been created.\n     *\n     * @see Fragment#onActivityCreated(Bundle)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchStart()",
    "returnType" : "void",
    "comment" : "\n     * Moves all Fragments managed by the controller's FragmentManager\n     * into the start state.\n     * <p>Call when Fragments should be started.\n     *\n     * @see Fragment#onStart()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchResume()",
    "returnType" : "void",
    "comment" : "\n     * Moves all Fragments managed by the controller's FragmentManager\n     * into the resume state.\n     * <p>Call when Fragments should be resumed.\n     *\n     * @see Fragment#onResume()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchPause()",
    "returnType" : "void",
    "comment" : "\n     * Moves all Fragments managed by the controller's FragmentManager\n     * into the pause state.\n     * <p>Call when Fragments should be paused.\n     *\n     * @see Fragment#onPause()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchStop()",
    "returnType" : "void",
    "comment" : "\n     * Moves all Fragments managed by the controller's FragmentManager\n     * into the stop state.\n     * <p>Call when Fragments should be stopped.\n     *\n     * @see Fragment#onStop()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchDestroyView()",
    "returnType" : "void",
    "comment" : "\n     * Moves all Fragments managed by the controller's FragmentManager\n     * into the destroy view state.\n     * <p>Call when the Fragment's views should be destroyed.\n     *\n     * @see Fragment#onDestroyView()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchDestroy()",
    "returnType" : "void",
    "comment" : "\n     * Moves all Fragments managed by the controller's FragmentManager\n     * into the destroy state.\n     * <p>Call when Fragments should be destroyed.\n     *\n     * @see Fragment#onDestroy()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchMultiWindowModeChanged(boolean isInMultiWindowMode)",
    "returnType" : "void",
    "comment" : "\n     * Lets all Fragments managed by the controller's FragmentManager know the multi-window mode of\n     * the activity changed.\n     * <p>Call when the multi-window mode of the activity changed.\n     *\n     * @see Fragment#onMultiWindowModeChanged\n     * @deprecated use {@link #dispatchMultiWindowModeChanged(boolean, Configuration)}\n     ",
    "links" : [ "#dispatchMultiWindowModeChanged(boolean" ]
  }, {
    "name" : "public void dispatchMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig)",
    "returnType" : "void",
    "comment" : "\n     * Lets all Fragments managed by the controller's FragmentManager know the multi-window mode of\n     * the activity changed.\n     * <p>Call when the multi-window mode of the activity changed.\n     *\n     * @see Fragment#onMultiWindowModeChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode)",
    "returnType" : "void",
    "comment" : "\n     * Lets all Fragments managed by the controller's FragmentManager know the picture-in-picture\n     * mode of the activity changed.\n     * <p>Call when the picture-in-picture mode of the activity changed.\n     *\n     * @see Fragment#onPictureInPictureModeChanged\n     * @deprecated use {@link #dispatchPictureInPictureModeChanged(boolean, Configuration)}\n     ",
    "links" : [ "#dispatchPictureInPictureModeChanged(boolean" ]
  }, {
    "name" : "public void dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig)",
    "returnType" : "void",
    "comment" : "\n     * Lets all Fragments managed by the controller's FragmentManager know the picture-in-picture\n     * mode of the activity changed.\n     * <p>Call when the picture-in-picture mode of the activity changed.\n     *\n     * @see Fragment#onPictureInPictureModeChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "\n     * Lets all Fragments managed by the controller's FragmentManager\n     * know a configuration change occurred.\n     * <p>Call when there is a configuration change.\n     *\n     * @see Fragment#onConfigurationChanged(Configuration)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchLowMemory()",
    "returnType" : "void",
    "comment" : "\n     * Lets all Fragments managed by the controller's FragmentManager\n     * know the device is in a low memory condition.\n     * <p>Call when the device is low on memory and Fragment's should trim\n     * their memory usage.\n     *\n     * @see Fragment#onLowMemory()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchTrimMemory(int level)",
    "returnType" : "void",
    "comment" : "\n     * Lets all Fragments managed by the controller's FragmentManager\n     * know they should trim their memory usage.\n     * <p>Call when the Fragment can release allocated memory [such as if\n     * the Fragment is in the background].\n     *\n     * @see Fragment#onTrimMemory(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchCreateOptionsMenu(Menu menu, MenuInflater inflater)",
    "returnType" : "boolean",
    "comment" : "\n     * Lets all Fragments managed by the controller's FragmentManager\n     * know they should create an options menu.\n     * <p>Call when the Fragment should create an options menu.\n     *\n     * @return {@code true} if the options menu contains items to display\n     * @see Fragment#onCreateOptionsMenu(Menu, MenuInflater)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPrepareOptionsMenu(Menu menu)",
    "returnType" : "boolean",
    "comment" : "\n     * Lets all Fragments managed by the controller's FragmentManager\n     * know they should prepare their options menu for display.\n     * <p>Call immediately before displaying the Fragment's options menu.\n     *\n     * @return {@code true} if the options menu contains items to display\n     * @see Fragment#onPrepareOptionsMenu(Menu)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchOptionsItemSelected(MenuItem item)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends an option item selection event to the Fragments managed by the\n     * controller's FragmentManager. Once the event has been consumed,\n     * no additional handling will be performed.\n     * <p>Call immediately after an options menu item has been selected\n     *\n     * @return {@code true} if the options menu selection event was consumed\n     * @see Fragment#onOptionsItemSelected(MenuItem)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchContextItemSelected(MenuItem item)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends a context item selection event to the Fragments managed by the\n     * controller's FragmentManager. Once the event has been consumed,\n     * no additional handling will be performed.\n     * <p>Call immediately after an options menu item has been selected\n     *\n     * @return {@code true} if the context menu selection event was consumed\n     * @see Fragment#onContextItemSelected(MenuItem)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchOptionsMenuClosed(Menu menu)",
    "returnType" : "void",
    "comment" : "\n     * Lets all Fragments managed by the controller's FragmentManager\n     * know their options menu has closed.\n     * <p>Call immediately after closing the Fragment's options menu.\n     *\n     * @see Fragment#onOptionsMenuClosed(Menu)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean execPendingActions()",
    "returnType" : "boolean",
    "comment" : "\n     * Execute any pending actions for the Fragments managed by the\n     * controller's FragmentManager.\n     * <p>Call when queued actions can be performed [eg when the\n     * Fragment moves into a start or resume state].\n     * @return {@code true} if queued actions were performed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doLoaderStart()",
    "returnType" : "void",
    "comment" : "\n     * Starts the loaders.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doLoaderStop(boolean retain)",
    "returnType" : "void",
    "comment" : "\n     * Stops the loaders, optionally retaining their state. This is useful for keeping the\n     * loader state across configuration changes.\n     *\n     * @param retain When {@code true}, the loaders aren't stopped, but, their instances\n     * are retained in a started state\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doLoaderDestroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroys the loaders and, if their state is not being retained, removes them.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportLoaderStart()",
    "returnType" : "void",
    "comment" : "\n     * Lets the loaders know the host is ready to receive notifications.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayMap<String, LoaderManager> retainLoaderNonConfig()",
    "returnType" : "ArrayMap<String, LoaderManager>",
    "comment" : "\n     * Returns a list of LoaderManagers that have opted to retain their instance across\n     * configuration changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void restoreLoaderNonConfig(ArrayMap<String, LoaderManager> loaderManagers)",
    "returnType" : "void",
    "comment" : "\n     * Restores the saved state for all LoaderManagers. The given LoaderManager list are\n     * LoaderManager instances retained across configuration changes.\n     *\n     * @see #retainLoaderNonConfig()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpLoaders(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Dumps the current state of the loaders.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final FragmentController createController(FragmentHostCallback<?> callbacks)", "public FragmentManager getFragmentManager()", "public LoaderManager getLoaderManager()", "public Fragment findFragmentByWho(String who)", "public void attachHost(Fragment parent)", "public View onCreateView(View parent, String name, Context context, AttributeSet attrs)", "public void noteStateNotSaved()", "public Parcelable saveAllState()", "public void restoreAllState(Parcelable state, List<Fragment> nonConfigList)", "public void restoreAllState(Parcelable state, FragmentManagerNonConfig nonConfig)", "public List<Fragment> retainNonConfig()", "public FragmentManagerNonConfig retainNestedNonConfig()", "public void dispatchCreate()", "public void dispatchActivityCreated()", "public void dispatchStart()", "public void dispatchResume()", "public void dispatchPause()", "public void dispatchStop()", "public void dispatchDestroyView()", "public void dispatchDestroy()", "public void dispatchMultiWindowModeChanged(boolean isInMultiWindowMode)", "public void dispatchMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig)", "public void dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode)", "public void dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig)", "public void dispatchConfigurationChanged(Configuration newConfig)", "public void dispatchLowMemory()", "public void dispatchTrimMemory(int level)", "public boolean dispatchCreateOptionsMenu(Menu menu, MenuInflater inflater)", "public boolean dispatchPrepareOptionsMenu(Menu menu)", "public boolean dispatchOptionsItemSelected(MenuItem item)", "public boolean dispatchContextItemSelected(MenuItem item)", "public void dispatchOptionsMenuClosed(Menu menu)", "public boolean execPendingActions()", "public void doLoaderStart()", "public void doLoaderStop(boolean retain)", "public void doLoaderDestroy()", "public void reportLoaderStart()", "public ArrayMap<String, LoaderManager> retainLoaderNonConfig()", "public void restoreLoaderNonConfig(ArrayMap<String, LoaderManager> loaderManagers)", "public void dumpLoaders(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)" ],
  "variableNames" : [ "mHost" ]
}