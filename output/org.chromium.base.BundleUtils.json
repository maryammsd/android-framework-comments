{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/BundleUtils.java",
  "packageName" : "org.chromium.base",
  "className" : "BundleUtils",
  "comment" : "\n * Utils for working with android app bundles.\n *\n * Important notes about bundle status as interpreted by this class:\n *\n * <ul>\n *   <li>If {@link BuildConfig#BUNDLES_SUPPORTED} is false, then we are definitely not in a bundle,\n *   and ProGuard is able to strip out the bundle support library.</li>\n *   <li>If {@link BuildConfig#BUNDLES_SUPPORTED} is true, then we MIGHT be in a bundle.\n *   {@link BundleUtils#sIsBundle} is the source of truth.</li>\n * </ul>\n *\n * We need two fields to store one bit of information here to ensure that ProGuard can optimize out\n * the bundle support library (since {@link BuildConfig#BUNDLES_SUPPORTED} is final) and so that\n * we can dynamically set whether or not we're in a bundle for targets that use static shared\n * library APKs.\n ",
  "links" : [ "org.chromium.build.BuildConfig#BUNDLES_SUPPORTED", "org.chromium.base.BundleUtils#sIsBundle" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOADED_SPLITS_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIsBundle",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSplitLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCachedClassLoaders",
    "type" : "ArrayMap<String, ClassLoader>",
    "comment" : " createIsolatedSplitContext() for more info.",
    "links" : [ ]
  }, {
    "name" : "sInflationClassLoaders",
    "type" : "Map<String, ClassLoader>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSplitCompatClassLoaderInstance",
    "type" : "SplitCompatClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSplitsToRestore",
    "type" : "ArrayList<String>",
    "comment" : " restoring from recents.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void resetForTesting()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBundleForNative()",
    "returnType" : "boolean",
    "comment" : "\n     * {@link BundleUtils#isBundle()}  is not called directly by native because\n     * {@link CalledByNative} prevents inlining, causing the bundle support lib to not be\n     * removed non-bundle builds.\n     *\n     * @return true if the current build is a bundle.\n     ",
    "links" : [ "org.jni_zero.CalledByNative", "org.chromium.base.BundleUtils#isBundle()" ]
  }, {
    "name" : "public static boolean isBundle()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the current build is a bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setIsBundle(boolean isBundle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isolatedSplitsEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getSplitApkPath(String splitName)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIsolatedSplitInstalled(String splitName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether splitName is installed. Note, this will return false on Android versions\n     * below O, where isolated splits are not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Object getSplitContextLock()",
    "returnType" : "Object",
    "comment" : " The lock to hold when calling {@link Context#createContextForSplit(String)}. ",
    "links" : [ "android.content.Context#createContextForSplit(String)" ]
  }, {
    "name" : "public static Context createIsolatedSplitContext(Context base, String splitName)",
    "returnType" : "Context",
    "comment" : "\n     * Returns a context for the isolated split with the name splitName. This will throw a\n     * RuntimeException if isolated splits are enabled and the split is not installed. If the\n     * current Android version does not support isolated splits, the original context will be\n     * returned. If isolated splits are not enabled for this APK/bundle, the underlying ContextImpl\n     * from the base context will be returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void replaceClassLoader(Context baseContext, ClassLoader classLoader)",
    "returnType" : "void",
    "comment" : " Replaces the ClassLoader of the passed in Context. ",
    "links" : [ ]
  }, {
    "name" : "public static String getNativeLibraryPath(String libraryName, String splitName)",
    "returnType" : "String",
    "comment" : " Returns absolute path to a native library in a feature module. ",
    "links" : [ ]
  }, {
    "name" : "public static void checkContextClassLoader(Context baseContext, Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Object newInstance(Context context, String className)",
    "returnType" : "Object",
    "comment" : "\n     * Constructs a new instance of the given class name. If the application context class loader\n     * can load the class, that class loader will be used, otherwise the class loader from the\n     * passed in context will be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Context createContextForInflation(Context context, String splitName)",
    "returnType" : "Context",
    "comment" : "\n     * Creates a context which can access classes from the specified split, but inherits theme\n     * resources from the passed in context. This is useful if a context is needed to inflate\n     * layouts which reference classes from a split.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ClassLoader getOrCreateSplitClassLoader(String splitName)",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Returns the ClassLoader for the given split, loading the split if it has not yet been\n     * loaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ClassLoader registerSplitClassLoaderForInflation(String splitName)",
    "returnType" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean canLoadClass(ClassLoader classLoader, String className)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ClassLoader getSplitCompatClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void saveLoadedSplits(Bundle outState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void restoreLoadedSplits(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getSplitApkLibraryPath(String libraryName, String splitName)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isApplicationContext(Context context)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void resetForTesting()", "public static boolean isBundleForNative()", "public static boolean isBundle()", "public static void setIsBundle(boolean isBundle)", "public static boolean isolatedSplitsEnabled()", "private static String getSplitApkPath(String splitName)", "public static boolean isIsolatedSplitInstalled(String splitName)", "public static Object getSplitContextLock()", "public static Context createIsolatedSplitContext(Context base, String splitName)", "public static void replaceClassLoader(Context baseContext, ClassLoader classLoader)", "public static String getNativeLibraryPath(String libraryName, String splitName)", "public static void checkContextClassLoader(Context baseContext, Activity activity)", "public static Object newInstance(Context context, String className)", "public static Context createContextForInflation(Context context, String splitName)", "public static ClassLoader getOrCreateSplitClassLoader(String splitName)", "public static ClassLoader registerSplitClassLoaderForInflation(String splitName)", "public static boolean canLoadClass(ClassLoader classLoader, String className)", "public static ClassLoader getSplitCompatClassLoader()", "public static void saveLoadedSplits(Bundle outState)", "public static void restoreLoadedSplits(Bundle savedInstanceState)", "private static String getSplitApkLibraryPath(String libraryName, String splitName)", "private static boolean isApplicationContext(Context context)" ],
  "variableNames" : [ "TAG", "LOADED_SPLITS_KEY", "sIsBundle", "sSplitLock", "sCachedClassLoaders", "sInflationClassLoaders", "sSplitCompatClassLoaderInstance", "sSplitsToRestore" ]
}