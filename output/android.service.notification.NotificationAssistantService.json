{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/notification/NotificationAssistantService.java",
  "packageName" : "android.service.notification",
  "className" : "NotificationAssistantService",
  "comment" : "\n * A service that helps the user manage notifications.\n * <p>\n * Only one notification assistant can be active at a time. Unlike notification listener services,\n * assistant services can additionally modify certain aspects about notifications\n * (see {@link Adjustment}) before they are posted.\n *<p>\n * A note about managed profiles: Unlike {@link NotificationListenerService listener services},\n * NotificationAssistantServices are allowed to run in managed profiles\n * (see {@link DevicePolicyManager#isManagedProfile(ComponentName)}), so they can access the\n * information they need to create good {@link Adjustment adjustments}. To maintain the contract\n * with {@link NotificationListenerService}, an assistant service will receive all of the\n * callbacks from {@link NotificationListenerService} for the current user, managed profiles of\n * that user, and ones that affect all users. However,\n * {@link #onNotificationEnqueued(StatusBarNotification)} will only be called for notifications\n * sent to the current user, and {@link Adjustment adjuments} will only be accepted for the\n * current user.\n * <p>\n *     All callbacks are called on the main thread.\n * </p>\n * @hide\n ",
  "links" : [ "#onNotificationEnqueued(StatusBarNotification)", "android.service.notification.Adjustment", "android.service.notification.NotificationListenerService", "android.app.admin.DevicePolicyManager#isManagedProfile(ComponentName)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_FROM_APP",
    "type" : "int",
    "comment" : "\n     * To indicate an adjustment is from an app.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_FROM_ASSISTANT",
    "type" : "int",
    "comment" : "\n     * To indicate an adjustment is from a {@link NotificationAssistantService}.\n     ",
    "links" : [ "android.service.notification.NotificationAssistantService" ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "ACTION_NOTIFICATION_ASSISTANT_DETAIL_SETTINGS",
    "type" : "String",
    "comment" : "\n     * Activity Action: Show notification assistant detail setting page in NAS app.\n     * <p>\n     * In some cases, a matching Activity may not exist, so ensure you\n     * safeguard against this.\n     * <p>\n     * Input: Nothing.\n     * <p>\n     * Output: Nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEEDBACK_RATING",
    "type" : "String",
    "comment" : "\n     * Data type: int, the feedback rating score provided by user. The score can be any integer\n     *            value depends on the experimental and feedback UX design.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void attachBaseContext(Context base)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@Nullable Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onNotificationSnoozedUntilContext(@NonNull StatusBarNotification sbn, @NonNull String snoozeCriterionId)",
    "returnType" : "void",
    "comment" : "\n     * A notification was snoozed until a context. For use with\n     * {@link Adjustment#KEY_SNOOZE_CRITERIA}. When the device reaches the given context, the\n     * assistant should restore the notification with {@link #unsnoozeNotification(String)}.\n     *\n     * @param sbn the notification to snooze\n     * @param snoozeCriterionId the {@link SnoozeCriterion#getId()} representing a device context.\n     ",
    "links" : [ "android.service.notification.Adjustment#KEY_SNOOZE_CRITERIA", "android.service.notification.SnoozeCriterion#getId()", "#unsnoozeNotification(String)" ]
  }, {
    "name" : "public abstract Adjustment onNotificationEnqueued(@NonNull StatusBarNotification sbn)",
    "returnType" : "Adjustment",
    "comment" : "\n     * A notification was posted by an app. Called before post.\n     *\n     * <p>Note: this method is only called if you don't override\n     * {@link #onNotificationEnqueued(StatusBarNotification, NotificationChannel)} or\n     * {@link #onNotificationEnqueued(StatusBarNotification, NotificationChannel, RankingMap)}.</p>\n     *\n     * @param sbn the new notification\n     * @return an adjustment or null to take no action, within 200ms.\n     ",
    "links" : [ "#onNotificationEnqueued(StatusBarNotification" ]
  }, {
    "name" : "public Adjustment onNotificationEnqueued(@NonNull StatusBarNotification sbn, @NonNull NotificationChannel channel)",
    "returnType" : "Adjustment",
    "comment" : "\n     * A notification was posted by an app. Called before post.\n     *\n     * <p>Note: this method is only called if you don't override\n     * {@link #onNotificationEnqueued(StatusBarNotification, NotificationChannel, RankingMap)}.</p>\n     *\n     * @param sbn the new notification\n     * @param channel the channel the notification was posted to\n     * @return an adjustment or null to take no action, within 200ms.\n     ",
    "links" : [ "#onNotificationEnqueued(StatusBarNotification" ]
  }, {
    "name" : "public Adjustment onNotificationEnqueued(@NonNull StatusBarNotification sbn, @NonNull NotificationChannel channel, @NonNull RankingMap rankingMap)",
    "returnType" : "Adjustment",
    "comment" : "\n     * A notification was posted by an app. Called before post.\n     *\n     * @param sbn the new notification\n     * @param channel the channel the notification was posted to\n     * @param rankingMap The current ranking map that can be used to retrieve ranking information\n     *                   for active notifications.\n     * @return an adjustment or null to take no action, within 200ms.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onNotificationRemoved(@NonNull StatusBarNotification sbn, @NonNull RankingMap rankingMap, @NonNull NotificationStats stats, int reason)",
    "returnType" : "void",
    "comment" : "\n     * Implement this method to learn when notifications are removed, how they were interacted with\n     * before removal, and why they were removed.\n     * <p>\n     * This might occur because the user has dismissed the notification using system UI (or another\n     * notification listener) or because the app has withdrawn the notification.\n     * <p>\n     * NOTE: The {@link StatusBarNotification} object you receive will be \"light\"; that is, the\n     * result from {@link StatusBarNotification#getNotification} may be missing some heavyweight\n     * fields such as {@link android.app.Notification#contentView} and\n     * {@link android.app.Notification#largeIcon}. However, all other fields on\n     * {@link StatusBarNotification}, sufficient to match this call with a prior call to\n     * {@link #onNotificationPosted(StatusBarNotification)}, will be intact.\n     *\n     ** @param sbn A data structure encapsulating at least the original information (tag and id)\n     *            and source (package name) used to post the {@link android.app.Notification} that\n     *            was just removed.\n     * @param rankingMap The current ranking map that can be used to retrieve ranking information\n     *                   for active notifications.\n     * @param stats Stats about how the user interacted with the notification before it was removed.\n     * @param reason see {@link #REASON_LISTENER_CANCEL}, etc.\n     ",
    "links" : [ "#onNotificationPosted(StatusBarNotification)", "android.app.Notification#largeIcon", "android.service.notification.StatusBarNotification#getNotification", "android.app.Notification", "android.app.Notification#contentView", "#REASON_LISTENER_CANCEL", "android.service.notification.StatusBarNotification" ]
  }, {
    "name" : "public void onNotificationsSeen(@NonNull List<String> keys)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when a user has seen notifications, as triggered by\n     * {@link #setNotificationsShown(String[])}.\n     ",
    "links" : [ "#setNotificationsShown(String" ]
  }, {
    "name" : "public void onPanelRevealed(int items)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when the notification panel is revealed\n     *\n     * @param items Number of notifications on the panel at time of opening\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPanelHidden()",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when the notification panel is hidden\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onNotificationVisibilityChanged(@NonNull String key, boolean isVisible)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when a notification becomes visible or hidden from the user.\n     *\n     * @param key the notification key\n     * @param isVisible whether the notification is visible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onNotificationExpansionChanged(@NonNull String key, boolean isUserAction, boolean isExpanded)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when a notification change (expanded / collapsed) is visible to user.\n     *\n     * @param key the notification key\n     * @param isUserAction whether the expanded change is caused by user action.\n     * @param isExpanded whether the notification is expanded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onNotificationDirectReplied(@NonNull String key)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when a direct reply is sent from a notification.\n     * @param key the notification key\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onSuggestedReplySent(@NonNull String key, @NonNull CharSequence reply, @Source int source)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when a suggested reply is sent.\n     * @param key the notification key\n     * @param reply the reply that is just sent\n     * @param source the source that provided the reply, e.g. SOURCE_FROM_APP\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onActionInvoked(@NonNull String key, @NonNull Notification.Action action, @Source int source)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when an action is clicked.\n     * @param key the notification key\n     * @param action the action that is just clicked\n     * @param source the source that provided the action, e.g. SOURCE_FROM_APP\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onNotificationClicked(@NonNull String key)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when a notification is clicked by user.\n     * @param key the notification key\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onAllowedAdjustmentsChanged()",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when a user has changed which features of\n     * their notifications the assistant can modify.\n     * <p> Query {@link NotificationManager#getAllowedAssistantAdjustments()} to see what\n     * {@link Adjustment adjustments} you are currently allowed to make.</p>\n     *\n     * @deprecated changing allowed adjustments is no longer supported.\n     ",
    "links" : [ "android.app.NotificationManager#getAllowedAssistantAdjustments()", "android.service.notification.Adjustment" ]
  }, {
    "name" : "public void onNotificationFeedbackReceived(@NonNull String key, @NonNull RankingMap rankingMap, @NonNull Bundle feedback)",
    "returnType" : "void",
    "comment" : "\n     * Implement this to know when user provides a feedback.\n     * @param key the notification key\n     * @param rankingMap The current ranking map that can be used to retrieve ranking information\n     *                   for active notifications.\n     * @param feedback the received feedback, such as {@link #FEEDBACK_RATING rating score}\n     ",
    "links" : [ "#FEEDBACK_RATING" ]
  }, {
    "name" : "public final void adjustNotification(@NonNull Adjustment adjustment)",
    "returnType" : "void",
    "comment" : "\n     * Updates a notification.  N.B. this won’t cause\n     * an existing notification to alert, but might allow a future update to\n     * this notification to alert.\n     *\n     * @param adjustment the adjustment with an explanation\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void adjustNotifications(@NonNull List<Adjustment> adjustments)",
    "returnType" : "void",
    "comment" : "\n     * Updates existing notifications. Re-ranking won't occur until all adjustments are applied.\n     * N.B. this won’t cause an existing notification to alert, but might allow a future update to\n     * these notifications to alert.\n     *\n     * @param adjustments a list of adjustments with explanations\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void unsnoozeNotification(@NonNull String key)",
    "returnType" : "void",
    "comment" : "\n     * Inform the notification manager about un-snoozing a specific notification.\n     * <p>\n     * This should only be used for notifications snoozed because of a contextual snooze suggestion\n     * you provided via {@link Adjustment#KEY_SNOOZE_CRITERIA}. Once un-snoozed, you will get a\n     * {@link #onNotificationPosted(StatusBarNotification, RankingMap)} callback for the\n     * notification.\n     * @param key The key of the notification to snooze\n     ",
    "links" : [ "#onNotificationPosted(StatusBarNotification", "android.service.notification.Adjustment#KEY_SNOOZE_CRITERIA" ]
  }, {
    "name" : "private void setAdjustmentIssuer(@Nullable Adjustment adjustment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void attachBaseContext(Context base)", "public final IBinder onBind(@Nullable Intent intent)", "public abstract void onNotificationSnoozedUntilContext(@NonNull StatusBarNotification sbn, @NonNull String snoozeCriterionId)", "public abstract Adjustment onNotificationEnqueued(@NonNull StatusBarNotification sbn)", "public Adjustment onNotificationEnqueued(@NonNull StatusBarNotification sbn, @NonNull NotificationChannel channel)", "public Adjustment onNotificationEnqueued(@NonNull StatusBarNotification sbn, @NonNull NotificationChannel channel, @NonNull RankingMap rankingMap)", "public void onNotificationRemoved(@NonNull StatusBarNotification sbn, @NonNull RankingMap rankingMap, @NonNull NotificationStats stats, int reason)", "public void onNotificationsSeen(@NonNull List<String> keys)", "public void onPanelRevealed(int items)", "public void onPanelHidden()", "public void onNotificationVisibilityChanged(@NonNull String key, boolean isVisible)", "public void onNotificationExpansionChanged(@NonNull String key, boolean isUserAction, boolean isExpanded)", "public void onNotificationDirectReplied(@NonNull String key)", "public void onSuggestedReplySent(@NonNull String key, @NonNull CharSequence reply, @Source int source)", "public void onActionInvoked(@NonNull String key, @NonNull Notification.Action action, @Source int source)", "public void onNotificationClicked(@NonNull String key)", "public void onAllowedAdjustmentsChanged()", "public void onNotificationFeedbackReceived(@NonNull String key, @NonNull RankingMap rankingMap, @NonNull Bundle feedback)", "public final void adjustNotification(@NonNull Adjustment adjustment)", "public final void adjustNotifications(@NonNull List<Adjustment> adjustments)", "public final void unsnoozeNotification(@NonNull String key)", "private void setAdjustmentIssuer(@Nullable Adjustment adjustment)" ],
  "variableNames" : [ "TAG", "SOURCE_FROM_APP", "SOURCE_FROM_ASSISTANT", "SERVICE_INTERFACE", "ACTION_NOTIFICATION_ASSISTANT_DETAIL_SETTINGS", "FEEDBACK_RATING", "mHandler" ]
}