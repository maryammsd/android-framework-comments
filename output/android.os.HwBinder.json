{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/HwBinder.java",
  "packageName" : "android.os",
  "className" : "HwBinder",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNativeRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final native void transact(int code, HwParcel request, HwParcel reply, int flags) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onTransact(int code, HwParcel request, HwParcel reply, int flags) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Process a hwbinder transaction.\n     *\n     * @param code interface specific code for interface.\n     * @param request parceled transaction\n     * @param reply object to parcel reply into\n     * @param flags transaction flags to be chosen by wire protocol\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void registerService(String serviceName) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Registers this service with the hwservicemanager.\n     *\n     * @param serviceName instance name of the service\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final IHwBinder getService(String iface, String serviceName) throws RemoteException, NoSuchElementException",
    "returnType" : "IHwBinder",
    "comment" : "\n     * Returns the specified service from the hwservicemanager. Does not retry.\n     *\n     * @param iface fully-qualified interface name for example foo.bar@1.3::IBaz\n     * @param serviceName the instance name of the service for example default.\n     * @throws NoSuchElementException when the service is unavailable\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native IHwBinder getService(String iface, String serviceName, boolean retry) throws RemoteException, NoSuchElementException",
    "returnType" : "IHwBinder",
    "comment" : "\n     * Returns the specified service from the hwservicemanager.\n     * @param iface fully-qualified interface name for example foo.bar@1.3::IBaz\n     * @param serviceName the instance name of the service for example default.\n     * @param retry whether to wait for the service to start if it's not already started\n     * @throws NoSuchElementException when the service is unavailable\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void setTrebleTestingOverride(boolean testingOverride)",
    "returnType" : "void",
    "comment" : "\n     * This allows getService to bypass the VINTF manifest for testing only.\n     *\n     * Disabled on user builds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void configureRpcThreadpool(long maxThreads, boolean callerWillJoin)",
    "returnType" : "void",
    "comment" : "\n     * Configures how many threads the process-wide hwbinder threadpool\n     * has to process incoming requests.\n     *\n     * @param maxThreads total number of threads to create (includes this thread if\n     *     callerWillJoin is true)\n     * @param callerWillJoin whether joinRpcThreadpool will be called in advance\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void joinRpcThreadpool()",
    "returnType" : "void",
    "comment" : "\n     * Current thread will join hwbinder threadpool and process\n     * commands in the pool. Should be called after configuring\n     * a threadpool with callerWillJoin true and then registering\n     * the provided service if this thread doesn't need to do\n     * anything else.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final native long native_init()",
    "returnType" : "long",
    "comment" : " Returns address of the \"freeFunction\".",
    "links" : [ ]
  }, {
    "name" : "private final native void native_setup()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void native_report_sysprop_change()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void enableInstrumentation()",
    "returnType" : "void",
    "comment" : "\n     * Enable instrumentation if available.\n     *\n     * On a non-user build, this method:\n     * - tries to enable atracing (if enabled)\n     * - tries to enable coverage dumps (if running in VTS)\n     * - tries to enable record and replay (if running in VTS)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void reportSyspropChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies listeners that a system property has changed\n     *\n     * TODO(b/72480743): remove this method\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final native void transact(int code, HwParcel request, HwParcel reply, int flags) throws RemoteException", "public abstract void onTransact(int code, HwParcel request, HwParcel reply, int flags) throws RemoteException", "public final native void registerService(String serviceName) throws RemoteException", "public static final IHwBinder getService(String iface, String serviceName) throws RemoteException, NoSuchElementException", "public static final native IHwBinder getService(String iface, String serviceName, boolean retry) throws RemoteException, NoSuchElementException", "public static final native void setTrebleTestingOverride(boolean testingOverride)", "public static final native void configureRpcThreadpool(long maxThreads, boolean callerWillJoin)", "public static final native void joinRpcThreadpool()", "private static final native long native_init()", "private final native void native_setup()", "private static native void native_report_sysprop_change()", "public static void enableInstrumentation()", "public static void reportSyspropChanged()" ],
  "variableNames" : [ "TAG", "sNativeRegistry", "mNativeContext" ]
}