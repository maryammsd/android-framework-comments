{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/DrawableInflater.java",
  "packageName" : "android.graphics.drawable",
  "className" : "DrawableInflater",
  "comment" : "\n * Instantiates a drawable XML file into its corresponding\n * {@link android.graphics.drawable.Drawable} objects.\n * <p>\n * For performance reasons, inflation relies heavily on pre-processing of\n * XML files that is done at build time. Therefore, it is not currently possible\n * to use this inflater with an XmlPullParser over a plain XML file at runtime;\n * it only works with an XmlPullParser returned from a compiled resource (R.\n * <em>something</em> file.)\n *\n * @hide Pending API finalization.\n ",
  "links" : [ "android.graphics.drawable.Drawable" ],
  "variables" : [ {
    "name" : "CONSTRUCTOR_MAP",
    "type" : "HashMap<String, Constructor<? extends Drawable>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRes",
    "type" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassLoader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Drawable loadDrawable(@NonNull Context context, @DrawableRes int id)",
    "returnType" : "Drawable",
    "comment" : "\n     * Loads the drawable resource with the specified identifier.\n     *\n     * @param context the context in which the drawable should be loaded\n     * @param id the identifier of the drawable resource\n     * @return a drawable, or {@code null} if the drawable failed to load\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Drawable loadDrawable(@NonNull Resources resources, @Nullable Theme theme, @DrawableRes int id)",
    "returnType" : "Drawable",
    "comment" : "\n     * Loads the drawable resource with the specified identifier.\n     *\n     * @param resources the resources from which the drawable should be loaded\n     * @param theme the theme against which the drawable should be inflated\n     * @param id the identifier of the drawable resource\n     * @return a drawable, or {@code null} if the drawable failed to load\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable inflateFromXml(@NonNull String name, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "Drawable",
    "comment" : "\n     * Inflates a drawable from inside an XML document using an optional\n     * {@link Theme}.\n     * <p>\n     * This method should be called on a parser positioned at a tag in an XML\n     * document defining a drawable resource. It will attempt to create a\n     * Drawable from the tag at the current position.\n     *\n     * @param name the name of the tag at the current position\n     * @param parser an XML parser positioned at the drawable tag\n     * @param attrs an attribute set that wraps the parser\n     * @param theme the theme against which the drawable should be inflated, or\n     *              {@code null} to not inflate against a theme\n     * @return a drawable\n     *\n     * @throws XmlPullParserException\n     * @throws IOException\n     ",
    "links" : [ "android.content.res.Resources.Theme" ]
  }, {
    "name" : " Drawable inflateFromXmlForDensity(@NonNull String name, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, int density, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "Drawable",
    "comment" : "\n     * Version of {@link #inflateFromXml(String, XmlPullParser, AttributeSet, Theme)} that accepts\n     * an override density.\n     ",
    "links" : [ "#inflateFromXml(String" ]
  }, {
    "name" : "private Drawable inflateFromTag(@NonNull String name)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable inflateFromClass(@NonNull String className)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Drawable loadDrawable(@NonNull Context context, @DrawableRes int id)", "public static Drawable loadDrawable(@NonNull Resources resources, @Nullable Theme theme, @DrawableRes int id)", "public Drawable inflateFromXml(@NonNull String name, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", " Drawable inflateFromXmlForDensity(@NonNull String name, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, int density, @Nullable Theme theme) throws XmlPullParserException, IOException", "private Drawable inflateFromTag(@NonNull String name)", "private Drawable inflateFromClass(@NonNull String className)" ],
  "variableNames" : [ "CONSTRUCTOR_MAP", "mRes", "mClassLoader" ]
}