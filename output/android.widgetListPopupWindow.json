{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ListPopupWindow.java",
  "packageName" : "android.widget",
  "className" : "ListPopupWindow",
  "comment" : "\n * A ListPopupWindow anchors itself to a host view and displays a\n * list of choices.\n *\n * <p>ListPopupWindow contains a number of tricky behaviors surrounding\n * positioning, scrolling parents to fit the dropdown, interacting\n * sanely with the IME if present, and others.\n *\n * @attr ref android.R.styleable#ListPopupWindow_dropDownVerticalOffset\n * @attr ref android.R.styleable#ListPopupWindow_dropDownHorizontalOffset\n *\n * @see android.widget.AutoCompleteTextView\n * @see android.widget.Spinner\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXPAND_LIST_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * This value controls the length of time that the user\n     * must leave a pointer down without scrolling to expand\n     * the autocomplete dropdown list to cover the IME.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "ListAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownList",
    "type" : "DropDownListView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownHorizontalOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownVerticalOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownWindowLayoutType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownVerticalOffsetSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAnimatedFromAnchor",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlapAnchor",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlapAnchorSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownAlwaysVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForceIgnoreOutsideTouch",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListItemExpandMaximum",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPromptView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPromptPosition",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObserver",
    "type" : "DataSetObserver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownAnchorView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownListHighlight",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mItemClickListener",
    "type" : "AdapterView.OnItemClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mItemSelectedListener",
    "type" : "AdapterView.OnItemSelectedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResizePopupRunnable",
    "type" : "ResizePopupRunnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchInterceptor",
    "type" : "PopupTouchInterceptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollListener",
    "type" : "PopupScrollListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHideSelector",
    "type" : "ListSelectorHider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowDropDownRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEpicenterBounds",
    "type" : "Rect",
    "comment" : "\n     * Optional anchor-relative bounds to be used as the transition epicenter.\n     * When {@code null}, the anchor bounds are used as the epicenter.\n     ",
    "links" : [ ]
  }, {
    "name" : "mModal",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopup",
    "type" : "PopupWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POSITION_PROMPT_ABOVE",
    "type" : "int",
    "comment" : "\n     * The provided prompt view should appear above list content.\n     *\n     * @see #setPromptPosition(int)\n     * @see #getPromptPosition()\n     * @see #setPromptView(View)\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITION_PROMPT_BELOW",
    "type" : "int",
    "comment" : "\n     * The provided prompt view should appear below list content.\n     *\n     * @see #setPromptPosition(int)\n     * @see #getPromptPosition()\n     * @see #setPromptView(View)\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_PARENT",
    "type" : "int",
    "comment" : "\n     * Alias for {@link ViewGroup.LayoutParams#MATCH_PARENT}.\n     * If used to specify a popup width, the popup will match the width of the anchor view.\n     * If used to specify a popup height, the popup will fill available space.\n     ",
    "links" : [ "ViewGroup.LayoutParams#MATCH_PARENT" ]
  }, {
    "name" : "WRAP_CONTENT",
    "type" : "int",
    "comment" : "\n     * Alias for {@link ViewGroup.LayoutParams#WRAP_CONTENT}.\n     * If used to specify a popup width, the popup will use the width of its content.\n     ",
    "links" : [ "ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "INPUT_METHOD_FROM_FOCUSABLE",
    "type" : "int",
    "comment" : "\n     * Mode for {@link #setInputMethodMode(int)}: the requirements for the\n     * input method should be based on the focusability of the popup.  That is\n     * if it is focusable than it needs to work with the input method, else\n     * it doesn't.\n     ",
    "links" : [ "#setInputMethodMode" ]
  }, {
    "name" : "INPUT_METHOD_NEEDED",
    "type" : "int",
    "comment" : "\n     * Mode for {@link #setInputMethodMode(int)}: this popup always needs to\n     * work with an input method, regardless of whether it is focusable.  This\n     * means that it will always be displayed so that the user can also operate\n     * the input method while it is shown.\n     ",
    "links" : [ "#setInputMethodMode" ]
  }, {
    "name" : "INPUT_METHOD_NOT_NEEDED",
    "type" : "int",
    "comment" : "\n     * Mode for {@link #setInputMethodMode(int)}: this popup never needs to\n     * work with an input method, regardless of whether it is focusable.  This\n     * means that it will always be displayed to use as much space on the\n     * screen as needed, regardless of whether this covers the input method.\n     ",
    "links" : [ "#setInputMethodMode" ]
  } ],
  "methods" : [ {
    "name" : "public void setAdapter(@Nullable ListAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the adapter that provides the data and the views to represent the data\n     * in this popup window.\n     *\n     * @param adapter The adapter to use to create this window's content.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPromptPosition(int position)",
    "returnType" : "void",
    "comment" : "\n     * Set where the optional prompt view should appear. The default is\n     * {@link #POSITION_PROMPT_ABOVE}.\n     *\n     * @param position A position constant declaring where the prompt should be displayed.\n     *\n     * @see #POSITION_PROMPT_ABOVE\n     * @see #POSITION_PROMPT_BELOW\n     ",
    "links" : [ "#POSITION_PROMPT_ABOVE" ]
  }, {
    "name" : "public int getPromptPosition()",
    "returnType" : "int",
    "comment" : "\n     * @return Where the optional prompt view should appear.\n     *\n     * @see #POSITION_PROMPT_ABOVE\n     * @see #POSITION_PROMPT_BELOW\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setModal(boolean modal)",
    "returnType" : "void",
    "comment" : "\n     * Set whether this window should be modal when shown.\n     *\n     * <p>If a popup window is modal, it will receive all touch and key input.\n     * If the user touches outside the popup window's content area the popup window\n     * will be dismissed.\n     *\n     * @param modal {@code true} if the popup window should be modal, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isModal()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the popup window will be modal when shown.\n     *\n     * @return {@code true} if the popup window will be modal, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setForceIgnoreOutsideTouch(boolean forceIgnoreOutsideTouch)",
    "returnType" : "void",
    "comment" : "\n     * Forces outside touches to be ignored. Normally if {@link #isDropDownAlwaysVisible()} is\n     * false, we allow outside touch to dismiss the dropdown. If this is set to true, then we\n     * ignore outside touch even when the drop down is not set to always visible.\n     *\n     * @hide Used only by AutoCompleteTextView to handle some internal special cases.\n     ",
    "links" : [ "#isDropDownAlwaysVisible" ]
  }, {
    "name" : "public void setDropDownAlwaysVisible(boolean dropDownAlwaysVisible)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the drop-down should remain visible under certain conditions.\n     *\n     * The drop-down will occupy the entire screen below {@link #getAnchorView} regardless\n     * of the size or content of the list.  {@link #getBackground()} will fill any space\n     * that is not used by the list.\n     *\n     * @param dropDownAlwaysVisible Whether to keep the drop-down visible.\n     *\n     * @hide Only used by AutoCompleteTextView under special conditions.\n     ",
    "links" : [ "#getAnchorView", "#getBackground" ]
  }, {
    "name" : "public boolean isDropDownAlwaysVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the drop-down is visible under special conditions.\n     *\n     * @hide Only used by AutoCompleteTextView under special conditions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSoftInputMode(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the operating mode for the soft input area.\n     *\n     * @param mode The desired mode, see\n     *        {@link android.view.WindowManager.LayoutParams#softInputMode}\n     *        for the full list\n     *\n     * @see android.view.WindowManager.LayoutParams#softInputMode\n     * @see #getSoftInputMode()\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams#softInputMode" ]
  }, {
    "name" : "public int getSoftInputMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value in {@link #setSoftInputMode(int)}.\n     *\n     * @see #setSoftInputMode(int)\n     * @see android.view.WindowManager.LayoutParams#softInputMode\n     ",
    "links" : [ "#setSoftInputMode" ]
  }, {
    "name" : "public void setListSelector(Drawable selector)",
    "returnType" : "void",
    "comment" : "\n     * Sets a drawable to use as the list item selector.\n     *\n     * @param selector List selector drawable to use in the popup.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBackground()",
    "returnType" : "Drawable",
    "comment" : "\n     * @return The background drawable for the popup window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundDrawable(@Nullable Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Sets a drawable to be the background for the popup window.\n     *\n     * @param d A drawable to set as the background.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAnimationStyle(@StyleRes int animationStyle)",
    "returnType" : "void",
    "comment" : "\n     * Set an animation style to use when the popup window is shown or dismissed.\n     *\n     * @param animationStyle Animation style to use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAnimationStyle()",
    "returnType" : "int",
    "comment" : "\n     * Returns the animation style that will be used when the popup window is\n     * shown or dismissed.\n     *\n     * @return Animation style that will be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getAnchorView()",
    "returnType" : "View",
    "comment" : "\n     * Returns the view that will be used to anchor this popup.\n     *\n     * @return The popup's anchor view\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAnchorView(@Nullable View anchor)",
    "returnType" : "void",
    "comment" : "\n     * Sets the popup's anchor view. This popup will always be positioned relative to\n     * the anchor view when shown.\n     *\n     * @param anchor The view to use as an anchor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHorizontalOffset()",
    "returnType" : "int",
    "comment" : "\n     * @return The horizontal offset of the popup from its anchor in pixels.\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownHorizontalOffset\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHorizontalOffset(int offset)",
    "returnType" : "void",
    "comment" : "\n     * Set the horizontal offset of this popup from its anchor view in pixels.\n     *\n     * @param offset The horizontal offset of the popup from its anchor.\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownHorizontalOffset\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVerticalOffset()",
    "returnType" : "int",
    "comment" : "\n     * @return The vertical offset of the popup from its anchor in pixels.\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownVerticalOffset\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalOffset(int offset)",
    "returnType" : "void",
    "comment" : "\n     * Set the vertical offset of this popup from its anchor view in pixels.\n     *\n     * @param offset The vertical offset of the popup from its anchor.\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownVerticalOffset\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEpicenterBounds(@Nullable Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the anchor-relative bounds of the popup's transition\n     * epicenter.\n     *\n     * @param bounds anchor-relative bounds, or {@code null} to use default epicenter\n     *\n     * @see #getEpicenterBounds()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getEpicenterBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns bounds which are used as a popup's epicenter\n     * of the enter and exit transitions.\n     *\n     * @return bounds relative to anchor view, or {@code null} if not set\n     * @see #setEpicenterBounds(Rect)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownGravity(int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Set the gravity of the dropdown list. This is commonly used to\n     * set gravity to START or END for alignment with the anchor.\n     *\n     * @param gravity Gravity value to use\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * @return The width of the popup window in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWidth(int width)",
    "returnType" : "void",
    "comment" : "\n     * Sets the width of the popup window in pixels. Can also be {@link #MATCH_PARENT}\n     * or {@link #WRAP_CONTENT}.\n     *\n     * @param width Width of the popup window.\n     ",
    "links" : [ "#MATCH_PARENT", "#WRAP_CONTENT" ]
  }, {
    "name" : "public void setContentWidth(int width)",
    "returnType" : "void",
    "comment" : "\n     * Sets the width of the popup window by the size of its content. The final width may be\n     * larger to accommodate styled window dressing.\n     *\n     * @param width Desired width of content in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * @return The height of the popup window in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHeight(int height)",
    "returnType" : "void",
    "comment" : "\n     * Sets the height of the popup window in pixels. Can also be {@link #MATCH_PARENT}.\n     *\n     * @param height Height of the popup window must be a positive value,\n     *               {@link #MATCH_PARENT}, or {@link #WRAP_CONTENT}.\n     *\n     * @throws IllegalArgumentException if height is set to negative value\n     ",
    "links" : [ "#MATCH_PARENT", "#MATCH_PARENT", "#WRAP_CONTENT" ]
  }, {
    "name" : "public void setWindowLayoutType(int layoutType)",
    "returnType" : "void",
    "comment" : "\n     * Set the layout type for this popup window.\n     * <p>\n     * See {@link WindowManager.LayoutParams#type} for possible values.\n     *\n     * @param layoutType Layout type for this window.\n     *\n     * @see WindowManager.LayoutParams#type\n     ",
    "links" : [ "WindowManager.LayoutParams#type" ]
  }, {
    "name" : "public void setOnItemClickListener(@Nullable AdapterView.OnItemClickListener clickListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to receive events when a list item is clicked.\n     *\n     * @param clickListener Listener to register\n     *\n     * @see ListView#setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnItemSelectedListener(@Nullable OnItemSelectedListener selectedListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to receive events when a list item is selected.\n     *\n     * @param selectedListener Listener to register.\n     *\n     * @see ListView#setOnItemSelectedListener(OnItemSelectedListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPromptView(@Nullable View prompt)",
    "returnType" : "void",
    "comment" : "\n     * Set a view to act as a user prompt for this popup window. Where the prompt view will appear\n     * is controlled by {@link #setPromptPosition(int)}.\n     *\n     * @param prompt View to use as an informational prompt.\n     ",
    "links" : [ "#setPromptPosition" ]
  }, {
    "name" : "public void postShow()",
    "returnType" : "void",
    "comment" : "\n     * Post a {@link #show()} call to the UI thread.\n     ",
    "links" : [ "#show" ]
  }, {
    "name" : "public void show()",
    "returnType" : "void",
    "comment" : "\n     * Show the popup list. If the list is already showing, this method\n     * will recalculate the popup's size and position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dismiss()",
    "returnType" : "void",
    "comment" : "\n     * Dismiss the popup window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dismissImmediate()",
    "returnType" : "void",
    "comment" : "\n     * Remove existing exit transition from PopupWindow and force immediate dismissal.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDismissListener(@Nullable PopupWindow.OnDismissListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to receive a callback when the popup is dismissed.\n     *\n     * @param listener Listener that will be notified when the popup is dismissed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removePromptView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInputMethodMode(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Control how the popup operates with an input method: one of\n     * {@link #INPUT_METHOD_FROM_FOCUSABLE}, {@link #INPUT_METHOD_NEEDED},\n     * or {@link #INPUT_METHOD_NOT_NEEDED}.\n     *\n     * <p>If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown or through a manual call to the {@link #show()}\n     * method.</p>\n     *\n     * @see #getInputMethodMode()\n     * @see #show()\n     ",
    "links" : [ "#INPUT_METHOD_FROM_FOCUSABLE", "#INPUT_METHOD_NEEDED", "#INPUT_METHOD_NOT_NEEDED", "#show" ]
  }, {
    "name" : "public int getInputMethodMode()",
    "returnType" : "int",
    "comment" : "\n     * Return the current value in {@link #setInputMethodMode(int)}.\n     *\n     * @see #setInputMethodMode(int)\n     ",
    "links" : [ "#setInputMethodMode" ]
  }, {
    "name" : "public void setSelection(int position)",
    "returnType" : "void",
    "comment" : "\n     * Set the selected position of the list.\n     * Only valid when {@link #isShowing()} == {@code true}.\n     *\n     * @param position List position to set as selected.\n     ",
    "links" : [ "#isShowing" ]
  }, {
    "name" : "public void clearListSelection()",
    "returnType" : "void",
    "comment" : "\n     * Clear any current list selection.\n     * Only valid when {@link #isShowing()} == {@code true}.\n     ",
    "links" : [ "#isShowing" ]
  }, {
    "name" : "public boolean isShowing()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the popup is currently showing, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInputMethodNotNeeded()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if this popup is configured to assume the user does not need\n     * to interact with the IME while it is showing, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performItemClick(int position)",
    "returnType" : "boolean",
    "comment" : "\n     * Perform an item click operation on the specified list adapter position.\n     *\n     * @param position Adapter position for performing the click\n     * @return true if the click action could be performed, false if not.\n     *         (e.g. if the popup was not showing, this method would return false.)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getSelectedItem()",
    "returnType" : "Object",
    "comment" : "\n     * @return The currently selected item or null if the popup is not showing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSelectedItemPosition()",
    "returnType" : "int",
    "comment" : "\n     * @return The position of the currently selected item or {@link ListView#INVALID_POSITION}\n     * if {@link #isShowing()} == {@code false}.\n     *\n     * @see ListView#getSelectedItemPosition()\n     ",
    "links" : [ "ListView#INVALID_POSITION", "#isShowing" ]
  }, {
    "name" : "public long getSelectedItemId()",
    "returnType" : "long",
    "comment" : "\n     * @return The ID of the currently selected item or {@link ListView#INVALID_ROW_ID}\n     * if {@link #isShowing()} == {@code false}.\n     *\n     * @see ListView#getSelectedItemId()\n     ",
    "links" : [ "ListView#INVALID_ROW_ID", "#isShowing" ]
  }, {
    "name" : "public View getSelectedView()",
    "returnType" : "View",
    "comment" : "\n     * @return The View for the currently selected item or null if\n     * {@link #isShowing()} == {@code false}.\n     *\n     * @see ListView#getSelectedView()\n     ",
    "links" : [ "#isShowing" ]
  }, {
    "name" : "public ListView getListView()",
    "returnType" : "ListView",
    "comment" : "\n     * @return The {@link ListView} displayed within the popup window.\n     * Only valid when {@link #isShowing()} == {@code true}.\n     ",
    "links" : [ "ListView", "#isShowing" ]
  }, {
    "name" : " DropDownListView createDropDownListView(Context context, boolean hijackFocus)",
    "returnType" : "DropDownListView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setListItemExpandMax(int max)",
    "returnType" : "void",
    "comment" : "\n     * The maximum number of list items that can be visible and still have\n     * the list expand when touched.\n     *\n     * @param max Max number of items that can be visible and still allow the list to expand.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Filter key down events. By forwarding key down events to this function,\n     * views using non-modal ListPopupWindow can have it handle key selection of items.\n     *\n     * @param keyCode keyCode param passed to the host view's onKeyDown\n     * @param event event param passed to the host view's onKeyDown\n     * @return true if the event was handled, false if it was ignored.\n     *\n     * @see #setModal(boolean)\n     * @see #onKeyUp(int, KeyEvent)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Filter key up events. By forwarding key up events to this function,\n     * views using non-modal ListPopupWindow can have it handle key selection of items.\n     *\n     * @param keyCode keyCode param passed to the host view's onKeyUp\n     * @param event event param passed to the host view's onKeyUp\n     * @return true if the event was handled, false if it was ignored.\n     *\n     * @see #setModal(boolean)\n     * @see #onKeyDown(int, KeyEvent)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyPreIme(int keyCode, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Filter pre-IME key events. By forwarding {@link View#onKeyPreIme(int, KeyEvent)}\n     * events to this function, views using ListPopupWindow can have it dismiss the popup\n     * when the back key is pressed.\n     *\n     * @param keyCode keyCode param passed to the host view's onKeyPreIme\n     * @param event event param passed to the host view's onKeyPreIme\n     * @return true if the event was handled, false if it was ignored.\n     *\n     * @see #setModal(boolean)\n     ",
    "links" : [ "View#onKeyPreIme" ]
  }, {
    "name" : "public OnTouchListener createDragToOpenListener(View src)",
    "returnType" : "OnTouchListener",
    "comment" : "\n     * Returns an {@link OnTouchListener} that can be added to the source view\n     * to implement drag-to-open behavior. Generally, the source view should be\n     * the same view that was passed to {@link #setAnchorView}.\n     * <p>\n     * When the listener is set on a view, touching that view and dragging\n     * outside of its bounds will open the popup window. Lifting will select the\n     * currently touched list item.\n     * <p>\n     * Example usage:\n     * <pre>\n     * ListPopupWindow myPopup = new ListPopupWindow(context);\n     * myPopup.setAnchor(myAnchor);\n     * OnTouchListener dragListener = myPopup.createDragToOpenListener(myAnchor);\n     * myAnchor.setOnTouchListener(dragListener);\n     * </pre>\n     *\n     * @param src the view on which the resulting listener will be set\n     * @return a touch listener that controls drag-to-open behavior\n     ",
    "links" : [ "OnTouchListener", "#setAnchorView" ]
  }, {
    "name" : "private int buildDropDown()",
    "returnType" : "int",
    "comment" : "\n     * <p>Builds the popup window's content and returns the height the popup\n     * should have. Returns -1 when the content already exists.</p>\n     *\n     * @return the content's height or -1 if content already exists\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOverlapAnchor(boolean overlap)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "EXPAND_LIST_TIMEOUT", "mContext", "mAdapter", "mDropDownList", "mDropDownHeight", "mDropDownWidth", "mDropDownHorizontalOffset", "mDropDownVerticalOffset", "mDropDownWindowLayoutType", "mDropDownVerticalOffsetSet", "mIsAnimatedFromAnchor", "mOverlapAnchor", "mOverlapAnchorSet", "mDropDownGravity", "mDropDownAlwaysVisible", "mForceIgnoreOutsideTouch", "mListItemExpandMaximum", "mPromptView", "mPromptPosition", "mObserver", "mDropDownAnchorView", "mDropDownListHighlight", "mItemClickListener", "mItemSelectedListener", "mResizePopupRunnable", "mTouchInterceptor", "mScrollListener", "mHideSelector", "mShowDropDownRunnable", "mHandler", "mTempRect", "mEpicenterBounds", "mModal", "mPopup", "POSITION_PROMPT_ABOVE", "POSITION_PROMPT_BELOW", "MATCH_PARENT", "WRAP_CONTENT", "INPUT_METHOD_FROM_FOCUSABLE", "INPUT_METHOD_NEEDED", "INPUT_METHOD_NOT_NEEDED" ],
  "methodNames" : [ "public void setAdapter(@Nullable ListAdapter adapter)", "public void setPromptPosition(int position)", "public int getPromptPosition()", "public void setModal(boolean modal)", "public boolean isModal()", "public void setForceIgnoreOutsideTouch(boolean forceIgnoreOutsideTouch)", "public void setDropDownAlwaysVisible(boolean dropDownAlwaysVisible)", "public boolean isDropDownAlwaysVisible()", "public void setSoftInputMode(int mode)", "public int getSoftInputMode()", "public void setListSelector(Drawable selector)", "public Drawable getBackground()", "public void setBackgroundDrawable(@Nullable Drawable d)", "public void setAnimationStyle(@StyleRes int animationStyle)", "public int getAnimationStyle()", "public View getAnchorView()", "public void setAnchorView(@Nullable View anchor)", "public int getHorizontalOffset()", "public void setHorizontalOffset(int offset)", "public int getVerticalOffset()", "public void setVerticalOffset(int offset)", "public void setEpicenterBounds(@Nullable Rect bounds)", "public Rect getEpicenterBounds()", "public void setDropDownGravity(int gravity)", "public int getWidth()", "public void setWidth(int width)", "public void setContentWidth(int width)", "public int getHeight()", "public void setHeight(int height)", "public void setWindowLayoutType(int layoutType)", "public void setOnItemClickListener(@Nullable AdapterView.OnItemClickListener clickListener)", "public void setOnItemSelectedListener(@Nullable OnItemSelectedListener selectedListener)", "public void setPromptView(@Nullable View prompt)", "public void postShow()", "public void show()", "public void dismiss()", "public void dismissImmediate()", "public void setOnDismissListener(@Nullable PopupWindow.OnDismissListener listener)", "private void removePromptView()", "public void setInputMethodMode(int mode)", "public int getInputMethodMode()", "public void setSelection(int position)", "public void clearListSelection()", "public boolean isShowing()", "public boolean isInputMethodNotNeeded()", "public boolean performItemClick(int position)", "public Object getSelectedItem()", "public int getSelectedItemPosition()", "public long getSelectedItemId()", "public View getSelectedView()", "public ListView getListView()", " DropDownListView createDropDownListView(Context context, boolean hijackFocus)", " void setListItemExpandMax(int max)", "public boolean onKeyDown(int keyCode, @NonNull KeyEvent event)", "public boolean onKeyUp(int keyCode, @NonNull KeyEvent event)", "public boolean onKeyPreIme(int keyCode, @NonNull KeyEvent event)", "public OnTouchListener createDragToOpenListener(View src)", "private int buildDropDown()", "public void setOverlapAnchor(boolean overlap)" ]
}