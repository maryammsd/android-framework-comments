{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/JarVerifier.java",
  "packageName" : "javax.crypto",
  "className" : "JarVerifier",
  "comment" : "\n * This class verifies JAR files (and any supporting JAR files), and\n * determines whether they may be used in this implementation.\n *\n * The JCE in OpenJDK has an open cryptographic interface, meaning it\n * does not restrict which providers can be used.  Compliance with\n * United States export controls and with local law governing the\n * import/export of products incorporating the JCE in the OpenJDK is\n * the responsibility of the licensee.\n *\n * @since 1.7\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "jarURL",
    "type" : "URL",
    "comment" : " The URL for the JAR file we want to verify.",
    "links" : [ ]
  }, {
    "name" : "savePerms",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "appPerms",
    "type" : "CryptoPermissions",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void verify() throws JarException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Verify the JAR file is signed by an entity which has a certificate\n     * issued by a trusted CA.\n     *\n     * In OpenJDK, we just need to examine the \"cryptoperms\" file to see\n     * if any permissions were bundled together with this jar file.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void verifyPolicySigned(java.security.cert.Certificate[] certs) throws Exception",
    "returnType" : "void",
    "comment" : "\n     * Verify that the provided certs include the\n     * framework signing certificate.\n     *\n     * @param certs the list of certs to be checked.\n     * @throws Exception if the list of certs did not contain\n     *          the framework signing certificate\n     ",
    "links" : [ ]
  }, {
    "name" : " CryptoPermissions getPermissions()",
    "returnType" : "CryptoPermissions",
    "comment" : "\n     * Returns the permissions which are bundled with the JAR file,\n     * aka the \"cryptoperms\" file.\n     *\n     * NOTE: if this JarVerifier instance is constructed with \"savePerms\"\n     * equal to false, then this method would always return null.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void verify() throws JarException, IOException", " static void verifyPolicySigned(java.security.cert.Certificate[] certs) throws Exception", " CryptoPermissions getPermissions()" ],
  "variableNames" : [ "jarURL", "savePerms", "appPerms" ]
}