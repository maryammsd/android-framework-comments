{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/Display.java",
  "packageName" : "android.view",
  "className" : "Mode",
  "comment" : "\n     * A mode supported by a given display.\n     *\n     * @see Display#getSupportedModes()\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EMPTY_ARRAY",
    "type" : "Mode[]",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INVALID_MODE_ID",
    "type" : "int",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mModeId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPeakRefreshRate",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVsyncRate",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlternativeRefreshRates",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedHdrTypes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Mode>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getModeId()",
    "returnType" : "int",
    "comment" : "\n         * Returns this mode's id.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getPhysicalWidth()",
    "returnType" : "int",
    "comment" : "\n         * Returns the physical width of the display in pixels when configured in this mode's\n         * resolution.\n         * <p>\n         * Note that due to application UI scaling, the number of pixels made available to\n         * applications when the mode is active (as reported by {@link Display#getWidth()} may\n         * differ from the mode's actual resolution (as reported by this function).\n         * <p>\n         * For example, applications running on a 4K display may have their UI laid out and rendered\n         * in 1080p and then scaled up. Applications can take advantage of the extra resolution by\n         * rendering content through a {@link android.view.SurfaceView} using full size buffers.\n         ",
    "links" : [ "android.view.SurfaceView", "android.view.Display#getWidth()" ]
  }, {
    "name" : "public int getPhysicalHeight()",
    "returnType" : "int",
    "comment" : "\n         * Returns the physical height of the display in pixels when configured in this mode's\n         * resolution.\n         * <p>\n         * Note that due to application UI scaling, the number of pixels made available to\n         * applications when the mode is active (as reported by {@link Display#getHeight()} may\n         * differ from the mode's actual resolution (as reported by this function).\n         * <p>\n         * For example, applications running on a 4K display may have their UI laid out and rendered\n         * in 1080p and then scaled up. Applications can take advantage of the extra resolution by\n         * rendering content through a {@link android.view.SurfaceView} using full size buffers.\n         ",
    "links" : [ "android.view.SurfaceView", "android.view.Display#getHeight()" ]
  }, {
    "name" : "public float getRefreshRate()",
    "returnType" : "float",
    "comment" : "\n         * Returns the refresh rate in frames per second.\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getVsyncRate()",
    "returnType" : "float",
    "comment" : "\n         * Returns the vsync rate in frames per second.\n         * The physical vsync rate may be higher than the refresh rate, as the refresh rate may be\n         * constrained by the system.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public float[] getAlternativeRefreshRates()",
    "returnType" : "float[]",
    "comment" : "\n         * Returns an array of refresh rates which can be switched to seamlessly.\n         * <p>\n         * A seamless switch is one without visual interruptions, such as a black screen for\n         * a second or two.\n         * <p>\n         * Presence in this list does not guarantee a switch will occur to the desired\n         * refresh rate, but rather, if a switch does occur to a refresh rate in this list,\n         * it is guaranteed to be seamless.\n         * <p>\n         * The binary relation \"refresh rate X is alternative to Y\" is non-reflexive,\n         * symmetric and transitive. For example the mode 1920x1080 60Hz, will never have an\n         * alternative refresh rate of 60Hz. If 1920x1080 60Hz has an alternative of 50Hz\n         * then 1920x1080 50Hz will have alternative refresh rate of 60Hz. If 1920x1080 60Hz\n         * has an alternative of 50Hz and 1920x1080 50Hz has an alternative of 24Hz, then 1920x1080\n         * 60Hz will also have an alternative of 24Hz.\n         *\n         * @see Surface#setFrameRate\n         * @see SurfaceControl.Transaction#setFrameRate\n         ",
    "links" : [ ]
  }, {
    "name" : "public int[] getSupportedHdrTypes()",
    "returnType" : "int[]",
    "comment" : "\n         * Returns the supported {@link HdrCapabilities} HDR_TYPE_* for this specific mode\n         ",
    "links" : [ "HdrCapabilities" ]
  }, {
    "name" : "public boolean matches(int width, int height, float refreshRate)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if this mode matches the given parameters.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean matchesIfValid(int width, int height, float peakRefreshRate)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if this mode matches the given parameters, if those parameters are\n         * valid.<p>\n         * If resolution (width and height) is valid and refresh-rate is not, the method matches\n         * only resolution.\n         * If refresh-rate is valid and resolution (width and height) is not, the method matches\n         * only refresh-rate.</p>\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean equalsExceptRefreshRate(@Nullable Display.Mode other)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if this mode equals to the other mode in all parameters except\n         * the refresh rate.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRefreshRateSet()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if refresh-rate is set for a display mode\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isResolutionSet()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if refresh-rate is set for a display mode\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getModeId()", "public int getPhysicalWidth()", "public int getPhysicalHeight()", "public float getRefreshRate()", "public float getVsyncRate()", "public float[] getAlternativeRefreshRates()", "public int[] getSupportedHdrTypes()", "public boolean matches(int width, int height, float refreshRate)", "public boolean matchesIfValid(int width, int height, float peakRefreshRate)", "public boolean equalsExceptRefreshRate(@Nullable Display.Mode other)", "public boolean isRefreshRateSet()", "public boolean isResolutionSet()", "public boolean equals(@Nullable Object other)", "public int hashCode()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel out, int parcelableFlags)" ],
  "variableNames" : [ "EMPTY_ARRAY", "INVALID_MODE_ID", "mModeId", "mWidth", "mHeight", "mPeakRefreshRate", "mVsyncRate", "mAlternativeRefreshRates", "mSupportedHdrTypes", "CREATOR" ]
}