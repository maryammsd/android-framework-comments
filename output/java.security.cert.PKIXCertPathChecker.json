{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/PKIXCertPathChecker.java",
  "packageName" : "java.security.cert",
  "className" : "PKIXCertPathChecker",
  "comment" : "\n * An abstract class that performs one or more checks on an\n * {@code X509Certificate}.\n *\n * <p>A concrete implementation of the {@code PKIXCertPathChecker} class\n * can be created to extend the PKIX certification path validation algorithm.\n * For example, an implementation may check for and process a critical private\n * extension of each certificate in a certification path.\n *\n * <p>Instances of {@code PKIXCertPathChecker} are passed as parameters\n * using the {@link PKIXParameters#setCertPathCheckers setCertPathCheckers}\n * or {@link PKIXParameters#addCertPathChecker addCertPathChecker} methods\n * of the {@code PKIXParameters} and {@code PKIXBuilderParameters}\n * class. Each of the {@code PKIXCertPathChecker}s {@link #check check}\n * methods will be called, in turn, for each certificate processed by a PKIX\n * {@code CertPathValidator} or {@code CertPathBuilder}\n * implementation.\n *\n * <p>A {@code PKIXCertPathChecker} may be called multiple times on\n * successive certificates in a certification path. Concrete subclasses\n * are expected to maintain any internal state that may be necessary to\n * check successive certificates. The {@link #init init} method is used\n * to initialize the internal state of the checker so that the certificates\n * of a new certification path may be checked. A stateful implementation\n * <b>must</b> override the {@link #clone clone} method if necessary in\n * order to allow a PKIX {@code CertPathBuilder} to efficiently\n * backtrack and try other paths. In these situations, the\n * {@code CertPathBuilder} is able to restore prior path validation\n * states by restoring the cloned {@code PKIXCertPathChecker}s.\n *\n * <p>The order in which the certificates are presented to the\n * {@code PKIXCertPathChecker} may be either in the forward direction\n * (from target to most-trusted CA) or in the reverse direction (from\n * most-trusted CA to target). A {@code PKIXCertPathChecker} implementation\n * <b>must</b> support reverse checking (the ability to perform its checks when\n * it is presented with certificates in the reverse direction) and <b>may</b>\n * support forward checking (the ability to perform its checks when it is\n * presented with certificates in the forward direction). The\n * {@link #isForwardCheckingSupported isForwardCheckingSupported} method\n * indicates whether forward checking is supported.\n * <p>\n * Additional input parameters required for executing the check may be\n * specified through constructors of concrete implementations of this class.\n * <p>\n * <b>Concurrent Access</b>\n * <p>\n * Unless otherwise specified, the methods defined in this class are not\n * thread-safe. Multiple threads that need to access a single\n * object concurrently should synchronize amongst themselves and\n * provide the necessary locking. Multiple threads each manipulating\n * separate objects need not synchronize.\n *\n * @see PKIXParameters\n * @see PKIXBuilderParameters\n *\n * @since       1.4\n * @author      Yassir Elley\n * @author      Sean Mullan\n ",
  "links" : [ "java.security.cert.PKIXParameters#setCertPathCheckers", "#clone", "#check", "#init", "#isForwardCheckingSupported", "java.security.cert.PKIXParameters#addCertPathChecker" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void init(boolean forward) throws CertPathValidatorException",
    "returnType" : "void",
    "comment" : "\n     * Initializes the internal state of this {@code PKIXCertPathChecker}.\n     * <p>\n     * The {@code forward} flag specifies the order that\n     * certificates will be passed to the {@link #check check} method\n     * (forward or reverse). A {@code PKIXCertPathChecker} <b>must</b>\n     * support reverse checking and <b>may</b> support forward checking.\n     *\n     * @param forward the order that certificates are presented to\n     * the {@code check} method. If {@code true}, certificates\n     * are presented from target to most-trusted CA (forward); if\n     * {@code false}, from most-trusted CA to target (reverse).\n     * @throws CertPathValidatorException if this\n     * {@code PKIXCertPathChecker} is unable to check certificates in\n     * the specified order; it should never be thrown if the forward flag\n     * is false since reverse checking must be supported\n     ",
    "links" : [ "#check" ]
  }, {
    "name" : "public abstract boolean isForwardCheckingSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if forward checking is supported. Forward checking refers\n     * to the ability of the {@code PKIXCertPathChecker} to perform\n     * its checks when certificates are presented to the {@code check}\n     * method in the forward direction (from target to most-trusted CA).\n     *\n     * @return {@code true} if forward checking is supported,\n     * {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Set<String> getSupportedExtensions()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns an immutable {@code Set} of X.509 certificate extensions\n     * that this {@code PKIXCertPathChecker} supports (i.e. recognizes, is\n     * able to process), or {@code null} if no extensions are supported.\n     * <p>\n     * Each element of the set is a {@code String} representing the\n     * Object Identifier (OID) of the X.509 extension that is supported.\n     * The OID is represented by a set of nonnegative integers separated by\n     * periods.\n     * <p>\n     * All X.509 certificate extensions that a {@code PKIXCertPathChecker}\n     * might possibly be able to process should be included in the set.\n     *\n     * @return an immutable {@code Set} of X.509 extension OIDs (in\n     * {@code String} format) supported by this\n     * {@code PKIXCertPathChecker}, or {@code null} if no\n     * extensions are supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void check(Certificate cert, Collection<String> unresolvedCritExts) throws CertPathValidatorException",
    "returnType" : "void",
    "comment" : "\n     * Performs the check(s) on the specified certificate using its internal\n     * state and removes any critical extensions that it processes from the\n     * specified collection of OID strings that represent the unresolved\n     * critical extensions. The certificates are presented in the order\n     * specified by the {@code init} method.\n     *\n     * @param cert the {@code Certificate} to be checked\n     * @param unresolvedCritExts a {@code Collection} of OID strings\n     * representing the current set of unresolved critical extensions\n     * @exception CertPathValidatorException if the specified certificate does\n     * not pass the check\n     ",
    "links" : [ ]
  }, {
    "name" : "public void check(Certificate cert) throws CertPathValidatorException",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This implementation calls\n     * {@code check(cert, java.util.Collections.<String>emptySet())}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a clone of this object. Calls the {@code Object.clone()}\n     * method.\n     * All subclasses which maintain state must support and\n     * override this method, if necessary.\n     *\n     * @return a copy of this {@code PKIXCertPathChecker}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void init(boolean forward) throws CertPathValidatorException", "public abstract boolean isForwardCheckingSupported()", "public abstract Set<String> getSupportedExtensions()", "public abstract void check(Certificate cert, Collection<String> unresolvedCritExts) throws CertPathValidatorException", "public void check(Certificate cert) throws CertPathValidatorException", "public Object clone()" ],
  "variableNames" : [ ]
}