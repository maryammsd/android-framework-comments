{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/XPathException.java",
  "packageName" : "org.apache.xpath",
  "className" : "XPathException",
  "comment" : "\n * This class implements an exception object that all\n * XPath classes will throw in case of an error.  This class\n * extends TransformerException, and may hold other exceptions. In the\n * case of nested exceptions, printStackTrace will dump\n * all the traces of the nested exceptions, not just the trace\n * of this object.\n * @xsl.usage general\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_styleNode",
    "type" : "Object",
    "comment" : " The home of the expression that caused the error.\n   *  @serial  ",
    "links" : [ ]
  }, {
    "name" : "m_exception",
    "type" : "Exception",
    "comment" : " A nested exception.\n   *  @serial   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object getStylesheetNode()",
    "returnType" : "Object",
    "comment" : "\n   * Get the stylesheet node from where this error originated.\n   * @return The stylesheet node from where this error originated, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setStylesheetNode(Object styleNode)",
    "returnType" : "void",
    "comment" : "\n   * Set the stylesheet node from where this error originated.\n   * @param styleNode The stylesheet node from where this error originated, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public org.w3c.dom.Node getStylesheetNode(ExpressionNode ex)",
    "returnType" : "org.w3c.dom.Node",
    "comment" : "\n   * Get the XSLT ElemVariable that this sub-expression references.  In order for \n   * this to work, the SourceLocator must be the owning ElemTemplateElement.\n   * @return The dereference to the ElemVariable, or null if not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected ExpressionNode getExpressionOwner(ExpressionNode ex)",
    "returnType" : "ExpressionNode",
    "comment" : "\n   * Get the first non-Expression parent of this node.\n   * @return null or first ancestor that is not an Expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void printStackTrace(java.io.PrintStream s)",
    "returnType" : "void",
    "comment" : "\n   * Print the the trace of methods from where the error\n   * originated.  This will trace all nested exception\n   * objects, as well as this object.\n   * @param s The stream where the dump will be sent to.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getMessage()",
    "returnType" : "String",
    "comment" : "\n   * Find the most contained message.\n   *\n   * @return The error message of the originating exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void printStackTrace(java.io.PrintWriter s)",
    "returnType" : "void",
    "comment" : "\n   * Print the the trace of methods from where the error\n   * originated.  This will trace all nested exception\n   * objects, as well as this object.\n   * @param s The writer where the dump will be sent to.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Throwable getException()",
    "returnType" : "Throwable",
    "comment" : "\n   *  Return the embedded exception, if any.\n   *  Overrides javax.xml.transform.TransformerException.getException().\n   * \n   *  @return The embedded exception, or null if there is none.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object getStylesheetNode()", "public void setStylesheetNode(Object styleNode)", "public org.w3c.dom.Node getStylesheetNode(ExpressionNode ex)", "protected ExpressionNode getExpressionOwner(ExpressionNode ex)", "public void printStackTrace(java.io.PrintStream s)", "public String getMessage()", "public void printStackTrace(java.io.PrintWriter s)", "public Throwable getException()" ],
  "variableNames" : [ "serialVersionUID", "m_styleNode", "m_exception" ]
}