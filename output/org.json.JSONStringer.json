{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/json/JSONStringer.java",
  "packageName" : "org.json",
  "className" : "JSONStringer",
  "comment" : "\n * Implements {@link JSONObject#toString} and {@link JSONArray#toString}. Most\n * application developers should use those methods directly and disregard this\n * API. For example:<pre>\n * JSONObject object = ...\n * String json = object.toString();</pre>\n *\n * <p>Stringers only encode well-formed JSON strings. In particular:\n * <ul>\n *   <li>The stringer must have exactly one top-level array or object.\n *   <li>Lexical scopes must be balanced: every call to {@link #array} must\n *       have a matching call to {@link #endArray} and every call to {@link\n *       #object} must have a matching call to {@link #endObject}.\n *   <li>Arrays may not contain keys (property names).\n *   <li>Objects must alternate keys (property names) and values.\n *   <li>Values are inserted with either literal {@link #value(Object) value}\n *       calls, or by nesting arrays or objects.\n * </ul>\n * Calls that would result in a malformed JSON string will fail with a\n * {@link JSONException}.\n *\n * <p>This class provides no facility for pretty-printing (ie. indenting)\n * output. To encode indented output, use {@link JSONObject#toString(int)} or\n * {@link JSONArray#toString(int)}.\n *\n * <p>Some implementations of the API support at most 20 levels of nesting.\n * Attempts to create more than 20 levels of nesting may fail with a {@link\n * JSONException}.\n *\n * <p>Each stringer may be used to encode a single top level value. Instances of\n * this class are not thread safe. Although this class is nonfinal, it was not\n * designed for inheritance and should not be subclassed. In particular,\n * self-use by overrideable methods is not specified. See <i>Effective Java</i>\n * Item 17, \"Design and Document or inheritance or else prohibit it\" for further\n * information.\n ",
  "links" : [ "org.json.JSONArray#toString", "#array", "org.json.JSONException", "org.json.JSONObject#toString", "#endObject", "#object", "org.json.JSONArray#toString(int)", "#endArray", "org.json.JSONObject#toString(int)", "#value(Object)" ],
  "variables" : [ {
    "name" : "out",
    "type" : "StringBuilder",
    "comment" : " The output data, containing at most one top-level array or object. ",
    "links" : [ ]
  }, {
    "name" : "stack",
    "type" : "List<Scope>",
    "comment" : "\n     * Unlike the original implementation, this stack isn't limited to 20\n     * levels of nesting.\n     ",
    "links" : [ ]
  }, {
    "name" : "indent",
    "type" : "String",
    "comment" : "\n     * A string containing a full set of spaces for a single level of\n     * indentation, or null for no pretty printing.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public JSONStringer array() throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Begins encoding a new array. Each call to this method must be paired with\n     * a call to {@link #endArray}.\n     *\n     * @return this stringer.\n     ",
    "links" : [ "#endArray" ]
  }, {
    "name" : "public JSONStringer endArray() throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Ends encoding the current array.\n     *\n     * @return this stringer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONStringer object() throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Begins encoding a new object. Each call to this method must be paired\n     * with a call to {@link #endObject}.\n     *\n     * @return this stringer.\n     ",
    "links" : [ "#endObject" ]
  }, {
    "name" : "public JSONStringer endObject() throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Ends encoding the current object.\n     *\n     * @return this stringer.\n     ",
    "links" : [ ]
  }, {
    "name" : " JSONStringer open(Scope empty, String openBracket) throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Enters a new scope by appending any necessary whitespace and the given\n     * bracket.\n     ",
    "links" : [ ]
  }, {
    "name" : " JSONStringer close(Scope empty, Scope nonempty, String closeBracket) throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Closes the current scope by appending any necessary whitespace and the\n     * given bracket.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Scope peek() throws JSONException",
    "returnType" : "Scope",
    "comment" : "\n     * Returns the value on the top of the stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void replaceTop(Scope topOfStack)",
    "returnType" : "void",
    "comment" : "\n     * Replace the value on the top of the stack with the given value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONStringer value(Object value) throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Encodes {@code value}.\n     *\n     * @param value a {@link JSONObject}, {@link JSONArray}, String, Boolean,\n     *     Integer, Long, Double or null. May not be {@link Double#isNaN() NaNs}\n     *     or {@link Double#isInfinite() infinities}.\n     * @return this stringer.\n     ",
    "links" : [ "#isNaN()", "org.json.JSONObject", "#isInfinite()", "org.json.JSONArray" ]
  }, {
    "name" : "public JSONStringer value(boolean value) throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Encodes {@code value} to this stringer.\n     *\n     * @return this stringer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONStringer value(double value) throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Encodes {@code value} to this stringer.\n     *\n     * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n     *     {@link Double#isInfinite() infinities}.\n     * @return this stringer.\n     ",
    "links" : [ "#isNaN()", "#isInfinite()" ]
  }, {
    "name" : "public JSONStringer value(long value) throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Encodes {@code value} to this stringer.\n     *\n     * @return this stringer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void string(String value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void newline()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public JSONStringer key(String name) throws JSONException",
    "returnType" : "JSONStringer",
    "comment" : "\n     * Encodes the key (property name) to this stringer.\n     *\n     * @param name the name of the forthcoming value. May not be null.\n     * @return this stringer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void beforeKey() throws JSONException",
    "returnType" : "void",
    "comment" : "\n     * Inserts any necessary separators and whitespace before a name. Also\n     * adjusts the stack to expect the key's value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void beforeValue() throws JSONException",
    "returnType" : "void",
    "comment" : "\n     * Inserts any necessary separators and whitespace before a literal value,\n     * inline array, or inline object. Also adjusts the stack to expect either a\n     * closing bracket or another element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the encoded JSON string.\n     *\n     * <p>If invoked with unterminated arrays or unclosed objects, this method's\n     * return value is undefined.\n     *\n     * <p><strong>Warning:</strong> although it contradicts the general contract\n     * of {@link Object#toString}, this method returns null if the stringer\n     * contains no data.\n     ",
    "links" : [ "#toString" ]
  } ],
  "methodNames" : [ "public JSONStringer array() throws JSONException", "public JSONStringer endArray() throws JSONException", "public JSONStringer object() throws JSONException", "public JSONStringer endObject() throws JSONException", " JSONStringer open(Scope empty, String openBracket) throws JSONException", " JSONStringer close(Scope empty, Scope nonempty, String closeBracket) throws JSONException", "private Scope peek() throws JSONException", "private void replaceTop(Scope topOfStack)", "public JSONStringer value(Object value) throws JSONException", "public JSONStringer value(boolean value) throws JSONException", "public JSONStringer value(double value) throws JSONException", "public JSONStringer value(long value) throws JSONException", "private void string(String value)", "private void newline()", "public JSONStringer key(String name) throws JSONException", "private void beforeKey() throws JSONException", "private void beforeValue() throws JSONException", "public String toString()" ],
  "variableNames" : [ "out", "stack", "indent" ]
}