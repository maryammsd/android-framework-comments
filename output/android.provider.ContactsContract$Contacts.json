{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/ContactsContract.java",
  "packageName" : "android.provider",
  "className" : "Contacts",
  "comment" : "\n     * Constants for the contacts table, which contains a record per aggregate\n     * of raw contacts representing the same person.\n     * <h3>Operations</h3>\n     * <dl>\n     * <dt><b>Insert</b></dt>\n     * <dd>A Contact cannot be created explicitly. When a raw contact is\n     * inserted, the provider will first try to find a Contact representing the\n     * same person. If one is found, the raw contact's\n     * {@link RawContacts#CONTACT_ID} column gets the _ID of the aggregate\n     * Contact. If no match is found, the provider automatically inserts a new\n     * Contact and puts its _ID into the {@link RawContacts#CONTACT_ID} column\n     * of the newly inserted raw contact.</dd>\n     * <dt><b>Update</b></dt>\n     * <dd>Only certain columns of Contact are modifiable:\n     * {@link #STARRED}, {@link #CUSTOM_RINGTONE}, {@link #SEND_TO_VOICEMAIL}. Changing any of\n     * these columns on the Contact also changes them on all constituent raw\n     * contacts.</dd>\n     * <dt><b>Delete</b></dt>\n     * <dd>Be careful with deleting Contacts! Deleting an aggregate contact\n     * deletes all constituent raw contacts. The corresponding sync adapters\n     * will notice the deletions of their respective raw contacts and remove\n     * them from their back end storage.</dd>\n     * <dt><b>Query</b></dt>\n     * <dd>\n     * <ul>\n     * <li>If you need to read an individual contact, consider using\n     * {@link #CONTENT_LOOKUP_URI} instead of {@link #CONTENT_URI}.</li>\n     * <li>If you need to look up a contact by the phone number, use\n     * {@link PhoneLookup#CONTENT_FILTER_URI PhoneLookup.CONTENT_FILTER_URI},\n     * which is optimized for this purpose.</li>\n     * <li>If you need to look up a contact by partial name, e.g. to produce\n     * filter-as-you-type suggestions, use the {@link #CONTENT_FILTER_URI} URI.\n     * <li>If you need to look up a contact by some data element like email\n     * address, nickname, etc, use a query against the {@link ContactsContract.Data} table.\n     * The result will contain contact ID, name etc.\n     * </ul>\n     * </dd>\n     * </dl>\n     * <h2>Columns</h2>\n     * <table class=\"jd-sumtable\">\n     * <tr>\n     * <th colspan='4'>Contacts</th>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #_ID}</td>\n     * <td>read-only</td>\n     * <td>Row ID. Consider using {@link #LOOKUP_KEY} instead.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #LOOKUP_KEY}</td>\n     * <td>read-only</td>\n     * <td>An opaque value that contains hints on how to find the contact if its\n     * row id changed as a result of a sync or aggregation.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>NAME_RAW_CONTACT_ID</td>\n     * <td>read-only</td>\n     * <td>The ID of the raw contact that contributes the display name\n     * to the aggregate contact. During aggregation one of the constituent\n     * raw contacts is chosen using a heuristic: a longer name or a name\n     * with more diacritic marks or more upper case characters is chosen.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>DISPLAY_NAME_PRIMARY</td>\n     * <td>read-only</td>\n     * <td>The display name for the contact. It is the display name\n     * contributed by the raw contact referred to by the NAME_RAW_CONTACT_ID\n     * column.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #PHOTO_ID}</td>\n     * <td>read-only</td>\n     * <td>Reference to the row in the {@link ContactsContract.Data} table holding the photo.\n     * That row has the mime type\n     * {@link CommonDataKinds.Photo#CONTENT_ITEM_TYPE}. The value of this field\n     * is computed automatically based on the\n     * {@link CommonDataKinds.Photo#IS_SUPER_PRIMARY} field of the data rows of\n     * that mime type.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #PHOTO_URI}</td>\n     * <td>read-only</td>\n     * <td>A URI that can be used to retrieve the contact's full-size photo. This\n     * column is the preferred method of retrieving the contact photo.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #PHOTO_THUMBNAIL_URI}</td>\n     * <td>read-only</td>\n     * <td>A URI that can be used to retrieve the thumbnail of contact's photo.  This\n     * column is the preferred method of retrieving the contact photo.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #IN_VISIBLE_GROUP}</td>\n     * <td>read-only</td>\n     * <td>An indicator of whether this contact is supposed to be visible in the\n     * UI. \"1\" if the contact has at least one raw contact that belongs to a\n     * visible group; \"0\" otherwise.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #HAS_PHONE_NUMBER}</td>\n     * <td>read-only</td>\n     * <td>An indicator of whether this contact has at least one phone number.\n     * \"1\" if there is at least one phone number, \"0\" otherwise.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #STARRED}</td>\n     * <td>read/write</td>\n     * <td>An indicator for favorite contacts: '1' if favorite, '0' otherwise.\n     * When raw contacts are aggregated, this field is automatically computed:\n     * if any constituent raw contacts are starred, then this field is set to\n     * '1'. Setting this field automatically changes the corresponding field on\n     * all constituent raw contacts.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #CUSTOM_RINGTONE}</td>\n     * <td>read/write</td>\n     * <td>A custom ringtone associated with a contact. Typically this is the\n     * URI returned by an activity launched with the\n     * {@link android.media.RingtoneManager#ACTION_RINGTONE_PICKER} intent.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #SEND_TO_VOICEMAIL}</td>\n     * <td>read/write</td>\n     * <td>An indicator of whether calls from this contact should be forwarded\n     * directly to voice mail ('1') or not ('0'). When raw contacts are\n     * aggregated, this field is automatically computed: if <i>all</i>\n     * constituent raw contacts have SEND_TO_VOICEMAIL=1, then this field is set\n     * to '1'. Setting this field automatically changes the corresponding field\n     * on all constituent raw contacts.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #CONTACT_PRESENCE}</td>\n     * <td>read-only</td>\n     * <td>Contact IM presence status. See {@link StatusUpdates} for individual\n     * status definitions. Automatically computed as the highest presence of all\n     * constituent raw contacts. The provider may choose not to store this value\n     * in persistent storage. The expectation is that presence status will be\n     * updated on a regular basis.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #CONTACT_STATUS}</td>\n     * <td>read-only</td>\n     * <td>Contact's latest status update. Automatically computed as the latest\n     * of all constituent raw contacts' status updates.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #CONTACT_STATUS_TIMESTAMP}</td>\n     * <td>read-only</td>\n     * <td>The absolute time in milliseconds when the latest status was\n     * inserted/updated.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #CONTACT_STATUS_RES_PACKAGE}</td>\n     * <td>read-only</td>\n     * <td> The package containing resources for this status: label and icon.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #CONTACT_STATUS_LABEL}</td>\n     * <td>read-only</td>\n     * <td>The resource ID of the label describing the source of contact status,\n     * e.g. \"Google Talk\". This resource is scoped by the\n     * {@link #CONTACT_STATUS_RES_PACKAGE}.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #CONTACT_STATUS_ICON}</td>\n     * <td>read-only</td>\n     * <td>The resource ID of the icon for the source of contact status. This\n     * resource is scoped by the {@link #CONTACT_STATUS_RES_PACKAGE}.</td>\n     * </tr>\n     * </table>\n     ",
  "links" : [ "#PHOTO_ID", "#HAS_PHONE_NUMBER", "StatusUpdates", "#IN_VISIBLE_GROUP", "#CONTACT_PRESENCE", "#CONTENT_FILTER_URI", "android.media.RingtoneManager#ACTION_RINGTONE_PICKER", "#CONTACT_STATUS", "#CONTACT_STATUS_RES_PACKAGE", "ContactsContract.Data", "#CONTACT_ID", "#CONTACT_STATUS_TIMESTAMP", "#CONTENT_URI", "#LOOKUP_KEY", "CommonDataKinds.Photo#IS_SUPER_PRIMARY", "#CONTACT_STATUS_ICON", "CommonDataKinds.Photo#CONTENT_ITEM_TYPE", "#STARRED", "#SEND_TO_VOICEMAIL", "#CUSTOM_RINGTONE", "#_ID", "#PHOTO_THUMBNAIL_URI", "#PHOTO_URI", "#CONTENT_LOOKUP_URI", "#CONTACT_STATUS_LABEL" ],
  "variables" : [ {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI for this table\n         ",
    "links" : [ ]
  }, {
    "name" : "ENTERPRISE_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * URI used for getting all contacts from both the calling user and the managed profile\n         * that is linked to it.\n         * <p>\n         * It supports the same semantics as {@link #CONTENT_URI} and returns the same columns.<br>\n         * If the calling user has no managed profile, it behaves in the exact same way as\n         * {@link #CONTENT_URI}.<br>\n         * If there is a managed profile linked to the calling user, it will return merged results\n         * from both.\n         * <p>\n         * Note: this query returns the calling user results before the managed profile results,\n         * and this order is not affected by the sorting parameter.\n         * <p>\n         * If a result is from the managed profile, the following changes are made to the data:\n         * <ul>\n         *     <li>{@link #PHOTO_THUMBNAIL_URI} and {@link #PHOTO_URI} will be rewritten to special\n         *     URIs. Use {@link ContentResolver#openAssetFileDescriptor} or its siblings to\n         *     load pictures from them.\n         *     <li>{@link #PHOTO_ID} and {@link #PHOTO_FILE_ID} will be set to null. Don't use them.\n         *     <li>{@link #_ID} and {@link #LOOKUP_KEY} will be replaced with artificial values.\n         *     These values will be consistent across multiple queries, but do not use them in\n         *     places that do not explicitly say they accept them. If they are used in the\n         *     {@code selection} param in {@link android.content.ContentProvider#query}, the result\n         *     is undefined.\n         *     <li>In order to tell whether a contact is from the managed profile, use\n         *     {@link ContactsContract.Contacts#isEnterpriseContactId(long)}.\n         ",
    "links" : [ "android.content.ContentProvider#query", "#PHOTO_FILE_ID", "#PHOTO_THUMBNAIL_URI", "#PHOTO_URI", "#PHOTO_ID", "#_ID", "android.content.ContentResolver#openAssetFileDescriptor", "ContactsContract.Contacts#isEnterpriseContactId(long)", "#CONTENT_URI", "#LOOKUP_KEY" ]
  }, {
    "name" : "CORP_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * Special contacts URI to refer to contacts on the managed profile from the calling user.\n         * <p>\n         * It's supported only by a few specific places for referring to contact pictures that\n         * are in the managed profile provider for enterprise caller-ID. Contact picture URIs\n         * returned from {@link PhoneLookup#ENTERPRISE_CONTENT_FILTER_URI} and similar APIs may\n         * contain this kind of URI.\n         *\n         * @hide\n         ",
    "links" : [ "#ENTERPRISE_CONTENT_FILTER_URI" ]
  }, {
    "name" : "CONTENT_LOOKUP_URI",
    "type" : "Uri",
    "comment" : "\n         * A content:// style URI for this table that should be used to create\n         * shortcuts or otherwise create long-term links to contacts. This URI\n         * should always be followed by a \"/\" and the contact's {@link #LOOKUP_KEY}.\n         * It can optionally also have a \"/\" and last known contact ID appended after\n         * that. This \"complete\" format is an important optimization and is highly recommended.\n         * <p>\n         * As long as the contact's row ID remains the same, this URI is\n         * equivalent to {@link #CONTENT_URI}. If the contact's row ID changes\n         * as a result of a sync or aggregation, this URI will look up the\n         * contact using indirect information (sync IDs or constituent raw\n         * contacts).\n         * <p>\n         * Lookup key should be appended unencoded - it is stored in the encoded\n         * form, ready for use in a URI.\n         ",
    "links" : [ "#CONTENT_URI", "#LOOKUP_KEY" ]
  }, {
    "name" : "CONTENT_VCARD_URI",
    "type" : "Uri",
    "comment" : "\n         * Base {@link Uri} for referencing a single {@link Contacts} entry,\n         * created by appending {@link #LOOKUP_KEY} using\n         * {@link Uri#withAppendedPath(Uri, String)}. Provides\n         * {@link OpenableColumns} columns when queried, or returns the\n         * referenced contact formatted as a vCard when opened through\n         * {@link ContentResolver#openAssetFileDescriptor(Uri, String)}.\n         ",
    "links" : [ "android.net.Uri#withAppendedPath(Uri", "android.provider.Contacts", "android.net.Uri", "#LOOKUP_KEY", "android.provider.OpenableColumns", "android.content.ContentResolver#openAssetFileDescriptor(Uri" ]
  }, {
    "name" : "QUERY_PARAMETER_VCARD_NO_PHOTO",
    "type" : "String",
    "comment" : "\n        * Boolean parameter that may be used with {@link #CONTENT_VCARD_URI}\n        * and {@link #CONTENT_MULTI_VCARD_URI} to indicate that the returned\n        * vcard should not contain a photo.\n        *\n        * This is useful for obtaining a space efficient vcard.\n        ",
    "links" : [ "#CONTENT_MULTI_VCARD_URI", "#CONTENT_VCARD_URI" ]
  }, {
    "name" : "CONTENT_MULTI_VCARD_URI",
    "type" : "Uri",
    "comment" : "\n         * Base {@link Uri} for referencing multiple {@link Contacts} entry,\n         * created by appending {@link #LOOKUP_KEY} using\n         * {@link Uri#withAppendedPath(Uri, String)}. The lookup keys have to be\n         * joined with the colon (\":\") separator, and the resulting string encoded.\n         *\n         * Provides {@link OpenableColumns} columns when queried, or returns the\n         * referenced contact formatted as a vCard when opened through\n         * {@link ContentResolver#openAssetFileDescriptor(Uri, String)}.\n         *\n         * <p>\n         * Usage example:\n         * <dl>\n         * <dt>The following code snippet creates a multi-vcard URI that references all the\n         * contacts in a user's database.</dt>\n         * <dd>\n         *\n         * <pre>\n         * public Uri getAllContactsVcardUri() {\n         *     Cursor cursor = getActivity().getContentResolver().query(Contacts.CONTENT_URI,\n         *         new String[] {Contacts.LOOKUP_KEY}, null, null, null);\n         *     if (cursor == null) {\n         *         return null;\n         *     }\n         *     try {\n         *         StringBuilder uriListBuilder = new StringBuilder();\n         *         int index = 0;\n         *         while (cursor.moveToNext()) {\n         *             if (index != 0) uriListBuilder.append(':');\n         *             uriListBuilder.append(cursor.getString(0));\n         *             index++;\n         *         }\n         *         return Uri.withAppendedPath(Contacts.CONTENT_MULTI_VCARD_URI,\n         *                 Uri.encode(uriListBuilder.toString()));\n         *     } finally {\n         *         cursor.close();\n         *     }\n         * }\n         * </pre>\n         *\n         * </p>\n         ",
    "links" : [ "android.net.Uri#withAppendedPath(Uri", "android.provider.Contacts", "android.net.Uri", "#LOOKUP_KEY", "android.provider.OpenableColumns", "android.content.ContentResolver#openAssetFileDescriptor(Uri" ]
  }, {
    "name" : "CONTENT_FILTER_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI used for \"type-to-filter\" functionality on the\n         * {@link #CONTENT_URI} URI. The filter string will be used to match\n         * various parts of the contact name. The filter argument should be passed\n         * as an additional path segment after this URI.\n         ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "ENTERPRISE_CONTENT_FILTER_URI",
    "type" : "Uri",
    "comment" : "\n         * It supports the similar semantics as {@link #CONTENT_FILTER_URI} and returns the same\n         * columns. This URI requires {@link ContactsContract#DIRECTORY_PARAM_KEY} in parameters,\n         * otherwise it will throw IllegalArgumentException. The passed directory can belong either\n         * to the calling user or to a managed profile that is linked to it.\n         ",
    "links" : [ "#CONTENT_FILTER_URI", "android.provider.ContactsContract#DIRECTORY_PARAM_KEY" ]
  }, {
    "name" : "CONTENT_STREQUENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI for this table joined with useful data from\n         * {@link ContactsContract.Data}, filtered to include only starred contacts.\n         * Frequent contacts are no longer included in the result as of\n         * Android version {@link android.os.Build.VERSION_CODES#Q}.\n         *\n         * <p class=\"caution\"><b>Caution: </b>If you publish your app to the Google Play Store, this\n         * field doesn't sort results based on contacts frequency. For more information, see the\n         * <a href=\"/guide/topics/providers/contacts-provider#ObsoleteData\">Contacts Provider</a>\n         * page.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "ContactsContract.Data" ]
  }, {
    "name" : "CONTENT_FREQUENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI for showing a list of frequently contacted people.\n         *\n         * @deprecated Frequent contacts are no longer supported as of\n         * Android version {@link android.os.Build.VERSION_CODES#Q}.\n         * This URI always returns an empty cursor.\n         *\n         * <p class=\"caution\"><b>Caution: </b>If you publish your app to the Google Play Store, this\n         * field doesn't sort results based on contacts frequency. For more information, see the\n         * <a href=\"/guide/topics/providers/contacts-provider#ObsoleteData\">Contacts Provider</a>\n         * page.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "CONTENT_STREQUENT_FILTER_URI",
    "type" : "Uri",
    "comment" : "\n         * <p>The content:// style URI used for \"type-to-filter\" functionality on the\n         * {@link #CONTENT_STREQUENT_URI} URI. The filter string will be used to match\n         * various parts of the contact name. The filter argument should be passed\n         * as an additional path segment after this URI.\n         *\n         * <p class=\"caution\"><b>Caution: </b>If you publish your app to the Google Play Store, this\n         * field doesn't sort results based on contacts frequency. For more information, see the\n         * <a href=\"/guide/topics/providers/contacts-provider#ObsoleteData\">Contacts Provider</a>\n         * page.\n         ",
    "links" : [ "#CONTENT_STREQUENT_URI" ]
  }, {
    "name" : "CONTENT_GROUP_URI",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of {@link #CONTENT_URI} providing a directory of\n         * people.\n         ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "CONTENT_ITEM_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of a {@link #CONTENT_URI} subdirectory of a single\n         * person.\n         ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "CONTENT_VCARD_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of a {@link #CONTENT_URI} subdirectory of a single\n         * person.\n         ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "ENTERPRISE_CONTACT_ID_BASE",
    "type" : "long",
    "comment" : " slightly smaller than 2 ** 30",
    "links" : [ ]
  }, {
    "name" : "ENTERPRISE_CONTACT_LOOKUP_PREFIX",
    "type" : "String",
    "comment" : "\n         * Prefix for managed profile contacts returned from\n         * {@link PhoneLookup#ENTERPRISE_CONTENT_FILTER_URI} and similar APIs.\n         *\n         * @hide\n         ",
    "links" : [ "#ENTERPRISE_CONTENT_FILTER_URI" ]
  } ],
  "methods" : [ {
    "name" : "public static Uri getLookupUri(ContentResolver resolver, Uri contactUri)",
    "returnType" : "Uri",
    "comment" : "\n         * Builds a {@link #CONTENT_LOOKUP_URI} style {@link Uri} describing the\n         * requested {@link Contacts} entry.\n         *\n         * @param contactUri A {@link #CONTENT_URI} row, or an existing\n         *            {@link #CONTENT_LOOKUP_URI} to attempt refreshing.\n         ",
    "links" : [ "android.provider.Contacts", "android.net.Uri", "#CONTENT_URI", "#CONTENT_LOOKUP_URI" ]
  }, {
    "name" : "public static Uri getLookupUri(long contactId, String lookupKey)",
    "returnType" : "Uri",
    "comment" : "\n         * Build a {@link #CONTENT_LOOKUP_URI} lookup {@link Uri} using the\n         * given {@link ContactsContract.Contacts#_ID} and {@link #LOOKUP_KEY}.\n         * <p>\n         * Returns null if unable to construct a valid lookup URI from the\n         * provided parameters.\n         ",
    "links" : [ "android.net.Uri", "#CONTENT_LOOKUP_URI", "#LOOKUP_KEY", "ContactsContract.Contacts#_ID" ]
  }, {
    "name" : "public static Uri lookupContact(ContentResolver resolver, Uri lookupUri)",
    "returnType" : "Uri",
    "comment" : "\n         * Computes a content URI (see {@link #CONTENT_URI}) given a lookup URI.\n         * <p>\n         * Returns null if the contact cannot be found.\n         ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "public static void markAsContacted(ContentResolver resolver, long contactId)",
    "returnType" : "void",
    "comment" : "\n         * Mark a contact as having been contacted. Updates two fields:\n         * {@link #TIMES_CONTACTED} and {@link #LAST_TIME_CONTACTED}. The\n         * TIMES_CONTACTED field is incremented by 1 and the LAST_TIME_CONTACTED\n         * field is populated with the current system time.\n         *\n         * <p class=\"caution\"><b>Caution: </b>If you publish your app to the Google Play Store,\n         * this field is obsolete, regardless of Android version. For more information, see the\n         * <a href=\"/guide/topics/providers/contacts-provider#ObsoleteData\">Contacts Provider</a>\n         * page.</p>\n         *\n         * @param resolver the ContentResolver to use\n         * @param contactId the person who was contacted\n         *\n         * @deprecated Contacts affinity information is no longer supported as of\n         * Android version {@link android.os.Build.VERSION_CODES#Q}. This method\n         * is no-op.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "#TIMES_CONTACTED", "#LAST_TIME_CONTACTED" ]
  }, {
    "name" : "public static boolean isEnterpriseContactId(long contactId)",
    "returnType" : "boolean",
    "comment" : "\n         * Return {@code true} if a contact ID is from the contacts provider on the managed profile.\n         *\n         * {@link PhoneLookup#ENTERPRISE_CONTENT_FILTER_URI} and similar APIs may return such IDs.\n         ",
    "links" : [ "#ENTERPRISE_CONTENT_FILTER_URI" ]
  }, {
    "name" : "public static InputStream openContactPhotoInputStream(ContentResolver cr, Uri contactUri, boolean preferHighres)",
    "returnType" : "InputStream",
    "comment" : "\n         * Opens an InputStream for the contacts's photo and returns the\n         * photo as a byte stream.\n         * @param cr The content resolver to use for querying\n         * @param contactUri the contact whose photo should be used. This can be used with\n         * either a {@link #CONTENT_URI} or a {@link #CONTENT_LOOKUP_URI} URI.\n         * @param preferHighres If this is true and the contact has a higher resolution photo\n         * available, it is returned. If false, this function always tries to get the thumbnail\n         * @return an InputStream of the photo, or null if no photo is present\n         ",
    "links" : [ "#CONTENT_URI", "#CONTENT_LOOKUP_URI" ]
  }, {
    "name" : "public static InputStream openContactPhotoInputStream(ContentResolver cr, Uri contactUri)",
    "returnType" : "InputStream",
    "comment" : "\n         * Opens an InputStream for the contacts's thumbnail photo and returns the\n         * photo as a byte stream.\n         * @param cr The content resolver to use for querying\n         * @param contactUri the contact whose photo should be used. This can be used with\n         * either a {@link #CONTENT_URI} or a {@link #CONTENT_LOOKUP_URI} URI.\n         * @return an InputStream of the photo, or null if no photo is present\n         * @see #openContactPhotoInputStream(ContentResolver, Uri, boolean), if instead\n         * of the thumbnail the high-res picture is preferred\n         ",
    "links" : [ "#CONTENT_URI", "#CONTENT_LOOKUP_URI" ]
  }, {
    "name" : "public static Uri createCorpLookupUriFromEnterpriseLookupUri(@NonNull Uri enterpriseLookupUri)",
    "returnType" : "Uri",
    "comment" : "\n         * Creates and returns a corp lookup URI from the given enterprise lookup URI by removing\n         * {@link #ENTERPRISE_CONTACT_LOOKUP_PREFIX} from the key. Returns {@code null} if the given\n         * URI is not an enterprise lookup URI.\n         *\n         * @hide\n         ",
    "links" : [ "#ENTERPRISE_CONTACT_LOOKUP_PREFIX" ]
  } ],
  "methodNames" : [ "public static Uri getLookupUri(ContentResolver resolver, Uri contactUri)", "public static Uri getLookupUri(long contactId, String lookupKey)", "public static Uri lookupContact(ContentResolver resolver, Uri lookupUri)", "public static void markAsContacted(ContentResolver resolver, long contactId)", "public static boolean isEnterpriseContactId(long contactId)", "public static InputStream openContactPhotoInputStream(ContentResolver cr, Uri contactUri, boolean preferHighres)", "public static InputStream openContactPhotoInputStream(ContentResolver cr, Uri contactUri)", "public static Uri createCorpLookupUriFromEnterpriseLookupUri(@NonNull Uri enterpriseLookupUri)" ],
  "variableNames" : [ "CONTENT_URI", "ENTERPRISE_CONTENT_URI", "CORP_CONTENT_URI", "CONTENT_LOOKUP_URI", "CONTENT_VCARD_URI", "QUERY_PARAMETER_VCARD_NO_PHOTO", "CONTENT_MULTI_VCARD_URI", "CONTENT_FILTER_URI", "ENTERPRISE_CONTENT_FILTER_URI", "CONTENT_STREQUENT_URI", "CONTENT_FREQUENT_URI", "CONTENT_STREQUENT_FILTER_URI", "CONTENT_GROUP_URI", "CONTENT_TYPE", "CONTENT_ITEM_TYPE", "CONTENT_VCARD_TYPE", "ENTERPRISE_CONTACT_ID_BASE", "ENTERPRISE_CONTACT_LOOKUP_PREFIX" ]
}