{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/HidlMemory.java",
  "packageName" : "android.os",
  "className" : "HidlMemory",
  "comment" : "\n * An abstract representation of a memory block, as representing by the HIDL system.\n *\n * The block is defined by a {name, size, handle} tuple, where the name is used to determine how to\n * interpret the handle. The underlying handle is assumed to be owned by this instance and will be\n * closed as soon as {@link #close()} is called on this instance, or this instance has been\n * finalized (the latter supports using it in a shared manner without having to worry about who owns\n * this instance, the former is more efficient resource-wise and is recommended for most use-cases).\n * Note, however, that ownership of the handle does not necessarily imply ownership of the\n * underlying file descriptors - the underlying handle may or may not own them. If you want the\n * underlying handle to outlive this instance, call {@link #releaseHandle()} to obtain the handle\n * and detach the ownership relationship.\n *\n * @hide\n ",
  "links" : [ "#close()", "#releaseHandle()" ],
  "variables" : [ {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandle",
    "type" : "NativeHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : " For use of native code.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public HidlMemory dup() throws IOException",
    "returnType" : "HidlMemory",
    "comment" : "\n     * Create a copy of this instance, where the underlying handle (and its file descriptors) have\n     * been duplicated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Close the underlying native handle. No-op if handle is null or has been released using {@link\n     * #releaseHandle()}.\n     ",
    "links" : [ "#releaseHandle()" ]
  }, {
    "name" : "public NativeHandle releaseHandle()",
    "returnType" : "NativeHandle",
    "comment" : "\n     * Disowns the underlying handle and returns it. The underlying handle becomes null.\n     *\n     * @return The underlying handle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the name, which represents how the handle is to be interpreted.\n     *\n     * @return The name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getSize()",
    "returnType" : "long",
    "comment" : "\n     * Gets the size of the block, in bytes.\n     *\n     * @return The size.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NativeHandle getHandle()",
    "returnType" : "NativeHandle",
    "comment" : "\n     * Gets a native handle. The actual interpretation depends on the name and is implementation\n     * defined.\n     *\n     * @return The native handle.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeFinalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public HidlMemory dup() throws IOException", "public void close() throws IOException", "public NativeHandle releaseHandle()", "public String getName()", "public long getSize()", "public NativeHandle getHandle()", "protected void finalize()", "private native void nativeFinalize()" ],
  "variableNames" : [ "mName", "mSize", "mHandle", "mNativeContext" ]
}