{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/mbms/vendor/MbmsStreamingServiceBase.java",
  "packageName" : "android.telephony.mbms.vendor",
  "className" : "MbmsStreamingServiceBase",
  "comment" : "\n * Base class for MBMS streaming services. The middleware should return an instance of this\n * object from its {@link android.app.Service#onBind(Intent)} method.\n * @hide\n ",
  "links" : [ "android.app.Service#onBind(Intent)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int initialize(MbmsStreamingSessionCallback callback, int subscriptionId) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Initialize streaming service for this app and subId, registering the listener.\n     *\n     * May throw an {@link IllegalArgumentException} or a {@link SecurityException}, which\n     * will be intercepted and passed to the app as\n     * {@link MbmsErrors.InitializationErrors#ERROR_UNABLE_TO_INITIALIZE}\n     *\n     * May return any value from {@link MbmsErrors.InitializationErrors}\n     * or {@link MbmsErrors#SUCCESS}. Non-successful error codes will be passed to the app via\n     * {@link IMbmsStreamingSessionCallback#onError(int, String)}.\n     *\n     * @param callback The callback to use to communicate with the app.\n     * @param subscriptionId The subscription ID to use.\n     ",
    "links" : [ "MbmsErrors.InitializationErrors#ERROR_UNABLE_TO_INITIALIZE", "MbmsErrors.InitializationErrors", "android.telephony.mbms.IMbmsStreamingSessionCallback#onError(int", "android.telephony.mbms.MbmsErrors#SUCCESS", "SecurityException", "IllegalArgumentException" ]
  }, {
    "name" : "public final int initialize(final IMbmsStreamingSessionCallback callback, final int subscriptionId) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Actual AIDL implementation that hides the callback AIDL from the middleware.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int requestUpdateStreamingServices(int subscriptionId, List<String> serviceClasses) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Registers serviceClasses of interest with the appName/subId key.\n     * Starts async fetching data on streaming services of matching classes to be reported\n     * later via {@link IMbmsStreamingSessionCallback#onStreamingServicesUpdated(List)}\n     *\n     * Note that subsequent calls with the same uid and subId will replace\n     * the service class list.\n     *\n     * May throw an {@link IllegalArgumentException} or an {@link IllegalStateException}\n     *\n     * @param subscriptionId The subscription id to use.\n     * @param serviceClasses The service classes that the app wishes to get info on. The strings\n     *                       may contain arbitrary data as negotiated between the app and the\n     *                       carrier.\n     * @return {@link MbmsErrors#SUCCESS} or any of the errors in\n     * {@link MbmsErrors.GeneralErrors}\n     ",
    "links" : [ "IllegalStateException", "MbmsErrors.GeneralErrors", "android.telephony.mbms.MbmsErrors#SUCCESS", "android.telephony.mbms.IMbmsStreamingSessionCallback#onStreamingServicesUpdated(List)", "IllegalArgumentException" ]
  }, {
    "name" : "public int startStreaming(int subscriptionId, String serviceId, StreamingServiceCallback callback) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Starts streaming on a particular service. This method may perform asynchronous work. When\n     * the middleware is ready to send bits to the frontend, it should inform the app via\n     * {@link IStreamingServiceCallback#onStreamStateUpdated(int, int)}.\n     *\n     * May throw an {@link IllegalArgumentException} or an {@link IllegalStateException}\n     *\n     * @param subscriptionId The subscription id to use.\n     * @param serviceId The ID of the streaming service that the app has requested.\n     * @param callback The callback object on which the app wishes to receive updates.\n     * @return Any error in {@link MbmsErrors.GeneralErrors}\n     ",
    "links" : [ "IllegalStateException", "MbmsErrors.GeneralErrors", "android.telephony.mbms.IStreamingServiceCallback#onStreamStateUpdated(int", "IllegalArgumentException" ]
  }, {
    "name" : "public int startStreaming(final int subscriptionId, String serviceId, final IStreamingServiceCallback callback) throws RemoteException",
    "returnType" : "int",
    "comment" : "\n     * Actual AIDL implementation of startStreaming that hides the callback AIDL from the\n     * middleware.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri getPlaybackUri(int subscriptionId, String serviceId) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "\n     * Retrieves the streaming URI for a particular service. If the middleware is not yet ready to\n     * stream the service, this method may return null.\n     *\n     * May throw an {@link IllegalArgumentException} or an {@link IllegalStateException}\n     *\n     * @param subscriptionId The subscription id to use.\n     * @param serviceId The ID of the streaming service that the app has requested.\n     * @return An opaque {@link Uri} to be passed to a video player that understands the format.\n     ",
    "links" : [ "IllegalStateException", "android.net.Uri", "IllegalArgumentException" ]
  }, {
    "name" : "public void stopStreaming(int subscriptionId, String serviceId) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Stop streaming the stream identified by {@code serviceId}. Notification of the resulting\n     * stream state change should be reported to the app via\n     * {@link IStreamingServiceCallback#onStreamStateUpdated(int, int)}.\n     *\n     * In addition, the callback provided via\n     * {@link #startStreaming(int, String, IStreamingServiceCallback)} should no longer be\n     * used after this method has called by the app.\n     *\n     * May throw an {@link IllegalArgumentException} or an {@link IllegalStateException}\n     *\n     * @param subscriptionId The subscription id to use.\n     * @param serviceId The ID of the streaming service that the app wishes to stop.\n     ",
    "links" : [ "IllegalStateException", "#startStreaming(int", "android.telephony.mbms.IStreamingServiceCallback#onStreamStateUpdated(int", "IllegalArgumentException" ]
  }, {
    "name" : "public void dispose(int subscriptionId) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Signals that the app wishes to dispose of the session identified by the\n     * {@code subscriptionId} argument and the caller's uid. No notification back to the\n     * app is required for this operation, and the corresponding callback provided via\n     * {@link #initialize(IMbmsStreamingSessionCallback, int)} should no longer be used\n     * after this method has been called by the app.\n     *\n     * May throw an {@link IllegalStateException}\n     *\n     * @param subscriptionId The subscription id to use.\n     ",
    "links" : [ "IllegalStateException", "#initialize(IMbmsStreamingSessionCallback" ]
  }, {
    "name" : "public void onAppCallbackDied(int uid, int subscriptionId)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that the app identified by the given UID and subscription ID has died.\n     * @param uid the UID of the app, as returned by {@link Binder#getCallingUid()}.\n     * @param subscriptionId The subscription ID the app is using.\n     ",
    "links" : [ "android.os.Binder#getCallingUid()" ]
  }, {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws RemoteException",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int initialize(MbmsStreamingSessionCallback callback, int subscriptionId) throws RemoteException", "public final int initialize(final IMbmsStreamingSessionCallback callback, final int subscriptionId) throws RemoteException", "public int requestUpdateStreamingServices(int subscriptionId, List<String> serviceClasses) throws RemoteException", "public int startStreaming(int subscriptionId, String serviceId, StreamingServiceCallback callback) throws RemoteException", "public int startStreaming(final int subscriptionId, String serviceId, final IStreamingServiceCallback callback) throws RemoteException", "public Uri getPlaybackUri(int subscriptionId, String serviceId) throws RemoteException", "public void stopStreaming(int subscriptionId, String serviceId) throws RemoteException", "public void dispose(int subscriptionId) throws RemoteException", "public void onAppCallbackDied(int uid, int subscriptionId)", "public android.os.IBinder asBinder()", "public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws RemoteException" ],
  "variableNames" : [ ]
}