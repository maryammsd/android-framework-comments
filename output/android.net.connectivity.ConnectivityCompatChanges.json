{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/connectivity/ConnectivityCompatChanges.java",
  "packageName" : "android.net.connectivity",
  "className" : "ConnectivityCompatChanges",
  "comment" : "\n * The class contains all CompatChanges for the Connectivity module.\n *\n * <p>This is the centralized place for the CompatChanges used in the Connectivity module.\n * Putting all the CompatChanges in single place makes it possible to manage them under a single\n * platform_compat_config.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EXCLUDED_ROUTES",
    "type" : "long",
    "comment" : "\n     * The {@link android.net.LinkProperties#getRoutes()} now can contain excluded as well as\n     * included routes. Use {@link android.net.RouteInfo#getType()} to determine route type.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.RouteInfo#getType()", "android.net.LinkProperties#getRoutes()" ]
  }, {
    "name" : "RUN_NATIVE_NSD_ONLY_IF_LEGACY_APPS_T_AND_LATER",
    "type" : "long",
    "comment" : "\n     * When enabled, apps targeting < Android 12 are considered legacy for\n     * the NSD native daemon.\n     * The platform will only keep the daemon running as long as there are\n     * any legacy apps connected.\n     *\n     * After Android 12, direct communication with the native daemon might not work since the native\n     * daemon won't always stay alive. Using the NSD APIs from NsdManager as the replacement is\n     * recommended.\n     * Another alternative could be bundling your own mdns solutions instead of\n     * depending on the system mdns native daemon.\n     *\n     * This compatibility change applies to Android 13 and later only. To toggle behavior on\n     * Android 12 and Android 12L, use RUN_NATIVE_NSD_ONLY_IF_LEGACY_APPS.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLE_SELF_CERTIFIED_CAPABILITIES_DECLARATION",
    "type" : "long",
    "comment" : "\n     * The self certified capabilities check should be enabled after android 13.\n     *\n     * <p> See {@link android.net.NetworkCapabilities} for more details.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.NetworkCapabilities" ]
  }, {
    "name" : "ENABLE_PLATFORM_MDNS_BACKEND",
    "type" : "long",
    "comment" : "\n     * Apps targeting < Android 14 use a legacy NSD backend.\n     *\n     * The legacy apps use a legacy native daemon as NsdManager backend, but other apps use a\n     * platform-integrated mDNS implementation as backend.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLE_MATCH_LOCAL_NETWORK",
    "type" : "long",
    "comment" : "\n     * Apps targeting Android V or higher receive network callbacks from local networks as default\n     *\n     * Apps targeting lower than {@link android.os.Build.VERSION_CODES.VANILLA_ICE_CREAM} need\n     * to add {@link android.net.NetworkCapabilities#NET_CAPABILITY_LOCAL_NETWORK} to the\n     * {@link android.net.NetworkCapabilities} of the {@link android.net.NetworkRequest} to receive\n     * {@link android.net.ConnectivityManager.NetworkCallback} from local networks.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.ConnectivityManager.NetworkCallback", "android.os.Build.VERSION_CODES.VANILLA_ICE_CREAM", "android.net.NetworkCapabilities", "android.net.NetworkRequest", "android.net.NetworkCapabilities#NET_CAPABILITY_LOCAL_NETWORK" ]
  }, {
    "name" : "NETWORK_BLOCKED_WITHOUT_INTERNET_PERMISSION",
    "type" : "long",
    "comment" : "\n     * On Android {@link android.os.Build.VERSION_CODES.VANILLA_ICE_CREAM} or higher releases,\n     * network access from apps targeting Android 36 or higher that do not have the\n     * {@link android.Manifest.permission#INTERNET} permission is considered blocked.\n     * This results in API behaviors change for apps without\n     * {@link android.Manifest.permission#INTERNET} permission.\n     * {@link android.net.NetworkInfo} returned from {@link android.net.ConnectivityManager} APIs\n     * always has {@link android.net.NetworkInfo.DetailedState#BLOCKED}.\n     * {@link android.net.ConnectivityManager#getActiveNetwork()} always returns null.\n     * {@link android.net.ConnectivityManager.NetworkCallback#onBlockedStatusChanged()} is always\n     * called with blocked=true.\n     * <p>\n     * For backwards compatibility, apps running on older releases, or targeting older SDK levels,\n     * network access from apps without {@link android.Manifest.permission#INTERNET} permission is\n     * considered not blocked even though apps cannot access any networks.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.ConnectivityManager", "android.os.Build.VERSION_CODES.VANILLA_ICE_CREAM", "android.net.ConnectivityManager#getActiveNetwork()", "android.net.NetworkInfo", "android.Manifest.permission#INTERNET", "android.net.NetworkInfo.DetailedState#BLOCKED", "android.net.ConnectivityManager.NetworkCallback#onBlockedStatusChanged()" ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "EXCLUDED_ROUTES", "RUN_NATIVE_NSD_ONLY_IF_LEGACY_APPS_T_AND_LATER", "ENABLE_SELF_CERTIFIED_CAPABILITIES_DECLARATION", "ENABLE_PLATFORM_MDNS_BACKEND", "ENABLE_MATCH_LOCAL_NETWORK", "NETWORK_BLOCKED_WITHOUT_INTERNET_PERMISSION" ]
}