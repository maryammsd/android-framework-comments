{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ImeFocusController.java",
  "packageName" : "android.view",
  "className" : "ImeFocusController",
  "comment" : "\n * Responsible for IME focus handling inside {@link ViewRootImpl}.\n * @hide\n ",
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewRootImpl",
    "type" : "ViewRootImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasImeFocus",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServedView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextServedView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelegate",
    "type" : "InputMethodManagerDelegate",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private InputMethodManagerDelegate getImmDelegate()",
    "returnType" : "InputMethodManagerDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onMovedToDisplay()",
    "returnType" : "void",
    "comment" : " Called when the view root is moved to a different display. ",
    "links" : [ ]
  }, {
    "name" : " void onTraversal(boolean hasWindowFocus, WindowManager.LayoutParams windowAttribute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onPreWindowFocus(boolean hasWindowFocus, WindowManager.LayoutParams windowAttribute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean updateImeFocusable(WindowManager.LayoutParams windowAttribute, boolean force)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onPostWindowFocus(View focusedView, boolean hasWindowFocus, WindowManager.LayoutParams windowAttribute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean checkFocus(boolean forceNewFocus, boolean startInput)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onViewFocusChanged(View view, boolean hasFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onViewDetachedFromWindow(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onWindowDismissed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isInLocalFocusMode(WindowManager.LayoutParams windowAttribute)",
    "returnType" : "boolean",
    "comment" : "\n     * @param windowAttribute {@link WindowManager.LayoutParams} to be checked.\n     * @return Whether the window is in local focus mode or not.\n     ",
    "links" : [ "WindowManager.LayoutParams" ]
  }, {
    "name" : " int onProcessImeInputStage(Object token, InputEvent event, WindowManager.LayoutParams windowAttribute, InputMethodManager.FinishedInputEventCallback callback)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getServedView()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getNextServedView()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setServedView(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setNextServedView(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasImeFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the view's window has IME focused.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEBUG", "TAG", "mViewRootImpl", "mHasImeFocus", "mServedView", "mNextServedView", "mDelegate" ],
  "methodNames" : [ "private InputMethodManagerDelegate getImmDelegate()", " void onMovedToDisplay()", " void onTraversal(boolean hasWindowFocus, WindowManager.LayoutParams windowAttribute)", " void onPreWindowFocus(boolean hasWindowFocus, WindowManager.LayoutParams windowAttribute)", " boolean updateImeFocusable(WindowManager.LayoutParams windowAttribute, boolean force)", " void onPostWindowFocus(View focusedView, boolean hasWindowFocus, WindowManager.LayoutParams windowAttribute)", "public boolean checkFocus(boolean forceNewFocus, boolean startInput)", " void onViewFocusChanged(View view, boolean hasFocus)", " void onViewDetachedFromWindow(View view)", " void onWindowDismissed()", "private static boolean isInLocalFocusMode(WindowManager.LayoutParams windowAttribute)", " int onProcessImeInputStage(Object token, InputEvent event, WindowManager.LayoutParams windowAttribute, InputMethodManager.FinishedInputEventCallback callback)", "public View getServedView()", "public View getNextServedView()", "public void setServedView(View view)", "public void setNextServedView(View view)", " boolean hasImeFocus()" ]
}