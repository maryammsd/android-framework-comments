{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/DTMDefaultBaseTraversers.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "IndexedDTMAxisTraverser",
  "comment" : "\n   * Super class for derived classes that want a convenient way to access \n   * the indexing mechanism.\n   ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected final boolean isIndexed(int expandedTypeID)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if the indexing is on and the given expanded type ID matches \n     * what is in the indexes.  Derived classes should call this before \n     * calling {@link #getNextIndexed(int, int, int) getNextIndexed} method.\n     *\n     * @param expandedTypeID The expanded type ID being requested.\n     *\n     * @return true if it is OK to call the \n     *         {@link #getNextIndexed(int, int, int) getNextIndexed} method.\n     ",
    "links" : [ "#getNextIndexed(int" ]
  }, {
    "name" : "protected abstract boolean isAfterAxis(int axisRoot, int identity)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if a node is outside the axis being traversed.  This method must be \n     * implemented by derived classes, and must be robust enough to handle any \n     * node that occurs after the axis root.\n     *\n     * @param axisRoot The root identity of the axis.\n     * @param identity The node in question.\n     *\n     * @return true if the given node falls outside the axis being traversed.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract boolean axisHasBeenProcessed(int axisRoot)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if the axis has been fully processed to tell if a the wait for \n     * an arriving node should terminate.  This method must be implemented \n     * be a derived class.\n     *\n     * @param axisRoot The root identity of the axis.\n     *\n     * @return true if the axis has been fully processed.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getNextIndexed(int axisRoot, int nextPotential, int expandedTypeID)",
    "returnType" : "int",
    "comment" : "\n     * Get the next indexed node that matches the expanded type ID.  Before \n     * calling this function, one should first call \n     * {@link #isIndexed(int) isIndexed} to make sure that the index can \n     * contain nodes that match the given expanded type ID.\n     *\n     * @param axisRoot The root identity of the axis.\n     * @param nextPotential The node found must match or occur after this node.\n     * @param expandedTypeID The expanded type ID for the request.\n     *\n     * @return The node ID or NULL if not found.\n     ",
    "links" : [ "#isIndexed(int)" ]
  } ],
  "methodNames" : [ "protected final boolean isIndexed(int expandedTypeID)", "protected abstract boolean isAfterAxis(int axisRoot, int identity)", "protected abstract boolean axisHasBeenProcessed(int axisRoot)", "protected int getNextIndexed(int axisRoot, int nextPotential, int expandedTypeID)" ],
  "variableNames" : [ ]
}