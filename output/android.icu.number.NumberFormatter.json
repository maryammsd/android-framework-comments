{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/number/NumberFormatter.java",
  "packageName" : "android.icu.number",
  "className" : "NumberFormatter",
  "comment" : "\n * All-in-one formatter for localized numbers, currencies, and units.\n *\n * For a full list of options, see {@link NumberFormatterSettings}.\n *\n * <pre>\n * // Most basic usage:\n * NumberFormatter.withLocale(...).format(123).toString();  // 1,234 in en-US\n *\n * // Custom notation, unit, and rounding strategy:\n * NumberFormatter.with()\n *     .notation(Notation.compactShort())\n *     .unit(Currency.getInstance(\"EUR\"))\n *     .precision(Precision.maxDigits(2))\n *     .locale(...)\n *     .format(1234)\n *     .toString();  // â‚¬1.2K in en-US\n *\n * // Create a formatter in a private static final field:\n * private static final LocalizedNumberFormatter formatter = NumberFormatter.withLocale(...)\n *     .unit(NoUnit.PERCENT)\n *     .precision(Precision.fixedFraction(3));\n * formatter.format(5.9831).toString();  // 5.983% in en-US\n *\n * // Create a \"template\" in a private static final field but without setting a locale until the call site:\n * private static final UnlocalizedNumberFormatter template = NumberFormatter.with()\n *     .sign(SignDisplay.ALWAYS)\n *     .unitWidth(UnitWidth.FULL_NAME);\n * template.locale(...).format(new Measure(1234, MeasureUnit.METER)).toString();  // +1,234 meters in en-US\n * </pre>\n *\n * <p>\n * This API offers more features than {@link android.icu.text.DecimalFormat} and is geared toward new\n * users of ICU.\n *\n * <p>\n * NumberFormatter instances (i.e., LocalizedNumberFormatter and UnlocalizedNumberFormatter)\n * are immutable and thread safe. This means that invoking a configuration\n * method has no effect on the receiving instance; you must store and use the new number formatter\n * instance it returns instead.\n *\n * <pre>\n * UnlocalizedNumberFormatter formatter = UnlocalizedNumberFormatter.with()\n *         .notation(Notation.scientific());\n * formatter.precision(Precision.maxFraction(2)); // does nothing!\n * formatter.locale(ULocale.ENGLISH).format(9.8765).toString(); // prints \"9.8765E0\", not \"9.88E0\"\n * </pre>\n *\n * <p>\n * This API is based on the <em>fluent</em> design pattern popularized by libraries such as Google's\n * Guava. For extensive details on the design of this API, read <a href=\"https://goo.gl/szi5VB\">the\n * design doc</a>.\n *\n * <p>\n * Note: To format monetary/currency values, specify the currency in the `.unit()` function.\n *\n * @author Shane Carr\n ",
  "links" : [ "android.icu.text.DecimalFormat", "android.icu.number.NumberFormatterSettings" ],
  "variables" : [ {
    "name" : "BASE",
    "type" : "UnlocalizedNumberFormatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_THRESHOLD",
    "type" : "long",
    "comment" : "\n     * Use a default threshold of 3. This means that the third time .format() is called, the data\n     * structures get built using the \"safe\" code path. The first two calls to .format() will trigger the\n     * unsafe code path.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static UnlocalizedNumberFormatter with()",
    "returnType" : "UnlocalizedNumberFormatter",
    "comment" : "\n     * Call this method at the beginning of a NumberFormatter fluent chain in which the locale is not\n     * currently known at the call site.\n     *\n     * @return An {@link UnlocalizedNumberFormatter}, to be used for chaining.\n     ",
    "links" : [ "android.icu.number.UnlocalizedNumberFormatter" ]
  }, {
    "name" : "public static LocalizedNumberFormatter withLocale(Locale locale)",
    "returnType" : "LocalizedNumberFormatter",
    "comment" : "\n     * Call this method at the beginning of a NumberFormatter fluent chain in which the locale is known\n     * at the call site.\n     *\n     * @param locale\n     *            The locale from which to load formats and symbols for number formatting.\n     * @return A {@link LocalizedNumberFormatter}, to be used for chaining.\n     ",
    "links" : [ "android.icu.number.LocalizedNumberFormatter" ]
  }, {
    "name" : "public static LocalizedNumberFormatter withLocale(ULocale locale)",
    "returnType" : "LocalizedNumberFormatter",
    "comment" : "\n     * Call this method at the beginning of a NumberFormatter fluent chain in which the locale is known\n     * at the call site.\n     *\n     * @param locale\n     *            The locale from which to load formats and symbols for number formatting.\n     * @return A {@link LocalizedNumberFormatter}, to be used for chaining.\n     ",
    "links" : [ "android.icu.number.LocalizedNumberFormatter" ]
  }, {
    "name" : "public static UnlocalizedNumberFormatter forSkeleton(String skeleton)",
    "returnType" : "UnlocalizedNumberFormatter",
    "comment" : "\n     * Call this method at the beginning of a NumberFormatter fluent chain to create an instance based\n     * on a given number skeleton string.\n     *\n     * For more information on number skeleton strings, see:\n     * https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html\n     *\n     * @param skeleton\n     *            The skeleton string off of which to base this NumberFormatter.\n     * @return An {@link UnlocalizedNumberFormatter}, to be used for chaining.\n     * @throws SkeletonSyntaxException If the given string is not a valid number formatting skeleton.\n     * @hide unsupported on Android\n     ",
    "links" : [ "android.icu.number.UnlocalizedNumberFormatter" ]
  }, {
    "name" : "public static UnlocalizedNumberFormatter fromDecimalFormat(DecimalFormatProperties properties, DecimalFormatSymbols symbols, DecimalFormatProperties exportedProperties)",
    "returnType" : "UnlocalizedNumberFormatter",
    "comment" : "\n     * Note: In Java, since NumberPropertyMapper is package-private, this method is here so that it is\n     * accessible to tests.\n     *\n     * @deprecated ICU 60 This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static UnlocalizedNumberFormatter with()", "public static LocalizedNumberFormatter withLocale(Locale locale)", "public static LocalizedNumberFormatter withLocale(ULocale locale)", "public static UnlocalizedNumberFormatter forSkeleton(String skeleton)", "public static UnlocalizedNumberFormatter fromDecimalFormat(DecimalFormatProperties properties, DecimalFormatSymbols symbols, DecimalFormatProperties exportedProperties)" ],
  "variableNames" : [ "BASE", "DEFAULT_THRESHOLD" ]
}