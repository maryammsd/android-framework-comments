{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/message2/MFFunctionRegistry.java",
  "packageName" : "android.icu.message2",
  "className" : "MFFunctionRegistry",
  "comment" : "\n * This class is used to register mappings between various function\n * names and the factories that can create those functions.\n *\n * <p>For example to add formatting for a {@code Person} object one would need to:</p>\n * <ul>\n *   <li>write a function (class, lambda, etc.) that does the formatting proper\n *     (implementing {@link Formatter})</li>\n *   <li>write a factory that creates such a function\n *     (implementing {@link FormatterFactory})</li>\n *  <li>add a mapping from the function name as used in the syntax\n *    (for example {@code \"person\"}) to the factory</li>\n *  <li>optionally add a mapping from the class to format ({@code ...Person.class}) to\n *     the formatter name ({@code \"person\"}), so that one can use a placeholder in the message\n *     without specifying a function (for example {@code \"... {$me} ...\"} instead of\n *     {@code \"... {$me :person} ...\"}, if the class of {@code $me} is an {@code instanceof Person}).\n *     </li>\n * </ul>\n *\n * @deprecated This API is for technology preview only.\n * @hide Only a subset of ICU is exposed in Android\n * @hide draft / provisional / internal are hidden on Android\n ",
  "links" : [ "android.icu.message2.Formatter", "android.icu.message2.FormatterFactory" ],
  "variables" : [ {
    "name" : "formattersMap",
    "type" : "Map<String, FormatterFactory>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "selectorsMap",
    "type" : "Map<String, SelectorFactory>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "classToFormatter",
    "type" : "Map<Class<?>, String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Builder builder()",
    "returnType" : "Builder",
    "comment" : "\n     * Creates a builder.\n     *\n     * @return the Builder.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormatterFactory getFormatter(String formatterName)",
    "returnType" : "FormatterFactory",
    "comment" : "\n     * Returns the formatter factory used to create the formatter for function\n     * named {@code name}.\n     *\n     * <p>Note: function name here means the name used to refer to the function in the\n     * MessageFormat 2 syntax, for example {@code \"... {$exp :datetime} ...\"}<br>\n     * The function name here is {@code \"datetime\"}, and does not have to correspond to the\n     * name of the methods / classes used to implement the functionality.</p>\n     *\n     * <p>For example one might write a {@code PersonFormatterFactory} returning a {@code PersonFormatter},\n     * and map that to the MessageFormat function named {@code \"person\"}.<br>\n     * The only name visible to the users of MessageFormat syntax will be {@code \"person\"}.</p>\n     *\n     * @param formatterName the function name.\n     * @return the factory creating formatters for {@code name}. Returns {@code null} if none is registered.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getFormatterNames()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Get all know names that have a mappings from name to {@link FormatterFactory}.\n     *\n     * @return a set of all the known formatter names.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.message2.FormatterFactory" ]
  }, {
    "name" : "public String getDefaultFormatterNameForType(Class<?> clazz)",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the formatter used to format an object of type {@code clazz}.\n     *\n     * @param clazz the class of the object to format.\n     * @return the name of the formatter class, if registered. Returns {@code null} otherwise.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Class<?>> getDefaultFormatterTypes()",
    "returnType" : "Set<Class<?>>",
    "comment" : "\n     * Get all know classes that have a mappings from class to function name.\n     *\n     * @return a set of all the known classes that have mapping to function names.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public SelectorFactory getSelector(String selectorName)",
    "returnType" : "SelectorFactory",
    "comment" : "\n     * Returns the selector factory used to create the selector for function\n     * named {@code name}.\n     *\n     * <p>Note: the same comments about naming as the ones on {@code getFormatter} apply.</p>\n     *\n     * @param selectorName the selector name.\n     * @return the factory creating selectors for {@code name}. Returns {@code null} if none is registered.\n     * @see #getFormatter(String)\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getSelectorNames()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Get all know names that have a mappings from name to {@link SelectorFactory}.\n     *\n     * @return a set of all the known selector names.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.message2.SelectorFactory" ]
  } ],
  "methodNames" : [ "public static Builder builder()", "public FormatterFactory getFormatter(String formatterName)", "public Set<String> getFormatterNames()", "public String getDefaultFormatterNameForType(Class<?> clazz)", "public Set<Class<?>> getDefaultFormatterTypes()", "public SelectorFactory getSelector(String selectorName)", "public Set<String> getSelectorNames()" ],
  "variableNames" : [ "formattersMap", "selectorsMap", "classToFormatter" ]
}