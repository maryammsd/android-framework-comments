{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/UserHandle.java",
  "packageName" : "android.os",
  "className" : "UserHandle",
  "comment" : "\n * Representation of a user on the device.\n ",
  "variables" : [ {
    "name" : "PER_USER_RANGE",
    "type" : "int",
    "comment" : "\n     * @hide Range of uids allocated for a user.\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_ALL",
    "type" : "int",
    "comment" : " @hide A user id to indicate all users on the device ",
    "links" : [ ]
  }, {
    "name" : "ALL",
    "type" : "UserHandle",
    "comment" : " @hide A user handle to indicate all users on the device ",
    "links" : [ ]
  }, {
    "name" : "USER_CURRENT",
    "type" : "int",
    "comment" : " @hide A user id to indicate the currently active user ",
    "links" : [ ]
  }, {
    "name" : "CURRENT",
    "type" : "UserHandle",
    "comment" : " @hide A user handle to indicate the current user of the device ",
    "links" : [ ]
  }, {
    "name" : "USER_CURRENT_OR_SELF",
    "type" : "int",
    "comment" : " @hide A user id to indicate that we would like to send to the current\n     *  user, but if this is calling from a user process then we will send it\n     *  to the caller's user instead of failing with a security exception ",
    "links" : [ ]
  }, {
    "name" : "CURRENT_OR_SELF",
    "type" : "UserHandle",
    "comment" : " @hide A user handle to indicate that we would like to send to the current\n     *  user, but if this is calling from a user process then we will send it\n     *  to the caller's user instead of failing with a security exception ",
    "links" : [ ]
  }, {
    "name" : "USER_NULL",
    "type" : "int",
    "comment" : " @hide An undefined user id ",
    "links" : [ ]
  }, {
    "name" : "NULL",
    "type" : "UserHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_OWNER",
    "type" : "int",
    "comment" : "\n     * @hide A user id constant to indicate the \"owner\" user of the device\n     * @deprecated Consider using either {@link UserHandle#USER_SYSTEM} constant or\n     * check the target user's flag {@link android.content.pm.UserInfo#isAdmin}.\n     ",
    "links" : [ "UserHandle#USER_SYSTEM", "android.content.pm.UserInfo#isAdmin" ]
  }, {
    "name" : "OWNER",
    "type" : "UserHandle",
    "comment" : "\n     * @hide A user handle to indicate the primary/owner user of the device\n     * @deprecated Consider using either {@link UserHandle#SYSTEM} constant or\n     * check the target user's flag {@link android.content.pm.UserInfo#isAdmin}.\n     ",
    "links" : [ "UserHandle#SYSTEM", "android.content.pm.UserInfo#isAdmin" ]
  }, {
    "name" : "USER_SYSTEM",
    "type" : "int",
    "comment" : " @hide A user id constant to indicate the \"system\" user of the device ",
    "links" : [ ]
  }, {
    "name" : "USER_SERIAL_SYSTEM",
    "type" : "int",
    "comment" : " @hide A user serial constant to indicate the \"system\" user of the device ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM",
    "type" : "UserHandle",
    "comment" : " @hide A user handle to indicate the \"system\" user of the device ",
    "links" : [ ]
  }, {
    "name" : "MU_ENABLED",
    "type" : "boolean",
    "comment" : "\n     * @hide Enable multi-user related side effects. Set this to false if\n     * there are problems with single user use-cases.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_SECONDARY_USER_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NUM_CACHED_USERS",
    "type" : "int",
    "comment" : "\n     * Arbitrary user handle cache size. We use the cache even when {@link #MU_ENABLED} is false\n     * anyway, so we can always assume in CTS that UserHandle.of(10) returns a cached instance\n     * even on non-multiuser devices.\n     ",
    "links" : [ "#MU_ENABLED" ]
  }, {
    "name" : "CACHED_USER_INFOS",
    "type" : "UserHandle[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERR_GID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AID_ROOT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AID_APP_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AID_APP_END",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AID_SHARED_GID_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AID_CACHE_GID_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mHandle",
    "type" : "int",
    "comment" : " The userId represented by this UserHandle. ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<UserHandle>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isSameUser(int uid1, int uid2)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks to see if the user id is the same for the two uids, i.e., they belong to the same\n     * user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSameApp(int uid1, int uid2)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks to see if both uids are referring to the same app id, ignoring the user id part of the\n     * uids.\n     * @param uid1 uid to compare\n     * @param uid2 other uid to compare\n     * @return whether the appId is the same for both uids\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIsolated(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether a UID is an \"isolated\" UID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isApp(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether a UID belongs to a regular app. *Note* \"Not a regular app\" does not mean\n     * \"it's system\", because of isolated UIDs. Use {@link #isCore} for that.\n     * @hide\n     ",
    "links" : [ "#isCore" ]
  }, {
    "name" : "public static boolean isCore(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether a UID belongs to a system core component or not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UserHandle getUserHandleForUid(int uid)",
    "returnType" : "UserHandle",
    "comment" : "\n     * Returns the user for a given uid.\n     * @param uid A uid for an application running in a particular user.\n     * @return A {@link UserHandle} for that user.\n     ",
    "links" : [ "UserHandle" ]
  }, {
    "name" : "public static int getUserId(int uid)",
    "returnType" : "int",
    "comment" : "\n     * Returns the user id for a given uid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getCallingUserId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getCallingAppId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static UserHandle of(@UserIdInt int userId)",
    "returnType" : "UserHandle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getUid(@UserIdInt int userId, @AppIdInt int appId)",
    "returnType" : "int",
    "comment" : "\n     * Returns the uid that is composed from the userId and the appId.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getAppId(int uid)",
    "returnType" : "int",
    "comment" : "\n     * Returns the app id (or base uid) for a given uid, stripping out the user id from it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getUserGid(@UserIdInt int userId)",
    "returnType" : "int",
    "comment" : "\n     * Returns the gid shared between all apps with this userId.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getSharedAppGid(int uid)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getSharedAppGid(@UserIdInt int userId, @AppIdInt int appId)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getAppIdFromSharedAppGid(int gid)",
    "returnType" : "int",
    "comment" : "\n     * Returns the app id for a given shared app gid. Returns -1 if the ID is invalid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getCacheAppGid(int uid)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getCacheAppGid(@UserIdInt int userId, @AppIdInt int appId)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void formatUid(StringBuilder sb, int uid)",
    "returnType" : "void",
    "comment" : "\n     * Generate a text representation of the uid, breaking out its individual\n     * components -- user, app, isolated, etc.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String formatUid(int uid)",
    "returnType" : "String",
    "comment" : "\n     * Generate a text representation of the uid, breaking out its individual\n     * components -- user, app, isolated, etc.\n     *\n     * @param uid The uid to format\n     * @return A string representing the UID with its individual components broken out\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void formatUid(PrintWriter pw, int uid)",
    "returnType" : "void",
    "comment" : "\n     * Generate a text representation of the uid, breaking out its individual\n     * components -- user, app, isolated, etc.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int parseUserArg(String arg)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int myUserId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the user id of the current process\n     * @return user id of the current process\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOwner()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this UserHandle refers to the owner user; false otherwise.\n     * @return true if this UserHandle refers to the owner user; false otherwise.\n     * @hide\n     * @deprecated please use {@link #isSystem()} or check for\n     * {@link android.content.pm.UserInfo#isPrimary()}\n     * {@link android.content.pm.UserInfo#isAdmin()} based on your particular use case.\n     ",
    "links" : [ "#isSystem", "android.content.pm.UserInfo#isPrimary", "android.content.pm.UserInfo#isAdmin" ]
  }, {
    "name" : "public boolean isSystem()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this UserHandle refers to the system user; false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIdentifier()",
    "returnType" : "int",
    "comment" : "\n     * Returns the userId stored in this UserHandle.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void writeToParcel(UserHandle h, Parcel out)",
    "returnType" : "void",
    "comment" : "\n     * Write a UserHandle to a Parcel, handling null pointers.  Must be\n     * read with {@link #readFromParcel(Parcel)}.\n     *\n     * @param h The UserHandle to be written.\n     * @param out The Parcel in which the UserHandle will be placed.\n     *\n     * @see #readFromParcel(Parcel)\n     ",
    "links" : [ "#readFromParcel" ]
  }, {
    "name" : "public static UserHandle readFromParcel(Parcel in)",
    "returnType" : "UserHandle",
    "comment" : "\n     * Read a UserHandle from a Parcel that was previously written\n     * with {@link #writeToParcel(UserHandle, Parcel)}, returning either\n     * a null or new object as appropriate.\n     *\n     * @param in The Parcel from which to read the UserHandle\n     * @return Returns a new UserHandle matching the previously written\n     * object, or null if a null had been written.\n     *\n     * @see #writeToParcel(UserHandle, Parcel)\n     ",
    "links" : [ "#writeToParcel" ]
  } ],
  "variableNames" : [ "PER_USER_RANGE", "USER_ALL", "ALL", "USER_CURRENT", "CURRENT", "USER_CURRENT_OR_SELF", "CURRENT_OR_SELF", "USER_NULL", "NULL", "USER_OWNER", "OWNER", "USER_SYSTEM", "USER_SERIAL_SYSTEM", "SYSTEM", "MU_ENABLED", "MIN_SECONDARY_USER_ID", "NUM_CACHED_USERS", "CACHED_USER_INFOS", "ERR_GID", "AID_ROOT", "AID_APP_START", "AID_APP_END", "AID_SHARED_GID_START", "AID_CACHE_GID_START", "mHandle", "CREATOR" ],
  "methodNames" : [ "public static boolean isSameUser(int uid1, int uid2)", "public static boolean isSameApp(int uid1, int uid2)", "public static boolean isIsolated(int uid)", "public static boolean isApp(int uid)", "public static boolean isCore(int uid)", "public static UserHandle getUserHandleForUid(int uid)", "public static int getUserId(int uid)", "public static int getCallingUserId()", "public static int getCallingAppId()", "public static UserHandle of(@UserIdInt int userId)", "public static int getUid(@UserIdInt int userId, @AppIdInt int appId)", "public static int getAppId(int uid)", "public static int getUserGid(@UserIdInt int userId)", "public static int getSharedAppGid(int uid)", "public static int getSharedAppGid(@UserIdInt int userId, @AppIdInt int appId)", "public static int getAppIdFromSharedAppGid(int gid)", "public static int getCacheAppGid(int uid)", "public static int getCacheAppGid(@UserIdInt int userId, @AppIdInt int appId)", "public static void formatUid(StringBuilder sb, int uid)", "public static String formatUid(int uid)", "public static void formatUid(PrintWriter pw, int uid)", "public static int parseUserArg(String arg)", "public static int myUserId()", "public boolean isOwner()", "public boolean isSystem()", "public int getIdentifier()", "public String toString()", "public boolean equals(Object obj)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public static void writeToParcel(UserHandle h, Parcel out)", "public static UserHandle readFromParcel(Parcel in)" ]
}