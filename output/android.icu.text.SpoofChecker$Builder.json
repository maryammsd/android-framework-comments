{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/SpoofChecker.java",
  "packageName" : "android.icu.text",
  "className" : "Builder",
  "comment" : "\n     * SpoofChecker Builder. To create a SpoofChecker, first instantiate a SpoofChecker.Builder, set the desired\n     * checking options on the builder, then call the build() function to create a SpoofChecker instance.\n     *\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "fChecks",
    "type" : "int",
    "comment" : " Bit vector of checks to perform.",
    "links" : [ ]
  }, {
    "name" : "fSpoofData",
    "type" : "SpoofData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fAllowedCharsSet",
    "type" : "UnicodeSet",
    "comment" : " The UnicodeSet of allowed characters.",
    "links" : [ ]
  }, {
    "name" : "fAllowedLocales",
    "type" : "Set<ULocale>",
    "comment" : " The list of allowed locales.",
    "links" : [ ]
  }, {
    "name" : "fRestrictionLevel",
    "type" : "RestrictionLevel",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SpoofChecker build()",
    "returnType" : "SpoofChecker",
    "comment" : "\n         * Create a SpoofChecker with current configuration.\n         *\n         * @return SpoofChecker\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setData(Reader confusables) throws ParseException, IOException",
    "returnType" : "Builder",
    "comment" : "\n         * Specify the source form of the spoof data Spoof Checker. The inputs correspond to the Unicode data file\n         * confusables.txt as described in Unicode UAX 39. The syntax of the source data is as described in UAX 39 for\n         * these files, and the content of these files is acceptable input.\n         *\n         * @param confusables\n         *            the Reader of confusable characters definitions, as found in file confusables.txt from\n         *            unicode.org.\n         * @throws ParseException\n         *             To report syntax errors in the input.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setData(Reader confusables, Reader confusablesWholeScript) throws ParseException, IOException",
    "returnType" : "Builder",
    "comment" : "\n         * Deprecated as of ICU 58; use {@link SpoofChecker.Builder#setData(Reader confusables)} instead.\n         *\n         * @param confusables\n         *            the Reader of confusable characters definitions, as found in file confusables.txt from\n         *            unicode.org.\n         * @param confusablesWholeScript\n         *            No longer supported.\n         * @throws ParseException\n         *             To report syntax errors in the input.\n         *\n         * @deprecated ICU 58\n         ",
    "links" : [ "SpoofChecker.Builder#setData(Reader" ]
  }, {
    "name" : "public Builder setChecks(int checks)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify the bitmask of checks that will be performed by {@link SpoofChecker#failsChecks}. Calling this method\n         * overwrites any checks that may have already been enabled. By default, all checks are enabled.\n         *\n         * To enable specific checks and disable all others,\n         * OR together only the bit constants for the desired checks.\n         * For example, to fail strings containing characters outside of\n         * the set specified by {@link #setAllowedChars} and\n         * also strings that contain digits from mixed numbering systems:\n         *\n         * <pre>\n         * {@code\n         * builder.setChecks(SpoofChecker.CHAR_LIMIT | SpoofChecker.MIXED_NUMBERS);\n         * }\n         * </pre>\n         *\n         * To disable specific checks and enable all others,\n         * start with ALL_CHECKS and \"AND away\" the not-desired checks.\n         * For example, if you are not planning to use the {@link SpoofChecker#areConfusable} functionality,\n         * it is good practice to disable the CONFUSABLE check:\n         *\n         * <pre>\n         * {@code\n         * builder.setChecks(SpoofChecker.ALL_CHECKS & ~SpoofChecker.CONFUSABLE);\n         * }\n         * </pre>\n         *\n         * Note that methods such as {@link #setAllowedChars}, {@link #setAllowedLocales}, and\n         * {@link #setRestrictionLevel} will enable certain checks when called. Those methods will OR the check they\n         * enable onto the existing bitmask specified by this method. For more details, see the documentation of those\n         * methods.\n         *\n         * @param checks\n         *            The set of checks that this spoof checker will perform. The value is an 'or' of the desired\n         *            checks.\n         * @return self\n         ",
    "links" : [ "android.icu.text.SpoofChecker#failsChecks", "#setAllowedChars", "#setRestrictionLevel", "#setAllowedLocales", "android.icu.text.SpoofChecker#areConfusable" ]
  }, {
    "name" : "public Builder setAllowedLocales(Set<ULocale> locales)",
    "returnType" : "Builder",
    "comment" : "\n         * Limit characters that are acceptable in identifiers being checked to those normally used with the languages\n         * associated with the specified locales. Any previously specified list of locales is replaced by the new\n         * settings.\n         *\n         * A set of languages is determined from the locale(s), and from those a set of acceptable Unicode scripts is\n         * determined. Characters from this set of scripts, along with characters from the \"common\" and \"inherited\"\n         * Unicode Script categories will be permitted.\n         *\n         * Supplying an empty string removes all restrictions; characters from any script will be allowed.\n         *\n         * The {@link #CHAR_LIMIT} test is automatically enabled for this SpoofChecker when calling this function with a\n         * non-empty list of locales.\n         *\n         * The Unicode Set of characters that will be allowed is accessible via the {@link #getAllowedChars} function.\n         * setAllowedLocales() will <i>replace</i> any previously applied set of allowed characters.\n         *\n         * Adjustments, such as additions or deletions of certain classes of characters, can be made to the result of\n         * {@link #setAllowedChars} by fetching the resulting set with {@link #getAllowedChars}, manipulating it with\n         * the Unicode Set API, then resetting the spoof detectors limits with {@link #setAllowedChars}.\n         *\n         * @param locales\n         *            A Set of ULocales, from which the language and associated script are extracted. If the locales Set\n         *            is null, no restrictions will be placed on the allowed characters.\n         *\n         * @return self\n         ",
    "links" : [ "#CHAR_LIMIT", "#setAllowedChars", "#getAllowedChars" ]
  }, {
    "name" : "public Builder setAllowedJavaLocales(Set<Locale> locales)",
    "returnType" : "Builder",
    "comment" : "\n         * Limit characters that are acceptable in identifiers being checked to those normally used with the languages\n         * associated with the specified locales. Any previously specified list of locales is replaced by the new\n         * settings.\n         *\n         * @param locales\n         *            A Set of Locales, from which the language and associated script are extracted. If the locales Set\n         *            is null, no restrictions will be placed on the allowed characters.\n         *\n         * @return self\n         ",
    "links" : [ ]
  }, {
    "name" : "private void addScriptChars(ULocale locale, UnicodeSet allowedChars)",
    "returnType" : "void",
    "comment" : " setAllowedLocales.",
    "links" : [ ]
  }, {
    "name" : "public Builder setAllowedChars(UnicodeSet chars)",
    "returnType" : "Builder",
    "comment" : "\n         * Limit the acceptable characters to those specified by a Unicode Set. Any previously specified character limit\n         * is replaced by the new settings. This includes limits on characters that were set with the\n         * setAllowedLocales() function. Note that the RESTRICTED set is useful.\n         *\n         * The {@link #CHAR_LIMIT} test is automatically enabled for this SpoofChecker by this function.\n         *\n         * @param chars\n         *            A Unicode Set containing the list of characters that are permitted. The incoming set is cloned by\n         *            this function, so there are no restrictions on modifying or deleting the UnicodeSet after calling\n         *            this function. Note that this clears the allowedLocales set.\n         * @return self\n         ",
    "links" : [ "#CHAR_LIMIT" ]
  }, {
    "name" : "public Builder setRestrictionLevel(RestrictionLevel restrictionLevel)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the loosest restriction level allowed for strings. The default if this is not called is\n         * {@link RestrictionLevel#HIGHLY_RESTRICTIVE}. Calling this method enables the {@link #RESTRICTION_LEVEL} and\n         * {@link #MIXED_NUMBERS} checks, corresponding to Sections 5.1 and 5.2 of UTS 39. To customize which checks are\n         * to be performed by {@link SpoofChecker#failsChecks}, see {@link #setChecks}.\n         *\n         * @param restrictionLevel\n         *            The loosest restriction level allowed.\n         * @return self\n         ",
    "links" : [ "#RESTRICTION_LEVEL", "android.icu.text.SpoofChecker#failsChecks", "#MIXED_NUMBERS", "#setChecks", "#HIGHLY_RESTRICTIVE" ]
  } ],
  "methodNames" : [ "public SpoofChecker build()", "public Builder setData(Reader confusables) throws ParseException, IOException", "public Builder setData(Reader confusables, Reader confusablesWholeScript) throws ParseException, IOException", "public Builder setChecks(int checks)", "public Builder setAllowedLocales(Set<ULocale> locales)", "public Builder setAllowedJavaLocales(Set<Locale> locales)", "private void addScriptChars(ULocale locale, UnicodeSet allowedChars)", "public Builder setAllowedChars(UnicodeSet chars)", "public Builder setRestrictionLevel(RestrictionLevel restrictionLevel)" ],
  "variableNames" : [ "fChecks", "fSpoofData", "fAllowedCharsSet", "fAllowedLocales", "fRestrictionLevel" ]
}