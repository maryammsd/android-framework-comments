{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/ViewAsserts.java",
  "packageName" : "android.test",
  "className" : "ViewAsserts",
  "comment" : "\n * Some useful assertions about views.\n *\n * @deprecated Use\n * <a href=\"{@docRoot}reference/android/support/test/espresso/matcher/ViewMatchers.html\">Espresso\n * View Matchers</a> instead. New test should be written using the\n * <a href=\"{@docRoot}tools/testing-support-library/index.html\">Android Testing Support Library</a>.\n * For more information about UI testing, take the\n * <a href=\"{@docRoot}tools/testing-support-library/index.html\">Espresso UI testing</a> training.\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static void assertOnScreen(View origin, View view)",
    "returnType" : "void",
    "comment" : "\n     * Assert that view is on the screen.\n     * @param origin The root view of the screen.\n     * @param view The view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertOffScreenBelow(View origin, View view)",
    "returnType" : "void",
    "comment" : "\n     * Assert that view is below the visible screen.\n     * @param origin The root view of the screen.\n     * @param view The view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertOffScreenAbove(View origin, View view)",
    "returnType" : "void",
    "comment" : "\n     * Assert that view is above the visible screen.\n     * @param origin Te root view of the screen.\n     * @param view The view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertHasScreenCoordinates(View origin, View view, int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Assert that a view has a particular x and y position on the visible screen.\n     * @param origin The root view of the screen.\n     * @param view The view.\n     * @param x The expected x coordinate.\n     * @param y The expected y coordinate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertBaselineAligned(View first, View second)",
    "returnType" : "void",
    "comment" : "\n     * Assert that two views are aligned on their baseline, that is that their baselines\n     * are on the same y location.\n     *\n     * @param first The first view\n     * @param second The second view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertRightAligned(View first, View second)",
    "returnType" : "void",
    "comment" : "\n     * Assert that two views are right aligned, that is that their right edges\n     * are on the same x location.\n     *\n     * @param first The first view\n     * @param second The second view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertRightAligned(View first, View second, int margin)",
    "returnType" : "void",
    "comment" : "\n     * Assert that two views are right aligned, that is that their right edges\n     * are on the same x location, with respect to the specified margin.\n     *\n     * @param first The first view\n     * @param second The second view\n     * @param margin The margin between the first view and the second view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertLeftAligned(View first, View second)",
    "returnType" : "void",
    "comment" : "\n     * Assert that two views are left aligned, that is that their left edges\n     * are on the same x location.\n     *\n     * @param first The first view\n     * @param second The second view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertLeftAligned(View first, View second, int margin)",
    "returnType" : "void",
    "comment" : "\n     * Assert that two views are left aligned, that is that their left edges\n     * are on the same x location, with respect to the specified margin.\n     *\n     * @param first The first view\n     * @param second The second view\n     * @param margin The margin between the first view and the second view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertBottomAligned(View first, View second)",
    "returnType" : "void",
    "comment" : "\n     * Assert that two views are bottom aligned, that is that their bottom edges\n     * are on the same y location.\n     *\n     * @param first The first view\n     * @param second The second view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertBottomAligned(View first, View second, int margin)",
    "returnType" : "void",
    "comment" : "\n     * Assert that two views are bottom aligned, that is that their bottom edges\n     * are on the same y location, with respect to the specified margin.\n     *\n     * @param first The first view\n     * @param second The second view\n     * @param margin The margin between the first view and the second view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertTopAligned(View first, View second)",
    "returnType" : "void",
    "comment" : "\n     * Assert that two views are top aligned, that is that their top edges\n     * are on the same y location.\n     *\n     * @param first The first view\n     * @param second The second view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertTopAligned(View first, View second, int margin)",
    "returnType" : "void",
    "comment" : "\n     * Assert that two views are top aligned, that is that their top edges\n     * are on the same y location, with respect to the specified margin.\n     *\n     * @param first The first view\n     * @param second The second view\n     * @param margin The margin between the first view and the second view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertHorizontalCenterAligned(View reference, View test)",
    "returnType" : "void",
    "comment" : "\n     * Assert that the <code>test</code> view is horizontally center aligned\n     * with respect to the <code>reference</code> view.\n     *\n     * @param reference The reference view\n     * @param test The view that should be center aligned with the reference view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertVerticalCenterAligned(View reference, View test)",
    "returnType" : "void",
    "comment" : "\n     * Assert that the <code>test</code> view is vertically center aligned\n     * with respect to the <code>reference</code> view.\n     *\n     * @param reference The reference view\n     * @param test The view that should be center aligned with the reference view\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertGroupIntegrity(ViewGroup parent)",
    "returnType" : "void",
    "comment" : "\n     * Assert the specified group's integrity. The children count should be >= 0 and each\n     * child should be non-null.\n     *\n     * @param parent The group whose integrity to check\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertGroupContains(ViewGroup parent, View child)",
    "returnType" : "void",
    "comment" : "\n     * Assert that the specified group contains a specific child once and only once.\n     *\n     * @param parent The group\n     * @param child The child that should belong to group\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertGroupNotContains(ViewGroup parent, View child)",
    "returnType" : "void",
    "comment" : "\n     * Assert that the specified group does not contain a specific child.\n     *\n     * @param parent The group\n     * @param child The child that should not belong to group\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static void assertOnScreen(View origin, View view)", "public static void assertOffScreenBelow(View origin, View view)", "public static void assertOffScreenAbove(View origin, View view)", "public static void assertHasScreenCoordinates(View origin, View view, int x, int y)", "public static void assertBaselineAligned(View first, View second)", "public static void assertRightAligned(View first, View second)", "public static void assertRightAligned(View first, View second, int margin)", "public static void assertLeftAligned(View first, View second)", "public static void assertLeftAligned(View first, View second, int margin)", "public static void assertBottomAligned(View first, View second)", "public static void assertBottomAligned(View first, View second, int margin)", "public static void assertTopAligned(View first, View second)", "public static void assertTopAligned(View first, View second, int margin)", "public static void assertHorizontalCenterAligned(View reference, View test)", "public static void assertVerticalCenterAligned(View reference, View test)", "public static void assertGroupIntegrity(ViewGroup parent)", "public static void assertGroupContains(ViewGroup parent, View child)", "public static void assertGroupNotContains(ViewGroup parent, View child)" ]
}