{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/SystemProperties.java",
  "packageName" : "android.os",
  "className" : "SystemProperties",
  "comment" : "\n * Gives access to the system properties store.  The system properties\n * store contains a list of string key-value pairs.\n *\n * <p>Use this class only for the system properties that are local. e.g., within\n * an app, a partition, or a module. For system properties used across the\n * boundaries, formally define them in <code>*.sysprop</code> files and use the\n * auto-generated methods. For more information, see <a href=\n * \"https://source.android.com/devices/architecture/sysprops-apis\">Implementing\n * System Properties as APIs</a>.</p>\n *\n * {@hide}\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRACK_KEY_ACCESS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROP_NAME_MAX",
    "type" : "int",
    "comment" : "\n     * Android O removed the property name length limit, but com.amazon.kindle 7.8.1.5\n     * uses reflection to read this whenever text is selected (http://b/36095274).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROP_VALUE_MAX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "sChangeCallbacks",
    "type" : "ArrayList<Runnable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRoReads",
    "type" : "HashMap<String, MutableInt>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void onKeyAccess(String key)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void init$ravenwood(Map<String, String> values, Predicate<String> keyReadablePredicate, Predicate<String> keyWritablePredicate)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void reset$ravenwood()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static native void native_init$ravenwood(Map<String, String> values, Predicate<String> keyReadablePredicate, Predicate<String> keyWritablePredicate, Runnable changeCallback)",
    "returnType" : "void",
    "comment" : " mechanism we have to jump to our RavenwoodNativeSubstitutionClass",
    "links" : [ ]
  }, {
    "name" : "private static native void native_reset$ravenwood()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String native_get(String key)",
    "returnType" : "String",
    "comment" : " indicates. Let's just live with having a Java function with a very unusual name.",
    "links" : [ ]
  }, {
    "name" : "private static native String native_get(String key, String def)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int native_get_int(String key, int def)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long native_get_long(String key, long def)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean native_get_boolean(String key, boolean def)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long native_find(String name)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String native_get(long handle)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int native_get_int(long handle, int def)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long native_get_long(long handle, long def)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean native_get_boolean(long handle, boolean def)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void native_set(String key, String def)",
    "returnType" : "void",
    "comment" : " _NOT_ FastNative: native_set performs IPC and can block",
    "links" : [ ]
  }, {
    "name" : "private static native void native_add_change_callback()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void native_report_sysprop_change()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String get(@NonNull String key)",
    "returnType" : "String",
    "comment" : "\n     * Get the String value for the given {@code key}.\n     *\n     * @param key the key to lookup\n     * @return an empty string if the {@code key} isn't found\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String get(@NonNull String key, @Nullable String def)",
    "returnType" : "String",
    "comment" : "\n     * Get the String value for the given {@code key}.\n     *\n     * @param key the key to lookup\n     * @param def the default value in case the property is not set or empty\n     * @return if the {@code key} isn't found, return {@code def} if it isn't null, or an empty\n     * string otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getInt(@NonNull String key, int def)",
    "returnType" : "int",
    "comment" : "\n     * Get the value for the given {@code key}, and return as an integer.\n     *\n     * @param key the key to lookup\n     * @param def a default value to return\n     * @return the key parsed as an integer, or def if the key isn't found or\n     *         cannot be parsed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getLong(@NonNull String key, long def)",
    "returnType" : "long",
    "comment" : "\n     * Get the value for the given {@code key}, and return as a long.\n     *\n     * @param key the key to lookup\n     * @param def a default value to return\n     * @return the key parsed as a long, or def if the key isn't found or\n     *         cannot be parsed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getBoolean(@NonNull String key, boolean def)",
    "returnType" : "boolean",
    "comment" : "\n     * Get the value for the given {@code key}, returned as a boolean.\n     * Values 'n', 'no', '0', 'false' or 'off' are considered false.\n     * Values 'y', 'yes', '1', 'true' or 'on' are considered true.\n     * (case sensitive).\n     * If the key does not exist, or has any other value, then the default\n     * result is returned.\n     *\n     * @param key the key to lookup\n     * @param def a default value to return\n     * @return the key parsed as a boolean, or def if the key isn't found or is\n     *         not able to be parsed as a boolean.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void set(@NonNull String key, @Nullable String val)",
    "returnType" : "void",
    "comment" : "\n     * Set the value for the given {@code key} to {@code val}.\n     *\n     * @throws IllegalArgumentException for non read-only properties if the {@code val} exceeds\n     * 91 characters\n     * @throws RuntimeException if the property cannot be set, for example, if it was blocked by\n     * SELinux. libc will log the underlying reason.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addChangeCallback(@NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Add a callback that will be run whenever any system property changes.\n     *\n     * @param callback The {@link Runnable} that should be executed when a system property\n     * changes.\n     * @hide\n     ",
    "links" : [ "Runnable" ]
  }, {
    "name" : "public static void removeChangeCallback(@NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove the target callback.\n     *\n     * @param callback The {@link Runnable} that should be removed.\n     * @hide\n     ",
    "links" : [ "Runnable" ]
  }, {
    "name" : "private static void callChangeCallbacks()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void reportSyspropChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies listeners that a system property has changed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String digestOf(@NonNull String... keys)",
    "returnType" : "String",
    "comment" : "\n     * Return a {@code SHA-1} digest of the given keys and their values as a\n     * hex-encoded string. The ordering of the incoming keys doesn't change the\n     * digest result.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Handle find(@NonNull String name)",
    "returnType" : "Handle",
    "comment" : "\n     * Look up a property location by name.\n     * @name name of the property\n     * @return property handle or {@code null} if property isn't set\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void onKeyAccess(String key)", "public static void init$ravenwood(Map<String, String> values, Predicate<String> keyReadablePredicate, Predicate<String> keyWritablePredicate)", "public static void reset$ravenwood()", "private static native void native_init$ravenwood(Map<String, String> values, Predicate<String> keyReadablePredicate, Predicate<String> keyWritablePredicate, Runnable changeCallback)", "private static native void native_reset$ravenwood()", "private static String native_get(String key)", "private static native String native_get(String key, String def)", "private static native int native_get_int(String key, int def)", "private static native long native_get_long(String key, long def)", "private static native boolean native_get_boolean(String key, boolean def)", "private static native long native_find(String name)", "private static native String native_get(long handle)", "private static native int native_get_int(long handle, int def)", "private static native long native_get_long(long handle, long def)", "private static native boolean native_get_boolean(long handle, boolean def)", "private static native void native_set(String key, String def)", "private static native void native_add_change_callback()", "private static native void native_report_sysprop_change()", "public static String get(@NonNull String key)", "public static String get(@NonNull String key, @Nullable String def)", "public static int getInt(@NonNull String key, int def)", "public static long getLong(@NonNull String key, long def)", "public static boolean getBoolean(@NonNull String key, boolean def)", "public static void set(@NonNull String key, @Nullable String val)", "public static void addChangeCallback(@NonNull Runnable callback)", "public static void removeChangeCallback(@NonNull Runnable callback)", "private static void callChangeCallbacks()", "public static void reportSyspropChanged()", "public static String digestOf(@NonNull String... keys)", "public static Handle find(@NonNull String name)" ],
  "variableNames" : [ "TAG", "TRACK_KEY_ACCESS", "PROP_NAME_MAX", "PROP_VALUE_MAX", "sChangeCallbacks", "sRoReads" ]
}