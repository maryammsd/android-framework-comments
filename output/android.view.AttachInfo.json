{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/View.java",
  "packageName" : "android.view",
  "className" : "AttachInfo",
  "comment" : "\n     * A set of information given to a view when it is attached to its parent\n     * window.\n     ",
  "variables" : [ {
    "name" : "mSession",
    "type" : "IWindowSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindow",
    "type" : "IWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplay",
    "type" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRootCallbacks",
    "type" : "Callbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIWindowId",
    "type" : "IWindowId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowId",
    "type" : "WindowId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRootView",
    "type" : "View",
    "comment" : "\n         * The top view of the hierarchy.\n         ",
    "links" : [ ]
  }, {
    "name" : "mPanelParentWindowToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardwareAccelerated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardwareAccelerationRequested",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThreadedRenderer",
    "type" : "ThreadedRenderer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingAnimatingRenderNodes",
    "type" : "List<RenderNode>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayState",
    "type" : "int",
    "comment" : "\n         * The state of the display to which the window is attached, as reported\n         * by {@link Display#getState()}.  Note that the display state constants\n         * declared by {@link Display} do not exactly line up with the screen state\n         * constants declared by {@link View} (there are more display states than\n         * screen states).\n         ",
    "links" : [ "android.view.Display#getState()", "android.view.Display", "android.view.View" ]
  }, {
    "name" : "mApplicationScale",
    "type" : "float",
    "comment" : "\n         * Scale factor used by the compatibility mode\n         ",
    "links" : [ ]
  }, {
    "name" : "mScalingRequired",
    "type" : "boolean",
    "comment" : "\n         * Indicates whether the application is in compatibility mode\n         ",
    "links" : [ ]
  }, {
    "name" : "mWindowLeft",
    "type" : "int",
    "comment" : "\n         * Left position of this view's window\n         ",
    "links" : [ ]
  }, {
    "name" : "mWindowTop",
    "type" : "int",
    "comment" : "\n         * Top position of this view's window\n         ",
    "links" : [ ]
  }, {
    "name" : "mUse32BitDrawingCache",
    "type" : "boolean",
    "comment" : "\n         * Indicates whether views need to use 32-bit drawing caches\n         ",
    "links" : [ ]
  }, {
    "name" : "mContentInsets",
    "type" : "Rect",
    "comment" : "\n         * For windows that are full-screen but using insets to layout inside\n         * of the screen decorations, these are the current insets for the\n         * content of the window.\n         ",
    "links" : [ ]
  }, {
    "name" : "mVisibleInsets",
    "type" : "Rect",
    "comment" : "\n         * For windows that are full-screen but using insets to layout inside\n         * of the screen decorations, these are the current insets for the\n         * actual visible parts of the window.\n         ",
    "links" : [ ]
  }, {
    "name" : "mStableInsets",
    "type" : "Rect",
    "comment" : "\n         * For windows that are full-screen but using insets to layout inside\n         * of the screen decorations, these are the current insets for the\n         * stable system windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCaptionInsets",
    "type" : "Rect",
    "comment" : "\n         * Current caption insets to the display coordinate.\n         ",
    "links" : [ ]
  }, {
    "name" : "mDisplayCutout",
    "type" : "DisplayCutout.ParcelableWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlwaysConsumeSystemBars",
    "type" : "boolean",
    "comment" : "\n         * In multi-window we force show the system bars. Because we don't want that the surface\n         * size changes in this mode, we instead have a flag whether the system bars sizes should\n         * always be consumed, so the app is treated like there are no virtual system bars at all.\n         ",
    "links" : [ ]
  }, {
    "name" : "mGivenInternalInsets",
    "type" : "ViewTreeObserver.InternalInsetsInfo",
    "comment" : "\n         * The internal insets given by this window.  This value is\n         * supplied by the client (through\n         * {@link ViewTreeObserver.OnComputeInternalInsetsListener}) and will\n         * be given to the window manager when changed to be used in laying\n         * out windows behind it.\n         ",
    "links" : [ "ViewTreeObserver.OnComputeInternalInsetsListener" ]
  }, {
    "name" : "mHasNonEmptyGivenInternalInsets",
    "type" : "boolean",
    "comment" : "\n         * Set to true when mGivenInternalInsets is non-empty.\n         ",
    "links" : [ ]
  }, {
    "name" : "mScrollContainers",
    "type" : "ArrayList<View>",
    "comment" : "\n         * All views in the window's hierarchy that serve as scroll containers,\n         * used to determine if the window can be resized or must be panned\n         * to adjust for a soft input area.\n         ",
    "links" : [ ]
  }, {
    "name" : "mKeyDispatchState",
    "type" : "KeyEvent.DispatcherState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasWindowFocus",
    "type" : "boolean",
    "comment" : "\n         * Indicates whether the view's window currently has the focus.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWindowVisibility",
    "type" : "int",
    "comment" : "\n         * The current visibility of the window.\n         ",
    "links" : [ ]
  }, {
    "name" : "mDrawingTime",
    "type" : "long",
    "comment" : "\n         * Indicates the time at which drawing started to occur.\n         ",
    "links" : [ ]
  }, {
    "name" : "mInTouchMode",
    "type" : "boolean",
    "comment" : "\n         * Indicates whether the view's window is currently in touch mode.\n         ",
    "links" : [ ]
  }, {
    "name" : "mUnbufferedDispatchRequested",
    "type" : "boolean",
    "comment" : "\n         * Indicates whether the view has requested unbuffered input dispatching for the current\n         * event stream.\n         ",
    "links" : [ ]
  }, {
    "name" : "mRecomputeGlobalAttributes",
    "type" : "boolean",
    "comment" : "\n         * Indicates that ViewAncestor should trigger a global layout change\n         * the next time it performs a traversal\n         ",
    "links" : [ ]
  }, {
    "name" : "mForceReportNewAttributes",
    "type" : "boolean",
    "comment" : "\n         * Always report new attributes at next traversal.\n         ",
    "links" : [ ]
  }, {
    "name" : "mKeepScreenOn",
    "type" : "boolean",
    "comment" : "\n         * Set during a traveral if any views want to keep the screen on.\n         ",
    "links" : [ ]
  }, {
    "name" : "mNeedsUpdateLightCenter",
    "type" : "boolean",
    "comment" : "\n         * Set during a traveral if the light center needs to be updated.\n         ",
    "links" : [ ]
  }, {
    "name" : "mSystemUiVisibility",
    "type" : "int",
    "comment" : "\n         * Bitwise-or of all of the values that views have passed to setSystemUiVisibility().\n         ",
    "links" : [ ]
  }, {
    "name" : "mDisabledSystemUiVisibility",
    "type" : "int",
    "comment" : "\n         * Hack to force certain system UI visibility flags to be cleared.\n         ",
    "links" : [ ]
  }, {
    "name" : "mHasSystemUiListeners",
    "type" : "boolean",
    "comment" : "\n         * True if a view in this hierarchy has an OnSystemUiVisibilityChangeListener\n         * attached.\n         ",
    "links" : [ ]
  }, {
    "name" : "mViewVisibilityChanged",
    "type" : "boolean",
    "comment" : "\n         * Set if the visibility of any views has changed.\n         ",
    "links" : [ ]
  }, {
    "name" : "mViewScrollChanged",
    "type" : "boolean",
    "comment" : "\n         * Set to true if a view has been scrolled.\n         ",
    "links" : [ ]
  }, {
    "name" : "mHandlingPointerEvent",
    "type" : "boolean",
    "comment" : "\n         * Set to true if a pointer event is currently being handled.\n         ",
    "links" : [ ]
  }, {
    "name" : "mLocationInParentDisplay",
    "type" : "Point",
    "comment" : "\n         * The offset of this view's window when it's on an embedded display that is re-parented\n         * to another window.\n         ",
    "links" : [ ]
  }, {
    "name" : "mScreenMatrixInEmbeddedHierarchy",
    "type" : "Matrix",
    "comment" : "\n         * The screen matrix of this view when it's on a {@link SurfaceControlViewHost} that is\n         * embedded within a SurfaceView.\n         ",
    "links" : [ "android.view.SurfaceControlViewHost" ]
  }, {
    "name" : "mTransparentLocation",
    "type" : "int[]",
    "comment" : "\n         * Global to the view hierarchy used as a temporary for dealing with\n         * x/y points in the transparent region computations.\n         ",
    "links" : [ ]
  }, {
    "name" : "mInvalidateChildLocation",
    "type" : "int[]",
    "comment" : "\n         * Global to the view hierarchy used as a temporary for dealing with\n         * x/y points in the ViewGroup.invalidateChild implementation.\n         ",
    "links" : [ ]
  }, {
    "name" : "mTmpLocation",
    "type" : "int[]",
    "comment" : "\n         * Global to the view hierarchy used as a temporary for dealing with\n         * computing absolute on-screen location.\n         ",
    "links" : [ ]
  }, {
    "name" : "mTmpTransformLocation",
    "type" : "float[]",
    "comment" : "\n         * Global to the view hierarchy used as a temporary for dealing with\n         * x/y location when view is transformed.\n         ",
    "links" : [ ]
  }, {
    "name" : "mTreeObserver",
    "type" : "ViewTreeObserver",
    "comment" : "\n         * The view tree observer used to dispatch global events like\n         * layout, pre-draw, touch mode change, etc.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCanvas",
    "type" : "Canvas",
    "comment" : "\n         * A Canvas used by the view hierarchy to perform bitmap caching.\n         ",
    "links" : [ ]
  }, {
    "name" : "mViewRootImpl",
    "type" : "ViewRootImpl",
    "comment" : "\n         * The view root impl.\n         ",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "\n         * A Handler supplied by a view's {@link android.view.ViewRootImpl}. This\n         * handler can be used to pump events in the UI events queue.\n         ",
    "links" : [ "android.view.ViewRootImpl" ]
  }, {
    "name" : "mTmpInvalRect",
    "type" : "Rect",
    "comment" : "\n         * Temporary for use in computing invalidate rectangles while\n         * calling up the hierarchy.\n         ",
    "links" : [ ]
  }, {
    "name" : "mTmpTransformRect",
    "type" : "RectF",
    "comment" : "\n         * Temporary for use in computing hit areas with transformed views\n         ",
    "links" : [ ]
  }, {
    "name" : "mTmpTransformRect1",
    "type" : "RectF",
    "comment" : "\n         * Temporary for use in computing hit areas with transformed views\n         ",
    "links" : [ ]
  }, {
    "name" : "mTmpRectList",
    "type" : "List<RectF>",
    "comment" : "\n         * Temporary list of rectanges.\n         ",
    "links" : [ ]
  }, {
    "name" : "mTmpMatrix",
    "type" : "Matrix",
    "comment" : "\n         * Temporary for use in transforming invalidation rect\n         ",
    "links" : [ ]
  }, {
    "name" : "mTmpTransformation",
    "type" : "Transformation",
    "comment" : "\n         * Temporary for use in transforming invalidation rect\n         ",
    "links" : [ ]
  }, {
    "name" : "mTmpOutline",
    "type" : "Outline",
    "comment" : "\n         * Temporary for use in querying outlines from OutlineProviders\n         ",
    "links" : [ ]
  }, {
    "name" : "mTempArrayList",
    "type" : "ArrayList<View>",
    "comment" : "\n         * Temporary list for use in collecting focusable descendents of a view.\n         ",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityWindowId",
    "type" : "int",
    "comment" : "\n         * The id of the window for accessibility purposes.\n         ",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityFetchFlags",
    "type" : "int",
    "comment" : "\n         * Flags related to accessibility processing.\n         *\n         * @see AccessibilityNodeInfo#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS\n         * @see AccessibilityNodeInfo#FLAG_REPORT_VIEW_IDS\n         ",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityFocusDrawable",
    "type" : "Drawable",
    "comment" : "\n         * The drawable for highlighting accessibility focus.\n         ",
    "links" : [ ]
  }, {
    "name" : "mAutofilledDrawable",
    "type" : "Drawable",
    "comment" : "\n         * The drawable for highlighting autofilled views.\n         *\n         * @see #isAutofilled()\n         ",
    "links" : [ ]
  }, {
    "name" : "mDebugLayout",
    "type" : "boolean",
    "comment" : "\n         * Show where the margins, bounds and layout bounds are for each view.\n         ",
    "links" : [ ]
  }, {
    "name" : "mPoint",
    "type" : "Point",
    "comment" : "\n         * Point used to compute visible regions.\n         ",
    "links" : [ ]
  }, {
    "name" : "mViewRequestingLayout",
    "type" : "View",
    "comment" : "\n         * Used to track which View originated a requestLayout() call, used when\n         * requestLayout() is called during layout.\n         ",
    "links" : [ ]
  }, {
    "name" : "mDragToken",
    "type" : "IBinder",
    "comment" : "\n         * Used to track the identity of the current drag operation.\n         ",
    "links" : [ ]
  }, {
    "name" : "mDragSurface",
    "type" : "Surface",
    "comment" : "\n         * The drag shadow surface for the current drag operation.\n         ",
    "links" : [ ]
  }, {
    "name" : "mTooltipHost",
    "type" : "View",
    "comment" : "\n         * The view that currently has a tooltip displayed.\n         ",
    "links" : [ ]
  }, {
    "name" : "mReadyForContentCaptureUpdates",
    "type" : "boolean",
    "comment" : "\n         * The initial structure has been reported so the view is ready to report updates.\n         ",
    "links" : [ ]
  }, {
    "name" : "mContentCaptureEvents",
    "type" : "SparseArray<ArrayList<Object>>",
    "comment" : "\n         * Map(keyed by session) of content capture events that need to be notified after the view\n         * hierarchy is traversed: value is either the view itself for appearead events, or its\n         * autofill id for disappeared.\n         ",
    "links" : [ ]
  }, {
    "name" : "mContentCaptureManager",
    "type" : "ContentCaptureManager",
    "comment" : "\n         * Cached reference to the {@link ContentCaptureManager}.\n         ",
    "links" : [ "android.view.contentcapture.ContentCaptureManager" ]
  }, {
    "name" : "mContentOnApplyWindowInsetsListener",
    "type" : "OnContentApplyWindowInsetsListener",
    "comment" : "\n         * Listener used to fit content on window level.\n         ",
    "links" : [ ]
  }, {
    "name" : "mLeashedParentToken",
    "type" : "IBinder",
    "comment" : "\n         * The leash token of this view's parent when it's in an embedded hierarchy that is\n         * re-parented to another window.\n         ",
    "links" : [ ]
  }, {
    "name" : "mLeashedParentAccessibilityViewId",
    "type" : "int",
    "comment" : "\n         * The accessibility view id of this view's parent when it's in an embedded\n         * hierarchy that is re-parented to another window.\n         ",
    "links" : [ ]
  }, {
    "name" : "mScrollCaptureInternal",
    "type" : "ScrollCaptureInternal",
    "comment" : "\n         *\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " ContentCaptureManager getContentCaptureManager(@NonNull Context context)",
    "returnType" : "ContentCaptureManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void delayNotifyContentCaptureInsetsEvent(@NonNull Insets insets)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void delayNotifyContentCaptureEvent(@NonNull ContentCaptureSession session, @NonNull View view, boolean appeared)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ArrayList<Object> ensureEvents(@NonNull ContentCaptureSession session)",
    "returnType" : "ArrayList<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ScrollCaptureInternal getScrollCaptureInternal()",
    "returnType" : "ScrollCaptureInternal",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mSession", "mWindow", "mWindowToken", "mDisplay", "mRootCallbacks", "mIWindowId", "mWindowId", "mRootView", "mPanelParentWindowToken", "mHardwareAccelerated", "mHardwareAccelerationRequested", "mThreadedRenderer", "mPendingAnimatingRenderNodes", "mDisplayState", "mApplicationScale", "mScalingRequired", "mWindowLeft", "mWindowTop", "mUse32BitDrawingCache", "mContentInsets", "mVisibleInsets", "mStableInsets", "mCaptionInsets", "mDisplayCutout", "mAlwaysConsumeSystemBars", "mGivenInternalInsets", "mHasNonEmptyGivenInternalInsets", "mScrollContainers", "mKeyDispatchState", "mHasWindowFocus", "mWindowVisibility", "mDrawingTime", "mInTouchMode", "mUnbufferedDispatchRequested", "mRecomputeGlobalAttributes", "mForceReportNewAttributes", "mKeepScreenOn", "mNeedsUpdateLightCenter", "mSystemUiVisibility", "mDisabledSystemUiVisibility", "mHasSystemUiListeners", "mViewVisibilityChanged", "mViewScrollChanged", "mHandlingPointerEvent", "mLocationInParentDisplay", "mScreenMatrixInEmbeddedHierarchy", "mTransparentLocation", "mInvalidateChildLocation", "mTmpLocation", "mTmpTransformLocation", "mTreeObserver", "mCanvas", "mViewRootImpl", "mHandler", "mTmpInvalRect", "mTmpTransformRect", "mTmpTransformRect1", "mTmpRectList", "mTmpMatrix", "mTmpTransformation", "mTmpOutline", "mTempArrayList", "mAccessibilityWindowId", "mAccessibilityFetchFlags", "mAccessibilityFocusDrawable", "mAutofilledDrawable", "mDebugLayout", "mPoint", "mViewRequestingLayout", "mDragToken", "mDragSurface", "mTooltipHost", "mReadyForContentCaptureUpdates", "mContentCaptureEvents", "mContentCaptureManager", "mContentOnApplyWindowInsetsListener", "mLeashedParentToken", "mLeashedParentAccessibilityViewId", "mScrollCaptureInternal" ],
  "methodNames" : [ " ContentCaptureManager getContentCaptureManager(@NonNull Context context)", " void delayNotifyContentCaptureInsetsEvent(@NonNull Insets insets)", "private void delayNotifyContentCaptureEvent(@NonNull ContentCaptureSession session, @NonNull View view, boolean appeared)", "private ArrayList<Object> ensureEvents(@NonNull ContentCaptureSession session)", " ScrollCaptureInternal getScrollCaptureInternal()" ]
}