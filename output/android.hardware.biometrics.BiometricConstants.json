{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/BiometricConstants.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "BiometricConstants",
  "comment" : "\n * Interface containing all of the biometric modality agnostic constants.\n *\n * NOTE: The error messages must be consistent between BiometricConstants, Biometric*Constants,\n *       and the frameworks/support/biometric/.../BiometricConstants files.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "BIOMETRIC_SUCCESS",
    "type" : "int",
    "comment" : "\n     * This was not added here since it would update BiometricPrompt API. But, is used in\n     * BiometricManager.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_HW_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The hardware is unavailable. Try again later.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_UNABLE_TO_PROCESS",
    "type" : "int",
    "comment" : "\n     * Error state returned when the sensor was unable to process the current image.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Error state returned when the current request has been running too long. This is intended to\n     * prevent programs from waiting for the biometric sensor indefinitely. The timeout is platform\n     * and sensor-specific, but is generally on the order of 30 seconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_NO_SPACE",
    "type" : "int",
    "comment" : "\n     * Error state returned for operations like enrollment; the operation cannot be completed\n     * because there's not enough storage remaining to complete the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_CANCELED",
    "type" : "int",
    "comment" : "\n     * The operation was canceled because the biometric sensor is unavailable. For example, this may\n     * happen when the user is switched, the device is locked or another pending operation prevents\n     * or disables it.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_UNABLE_TO_REMOVE",
    "type" : "int",
    "comment" : "\n     * The {@link BiometricManager#remove} call failed. Typically this will happen when the provided\n     * biometric id was incorrect.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.biometrics.BiometricManager#remove" ]
  }, {
    "name" : "BIOMETRIC_ERROR_LOCKOUT",
    "type" : "int",
    "comment" : "\n     * The operation was canceled because the API is locked out due to too many attempts.\n     * This occurs after 5 failed attempts, and lasts for 30 seconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_VENDOR",
    "type" : "int",
    "comment" : "\n     * OEMs should use this constant if there are conditions that do not fit under any of the other\n     * publicly defined constants, and must provide appropriate strings for these\n     * errors to the {@link BiometricPrompt.AuthenticationCallback#onAuthenticationError(int,\n     * CharSequence)} callback. OEMs should expect that the error message will be shown to users.\n     ",
    "links" : [ "BiometricPrompt.AuthenticationCallback#onAuthenticationError(int" ]
  }, {
    "name" : "BIOMETRIC_ERROR_LOCKOUT_PERMANENT",
    "type" : "int",
    "comment" : "\n     * The operation was canceled because BIOMETRIC_ERROR_LOCKOUT occurred too many times.\n     * Biometric authentication is disabled until the user unlocks with strong authentication\n     * (PIN/Pattern/Password)\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_USER_CANCELED",
    "type" : "int",
    "comment" : "\n     * The user canceled the operation. Upon receiving this, applications should use alternate\n     * authentication (e.g. a password). The application should also provide the means to return to\n     * biometric authentication, such as a \"use <biometric>\" button.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_NO_BIOMETRICS",
    "type" : "int",
    "comment" : "\n     * The user does not have any biometrics enrolled.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_HW_NOT_PRESENT",
    "type" : "int",
    "comment" : "\n     * The device does not have a biometric sensor.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_NEGATIVE_BUTTON",
    "type" : "int",
    "comment" : "\n     * The user pressed the negative button. This is a placeholder that is currently only used\n     * by the support library.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL",
    "type" : "int",
    "comment" : "\n     * The device does not have pin, pattern, or password set up. See\n     * {@link BiometricPrompt.Builder#setAllowedAuthenticators(int)},\n     * {@link Authenticators#DEVICE_CREDENTIAL}, and {@link BiometricManager#canAuthenticate(int)}.\n     ",
    "links" : [ "android.hardware.biometrics.BiometricManager#canAuthenticate(int)", "BiometricPrompt.Builder#setAllowedAuthenticators(int)", "android.hardware.biometrics.BiometricManager.Authenticators#DEVICE_CREDENTIAL" ]
  }, {
    "name" : "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED",
    "type" : "int",
    "comment" : "\n     * A security vulnerability has been discovered and the sensor is unavailable until a\n     * security update has addressed this issue. This error can be received if for example,\n     * authentication was requested with {@link Authenticators#BIOMETRIC_STRONG}, but the\n     * sensor's strength can currently only meet {@link Authenticators#BIOMETRIC_WEAK}.\n     ",
    "links" : [ "android.hardware.biometrics.BiometricManager.Authenticators#BIOMETRIC_WEAK", "android.hardware.biometrics.BiometricManager.Authenticators#BIOMETRIC_STRONG" ]
  }, {
    "name" : "BIOMETRIC_ERROR_RE_ENROLL",
    "type" : "int",
    "comment" : "\n     * Authentication cannot proceed because re-enrollment is required.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_SENSOR_PRIVACY_ENABLED",
    "type" : "int",
    "comment" : "\n     * The privacy setting has been enabled and will block use of the sensor.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_POWER_PRESSED",
    "type" : "int",
    "comment" : "\n     * A power press stopped this biometric operation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_PAUSED_REJECTED",
    "type" : "int",
    "comment" : "\n     * This constant is only used by SystemUI. It notifies SystemUI that authentication was paused\n     * because the authentication attempt was unsuccessful.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_VENDOR_BASE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ACQUIRED_GOOD",
    "type" : "int",
    "comment" : "\n     * The image acquired was good.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ACQUIRED_PARTIAL",
    "type" : "int",
    "comment" : "\n     * Only a partial biometric image was detected. During enrollment, the user should be informed\n     * on what needs to happen to resolve this problem, e.g. \"press firmly on sensor.\" (for\n     * fingerprint)\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ACQUIRED_INSUFFICIENT",
    "type" : "int",
    "comment" : "\n     * The biometric image was too noisy to process due to a detected condition or a possibly dirty\n     * sensor (See {@link #BIOMETRIC_ACQUIRED_IMAGER_DIRTY}).\n     ",
    "links" : [ "#BIOMETRIC_ACQUIRED_IMAGER_DIRTY" ]
  }, {
    "name" : "BIOMETRIC_ACQUIRED_IMAGER_DIRTY",
    "type" : "int",
    "comment" : "\n     * The biometric image was too noisy due to suspected or detected dirt on the sensor.  For\n     * example, it's reasonable return this after multiple {@link #BIOMETRIC_ACQUIRED_INSUFFICIENT}\n     * or actual detection of dirt on the sensor (stuck pixels, swaths, etc.). The user is expected\n     * to take action to clean the sensor when this is returned.\n     ",
    "links" : [ "#BIOMETRIC_ACQUIRED_INSUFFICIENT" ]
  }, {
    "name" : "BIOMETRIC_ACQUIRED_TOO_SLOW",
    "type" : "int",
    "comment" : "\n     * The biometric image was unreadable due to lack of motion.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ACQUIRED_TOO_FAST",
    "type" : "int",
    "comment" : "\n     * The biometric image was incomplete due to quick motion. For example, this could also happen\n     * if the user moved during acquisition. The user should be asked to repeat the operation more\n     * slowly.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ACQUIRED_VENDOR",
    "type" : "int",
    "comment" : "\n     * Hardware vendors may extend this list if there are conditions that do not fall under one of\n     * the above categories. Vendors are responsible for providing error strings for these errors.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ACQUIRED_VENDOR_BASE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_SYSTEM_EVENT_EARLY_USER_CANCEL",
    "type" : "int",
    "comment" : "\n     * See {@link BiometricPrompt.Builder#setReceiveSystemEvents(boolean)}. This message is sent\n     * immediately when the user cancels authentication for example by tapping the back button or\n     * tapping the scrim. This is before {@link #BIOMETRIC_ERROR_USER_CANCELED}, which is sent when\n     * dismissal animation completes.\n     * @hide\n     ",
    "links" : [ "BiometricPrompt.Builder#setReceiveSystemEvents(boolean)", "#BIOMETRIC_ERROR_USER_CANCELED" ]
  }, {
    "name" : "BIOMETRIC_LOCKOUT_NONE",
    "type" : "int",
    "comment" : "\n     * No lockout.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_LOCKOUT_TIMED",
    "type" : "int",
    "comment" : "\n     * The biometric is in a temporary lockout state that will expire after some time.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_LOCKOUT_PERMANENT",
    "type" : "int",
    "comment" : "\n     * The biometric is locked out until a reset occurs. Resets are typically triggered by\n     * successfully authenticating via a stronger method than the one that is locked out.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_NO_AUTHENTICATION",
    "type" : "long",
    "comment" : "\n     * Returned from {@link BiometricManager#getLastAuthenticationTime(int)} when there has\n     * been no successful authentication for the given authenticator since boot.\n     ",
    "links" : [ "android.hardware.biometrics.BiometricManager#getLastAuthenticationTime(int)" ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "BIOMETRIC_SUCCESS", "BIOMETRIC_ERROR_HW_UNAVAILABLE", "BIOMETRIC_ERROR_UNABLE_TO_PROCESS", "BIOMETRIC_ERROR_TIMEOUT", "BIOMETRIC_ERROR_NO_SPACE", "BIOMETRIC_ERROR_CANCELED", "BIOMETRIC_ERROR_UNABLE_TO_REMOVE", "BIOMETRIC_ERROR_LOCKOUT", "BIOMETRIC_ERROR_VENDOR", "BIOMETRIC_ERROR_LOCKOUT_PERMANENT", "BIOMETRIC_ERROR_USER_CANCELED", "BIOMETRIC_ERROR_NO_BIOMETRICS", "BIOMETRIC_ERROR_HW_NOT_PRESENT", "BIOMETRIC_ERROR_NEGATIVE_BUTTON", "BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL", "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED", "BIOMETRIC_ERROR_RE_ENROLL", "BIOMETRIC_ERROR_SENSOR_PRIVACY_ENABLED", "BIOMETRIC_ERROR_POWER_PRESSED", "BIOMETRIC_PAUSED_REJECTED", "BIOMETRIC_ERROR_VENDOR_BASE", "BIOMETRIC_ACQUIRED_GOOD", "BIOMETRIC_ACQUIRED_PARTIAL", "BIOMETRIC_ACQUIRED_INSUFFICIENT", "BIOMETRIC_ACQUIRED_IMAGER_DIRTY", "BIOMETRIC_ACQUIRED_TOO_SLOW", "BIOMETRIC_ACQUIRED_TOO_FAST", "BIOMETRIC_ACQUIRED_VENDOR", "BIOMETRIC_ACQUIRED_VENDOR_BASE", "BIOMETRIC_SYSTEM_EVENT_EARLY_USER_CANCEL", "BIOMETRIC_LOCKOUT_NONE", "BIOMETRIC_LOCKOUT_TIMED", "BIOMETRIC_LOCKOUT_PERMANENT", "BIOMETRIC_NO_AUTHENTICATION" ]
}