{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/MediaController.java",
  "packageName" : "android.widget",
  "className" : "MediaController",
  "comment" : "\n * A view containing controls for a MediaPlayer. Typically contains the\n * buttons like \"Play/Pause\", \"Rewind\", \"Fast Forward\" and a progress\n * slider. It takes care of synchronizing the controls with the state\n * of the MediaPlayer.\n * <p>\n * The way to use this class is to instantiate it programmatically.\n * The MediaController will create a default set of controls\n * and put them in a window floating above your application. Specifically,\n * the controls will float above the view specified with setAnchorView().\n * The window will disappear if left idle for three seconds and reappear\n * when the user touches the anchor view.\n * <p>\n * Functions like show() and hide() have no effect when MediaController\n * is created in an xml layout.\n *\n * MediaController will hide and\n * show the buttons according to these rules:\n * <ul>\n * <li> The \"previous\" and \"next\" buttons are hidden until setPrevNextListeners()\n *   has been called\n * <li> The \"previous\" and \"next\" buttons are visible but disabled if\n *   setPrevNextListeners() was called with null listeners\n * <li> The \"rewind\" and \"fastforward\" buttons are shown unless requested\n *   otherwise by using the MediaController(Context, boolean) constructor\n *   with the boolean set to false\n * </ul>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mPlayer",
    "type" : "MediaPlayerControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchor",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoot",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowManager",
    "type" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindow",
    "type" : "Window",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDecor",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDecorLayoutParams",
    "type" : "WindowManager.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgress",
    "type" : "ProgressBar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndTime",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentTime",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDragging",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDefaultTimeout",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseFastForward",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFromXml",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenersSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextListener",
    "type" : "View.OnClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrevListener",
    "type" : "View.OnClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatBuilder",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatter",
    "type" : "Formatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPauseButton",
    "type" : "ImageButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFfwdButton",
    "type" : "ImageButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRewButton",
    "type" : "ImageButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextButton",
    "type" : "ImageButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrevButton",
    "type" : "ImageButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlayDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPauseDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityManager",
    "type" : "AccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackCallbackRegistered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackCallback",
    "type" : "OnBackInvokedCallback",
    "comment" : " Handles back invocation ",
    "links" : [ ]
  }, {
    "name" : "mAttachStateListener",
    "type" : "OnAttachStateChangeListener",
    "comment" : " Handles decor view attach state change ",
    "links" : [ ]
  }, {
    "name" : "mLayoutChangeListener",
    "type" : "OnLayoutChangeListener",
    "comment" : " This is called whenever mAnchor's layout bound changes",
    "links" : [ ]
  }, {
    "name" : "mTouchListener",
    "type" : "OnTouchListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadeOut",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowProgress",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPauseListener",
    "type" : "View.OnClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeekListener",
    "type" : "OnSeekBarChangeListener",
    "comment" : " we will simply apply the updated position without suspending regular updates.",
    "links" : [ ]
  }, {
    "name" : "mRewListener",
    "type" : "View.OnClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFfwdListener",
    "type" : "View.OnClickListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onFinishInflate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initFloatingWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initFloatingWindowLayout()",
    "returnType" : "void",
    "comment" : " (y and width) before mDecorLayoutParams can be used.",
    "links" : [ ]
  }, {
    "name" : "private void updateFloatingWindowLayout()",
    "returnType" : "void",
    "comment" : " Must be called with mAnchor != NULL.",
    "links" : [ ]
  }, {
    "name" : "public void setMediaPlayer(MediaPlayerControl player)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAnchorView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Set the view that acts as the anchor for the control view.\n     * This can for example be a VideoView, or your Activity's main view.\n     * When VideoView calls this method, it will use the VideoView's parent\n     * as the anchor.\n     * @param view The view to which to anchor the controller when it is visible.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected View makeControllerView()",
    "returnType" : "View",
    "comment" : "\n     * Create the view that holds the widgets that control playback.\n     * Derived classes can override this to create their own.\n     * @return The controller view.\n     * @hide This doesn't work as advertised\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initControllerView(View v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void show()",
    "returnType" : "void",
    "comment" : "\n     * Show the controller on screen. It will go away\n     * automatically after 3 seconds of inactivity.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void disableUnsupportedButtons()",
    "returnType" : "void",
    "comment" : "\n     * Disable pause or seek buttons if the stream cannot be paused or seeked.\n     * This requires the control interface to be a MediaPlayerControlExt\n     ",
    "links" : [ ]
  }, {
    "name" : "public void show(int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Show the controller on screen. It will go away\n     * automatically after 'timeout' milliseconds of inactivity.\n     * @param timeout The timeout in milliseconds. Use 0 to show\n     * the controller until hide() is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isShowing()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void hide()",
    "returnType" : "void",
    "comment" : "\n     * Remove the controller from the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String stringForTime(int timeMs)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int setProgress()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTrackballEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updatePausePlay()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doPauseResume()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void installPrevNextListeners()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPrevNextListeners(View.OnClickListener next, View.OnClickListener prev)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unregisterOnBackInvokedCallback()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void registerOnBackInvokedCallback()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onFinishInflate()", "private void initFloatingWindow()", "private void initFloatingWindowLayout()", "private void updateFloatingWindowLayout()", "public void setMediaPlayer(MediaPlayerControl player)", "public void setAnchorView(View view)", "protected View makeControllerView()", "private void initControllerView(View v)", "public void show()", "private void disableUnsupportedButtons()", "public void show(int timeout)", "public boolean isShowing()", "public void hide()", "private String stringForTime(int timeMs)", "private int setProgress()", "public boolean onTouchEvent(MotionEvent event)", "public boolean onTrackballEvent(MotionEvent ev)", "public boolean dispatchKeyEvent(KeyEvent event)", "private void updatePausePlay()", "private void doPauseResume()", "public void setEnabled(boolean enabled)", "public CharSequence getAccessibilityClassName()", "private void installPrevNextListeners()", "public void setPrevNextListeners(View.OnClickListener next, View.OnClickListener prev)", "private void unregisterOnBackInvokedCallback()", "private void registerOnBackInvokedCallback()" ],
  "variableNames" : [ "mPlayer", "mContext", "mAnchor", "mRoot", "mWindowManager", "mWindow", "mDecor", "mDecorLayoutParams", "mProgress", "mEndTime", "mCurrentTime", "mShowing", "mDragging", "sDefaultTimeout", "mUseFastForward", "mFromXml", "mListenersSet", "mNextListener", "mPrevListener", "mFormatBuilder", "mFormatter", "mPauseButton", "mFfwdButton", "mRewButton", "mNextButton", "mPrevButton", "mPlayDescription", "mPauseDescription", "mAccessibilityManager", "mBackCallbackRegistered", "mBackCallback", "mAttachStateListener", "mLayoutChangeListener", "mTouchListener", "mFadeOut", "mShowProgress", "mPauseListener", "mSeekListener", "mRewListener", "mFfwdListener" ]
}