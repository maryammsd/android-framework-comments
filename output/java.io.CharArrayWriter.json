{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/CharArrayWriter.java",
  "packageName" : "java.io",
  "className" : "CharArrayWriter",
  "comment" : "\n * This class implements a character buffer that can be used as an Writer.\n * The buffer automatically grows when data is written to the stream.  The data\n * can be retrieved using toCharArray() and toString().\n * <P>\n * Note: Invoking close() on this class has no effect, and methods\n * of this class can be called after the stream has closed\n * without generating an IOException.\n *\n * @author      Herb Jellinek\n * @since       1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "buf",
    "type" : "char[]",
    "comment" : "\n     * The buffer where data is stored.\n     ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "\n     * The number of chars in the buffer.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void write(int c)",
    "returnType" : "void",
    "comment" : "\n     * Writes a character to the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(char[] c, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Writes characters to the buffer.\n     * @param c the data to be written\n     * @param off       the start offset in the data\n     * @param len       the number of chars that are written\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code off} is negative, or {@code len} is negative,\n     *          or {@code off + len} is negative or greater than the length\n     *          of the given array\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(String str, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Write a portion of a string to the buffer.\n     * @param  str  String to be written from\n     * @param  off  Offset from which to start reading characters\n     * @param  len  Number of characters to be written\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code off} is negative, or {@code len} is negative,\n     *          or {@code off + len} is negative or greater than the length\n     *          of the given string\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeTo(Writer out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the contents of the buffer to another character stream.\n     *\n     * @param out       the output stream to write to\n     * @throws IOException If an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharArrayWriter append(CharSequence csq)",
    "returnType" : "CharArrayWriter",
    "comment" : "\n     * Appends the specified character sequence to this writer.\n     *\n     * <p> An invocation of this method of the form {@code out.append(csq)}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>\n     *     out.write(csq.toString()) </pre>\n     *\n     * <p> Depending on the specification of {@code toString} for the\n     * character sequence {@code csq}, the entire sequence may not be\n     * appended. For instance, invoking the {@code toString} method of a\n     * character buffer will return a subsequence whose content depends upon\n     * the buffer's position and limit.\n     *\n     * @param  csq\n     *         The character sequence to append.  If {@code csq} is\n     *         {@code null}, then the four characters {@code \"null\"} are\n     *         appended to this writer.\n     *\n     * @return  This writer\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharArrayWriter append(CharSequence csq, int start, int end)",
    "returnType" : "CharArrayWriter",
    "comment" : "\n     * Appends a subsequence of the specified character sequence to this writer.\n     *\n     * <p> An invocation of this method of the form\n     * {@code out.append(csq, start, end)} when\n     * {@code csq} is not {@code null}, behaves in\n     * exactly the same way as the invocation\n     *\n     * <pre>\n     *     out.write(csq.subSequence(start, end).toString()) </pre>\n     *\n     * @param  csq\n     *         The character sequence from which a subsequence will be\n     *         appended.  If {@code csq} is {@code null}, then characters\n     *         will be appended as if {@code csq} contained the four\n     *         characters {@code \"null\"}.\n     *\n     * @param  start\n     *         The index of the first character in the subsequence\n     *\n     * @param  end\n     *         The index of the character following the last character in the\n     *         subsequence\n     *\n     * @return  This writer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code start} or {@code end} are negative, {@code start}\n     *          is greater than {@code end}, or {@code end} is greater than\n     *          {@code csq.length()}\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharArrayWriter append(char c)",
    "returnType" : "CharArrayWriter",
    "comment" : "\n     * Appends the specified character to this writer.\n     *\n     * <p> An invocation of this method of the form {@code out.append(c)}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>\n     *     out.write(c) </pre>\n     *\n     * @param  c\n     *         The 16-bit character to append\n     *\n     * @return  This writer\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the buffer so that you can use it again without\n     * throwing away the already allocated buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char[] toCharArray()",
    "returnType" : "char[]",
    "comment" : "\n     * Returns a copy of the input data.\n     *\n     * @return an array of chars copied from the input data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current size of the buffer.\n     *\n     * @return an int representing the current size of the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Converts input data to a string.\n     * @return the string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush()",
    "returnType" : "void",
    "comment" : "\n     * Flush the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the stream.  This method does not release the buffer, since its\n     * contents might still be required. Note: Invoking this method in this class\n     * will have no effect.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void write(int c)", "public void write(char[] c, int off, int len)", "public void write(String str, int off, int len)", "public void writeTo(Writer out) throws IOException", "public CharArrayWriter append(CharSequence csq)", "public CharArrayWriter append(CharSequence csq, int start, int end)", "public CharArrayWriter append(char c)", "public void reset()", "public char[] toCharArray()", "public int size()", "public String toString()", "public void flush()", "public void close()" ],
  "variableNames" : [ "buf", "count" ]
}