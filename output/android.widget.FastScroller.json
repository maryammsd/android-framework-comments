{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/FastScroller.java",
  "packageName" : "android.widget",
  "className" : "FastScroller",
  "comment" : "\n * Helper class for AbsListView to draw and control the Fast Scroll thumb\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DURATION_FADE_OUT",
    "type" : "int",
    "comment" : " Duration of fade-out animation. ",
    "links" : [ ]
  }, {
    "name" : "DURATION_FADE_IN",
    "type" : "int",
    "comment" : " Duration of fade-in animation. ",
    "links" : [ ]
  }, {
    "name" : "DURATION_CROSS_FADE",
    "type" : "int",
    "comment" : " Duration of transition cross-fade animation. ",
    "links" : [ ]
  }, {
    "name" : "DURATION_RESIZE",
    "type" : "int",
    "comment" : " Duration of transition resize animation. ",
    "links" : [ ]
  }, {
    "name" : "FADE_TIMEOUT",
    "type" : "long",
    "comment" : " Inactivity timeout before fading controls. ",
    "links" : [ ]
  }, {
    "name" : "MIN_PAGES",
    "type" : "int",
    "comment" : " Minimum number of pages to justify showing a fast scroll thumb. ",
    "links" : [ ]
  }, {
    "name" : "STATE_NONE",
    "type" : "int",
    "comment" : " Scroll thumb and preview not showing. ",
    "links" : [ ]
  }, {
    "name" : "STATE_VISIBLE",
    "type" : "int",
    "comment" : " Scroll thumb visible and moving along with the scrollbar. ",
    "links" : [ ]
  }, {
    "name" : "STATE_DRAGGING",
    "type" : "int",
    "comment" : " Scroll thumb and preview being dragged by user. ",
    "links" : [ ]
  }, {
    "name" : "OVERLAY_FLOATING",
    "type" : "int",
    "comment" : " Positions for preview image and text.",
    "links" : [ ]
  }, {
    "name" : "OVERLAY_AT_THUMB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OVERLAY_ABOVE_THUMB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THUMB_POSITION_MIDPOINT",
    "type" : "int",
    "comment" : " Positions for thumb in relation to track.",
    "links" : [ ]
  }, {
    "name" : "THUMB_POSITION_INSIDE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREVIEW_LEFT",
    "type" : "int",
    "comment" : " Indices for mPreviewResId.",
    "links" : [ ]
  }, {
    "name" : "PREVIEW_RIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAP_TIMEOUT",
    "type" : "long",
    "comment" : " Delay before considering a tap in the thumb area to be a drag. ",
    "links" : [ ]
  }, {
    "name" : "mTempBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempMargins",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContainerRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mList",
    "type" : "AbsListView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlay",
    "type" : "ViewGroupOverlay",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimaryText",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondaryText",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbImage",
    "type" : "ImageView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrackImage",
    "type" : "ImageView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewImage",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewResId",
    "type" : "int[]",
    "comment" : "\n     * Preview image resource IDs for left- and right-aligned layouts. See\n     * {@link #PREVIEW_LEFT} and {@link #PREVIEW_RIGHT}.\n     ",
    "links" : [ "#PREVIEW_RIGHT", "#PREVIEW_LEFT" ]
  }, {
    "name" : "mMinimumTouchTarget",
    "type" : "int",
    "comment" : " The minimum touch target size in pixels. ",
    "links" : [ ]
  }, {
    "name" : "mPreviewPadding",
    "type" : "int",
    "comment" : "\n     * Padding in pixels around the preview text. Applied as layout margins to\n     * the preview text and padding to the preview image.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPreviewMinWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewMinHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbMinWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbMinHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextSize",
    "type" : "float",
    "comment" : " Theme-specified text size. Used only if text appearance is not set. ",
    "links" : [ ]
  }, {
    "name" : "mTextColor",
    "type" : "ColorStateList",
    "comment" : " Theme-specified text color. Used only if text appearance is not set. ",
    "links" : [ ]
  }, {
    "name" : "mThumbDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrackDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextAppearance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbPosition",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbOffset",
    "type" : "float",
    "comment" : " Used to convert between y-coordinate and thumb position within track.",
    "links" : [ ]
  }, {
    "name" : "mThumbRange",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : " Total width of decorations. ",
    "links" : [ ]
  }, {
    "name" : "mDecorAnimation",
    "type" : "AnimatorSet",
    "comment" : " Set containing decoration transition animations. ",
    "links" : [ ]
  }, {
    "name" : "mPreviewAnimation",
    "type" : "AnimatorSet",
    "comment" : " Set containing preview text transition animations. ",
    "links" : [ ]
  }, {
    "name" : "mShowingPrimary",
    "type" : "boolean",
    "comment" : " Whether the primary text is showing. ",
    "links" : [ ]
  }, {
    "name" : "mScrollCompleted",
    "type" : "boolean",
    "comment" : " Whether we're waiting for completion of scrollTo(). ",
    "links" : [ ]
  }, {
    "name" : "mFirstVisibleItem",
    "type" : "int",
    "comment" : " The position of the first visible item in the list. ",
    "links" : [ ]
  }, {
    "name" : "mHeaderCount",
    "type" : "int",
    "comment" : " The number of headers at the top of the view. ",
    "links" : [ ]
  }, {
    "name" : "mCurrentSection",
    "type" : "int",
    "comment" : " The index of the current section. ",
    "links" : [ ]
  }, {
    "name" : "mScrollbarPosition",
    "type" : "int",
    "comment" : " The current scrollbar position. ",
    "links" : [ ]
  }, {
    "name" : "mLongList",
    "type" : "boolean",
    "comment" : " Whether the list is long enough to need a fast scroller. ",
    "links" : [ ]
  }, {
    "name" : "mSections",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdatingLayout",
    "type" : "boolean",
    "comment" : " Whether this view is currently performing layout. ",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "\n     * Current decoration state, one of:\n     * <ul>\n     * <li>{@link #STATE_NONE}, nothing visible\n     * <li>{@link #STATE_VISIBLE}, showing track and thumb\n     * <li>{@link #STATE_DRAGGING}, visible and showing preview\n     * </ul>\n     ",
    "links" : [ "#STATE_VISIBLE", "#STATE_DRAGGING", "#STATE_NONE" ]
  }, {
    "name" : "mShowingPreview",
    "type" : "boolean",
    "comment" : " Whether the preview image is visible. ",
    "links" : [ ]
  }, {
    "name" : "mListAdapter",
    "type" : "Adapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSectionIndexer",
    "type" : "SectionIndexer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayoutFromRight",
    "type" : "boolean",
    "comment" : " Whether decorations should be laid out from right to left. ",
    "links" : [ ]
  }, {
    "name" : "mEnabled",
    "type" : "boolean",
    "comment" : " Whether the fast scroller is enabled. ",
    "links" : [ ]
  }, {
    "name" : "mAlwaysShow",
    "type" : "boolean",
    "comment" : " Whether the scrollbar and decorations should always be shown. ",
    "links" : [ ]
  }, {
    "name" : "mOverlayPosition",
    "type" : "int",
    "comment" : "\n     * Position for the preview image and text. One of:\n     * <ul>\n     * <li>{@link #OVERLAY_FLOATING}\n     * <li>{@link #OVERLAY_AT_THUMB}\n     * <li>{@link #OVERLAY_ABOVE_THUMB}\n     * </ul>\n     ",
    "links" : [ "#OVERLAY_ABOVE_THUMB", "#OVERLAY_FLOATING", "#OVERLAY_AT_THUMB" ]
  }, {
    "name" : "mScrollBarStyle",
    "type" : "int",
    "comment" : " Current scrollbar style, including inset and overlay properties. ",
    "links" : [ ]
  }, {
    "name" : "mMatchDragPosition",
    "type" : "boolean",
    "comment" : " Whether to precisely match the thumb position to the list. ",
    "links" : [ ]
  }, {
    "name" : "mInitialTouchY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingDrag",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScaledTouchSlop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOldItemCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOldChildCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeferHide",
    "type" : "Runnable",
    "comment" : "\n     * Used to delay hiding fast scroll decorations.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSwitchPrimaryListener",
    "type" : "AnimatorListener",
    "comment" : "\n     * Used to effect a transition from primary to secondary text.\n     ",
    "links" : [ ]
  }, {
    "name" : "LEFT",
    "type" : "Property<View, Integer>",
    "comment" : "\n     * A Property wrapper around the <code>left</code> functionality handled by the\n     * {@link View#setLeft(int)} and {@link View#getLeft()} methods.\n     ",
    "links" : [ "android.view.View#setLeft(int)", "android.view.View#getLeft()" ]
  }, {
    "name" : "TOP",
    "type" : "Property<View, Integer>",
    "comment" : "\n     * A Property wrapper around the <code>top</code> functionality handled by the\n     * {@link View#setTop(int)} and {@link View#getTop()} methods.\n     ",
    "links" : [ "android.view.View#setTop(int)", "android.view.View#getTop()" ]
  }, {
    "name" : "RIGHT",
    "type" : "Property<View, Integer>",
    "comment" : "\n     * A Property wrapper around the <code>right</code> functionality handled by the\n     * {@link View#setRight(int)} and {@link View#getRight()} methods.\n     ",
    "links" : [ "android.view.View#setRight(int)", "android.view.View#getRight()" ]
  }, {
    "name" : "BOTTOM",
    "type" : "Property<View, Integer>",
    "comment" : "\n     * A Property wrapper around the <code>bottom</code> functionality handled by the\n     * {@link View#setBottom(int)} and {@link View#getBottom()} methods.\n     ",
    "links" : [ "android.view.View#setBottom(int)", "android.view.View#getBottom()" ]
  } ],
  "methods" : [ {
    "name" : "private void updateAppearance()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStyle(@StyleRes int resId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void remove()",
    "returnType" : "void",
    "comment" : "\n     * Removes this FastScroller overlay from the host view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * @param enabled Whether the fast scroll thumb is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the fast scroll thumb is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlwaysShow(boolean alwaysShow)",
    "returnType" : "void",
    "comment" : "\n     * @param alwaysShow Whether the fast scroll thumb should always be shown\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAlwaysShowEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the fast scroll thumb will always be shown\n     * @see #setAlwaysShow(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onStateDependencyChanged(boolean peekIfEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Called when one of the variables affecting enabled state changes.\n     *\n     * @param peekIfEnabled whether the thumb should peek, if enabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollBarStyle(int style)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Immediately transitions the fast scroller decorations to a hidden state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollbarPosition(int position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onItemCountChanged(int childCount, int itemCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLongList(int childCount, int itemCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private TextView createPreviewTextView(Context context)",
    "returnType" : "TextView",
    "comment" : "\n     * Creates a view into which preview text can be placed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateLayout()",
    "returnType" : "void",
    "comment" : "\n     * Measures and layouts the scrollbar and decorations.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyLayout(View view, Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Layouts a view within the specified bounds and pins the pivot point to\n     * the appropriate edge.\n     *\n     * @param view The view to layout.\n     * @param bounds Bounds at which to layout the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void measurePreview(View v, Rect out)",
    "returnType" : "void",
    "comment" : "\n     * Measures the preview text bounds, taking preview image padding into\n     * account. This method should only be called after {@link #layoutThumb()}\n     * and {@link #layoutTrack()} have both been called at least once.\n     *\n     * @param v The preview text view to measure.\n     * @param out Rectangle into which measured bounds are placed.\n     ",
    "links" : [ "#layoutThumb()", "#layoutTrack()" ]
  }, {
    "name" : "private void measureViewToSide(View view, View adjacent, Rect margins, Rect out)",
    "returnType" : "void",
    "comment" : "\n     * Measures the bounds for a view that should be laid out against the edge\n     * of an adjacent view. If no adjacent view is provided, lays out against\n     * the list edge.\n     *\n     * @param view The view to measure for layout.\n     * @param adjacent (Optional) The adjacent view, may be null to align to the\n     *            list edge.\n     * @param margins Layout margins to apply to the view.\n     * @param out Rectangle into which measured bounds are placed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void measureFloating(View preview, Rect margins, Rect out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateContainerRect()",
    "returnType" : "void",
    "comment" : "\n     * Updates the container rectangle used for layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void layoutThumb()",
    "returnType" : "void",
    "comment" : "\n     * Lays out the thumb according to the current scrollbar position.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void layoutTrack()",
    "returnType" : "void",
    "comment" : "\n     * Lays out the track centered on the thumb. Must be called after\n     * {@link #layoutThumb}.\n     ",
    "links" : [ "#layoutThumb" ]
  }, {
    "name" : "private void updateOffsetAndRange()",
    "returnType" : "void",
    "comment" : "\n     * Updates the offset and range used to convert from absolute y-position to\n     * thumb position within the track.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setState(int state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void refreshDrawablePressedState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void transitionToHidden()",
    "returnType" : "void",
    "comment" : "\n     * Shows nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void transitionToVisible()",
    "returnType" : "void",
    "comment" : "\n     * Shows the thumb and track.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void transitionToDragging()",
    "returnType" : "void",
    "comment" : "\n     * Shows the thumb, preview, and track.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void postAutoHide()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onScroll(int firstVisibleItem, int visibleItemCount, int totalItemCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getSectionsFromIndexer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSectionsChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scrollTo(float position)",
    "returnType" : "void",
    "comment" : "\n     * Scrolls to a specific position within the section\n     * @param position\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean transitionPreviewLayout(int sectionIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * Transitions the preview text to a new section. Handles animation,\n     * measurement, and layout. If the new preview text is empty, returns false.\n     *\n     * @param sectionIndex The section index to which the preview should\n     *            transition.\n     * @return False if the new preview text is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setThumbPos(float position)",
    "returnType" : "void",
    "comment" : "\n     * Positions the thumb and preview widgets.\n     *\n     * @param position The position, between 0 and 1, along the track at which\n     *            to place the thumb.\n     ",
    "links" : [ ]
  }, {
    "name" : "private float getPosFromMotionEvent(float y)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getPosFromItemCount(int firstVisibleItem, int visibleItemCount, int totalItemCount)",
    "returnType" : "float",
    "comment" : "\n     * Calculates the thumb position based on the visible items.\n     *\n     * @param firstVisibleItem First visible item, >= 0.\n     * @param visibleItemCount Number of visible items, >= 0.\n     * @param totalItemCount Total number of items, >= 0.\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "private void cancelFling()",
    "returnType" : "void",
    "comment" : "\n     * Cancels an ongoing fling event by injecting a\n     * {@link MotionEvent#ACTION_CANCEL} into the host view.\n     ",
    "links" : [ "android.view.MotionEvent#ACTION_CANCEL" ]
  }, {
    "name" : "private void cancelPendingDrag()",
    "returnType" : "void",
    "comment" : "\n     * Cancels a pending drag.\n     *\n     * @see #startPendingDrag()\n     ",
    "links" : [ ]
  }, {
    "name" : "private void startPendingDrag()",
    "returnType" : "void",
    "comment" : "\n     * Delays dragging until after the framework has determined that the user is\n     * scrolling, rather than tapping.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void beginDrag()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onInterceptTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onInterceptHoverEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)",
    "returnType" : "PointerIcon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent me)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isPointInside(float x, float y)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a coordinate is inside the scroller's activation area. If\n     * there is a track image, touching anywhere within the thumb-width of the\n     * track activates scrolling. Otherwise, the user has to touch inside thumb\n     * itself.\n     *\n     * @param x The x-coordinate.\n     * @param y The y-coordinate.\n     * @return Whether the coordinate is inside the scroller's activation area.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isPointInsideX(float x)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isPointInsideY(float y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Animator groupAnimatorOfFloat(Property<View, Float> property, float value, View... views)",
    "returnType" : "Animator",
    "comment" : "\n     * Constructs an animator for the specified property on a group of views.\n     * See {@link ObjectAnimator#ofFloat(Object, String, float...)} for\n     * implementation details.\n     *\n     * @param property The property being animated.\n     * @param value The value to which that property should animate.\n     * @param views The target views to animate.\n     * @return An animator for all the specified views.\n     ",
    "links" : [ "android.animation.ObjectAnimator#ofFloat(Object" ]
  }, {
    "name" : "private static Animator animateScaleX(View v, float target)",
    "returnType" : "Animator",
    "comment" : "\n     * Returns an animator for the view's scaleX value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Animator animateAlpha(View v, float alpha)",
    "returnType" : "Animator",
    "comment" : "\n     * Returns an animator for the view's alpha value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Animator animateBounds(View v, Rect bounds)",
    "returnType" : "Animator",
    "comment" : "\n     * Returns an animator for the view's bounds.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void updateAppearance()", "public void setStyle(@StyleRes int resId)", "public void remove()", "public void setEnabled(boolean enabled)", "public boolean isEnabled()", "public void setAlwaysShow(boolean alwaysShow)", "public boolean isAlwaysShowEnabled()", "private void onStateDependencyChanged(boolean peekIfEnabled)", "public void setScrollBarStyle(int style)", "public void stop()", "public void setScrollbarPosition(int position)", "public int getWidth()", "public void onSizeChanged(int w, int h, int oldw, int oldh)", "public void onItemCountChanged(int childCount, int itemCount)", "private void updateLongList(int childCount, int itemCount)", "private TextView createPreviewTextView(Context context)", "public void updateLayout()", "private void applyLayout(View view, Rect bounds)", "private void measurePreview(View v, Rect out)", "private void measureViewToSide(View view, View adjacent, Rect margins, Rect out)", "private void measureFloating(View preview, Rect margins, Rect out)", "private void updateContainerRect()", "private void layoutThumb()", "private void layoutTrack()", "private void updateOffsetAndRange()", "private void setState(int state)", "private void refreshDrawablePressedState()", "private void transitionToHidden()", "private void transitionToVisible()", "private void transitionToDragging()", "private void postAutoHide()", "public void onScroll(int firstVisibleItem, int visibleItemCount, int totalItemCount)", "private void getSectionsFromIndexer()", "public void onSectionsChanged()", "private void scrollTo(float position)", "private boolean transitionPreviewLayout(int sectionIndex)", "private void setThumbPos(float position)", "private float getPosFromMotionEvent(float y)", "private float getPosFromItemCount(int firstVisibleItem, int visibleItemCount, int totalItemCount)", "private void cancelFling()", "private void cancelPendingDrag()", "private void startPendingDrag()", "private void beginDrag()", "public boolean onInterceptTouchEvent(MotionEvent ev)", "public boolean onInterceptHoverEvent(MotionEvent ev)", "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)", "public boolean onTouchEvent(MotionEvent me)", "private boolean isPointInside(float x, float y)", "private boolean isPointInsideX(float x)", "private boolean isPointInsideY(float y)", "private static Animator groupAnimatorOfFloat(Property<View, Float> property, float value, View... views)", "private static Animator animateScaleX(View v, float target)", "private static Animator animateAlpha(View v, float alpha)", "private static Animator animateBounds(View v, Rect bounds)" ],
  "variableNames" : [ "DURATION_FADE_OUT", "DURATION_FADE_IN", "DURATION_CROSS_FADE", "DURATION_RESIZE", "FADE_TIMEOUT", "MIN_PAGES", "STATE_NONE", "STATE_VISIBLE", "STATE_DRAGGING", "OVERLAY_FLOATING", "OVERLAY_AT_THUMB", "OVERLAY_ABOVE_THUMB", "THUMB_POSITION_MIDPOINT", "THUMB_POSITION_INSIDE", "PREVIEW_LEFT", "PREVIEW_RIGHT", "TAP_TIMEOUT", "mTempBounds", "mTempMargins", "mContainerRect", "mList", "mOverlay", "mPrimaryText", "mSecondaryText", "mThumbImage", "mTrackImage", "mPreviewImage", "mPreviewResId", "mMinimumTouchTarget", "mPreviewPadding", "mPreviewMinWidth", "mPreviewMinHeight", "mThumbMinWidth", "mThumbMinHeight", "mTextSize", "mTextColor", "mThumbDrawable", "mTrackDrawable", "mTextAppearance", "mThumbPosition", "mThumbOffset", "mThumbRange", "mWidth", "mDecorAnimation", "mPreviewAnimation", "mShowingPrimary", "mScrollCompleted", "mFirstVisibleItem", "mHeaderCount", "mCurrentSection", "mScrollbarPosition", "mLongList", "mSections", "mUpdatingLayout", "mState", "mShowingPreview", "mListAdapter", "mSectionIndexer", "mLayoutFromRight", "mEnabled", "mAlwaysShow", "mOverlayPosition", "mScrollBarStyle", "mMatchDragPosition", "mInitialTouchY", "mPendingDrag", "mScaledTouchSlop", "mOldItemCount", "mOldChildCount", "mDeferHide", "mSwitchPrimaryListener", "LEFT", "TOP", "RIGHT", "BOTTOM" ]
}