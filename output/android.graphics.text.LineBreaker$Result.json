{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/text/LineBreaker.java",
  "packageName" : "android.graphics.text",
  "className" : "Result",
  "comment" : "\n     * Holds the result of the {@link LineBreaker#computeLineBreaks line breaking algorithm}.\n     * @see LineBreaker#computeLineBreaks\n     ",
  "links" : [ "android.graphics.text.LineBreaker#computeLineBreaks" ],
  "variables" : [ {
    "name" : "TAB_MASK",
    "type" : "int",
    "comment" : " TODO(nona): Remove these constants by introducing native methods.",
    "links" : [ ]
  }, {
    "name" : "HYPHEN_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "START_HYPHEN_MASK",
    "type" : "int",
    "comment" : " 0b11000",
    "links" : [ ]
  }, {
    "name" : "END_HYPHEN_MASK",
    "type" : "int",
    "comment" : " 0b00111",
    "links" : [ ]
  }, {
    "name" : "START_HYPHEN_BITS_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getLineCount()",
    "returnType" : "int",
    "comment" : "\n         * Returns the number of lines in the paragraph.\n         *\n         * @return number of lines\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getLineBreakOffset(@IntRange(from = 0) int lineIndex)",
    "returnType" : "int",
    "comment" : "\n         * Returns character offset of the break for a given line.\n         *\n         * @param lineIndex an index of the line.\n         * @return the break offset.\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getLineWidth(@IntRange(from = 0) int lineIndex)",
    "returnType" : "float",
    "comment" : "\n         * Returns width of a given line in pixels.\n         *\n         * @param lineIndex an index of the line.\n         * @return width of the line in pixels\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getLineAscent(@IntRange(from = 0) int lineIndex)",
    "returnType" : "float",
    "comment" : "\n         * Returns font ascent of the line in pixels.\n         *\n         * @param lineIndex an index of the line.\n         * @return an entier font ascent of the line in pixels.\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getLineDescent(@IntRange(from = 0) int lineIndex)",
    "returnType" : "float",
    "comment" : "\n         * Returns font descent of the line in pixels.\n         *\n         * @param lineIndex an index of the line.\n         * @return an entier font descent of the line in pixels.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasLineTab(int lineIndex)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the line has a TAB character.\n         *\n         * @param lineIndex an index of the line.\n         * @return true if the line has a TAB character\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getStartLineHyphenEdit(int lineIndex)",
    "returnType" : "int",
    "comment" : "\n         * Returns a start hyphen edit for the line.\n         *\n         * @param lineIndex an index of the line.\n         * @return a start hyphen edit for the line.\n         *\n         * @see android.graphics.Paint#setStartHyphenEdit\n         * @see android.graphics.Paint#getStartHyphenEdit\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getEndLineHyphenEdit(int lineIndex)",
    "returnType" : "int",
    "comment" : "\n         * Returns an end hyphen edit for the line.\n         *\n         * @param lineIndex an index of the line.\n         * @return an end hyphen edit for the line.\n         *\n         * @see android.graphics.Paint#setEndHyphenEdit\n         * @see android.graphics.Paint#getEndHyphenEdit\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getLineCount()", "public int getLineBreakOffset(@IntRange(from = 0) int lineIndex)", "public float getLineWidth(@IntRange(from = 0) int lineIndex)", "public float getLineAscent(@IntRange(from = 0) int lineIndex)", "public float getLineDescent(@IntRange(from = 0) int lineIndex)", "public boolean hasLineTab(int lineIndex)", "public int getStartLineHyphenEdit(int lineIndex)", "public int getEndLineHyphenEdit(int lineIndex)" ],
  "variableNames" : [ "TAB_MASK", "HYPHEN_MASK", "START_HYPHEN_MASK", "END_HYPHEN_MASK", "START_HYPHEN_BITS_SHIFT", "sRegistry", "mPtr" ]
}