{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore/KeyProperties.java",
  "packageName" : "android.security.keystore",
  "className" : "KeyProperties",
  "comment" : "\n * Properties of <a href=\"{@docRoot}training/articles/keystore.html\">Android Keystore</a> keys.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "AUTH_DEVICE_CREDENTIAL",
    "type" : "int",
    "comment" : "\n     * The non-biometric credential used to secure the device (i.e., PIN, pattern, or password)\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTH_BIOMETRIC_STRONG",
    "type" : "int",
    "comment" : "\n     * Any biometric (e.g. fingerprint, iris, or face) on the device that meets or exceeds the\n     * requirements for <strong>Strong</strong>, as defined by the Android CDD.\n     ",
    "links" : [ ]
  }, {
    "name" : "PURPOSE_ENCRYPT",
    "type" : "int",
    "comment" : "\n     * Purpose of key: encryption.\n     ",
    "links" : [ ]
  }, {
    "name" : "PURPOSE_DECRYPT",
    "type" : "int",
    "comment" : "\n     * Purpose of key: decryption.\n     ",
    "links" : [ ]
  }, {
    "name" : "PURPOSE_SIGN",
    "type" : "int",
    "comment" : "\n     * Purpose of key: signing or generating a Message Authentication Code (MAC).\n     ",
    "links" : [ ]
  }, {
    "name" : "PURPOSE_VERIFY",
    "type" : "int",
    "comment" : "\n     * Purpose of key: signature or Message Authentication Code (MAC) verification.\n     ",
    "links" : [ ]
  }, {
    "name" : "PURPOSE_WRAP_KEY",
    "type" : "int",
    "comment" : "\n     * Purpose of key: wrapping and unwrapping wrapped keys for secure import.\n     ",
    "links" : [ ]
  }, {
    "name" : "PURPOSE_AGREE_KEY",
    "type" : "int",
    "comment" : "\n     * Purpose of key: creating a shared ECDH secret through key agreement.\n     *\n     * <p>A key having this purpose can be combined with the elliptic curve public key of another\n     * party to establish a shared secret over an insecure channel. It should be used  as a\n     * parameter to {@link javax.crypto.KeyAgreement#init(java.security.Key)} (a complete example is\n     * available <a\n     * href=\"{@docRoot}reference/android/security/keystore/KeyGenParameterSpec#example:ecdh\"\n     * >here</a>).\n     * See <a href=\"https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\">this\n     * article</a> for a more detailed explanation.\n     ",
    "links" : [ "javax.crypto.KeyAgreement#init(java.security.Key)" ]
  }, {
    "name" : "PURPOSE_ATTEST_KEY",
    "type" : "int",
    "comment" : "\n     * Purpose of key: Signing attestaions. This purpose is incompatible with all others, meaning\n     * that when generating a key with PURPOSE_ATTEST_KEY, no other purposes may be specified. In\n     * addition, PURPOSE_ATTEST_KEY may not be specified for imported keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALGORITHM_RSA",
    "type" : "String",
    "comment" : " Rivest Shamir Adleman (RSA) key. ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALGORITHM_EC",
    "type" : "String",
    "comment" : " Elliptic Curve (EC) Cryptography key. ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALGORITHM_XDH",
    "type" : "String",
    "comment" : " Curve 25519 based Agreement key.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALGORITHM_AES",
    "type" : "String",
    "comment" : " Advanced Encryption Standard (AES) key. ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALGORITHM_3DES",
    "type" : "String",
    "comment" : "\n     * Triple Data Encryption Algorithm (3DES) key.\n     *\n     * @deprecated Included for interoperability with legacy systems. Prefer {@link\n     * KeyProperties#KEY_ALGORITHM_AES} for new development.\n     ",
    "links" : [ "android.security.keystore.KeyProperties#KEY_ALGORITHM_AES" ]
  }, {
    "name" : "KEY_ALGORITHM_HMAC_SHA1",
    "type" : "String",
    "comment" : " Keyed-Hash Message Authentication Code (HMAC) key using SHA-1 as the hash. ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALGORITHM_HMAC_SHA224",
    "type" : "String",
    "comment" : " Keyed-Hash Message Authentication Code (HMAC) key using SHA-224 as the hash. ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALGORITHM_HMAC_SHA256",
    "type" : "String",
    "comment" : " Keyed-Hash Message Authentication Code (HMAC) key using SHA-256 as the hash. ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALGORITHM_HMAC_SHA384",
    "type" : "String",
    "comment" : " Keyed-Hash Message Authentication Code (HMAC) key using SHA-384 as the hash. ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALGORITHM_HMAC_SHA512",
    "type" : "String",
    "comment" : " Keyed-Hash Message Authentication Code (HMAC) key using SHA-512 as the hash. ",
    "links" : [ ]
  }, {
    "name" : "BLOCK_MODE_ECB",
    "type" : "String",
    "comment" : " Electronic Codebook (ECB) block mode. ",
    "links" : [ ]
  }, {
    "name" : "BLOCK_MODE_CBC",
    "type" : "String",
    "comment" : " Cipher Block Chaining (CBC) block mode. ",
    "links" : [ ]
  }, {
    "name" : "BLOCK_MODE_CTR",
    "type" : "String",
    "comment" : " Counter (CTR) block mode. ",
    "links" : [ ]
  }, {
    "name" : "BLOCK_MODE_GCM",
    "type" : "String",
    "comment" : " Galois/Counter Mode (GCM) block mode. ",
    "links" : [ ]
  }, {
    "name" : "ENCRYPTION_PADDING_NONE",
    "type" : "String",
    "comment" : "\n     * No encryption padding.\n     ",
    "links" : [ ]
  }, {
    "name" : "ENCRYPTION_PADDING_PKCS7",
    "type" : "String",
    "comment" : "\n     * PKCS#7 encryption padding scheme.\n     ",
    "links" : [ ]
  }, {
    "name" : "ENCRYPTION_PADDING_RSA_PKCS1",
    "type" : "String",
    "comment" : "\n     * RSA PKCS#1 v1.5 padding scheme for encryption.\n     ",
    "links" : [ ]
  }, {
    "name" : "ENCRYPTION_PADDING_RSA_OAEP",
    "type" : "String",
    "comment" : "\n     * RSA Optimal Asymmetric Encryption Padding (OAEP) scheme.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_PADDING_RSA_PKCS1",
    "type" : "String",
    "comment" : "\n     * RSA PKCS#1 v1.5 padding for signatures.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_PADDING_RSA_PSS",
    "type" : "String",
    "comment" : "\n     * RSA PKCS#1 v2.1 Probabilistic Signature Scheme (PSS) padding.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIGEST_NONE",
    "type" : "String",
    "comment" : "\n     * No digest: sign/authenticate the raw message.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIGEST_MD5",
    "type" : "String",
    "comment" : "\n     * MD5 digest.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIGEST_SHA1",
    "type" : "String",
    "comment" : "\n     * SHA-1 digest.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIGEST_SHA224",
    "type" : "String",
    "comment" : "\n     * SHA-2 224 (aka SHA-224) digest.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIGEST_SHA256",
    "type" : "String",
    "comment" : "\n     * SHA-2 256 (aka SHA-256) digest.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIGEST_SHA384",
    "type" : "String",
    "comment" : "\n     * SHA-2 384 (aka SHA-384) digest.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIGEST_SHA512",
    "type" : "String",
    "comment" : "\n     * SHA-2 512 (aka SHA-512) digest.\n     ",
    "links" : [ ]
  }, {
    "name" : "ORIGIN_GENERATED",
    "type" : "int",
    "comment" : " Key was generated inside AndroidKeyStore. ",
    "links" : [ ]
  }, {
    "name" : "ORIGIN_IMPORTED",
    "type" : "int",
    "comment" : " Key was imported into AndroidKeyStore. ",
    "links" : [ ]
  }, {
    "name" : "ORIGIN_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Origin of the key is unknown. This can occur only for keys backed by an old TEE-backed\n     * implementation which does not record origin information.\n     ",
    "links" : [ ]
  }, {
    "name" : "ORIGIN_SECURELY_IMPORTED",
    "type" : "int",
    "comment" : "\n     * Key was imported into the AndroidKeyStore in an encrypted wrapper. Unlike imported keys,\n     * securely imported keys can be imported without appearing as plaintext in the device's host\n     * memory.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_LEVEL_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * This security level indicates that no assumptions can be made about the security level of the\n     * respective key.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_LEVEL_UNKNOWN_SECURE",
    "type" : "int",
    "comment" : "\n     * This security level indicates that due to the target API level of the caller no exact\n     * statement can be made about the security level of the key, however, the security level\n     * can be considered is at least equivalent to {@link #SECURITY_LEVEL_TRUSTED_ENVIRONMENT}.\n     ",
    "links" : [ "#SECURITY_LEVEL_TRUSTED_ENVIRONMENT" ]
  }, {
    "name" : "SECURITY_LEVEL_SOFTWARE",
    "type" : "int",
    "comment" : " Indicates enforcement by system software. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_LEVEL_TRUSTED_ENVIRONMENT",
    "type" : "int",
    "comment" : " Indicates enforcement by a trusted execution environment. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_LEVEL_STRONGBOX",
    "type" : "int",
    "comment" : "\n     * Indicates enforcement by environment meeting the Strongbox security profile,\n     * such as a secure element.\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_APPLICATION",
    "type" : "int",
    "comment" : "\n     * This value indicates the implicit keystore namespace of the calling application.\n     * It is used by default. Only select system components can choose a different namespace\n     * which it must be configured in SEPolicy.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_WIFI",
    "type" : "int",
    "comment" : "\n     * The namespace identifier for the WIFI Keystore namespace.\n     * This must be kept in sync with system/sepolicy/private/keystore2_key_contexts\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_LOCKSETTINGS",
    "type" : "int",
    "comment" : "\n     * The namespace identifier for the LOCKSETTINGS Keystore namespace.\n     * This must be kept in sync with system/sepolicy/private/keystore2_key_contexts\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UID_SELF",
    "type" : "int",
    "comment" : "\n     * The legacy UID that corresponds to {@link #NAMESPACE_APPLICATION}.\n     * In new code, prefer to work with Keystore namespaces directly.\n     * @hide\n     ",
    "links" : [ "#NAMESPACE_APPLICATION" ]
  }, {
    "name" : "UNRESTRICTED_USAGE_COUNT",
    "type" : "int",
    "comment" : "\n     * This value indicates that there is no restriction on the number of times the key can be used.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int[] getSetFlags(int flags)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getSetBitCount(int value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int namespaceToLegacyUid(@Namespace int namespace)",
    "returnType" : "int",
    "comment" : "\n     * For legacy support, translate namespaces into known UIDs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int legacyUidToNamespace(int uid)",
    "returnType" : "int",
    "comment" : "\n     * For legacy support, translate namespaces into known UIDs.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int[] getSetFlags(int flags)", "private static int getSetBitCount(int value)", "public static int namespaceToLegacyUid(@Namespace int namespace)", "public static int legacyUidToNamespace(int uid)" ],
  "variableNames" : [ "AUTH_DEVICE_CREDENTIAL", "AUTH_BIOMETRIC_STRONG", "PURPOSE_ENCRYPT", "PURPOSE_DECRYPT", "PURPOSE_SIGN", "PURPOSE_VERIFY", "PURPOSE_WRAP_KEY", "PURPOSE_AGREE_KEY", "PURPOSE_ATTEST_KEY", "KEY_ALGORITHM_RSA", "KEY_ALGORITHM_EC", "KEY_ALGORITHM_XDH", "KEY_ALGORITHM_AES", "KEY_ALGORITHM_3DES", "KEY_ALGORITHM_HMAC_SHA1", "KEY_ALGORITHM_HMAC_SHA224", "KEY_ALGORITHM_HMAC_SHA256", "KEY_ALGORITHM_HMAC_SHA384", "KEY_ALGORITHM_HMAC_SHA512", "BLOCK_MODE_ECB", "BLOCK_MODE_CBC", "BLOCK_MODE_CTR", "BLOCK_MODE_GCM", "ENCRYPTION_PADDING_NONE", "ENCRYPTION_PADDING_PKCS7", "ENCRYPTION_PADDING_RSA_PKCS1", "ENCRYPTION_PADDING_RSA_OAEP", "SIGNATURE_PADDING_RSA_PKCS1", "SIGNATURE_PADDING_RSA_PSS", "DIGEST_NONE", "DIGEST_MD5", "DIGEST_SHA1", "DIGEST_SHA224", "DIGEST_SHA256", "DIGEST_SHA384", "DIGEST_SHA512", "ORIGIN_GENERATED", "ORIGIN_IMPORTED", "ORIGIN_UNKNOWN", "ORIGIN_SECURELY_IMPORTED", "SECURITY_LEVEL_UNKNOWN", "SECURITY_LEVEL_UNKNOWN_SECURE", "SECURITY_LEVEL_SOFTWARE", "SECURITY_LEVEL_TRUSTED_ENVIRONMENT", "SECURITY_LEVEL_STRONGBOX", "NAMESPACE_APPLICATION", "NAMESPACE_WIFI", "NAMESPACE_LOCKSETTINGS", "UID_SELF", "UNRESTRICTED_USAGE_COUNT" ]
}