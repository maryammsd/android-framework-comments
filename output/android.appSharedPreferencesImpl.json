{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/SharedPreferencesImpl.java",
  "packageName" : "android.app",
  "className" : "SharedPreferencesImpl",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_FSYNC_DURATION_MILLIS",
    "type" : "long",
    "comment" : " If a fsync takes more than {@value #MAX_FSYNC_DURATION_MILLIS} ms, warn ",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_ON_CLEAR_CHANGE",
    "type" : "long",
    "comment" : "\n     * There will now be a callback to {@link\n     * android.content.SharedPreferences.OnSharedPreferenceChangeListener#onSharedPreferenceChanged\n     * OnSharedPreferenceChangeListener.onSharedPreferenceChanged} with a {@code null} key on\n     * {@link android.content.SharedPreferences.Editor#clear Editor.clear}.\n     ",
    "links" : [ "android.content.SharedPreferences.Editor#clear" ]
  }, {
    "name" : "mFile",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackupFile",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWritingToDiskLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMap",
    "type" : "Map<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThrowable",
    "type" : "Throwable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDiskWritesInFlight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoaded",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatTimestamp",
    "type" : "StructTimespec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatSize",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "WeakHashMap<OnSharedPreferenceChangeListener, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentMemoryStateGeneration",
    "type" : "long",
    "comment" : " Current memory state (always increasing) ",
    "links" : [ ]
  }, {
    "name" : "mDiskStateGeneration",
    "type" : "long",
    "comment" : " Latest memory state that was committed to disk ",
    "links" : [ ]
  }, {
    "name" : "mSyncTimes",
    "type" : "ExponentiallyBucketedHistogram",
    "comment" : " Time (and number of instances) of file-system sync requests ",
    "links" : [ ]
  }, {
    "name" : "mNumSync",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void startLoadFromDisk()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void loadFromDisk()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static File makeBackupFile(File prefsFile)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void startReloadIfChangedUnexpectedly()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasFileChangedUnexpectedly()",
    "returnType" : "boolean",
    "comment" : " we didn't instigate.",
    "links" : [ ]
  }, {
    "name" : "public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void awaitLoadedLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<String, ?> getAll()",
    "returnType" : "Map<String, ?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getString(String key, @Nullable String defValue)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getStringSet(String key, @Nullable Set<String> defValues)",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInt(String key, int defValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getLong(String key, long defValue)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getFloat(String key, float defValue)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(String key, boolean defValue)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(String key)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Editor edit()",
    "returnType" : "Editor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enqueueDiskWrite(final MemoryCommitResult mcr, final Runnable postWriteRunnable)",
    "returnType" : "void",
    "comment" : "\n     * Enqueue an already-committed-to-memory result to be written\n     * to disk.\n     *\n     * They will be written to disk one-at-a-time in the order\n     * that they're enqueued.\n     *\n     * @param postWriteRunnable if non-null, we're being called\n     *   from apply() and this is the runnable to run after\n     *   the write proceeds.  if null (from a regular commit()),\n     *   then we're allowed to do this disk write on the main\n     *   thread (which in addition to reducing allocations and\n     *   creating a background thread, this has the advantage that\n     *   we catch them in userdebug StrictMode reports to convert\n     *   them where possible to apply() ...)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static FileOutputStream createFileOutputStream(File file)",
    "returnType" : "FileOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeToFile(MemoryCommitResult mcr, boolean isFromSyncCommit)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "CONTENT", "MAX_FSYNC_DURATION_MILLIS", "CALLBACK_ON_CLEAR_CHANGE", "mFile", "mBackupFile", "mMode", "mLock", "mWritingToDiskLock", "mMap", "mThrowable", "mDiskWritesInFlight", "mLoaded", "mStatTimestamp", "mStatSize", "mListeners", "mCurrentMemoryStateGeneration", "mDiskStateGeneration", "mSyncTimes", "mNumSync" ],
  "methodNames" : [ "private void startLoadFromDisk()", "private void loadFromDisk()", " static File makeBackupFile(File prefsFile)", " void startReloadIfChangedUnexpectedly()", "private boolean hasFileChangedUnexpectedly()", "public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener)", "public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener)", "private void awaitLoadedLocked()", "public Map<String, ?> getAll()", "public String getString(String key, @Nullable String defValue)", "public Set<String> getStringSet(String key, @Nullable Set<String> defValues)", "public int getInt(String key, int defValue)", "public long getLong(String key, long defValue)", "public float getFloat(String key, float defValue)", "public boolean getBoolean(String key, boolean defValue)", "public boolean contains(String key)", "public Editor edit()", "private void enqueueDiskWrite(final MemoryCommitResult mcr, final Runnable postWriteRunnable)", "private static FileOutputStream createFileOutputStream(File file)", "private void writeToFile(MemoryCommitResult mcr, boolean isFromSyncCommit)" ]
}