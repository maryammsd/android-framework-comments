{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/radio/ProgramList.java",
  "packageName" : "android.hardware.radio",
  "className" : "ProgramList",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrograms",
    "type" : "ArrayMap<ProgramSelector.Identifier, ArrayMap<UniqueProgramIdentifier, RadioManager.ProgramInfo>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListCallbacks",
    "type" : "List<ListCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnCompleteListeners",
    "type" : "List<OnCompleteListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnCloseListener",
    "type" : "OnCloseListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsComplete",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerListCallback(@NonNull @CallbackExecutor Executor executor, @NonNull ListCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers list change callback with executor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerListCallback(@NonNull ListCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers list change callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterListCallback(@NonNull ListCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters list change callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnCompleteListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnCompleteListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds list complete event listener with executor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnCompleteListener(@NonNull OnCompleteListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds list complete event listener.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnCompleteListener(@NonNull OnCompleteListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes list complete event listener.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setOnCloseListener(@Nullable OnCloseListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Disables list updates and releases all resources.\n     ",
    "links" : [ ]
  }, {
    "name" : " void apply(Chunk chunk)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void putLocked(RadioManager.ProgramInfo value, Set<ProgramSelector.Identifier> changedIdentifierSet)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeLocked(UniqueProgramIdentifier key, List<ProgramSelector.Identifier> removedIdentifierList)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<RadioManager.ProgramInfo> toList()",
    "returnType" : "List<RadioManager.ProgramInfo>",
    "comment" : "\n     * Converts the program list in its current shape to the static List<>.\n     *\n     * @return the new List<> object; it won't receive any further updates\n     ",
    "links" : [ ]
  }, {
    "name" : "public RadioManager.ProgramInfo get(@NonNull ProgramSelector.Identifier id)",
    "returnType" : "RadioManager.ProgramInfo",
    "comment" : "\n     * Returns the program with a specified primary identifier.\n     *\n     * <p>This method only returns the first program from the list return from\n     * {@link #getProgramInfos}\n     *\n     * @param id primary identifier of a program to fetch\n     * @return the program info, or null if there is no such program on the list\n     *\n     * @deprecated Use {@link #getProgramInfos(ProgramSelector.Identifier)} to get all programs\n     * with the given primary identifier\n     ",
    "links" : [ "#getProgramInfos", "#getProgramInfos(ProgramSelector.Identifier)" ]
  }, {
    "name" : "public List<RadioManager.ProgramInfo> getProgramInfos(@NonNull ProgramSelector.Identifier id)",
    "returnType" : "List<RadioManager.ProgramInfo>",
    "comment" : "\n     * Returns the program list with a specified primary identifier.\n     *\n     * @param id primary identifier of a program to fetch\n     * @return the program info list with the primary identifier, or empty list if there is no such\n     * program identifier on the list\n     * @throws NullPointerException if primary identifier is {@code null}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void registerListCallback(@NonNull @CallbackExecutor Executor executor, @NonNull ListCallback callback)", "public void registerListCallback(@NonNull ListCallback callback)", "public void unregisterListCallback(@NonNull ListCallback callback)", "public void addOnCompleteListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnCompleteListener listener)", "public void addOnCompleteListener(@NonNull OnCompleteListener listener)", "public void removeOnCompleteListener(@NonNull OnCompleteListener listener)", " void setOnCloseListener(@Nullable OnCloseListener listener)", "public void close()", " void apply(Chunk chunk)", "private void putLocked(RadioManager.ProgramInfo value, Set<ProgramSelector.Identifier> changedIdentifierSet)", "private void removeLocked(UniqueProgramIdentifier key, List<ProgramSelector.Identifier> removedIdentifierList)", "public List<RadioManager.ProgramInfo> toList()", "public RadioManager.ProgramInfo get(@NonNull ProgramSelector.Identifier id)", "public List<RadioManager.ProgramInfo> getProgramInfos(@NonNull ProgramSelector.Identifier id)" ],
  "variableNames" : [ "mLock", "mPrograms", "mListCallbacks", "mOnCompleteListeners", "mOnCloseListener", "mIsClosed", "mIsComplete" ]
}