{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/legacy/LegacyMetadataMapper.java",
  "packageName" : "android.hardware.camera2.legacy",
  "className" : "LegacyMetadataMapper",
  "comment" : "\n * Provide legacy-specific implementations of camera2 metadata for legacy devices, such as the\n * camera characteristics.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NS_PER_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAL_PIXEL_FORMAT_RGBA_8888",
    "type" : "int",
    "comment" : " from graphics.h",
    "links" : [ ]
  }, {
    "name" : "HAL_PIXEL_FORMAT_BGRA_8888",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAL_PIXEL_FORMAT_BLOB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LENS_INFO_MINIMUM_FOCUS_DISTANCE_FIXED_FOCUS",
    "type" : "float",
    "comment" : " for metadata",
    "links" : [ ]
  }, {
    "name" : "REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_RAW",
    "type" : "int",
    "comment" : " no raw support",
    "links" : [ ]
  }, {
    "name" : "REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC",
    "type" : "int",
    "comment" : " preview, video, cb",
    "links" : [ ]
  }, {
    "name" : "REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC_STALL",
    "type" : "int",
    "comment" : " 1 jpeg only",
    "links" : [ ]
  }, {
    "name" : "REQUEST_MAX_NUM_INPUT_STREAMS_COUNT",
    "type" : "int",
    "comment" : " no reprocessing",
    "links" : [ ]
  }, {
    "name" : "REQUEST_PIPELINE_MAX_DEPTH_HAL1",
    "type" : "int",
    "comment" : " Assume 3 HAL1 stages: Exposure, Read-out, Post-Processing ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_PIPELINE_MAX_DEPTH_OURS",
    "type" : "int",
    "comment" : " Assume 3 shim stages: Preview input, Split output, Format conversion for output ",
    "links" : [ ]
  }, {
    "name" : "APPROXIMATE_CAPTURE_DELAY_MS",
    "type" : "long",
    "comment" : " 200 milliseconds",
    "links" : [ ]
  }, {
    "name" : "APPROXIMATE_SENSOR_AREA_PX",
    "type" : "long",
    "comment" : " 8 megapixels",
    "links" : [ ]
  }, {
    "name" : "APPROXIMATE_JPEG_ENCODE_TIME_MS",
    "type" : "long",
    "comment" : " 600 milliseconds",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREVIEW_ASPECT_RATIO_TOLERANCE",
    "type" : "float",
    "comment" : " Maximum difference between a preview size aspect ratio and a jpeg size aspect ratio",
    "links" : [ ]
  }, {
    "name" : "LIE_ABOUT_AE_STATE",
    "type" : "boolean",
    "comment" : "\n     * Development hijinks: Lie about not supporting certain capabilities\n     *\n     * - Unblock some CTS tests from running whose main intent is not the metadata itself\n     *\n     * TODO: Remove these constants and strip out any code that previously relied on them\n     * being set to true.\n     ",
    "links" : [ ]
  }, {
    "name" : "LIE_ABOUT_AE_MAX_REGIONS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LIE_ABOUT_AF",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LIE_ABOUT_AF_MAX_REGIONS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LIE_ABOUT_AWB_STATE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LIE_ABOUT_AWB",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLegacySceneModes",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSceneModes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLegacyEffectMode",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sEffectModes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAllowedTemplates",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CameraCharacteristics createCharacteristics(Camera.Parameters parameters, CameraInfo info, int cameraId, Size displaySize)",
    "returnType" : "CameraCharacteristics",
    "comment" : "\n     * Create characteristics for a legacy device by mapping the {@code parameters}\n     * and {@code info}\n     *\n     * @param parameters A non-{@code null} parameters set\n     * @param info Camera info with camera facing direction and angle of orientation\n     * @param cameraId Current camera Id\n     * @param displaySize Device display size\n     *\n     * @return static camera characteristics for a camera device\n     *\n     * @throws NullPointerException if any of the args were {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CameraCharacteristics createCharacteristics(String parameters, android.hardware.CameraInfo info, int cameraId, Size displaySize)",
    "returnType" : "CameraCharacteristics",
    "comment" : "\n     * Create characteristics for a legacy device by mapping the {@code parameters}\n     * and {@code info}\n     *\n     * @param parameters A string parseable by {@link Camera.Parameters#unflatten}\n     * @param info Camera info with camera facing direction and angle of orientation\n     * @param cameraId Current camera id\n     * @param displaySize Device display size\n     * @return static camera characteristics for a camera device\n     *\n     * @throws NullPointerException if any of the args were {@code null}\n     ",
    "links" : [ "Camera.Parameters#unflatten" ]
  }, {
    "name" : "private static void mapCharacteristicsFromInfo(CameraMetadataNative m, CameraInfo i)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapCharacteristicsFromParameters(CameraMetadataNative m, Camera.Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapScalerStreamConfigs(CameraMetadataNative m, Camera.Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapControlAe(CameraMetadataNative m, Camera.Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapControlAf(CameraMetadataNative m, Camera.Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapControlAwb(CameraMetadataNative m, Camera.Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapControlOther(CameraMetadataNative m, Camera.Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapLens(CameraMetadataNative m, Camera.Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapFlash(CameraMetadataNative m, Camera.Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapJpeg(CameraMetadataNative m, Camera.Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapRequest(CameraMetadataNative m, Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapScaler(CameraMetadataNative m, Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapSensor(CameraMetadataNative m, Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapStatistics(CameraMetadataNative m, Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void mapSync(CameraMetadataNative m, Parameters p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendStreamConfig(ArrayList<StreamConfiguration> configs, int format, List<Camera.Size> sizes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int convertSceneModeFromLegacy(String mode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String convertSceneModeToLegacy(int mode)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int convertEffectModeFromLegacy(String mode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String convertEffectModeToLegacy(int mode)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int convertAntiBandingMode(String mode)",
    "returnType" : "int",
    "comment" : "\n     * Convert the ae antibanding mode from api1 into api2.\n     *\n     * @param mode the api1 mode, {@code null} is allowed and will return {@code -1}.\n     *\n     * @return The api2 value, or {@code -1} by default if conversion failed\n     ",
    "links" : [ ]
  }, {
    "name" : " static int convertAntiBandingModeOrDefault(String mode)",
    "returnType" : "int",
    "comment" : "\n     * Convert the ae antibanding mode from api1 into api2.\n     *\n     * @param mode the api1 mode, {@code null} is allowed and will return {@code MODE_OFF}.\n     *\n     * @return The api2 value, or {@code MODE_OFF} by default if conversion failed\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int[] convertAeFpsRangeToLegacy(Range<Integer> fpsRange)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long calculateJpegStallDuration(Camera.Size size)",
    "returnType" : "long",
    "comment" : "\n     * Return the stall duration for a given output jpeg size in nanoseconds.\n     *\n     * <p>An 8mp image is chosen to have a stall duration of 0.8 seconds.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void convertRequestMetadata(LegacyRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Set the legacy parameters using the {@link LegacyRequest legacy request}.\n     *\n     * <p>The legacy request's parameters are changed as a side effect of calling this\n     * method.</p>\n     *\n     * @param request a non-{@code null} legacy request\n     ",
    "links" : [ "LegacyRequest" ]
  }, {
    "name" : "public static CameraMetadataNative createRequestTemplate(CameraCharacteristics c, int templateId)",
    "returnType" : "CameraMetadataNative",
    "comment" : "\n     * Create a request template\n     *\n     * @param c a non-{@code null} camera characteristics for this camera\n     * @param templateId a non-negative template ID\n     *\n     * @return a non-{@code null} request template\n     *\n     * @throws IllegalArgumentException if {@code templateId} was invalid\n     *\n     * @see android.hardware.camera2.CameraDevice#TEMPLATE_MANUAL\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int[] getTagsForKeys(Key<?>[] keys)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int[] getTagsForKeys(CaptureRequest.Key<?>[] keys)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int[] getTagsForKeys(CaptureResult.Key<?>[] keys)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String convertAfModeToLegacy(int mode, List<String> supportedFocusModes)",
    "returnType" : "String",
    "comment" : "\n     * Convert the requested AF mode into its equivalent supported parameter.\n     *\n     * @param mode {@code CONTROL_AF_MODE}\n     * @param supportedFocusModes list of camera1's supported focus modes\n     * @return the stringified af mode, or {@code null} if its not supported\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "NS_PER_MS", "HAL_PIXEL_FORMAT_RGBA_8888", "HAL_PIXEL_FORMAT_BGRA_8888", "HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED", "HAL_PIXEL_FORMAT_BLOB", "LENS_INFO_MINIMUM_FOCUS_DISTANCE_FIXED_FOCUS", "REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_RAW", "REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC", "REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC_STALL", "REQUEST_MAX_NUM_INPUT_STREAMS_COUNT", "REQUEST_PIPELINE_MAX_DEPTH_HAL1", "REQUEST_PIPELINE_MAX_DEPTH_OURS", "APPROXIMATE_CAPTURE_DELAY_MS", "APPROXIMATE_SENSOR_AREA_PX", "APPROXIMATE_JPEG_ENCODE_TIME_MS", "UNKNOWN_MODE", "PREVIEW_ASPECT_RATIO_TOLERANCE", "LIE_ABOUT_AE_STATE", "LIE_ABOUT_AE_MAX_REGIONS", "LIE_ABOUT_AF", "LIE_ABOUT_AF_MAX_REGIONS", "LIE_ABOUT_AWB_STATE", "LIE_ABOUT_AWB", "sLegacySceneModes", "sSceneModes", "sLegacyEffectMode", "sEffectModes", "sAllowedTemplates" ],
  "methodNames" : [ "public static CameraCharacteristics createCharacteristics(Camera.Parameters parameters, CameraInfo info, int cameraId, Size displaySize)", "public static CameraCharacteristics createCharacteristics(String parameters, android.hardware.CameraInfo info, int cameraId, Size displaySize)", "private static void mapCharacteristicsFromInfo(CameraMetadataNative m, CameraInfo i)", "private static void mapCharacteristicsFromParameters(CameraMetadataNative m, Camera.Parameters p)", "private static void mapScalerStreamConfigs(CameraMetadataNative m, Camera.Parameters p)", "private static void mapControlAe(CameraMetadataNative m, Camera.Parameters p)", "private static void mapControlAf(CameraMetadataNative m, Camera.Parameters p)", "private static void mapControlAwb(CameraMetadataNative m, Camera.Parameters p)", "private static void mapControlOther(CameraMetadataNative m, Camera.Parameters p)", "private static void mapLens(CameraMetadataNative m, Camera.Parameters p)", "private static void mapFlash(CameraMetadataNative m, Camera.Parameters p)", "private static void mapJpeg(CameraMetadataNative m, Camera.Parameters p)", "private static void mapRequest(CameraMetadataNative m, Parameters p)", "private static void mapScaler(CameraMetadataNative m, Parameters p)", "private static void mapSensor(CameraMetadataNative m, Parameters p)", "private static void mapStatistics(CameraMetadataNative m, Parameters p)", "private static void mapSync(CameraMetadataNative m, Parameters p)", "private static void appendStreamConfig(ArrayList<StreamConfiguration> configs, int format, List<Camera.Size> sizes)", " static int convertSceneModeFromLegacy(String mode)", " static String convertSceneModeToLegacy(int mode)", " static int convertEffectModeFromLegacy(String mode)", " static String convertEffectModeToLegacy(int mode)", "private static int convertAntiBandingMode(String mode)", " static int convertAntiBandingModeOrDefault(String mode)", "private static int[] convertAeFpsRangeToLegacy(Range<Integer> fpsRange)", "private static long calculateJpegStallDuration(Camera.Size size)", "public static void convertRequestMetadata(LegacyRequest request)", "public static CameraMetadataNative createRequestTemplate(CameraCharacteristics c, int templateId)", "private static int[] getTagsForKeys(Key<?>[] keys)", "private static int[] getTagsForKeys(CaptureRequest.Key<?>[] keys)", "private static int[] getTagsForKeys(CaptureResult.Key<?>[] keys)", " static String convertAfModeToLegacy(int mode, List<String> supportedFocusModes)" ]
}