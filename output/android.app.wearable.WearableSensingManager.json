{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/wearable/WearableSensingManager.java",
  "packageName" : "android.app.wearable",
  "className" : "WearableSensingManager",
  "comment" : "\n * Allows granted apps to manage the WearableSensingService.\n * Applications are responsible for managing the connection to Wearables. Applications can choose\n * to provide a data stream to the WearableSensingService to use for\n * computing {@link AmbientContextEvent}s. Applications can also optionally provide their own\n * defined data to power the detection of {@link AmbientContextEvent}s.\n * Methods on this class requires the caller to hold and be granted the\n * {@link Manifest.permission.MANAGE_WEARABLE_SENSING_SERVICE}.\n *\n * <p>The use of \"Wearable\" here is not the same as the Android Wear platform and should be treated\n * separately. </p>\n *\n * @hide\n ",
  "links" : [ "android.app.ambientcontext.AmbientContextEvent", "Manifest.permission.MANAGE_WEARABLE_SENSING_SERVICE" ],
  "variables" : [ {
    "name" : "STATUS_RESPONSE_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * The bundle key for the service status query result, used in\n     * {@code RemoteCallback#sendResult}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_WEARABLE_SENSING_DATA_REQUEST",
    "type" : "String",
    "comment" : "\n     * The Intent extra key for the data request in the Intent sent to the PendingIntent registered\n     * with {@link #registerDataRequestObserver(int, PendingIntent, Executor, Consumer)}.\n     *\n     * @hide\n     ",
    "links" : [ "#registerDataRequestObserver(int" ]
  }, {
    "name" : "STATUS_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * An unknown status.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_SUCCESS",
    "type" : "int",
    "comment" : "\n     * The value of the status code that indicates success.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n     * The value of the status code that indicates one or more of the requested events are not\n     * supported.\n     *\n     * @deprecated WearableSensingManager does not deal with events. Use {@link\n     * STATUS_UNSUPPORTED_OPERATION} instead for operations not supported by the implementation of\n     * {@link WearableSensingService}.\n     ",
    "links" : [ "STATUS_UNSUPPORTED_OPERATION", "android.service.wearable.WearableSensingService" ]
  }, {
    "name" : "STATUS_SERVICE_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The value of the status code that indicates service not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_WEARABLE_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The value of the status code that there's no connection to the wearable.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_ACCESS_DENIED",
    "type" : "int",
    "comment" : "\n     * The value of the status code that the app is not granted access.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_UNSUPPORTED_OPERATION",
    "type" : "int",
    "comment" : "\n     * The value of the status code that indicates the method called is not supported by the\n     * implementation of {@link WearableSensingService}.\n     ",
    "links" : [ "android.service.wearable.WearableSensingService" ]
  }, {
    "name" : "STATUS_CHANNEL_ERROR",
    "type" : "int",
    "comment" : "\n     * The value of the status code that indicates an error occurred in the encrypted channel backed\n     * by the provided connection. See {@link #provideConnection(ParcelFileDescriptor,\n     * Executor, Consumer)}.\n     ",
    "links" : [ "#provideConnection(ParcelFileDescriptor" ]
  }, {
    "name" : "STATUS_UNSUPPORTED_DATA_TYPE",
    "type" : "int",
    "comment" : " The value of the status code that indicates the provided data type is not supported. ",
    "links" : [ ]
  }, {
    "name" : "ALLOW_WEARABLE_SENSING_SERVICE_FILE_READ",
    "type" : "long",
    "comment" : "\n     * If the WearableSensingService implementation belongs to the same APK as the caller, calling\n     * {@link #provideDataStream(ParcelFileDescriptor, Executor, Consumer)} will allow\n     * WearableSensingService to read from the caller's file directory via {@link\n     * Context#openFileInput(String)}. The read will be proxied via the caller's process and\n     * executed by the {@code executor} provided to this method.\n     ",
    "links" : [ "#provideDataStream(ParcelFileDescriptor", "android.content.Context#openFileInput(String)" ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IWearableSensingManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static WearableSensingDataRequest getDataRequestFromIntent(@NonNull Intent intent)",
    "returnType" : "WearableSensingDataRequest",
    "comment" : "\n     * Retrieves a {@link WearableSensingDataRequest} from the Intent sent to the PendingIntent\n     * provided to {@link #registerDataRequestObserver(int, PendingIntent, Executor, Consumer)}.\n     *\n     * @param intent The Intent received from the PendingIntent.\n     * @return The WearableSensingDataRequest in the provided Intent, or null if the Intent does not\n     *     contain a WearableSensingDataRequest.\n     ",
    "links" : [ "#registerDataRequestObserver(int", "android.app.wearable.WearableSensingDataRequest" ]
  }, {
    "name" : "public void provideConnection(@NonNull ParcelFileDescriptor wearableConnection, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Provides a remote wearable device connection to the WearableSensingService and sends the\n     * resulting status to the {@code statusConsumer} after the call.\n     *\n     * <p>This is used by applications that will also provide an implementation of the isolated\n     * WearableSensingService.\n     *\n     * <p>The provided {@code wearableConnection} is expected to be a connection to a remotely\n     * connected wearable device. This {@code wearableConnection} will be attached to\n     * CompanionDeviceManager via {@link CompanionDeviceManager#attachSystemDataTransport(int,\n     * InputStream, OutputStream)}, which will create an encrypted channel using {@code\n     * wearableConnection} as the raw underlying connection. The wearable device is expected to\n     * attach its side of the raw connection to its CompanionDeviceManager via the same method so\n     * that the two CompanionDeviceManagers on the two devices can perform attestation and set up\n     * the encrypted channel. Attestation requirements are listed in\n     * com.android.server.security.AttestationVerificationPeerDeviceVerifier\n     *\n     * <p>A proxy to the encrypted channel will be provided to the WearableSensingService, which is\n     * referred to as the secureWearableConnection in WearableSensingService. Any data written to\n     * secureWearableConnection will be encrypted by CompanionDeviceManager and sent over the raw\n     * {@code wearableConnection} to the remote wearable device, which is expected to use its\n     * CompanionDeviceManager to decrypt the data. Encrypted data arriving at the raw {@code\n     * wearableConnection} will be decrypted by CompanionDeviceManager and be readable as plain text\n     * from secureWearableConnection. The raw {@code wearableConnection} provided to this method\n     * will not be directly available to the WearableSensingService.\n     *\n     * <p>If an error occurred in the encrypted channel (such as the underlying stream closed), the\n     * system will send a status code of {@link STATUS_CHANNEL_ERROR} to the {@code statusConsumer}\n     * and kill the WearableSensingService process.\n     *\n     * <p>Before providing the secureWearableConnection, the system will restart the\n     * WearableSensingService process if it has not been restarted since the last\n     * secureWearableConnection was provided. Other method calls into WearableSensingService may be\n     * dropped during the restart. The caller is responsible for ensuring other method calls are\n     * queued until a success status is returned from the {@code statusConsumer}.\n     *\n     * <p>If the WearableSensingService implementation belongs to the same APK as the caller,\n     * calling this method will allow WearableSensingService to read from the caller's file\n     * directory via {@link Context#openFileInput(String)}. The read will be proxied via the\n     * caller's process and executed by the {@code executor} provided to this method.\n     *\n     * @param wearableConnection The connection to provide\n     * @param executor Executor on which to run the consumer callback\n     * @param statusConsumer A consumer that handles the status codes for providing the connection\n     *     and errors in the encrypted channel.\n     ",
    "links" : [ "STATUS_CHANNEL_ERROR", "android.content.Context#openFileInput(String)", "android.companion.CompanionDeviceManager#attachSystemDataTransport(int" ]
  }, {
    "name" : "public void provideDataStream(@NonNull ParcelFileDescriptor parcelFileDescriptor, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Provides a data stream to the WearableSensingService that's backed by the\n     * parcelFileDescriptor, and sends the result to the {@link Consumer} right after the call. This\n     * is used by applications that will also provide an implementation of an isolated\n     * WearableSensingService. If the data stream was provided successfully {@link\n     * WearableSensingManager#STATUS_SUCCESS} will be provided.\n     *\n     * <p>Starting from target SDK level 35, if the WearableSensingService implementation belongs to\n     * the same APK as the caller, calling this method will allow WearableSensingService to read\n     * from the caller's file directory via {@link Context#openFileInput(String)}. The read will be\n     * proxied via the caller's process and executed by the {@code executor} provided to this\n     * method.\n     *\n     * @param parcelFileDescriptor The data stream to provide\n     * @param executor Executor on which to run the consumer callback\n     * @param statusConsumer A consumer that handles the status codes, which is returned right after\n     *     the call.\n     * @deprecated Use {@link #provideConnection(ParcelFileDescriptor, Executor, Consumer)} instead\n     *     to provide a remote wearable device connection to the WearableSensingService\n     ",
    "links" : [ "java.util.function.Consumer", "#provideConnection(ParcelFileDescriptor", "android.app.wearable.WearableSensingManager#STATUS_SUCCESS", "android.content.Context#openFileInput(String)" ]
  }, {
    "name" : "public void provideData(@NonNull PersistableBundle data, @Nullable SharedMemory sharedMemory, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Sets configuration and provides read-only data in a {@link PersistableBundle} that may be\n     * used by the WearableSensingService, and sends the result to the {@link Consumer}\n     * right after the call. It is dependent on the application to\n     * define the type of data to provide. This is used by applications that will also\n     * provide an implementation of an isolated WearableSensingService. If the data was\n     * provided successfully {@link WearableSensingManager#STATUS_SUCCESS} will be povided.\n     *\n     * @param data Application configuration data to provide to the {@link WearableSensingService}.\n     *             PersistableBundle does not allow any remotable objects or other contents\n     *             that can be used to communicate with other processes.\n     * @param sharedMemory The unrestricted data blob to\n     *                     provide to the {@link WearableSensingService}. Use this to provide the\n     *                     sensing models data or other such data to the trusted process.\n     *                     The sharedMemory must be read only and protected with\n     *                     {@link OsConstants.PROT_READ}.\n     *                     Other operations will be removed by the system.\n     * @param executor Executor on which to run the consumer callback\n     * @param statusConsumer A consumer that handles the status codes, which is returned\n     *                     right after the call\n     ",
    "links" : [ "java.util.function.Consumer", "OsConstants.PROT_READ", "android.app.wearable.WearableSensingManager#STATUS_SUCCESS", "android.os.PersistableBundle", "android.service.wearable.WearableSensingService" ]
  }, {
    "name" : "public void registerDataRequestObserver(int dataType, @NonNull PendingIntent dataRequestPendingIntent, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Registers a data request observer for the provided data type.\n     *\n     * <p>When data is requested, the provided {@code dataRequestPendingIntent} will be invoked. A\n     * {@link WearableSensingDataRequest} can be extracted from the Intent sent to {@code\n     * dataRequestPendingIntent} by calling {@link #getDataRequestFromIntent(Intent)}. The observer\n     * can then provide the requested data via {@link #provideData(PersistableBundle, SharedMemory,\n     * Executor, Consumer)}.\n     *\n     * <p>There is no limit to the number of observers registered for a data type. How they are\n     * handled depends on the implementation of WearableSensingService.\n     *\n     * <p>When the observer is no longer needed, {@link #unregisterDataRequestObserver(int,\n     * PendingIntent, Executor, Consumer)} should be called with the same {@code\n     * dataRequestPendingIntent}. It should be done regardless of the status code returned from\n     * {@code statusConsumer} in order to clean up housekeeping data for the {@code\n     * dataRequestPendingIntent} maintained by the system.\n     *\n     * <p>Example:\n     *\n     * <pre>{@code\n     * // Create a PendingIntent for MyDataRequestBroadcastReceiver\n     * Intent intent =\n     *         new Intent(actionString).setClass(context, MyDataRequestBroadcastReceiver.class);\n     * PendingIntent pendingIntent = PendingIntent.getBroadcast(\n     *         context, 0, intent, PendingIntent.FLAG_MUTABLE);\n     *\n     * // Register the PendingIntent as a data request observer\n     * wearableSensingManager.registerDataRequestObserver(\n     *         dataType, pendingIntent, executor, statusConsumer);\n     *\n     * // Within MyDataRequestBroadcastReceiver, receive the broadcast Intent and extract the\n     * // WearableSensingDataRequest\n     * {@literal @}Override\n     * public void onReceive(Context context, Intent intent) {\n     *     WearableSensingDataRequest dataRequest =\n     *             WearableSensingManager.getDataRequestFromIntent(intent);\n     *     // After parsing the dataRequest, provide the data\n     *     wearableSensingManager.provideData(data, sharedMemory, executor, statusConsumer);\n     * }\n     * }</pre>\n     *\n     * @param dataType The data type to listen to. Values are defined by the application that\n     *     implements {@link WearableSensingService}.\n     * @param dataRequestPendingIntent A mutable {@link PendingIntent} that will be invoked when\n     *     data is requested. See {@link #getDataRequestFromIntent(Intent)}. Activities are not\n     *     allowed to be launched using this PendingIntent.\n     * @param executor Executor on which to run the consumer callback.\n     * @param statusConsumer A consumer that handles the status code for the observer registration.\n     ",
    "links" : [ "#provideData(PersistableBundle", "#unregisterDataRequestObserver(int", "#getDataRequestFromIntent(Intent)", "android.service.wearable.WearableSensingService", "android.app.PendingIntent", "android.app.wearable.WearableSensingDataRequest" ]
  }, {
    "name" : "public void unregisterDataRequestObserver(int dataType, @NonNull PendingIntent dataRequestPendingIntent, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a previously registered data request observer. If the provided {@link\n     * PendingIntent} was not registered, or is already unregistered, the {@link\n     * WearableSensingService} will not be notified.\n     *\n     * @param dataType The data type the observer is for.\n     * @param dataRequestPendingIntent The observer to unregister.\n     * @param executor Executor on which to run the consumer callback.\n     * @param statusConsumer A consumer that handles the status code for the observer\n     *     unregistration.\n     ",
    "links" : [ "android.service.wearable.WearableSensingService", "android.app.PendingIntent" ]
  }, {
    "name" : "public void startHotwordRecognition(@Nullable ComponentName targetVisComponentName, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Requests the wearable to start hotword recognition.\n     *\n     * <p>When this method is called, the system will attempt to provide a {@link\n     * android.service.wearable.WearableHotwordAudioConsumer} to {@link WearableSensingService}.\n     * After first-stage hotword is detected on a wearable, {@link WearableSensingService} should\n     * send the hotword audio to the {@link android.service.wearable.WearableHotwordAudioConsumer},\n     * which will forward the data to the {@link android.service.voice.HotwordDetectionService} for\n     * second-stage hotword validation. If hotword is detected there, the audio data will be\n     * forwarded to the {@link android.service.voice.VoiceInteractionService}.\n     *\n     * <p>If the {@code targetVisComponentName} provided here is not null, when {@link\n     * WearableSensingService} sends hotword audio to the {@link\n     * android.service.wearable.WearableHotwordAudioConsumer}, the system will check whether the\n     * {@link android.service.voice.VoiceInteractionService} at that time is {@code\n     * targetVisComponentName}. If not, the system will call {@link\n     * WearableSensingService#onActiveHotwordAudioStopRequested()} and will not forward the audio\n     * data to the current {@link android.service.voice.HotwordDetectionService} nor {@link\n     * android.service.voice.VoiceInteractionService}. The system will not send a status code to\n     * {@code statusConsumer} regarding the {@code targetVisComponentName} check. The caller is\n     * responsible for determining whether the system's {@link\n     * android.service.voice.VoiceInteractionService} is the same as {@code targetVisComponentName}.\n     * The check here is just a protection against race conditions.\n     *\n     * <p>Calling this method again will send a new {@link\n     * android.service.wearable.WearableHotwordAudioConsumer} to {@link WearableSensingService}. For\n     * audio data sent to the new consumer, the system will perform the above check using the newly\n     * provided {@code targetVisComponentName}. The {@link WearableSensingService} should not\n     * continue to use the previous consumers after receiving a new one.\n     *\n     * <p>If the {@code statusConsumer} returns {@link STATUS_SUCCESS}, the caller should call\n     * {@link #stopListeningForHotword(Executor, Consumer)} when it wants the wearable to stop\n     * listening for hotword. If the {@code statusConsumer} returns any other status code, a failure\n     * has occurred and calling {@link #stopListeningForHotword(Executor, Consumer)} is not\n     * required. The system will not retry listening automatically. The caller should call this\n     * method again if they want to retry.\n     *\n     * <p>If a failure occurred after the {@link statusConsumer} returns {@link STATUS_SUCCESS},\n     * {@link statusConsumer} will be invoked again with a status code other than {@link\n     * STATUS_SUCCESS}.\n     *\n     * @param targetVisComponentName The ComponentName of the target VoiceInteractionService.\n     * @param executor Executor on which to run the consumer callback.\n     * @param statusConsumer A consumer that handles the status codes.\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#stopListeningForHotword(Executor", "android.service.voice.VoiceInteractionService", "android.service.wearable.WearableHotwordAudioConsumer", "android.service.wearable.WearableSensingService#onActiveHotwordAudioStopRequested()", "STATUS_SUCCESS", "android.service.wearable.WearableSensingService", "statusConsumer" ]
  }, {
    "name" : "public void stopHotwordRecognition(@NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Requests the wearable to stop hotword recognition.\n     *\n     * @param executor Executor on which to run the consumer callback.\n     * @param statusConsumer A consumer that handles the status codes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static RemoteCallback createStatusCallback(Executor executor, Consumer<Integer> statusConsumer)",
    "returnType" : "RemoteCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IWearableSensingCallback createWearableSensingCallback(Executor executor)",
    "returnType" : "IWearableSensingCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static WearableSensingDataRequest getDataRequestFromIntent(@NonNull Intent intent)", "public void provideConnection(@NonNull ParcelFileDescriptor wearableConnection, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)", "public void provideDataStream(@NonNull ParcelFileDescriptor parcelFileDescriptor, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)", "public void provideData(@NonNull PersistableBundle data, @Nullable SharedMemory sharedMemory, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)", "public void registerDataRequestObserver(int dataType, @NonNull PendingIntent dataRequestPendingIntent, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)", "public void unregisterDataRequestObserver(int dataType, @NonNull PendingIntent dataRequestPendingIntent, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)", "public void startHotwordRecognition(@Nullable ComponentName targetVisComponentName, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)", "public void stopHotwordRecognition(@NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)", "private static RemoteCallback createStatusCallback(Executor executor, Consumer<Integer> statusConsumer)", "private IWearableSensingCallback createWearableSensingCallback(Executor executor)" ],
  "variableNames" : [ "STATUS_RESPONSE_BUNDLE_KEY", "EXTRA_WEARABLE_SENSING_DATA_REQUEST", "STATUS_UNKNOWN", "STATUS_SUCCESS", "STATUS_UNSUPPORTED", "STATUS_SERVICE_UNAVAILABLE", "STATUS_WEARABLE_UNAVAILABLE", "STATUS_ACCESS_DENIED", "STATUS_UNSUPPORTED_OPERATION", "STATUS_CHANNEL_ERROR", "STATUS_UNSUPPORTED_DATA_TYPE", "ALLOW_WEARABLE_SENSING_SERVICE_FILE_READ", "TAG", "mContext", "mService" ]
}