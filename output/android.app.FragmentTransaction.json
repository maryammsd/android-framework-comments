{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/FragmentTransaction.java",
  "packageName" : "android.app",
  "className" : "FragmentTransaction",
  "comment" : "\n * API for performing a set of Fragment operations.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using fragments, read the\n * <a href=\"{@docRoot}guide/components/fragments.html\">Fragments</a> developer\n * guide.</p>\n * </div>\n *\n * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">Support Library</a>\n *      {@link androidx.fragment.app.FragmentTransaction}\n ",
  "links" : [ "androidx.fragment.app.FragmentTransaction" ],
  "variables" : [ {
    "name" : "TRANSIT_ENTER_MASK",
    "type" : "int",
    "comment" : "\n     * Bit mask that is set for all enter transitions.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSIT_EXIT_MASK",
    "type" : "int",
    "comment" : "\n     * Bit mask that is set for all exit transitions.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSIT_UNSET",
    "type" : "int",
    "comment" : " Not set up for a transition. ",
    "links" : [ ]
  }, {
    "name" : "TRANSIT_NONE",
    "type" : "int",
    "comment" : " No animation for transition. ",
    "links" : [ ]
  }, {
    "name" : "TRANSIT_FRAGMENT_OPEN",
    "type" : "int",
    "comment" : " Fragment is being added onto the stack ",
    "links" : [ ]
  }, {
    "name" : "TRANSIT_FRAGMENT_CLOSE",
    "type" : "int",
    "comment" : " Fragment is being removed from the stack ",
    "links" : [ ]
  }, {
    "name" : "TRANSIT_FRAGMENT_FADE",
    "type" : "int",
    "comment" : " Fragment should simply fade in or out; that is, no strong navigation associated\n     * with it except that it is appearing or disappearing for some reason. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract FragmentTransaction add(Fragment fragment, String tag)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Calls {@link #add(int, Fragment, String)} with a 0 containerViewId.\n     ",
    "links" : [ "#add(int" ]
  }, {
    "name" : "public abstract FragmentTransaction add(@IdRes int containerViewId, Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Calls {@link #add(int, Fragment, String)} with a null tag.\n     ",
    "links" : [ "#add(int" ]
  }, {
    "name" : "public abstract FragmentTransaction add(@IdRes int containerViewId, Fragment fragment, String tag)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Add a fragment to the activity state.  This fragment may optionally\n     * also have its view (if {@link Fragment#onCreateView Fragment.onCreateView}\n     * returns non-null) inserted into a container view of the activity.\n     *\n     * @param containerViewId Optional identifier of the container this fragment is\n     * to be placed in.  If 0, it will not be placed in a container.\n     * @param fragment The fragment to be added.  This fragment must not already\n     * be added to the activity.\n     * @param tag Optional tag name for the fragment, to later retrieve the\n     * fragment with {@link FragmentManager#findFragmentByTag(String)\n     * FragmentManager.findFragmentByTag(String)}.\n     *\n     * @return Returns the same FragmentTransaction instance.\n     ",
    "links" : [ "android.app.FragmentManager#findFragmentByTag(String)", "android.app.Fragment#onCreateView" ]
  }, {
    "name" : "public abstract FragmentTransaction replace(@IdRes int containerViewId, Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Calls {@link #replace(int, Fragment, String)} with a null tag.\n     ",
    "links" : [ "#replace(int" ]
  }, {
    "name" : "public abstract FragmentTransaction replace(@IdRes int containerViewId, Fragment fragment, String tag)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Replace an existing fragment that was added to a container.  This is\n     * essentially the same as calling {@link #remove(Fragment)} for all\n     * currently added fragments that were added with the same containerViewId\n     * and then {@link #add(int, Fragment, String)} with the same arguments\n     * given here.\n     *\n     * @param containerViewId Identifier of the container whose fragment(s) are\n     * to be replaced.\n     * @param fragment The new fragment to place in the container.\n     * @param tag Optional tag name for the fragment, to later retrieve the\n     * fragment with {@link FragmentManager#findFragmentByTag(String)\n     * FragmentManager.findFragmentByTag(String)}.\n     *\n     * @return Returns the same FragmentTransaction instance.\n     ",
    "links" : [ "android.app.FragmentManager#findFragmentByTag(String)", "#remove(Fragment)", "#add(int" ]
  }, {
    "name" : "public abstract FragmentTransaction remove(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Remove an existing fragment.  If it was added to a container, its view\n     * is also removed from that container.\n     *\n     * @param fragment The fragment to be removed.\n     *\n     * @return Returns the same FragmentTransaction instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FragmentTransaction hide(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Hides an existing fragment.  This is only relevant for fragments whose\n     * views have been added to a container, as this will cause the view to\n     * be hidden.\n     *\n     * @param fragment The fragment to be hidden.\n     *\n     * @return Returns the same FragmentTransaction instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FragmentTransaction show(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Shows a previously hidden fragment.  This is only relevant for fragments whose\n     * views have been added to a container, as this will cause the view to\n     * be shown.\n     *\n     * @param fragment The fragment to be shown.\n     *\n     * @return Returns the same FragmentTransaction instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FragmentTransaction detach(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Detach the given fragment from the UI.  This is the same state as\n     * when it is put on the back stack: the fragment is removed from\n     * the UI, however its state is still being actively managed by the\n     * fragment manager.  When going into this state its view hierarchy\n     * is destroyed.\n     *\n     * @param fragment The fragment to be detached.\n     *\n     * @return Returns the same FragmentTransaction instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FragmentTransaction attach(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Re-attach a fragment after it had previously been detached from\n     * the UI with {@link #detach(Fragment)}.  This\n     * causes its view hierarchy to be re-created, attached to the UI,\n     * and displayed.\n     *\n     * @param fragment The fragment to be attached.\n     *\n     * @return Returns the same FragmentTransaction instance.\n     ",
    "links" : [ "#detach(Fragment)" ]
  }, {
    "name" : "public abstract FragmentTransaction setPrimaryNavigationFragment(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Set a currently active fragment in this FragmentManager as the primary navigation fragment.\n     *\n     * <p>The primary navigation fragment's\n     * {@link Fragment#getChildFragmentManager() child FragmentManager} will be called first\n     * to process delegated navigation actions such as {@link FragmentManager#popBackStack()}\n     * if no ID or transaction name is provided to pop to. Navigation operations outside of the\n     * fragment system may choose to delegate those actions to the primary navigation fragment\n     * as returned by {@link FragmentManager#getPrimaryNavigationFragment()}.</p>\n     *\n     * <p>The fragment provided must currently be added to the FragmentManager to be set as\n     * a primary navigation fragment, or previously added as part of this transaction.</p>\n     *\n     * @param fragment the fragment to set as the primary navigation fragment\n     * @return the same FragmentTransaction instance\n     ",
    "links" : [ "android.app.Fragment#getChildFragmentManager()", "android.app.FragmentManager#getPrimaryNavigationFragment()", "android.app.FragmentManager#popBackStack()" ]
  }, {
    "name" : "public abstract boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * @return <code>true</code> if this transaction contains no operations,\n     * <code>false</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FragmentTransaction setCustomAnimations(@AnimatorRes int enter, @AnimatorRes int exit)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Set specific animation resources to run for the fragments that are\n     * entering and exiting in this transaction. These animations will not be\n     * played when popping the back stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FragmentTransaction setCustomAnimations(@AnimatorRes int enter, @AnimatorRes int exit, @AnimatorRes int popEnter, @AnimatorRes int popExit)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Set specific animation resources to run for the fragments that are\n     * entering and exiting in this transaction. The <code>popEnter</code>\n     * and <code>popExit</code> animations will be played for enter/exit\n     * operations specifically when popping the back stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FragmentTransaction setTransition(@Transit int transit)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Select a standard transition animation for this transaction.  May be\n     * one of {@link #TRANSIT_NONE}, {@link #TRANSIT_FRAGMENT_OPEN},\n     * {@link #TRANSIT_FRAGMENT_CLOSE}, or {@link #TRANSIT_FRAGMENT_FADE}.\n     ",
    "links" : [ "#TRANSIT_FRAGMENT_OPEN", "#TRANSIT_NONE", "#TRANSIT_FRAGMENT_FADE", "#TRANSIT_FRAGMENT_CLOSE" ]
  }, {
    "name" : "public abstract FragmentTransaction addSharedElement(View sharedElement, String name)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Used with to map a View from a removed or hidden Fragment to a View from a shown\n     * or added Fragment.\n     * @param sharedElement A View in a disappearing Fragment to match with a View in an\n     *                      appearing Fragment.\n     * @param name The transitionName for a View in an appearing Fragment to match to the shared\n     *             element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FragmentTransaction setTransitionStyle(@StyleRes int styleRes)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Set a custom style resource that will be used for resolving transit\n     * animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FragmentTransaction addToBackStack(@Nullable String name)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Add this transaction to the back stack.  This means that the transaction\n     * will be remembered after it is committed, and will reverse its operation\n     * when later popped off the stack.\n     *\n     * @param name An optional name for this back stack state, or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isAddToBackStackAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this FragmentTransaction is allowed to be added to the back\n     * stack. If this method would return false, {@link #addToBackStack(String)}\n     * will throw {@link IllegalStateException}.\n     *\n     * @return True if {@link #addToBackStack(String)} is permitted on this transaction.\n     ",
    "links" : [ "IllegalStateException", "#addToBackStack(String)" ]
  }, {
    "name" : "public abstract FragmentTransaction disallowAddToBackStack()",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Disallow calls to {@link #addToBackStack(String)}. Any future calls to\n     * addToBackStack will throw {@link IllegalStateException}. If addToBackStack\n     * has already been called, this method will throw IllegalStateException.\n     ",
    "links" : [ "IllegalStateException", "#addToBackStack(String)" ]
  }, {
    "name" : "public abstract FragmentTransaction setBreadCrumbTitle(@StringRes int res)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Set the full title to show as a bread crumb when this transaction\n     * is on the back stack, as used by {@link FragmentBreadCrumbs}.\n     *\n     * @param res A string resource containing the title.\n     ",
    "links" : [ "android.app.FragmentBreadCrumbs" ]
  }, {
    "name" : "public abstract FragmentTransaction setBreadCrumbTitle(CharSequence text)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Like {@link #setBreadCrumbTitle(int)} but taking a raw string; this\n     * method is <em>not</em> recommended, as the string can not be changed\n     * later if the locale changes.\n     ",
    "links" : [ "#setBreadCrumbTitle(int)" ]
  }, {
    "name" : "public abstract FragmentTransaction setBreadCrumbShortTitle(@StringRes int res)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Set the short title to show as a bread crumb when this transaction\n     * is on the back stack, as used by {@link FragmentBreadCrumbs}.\n     *\n     * @param res A string resource containing the title.\n     ",
    "links" : [ "android.app.FragmentBreadCrumbs" ]
  }, {
    "name" : "public abstract FragmentTransaction setBreadCrumbShortTitle(CharSequence text)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Like {@link #setBreadCrumbShortTitle(int)} but taking a raw string; this\n     * method is <em>not</em> recommended, as the string can not be changed\n     * later if the locale changes.\n     ",
    "links" : [ "#setBreadCrumbShortTitle(int)" ]
  }, {
    "name" : "public abstract FragmentTransaction setReorderingAllowed(boolean reorderingAllowed)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Sets whether or not to allow optimizing operations within and across\n     * transactions. This will remove redundant operations, eliminating\n     * operations that cancel. For example, if two transactions are executed\n     * together, one that adds a fragment A and the next replaces it with fragment B,\n     * the operations will cancel and only fragment B will be added. That means that\n     * fragment A may not go through the creation/destruction lifecycle.\n     * <p>\n     * The side effect of removing redundant operations is that fragments may have state changes\n     * out of the expected order. For example, one transaction adds fragment A,\n     * a second adds fragment B, then a third removes fragment A. Without removing the redundant\n     * operations, fragment B could expect that while it is being created, fragment A will also\n     * exist because fragment A will be removed after fragment B was added.\n     * With removing redundant operations, fragment B cannot expect fragment A to exist when\n     * it has been created because fragment A's add/remove will be optimized out.\n     * <p>\n     * It can also reorder the state changes of Fragments to allow for better Transitions.\n     * Added Fragments may have {@link Fragment#onCreate(Bundle)} called before replaced\n     * Fragments have {@link Fragment#onDestroy()} called.\n     * <p>\n     * The default is {@code false} for applications targeting version\n     * versions prior to O and {@code true} for applications targeting O and\n     * later.\n     *\n     * @param reorderingAllowed {@code true} to enable optimizing out redundant operations\n     *                          or {@code false} to disable optimizing out redundant\n     *                          operations on this transaction.\n     ",
    "links" : [ "android.app.Fragment#onDestroy()", "android.app.Fragment#onCreate(Bundle)" ]
  }, {
    "name" : "public abstract FragmentTransaction runOnCommit(Runnable runnable)",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Add a Runnable to this transaction that will be run after this transaction has\n     * been committed. If fragment transactions are {@link #setReorderingAllowed(boolean) optimized}\n     * this may be after other subsequent fragment operations have also taken place, or operations\n     * in this transaction may have been optimized out due to the presence of a subsequent\n     * fragment transaction in the batch.\n     *\n     *\n     * <p>If a transaction is committed using {@link #commitAllowingStateLoss()} this runnable\n     * may be executed when the FragmentManager is in a state where new transactions may not\n     * be committed without allowing state loss.</p>\n     *\n     * <p><code>runOnCommit</code> may not be used with transactions\n     * {@link #addToBackStack(String) added to the back stack} as Runnables cannot be persisted\n     * with back stack state. {@link IllegalStateException} will be thrown if\n     * {@link #addToBackStack(String)} has been previously called for this transaction\n     * or if it is called after a call to <code>runOnCommit</code>.</p>\n     *\n     * @param runnable Runnable to add\n     * @return this FragmentTransaction\n     * @throws IllegalStateException if {@link #addToBackStack(String)} has been called\n     ",
    "links" : [ "IllegalStateException", "#commitAllowingStateLoss()", "#setReorderingAllowed(boolean)", "#addToBackStack(String)" ]
  }, {
    "name" : "public abstract int commit()",
    "returnType" : "int",
    "comment" : "\n     * Schedules a commit of this transaction.  The commit does\n     * not happen immediately; it will be scheduled as work on the main thread\n     * to be done the next time that thread is ready.\n     *\n     * <p class=\"note\">A transaction can only be committed with this method\n     * prior to its containing activity saving its state.  If the commit is\n     * attempted after that point, an exception will be thrown.  This is\n     * because the state after the commit can be lost if the activity needs to\n     * be restored from its state.  See {@link #commitAllowingStateLoss()} for\n     * situations where it may be okay to lose the commit.</p>\n     *\n     * @return Returns the identifier of this transaction's back stack entry,\n     * if {@link #addToBackStack(String)} had been called.  Otherwise, returns\n     * a negative number.\n     ",
    "links" : [ "#commitAllowingStateLoss()", "#addToBackStack(String)" ]
  }, {
    "name" : "public abstract int commitAllowingStateLoss()",
    "returnType" : "int",
    "comment" : "\n     * Like {@link #commit} but allows the commit to be executed after an\n     * activity's state is saved.  This is dangerous because the commit can\n     * be lost if the activity needs to later be restored from its state, so\n     * this should only be used for cases where it is okay for the UI state\n     * to change unexpectedly on the user.\n     ",
    "links" : [ "#commit" ]
  }, {
    "name" : "public abstract void commitNow()",
    "returnType" : "void",
    "comment" : "\n     * Commits this transaction synchronously. Any added fragments will be\n     * initialized and brought completely to the lifecycle state of their host\n     * and any removed fragments will be torn down accordingly before this\n     * call returns. Committing a transaction in this way allows fragments\n     * to be added as dedicated, encapsulated components that monitor the\n     * lifecycle state of their host while providing firmer ordering guarantees\n     * around when those fragments are fully initialized and ready. Fragments\n     * that manage views will have those views created and attached.\n     *\n     * <p>Calling <code>commitNow</code> is preferable to calling\n     * {@link #commit()} followed by {@link FragmentManager#executePendingTransactions()}\n     * as the latter will have the side effect of attempting to commit <em>all</em>\n     * currently pending transactions whether that is the desired behavior\n     * or not.</p>\n     *\n     * <p>Transactions committed in this way may not be added to the\n     * FragmentManager's back stack, as doing so would break other expected\n     * ordering guarantees for other asynchronously committed transactions.\n     * This method will throw {@link IllegalStateException} if the transaction\n     * previously requested to be added to the back stack with\n     * {@link #addToBackStack(String)}.</p>\n     *\n     * <p class=\"note\">A transaction can only be committed with this method\n     * prior to its containing activity saving its state.  If the commit is\n     * attempted after that point, an exception will be thrown.  This is\n     * because the state after the commit can be lost if the activity needs to\n     * be restored from its state.  See {@link #commitAllowingStateLoss()} for\n     * situations where it may be okay to lose the commit.</p>\n     ",
    "links" : [ "IllegalStateException", "#commitAllowingStateLoss()", "android.app.FragmentManager#executePendingTransactions()", "#addToBackStack(String)", "#commit()" ]
  }, {
    "name" : "public abstract void commitNowAllowingStateLoss()",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #commitNow} but allows the commit to be executed after an\n     * activity's state is saved.  This is dangerous because the commit can\n     * be lost if the activity needs to later be restored from its state, so\n     * this should only be used for cases where it is okay for the UI state\n     * to change unexpectedly on the user.\n     ",
    "links" : [ "#commitNow" ]
  } ],
  "methodNames" : [ "public abstract FragmentTransaction add(Fragment fragment, String tag)", "public abstract FragmentTransaction add(@IdRes int containerViewId, Fragment fragment)", "public abstract FragmentTransaction add(@IdRes int containerViewId, Fragment fragment, String tag)", "public abstract FragmentTransaction replace(@IdRes int containerViewId, Fragment fragment)", "public abstract FragmentTransaction replace(@IdRes int containerViewId, Fragment fragment, String tag)", "public abstract FragmentTransaction remove(Fragment fragment)", "public abstract FragmentTransaction hide(Fragment fragment)", "public abstract FragmentTransaction show(Fragment fragment)", "public abstract FragmentTransaction detach(Fragment fragment)", "public abstract FragmentTransaction attach(Fragment fragment)", "public abstract FragmentTransaction setPrimaryNavigationFragment(Fragment fragment)", "public abstract boolean isEmpty()", "public abstract FragmentTransaction setCustomAnimations(@AnimatorRes int enter, @AnimatorRes int exit)", "public abstract FragmentTransaction setCustomAnimations(@AnimatorRes int enter, @AnimatorRes int exit, @AnimatorRes int popEnter, @AnimatorRes int popExit)", "public abstract FragmentTransaction setTransition(@Transit int transit)", "public abstract FragmentTransaction addSharedElement(View sharedElement, String name)", "public abstract FragmentTransaction setTransitionStyle(@StyleRes int styleRes)", "public abstract FragmentTransaction addToBackStack(@Nullable String name)", "public abstract boolean isAddToBackStackAllowed()", "public abstract FragmentTransaction disallowAddToBackStack()", "public abstract FragmentTransaction setBreadCrumbTitle(@StringRes int res)", "public abstract FragmentTransaction setBreadCrumbTitle(CharSequence text)", "public abstract FragmentTransaction setBreadCrumbShortTitle(@StringRes int res)", "public abstract FragmentTransaction setBreadCrumbShortTitle(CharSequence text)", "public abstract FragmentTransaction setReorderingAllowed(boolean reorderingAllowed)", "public abstract FragmentTransaction runOnCommit(Runnable runnable)", "public abstract int commit()", "public abstract int commitAllowingStateLoss()", "public abstract void commitNow()", "public abstract void commitNowAllowingStateLoss()" ],
  "variableNames" : [ "TRANSIT_ENTER_MASK", "TRANSIT_EXIT_MASK", "TRANSIT_UNSET", "TRANSIT_NONE", "TRANSIT_FRAGMENT_OPEN", "TRANSIT_FRAGMENT_CLOSE", "TRANSIT_FRAGMENT_FADE" ]
}