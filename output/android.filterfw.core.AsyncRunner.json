{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/filterfw/core/AsyncRunner.java",
  "packageName" : "android.filterfw.core",
  "className" : "AsyncRunner",
  "comment" : "\n * @hide\n ",
  "variables" : [ {
    "name" : "mSchedulerClass",
    "type" : "Class",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunner",
    "type" : "SyncRunner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunTask",
    "type" : "AsyncRunnerTask",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDoneListener",
    "type" : "OnRunnerDoneListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isProcessing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mException",
    "type" : "Exception",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogVerbose",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDoneCallback(OnRunnerDoneListener listener)",
    "returnType" : "void",
    "comment" : " Set a callback to be called in the UI thread once the AsyncRunner\n     * completes running a graph, whether the completion is due to a stop() call\n     * or the filters running out of data to process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setGraph(FilterGraph graph)",
    "returnType" : "void",
    "comment" : " Sets the graph to be run. Will call prepare() on graph. Cannot be called\n     * when a graph is already running.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FilterGraph getGraph()",
    "returnType" : "FilterGraph",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void run()",
    "returnType" : "void",
    "comment" : " Execute the graph in a background thread. ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void stop()",
    "returnType" : "void",
    "comment" : " Stop graph execution. This is an asynchronous call; register a callback\n     * with setDoneCallback to be notified of when the background processing has\n     * been completed. Calling stop will close the filter graph. ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean isRunning()",
    "returnType" : "boolean",
    "comment" : " Check if background processing is happening ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Exception getError()",
    "returnType" : "Exception",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void setRunning(boolean running)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void setException(Exception exception)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mSchedulerClass", "mRunner", "mRunTask", "mDoneListener", "isProcessing", "mException", "mLogVerbose", "TAG" ],
  "methodNames" : [ "public void setDoneCallback(OnRunnerDoneListener listener)", "public synchronized void setGraph(FilterGraph graph)", "public FilterGraph getGraph()", "public synchronized void run()", "public synchronized void stop()", "public synchronized void close()", "public synchronized boolean isRunning()", "public synchronized Exception getError()", "private synchronized void setRunning(boolean running)", "private synchronized void setException(Exception exception)" ]
}