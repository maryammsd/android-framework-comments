{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/NetworkRegistrationInfo.java",
  "packageName" : "android.telephony",
  "className" : "NetworkRegistrationInfo",
  "comment" : "\n * Description of a mobile network registration info\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "RETURN_REGISTRATION_STATE_EMERGENCY",
    "type" : "long",
    "comment" : "\n     * A new registration state, REGISTRATION_STATE_EMERGENCY, is added to\n     * {@link NetworkRegistrationInfo}. This change will affect the result of getRegistration().\n     * @hide\n     ",
    "links" : [ "android.telephony.NetworkRegistrationInfo" ]
  }, {
    "name" : "DOMAIN_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown / Unspecified domain ",
    "links" : [ ]
  }, {
    "name" : "DOMAIN_CS",
    "type" : "int",
    "comment" : " Circuit switched domain ",
    "links" : [ ]
  }, {
    "name" : "DOMAIN_PS",
    "type" : "int",
    "comment" : " Packet switched domain ",
    "links" : [ ]
  }, {
    "name" : "DOMAIN_CS_PS",
    "type" : "int",
    "comment" : " Applicable to both CS and PS Domain ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_STATE_NOT_REGISTERED_OR_SEARCHING",
    "type" : "int",
    "comment" : "\n     * Not registered. The device is not currently searching a new operator to register.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_STATE_HOME",
    "type" : "int",
    "comment" : "\n     * Registered on home network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_STATE_NOT_REGISTERED_SEARCHING",
    "type" : "int",
    "comment" : "\n     * Not registered. The device is currently searching a new operator to register.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_STATE_DENIED",
    "type" : "int",
    "comment" : "\n     * Registration denied.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_STATE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Registration state is unknown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_STATE_ROAMING",
    "type" : "int",
    "comment" : "\n     * Registered on roaming network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_STATE_EMERGENCY",
    "type" : "int",
    "comment" : "\n     * Emergency attached in EPS or in 5GS.\n     * IMS service will skip emergency registration if the device is in\n     * emergency attached state. {@link #mEmergencyOnly} can be true\n     * even in case it's not in emergency attached state.\n     *\n     * Reference: 3GPP TS 24.301 9.9.3.11 EPS attach type.\n     * Reference: 3GPP TS 24.501 9.11.3.6 5GS registration result.\n     * @hide\n     ",
    "links" : [ "#mEmergencyOnly" ]
  }, {
    "name" : "NR_STATE_NONE",
    "type" : "int",
    "comment" : "\n     * The device isn't camped on an LTE cell or the LTE cell doesn't support E-UTRA-NR\n     * Dual Connectivity(EN-DC).\n     ",
    "links" : [ ]
  }, {
    "name" : "NR_STATE_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * The device is camped on an LTE cell that supports E-UTRA-NR Dual Connectivity(EN-DC) but\n     * either the use of dual connectivity with NR(DCNR) is restricted or NR is not supported by\n     * the selected PLMN.\n     ",
    "links" : [ ]
  }, {
    "name" : "NR_STATE_NOT_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * The device is camped on an LTE cell that supports E-UTRA-NR Dual Connectivity(EN-DC) and both\n     * the use of dual connectivity with NR(DCNR) is not restricted and NR is supported by the\n     * selected PLMN.\n     ",
    "links" : [ ]
  }, {
    "name" : "NR_STATE_CONNECTED",
    "type" : "int",
    "comment" : "\n     * The device is camped on an LTE cell that supports E-UTRA-NR Dual Connectivity(EN-DC) and\n     * also connected to at least one 5G cell as a secondary serving cell.\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown service\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_TYPE_VOICE",
    "type" : "int",
    "comment" : "\n     * Voice service\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_TYPE_DATA",
    "type" : "int",
    "comment" : "\n     * Data service\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_TYPE_SMS",
    "type" : "int",
    "comment" : "\n     * SMS service\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_TYPE_VIDEO",
    "type" : "int",
    "comment" : "\n     * Video service\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_TYPE_EMERGENCY",
    "type" : "int",
    "comment" : "\n     * Emergency service\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_TYPE_MMS",
    "type" : "int",
    "comment" : "\n     * MMS service\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRST_SERVICE_TYPE",
    "type" : "int",
    "comment" : " @hide  ",
    "links" : [ ]
  }, {
    "name" : "LAST_SERVICE_TYPE",
    "type" : "int",
    "comment" : " @hide  ",
    "links" : [ ]
  }, {
    "name" : "mDomain",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransportType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkRegistrationState",
    "type" : "int",
    "comment" : "\n     * The true registration state of network, This is not affected by any carrier config or\n     * resource overlay.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRegistrationState",
    "type" : "int",
    "comment" : "\n     * The registration state that might have been overridden by config\n     ",
    "links" : [ ]
  }, {
    "name" : "mRoamingType",
    "type" : "int",
    "comment" : "\n     * Save the {@link ServiceState.RoamingType roaming type}. it can be overridden roaming type\n     * from resource overlay or carrier config.\n     ",
    "links" : [ "ServiceState.RoamingType" ]
  }, {
    "name" : "mAccessNetworkTechnology",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNrState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRejectCause",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEmergencyOnly",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAvailableServices",
    "type" : "ArrayList<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCellIdentity",
    "type" : "CellIdentity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVoiceSpecificInfo",
    "type" : "VoiceSpecificRegistrationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataSpecificInfo",
    "type" : "DataSpecificRegistrationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRplmn",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsUsingCarrierAggregation",
    "type" : "boolean",
    "comment" : " Updated based on the accessNetworkTechnology",
    "links" : [ ]
  }, {
    "name" : "mIsNonTerrestrialNetwork",
    "type" : "boolean",
    "comment" : " Set to {@code true} when network is a non-terrestrial network.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<NetworkRegistrationInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getTransportType()",
    "returnType" : "int",
    "comment" : "\n     * @return The transport type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDomain()",
    "returnType" : "int",
    "comment" : "\n     * @return The network domain.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNrState()",
    "returnType" : "int",
    "comment" : "\n     * Get the 5G NR connection state.\n     *\n     * @return the 5G NR connection state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNrState(@NRState int nrState)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getRegistrationState()",
    "returnType" : "int",
    "comment" : "\n     * @return The registration state. Note this value can be affected by the carrier config\n     * override.\n     *\n     * @deprecated Use {@link #getNetworkRegistrationState}, which is not affected by any carrier\n     * config or resource overlay, instead.\n     * @hide\n     ",
    "links" : [ "#getNetworkRegistrationState" ]
  }, {
    "name" : "public int getNetworkRegistrationState()",
    "returnType" : "int",
    "comment" : "\n     * @return The true registration state of network. (This value is not affected by any carrier\n     * config or resource overlay override).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRegistered()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if registered on roaming or home network. Note this value can be\n     * affected by the carrier config override.\n     *\n     * @deprecated Use {@link #isNetworkRegistered}, which is not affected by any carrier config or\n     * resource overlay, instead.\n     ",
    "links" : [ "#isNetworkRegistered" ]
  }, {
    "name" : "public boolean isNetworkRegistered()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if registered on roaming or home network, {@code false} otherwise. (This\n     * value is not affected by any carrier config or resource overlay override).\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSearching()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if searching for service, {@code false} otherwise.\n     *\n     * @deprecated Use {@link #isNetworkRegistered}, which is not affected by any carrier config or\n     * resource overlay, instead.\n     ",
    "links" : [ "#isNetworkRegistered" ]
  }, {
    "name" : "public boolean isNetworkSearching()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if searching for service, {@code false} otherwise. (This value is not\n     * affected by any carrier config or resource overlay override).\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRegisteredPlmn()",
    "returnType" : "String",
    "comment" : "\n     * Get the PLMN-ID for this Network Registration, also known as the RPLMN.\n     *\n     * <p>If the device is registered, this will return the registered PLMN-ID. If registration\n     * has failed, then this will return the PLMN ID of the last attempted registration. If the\n     * device is not registered, or if is registered to a non-3GPP radio technology, then this\n     * will return null.\n     *\n     * <p>See 3GPP TS 23.122 for further information about the Registered PLMN.\n     *\n     * @return the registered PLMN-ID or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRoaming()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if registered on roaming network overridden by config. Note this value\n     * can be affected by the carrier config override.\n     *\n     * @deprecated Use {@link TelephonyDisplayInfo#isRoaming} instead.\n     ",
    "links" : [ "android.telephony.TelephonyDisplayInfo#isRoaming" ]
  }, {
    "name" : "public boolean isNetworkRoaming()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if registered on roaming network. (This value is not affected by any\n     * carrier config or resource overlay override).\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInService()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @return {@code true} if in service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRoamingType(@ServiceState.RoamingType int roamingType)",
    "returnType" : "void",
    "comment" : "\n     * Set {@link ServiceState.RoamingType roaming type}. This could override\n     * roaming type based on resource overlay or carrier config.\n     * @hide\n     ",
    "links" : [ "ServiceState.RoamingType" ]
  }, {
    "name" : "public int getRoamingType()",
    "returnType" : "int",
    "comment" : "\n     * @return the current network roaming type. Note that this value can be possibly overridden by\n     * the carrier config or resource overlay.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmergencyEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether emergency is enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Integer> getAvailableServices()",
    "returnType" : "List<Integer>",
    "comment" : "\n     * @return List of available service types.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAvailableServices(@NonNull @ServiceType List<Integer> availableServices)",
    "returnType" : "void",
    "comment" : "\n     * Set available service types.\n     *\n     * @param availableServices The list of available services for this network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAccessNetworkTechnology()",
    "returnType" : "int",
    "comment" : "\n     * @return The access network technology network type..\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAccessNetworkTechnology(@NetworkType int tech)",
    "returnType" : "void",
    "comment" : "\n     * override the access network technology {@link NetworkType} e.g, rat ratchet.\n     * @hide\n     ",
    "links" : [ "android.telephony.Annotation.NetworkType" ]
  }, {
    "name" : "public int getRejectCause()",
    "returnType" : "int",
    "comment" : "\n     * Get the 3GPP/3GPP2 reason code indicating why registration failed.\n     *\n     * Returns the reason code for non-transient registration failures. Typically this method will\n     * only return the last reason code received during a network selection procedure. The reason\n     * code is system-specific; however, the reason codes for both 3GPP and 3GPP2 systems are\n     * largely equivalent across generations.\n     *\n     * @return registration reject cause if available, otherwise 0. Depending on\n     * {@link #getAccessNetworkTechnology}, the values are defined in 3GPP TS 24.008 10.5.3.6 for\n     * WCDMA/UMTS, 3GPP TS 24.301 9.9.3.9 for LTE/EPS, 3GPP 24.501 Annex A for NR/5GS, or 3GPP2\n     * A.S0001 6.2.2.44 for CDMA.\n     ",
    "links" : [ "#getAccessNetworkTechnology" ]
  }, {
    "name" : "public CellIdentity getCellIdentity()",
    "returnType" : "CellIdentity",
    "comment" : "\n     * Require {@link android.Manifest.permission#ACCESS_FINE_LOCATION}, otherwise return null.\n     *\n     * @return The cell information.\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "public void setIsUsingCarrierAggregation(boolean isUsingCarrierAggregation)",
    "returnType" : "void",
    "comment" : "\n     * Set whether network has configured carrier aggregation or not.\n     *\n     * @param isUsingCarrierAggregation set whether or not carrier aggregation is used.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUsingCarrierAggregation()",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether network has configured carrier aggregation or not.\n     *\n     * @return {@code true} if using carrier aggregation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIsNonTerrestrialNetwork(boolean isNonTerrestrialNetwork)",
    "returnType" : "void",
    "comment" : "\n     * Set whether the network is a non-terrestrial network.\n     *\n     * @param isNonTerrestrialNetwork {@code true} if network is a non-terrestrial network\n     *                                            else {@code false}.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNonTerrestrialNetwork()",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether the network is a non-terrestrial network.\n     *\n     * @return {@code true} if network is a non-terrestrial network else {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public VoiceSpecificRegistrationInfo getVoiceSpecificInfo()",
    "returnType" : "VoiceSpecificRegistrationInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public DataSpecificRegistrationInfo getDataSpecificInfo()",
    "returnType" : "DataSpecificRegistrationInfo",
    "comment" : "\n     * @return Data registration related info\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String serviceTypeToString(@ServiceType int serviceType)",
    "returnType" : "String",
    "comment" : "\n     * Convert service type to string\n     *\n     * @hide\n     *\n     * @param serviceType The service type\n     * @return The service type in string format\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String registrationStateToString(@RegistrationState int registrationState)",
    "returnType" : "String",
    "comment" : "\n     * Convert registration state to string\n     *\n     * @hide\n     *\n     * @param registrationState The registration state\n     * @return The reg state in string\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String nrStateToString(@NRState int nrState)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " static String domainToString(@Domain int domain)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String isNonTerrestrialNetworkToString(boolean isNonTerrestrialNetwork)",
    "returnType" : "String",
    "comment" : "\n     * Convert isNonTerrestrialNetwork to string\n     *\n     * @param isNonTerrestrialNetwork boolean indicating whether network is a non-terrestrial\n     *                                network\n     * @return string format of isNonTerrestrialNetwork.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateNrState()",
    "returnType" : "void",
    "comment" : "\n     * Use the 5G NR Non-Standalone indicators from the network registration state to update the\n     * NR state. There are 3 indicators in the network registration state:\n     *\n     * 1. if E-UTRA-NR Dual Connectivity (EN-DC) is supported by the primary serving cell.\n     * 2. if NR is supported by the selected PLMN.\n     * 3. if the use of dual connectivity with NR is restricted.\n     *\n     * The network has 5G NR capability if E-UTRA-NR Dual Connectivity is supported by the primary\n     * serving cell.\n     *\n     * The use of NR 5G is not restricted If the network has 5G NR capability and both the use of\n     * DCNR is not restricted and NR is supported by the selected PLMN. Otherwise the use of 5G\n     * NR is restricted.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkRegistrationInfo sanitizeLocationInfo()",
    "returnType" : "NetworkRegistrationInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private NetworkRegistrationInfo copy()",
    "returnType" : "NetworkRegistrationInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getTransportType()", "public int getDomain()", "public int getNrState()", "public void setNrState(@NRState int nrState)", "public int getRegistrationState()", "public int getNetworkRegistrationState()", "public boolean isRegistered()", "public boolean isNetworkRegistered()", "public boolean isSearching()", "public boolean isNetworkSearching()", "public String getRegisteredPlmn()", "public boolean isRoaming()", "public boolean isNetworkRoaming()", "public boolean isInService()", "public void setRoamingType(@ServiceState.RoamingType int roamingType)", "public int getRoamingType()", "public boolean isEmergencyEnabled()", "public List<Integer> getAvailableServices()", "public void setAvailableServices(@NonNull @ServiceType List<Integer> availableServices)", "public int getAccessNetworkTechnology()", "public void setAccessNetworkTechnology(@NetworkType int tech)", "public int getRejectCause()", "public CellIdentity getCellIdentity()", "public void setIsUsingCarrierAggregation(boolean isUsingCarrierAggregation)", "public boolean isUsingCarrierAggregation()", "public void setIsNonTerrestrialNetwork(boolean isNonTerrestrialNetwork)", "public boolean isNonTerrestrialNetwork()", "public VoiceSpecificRegistrationInfo getVoiceSpecificInfo()", "public DataSpecificRegistrationInfo getDataSpecificInfo()", "public int describeContents()", "public static String serviceTypeToString(@ServiceType int serviceType)", "public static String registrationStateToString(@RegistrationState int registrationState)", "public static String nrStateToString(@NRState int nrState)", " static String domainToString(@Domain int domain)", "public static String isNonTerrestrialNetworkToString(boolean isNonTerrestrialNetwork)", "public String toString()", "public int hashCode()", "public boolean equals(@Nullable Object o)", "public void writeToParcel(Parcel dest, int flags)", "public void updateNrState()", "public NetworkRegistrationInfo sanitizeLocationInfo()", "private NetworkRegistrationInfo copy()" ],
  "variableNames" : [ "RETURN_REGISTRATION_STATE_EMERGENCY", "DOMAIN_UNKNOWN", "DOMAIN_CS", "DOMAIN_PS", "DOMAIN_CS_PS", "REGISTRATION_STATE_NOT_REGISTERED_OR_SEARCHING", "REGISTRATION_STATE_HOME", "REGISTRATION_STATE_NOT_REGISTERED_SEARCHING", "REGISTRATION_STATE_DENIED", "REGISTRATION_STATE_UNKNOWN", "REGISTRATION_STATE_ROAMING", "REGISTRATION_STATE_EMERGENCY", "NR_STATE_NONE", "NR_STATE_RESTRICTED", "NR_STATE_NOT_RESTRICTED", "NR_STATE_CONNECTED", "SERVICE_TYPE_UNKNOWN", "SERVICE_TYPE_VOICE", "SERVICE_TYPE_DATA", "SERVICE_TYPE_SMS", "SERVICE_TYPE_VIDEO", "SERVICE_TYPE_EMERGENCY", "SERVICE_TYPE_MMS", "FIRST_SERVICE_TYPE", "LAST_SERVICE_TYPE", "mDomain", "mTransportType", "mNetworkRegistrationState", "mRegistrationState", "mRoamingType", "mAccessNetworkTechnology", "mNrState", "mRejectCause", "mEmergencyOnly", "mAvailableServices", "mCellIdentity", "mVoiceSpecificInfo", "mDataSpecificInfo", "mRplmn", "mIsUsingCarrierAggregation", "mIsNonTerrestrialNetwork", "CREATOR" ]
}