{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/LongArrayQueue.java",
  "packageName" : "android.util",
  "className" : "LongArrayQueue",
  "comment" : "\n * A lightweight implementation for a queue with long values.\n * Additionally supports getting an element with a specified position from the head of the queue.\n * The queue grows in size if needed to accommodate new elements.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mValues",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHead",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTail",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void grow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in the queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all elements from this queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addLast(long value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a value to the tail of the queue.\n     *\n     * @param value the value to be added.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long removeFirst()",
    "returnType" : "long",
    "comment" : "\n     * Removes an element from the head of the queue.\n     *\n     * @return the element at the head of the queue.\n     * @throws NoSuchElementException if the queue is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long get(int position)",
    "returnType" : "long",
    "comment" : "\n     * Returns the element at the given position from the head of the queue, where 0 represents the\n     * head of the queue.\n     *\n     * @param position the position from the head of the queue.\n     * @return the element found at the given position.\n     * @throws IndexOutOfBoundsException if {@code position} < {@code 0} or\n     *                                   {@code position} >= {@link #size()}\n     ",
    "links" : [ "#size" ]
  }, {
    "name" : "public long peekFirst()",
    "returnType" : "long",
    "comment" : "\n     * Returns the element at the head of the queue, without removing it.\n     *\n     * @return the element at the head of the queue.\n     * @throws NoSuchElementException if the queue is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public long peekLast()",
    "returnType" : "long",
    "comment" : "\n     * Returns the element at the tail of the queue.\n     *\n     * @return the element at the tail of the queue.\n     * @throws NoSuchElementException if the queue is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mValues", "mSize", "mHead", "mTail" ],
  "methodNames" : [ "private void grow()", "public int size()", "public void clear()", "public void addLast(long value)", "public long removeFirst()", "public long get(int position)", "public long peekFirst()", "public long peekLast()", "public String toString()" ]
}