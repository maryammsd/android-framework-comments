{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/CallDiagnosticService.java",
  "packageName" : "android.telecom",
  "className" : "CallDiagnosticService",
  "comment" : "\n * The platform supports a single OEM provided {@link CallDiagnosticService}, as defined by the\n * {@code call_diagnostic_service_package_name} key in the\n * {@code packages/services/Telecomm/res/values/config.xml} file.  An OEM can use this API to help\n * provide more actionable information about calling issues the user encounters during and after\n * a call.\n *\n * <h1>Manifest Declaration</h1>\n * The following is an example of how to declare the service entry in the\n * {@link CallDiagnosticService} manifest file:\n * <pre>\n * {@code\n * <service android:name=\"your.package.YourCallDiagnosticServiceImplementation\"\n *          android:permission=\"android.permission.BIND_CALL_DIAGNOSTIC_SERVICE\">\n *      <intent-filter>\n *          <action android:name=\"android.telecom.CallDiagnosticService\"/>\n *      </intent-filter>\n * </service>\n * }\n * </pre>\n * <p>\n * <h2>Threading Model</h2>\n * By default, all incoming IPC from Telecom in this service and in the {@link CallDiagnostics}\n * instances will take place on the main thread.  You can override {@link #getExecutor()} in your\n * implementation to provide your own {@link Executor}.\n * @hide\n ",
  "links" : [ "com.android.internal.telecom.ICallDiagnosticService", "android.telecom.CallDiagnostics", "#getExecutor()", "android.os.HandlerExecutor" ],
  "variables" : [ {
    "name" : "mDiagnosticCallListener",
    "type" : "CallDiagnostics.Listener",
    "comment" : "\n     * Listens to events raised by a {@link CallDiagnostics}.\n     ",
    "links" : [ "android.telecom.CallDiagnostics" ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "mCallByTelecomCallId",
    "type" : "Map<String, Call.Details>",
    "comment" : "\n     * Map which tracks the Telecom calls received from the Telecom stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDiagnosticCallByTelecomCallId",
    "type" : "Map<String, CallDiagnostics>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "ICallDiagnosticServiceAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "\n     * Handles binding to the {@link CallDiagnosticService}.\n     *\n     * @param intent The Intent that was used to bind to this service,\n     * as given to {@link android.content.Context#bindService\n     * Context.bindService}.  Note that any extras that were included with\n     * the Intent at that point will <em>not</em> be seen here.\n     * @return\n     ",
    "links" : [ "com.android.internal.telecom.ICallDiagnosticService", "android.content.Context#bindServiceContext.bindService" ]
  }, {
    "name" : "public Executor getExecutor()",
    "returnType" : "Executor",
    "comment" : "\n     * Returns the {@link Executor} to use for incoming IPS from Telecom into your service\n     * implementation.\n     * <p>\n     * Override this method in your {@link CallDiagnosticService} implementation to provide the\n     * executor you want to use for incoming IPC.\n     *\n     * @return the {@link Executor} to use for incoming IPC from Telecom to\n     * {@link CallDiagnosticService} and {@link CallDiagnostics}.\n     ",
    "links" : [ "com.android.internal.telecom.ICallDiagnosticService", "android.telecom.CallDiagnostics", "android.os.HandlerExecutor" ]
  }, {
    "name" : "public abstract CallDiagnostics onInitializeCallDiagnostics(@NonNull android.telecom.Call.Details call)",
    "returnType" : "CallDiagnostics",
    "comment" : "\n     * Telecom calls this method on the {@link CallDiagnosticService} with details about a new call\n     * which was added to Telecom.\n     * <p>\n     * The {@link CallDiagnosticService} returns an implementation of {@link CallDiagnostics} to be\n     * used for the lifespan of this call.\n     * <p>\n     * Calls to this method will use the {@link CallDiagnosticService}'s {@link Executor}; see\n     * {@link CallDiagnosticService#getExecutor()} for more information.\n     *\n     * @param call The details of the new call.\n     * @return An instance of {@link CallDiagnostics} which the {@link CallDiagnosticService}\n     * provides to be used for the lifespan of the call.\n     * @throws IllegalArgumentException if a {@code null} {@link CallDiagnostics} is returned.\n     ",
    "links" : [ "com.android.internal.telecom.ICallDiagnosticService", "android.telecom.CallDiagnostics", "android.os.HandlerExecutor", "com.android.internal.telecom.ICallDiagnosticService#getExecutor()" ]
  }, {
    "name" : "public abstract void onRemoveCallDiagnostics(@NonNull CallDiagnostics call)",
    "returnType" : "void",
    "comment" : "\n     * Telecom calls this method when a previous created {@link CallDiagnostics} is no longer\n     * needed.  This happens when Telecom is no longer tracking the call in question.\n     * <p>\n     * Calls to this method will use the {@link CallDiagnosticService}'s {@link Executor}; see\n     * {@link CallDiagnosticService#getExecutor()} for more information.\n     *\n     * @param call The diagnostic call which is no longer tracked by Telecom.\n     ",
    "links" : [ "com.android.internal.telecom.ICallDiagnosticService", "android.telecom.CallDiagnostics", "android.os.HandlerExecutor", "com.android.internal.telecom.ICallDiagnosticService#getExecutor()" ]
  }, {
    "name" : "public abstract void onCallAudioStateChanged(@NonNull CallAudioState audioState)",
    "returnType" : "void",
    "comment" : "\n     * Telecom calls this method when the audio routing or available audio route information\n     * changes.\n     * <p>\n     * Audio state is common to all calls.\n     * <p>\n     * Calls to this method will use the {@link CallDiagnosticService}'s {@link Executor}; see\n     * {@link CallDiagnosticService#getExecutor()} for more information.\n     *\n     * @param audioState The new audio state.\n     ",
    "links" : [ "com.android.internal.telecom.ICallDiagnosticService", "android.os.HandlerExecutor", "com.android.internal.telecom.ICallDiagnosticService#getExecutor()" ]
  }, {
    "name" : "public abstract void onBluetoothCallQualityReportReceived(@NonNull BluetoothCallQualityReport qualityReport)",
    "returnType" : "void",
    "comment" : "\n     * Telecom calls this method when a {@link BluetoothCallQualityReport} is received from the\n     * bluetooth stack.\n     * <p>\n     * Calls to this method will use the {@link CallDiagnosticService}'s {@link Executor}; see\n     * {@link CallDiagnosticService#getExecutor()} for more information.\n     *\n     * @param qualityReport the {@link BluetoothCallQualityReport}.\n     ",
    "links" : [ "android.telecom.BluetoothCallQualityReport", "com.android.internal.telecom.ICallDiagnosticService", "android.os.HandlerExecutor", "com.android.internal.telecom.ICallDiagnosticService#getExecutor()" ]
  }, {
    "name" : "private void handleSetAdapter(@NonNull ICallDiagnosticServiceAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * Handles a request from Telecom to set the adapater used to communicate back to Telecom.\n     * @param adapter\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleCallAdded(@NonNull ParcelableCall parcelableCall)",
    "returnType" : "void",
    "comment" : "\n     * Handles a request from Telecom to add a new call.\n     * @param parcelableCall\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleCallUpdated(@NonNull ParcelableCall parcelableCall)",
    "returnType" : "void",
    "comment" : "\n     * Handles an update to {@link Call.Details} notified by Telecom.\n     * Caches the call details and notifies the {@link CallDiagnostics} of the change via\n     * {@link CallDiagnostics#onCallDetailsChanged(Call.Details)}.\n     * @param parcelableCall the new parceled call details from Telecom.\n     ",
    "links" : [ "android.telecom.CallDiagnostics#onCallDetailsChanged(Call.Details)", "android.telecom.CallDiagnostics", "Call.Details" ]
  }, {
    "name" : "private void handleCallRemoved(@NonNull String telecomCallId)",
    "returnType" : "void",
    "comment" : "\n     * Handles a request from Telecom to remove an existing call.\n     * @param telecomCallId\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleReceivedD2DMessage(@NonNull String callId, int message, int value)",
    "returnType" : "void",
    "comment" : "\n     * Handles an incoming device to device message received from Telecom.  Notifies the\n     * {@link CallDiagnostics} via {@link CallDiagnostics#onReceiveDeviceToDeviceMessage(int, int)}.\n     * @param callId\n     * @param message\n     * @param value\n     ",
    "links" : [ "android.telecom.CallDiagnostics#onReceiveDeviceToDeviceMessage(int", "android.telecom.CallDiagnostics" ]
  }, {
    "name" : "private void handleCallDisconnected(@NonNull String callId, @NonNull DisconnectCause disconnectCause)",
    "returnType" : "void",
    "comment" : "\n     * Handles a request from the Telecom framework to get a disconnect message from the\n     * {@link CallDiagnosticService}.\n     * @param callId The ID of the call.\n     * @param disconnectCause The telecom disconnect cause.\n     ",
    "links" : [ "com.android.internal.telecom.ICallDiagnosticService" ]
  }, {
    "name" : "private void handleBluetoothCallQualityReport(@NonNull BluetoothCallQualityReport qualityReport)",
    "returnType" : "void",
    "comment" : "\n     * Handles an incoming bluetooth call quality report from Telecom.  Notifies via\n     * {@link CallDiagnosticService#onBluetoothCallQualityReportReceived(\n     * BluetoothCallQualityReport)}.\n     * @param qualityReport The bluetooth call quality remote.\n     ",
    "links" : [ "com.android.internal.telecom.ICallDiagnosticService#onBluetoothCallQualityReportReceived(" ]
  }, {
    "name" : "private void handleCallQualityChanged(@NonNull String callId, @NonNull CallQuality callQuality)",
    "returnType" : "void",
    "comment" : "\n     * Handles a change reported by Telecom to the call quality for a call.\n     * @param callId the call ID the change applies to.\n     * @param callQuality The new call quality.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleSendDeviceToDeviceMessage(@NonNull CallDiagnostics callDiagnostics, int message, int value)",
    "returnType" : "void",
    "comment" : "\n     * Handles a request from a {@link CallDiagnostics} to send a device to device message (received\n     * via {@link CallDiagnostics#sendDeviceToDeviceMessage(int, int)}.\n     * @param callDiagnostics\n     * @param message\n     * @param value\n     ",
    "links" : [ "android.telecom.CallDiagnostics", "android.telecom.CallDiagnostics#sendDeviceToDeviceMessage(int" ]
  }, {
    "name" : "private void handleDisplayDiagnosticMessage(CallDiagnostics callDiagnostics, int messageId, CharSequence message)",
    "returnType" : "void",
    "comment" : "\n     * Handles a request from a {@link CallDiagnostics} to display an in-call diagnostic message.\n     * Originates from {@link CallDiagnostics#displayDiagnosticMessage(int, CharSequence)}.\n     * @param callDiagnostics\n     * @param messageId\n     * @param message\n     ",
    "links" : [ "android.telecom.CallDiagnostics#displayDiagnosticMessage(int", "android.telecom.CallDiagnostics" ]
  }, {
    "name" : "private void handleClearDiagnosticMessage(CallDiagnostics callDiagnostics, int messageId)",
    "returnType" : "void",
    "comment" : "\n     * Handles a request from a {@link CallDiagnostics} to clear a previously shown diagnostic\n     * message.\n     * Originates from {@link CallDiagnostics#clearDiagnosticMessage(int)}.\n     * @param callDiagnostics\n     * @param messageId\n     ",
    "links" : [ "android.telecom.CallDiagnostics", "android.telecom.CallDiagnostics#clearDiagnosticMessage(int)" ]
  } ],
  "methodNames" : [ "public IBinder onBind(@NonNull Intent intent)", "public Executor getExecutor()", "public abstract CallDiagnostics onInitializeCallDiagnostics(@NonNull android.telecom.Call.Details call)", "public abstract void onRemoveCallDiagnostics(@NonNull CallDiagnostics call)", "public abstract void onCallAudioStateChanged(@NonNull CallAudioState audioState)", "public abstract void onBluetoothCallQualityReportReceived(@NonNull BluetoothCallQualityReport qualityReport)", "private void handleSetAdapter(@NonNull ICallDiagnosticServiceAdapter adapter)", "private void handleCallAdded(@NonNull ParcelableCall parcelableCall)", "private void handleCallUpdated(@NonNull ParcelableCall parcelableCall)", "private void handleCallRemoved(@NonNull String telecomCallId)", "private void handleReceivedD2DMessage(@NonNull String callId, int message, int value)", "private void handleCallDisconnected(@NonNull String callId, @NonNull DisconnectCause disconnectCause)", "private void handleBluetoothCallQualityReport(@NonNull BluetoothCallQualityReport qualityReport)", "private void handleCallQualityChanged(@NonNull String callId, @NonNull CallQuality callQuality)", "private void handleSendDeviceToDeviceMessage(@NonNull CallDiagnostics callDiagnostics, int message, int value)", "private void handleDisplayDiagnosticMessage(CallDiagnostics callDiagnostics, int messageId, CharSequence message)", "private void handleClearDiagnosticMessage(CallDiagnostics callDiagnostics, int messageId)" ],
  "variableNames" : [ "mDiagnosticCallListener", "SERVICE_INTERFACE", "mCallByTelecomCallId", "mDiagnosticCallByTelecomCallId", "mLock", "mAdapter" ]
}