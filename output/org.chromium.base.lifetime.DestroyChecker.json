{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/lifetime/DestroyChecker.java",
  "packageName" : "org.chromium.base.lifetime",
  "className" : "DestroyChecker",
  "comment" : "\n * Utility class that help ensure destruction of objects happens only once.\n *\n * This class does not guarantee thread safety. When thread safety is desired, please use\n * {@see org.chromium.base.ThreadUtils.ThreadChecker}.\n *\n * To use:\n *   1. In constructor of an instance a DestroyChecker field should be initialized with a new\n *      DestroyChecker.\n *   2. All of the methods that need to ensure that the object is used safely, should call\n *      {@link #checkNotDestroyed()} to make sure that DestroyChecker hasn't been destroyed.\n *   3. When the guarded object is destroyed, it should be enough to call {@link #destroy()} on the\n *      DestroyChecker. That operation is not idempotent, and it asserts the state of the checker.\n *      It is therefore not necessary to call {@link #checkNotDestroyed()} in that case. It is also\n *      not allowed to call {@link #destroy()} more than once.\n ",
  "links" : [ "#checkNotDestroyed()", "#destroy()" ],
  "variables" : [ {
    "name" : "mIsDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : " Returns whether the checker is already destroyed. ",
    "links" : [ ]
  }, {
    "name" : "public void checkNotDestroyed()",
    "returnType" : "void",
    "comment" : " Checks whether the object is already destroyed and asserts if it is. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void destroy()", "public boolean isDestroyed()", "public void checkNotDestroyed()" ],
  "variableNames" : [ "mIsDestroyed" ]
}