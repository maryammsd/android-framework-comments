{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Trie2Writable.java",
  "packageName" : "android.icu.impl",
  "className" : "Trie2Writable",
  "comment" : "\n * @author aheninger\n *\n * A Trie2Writable is a modifiable, or build-time Trie2.\n * Functions for reading data from the Trie are all from class Trie2.\n * @hide Only a subset of ICU is exposed in Android\n * \n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "UTRIE2_MAX_INDEX_LENGTH",
    "type" : "int",
    "comment" : "\n     * Maximum length of the runtime index array.\n     * Limited by its own 16-bit index values, and by uint16_t UTrie2Header.indexLength.\n     * (The actual maximum length is lower,\n     * (0x110000>>UTRIE2_SHIFT_2)+UTRIE2_UTF8_2B_INDEX_2_LENGTH+UTRIE2_MAX_INDEX_1_LENGTH.)\n     ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_MAX_DATA_LENGTH",
    "type" : "int",
    "comment" : "\n     * Maximum length of the runtime data array.\n     * Limited by 16-bit index values that are left-shifted by UTRIE2_INDEX_SHIFT,\n     * and by uint16_t UTrie2Header.shiftedDataLength.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_INITIAL_DATA_LENGTH",
    "type" : "int",
    "comment" : " Start with allocation of 16k data entries. ",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_MEDIUM_DATA_LENGTH",
    "type" : "int",
    "comment" : " Grow about 8x each time. ",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_INDEX_2_NULL_OFFSET",
    "type" : "int",
    "comment" : " The null index-2 block, following the gap in the index-2 table. ",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_INDEX_2_START_OFFSET",
    "type" : "int",
    "comment" : " The start of allocated index-2 blocks. ",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_DATA_NULL_OFFSET",
    "type" : "int",
    "comment" : "\n     * The null data block.\n     * Length 64=0x40 even if UTRIE2_DATA_BLOCK_LENGTH is smaller,\n     * to work with 6-bit trail bytes from 2-byte UTF-8.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_DATA_START_OFFSET",
    "type" : "int",
    "comment" : " The start of allocated data blocks. ",
    "links" : [ ]
  }, {
    "name" : "UNEWTRIE2_DATA_0800_OFFSET",
    "type" : "int",
    "comment" : "\n     * The start of data blocks for U+0800 and above.\n     * Below, compaction uses a block length of 64 for 2-byte UTF-8.\n     * From here on, compaction uses UTRIE2_DATA_BLOCK_LENGTH.\n     * Data values for 0x780 code points beyond ASCII.\n     ",
    "links" : [ ]
  }, {
    "name" : "index1",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index2",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "data",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index2Length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dataCapacity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "firstFreeBlock",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index2NullOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isCompacted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "map",
    "type" : "int[]",
    "comment" : "\n     * Multi-purpose per-data-block table.\n     *\n     * Before compacting:\n     *\n     * Per-data-block reference counters/free-block list.\n     *  0: unused\n     * >0: reference counter (number of index-2 entries pointing here)\n     * <0: next free data block in free-block list\n     *\n     * While compacting:\n     *\n     * Map of adjusted indexes, used in compactData() and compactIndex2().\n     * Maps from original indexes to new ones.\n     ",
    "links" : [ ]
  }, {
    "name" : "UTRIE2_DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init(int initialValueP, int errorValueP)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isInNullBlock(int c, boolean forLSCP)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int allocIndex2Block()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getIndex2Block(int c, boolean forLSCP)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int allocDataBlock(int copyBlock)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseDataBlock(int block)",
    "returnType" : "void",
    "comment" : " call when the block's reference counter reaches 0 ",
    "links" : [ ]
  }, {
    "name" : "private boolean isWritableBlock(int block)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setIndex2Entry(int i2, int block)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getDataBlock(int c, boolean forLSCP)",
    "returnType" : "int",
    "comment" : "\n     * No error checking for illegal arguments.\n     * \n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Trie2Writable set(int c, int value)",
    "returnType" : "Trie2Writable",
    "comment" : "\n     * Set a value for a code point.\n     *\n     * @param c the code point\n     * @param value the value\n     ",
    "links" : [ ]
  }, {
    "name" : "private Trie2Writable set(int c, boolean forLSCP, int value)",
    "returnType" : "Trie2Writable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void uncompact()",
    "returnType" : "void",
    "comment" : "\n     * Uncompact a compacted Trie2Writable.\n     * This is needed if a the WritableTrie2 was compacted in preparation for creating a read-only\n     * Trie2, and then is subsequently altered.\n     * \n     * The structure is a bit awkward - it would be cleaner to leave the original\n     * Trie2 unaltered - but compacting in place was taken directly from the ICU4C code.\n     * \n     * The approach is to create a new (uncompacted) Trie2Writable from this one, then transfer\n     * the guts from the new to the old.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeBlock(int block, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fillBlock(int block, int start, int limit, int value, int initialValue, boolean overwrite)",
    "returnType" : "void",
    "comment" : "\n     * initialValue is ignored if overwrite=true\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Trie2Writable setRange(int start, int end, int value, boolean overwrite)",
    "returnType" : "Trie2Writable",
    "comment" : "\n     * Set a value in a range of code points [start..end].\n     * All code points c with start<=c<=end will get the value if\n     * overwrite is true or if the old value is the initial value.\n     *\n     * @param start the first code point to get the value\n     * @param end the last code point to get the value (inclusive)\n     * @param value the value\n     * @param overwrite flag for whether old non-initial values are to be overwritten\n     ",
    "links" : [ ]
  }, {
    "name" : "public Trie2Writable setRange(Trie2.Range range, boolean overwrite)",
    "returnType" : "Trie2Writable",
    "comment" : "\n      * Set the values from a Trie2.Range.\n      * \n      * All code points within the range will get the value if\n      * overwrite is true or if the old value is the initial value.\n      *\n      * Ranges with the lead surrogate flag set will set the alternate\n      * lead-surrogate values in the Trie, rather than the code point values.\n      * \n      * This function is intended to work with the ranges produced when iterating\n      * the contents of a source Trie.\n      * \n      * @param range contains the range of code points and the value to be set.\n      * @param overwrite flag for whether old non-initial values are to be overwritten\n      ",
    "links" : [ ]
  }, {
    "name" : "public Trie2Writable setForLeadSurrogateCodeUnit(char codeUnit, int value)",
    "returnType" : "Trie2Writable",
    "comment" : "\n      * Set a value for a UTF-16 code unit.\n      * Note that a Trie2 stores separate values for \n      * supplementary code points in the lead surrogate range\n      * (accessed via the plain set() and get() interfaces)\n      * and for lead surrogate code units.\n      * \n      * The lead surrogate code unit values are set via this function and\n      * read by the function getFromU16SingleLead().\n      * \n      * For code units outside of the lead surrogate range, this function\n      * behaves identically to set().\n      * \n      * @param codeUnit A UTF-16 code unit. \n      * @param value the value to be stored in the Trie2.\n      ",
    "links" : [ ]
  }, {
    "name" : "public int get(int codePoint)",
    "returnType" : "int",
    "comment" : "\n      * Get the value for a code point as stored in the Trie2.\n      *\n      * @param codePoint the code point\n      * @return the value\n      ",
    "links" : [ ]
  }, {
    "name" : "private int get(int c, boolean fromLSCP)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFromU16SingleLead(char c)",
    "returnType" : "int",
    "comment" : "\n     * Get a trie value for a UTF-16 code unit.\n     * \n     * This function returns the same value as get() if the input \n     * character is outside of the lead surrogate range\n     * \n     * There are two values stored in a Trie for inputs in the lead\n     * surrogate range.  This function returns the alternate value,\n     * while Trie2.get() returns the main value.\n     * \n     * @param c the code point or lead surrogate value.\n     * @return the value\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean equal_int(int[] a, int s, int t, int length)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findSameIndex2Block(int index2Length, int otherBlock)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findSameDataBlock(int dataLength, int otherBlock, int blockLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findHighStart(int highValue)",
    "returnType" : "int",
    "comment" : "\n     * Find the start of the last range in the trie by enumerating backward.\n     * Indexes for supplementary code points higher than this will be omitted.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void compactData()",
    "returnType" : "void",
    "comment" : "\n     * Compact a build-time trie.\n     *\n     * The compaction\n     * - removes blocks that are identical with earlier ones\n     * - overlaps adjacent blocks as much as possible (if overlap==true)\n     * - moves blocks in steps of the data granularity\n     * - moves and overlaps blocks that overlap with multiple values in the overlap region\n     *\n     * It does not\n     * - try to move and overlap blocks that are not already adjacent\n     ",
    "links" : [ ]
  }, {
    "name" : "private void compactIndex2()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void compactTrie()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Trie2_16 toTrie2_16()",
    "returnType" : "Trie2_16",
    "comment" : "\n     * Produce an optimized, read-only Trie2_16 from this writable Trie.\n     * The data values outside of the range that will fit in a 16 bit\n     * unsigned value will be truncated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Trie2_32 toTrie2_32()",
    "returnType" : "Trie2_32",
    "comment" : "\n     * Produce an optimized, read-only Trie2_32 from this writable Trie.\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "private void freeze(Trie2 dest, ValueWidth valueBits)",
    "returnType" : "void",
    "comment" : " Compact the data and then populate an optimized read-only Trie.  ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init(int initialValueP, int errorValueP)", "private boolean isInNullBlock(int c, boolean forLSCP)", "private int allocIndex2Block()", "private int getIndex2Block(int c, boolean forLSCP)", "private int allocDataBlock(int copyBlock)", "private void releaseDataBlock(int block)", "private boolean isWritableBlock(int block)", "private void setIndex2Entry(int i2, int block)", "private int getDataBlock(int c, boolean forLSCP)", "public Trie2Writable set(int c, int value)", "private Trie2Writable set(int c, boolean forLSCP, int value)", "private void uncompact()", "private void writeBlock(int block, int value)", "private void fillBlock(int block, int start, int limit, int value, int initialValue, boolean overwrite)", "public Trie2Writable setRange(int start, int end, int value, boolean overwrite)", "public Trie2Writable setRange(Trie2.Range range, boolean overwrite)", "public Trie2Writable setForLeadSurrogateCodeUnit(char codeUnit, int value)", "public int get(int codePoint)", "private int get(int c, boolean fromLSCP)", "public int getFromU16SingleLead(char c)", "private boolean equal_int(int[] a, int s, int t, int length)", "private int findSameIndex2Block(int index2Length, int otherBlock)", "private int findSameDataBlock(int dataLength, int otherBlock, int blockLength)", "private int findHighStart(int highValue)", "private void compactData()", "private void compactIndex2()", "private void compactTrie()", "public Trie2_16 toTrie2_16()", "public Trie2_32 toTrie2_32()", "private void freeze(Trie2 dest, ValueWidth valueBits)" ],
  "variableNames" : [ "UTRIE2_MAX_INDEX_LENGTH", "UTRIE2_MAX_DATA_LENGTH", "UNEWTRIE2_INITIAL_DATA_LENGTH", "UNEWTRIE2_MEDIUM_DATA_LENGTH", "UNEWTRIE2_INDEX_2_NULL_OFFSET", "UNEWTRIE2_INDEX_2_START_OFFSET", "UNEWTRIE2_DATA_NULL_OFFSET", "UNEWTRIE2_DATA_START_OFFSET", "UNEWTRIE2_DATA_0800_OFFSET", "index1", "index2", "data", "index2Length", "dataCapacity", "firstFreeBlock", "index2NullOffset", "isCompacted", "map", "UTRIE2_DEBUG" ]
}