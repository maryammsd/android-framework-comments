{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Objects.java",
  "packageName" : "java.util",
  "className" : "Objects",
  "comment" : "\n * This class consists of {@code static} utility methods for operating\n * on objects, or checking certain conditions before operation.  These utilities\n * include {@code null}-safe or {@code null}-tolerant methods for computing the\n * hash code of an object, returning a string for an object, comparing two\n * objects, and checking if indexes or sub-range values are out of bounds.\n *\n * @since 1.7\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static boolean equals(Object a, Object b)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the arguments are equal to each other\n     * and {@code false} otherwise.\n     * Consequently, if both arguments are {@code null}, {@code true}\n     * is returned.  Otherwise, if the first argument is not {@code\n     * null}, equality is determined by calling the {@link\n     * Object#equals equals} method of the first argument with the\n     * second argument of this method. Otherwise, {@code false} is\n     * returned.\n     *\n     * @param a an object\n     * @param b an object to be compared with {@code a} for equality\n     * @return {@code true} if the arguments are equal to each other\n     * and {@code false} otherwise\n     * @see Object#equals(Object)\n     ",
    "links" : [ "#equals" ]
  }, {
    "name" : "public static boolean deepEquals(Object a, Object b)",
    "returnType" : "boolean",
    "comment" : "\n    * Returns {@code true} if the arguments are deeply equal to each other\n    * and {@code false} otherwise.\n    *\n    * Two {@code null} values are deeply equal.  If both arguments are\n    * arrays, the algorithm in {@link Arrays#deepEquals(Object[],\n    * Object[]) Arrays.deepEquals} is used to determine equality.\n    * Otherwise, equality is determined by using the {@link\n    * Object#equals equals} method of the first argument.\n    *\n    * @param a an object\n    * @param b an object to be compared with {@code a} for deep equality\n    * @return {@code true} if the arguments are deeply equal to each other\n    * and {@code false} otherwise\n    * @see Arrays#deepEquals(Object[], Object[])\n    * @see Objects#equals(Object, Object)\n    ",
    "links" : [ "#equals", "java.util.Arrays#deepEquals(Object" ]
  }, {
    "name" : "public static int hashCode(Object o)",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code of a non-{@code null} argument and 0 for\n     * a {@code null} argument.\n     *\n     * @param o an object\n     * @return the hash code of a non-{@code null} argument and 0 for\n     * a {@code null} argument\n     * @see Object#hashCode\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int hash(Object... values)",
    "returnType" : "int",
    "comment" : "\n    * Generates a hash code for a sequence of input values. The hash\n    * code is generated as if all the input values were placed into an\n    * array, and that array were hashed by calling {@link\n    * Arrays#hashCode(Object[])}.\n    *\n    * <p>This method is useful for implementing {@link\n    * Object#hashCode()} on objects containing multiple fields. For\n    * example, if an object that has three fields, {@code x}, {@code\n    * y}, and {@code z}, one could write:\n    *\n    * <blockquote><pre>\n    * &#064;Override public int hashCode() {\n    *     return Objects.hash(x, y, z);\n    * }\n    * </pre></blockquote>\n    *\n    * <b>Warning: When a single object reference is supplied, the returned\n    * value does not equal the hash code of that object reference.</b> This\n    * value can be computed by calling {@link #hashCode(Object)}.\n    *\n    * @param values the values to be hashed\n    * @return a hash value of the sequence of input values\n    * @see Arrays#hashCode(Object[])\n    * @see List#hashCode\n    ",
    "links" : [ "#hashCode()", "java.util.Arrays#hashCode(Object", "#hashCode(Object)" ]
  }, {
    "name" : "public static String toString(Object o)",
    "returnType" : "String",
    "comment" : "\n     * Returns the result of calling {@code toString} for a non-{@code\n     * null} argument and {@code \"null\"} for a {@code null} argument.\n     *\n     * @param o an object\n     * @return the result of calling {@code toString} for a non-{@code\n     * null} argument and {@code \"null\"} for a {@code null} argument\n     * @see Object#toString\n     * @see String#valueOf(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toString(Object o, String nullDefault)",
    "returnType" : "String",
    "comment" : "\n     * Returns the result of calling {@code toString} on the first\n     * argument if the first argument is not {@code null} and returns\n     * the second argument otherwise.\n     *\n     * @param o an object\n     * @param nullDefault string to return if the first argument is\n     *        {@code null}\n     * @return the result of calling {@code toString} on the first\n     * argument if it is not {@code null} and the second argument\n     * otherwise.\n     * @see Objects#toString(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(T a, T b, Comparator<? super T> c)",
    "returnType" : "int",
    "comment" : "\n     * Returns 0 if the arguments are identical and {@code\n     * c.compare(a, b)} otherwise.\n     * Consequently, if both arguments are {@code null} 0\n     * is returned.\n     *\n     * <p>Note that if one of the arguments is {@code null}, a {@code\n     * NullPointerException} may or may not be thrown depending on\n     * what ordering policy, if any, the {@link Comparator Comparator}\n     * chooses to have for {@code null} values.\n     *\n     * @param <T> the type of the objects being compared\n     * @param a an object\n     * @param b an object to be compared with {@code a}\n     * @param c the {@code Comparator} to compare the first two arguments\n     * @return 0 if the arguments are identical and {@code\n     * c.compare(a, b)} otherwise.\n     * @see Comparable\n     * @see Comparator\n     ",
    "links" : [ "java.util.Comparator" ]
  }, {
    "name" : "public static T requireNonNull(T obj)",
    "returnType" : "T",
    "comment" : "\n     * Checks that the specified object reference is not {@code null}. This\n     * method is designed primarily for doing parameter validation in methods\n     * and constructors, as demonstrated below:\n     * <blockquote><pre>\n     * public Foo(Bar bar) {\n     *     this.bar = Objects.requireNonNull(bar);\n     * }\n     * </pre></blockquote>\n     *\n     * @param obj the object reference to check for nullity\n     * @param <T> the type of the reference\n     * @return {@code obj} if not {@code null}\n     * @throws NullPointerException if {@code obj} is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T requireNonNull(T obj, String message)",
    "returnType" : "T",
    "comment" : "\n     * Checks that the specified object reference is not {@code null} and\n     * throws a customized {@link NullPointerException} if it is. This method\n     * is designed primarily for doing parameter validation in methods and\n     * constructors with multiple parameters, as demonstrated below:\n     * <blockquote><pre>\n     * public Foo(Bar bar, Baz baz) {\n     *     this.bar = Objects.requireNonNull(bar, \"bar must not be null\");\n     *     this.baz = Objects.requireNonNull(baz, \"baz must not be null\");\n     * }\n     * </pre></blockquote>\n     *\n     * @param obj     the object reference to check for nullity\n     * @param message detail message to be used in the event that a {@code\n     *                NullPointerException} is thrown\n     * @param <T> the type of the reference\n     * @return {@code obj} if not {@code null}\n     * @throws NullPointerException if {@code obj} is {@code null}\n     ",
    "links" : [ "NullPointerException" ]
  }, {
    "name" : "public static boolean isNull(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the provided reference is {@code null} otherwise\n     * returns {@code false}.\n     *\n     * @apiNote This method exists to be used as a\n     * {@link java.util.function.Predicate}, {@code filter(Objects::isNull)}\n     *\n     * @param obj a reference to be checked against {@code null}\n     * @return {@code true} if the provided reference is {@code null} otherwise\n     * {@code false}\n     *\n     * @see java.util.function.Predicate\n     * @since 1.8\n     ",
    "links" : [ "java.util.function.Predicate" ]
  }, {
    "name" : "public static boolean nonNull(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the provided reference is non-{@code null}\n     * otherwise returns {@code false}.\n     *\n     * @apiNote This method exists to be used as a\n     * {@link java.util.function.Predicate}, {@code filter(Objects::nonNull)}\n     *\n     * @param obj a reference to be checked against {@code null}\n     * @return {@code true} if the provided reference is non-{@code null}\n     * otherwise {@code false}\n     *\n     * @see java.util.function.Predicate\n     * @since 1.8\n     ",
    "links" : [ "java.util.function.Predicate" ]
  }, {
    "name" : "public static T requireNonNullElse(T obj, T defaultObj)",
    "returnType" : "T",
    "comment" : "\n     * Returns the first argument if it is non-{@code null} and\n     * otherwise returns the non-{@code null} second argument.\n     *\n     * @param obj an object\n     * @param defaultObj a non-{@code null} object to return if the first argument\n     *                   is {@code null}\n     * @param <T> the type of the reference\n     * @return the first argument if it is non-{@code null} and\n     *        otherwise the second argument if it is non-{@code null}\n     * @throws NullPointerException if both {@code obj} is null and\n     *        {@code defaultObj} is {@code null}\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T requireNonNullElseGet(T obj, Supplier<? extends T> supplier)",
    "returnType" : "T",
    "comment" : "\n     * Returns the first argument if it is non-{@code null} and otherwise\n     * returns the non-{@code null} value of {@code supplier.get()}.\n     *\n     * @param obj an object\n     * @param supplier of a non-{@code null} object to return if the first argument\n     *                 is {@code null}\n     * @param <T> the type of the first argument and return type\n     * @return the first argument if it is non-{@code null} and otherwise\n     *         the value from {@code supplier.get()} if it is non-{@code null}\n     * @throws NullPointerException if both {@code obj} is null and\n     *        either the {@code supplier} is {@code null} or\n     *        the {@code supplier.get()} value is {@code null}\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T requireNonNull(T obj, Supplier<String> messageSupplier)",
    "returnType" : "T",
    "comment" : "\n     * Checks that the specified object reference is not {@code null} and\n     * throws a customized {@link NullPointerException} if it is.\n     *\n     * <p>Unlike the method {@link #requireNonNull(Object, String)},\n     * this method allows creation of the message to be deferred until\n     * after the null check is made. While this may confer a\n     * performance advantage in the non-null case, when deciding to\n     * call this method care should be taken that the costs of\n     * creating the message supplier are less than the cost of just\n     * creating the string message directly.\n     *\n     * @param obj     the object reference to check for nullity\n     * @param messageSupplier supplier of the detail message to be\n     * used in the event that a {@code NullPointerException} is thrown\n     * @param <T> the type of the reference\n     * @return {@code obj} if not {@code null}\n     * @throws NullPointerException if {@code obj} is {@code null}\n     * @since 1.8\n     ",
    "links" : [ "#requireNonNull(Object", "NullPointerException" ]
  }, {
    "name" : "public static int checkIndex(int index, int length)",
    "returnType" : "int",
    "comment" : "@ForceInline",
    "links" : [ ]
  }, {
    "name" : "public static int checkFromToIndex(int fromIndex, int toIndex, int length)",
    "returnType" : "int",
    "comment" : "\n     * Checks if the sub-range from {@code fromIndex} (inclusive) to\n     * {@code toIndex} (exclusive) is within the bounds of range from {@code 0}\n     * (inclusive) to {@code length} (exclusive).\n     *\n     * <p>The sub-range is defined to be out of bounds if any of the following\n     * inequalities is true:\n     * <ul>\n     *  <li>{@code fromIndex < 0}</li>\n     *  <li>{@code fromIndex > toIndex}</li>\n     *  <li>{@code toIndex > length}</li>\n     *  <li>{@code length < 0}, which is implied from the former inequalities</li>\n     * </ul>\n     *\n     * @param fromIndex the lower-bound (inclusive) of the sub-range\n     * @param toIndex the upper-bound (exclusive) of the sub-range\n     * @param length the upper-bound (exclusive) the range\n     * @return {@code fromIndex} if the sub-range within bounds of the range\n     * @throws IndexOutOfBoundsException if the sub-range is out of bounds\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int checkFromIndexSize(int fromIndex, int size, int length)",
    "returnType" : "int",
    "comment" : "\n     * Checks if the sub-range from {@code fromIndex} (inclusive) to\n     * {@code fromIndex + size} (exclusive) is within the bounds of range from\n     * {@code 0} (inclusive) to {@code length} (exclusive).\n     *\n     * <p>The sub-range is defined to be out of bounds if any of the following\n     * inequalities is true:\n     * <ul>\n     *  <li>{@code fromIndex < 0}</li>\n     *  <li>{@code size < 0}</li>\n     *  <li>{@code fromIndex + size > length}, taking into account integer overflow</li>\n     *  <li>{@code length < 0}, which is implied from the former inequalities</li>\n     * </ul>\n     *\n     * @param fromIndex the lower-bound (inclusive) of the sub-interval\n     * @param size the size of the sub-range\n     * @param length the upper-bound (exclusive) of the range\n     * @return {@code fromIndex} if the sub-range within bounds of the range\n     * @throws IndexOutOfBoundsException if the sub-range is out of bounds\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long checkIndex(long index, long length)",
    "returnType" : "long",
    "comment" : "@ForceInline",
    "links" : [ ]
  }, {
    "name" : "public static long checkFromToIndex(long fromIndex, long toIndex, long length)",
    "returnType" : "long",
    "comment" : "\n     * Checks if the sub-range from {@code fromIndex} (inclusive) to\n     * {@code toIndex} (exclusive) is within the bounds of range from {@code 0}\n     * (inclusive) to {@code length} (exclusive).\n     *\n     * <p>The sub-range is defined to be out of bounds if any of the following\n     * inequalities is true:\n     * <ul>\n     *  <li>{@code fromIndex < 0}</li>\n     *  <li>{@code fromIndex > toIndex}</li>\n     *  <li>{@code toIndex > length}</li>\n     *  <li>{@code length < 0}, which is implied from the former inequalities</li>\n     * </ul>\n     *\n     * @param fromIndex the lower-bound (inclusive) of the sub-range\n     * @param toIndex the upper-bound (exclusive) of the sub-range\n     * @param length the upper-bound (exclusive) the range\n     * @return {@code fromIndex} if the sub-range within bounds of the range\n     * @throws IndexOutOfBoundsException if the sub-range is out of bounds\n     * @since 16\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long checkFromIndexSize(long fromIndex, long size, long length)",
    "returnType" : "long",
    "comment" : "\n     * Checks if the sub-range from {@code fromIndex} (inclusive) to\n     * {@code fromIndex + size} (exclusive) is within the bounds of range from\n     * {@code 0} (inclusive) to {@code length} (exclusive).\n     *\n     * <p>The sub-range is defined to be out of bounds if any of the following\n     * inequalities is true:\n     * <ul>\n     *  <li>{@code fromIndex < 0}</li>\n     *  <li>{@code size < 0}</li>\n     *  <li>{@code fromIndex + size > length}, taking into account integer overflow</li>\n     *  <li>{@code length < 0}, which is implied from the former inequalities</li>\n     * </ul>\n     *\n     * @param fromIndex the lower-bound (inclusive) of the sub-interval\n     * @param size the size of the sub-range\n     * @param length the upper-bound (exclusive) of the range\n     * @return {@code fromIndex} if the sub-range within bounds of the range\n     * @throws IndexOutOfBoundsException if the sub-range is out of bounds\n     * @since 16\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean equals(Object a, Object b)", "public static boolean deepEquals(Object a, Object b)", "public static int hashCode(Object o)", "public static int hash(Object... values)", "public static String toString(Object o)", "public static String toString(Object o, String nullDefault)", "public static int compare(T a, T b, Comparator<? super T> c)", "public static T requireNonNull(T obj)", "public static T requireNonNull(T obj, String message)", "public static boolean isNull(Object obj)", "public static boolean nonNull(Object obj)", "public static T requireNonNullElse(T obj, T defaultObj)", "public static T requireNonNullElseGet(T obj, Supplier<? extends T> supplier)", "public static T requireNonNull(T obj, Supplier<String> messageSupplier)", "public static int checkIndex(int index, int length)", "public static int checkFromToIndex(int fromIndex, int toIndex, int length)", "public static int checkFromIndexSize(int fromIndex, int size, int length)", "public static long checkIndex(long index, long length)", "public static long checkFromToIndex(long fromIndex, long toIndex, long length)", "public static long checkFromIndexSize(long fromIndex, long size, long length)" ],
  "variableNames" : [ ]
}