{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaRouter2.java",
  "packageName" : "android.media",
  "className" : "RoutingController",
  "comment" : "\n     * A class to control media routing session in media route provider.\n     * For example, selecting/deselecting/transferring to routes of a session can be done through\n     * this. Instances are created when\n     * {@link TransferCallback#onTransfer(RoutingController, RoutingController)} is called,\n     * which is invoked after {@link #transferTo(MediaRoute2Info)} is called.\n     ",
  "variables" : [ {
    "name" : "mControllerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTROLLER_STATE_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTROLLER_STATE_ACTIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTROLLER_STATE_RELEASING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTROLLER_STATE_RELEASED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionInfo",
    "type" : "RoutingSessionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n         * @return the ID of the controller. It is globally unique.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getOriginalId()",
    "returnType" : "String",
    "comment" : "\n         * Gets the original session ID set by\n         * {@link RoutingSessionInfo.Builder#Builder(String, String)}.\n         *\n         * @hide\n         ",
    "links" : [ "RoutingSessionInfo.Builder#Builder(String" ]
  }, {
    "name" : "public Bundle getControlHints()",
    "returnType" : "Bundle",
    "comment" : "\n         * Gets the control hints used to control routing session if available.\n         * It is set by the media route provider.\n         ",
    "links" : [ ]
  }, {
    "name" : "public List<MediaRoute2Info> getSelectedRoutes()",
    "returnType" : "List<MediaRoute2Info>",
    "comment" : "\n         * @return the unmodifiable list of currently selected routes\n         ",
    "links" : [ ]
  }, {
    "name" : "public List<MediaRoute2Info> getSelectableRoutes()",
    "returnType" : "List<MediaRoute2Info>",
    "comment" : "\n         * @return the unmodifiable list of selectable routes for the session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public List<MediaRoute2Info> getDeselectableRoutes()",
    "returnType" : "List<MediaRoute2Info>",
    "comment" : "\n         * @return the unmodifiable list of deselectable routes for the session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getVolumeHandling()",
    "returnType" : "int",
    "comment" : "\n         * Gets the information about how volume is handled on the session.\n         * <p>Please note that you may not control the volume of the session even when\n         * you can control the volume of each selected route in the session.\n         *\n         * @return {@link MediaRoute2Info#PLAYBACK_VOLUME_FIXED} or\n         * {@link MediaRoute2Info#PLAYBACK_VOLUME_VARIABLE}\n         ",
    "links" : [ "android.media.MediaRoute2Info#PLAYBACK_VOLUME_VARIABLE", "android.media.MediaRoute2Info#PLAYBACK_VOLUME_FIXED" ]
  }, {
    "name" : "public int getVolumeMax()",
    "returnType" : "int",
    "comment" : "\n         * Gets the maximum volume of the session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getVolume()",
    "returnType" : "int",
    "comment" : "\n         * Gets the current volume of the session.\n         * <p>\n         * When it's available, it represents the volume of routing session, which is a group\n         * of selected routes. Use {@link MediaRoute2Info#getVolume()}\n         * to get the volume of a route,\n         * </p>\n         * @see MediaRoute2Info#getVolume()\n         ",
    "links" : [ "android.media.MediaRoute2Info#getVolume()" ]
  }, {
    "name" : "public boolean isReleased()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this controller is released, false otherwise.\n         * If it is released, then all other getters from this instance may return invalid values.\n         * Also, any operations to this instance will be ignored once released.\n         *\n         * @see #release\n         ",
    "links" : [ ]
  }, {
    "name" : "public void selectRoute(@NonNull MediaRoute2Info route)",
    "returnType" : "void",
    "comment" : "\n         * Selects a route for the remote session. After a route is selected, the media is expected\n         * to be played to the all the selected routes. This is different from {@link\n         * MediaRouter2#transferTo(MediaRoute2Info)} transferring to a route},\n         * where the media is expected to 'move' from one route to another.\n         * <p>\n         * The given route must satisfy all of the following conditions:\n         * <ul>\n         * <li>It should not be included in {@link #getSelectedRoutes()}</li>\n         * <li>It should be included in {@link #getSelectableRoutes()}</li>\n         * </ul>\n         * If the route doesn't meet any of above conditions, it will be ignored.\n         *\n         * @see #deselectRoute(MediaRoute2Info)\n         * @see #getSelectedRoutes()\n         * @see #getSelectableRoutes()\n         * @see ControllerCallback#onControllerUpdated\n         ",
    "links" : [ "#getSelectedRoutes()", "#getSelectableRoutes()", "android.media.MediaRouter2#transferTo(MediaRoute2Info)" ]
  }, {
    "name" : "public void deselectRoute(@NonNull MediaRoute2Info route)",
    "returnType" : "void",
    "comment" : "\n         * Deselects a route from the remote session. After a route is deselected, the media is\n         * expected to be stopped on the deselected route.\n         * <p>\n         * The given route must satisfy all of the following conditions:\n         * <ul>\n         * <li>It should be included in {@link #getSelectedRoutes()}</li>\n         * <li>It should be included in {@link #getDeselectableRoutes()}</li>\n         * </ul>\n         * If the route doesn't meet any of above conditions, it will be ignored.\n         *\n         * @see #getSelectedRoutes()\n         * @see #getDeselectableRoutes()\n         * @see ControllerCallback#onControllerUpdated\n         ",
    "links" : [ "#getSelectedRoutes()", "#getDeselectableRoutes()" ]
  }, {
    "name" : " void transferToRoute(@NonNull MediaRoute2Info route)",
    "returnType" : "void",
    "comment" : "\n         * Transfers to a given route for the remote session. The given route must be included\n         * in {@link RoutingSessionInfo#getTransferableRoutes()}.\n         *\n         * @see RoutingSessionInfo#getSelectedRoutes()\n         * @see RoutingSessionInfo#getTransferableRoutes()\n         * @see ControllerCallback#onControllerUpdated\n         ",
    "links" : [ "android.media.RoutingSessionInfo#getTransferableRoutes()" ]
  }, {
    "name" : "public void setVolume(int volume)",
    "returnType" : "void",
    "comment" : "\n         * Requests a volume change for the remote session asynchronously.\n         *\n         * @param volume The new volume value between 0 and {@link RoutingController#getVolumeMax}\n         *               (inclusive).\n         * @see #getVolume()\n         ",
    "links" : [ "#getVolumeMax" ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n         * Releases this controller and the corresponding session.\n         * Any operations on this controller after calling this method will be ignored.\n         * The devices that are playing media will stop playing it.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean scheduleRelease()",
    "returnType" : "boolean",
    "comment" : "\n         * Schedules release of the controller.\n         * @return {@code true} if it's successfully scheduled, {@code false} if it's already\n         * scheduled to be released or released.\n         ",
    "links" : [ ]
  }, {
    "name" : " void releaseInternal(boolean shouldReleaseSession)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RoutingSessionInfo getRoutingSessionInfo()",
    "returnType" : "RoutingSessionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setRoutingSessionInfo(@NonNull RoutingSessionInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<MediaRoute2Info> getRoutesWithIds(List<String> routeIds)",
    "returnType" : "List<MediaRoute2Info>",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mControllerLock", "CONTROLLER_STATE_UNKNOWN", "CONTROLLER_STATE_ACTIVE", "CONTROLLER_STATE_RELEASING", "CONTROLLER_STATE_RELEASED", "mSessionInfo", "mState" ],
  "methodNames" : [ "public String getId()", "public String getOriginalId()", "public Bundle getControlHints()", "public List<MediaRoute2Info> getSelectedRoutes()", "public List<MediaRoute2Info> getSelectableRoutes()", "public List<MediaRoute2Info> getDeselectableRoutes()", "public int getVolumeHandling()", "public int getVolumeMax()", "public int getVolume()", "public boolean isReleased()", "public void selectRoute(@NonNull MediaRoute2Info route)", "public void deselectRoute(@NonNull MediaRoute2Info route)", " void transferToRoute(@NonNull MediaRoute2Info route)", "public void setVolume(int volume)", "public void release()", " boolean scheduleRelease()", " void releaseInternal(boolean shouldReleaseSession)", "public String toString()", " RoutingSessionInfo getRoutingSessionInfo()", " void setRoutingSessionInfo(@NonNull RoutingSessionInfo info)", "private List<MediaRoute2Info> getRoutesWithIds(List<String> routeIds)" ]
}