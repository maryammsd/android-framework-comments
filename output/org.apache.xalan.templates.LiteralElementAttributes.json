{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemLiteralResult.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "LiteralElementAttributes",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_count",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n           * Return the number of Attributes on this Element\n           *\n           * @return The number of nodes in this map. The range of valid child \n           * node indices is <code>0</code> to <code>length-1</code> inclusive\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node getNamedItem(String name)",
    "returnType" : "Node",
    "comment" : "\n           * Retrieves a node specified by name.\n           * @param name The <code>nodeName</code> of a node to retrieve.\n           * @return A <code>Node</code> (of any type) with the specified\n           *   <code>nodeName</code>, or <code>null</code> if it does not \n           *   identify any node in this map.\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node getNamedItemNS(String namespaceURI, String localName)",
    "returnType" : "Node",
    "comment" : "\n           * Retrieves a node specified by local name and namespace URI.\n           * @param namespaceURI Namespace URI of attribute node to get\n           * @param localName Local part of qualified name of attribute node to \n           * get\n           * @return A <code>Node</code> (of any type) with the specified\n           *   <code>nodeName</code>, or <code>null</code> if it does not \n           *   identify any node in this map.\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node item(int i)",
    "returnType" : "Node",
    "comment" : "\n           * Returns the <code>index</code>th item in the map. If <code>index\n           * </code> is greater than or equal to the number of nodes in this \n           * map, this returns <code>null</code>.\n           * @param i The index of the requested item.\n           * @return The node at the <code>index</code>th position in the map, \n           *   or <code>null</code> if that is not a valid index.\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node removeNamedItem(String name) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.NamedNodeMap\n           *\n           * @param name of the node to remove\n           * \n           * @return The node removed from this map if a node with such \n           * a name exists. \n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node removeNamedItemNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.NamedNodeMap\n           *\n           * @param namespaceURI Namespace URI of the node to remove\n           * @param localName Local part of qualified name of the node to remove\n           * \n           * @return The node removed from this map if a node with such a local\n           *  name and namespace URI exists\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node setNamedItem(Node arg) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n           * Unimplemented. See org.w3c.dom.NamedNodeMap\n           *\n           * @param A node to store in this map\n           * \n           * @return If the new Node replaces an existing node the replaced \n           * Node is returned, otherwise null is returned\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node setNamedItemNS(Node arg) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n           * Unimplemented. See org.w3c.dom.NamedNodeMap\n           *\n           * @param A node to store in this map\n           * \n           * @return If the new Node replaces an existing node the replaced \n           * Node is returned, otherwise null is returned\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getLength()", "public Node getNamedItem(String name)", "public Node getNamedItemNS(String namespaceURI, String localName)", "public Node item(int i)", "public Node removeNamedItem(String name) throws DOMException", "public Node removeNamedItemNS(String namespaceURI, String localName) throws DOMException", "public Node setNamedItem(Node arg) throws DOMException", "public Node setNamedItemNS(Node arg) throws DOMException" ],
  "variableNames" : [ "m_count" ]
}