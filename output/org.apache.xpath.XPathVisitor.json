{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/XPathVisitor.java",
  "packageName" : "org.apache.xpath",
  "className" : "XPathVisitor",
  "comment" : "\n * A derivation from this class can be passed to a class that implements \n * the XPathVisitable interface, to have the appropriate method called \n * for each component of the XPath.  Aside from possible other uses, the \n * main intention is to provide a reasonable means to perform expression \n * rewriting.\n * \n * <p>Each method has the form \n * <code>boolean visitComponentType(ExpressionOwner owner, ComponentType compType)</code>. \n * The ExpressionOwner argument is the owner of the component, and can \n * be used to reset the expression for rewriting.  If a method returns \n * false, the sub hierarchy will not be traversed.</p>\n * \n * <p>This class is meant to be a base class that will be derived by concrete classes, \n * and doesn't much except return true for each method.</p>\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean visitLocationPath(ExpressionOwner owner, LocPathIterator path)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a LocationPath.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param path The LocationPath object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitUnionPath(ExpressionOwner owner, UnionPathIterator path)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a UnionPath.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param path The UnionPath object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitStep(ExpressionOwner owner, NodeTest step)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a step within a location path.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param step The Step object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitPredicate(ExpressionOwner owner, Expression pred)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a predicate within a location path.  Note that there isn't a \n\t * proper unique component for predicates, and that the expression will \n\t * be called also for whatever type Expression is.\n\t * \n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param pred The predicate object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitBinaryOperation(ExpressionOwner owner, Operation op)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a binary operation.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param op The operation object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitUnaryOperation(ExpressionOwner owner, UnaryOperation op)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a unary operation.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param op The operation object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitVariableRef(ExpressionOwner owner, Variable var)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a variable reference.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param var The variable reference object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitFunction(ExpressionOwner owner, Function func)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a function.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param func The function reference object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitMatchPattern(ExpressionOwner owner, StepPattern pattern)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a match pattern.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param pattern The match pattern object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitUnionPattern(ExpressionOwner owner, UnionPattern pattern)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a union pattern.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param pattern The union pattern object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitStringLiteral(ExpressionOwner owner, XString str)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a string literal.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param str The string literal object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitNumberLiteral(ExpressionOwner owner, XNumber num)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a number literal.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param num The number literal object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean visitLocationPath(ExpressionOwner owner, LocPathIterator path)", "public boolean visitUnionPath(ExpressionOwner owner, UnionPathIterator path)", "public boolean visitStep(ExpressionOwner owner, NodeTest step)", "public boolean visitPredicate(ExpressionOwner owner, Expression pred)", "public boolean visitBinaryOperation(ExpressionOwner owner, Operation op)", "public boolean visitUnaryOperation(ExpressionOwner owner, UnaryOperation op)", "public boolean visitVariableRef(ExpressionOwner owner, Variable var)", "public boolean visitFunction(ExpressionOwner owner, Function func)", "public boolean visitMatchPattern(ExpressionOwner owner, StepPattern pattern)", "public boolean visitUnionPattern(ExpressionOwner owner, UnionPattern pattern)", "public boolean visitStringLiteral(ExpressionOwner owner, XString str)", "public boolean visitNumberLiteral(ExpressionOwner owner, XNumber num)" ],
  "variableNames" : [ ]
}