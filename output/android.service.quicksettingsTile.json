{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/quicksettings/Tile.java",
  "packageName" : "android.service.quicksettings",
  "className" : "Tile",
  "comment" : "\n * A Tile holds the state of a tile that will be displayed\n * in Quick Settings.\n *\n * A tile in Quick Settings exists as an icon with an accompanied label.\n * It also may have content description for accessibility usability.\n * The style and layout of the tile may change to match a given\n * device.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * An unavailable state indicates that for some reason this tile is not currently\n     * available to the user for some reason, and will have no click action.  The tile's\n     * icon will be tinted differently to reflect this state.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_INACTIVE",
    "type" : "int",
    "comment" : "\n     * This represents a tile that is currently in a disabled state but is still interactable.\n     *\n     * A disabled state indicates that the tile is not currently active (e.g. wifi disconnected or\n     * bluetooth disabled), but is still interactable by the user to modify this state.  Tiles\n     * that have boolean states should use this to represent one of their states.  The tile's\n     * icon will be tinted differently to reflect this state, but still be distinct from unavailable.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_ACTIVE",
    "type" : "int",
    "comment" : "\n     * This represents a tile that is currently active. (e.g. wifi is connected, bluetooth is on,\n     * cast is casting).  This is the default state.\n     ",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : " Default to inactive until clients of the new API can update.",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IQSService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<Tile>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setService(IQSService service, IBinder stub)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * The current state of the tile.\n     *\n     * @see #STATE_UNAVAILABLE\n     * @see #STATE_INACTIVE\n     * @see #STATE_ACTIVE\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setState(int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current state for the tile.\n     *\n     * Does not take effect until {@link #updateTile()} is called.\n     *\n     * @param state One of {@link #STATE_UNAVAILABLE}, {@link #STATE_INACTIVE},\n     * {@link #STATE_ACTIVE}\n     ",
    "links" : [ "#updateTile", "#STATE_UNAVAILABLE", "#STATE_INACTIVE", "#STATE_ACTIVE" ]
  }, {
    "name" : "public Icon getIcon()",
    "returnType" : "Icon",
    "comment" : "\n     * Gets the current icon for the tile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIcon(Icon icon)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current icon for the tile.\n     *\n     * This icon is expected to be white on alpha, and may be\n     * tinted by the system to match it's theme.\n     *\n     * Does not take effect until {@link #updateTile()} is called.\n     *\n     * @param icon New icon to show.\n     ",
    "links" : [ "#updateTile" ]
  }, {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the current label for the tile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLabel(CharSequence label)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current label for the tile.\n     *\n     * Does not take effect until {@link #updateTile()} is called.\n     *\n     * @param label New label to show.\n     ",
    "links" : [ "#updateTile" ]
  }, {
    "name" : "public CharSequence getSubtitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the current subtitle for the tile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubtitle(@Nullable CharSequence subtitle)",
    "returnType" : "void",
    "comment" : "\n     * Set the subtitle for the tile. Will be displayed as the secondary label.\n     * @param subtitle the subtitle to show.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getContentDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the current content description for the tile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getStateDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the current state description for the tile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentDescription(CharSequence contentDescription)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current content description for the tile.\n     *\n     * Does not take effect until {@link #updateTile()} is called.\n     *\n     * @param contentDescription New content description to use.\n     ",
    "links" : [ "#updateTile" ]
  }, {
    "name" : "public void setStateDescription(@Nullable CharSequence stateDescription)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current state description for the tile.\n     *\n     * Does not take effect until {@link #updateTile()} is called.\n     *\n     * @param stateDescription New state description to use.\n     ",
    "links" : [ "#updateTile" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateTile()",
    "returnType" : "void",
    "comment" : "\n     * Pushes the state of the Tile to Quick Settings to be displayed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readFromParcel(Parcel source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "STATE_UNAVAILABLE", "STATE_INACTIVE", "STATE_ACTIVE", "mToken", "mIcon", "mLabel", "mSubtitle", "mContentDescription", "mStateDescription", "mState", "mService", "CREATOR" ],
  "methodNames" : [ "public void setService(IQSService service, IBinder stub)", "public int getState()", "public void setState(int state)", "public Icon getIcon()", "public void setIcon(Icon icon)", "public CharSequence getLabel()", "public void setLabel(CharSequence label)", "public CharSequence getSubtitle()", "public void setSubtitle(@Nullable CharSequence subtitle)", "public CharSequence getContentDescription()", "public CharSequence getStateDescription()", "public void setContentDescription(CharSequence contentDescription)", "public void setStateDescription(@Nullable CharSequence stateDescription)", "public int describeContents()", "public void updateTile()", "public void writeToParcel(Parcel dest, int flags)", "private void readFromParcel(Parcel source)" ]
}