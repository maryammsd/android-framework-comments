{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/RemoteViews.java",
  "packageName" : "android.widget",
  "className" : "RemoteResponse",
  "comment" : "\n     * Class representing a response to an action performed on any element of a RemoteViews.\n     ",
  "variables" : [ {
    "name" : "mPendingIntent",
    "type" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFillIntent",
    "type" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewIds",
    "type" : "IntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElementNames",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static RemoteResponse fromPendingIntent(@NonNull PendingIntent pendingIntent)",
    "returnType" : "RemoteResponse",
    "comment" : "\n         * Creates a response which sends a pending intent as part of the response. The source\n         * bounds ({@link Intent#getSourceBounds()}) of the intent will be set to the bounds of the\n         * target view in screen space.\n         * Note that any activity options associated with the mPendingIntent may get overridden\n         * before starting the intent.\n         *\n         * @param pendingIntent The {@link PendingIntent} to send as part of the response\n         ",
    "links" : [ "Intent#getSourceBounds", "PendingIntent" ]
  }, {
    "name" : "public static RemoteResponse fromFillInIntent(@NonNull Intent fillIntent)",
    "returnType" : "RemoteResponse",
    "comment" : "\n         * When using collections (eg. {@link ListView}, {@link StackView} etc.) in widgets, it is\n         * very costly to set PendingIntents on the individual items, and is hence not recommended.\n         * Instead a single PendingIntent template can be set on the collection, see {@link\n         * RemoteViews#setPendingIntentTemplate(int, PendingIntent)}, and the individual on-click\n         * action of a given item can be distinguished by setting a fillInIntent on that item. The\n         * fillInIntent is then combined with the PendingIntent template in order to determine the\n         * final intent which will be executed when the item is clicked. This works as follows: any\n         * fields which are left blank in the PendingIntent template, but are provided by the\n         * fillInIntent will be overwritten, and the resulting PendingIntent will be used. The rest\n         * of the PendingIntent template will then be filled in with the associated fields that are\n         * set in fillInIntent. See {@link Intent#fillIn(Intent, int)} for more details.\n         * Creates a response which sends a pending intent as part of the response. The source\n         * bounds ({@link Intent#getSourceBounds()}) of the intent will be set to the bounds of the\n         * target view in screen space.\n         * Note that any activity options associated with the mPendingIntent may get overridden\n         * before starting the intent.\n         *\n         * @param fillIntent The intent which will be combined with the parent's PendingIntent in\n         *                  order to determine the behavior of the response\n         *\n         * @see RemoteViews#setPendingIntentTemplate(int, PendingIntent)\n         * @see RemoteViews#setOnClickFillInIntent(int, Intent)\n         * @return\n         ",
    "links" : [ "ListView", "StackView", "Intent#fillIn", "Intent#getSourceBounds" ]
  }, {
    "name" : "public RemoteResponse addSharedElement(int viewId, @NonNull String sharedElementName)",
    "returnType" : "RemoteResponse",
    "comment" : "\n         * Adds a shared element to be transferred as part of the transition between Activities\n         * using cross-Activity scene animations. The position of the first element will be used as\n         * the epicenter for the exit Transition. The position of the associated shared element in\n         * the launched Activity will be the epicenter of its entering Transition.\n         *\n         * @param viewId The id of the view to be shared as part of the transition\n         * @param sharedElementName The shared element name for this view\n         *\n         * @see ActivityOptions#makeSceneTransitionAnimation(Activity, Pair[])\n         ",
    "links" : [ ]
  }, {
    "name" : "private void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readFromParcel(Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleViewClick(View v, OnClickHandler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Pair<Intent, ActivityOptions> getLaunchOptions(View view)",
    "returnType" : "Pair<Intent, ActivityOptions>",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPendingIntent", "mFillIntent", "mViewIds", "mElementNames" ],
  "methodNames" : [ "public static RemoteResponse fromPendingIntent(@NonNull PendingIntent pendingIntent)", "public static RemoteResponse fromFillInIntent(@NonNull Intent fillIntent)", "public RemoteResponse addSharedElement(int viewId, @NonNull String sharedElementName)", "private void writeToParcel(Parcel dest, int flags)", "private void readFromParcel(Parcel parcel)", "private void handleViewClick(View v, OnClickHandler handler)", "public Pair<Intent, ActivityOptions> getLaunchOptions(View view)" ]
}