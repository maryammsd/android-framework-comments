{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/WhileOps.java",
  "packageName" : "java.util.stream",
  "className" : "DropWhileOp",
  "comment" : "\n     * A specialization for the dropWhile operation that controls if\n     * elements to be dropped are counted and passed downstream.\n     * <p>\n     * This specialization is utilized by the {@link TakeWhileTask} for\n     * pipelines that are ordered.  In such cases elements cannot be dropped\n     * until all elements have been collected.\n     *\n     * @param <T> the type of both input and output elements\n     ",
  "links" : [ "TakeWhileTask" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " DropWhileSink<T> opWrapSink(Sink<T> sink, boolean retainAndCountDroppedElements)",
    "returnType" : "DropWhileSink<T>",
    "comment" : "\n         * Accepts a {@code Sink} which will receive the results of this\n         * dropWhile operation, and return a {@code DropWhileSink} which\n         * accepts\n         * elements and which performs the dropWhile operation passing the\n         * results to the provided {@code Sink}.\n         *\n         * @param sink sink to which elements should be sent after processing\n         * @param retainAndCountDroppedElements true if elements to be dropped\n         * are counted and passed to the sink, otherwise such elements\n         * are actually dropped and not passed to the sink.\n         * @return a dropWhile sink\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " DropWhileSink<T> opWrapSink(Sink<T> sink, boolean retainAndCountDroppedElements)" ],
  "variableNames" : [ ]
}