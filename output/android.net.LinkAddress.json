{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/LinkAddress.java",
  "packageName" : "android.net",
  "className" : "LinkAddress",
  "comment" : "\n * Identifies an IP address on a network link.\n *\n * A {@code LinkAddress} consists of:\n * <ul>\n * <li>An IP address and prefix length (e.g., {@code 2001:db8::1/64} or {@code 192.0.2.1/24}).\n * The address must be unicast, as multicast addresses cannot be assigned to interfaces.\n * <li>Address flags: A bitmask of {@code OsConstants.IFA_F_*} values representing properties\n * of the address (e.g., {@code android.system.OsConstants.IFA_F_OPTIMISTIC}).\n * <li>Address scope: One of the {@code OsConstants.IFA_F_*} values; defines the scope in which\n * the address is unique (e.g.,\n * {@code android.system.OsConstants.RT_SCOPE_LINK} or\n * {@code android.system.OsConstants.RT_SCOPE_UNIVERSE}).\n * </ul>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LIFETIME_UNKNOWN",
    "type" : "long",
    "comment" : "\n     * Indicates the deprecation or expiration time is unknown\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LIFETIME_PERMANENT",
    "type" : "long",
    "comment" : "\n     * Indicates this address is permanent.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "address",
    "type" : "InetAddress",
    "comment" : "\n     * IPv4 or IPv6 address.\n     ",
    "links" : [ ]
  }, {
    "name" : "prefixLength",
    "type" : "int",
    "comment" : "\n     * Prefix length.\n     ",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "\n     * Address flags. A bitmask of {@code IFA_F_*} values. Note that {@link #getFlags()} may not\n     * return these exact values. For example, it may set or clear the {@code IFA_F_DEPRECATED}\n     * flag depending on the current preferred lifetime.\n     ",
    "links" : [ "#getFlags()" ]
  }, {
    "name" : "scope",
    "type" : "int",
    "comment" : "\n     * Address scope. One of the RT_SCOPE_* constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "deprecationTime",
    "type" : "long",
    "comment" : "\n     * The time, as reported by {@link SystemClock#elapsedRealtime}, when this LinkAddress will be\n     * or was deprecated. At the time existing connections can still use this address until it\n     * expires, but new connections should use the new address. {@link #LIFETIME_UNKNOWN} indicates\n     * this information is not available. {@link #LIFETIME_PERMANENT} indicates this\n     * {@link LinkAddress} will never be deprecated.\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime", "#LIFETIME_PERMANENT", "android.net.LinkAddress", "#LIFETIME_UNKNOWN" ]
  }, {
    "name" : "expirationTime",
    "type" : "long",
    "comment" : "\n     * The time, as reported by {@link SystemClock#elapsedRealtime}, when this {@link LinkAddress}\n     * will expire and be removed from the interface. {@link #LIFETIME_UNKNOWN} indicates this\n     * information is not available. {@link #LIFETIME_PERMANENT} indicates this {@link LinkAddress}\n     * will never expire.\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime", "#LIFETIME_PERMANENT", "android.net.LinkAddress", "#LIFETIME_UNKNOWN" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<LinkAddress>",
    "comment" : "\n     * Implement the Parcelable interface.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int scopeForUnicastAddress(InetAddress addr)",
    "returnType" : "int",
    "comment" : "\n     * Utility function to determines the scope of a unicast address. Per RFC 4291 section 2.5 and\n     * RFC 6724 section 3.2.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isIpv6ULA()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function to check if |address| is a Unique Local IPv6 Unicast Address\n     * (a.k.a. \"ULA\"; RFC 4193).\n     *\n     * Per RFC 4193 section 8, fc00::/7 identifies these addresses.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIpv6()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the address is IPv6.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIPv6()",
    "returnType" : "boolean",
    "comment" : "\n     * For backward compatibility.\n     * This was annotated with @UnsupportedAppUsage in P, so we can't remove the method completely\n     * just yet.\n     * @return true if the address is IPv6.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIpv4()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the address is IPv4 or is a mapped IPv4 address.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void init(InetAddress address, int prefixLength, int flags, int scope, long deprecationTime, long expirationTime)",
    "returnType" : "void",
    "comment" : "\n     * Utility function for the constructors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this address, such as \"192.0.2.1/24\" or \"2001:db8::1/64\".\n     * The string representation does not contain the flags and scope, just the address and prefix\n     * length.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkAddress} instance against {@code obj}. Two addresses are equal if\n     * their address, prefix length, flags and scope are equal. Thus, for example, two addresses\n     * that have the same address and prefix length are not equal if one of them is deprecated and\n     * the other is not.\n     *\n     * @param obj the object to be tested for equality.\n     * @return {@code true} if both objects are equal, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameAddressAs(@Nullable LinkAddress other)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether this {@code LinkAddress} and the provided {@code LinkAddress}\n     * represent the same address. Two {@code LinkAddresses} represent the same address\n     * if they have the same IP address and prefix length, even if their properties are\n     * different.\n     *\n     * @param other the {@code LinkAddress} to compare to.\n     * @return {@code true} if both objects have the same address and prefix length, {@code false}\n     * otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the {@link InetAddress} of this {@code LinkAddress}.\n     ",
    "links" : [ "java.net.InetAddress" ]
  }, {
    "name" : "public int getPrefixLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the prefix length of this {@code LinkAddress}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkPrefixLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the prefix length of this {@code LinkAddress}.\n     * TODO: Delete all callers and remove in favour of getPrefixLength().\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns the flags of this {@code LinkAddress}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScope()",
    "returnType" : "int",
    "comment" : "\n     * Returns the scope of this {@code LinkAddress}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDeprecationTime()",
    "returnType" : "long",
    "comment" : "\n     * Get the deprecation time, as reported by {@link SystemClock#elapsedRealtime}, when this\n     * {@link LinkAddress} will be or was deprecated. At the time existing connections can still use\n     * this address until it expires, but new connections should use the new address.\n     *\n     * @return The deprecation time in milliseconds. {@link #LIFETIME_UNKNOWN} indicates this\n     * information is not available. {@link #LIFETIME_PERMANENT} indicates this {@link LinkAddress}\n     * will never be deprecated.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime", "#LIFETIME_PERMANENT", "android.net.LinkAddress", "#LIFETIME_UNKNOWN" ]
  }, {
    "name" : "public long getExpirationTime()",
    "returnType" : "long",
    "comment" : "\n     * Get the expiration time, as reported by {@link SystemClock#elapsedRealtime}, when this\n     * {@link LinkAddress} will expire and be removed from the interface.\n     *\n     * @return The expiration time in milliseconds. {@link #LIFETIME_UNKNOWN} indicates this\n     * information is not available. {@link #LIFETIME_PERMANENT} indicates this {@link LinkAddress}\n     * will never expire.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime", "#LIFETIME_PERMANENT", "android.net.LinkAddress", "#LIFETIME_UNKNOWN" ]
  }, {
    "name" : "public boolean isGlobalPreferred()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this {@code LinkAddress} is global scope and preferred (i.e., not currently\n     * deprecated).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPreferred()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the address is a preferred address.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Implement the Parcelable interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Implement the Parcelable interface.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int scopeForUnicastAddress(InetAddress addr)", "private boolean isIpv6ULA()", "public boolean isIpv6()", "public boolean isIPv6()", "public boolean isIpv4()", "private void init(InetAddress address, int prefixLength, int flags, int scope, long deprecationTime, long expirationTime)", "public String toString()", "public boolean equals(@Nullable Object obj)", "public int hashCode()", "public boolean isSameAddressAs(@Nullable LinkAddress other)", "public InetAddress getAddress()", "public int getPrefixLength()", "public int getNetworkPrefixLength()", "public int getFlags()", "public int getScope()", "public long getDeprecationTime()", "public long getExpirationTime()", "public boolean isGlobalPreferred()", "public boolean isPreferred()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "LIFETIME_UNKNOWN", "LIFETIME_PERMANENT", "address", "prefixLength", "flags", "scope", "deprecationTime", "expirationTime", "CREATOR" ]
}