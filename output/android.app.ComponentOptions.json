{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ComponentOptions.java",
  "packageName" : "android.app",
  "className" : "ComponentOptions",
  "comment" : " Expose the methods and constants required to test the SystemApis in subclasses.",
  "links" : [ ],
  "variables" : [ {
    "name" : "KEY_PENDING_INTENT_BACKGROUND_ACTIVITY_ALLOWED",
    "type" : "String",
    "comment" : "\n     * PendingIntent caller allows activity start even if PendingIntent creator is in background.\n     * This only works if the PendingIntent caller is allowed to start background activities,\n     * for example if it's in the foreground, or has BAL permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PENDING_INTENT_BACKGROUND_ACTIVITY_ALLOWED_BY_PERMISSION",
    "type" : "String",
    "comment" : "\n     * PendingIntent caller allows activity to be started if caller has BAL permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mPendingIntentBalAllowed",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingIntentBalAllowedByPermission",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setPendingIntentBackgroundActivityLaunchAllowed(boolean allowed)",
    "returnType" : "void",
    "comment" : "\n     * Set PendingIntent activity is allowed to be started in the background if the caller\n     * can start background activities.\n     *\n     * @deprecated use #setPendingIntentBackgroundActivityStartMode(int) to set the full range\n     * of states\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPendingIntentBackgroundActivityLaunchAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Get PendingIntent activity is allowed to be started in the background if the caller can start\n     * background activities.\n     *\n     * @deprecated use {@link #getPendingIntentBackgroundActivityStartMode()} since for apps\n     * targeting {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} or higher this value might\n     * not match the actual behavior if the value was not explicitly set.\n     * @hide\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#getPendingIntentBackgroundActivityStartMode()" ]
  }, {
    "name" : "public ComponentOptions setPendingIntentBackgroundActivityStartMode(@BackgroundActivityStartMode int state)",
    "returnType" : "ComponentOptions",
    "comment" : "\n     * Sets the mode for allowing or denying the senders privileges to start background activities\n     * to the PendingIntent.\n     *\n     * This is typically used in when executing {@link PendingIntent#send(Bundle)} or similar\n     * methods. A privileged sender of a PendingIntent should only grant\n     * {@link #MODE_BACKGROUND_ACTIVITY_START_ALLOWED} if the PendingIntent is from a trusted source\n     * and/or executed on behalf the user.\n     * @hide\n     ",
    "links" : [ "#MODE_BACKGROUND_ACTIVITY_START_ALLOWED", "android.app.PendingIntent#send(Bundle)" ]
  }, {
    "name" : "public int getPendingIntentBackgroundActivityStartMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the mode for allowing or denying the senders privileges to start background activities\n     * to the PendingIntent.\n     * @hide\n     *\n     * @see #setPendingIntentBackgroundActivityStartMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPendingIntentBackgroundActivityLaunchAllowedByPermission(boolean allowed)",
    "returnType" : "void",
    "comment" : "\n     * Set PendingIntent activity can be launched from background if caller has BAL permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPendingIntentBackgroundActivityLaunchAllowedByPermission()",
    "returnType" : "boolean",
    "comment" : "\n     * Get PendingIntent activity is allowed to be started in the background if the caller\n     * has BAL permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle toBundle()",
    "returnType" : "Bundle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static ComponentOptions fromBundle(@Nullable Bundle options)",
    "returnType" : "ComponentOptions",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setPendingIntentBackgroundActivityLaunchAllowed(boolean allowed)", "public boolean isPendingIntentBackgroundActivityLaunchAllowed()", "public ComponentOptions setPendingIntentBackgroundActivityStartMode(@BackgroundActivityStartMode int state)", "public int getPendingIntentBackgroundActivityStartMode()", "public void setPendingIntentBackgroundActivityLaunchAllowedByPermission(boolean allowed)", "public boolean isPendingIntentBackgroundActivityLaunchAllowedByPermission()", "public Bundle toBundle()", "public static ComponentOptions fromBundle(@Nullable Bundle options)" ],
  "variableNames" : [ "KEY_PENDING_INTENT_BACKGROUND_ACTIVITY_ALLOWED", "KEY_PENDING_INTENT_BACKGROUND_ACTIVITY_ALLOWED_BY_PERMISSION", "mPendingIntentBalAllowed", "mPendingIntentBalAllowedByPermission" ]
}