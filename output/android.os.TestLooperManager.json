{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/TestLooperManager.java",
  "packageName" : "android.os",
  "className" : "TestLooperManager",
  "comment" : "\n * Blocks a looper from executing any messages, and allows the holder of this object\n * to control when and which messages get executed until it is released.\n * <p>\n * A TestLooperManager should be acquired using\n * {@link android.app.Instrumentation#acquireLooperManager}. Until {@link #release()} is called,\n * the Looper thread will not execute any messages except when {@link #execute(Message)} is called.\n * The test code may use {@link #next()} to acquire messages that have been queued to this\n * {@link Looper}/{@link MessageQueue} and then {@link #execute} to run any that desires.\n ",
  "links" : [ "#execute", "#next()", "android.os.MessageQueue", "android.app.Instrumentation#acquireLooperManager", "#release()", "android.os.Looper", "#execute(Message)" ],
  "variables" : [ {
    "name" : "sHeldLoopers",
    "type" : "ArraySet<Looper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQueue",
    "type" : "MessageQueue",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecuteQueue",
    "type" : "LinkedBlockingQueue<MessageExecution>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReleased",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooperBlocked",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public MessageQueue getMessageQueue()",
    "returnType" : "MessageQueue",
    "comment" : "\n     * Returns the {@link MessageQueue} this object is wrapping.\n     ",
    "links" : [ "android.os.MessageQueue" ]
  }, {
    "name" : "public MessageQueue getQueue()",
    "returnType" : "MessageQueue",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public Message next()",
    "returnType" : "Message",
    "comment" : "\n     * Returns the next message that should be executed by this queue, may block\n     * if no messages are ready.\n     * <p>\n     * Callers should always call {@link #recycle(Message)} on the message when all\n     * interactions with it have completed.\n     ",
    "links" : [ "#recycle(Message)" ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Releases the looper to continue standard looping and processing of messages,\n     * no further interactions with TestLooperManager will be allowed after\n     * release() has been called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void execute(Message message)",
    "returnType" : "void",
    "comment" : "\n     * Executes the given message on the Looper thread this wrapper is\n     * attached to.\n     * <p>\n     * Execution will happen on the Looper's thread (whether it is the current thread\n     * or not), but all RuntimeExceptions encountered while executing the message will\n     * be thrown on the calling thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recycle(Message msg)",
    "returnType" : "void",
    "comment" : "\n     * Called to indicate that a Message returned by {@link #next()} has been parsed\n     * and should be recycled.\n     ",
    "links" : [ "#next()" ]
  }, {
    "name" : "public boolean hasMessages(Handler h, Object object, int what)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there are any queued messages that match the parameters.\n     *\n     * @param h      the value of {@link Message#getTarget()}\n     * @param what   the value of {@link Message#what}\n     * @param object the value of {@link Message#obj}, null for any\n     ",
    "links" : [ "android.os.Message#getTarget()", "android.os.Message#what", "android.os.Message#obj" ]
  }, {
    "name" : "public boolean hasMessages(Handler h, Object object, Runnable r)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there are any queued messages that match the parameters.\n     *\n     * @param h      the value of {@link Message#getTarget()}\n     * @param r      the value of {@link Message#getCallback()}\n     * @param object the value of {@link Message#obj}, null for any\n     ",
    "links" : [ "android.os.Message#getTarget()", "android.os.Message#obj", "android.os.Message#getCallback()" ]
  }, {
    "name" : "private void checkReleased()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public MessageQueue getMessageQueue()", "public MessageQueue getQueue()", "public Message next()", "public void release()", "public void execute(Message message)", "public void recycle(Message msg)", "public boolean hasMessages(Handler h, Object object, int what)", "public boolean hasMessages(Handler h, Object object, Runnable r)", "private void checkReleased()" ],
  "variableNames" : [ "sHeldLoopers", "mQueue", "mLooper", "mExecuteQueue", "mReleased", "mLooperBlocked" ]
}