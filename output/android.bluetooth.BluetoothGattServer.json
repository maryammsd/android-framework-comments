{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothGattServer.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothGattServer",
  "comment" : "\n * Public API for the Bluetooth GATT Profile server role.\n *\n * <p>This class provides Bluetooth GATT server role functionality, allowing applications to create\n * Bluetooth Smart services and characteristics.\n *\n * <p>BluetoothGattServer is a proxy object for controlling the Bluetooth Service via IPC. Use\n * {@link BluetoothManager#openGattServer} to get an instance of this class.\n ",
  "links" : [ "android.bluetooth.BluetoothManager#openGattServer" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothGatt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "BluetoothGattServerCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServerIfLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServerIf",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransport",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingService",
    "type" : "BluetoothGattService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServices",
    "type" : "List<BluetoothGattService>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_REG_TIMEOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GATT_MAX_ATTR_LEN",
    "type" : "int",
    "comment" : " Max length of an attribute value, defined in gatt_api.h",
    "links" : [ ]
  }, {
    "name" : "mBluetoothGattServerCallback",
    "type" : "IBluetoothGattServerCallback",
    "comment" : " Bluetooth GATT interface callbacks ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getServerIf()",
    "returnType" : "int",
    "comment" : "\n     * Get the identifier of the BluetoothGattServer, or 0 if it is closed\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " BluetoothGattCharacteristic getCharacteristicByHandle(int handle)",
    "returnType" : "BluetoothGattCharacteristic",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " BluetoothGattDescriptor getDescriptorByHandle(int handle)",
    "returnType" : "BluetoothGattDescriptor",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close this GATT server instance.\n     *\n     * <p>Application should call this method as early as possible after it is done with this GATT\n     * server.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean registerCallback(BluetoothGattServerCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Register an application callback to start using GattServer.\n     *\n     * <p>This is an asynchronous call. The callback is used to notify success or failure if the\n     * function returns true.\n     *\n     * @param callback GATT callback handler that will receive asynchronous callbacks.\n     * @return true, the callback will be called to notify success or failure, false on immediate\n     *     error\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean registerCallback(BluetoothGattServerCallback callback, boolean eattSupport)",
    "returnType" : "boolean",
    "comment" : "\n     * Register an application callback to start using GattServer.\n     *\n     * <p>This is an asynchronous call. The callback is used to notify success or failure if the\n     * function returns true.\n     *\n     * @param callback GATT callback handler that will receive asynchronous callbacks.\n     * @param eattSupport indicates if server can use eatt\n     * @return true, the callback will be called to notify success or failure, false on immediate\n     *     error\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void unregisterCallback()",
    "returnType" : "void",
    "comment" : " Unregister the current application and callbacks. ",
    "links" : [ ]
  }, {
    "name" : " BluetoothGattService getService(UUID uuid, int instanceId, int type)",
    "returnType" : "BluetoothGattService",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device, boolean autoConnect)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate a connection to a Bluetooth GATT capable device.\n     *\n     * <p>The connection may not be established right away, but will be completed when the remote\n     * device is available. A {@link BluetoothGattServerCallback#onConnectionStateChange} callback\n     * will be invoked when the connection state changes as a result of this function.\n     *\n     * <p>The autoConnect parameter determines whether to actively connect to the remote device, or\n     * rather passively scan and finalize the connection when the remote device is in\n     * range/available. Generally, the first ever connection to a device should be direct\n     * (autoConnect set to false) and subsequent connections to known devices should be invoked with\n     * the autoConnect parameter set to true.\n     *\n     * @param autoConnect Whether to directly connect to the remote device (false) or to\n     *     automatically connect as soon as the remote device becomes available (true).\n     * @return true, if the connection attempt was initiated successfully\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServerCallback#onConnectionStateChange" ]
  }, {
    "name" : "public void cancelConnection(BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Disconnects an established connection, or cancels a connection attempt currently in progress.\n     *\n     * @param device Remote device\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPreferredPhy(BluetoothDevice device, int txPhy, int rxPhy, int phyOptions)",
    "returnType" : "void",
    "comment" : "\n     * Set the preferred connection PHY for this app. Please note that this is just a\n     * recommendation, whether the PHY change will happen depends on other applications preferences,\n     * local and remote controller capabilities. Controller can override these settings.\n     *\n     * <p>{@link BluetoothGattServerCallback#onPhyUpdate} will be triggered as a result of this\n     * call, even if no PHY change happens. It is also triggered when remote device updates the PHY.\n     *\n     * @param device The remote device to send this response to\n     * @param txPhy preferred transmitter PHY. Bitwise OR of any of {@link\n     *     BluetoothDevice#PHY_LE_1M_MASK}, {@link BluetoothDevice#PHY_LE_2M_MASK}, and {@link\n     *     BluetoothDevice#PHY_LE_CODED_MASK}.\n     * @param rxPhy preferred receiver PHY. Bitwise OR of any of {@link\n     *     BluetoothDevice#PHY_LE_1M_MASK}, {@link BluetoothDevice#PHY_LE_2M_MASK}, and {@link\n     *     BluetoothDevice#PHY_LE_CODED_MASK}.\n     * @param phyOptions preferred coding to use when transmitting on the LE Coded PHY. Can be one\n     *     of {@link BluetoothDevice#PHY_OPTION_NO_PREFERRED}, {@link BluetoothDevice#PHY_OPTION_S2}\n     *     or {@link BluetoothDevice#PHY_OPTION_S8}\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#PHY_OPTION_S8", "android.bluetooth.BluetoothDevice#PHY_LE_2M_MASK", "android.bluetooth.BluetoothDevice#PHY_OPTION_NO_PREFERRED", "android.bluetooth.BluetoothDevice#PHY_OPTION_S2", "android.bluetooth.BluetoothDevice#PHY_LE_1M_MASK", "android.bluetooth.BluetoothDevice#PHY_LE_CODED_MASK", "android.bluetooth.BluetoothGattServerCallback#onPhyUpdate" ]
  }, {
    "name" : "public void readPhy(BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Read the current transmitter PHY and receiver PHY of the connection. The values are returned\n     * in {@link BluetoothGattServerCallback#onPhyRead}\n     *\n     * @param device The remote device to send this response to\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServerCallback#onPhyRead" ]
  }, {
    "name" : "public boolean sendResponse(BluetoothDevice device, int requestId, int status, int offset, byte[] value)",
    "returnType" : "boolean",
    "comment" : "\n     * Send a response to a read or write request to a remote device.\n     *\n     * <p>This function must be invoked in when a remote read/write request is received by one of\n     * these callback methods:\n     *\n     * <ul>\n     *   <li>{@link BluetoothGattServerCallback#onCharacteristicReadRequest}\n     *   <li>{@link BluetoothGattServerCallback#onCharacteristicWriteRequest}\n     *   <li>{@link BluetoothGattServerCallback#onDescriptorReadRequest}\n     *   <li>{@link BluetoothGattServerCallback#onDescriptorWriteRequest}\n     * </ul>\n     *\n     * @param device The remote device to send this response to\n     * @param requestId The ID of the request that was received with the callback\n     * @param status The status of the request to be sent to the remote devices\n     * @param offset Value offset for partial read/write response\n     * @param value The value of the attribute that was read/written (optional)\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServerCallback#onDescriptorWriteRequest", "android.bluetooth.BluetoothGattServerCallback#onCharacteristicReadRequest", "android.bluetooth.BluetoothGattServerCallback#onCharacteristicWriteRequest", "android.bluetooth.BluetoothGattServerCallback#onDescriptorReadRequest" ]
  }, {
    "name" : "public boolean notifyCharacteristicChanged(BluetoothDevice device, BluetoothGattCharacteristic characteristic, boolean confirm)",
    "returnType" : "boolean",
    "comment" : "\n     * Send a notification or indication that a local characteristic has been updated.\n     *\n     * <p>A notification or indication is sent to the remote device to signal that the\n     * characteristic has been updated. This function should be invoked for every client that\n     * requests notifications/indications by writing to the \"Client Configuration\" descriptor for\n     * the given characteristic.\n     *\n     * @param device The remote device to receive the notification/indication\n     * @param characteristic The local characteristic that has been updated\n     * @param confirm true to request confirmation from the client (indication), false to send a\n     *     notification\n     * @return true, if the notification has been triggered successfully\n     * @throws IllegalArgumentException if the characteristic value or service is null\n     * @deprecated Use {@link BluetoothGattServer#notifyCharacteristicChanged(BluetoothDevice,\n     *     BluetoothGattCharacteristic, boolean, byte[])} as this is not memory safe.\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServer#notifyCharacteristicChanged(BluetoothDevice" ]
  }, {
    "name" : "public int notifyCharacteristicChanged(@NonNull BluetoothDevice device, @NonNull BluetoothGattCharacteristic characteristic, boolean confirm, @NonNull byte[] value)",
    "returnType" : "int",
    "comment" : "\n     * Send a notification or indication that a local characteristic has been updated.\n     *\n     * <p>A notification or indication is sent to the remote device to signal that the\n     * characteristic has been updated. This function should be invoked for every client that\n     * requests notifications/indications by writing to the \"Client Configuration\" descriptor for\n     * the given characteristic.\n     *\n     * @param device the remote device to receive the notification/indication\n     * @param characteristic the local characteristic that has been updated\n     * @param confirm {@code true} to request confirmation from the client (indication) or {@code\n     *     false} to send a notification\n     * @param value the characteristic value\n     * @return whether the notification has been triggered successfully\n     * @throws IllegalArgumentException if the characteristic value or service is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addService(BluetoothGattService service)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a service to the list of services to be hosted.\n     *\n     * <p>Once a service has been added to the list, the service and its included characteristics\n     * will be provided by the local device.\n     *\n     * <p>If the local device has already exposed services when this function is called, a service\n     * update notification will be sent to all clients.\n     *\n     * <p>The {@link BluetoothGattServerCallback#onServiceAdded} callback will indicate whether this\n     * service has been added successfully. Do not add another service before this callback.\n     *\n     * @param service Service to be added to the list of services provided by this device.\n     * @return true, if the request to add service has been initiated\n     ",
    "links" : [ "android.bluetooth.BluetoothGattServerCallback#onServiceAdded" ]
  }, {
    "name" : "public boolean removeService(BluetoothGattService service)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a service from the list of services to be provided.\n     *\n     * @param service Service to be removed.\n     * @return true, if the service has been removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearServices()",
    "returnType" : "void",
    "comment" : " Remove all services from the list of provided services. ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothGattService> getServices()",
    "returnType" : "List<BluetoothGattService>",
    "comment" : "\n     * Returns a list of GATT services offered by this device.\n     *\n     * <p>An application must call {@link #addService} to add a service to the list of services\n     * offered by this device.\n     *\n     * @return List of services. Returns an empty list if no services have been added yet.\n     ",
    "links" : [ "#addService" ]
  }, {
    "name" : "public BluetoothGattService getService(UUID uuid)",
    "returnType" : "BluetoothGattService",
    "comment" : "\n     * Returns a {@link BluetoothGattService} from the list of services offered by this device.\n     *\n     * <p>If multiple instances of the same service (as identified by UUID) exist, the first\n     * instance of the service is returned.\n     *\n     * @param uuid UUID of the requested service\n     * @return BluetoothGattService if supported, or null if the requested service is not offered by\n     *     this device.\n     ",
    "links" : [ "android.bluetooth.BluetoothGattService" ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Not supported - please use {@link BluetoothManager#getConnectedDevices(int)} with {@link\n     * BluetoothProfile#GATT} as argument\n     *\n     * @throws UnsupportedOperationException on every call\n     ",
    "links" : [ "android.bluetooth.BluetoothManager#getConnectedDevices(int)", "android.bluetooth.BluetoothProfile#GATT" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Not supported - please use {@link BluetoothManager#getConnectedDevices(int)} with {@link\n     * BluetoothProfile#GATT} as argument\n     *\n     * @throws UnsupportedOperationException on every call\n     ",
    "links" : [ "android.bluetooth.BluetoothManager#getConnectedDevices(int)", "android.bluetooth.BluetoothProfile#GATT" ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Not supported - please use {@link BluetoothManager#getDevicesMatchingConnectionStates(int,\n     * int[])} with {@link BluetoothProfile#GATT} as first argument\n     *\n     * @throws UnsupportedOperationException on every call\n     ",
    "links" : [ "android.bluetooth.BluetoothManager#getDevicesMatchingConnectionStates(int", "android.bluetooth.BluetoothProfile#GATT" ]
  } ],
  "methodNames" : [ "public int getServerIf()", " BluetoothGattCharacteristic getCharacteristicByHandle(int handle)", " BluetoothGattDescriptor getDescriptorByHandle(int handle)", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "public BluetoothAdapter getAdapter()", "public void close()", " boolean registerCallback(BluetoothGattServerCallback callback)", " boolean registerCallback(BluetoothGattServerCallback callback, boolean eattSupport)", "private void unregisterCallback()", " BluetoothGattService getService(UUID uuid, int instanceId, int type)", "public boolean connect(BluetoothDevice device, boolean autoConnect)", "public void cancelConnection(BluetoothDevice device)", "public void setPreferredPhy(BluetoothDevice device, int txPhy, int rxPhy, int phyOptions)", "public void readPhy(BluetoothDevice device)", "public boolean sendResponse(BluetoothDevice device, int requestId, int status, int offset, byte[] value)", "public boolean notifyCharacteristicChanged(BluetoothDevice device, BluetoothGattCharacteristic characteristic, boolean confirm)", "public int notifyCharacteristicChanged(@NonNull BluetoothDevice device, @NonNull BluetoothGattCharacteristic characteristic, boolean confirm, @NonNull byte[] value)", "public boolean addService(BluetoothGattService service)", "public boolean removeService(BluetoothGattService service)", "public void clearServices()", "public List<BluetoothGattService> getServices()", "public BluetoothGattService getService(UUID uuid)", "public int getConnectionState(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mService", "mAdapter", "mAttributionSource", "mCallback", "mServerIfLock", "mServerIf", "mTransport", "mPendingService", "mServices", "CALLBACK_REG_TIMEOUT", "GATT_MAX_ATTR_LEN", "mBluetoothGattServerCallback" ]
}