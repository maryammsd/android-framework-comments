{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/InputMethodInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "InputMethodInfo",
  "comment" : "\n * This class is used to specify meta information of an input method.\n *\n * <p>It should be defined in an XML resource file with an {@code <input-method>} element.\n * For more information, see the guide to\n * <a href=\"{@docRoot}guide/topics/text/creating-input-method.html\">\n * Creating an Input Method</a>.</p>\n *\n * @see InputMethodSubtype\n *\n * @attr ref android.R.styleable#InputMethod_settingsActivity\n * @attr ref android.R.styleable#InputMethod_isDefault\n * @attr ref android.R.styleable#InputMethod_supportsSwitchingToNextInputMethod\n * @attr ref android.R.styleable#InputMethod_supportsInlineSuggestions\n * @attr ref android.R.styleable#InputMethod_supportsInlineSuggestionsWithTouchExploration\n * @attr ref android.R.styleable#InputMethod_suppressesSpellChecker\n * @attr ref android.R.styleable#InputMethod_showInInputMethodPicker\n * @attr ref android.R.styleable#InputMethod_configChanges\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ACTION_STYLUS_HANDWRITING_SETTINGS",
    "type" : "String",
    "comment" : "\n     * {@link Intent#getAction() Intent action} for IME that\n     * {@link #supportsStylusHandwriting() supports stylus handwriting}.\n     *\n     * @see #createStylusHandwritingSettingsActivityIntent()\n     ",
    "links" : [ "#supportsStylusHandwriting()", "android.content.Intent#getAction()" ]
  }, {
    "name" : "ACTION_IME_LANGUAGE_SETTINGS",
    "type" : "String",
    "comment" : "\n     * {@link Intent#getAction() Intent action} for the IME language settings.\n     *\n     * @see #createImeLanguageSettingsActivityIntent()\n     ",
    "links" : [ "android.content.Intent#getAction()" ]
  }, {
    "name" : "COMPONENT_NAME_MAX_LENGTH",
    "type" : "int",
    "comment" : "\n     * Maximal length of a component name\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_IMES_PER_PACKAGE",
    "type" : "int",
    "comment" : "\n     * The maximum amount of IMEs that are loaded per package (in order).\n     * If a package contains more IMEs, they will be ignored and cannot be enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ResolveInfo",
    "comment" : "\n     * The Service that implements this input method component.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsVrOnly",
    "type" : "boolean",
    "comment" : "\n     * IME only supports VR mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsVirtualDeviceOnly",
    "type" : "boolean",
    "comment" : "\n     * IME only supports virtual devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "\n     * The unique string Id to identify the input method.  This is generated\n     * from the input method component.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSettingsActivityName",
    "type" : "String",
    "comment" : "\n     * The input method setting activity's name, used by the system settings to\n     * launch the setting activity of this input method.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLanguageSettingsActivityName",
    "type" : "String",
    "comment" : "\n     * The input method language settings activity's name, used to\n     * launch the language settings activity of this input method.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsDefaultResId",
    "type" : "int",
    "comment" : "\n     * The resource in the input method's .apk that holds a boolean indicating\n     * whether it should be considered the default input method for this\n     * system.  This is a resource ID instead of the final value so that it\n     * can change based on the configuration (in particular locale).\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubtypes",
    "type" : "InputMethodSubtypeArray",
    "comment" : "\n     * An array-like container of the subtypes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsAuxIme",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForceDefault",
    "type" : "boolean",
    "comment" : "\n     * Caveat: mForceDefault must be false for production. This flag is only for test.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSupportsSwitchingToNextInputMethod",
    "type" : "boolean",
    "comment" : "\n     * The flag whether this IME supports ways to switch to a next input method (e.g. globe key.)\n     ",
    "links" : [ ]
  }, {
    "name" : "mInlineSuggestionsEnabled",
    "type" : "boolean",
    "comment" : "\n     * The flag whether this IME supports inline suggestions.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSupportsInlineSuggestionsWithTouchExploration",
    "type" : "boolean",
    "comment" : "\n     * The flag whether this IME supports inline suggestions when touch exploration is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSuppressesSpellChecker",
    "type" : "boolean",
    "comment" : "\n     * The flag whether this IME suppresses spell checker.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShowInInputMethodPicker",
    "type" : "boolean",
    "comment" : "\n     * The flag whether this IME should be shown as an option in the IME picker.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHandledConfigChanges",
    "type" : "int",
    "comment" : "\n     * The flag for configurations IME assumes the responsibility for handling in\n     * {@link InputMethodService#onConfigurationChanged(Configuration)}}.\n     ",
    "links" : [ "android.inputmethodservice.InputMethodService#onConfigurationChanged(Configuration)" ]
  }, {
    "name" : "mSupportsStylusHandwriting",
    "type" : "boolean",
    "comment" : "\n     * The flag whether this IME supports Handwriting using stylus input.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSupportsConnectionlessStylusHandwriting",
    "type" : "boolean",
    "comment" : " The flag whether this IME supports connectionless stylus handwriting sessions. ",
    "links" : [ ]
  }, {
    "name" : "mStylusHandwritingSettingsActivityAttr",
    "type" : "String",
    "comment" : "\n     * The stylus handwriting setting activity's name, used by the system settings to\n     * launch the stylus handwriting specific setting activity of this input method.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<InputMethodInfo>",
    "comment" : "\n     * Used to make this class parcelable.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String computeId(@NonNull ResolveInfo service)",
    "returnType" : "String",
    "comment" : "\n     * @param service the {@link ResolveInfo} corresponds in which the IME is implemented.\n     * @return a unique ID to be returned by {@link #getId()}. We have used\n     *         {@link ComponentName#flattenToShortString()} for this purpose (and it is already\n     *         unrealistic to switch to a different scheme as it is already implicitly assumed in\n     *         many places).\n     * @hide\n     ",
    "links" : [ "#getId()", "android.content.ComponentName#flattenToShortString()", "android.content.pm.ResolveInfo" ]
  }, {
    "name" : "private static ResolveInfo buildFakeResolveInfo(String packageName, String className, CharSequence label)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * @return a unique ID for this input method, which is guaranteed to be the same as the result\n     *         of {@code getComponent().flattenToShortString()}.\n     * @see ComponentName#unflattenFromString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Return the .apk package that implements this input method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getServiceName()",
    "returnType" : "String",
    "comment" : "\n     * Return the class name of the service component that implements\n     * this input method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ServiceInfo getServiceInfo()",
    "returnType" : "ServiceInfo",
    "comment" : "\n     * Return the raw information about the Service implementing this\n     * input method.  Do not modify the returned object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return the component of the service that implements this input\n     * method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadLabel(PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Load the user-displayed label for this input method.\n     *\n     * @param pm Supply a PackageManager used to load the input method's\n     * resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadIcon(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Load the user-displayed icon for this input method.\n     *\n     * @param pm Supply a PackageManager used to load the input method's\n     * resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSettingsActivity()",
    "returnType" : "String",
    "comment" : "\n     * Return the class name of an activity that provides a settings UI for\n     * the input method.  You can launch this activity be starting it with\n     * an {@link android.content.Intent} whose action is MAIN and with an\n     * explicit {@link android.content.ComponentName}\n     * composed of {@link #getPackageName} and the class name returned here.\n     *\n     * <p>A null will be returned if there is no settings activity associated\n     * with the input method.</p>\n     * @see #createStylusHandwritingSettingsActivityIntent()\n     ",
    "links" : [ "android.content.ComponentName", "android.content.Intent", "#getPackageName" ]
  }, {
    "name" : "public boolean isVrOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if IME supports VR mode only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVirtualDeviceOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if IME supports only virtual devices.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSubtypeCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the count of the subtypes of Input Method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputMethodSubtype getSubtypeAt(int index)",
    "returnType" : "InputMethodSubtype",
    "comment" : "\n     * Return the Input Method's subtype at the specified index.\n     *\n     * @param index the index of the subtype to return.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIsDefaultResourceId()",
    "returnType" : "int",
    "comment" : "\n     * Return the resource identifier of a resource inside of this input\n     * method's .apk that determines whether it should be considered a\n     * default input method for the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefault(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether or not this ime is a default ime or not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConfigChanges()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bit mask of kinds of configuration changes that this IME\n     * can handle itself (without being restarted by the system).\n     *\n     * @attr ref android.R.styleable#InputMethod_configChanges\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsStylusHandwriting()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if IME supports handwriting using stylus input.\n     * @attr ref android.R.styleable#InputMethod_supportsStylusHandwriting\n     * @see #createStylusHandwritingSettingsActivityIntent()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsConnectionlessStylusHandwriting()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the IME supports connectionless stylus handwriting sessions.\n     *\n     * @attr ref android.R.styleable#InputMethod_supportsConnectionlessStylusHandwriting\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent createStylusHandwritingSettingsActivityIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Returns {@link Intent} for stylus handwriting settings activity with\n     * {@link Intent#getAction() Intent action} {@link #ACTION_STYLUS_HANDWRITING_SETTINGS}\n     * if IME {@link #supportsStylusHandwriting() supports stylus handwriting}, else\n     * <code>null</code> if there are no associated settings for stylus handwriting / handwriting\n     * is not supported or if\n     * {@link android.R.styleable#InputMethod_stylusHandwritingSettingsActivity} is not defined.\n     *\n     * <p>To launch stylus settings, use this method to get the {@link android.content.Intent} to\n     * launch the stylus handwriting settings activity.</p>\n     * <p>e.g.<pre><code>startActivity(createStylusHandwritingSettingsActivityIntent());</code>\n     * </pre></p>\n     *\n     * @attr ref R.styleable#InputMethod_stylusHandwritingSettingsActivity\n     * @see #getSettingsActivity()\n     * @see #supportsStylusHandwriting()\n     ",
    "links" : [ "#supportsStylusHandwriting()", "android.content.Intent", "android.content.Intent#getAction()", "android.R.styleable#InputMethod_stylusHandwritingSettingsActivity", "#ACTION_STYLUS_HANDWRITING_SETTINGS" ]
  }, {
    "name" : "public Intent createImeLanguageSettingsActivityIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Returns {@link Intent} for IME language settings activity with\n     * {@link Intent#getAction() Intent action} {@link #ACTION_IME_LANGUAGE_SETTINGS},\n     * else <code>null</code> if\n     * {@link android.R.styleable#InputMethod_languageSettingsActivity} is not defined.\n     *\n     * <p>To launch IME language settings, use this method to get the {@link Intent} to launch\n     * the IME language settings activity.</p>\n     * <p>e.g.<pre><code>startActivity(createImeLanguageSettingsActivityIntent());</code></pre></p>\n     *\n     * @attr ref R.styleable#InputMethod_languageSettingsActivity\n     ",
    "links" : [ "#ACTION_IME_LANGUAGE_SETTINGS", "android.content.Intent", "android.content.Intent#getAction()", "android.R.styleable#InputMethod_languageSettingsActivity" ]
  }, {
    "name" : "public void dump(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Used to test whether the given parameter object is an\n     * {@link InputMethodInfo} and its Id is the same to this one.\n     *\n     * @return true if the given parameter object is an\n     *         {@link InputMethodInfo} and its Id is the same to this one.\n     ",
    "links" : [ "android.view.inputmethod.InputMethodInfo" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSystem()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @return {@code true} if the IME is a trusted system component (e.g. pre-installed)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAuxiliaryIme()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsSwitchingToNextInputMethod()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this input method supports ways to switch to a next input method.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInlineSuggestionsEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this input method supports inline suggestions.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsInlineSuggestionsWithTouchExploration()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this input method supports inline suggestions when touch exploration\n     * is enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean suppressesSpellChecker()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if this input method suppresses spell checker.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldShowInInputMethodPicker()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this input method should be shown in menus for selecting an Input\n     * Method, such as the system Input Method Picker. This is {@code false} if the IME is intended\n     * to be accessed programmatically.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used to package this object into a {@link Parcel}.\n     *\n     * @param dest The {@link Parcel} to be written.\n     * @param flags The flags used for parceling.\n     ",
    "links" : [ "android.os.Parcel" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String computeId(@NonNull ResolveInfo service)", "private static ResolveInfo buildFakeResolveInfo(String packageName, String className, CharSequence label)", "public String getId()", "public String getPackageName()", "public String getServiceName()", "public ServiceInfo getServiceInfo()", "public ComponentName getComponent()", "public CharSequence loadLabel(PackageManager pm)", "public Drawable loadIcon(PackageManager pm)", "public String getSettingsActivity()", "public boolean isVrOnly()", "public boolean isVirtualDeviceOnly()", "public int getSubtypeCount()", "public InputMethodSubtype getSubtypeAt(int index)", "public int getIsDefaultResourceId()", "public boolean isDefault(Context context)", "public int getConfigChanges()", "public boolean supportsStylusHandwriting()", "public boolean supportsConnectionlessStylusHandwriting()", "public Intent createStylusHandwritingSettingsActivityIntent()", "public Intent createImeLanguageSettingsActivityIntent()", "public void dump(Printer pw, String prefix)", "public String toString()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public boolean isSystem()", "public boolean isAuxiliaryIme()", "public boolean supportsSwitchingToNextInputMethod()", "public boolean isInlineSuggestionsEnabled()", "public boolean supportsInlineSuggestionsWithTouchExploration()", "public boolean suppressesSpellChecker()", "public boolean shouldShowInInputMethodPicker()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ],
  "variableNames" : [ "ACTION_STYLUS_HANDWRITING_SETTINGS", "ACTION_IME_LANGUAGE_SETTINGS", "COMPONENT_NAME_MAX_LENGTH", "MAX_IMES_PER_PACKAGE", "TAG", "mService", "mIsVrOnly", "mIsVirtualDeviceOnly", "mId", "mSettingsActivityName", "mLanguageSettingsActivityName", "mIsDefaultResId", "mSubtypes", "mIsAuxIme", "mForceDefault", "mSupportsSwitchingToNextInputMethod", "mInlineSuggestionsEnabled", "mSupportsInlineSuggestionsWithTouchExploration", "mSuppressesSpellChecker", "mShowInInputMethodPicker", "mHandledConfigChanges", "mSupportsStylusHandwriting", "mSupportsConnectionlessStylusHandwriting", "mStylusHandwritingSettingsActivityAttr", "CREATOR" ]
}