{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/Log.java",
  "packageName" : "org.chromium.base",
  "className" : "Log",
  "comment" : "\n * Utility class for Logging.\n *\n * <p>\n * Defines logging access points for each feature. They format and forward the logs to\n * {@link android.util.Log}, allowing to standardize the output, to make it easy to identify\n * the origin of logs, and enable or disable logging in different parts of the code.\n * </p>\n * <p>\n * Usage documentation: {@code //docs/android_logging.md}.\n * </p>\n ",
  "links" : [ "android.util.Log" ],
  "variables" : [ {
    "name" : "ASSERT",
    "type" : "int",
    "comment" : " Convenience property, same as {@link android.util.Log#ASSERT}. ",
    "links" : [ "android.util.Log#ASSERT" ]
  }, {
    "name" : "DEBUG",
    "type" : "int",
    "comment" : " Convenience property, same as {@link android.util.Log#DEBUG}. ",
    "links" : [ "android.util.Log#DEBUG" ]
  }, {
    "name" : "ERROR",
    "type" : "int",
    "comment" : " Convenience property, same as {@link android.util.Log#ERROR}. ",
    "links" : [ "android.util.Log#ERROR" ]
  }, {
    "name" : "INFO",
    "type" : "int",
    "comment" : " Convenience property, same as {@link android.util.Log#INFO}. ",
    "links" : [ "android.util.Log#INFO" ]
  }, {
    "name" : "VERBOSE",
    "type" : "int",
    "comment" : " Convenience property, same as {@link android.util.Log#VERBOSE}. ",
    "links" : [ "android.util.Log#VERBOSE" ]
  }, {
    "name" : "WARN",
    "type" : "int",
    "comment" : " Convenience property, same as {@link android.util.Log#WARN}. ",
    "links" : [ "android.util.Log#WARN" ]
  } ],
  "methods" : [ {
    "name" : "private static String formatLog(String messageTemplate, Throwable tr, Object... params)",
    "returnType" : "String",
    "comment" : " Returns a formatted log message, using the supplied format and arguments.",
    "links" : [ ]
  }, {
    "name" : "public static String normalizeTag(String tag)",
    "returnType" : "String",
    "comment" : "\n     * Returns a normalized tag that will be in the form: \"cr_foo\". This function is called by the\n     * various Log overrides. If using {@link #isLoggable(String, int)}, you might want to call it\n     * to get the tag that will actually be used.\n     ",
    "links" : [ "#isLoggable(String" ]
  }, {
    "name" : "private static String formatLogWithStack(String messageTemplate, Throwable tr, Object... params)",
    "returnType" : "String",
    "comment" : "\n     * Returns a formatted log message, using the supplied format and arguments.\n     * The message will be prepended with the filename and line number of the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDebug()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isLoggable(String tag, int level)",
    "returnType" : "boolean",
    "comment" : "\n     * In debug: Forwards to {@link android.util.Log#isLoggable(String, int)}, but always\n     * In release: Always returns false (via proguard rule).\n     ",
    "links" : [ "android.util.Log#isLoggable(String" ]
  }, {
    "name" : "public static void v(String tag, String messageTemplate, Object... args)",
    "returnType" : "void",
    "comment" : "\n     * Sends a {@link android.util.Log#VERBOSE} log message.\n     *\n     * @param tag Used to identify the source of a log message. Might be modified in the output\n     *            (see {@link #normalizeTag(String)})\n     * @param messageTemplate The message you would like logged. It is to be specified as a format\n     *                        string.\n     * @param args Arguments referenced by the format specifiers in the format string. If the last\n     *             one is a {@link Throwable}, its trace will be printed.\n     ",
    "links" : [ "#normalizeTag(String)", "Throwable", "android.util.Log#VERBOSE" ]
  }, {
    "name" : "public static void d(String tag, String messageTemplate, Object... args)",
    "returnType" : "void",
    "comment" : "\n     * Sends a {@link android.util.Log#DEBUG} log message.\n     *\n     * @param tag Used to identify the source of a log message. Might be modified in the output\n     *            (see {@link #normalizeTag(String)})\n     * @param messageTemplate The message you would like logged. It is to be specified as a format\n     *                        string.\n     * @param args Arguments referenced by the format specifiers in the format string. If the last\n     *             one is a {@link Throwable}, its trace will be printed.\n     ",
    "links" : [ "android.util.Log#DEBUG", "#normalizeTag(String)", "Throwable" ]
  }, {
    "name" : "public static void i(String tag, String messageTemplate, Object... args)",
    "returnType" : "void",
    "comment" : "\n     * Sends an {@link android.util.Log#INFO} log message.\n     *\n     * @param tag Used to identify the source of a log message. Might be modified in the output\n     *            (see {@link #normalizeTag(String)})\n     * @param messageTemplate The message you would like logged. It is to be specified as a format\n     *                        string.\n     * @param args Arguments referenced by the format specifiers in the format string. If the last\n     *             one is a {@link Throwable}, its trace will be printed.\n     ",
    "links" : [ "#normalizeTag(String)", "Throwable", "android.util.Log#INFO" ]
  }, {
    "name" : "public static void i(String tag, String message)",
    "returnType" : "void",
    "comment" : " Overloads to avoid varargs overhead.",
    "links" : [ ]
  }, {
    "name" : "public static void i(String tag, String message, Throwable t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void i(String tag, String messageTemplate, Object o)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void i(String tag, String messageTemplate, Object o1, Object o2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void w(String tag, String messageTemplate, Object... args)",
    "returnType" : "void",
    "comment" : "\n     * Sends a {@link android.util.Log#WARN} log message.\n     *\n     * @param tag Used to identify the source of a log message. Might be modified in the output\n     *            (see {@link #normalizeTag(String)})\n     * @param messageTemplate The message you would like logged. It is to be specified as a format\n     *                        string.\n     * @param args Arguments referenced by the format specifiers in the format string. If the last\n     *             one is a {@link Throwable}, its trace will be printed.\n     ",
    "links" : [ "android.util.Log#WARN", "#normalizeTag(String)", "Throwable" ]
  }, {
    "name" : "public static void w(String tag, String message)",
    "returnType" : "void",
    "comment" : " Overloads to avoid varargs overhead.",
    "links" : [ ]
  }, {
    "name" : "public static void w(String tag, String message, Throwable t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void w(String tag, String messageTemplate, Object o)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void w(String tag, String messageTemplate, Object o1, Object o2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void e(String tag, String messageTemplate, Object... args)",
    "returnType" : "void",
    "comment" : "\n     * Sends an {@link android.util.Log#ERROR} log message.\n     *\n     * @param tag Used to identify the source of a log message. Might be modified in the output\n     *            (see {@link #normalizeTag(String)})\n     * @param messageTemplate The message you would like logged. It is to be specified as a format\n     *                        string.\n     * @param args Arguments referenced by the format specifiers in the format string. If the last\n     *             one is a {@link Throwable}, its trace will be printed.\n     ",
    "links" : [ "android.util.Log#ERROR", "#normalizeTag(String)", "Throwable" ]
  }, {
    "name" : "public static void e(String tag, String message)",
    "returnType" : "void",
    "comment" : " Overloads to avoid varargs overhead.",
    "links" : [ ]
  }, {
    "name" : "public static void e(String tag, String message, Throwable t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void e(String tag, String messageTemplate, Object o)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void e(String tag, String messageTemplate, Object o1, Object o2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void wtf(String tag, String messageTemplate, Object... args)",
    "returnType" : "void",
    "comment" : "\n     * What a Terrible Failure: Used for conditions that should never happen, and logged at\n     * the {@link android.util.Log#ASSERT} level. Depending on the configuration, it might\n     * terminate the process.\n     *\n     * @see android.util.Log#wtf(String, String, Throwable)\n     *\n     * @param tag Used to identify the source of a log message. Might be modified in the output\n     *            (see {@link #normalizeTag(String)})\n     * @param messageTemplate The message you would like logged. It is to be specified as a format\n     *                        string.\n     * @param args Arguments referenced by the format specifiers in the format string. If the last\n     *             one is a {@link Throwable}, its trace will be printed.\n     ",
    "links" : [ "#normalizeTag(String)", "Throwable", "android.util.Log#ASSERT" ]
  }, {
    "name" : "public static String getStackTraceString(Throwable tr)",
    "returnType" : "String",
    "comment" : " Handy function to get a loggable stack trace from a Throwable. ",
    "links" : [ ]
  }, {
    "name" : "private static Throwable getThrowableToLog(Object[] args)",
    "returnType" : "Throwable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getCallOrigin()",
    "returnType" : "String",
    "comment" : " Returns a string form of the origin of the log call, to be used as secondary tag.",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static String formatLog(String messageTemplate, Throwable tr, Object... params)", "public static String normalizeTag(String tag)", "private static String formatLogWithStack(String messageTemplate, Throwable tr, Object... params)", "private static boolean isDebug()", "public static boolean isLoggable(String tag, int level)", "public static void v(String tag, String messageTemplate, Object... args)", "public static void d(String tag, String messageTemplate, Object... args)", "public static void i(String tag, String messageTemplate, Object... args)", "public static void i(String tag, String message)", "public static void i(String tag, String message, Throwable t)", "public static void i(String tag, String messageTemplate, Object o)", "public static void i(String tag, String messageTemplate, Object o1, Object o2)", "public static void w(String tag, String messageTemplate, Object... args)", "public static void w(String tag, String message)", "public static void w(String tag, String message, Throwable t)", "public static void w(String tag, String messageTemplate, Object o)", "public static void w(String tag, String messageTemplate, Object o1, Object o2)", "public static void e(String tag, String messageTemplate, Object... args)", "public static void e(String tag, String message)", "public static void e(String tag, String message, Throwable t)", "public static void e(String tag, String messageTemplate, Object o)", "public static void e(String tag, String messageTemplate, Object o1, Object o2)", "public static void wtf(String tag, String messageTemplate, Object... args)", "public static String getStackTraceString(Throwable tr)", "private static Throwable getThrowableToLog(Object[] args)", "private static String getCallOrigin()" ],
  "variableNames" : [ "ASSERT", "DEBUG", "ERROR", "INFO", "VERBOSE", "WARN" ]
}