{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/StringSegment.java",
  "packageName" : "android.icu.impl",
  "className" : "StringSegment",
  "comment" : "\n * A mutable String wrapper with a variable offset and length and\n * support for case folding. The charAt, length, and subSequence methods all\n * operate relative to the fixed offset into the String.\n *\n * Intended to be useful for parsing.\n *\n * CAUTION: Since this class is mutable, it must not be used anywhere that an\n * immutable object is required, like in a cache or as the key of a hash map.\n *\n * @author sffc (Shane Carr)\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "str",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "start",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "end",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "foldCase",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOffset(int start)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void adjustOffset(int delta)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to <code>setOffset(getOffset()+delta)</code>.\n     *\n     * <p>\n     * Number parsing note: This method is usually called by a Matcher to register that a char was\n     * consumed. If the char is strong (it usually is, except for things like whitespace), follow this\n     * with a call to ParsedNumber#setCharsConsumed(). For more information on strong chars, see that\n     * method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void adjustOffsetByCodePoint()",
    "returnType" : "void",
    "comment" : "\n     * Adjusts the offset by the width of the current lead code point, either 1 or 2 chars.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLength(int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resetLength()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public char charAt(int index)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence subSequence(int start, int end)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCodePoint()",
    "returnType" : "int",
    "comment" : "\n     * Returns the first code point in the string segment.\n     *\n     * <p>\n     * <strong>Important:</strong> Most of the time, you should use {@link #startsWith}, which handles\n     * case folding logic, instead of this method.\n     ",
    "links" : [ "#startsWith" ]
  }, {
    "name" : "public int codePointAt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the code point at the given index relative to the current offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startsWith(int otherCp)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the first code point of this StringSegment equals the given code point.\n     *\n     * <p>\n     * This method will perform case folding if case folding is enabled for the parser.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startsWith(UnicodeSet uniset)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the first code point of this StringSegment is in the given UnicodeSet.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startsWith(CharSequence other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there is at least one code point of overlap between this StringSegment and the\n     * given CharSequence. Null-safe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCommonPrefixLength(CharSequence other)",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the prefix shared by this StringSegment and the given CharSequence. For\n     * example, if this string segment is \"aab\", and the char sequence is \"aac\", this method returns 2,\n     * since the first 2 characters are the same.\n     *\n     * <p>\n     * This method only returns offsets along code point boundaries.\n     *\n     * <p>\n     * This method will perform case folding if case folding was enabled in the constructor.\n     *\n     * <p>\n     * IMPORTANT: The given CharSequence must not be empty! It is the caller's responsibility to check.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCaseSensitivePrefixLength(CharSequence other)",
    "returnType" : "int",
    "comment" : "\n     * Like {@link #getCommonPrefixLength}, but never performs case folding, even if case folding was\n     * enabled in the constructor.\n     ",
    "links" : [ "#getCommonPrefixLength" ]
  }, {
    "name" : "private int getPrefixLengthInternal(CharSequence other, boolean foldCase)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final boolean codePointsEqual(int cp1, int cp2, boolean foldCase)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean contentEquals(CharSequence other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this segment contains the same characters as the other CharSequence.\n     *\n     * <p>This method does not perform case folding; if you want case-insensitive equality, use\n     * {@link #getCommonPrefixLength}.\n     ",
    "links" : [ "#getCommonPrefixLength" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " Returns a string representation useful for debugging. ",
    "links" : [ ]
  }, {
    "name" : "public String asString()",
    "returnType" : "String",
    "comment" : " Returns a String that is equivalent to the CharSequence representation. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getOffset()", "public void setOffset(int start)", "public void adjustOffset(int delta)", "public void adjustOffsetByCodePoint()", "public void setLength(int length)", "public void resetLength()", "public int length()", "public char charAt(int index)", "public CharSequence subSequence(int start, int end)", "public int getCodePoint()", "public int codePointAt(int index)", "public boolean startsWith(int otherCp)", "public boolean startsWith(UnicodeSet uniset)", "public boolean startsWith(CharSequence other)", "public int getCommonPrefixLength(CharSequence other)", "public int getCaseSensitivePrefixLength(CharSequence other)", "private int getPrefixLengthInternal(CharSequence other, boolean foldCase)", "private static final boolean codePointsEqual(int cp1, int cp2, boolean foldCase)", "public boolean contentEquals(CharSequence other)", "public String toString()", "public String asString()" ],
  "variableNames" : [ "str", "start", "end", "foldCase" ]
}