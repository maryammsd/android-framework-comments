{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/PostProcessor.java",
  "packageName" : "android.graphics",
  "className" : "PostProcessor",
  "comment" : "\n *  Helper interface for adding custom processing to an image.\n *\n *  <p>The image being processed may be a {@link Drawable}, a {@link Bitmap}, or\n *  a frame of an {@link AnimatedImageDrawable} produced by {@link ImageDecoder}.\n *  This is called before the requested object is returned.</p>\n *\n *  <p>This custom processing can even be applied to images that will be returned\n *  as immutable objects, such as a {@link Bitmap} with {@code Config}\n *  {@link Bitmap.Config#HARDWARE} returned by {@link ImageDecoder}.</p>\n *\n *  <p>On an {@link AnimatedImageDrawable}, the callback will only be called once,\n *  but the drawing commands will be applied to each frame, as if the {@link Canvas}\n *  had been returned by {@link Picture#beginRecording Picture.beginRecording}.<p>\n *\n *  <p>Supplied to ImageDecoder via {@link ImageDecoder#setPostProcessor setPostProcessor}.</p>\n ",
  "links" : [ "android.graphics.Bitmap", "android.graphics.ImageDecoder#setPostProcessor", "android.graphics.drawable.AnimatedImageDrawable", "Bitmap.Config#HARDWARE", "android.graphics.Canvas", "android.graphics.ImageDecoder", "android.graphics.Picture#beginRecording" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int onPostProcess(@NonNull Canvas canvas)",
    "returnType" : "int",
    "comment" : "\n     *  Do any processing after (for example) decoding.\n     *\n     *  <p>Drawing to the {@link Canvas} will behave as if the initial processing\n     *  (e.g. decoding) already exists in the Canvas. An implementation can draw\n     *  effects on top of this, or it can even draw behind it using\n     *  {@link PorterDuff.Mode#DST_OVER PorterDuff.Mode.DST_OVER}. A common\n     *  effect is to add transparency to the corners to achieve rounded corners.\n     *  That can be done with the following code:</p>\n     *\n     *  <pre class=\"prettyprint\">\n     *  Path path = new Path();\n     *  path.setFillType(Path.FillType.INVERSE_EVEN_ODD);\n     *  int width = canvas.getWidth();\n     *  int height = canvas.getHeight();\n     *  path.addRoundRect(0, 0, width, height, 20, 20, Path.Direction.CW);\n     *  Paint paint = new Paint();\n     *  paint.setAntiAlias(true);\n     *  paint.setColor(Color.TRANSPARENT);\n     *  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC));\n     *  canvas.drawPath(path, paint);\n     *  return PixelFormat.TRANSLUCENT;\n     *  </pre>\n     *\n     *\n     *  @param canvas The {@link Canvas} to draw to.\n     *  @return Opacity of the result after drawing.\n     *      {@link PixelFormat#UNKNOWN PixelFormat.UNKNOWN} means that the\n     *      implementation did not change whether the image has alpha. Return\n     *      this unless you added transparency (e.g. with the code above, in\n     *      which case you should return\n     *      {@link PixelFormat#TRANSLUCENT PixelFormat.TRANSLUCENT}) or you\n     *      forced the image to be opaque (e.g. by drawing everywhere with an\n     *      opaque color and {@link PorterDuff.Mode#DST_OVER PorterDuff.Mode.DST_OVER},\n     *      in which case you should return {@link PixelFormat#OPAQUE PixelFormat.OPAQUE}).\n     *      {@link PixelFormat#TRANSLUCENT PixelFormat.TRANSLUCENT} means that\n     *      the implementation added transparency. This is safe to return even\n     *      if the image already had transparency. This is also safe to return\n     *      if the result is opaque, though it may draw more slowly.\n     *      {@link PixelFormat#OPAQUE PixelFormat.OPAQUE} means that the\n     *      implementation forced the image to be opaque. This is safe to return\n     *      even if the image was already opaque.\n     *      {@link PixelFormat#TRANSPARENT PixelFormat.TRANSPARENT} (or any other\n     *      integer) is not allowed, and will result in throwing an\n     *      {@link java.lang.IllegalArgumentException}.\n     ",
    "links" : [ "android.graphics.PixelFormat#UNKNOWN", "android.graphics.PixelFormat#TRANSPARENT", "android.graphics.PixelFormat#OPAQUE", "android.graphics.PixelFormat#TRANSLUCENT", "android.graphics.Canvas", "java.lang.IllegalArgumentException", "PorterDuff.Mode#DST_OVER" ]
  } ],
  "methodNames" : [ "public int onPostProcess(@NonNull Canvas canvas)" ],
  "variableNames" : [ ]
}