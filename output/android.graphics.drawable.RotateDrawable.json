{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/RotateDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "RotateDrawable",
  "comment" : "\n * <p>\n * A Drawable that can rotate another Drawable based on the current level value.\n * The start and end angles of rotation can be controlled to map any circular\n * arc to the level values range.\n * <p>\n * It can be defined in an XML file with the <code>&lt;rotate&gt;</code> element.\n * For more information, see the guide to\n * <a href=\"{@docRoot}guide/topics/resources/animation-resource.html\">Animation Resources</a>.\n *\n * @attr ref android.R.styleable#RotateDrawable_visible\n * @attr ref android.R.styleable#RotateDrawable_fromDegrees\n * @attr ref android.R.styleable#RotateDrawable_toDegrees\n * @attr ref android.R.styleable#RotateDrawable_pivotX\n * @attr ref android.R.styleable#RotateDrawable_pivotY\n * @attr ref android.R.styleable#RotateDrawable_drawable\n ",
  "variables" : [ {
    "name" : "MAX_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "RotateState",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@NonNull Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyRequiredAttributes(@NonNull TypedArray a) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(@NonNull TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFromDegrees(float fromDegrees)",
    "returnType" : "void",
    "comment" : "\n     * Sets the start angle for rotation.\n     *\n     * @param fromDegrees starting angle in degrees\n     * @see #getFromDegrees()\n     * @attr ref android.R.styleable#RotateDrawable_fromDegrees\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFromDegrees()",
    "returnType" : "float",
    "comment" : "\n     * @return starting angle for rotation in degrees\n     * @see #setFromDegrees(float)\n     * @attr ref android.R.styleable#RotateDrawable_fromDegrees\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setToDegrees(float toDegrees)",
    "returnType" : "void",
    "comment" : "\n     * Sets the end angle for rotation.\n     *\n     * @param toDegrees ending angle in degrees\n     * @see #getToDegrees()\n     * @attr ref android.R.styleable#RotateDrawable_toDegrees\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getToDegrees()",
    "returnType" : "float",
    "comment" : "\n     * @return ending angle for rotation in degrees\n     * @see #setToDegrees(float)\n     * @attr ref android.R.styleable#RotateDrawable_toDegrees\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPivotX(float pivotX)",
    "returnType" : "void",
    "comment" : "\n     * Sets the X position around which the drawable is rotated.\n     * <p>\n     * If the X pivot is relative (as specified by\n     * {@link #setPivotXRelative(boolean)}), then the position represents a\n     * fraction of the drawable width. Otherwise, the position represents an\n     * absolute value in pixels.\n     *\n     * @param pivotX X position around which to rotate\n     * @see #setPivotXRelative(boolean)\n     * @attr ref android.R.styleable#RotateDrawable_pivotX\n     ",
    "links" : [ "#setPivotXRelative(boolean)" ]
  }, {
    "name" : "public float getPivotX()",
    "returnType" : "float",
    "comment" : "\n     * @return X position around which to rotate\n     * @see #setPivotX(float)\n     * @attr ref android.R.styleable#RotateDrawable_pivotX\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPivotXRelative(boolean relative)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the X pivot value represents a fraction of the drawable\n     * width or an absolute value in pixels.\n     *\n     * @param relative true if the X pivot represents a fraction of the drawable\n     *            width, or false if it represents an absolute value in pixels\n     * @see #isPivotXRelative()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPivotXRelative()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the X pivot represents a fraction of the drawable width,\n     *         or false if it represents an absolute value in pixels\n     * @see #setPivotXRelative(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPivotY(float pivotY)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Y position around which the drawable is rotated.\n     * <p>\n     * If the Y pivot is relative (as specified by\n     * {@link #setPivotYRelative(boolean)}), then the position represents a\n     * fraction of the drawable height. Otherwise, the position represents an\n     * absolute value in pixels.\n     *\n     * @param pivotY Y position around which to rotate\n     * @see #getPivotY()\n     * @attr ref android.R.styleable#RotateDrawable_pivotY\n     ",
    "links" : [ "#setPivotYRelative(boolean)" ]
  }, {
    "name" : "public float getPivotY()",
    "returnType" : "float",
    "comment" : "\n     * @return Y position around which to rotate\n     * @see #setPivotY(float)\n     * @attr ref android.R.styleable#RotateDrawable_pivotY\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPivotYRelative(boolean relative)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the Y pivot value represents a fraction of the drawable\n     * height or an absolute value in pixels.\n     *\n     * @param relative True if the Y pivot represents a fraction of the drawable\n     *            height, or false if it represents an absolute value in pixels\n     * @see #isPivotYRelative()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPivotYRelative()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the Y pivot represents a fraction of the drawable height,\n     *         or false if it represents an absolute value in pixels\n     * @see #setPivotYRelative(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLevelChange(int level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DrawableWrapperState mutateConstantState()",
    "returnType" : "DrawableWrapperState",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MAX_LEVEL", "mState" ],
  "methodNames" : [ "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public void applyTheme(@NonNull Theme t)", "private void verifyRequiredAttributes(@NonNull TypedArray a) throws XmlPullParserException", "private void updateStateFromTypedArray(@NonNull TypedArray a)", "public void draw(Canvas canvas)", "public void setFromDegrees(float fromDegrees)", "public float getFromDegrees()", "public void setToDegrees(float toDegrees)", "public float getToDegrees()", "public void setPivotX(float pivotX)", "public float getPivotX()", "public void setPivotXRelative(boolean relative)", "public boolean isPivotXRelative()", "public void setPivotY(float pivotY)", "public float getPivotY()", "public void setPivotYRelative(boolean relative)", "public boolean isPivotYRelative()", "protected boolean onLevelChange(int level)", " DrawableWrapperState mutateConstantState()" ]
}