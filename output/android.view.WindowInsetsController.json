{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/WindowInsetsController.java",
  "packageName" : "android.view",
  "className" : "WindowInsetsController",
  "comment" : "\n * Interface to control windows that generate insets.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "APPEARANCE_OPAQUE_STATUS_BARS",
    "type" : "int",
    "comment" : "\n     * Makes status bars become opaque with solid dark background and light foreground.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "APPEARANCE_OPAQUE_NAVIGATION_BARS",
    "type" : "int",
    "comment" : "\n     * Makes navigation bars become opaque with solid dark background and light foreground.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "APPEARANCE_LOW_PROFILE_BARS",
    "type" : "int",
    "comment" : "\n     * Makes items on system bars become less noticeable without changing the layout of the bars.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "APPEARANCE_LIGHT_STATUS_BARS",
    "type" : "int",
    "comment" : "\n     * Changes the foreground color for light status bars so that the items on the bar can be read\n     * clearly.\n     ",
    "links" : [ ]
  }, {
    "name" : "APPEARANCE_LIGHT_NAVIGATION_BARS",
    "type" : "int",
    "comment" : "\n     * Changes the foreground color for light navigation bars so that the items on the bar can be\n     * read clearly.\n     ",
    "links" : [ ]
  }, {
    "name" : "APPEARANCE_SEMI_TRANSPARENT_STATUS_BARS",
    "type" : "int",
    "comment" : "\n     * Makes status bars semi-transparent with dark background and light foreground.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "APPEARANCE_SEMI_TRANSPARENT_NAVIGATION_BARS",
    "type" : "int",
    "comment" : "\n     * Makes navigation bars semi-transparent with dark background and light foreground.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "APPEARANCE_TRANSPARENT_CAPTION_BAR_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Makes the caption bar transparent.\n     ",
    "links" : [ ]
  }, {
    "name" : "APPEARANCE_LIGHT_CAPTION_BARS",
    "type" : "int",
    "comment" : "\n     * When {@link WindowInsetsController#APPEARANCE_TRANSPARENT_CAPTION_BAR_BACKGROUND} is set,\n     * changes the foreground color of the caption bars so that the items on the bar can be read\n     * clearly on light backgrounds.\n     ",
    "links" : [ "android.view.WindowInsetsController#APPEARANCE_TRANSPARENT_CAPTION_BAR_BACKGROUND" ]
  }, {
    "name" : "APPEARANCE_FORCE_LIGHT_NAVIGATION_BARS",
    "type" : "int",
    "comment" : "\n     * Same as {@link #APPEARANCE_LIGHT_NAVIGATION_BARS} but set by the system. The system will\n     * respect {@link #APPEARANCE_LIGHT_NAVIGATION_BARS} when this is cleared.\n     * @hide\n     ",
    "links" : [ "#APPEARANCE_LIGHT_NAVIGATION_BARS" ]
  }, {
    "name" : "BEHAVIOR_SHOW_BARS_BY_TOUCH",
    "type" : "int",
    "comment" : "\n     * Option for {@link #setSystemBarsBehavior(int)}. System bars will be forcibly shown on any\n     * user interaction on the corresponding display if navigation bars are hidden by\n     * {@link #hide(int)} or\n     * {@link WindowInsetsAnimationController#setInsetsAndAlpha(Insets, float, float)}.\n     * @deprecated This is not supported on Android {@link Build.VERSION_CODES#S} and later. Use\n     *             {@link #BEHAVIOR_DEFAULT} or {@link #BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE}\n     *             instead.\n     ",
    "links" : [ "#BEHAVIOR_DEFAULT", "Build.VERSION_CODES#S", "android.view.WindowInsetsAnimationController#setInsetsAndAlpha(Insets", "#BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE", "#hide(int)", "#setSystemBarsBehavior(int)" ]
  }, {
    "name" : "BEHAVIOR_DEFAULT",
    "type" : "int",
    "comment" : "\n     * The default option for {@link #setSystemBarsBehavior(int)}: Window would like to remain\n     * interactive when hiding navigation bars by calling {@link #hide(int)} or\n     * {@link WindowInsetsAnimationController#setInsetsAndAlpha(Insets, float, float)}.\n     *\n     * <p>When system bars are hidden in this mode, they can be revealed with system gestures, such\n     * as swiping from the edge of the screen where the bar is hidden from.</p>\n     *\n     * <p>When the gesture navigation is enabled, the system gestures can be triggered regardless\n     * the visibility of system bars.</p>\n     ",
    "links" : [ "android.view.WindowInsetsAnimationController#setInsetsAndAlpha(Insets", "#hide(int)", "#setSystemBarsBehavior(int)" ]
  }, {
    "name" : "BEHAVIOR_SHOW_BARS_BY_SWIPE",
    "type" : "int",
    "comment" : "\n     * Option for {@link #setSystemBarsBehavior(int)}: Window would like to remain interactive when\n     * hiding navigation bars by calling {@link #hide(int)} or\n     * {@link WindowInsetsAnimationController#setInsetsAndAlpha(Insets, float, float)}.\n     *\n     * <p>When system bars are hidden in this mode, they can be revealed with system gestures, such\n     * as swiping from the edge of the screen where the bar is hidden from.</p>\n     * @deprecated Use {@link #BEHAVIOR_DEFAULT} instead.\n     ",
    "links" : [ "#BEHAVIOR_DEFAULT", "android.view.WindowInsetsAnimationController#setInsetsAndAlpha(Insets", "#hide(int)", "#setSystemBarsBehavior(int)" ]
  }, {
    "name" : "BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE",
    "type" : "int",
    "comment" : "\n     * Option for {@link #setSystemBarsBehavior(int)}: Window would like to remain interactive when\n     * hiding navigation bars by calling {@link #hide(int)} or\n     * {@link WindowInsetsAnimationController#setInsetsAndAlpha(Insets, float, float)}.\n     *\n     * <p>When system bars are hidden in this mode, they can be revealed temporarily with system\n     * gestures, such as swiping from the edge of the screen where the bar is hidden from. These\n     * transient system bars will overlay appâ€™s content, may have some degree of transparency, and\n     * will automatically hide after a short timeout.</p>\n     ",
    "links" : [ "android.view.WindowInsetsAnimationController#setInsetsAndAlpha(Insets", "#hide(int)", "#setSystemBarsBehavior(int)" ]
  } ],
  "methods" : [ {
    "name" : " void show(@InsetsType int types)",
    "returnType" : "void",
    "comment" : "\n     * Makes a set of windows that cause insets appear on screen.\n     * <p>\n     * Note that if the window currently doesn't have control over a certain type, it will apply the\n     * change as soon as the window gains control. The app can listen to the event by observing\n     * {@link View#onApplyWindowInsets} and checking visibility with {@link WindowInsets#isVisible}.\n     *\n     * @param types A bitmask of {@link WindowInsets.Type} specifying what windows the app\n     *              would like to make appear on screen.\n     ",
    "links" : [ "WindowInsets.Type", "android.view.View#onApplyWindowInsets", "android.view.WindowInsets#isVisible" ]
  }, {
    "name" : " void hide(@InsetsType int types)",
    "returnType" : "void",
    "comment" : "\n     * Makes a set of windows causing insets disappear.\n     * <p>\n     * Note that if the window currently doesn't have control over a certain type, it will apply the\n     * change as soon as the window gains control. The app can listen to the event by observing\n     * {@link View#onApplyWindowInsets} and checking visibility with {@link WindowInsets#isVisible}.\n     *\n     * @param types A bitmask of {@link WindowInsets.Type} specifying what windows the app\n     *              would like to make disappear.\n     ",
    "links" : [ "WindowInsets.Type", "android.view.View#onApplyWindowInsets", "android.view.WindowInsets#isVisible" ]
  }, {
    "name" : " void controlWindowInsetsAnimation(@InsetsType int types, long durationMillis, @Nullable Interpolator interpolator, @Nullable CancellationSignal cancellationSignal, @NonNull WindowInsetsAnimationControlListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Lets the application control window inset animations in a frame-by-frame manner by modifying\n     * the position of the windows in the system causing insets directly.\n     *\n     * @param types The {@link WindowInsets.Type}s the application has requested to control.\n     * @param durationMillis Duration of animation in\n     *                       {@link java.util.concurrent.TimeUnit#MILLISECONDS}, or -1 if the\n     *                       animation doesn't have a predetermined duration. This value will be\n     *                       passed to {@link WindowInsetsAnimation#getDurationMillis()}\n     * @param interpolator The interpolator used for this animation, or {@code null} if this\n     *                     animation doesn't follow an interpolation curve. This value will be\n     *                     passed to {@link WindowInsetsAnimation#getInterpolator()} and used to\n     *                     calculate {@link WindowInsetsAnimation#getInterpolatedFraction()}.\n     * @param listener The {@link WindowInsetsAnimationControlListener} that gets called when the\n     *                 windows are ready to be controlled, among other callbacks.\n     * @param cancellationSignal A cancellation signal that the caller can use to cancel the\n     *                           request to obtain control, or once they have control, to cancel the\n     *                           control.\n     * @see WindowInsetsAnimation#getFraction()\n     * @see WindowInsetsAnimation#getInterpolatedFraction()\n     * @see WindowInsetsAnimation#getInterpolator()\n     * @see WindowInsetsAnimation#getDurationMillis()\n     ",
    "links" : [ "android.view.WindowInsetsAnimation#getInterpolatedFraction()", "android.view.WindowInsetsAnimation#getDurationMillis()", "WindowInsets.Type", "android.view.WindowInsetsAnimationControlListener", "java.util.concurrent.TimeUnit#MILLISECONDS", "android.view.WindowInsetsAnimation#getInterpolator()" ]
  }, {
    "name" : " void setSystemDrivenInsetsAnimationLoggingListener(@Nullable WindowInsetsAnimationControlListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Lets the application add non-controllable listener object that can be called back\n     * when animation is invoked by the system by host calling methods such as {@link #show} or\n     * {@link #hide}.\n     *\n     * The listener is supposed to be used for logging only, using the control or\n     * relying on the timing of the callback in any other way is not supported.\n     *\n     * @param listener The {@link WindowInsetsAnimationControlListener} that gets called when\n     *                 the animation is driven by the system and not the host\n     * @hide\n     ",
    "links" : [ "#show", "#hide", "android.view.WindowInsetsAnimationControlListener" ]
  }, {
    "name" : " void setSystemBarsAppearance(@Appearance int appearance, @Appearance int mask)",
    "returnType" : "void",
    "comment" : "\n     * Controls the appearance of system bars.\n     * <p>\n     * For example, the following statement adds {@link #APPEARANCE_LIGHT_STATUS_BARS}:\n     * <pre>\n     * setSystemBarsAppearance(APPEARANCE_LIGHT_STATUS_BARS, APPEARANCE_LIGHT_STATUS_BARS)\n     * </pre>\n     * And the following statement clears it:\n     * <pre>\n     * setSystemBarsAppearance(0, APPEARANCE_LIGHT_STATUS_BARS)\n     * </pre>\n     *\n     * @param appearance Bitmask of appearance flags.\n     * @param mask Specifies which flags of appearance should be changed.\n     * @see #getSystemBarsAppearance\n     ",
    "links" : [ "#APPEARANCE_LIGHT_STATUS_BARS" ]
  }, {
    "name" : " void setSystemBarsAppearanceFromResource(@Appearance int appearance, @Appearance int mask)",
    "returnType" : "void",
    "comment" : "\n     * Similar to {@link #setSystemBarsAppearance} but the given flag will only take effect when it\n     * is not controlled by {@link #setSystemBarsAppearance}.\n     *\n     * @see WindowInsetsController#getSystemBarsAppearance()\n     * @see android.R.attr#windowLightStatusBar\n     * @see android.R.attr#windowLightNavigationBar\n     * @hide\n     ",
    "links" : [ "#setSystemBarsAppearance" ]
  }, {
    "name" : " int getSystemBarsAppearance()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the requested appearance of system bars.\n     *\n     * @return The requested bitmask of system bar appearance controlled by this window.\n     * @see #setSystemBarsAppearance(int, int)\n     * @see android.R.attr#windowLightStatusBar\n     * @see android.R.attr#windowLightNavigationBar\n     ",
    "links" : [ ]
  }, {
    "name" : " void setImeCaptionBarInsetsHeight(int height)",
    "returnType" : "void",
    "comment" : "\n     * Sets the insets height for the IME caption bar, which corresponds to the\n     * \"fake\" IME navigation bar.\n     *\n     * @param height the insets height of the IME caption bar.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setSystemBarsBehavior(@Behavior int behavior)",
    "returnType" : "void",
    "comment" : "\n     * Controls the behavior of system bars.\n     *\n     * @param behavior Determines how the bars behave when being hidden by the application.\n     * @see #getSystemBarsBehavior\n     ",
    "links" : [ ]
  }, {
    "name" : " int getSystemBarsBehavior()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the requested behavior of system bars.\n     *\n     * @return the system bar behavior controlled by this window.\n     * @see #setSystemBarsBehavior(int)\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAnimationsDisabled(boolean disable)",
    "returnType" : "void",
    "comment" : "\n     * Disables or enables the animations.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " InsetsState getState()",
    "returnType" : "InsetsState",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " int getRequestedVisibleTypes()",
    "returnType" : "int",
    "comment" : "\n     * @return Insets types that have been requested to be visible.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void addOnControllableInsetsChangedListener(@NonNull OnControllableInsetsChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a {@link OnControllableInsetsChangedListener} to the window insets controller.\n     *\n     * @param listener The listener to add.\n     *\n     * @see OnControllableInsetsChangedListener\n     * @see #removeOnControllableInsetsChangedListener(OnControllableInsetsChangedListener)\n     ",
    "links" : [ "OnControllableInsetsChangedListener" ]
  }, {
    "name" : " void removeOnControllableInsetsChangedListener(@NonNull OnControllableInsetsChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a {@link OnControllableInsetsChangedListener} from the window insets controller.\n     *\n     * @param listener The listener to remove.\n     *\n     * @see OnControllableInsetsChangedListener\n     * @see #addOnControllableInsetsChangedListener(OnControllableInsetsChangedListener)\n     ",
    "links" : [ "OnControllableInsetsChangedListener" ]
  } ],
  "methodNames" : [ " void show(@InsetsType int types)", " void hide(@InsetsType int types)", " void controlWindowInsetsAnimation(@InsetsType int types, long durationMillis, @Nullable Interpolator interpolator, @Nullable CancellationSignal cancellationSignal, @NonNull WindowInsetsAnimationControlListener listener)", " void setSystemDrivenInsetsAnimationLoggingListener(@Nullable WindowInsetsAnimationControlListener listener)", " void setSystemBarsAppearance(@Appearance int appearance, @Appearance int mask)", " void setSystemBarsAppearanceFromResource(@Appearance int appearance, @Appearance int mask)", " int getSystemBarsAppearance()", " void setImeCaptionBarInsetsHeight(int height)", " void setSystemBarsBehavior(@Behavior int behavior)", " int getSystemBarsBehavior()", " void setAnimationsDisabled(boolean disable)", " InsetsState getState()", " int getRequestedVisibleTypes()", " void addOnControllableInsetsChangedListener(@NonNull OnControllableInsetsChangedListener listener)", " void removeOnControllableInsetsChangedListener(@NonNull OnControllableInsetsChangedListener listener)" ],
  "variableNames" : [ "APPEARANCE_OPAQUE_STATUS_BARS", "APPEARANCE_OPAQUE_NAVIGATION_BARS", "APPEARANCE_LOW_PROFILE_BARS", "APPEARANCE_LIGHT_STATUS_BARS", "APPEARANCE_LIGHT_NAVIGATION_BARS", "APPEARANCE_SEMI_TRANSPARENT_STATUS_BARS", "APPEARANCE_SEMI_TRANSPARENT_NAVIGATION_BARS", "APPEARANCE_TRANSPARENT_CAPTION_BAR_BACKGROUND", "APPEARANCE_LIGHT_CAPTION_BARS", "APPEARANCE_FORCE_LIGHT_NAVIGATION_BARS", "BEHAVIOR_SHOW_BARS_BY_TOUCH", "BEHAVIOR_DEFAULT", "BEHAVIOR_SHOW_BARS_BY_SWIPE", "BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE" ]
}