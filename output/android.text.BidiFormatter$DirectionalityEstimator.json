{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/BidiFormatter.java",
  "packageName" : "android.text",
  "className" : "DirectionalityEstimator",
  "comment" : "\n     * An object that estimates the directionality of a given string by various methods.\n     *\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DIR_TYPE_CACHE_SIZE",
    "type" : "int",
    "comment" : "\n         * Size of the bidi character class cache. The results of the Character.getDirectionality()\n         * calls on the lowest DIR_TYPE_CACHE_SIZE codepoints are kept in an array for speed.\n         * The 0x700 value is designed to leave all the European and Near Eastern languages in the\n         * cache. It can be reduced to 0x180, restricting the cache to the Western European\n         * languages.\n         ",
    "links" : [ ]
  }, {
    "name" : "DIR_TYPE_CACHE",
    "type" : "byte[]",
    "comment" : "\n         * The bidi character class cache.\n         ",
    "links" : [ ]
  }, {
    "name" : "text",
    "type" : "CharSequence",
    "comment" : "\n         * The text to be scanned.\n         ",
    "links" : [ ]
  }, {
    "name" : "isHtml",
    "type" : "boolean",
    "comment" : "\n         * Whether the text to be scanned is to be treated as HTML, i.e. skipping over tags and\n         * entities when looking for the next / preceding dir type.\n         ",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "\n         * The length of the text in chars.\n         ",
    "links" : [ ]
  }, {
    "name" : "charIndex",
    "type" : "int",
    "comment" : "\n         * The current position in the text.\n         ",
    "links" : [ ]
  }, {
    "name" : "lastChar",
    "type" : "char",
    "comment" : "\n         * The char encountered by the last dirTypeForward or dirTypeBackward call. If it\n         * encountered a supplementary codepoint, this contains a char that is not a valid\n         * codepoint. This is ok, because this member is only used to detect some well-known ASCII\n         * syntax, e.g. \"http://\" and the beginning of an HTML tag or entity.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static byte getDirectionality(int codePoint)",
    "returnType" : "byte",
    "comment" : "\n         * Return Character directionality. Same as {@link Character#getDirectionality(int)} except\n         * it can override values for newest emoji that are not covered by ICU.\n         ",
    "links" : [ "#getDirectionality(int)" ]
  }, {
    "name" : " int getEntryDir()",
    "returnType" : "int",
    "comment" : "\n         * Returns the directionality of the first character with strong directionality in the\n         * string, or DIR_UNKNOWN if none was encountered. Treats a non-BN character between an\n         * LRE/RLE/LRO/RLO and its matching PDF as a strong character, LTR after LRE/LRO, and RTL\n         * after RLE/RLO. The results are undefined for a string containing unbalanced\n         * LRE/RLE/LRO/RLO/PDF characters.\n         ",
    "links" : [ ]
  }, {
    "name" : " int getExitDir()",
    "returnType" : "int",
    "comment" : "\n         * Returns the directionality of the last character with strong directionality in the\n         * string, or DIR_UNKNOWN if none was encountered. For efficiency, actually scans backwards\n         * from the end of the string. Treats a non-BN character between an LRE/RLE/LRO/RLO and its\n         * matching PDF as a strong character, LTR after LRE/LRO, and RTL after RLE/RLO. The results\n         * are undefined for a string containing unbalanced LRE/RLE/LRO/RLO/PDF characters.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static byte getCachedDirectionality(char c)",
    "returnType" : "byte",
    "comment" : "\n         * Gets the bidi character class, i.e. Character.getDirectionality(), of a given char, using\n         * a cache for speed. Not designed for supplementary codepoints, whose results we do not\n         * cache.\n         ",
    "links" : [ ]
  }, {
    "name" : " byte dirTypeForward()",
    "returnType" : "byte",
    "comment" : "\n         * Returns the Character.DIRECTIONALITY_... value of the next codepoint and advances\n         * charIndex. If isHtml, and the codepoint is '<' or '&', advances through the tag/entity,\n         * and returns Character.DIRECTIONALITY_WHITESPACE. For an entity, it would be best to\n         * figure out the actual character, and return its dirtype, but treating it as whitespace is\n         * good enough for our purposes.\n         *\n         * @throws java.lang.IndexOutOfBoundsException if called when charIndex >= length or < 0.\n         ",
    "links" : [ ]
  }, {
    "name" : " byte dirTypeBackward()",
    "returnType" : "byte",
    "comment" : "\n         * Returns the Character.DIRECTIONALITY_... value of the preceding codepoint and advances\n         * charIndex backwards. If isHtml, and the codepoint is the end of a complete HTML tag or\n         * entity, advances over the whole tag/entity and returns\n         * Character.DIRECTIONALITY_WHITESPACE. For an entity, it would be best to figure out the\n         * actual character, and return its dirtype, but treating it as whitespace is good enough\n         * for our purposes.\n         *\n         * @throws java.lang.IndexOutOfBoundsException if called when charIndex > length or <= 0.\n         ",
    "links" : [ ]
  }, {
    "name" : "private byte skipTagForward()",
    "returnType" : "byte",
    "comment" : "\n         * Advances charIndex forward through an HTML tag (after the opening &lt; has already been\n         * read) and returns Character.DIRECTIONALITY_WHITESPACE. If there is no matching &gt;,\n         * does not change charIndex and returns Character.DIRECTIONALITY_OTHER_NEUTRALS (for the\n         * &lt; that hadn't been part of a tag after all).\n         ",
    "links" : [ ]
  }, {
    "name" : "private byte skipTagBackward()",
    "returnType" : "byte",
    "comment" : "\n         * Advances charIndex backward through an HTML tag (after the closing &gt; has already been\n         * read) and returns Character.DIRECTIONALITY_WHITESPACE. If there is no matching &lt;, does\n         * not change charIndex and returns Character.DIRECTIONALITY_OTHER_NEUTRALS (for the &gt;\n         * that hadn't been part of a tag after all). Nevertheless, the running time for calling\n         * skipTagBackward() in a loop remains linear in the size of the text, even for a text like\n         * \"&gt;&gt;&gt;&gt;\", because skipTagBackward() also stops looking for a matching &lt;\n         * when it encounters another &gt;.\n         ",
    "links" : [ ]
  }, {
    "name" : "private byte skipEntityForward()",
    "returnType" : "byte",
    "comment" : "\n         * Advances charIndex forward through an HTML character entity tag (after the opening\n         * &amp; has already been read) and returns Character.DIRECTIONALITY_WHITESPACE. It would be\n         * best to figure out the actual character and return its dirtype, but this is good enough.\n         ",
    "links" : [ ]
  }, {
    "name" : "private byte skipEntityBackward()",
    "returnType" : "byte",
    "comment" : "\n         * Advances charIndex backward through an HTML character entity tag (after the closing ;\n         * has already been read) and returns Character.DIRECTIONALITY_WHITESPACE. It would be best\n         * to figure out the actual character and return its dirtype, but this is good enough.\n         * If there is no matching &amp;, does not change charIndex and returns\n         * Character.DIRECTIONALITY_OTHER_NEUTRALS (for the ';' that did not start an entity after\n         * all). Nevertheless, the running time for calling skipEntityBackward() in a loop remains\n         * linear in the size of the text, even for a text like \";;;;;;;\", because skipTagBackward()\n         * also stops looking for a matching &amp; when it encounters another ;.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static byte getDirectionality(int codePoint)", " int getEntryDir()", " int getExitDir()", "private static byte getCachedDirectionality(char c)", " byte dirTypeForward()", " byte dirTypeBackward()", "private byte skipTagForward()", "private byte skipTagBackward()", "private byte skipEntityForward()", "private byte skipEntityBackward()" ],
  "variableNames" : [ "DIR_TYPE_CACHE_SIZE", "DIR_TYPE_CACHE", "text", "isHtml", "length", "charIndex", "lastChar" ]
}