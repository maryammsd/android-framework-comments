{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/midi/MidiDeviceServer.java",
  "packageName" : "android.media.midi",
  "className" : "MidiDeviceServer",
  "comment" : "\n * Internal class used for providing an implementation for a MIDI device.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMidiManager",
    "type" : "IMidiManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceInfo",
    "type" : "MidiDeviceInfo",
    "comment" : " MidiDeviceInfo for the device implemented by this server",
    "links" : [ ]
  }, {
    "name" : "mInputPortCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputPortCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputPortReceivers",
    "type" : "MidiReceiver[]",
    "comment" : " MidiReceivers for receiving data on our input ports",
    "links" : [ ]
  }, {
    "name" : "mOutputPortDispatchers",
    "type" : "MidiDispatcher[]",
    "comment" : " MidiDispatchers for sending data on our output ports",
    "links" : [ ]
  }, {
    "name" : "mInputPortOutputPorts",
    "type" : "MidiOutputPort[]",
    "comment" : " MidiOutputPorts for clients connected to our input ports",
    "links" : [ ]
  }, {
    "name" : "mInputPorts",
    "type" : "CopyOnWriteArrayList<MidiInputPort>",
    "comment" : " List of all MidiInputPorts we created",
    "links" : [ ]
  }, {
    "name" : "mInputPortOpen",
    "type" : "boolean[]",
    "comment" : " for reporting device status",
    "links" : [ ]
  }, {
    "name" : "mOutputPortOpenCount",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPortClients",
    "type" : "HashMap<IBinder, PortClient>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputPortClients",
    "type" : "HashMap<MidiInputPort, PortClient>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServer",
    "type" : "IMidiDeviceServer",
    "comment" : " Binder interface stub for receiving connection requests from clients",
    "links" : [ ]
  }, {
    "name" : "mInputPortFailureHandler",
    "type" : "MidiDispatcher.MidiReceiverFailureHandler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static FileDescriptor[] createSeqPacketSocketPair() throws IOException",
    "returnType" : "FileDescriptor[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " IMidiDeviceServer getBinderInterface()",
    "returnType" : "IMidiDeviceServer",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public IBinder asBinder()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDeviceStatus()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MidiReceiver[] getOutputPortReceivers()",
    "returnType" : "MidiReceiver[]",
    "comment" : "\n     * Returns an array of {@link MidiReceiver} for the device's output ports.\n     * Clients can use these receivers to send data out the device's output ports.\n     * @return array of MidiReceivers\n     ",
    "links" : [ "MidiReceiver" ]
  } ],
  "variableNames" : [ "TAG", "mMidiManager", "mDeviceInfo", "mInputPortCount", "mOutputPortCount", "mInputPortReceivers", "mOutputPortDispatchers", "mInputPortOutputPorts", "mInputPorts", "mInputPortOpen", "mOutputPortOpenCount", "mGuard", "mIsClosed", "mCallback", "mPortClients", "mInputPortClients", "mServer", "mInputPortFailureHandler" ],
  "methodNames" : [ "private static FileDescriptor[] createSeqPacketSocketPair() throws IOException", " IMidiDeviceServer getBinderInterface()", "public IBinder asBinder()", "private void updateDeviceStatus()", "public void close() throws IOException", "protected void finalize() throws Throwable", "public MidiReceiver[] getOutputPortReceivers()" ]
}