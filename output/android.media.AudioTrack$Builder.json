{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioTrack.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link AudioTrack} objects.\n     * Use this class to configure and create an <code>AudioTrack</code> instance. By setting audio\n     * attributes and audio format parameters, you indicate which of those vary from the default\n     * behavior on the device.\n     * <p> Here is an example where <code>Builder</code> is used to specify all {@link AudioFormat}\n     * parameters, to be used by a new <code>AudioTrack</code> instance:\n     *\n     * <pre class=\"prettyprint\">\n     * AudioTrack player = new AudioTrack.Builder()\n     *         .setAudioAttributes(new AudioAttributes.Builder()\n     *                  .setUsage(AudioAttributes.USAGE_ALARM)\n     *                  .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\n     *                  .build())\n     *         .setAudioFormat(new AudioFormat.Builder()\n     *                 .setEncoding(AudioFormat.ENCODING_PCM_16BIT)\n     *                 .setSampleRate(44100)\n     *                 .setChannelMask(AudioFormat.CHANNEL_OUT_STEREO)\n     *                 .build())\n     *         .setBufferSizeInBytes(minBuffSize)\n     *         .build();\n     * </pre>\n     * <p>\n     * If the audio attributes are not set with {@link #setAudioAttributes(AudioAttributes)},\n     * attributes comprising {@link AudioAttributes#USAGE_MEDIA} will be used.\n     * <br>If the audio format is not specified or is incomplete, its channel configuration will be\n     * {@link AudioFormat#CHANNEL_OUT_STEREO} and the encoding will be\n     * {@link AudioFormat#ENCODING_PCM_16BIT}.\n     * The sample rate will depend on the device actually selected for playback and can be queried\n     * with {@link #getSampleRate()} method.\n     * <br>If the buffer size is not specified with {@link #setBufferSizeInBytes(int)},\n     * and the mode is {@link AudioTrack#MODE_STREAM}, the minimum buffer size is used.\n     * <br>If the transfer mode is not specified with {@link #setTransferMode(int)},\n     * <code>MODE_STREAM</code> will be used.\n     * <br>If the session ID is not specified with {@link #setSessionId(int)}, a new one will\n     * be generated.\n     * <br>Offload is false by default.\n     ",
  "links" : [ "android.media.AudioFormat#CHANNEL_OUT_STEREO", "#getSampleRate()", "android.media.AudioFormat", "#setBufferSizeInBytes(int)", "android.media.AudioTrack#MODE_STREAM", "#setSessionId(int)", "android.media.AudioTrack", "android.media.AudioAttributes#USAGE_MEDIA", "#setTransferMode(int)", "android.media.AudioFormat#ENCODING_PCM_16BIT", "#setAudioAttributes(AudioAttributes)" ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributes",
    "type" : "AudioAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBufferSizeInBytes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncapsulationMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerformanceMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffload",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTunerConfiguration",
    "type" : "TunerConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallRedirectionMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setContext(@NonNull Context context)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the context the track belongs to. This context will be used to pull information,\n         * such as {@link android.content.AttributionSource} and device specific audio session ids,\n         * which will be associated with the {@link AudioTrack}. However, the context itself will\n         * not be retained by the {@link AudioTrack}.\n         * @param context a non-null {@link Context} instance\n         * @return the same Builder instance.\n         ",
    "links" : [ "android.content.Context", "android.content.AttributionSource", "android.media.AudioTrack" ]
  }, {
    "name" : "public Builder setAudioAttributes(@NonNull AudioAttributes attributes) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the {@link AudioAttributes}.\n         * @param attributes a non-null {@link AudioAttributes} instance that describes the audio\n         *     data to be played.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder setAudioFormat(@NonNull AudioFormat format) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the format of the audio data to be played by the {@link AudioTrack}.\n         * See {@link AudioFormat.Builder} for configuring the audio format parameters such\n         * as encoding, channel mask and sample rate.\n         * @param format a non-null {@link AudioFormat} instance.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "AudioFormat.Builder", "android.media.AudioFormat", "android.media.AudioTrack" ]
  }, {
    "name" : "public Builder setBufferSizeInBytes(@IntRange(from = 0) int bufferSizeInBytes) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the total size (in bytes) of the buffer where audio data is read from for playback.\n         * If using the {@link AudioTrack} in streaming mode\n         * (see {@link AudioTrack#MODE_STREAM}, you can write data into this buffer in smaller\n         * chunks than this size. See {@link #getMinBufferSize(int, int, int)} to determine\n         * the estimated minimum buffer size for the creation of an AudioTrack instance\n         * in streaming mode.\n         * <br>If using the <code>AudioTrack</code> in static mode (see\n         * {@link AudioTrack#MODE_STATIC}), this is the maximum size of the sound that will be\n         * played by this instance.\n         * @param bufferSizeInBytes\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.AudioTrack#MODE_STATIC", "android.media.AudioTrack#MODE_STREAM", "android.media.AudioTrack", "#getMinBufferSize(int" ]
  }, {
    "name" : "public Builder setEncapsulationMode(@EncapsulationMode int encapsulationMode)",
    "returnType" : "Builder",
    "comment" : " may be used as well.",
    "links" : [ ]
  }, {
    "name" : "public Builder setTransferMode(@TransferMode int mode) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the mode under which buffers of audio data are transferred from the\n         * {@link AudioTrack} to the framework.\n         * @param mode one of {@link AudioTrack#MODE_STREAM}, {@link AudioTrack#MODE_STATIC}.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.AudioTrack#MODE_STATIC", "android.media.AudioTrack#MODE_STREAM", "android.media.AudioTrack" ]
  }, {
    "name" : "public Builder setSessionId(@IntRange(from = 1) int sessionId) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the session ID the {@link AudioTrack} will be attached to.\n         *\n         * Note, that if there's a device specific session id asociated with the context, explicitly\n         * setting a session id using this method will override it\n         * (see {@link Builder#setContext(Context)}).\n         * @param sessionId a strictly positive ID number retrieved from another\n         *     <code>AudioTrack</code> via {@link AudioTrack#getAudioSessionId()} or allocated by\n         *     {@link AudioManager} via {@link AudioManager#generateAudioSessionId()}, or\n         *     {@link AudioManager#AUDIO_SESSION_ID_GENERATE}.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.AudioTrack#getAudioSessionId()", "android.media.AudioManager#generateAudioSessionId()", "android.media.AudioTrack", "#setContext(Context)", "android.media.AudioManager#AUDIO_SESSION_ID_GENERATE", "android.media.AudioManager" ]
  }, {
    "name" : "public Builder setPerformanceMode(@PerformanceMode int performanceMode)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the {@link AudioTrack} performance mode.  This is an advisory request which\n         * may not be supported by the particular device, and the framework is free\n         * to ignore such request if it is incompatible with other requests or hardware.\n         *\n         * @param performanceMode one of\n         * {@link AudioTrack#PERFORMANCE_MODE_NONE},\n         * {@link AudioTrack#PERFORMANCE_MODE_LOW_LATENCY},\n         * or {@link AudioTrack#PERFORMANCE_MODE_POWER_SAVING}.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException if {@code performanceMode} is not valid.\n         ",
    "links" : [ "android.media.AudioTrack#PERFORMANCE_MODE_POWER_SAVING", "android.media.AudioTrack#PERFORMANCE_MODE_LOW_LATENCY", "android.media.AudioTrack", "android.media.AudioTrack#PERFORMANCE_MODE_NONE" ]
  }, {
    "name" : "public Builder setOffloadedPlayback(boolean offload)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether this track will play through the offloaded audio path.\n         * When set to true, at build time, the audio format will be checked against\n         * {@link AudioManager#isOffloadedPlaybackSupported(AudioFormat,AudioAttributes)}\n         * to verify the audio format used by this track is supported on the device's offload\n         * path (if any).\n         * <br>Offload is only supported for media audio streams, and therefore requires that\n         * the usage be {@link AudioAttributes#USAGE_MEDIA}.\n         * @param offload true to require the offload path for playback.\n         * @return the same Builder instance.\n         ",
    "links" : [ "android.media.AudioAttributes#USAGE_MEDIA", "android.media.AudioManager#isOffloadedPlaybackSupported(AudioFormat" ]
  }, {
    "name" : "public Builder setTunerConfiguration(@NonNull TunerConfiguration tunerConfiguration)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the tuner configuration for the {@code AudioTrack}.\n         *\n         * The {@link AudioTrack.TunerConfiguration} consists of parameters obtained from\n         * the Android TV tuner API which indicate the audio content stream id and the\n         * synchronization id for the {@code AudioTrack}.\n         *\n         * @param tunerConfiguration obtained by {@link AudioTrack.TunerConfiguration.Builder}.\n         * @return the same Builder instance.\n         * @hide\n         ",
    "links" : [ "AudioTrack.TunerConfiguration.Builder", "AudioTrack.TunerConfiguration" ]
  }, {
    "name" : "public Builder setCallRedirectionMode(@AudioManager.CallRedirectionMode int callRedirectionMode)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Sets the {@link AudioTrack} call redirection mode.\n         * Used when creating an AudioTrack to inject audio to call uplink path. The mode\n         * indicates if the call is a PSTN call or a VoIP call in which case a dynamic audio\n         * policy is created to use this track as the source for all capture with voice\n         * communication preset.\n         *\n         * @param callRedirectionMode one of\n         * {@link AudioManager#CALL_REDIRECT_NONE},\n         * {@link AudioManager#CALL_REDIRECT_PSTN},\n         * or {@link AAudioManager#CALL_REDIRECT_VOIP}.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException if {@code callRedirectionMode} is not valid.\n         ",
    "links" : [ "android.media.AudioManager#CALL_REDIRECT_PSTN", "android.media.AudioManager#CALL_REDIRECT_NONE", "#CALL_REDIRECT_VOIP", "android.media.AudioTrack" ]
  }, {
    "name" : "private AudioTrack buildCallInjectionTrack()",
    "returnType" : "AudioTrack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AudioTrack build() throws UnsupportedOperationException",
    "returnType" : "AudioTrack",
    "comment" : "\n         * Builds an {@link AudioTrack} instance initialized with all the parameters set\n         * on this <code>Builder</code>.\n         * @return a new successfully initialized {@link AudioTrack} instance.\n         * @throws UnsupportedOperationException if the parameters set on the <code>Builder</code>\n         *     were incompatible, or if they are not supported by the device,\n         *     or if the device was not available.\n         ",
    "links" : [ "android.media.AudioTrack" ]
  } ],
  "methodNames" : [ "public Builder setContext(@NonNull Context context)", "public Builder setAudioAttributes(@NonNull AudioAttributes attributes) throws IllegalArgumentException", "public Builder setAudioFormat(@NonNull AudioFormat format) throws IllegalArgumentException", "public Builder setBufferSizeInBytes(@IntRange(from = 0) int bufferSizeInBytes) throws IllegalArgumentException", "public Builder setEncapsulationMode(@EncapsulationMode int encapsulationMode)", "public Builder setTransferMode(@TransferMode int mode) throws IllegalArgumentException", "public Builder setSessionId(@IntRange(from = 1) int sessionId) throws IllegalArgumentException", "public Builder setPerformanceMode(@PerformanceMode int performanceMode)", "public Builder setOffloadedPlayback(boolean offload)", "public Builder setTunerConfiguration(@NonNull TunerConfiguration tunerConfiguration)", "public Builder setCallRedirectionMode(@AudioManager.CallRedirectionMode int callRedirectionMode)", "private AudioTrack buildCallInjectionTrack()", "public AudioTrack build() throws UnsupportedOperationException" ],
  "variableNames" : [ "mContext", "mAttributes", "mFormat", "mBufferSizeInBytes", "mEncapsulationMode", "mSessionId", "mMode", "mPerformanceMode", "mOffload", "mTunerConfiguration", "mCallRedirectionMode" ]
}