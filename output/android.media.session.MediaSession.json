{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/session/MediaSession.java",
  "packageName" : "android.media.session",
  "className" : "MediaSession",
  "comment" : "\n * Allows interaction with media controllers, volume keys, media buttons, and\n * transport controls.\n * <p>\n * A MediaSession should be created when an app wants to publish media playback\n * information or handle media keys. In general an app only needs one session\n * for all playback, though multiple sessions can be created to provide finer\n * grain controls of media.\n * <p>\n * Once a session is created the owner of the session may pass its\n * {@link #getSessionToken() session token} to other processes to allow them to\n * create a {@link MediaController} to interact with the session.\n * <p>\n * To receive commands, media keys, and other events a {@link Callback} must be\n * set with {@link #setCallback(Callback)} and {@link #setActive(boolean)\n * setActive(true)} must be called.\n * <p>\n * When an app is finished performing playback it must call {@link #release()}\n * to clean up the session and notify any controllers.\n * <p>\n * MediaSession objects are thread safe.\n ",
  "links" : [ "Callback", "#release()", "android.media.session.MediaController", "#setActive(boolean)", "#getSessionToken()", "#setCallback(Callback)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_HANDLES_MEDIA_BUTTONS",
    "type" : "int",
    "comment" : "\n     * Set this flag on the session to indicate that it can handle media button\n     * events.\n     * @deprecated This flag is no longer used. All media sessions are expected to handle media\n     * button events now.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_HANDLES_TRANSPORT_CONTROLS",
    "type" : "int",
    "comment" : "\n     * Set this flag on the session to indicate that it handles transport\n     * control commands through its {@link Callback}.\n     * @deprecated This flag is no longer used. All media sessions are expected to handle transport\n     * controls now.\n     ",
    "links" : [ "Callback" ]
  }, {
    "name" : "FLAG_EXCLUSIVE_GLOBAL_PRIORITY",
    "type" : "int",
    "comment" : "\n     * System only flag for a session that needs to have priority over all other\n     * sessions. This flag ensures this session will receive media button events\n     * regardless of the current ordering in the system.\n     * If there are two or more sessions with this flag, the last session that sets this flag\n     * will be the global priority session.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_UID",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_PID",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxBitmapSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionToken",
    "type" : "Token",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mController",
    "type" : "MediaController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "ISession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCbStub",
    "type" : "CallbackStub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "CallbackMessageHandler",
    "comment" : " Do not change the name of mCallback. Support lib accesses this by using reflection.",
    "links" : [ ]
  }, {
    "name" : "mVolumeProvider",
    "type" : "VolumeProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlaybackState",
    "type" : "PlaybackState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActive",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCallback(@Nullable Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Set the callback to receive updates for the MediaSession. This includes\n     * media button events and transport controls. The caller's thread will be\n     * used to post updates.\n     * <p>\n     * Set the callback to null to stop receiving updates.\n     *\n     * @param callback The callback object\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCallback(@Nullable Callback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set the callback to receive updates for the MediaSession. This includes\n     * media button events and transport controls.\n     * <p>\n     * Set the callback to null to stop receiving updates.\n     *\n     * @param callback The callback to receive updates on.\n     * @param handler The handler that events should be posted on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSessionActivity(@Nullable PendingIntent pi)",
    "returnType" : "void",
    "comment" : "\n     * Set an intent for launching UI for this Session. This can be used as a\n     * quick link to an ongoing media screen. The intent should be for an\n     * activity that may be started using {@link Activity#startActivity(Intent)}.\n     *\n     * @param pi The intent to launch to show UI for this Session.\n     ",
    "links" : [ "android.app.Activity#startActivity(Intent)" ]
  }, {
    "name" : "public void setMediaButtonReceiver(@Nullable PendingIntent mbr)",
    "returnType" : "void",
    "comment" : "\n     * Set a pending intent for your media button receiver to allow restarting playback after the\n     * session has been stopped.\n     *\n     * <p>If your app is started in this way an {@link Intent#ACTION_MEDIA_BUTTON} intent will be\n     * sent via the pending intent.\n     *\n     * <p>The provided {@link PendingIntent} must not target an activity. On apps targeting Android\n     * V and above, passing an activity pending intent to this method causes an {@link\n     * IllegalArgumentException}. On apps targeting Android U and below, passing an activity pending\n     * intent causes the call to be ignored. Refer to this <a\n     * href=\"https://developer.android.com/guide/components/activities/background-starts\">guide</a>\n     * for more information.\n     *\n     * <p>The pending intent is recommended to be explicit to follow the security recommendation of\n     * {@link PendingIntent#getService}.\n     *\n     * @param mbr The {@link PendingIntent} to send the media button event to.\n     * @deprecated Use {@link #setMediaButtonBroadcastReceiver(ComponentName)} instead.\n     * @throws IllegalArgumentException if the pending intent targets an activity on apps targeting\n     * Android V and above.\n     ",
    "links" : [ "android.app.PendingIntent#ACTION_MEDIA_BUTTON", "android.app.PendingIntent#getService", "android.app.PendingIntent", "IllegalArgumentException", "#setMediaButtonBroadcastReceiver(ComponentName)" ]
  }, {
    "name" : "public void setMediaButtonBroadcastReceiver(@Nullable ComponentName broadcastReceiver)",
    "returnType" : "void",
    "comment" : "\n     * Set the component name of the manifest-declared {@link android.content.BroadcastReceiver}\n     * class that should receive media buttons. This allows restarting playback after the session\n     * has been stopped. If your app is started in this way an {@link Intent#ACTION_MEDIA_BUTTON}\n     * intent will be sent to the broadcast receiver. On apps targeting Android U and above, this\n     * will throw an {@link IllegalArgumentException} if the provided {@link ComponentName} does not\n     * resolve to an existing {@link android.content.BroadcastReceiver broadcast receiver}.\n     *\n     * <p>Note: The given {@link android.content.BroadcastReceiver} should belong to the same\n     * package as the context that was given when creating {@link MediaSession}.\n     *\n     * @param broadcastReceiver the component name of the BroadcastReceiver class\n     * @throws IllegalArgumentException if {@code broadcastReceiver} does not exist on apps\n     *     targeting Android U and above\n     ",
    "links" : [ "android.media.session.MediaSession", "android.app.PendingIntent#ACTION_MEDIA_BUTTON", "android.content.ComponentName", "android.content.BroadcastReceiver", "IllegalArgumentException" ]
  }, {
    "name" : "public void setFlags(@SessionFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Set any flags for the session.\n     *\n     * @param flags The flags to set for this session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPlaybackToLocal(AudioAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Set the attributes for this session's audio. This will affect the\n     * system's volume handling for this session. If\n     * {@link #setPlaybackToRemote} was previously called it will stop receiving\n     * volume commands and the system will begin sending volume changes to the\n     * appropriate stream.\n     * <p>\n     * By default sessions use attributes for media.\n     *\n     * @param attributes The {@link AudioAttributes} for this session's audio.\n     ",
    "links" : [ "#setPlaybackToRemote", "android.media.AudioAttributes" ]
  }, {
    "name" : "public void setPlaybackToRemote(@NonNull VolumeProvider volumeProvider)",
    "returnType" : "void",
    "comment" : "\n     * Configure this session to use remote volume handling. This must be called\n     * to receive volume button events, otherwise the system will adjust the\n     * appropriate stream volume for this session. If\n     * {@link #setPlaybackToLocal} was previously called the system will stop\n     * handling volume changes for this session and pass them to the volume\n     * provider instead.\n     *\n     * @param volumeProvider The provider that will handle volume changes. May\n     *            not be null.\n     ",
    "links" : [ "#setPlaybackToLocal" ]
  }, {
    "name" : "public void setActive(boolean active)",
    "returnType" : "void",
    "comment" : "\n     * Set if this session is currently active and ready to receive commands. If\n     * set to false your session's controller may not be discoverable. You must\n     * set the session to active before it can start receiving media button\n     * events or transport commands.\n     *\n     * @param active Whether this session is active or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Get the current active state of this session.\n     *\n     * @return True if the session is active, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendSessionEvent(@NonNull String event, @Nullable Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Send a proprietary event to all MediaControllers listening to this\n     * Session. It's up to the Controller/Session owner to determine the meaning\n     * of any events.\n     *\n     * @param event The name of the event to send\n     * @param extras Any extras included with the event\n     ",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * This must be called when an app has finished performing playback. If\n     * playback is expected to start again shortly the session can be left open,\n     * but it must be released if your activity or service is being destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Token getSessionToken()",
    "returnType" : "Token",
    "comment" : "\n     * Retrieve a token object that can be used by apps to create a\n     * {@link MediaController} for interacting with this session. The owner of\n     * the session is responsible for deciding how to distribute these tokens.\n     *\n     * @return A token that can be used to create a MediaController for this\n     *         session\n     ",
    "links" : [ "android.media.session.MediaController" ]
  }, {
    "name" : "public MediaController getController()",
    "returnType" : "MediaController",
    "comment" : "\n     * Get a controller for this session. This is a convenience method to avoid\n     * having to cache your own controller in process.\n     *\n     * @return A controller for this session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPlaybackState(@Nullable PlaybackState state)",
    "returnType" : "void",
    "comment" : "\n     * Update the current playback state.\n     *\n     * @param state The current state of playback\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMetadata(@Nullable MediaMetadata metadata)",
    "returnType" : "void",
    "comment" : "\n     * Update the current metadata. New metadata can be created using\n     * {@link android.media.MediaMetadata.Builder}. This operation may take time proportional to\n     * the size of the bitmap to replace large bitmaps with a scaled down copy.\n     *\n     * @param metadata The new metadata\n     * @see android.media.MediaMetadata.Builder#putBitmap\n     ",
    "links" : [ "android.media.MediaMetadata.Builder" ]
  }, {
    "name" : "public void setQueue(@Nullable List<QueueItem> queue)",
    "returnType" : "void",
    "comment" : "\n     * Update the list of items in the play queue. It is an ordered list and\n     * should contain the current item, and previous or upcoming items if they\n     * exist. Specify null if there is no current play queue.\n     * <p>\n     * The queue should be of reasonable size. If the play queue is unbounded\n     * within your app, it is better to send a reasonable amount in a sliding\n     * window instead.\n     *\n     * @param queue A list of items in the play queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setQueueTitle(@Nullable CharSequence title)",
    "returnType" : "void",
    "comment" : "\n     * Set the title of the play queue. The UI should display this title along\n     * with the play queue itself.\n     * e.g. \"Play Queue\", \"Now Playing\", or an album name.\n     *\n     * @param title The title of the play queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRatingType(@Rating.Style int type)",
    "returnType" : "void",
    "comment" : "\n     * Set the style of rating used by this session. Apps trying to set the\n     * rating should use this style. Must be one of the following:\n     * <ul>\n     * <li>{@link Rating#RATING_NONE}</li>\n     * <li>{@link Rating#RATING_3_STARS}</li>\n     * <li>{@link Rating#RATING_4_STARS}</li>\n     * <li>{@link Rating#RATING_5_STARS}</li>\n     * <li>{@link Rating#RATING_HEART}</li>\n     * <li>{@link Rating#RATING_PERCENTAGE}</li>\n     * <li>{@link Rating#RATING_THUMB_UP_DOWN}</li>\n     * </ul>\n     ",
    "links" : [ "android.media.Rating#RATING_4_STARS", "android.media.Rating#RATING_NONE", "android.media.Rating#RATING_5_STARS", "android.media.Rating#RATING_HEART", "android.media.Rating#RATING_PERCENTAGE", "android.media.Rating#RATING_3_STARS", "android.media.Rating#RATING_THUMB_UP_DOWN" ]
  }, {
    "name" : "public void setExtras(@Nullable Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Set some extras that can be associated with the {@link MediaSession}. No assumptions should\n     * be made as to how a {@link MediaController} will handle these extras.\n     * Keys should be fully qualified (e.g. com.example.MY_EXTRA) to avoid conflicts.\n     *\n     * @param extras The extras associated with the {@link MediaSession}.\n     ",
    "links" : [ "android.media.session.MediaSession", "android.media.session.MediaController" ]
  }, {
    "name" : "public final RemoteUserInfo getCurrentControllerInfo()",
    "returnType" : "RemoteUserInfo",
    "comment" : "\n     * Gets the controller information who sent the current request.\n     * <p>\n     * Note: This is only valid while in a request callback, such as {@link Callback#onPlay}.\n     *\n     * @throws IllegalStateException If this method is called outside of {@link Callback} methods.\n     * @see MediaSessionManager#isTrustedForMediaControl(RemoteUserInfo)\n     ",
    "links" : [ "Callback", "#onPlay" ]
  }, {
    "name" : "public void notifyRemoteVolumeChanged(VolumeProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Notify the system that the remote volume changed.\n     *\n     * @param provider The provider that is handling volume changes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCallingPackage()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the package that sent the last media button, transport control, or\n     * command from controllers and the system. This is only valid while in a request callback, such\n     * as {@link Callback#onPlay}.\n     *\n     * @hide\n     ",
    "links" : [ "#onPlay" ]
  }, {
    "name" : " static boolean hasCustomParcelable(@Nullable Bundle bundle)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given bundle includes non-framework Parcelables.\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchPrepare(RemoteUserInfo caller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchPrepareFromMediaId(RemoteUserInfo caller, String mediaId, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchPrepareFromSearch(RemoteUserInfo caller, String query, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchPrepareFromUri(RemoteUserInfo caller, Uri uri, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchPlay(RemoteUserInfo caller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchPlayFromMediaId(RemoteUserInfo caller, String mediaId, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchPlayFromSearch(RemoteUserInfo caller, String query, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchPlayFromUri(RemoteUserInfo caller, Uri uri, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchSkipToItem(RemoteUserInfo caller, long id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchPause(RemoteUserInfo caller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchStop(RemoteUserInfo caller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchNext(RemoteUserInfo caller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchPrevious(RemoteUserInfo caller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchFastForward(RemoteUserInfo caller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchRewind(RemoteUserInfo caller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchSeekTo(RemoteUserInfo caller, long pos)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchRate(RemoteUserInfo caller, Rating rating)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchSetPlaybackSpeed(RemoteUserInfo caller, float speed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchCustomAction(RemoteUserInfo caller, String action, Bundle args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchMediaButton(RemoteUserInfo caller, Intent mediaButtonIntent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchMediaButtonDelayed(RemoteUserInfo info, Intent mediaButtonIntent, long delay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchAdjustVolume(RemoteUserInfo caller, int direction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchSetVolumeTo(RemoteUserInfo caller, int volume)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchCommand(RemoteUserInfo caller, String command, Bundle args, ResultReceiver resultCb)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void postToCallback(RemoteUserInfo caller, int what, Object obj, Bundle data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void postToCallbackDelayed(RemoteUserInfo caller, int what, Object obj, Bundle data, long delay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setCallback(@Nullable Callback callback)", "public void setCallback(@Nullable Callback callback, @Nullable Handler handler)", "public void setSessionActivity(@Nullable PendingIntent pi)", "public void setMediaButtonReceiver(@Nullable PendingIntent mbr)", "public void setMediaButtonBroadcastReceiver(@Nullable ComponentName broadcastReceiver)", "public void setFlags(@SessionFlags int flags)", "public void setPlaybackToLocal(AudioAttributes attributes)", "public void setPlaybackToRemote(@NonNull VolumeProvider volumeProvider)", "public void setActive(boolean active)", "public boolean isActive()", "public void sendSessionEvent(@NonNull String event, @Nullable Bundle extras)", "public void release()", "public Token getSessionToken()", "public MediaController getController()", "public void setPlaybackState(@Nullable PlaybackState state)", "public void setMetadata(@Nullable MediaMetadata metadata)", "public void setQueue(@Nullable List<QueueItem> queue)", "public void setQueueTitle(@Nullable CharSequence title)", "public void setRatingType(@Rating.Style int type)", "public void setExtras(@Nullable Bundle extras)", "public final RemoteUserInfo getCurrentControllerInfo()", "public void notifyRemoteVolumeChanged(VolumeProvider provider)", "public String getCallingPackage()", " static boolean hasCustomParcelable(@Nullable Bundle bundle)", " void dispatchPrepare(RemoteUserInfo caller)", " void dispatchPrepareFromMediaId(RemoteUserInfo caller, String mediaId, Bundle extras)", " void dispatchPrepareFromSearch(RemoteUserInfo caller, String query, Bundle extras)", " void dispatchPrepareFromUri(RemoteUserInfo caller, Uri uri, Bundle extras)", " void dispatchPlay(RemoteUserInfo caller)", " void dispatchPlayFromMediaId(RemoteUserInfo caller, String mediaId, Bundle extras)", " void dispatchPlayFromSearch(RemoteUserInfo caller, String query, Bundle extras)", " void dispatchPlayFromUri(RemoteUserInfo caller, Uri uri, Bundle extras)", " void dispatchSkipToItem(RemoteUserInfo caller, long id)", " void dispatchPause(RemoteUserInfo caller)", " void dispatchStop(RemoteUserInfo caller)", " void dispatchNext(RemoteUserInfo caller)", " void dispatchPrevious(RemoteUserInfo caller)", " void dispatchFastForward(RemoteUserInfo caller)", " void dispatchRewind(RemoteUserInfo caller)", " void dispatchSeekTo(RemoteUserInfo caller, long pos)", " void dispatchRate(RemoteUserInfo caller, Rating rating)", " void dispatchSetPlaybackSpeed(RemoteUserInfo caller, float speed)", " void dispatchCustomAction(RemoteUserInfo caller, String action, Bundle args)", " void dispatchMediaButton(RemoteUserInfo caller, Intent mediaButtonIntent)", " void dispatchMediaButtonDelayed(RemoteUserInfo info, Intent mediaButtonIntent, long delay)", " void dispatchAdjustVolume(RemoteUserInfo caller, int direction)", " void dispatchSetVolumeTo(RemoteUserInfo caller, int volume)", " void dispatchCommand(RemoteUserInfo caller, String command, Bundle args, ResultReceiver resultCb)", " void postToCallback(RemoteUserInfo caller, int what, Object obj, Bundle data)", " void postToCallbackDelayed(RemoteUserInfo caller, int what, Object obj, Bundle data, long delay)" ],
  "variableNames" : [ "TAG", "FLAG_HANDLES_MEDIA_BUTTONS", "FLAG_HANDLES_TRANSPORT_CONTROLS", "FLAG_EXCLUSIVE_GLOBAL_PRIORITY", "INVALID_UID", "INVALID_PID", "mLock", "mContext", "mMaxBitmapSize", "mSessionToken", "mController", "mBinder", "mCbStub", "mCallback", "mVolumeProvider", "mPlaybackState", "mActive" ]
}