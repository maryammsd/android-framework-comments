{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/notification/Adjustment.java",
  "packageName" : "android.service.notification",
  "className" : "Adjustment",
  "comment" : "\n * Ranking updates from the Assistant.\n *\n * The updates are provides as a {@link Bundle} of signals, using the keys provided in this\n * class.\n * Each {@code KEY} specifies what type of data it supports and what kind of Adjustment it\n * realizes on the notification rankings.\n *\n * Notifications affected by the Adjustment will be re-ranked if necessary.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKey",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExplanation",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSignals",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUser",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIssuer",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_PEOPLE",
    "type" : "String",
    "comment" : "\n     * Data type: ArrayList of {@code String}, where each is a representation of a\n     * {@link android.provider.ContactsContract.Contacts#CONTENT_LOOKUP_URI}.\n     * See {@link android.app.Notification.Builder#addPerson(String)}.\n     * @hide\n     ",
    "links" : [ "android.app.Notification.Builder#addPerson(String)", "android.provider.ContactsContract.Contacts#CONTENT_LOOKUP_URI" ]
  }, {
    "name" : "KEY_SNOOZE_CRITERIA",
    "type" : "String",
    "comment" : "\n     * Parcelable {@code ArrayList} of {@link SnoozeCriterion}. These criteria may be visible to\n     * users. If a user chooses to snooze a notification until one of these criterion, the\n     * assistant will be notified via\n     * {@link NotificationAssistantService#onNotificationSnoozedUntilContext}.\n     ",
    "links" : [ "android.service.notification.NotificationAssistantService#onNotificationSnoozedUntilContext", "android.service.notification.SnoozeCriterion" ]
  }, {
    "name" : "KEY_GROUP_KEY",
    "type" : "String",
    "comment" : "\n     * Data type: String. Used to change what {@link Notification#getGroup() group} a notification\n     * belongs to.\n     * @hide\n     ",
    "links" : [ "android.app.Notification#getGroup()" ]
  }, {
    "name" : "KEY_USER_SENTIMENT",
    "type" : "String",
    "comment" : "\n     * Data type: int, one of {@link NotificationListenerService.Ranking#USER_SENTIMENT_POSITIVE},\n     * {@link NotificationListenerService.Ranking#USER_SENTIMENT_NEUTRAL},\n     * {@link NotificationListenerService.Ranking#USER_SENTIMENT_NEGATIVE}. Used to express how\n     * a user feels about notifications in the same {@link android.app.NotificationChannel} as\n     * the notification represented by {@link #getKey()}.\n     ",
    "links" : [ "#getKey()", "NotificationListenerService.Ranking#USER_SENTIMENT_NEUTRAL", "NotificationListenerService.Ranking#USER_SENTIMENT_POSITIVE", "NotificationListenerService.Ranking#USER_SENTIMENT_NEGATIVE", "android.app.NotificationChannel" ]
  }, {
    "name" : "KEY_CONTEXTUAL_ACTIONS",
    "type" : "String",
    "comment" : "\n     * Data type: ArrayList of {@link android.app.Notification.Action}.\n     * Used to suggest contextual actions for a notification.\n     *\n     * @see Notification.Action.Builder#setContextual(boolean)\n     ",
    "links" : [ "android.app.Notification.Action" ]
  }, {
    "name" : "KEY_TEXT_REPLIES",
    "type" : "String",
    "comment" : "\n     * Data type: ArrayList of {@link CharSequence}.\n     * Used to suggest smart replies for a notification.\n     ",
    "links" : [ "CharSequence" ]
  }, {
    "name" : "KEY_IMPORTANCE",
    "type" : "String",
    "comment" : "\n     * Data type: int, one of importance values e.g.\n     * {@link android.app.NotificationManager#IMPORTANCE_MIN}.\n     *\n     * <p> If used from\n     * {@link NotificationAssistantService#onNotificationEnqueued(StatusBarNotification)}, and\n     * received before the notification is posted, it can block a notification from appearing or\n     * silence it. Importance adjustments received too late from\n     * {@link NotificationAssistantService#onNotificationEnqueued(StatusBarNotification)} will be\n     * ignored.\n     * </p>\n     * <p>If used from\n     * {@link NotificationAssistantService#adjustNotification(Adjustment)}, it can\n     * visually demote or cancel a notification, but use this with care if they notification was\n     * recently posted because the notification may already have made noise.\n     * </p>\n     ",
    "links" : [ "android.app.NotificationManager#IMPORTANCE_MIN", "android.service.notification.NotificationAssistantService#adjustNotification(Adjustment)", "android.service.notification.NotificationAssistantService#onNotificationEnqueued(StatusBarNotification)" ]
  }, {
    "name" : "KEY_RANKING_SCORE",
    "type" : "String",
    "comment" : "\n     * Data type: float, a ranking score from 0 (lowest) to 1 (highest).\n     * Used to rank notifications inside that fall under the same classification (i.e. alerting,\n     * silenced).\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NOT_CONVERSATION",
    "type" : "String",
    "comment" : "\n     * Data type: boolean, when true it suggests this is NOT a conversation notification.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<Adjustment>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getPackage()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getKey()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getExplanation()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle getSignals()",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getUser()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUserHandle()",
    "returnType" : "UserHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIssuer(@Nullable String issuer)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getIssuer()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPackage", "mKey", "mExplanation", "mSignals", "mUser", "mIssuer", "KEY_PEOPLE", "KEY_SNOOZE_CRITERIA", "KEY_GROUP_KEY", "KEY_USER_SENTIMENT", "KEY_CONTEXTUAL_ACTIONS", "KEY_TEXT_REPLIES", "KEY_IMPORTANCE", "KEY_RANKING_SCORE", "KEY_NOT_CONVERSATION", "CREATOR" ],
  "methodNames" : [ "public String getPackage()", "public String getKey()", "public CharSequence getExplanation()", "public Bundle getSignals()", "public int getUser()", "public UserHandle getUserHandle()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toString()", "public void setIssuer(@Nullable String issuer)", "public String getIssuer()" ]
}