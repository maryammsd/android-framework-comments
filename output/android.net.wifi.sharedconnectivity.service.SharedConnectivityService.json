{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/sharedconnectivity/service/SharedConnectivityService.java",
  "packageName" : "android.net.wifi.sharedconnectivity.service",
  "className" : "SharedConnectivityService",
  "comment" : "\n * This class is the partly implemented service for injecting Shared Connectivity networks into the\n * Wi-Fi Pickers and other relevant UI surfaces.\n *\n * Implementing application should extend this service and override the indicated methods.\n * Callers to the service should use {@link SharedConnectivityManager} to bind to the implemented\n * service as specified in the configuration overlay.\n *\n * @hide\n ",
  "links" : [ "android.net.wifi.sharedconnectivity.app.SharedConnectivityManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteCallbackList",
    "type" : "RemoteCallbackList<ISharedConnectivityCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHotspotNetworks",
    "type" : "List<HotspotNetwork>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKnownNetworks",
    "type" : "List<KnownNetwork>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSettingsState",
    "type" : "SharedConnectivitySettingsState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHotspotNetworkConnectionStatus",
    "type" : "HotspotNetworkConnectionStatus",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKnownNetworkConnectionStatus",
    "type" : "KnownNetworkConnectionStatus",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCountDownLatch",
    "type" : "CountDownLatch",
    "comment" : " Used for testing",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onBind()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setCountdownLatch(@Nullable CountDownLatch latch)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void onRegisterCallback(ISharedConnectivityCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onUnregisterCallback(ISharedConnectivityCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setHotspotNetworks(@NonNull List<HotspotNetwork> networks)",
    "returnType" : "void",
    "comment" : "\n     * Implementing application should call this method to provide an up-to-date list of Hotspot\n     * Networks to be displayed to the user.\n     *\n     * This method updates the cached list and notifies all registered callbacks. Any callbacks that\n     * are inaccessible will be unregistered.\n     *\n     * @param networks The updated list of {@link HotspotNetwork} objects.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.app.HotspotNetwork" ]
  }, {
    "name" : "public final void setKnownNetworks(@NonNull List<KnownNetwork> networks)",
    "returnType" : "void",
    "comment" : "\n     * Implementing application should call this method to provide an up-to-date list of Known\n     * Networks to be displayed to the user.\n     *\n     * This method updates the cached list and notifies all registered callbacks. Any callbacks that\n     * are inaccessible will be unregistered.\n     *\n     * @param networks The updated list of {@link KnownNetwork} objects.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.app.KnownNetwork" ]
  }, {
    "name" : "public final void setSettingsState(@NonNull SharedConnectivitySettingsState settingsState)",
    "returnType" : "void",
    "comment" : "\n     * Implementing application should call this method to provide an up-to-date state of Shared\n     * connectivity settings state.\n     *\n     * This method updates the cached state and notifies all registered callbacks. Any callbacks\n     * that are inaccessible will be unregistered.\n     *\n     * @param settingsState The updated state {@link SharedConnectivitySettingsState}\n     *                      objects.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState" ]
  }, {
    "name" : "public final void updateHotspotNetworkConnectionStatus(@NonNull HotspotNetworkConnectionStatus status)",
    "returnType" : "void",
    "comment" : "\n     * Implementing application should call this method to provide an up-to-date status of enabling\n     * and connecting to the hotspot network.\n     *\n     * @param status The updated status {@link HotspotNetworkConnectionStatus} of the connection.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus" ]
  }, {
    "name" : "public final void updateKnownNetworkConnectionStatus(@NonNull KnownNetworkConnectionStatus status)",
    "returnType" : "void",
    "comment" : "\n     * Implementing application should call this method to provide an up-to-date status of\n     * connecting to a known network.\n     *\n     * @param status The updated status {@link KnownNetworkConnectionStatus} of the connection.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus" ]
  }, {
    "name" : "public static boolean areHotspotNetworksEnabledForService(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * System and settings UI support on the device for instant tether.\n     * @return True if the UI can display Instant Tether network data. False otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areKnownNetworksEnabledForService(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * System and settings UI support on the device for known networks.\n     * @return True if the UI can display known networks data. False otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onConnectHotspotNetwork(@NonNull HotspotNetwork network)",
    "returnType" : "void",
    "comment" : "\n     * Implementing application should implement this method.\n     *\n     * Implementation should initiate a connection to the Hotspot Network indicated.\n     *\n     * @param network Object identifying the Hotspot Network the user has requested a connection to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onDisconnectHotspotNetwork(@NonNull HotspotNetwork network)",
    "returnType" : "void",
    "comment" : "\n     * Implementing application should implement this method.\n     *\n     * Implementation should initiate a disconnection from the active Hotspot Network.\n     *\n     * @param network Object identifying the Hotspot Network the user has requested to disconnect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onConnectKnownNetwork(@NonNull KnownNetwork network)",
    "returnType" : "void",
    "comment" : "\n     * Implementing application should implement this method.\n     *\n     * Implementation should initiate a connection to the Known Network indicated.\n     *\n     * @param network Object identifying the Known Network the user has requested a connection to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onForgetKnownNetwork(@NonNull KnownNetwork network)",
    "returnType" : "void",
    "comment" : "\n     * Implementing application should implement this method.\n     *\n     * Implementation should remove the Known Network indicated from the synced list of networks.\n     *\n     * @param network Object identifying the Known Network the user has requested to forget.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final IBinder onBind(@NonNull Intent intent)", "public void onBind()", "public final void setCountdownLatch(@Nullable CountDownLatch latch)", "private void onRegisterCallback(ISharedConnectivityCallback callback)", "private void onUnregisterCallback(ISharedConnectivityCallback callback)", "public final void setHotspotNetworks(@NonNull List<HotspotNetwork> networks)", "public final void setKnownNetworks(@NonNull List<KnownNetwork> networks)", "public final void setSettingsState(@NonNull SharedConnectivitySettingsState settingsState)", "public final void updateHotspotNetworkConnectionStatus(@NonNull HotspotNetworkConnectionStatus status)", "public final void updateKnownNetworkConnectionStatus(@NonNull KnownNetworkConnectionStatus status)", "public static boolean areHotspotNetworksEnabledForService(@NonNull Context context)", "public static boolean areKnownNetworksEnabledForService(@NonNull Context context)", "public abstract void onConnectHotspotNetwork(@NonNull HotspotNetwork network)", "public abstract void onDisconnectHotspotNetwork(@NonNull HotspotNetwork network)", "public abstract void onConnectKnownNetwork(@NonNull KnownNetwork network)", "public abstract void onForgetKnownNetwork(@NonNull KnownNetwork network)" ],
  "variableNames" : [ "TAG", "DEBUG", "mHandler", "mRemoteCallbackList", "mHotspotNetworks", "mKnownNetworks", "mSettingsState", "mHotspotNetworkConnectionStatus", "mKnownNetworkConnectionStatus", "mCountDownLatch" ]
}