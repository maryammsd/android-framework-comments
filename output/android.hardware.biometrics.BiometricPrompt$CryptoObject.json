{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/BiometricPrompt.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "CryptoObject",
  "comment" : "\n     * A wrapper class for the cryptographic operations supported by BiometricPrompt.\n     *\n     * <p>Currently the framework supports {@link Signature}, {@link Cipher}, {@link Mac},\n     * {@link IdentityCredential}, {@link PresentationSession} and {@link KeyAgreement}.\n     *\n     * <p>Cryptographic operations in Android can be split into two categories: auth-per-use and\n     * time-based. This is specified during key creation via the timeout parameter of the\n     * {@code setUserAuthenticationParameters(int, int)} method of {@link\n     * android.security.keystore.KeyGenParameterSpec.Builder}.\n     *\n     * <p>CryptoObjects are used to unlock auth-per-use keys via\n     * {@link BiometricPrompt#authenticate(CryptoObject, CancellationSignal, Executor,\n     * AuthenticationCallback)}, whereas time-based keys are unlocked for their specified duration\n     * any time the user authenticates with the specified authenticators (e.g. unlocking keyguard).\n     * If a time-based key is not available for use (i.e. none of the allowed authenticators have\n     * been unlocked recently), applications can prompt the user to authenticate via\n     * {@link BiometricPrompt#authenticate(CancellationSignal, Executor, AuthenticationCallback)}\n     *\n     * @see Builder#setAllowedAuthenticators(int)\n     ",
  "links" : [ "android.security.keystore.KeyGenParameterSpec.Builder", "javax.crypto.KeyAgreement", "android.hardware.biometrics.BiometricPrompt#authenticate(CancellationSignal", "android.security.identity.PresentationSession", "java.security.Signature", "javax.crypto.Mac", "android.security.identity.IdentityCredential", "android.hardware.biometrics.BiometricPrompt#authenticate(CryptoObject", "javax.crypto.Cipher" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Signature getSignature()",
    "returnType" : "Signature",
    "comment" : "\n         * Get {@link Signature} object.\n         * @return {@link Signature} object or null if this doesn't contain one.\n         ",
    "links" : [ "java.security.Signature" ]
  }, {
    "name" : "public Cipher getCipher()",
    "returnType" : "Cipher",
    "comment" : "\n         * Get {@link Cipher} object.\n         * @return {@link Cipher} object or null if this doesn't contain one.\n         ",
    "links" : [ "javax.crypto.Cipher" ]
  }, {
    "name" : "public Mac getMac()",
    "returnType" : "Mac",
    "comment" : "\n         * Get {@link Mac} object.\n         * @return {@link Mac} object or null if this doesn't contain one.\n         ",
    "links" : [ "javax.crypto.Mac" ]
  }, {
    "name" : "public IdentityCredential getIdentityCredential()",
    "returnType" : "IdentityCredential",
    "comment" : "\n         * Get {@link IdentityCredential} object.\n         * @return {@link IdentityCredential} object or null if this doesn't contain one.\n         * @deprecated Use {@link PresentationSession} instead of {@link IdentityCredential}.\n         ",
    "links" : [ "android.security.identity.PresentationSession", "android.security.identity.IdentityCredential" ]
  }, {
    "name" : "public PresentationSession getPresentationSession()",
    "returnType" : "PresentationSession",
    "comment" : "\n         * Get {@link PresentationSession} object.\n         * @return {@link PresentationSession} object or null if this doesn't contain one.\n         ",
    "links" : [ "android.security.identity.PresentationSession" ]
  }, {
    "name" : "public KeyAgreement getKeyAgreement()",
    "returnType" : "KeyAgreement",
    "comment" : "\n         * Get {@link KeyAgreement} object.\n         * @return {@link KeyAgreement} object or null if this doesn't contain one.\n         ",
    "links" : [ "javax.crypto.KeyAgreement" ]
  }, {
    "name" : "public long getOperationHandle()",
    "returnType" : "long",
    "comment" : "\n         * Returns the {@code operationHandle} associated with this object or 0 if none.\n         * The {@code operationHandle} is the underlying identifier associated with\n         * the {@code CryptoObject}.\n         *\n         * <p> The {@code operationHandle} can be used to reconstruct a {@code CryptoObject}\n         * instance. This is useful for any cross-process communication as the {@code CryptoObject}\n         * class is not {@link android.os.Parcelable}. Hence, if the {@code CryptoObject} is\n         * constructed in one process, and needs to be propagated to another process,\n         * before calling the\n         * {@link BiometricPrompt#authenticate(CryptoObject, CancellationSignal, Executor,\n         * AuthenticationCallback)} API in the second process, the recommendation is to retrieve the\n         * {@code operationHandle} using this API, and then reconstruct the\n         * {@code CryptoObject}using the constructor that takes in an {@code operationHandle}, and\n         * pass that in to the {@code authenticate} API mentioned above.\n         ",
    "links" : [ "android.os.Parcelable", "android.hardware.biometrics.BiometricPrompt#authenticate(CryptoObject" ]
  } ],
  "methodNames" : [ "public Signature getSignature()", "public Cipher getCipher()", "public Mac getMac()", "public IdentityCredential getIdentityCredential()", "public PresentationSession getPresentationSession()", "public KeyAgreement getKeyAgreement()", "public long getOperationHandle()" ],
  "variableNames" : [ ]
}