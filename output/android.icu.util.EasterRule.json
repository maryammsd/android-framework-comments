{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/EasterHoliday.java",
  "packageName" : "android.icu.util",
  "className" : "EasterRule",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "daysAfterEaster",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "calendar",
    "type" : "GregorianCalendar",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Date firstAfter(Date start)",
    "returnType" : "Date",
    "comment" : "\n     * Return the first occurrence of this rule on or after the given date\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date firstBetween(Date start, Date end)",
    "returnType" : "Date",
    "comment" : "\n     * Return the first occurrence of this rule on or after\n     * the given start date and before the given end date.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOn(Date date)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the given Date is on the same day as Easter\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBetween(Date start, Date end)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if Easter occurs between the two dates given\n     ",
    "links" : [ ]
  }, {
    "name" : "private Date doFirstBetween(Date start, Date end)",
    "returnType" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Date computeInYear(Date date, GregorianCalendar cal)",
    "returnType" : "Date",
    "comment" : "\n     * Compute the month and date on which this holiday falls in the year\n     * containing the date \"date\".  First figure out which date Easter\n     * lands on in this year, and then add the offset for this holiday to get\n     * the right date.\n     * <p>\n     * The algorithm here is taken from the\n     * <a href=\"http://www.faqs.org/faqs/calendars/faq/\">Calendar FAQ</a>.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Date firstAfter(Date start)", "public Date firstBetween(Date start, Date end)", "public boolean isOn(Date date)", "public boolean isBetween(Date start, Date end)", "private Date doFirstBetween(Date start, Date end)", "private Date computeInYear(Date date, GregorianCalendar cal)" ],
  "variableNames" : [ "daysAfterEaster", "calendar" ]
}