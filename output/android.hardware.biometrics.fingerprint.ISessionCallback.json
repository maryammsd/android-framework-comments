{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/fingerprint/ISessionCallback.java",
  "packageName" : "android.hardware.biometrics.fingerprint",
  "className" : "ISessionCallback",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "VERSION",
    "type" : "int",
    "comment" : "\n   * The version of this interface that the caller is built against.\n   * This might be different from what {@link #getInterfaceVersion()\n   * getInterfaceVersion} returns as that is the version of the interface\n   * that the remote object is implementing.\n   ",
    "links" : [ "#getInterfaceVersion()" ]
  }, {
    "name" : "HASH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DESCRIPTOR",
    "type" : "java.lang.String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onChallengeGenerated(long challenge) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Notifies the framework when a challenge is successfully generated. ",
    "links" : [ ]
  }, {
    "name" : "public void onChallengeRevoked(long challenge) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Notifies the framework when a challenge has been revoked. ",
    "links" : [ ]
  }, {
    "name" : "public void onAcquired(byte info, int vendorCode) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during the following operations:\n   *   - ISession#enroll\n   *   - ISession#authenticate\n   *   - ISession#detectInteraction\n   * \n   * These messages may be used to provide user guidance multiple times per operation if\n   * necessary.\n   * \n   * @param info See the AcquiredInfo enum.\n   * @param vendorCode Only valid if info == AcquiredInfo::VENDOR. The vendorCode must be used to\n   *                   index into the configuration\n   *                   com.android.internal.R.array.fingerprint_acquired_vendor that's installed\n   *                   on the vendor partition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onError(byte error, int vendorCode) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during the following operations:\n   *   - ISession#enroll\n   *   - ISession#authenticate\n   *   - ISession#detectInteraction\n   *   - ISession#invalidateAuthenticatorId\n   *   - ISession#resetLockout\n   * \n   * These messages may be used to notify the framework or user that a non-recoverable error\n   * has occurred. The operation is finished, and the HAL can proceed with the next operation\n   * or return to the idling state.\n   * \n   * Note that cancellation (see common::ICancellationSignal) must be followed with an\n   * Error::CANCELED message.\n   * \n   * @param error See the Error enum.\n   * @param vendorCode Only valid if error == Error::VENDOR. The vendorCode must be used to index\n   *                   into the configuration\n   *                   com.android.internal.R.fingerprint_error_vendor that's installed on the\n   *                   vendor partition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onEnrollmentProgress(int enrollmentId, int remaining) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during the ISession#enroll operation.\n   * \n   * @param enrollmentId Unique stable identifier for the enrollment that's being added by this\n   *                     ISession#enroll invocation.\n   * @param remaining Remaining number of steps before enrollment is complete.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onAuthenticationSucceeded(int enrollmentId, android.hardware.keymaster.HardwareAuthToken hat) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during ISession#authenticate.\n   * \n   * Used to notify the framework upon successful authentication. Note that the authentication\n   * lifecycle ends when either 1) a fingerprint is accepted, or 2) an error occurred. The\n   * authentication lifecycle does NOT end when a fingerprint is rejected.\n   * \n   * @param enrollmentId Fingerprint that was accepted.\n   * @param hat If the sensor is configured as SensorStrength::STRONG, a non-null attestation that\n   *            a fingerprint was accepted. The HardwareAuthToken's \"challenge\" field must be set\n   *            with the operationId passed in during ISession#authenticate. If the sensor is NOT\n   *            SensorStrength::STRONG, the HardwareAuthToken MUST be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onAuthenticationFailed() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during ISession#authenticate.\n   * \n   * Used to notify the framework upon rejected attempts. Note that the authentication\n   * lifecycle ends when either 1) a fingerprint is accepted, or 2) an error occurred.\n   * The authentication lifecycle does NOT end when a fingerprint is rejected.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onLockoutTimed(long durationMillis) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during ISession#authenticate.\n   * \n   * Authentication is locked out due to too many unsuccessful attempts. This is a rate-limiting\n   * lockout, and authentication can be restarted after a period of time. See\n   * ISession#resetLockout.\n   * \n   * @param sensorId Sensor for which the user is locked out.\n   * @param userId User for which the sensor is locked out.\n   * @param durationMillis Remaining duration of the lockout.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onLockoutPermanent() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during ISession#authenticate.\n   * \n   * Authentication is disabled until the user unlocks with their device credential\n   * (PIN/Pattern/Password). See ISession#resetLockout.\n   * \n   * @param sensorId Sensor for which the user is locked out.\n   * @param userId User for which the sensor is locked out.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onLockoutCleared() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Notifies the framework that lockout has been cleared for this (sensorId, userId) pair.\n   * \n   * Note that this method can be used to notify the framework during any state.\n   * \n   * Lockout can be cleared in the following scenarios:\n   * 1) A timed lockout has ended (e.g. durationMillis specified in previous #onLockoutTimed\n   *    has expired.\n   * 2) See ISession#resetLockout.\n   * \n   * @param sensorId Sensor for which the user's lockout is cleared.\n   * @param userId User for the sensor's lockout is cleared.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onInteractionDetected() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during\n   * ISession#detectInteraction\n   * \n   * Notifies the framework that user interaction occurred. See ISession#detectInteraction.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onEnrollmentsEnumerated(int[] enrollmentIds) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during\n   * ISession#enumerateEnrollments.\n   * \n   * Notifies the framework of the current enrollments. See ISession#enumerateEnrollments.\n   * \n   * @param enrollmentIds A list of enrollments for the session's (userId, sensorId) pair.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onEnrollmentsRemoved(int[] enrollmentIds) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during\n   * ISession#removeEnrollments.\n   * \n   * Notifies the framework that the specified enrollments are removed.\n   * \n   * @param enrollmentIds The enrollments that were removed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onAuthenticatorIdRetrieved(long authenticatorId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during\n   * ISession#getAuthenticatorId.\n   * \n   * Notifies the framework with the authenticatorId corresponding to this session's\n   * (userId, sensorId) pair.\n   * \n   * @param authenticatorId See the above documentation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onAuthenticatorIdInvalidated(long newAuthenticatorId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method must only be used to notify the framework during\n   * ISession#invalidateAuthenticatorId.\n   * \n   * See ISession#invalidateAuthenticatorId for more information.\n   * \n   * @param newAuthenticatorId The new entropy-encoded random identifier associated with the\n   *                           current set of enrollments.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void onSessionClosed() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This method notifes the client that this session has closed.\n   * The client must not make any more calls to this session.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getInterfaceVersion() throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getInterfaceHash() throws android.os.RemoteException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onChallengeGenerated(long challenge) throws android.os.RemoteException", "public void onChallengeRevoked(long challenge) throws android.os.RemoteException", "public void onAcquired(byte info, int vendorCode) throws android.os.RemoteException", "public void onError(byte error, int vendorCode) throws android.os.RemoteException", "public void onEnrollmentProgress(int enrollmentId, int remaining) throws android.os.RemoteException", "public void onAuthenticationSucceeded(int enrollmentId, android.hardware.keymaster.HardwareAuthToken hat) throws android.os.RemoteException", "public void onAuthenticationFailed() throws android.os.RemoteException", "public void onLockoutTimed(long durationMillis) throws android.os.RemoteException", "public void onLockoutPermanent() throws android.os.RemoteException", "public void onLockoutCleared() throws android.os.RemoteException", "public void onInteractionDetected() throws android.os.RemoteException", "public void onEnrollmentsEnumerated(int[] enrollmentIds) throws android.os.RemoteException", "public void onEnrollmentsRemoved(int[] enrollmentIds) throws android.os.RemoteException", "public void onAuthenticatorIdRetrieved(long authenticatorId) throws android.os.RemoteException", "public void onAuthenticatorIdInvalidated(long newAuthenticatorId) throws android.os.RemoteException", "public void onSessionClosed() throws android.os.RemoteException", "public int getInterfaceVersion() throws android.os.RemoteException", "public String getInterfaceHash() throws android.os.RemoteException" ],
  "variableNames" : [ "VERSION", "HASH", "DESCRIPTOR" ]
}