{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/BackStackRecord.java",
  "packageName" : "android.app",
  "className" : "BackStackRecord",
  "comment" : "\n * @hide Entry of an operation on the fragment back stack.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManager",
    "type" : "FragmentManagerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_NULL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_ADD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_REPLACE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_REMOVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_HIDE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_SHOW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_DETACH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_ATTACH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_SET_PRIMARY_NAV",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OP_UNSET_PRIMARY_NAV",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOps",
    "type" : "ArrayList<Op>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnterAnim",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExitAnim",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopEnterAnim",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopExitAnim",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransition",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransitionStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddToBackStack",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowAddToBackStack",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCommitted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReorderingAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCommitRunnables",
    "type" : "ArrayList<Runnable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBreadCrumbTitleRes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBreadCrumbTitleText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBreadCrumbShortTitleRes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBreadCrumbShortTitleText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSharedElementSourceNames",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSharedElementTargetNames",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dump(String prefix, PrintWriter writer, boolean full)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBreadCrumbTitleRes()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBreadCrumbShortTitleRes()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getBreadCrumbTitle()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getBreadCrumbShortTitle()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void addOp(Op op)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction add(Fragment fragment, String tag)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction add(int containerViewId, Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction add(int containerViewId, Fragment fragment, String tag)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doAddOp(int containerViewId, Fragment fragment, String tag, int opcmd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction replace(int containerViewId, Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction replace(int containerViewId, Fragment fragment, String tag)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction remove(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction hide(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction show(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction detach(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction attach(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction setPrimaryNavigationFragment(Fragment fragment)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction setCustomAnimations(int enter, int exit)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction setCustomAnimations(int enter, int exit, int popEnter, int popExit)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction setTransition(int transition)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction addSharedElement(View sharedElement, String name)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction setTransitionStyle(int styleRes)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction addToBackStack(String name)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAddToBackStackAllowed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction disallowAddToBackStack()",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction setBreadCrumbTitle(int res)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction setBreadCrumbTitle(CharSequence text)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction setBreadCrumbShortTitle(int res)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction setBreadCrumbShortTitle(CharSequence text)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void bumpBackStackNesting(int amt)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction runOnCommit(Runnable runnable)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void runOnCommitRunnables()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int commit()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int commitAllowingStateLoss()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void commitNow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void commitNowAllowingStateLoss()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction setReorderingAllowed(boolean reorderingAllowed)",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int commitInternal(boolean allowStateLoss)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean generateOps(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop)",
    "returnType" : "boolean",
    "comment" : "\n     * Implementation of {@link android.app.FragmentManagerImpl.OpGenerator}.\n     * This operation is added to the list of pending actions during {@link #commit()}, and\n     * will be executed on the UI thread to run this FragmentTransaction.\n     *\n     * @param records Modified to add this BackStackRecord\n     * @param isRecordPop Modified to add a false (this isn't a pop)\n     * @return true always because the records and isRecordPop will always be changed\n     ",
    "links" : [ "android.app.FragmentManagerImpl.OpGenerator", "#commit()" ]
  }, {
    "name" : " boolean interactsWith(int containerId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean interactsWith(ArrayList<BackStackRecord> records, int startIndex, int endIndex)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void executeOps()",
    "returnType" : "void",
    "comment" : "\n     * Executes the operations contained within this transaction. The Fragment states will only\n     * be modified if optimizations are not allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void executePopOps(boolean moveToState)",
    "returnType" : "void",
    "comment" : "\n     * Reverses the execution of the operations within this transaction. The Fragment states will\n     * only be modified if optimizations are not allowed.\n     *\n     * @param moveToState {@code true} if added fragments should be moved to their final state\n     *                    in unoptimized transactions\n     ",
    "links" : [ ]
  }, {
    "name" : " Fragment expandOps(ArrayList<Fragment> added, Fragment oldPrimaryNav)",
    "returnType" : "Fragment",
    "comment" : "\n     * Expands all meta-ops into their more primitive equivalents. This must be called prior to\n     * {@link #executeOps()} or any other call that operations on mOps for forward navigation.\n     * It should not be called for pop/reverse navigation operations.\n     *\n     * <p>Removes all OP_REPLACE ops and replaces them with the proper add and remove\n     * operations that are equivalent to the replace.</p>\n     *\n     * <p>Adds OP_UNSET_PRIMARY_NAV ops to match OP_SET_PRIMARY_NAV, OP_REMOVE and OP_DETACH\n     * ops so that we can restore the old primary nav fragment later. Since callers call this\n     * method in a loop before running ops from several transactions at once, the caller should\n     * pass the return value from this method as the oldPrimaryNav parameter for the next call.\n     * The first call in such a loop should pass the value of\n     * {@link FragmentManager#getPrimaryNavigationFragment()}.</p>\n     *\n     * @param added Initialized to the fragments that are in the mManager.mAdded, this\n     *              will be modified to contain the fragments that will be in mAdded\n     *              after the execution ({@link #executeOps()}.\n     * @param oldPrimaryNav The tracked primary navigation fragment as of the beginning of\n     *                      this set of ops\n     * @return the new oldPrimaryNav fragment after this record's ops would be run\n     ",
    "links" : [ "android.app.FragmentManager#getPrimaryNavigationFragment()", "#executeOps()" ]
  }, {
    "name" : " void trackAddedFragmentsInPop(ArrayList<Fragment> added)",
    "returnType" : "void",
    "comment" : "\n     * Removes fragments that are added or removed during a pop operation.\n     *\n     * @param added Initialized to the fragments that are in the mManager.mAdded, this\n     *              will be modified to contain the fragments that will be in mAdded\n     *              after the execution ({@link #executeOps()}.\n     ",
    "links" : [ "#executeOps()" ]
  }, {
    "name" : " boolean isPostponed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setOnStartPostponedListener(Fragment.OnStartEnterTransitionListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isFragmentPostponed(Op op)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTransition()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTransitionStyle()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String toString()", "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", " void dump(String prefix, PrintWriter writer, boolean full)", "public int getId()", "public int getBreadCrumbTitleRes()", "public int getBreadCrumbShortTitleRes()", "public CharSequence getBreadCrumbTitle()", "public CharSequence getBreadCrumbShortTitle()", " void addOp(Op op)", "public FragmentTransaction add(Fragment fragment, String tag)", "public FragmentTransaction add(int containerViewId, Fragment fragment)", "public FragmentTransaction add(int containerViewId, Fragment fragment, String tag)", "private void doAddOp(int containerViewId, Fragment fragment, String tag, int opcmd)", "public FragmentTransaction replace(int containerViewId, Fragment fragment)", "public FragmentTransaction replace(int containerViewId, Fragment fragment, String tag)", "public FragmentTransaction remove(Fragment fragment)", "public FragmentTransaction hide(Fragment fragment)", "public FragmentTransaction show(Fragment fragment)", "public FragmentTransaction detach(Fragment fragment)", "public FragmentTransaction attach(Fragment fragment)", "public FragmentTransaction setPrimaryNavigationFragment(Fragment fragment)", "public FragmentTransaction setCustomAnimations(int enter, int exit)", "public FragmentTransaction setCustomAnimations(int enter, int exit, int popEnter, int popExit)", "public FragmentTransaction setTransition(int transition)", "public FragmentTransaction addSharedElement(View sharedElement, String name)", "public FragmentTransaction setTransitionStyle(int styleRes)", "public FragmentTransaction addToBackStack(String name)", "public boolean isAddToBackStackAllowed()", "public FragmentTransaction disallowAddToBackStack()", "public FragmentTransaction setBreadCrumbTitle(int res)", "public FragmentTransaction setBreadCrumbTitle(CharSequence text)", "public FragmentTransaction setBreadCrumbShortTitle(int res)", "public FragmentTransaction setBreadCrumbShortTitle(CharSequence text)", " void bumpBackStackNesting(int amt)", "public FragmentTransaction runOnCommit(Runnable runnable)", "public void runOnCommitRunnables()", "public int commit()", "public int commitAllowingStateLoss()", "public void commitNow()", "public void commitNowAllowingStateLoss()", "public FragmentTransaction setReorderingAllowed(boolean reorderingAllowed)", " int commitInternal(boolean allowStateLoss)", "public boolean generateOps(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop)", " boolean interactsWith(int containerId)", " boolean interactsWith(ArrayList<BackStackRecord> records, int startIndex, int endIndex)", " void executeOps()", " void executePopOps(boolean moveToState)", " Fragment expandOps(ArrayList<Fragment> added, Fragment oldPrimaryNav)", " void trackAddedFragmentsInPop(ArrayList<Fragment> added)", " boolean isPostponed()", " void setOnStartPostponedListener(Fragment.OnStartEnterTransitionListener listener)", "private static boolean isFragmentPostponed(Op op)", "public String getName()", "public int getTransition()", "public int getTransitionStyle()", "public boolean isEmpty()" ],
  "variableNames" : [ "TAG", "mManager", "OP_NULL", "OP_ADD", "OP_REPLACE", "OP_REMOVE", "OP_HIDE", "OP_SHOW", "OP_DETACH", "OP_ATTACH", "OP_SET_PRIMARY_NAV", "OP_UNSET_PRIMARY_NAV", "mOps", "mEnterAnim", "mExitAnim", "mPopEnterAnim", "mPopExitAnim", "mTransition", "mTransitionStyle", "mAddToBackStack", "mAllowAddToBackStack", "mName", "mCommitted", "mIndex", "mReorderingAllowed", "mCommitRunnables", "mBreadCrumbTitleRes", "mBreadCrumbTitleText", "mBreadCrumbShortTitleRes", "mBreadCrumbShortTitleText", "mSharedElementSourceNames", "mSharedElementTargetNames" ]
}