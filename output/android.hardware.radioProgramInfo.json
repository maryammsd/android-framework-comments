{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/radio/RadioManager.java",
  "packageName" : "android.hardware.radio",
  "className" : "ProgramInfo",
  "comment" : " Radio program information. ",
  "variables" : [ {
    "name" : "FLAG_LIVE",
    "type" : "int",
    "comment" : " sourced from hardware/interfaces/broadcastradio/2.0/types.hal",
    "links" : [ ]
  }, {
    "name" : "FLAG_MUTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_TRAFFIC_PROGRAM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_TRAFFIC_ANNOUNCEMENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_TUNED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_STEREO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelector",
    "type" : "ProgramSelector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogicallyTunedTo",
    "type" : "ProgramSelector.Identifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPhysicallyTunedTo",
    "type" : "ProgramSelector.Identifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRelatedContent",
    "type" : "Collection<ProgramSelector.Identifier>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInfoFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSignalQuality",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetadata",
    "type" : "RadioMetadata",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorInfo",
    "type" : "Map<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ProgramInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ProgramSelector getSelector()",
    "returnType" : "ProgramSelector",
    "comment" : "\n         * Program selector, necessary for tuning to a program.\n         *\n         * @return the program selector.\n         ",
    "links" : [ ]
  }, {
    "name" : "public ProgramSelector.Identifier getLogicallyTunedTo()",
    "returnType" : "ProgramSelector.Identifier",
    "comment" : "\n         * Identifier currently used for program selection.\n         *\n         * This identifier can be used to determine which technology is\n         * currently being used for reception.\n         *\n         * Some program selectors contain tuning information for different radio\n         * technologies (i.e. FM RDS and DAB). For example, user may tune using\n         * a ProgramSelector with RDS_PI primary identifier, but the tuner hardware\n         * may choose to use DAB technology to make actual tuning. This identifier\n         * must reflect that.\n         ",
    "links" : [ ]
  }, {
    "name" : "public ProgramSelector.Identifier getPhysicallyTunedTo()",
    "returnType" : "ProgramSelector.Identifier",
    "comment" : "\n         * Identifier currently used by hardware to physically tune to a channel.\n         *\n         * Some radio technologies broadcast the same program on multiple channels,\n         * i.e. with RDS AF the same program may be broadcasted on multiple\n         * alternative frequencies; the same DAB program may be broadcast on\n         * multiple ensembles. This identifier points to the channel to which the\n         * radio hardware is physically tuned to.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Collection<ProgramSelector.Identifier> getRelatedContent()",
    "returnType" : "Collection<ProgramSelector.Identifier>",
    "comment" : "\n         * Primary identifiers of related contents.\n         *\n         * Some radio technologies provide pointers to other programs that carry\n         * related content (i.e. DAB soft-links). This field is a list of pointers\n         * to other programs on the program list.\n         *\n         * Please note, that these identifiers does not have to exist on the program\n         * list - i.e. DAB tuner may provide information on FM RDS alternatives\n         * despite not supporting FM RDS. If the system has multiple tuners, another\n         * one may have it on its list.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getChannel()",
    "returnType" : "int",
    "comment" : " Main channel expressed in units according to band type.\n         * Currently all defined band types express channels as frequency in kHz\n         * @return the program channel\n         * @deprecated Use {@link getSelector()} instead.\n         ",
    "links" : [ "getSelector" ]
  }, {
    "name" : "public int getSubChannel()",
    "returnType" : "int",
    "comment" : " Sub channel ID. E.g 1 for HD radio HD1\n         * @return the program sub channel\n         * @deprecated Use {@link getSelector()} instead.\n         ",
    "links" : [ "getSelector" ]
  }, {
    "name" : "public boolean isTuned()",
    "returnType" : "boolean",
    "comment" : " {@code true} if the tuner is currently tuned on a valid station\n         * @return {@code true} if currently tuned, {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStereo()",
    "returnType" : "boolean",
    "comment" : " {@code true} if the received program is stereo\n         * @return {@code true} if stereo, {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDigital()",
    "returnType" : "boolean",
    "comment" : " {@code true} if the received program is digital (e.g HD radio)\n         * @return {@code true} if digital, {@code false} otherwise.\n         * @deprecated Use {@link getLogicallyTunedTo()} instead.\n         ",
    "links" : [ "getLogicallyTunedTo" ]
  }, {
    "name" : "public boolean isLive()",
    "returnType" : "boolean",
    "comment" : "\n         * {@code true} if the program is currently playing live stream.\n         * This may result in a slightly altered reception parameters,\n         * usually targetted at reduced latency.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMuted()",
    "returnType" : "boolean",
    "comment" : "\n         * {@code true} if radio stream is not playing, ie. due to bad reception\n         * conditions or buffering. In this state volume knob MAY be disabled to\n         * prevent user increasing volume too much.\n         * It does NOT mean the user has muted audio.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTrafficProgram()",
    "returnType" : "boolean",
    "comment" : "\n         * {@code true} if radio station transmits traffic information\n         * regularily.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTrafficAnnouncementActive()",
    "returnType" : "boolean",
    "comment" : "\n         * {@code true} if radio station transmits traffic information\n         * at the very moment.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSignalStrength()",
    "returnType" : "int",
    "comment" : "\n         * Signal quality (as opposed to the name) indication from 0 (no signal)\n         * to 100 (excellent)\n         * @return the signal quality indication.\n         ",
    "links" : [ ]
  }, {
    "name" : "public RadioMetadata getMetadata()",
    "returnType" : "RadioMetadata",
    "comment" : " Metadata currently received from this station.\n         * null if no metadata have been received\n         * @return current meta data received from this program.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getVendorInfo()",
    "returnType" : "Map<String, String>",
    "comment" : "\n         * A map of vendor-specific opaque strings, passed from HAL without changes.\n         * Format of these strings can vary across vendors.\n         *\n         * It may be used for extra features, that's not supported by a platform,\n         * for example: paid-service=true; bitrate=320kbps.\n         *\n         * Keys must be prefixed with unique vendor Java-style namespace,\n         * eg. 'com.somecompany.parameter1'.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "FLAG_LIVE", "FLAG_MUTED", "FLAG_TRAFFIC_PROGRAM", "FLAG_TRAFFIC_ANNOUNCEMENT", "FLAG_TUNED", "FLAG_STEREO", "mSelector", "mLogicallyTunedTo", "mPhysicallyTunedTo", "mRelatedContent", "mInfoFlags", "mSignalQuality", "mMetadata", "mVendorInfo", "CREATOR" ],
  "methodNames" : [ "public ProgramSelector getSelector()", "public ProgramSelector.Identifier getLogicallyTunedTo()", "public ProgramSelector.Identifier getPhysicallyTunedTo()", "public Collection<ProgramSelector.Identifier> getRelatedContent()", "public int getChannel()", "public int getSubChannel()", "public boolean isTuned()", "public boolean isStereo()", "public boolean isDigital()", "public boolean isLive()", "public boolean isMuted()", "public boolean isTrafficProgram()", "public boolean isTrafficAnnouncementActive()", "public int getSignalStrength()", "public RadioMetadata getMetadata()", "public Map<String, String> getVendorInfo()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public String toString()", "public int hashCode()", "public boolean equals(@Nullable Object obj)" ]
}