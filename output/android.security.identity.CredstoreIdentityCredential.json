{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/identity/CredstoreIdentityCredential.java",
  "packageName" : "android.security.identity",
  "className" : "CredstoreIdentityCredential",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCredentialName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCipherSuite",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "ICredential",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "CredstorePresentationSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFeatureVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEphemeralKeyPair",
    "type" : "KeyPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecretKey",
    "type" : "SecretKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReaderSecretKey",
    "type" : "SecretKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEphemeralCounter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReadersExpectedEphemeralCounter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowUsingExhaustedKeys",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowUsingExpiredKeys",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncrementKeyUsageCount",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperationHandleSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperationHandle",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureEphemeralKeyPair()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public KeyPair createEphemeralKeyPair()",
    "returnType" : "KeyPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setReaderEphemeralPublicKey(@NonNull PublicKey readerEphemeralPublicKey) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] encryptMessageToReader(@NonNull byte[] messagePlaintext)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] decryptMessageFromReader(@NonNull byte[] messageCiphertext) throws MessageDecryptionException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Collection<X509Certificate> getCredentialKeyCertificateChain()",
    "returnType" : "Collection<X509Certificate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAllowUsingExhaustedKeys(boolean allowUsingExhaustedKeys)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAllowUsingExpiredKeys(boolean allowUsingExpiredKeys)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIncrementKeyUsageCount(boolean incrementKeyUsageCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getCredstoreOperationHandle()",
    "returnType" : "long",
    "comment" : "\n     * Called by android.hardware.biometrics.CryptoObject#getOpId() to get an\n     * operation handle.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ResultData getEntries(@Nullable byte[] requestMessage, @NonNull Map<String, Collection<String>> entriesToRequest, @Nullable byte[] sessionTranscript, @Nullable byte[] readerSignature) throws SessionTranscriptMismatchException, NoAuthenticationKeyAvailableException, InvalidReaderSignatureException, EphemeralPublicKeyNotFoundException, InvalidRequestMessageException",
    "returnType" : "ResultData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAvailableAuthenticationKeys(int keyCount, int maxUsesPerKey)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAvailableAuthenticationKeys(int keyCount, int maxUsesPerKey, long minValidTimeMillis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Collection<X509Certificate> getAuthKeysNeedingCertification()",
    "returnType" : "Collection<X509Certificate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void storeStaticAuthenticationData(X509Certificate authenticationKey, byte[] staticAuthData) throws UnknownAuthenticationKeyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void storeStaticAuthenticationData(X509Certificate authenticationKey, Instant expirationDate, byte[] staticAuthData) throws UnknownAuthenticationKeyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getAuthenticationDataUsageCount()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<AuthenticationKeyMetadata> getAuthenticationKeyMetadata()",
    "returnType" : "List<AuthenticationKeyMetadata>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] proveOwnership(@NonNull byte[] challenge)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] delete(@NonNull byte[] challenge)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] update(@NonNull PersonalizationData personalizationData)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureEphemeralKeyPair()", "public KeyPair createEphemeralKeyPair()", "public void setReaderEphemeralPublicKey(@NonNull PublicKey readerEphemeralPublicKey) throws InvalidKeyException", "public byte[] encryptMessageToReader(@NonNull byte[] messagePlaintext)", "public byte[] decryptMessageFromReader(@NonNull byte[] messageCiphertext) throws MessageDecryptionException", "public Collection<X509Certificate> getCredentialKeyCertificateChain()", "public void setAllowUsingExhaustedKeys(boolean allowUsingExhaustedKeys)", "public void setAllowUsingExpiredKeys(boolean allowUsingExpiredKeys)", "public void setIncrementKeyUsageCount(boolean incrementKeyUsageCount)", "public long getCredstoreOperationHandle()", "public ResultData getEntries(@Nullable byte[] requestMessage, @NonNull Map<String, Collection<String>> entriesToRequest, @Nullable byte[] sessionTranscript, @Nullable byte[] readerSignature) throws SessionTranscriptMismatchException, NoAuthenticationKeyAvailableException, InvalidReaderSignatureException, EphemeralPublicKeyNotFoundException, InvalidRequestMessageException", "public void setAvailableAuthenticationKeys(int keyCount, int maxUsesPerKey)", "public void setAvailableAuthenticationKeys(int keyCount, int maxUsesPerKey, long minValidTimeMillis)", "public Collection<X509Certificate> getAuthKeysNeedingCertification()", "public void storeStaticAuthenticationData(X509Certificate authenticationKey, byte[] staticAuthData) throws UnknownAuthenticationKeyException", "public void storeStaticAuthenticationData(X509Certificate authenticationKey, Instant expirationDate, byte[] staticAuthData) throws UnknownAuthenticationKeyException", "public int[] getAuthenticationDataUsageCount()", "public List<AuthenticationKeyMetadata> getAuthenticationKeyMetadata()", "public byte[] proveOwnership(@NonNull byte[] challenge)", "public byte[] delete(@NonNull byte[] challenge)", "public byte[] update(@NonNull PersonalizationData personalizationData)" ],
  "variableNames" : [ "TAG", "mCredentialName", "mCipherSuite", "mContext", "mBinder", "mSession", "mFeatureVersion", "mEphemeralKeyPair", "mSecretKey", "mReaderSecretKey", "mEphemeralCounter", "mReadersExpectedEphemeralCounter", "mAllowUsingExhaustedKeys", "mAllowUsingExpiredKeys", "mIncrementKeyUsageCount", "mOperationHandleSet", "mOperationHandle" ]
}