{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/audiofx/AudioEffect.java",
  "packageName" : "android.media.audiofx",
  "className" : "AudioEffect",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_ENV_REVERB",
    "type" : "UUID",
    "comment" : "\n     * UUID for environmental reverberation effect\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_PRESET_REVERB",
    "type" : "UUID",
    "comment" : "\n     * UUID for preset reverberation effect\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_EQUALIZER",
    "type" : "UUID",
    "comment" : "\n     * UUID for equalizer effect\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_BASS_BOOST",
    "type" : "UUID",
    "comment" : "\n     * UUID for bass boost effect\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_VIRTUALIZER",
    "type" : "UUID",
    "comment" : "\n     * UUID for virtualizer effect\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_AGC",
    "type" : "UUID",
    "comment" : "\n     * UUID for Automatic Gain Control (AGC)\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_AEC",
    "type" : "UUID",
    "comment" : "\n     * UUID for Acoustic Echo Canceler (AEC)\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_NS",
    "type" : "UUID",
    "comment" : "\n     * UUID for Noise Suppressor (NS)\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_LOUDNESS_ENHANCER",
    "type" : "UUID",
    "comment" : "\n     * UUID for Loudness Enhancer\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_DYNAMICS_PROCESSING",
    "type" : "UUID",
    "comment" : "\n     * UUID for Dynamics Processing\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_HAPTIC_GENERATOR",
    "type" : "UUID",
    "comment" : " This is taken from system/media/audio/include/system/audio_effects/effect_hapticgenerator.h",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TYPE_NULL",
    "type" : "UUID",
    "comment" : "\n     * Null effect UUID. See {@link AudioEffect(UUID, UUID, int, int)} for use.\n     * @hide\n     ",
    "links" : [ "AudioEffect(UUID" ]
  }, {
    "name" : "STATE_UNINITIALIZED",
    "type" : "int",
    "comment" : "\n     * State of an AudioEffect object that was not successfully initialized upon\n     * creation\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_INITIALIZED",
    "type" : "int",
    "comment" : "\n     * State of an AudioEffect object that is ready to be used.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_EVENT_CONTROL_STATUS",
    "type" : "int",
    "comment" : "\n     * Event id for engine control ownership change notification.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_EVENT_ENABLED_STATUS",
    "type" : "int",
    "comment" : "\n     * Event id for engine state change notification.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_EVENT_PARAMETER_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event id for engine parameter change notification.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUCCESS",
    "type" : "int",
    "comment" : "\n     * Successful operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR",
    "type" : "int",
    "comment" : "\n     * Unspecified error.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALREADY_EXISTS",
    "type" : "int",
    "comment" : "\n     * Internal operation status. Not returned by any method.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NO_INIT",
    "type" : "int",
    "comment" : "\n     * Operation failed due to bad object initialization.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_BAD_VALUE",
    "type" : "int",
    "comment" : "\n     * Operation failed due to bad parameter value.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INVALID_OPERATION",
    "type" : "int",
    "comment" : "\n     * Operation failed because it was requested in wrong state.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NO_MEMORY",
    "type" : "int",
    "comment" : "\n     * Operation failed due to lack of memory.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_DEAD_OBJECT",
    "type" : "int",
    "comment" : "\n     * Operation failed due to dead remote object.\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_INSERT",
    "type" : "String",
    "comment" : "\n     * Effect connection mode is insert. Specifying an audio session ID when creating the effect\n     * will insert this effect after all players in the same audio session.\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_AUXILIARY",
    "type" : "String",
    "comment" : "\n     * Effect connection mode is auxiliary.\n     * <p>Auxiliary effects must be created on session 0 (global output mix). In order for a\n     * MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to\n     * this effect and a send level must be specified.\n     * <p>Use the effect ID returned by {@link #getId()} to designate this particular effect when\n     * attaching it to the MediaPlayer or AudioTrack.\n     ",
    "links" : [ "#getId()" ]
  }, {
    "name" : "EFFECT_PRE_PROCESSING",
    "type" : "String",
    "comment" : "\n     * Effect connection mode is pre processing.\n     * The audio pre processing effects are attached to an audio input stream or device\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_POST_PROCESSING",
    "type" : "String",
    "comment" : "\n     * Effect connection mode is post processing.\n     * The audio post processing effects are attached to an audio output stream or device\n     ",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "\n     * Indicates the state of the AudioEffect instance\n     ",
    "links" : [ ]
  }, {
    "name" : "mStateLock",
    "type" : "Object",
    "comment" : "\n     * Lock to synchronize access to mState\n     ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "\n     * System wide unique effect ID\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativeAudioEffect",
    "type" : "long",
    "comment" : " accessed by native methods",
    "links" : [ ]
  }, {
    "name" : "mJniData",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescriptor",
    "type" : "Descriptor",
    "comment" : "\n     * Effect descriptor\n     ",
    "links" : [ ]
  }, {
    "name" : "mEnableStatusChangeListener",
    "type" : "OnEnableStatusChangeListener",
    "comment" : "\n     * Listener for effect engine state change notifications.\n     *\n     * @see #setEnableStatusListener(OnEnableStatusChangeListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "mControlChangeStatusListener",
    "type" : "OnControlStatusChangeListener",
    "comment" : "\n     * Listener for effect engine control ownership change notifications.\n     *\n     * @see #setControlStatusListener(OnControlStatusChangeListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "mParameterChangeListener",
    "type" : "OnParameterChangeListener",
    "comment" : "\n     * Listener for effect engine control ownership change notifications.\n     *\n     * @see #setParameterListener(OnParameterChangeListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "mListenerLock",
    "type" : "Object",
    "comment" : "\n     * Lock to protect listeners updates against event notifications\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativeEventHandler",
    "type" : "NativeEventHandler",
    "comment" : "\n     * Handler for events coming from the native code\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL",
    "type" : "String",
    "comment" : "\n     *  Intent to launch an audio effect control panel UI.\n     *  <p>The goal of this intent is to enable separate implementations of music/media player\n     *  applications and audio effect control application or services.\n     *  This will allow platform vendors to offer more advanced control options for standard effects\n     *  or control for platform specific effects.\n     *  <p>The intent carries a number of extras used by the player application to communicate\n     *  necessary pieces of information to the control panel application.\n     *  <p>The calling application must use the\n     *  {@link android.app.Activity#startActivityForResult(Intent, int)} method to launch the\n     *  control panel so that its package name is indicated and used by the control panel\n     *  application to keep track of changes for this particular application.\n     *  <p>The {@link #EXTRA_AUDIO_SESSION} extra will indicate an audio session to which the\n     *  audio effects should be applied. If no audio session is specified, either one of the\n     *  follownig will happen:\n     *  <p>- If an audio session was previously opened by the calling application with\n     *  {@link #ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION} intent, the effect changes will\n     *  be applied to that session.\n     *  <p>- If no audio session is opened, the changes will be stored in the package specific\n     *  storage area and applied whenever a new audio session is opened by this application.\n     *  <p>The {@link #EXTRA_CONTENT_TYPE} extra will help the control panel application\n     *  customize both the UI layout and the default audio effect settings if none are already\n     *  stored for the calling application.\n     ",
    "links" : [ "android.app.Activity#startActivityForResult(Intent", "#ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION", "#EXTRA_AUDIO_SESSION", "#EXTRA_CONTENT_TYPE" ]
  }, {
    "name" : "ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION",
    "type" : "String",
    "comment" : "\n     *  Intent to signal to the effect control application or service that a new audio session\n     *  is opened and requires audio effects to be applied.\n     *  <p>This is different from {@link #ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL} in that no\n     *  UI should be displayed in this case. Music player applications can broadcast this intent\n     *  before starting playback to make sure that any audio effect settings previously selected\n     *  by the user are applied.\n     *  <p>The effect control application receiving this intent will look for previously stored\n     *  settings for the calling application, create all required audio effects and apply the\n     *  effect settings to the specified audio session.\n     *  <p>The calling package name is indicated by the {@link #EXTRA_PACKAGE_NAME} extra and the\n     *  audio session ID by the {@link #EXTRA_AUDIO_SESSION} extra. Both extras are mandatory.\n     *  <p>If no stored settings are found for the calling application, default settings for the\n     *  content type indicated by {@link #EXTRA_CONTENT_TYPE} will be applied. The default settings\n     *  for a given content type are platform specific.\n     ",
    "links" : [ "#EXTRA_PACKAGE_NAME", "#ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL", "#EXTRA_AUDIO_SESSION", "#EXTRA_CONTENT_TYPE" ]
  }, {
    "name" : "ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION",
    "type" : "String",
    "comment" : "\n     *  Intent to signal to the effect control application or service that an audio session\n     *  is closed and that effects should not be applied anymore.\n     *  <p>The effect control application receiving this intent will delete all effects on\n     *  this session and store current settings in package specific storage.\n     *  <p>The calling package name is indicated by the {@link #EXTRA_PACKAGE_NAME} extra and the\n     *  audio session ID by the {@link #EXTRA_AUDIO_SESSION} extra. Both extras are mandatory.\n     *  <p>It is good practice for applications to broadcast this intent when music playback stops\n     *  and/or when exiting to free system resources consumed by audio effect engines.\n     ",
    "links" : [ "#EXTRA_PACKAGE_NAME", "#EXTRA_AUDIO_SESSION" ]
  }, {
    "name" : "EXTRA_AUDIO_SESSION",
    "type" : "String",
    "comment" : "\n     * Contains the ID of the audio session the effects should be applied to.\n     * <p>This extra is for use with {@link #ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL},\n     * {@link #ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION} and\n     * {@link #ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION} intents.\n     * <p>The extra value is of type int and is the audio session ID.\n     *  @see android.media.MediaPlayer#getAudioSessionId() for details on audio sessions.\n     ",
    "links" : [ "#ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION", "#ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL", "#ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION" ]
  }, {
    "name" : "EXTRA_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * Contains the package name of the calling application.\n     * <p>This extra is for use with {@link #ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION} and\n     * {@link #ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION} intents.\n     * <p>The extra value is a string containing the full package name.\n     ",
    "links" : [ "#ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION", "#ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION" ]
  }, {
    "name" : "EXTRA_CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n     * Indicates which type of content is played by the application.\n     * <p>This extra is for use with {@link #ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL} and\n     * {@link #ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION} intents.\n     * <p>This information is used by the effect control application to customize UI and select\n     * appropriate default effect settings. The content type is one of the following:\n     * <ul>\n     *   <li>{@link #CONTENT_TYPE_MUSIC}</li>\n     *   <li>{@link #CONTENT_TYPE_MOVIE}</li>\n     *   <li>{@link #CONTENT_TYPE_GAME}</li>\n     *   <li>{@link #CONTENT_TYPE_VOICE}</li>\n     * </ul>\n     * If omitted, the content type defaults to {@link #CONTENT_TYPE_MUSIC}.\n     ",
    "links" : [ "#ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION", "#CONTENT_TYPE_VOICE", "#ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL", "#CONTENT_TYPE_MUSIC", "#CONTENT_TYPE_MOVIE", "#CONTENT_TYPE_GAME" ]
  }, {
    "name" : "CONTENT_TYPE_MUSIC",
    "type" : "int",
    "comment" : "\n     * Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is music\n     ",
    "links" : [ "#EXTRA_CONTENT_TYPE" ]
  }, {
    "name" : "CONTENT_TYPE_MOVIE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is video or movie\n     ",
    "links" : [ "#EXTRA_CONTENT_TYPE" ]
  }, {
    "name" : "CONTENT_TYPE_GAME",
    "type" : "int",
    "comment" : "\n     * Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is game audio\n     ",
    "links" : [ "#EXTRA_CONTENT_TYPE" ]
  }, {
    "name" : "CONTENT_TYPE_VOICE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is voice audio\n     ",
    "links" : [ "#EXTRA_CONTENT_TYPE" ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isEffectSupportedForDevice(@NonNull UUID uuid, @NonNull AudioDeviceAttributes device)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if an AudioEffect identified by the supplied uuid can be attached\n     * to an audio device described by the supplied AudioDeviceAttributes.\n     * @param uuid unique identifier of a particular effect implementation.\n     * @param device the device the effect would be attached to.\n     * @return true if possible, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Releases the native AudioEffect resources. It is a good practice to\n     * release the effect engine when not in use as control can be returned to\n     * other applications or the native resources released.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Descriptor getDescriptor() throws IllegalStateException",
    "returnType" : "Descriptor",
    "comment" : "\n     * Get the effect descriptor.\n     *\n     * @see android.media.audiofx.AudioEffect.Descriptor\n     * @throws IllegalStateException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Descriptor[] queryEffects()",
    "returnType" : "Descriptor[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Descriptor[] queryPreProcessings(int audioSession)",
    "returnType" : "Descriptor[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isEffectTypeAvailable(UUID type)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the device implements the specified effect type.\n     * @param type the requested effect type.\n     * @return true if the device implements the specified effect type, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setEnabled(boolean enabled) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Enable or disable the effect.\n     * Creating an audio effect does not automatically apply this effect on the audio source. It\n     * creates the resources necessary to process this effect but the audio signal is still bypassed\n     * through the effect engine. Calling this method will make that the effect is actually applied\n     * or not to the audio content being played in the corresponding audio session.\n     *\n     * @param enabled the requested enable state\n     * @return {@link #SUCCESS} in case of success, {@link #ERROR_INVALID_OPERATION}\n     *         or {@link #ERROR_DEAD_OBJECT} in case of failure.\n     * @throws IllegalStateException\n     ",
    "links" : [ "#ERROR_DEAD_OBJECT", "#SUCCESS", "#ERROR_INVALID_OPERATION" ]
  }, {
    "name" : "public int setParameter(byte[] param, byte[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Set effect parameter. The setParameter method is provided in several\n     * forms addressing most common parameter formats. This form is the most\n     * generic one where the parameter and its value are both specified as an\n     * array of bytes. The parameter and value type and length are therefore\n     * totally free. For standard effect defined by OpenSL ES, the parameter\n     * format and values must match the definitions in the corresponding OpenSL\n     * ES interface.\n     *\n     * @param param the identifier of the parameter to set\n     * @param value the new value for the specified parameter\n     * @return {@link #SUCCESS} in case of success, {@link #ERROR_BAD_VALUE},\n     *         {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or\n     *         {@link #ERROR_DEAD_OBJECT} in case of failure\n     * @throws IllegalStateException\n     * @hide\n     ",
    "links" : [ "#ERROR_DEAD_OBJECT", "#ERROR_BAD_VALUE", "#SUCCESS", "#ERROR_INVALID_OPERATION", "#ERROR_NO_MEMORY" ]
  }, {
    "name" : "public int setParameter(int param, int value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Set effect parameter. The parameter and its value are integers.\n     *\n     * @see #setParameter(byte[], byte[])\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setParameter(int param, short value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Set effect parameter. The parameter is an integer and the value is a\n     * short integer.\n     *\n     * @see #setParameter(byte[], byte[])\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setParameter(int param, byte[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Set effect parameter. The parameter is an integer and the value is an\n     * array of bytes.\n     *\n     * @see #setParameter(byte[], byte[])\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setParameter(int[] param, int[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Set effect parameter. The parameter is an array of 1 or 2 integers and\n     * the value is also an array of 1 or 2 integers\n     *\n     * @see #setParameter(byte[], byte[])\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setParameter(int[] param, short[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Set effect parameter. The parameter is an array of 1 or 2 integers and\n     * the value is an array of 1 or 2 short integers\n     *\n     * @see #setParameter(byte[], byte[])\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setParameter(int[] param, byte[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Set effect parameter. The parameter is an array of 1 or 2 integers and\n     * the value is an array of bytes\n     *\n     * @see #setParameter(byte[], byte[])\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParameter(byte[] param, byte[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Get effect parameter. The getParameter method is provided in several\n     * forms addressing most common parameter formats. This form is the most\n     * generic one where the parameter and its value are both specified as an\n     * array of bytes. The parameter and value type and length are therefore\n     * totally free.\n     *\n     * @param param the identifier of the parameter to set\n     * @param value the new value for the specified parameter\n     * @return the number of meaningful bytes in value array in case of success or\n     *  {@link #ERROR_BAD_VALUE}, {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION}\n     *  or {@link #ERROR_DEAD_OBJECT} in case of failure.\n     * @throws IllegalStateException\n     * @hide\n     ",
    "links" : [ "#ERROR_DEAD_OBJECT", "#ERROR_BAD_VALUE", "#ERROR_INVALID_OPERATION", "#ERROR_NO_MEMORY" ]
  }, {
    "name" : "public int getParameter(int param, byte[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Get effect parameter. The parameter is an integer and the value is an\n     * array of bytes.\n     *\n     * @see #getParameter(byte[], byte[])\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParameter(int param, int[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Get effect parameter. The parameter is an integer and the value is an\n     * array of 1 or 2 integers\n     *\n     * @see #getParameter(byte[], byte[])\n     * In case of success, returns the number of meaningful integers in value array.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParameter(int param, short[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Get effect parameter. The parameter is an integer and the value is an\n     * array of 1 or 2 short integers\n     *\n     * @see #getParameter(byte[], byte[])\n     * In case of success, returns the number of meaningful short integers in value array.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParameter(int[] param, int[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Get effect parameter. The parameter is an array of 1 or 2 integers and\n     * the value is also an array of 1 or 2 integers\n     *\n     * @see #getParameter(byte[], byte[])\n     * In case of success, the returns the number of meaningful integers in value array.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParameter(int[] param, short[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Get effect parameter. The parameter is an array of 1 or 2 integers and\n     * the value is an array of 1 or 2 short integers\n     *\n     * @see #getParameter(byte[], byte[])\n     * In case of success, returns the number of meaningful short integers in value array.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParameter(int[] param, byte[] value) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Get effect parameter. The parameter is an array of 1 or 2 integers and\n     * the value is an array of bytes\n     *\n     * @see #getParameter(byte[], byte[])\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int command(int cmdCode, byte[] command, byte[] reply) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Send a command to the effect engine. This method is intended to send\n     * proprietary commands to a particular effect implementation.\n     * In case of success, returns the number of meaningful bytes in reply array.\n     * In case of failure, the returned value is negative and implementation specific.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId() throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Returns effect unique identifier. This system wide unique identifier can\n     * be used to attach this effect to a MediaPlayer or an AudioTrack when the\n     * effect is an auxiliary effect (Reverb)\n     *\n     * @return the effect identifier.\n     * @throws IllegalStateException\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getEnabled() throws IllegalStateException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns effect enabled state\n     *\n     * @return true if the effect is enabled, false otherwise.\n     * @throws IllegalStateException\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasControl() throws IllegalStateException",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this AudioEffect object is controlling the effect engine.\n     *\n     * @return true if this instance has control of effect engine, false\n     *         otherwise.\n     * @throws IllegalStateException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnableStatusListener(OnEnableStatusChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener AudioEffect notifies when the effect engine is enabled\n     * or disabled.\n     *\n     * @param listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setControlStatusListener(OnControlStatusChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener AudioEffect notifies when the effect engine control is\n     * taken or returned.\n     *\n     * @param listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParameterListener(OnParameterChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener AudioEffect notifies when a parameter is changed.\n     *\n     * @param listener\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void createNativeEventHandler()",
    "returnType" : "void",
    "comment" : " mNativeEventHandler is null",
    "links" : [ ]
  }, {
    "name" : "private static void postEventFromNative(Object effect_ref, int what, int arg1, int arg2, Object obj)",
    "returnType" : "void",
    "comment" : " --------------------",
    "links" : [ ]
  }, {
    "name" : "private static final native void native_init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_setup(Object audioeffect_this, String type, String uuid, int priority, int audioSession, int deviceType, String deviceAddress, int[] id, Object[] desc, @NonNull Parcel attributionSource, boolean probe)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_release()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_setEnabled(boolean enabled)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_getEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_hasControl()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_setParameter(int psize, byte[] param, int vsize, byte[] value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_getParameter(int psize, byte[] param, int vsize, byte[] value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_command(int cmdCode, int cmdSize, byte[] cmdData, int repSize, byte[] repData)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Object[] native_query_effects()",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Object[] native_query_pre_processing(int audioSession)",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkState(String methodName) throws IllegalStateException",
    "returnType" : "void",
    "comment" : "\n    * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "public void checkStatus(int status)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isError(int status)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int byteArrayToInt(byte[] valueBuf)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int byteArrayToInt(byte[] valueBuf, int offset)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] intToByteArray(int value)",
    "returnType" : "byte[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static short byteArrayToShort(byte[] valueBuf)",
    "returnType" : "short",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static short byteArrayToShort(byte[] valueBuf, int offset)",
    "returnType" : "short",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] shortToByteArray(short value)",
    "returnType" : "byte[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float byteArrayToFloat(byte[] valueBuf)",
    "returnType" : "float",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float byteArrayToFloat(byte[] valueBuf, int offset)",
    "returnType" : "float",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] floatToByteArray(float value)",
    "returnType" : "byte[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] concatArrays(byte[]... arrays)",
    "returnType" : "byte[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isEffectSupportedForDevice(@NonNull UUID uuid, @NonNull AudioDeviceAttributes device)", "public void release()", "protected void finalize()", "public Descriptor getDescriptor() throws IllegalStateException", "public static Descriptor[] queryEffects()", "public static Descriptor[] queryPreProcessings(int audioSession)", "public static boolean isEffectTypeAvailable(UUID type)", "public int setEnabled(boolean enabled) throws IllegalStateException", "public int setParameter(byte[] param, byte[] value) throws IllegalStateException", "public int setParameter(int param, int value) throws IllegalStateException", "public int setParameter(int param, short value) throws IllegalStateException", "public int setParameter(int param, byte[] value) throws IllegalStateException", "public int setParameter(int[] param, int[] value) throws IllegalStateException", "public int setParameter(int[] param, short[] value) throws IllegalStateException", "public int setParameter(int[] param, byte[] value) throws IllegalStateException", "public int getParameter(byte[] param, byte[] value) throws IllegalStateException", "public int getParameter(int param, byte[] value) throws IllegalStateException", "public int getParameter(int param, int[] value) throws IllegalStateException", "public int getParameter(int param, short[] value) throws IllegalStateException", "public int getParameter(int[] param, int[] value) throws IllegalStateException", "public int getParameter(int[] param, short[] value) throws IllegalStateException", "public int getParameter(int[] param, byte[] value) throws IllegalStateException", "public int command(int cmdCode, byte[] command, byte[] reply) throws IllegalStateException", "public int getId() throws IllegalStateException", "public boolean getEnabled() throws IllegalStateException", "public boolean hasControl() throws IllegalStateException", "public void setEnableStatusListener(OnEnableStatusChangeListener listener)", "public void setControlStatusListener(OnControlStatusChangeListener listener)", "public void setParameterListener(OnParameterChangeListener listener)", "private void createNativeEventHandler()", "private static void postEventFromNative(Object effect_ref, int what, int arg1, int arg2, Object obj)", "private static final native void native_init()", "private final native int native_setup(Object audioeffect_this, String type, String uuid, int priority, int audioSession, int deviceType, String deviceAddress, int[] id, Object[] desc, @NonNull Parcel attributionSource, boolean probe)", "private final native void native_finalize()", "private final native void native_release()", "private final native int native_setEnabled(boolean enabled)", "private final native boolean native_getEnabled()", "private final native boolean native_hasControl()", "private final native int native_setParameter(int psize, byte[] param, int vsize, byte[] value)", "private final native int native_getParameter(int psize, byte[] param, int vsize, byte[] value)", "private final native int native_command(int cmdCode, int cmdSize, byte[] cmdData, int repSize, byte[] repData)", "private static native Object[] native_query_effects()", "private static native Object[] native_query_pre_processing(int audioSession)", "public void checkState(String methodName) throws IllegalStateException", "public void checkStatus(int status)", "public static boolean isError(int status)", "public static int byteArrayToInt(byte[] valueBuf)", "public static int byteArrayToInt(byte[] valueBuf, int offset)", "public static byte[] intToByteArray(int value)", "public static short byteArrayToShort(byte[] valueBuf)", "public static short byteArrayToShort(byte[] valueBuf, int offset)", "public static byte[] shortToByteArray(short value)", "public static float byteArrayToFloat(byte[] valueBuf)", "public static float byteArrayToFloat(byte[] valueBuf, int offset)", "public static byte[] floatToByteArray(float value)", "public static byte[] concatArrays(byte[]... arrays)" ],
  "variableNames" : [ "TAG", "EFFECT_TYPE_ENV_REVERB", "EFFECT_TYPE_PRESET_REVERB", "EFFECT_TYPE_EQUALIZER", "EFFECT_TYPE_BASS_BOOST", "EFFECT_TYPE_VIRTUALIZER", "EFFECT_TYPE_AGC", "EFFECT_TYPE_AEC", "EFFECT_TYPE_NS", "EFFECT_TYPE_LOUDNESS_ENHANCER", "EFFECT_TYPE_DYNAMICS_PROCESSING", "EFFECT_TYPE_HAPTIC_GENERATOR", "EFFECT_TYPE_NULL", "STATE_UNINITIALIZED", "STATE_INITIALIZED", "NATIVE_EVENT_CONTROL_STATUS", "NATIVE_EVENT_ENABLED_STATUS", "NATIVE_EVENT_PARAMETER_CHANGED", "SUCCESS", "ERROR", "ALREADY_EXISTS", "ERROR_NO_INIT", "ERROR_BAD_VALUE", "ERROR_INVALID_OPERATION", "ERROR_NO_MEMORY", "ERROR_DEAD_OBJECT", "EFFECT_INSERT", "EFFECT_AUXILIARY", "EFFECT_PRE_PROCESSING", "EFFECT_POST_PROCESSING", "mState", "mStateLock", "mId", "mNativeAudioEffect", "mJniData", "mDescriptor", "mEnableStatusChangeListener", "mControlChangeStatusListener", "mParameterChangeListener", "mListenerLock", "mNativeEventHandler", "ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL", "ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION", "ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION", "EXTRA_AUDIO_SESSION", "EXTRA_PACKAGE_NAME", "EXTRA_CONTENT_TYPE", "CONTENT_TYPE_MUSIC", "CONTENT_TYPE_MOVIE", "CONTENT_TYPE_GAME", "CONTENT_TYPE_VOICE" ]
}