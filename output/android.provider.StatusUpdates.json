{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/ContactsContract.java",
  "packageName" : "android.provider",
  "className" : "StatusUpdates",
  "comment" : "\n     * <p>\n     * A status update is linked to a {@link ContactsContract.Data} row and captures\n     * the user's latest status update via the corresponding source, e.g.\n     * \"Having lunch\" via \"Google Talk\".\n     * </p>\n     * <p>\n     * There are two ways a status update can be inserted: by explicitly linking\n     * it to a Data row using {@link #DATA_ID} or indirectly linking it to a data row\n     * using a combination of {@link #PROTOCOL} (or {@link #CUSTOM_PROTOCOL}) and\n     * {@link #IM_HANDLE}.  There is no difference between insert and update, you can use\n     * either.\n     * </p>\n     * <p>\n     * Inserting or updating a status update for the user's profile requires either using\n     * the {@link #DATA_ID} to identify the data row to attach the update to, or\n     * {@link StatusUpdates#PROFILE_CONTENT_URI} to ensure that the change is scoped to the\n     * profile.\n     * </p>\n     * <p>\n     * You cannot use {@link ContentResolver#update} to change a status, but\n     * {@link ContentResolver#insert} will replace the latests status if it already\n     * exists.\n     * </p>\n     * <p>\n     * Use {@link ContentResolver#bulkInsert(Uri, ContentValues[])} to insert/update statuses\n     * for multiple contacts at once.\n     * </p>\n     *\n     * <h3>Columns</h3>\n     * <table class=\"jd-sumtable\">\n     * <tr>\n     * <th colspan='4'>StatusUpdates</th>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #DATA_ID}</td>\n     * <td>read/write</td>\n     * <td>Reference to the {@link Data#_ID} entry that owns this presence. If this\n     * field is <i>not</i> specified, the provider will attempt to find a data row\n     * that matches the {@link #PROTOCOL} (or {@link #CUSTOM_PROTOCOL}) and\n     * {@link #IM_HANDLE} columns.\n     * </td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #PROTOCOL}</td>\n     * <td>read/write</td>\n     * <td>See {@link CommonDataKinds.Im} for a list of defined protocol constants.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #CUSTOM_PROTOCOL}</td>\n     * <td>read/write</td>\n     * <td>Name of the custom protocol.  Should be supplied along with the {@link #PROTOCOL} value\n     * {@link ContactsContract.CommonDataKinds.Im#PROTOCOL_CUSTOM}.  Should be null or\n     * omitted if {@link #PROTOCOL} value is not\n     * {@link ContactsContract.CommonDataKinds.Im#PROTOCOL_CUSTOM}.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #IM_HANDLE}</td>\n     * <td>read/write</td>\n     * <td> The IM handle the presence item is for. The handle is scoped to\n     * {@link #PROTOCOL}.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #IM_ACCOUNT}</td>\n     * <td>read/write</td>\n     * <td>The IM account for the local user that the presence data came from.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #PRESENCE}</td>\n     * <td>read/write</td>\n     * <td>Contact IM presence status. The allowed values are:\n     * <p>\n     * <ul>\n     * <li>{@link #OFFLINE}</li>\n     * <li>{@link #INVISIBLE}</li>\n     * <li>{@link #AWAY}</li>\n     * <li>{@link #IDLE}</li>\n     * <li>{@link #DO_NOT_DISTURB}</li>\n     * <li>{@link #AVAILABLE}</li>\n     * </ul>\n     * </p>\n     * <p>\n     * Since presence status is inherently volatile, the content provider\n     * may choose not to store this field in long-term storage.\n     * </p>\n     * </td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #CHAT_CAPABILITY}</td>\n     * <td>read/write</td>\n     * <td>Contact IM chat compatibility value. The allowed values combinations of the following\n     * flags. If None of these flags is set, the device can only do text messaging.\n     * <p>\n     * <ul>\n     * <li>{@link #CAPABILITY_HAS_VIDEO}</li>\n     * <li>{@link #CAPABILITY_HAS_VOICE}</li>\n     * <li>{@link #CAPABILITY_HAS_CAMERA}</li>\n     * </ul>\n     * </p>\n     * <p>\n     * Since chat compatibility is inherently volatile as the contact's availability moves from\n     * one device to another, the content provider may choose not to store this field in long-term\n     * storage.\n     * </p>\n     * </td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #STATUS}</td>\n     * <td>read/write</td>\n     * <td>Contact's latest status update, e.g. \"having toast for breakfast\"</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #STATUS_TIMESTAMP}</td>\n     * <td>read/write</td>\n     * <td>The absolute time in milliseconds when the status was\n     * entered by the user. If this value is not provided, the provider will follow\n     * this logic: if there was no prior status update, the value will be left as null.\n     * If there was a prior status update, the provider will default this field\n     * to the current time.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #STATUS_RES_PACKAGE}</td>\n     * <td>read/write</td>\n     * <td> The package containing resources for this status: label and icon.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #STATUS_LABEL}</td>\n     * <td>read/write</td>\n     * <td>The resource ID of the label describing the source of contact status,\n     * e.g. \"Google Talk\". This resource is scoped by the\n     * {@link #STATUS_RES_PACKAGE}.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #STATUS_ICON}</td>\n     * <td>read/write</td>\n     * <td>The resource ID of the icon for the source of contact status. This\n     * resource is scoped by the {@link #STATUS_RES_PACKAGE}.</td>\n     * </tr>\n     * </table>\n     ",
  "variables" : [ {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI for this table\n         ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI for this table, specific to the user's profile.\n         ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of {@link #CONTENT_URI} providing a directory of\n         * status update details.\n         ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "CONTENT_ITEM_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of a {@link #CONTENT_URI} subdirectory of a single\n         * status update detail.\n         ",
    "links" : [ "#CONTENT_URI" ]
  } ],
  "methods" : [ {
    "name" : "public static final int getPresenceIconResourceId(int status)",
    "returnType" : "int",
    "comment" : "\n         * Gets the resource ID for the proper presence icon.\n         *\n         * @param status the status to get the icon for\n         * @return the resource ID for the proper presence icon\n         ",
    "links" : [ ]
  }, {
    "name" : "public static final int getPresencePrecedence(int status)",
    "returnType" : "int",
    "comment" : "\n         * Returns the precedence of the status code the higher number being the higher precedence.\n         *\n         * @param status The status code.\n         * @return An integer representing the precedence, 0 being the lowest.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "CONTENT_URI", "PROFILE_CONTENT_URI", "CONTENT_TYPE", "CONTENT_ITEM_TYPE" ],
  "methodNames" : [ "public static final int getPresenceIconResourceId(int status)", "public static final int getPresencePrecedence(int status)" ]
}