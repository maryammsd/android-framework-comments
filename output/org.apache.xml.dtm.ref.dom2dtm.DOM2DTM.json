{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/dom2dtm/DOM2DTM.java",
  "packageName" : "org.apache.xml.dtm.ref.dom2dtm",
  "className" : "DOM2DTM",
  "comment" : " The <code>DOM2DTM</code> class serves up a DOM's contents via the\n * DTM API.\n *\n * Note that it doesn't necessarily represent a full Document\n * tree. You can wrap a DOM2DTM around a specific node and its subtree\n * and the right things should happen. (I don't _think_ we currently\n * support DocumentFrgment nodes as roots, though that might be worth\n * considering.)\n *\n * Note too that we do not currently attempt to track document\n * mutation. If you alter the DOM after wrapping DOM2DTM around it,\n * all bets are off.\n * ",
  "links" : [ ],
  "variables" : [ {
    "name" : "JJK_DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JJK_NEWCODE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_DECL_NS",
    "type" : "String",
    "comment" : " Manefest constant\n   ",
    "links" : [ ]
  }, {
    "name" : "m_pos",
    "type" : "Node",
    "comment" : " The current position in the DOM tree. Last node examined for\n   * possible copying to DTM. ",
    "links" : [ ]
  }, {
    "name" : "m_last_parent",
    "type" : "int",
    "comment" : " The current position in the DTM tree. Who children get appended to. ",
    "links" : [ ]
  }, {
    "name" : "m_last_kid",
    "type" : "int",
    "comment" : " The current position in the DTM tree. Who children reference as their \n   * previous sib. ",
    "links" : [ ]
  }, {
    "name" : "m_root",
    "type" : "Node",
    "comment" : " The top of the subtree.\n   * %REVIEW%: 'may not be the same as m_context if \"//foo\" pattern.'\n   * ",
    "links" : [ ]
  }, {
    "name" : "m_processedFirstElement",
    "type" : "boolean",
    "comment" : " True iff the first element has been processed. This is used to control\n      synthesis of the implied xml: namespace declaration node. ",
    "links" : [ ]
  }, {
    "name" : "m_nodesAreProcessed",
    "type" : "boolean",
    "comment" : " true if ALL the nodes in the m_root subtree have been processed;\n   * false if our incremental build has not yet finished scanning the\n   * DOM tree.  ",
    "links" : [ ]
  }, {
    "name" : "m_nodes",
    "type" : "Vector",
    "comment" : " The node objects.  The instance part of the handle indexes\n   * directly into this vector.  Each DTM node may actually be\n   * composed of several DOM nodes (for example, if logically-adjacent\n   * Text/CDATASection nodes in the DOM have been coalesced into a\n   * single DTM Text node); this table points only to the first in\n   * that sequence. ",
    "links" : [ ]
  }, {
    "name" : "m_walker",
    "type" : "TreeWalker",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected int addNode(Node node, int parentIndex, int previousSibling, int forceNodeType)",
    "returnType" : "int",
    "comment" : "\n   * Construct the node map from the node.\n   *\n   * @param node The node that is to be added to the DTM.\n   * @param parentIndex The current parent index.\n   * @param previousSibling The previous sibling index.\n   * @param forceNodeType If not DTM.NULL, overrides the DOM node type.\n   *\tUsed to force nodes to Text rather than CDATASection when their\n   *\tcoalesced value includes ordinary Text nodes (current DTM behavior).\n   *\n   * @return The index identity of the node that was added.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getNumberOfNodes()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of nodes that have been added.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean nextNode()",
    "returnType" : "boolean",
    "comment" : "\n   * This method iterates to the next node that will be added to the table.\n   * Each call to this method adds a new node to the table, unless the end\n   * is reached, in which case it returns null.\n   *\n   * @return The true if a next node is found or false if \n   *         there are no more nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getNode(int nodeHandle)",
    "returnType" : "Node",
    "comment" : "\n   * Return an DOM node for the given node.\n   *\n   * @param nodeHandle The node ID.\n   *\n   * @return A node representation of the DTM node.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected Node lookupNode(int nodeIdentity)",
    "returnType" : "Node",
    "comment" : "\n   * Get a Node from an identity index.\n   *\n   * NEEDSDOC @param nodeIdentity\n   *\n   * NEEDSDOC ($objectName$) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getNextNodeIdentity(int identity)",
    "returnType" : "int",
    "comment" : "\n   * Get the next node identity value in the list, and call the iterator\n   * if it hasn't been added yet.\n   *\n   * @param identity The node identity (index).\n   * @return identity+1, or DTM.NULL.\n   ",
    "links" : [ ]
  }, {
    "name" : "private int getHandleFromNode(Node node)",
    "returnType" : "int",
    "comment" : "\n   * Get the handle from a Node.\n   * <p>%OPT% This will be pretty slow.</p>\n   *\n   * <p>%OPT% An XPath-like search (walk up DOM to root, tracking path;\n   * walk down DTM reconstructing path) might be considerably faster\n   * on later nodes in large documents. That might also imply improving\n   * this call to handle nodes which would be in this DTM but\n   * have not yet been built, which might or might not be a Good Thing.</p>\n   * \n   * %REVIEW% This relies on being able to test node-identity via\n   * object-identity. DTM2DOM proxying is a great example of a case where\n   * that doesn't work. DOM Level 3 will provide the isSameNode() method\n   * to fix that, but until then this is going to be flaky.\n   *\n   * @param node A node, which may be null.\n   *\n   * @return The node handle or <code>DTM.NULL</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getHandleOfNode(Node node)",
    "returnType" : "int",
    "comment" : " Get the handle from a Node. This is a more robust version of\n   * getHandleFromNode, intended to be usable by the public.\n   *\n   * <p>%OPT% This will be pretty slow.</p>\n   * \n   * %REVIEW% This relies on being able to test node-identity via\n   * object-identity. DTM2DOM proxying is a great example of a case where\n   * that doesn't work. DOM Level 3 will provide the isSameNode() method\n   * to fix that, but until then this is going to be flaky.\n   *\n   * @param node A node, which may be null.\n   *\n   * @return The node handle or <code>DTM.NULL</code>.  ",
    "links" : [ ]
  }, {
    "name" : "public int getAttributeNode(int nodeHandle, String namespaceURI, String name)",
    "returnType" : "int",
    "comment" : "\n   * Retrieves an attribute node by by qualified name and namespace URI.\n   *\n   * @param nodeHandle int Handle of the node upon which to look up this attribute..\n   * @param namespaceURI The namespace URI of the attribute to\n   *   retrieve, or null.\n   * @param name The local name of the attribute to\n   *   retrieve.\n   * @return The attribute node handle with the specified name (\n   *   <code>nodeName</code>) or <code>DTM.NULL</code> if there is no such\n   *   attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString getStringValue(int nodeHandle)",
    "returnType" : "XMLString",
    "comment" : "\n   * Get the string-value of a node as a String object\n   * (see http://www.w3.org/TR/xpath#data-model\n   * for the definition of a node's string-value).\n   *\n   * @param nodeHandle The node ID.\n   *\n   * @return A string object that represents the string-value of the given node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWhitespace(int nodeHandle)",
    "returnType" : "boolean",
    "comment" : "\n   * Determine if the string-value of a node is whitespace\n   *\n   * @param nodeHandle The node Handle.\n   *\n   * @return Return true if the given node is whitespace.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected static void getNodeData(Node node, FastStringBuffer buf)",
    "returnType" : "void",
    "comment" : "\n   * Retrieve the text content of a DOM subtree, appending it into a\n   * user-supplied FastStringBuffer object. Note that attributes are\n   * not considered part of the content of an element.\n   * <p>\n   * There are open questions regarding whitespace stripping. \n   * Currently we make no special effort in that regard, since the standard\n   * DOM doesn't yet provide DTD-based information to distinguish\n   * whitespace-in-element-context from genuine #PCDATA. Note that we\n   * should probably also consider xml:space if/when we address this.\n   * DOM Level 3 may solve the problem for us.\n   * <p>\n   * %REVIEW% Actually, since this method operates on the DOM side of the\n   * fence rather than the DTM side, it SHOULDN'T do\n   * any special handling. The DOM does what the DOM does; if you want\n   * DTM-level abstractions, use DTM-level methods.\n   *\n   * @param node Node whose subtree is to be walked, gathering the\n   * contents of all Text or CDATASection nodes.\n   * @param buf FastStringBuffer into which the contents of the text\n   * nodes are to be concatenated.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName(int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * Given a node handle, return its DOM-style node name. This will\n   * include names such as #text or #document.\n   *\n   * @param nodeHandle the id of the node.\n   * @return String Name of this node, which may be an empty string.\n   * %REVIEW% Document when empty string is possible...\n   * %REVIEW-COMMENT% It should never be empty, should it?\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeNameX(int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * Given a node handle, return the XPath node name.  This should be\n   * the name as described by the XPath data model, NOT the DOM-style\n   * name.\n   *\n   * @param nodeHandle the id of the node.\n   * @return String Name of this node, which may be an empty string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName(int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * Given a node handle, return its XPath-style localname.\n   * (As defined in Namespaces, this is the portion of the name after any\n   * colon character).\n   *\n   * @param nodeHandle the id of the node.\n   * @return String Local name of this node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix(int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * Given a namespace handle, return the prefix that the namespace decl is\n   * mapping.\n   * Given a node handle, return the prefix used to map to the namespace.\n   *\n   * <p> %REVIEW% Are you sure you want \"\" for no prefix?  </p>\n   * <p> %REVIEW-COMMENT% I think so... not totally sure. -sb  </p>\n   *\n   * @param nodeHandle the id of the node.\n   * @return String prefix of this node's name, or \"\" if no explicit\n   * namespace prefix was given.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURI(int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * Given a node handle, return its DOM-style namespace URI\n   * (As defined in Namespaces, this is the declared URI which this node's\n   * prefix -- or default in lieu thereof -- was mapped to.)\n   *\n   * <p>%REVIEW% Null or \"\"? -sb</p>\n   *\n   * @param nodeHandle the id of the node.\n   * @return String URI value of this node's namespace, or null if no\n   * namespace was resolved.\n   ",
    "links" : [ ]
  }, {
    "name" : "private Node logicalNextDOMTextNode(Node n)",
    "returnType" : "Node",
    "comment" : " Utility function: Given a DOM Text node, determine whether it is\n   * logically followed by another Text or CDATASection node. This may\n   * involve traversing into Entity References.\n   * \n   * %REVIEW% DOM Level 3 is expected to add functionality which may \n   * allow us to retire this.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeValue(int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * Given a node handle, return its node value. This is mostly\n   * as defined by the DOM, but may ignore some conveniences.\n   * <p>\n   *\n   * @param nodeHandle The node id.\n   * @return String Value of this node, or null if not\n   * meaningful for this node type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getDocumentTypeDeclarationSystemIdentifier()",
    "returnType" : "String",
    "comment" : "\n   *   A document type declaration information item has the following properties:\n   *\n   *     1. [system identifier] The system identifier of the external subset, if\n   *        it exists. Otherwise this property has no value.\n   *\n   * @return the system identifier String object, or null if there is none.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getDocumentTypeDeclarationPublicIdentifier()",
    "returnType" : "String",
    "comment" : "\n   * Return the public identifier of the external subset,\n   * normalized as described in 4.2.2 External Entities [XML]. If there is\n   * no external subset or if it has no public identifier, this property\n   * has no value.\n   *\n   * @return the public identifier String object, or null if there is none.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getElementById(String elementId)",
    "returnType" : "int",
    "comment" : "\n   * Returns the <code>Element</code> whose <code>ID</code> is given by\n   * <code>elementId</code>. If no such element exists, returns\n   * <code>DTM.NULL</code>. Behavior is not defined if more than one element\n   * has this <code>ID</code>. Attributes (including those\n   * with the name \"ID\") are not of type ID unless so defined by DTD/Schema\n   * information available to the DTM implementation.\n   * Implementations that do not know whether attributes are of type ID or\n   * not are expected to return <code>DTM.NULL</code>.\n   *\n   * <p>%REVIEW% Presumably IDs are still scoped to a single document,\n   * and this operation searches only within a single document, right?\n   * Wouldn't want collisions between DTMs in the same process.</p>\n   *\n   * @param elementId The unique <code>id</code> value for an element.\n   * @return The handle of the matching element.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getUnparsedEntityURI(String name)",
    "returnType" : "String",
    "comment" : "\n   * The getUnparsedEntityURI function returns the URI of the unparsed\n   * entity with the specified name in the same document as the context\n   * node (see [3.3 Unparsed Entities]). It returns the empty string if\n   * there is no such entity.\n   * <p>\n   * XML processors may choose to use the System Identifier (if one\n   * is provided) to resolve the entity, rather than the URI in the\n   * Public Identifier. The details are dependent on the processor, and\n   * we would have to support some form of plug-in resolver to handle\n   * this properly. Currently, we simply return the System Identifier if\n   * present, and hope that it a usable URI or that our caller can\n   * map it to one.\n   * TODO: Resolve Public Identifiers... or consider changing function name.\n   * <p>\n   * If we find a relative URI\n   * reference, XML expects it to be resolved in terms of the base URI\n   * of the document. The DOM doesn't do that for us, and it isn't\n   * entirely clear whether that should be done here; currently that's\n   * pushed up to a higher level of our application. (Note that DOM Level\n   * 1 didn't store the document's base URI.)\n   * TODO: Consider resolving Relative URIs.\n   * <p>\n   * (The DOM's statement that \"An XML processor may choose to\n   * completely expand entities before the structure model is passed\n   * to the DOM\" refers only to parsed entities, not unparsed, and hence\n   * doesn't affect this function.)\n   *\n   * @param name A string containing the Entity Name of the unparsed\n   * entity.\n   *\n   * @return String containing the URI of the Unparsed Entity, or an\n   * empty string if no such entity exists.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAttributeSpecified(int attributeHandle)",
    "returnType" : "boolean",
    "comment" : "\n   *     5. [specified] A flag indicating whether this attribute was actually\n   *        specified in the start-tag of its element, or was defaulted from the\n   *        DTD.\n   *\n   * @param attributeHandle the attribute handle\n   * @return <code>true</code> if the attribute was specified;\n   *         <code>false</code> if it was defaulted.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setIncrementalSAXSource(IncrementalSAXSource source)",
    "returnType" : "void",
    "comment" : " Bind an IncrementalSAXSource to this DTM. NOT RELEVANT for DOM2DTM, since\n   * we're wrapped around an existing DOM.\n   *\n   * @param source The IncrementalSAXSource that we want to recieve events from\n   * on demand.\n   ",
    "links" : [ ]
  }, {
    "name" : "public org.xml.sax.ContentHandler getContentHandler()",
    "returnType" : "org.xml.sax.ContentHandler",
    "comment" : " getContentHandler returns \"our SAX builder\" -- the thing that\n   * someone else should send SAX events to in order to extend this\n   * DTM model.\n   *\n   * @return null if this model doesn't respond to SAX events,\n   * \"this\" if the DTM object has a built-in SAX ContentHandler,\n   * the IncrmentalSAXSource if we're bound to one and should receive\n   * the SAX stream via it for incremental build purposes...\n   * ",
    "links" : [ ]
  }, {
    "name" : "public org.xml.sax.ext.LexicalHandler getLexicalHandler()",
    "returnType" : "org.xml.sax.ext.LexicalHandler",
    "comment" : "\n   * Return this DTM's lexical handler.\n   *\n   * %REVIEW% Should this return null if constrution already done/begun?\n   *\n   * @return null if this model doesn't respond to lexical SAX events,\n   * \"this\" if the DTM object has a built-in SAX ContentHandler,\n   * the IncrementalSAXSource if we're bound to one and should receive\n   * the SAX stream via it for incremental build purposes...\n   ",
    "links" : [ ]
  }, {
    "name" : "public org.xml.sax.EntityResolver getEntityResolver()",
    "returnType" : "org.xml.sax.EntityResolver",
    "comment" : "\n   * Return this DTM's EntityResolver.\n   *\n   * @return null if this model doesn't respond to SAX entity ref events.\n   ",
    "links" : [ ]
  }, {
    "name" : "public org.xml.sax.DTDHandler getDTDHandler()",
    "returnType" : "org.xml.sax.DTDHandler",
    "comment" : "\n   * Return this DTM's DTDHandler.\n   *\n   * @return null if this model doesn't respond to SAX dtd events.\n   ",
    "links" : [ ]
  }, {
    "name" : "public org.xml.sax.ErrorHandler getErrorHandler()",
    "returnType" : "org.xml.sax.ErrorHandler",
    "comment" : "\n   * Return this DTM's ErrorHandler.\n   *\n   * @return null if this model doesn't respond to SAX error events.\n   ",
    "links" : [ ]
  }, {
    "name" : "public org.xml.sax.ext.DeclHandler getDeclHandler()",
    "returnType" : "org.xml.sax.ext.DeclHandler",
    "comment" : "\n   * Return this DTM's DeclHandler.\n   *\n   * @return null if this model doesn't respond to SAX Decl events.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean needsTwoThreads()",
    "returnType" : "boolean",
    "comment" : " @return true iff we're building this model incrementally (eg\n   * we're partnered with a IncrementalSAXSource) and thus require that the\n   * transformation and the parse run simultaneously. Guidance to the\n   * DTMManager.\n   * ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSpace(char ch)",
    "returnType" : "boolean",
    "comment" : "\n   * Returns whether the specified <var>ch</var> conforms to the XML 1.0 definition\n   * of whitespace.  Refer to <A href=\"http://www.w3.org/TR/1998/REC-xml-19980210#NT-S\">\n   * the definition of <CODE>S</CODE></A> for details.\n   * @param   ch      Character to check as XML whitespace.\n   * @return          =true if <var>ch</var> is XML whitespace; otherwise =false.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchCharactersEvents(int nodeHandle, org.xml.sax.ContentHandler ch, boolean normalize) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Directly call the\n   * characters method on the passed ContentHandler for the\n   * string-value of the given node (see http://www.w3.org/TR/xpath#data-model\n   * for the definition of a node's string-value). Multiple calls to the\n   * ContentHandler's characters methods may well occur for a single call to\n   * this method.\n   *\n   * @param nodeHandle The node ID.\n   * @param ch A non-null reference to a ContentHandler.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected static void dispatchNodeData(Node node, org.xml.sax.ContentHandler ch, int depth) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Retrieve the text content of a DOM subtree, appending it into a\n   * user-supplied FastStringBuffer object. Note that attributes are\n   * not considered part of the content of an element.\n   * <p>\n   * There are open questions regarding whitespace stripping. \n   * Currently we make no special effort in that regard, since the standard\n   * DOM doesn't yet provide DTD-based information to distinguish\n   * whitespace-in-element-context from genuine #PCDATA. Note that we\n   * should probably also consider xml:space if/when we address this.\n   * DOM Level 3 may solve the problem for us.\n   * <p>\n   * %REVIEW% Note that as a DOM-level operation, it can be argued that this\n   * routine _shouldn't_ perform any processing beyond what the DOM already\n   * does, and that whitespace stripping and so on belong at the DTM level.\n   * If you want a stripped DOM view, wrap DTM2DOM around DOM2DTM.\n   *\n   * @param node Node whose subtree is to be walked, gathering the\n   * contents of all Text or CDATASection nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchToEvents(int nodeHandle, org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Directly create SAX parser events from a subtree.\n   *\n   * @param nodeHandle The node ID.\n   * @param ch A non-null reference to a ContentHandler.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setProperty(String property, Object value)",
    "returnType" : "void",
    "comment" : "\n   * For the moment all the run time properties are ignored by this\n   * class.\n   *\n   * @param property a <code>String</code> value\n   * @param value an <code>Object</code> value\n   ",
    "links" : [ ]
  }, {
    "name" : "public SourceLocator getSourceLocatorFor(int node)",
    "returnType" : "SourceLocator",
    "comment" : "\n   * No source information is available for DOM2DTM, so return\n   * <code>null</code> here.\n   *\n   * @param node an <code>int</code> value\n   * @return null\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected int addNode(Node node, int parentIndex, int previousSibling, int forceNodeType)", "public int getNumberOfNodes()", "protected boolean nextNode()", "public Node getNode(int nodeHandle)", "protected Node lookupNode(int nodeIdentity)", "protected int getNextNodeIdentity(int identity)", "private int getHandleFromNode(Node node)", "public int getHandleOfNode(Node node)", "public int getAttributeNode(int nodeHandle, String namespaceURI, String name)", "public XMLString getStringValue(int nodeHandle)", "public boolean isWhitespace(int nodeHandle)", "protected static void getNodeData(Node node, FastStringBuffer buf)", "public String getNodeName(int nodeHandle)", "public String getNodeNameX(int nodeHandle)", "public String getLocalName(int nodeHandle)", "public String getPrefix(int nodeHandle)", "public String getNamespaceURI(int nodeHandle)", "private Node logicalNextDOMTextNode(Node n)", "public String getNodeValue(int nodeHandle)", "public String getDocumentTypeDeclarationSystemIdentifier()", "public String getDocumentTypeDeclarationPublicIdentifier()", "public int getElementById(String elementId)", "public String getUnparsedEntityURI(String name)", "public boolean isAttributeSpecified(int attributeHandle)", "public void setIncrementalSAXSource(IncrementalSAXSource source)", "public org.xml.sax.ContentHandler getContentHandler()", "public org.xml.sax.ext.LexicalHandler getLexicalHandler()", "public org.xml.sax.EntityResolver getEntityResolver()", "public org.xml.sax.DTDHandler getDTDHandler()", "public org.xml.sax.ErrorHandler getErrorHandler()", "public org.xml.sax.ext.DeclHandler getDeclHandler()", "public boolean needsTwoThreads()", "private static boolean isSpace(char ch)", "public void dispatchCharactersEvents(int nodeHandle, org.xml.sax.ContentHandler ch, boolean normalize) throws org.xml.sax.SAXException", "protected static void dispatchNodeData(Node node, org.xml.sax.ContentHandler ch, int depth) throws org.xml.sax.SAXException", "public void dispatchToEvents(int nodeHandle, org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException", "public void setProperty(String property, Object value)", "public SourceLocator getSourceLocatorFor(int node)" ],
  "variableNames" : [ "JJK_DEBUG", "JJK_NEWCODE", "NAMESPACE_DECL_NS", "m_pos", "m_last_parent", "m_last_kid", "m_root", "m_processedFirstElement", "m_nodesAreProcessed", "m_nodes", "m_walker" ]
}