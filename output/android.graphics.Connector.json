{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/ColorSpace.java",
  "packageName" : "android.graphics",
  "className" : "Connector",
  "comment" : "\n     * {@usesMathJax}\n     *\n     * <p>A connector transforms colors from a source color space to a destination\n     * color space.</p>\n     *\n     * <p>A source color space is connected to a destination color space using the\n     * color transform \\(C\\) computed from their respective transforms noted\n     * \\(T_{src}\\) and \\(T_{dst}\\) in the following equation:</p>\n     *\n     * $$C = T^{-1}_{dst} . T_{src}$$\n     *\n     * <p>The transform \\(C\\) shown above is only valid when the source and\n     * destination color spaces have the same profile connection space (PCS).\n     * We know that instances of {@link ColorSpace} always use CIE XYZ as their\n     * PCS but their white points might differ. When they do, we must perform\n     * a chromatic adaptation of the color spaces' transforms. To do so, we\n     * use the von Kries method described in the documentation of {@link Adaptation},\n     * using the CIE standard illuminant {@link ColorSpace#ILLUMINANT_D50 D50}\n     * as the target white point.</p>\n     *\n     * <p>Example of conversion from {@link Named#SRGB sRGB} to\n     * {@link Named#DCI_P3 DCI-P3}:</p>\n     *\n     * <pre class=\"prettyprint\">\n     * ColorSpace.Connector connector = ColorSpace.connect(\n     *         ColorSpace.get(ColorSpace.Named.SRGB),\n     *         ColorSpace.get(ColorSpace.Named.DCI_P3));\n     * float[] p3 = connector.transform(1.0f, 0.0f, 0.0f);\n     * // p3 contains { 0.9473, 0.2740, 0.2076 }\n     * </pre>\n     *\n     * @see Adaptation\n     * @see ColorSpace#adapt(ColorSpace, float[], Adaptation)\n     * @see ColorSpace#adapt(ColorSpace, float[])\n     * @see ColorSpace#connect(ColorSpace, ColorSpace, RenderIntent)\n     * @see ColorSpace#connect(ColorSpace, ColorSpace)\n     * @see ColorSpace#connect(ColorSpace, RenderIntent)\n     * @see ColorSpace#connect(ColorSpace)\n     ",
  "variables" : [ {
    "name" : "mSource",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestination",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransformSource",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransformDestination",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntent",
    "type" : "RenderIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransform",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static float[] computeTransform(@NonNull ColorSpace source, @NonNull ColorSpace destination, @NonNull RenderIntent intent)",
    "returnType" : "float[]",
    "comment" : "\n         * Computes an extra transform to apply in XYZ space depending on the\n         * selected rendering intent.\n         ",
    "links" : [ ]
  }, {
    "name" : "public ColorSpace getSource()",
    "returnType" : "ColorSpace",
    "comment" : "\n         * Returns the source color space this connector will convert from.\n         *\n         * @return A non-null instance of {@link ColorSpace}\n         *\n         * @see #getDestination()\n         ",
    "links" : [ "android.graphics.ColorSpace" ]
  }, {
    "name" : "public ColorSpace getDestination()",
    "returnType" : "ColorSpace",
    "comment" : "\n         * Returns the destination color space this connector will convert to.\n         *\n         * @return A non-null instance of {@link ColorSpace}\n         *\n         * @see #getSource()\n         ",
    "links" : [ "android.graphics.ColorSpace" ]
  }, {
    "name" : "public RenderIntent getRenderIntent()",
    "returnType" : "RenderIntent",
    "comment" : "\n         * Returns the render intent this connector will use when mapping the\n         * source color space to the destination color space.\n         *\n         * @return A non-null {@link RenderIntent}\n         *\n         * @see RenderIntent\n         ",
    "links" : [ "RenderIntent" ]
  }, {
    "name" : "public float[] transform(float r, float g, float b)",
    "returnType" : "float[]",
    "comment" : "\n         * <p>Transforms the specified color from the source color space\n         * to a color in the destination color space. This convenience\n         * method assumes a source color model with 3 components\n         * (typically RGB). To transform from color models with more than\n         * 3 components, such as {@link Model#CMYK CMYK}, use\n         * {@link #transform(float[])} instead.</p>\n         *\n         * @param r The red component of the color to transform\n         * @param g The green component of the color to transform\n         * @param b The blue component of the color to transform\n         * @return A new array of 3 floats containing the specified color\n         *         transformed from the source space to the destination space\n         *\n         * @see #transform(float[])\n         ",
    "links" : [ "#CMYK", "#transform(float" ]
  }, {
    "name" : "public float[] transform(@NonNull @Size(min = 3) float[] v)",
    "returnType" : "float[]",
    "comment" : "\n         * <p>Transforms the specified color from the source color space\n         * to a color in the destination color space.</p>\n         *\n         * @param v A non-null array of 3 floats containing the value to transform\n         *            and that will hold the result of the transform\n         * @return The v array passed as a parameter, containing the specified color\n         *         transformed from the source space to the destination space\n         *\n         * @see #transform(float, float, float)\n         ",
    "links" : [ ]
  }, {
    "name" : " static Connector identity(ColorSpace source)",
    "returnType" : "Connector",
    "comment" : "\n         * Returns the identity connector for a given color space.\n         *\n         * @param source The source and destination color space\n         * @return A non-null connector that does not perform any transform\n         *\n         * @see ColorSpace#connect(ColorSpace, ColorSpace)\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mSource", "mDestination", "mTransformSource", "mTransformDestination", "mIntent", "mTransform" ],
  "methodNames" : [ "private static float[] computeTransform(@NonNull ColorSpace source, @NonNull ColorSpace destination, @NonNull RenderIntent intent)", "public ColorSpace getSource()", "public ColorSpace getDestination()", "public RenderIntent getRenderIntent()", "public float[] transform(float r, float g, float b)", "public float[] transform(@NonNull @Size(min = 3) float[] v)", " static Connector identity(ColorSpace source)" ]
}