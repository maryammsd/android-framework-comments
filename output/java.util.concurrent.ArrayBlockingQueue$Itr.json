{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ArrayBlockingQueue.java",
  "packageName" : "java.util.concurrent",
  "className" : "Itr",
  "comment" : "\n     * Iterator for ArrayBlockingQueue.\n     *\n     * To maintain weak consistency with respect to puts and takes, we\n     * read ahead one slot, so as to not report hasNext true but then\n     * not have an element to return.\n     *\n     * We switch into \"detached\" mode (allowing prompt unlinking from\n     * itrs without help from the GC) when all indices are negative, or\n     * when hasNext returns false for the first time.  This allows the\n     * iterator to track concurrent updates completely accurately,\n     * except for the corner case of the user calling Iterator.remove()\n     * after hasNext() returned false.  Even in this case, we ensure\n     * that we don't remove the wrong element by keeping track of the\n     * expected element to remove, in lastItem.  Yes, we may fail to\n     * remove lastItem from the queue if it moved due to an interleaved\n     * interior remove while in detached mode.\n     *\n     * Method forEachRemaining, added in Java 8, is treated similarly\n     * to hasNext returning false, in that we switch to detached mode,\n     * but we regard it as an even stronger request to \"close\" this\n     * iteration, and don't bother supporting subsequent remove().\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "cursor",
    "type" : "int",
    "comment" : " Index to look for new nextItem; NONE at end ",
    "links" : [ ]
  }, {
    "name" : "nextItem",
    "type" : "E",
    "comment" : " Element to be returned by next call to next(); null if none ",
    "links" : [ ]
  }, {
    "name" : "nextIndex",
    "type" : "int",
    "comment" : " Index of nextItem; NONE if none, REMOVED if removed elsewhere ",
    "links" : [ ]
  }, {
    "name" : "lastItem",
    "type" : "E",
    "comment" : " Last element returned; null if none or not detached. ",
    "links" : [ ]
  }, {
    "name" : "lastRet",
    "type" : "int",
    "comment" : " Index of lastItem, NONE if none, REMOVED if removed elsewhere ",
    "links" : [ ]
  }, {
    "name" : "prevTakeIndex",
    "type" : "int",
    "comment" : " Previous value of takeIndex, or DETACHED when detached ",
    "links" : [ ]
  }, {
    "name" : "prevCycles",
    "type" : "int",
    "comment" : " Previous value of iters.cycles ",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "int",
    "comment" : " Special index value indicating \"not available\" or \"undefined\" ",
    "links" : [ ]
  }, {
    "name" : "REMOVED",
    "type" : "int",
    "comment" : "\n         * Special index value indicating \"removed elsewhere\", that is,\n         * removed by some operation other than a call to this.remove().\n         ",
    "links" : [ ]
  }, {
    "name" : "DETACHED",
    "type" : "int",
    "comment" : " Special value for prevTakeIndex indicating \"detached mode\" ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean isDetached()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int incCursor(int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean invalidated(int index, int prevTakeIndex, long dequeues, int length)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if index is invalidated by the given number of\n         * dequeues, starting from prevTakeIndex.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void incorporateDequeues()",
    "returnType" : "void",
    "comment" : "\n         * Adjusts indices to incorporate all dequeues since the last\n         * operation on this iterator.  Call only from iterating thread.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void detach()",
    "returnType" : "void",
    "comment" : "\n         * Called when itrs should stop tracking this iterator, either\n         * because there are no more indices to update (cursor < 0 &&\n         * nextIndex < 0 && lastRet < 0) or as a special exception, when\n         * lastRet >= 0, because hasNext() is about to return false for the\n         * first time.  Call only from iterating thread.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "\n         * For performance reasons, we would like not to acquire a lock in\n         * hasNext in the common case.  To allow for this, we only access\n         * fields (i.e. nextItem) that are not modified by update operations\n         * triggered by queue modifications.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void noNext()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E next()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEachRemaining(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void remove()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void shutdown()",
    "returnType" : "void",
    "comment" : "\n         * Called to notify the iterator that the queue is empty, or that it\n         * has fallen hopelessly behind, so that it should abandon any\n         * further iteration, except possibly to return one more element\n         * from next(), as promised by returning true from hasNext().\n         ",
    "links" : [ ]
  }, {
    "name" : "private int distance(int index, int prevTakeIndex, int length)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean removedAt(int removedIndex)",
    "returnType" : "boolean",
    "comment" : "\n         * Called whenever an interior remove (not at takeIndex) occurred.\n         *\n         * @return true if this iterator should be unlinked from itrs\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean takeIndexWrapped()",
    "returnType" : "boolean",
    "comment" : "\n         * Called whenever takeIndex wraps around to zero.\n         *\n         * @return true if this iterator should be unlinked from itrs\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean isDetached()", "private int incCursor(int index)", "private boolean invalidated(int index, int prevTakeIndex, long dequeues, int length)", "private void incorporateDequeues()", "private void detach()", "public boolean hasNext()", "private void noNext()", "public E next()", "public void forEachRemaining(Consumer<? super E> action)", "public void remove()", " void shutdown()", "private int distance(int index, int prevTakeIndex, int length)", " boolean removedAt(int removedIndex)", " boolean takeIndexWrapped()" ],
  "variableNames" : [ "cursor", "nextItem", "nextIndex", "lastItem", "lastRet", "prevTakeIndex", "prevCycles", "NONE", "REMOVED", "DETACHED" ]
}