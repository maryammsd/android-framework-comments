{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/res/BridgeTypedArray.java",
  "packageName" : "android.content.res",
  "className" : "BridgeTypedArray",
  "comment" : "\n * Custom implementation of TypedArray to handle non compiled resources.\n ",
  "variables" : [ {
    "name" : "mBridgeResources",
    "type" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "BridgeContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResourceId",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResourceData",
    "type" : "ResourceValue[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNamespaces",
    "type" : "ResourceNamespace[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEmptyIds",
    "type" : "int[]",
    "comment" : " want to save on the check against empty, each time a resource value is requested.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void bridgeSetValue(int index, String name, ResourceNamespace namespace, int resourceId, ResourceValue value)",
    "returnType" : "void",
    "comment" : "\n     * A bridge-specific method that sets a value in the type array\n     * @param index the index of the value in the TypedArray\n     * @param name the name of the attribute\n     * @param namespace namespace of the attribute\n     * @param resourceId the reference id of this resource\n     * @param value the value of the attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sealArray()",
    "returnType" : "void",
    "comment" : "\n     * Seals the array after all calls to\n     * {@link #bridgeSetValue(int, String, ResourceNamespace, int, ResourceValue)} have been done.\n     * <p/>This allows to compute the list of non default values, permitting\n     * {@link #getIndexCount()} to return the proper value.\n     ",
    "links" : [ "#getIndexCount()", "#bridgeSetValue(int" ]
  }, {
    "name" : "public void setTheme(Theme theme)",
    "returnType" : "void",
    "comment" : "\n     * Set the theme to be used for inflating drawables.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of values in this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "\n     * Return the Resources object this array was loaded from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText(int index)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the styled string value for the attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return CharSequence holding string data.  May be styled.  Returns\n     *         null if the attribute is not defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(int index)",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the string value for the attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return String holding string data.  Any styling information is\n     * removed.  Returns null if the attribute is not defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(int index, boolean defValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieve the boolean value for the attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined.\n     *\n     * @return Attribute boolean value, or defValue if not defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInt(int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the integer value for the attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined.\n     *\n     * @return Attribute int value, or defValue if not defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFloat(int index, float defValue)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the float value for the attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return Attribute float value, or defValue if not defined..\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColor(int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the color value for the attribute at <var>index</var>.  If\n     * the attribute references a color resource holding a complex\n     * {@link android.content.res.ColorStateList}, then the default color from\n     * the set is returned.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute color value, or defValue if not defined.\n     ",
    "links" : [ "android.content.res.ColorStateList" ]
  }, {
    "name" : "public ColorStateList getColorStateList(int index)",
    "returnType" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComplexColor getComplexColor(int index)",
    "returnType" : "ComplexColor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInteger(int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the integer value for the attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute integer value, or defValue if not defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getDimension(int index, float defValue)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve a dimensional unit attribute at <var>index</var>.  Unit\n     * conversions are based on the current {@link DisplayMetrics}\n     * associated with the resources this {@link TypedArray} object\n     * came from.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute dimension value multiplied by the appropriate\n     * metric, or defValue if not defined.\n     *\n     * @see #getDimensionPixelOffset\n     * @see #getDimensionPixelSize\n     ",
    "links" : [ "android.util.DisplayMetrics", "android.content.res.TypedArray" ]
  }, {
    "name" : "public int getDimensionPixelOffset(int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve a dimensional unit attribute at <var>index</var> for use\n     * as an offset in raw pixels.  This is the same as\n     * {@link #getDimension}, except the returned value is converted to\n     * integer pixels for you.  An offset conversion involves simply\n     * truncating the base value to an integer.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute dimension value multiplied by the appropriate\n     * metric and truncated to integer pixels, or defValue if not defined.\n     *\n     * @see #getDimension\n     * @see #getDimensionPixelSize\n     ",
    "links" : [ "#getDimension" ]
  }, {
    "name" : "public int getDimensionPixelSize(int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve a dimensional unit attribute at <var>index</var> for use\n     * as a size in raw pixels.  This is the same as\n     * {@link #getDimension}, except the returned value is converted to\n     * integer pixels for use as a size.  A size conversion involves\n     * rounding the base value, and ensuring that a non-zero base value\n     * is at least one pixel in size.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute dimension value multiplied by the appropriate\n     * metric and truncated to integer pixels, or defValue if not defined.\n     *\n     * @see #getDimension\n     * @see #getDimensionPixelOffset\n     ",
    "links" : [ "#getDimension" ]
  }, {
    "name" : "public int getLayoutDimension(int index, String name)",
    "returnType" : "int",
    "comment" : "\n     * Special version of {@link #getDimensionPixelSize} for retrieving\n     * {@link android.view.ViewGroup}'s layout_width and layout_height\n     * attributes.  This is only here for performance reasons; applications\n     * should use {@link #getDimensionPixelSize}.\n     *\n     * @param index Index of the attribute to retrieve.\n     * @param name Textual name of attribute for error reporting.\n     *\n     * @return Attribute dimension value multiplied by the appropriate\n     * metric and truncated to integer pixels.\n     ",
    "links" : [ "#getDimensionPixelSize", "android.view.ViewGroup" ]
  }, {
    "name" : "public int getLayoutDimension(int index, int defValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getDimension(int index, @Nullable String name)",
    "returnType" : "int",
    "comment" : " @param name attribute name, used for error reporting. ",
    "links" : [ ]
  }, {
    "name" : "public float getFraction(int index, int base, int pbase, float defValue)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve a fractional unit attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param base The base value of this fraction.  In other words, a\n     *             standard fraction is multiplied by this value.\n     * @param pbase The parent base value of this fraction.  In other\n     *             words, a parent fraction (nn%p) is multiplied by this\n     *             value.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute fractional value multiplied by the appropriate\n     * base value, or defValue if not defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getResourceId(int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the resource identifier for the attribute at\n     * <var>index</var>.  Note that attribute resource as resolved when\n     * the overall {@link TypedArray} object is retrieved.  As a\n     * result, this function will return the resource identifier of the\n     * final resource value that was found, <em>not</em> necessarily the\n     * original resource that was specified by the attribute.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute resource identifier, or defValue if not defined.\n     ",
    "links" : [ "android.content.res.TypedArray" ]
  }, {
    "name" : "public int getThemeAttributeId(int index, int defValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawable(int index)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the Drawable for the attribute at <var>index</var>.  This\n     * gets the resource ID of the selected attribute, and uses\n     * {@link Resources#getDrawable Resources.getDrawable} of the owning\n     * Resources object to retrieve its Drawable.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return Drawable for the attribute, or null if not defined.\n     ",
    "links" : [ "com.android.ide.common.rendering.api.RenderResources#getDrawable" ]
  }, {
    "name" : "public Drawable getDrawableForDensity(int index, int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * Version of {@link #getDrawable(int)} that accepts an override density.\n     * @hide\n     ",
    "links" : [ "#getDrawable(int)" ]
  }, {
    "name" : "public Typeface getFont(int index)",
    "returnType" : "Typeface",
    "comment" : "\n     * Retrieve the Typeface for the attribute at <var>index</var>.\n     * @param index Index of attribute to retrieve.\n     *\n     * @return Typeface for the attribute, or null if not defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence[] getTextArray(int index)",
    "returnType" : "CharSequence[]",
    "comment" : "\n     * Retrieve the CharSequence[] for the attribute at <var>index</var>.\n     * This gets the resource ID of the selected attribute, and uses\n     * {@link Resources#getTextArray Resources.getTextArray} of the owning\n     * Resources object to retrieve its String[].\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return CharSequence[] for the attribute, or null if not defined.\n     ",
    "links" : [ "com.android.ide.common.rendering.api.RenderResources#getTextArray" ]
  }, {
    "name" : "public int[] extractThemeAttrs()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getValue(int index, TypedValue outValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieve the raw TypedValue for the attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param outValue TypedValue object in which to place the attribute's\n     *                 data.\n     *\n     * @return Returns true if the value was retrieved, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType(int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasValue(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether there is an attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return True if the attribute has a value, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasValueOrEmpty(int index)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TypedValue peekValue(int index)",
    "returnType" : "TypedValue",
    "comment" : "\n     * Retrieve the raw TypedValue for the attribute at <var>index</var>\n     * and return a temporary object holding its data.  This object is only\n     * valid until the next call on to {@link TypedArray}.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return Returns a TypedValue object if the attribute is defined,\n     *         containing its data; otherwise returns null.  (You will not\n     *         receive a TypedValue whose type is TYPE_NULL.)\n     ",
    "links" : [ "android.content.res.TypedArray" ]
  }, {
    "name" : "public String getPositionDescription()",
    "returnType" : "String",
    "comment" : "\n     * Returns a message about the parser state suitable for printing error messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Give back a previously retrieved TypedArray, for later re-use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Integer resolveEnumAttribute(int index)",
    "returnType" : "Integer",
    "comment" : "\n     * Searches for the string in the attributes (flag or enums) and returns the integer.\n     * If found, it will return an integer matching the value.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return Attribute int value, or null if not defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int convertValueToInt(@Nullable String charSeq, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Copied from {@link XmlUtils#convertValueToInt(CharSequence, int)}, but adapted to account\n     * for aapt, and the fact that host Java VM's Integer.parseInt(\"XXXXXXXX\", 16) cannot handle\n     * \"XXXXXXXX\" > 80000000.\n     ",
    "links" : [ "com.android.internal.util.XmlUtils#convertValueToInt(CharSequence" ]
  }, {
    "name" : " static TypedArray obtain(Resources res, int len)",
    "returnType" : "TypedArray",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mBridgeResources", "mContext", "mResourceId", "mResourceData", "mNames", "mNamespaces", "mEmptyIds" ],
  "methodNames" : [ "public void bridgeSetValue(int index, String name, ResourceNamespace namespace, int resourceId, ResourceValue value)", "public void sealArray()", "public void setTheme(Theme theme)", "public int length()", "public Resources getResources()", "public CharSequence getText(int index)", "public String getString(int index)", "public boolean getBoolean(int index, boolean defValue)", "public int getInt(int index, int defValue)", "public float getFloat(int index, float defValue)", "public int getColor(int index, int defValue)", "public ColorStateList getColorStateList(int index)", "public ComplexColor getComplexColor(int index)", "public int getInteger(int index, int defValue)", "public float getDimension(int index, float defValue)", "public int getDimensionPixelOffset(int index, int defValue)", "public int getDimensionPixelSize(int index, int defValue)", "public int getLayoutDimension(int index, String name)", "public int getLayoutDimension(int index, int defValue)", "private int getDimension(int index, @Nullable String name)", "public float getFraction(int index, int base, int pbase, float defValue)", "public int getResourceId(int index, int defValue)", "public int getThemeAttributeId(int index, int defValue)", "public Drawable getDrawable(int index)", "public Drawable getDrawableForDensity(int index, int density)", "public Typeface getFont(int index)", "public CharSequence[] getTextArray(int index)", "public int[] extractThemeAttrs()", "public int getChangingConfigurations()", "public boolean getValue(int index, TypedValue outValue)", "public int getType(int index)", "public boolean hasValue(int index)", "public boolean hasValueOrEmpty(int index)", "public TypedValue peekValue(int index)", "public String getPositionDescription()", "public void recycle()", "public String toString()", "private Integer resolveEnumAttribute(int index)", "private static int convertValueToInt(@Nullable String charSeq, int defValue)", " static TypedArray obtain(Resources res, int len)" ]
}