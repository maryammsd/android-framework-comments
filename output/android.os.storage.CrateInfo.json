{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/storage/CrateInfo.java",
  "packageName" : "android.os.storage",
  "className" : "CrateInfo",
  "comment" : "\n * The CrateInfo describe the crate information.\n * <p>\n *      It describe the following items.\n *      <ul>\n *          <li>The crate id that is the name of the child directory in\n *          {@link Context#getCrateDir(String)}</li>\n *          <li>Label to provide human readable text for the users.</li>\n *          <li>Expiration information. When the crate is expired and the run .</li>\n *\n *      </ul>for the directory\n * </p>\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : "\n     * The following member fields whose value are set by apps and retrieved by system_server.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExpiration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUid",
    "type" : "int",
    "comment" : "\n     * The following member fields whose value are retrieved by installd.\n     * <p>{@link android.app.usage.StorageStatsManager#queryCratesForUser(UUID, UserHandle)} query\n     * all of crates for the specified UserHandle. That means the return crate list whose elements\n     * may have the same userId but different package name. Each crate needs the information to tell\n     * the caller from where package comes.\n     * </p>\n     ",
    "links" : [ "android.app.usage.StorageStatsManager#queryCratesForUser(UUID" ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "\n     * The following member fields whose value are retrieved by installd.\n     * <p>Both {@link StorageStatsManager#queryCratesForUid(UUID, int)} and\n     * {@link android.app.usage.StorageStatsManager#queryCratesForUser(UUID, UserHandle)} query\n     * all of crates for the specified uid or userId. That means the return crate list whose\n     * elements may have the same uid or userId but different package name. Each crate needs the\n     * information to tell the caller from where package comes.\n     * </p>\n     ",
    "links" : [ "android.app.usage.StorageStatsManager#queryCratesForUid(UUID", "android.app.usage.StorageStatsManager#queryCratesForUser(UUID" ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "\n     * The following member fields whose value are retrieved by system_server.\n     * <p>\n     *     The child directories in {@link Context#getCrateDir(String)} are crates. Each directories\n     *     is a crate. The folder name is the crate id.\n     * </p><p>\n     *     Can't apply check if the path is validated or not because it need pass through the\n     *     parcel.\n     * </p>\n     ",
    "links" : [ "android.content.Context#getCrateDir(String)" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<CrateInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * To get the meaningful text of the crate for the users.\n     * @return the meaningful text\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getExpirationMillis()",
    "returnType" : "long",
    "comment" : "\n     * To return the expiration time.\n     * <p>\n     *     If the current time is larger than expiration time, the crate files are considered to be\n     *     deleted.\n     * </p>\n     * @return the expiration time\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExpiration(@CurrentTimeMillisLong long expiration)",
    "returnType" : "void",
    "comment" : "\n     * To set the expiration time.\n     * @param expiration the expiration time\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * To compare with crateinfo when selves' mId is validated.\n     * <p>The validated crateinfo.mId must be validated the following items.\n     * <ul>\n     *     <li>mId is not null</li>\n     *     <li>mId is not empty string</li>\n     * </ul>\n     * </p>\n     * @param   obj   the reference object with which to compare.\n     * @return true when selves's mId is validated and equal to crateinfo.mId.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@Nullable Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(@Nullable Parcel in)",
    "returnType" : "void",
    "comment" : "\n     * To read the data from parcel.\n     * <p>\n     *     It's called by StorageStatsService.\n     * </p>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CrateInfo copyFrom(int uid, @Nullable String packageName, @Nullable String id)",
    "returnType" : "CrateInfo",
    "comment" : "\n     * To copy the information from service into crateinfo.\n     * <p>\n     * This function is called in system_server. The copied information includes\n     *     <ul>\n     *         <li>uid</li>\n     *         <li>package name</li>\n     *         <li>crate id</li>\n     *     </ul>\n     * </p>\n     * @param uid the uid that the crate belong to\n     * @param packageName the package name that the crate belong to\n     * @param id the crate dir\n     * @return the CrateInfo instance\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mLabel", "mExpiration", "mUid", "mPackageName", "mId", "CREATOR" ],
  "methodNames" : [ "public CharSequence getLabel()", "public long getExpirationMillis()", "public void setExpiration(@CurrentTimeMillisLong long expiration)", "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public int describeContents()", "public void writeToParcel(@Nullable Parcel dest, int flags)", "public void readFromParcel(@Nullable Parcel in)", "public static CrateInfo copyFrom(int uid, @Nullable String packageName, @Nullable String id)" ]
}