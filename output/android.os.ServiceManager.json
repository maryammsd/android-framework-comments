{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/ServiceManager.java",
  "packageName" : "android.os",
  "className" : "ServiceManager",
  "comment" : "\n * Manage binder services as registered with the binder context manager. These services must be\n * declared statically on an Android device (SELinux access_vector service_manager, w/ service\n * names in service_contexts files), and they do not follow the activity lifecycle. When\n * building applications, android.app.Service should be preferred.\n *\n * @hide\n *",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sServiceManager",
    "type" : "IServiceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCache",
    "type" : "Map<String, IBinder>",
    "comment" : " start to avoid any overhead from locking",
    "links" : [ ]
  }, {
    "name" : "sCache$ravenwood",
    "type" : "Map<String, IBinder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLOW_LOG_INTERVAL_MS",
    "type" : "int",
    "comment" : "\n     * We do the \"slow log\" at most once every this interval.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATS_LOG_INTERVAL_MS",
    "type" : "int",
    "comment" : "\n     * We do the \"stats log\" at most once every this interval.\n     ",
    "links" : [ ]
  }, {
    "name" : "GET_SERVICE_SLOW_THRESHOLD_US_CORE",
    "type" : "long",
    "comment" : "\n     * Threshold in uS for a \"slow\" call, used on core UIDs. We use a more relax value to\n     * avoid logspam.\n     ",
    "links" : [ ]
  }, {
    "name" : "GET_SERVICE_SLOW_THRESHOLD_US_NON_CORE",
    "type" : "long",
    "comment" : "\n     * Threshold in uS for a \"slow\" call, used on non-core UIDs. We use a more relax value to\n     * avoid logspam.\n     ",
    "links" : [ ]
  }, {
    "name" : "GET_SERVICE_LOG_EVERY_CALLS_CORE",
    "type" : "int",
    "comment" : "\n     * We log stats logging ever this many getService() calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "GET_SERVICE_LOG_EVERY_CALLS_NON_CORE",
    "type" : "int",
    "comment" : "\n     * We log stats logging ever this many getService() calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "sGetServiceAccumulatedUs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sGetServiceAccumulatedCallCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLastStatsLogUptime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLastSlowLogUptime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLastSlowLogActualTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sStatLogger",
    "type" : "StatLogger",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void init$ravenwood()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void reset$ravenwood()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static IServiceManager getIServiceManager()",
    "returnType" : "IServiceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IBinder getService(String name)",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns a reference to a service with the given name.\n     *\n     * @param name the name of the service to get\n     * @return a reference to the service, or <code>null</code> if the service doesn't exist\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IBinder getService$ravenwood(String name)",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static IBinder getServiceOrThrow(String name) throws ServiceNotFoundException",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns a reference to a service with the given name, or throws\n     * {@link ServiceNotFoundException} if none is found.\n     *\n     * @hide\n     ",
    "links" : [ "ServiceNotFoundException" ]
  }, {
    "name" : "public static void addService(String name, IBinder service)",
    "returnType" : "void",
    "comment" : "\n     * Place a new @a service called @a name into the service\n     * manager.\n     *\n     * @param name the name of the new service\n     * @param service the service object\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addService(String name, IBinder service, boolean allowIsolated)",
    "returnType" : "void",
    "comment" : "\n     * Place a new @a service called @a name into the service\n     * manager.\n     *\n     * @param name the name of the new service\n     * @param service the service object\n     * @param allowIsolated set to true to allow isolated sandboxed processes\n     * to access this service\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addService(String name, IBinder service, boolean allowIsolated, int dumpPriority)",
    "returnType" : "void",
    "comment" : "\n     * Place a new @a service called @a name into the service\n     * manager.\n     *\n     * @param name the name of the new service\n     * @param service the service object\n     * @param allowIsolated set to true to allow isolated sandboxed processes\n     * @param dumpPriority supported dump priority levels as a bitmask\n     * to access this service\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addService$ravenwood(String name, IBinder service, boolean allowIsolated, int dumpPriority)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static IBinder checkService(String name)",
    "returnType" : "IBinder",
    "comment" : "\n     * Retrieve an existing service called @a name from the\n     * service manager.  Non-blocking.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDeclared(@NonNull String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the specified service is declared.\n     *\n     * @return true if the service is declared somewhere (eg. VINTF manifest) and\n     * waitForService should always be able to return the service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getDeclaredInstances(@NonNull String iface)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns an array of all declared instances for a particular interface.\n     *\n     * For instance, if 'android.foo.IFoo/foo' is declared (e.g. in VINTF\n     * manifest), and 'android.foo.IFoo' is passed here, then [\"foo\"] would be\n     * returned.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IBinder waitForService(@NonNull String name)",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns the specified service from the service manager.\n     *\n     * If the service is not running, servicemanager will attempt to start it, and this function\n     * will wait for it to be ready.\n     *\n     * @return {@code null} only if there are permission problems or fatal errors.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native IBinder waitForServiceNative(@NonNull String name)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IBinder waitForDeclaredService(@NonNull String name)",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns the specified service from the service manager, if declared.\n     *\n     * If the service is not running, servicemanager will attempt to start it, and this function\n     * will wait for it to be ready.\n     *\n     * @throws SecurityException if the process does not have the permissions to check\n     * isDeclared() for the service.\n     * @return {@code null} if the service is not declared in the manifest, or if there\n     * are fatal errors.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerForNotifications(@NonNull String name, @NonNull IServiceCallback callback) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Register callback for service registration notifications.\n     *\n     * @throws RemoteException for underlying error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] listServices()",
    "returnType" : "String[]",
    "comment" : "\n     * Return a list of all currently running services.\n     * @return an array of all currently running services, or <code>null</code> in\n     * case of an exception\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ServiceDebugInfo[] getServiceDebugInfo()",
    "returnType" : "ServiceDebugInfo[]",
    "comment" : "\n     * Get service debug info.\n     * @return an array of information for each service (like listServices, but with PIDs)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void initServiceCache(Map<String, IBinder> cache)",
    "returnType" : "void",
    "comment" : "\n     * This is only intended to be called when the process is first being brought\n     * up and bound by the activity manager. There is only one thread in the process\n     * at that time, so no locking is done.\n     *\n     * @param cache the cache of service references\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IBinder rawGetService(String name) throws RemoteException",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void init$ravenwood()", "public static void reset$ravenwood()", "private static IServiceManager getIServiceManager()", "public static IBinder getService(String name)", "public static IBinder getService$ravenwood(String name)", "public static IBinder getServiceOrThrow(String name) throws ServiceNotFoundException", "public static void addService(String name, IBinder service)", "public static void addService(String name, IBinder service, boolean allowIsolated)", "public static void addService(String name, IBinder service, boolean allowIsolated, int dumpPriority)", "public static void addService$ravenwood(String name, IBinder service, boolean allowIsolated, int dumpPriority)", "public static IBinder checkService(String name)", "public static boolean isDeclared(@NonNull String name)", "public static String[] getDeclaredInstances(@NonNull String iface)", "public static IBinder waitForService(@NonNull String name)", "private static native IBinder waitForServiceNative(@NonNull String name)", "public static IBinder waitForDeclaredService(@NonNull String name)", "public static void registerForNotifications(@NonNull String name, @NonNull IServiceCallback callback) throws RemoteException", "public static String[] listServices()", "public static ServiceDebugInfo[] getServiceDebugInfo()", "public static void initServiceCache(Map<String, IBinder> cache)", "private static IBinder rawGetService(String name) throws RemoteException" ],
  "variableNames" : [ "TAG", "sLock", "sServiceManager", "sCache", "sCache$ravenwood", "SLOW_LOG_INTERVAL_MS", "STATS_LOG_INTERVAL_MS", "GET_SERVICE_SLOW_THRESHOLD_US_CORE", "GET_SERVICE_SLOW_THRESHOLD_US_NON_CORE", "GET_SERVICE_LOG_EVERY_CALLS_CORE", "GET_SERVICE_LOG_EVERY_CALLS_NON_CORE", "sGetServiceAccumulatedUs", "sGetServiceAccumulatedCallCount", "sLastStatsLogUptime", "sLastSlowLogUptime", "sLastSlowLogActualTime", "sStatLogger" ]
}