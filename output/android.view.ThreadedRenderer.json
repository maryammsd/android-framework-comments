{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ThreadedRenderer.java",
  "packageName" : "android.view",
  "className" : "ThreadedRenderer",
  "comment" : "\n * Threaded renderer that proxies the rendering to a render thread. Most calls\n * are currently synchronous.\n *\n * The UI thread can block on the RenderThread, but RenderThread must never\n * block on the UI thread.\n *\n * ThreadedRenderer creates an instance of RenderProxy. RenderProxy in turn creates\n * and manages a CanvasContext on the RenderThread. The CanvasContext is fully managed\n * by the lifecycle of the RenderProxy.\n *\n * Note that although currently the EGL context & surfaces are created & managed\n * by the render thread, the goal is to move that into a shared structure that can\n * be managed by both threads. EGLSurface creation & deletion should ideally be\n * done on the UI thread and not the RenderThread to avoid stalling the\n * RenderThread with surface buffer allocation.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PROFILE_PROPERTY",
    "type" : "String",
    "comment" : "\n     * System property used to enable or disable threaded rendering profiling.\n     * The default value of this property is assumed to be false.\n     *\n     * When profiling is enabled, the adb shell dumpsys gfxinfo command will\n     * output extra information about the time taken to execute by the last\n     * frames.\n     *\n     * Possible values:\n     * \"true\", to enable profiling\n     * \"visual_bars\", to enable profiling and visualize the results on screen\n     * \"false\", to disable profiling\n     *\n     * @see #PROFILE_PROPERTY_VISUALIZE_BARS\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_PROPERTY_VISUALIZE_BARS",
    "type" : "String",
    "comment" : "\n     * Value for {@link #PROFILE_PROPERTY}. When the property is set to this\n     * value, profiling data will be visualized on screen as a bar chart.\n     *\n     * @hide\n     ",
    "links" : [ "#PROFILE_PROPERTY" ]
  }, {
    "name" : "PROFILE_MAXFRAMES_PROPERTY",
    "type" : "String",
    "comment" : "\n     * System property used to specify the number of frames to be used\n     * when doing threaded rendering profiling.\n     * The default value of this property is #PROFILE_MAX_FRAMES.\n     *\n     * When profiling is enabled, the adb shell dumpsys gfxinfo command will\n     * output extra information about the time taken to execute by the last\n     * frames.\n     *\n     * Possible values:\n     * \"60\", to set the limit of frames to 60\n     ",
    "links" : [ ]
  }, {
    "name" : "PRINT_CONFIG_PROPERTY",
    "type" : "String",
    "comment" : "\n     * System property used to debug EGL configuration choice.\n     *\n     * Possible values:\n     * \"choice\", print the chosen configuration only\n     * \"all\", print all possible configurations\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_DIRTY_REGIONS_PROPERTY",
    "type" : "String",
    "comment" : "\n     * Turn on to draw dirty regions every other frame.\n     *\n     * Possible values:\n     * \"true\", to enable dirty regions debugging\n     * \"false\", to disable dirty regions debugging\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_SHOW_LAYERS_UPDATES_PROPERTY",
    "type" : "String",
    "comment" : "\n     * Turn on to flash hardware layers when they update.\n     *\n     * Possible values:\n     * \"true\", to enable hardware layers updates debugging\n     * \"false\", to disable hardware layers updates debugging\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_OVERDRAW_PROPERTY",
    "type" : "String",
    "comment" : "\n     * Controls overdraw debugging.\n     *\n     * Possible values:\n     * \"false\", to disable overdraw debugging\n     * \"show\", to show overdraw areas on screen\n     * \"count\", to display an overdraw counter\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OVERDRAW_PROPERTY_SHOW",
    "type" : "String",
    "comment" : "\n     * Value for {@link #DEBUG_OVERDRAW_PROPERTY}. When the property is set to this\n     * value, overdraw will be shown on screen by coloring pixels.\n     *\n     * @hide\n     ",
    "links" : [ "#DEBUG_OVERDRAW_PROPERTY" ]
  }, {
    "name" : "DEBUG_SHOW_NON_RECTANGULAR_CLIP_PROPERTY",
    "type" : "String",
    "comment" : "\n     * Turn on to debug non-rectangular clip operations.\n     *\n     * Possible values:\n     * \"hide\", to disable this debug mode\n     * \"highlight\", highlight drawing commands tested against a non-rectangular clip\n     * \"stencil\", renders the clip region on screen when set\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_FPS_DIVISOR",
    "type" : "String",
    "comment" : "\n     * Sets the FPS devisor to lower the FPS.\n     *\n     * Sets a positive integer as a divisor. 1 (the default value) menas the full FPS, and 2\n     * means half the full FPS.\n     *\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_FORCE_DARK",
    "type" : "String",
    "comment" : "\n     * Forces smart-dark to be always on.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EGL_CONTEXT_PRIORITY_REALTIME_NV",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EGL_CONTEXT_PRIORITY_HIGH_IMG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EGL_CONTEXT_PRIORITY_MEDIUM_IMG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EGL_CONTEXT_PRIORITY_LOW_IMG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRendererEnabled",
    "type" : "boolean",
    "comment" : "\n     * Further threaded renderer disabling for the system process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VISUALIZERS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : " Size of the rendered content.",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : " Size of the rendered content.",
    "links" : [ ]
  }, {
    "name" : "mSurfaceWidth",
    "type" : "int",
    "comment" : " Actual size of the drawing surface.",
    "links" : [ ]
  }, {
    "name" : "mSurfaceHeight",
    "type" : "int",
    "comment" : " Actual size of the drawing surface.",
    "links" : [ ]
  }, {
    "name" : "mInsetTop",
    "type" : "int",
    "comment" : " applied as translation when updating the root render node.",
    "links" : [ ]
  }, {
    "name" : "mInsetLeft",
    "type" : "int",
    "comment" : " applied as translation when updating the root render node.",
    "links" : [ ]
  }, {
    "name" : "mLightY",
    "type" : "float",
    "comment" : " Light properties specified by the theme.",
    "links" : [ ]
  }, {
    "name" : "mLightZ",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLightRadius",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRootNodeNeedsUpdate",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequested",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWebViewOverlayProvider",
    "type" : "WebViewOverlayProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWebViewOverlaysEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextRtFrameCallbacks",
    "type" : "ArrayList<FrameDrawingCallback>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void enableForegroundTrimming()",
    "returnType" : "void",
    "comment" : "\n     * Controls whether or not the renderer should aggressively trim\n     * memory. Note that this must not be set for any process that uses\n     * WebView! This should be only used by system_process or similar\n     * that do not go into the background.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void initForSystemProcess()",
    "returnType" : "void",
    "comment" : "\n     * Initialize HWUI for being in a system process like system_server\n     * Should not be called in non-system processes\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ThreadedRenderer create(Context context, boolean translucent, String name)",
    "returnType" : "ThreadedRenderer",
    "comment" : "\n     * Creates a threaded renderer using OpenGL.\n     *\n     * @param translucent True if the surface is translucent, false otherwise\n     *\n     * @return A threaded renderer backed by OpenGL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether threaded rendering is currently enabled.\n     *\n     * @return True if threaded rendering  is in use, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether threaded rendering  is currently enabled.\n     *\n     * @param enabled True if the threaded renderer is in use, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isRequested()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether threaded rendering is currently request but not\n     * necessarily enabled yet.\n     *\n     * @return True if requested, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setRequested(boolean requested)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether threaded rendering is currently requested but not\n     * necessarily enabled yet.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateEnabledState(Surface surface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean initialize(Surface surface) throws OutOfResourcesException",
    "returnType" : "boolean",
    "comment" : "\n     * Initializes the threaded renderer for the specified surface.\n     *\n     * @param surface The surface to render\n     *\n     * @return True if the initialization was successful, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean initializeIfNeeded(int width, int height, View.AttachInfo attachInfo, Surface surface, Rect surfaceInsets) throws OutOfResourcesException",
    "returnType" : "boolean",
    "comment" : "\n     * Initializes the threaded renderer for the specified surface and setup the\n     * renderer for drawing, if needed. This is invoked when the ViewAncestor has\n     * potentially lost the threaded renderer. The threaded renderer should be\n     * reinitialized and setup when the render {@link #isRequested()} and\n     * {@link #isEnabled()}.\n     *\n     * @param width The width of the drawing surface.\n     * @param height The height of the drawing surface.\n     * @param attachInfo Information about the window.\n     * @param surface The surface to render\n     * @param surfaceInsets The drawing surface insets to apply\n     *\n     * @return true if the surface was initialized, false otherwise. Returning\n     *         false might mean that the surface was already initialized.\n     ",
    "links" : [ "#isEnabled()", "#isRequested()" ]
  }, {
    "name" : " void updateSurface(Surface surface) throws OutOfResourcesException",
    "returnType" : "void",
    "comment" : "\n     * Updates the threaded renderer for the specified surface.\n     *\n     * @param surface The surface to render\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void registerRtFrameCallback(@NonNull FrameDrawingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to be executed when the next frame is being drawn on RenderThread. This\n     * callback will be executed on a RenderThread worker thread, and only used for the next frame\n     * and thus it will only fire once.\n     *\n     * @param callback The callback to register.\n     ",
    "links" : [ ]
  }, {
    "name" : " void unregisterRtFrameCallback(@NonNull FrameDrawingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove a frame drawing callback that was added via\n     * {@link #registerRtFrameCallback(FrameDrawingCallback)}\n     *\n     * @param callback The callback to unregister.\n     ",
    "links" : [ "#registerRtFrameCallback(FrameDrawingCallback)" ]
  }, {
    "name" : " void destroyHardwareResources(View view)",
    "returnType" : "void",
    "comment" : "\n     * Destroys all hardware rendering resources associated with the specified\n     * view hierarchy.\n     *\n     * @param view The root of the view hierarchy\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void destroyResources(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setup(int width, int height, AttachInfo attachInfo, Rect surfaceInsets)",
    "returnType" : "void",
    "comment" : "\n     * Sets up the renderer for drawing.\n     *\n     * @param width The width of the drawing surface.\n     * @param height The height of the drawing surface.\n     * @param attachInfo Information about the window.\n     * @param surfaceInsets The drawing surface insets to apply\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean rendererOwnsSurfaceControlOpacity()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether or not the renderer owns the SurfaceControl's opacity. If true, use\n     * {@link #setSurfaceControlOpaque(boolean)} to update the opacity\n     ",
    "links" : [ "#setSurfaceControlOpaque(boolean)" ]
  }, {
    "name" : "public boolean setSurfaceControlOpaque(boolean opaque)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the SurfaceControl's opacity that this HardwareRenderer is rendering onto. The renderer\n     * may opt to override the opacity, and will return the value that is ultimately set\n     *\n     * @return true if the surface is opaque, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateWebViewOverlayCallbacks()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSurfaceControl(@Nullable SurfaceControl surfaceControl, @Nullable BLASTBufferQueue blastBufferQueue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyCallbackPending()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyExpensiveFrame()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setLightCenter(AttachInfo attachInfo)",
    "returnType" : "void",
    "comment" : "\n     * Updates the light position based on the position of the window.\n     *\n     * @param attachInfo Information about the window.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current width of the surface. This is the width that the surface\n     * was last set to in a call to {@link #setup(int, int, View.AttachInfo, Rect)}.\n     *\n     * @return the current width of the surface\n     ",
    "links" : [ "#setup(int" ]
  }, {
    "name" : " int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current height of the surface. This is the height that the surface\n     * was last set to in a call to {@link #setup(int, int, View.AttachInfo, Rect)}.\n     *\n     * @return the current width of the surface\n     ",
    "links" : [ "#setup(int" ]
  }, {
    "name" : "private static int dumpArgsToFlags(String[] args)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void handleDumpGfxInfo(FileDescriptor fd, String[] args)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void dumpGfxInfo(PrintWriter pw, FileDescriptor fd, String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Outputs extra debugging information in the specified file descriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : " Picture captureRenderingCommands()",
    "returnType" : "Picture",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean loadSystemProperties()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateViewTreeDisplayList(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateRootDisplayList(View view, DrawCallbacks callbacks)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void invalidateRoot()",
    "returnType" : "void",
    "comment" : "\n     *  Indicates that the content drawn by DrawCallbacks needs to\n     *  be updated, which will be done by the next call to draw()\n     ",
    "links" : [ ]
  }, {
    "name" : " void draw(View view, AttachInfo attachInfo, DrawCallbacks callbacks)",
    "returnType" : "void",
    "comment" : "\n     * Draws the specified view.\n     *\n     * @param view The view to draw.\n     * @param attachInfo AttachInfo tied to the specified view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public RenderNode getRootNode()",
    "returnType" : "RenderNode",
    "comment" : " The root of everything ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void enableForegroundTrimming()", "public static void initForSystemProcess()", "public static ThreadedRenderer create(Context context, boolean translucent, String name)", "public void destroy()", " boolean isEnabled()", " void setEnabled(boolean enabled)", " boolean isRequested()", " void setRequested(boolean requested)", "private void updateEnabledState(Surface surface)", " boolean initialize(Surface surface) throws OutOfResourcesException", " boolean initializeIfNeeded(int width, int height, View.AttachInfo attachInfo, Surface surface, Rect surfaceInsets) throws OutOfResourcesException", " void updateSurface(Surface surface) throws OutOfResourcesException", "public void setSurface(Surface surface)", " void registerRtFrameCallback(@NonNull FrameDrawingCallback callback)", " void unregisterRtFrameCallback(@NonNull FrameDrawingCallback callback)", " void destroyHardwareResources(View view)", "private static void destroyResources(View view)", " void setup(int width, int height, AttachInfo attachInfo, Rect surfaceInsets)", "public boolean rendererOwnsSurfaceControlOpacity()", "public boolean setSurfaceControlOpaque(boolean opaque)", "private void updateWebViewOverlayCallbacks()", "public void setSurfaceControl(@Nullable SurfaceControl surfaceControl, @Nullable BLASTBufferQueue blastBufferQueue)", "public void notifyCallbackPending()", "public void notifyExpensiveFrame()", " void setLightCenter(AttachInfo attachInfo)", " int getWidth()", " int getHeight()", "private static int dumpArgsToFlags(String[] args)", "public static void handleDumpGfxInfo(FileDescriptor fd, String[] args)", " void dumpGfxInfo(PrintWriter pw, FileDescriptor fd, String[] args)", " Picture captureRenderingCommands()", "public boolean loadSystemProperties()", "private void updateViewTreeDisplayList(View view)", "private void updateRootDisplayList(View view, DrawCallbacks callbacks)", " void invalidateRoot()", " void draw(View view, AttachInfo attachInfo, DrawCallbacks callbacks)", "public RenderNode getRootNode()" ],
  "variableNames" : [ "PROFILE_PROPERTY", "PROFILE_PROPERTY_VISUALIZE_BARS", "PROFILE_MAXFRAMES_PROPERTY", "PRINT_CONFIG_PROPERTY", "DEBUG_DIRTY_REGIONS_PROPERTY", "DEBUG_SHOW_LAYERS_UPDATES_PROPERTY", "DEBUG_OVERDRAW_PROPERTY", "OVERDRAW_PROPERTY_SHOW", "DEBUG_SHOW_NON_RECTANGULAR_CLIP_PROPERTY", "DEBUG_FPS_DIVISOR", "DEBUG_FORCE_DARK", "EGL_CONTEXT_PRIORITY_REALTIME_NV", "EGL_CONTEXT_PRIORITY_HIGH_IMG", "EGL_CONTEXT_PRIORITY_MEDIUM_IMG", "EGL_CONTEXT_PRIORITY_LOW_IMG", "sRendererEnabled", "VISUALIZERS", "mWidth", "mHeight", "mSurfaceWidth", "mSurfaceHeight", "mInsetTop", "mInsetLeft", "mLightY", "mLightZ", "mLightRadius", "mInitialized", "mRootNodeNeedsUpdate", "mEnabled", "mRequested", "mWebViewOverlayProvider", "mWebViewOverlaysEnabled", "mNextRtFrameCallbacks" ]
}