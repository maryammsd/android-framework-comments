{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Spliterators.java",
  "packageName" : "java.util",
  "className" : "AbstractSpliterator",
  "comment" : "\n     * An abstract {@code Spliterator} that implements {@code trySplit} to\n     * permit limited parallelism.\n     *\n     * <p>An extending class need only\n     * implement {@link #tryAdvance(java.util.function.Consumer) tryAdvance}.\n     * The extending class should override\n     * {@link #forEachRemaining(java.util.function.Consumer) forEachRemaining}\n     * if it can provide a more performant implementation.\n     *\n     * @apiNote\n     * This class is a useful aid for creating a spliterator when it is not\n     * possible or difficult to efficiently partition elements in a manner\n     * allowing balanced parallel computation.\n     *\n     * <p>An alternative to using this class, that also permits limited\n     * parallelism, is to create a spliterator from an iterator\n     * (see {@link #spliterator(Iterator, long, int)}.  Depending on the\n     * circumstances using an iterator may be easier or more convenient than\n     * extending this class, such as when there is already an iterator\n     * available to use.\n     *\n     * @see #spliterator(Iterator, long, int)\n     * @since 1.8\n     ",
  "links" : [ "#spliterator(Iterator", "#forEachRemaining(java.util.function.Consumer)", "#tryAdvance(java.util.function.Consumer)" ],
  "variables" : [ {
    "name" : "BATCH_UNIT",
    "type" : "int",
    "comment" : " batch array size increment",
    "links" : [ ]
  }, {
    "name" : "MAX_BATCH",
    "type" : "int",
    "comment" : " max batch array size;",
    "links" : [ ]
  }, {
    "name" : "characteristics",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "est",
    "type" : "long",
    "comment" : " size estimate",
    "links" : [ ]
  }, {
    "name" : "batch",
    "type" : "int",
    "comment" : " batch size for splits",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Spliterator<T> trySplit()",
    "returnType" : "Spliterator<T>",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * This implementation permits limited parallelism.\n         ",
    "links" : [ ]
  }, {
    "name" : "public long estimateSize()",
    "returnType" : "long",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @implSpec\n         * This implementation returns the estimated size as reported when\n         * created and, if the estimate size is known, decreases in size when\n         * split.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int characteristics()",
    "returnType" : "int",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @implSpec\n         * This implementation returns the characteristics as reported when\n         * created.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Spliterator<T> trySplit()", "public long estimateSize()", "public int characteristics()" ],
  "variableNames" : [ "BATCH_UNIT", "MAX_BATCH", "characteristics", "est", "batch" ]
}