{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/CountryDetector.java",
  "packageName" : "android.location",
  "className" : "CountryDetector",
  "comment" : "\n * This class provides access to the system country detector service. This service allows\n * applications to obtain the country that the user is in.\n *\n * <p>The country will be detected in order of reliability, like\n *\n * <ul>\n *   <li>Mobile network\n *   <li>Location\n *   <li>SIM's country\n *   <li>Phone's locale\n * </ul>\n *\n * <p>Call the {@link #detectCountry()} to get the available country immediately.\n *\n * <p>To be notified of the future country change, use the {@link #addCountryListener}\n *\n * <p>\n *\n * @hide\n ",
  "links" : [ "#addCountryListener", "#detectCountry()" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ICountryDetector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "HashMap<Consumer<Country>, ListenerTransport>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Country detectCountry()",
    "returnType" : "Country",
    "comment" : "\n     * Start detecting the country that the user is in.\n     *\n     * @return the country if it is available immediately, otherwise null will be returned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addCountryListener(@NonNull CountryListener listener, @Nullable Looper looper)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener to receive the notification when the country is detected or changed.\n     *\n     * @param listener will be called when the country is detected or changed.\n     * @param looper a Looper object whose message queue will be used to implement the callback\n     *     mechanism. If looper is null then the callbacks will be called on the main thread.\n     * @hide\n     * @deprecated client using this api should use {@link\n     *     #registerCountryDetectorCallback(Executor, Consumer)} }\n     ",
    "links" : [ "#registerCountryDetectorCallback(Executor" ]
  }, {
    "name" : "public void removeCountryListener(CountryListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove the listener\n     *\n     * @hide\n     * @deprecated client using this api should use {@link\n     *     #unregisterCountryDetectorCallback(Consumer)}\n     ",
    "links" : [ "#unregisterCountryDetectorCallback(Consumer)" ]
  }, {
    "name" : "public void registerCountryDetectorCallback(@NonNull Executor executor, @NonNull Consumer<Country> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Add a callback interface, to be notified when country code is added or changes.\n     *\n     * @param executor The callback executor for the response.\n     * @param consumer {@link Consumer} callback to receive the country code when changed/detected\n     ",
    "links" : [ "java.util.function.Consumer" ]
  }, {
    "name" : "public void unregisterCountryDetectorCallback(@NonNull Consumer<Country> consumer)",
    "returnType" : "void",
    "comment" : " Remove the callback subscribed to Update country code ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Country detectCountry()", "public void addCountryListener(@NonNull CountryListener listener, @Nullable Looper looper)", "public void removeCountryListener(CountryListener listener)", "public void registerCountryDetectorCallback(@NonNull Executor executor, @NonNull Consumer<Country> consumer)", "public void unregisterCountryDetectorCallback(@NonNull Consumer<Country> consumer)" ],
  "variableNames" : [ "TAG", "mService", "mListeners" ]
}