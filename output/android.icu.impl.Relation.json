{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Relation.java",
  "packageName" : "android.icu.impl",
  "className" : "Relation",
  "comment" : "\n * A Relation is a set of mappings from keys to values.\n * Unlike Map, there is not guaranteed to be a single value per key.\n * The Map-like APIs return collections for values.\n * @author medavis\n * @hide Only a subset of ICU is exposed in Android\n\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "data",
    "type" : "Map<K, Set<V>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "setCreator",
    "type" : "Constructor<? extends Set<V>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "setComparatorParam",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "frozen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Relation<K, V> of(Map<K, Set<V>> map, Class<?> setCreator)",
    "returnType" : "Relation<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Relation<K, V> of(Map<K, Set<V>> map, Class<?> setCreator, Comparator<V> setComparator)",
    "returnType" : "Relation<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsKey(Object key)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsValue(Object value)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Set<Entry<K, V>> entrySet()",
    "returnType" : "Set<Entry<K, V>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<Entry<K, Set<V>>> keyValuesSet()",
    "returnType" : "Set<Entry<K, Set<V>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<Entry<K, V>> keyValueSet()",
    "returnType" : "Set<Entry<K, V>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<V> getAll(Object key)",
    "returnType" : "Set<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<V> get(Object key)",
    "returnType" : "Set<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<K> keySet()",
    "returnType" : "Set<K>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public V put(K key, V value)",
    "returnType" : "V",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public V putAll(K key, Collection<? extends V> values)",
    "returnType" : "V",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public V putAll(Collection<K> keys, V value)",
    "returnType" : "V",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Set<V> newSet()",
    "returnType" : "Set<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void putAll(Map<? extends K, ? extends V> t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void putAll(Relation<? extends K, ? extends V> t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<V> removeAll(K key)",
    "returnType" : "Set<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(K key, V value)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<V> values()",
    "returnType" : "Set<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public C values(C result)",
    "returnType" : "C",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Relation<K, V> addAllInverted(Relation<V, K> source)",
    "returnType" : "Relation<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Relation<K, V> addAllInverted(Map<V, K> source)",
    "returnType" : "Relation<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Relation<K, V> freeze()",
    "returnType" : "Relation<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Relation<K, V> cloneAsThawed()",
    "returnType" : "Relation<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Relation<K, V> toBeRemoved)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Set<V> removeAll(K... keys)",
    "returnType" : "Set<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(K key, Iterable<V> toBeRemoved)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<V> removeAll(Collection<K> toBeRemoved)",
    "returnType" : "Set<V>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Relation<K, V> of(Map<K, Set<V>> map, Class<?> setCreator)", "public static Relation<K, V> of(Map<K, Set<V>> map, Class<?> setCreator, Comparator<V> setComparator)", "public void clear()", "public boolean containsKey(Object key)", "public boolean containsValue(Object value)", "public final Set<Entry<K, V>> entrySet()", "public Set<Entry<K, Set<V>>> keyValuesSet()", "public Set<Entry<K, V>> keyValueSet()", "public boolean equals(Object o)", "public Set<V> getAll(Object key)", "public Set<V> get(Object key)", "public int hashCode()", "public boolean isEmpty()", "public Set<K> keySet()", "public V put(K key, V value)", "public V putAll(K key, Collection<? extends V> values)", "public V putAll(Collection<K> keys, V value)", "private Set<V> newSet()", "public void putAll(Map<? extends K, ? extends V> t)", "public void putAll(Relation<? extends K, ? extends V> t)", "public Set<V> removeAll(K key)", "public boolean remove(K key, V value)", "public int size()", "public Set<V> values()", "public C values(C result)", "public String toString()", "public Relation<K, V> addAllInverted(Relation<V, K> source)", "public Relation<K, V> addAllInverted(Map<V, K> source)", "public boolean isFrozen()", "public Relation<K, V> freeze()", "public Relation<K, V> cloneAsThawed()", "public boolean removeAll(Relation<K, V> toBeRemoved)", "public final Set<V> removeAll(K... keys)", "public boolean removeAll(K key, Iterable<V> toBeRemoved)", "public Set<V> removeAll(Collection<K> toBeRemoved)" ],
  "variableNames" : [ "data", "setCreator", "setComparatorParam", "frozen" ]
}