{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/euicc/EuiccService.java",
  "packageName" : "android.service.euicc",
  "className" : "EuiccService",
  "comment" : "\n * Service interface linking the system with an eUICC local profile assistant (LPA) application.\n *\n * <p>An LPA consists of two separate components (which may both be implemented in the same APK):\n * the LPA backend, and the LPA UI or LUI.\n *\n * <p>To implement the LPA backend, you must extend this class and declare this service in your\n * manifest file. The service must require the\n * {@link android.Manifest.permission#BIND_EUICC_SERVICE} permission and include an intent filter\n * with the {@link #EUICC_SERVICE_INTERFACE} action. It's suggested that the priority of the intent\n * filter to be set to a non-zero value in case multiple implementations are present on the device.\n * See the below example. Note that there will be problem if two LPAs are present and they have the\n * same priority.\n * Example:\n *\n * <pre>{@code\n * <service android:name=\".MyEuiccService\"\n *          android:permission=\"android.permission.BIND_EUICC_SERVICE\">\n *     <intent-filter android:priority=\"100\">\n *         <action android:name=\"android.service.euicc.EuiccService\" />\n *     </intent-filter>\n * </service>\n * }</pre>\n *\n * <p>To implement the LUI, you must provide an activity for the following actions:\n *\n * <ul>\n * <li>{@link #ACTION_MANAGE_EMBEDDED_SUBSCRIPTIONS}\n * <li>{@link #ACTION_PROVISION_EMBEDDED_SUBSCRIPTION}\n * </ul>\n *\n * <p>As with the service, each activity must require the\n * {@link android.Manifest.permission#BIND_EUICC_SERVICE} permission. Each should have an intent\n * filter with the appropriate action, the {@link #CATEGORY_EUICC_UI} category, and a non-zero\n * priority.\n *\n * <p>Old implementations of EuiccService may support passing in slot IDs equal to\n * {@link android.telephony.SubscriptionManager#INVALID_SIM_SLOT_INDEX}, which allows the LPA to\n * decide which eUICC to target when there are multiple eUICCs. This behavior is not supported in\n * Android Q or later.\n *\n * @hide\n ",
  "links" : [ "android.Manifest.permission#BIND_EUICC_SERVICE", "#ACTION_PROVISION_EMBEDDED_SUBSCRIPTION", "#CATEGORY_EUICC_UI", "#ACTION_MANAGE_EMBEDDED_SUBSCRIPTIONS", "#EUICC_SERVICE_INTERFACE", "android.telephony.SubscriptionManager#INVALID_SIM_SLOT_INDEX" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EUICC_SERVICE_INTERFACE",
    "type" : "String",
    "comment" : " Action which must be included in this service's intent filter. ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_EUICC_UI",
    "type" : "String",
    "comment" : " Category which must be defined to all UI actions, for efficient lookup. ",
    "links" : [ ]
  }, {
    "name" : "ACTION_BIND_CARRIER_PROVISIONING_SERVICE",
    "type" : "String",
    "comment" : "\n     * Action used to bind the carrier app and get the activation code from the carrier app. This\n     * activation code will be used to download the eSIM profile during eSIM activation flow.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_START_CARRIER_ACTIVATION",
    "type" : "String",
    "comment" : "\n     * Intent action sent by the LPA to launch a carrier app Activity for eSIM activation, e.g. a\n     * carrier login screen. Carrier apps wishing to support this activation method must implement\n     * an Activity that responds to this intent action. Upon completion, the Activity must return\n     * one of the following results to the LPA:\n     *\n     * <p>{@code Activity.RESULT_CANCELED}: The LPA should treat this as an back button and abort\n     * the activation flow.\n     * <p>{@code Activity.RESULT_OK}: The LPA should try to get an activation code from the carrier\n     * app by binding to the carrier app service implementing\n     * {@link #ACTION_BIND_CARRIER_PROVISIONING_SERVICE}.\n     * <p>{@code Activity.RESULT_OK} with\n     * {@link android.telephony.euicc.EuiccManager#EXTRA_USE_QR_SCANNER} set to true: The LPA should\n     * start a QR scanner for the user to scan an eSIM profile QR code.\n     * <p>For other results: The LPA should treat this as an error.\n     *",
    "links" : [ "android.telephony.euicc.EuiccManager#EXTRA_USE_QR_SCANNER", "#ACTION_BIND_CARRIER_PROVISIONING_SERVICE" ]
  }, {
    "name" : "ACTION_MANAGE_EMBEDDED_SUBSCRIPTIONS",
    "type" : "String",
    "comment" : "\n     * @see android.telephony.euicc.EuiccManager#ACTION_MANAGE_EMBEDDED_SUBSCRIPTIONS\n     * The difference is this one is used by system to bring up the LUI.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PROVISION_EMBEDDED_SUBSCRIPTION",
    "type" : "String",
    "comment" : " @see android.telephony.euicc.EuiccManager#ACTION_PROVISION_EMBEDDED_SUBSCRIPTION ",
    "links" : [ ]
  }, {
    "name" : "ACTION_TRANSFER_EMBEDDED_SUBSCRIPTIONS",
    "type" : "String",
    "comment" : " @see android.telephony.euicc.EuiccManager#ACTION_TRANSFER_EMBEDDED_SUBSCRIPTIONS ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONVERT_TO_EMBEDDED_SUBSCRIPTION",
    "type" : "String",
    "comment" : " @see android.telephony.euicc.EuiccManager#ACTION_CONVERT_TO_EMBEDDED_SUBSCRIPTION ",
    "links" : [ ]
  }, {
    "name" : "ACTION_TOGGLE_SUBSCRIPTION_PRIVILEGED",
    "type" : "String",
    "comment" : "\n     * @see android.telephony.euicc.EuiccManager#ACTION_TOGGLE_SUBSCRIPTION_PRIVILEGED. This is\n     * a protected intent that can only be sent by the system, and requires the\n     * {@link android.Manifest.permission#BIND_EUICC_SERVICE} permission.\n     ",
    "links" : [ "android.Manifest.permission#BIND_EUICC_SERVICE" ]
  }, {
    "name" : "ACTION_DELETE_SUBSCRIPTION_PRIVILEGED",
    "type" : "String",
    "comment" : "\n     * @see android.telephony.euicc.EuiccManager#ACTION_DELETE_SUBSCRIPTION_PRIVILEGED. This is\n     * a protected intent that can only be sent by the system, and requires the\n     * {@link android.Manifest.permission#BIND_EUICC_SERVICE} permission.\n     ",
    "links" : [ "android.Manifest.permission#BIND_EUICC_SERVICE" ]
  }, {
    "name" : "ACTION_RENAME_SUBSCRIPTION_PRIVILEGED",
    "type" : "String",
    "comment" : "\n     * @see android.telephony.euicc.EuiccManager#ACTION_RENAME_SUBSCRIPTION_PRIVILEGED. This is\n     * a protected intent that can only be sent by the system, and requires the\n     * {@link android.Manifest.permission#BIND_EUICC_SERVICE} permission.\n     ",
    "links" : [ "android.Manifest.permission#BIND_EUICC_SERVICE" ]
  }, {
    "name" : "ACTION_START_EUICC_ACTIVATION",
    "type" : "String",
    "comment" : "\n     * @see android.telephony.euicc.EuiccManager#ACTION_START_EUICC_ACTIVATION. This is\n     * a protected intent that can only be sent by the system, and requires the\n     * {@link android.Manifest.permission#BIND_EUICC_SERVICE} permission.\n     ",
    "links" : [ "android.Manifest.permission#BIND_EUICC_SERVICE" ]
  }, {
    "name" : "ACTION_RESOLVE_DEACTIVATE_SIM",
    "type" : "String",
    "comment" : "\n     * Alert the user that this action will result in an active SIM being deactivated.\n     * To implement the LUI triggered by the system, you need to define this in AndroidManifest.xml.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESOLVE_NO_PRIVILEGES",
    "type" : "String",
    "comment" : "\n     * Alert the user about a download/switch being done for an app that doesn't currently have\n     * carrier privileges.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESOLVE_CONFIRMATION_CODE",
    "type" : "String",
    "comment" : "\n     * Ask the user to input carrier confirmation code.\n     *\n     * @deprecated From Q, the resolvable errors happened in the download step are presented as\n     * bit map in {@link #EXTRA_RESOLVABLE_ERRORS}. The corresponding action would be\n     * {@link #ACTION_RESOLVE_RESOLVABLE_ERRORS}.\n     ",
    "links" : [ "#EXTRA_RESOLVABLE_ERRORS", "#ACTION_RESOLVE_RESOLVABLE_ERRORS" ]
  }, {
    "name" : "ACTION_RESOLVE_RESOLVABLE_ERRORS",
    "type" : "String",
    "comment" : " Ask the user to resolve all the resolvable errors. ",
    "links" : [ ]
  }, {
    "name" : "RESOLVABLE_ERROR_CONFIRMATION_CODE",
    "type" : "int",
    "comment" : "\n     * Possible value for the bit map of resolvable errors indicating the download process needs\n     * the user to input confirmation code.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESOLVABLE_ERROR_POLICY_RULES",
    "type" : "int",
    "comment" : "\n     * Possible value for the bit map of resolvable errors indicating the download process needs\n     * the user's consent to allow profile policy rules.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESOLUTION_CALLING_PACKAGE",
    "type" : "String",
    "comment" : "\n     * Intent extra set for resolution requests containing the package name of the calling app.\n     * This is used by the above actions including ACTION_RESOLVE_DEACTIVATE_SIM,\n     * ACTION_RESOLVE_NO_PRIVILEGES and ACTION_RESOLVE_RESOLVABLE_ERRORS.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESOLVABLE_ERRORS",
    "type" : "String",
    "comment" : "\n     * Intent extra set for resolution requests containing the list of resolvable errors to be\n     * resolved. Each resolvable error is an integer. Its possible values include:\n     * <UL>\n     * <LI>{@link #RESOLVABLE_ERROR_CONFIRMATION_CODE}\n     * <LI>{@link #RESOLVABLE_ERROR_POLICY_RULES}\n     * </UL>\n     ",
    "links" : [ "#RESOLVABLE_ERROR_CONFIRMATION_CODE", "#RESOLVABLE_ERROR_POLICY_RULES" ]
  }, {
    "name" : "EXTRA_RESOLUTION_CONFIRMATION_CODE_RETRIED",
    "type" : "String",
    "comment" : "\n     * Intent extra set for resolution requests containing a boolean indicating whether to ask the\n     * user to retry another confirmation code.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESOLUTION_CARD_ID",
    "type" : "String",
    "comment" : "\n     * Intent extra set for resolution requests containing an int indicating the current card Id.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESOLUTION_SUBSCRIPTION_ID",
    "type" : "String",
    "comment" : "\n     * Intent extra set for resolution requests containing an int indicating the subscription id\n     * to be enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESOLUTION_PORT_INDEX",
    "type" : "String",
    "comment" : "\n     * Intent extra set for resolution requests containing an int indicating the current port index.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESOLUTION_USE_PORT_INDEX",
    "type" : "String",
    "comment" : "\n     * Intent extra set for resolution requests containing a bool indicating whether to use the\n     * given port index. For example, if {@link #switchToSubscription(int, PendingIntent)} is\n     * called, then no portIndex has been provided by the caller, and this extra will be false.\n     ",
    "links" : [ "#switchToSubscription(int" ]
  }, {
    "name" : "RESULT_OK",
    "type" : "int",
    "comment" : " Result code for a successful operation. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_MUST_DEACTIVATE_SIM",
    "type" : "int",
    "comment" : " Result code indicating that an active SIM must be deactivated to perform the operation. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_RESOLVABLE_ERRORS",
    "type" : "int",
    "comment" : " Result code indicating that the user must resolve resolvable errors. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_NEED_CONFIRMATION_CODE",
    "type" : "int",
    "comment" : "\n     * Result code indicating that the user must input a carrier confirmation code.\n     *\n     * @deprecated From Q, the resolvable errors happened in the download step are presented as\n     * bit map in {@link #EXTRA_RESOLVABLE_ERRORS}. The corresponding result would be\n     * {@link #RESULT_RESOLVABLE_ERRORS}.\n     ",
    "links" : [ "#EXTRA_RESOLVABLE_ERRORS", "#RESULT_RESOLVABLE_ERRORS" ]
  }, {
    "name" : "RESULT_FIRST_USER",
    "type" : "int",
    "comment" : " Start of implementation-specific error results. ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESOLUTION_CONSENT",
    "type" : "String",
    "comment" : "\n     * Boolean extra for resolution actions indicating whether the user granted consent.\n     * This is used and set by the implementation and used in {@code EuiccOperation}.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESOLUTION_CONFIRMATION_CODE",
    "type" : "String",
    "comment" : "\n     * String extra for resolution actions indicating the carrier confirmation code.\n     * This is used and set by the implementation and used in {@code EuiccOperation}.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESOLUTION_ALLOW_POLICY_RULES",
    "type" : "String",
    "comment" : "\n     * String extra for resolution actions indicating whether the user allows policy rules.\n     * This is used and set by the implementation and used in {@code EuiccOperation}.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStubWrapper",
    "type" : "IEuiccService.Stub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "ThreadPoolExecutor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int encodeSmdxSubjectAndReasonCode(@Nullable String subjectCode, @Nullable String reasonCode)",
    "returnType" : "int",
    "comment" : "\n     * Given a SubjectCode[5.2.6.1] and ReasonCode[5.2.6.2] from GSMA (SGP.22 v2.2), encode it to\n     * the format described in\n     * {@link android.telephony.euicc.EuiccManager#OPERATION_SMDX_SUBJECT_REASON_CODE}\n     *\n     * @param subjectCode SubjectCode[5.2.6.1] from GSMA (SGP.22 v2.2)\n     * @param reasonCode  ReasonCode[5.2.6.2] from GSMA (SGP.22 v2.2)\n     * @return encoded error code described in\n     * {@link android.telephony.euicc.EuiccManager#OPERATION_SMDX_SUBJECT_REASON_CODE}\n     * @throws NumberFormatException         when the Subject/Reason code contains non digits\n     * @throws IllegalArgumentException      when Subject/Reason code is null/empty\n     * @throws UnsupportedOperationException when sections has more than four layers (e.g 5.8.1.2)\n     *                                       or when an number is bigger than 15\n     ",
    "links" : [ "android.telephony.euicc.EuiccManager#OPERATION_SMDX_SUBJECT_REASON_CODE" ]
  }, {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "\n     * If overriding this method, call through to the super method for any unknown actions.\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String onGetEid(int slotId)",
    "returnType" : "String",
    "comment" : " TODO(b/36260308): Update doc when we have multi-SIM support.",
    "links" : [ ]
  }, {
    "name" : "public abstract int onGetOtaStatus(int slotId)",
    "returnType" : "int",
    "comment" : "\n     * Return the status of OTA update.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @return The status of Euicc OTA update.\n     * @see android.telephony.euicc.EuiccManager#getOtaStatus\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onStartOtaIfNecessary(int slotId, OtaStatusChangedCallback statusChangedCallback)",
    "returnType" : "void",
    "comment" : "\n     * Perform OTA if current OS is not the latest one.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @param statusChangedCallback Function called when OTA status changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract GetDownloadableSubscriptionMetadataResult onGetDownloadableSubscriptionMetadata(int slotId, DownloadableSubscription subscription, boolean forceDeactivateSim)",
    "returnType" : "GetDownloadableSubscriptionMetadataResult",
    "comment" : "\n     * Populate {@link DownloadableSubscription} metadata for the given downloadable subscription.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @param subscription A subscription whose metadata needs to be populated.\n     * @param forceDeactivateSim If true, and if an active SIM must be deactivated to access the\n     *     eUICC, perform this action automatically. Otherwise, {@link #RESULT_MUST_DEACTIVATE_SIM)}\n     *     should be returned to allow the user to consent to this operation first.\n     * @return The result of the operation.\n     * @see android.telephony.euicc.EuiccManager#getDownloadableSubscriptionMetadata\n     ",
    "links" : [ "#RESULT_MUST_DEACTIVATE_SIM)", "android.telephony.euicc.DownloadableSubscription" ]
  }, {
    "name" : "public GetDownloadableSubscriptionMetadataResult onGetDownloadableSubscriptionMetadata(int slotId, int portIndex, @NonNull DownloadableSubscription subscription, boolean forceDeactivateSim)",
    "returnType" : "GetDownloadableSubscriptionMetadataResult",
    "comment" : "\n     * Populate {@link DownloadableSubscription} metadata for the given downloadable subscription.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @param portIndex Index of the port from the slot. portIndex is used if the eUICC must\n     *     be activated to perform the operation.\n     * @param subscription A subscription whose metadata needs to be populated.\n     * @param forceDeactivateSim If true, and if an active SIM must be deactivated to access the\n     *     eUICC, perform this action automatically. Otherwise, {@link #RESULT_MUST_DEACTIVATE_SIM}\n     *     should be returned to allow the user to consent to this operation first.\n     * @return The result of the operation.\n     * @see android.telephony.euicc.EuiccManager#getDownloadableSubscriptionMetadata\n     ",
    "links" : [ "android.telephony.euicc.DownloadableSubscription", "#RESULT_MUST_DEACTIVATE_SIM" ]
  }, {
    "name" : "public abstract GetDefaultDownloadableSubscriptionListResult onGetDefaultDownloadableSubscriptionList(int slotId, boolean forceDeactivateSim)",
    "returnType" : "GetDefaultDownloadableSubscriptionListResult",
    "comment" : "\n     * Return metadata for subscriptions which are available for download for this device.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @param forceDeactivateSim If true, and if an active SIM must be deactivated to access the\n     *     eUICC, perform this action automatically. Otherwise, {@link #RESULT_MUST_DEACTIVATE_SIM)}\n     *     should be returned to allow the user to consent to this operation first.\n     * @return The result of the list operation.\n     * @see android.telephony.euicc.EuiccManager#getDefaultDownloadableSubscriptionList\n     ",
    "links" : [ "#RESULT_MUST_DEACTIVATE_SIM)" ]
  }, {
    "name" : "public DownloadSubscriptionResult onDownloadSubscription(int slotId, @NonNull DownloadableSubscription subscription, boolean switchAfterDownload, boolean forceDeactivateSim, @Nullable Bundle resolvedBundle)",
    "returnType" : "DownloadSubscriptionResult",
    "comment" : "\n     * Download the given subscription.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @param subscription The subscription to download.\n     * @param switchAfterDownload If true, the subscription should be enabled upon successful\n     *     download.\n     * @param forceDeactivateSim If true, and if an active SIM must be deactivated to access the\n     *     eUICC, perform this action automatically. Otherwise, {@link #RESULT_MUST_DEACTIVATE_SIM}\n     *     should be returned to allow the user to consent to this operation first.\n     * @param resolvedBundle The bundle containing information on resolved errors. It can contain\n     *     a string of confirmation code for the key {@link #EXTRA_RESOLUTION_CONFIRMATION_CODE},\n     *     and a boolean for key {@link #EXTRA_RESOLUTION_ALLOW_POLICY_RULES} indicating whether\n     *     the user allows profile policy rules or not.\n     * @return a DownloadSubscriptionResult instance including a result code, a resolvable errors\n     *     bit map, and original the card Id. The result code may be one of the predefined\n     *     {@code RESULT_} constants or any implementation-specific code starting with\n     *     {@link #RESULT_FIRST_USER}. The resolvable error bit map can be either 0 or values\n     *     defined in {@code RESOLVABLE_ERROR_}. A subclass should override this method. Otherwise,\n     *     this method does nothing and returns null by default.\n     * @see android.telephony.euicc.EuiccManager#downloadSubscription\n     * @deprecated prefer {@link #onDownloadSubscription(int, int,\n     *     DownloadableSubscription, boolean, boolean, Bundle)}\n     ",
    "links" : [ "#RESULT_FIRST_USER", "#onDownloadSubscription(int", "#EXTRA_RESOLUTION_ALLOW_POLICY_RULES", "#RESULT_MUST_DEACTIVATE_SIM", "#EXTRA_RESOLUTION_CONFIRMATION_CODE" ]
  }, {
    "name" : "public DownloadSubscriptionResult onDownloadSubscription(int slotIndex, int portIndex, @NonNull DownloadableSubscription subscription, boolean switchAfterDownload, boolean forceDeactivateSim, @NonNull Bundle resolvedBundle)",
    "returnType" : "DownloadSubscriptionResult",
    "comment" : "\n     * Download the given subscription.\n     *\n     * @param slotIndex Index of the SIM slot to use for the operation.\n     * @param portIndex Index of the port from the slot. portIndex is used when\n     *     switchAfterDownload is set to {@code true}, otherwise download is port agnostic.\n     * @param subscription The subscription to download.\n     * @param switchAfterDownload If true, the subscription should be enabled upon successful\n     *     download.\n     * @param forceDeactivateSim If true, and if an active SIM must be deactivated to access the\n     *     eUICC, perform this action automatically. Otherwise, {@link #RESULT_MUST_DEACTIVATE_SIM}\n     *     should be returned to allow the user to consent to this operation first.\n     * @param resolvedBundle The bundle containing information on resolved errors. It can contain\n     *     a string of confirmation code for the key {@link #EXTRA_RESOLUTION_CONFIRMATION_CODE},\n     *     and a boolean for key {@link #EXTRA_RESOLUTION_ALLOW_POLICY_RULES} indicating whether\n     *     the user allows profile policy rules or not.\n     * @return a DownloadSubscriptionResult instance including a result code, a resolvable errors\n     *     bit map, and original the card Id. The result code may be one of the predefined\n     *     {@code RESULT_} constants or any implementation-specific code starting with\n     *     {@link #RESULT_FIRST_USER}. The resolvable error bit map can be either 0 or values\n     *     defined in {@code RESOLVABLE_ERROR_}.\n     * @see android.telephony.euicc.EuiccManager#downloadSubscription\n     ",
    "links" : [ "#RESULT_FIRST_USER", "#EXTRA_RESOLUTION_ALLOW_POLICY_RULES", "#RESULT_MUST_DEACTIVATE_SIM", "#EXTRA_RESOLUTION_CONFIRMATION_CODE" ]
  }, {
    "name" : "public int onDownloadSubscription(int slotId, @NonNull DownloadableSubscription subscription, boolean switchAfterDownload, boolean forceDeactivateSim)",
    "returnType" : "int",
    "comment" : "\n     * Download the given subscription.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @param subscription The subscription to download.\n     * @param switchAfterDownload If true, the subscription should be enabled upon successful\n     *     download.\n     * @param forceDeactivateSim If true, and if an active SIM must be deactivated to access the\n     *     eUICC, perform this action automatically. Otherwise, {@link #RESULT_MUST_DEACTIVATE_SIM}\n     *     should be returned to allow the user to consent to this operation first.\n     * @return the result of the download operation. May be one of the predefined {@code RESULT_}\n     *     constants or any implementation-specific code starting with {@link #RESULT_FIRST_USER}.\n     * @see android.telephony.euicc.EuiccManager#downloadSubscription\n     *\n     * @deprecated From Q, a subclass should use and override the above\n     * {@link #onDownloadSubscription(int, DownloadableSubscription, boolean, boolean, Bundle)}. The\n     * default return value for this one is Integer.MIN_VALUE.\n     ",
    "links" : [ "#RESULT_FIRST_USER", "#onDownloadSubscription(int", "#RESULT_MUST_DEACTIVATE_SIM" ]
  }, {
    "name" : "public abstract GetEuiccProfileInfoListResult onGetEuiccProfileInfoList(int slotId)",
    "returnType" : "GetEuiccProfileInfoListResult",
    "comment" : "\n     * Return a list of all @link EuiccProfileInfo}s.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @return The result of the operation.\n     * @see android.telephony.SubscriptionManager#getAvailableSubscriptionInfoList\n     * @see android.telephony.SubscriptionManager#getAccessibleSubscriptionInfoList\n     ",
    "links" : [ "android.service.euicc.EuiccProfileInfo" ]
  }, {
    "name" : "public abstract EuiccInfo onGetEuiccInfo(int slotId)",
    "returnType" : "EuiccInfo",
    "comment" : "\n     * Return info about the eUICC chip/device.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @return the {@link EuiccInfo} for the eUICC chip/device.\n     * @see android.telephony.euicc.EuiccManager#getEuiccInfo\n     ",
    "links" : [ "android.telephony.euicc.EuiccInfo" ]
  }, {
    "name" : "public abstract int onDeleteSubscription(int slotId, String iccid)",
    "returnType" : "int",
    "comment" : "\n     * Delete the given subscription.\n     *\n     * <p>If the subscription is currently active, it should be deactivated first (equivalent to a\n     * physical SIM being ejected).\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @param iccid the ICCID of the subscription to delete.\n     * @return the result of the delete operation. May be one of the predefined {@code RESULT_}\n     *     constants or any implementation-specific code starting with {@link #RESULT_FIRST_USER}.\n     * @see android.telephony.euicc.EuiccManager#deleteSubscription\n     ",
    "links" : [ "#RESULT_FIRST_USER" ]
  }, {
    "name" : "public abstract int onSwitchToSubscription(int slotId, @Nullable String iccid, boolean forceDeactivateSim)",
    "returnType" : "int",
    "comment" : "\n     * Switch to the given subscription.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @param iccid the ICCID of the subscription to enable. May be null, in which case the current\n     *     profile should be deactivated and no profile should be activated to replace it - this is\n     *     equivalent to a physical SIM being ejected.\n     * @param forceDeactivateSim If true, and if an active SIM must be deactivated to access the\n     *     eUICC, perform this action automatically. Otherwise, {@link #RESULT_MUST_DEACTIVATE_SIM}\n     *     should be returned to allow the user to consent to this operation first.\n     * @return the result of the switch operation. May be one of the predefined {@code RESULT_}\n     *     constants or any implementation-specific code starting with {@link #RESULT_FIRST_USER}.\n     * @see android.telephony.euicc.EuiccManager#switchToSubscription\n     *\n     * @deprecated prefer {@link #onSwitchToSubscriptionWithPort(int, int, String, boolean)}\n     ",
    "links" : [ "#RESULT_FIRST_USER", "#RESULT_MUST_DEACTIVATE_SIM", "#onSwitchToSubscriptionWithPort(int" ]
  }, {
    "name" : "public int onSwitchToSubscriptionWithPort(int slotId, int portIndex, @Nullable String iccid, boolean forceDeactivateSim)",
    "returnType" : "int",
    "comment" : "\n     * Switch to the given subscription.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @param portIndex which port on the eUICC to use\n     * @param iccid the ICCID of the subscription to enable. May be null, in which case the current\n     *     profile should be deactivated and no profile should be activated to replace it - this is\n     *     equivalent to a physical SIM being ejected.\n     * @param forceDeactivateSim If true, and if an active SIM must be deactivated to access the\n     *     eUICC, perform this action automatically. Otherwise, {@link #RESULT_MUST_DEACTIVATE_SIM}\n     *     should be returned to allow the user to consent to this operation first.\n     * @return the result of the switch operation. May be one of the predefined {@code RESULT_}\n     *     constants or any implementation-specific code starting with {@link #RESULT_FIRST_USER}.\n     * @see android.telephony.euicc.EuiccManager#switchToSubscription\n     ",
    "links" : [ "#RESULT_FIRST_USER", "#RESULT_MUST_DEACTIVATE_SIM" ]
  }, {
    "name" : "public abstract int onUpdateSubscriptionNickname(int slotId, String iccid, String nickname)",
    "returnType" : "int",
    "comment" : "\n     * Update the nickname of the given subscription.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @param iccid the ICCID of the subscription to update.\n     * @param nickname the new nickname to apply.\n     * @return the result of the update operation. May be one of the predefined {@code RESULT_}\n     *     constants or any implementation-specific code starting with {@link #RESULT_FIRST_USER}.\n     * @see android.telephony.euicc.EuiccManager#updateSubscriptionNickname\n     ",
    "links" : [ "#RESULT_FIRST_USER" ]
  }, {
    "name" : "public abstract int onEraseSubscriptions(int slotId)",
    "returnType" : "int",
    "comment" : "\n     * Erase all operational subscriptions on the device.\n     *\n     * <p>This is intended to be used for device resets. As such, the reset should be performed even\n     * if an active SIM must be deactivated in order to access the eUICC.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @return the result of the erase operation. May be one of the predefined {@code RESULT_}\n     *     constants or any implementation-specific code starting with {@link #RESULT_FIRST_USER}.\n     * @see android.telephony.euicc.EuiccManager#eraseSubscriptions\n     *\n     * @deprecated From R, callers should specify a flag for specific set of subscriptions to erase\n     * and use {@link #onEraseSubscriptions(int, int)} instead\n     ",
    "links" : [ "#RESULT_FIRST_USER", "#onEraseSubscriptions(int" ]
  }, {
    "name" : "public int onEraseSubscriptions(int slotIndex, @ResetOption int options)",
    "returnType" : "int",
    "comment" : "\n     * Erase specific subscriptions on the device.\n     *\n     * <p>This is intended to be used for device resets. As such, the reset should be performed even\n     * if an active SIM must be deactivated in order to access the eUICC.\n     *\n     * @param slotIndex index of the SIM slot to use for the operation.\n     * @param options flag for specific group of subscriptions to erase\n     * @return the result of the erase operation. May be one of the predefined {@code RESULT_}\n     *     constants or any implementation-specific code starting with {@link #RESULT_FIRST_USER}.\n     * @see android.telephony.euicc.EuiccManager#eraseSubscriptionsWithOptions\n     ",
    "links" : [ "#RESULT_FIRST_USER" ]
  }, {
    "name" : "public abstract int onRetainSubscriptionsForFactoryReset(int slotId)",
    "returnType" : "int",
    "comment" : "\n     * Ensure that subscriptions will be retained on the next factory reset.\n     *\n     * <p>Called directly before a factory reset. Assumes that a normal factory reset will lead to\n     * profiles being erased on first boot (to cover fastboot/recovery wipes), so the implementation\n     * should persist some bit that will remain accessible after the factory reset to bypass this\n     * flow when this method is called.\n     *\n     * @param slotId ID of the SIM slot to use for the operation.\n     * @return the result of the operation. May be one of the predefined {@code RESULT_} constants\n     *     or any implementation-specific code starting with {@link #RESULT_FIRST_USER}.\n     ",
    "links" : [ "#RESULT_FIRST_USER" ]
  }, {
    "name" : "public long onGetAvailableMemoryInBytes(int slotId)",
    "returnType" : "long",
    "comment" : "\n     * Return the available memory in bytes of the eUICC.\n     *\n     * @param slotId ID of the SIM slot being queried.\n     * @return the available memory in bytes.\n     * @see android.telephony.euicc.EuiccManager#getAvailableMemoryInBytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(@NonNull PrintWriter printWriter)",
    "returnType" : "void",
    "comment" : "\n     * Dump to a provided printWriter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String resultToString(@Result int result)",
    "returnType" : "String",
    "comment" : "\n     * Result code to string\n     *\n     * @param result The result code.\n     * @return The result code in string format.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int encodeSmdxSubjectAndReasonCode(@Nullable String subjectCode, @Nullable String reasonCode)", "public void onCreate()", "public void onDestroy()", "public IBinder onBind(Intent intent)", "public abstract String onGetEid(int slotId)", "public abstract int onGetOtaStatus(int slotId)", "public abstract void onStartOtaIfNecessary(int slotId, OtaStatusChangedCallback statusChangedCallback)", "public abstract GetDownloadableSubscriptionMetadataResult onGetDownloadableSubscriptionMetadata(int slotId, DownloadableSubscription subscription, boolean forceDeactivateSim)", "public GetDownloadableSubscriptionMetadataResult onGetDownloadableSubscriptionMetadata(int slotId, int portIndex, @NonNull DownloadableSubscription subscription, boolean forceDeactivateSim)", "public abstract GetDefaultDownloadableSubscriptionListResult onGetDefaultDownloadableSubscriptionList(int slotId, boolean forceDeactivateSim)", "public DownloadSubscriptionResult onDownloadSubscription(int slotId, @NonNull DownloadableSubscription subscription, boolean switchAfterDownload, boolean forceDeactivateSim, @Nullable Bundle resolvedBundle)", "public DownloadSubscriptionResult onDownloadSubscription(int slotIndex, int portIndex, @NonNull DownloadableSubscription subscription, boolean switchAfterDownload, boolean forceDeactivateSim, @NonNull Bundle resolvedBundle)", "public int onDownloadSubscription(int slotId, @NonNull DownloadableSubscription subscription, boolean switchAfterDownload, boolean forceDeactivateSim)", "public abstract GetEuiccProfileInfoListResult onGetEuiccProfileInfoList(int slotId)", "public abstract EuiccInfo onGetEuiccInfo(int slotId)", "public abstract int onDeleteSubscription(int slotId, String iccid)", "public abstract int onSwitchToSubscription(int slotId, @Nullable String iccid, boolean forceDeactivateSim)", "public int onSwitchToSubscriptionWithPort(int slotId, int portIndex, @Nullable String iccid, boolean forceDeactivateSim)", "public abstract int onUpdateSubscriptionNickname(int slotId, String iccid, String nickname)", "public abstract int onEraseSubscriptions(int slotId)", "public int onEraseSubscriptions(int slotIndex, @ResetOption int options)", "public abstract int onRetainSubscriptionsForFactoryReset(int slotId)", "public long onGetAvailableMemoryInBytes(int slotId)", "public void dump(@NonNull PrintWriter printWriter)", "public static String resultToString(@Result int result)" ],
  "variableNames" : [ "TAG", "EUICC_SERVICE_INTERFACE", "CATEGORY_EUICC_UI", "ACTION_BIND_CARRIER_PROVISIONING_SERVICE", "ACTION_START_CARRIER_ACTIVATION", "ACTION_MANAGE_EMBEDDED_SUBSCRIPTIONS", "ACTION_PROVISION_EMBEDDED_SUBSCRIPTION", "ACTION_TRANSFER_EMBEDDED_SUBSCRIPTIONS", "ACTION_CONVERT_TO_EMBEDDED_SUBSCRIPTION", "ACTION_TOGGLE_SUBSCRIPTION_PRIVILEGED", "ACTION_DELETE_SUBSCRIPTION_PRIVILEGED", "ACTION_RENAME_SUBSCRIPTION_PRIVILEGED", "ACTION_START_EUICC_ACTIVATION", "ACTION_RESOLVE_DEACTIVATE_SIM", "ACTION_RESOLVE_NO_PRIVILEGES", "ACTION_RESOLVE_CONFIRMATION_CODE", "ACTION_RESOLVE_RESOLVABLE_ERRORS", "RESOLVABLE_ERROR_CONFIRMATION_CODE", "RESOLVABLE_ERROR_POLICY_RULES", "EXTRA_RESOLUTION_CALLING_PACKAGE", "EXTRA_RESOLVABLE_ERRORS", "EXTRA_RESOLUTION_CONFIRMATION_CODE_RETRIED", "EXTRA_RESOLUTION_CARD_ID", "EXTRA_RESOLUTION_SUBSCRIPTION_ID", "EXTRA_RESOLUTION_PORT_INDEX", "EXTRA_RESOLUTION_USE_PORT_INDEX", "RESULT_OK", "RESULT_MUST_DEACTIVATE_SIM", "RESULT_RESOLVABLE_ERRORS", "RESULT_NEED_CONFIRMATION_CODE", "RESULT_FIRST_USER", "EXTRA_RESOLUTION_CONSENT", "EXTRA_RESOLUTION_CONFIRMATION_CODE", "EXTRA_RESOLUTION_ALLOW_POLICY_RULES", "mStubWrapper", "mExecutor" ]
}