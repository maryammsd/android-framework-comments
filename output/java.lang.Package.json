{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Package.java",
  "packageName" : "java.lang",
  "className" : "Package",
  "comment" : "\n * {@code Package} objects contain version information\n * about the implementation and specification of a Java package.\n * This versioning information is retrieved and made available\n * by the {@link ClassLoader} instance that\n * loaded the class(es).  Typically, it is stored in the manifest that is\n * distributed with the classes.\n *\n * <p>The set of classes that make up the package may implement a\n * particular specification and if so the specification title, version number,\n * and vendor strings identify that specification.\n * An application can ask if the package is\n * compatible with a particular version, see the {@link\n * #isCompatibleWith isCompatibleWith}\n * method for details.\n *\n * <p>Specification version numbers use a syntax that consists of nonnegative\n * decimal integers separated by periods \".\", for example \"2.0\" or\n * \"1.2.3.4.5.6.7\".  This allows an extensible number to be used to represent\n * major, minor, micro, etc. versions.  The version specification is described\n * by the following formal grammar:\n * <blockquote>\n * <dl>\n * <dt><i>SpecificationVersion:</i>\n * <dd><i>Digits RefinedVersion<sub>opt</sub></i>\n\n * <dt><i>RefinedVersion:</i>\n * <dd>{@code .} <i>Digits</i>\n * <dd>{@code .} <i>Digits RefinedVersion</i>\n *\n * <dt><i>Digits:</i>\n * <dd><i>Digit</i>\n * <dd><i>Digits</i>\n *\n * <dt><i>Digit:</i>\n * <dd>any character for which {@link Character#isDigit} returns {@code true},\n * e.g. 0, 1, 2, ...\n * </dl>\n * </blockquote>\n *\n * <p>The implementation title, version, and vendor strings identify an\n * implementation and are made available conveniently to enable accurate\n * reporting of the packages involved when a problem occurs. The contents\n * all three implementation strings are vendor specific. The\n * implementation version strings have no specified syntax and should\n * only be compared for equality with desired version identifiers.\n *\n * <p>Within each {@code ClassLoader} instance all classes from the same\n * java package have the same Package object.  The static methods allow a package\n * to be found by name or the set of all packages known to the current class\n * loader to be found.\n *\n * @see ClassLoader#definePackage\n ",
  "links" : [ "#isCompatibleWith", "java.lang.ClassLoader", "java.lang.Character#isDigit" ],
  "variables" : [ {
    "name" : "pkgs",
    "type" : "Map<String, Package>",
    "comment" : " The map of loaded system packages",
    "links" : [ ]
  }, {
    "name" : "urls",
    "type" : "Map<String, URL>",
    "comment" : " Maps each directory or zip file name to its corresponding url",
    "links" : [ ]
  }, {
    "name" : "mans",
    "type" : "Map<String, Manifest>",
    "comment" : " Maps each code source url for a jar file to its manifest",
    "links" : [ ]
  }, {
    "name" : "pkgName",
    "type" : "String",
    "comment" : "\n     * Private storage for the package name and attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "specTitle",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "specVersion",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "specVendor",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "implTitle",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "implVersion",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "implVendor",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sealBase",
    "type" : "URL",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "loader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "packageInfo",
    "type" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Return the name of this package.\n     *\n     * @return  The fully-qualified name of this package as defined in section 6.5.3 of\n     *          <cite>The Java&trade; Language Specification</cite>,\n     *          for example, {@code java.lang}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSpecificationTitle()",
    "returnType" : "String",
    "comment" : "\n     * Return the title of the specification that this package implements.\n     * @return the specification title, null is returned if it is not known.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSpecificationVersion()",
    "returnType" : "String",
    "comment" : "\n     * Returns the version number of the specification\n     * that this package implements.\n     * This version string must be a sequence of nonnegative decimal\n     * integers separated by \".\"'s and may have leading zeros.\n     * When version strings are compared the most significant\n     * numbers are compared.\n     * @return the specification version, null is returned if it is not known.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSpecificationVendor()",
    "returnType" : "String",
    "comment" : "\n     * Return the name of the organization, vendor,\n     * or company that owns and maintains the specification\n     * of the classes that implement this package.\n     * @return the specification vendor, null is returned if it is not known.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getImplementationTitle()",
    "returnType" : "String",
    "comment" : "\n     * Return the title of this package.\n     * @return the title of the implementation, null is returned if it is not known.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getImplementationVersion()",
    "returnType" : "String",
    "comment" : "\n     * Return the version of this implementation. It consists of any string\n     * assigned by the vendor of this implementation and does\n     * not have any particular syntax specified or expected by the Java\n     * runtime. It may be compared for equality with other\n     * package version strings used for this implementation\n     * by this vendor for this package.\n     * @return the version of the implementation, null is returned if it is not known.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getImplementationVendor()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the organization,\n     * vendor or company that provided this implementation.\n     * @return the vendor that implemented this package..\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSealed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this package is sealed.\n     *\n     * @return true if the package is sealed, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSealed(URL url)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this package is sealed with respect to the specified\n     * code source url.\n     *\n     * @param url the code source url\n     * @return true if this package is sealed with respect to url\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCompatibleWith(String desired) throws NumberFormatException",
    "returnType" : "boolean",
    "comment" : "\n     * Compare this package's specification version with a\n     * desired version. It returns true if\n     * this packages specification version number is greater than or equal\n     * to the desired version number. <p>\n     *\n     * Version numbers are compared by sequentially comparing corresponding\n     * components of the desired and specification strings.\n     * Each component is converted as a decimal integer and the values\n     * compared.\n     * If the specification value is greater than the desired\n     * value true is returned. If the value is less false is returned.\n     * If the values are equal the period is skipped and the next pair of\n     * components is compared.\n     *\n     * @param desired the version string of the desired version.\n     * @return true if this package's version number is greater\n     *          than or equal to the desired version number\n     *\n     * @exception NumberFormatException if the desired or current version\n     *          is not of the correct dotted form.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Package getPackage(String name)",
    "returnType" : "Package",
    "comment" : "\n     * Find a package by name in the callers {@code ClassLoader} instance.\n     * The callers {@code ClassLoader} instance is used to find the package\n     * instance corresponding to the named class. If the callers\n     * {@code ClassLoader} instance is null then the set of packages loaded\n     * by the system {@code ClassLoader} instance is searched to find the\n     * named package. <p>\n     *\n     * Packages have attributes for versions and specifications only if the class\n     * loader created the package instance with the appropriate attributes. Typically,\n     * those attributes are defined in the manifests that accompany the classes.\n     *\n     * @param name a package name, for example, java.lang.\n     * @return the package of the requested name. It may be null if no package\n     *          information is available from the archive or codebase.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Package[] getPackages()",
    "returnType" : "Package[]",
    "comment" : "\n     * Get all the packages currently known for the caller's {@code ClassLoader}\n     * instance.  Those packages correspond to classes loaded via or accessible by\n     * name to that {@code ClassLoader} instance.  If the caller's\n     * {@code ClassLoader} instance is the bootstrap {@code ClassLoader}\n     * instance, which may be represented by {@code null} in some implementations,\n     * only packages corresponding to classes loaded by the bootstrap\n     * {@code ClassLoader} instance will be returned.\n     *\n     * @return a new array of packages known to the callers {@code ClassLoader}\n     * instance.  An zero length array is returned if none are known.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Package getPackage(Class<?> c)",
    "returnType" : "Package",
    "comment" : "\n     * Get the package for the specified class.\n     * The class's class loader is used to find the package instance\n     * corresponding to the specified class. If the class loader\n     * is the bootstrap class loader, which may be represented by\n     * {@code null} in some implementations, then the set of packages\n     * loaded by the bootstrap class loader is searched to find the package.\n     * <p>\n     * Packages have attributes for versions and specifications only\n     * if the class loader created the package\n     * instance with the appropriate attributes. Typically those\n     * attributes are defined in the manifests that accompany\n     * the classes.\n     *\n     * @param c the class to get the package of.\n     * @return the package of the class. It may be null if no package\n     *          information is available from the archive or codebase.  ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Return the hash code computed from the package name.\n     * @return the hash code computed from the package name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the string representation of this Package.\n     * Its value is the string \"package \" and the package name.\n     * If the package title is defined it is appended.\n     * If the package version is defined it is appended.\n     * @return the string representation of the package.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Class<?> getPackageInfo()",
    "returnType" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public A getAnnotation(Class<A> annotationClass)",
    "returnType" : "A",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public A[] getAnnotationsByType(Class<A> annotationClass)",
    "returnType" : "A[]",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[] getAnnotations()",
    "returnType" : "Annotation[]",
    "comment" : "\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public A getDeclaredAnnotation(Class<A> annotationClass)",
    "returnType" : "A",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public A[] getDeclaredAnnotationsByType(Class<A> annotationClass)",
    "returnType" : "A[]",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[] getDeclaredAnnotations()",
    "returnType" : "Annotation[]",
    "comment" : "\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : " static Package getSystemPackage(String name)",
    "returnType" : "Package",
    "comment" : "\n     * Returns the loaded system package for the specified name.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Package[] getSystemPackages()",
    "returnType" : "Package[]",
    "comment" : "\n     * Return an array of loaded system packages.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Package defineSystemPackage(final String iname, final String fn)",
    "returnType" : "Package",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Manifest loadManifest(String fn)",
    "returnType" : "Manifest",
    "comment" : "\n     * Returns the Manifest for the specified JAR file name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native String getSystemPackage0(String name)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String[] getSystemPackages0()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getName()", "public String getSpecificationTitle()", "public String getSpecificationVersion()", "public String getSpecificationVendor()", "public String getImplementationTitle()", "public String getImplementationVersion()", "public String getImplementationVendor()", "public boolean isSealed()", "public boolean isSealed(URL url)", "public boolean isCompatibleWith(String desired) throws NumberFormatException", "public static Package getPackage(String name)", "public static Package[] getPackages()", " static Package getPackage(Class<?> c)", "public int hashCode()", "public String toString()", "private Class<?> getPackageInfo()", "public A getAnnotation(Class<A> annotationClass)", "public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)", "public A[] getAnnotationsByType(Class<A> annotationClass)", "public Annotation[] getAnnotations()", "public A getDeclaredAnnotation(Class<A> annotationClass)", "public A[] getDeclaredAnnotationsByType(Class<A> annotationClass)", "public Annotation[] getDeclaredAnnotations()", " static Package getSystemPackage(String name)", " static Package[] getSystemPackages()", "private static Package defineSystemPackage(final String iname, final String fn)", "private static Manifest loadManifest(String fn)", "private static native String getSystemPackage0(String name)", "private static native String[] getSystemPackages0()" ],
  "variableNames" : [ "pkgs", "urls", "mans", "pkgName", "specTitle", "specVersion", "specVendor", "implTitle", "implVersion", "implVendor", "sealBase", "loader", "packageInfo" ]
}