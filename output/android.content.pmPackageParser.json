{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/PackageParser.java",
  "packageName" : "android.content.pm",
  "className" : "PackageParser",
  "comment" : "\n * Parser for package files (APKs) on disk. This supports apps packaged either\n * as a single \"monolithic\" APK, or apps packaged as a \"cluster\" of multiple\n * APKs in a single directory.\n * <p>\n * Apps packaged as multiple APKs always consist of a single \"base\" APK (with a\n * {@code null} split name) and zero or more \"split\" APKs (with unique split\n * names). Any subset of those split APKs are a valid install, as long as the\n * following constraints are met:\n * <ul>\n * <li>All APKs must have the exact same package name, version code, and signing\n * certificates.\n * <li>All APKs must have unique split names.\n * <li>All installations must contain a single base APK.\n * </ul>\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "DEBUG_JAR",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_PARSER",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_BACKUP",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_PARSE_TIMINGS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_PARSE_TIMINGS_THRESHOLD_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_CHILD_PACKAGES_ENABLED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MULTI_PACKAGE_APK_ENABLED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_PRE_O_MAX_ASPECT_RATIO",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_PRE_Q_MIN_ASPECT_RATIO",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_PRE_Q_MIN_ASPECT_RATIO_WATCH",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MIN_SDK_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TARGET_SDK_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANDROID_MANIFEST_FILENAME",
    "type" : "String",
    "comment" : " File name in an APK for the Android manifest. ",
    "links" : [ ]
  }, {
    "name" : "MNT_EXPAND",
    "type" : "String",
    "comment" : " Path prefix for apps on expanded storage ",
    "links" : [ ]
  }, {
    "name" : "TAG_ADOPT_PERMISSIONS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_APPLICATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_COMPATIBLE_SCREENS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_EAT_COMMENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_FEATURE_GROUP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_INSTRUMENTATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_KEY_SETS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_MANIFEST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_ORIGINAL_PACKAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_OVERLAY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PACKAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PACKAGE_VERIFIER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_ATTRIBUTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PERMISSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PERMISSION_GROUP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PERMISSION_TREE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PROTECTED_BROADCAST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_QUERIES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_RESTRICT_UPDATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_SUPPORT_SCREENS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_SUPPORTS_INPUT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_USES_CONFIGURATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_USES_FEATURE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_USES_GL_TEXTURE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_USES_PERMISSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_USES_PERMISSION_SDK_23",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_USES_PERMISSION_SDK_M",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_USES_SDK",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_USES_SPLIT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PROFILEABLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_MAX_ASPECT_RATIO",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_SUPPORTS_SIZE_CHANGES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_ACTIVITY_WINDOW_LAYOUT_AFFINITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECREATE_ON_CONFIG_CHANGES_MASK",
    "type" : "int",
    "comment" : "\n     * Bit mask of all the valid bits that can be set in recreateOnConfigChanges.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CHILD_PACKAGE_TAGS",
    "type" : "Set<String>",
    "comment" : " These are the tags supported by child packages",
    "links" : [ ]
  }, {
    "name" : "LOG_UNSAFE_BROADCASTS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAFE_BROADCASTS",
    "type" : "Set<String>",
    "comment" : " Set of broadcast actions that are safe for manifest receivers",
    "links" : [ ]
  }, {
    "name" : "APK_FILE_EXTENSION",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "APEX_FILE_EXTENSION",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NEW_PERMISSIONS",
    "type" : "PackageParser.NewPermissionInfo[]",
    "comment" : "\n     * List of new permissions that have been added since 1.0.\n     * NOTE: These must be declared in SDK version order, with permissions\n     * added to older SDKs appearing before those added to newer SDKs.\n     * If sdkVersion is 0, then this is not a permission that we want to\n     * automatically add to older apps, but we do want to allow it to be\n     * granted during a platform update.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mArchiveSourcePath",
    "type" : "String",
    "comment" : "\n     * @deprecated callers should move to explicitly passing around source path.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSeparateProcesses",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnlyCoreApps",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetrics",
    "type" : "DisplayMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCacheDir",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SDK_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SDK_CODENAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParseError",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCompatibilityModeEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUseRoundIcon",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_DEFAULT_INSTALL_LOCATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_DEFAULT_TARGET_SANDBOX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParseInstrumentationArgs",
    "type" : "ParsePackageItemArgs",
    "comment" : "\n     * Cached state for parsing instrumentation to avoid GC pressure.\n     *\n     * Must be manually reset to null for each new manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "RIGID_PARSER",
    "type" : "boolean",
    "comment" : " If set to true, we will only allow package files that exactly match\n     *  the DTD.  Otherwise, we try to get as much from the package as we\n     *  can without failing.  This should normally be set to false, to\n     *  support extensions to the DTD in future versions. ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_MUST_BE_APK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_IGNORE_PROCESSES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_EXTERNAL_STORAGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_IS_SYSTEM_DIR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_COLLECT_CERTIFICATES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_ENFORCE_CODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_CHATTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSplitNameComparator",
    "type" : "Comparator<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANDROID_RESOURCES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSeparateProcesses(String[] procs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnlyCoreApps(boolean onlyCoreApps)",
    "returnType" : "void",
    "comment" : "\n     * Flag indicating this parser should only consider apps with\n     * {@code coreApp} manifest attribute to be valid apps. This is useful when\n     * creating a minimalist boot environment.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayMetrics(DisplayMetrics metrics)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCacheDir(File cacheDir)",
    "returnType" : "void",
    "comment" : "\n     * Sets the cache directory for this package parser.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCallback(Callback cb)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link Callback} that can be used while parsing.\n     ",
    "links" : [ "Callback" ]
  }, {
    "name" : "public static final boolean isApkFile(File file)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isApkPath(String path)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean checkUseInstalledOrHidden(int flags, PackageUserState state, ApplicationInfo appInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the package is installed and not hidden, or if the caller\n     * explicitly wanted all uninstalled and hidden packages as well.\n     * @param appInfo The applicationInfo of the app being checked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAvailable(PackageUserState state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PackageInfo generatePackageInfo(PackageParser.Package p, int[] gids, int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state)",
    "returnType" : "PackageInfo",
    "comment" : "\n     * Generate and return the {@link PackageInfo} for a parsed package.\n     *\n     * @param p the parsed package.\n     * @param flags indicating which optional information is included.\n     ",
    "links" : [ "PackageInfo" ]
  }, {
    "name" : "public static PackageInfo generatePackageInfo(PackageParser.Package p, int[] gids, int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId)",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PackageInfo generatePackageInfo(PackageParser.Package pkg, ApexInfo apexInfo, int flags)",
    "returnType" : "PackageInfo",
    "comment" : "\n     * PackageInfo generator specifically for apex files.\n     *\n     * @param pkg Package to generate info from. Should be derived from an apex.\n     * @param apexInfo Apex info relating to the package.\n     * @return PackageInfo\n     * @throws PackageParserException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PackageInfo generatePackageInfo(PackageParser.Package p, ApexInfo apexInfo, int[] gids, int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId)",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PackageLite parsePackageLite(File packageFile, int flags) throws PackageParserException",
    "returnType" : "PackageLite",
    "comment" : "\n     * Parse only lightweight details about the package at the given location.\n     * Automatically detects if the package is a monolithic style (single APK\n     * file) or cluster style (directory of APKs).\n     * <p>\n     * This performs sanity checking on cluster style packages, such as\n     * requiring identical package name and version codes, a single base APK,\n     * and unique split names.\n     *\n     * @see PackageParser#parsePackage(File, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PackageLite parseMonolithicPackageLite(File packageFile, int flags) throws PackageParserException",
    "returnType" : "PackageLite",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static PackageLite parseClusterPackageLite(File packageDir, int flags) throws PackageParserException",
    "returnType" : "PackageLite",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Package parsePackage(File packageFile, int flags, boolean useCaches) throws PackageParserException",
    "returnType" : "Package",
    "comment" : "\n     * Parse the package at the given location. Automatically detects if the\n     * package is a monolithic style (single APK file) or cluster style\n     * (directory of APKs).\n     * <p>\n     * This performs sanity checking on cluster style packages, such as\n     * requiring identical package name and version codes, a single base APK,\n     * and unique split names.\n     * <p>\n     * Note that this <em>does not</em> perform signature verification; that\n     * must be done separately in {@link #collectCertificates(Package, boolean)}.\n     *\n     * If {@code useCaches} is true, the package parser might return a cached\n     * result from a previous parse of the same {@code packageFile} with the same\n     * {@code flags}. Note that this method does not check whether {@code packageFile}\n     * has changed since the last parse, it's up to callers to do so.\n     *\n     * @see #parsePackageLite(File, int)\n     ",
    "links" : [ "#collectCertificates" ]
  }, {
    "name" : "public Package parsePackage(File packageFile, int flags) throws PackageParserException",
    "returnType" : "Package",
    "comment" : "\n     * Equivalent to {@link #parsePackage(File, int, boolean)} with {@code useCaches == false}.\n     ",
    "links" : [ "#parsePackage" ]
  }, {
    "name" : "private Package parseClusterPackage(File packageDir, int flags) throws PackageParserException",
    "returnType" : "Package",
    "comment" : "\n     * Parse all APKs contained in the given directory, treating them as a\n     * single package. This also performs sanity checking, such as requiring\n     * identical package name and version codes, a single base APK, and unique\n     * split names.\n     * <p>\n     * Note that this <em>does not</em> perform signature verification; that\n     * must be done separately in\n     * {@link #collectCertificates(Package, boolean)} .\n     ",
    "links" : [ "#collectCertificates" ]
  }, {
    "name" : "public Package parseMonolithicPackage(File apkFile, int flags) throws PackageParserException",
    "returnType" : "Package",
    "comment" : "\n     * Parse the given APK file, treating it as as a single monolithic package.\n     * <p>\n     * Note that this <em>does not</em> perform signature verification; that\n     * must be done separately in\n     * {@link #collectCertificates(Package, boolean)}.\n     ",
    "links" : [ "#collectCertificates" ]
  }, {
    "name" : "private Package parseBaseApk(File apkFile, AssetManager assets, int flags) throws PackageParserException",
    "returnType" : "Package",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseSplitApk(Package pkg, int splitIndex, AssetManager assets, int flags) throws PackageParserException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Package parseSplitApk(Package pkg, Resources res, XmlResourceParser parser, int flags, int splitIndex, String[] outError) throws XmlPullParserException, IOException, PackageParserException",
    "returnType" : "Package",
    "comment" : "\n     * Parse the manifest of a <em>split APK</em>.\n     * <p>\n     * Note that split APKs have many more restrictions on what they're capable\n     * of doing, so many valid features of a base APK have been carefully\n     * omitted here.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ArraySet<PublicKey> toSigningKeys(Signature[] signatures) throws CertificateException",
    "returnType" : "ArraySet<PublicKey>",
    "comment" : " Parses the public keys from the set of signatures. ",
    "links" : [ ]
  }, {
    "name" : "public static void collectCertificates(Package pkg, boolean skipVerify) throws PackageParserException",
    "returnType" : "void",
    "comment" : "\n     * Collect certificates from all the APKs described in the given package,\n     * populating {@link Package#mSigningDetails}. Also asserts that all APK\n     * contents are signed correctly and consistently.\n     ",
    "links" : [ "Package#mSigningDetails" ]
  }, {
    "name" : "private static void collectCertificatesInternal(Package pkg, boolean skipVerify) throws PackageParserException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void collectCertificates(Package pkg, File apkFile, boolean skipVerify) throws PackageParserException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static AssetManager newConfiguredAssetManager()",
    "returnType" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ApkLite parseApkLite(File apkFile, int flags) throws PackageParserException",
    "returnType" : "ApkLite",
    "comment" : "\n     * Utility method that retrieves lightweight details about a single APK\n     * file, including package name, split name, and install location.\n     *\n     * @param apkFile path to a single APK\n     * @param flags optional parse flags, such as\n     *            {@link #PARSE_COLLECT_CERTIFICATES}\n     ",
    "links" : [ "#PARSE_COLLECT_CERTIFICATES" ]
  }, {
    "name" : "public static ApkLite parseApkLite(FileDescriptor fd, String debugPathName, int flags) throws PackageParserException",
    "returnType" : "ApkLite",
    "comment" : "\n     * Utility method that retrieves lightweight details about a single APK\n     * file, including package name, split name, and install location.\n     *\n     * @param fd already open file descriptor of an apk file\n     * @param debugPathName arbitrary text name for this file, for debug output\n     * @param flags optional parse flags, such as\n     *            {@link #PARSE_COLLECT_CERTIFICATES}\n     ",
    "links" : [ "#PARSE_COLLECT_CERTIFICATES" ]
  }, {
    "name" : "private static ApkLite parseApkLiteInner(File apkFile, FileDescriptor fd, String debugPathName, int flags) throws PackageParserException",
    "returnType" : "ApkLite",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String validateName(String name, boolean requireSeparator, boolean requireFilename)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Pair<String, String> parsePackageSplitNames(XmlPullParser parser, AttributeSet attrs) throws IOException, XmlPullParserException, PackageParserException",
    "returnType" : "Pair<String, String>",
    "comment" : "\n     * @deprecated Use {@link android.content.pm.parsing.ApkLiteParseUtils#parsePackageSplitNames}\n     ",
    "links" : [ "android.content.pm.parsing.ApkLiteParseUtils#parsePackageSplitNames" ]
  }, {
    "name" : "private static ApkLite parseApkLite(String codePath, XmlPullParser parser, AttributeSet attrs, SigningDetails signingDetails) throws IOException, XmlPullParserException, PackageParserException",
    "returnType" : "ApkLite",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parseBaseApkChild(Package parentPkg, Resources res, XmlResourceParser parser, int flags, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Parses a child package and adds it to the parent if successful. If you add\n     * new tags that need to be supported by child packages make sure to add them\n     * to {@link #CHILD_PACKAGE_TAGS}.\n     *\n     * @param parentPkg The parent that contains the child\n     * @param res Resources against which to resolve values\n     * @param parser Parser of the manifest\n     * @param flags Flags about how to parse\n     * @param outError Human readable error if parsing fails\n     * @return True of parsing succeeded.\n     *\n     * @throws XmlPullParserException\n     * @throws IOException\n     ",
    "links" : [ "#CHILD_PACKAGE_TAGS" ]
  }, {
    "name" : "private Package parseBaseApk(String apkPath, Resources res, XmlResourceParser parser, int flags, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "Package",
    "comment" : "\n     * Parse the manifest of a <em>base APK</em>. When adding new features you\n     * need to consider whether they should be supported by split APKs and child\n     * packages.\n     *\n     * @param apkPath The package apk file path\n     * @param res The resources from which to resolve values\n     * @param parser The manifest parser\n     * @param flags Flags how to parse\n     * @param outError Human readable error message\n     * @return Parsed package or null on error.\n     *\n     * @throws XmlPullParserException\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "private Package parseBaseApkCommon(Package pkg, Set<String> acceptedTags, Resources res, XmlResourceParser parser, int flags, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "Package",
    "comment" : "\n     * This is the common parsing routing for handling parent and child\n     * packages in a base APK. The difference between parent and child\n     * parsing is that some tags are not supported by child packages as\n     * well as some manifest attributes are ignored. The implementation\n     * assumes the calling code has already handled the manifest tag if needed\n     * (this applies to the parent only).\n     *\n     * @param pkg The package which to populate\n     * @param acceptedTags Which tags to handle, null to handle all\n     * @param res Resources against which to resolve values\n     * @param parser Parser of the manifest\n     * @param flags Flags about how to parse\n     * @param outError Human readable error if parsing fails\n     * @return The package if parsing succeeded or null.\n     *\n     * @throws XmlPullParserException\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean checkRequiredSystemProperties(@Nullable String rawPropNames, @Nullable String rawPropValues)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if both the property name and value are empty or if the given system\n     * property is set to the specified value. Properties can be one or more, and if properties are\n     * more than one, they must be separated by comma, and count of names and values must be equal,\n     * and also every given system property must be set to the corresponding value.\n     * In all other cases, returns {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void adjustPackageToBeUnresizeableAndUnpipable(Package pkg)",
    "returnType" : "void",
    "comment" : "\n     * This is a pre-density application which will get scaled - instead of being pixel perfect.\n     * This type of application is not resizable.\n     *\n     * @param pkg The package which needs to be marked as unresizable.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean matchTargetCode(@NonNull String[] codeNames, @NonNull String targetCode)",
    "returnType" : "boolean",
    "comment" : "\n\n    /**\n     * Matches a given {@code targetCode} against a set of release codeNames. Target codes can\n     * either be of the form {@code [codename]}\" (e.g {@code \"Q\"}) or of the form\n     * {@code [codename].[fingerprint]} (e.g {@code \"Q.cafebc561\"}).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int computeTargetSdkVersion(@IntRange(from = 0) int targetVers, @Nullable String targetCode, @NonNull String[] platformSdkCodenames, @NonNull String[] outError)",
    "returnType" : "int",
    "comment" : "\n     * Computes the targetSdkVersion to use at runtime. If the package is not\n     * compatible with this platform, populates {@code outError[0]} with an\n     * error message.\n     * <p>\n     * If {@code targetCode} is not specified, e.g. the value is {@code null},\n     * then the {@code targetVers} will be returned unmodified.\n     * <p>\n     * Otherwise, the behavior varies based on whether the current platform\n     * is a pre-release version, e.g. the {@code platformSdkCodenames} array\n     * has length > 0:\n     * <ul>\n     * <li>If this is a pre-release platform and the value specified by\n     * {@code targetCode} is contained within the array of allowed pre-release\n     * codenames, this method will return {@link Build.VERSION_CODES#CUR_DEVELOPMENT}.\n     * <li>If this is a released platform, this method will return -1 to\n     * indicate that the package is not compatible with this platform.\n     * </ul>\n     *\n     * @param targetVers targetSdkVersion number, if specified in the\n     *                   application manifest, or 0 otherwise\n     * @param targetCode targetSdkVersion code, if specified in the application\n     *                   manifest, or {@code null} otherwise\n     * @param platformSdkCodenames array of allowed pre-release SDK codenames\n     *                             for this platform\n     * @param outError output array to populate with error, if applicable\n     * @return the targetSdkVersion to use at runtime, or -1 if the package is\n     *         not compatible with this platform\n     * @hide Exposed for unit testing only.\n     ",
    "links" : [ "Build.VERSION_CODES#CUR_DEVELOPMENT" ]
  }, {
    "name" : "public static int computeMinSdkVersion(@IntRange(from = 1) int minVers, @Nullable String minCode, @IntRange(from = 1) int platformSdkVersion, @NonNull String[] platformSdkCodenames, @NonNull String[] outError)",
    "returnType" : "int",
    "comment" : "\n     * Computes the minSdkVersion to use at runtime. If the package is not\n     * compatible with this platform, populates {@code outError[0]} with an\n     * error message.\n     * <p>\n     * If {@code minCode} is not specified, e.g. the value is {@code null},\n     * then behavior varies based on the {@code platformSdkVersion}:\n     * <ul>\n     * <li>If the platform SDK version is greater than or equal to the\n     * {@code minVers}, returns the {@code mniVers} unmodified.\n     * <li>Otherwise, returns -1 to indicate that the package is not\n     * compatible with this platform.\n     * </ul>\n     * <p>\n     * Otherwise, the behavior varies based on whether the current platform\n     * is a pre-release version, e.g. the {@code platformSdkCodenames} array\n     * has length > 0:\n     * <ul>\n     * <li>If this is a pre-release platform and the value specified by\n     * {@code targetCode} is contained within the array of allowed pre-release\n     * codenames, this method will return {@link Build.VERSION_CODES#CUR_DEVELOPMENT}.\n     * <li>If this is a released platform, this method will return -1 to\n     * indicate that the package is not compatible with this platform.\n     * </ul>\n     *\n     * @param minVers minSdkVersion number, if specified in the application\n     *                manifest, or 1 otherwise\n     * @param minCode minSdkVersion code, if specified in the application\n     *                manifest, or {@code null} otherwise\n     * @param platformSdkVersion platform SDK version number, typically\n     *                           Build.VERSION.SDK_INT\n     * @param platformSdkCodenames array of allowed prerelease SDK codenames\n     *                             for this platform\n     * @param outError output array to populate with error, if applicable\n     * @return the minSdkVersion to use at runtime, or -1 if the package is not\n     *         compatible with this platform\n     * @hide Exposed for unit testing only.\n     ",
    "links" : [ "Build.VERSION_CODES#CUR_DEVELOPMENT" ]
  }, {
    "name" : "private FeatureInfo parseUsesFeature(Resources res, AttributeSet attrs)",
    "returnType" : "FeatureInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parseUsesStaticLibrary(Package pkg, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String[] parseAdditionalCertificates(Resources resources, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parseUsesPermission(Package pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String buildClassName(String pkg, CharSequence clsSeq, String[] outError)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String buildCompoundName(String pkg, CharSequence procSeq, String type, String[] outError)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String buildProcessName(String pkg, String defProc, CharSequence procSeq, int flags, String[] separateProcesses, String[] outError)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String buildTaskAffinityName(String pkg, String defProc, CharSequence procSeq, String[] outError)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parseKeySets(Package owner, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parsePermissionGroup(Package owner, int flags, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parsePermission(Package owner, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parsePermissionTree(Package owner, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Instrumentation parseInstrumentation(Package owner, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "Instrumentation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parseBaseApplication(Package owner, Resources res, XmlResourceParser parser, int flags, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Parse the {@code application} XML tree at the current parse location in a\n     * <em>base APK</em> manifest.\n     * <p>\n     * When adding new features, carefully consider if they should also be\n     * supported by split APKs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasDomainURLs(Package pkg)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if one of the IntentFilter as both actions DEFAULT / VIEW and a HTTP/HTTPS data URI\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean parseSplitApplication(Package owner, Resources res, XmlResourceParser parser, int flags, int splitIndex, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Parse the {@code application} XML tree at the current parse location in a\n     * <em>split APK</em> manifest.\n     * <p>\n     * Note that split APKs have many more restrictions on what they're capable\n     * of doing, so many valid features of a base APK have been carefully\n     * omitted here.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean parsePackageItemInfo(Package owner, PackageItemInfo outInfo, String[] outError, String tag, TypedArray sa, boolean nameRequired, int nameRes, int labelRes, int iconRes, int roundIconRes, int logoRes, int bannerRes)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PackageParser.Activity generateAppDetailsHiddenActivity(PackageParser.Package owner, int flags, String[] outError, boolean hardwareAccelerated)",
    "returnType" : "PackageParser.Activity",
    "comment" : "\n     * Generate activity object that forwards user to App Details page automatically.\n     * This activity should be invisible to user and user should not know or see it.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Activity parseActivity(Package owner, Resources res, XmlResourceParser parser, int flags, String[] outError, CachedComponentArgs cachedArgs, boolean receiver, boolean hardwareAccelerated) throws XmlPullParserException, IOException",
    "returnType" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setActivityResizeMode(ActivityInfo aInfo, TypedArray sa, Package owner)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setMaxAspectRatio(Package owner)",
    "returnType" : "void",
    "comment" : "\n     * Sets every the max aspect ratio of every child activity that doesn't already have an aspect\n     * ratio set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setMinAspectRatio(Package owner)",
    "returnType" : "void",
    "comment" : "\n     * Sets every the min aspect ratio of every child activity that doesn't already have an aspect\n     * ratio set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setSupportsSizeChanges(Package owner)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getActivityConfigChanges(int configChanges, int recreateOnConfigChanges)",
    "returnType" : "int",
    "comment" : "\n     * @param configChanges The bit mask of configChanges fetched from AndroidManifest.xml.\n     * @param recreateOnConfigChanges The bit mask recreateOnConfigChanges fetched from\n     *                                AndroidManifest.xml.\n     * @hide Exposed for unit testing only.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void parseLayout(Resources res, AttributeSet attrs, Activity a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resolveWindowLayout(Activity activity)",
    "returnType" : "void",
    "comment" : "\n     * Resolves values in {@link ActivityInfo.WindowLayout}.\n     *\n     * <p>{@link ActivityInfo.WindowLayout#windowLayoutAffinity} has a fallback metadata used in\n     * Android R and some variants of pre-R.\n     ",
    "links" : [ "ActivityInfo.WindowLayout", "ActivityInfo.WindowLayout#windowLayoutAffinity" ]
  }, {
    "name" : "private Activity parseActivityAlias(Package owner, Resources res, XmlResourceParser parser, int flags, String[] outError, CachedComponentArgs cachedArgs) throws XmlPullParserException, IOException",
    "returnType" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Provider parseProvider(Package owner, Resources res, XmlResourceParser parser, int flags, String[] outError, CachedComponentArgs cachedArgs) throws XmlPullParserException, IOException",
    "returnType" : "Provider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parseProviderTags(Resources res, XmlResourceParser parser, boolean visibleToEphemeral, Provider outInfo, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Service parseService(Package owner, Resources res, XmlResourceParser parser, int flags, String[] outError, CachedComponentArgs cachedArgs) throws XmlPullParserException, IOException",
    "returnType" : "Service",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isImplicitlyExposedIntent(IntentInfo intent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parseAllMetaData(Resources res, XmlResourceParser parser, String tag, Component<?> outInfo, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bundle parseMetaData(Resources res, XmlResourceParser parser, Bundle data, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static VerifierInfo parseVerifier(AttributeSet attrs)",
    "returnType" : "VerifierInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final PublicKey parsePublicKey(final String encodedPublicKey)",
    "returnType" : "PublicKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parseIntent(Resources res, XmlResourceParser parser, boolean allowGlobs, boolean allowAutoVerify, IntentInfo outInfo, String[] outError) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean copyNeeded(int flags, Package p, PackageUserState state, Bundle metaData, int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ApplicationInfo generateApplicationInfo(Package p, int flags, PackageUserState state)",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void updateApplicationInfo(ApplicationInfo ai, int flags, PackageUserState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ApplicationInfo generateApplicationInfo(Package p, int flags, PackageUserState state, int userId)",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ApplicationInfo generateApplicationInfo(ApplicationInfo ai, int flags, PackageUserState state, int userId)",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final PermissionInfo generatePermissionInfo(Permission p, int flags)",
    "returnType" : "PermissionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final PermissionGroupInfo generatePermissionGroupInfo(PermissionGroup pg, int flags)",
    "returnType" : "PermissionGroupInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final ActivityInfo generateActivityInfo(Activity a, int flags, PackageUserState state, int userId)",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final ActivityInfo generateActivityInfo(ActivityInfo ai, int flags, PackageUserState state, int userId)",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final ServiceInfo generateServiceInfo(Service s, int flags, PackageUserState state, int userId)",
    "returnType" : "ServiceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final ProviderInfo generateProviderInfo(Provider p, int flags, PackageUserState state, int userId)",
    "returnType" : "ProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final InstrumentationInfo generateInstrumentationInfo(Instrumentation i, int flags)",
    "returnType" : "InstrumentationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setCompatibilityModeEnabled(boolean compatibilityModeEnabled)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void readConfigUseRoundIcon(Resources r)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEBUG_JAR", "DEBUG_PARSER", "DEBUG_BACKUP", "LOG_PARSE_TIMINGS", "LOG_PARSE_TIMINGS_THRESHOLD_MS", "PROPERTY_CHILD_PACKAGES_ENABLED", "MULTI_PACKAGE_APK_ENABLED", "DEFAULT_PRE_O_MAX_ASPECT_RATIO", "DEFAULT_PRE_Q_MIN_ASPECT_RATIO", "DEFAULT_PRE_Q_MIN_ASPECT_RATIO_WATCH", "DEFAULT_MIN_SDK_VERSION", "DEFAULT_TARGET_SDK_VERSION", "ANDROID_MANIFEST_FILENAME", "MNT_EXPAND", "TAG_ADOPT_PERMISSIONS", "TAG_APPLICATION", "TAG_COMPATIBLE_SCREENS", "TAG_EAT_COMMENT", "TAG_FEATURE_GROUP", "TAG_INSTRUMENTATION", "TAG_KEY_SETS", "TAG_MANIFEST", "TAG_ORIGINAL_PACKAGE", "TAG_OVERLAY", "TAG_PACKAGE", "TAG_PACKAGE_VERIFIER", "TAG_ATTRIBUTION", "TAG_PERMISSION", "TAG_PERMISSION_GROUP", "TAG_PERMISSION_TREE", "TAG_PROTECTED_BROADCAST", "TAG_QUERIES", "TAG_RESTRICT_UPDATE", "TAG_SUPPORT_SCREENS", "TAG_SUPPORTS_INPUT", "TAG_USES_CONFIGURATION", "TAG_USES_FEATURE", "TAG_USES_GL_TEXTURE", "TAG_USES_PERMISSION", "TAG_USES_PERMISSION_SDK_23", "TAG_USES_PERMISSION_SDK_M", "TAG_USES_SDK", "TAG_USES_SPLIT", "TAG_PROFILEABLE", "METADATA_MAX_ASPECT_RATIO", "METADATA_SUPPORTS_SIZE_CHANGES", "METADATA_ACTIVITY_WINDOW_LAYOUT_AFFINITY", "RECREATE_ON_CONFIG_CHANGES_MASK", "CHILD_PACKAGE_TAGS", "LOG_UNSAFE_BROADCASTS", "SAFE_BROADCASTS", "APK_FILE_EXTENSION", "APEX_FILE_EXTENSION", "NEW_PERMISSIONS", "mArchiveSourcePath", "mSeparateProcesses", "mOnlyCoreApps", "mMetrics", "mCallback", "mCacheDir", "SDK_VERSION", "SDK_CODENAMES", "mParseError", "sCompatibilityModeEnabled", "sUseRoundIcon", "PARSE_DEFAULT_INSTALL_LOCATION", "PARSE_DEFAULT_TARGET_SANDBOX", "mParseInstrumentationArgs", "RIGID_PARSER", "TAG", "PARSE_MUST_BE_APK", "PARSE_IGNORE_PROCESSES", "PARSE_EXTERNAL_STORAGE", "PARSE_IS_SYSTEM_DIR", "PARSE_COLLECT_CERTIFICATES", "PARSE_ENFORCE_CODE", "PARSE_CHATTY", "sSplitNameComparator", "ANDROID_RESOURCES" ],
  "methodNames" : [ "public void setSeparateProcesses(String[] procs)", "public void setOnlyCoreApps(boolean onlyCoreApps)", "public void setDisplayMetrics(DisplayMetrics metrics)", "public void setCacheDir(File cacheDir)", "public void setCallback(Callback cb)", "public static final boolean isApkFile(File file)", "public static boolean isApkPath(String path)", "private static boolean checkUseInstalledOrHidden(int flags, PackageUserState state, ApplicationInfo appInfo)", "public static boolean isAvailable(PackageUserState state)", "public static PackageInfo generatePackageInfo(PackageParser.Package p, int[] gids, int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state)", "public static PackageInfo generatePackageInfo(PackageParser.Package p, int[] gids, int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId)", "public static PackageInfo generatePackageInfo(PackageParser.Package pkg, ApexInfo apexInfo, int flags)", "private static PackageInfo generatePackageInfo(PackageParser.Package p, ApexInfo apexInfo, int[] gids, int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId)", "public static PackageLite parsePackageLite(File packageFile, int flags) throws PackageParserException", "private static PackageLite parseMonolithicPackageLite(File packageFile, int flags) throws PackageParserException", " static PackageLite parseClusterPackageLite(File packageDir, int flags) throws PackageParserException", "public Package parsePackage(File packageFile, int flags, boolean useCaches) throws PackageParserException", "public Package parsePackage(File packageFile, int flags) throws PackageParserException", "private Package parseClusterPackage(File packageDir, int flags) throws PackageParserException", "public Package parseMonolithicPackage(File apkFile, int flags) throws PackageParserException", "private Package parseBaseApk(File apkFile, AssetManager assets, int flags) throws PackageParserException", "private void parseSplitApk(Package pkg, int splitIndex, AssetManager assets, int flags) throws PackageParserException", "private Package parseSplitApk(Package pkg, Resources res, XmlResourceParser parser, int flags, int splitIndex, String[] outError) throws XmlPullParserException, IOException, PackageParserException", "public static ArraySet<PublicKey> toSigningKeys(Signature[] signatures) throws CertificateException", "public static void collectCertificates(Package pkg, boolean skipVerify) throws PackageParserException", "private static void collectCertificatesInternal(Package pkg, boolean skipVerify) throws PackageParserException", "private static void collectCertificates(Package pkg, File apkFile, boolean skipVerify) throws PackageParserException", "private static AssetManager newConfiguredAssetManager()", "public static ApkLite parseApkLite(File apkFile, int flags) throws PackageParserException", "public static ApkLite parseApkLite(FileDescriptor fd, String debugPathName, int flags) throws PackageParserException", "private static ApkLite parseApkLiteInner(File apkFile, FileDescriptor fd, String debugPathName, int flags) throws PackageParserException", "public static String validateName(String name, boolean requireSeparator, boolean requireFilename)", "public static Pair<String, String> parsePackageSplitNames(XmlPullParser parser, AttributeSet attrs) throws IOException, XmlPullParserException, PackageParserException", "private static ApkLite parseApkLite(String codePath, XmlPullParser parser, AttributeSet attrs, SigningDetails signingDetails) throws IOException, XmlPullParserException, PackageParserException", "private boolean parseBaseApkChild(Package parentPkg, Resources res, XmlResourceParser parser, int flags, String[] outError) throws XmlPullParserException, IOException", "private Package parseBaseApk(String apkPath, Resources res, XmlResourceParser parser, int flags, String[] outError) throws XmlPullParserException, IOException", "private Package parseBaseApkCommon(Package pkg, Set<String> acceptedTags, Resources res, XmlResourceParser parser, int flags, String[] outError) throws XmlPullParserException, IOException", "public static boolean checkRequiredSystemProperties(@Nullable String rawPropNames, @Nullable String rawPropValues)", "private void adjustPackageToBeUnresizeableAndUnpipable(Package pkg)", "private static boolean matchTargetCode(@NonNull String[] codeNames, @NonNull String targetCode)", "public static int computeTargetSdkVersion(@IntRange(from = 0) int targetVers, @Nullable String targetCode, @NonNull String[] platformSdkCodenames, @NonNull String[] outError)", "public static int computeMinSdkVersion(@IntRange(from = 1) int minVers, @Nullable String minCode, @IntRange(from = 1) int platformSdkVersion, @NonNull String[] platformSdkCodenames, @NonNull String[] outError)", "private FeatureInfo parseUsesFeature(Resources res, AttributeSet attrs)", "private boolean parseUsesStaticLibrary(Package pkg, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException", "private String[] parseAdditionalCertificates(Resources resources, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException", "private boolean parseUsesPermission(Package pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException", "public static String buildClassName(String pkg, CharSequence clsSeq, String[] outError)", "private static String buildCompoundName(String pkg, CharSequence procSeq, String type, String[] outError)", "public static String buildProcessName(String pkg, String defProc, CharSequence procSeq, int flags, String[] separateProcesses, String[] outError)", "public static String buildTaskAffinityName(String pkg, String defProc, CharSequence procSeq, String[] outError)", "private boolean parseKeySets(Package owner, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException", "private boolean parsePermissionGroup(Package owner, int flags, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException", "private boolean parsePermission(Package owner, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException", "private boolean parsePermissionTree(Package owner, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException", "private Instrumentation parseInstrumentation(Package owner, Resources res, XmlResourceParser parser, String[] outError) throws XmlPullParserException, IOException", "private boolean parseBaseApplication(Package owner, Resources res, XmlResourceParser parser, int flags, String[] outError) throws XmlPullParserException, IOException", "private static boolean hasDomainURLs(Package pkg)", "private boolean parseSplitApplication(Package owner, Resources res, XmlResourceParser parser, int flags, int splitIndex, String[] outError) throws XmlPullParserException, IOException", "private static boolean parsePackageItemInfo(Package owner, PackageItemInfo outInfo, String[] outError, String tag, TypedArray sa, boolean nameRequired, int nameRes, int labelRes, int iconRes, int roundIconRes, int logoRes, int bannerRes)", "private PackageParser.Activity generateAppDetailsHiddenActivity(PackageParser.Package owner, int flags, String[] outError, boolean hardwareAccelerated)", "private Activity parseActivity(Package owner, Resources res, XmlResourceParser parser, int flags, String[] outError, CachedComponentArgs cachedArgs, boolean receiver, boolean hardwareAccelerated) throws XmlPullParserException, IOException", "private void setActivityResizeMode(ActivityInfo aInfo, TypedArray sa, Package owner)", "private void setMaxAspectRatio(Package owner)", "private void setMinAspectRatio(Package owner)", "private void setSupportsSizeChanges(Package owner)", "public static int getActivityConfigChanges(int configChanges, int recreateOnConfigChanges)", "private void parseLayout(Resources res, AttributeSet attrs, Activity a)", "private void resolveWindowLayout(Activity activity)", "private Activity parseActivityAlias(Package owner, Resources res, XmlResourceParser parser, int flags, String[] outError, CachedComponentArgs cachedArgs) throws XmlPullParserException, IOException", "private Provider parseProvider(Package owner, Resources res, XmlResourceParser parser, int flags, String[] outError, CachedComponentArgs cachedArgs) throws XmlPullParserException, IOException", "private boolean parseProviderTags(Resources res, XmlResourceParser parser, boolean visibleToEphemeral, Provider outInfo, String[] outError) throws XmlPullParserException, IOException", "private Service parseService(Package owner, Resources res, XmlResourceParser parser, int flags, String[] outError, CachedComponentArgs cachedArgs) throws XmlPullParserException, IOException", "private boolean isImplicitlyExposedIntent(IntentInfo intent)", "private boolean parseAllMetaData(Resources res, XmlResourceParser parser, String tag, Component<?> outInfo, String[] outError) throws XmlPullParserException, IOException", "private Bundle parseMetaData(Resources res, XmlResourceParser parser, Bundle data, String[] outError) throws XmlPullParserException, IOException", "private static VerifierInfo parseVerifier(AttributeSet attrs)", "public static final PublicKey parsePublicKey(final String encodedPublicKey)", "private boolean parseIntent(Resources res, XmlResourceParser parser, boolean allowGlobs, boolean allowAutoVerify, IntentInfo outInfo, String[] outError) throws XmlPullParserException, IOException", "private static boolean copyNeeded(int flags, Package p, PackageUserState state, Bundle metaData, int userId)", "public static ApplicationInfo generateApplicationInfo(Package p, int flags, PackageUserState state)", "private static void updateApplicationInfo(ApplicationInfo ai, int flags, PackageUserState state)", "public static ApplicationInfo generateApplicationInfo(Package p, int flags, PackageUserState state, int userId)", "public static ApplicationInfo generateApplicationInfo(ApplicationInfo ai, int flags, PackageUserState state, int userId)", "public static final PermissionInfo generatePermissionInfo(Permission p, int flags)", "public static final PermissionGroupInfo generatePermissionGroupInfo(PermissionGroup pg, int flags)", "public static final ActivityInfo generateActivityInfo(Activity a, int flags, PackageUserState state, int userId)", "public static final ActivityInfo generateActivityInfo(ActivityInfo ai, int flags, PackageUserState state, int userId)", "public static final ServiceInfo generateServiceInfo(Service s, int flags, PackageUserState state, int userId)", "public static final ProviderInfo generateProviderInfo(Provider p, int flags, PackageUserState state, int userId)", "public static final InstrumentationInfo generateInstrumentationInfo(Instrumentation i, int flags)", "public static void setCompatibilityModeEnabled(boolean compatibilityModeEnabled)", "public static void readConfigUseRoundIcon(Resources r)" ]
}