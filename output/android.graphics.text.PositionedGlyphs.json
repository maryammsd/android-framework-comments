{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/text/PositionedGlyphs.java",
  "packageName" : "android.graphics.text",
  "className" : "PositionedGlyphs",
  "comment" : "\n * Text shaping result object for single style text.\n *\n * You can get text shaping result by\n * {@link TextRunShaper#shapeTextRun(char[], int, int, int, int, float, float, boolean, Paint)} and\n * {@link TextRunShaper#shapeTextRun(CharSequence, int, int, int, int, float, float, boolean,\n * Paint)}.\n *\n * @see TextRunShaper#shapeTextRun(char[], int, int, int, int, float, float, boolean, Paint)\n * @see TextRunShaper#shapeTextRun(CharSequence, int, int, int, int, float, float, boolean, Paint)\n ",
  "links" : [ "android.graphics.text.TextRunShaper#shapeTextRun(char", "android.graphics.text.TextRunShaper#shapeTextRun(CharSequence" ],
  "variables" : [ {
    "name" : "mLayoutPtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mXOffset",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mYOffset",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFonts",
    "type" : "ArrayList<Font>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_OVERRIDE",
    "type" : "float",
    "comment" : "\n     * A special value returned by {@link #getWeightOverride(int)} and\n     * {@link #getItalicOverride(int)} that indicates no font variation setting is overridden.\n     ",
    "links" : [ "#getWeightOverride(int)", "#getItalicOverride(int)" ]
  } ],
  "methods" : [ {
    "name" : "public float getAdvance()",
    "returnType" : "float",
    "comment" : "\n     * Returns the total amount of advance consumed by this positioned glyphs.\n     *\n     * The advance is an amount of width consumed by the glyph. The total amount of advance is\n     * a total amount of advance consumed by this series of glyphs. In other words, if another\n     * glyph is placed next to this series of  glyphs, it's X offset should be shifted this amount\n     * of width.\n     *\n     * @return total amount of advance\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getAscent()",
    "returnType" : "float",
    "comment" : "\n     * Effective ascent value of this positioned glyphs.\n     *\n     * If two or more font files are used in this series of glyphs, the effective ascent will be\n     * the minimum ascent value across the all font files.\n     *\n     * @return effective ascent value\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getDescent()",
    "returnType" : "float",
    "comment" : "\n     * Effective descent value of this positioned glyphs.\n     *\n     * If two or more font files are used in this series of glyphs, the effective descent will be\n     * the maximum descent value across the all font files.\n     *\n     * @return effective descent value\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getOffsetX()",
    "returnType" : "float",
    "comment" : "\n     * Returns the amount of X offset added to glyph position.\n     *\n     * @return The X offset added to glyph position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getOffsetY()",
    "returnType" : "float",
    "comment" : "\n     * Returns the amount of Y offset added to glyph position.\n     *\n     * @return The Y offset added to glyph position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int glyphCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of glyphs stored.\n     *\n     * @return the number of glyphs\n     ",
    "links" : [ ]
  }, {
    "name" : "public Font getFont(@IntRange(from = 0) int index)",
    "returnType" : "Font",
    "comment" : "\n     * Returns the font object used for drawing the glyph at the given index.\n     *\n     * @param index the glyph index\n     * @return the font object used for drawing the glyph at the given index\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGlyphId(@IntRange(from = 0) int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the glyph ID used for drawing the glyph at the given index.\n     *\n     * @param index the glyph index\n     * @return A glyph ID of the font.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getGlyphX(@IntRange(from = 0) int index)",
    "returnType" : "float",
    "comment" : "\n     * Returns the x coordinate of the glyph position at the given index.\n     *\n     * @param index the glyph index\n     * @return A X offset in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getGlyphY(@IntRange(from = 0) int index)",
    "returnType" : "float",
    "comment" : "\n     * Returns the y coordinate of the glyph position at the given index.\n     *\n     * @param index the glyph index\n     * @return A Y offset in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getFakeBold(@IntRange(from = 0) int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the fake bold option used for drawing, otherwise false.\n     *\n     * @param index the glyph index\n     * @return true if the fake bold option is on, otherwise off.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getFakeItalic(@IntRange(from = 0) int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the fake italic option used for drawing, otherwise false.\n     *\n     * @param index the glyph index\n     * @return true if the fake italic option is on, otherwise off.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getWeightOverride(@IntRange(from = 0) int index)",
    "returnType" : "float",
    "comment" : "\n     * Returns overridden weight value if the font is variable font and `wght` value is overridden\n     * for drawing. Otherwise returns {@link #NO_OVERRIDE}.\n     *\n     * @param index the glyph index\n     * @return overridden weight value or {@link #NO_OVERRIDE}.\n     ",
    "links" : [ "#NO_OVERRIDE" ]
  }, {
    "name" : "public float getItalicOverride(@IntRange(from = 0) int index)",
    "returnType" : "float",
    "comment" : "\n     * Returns overridden italic value if the font is variable font and `ital` value is overridden\n     * for drawing. Otherwise returns {@link #NO_OVERRIDE}.\n     *\n     * @param index the glyph index\n     * @return overridden weight value or {@link #NO_OVERRIDE}.\n     ",
    "links" : [ "#NO_OVERRIDE" ]
  }, {
    "name" : "private static native int nGetGlyphCount(long minikinLayout)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetTotalAdvance(long minikinLayout)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetAscent(long minikinLayout)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetDescent(long minikinLayout)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetGlyphId(long minikinLayout, int i)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetX(long minikinLayout, int i)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetY(long minikinLayout, int i)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetFont(long minikinLayout, int i)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nReleaseFunc()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nGetFakeBold(long minikinLayout, int i)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nGetFakeItalic(long minikinLayout, int i)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetWeightOverride(long minikinLayout, int i)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetItalicOverride(long minikinLayout, int i)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public float getAdvance()", "public float getAscent()", "public float getDescent()", "public float getOffsetX()", "public float getOffsetY()", "public int glyphCount()", "public Font getFont(@IntRange(from = 0) int index)", "public int getGlyphId(@IntRange(from = 0) int index)", "public float getGlyphX(@IntRange(from = 0) int index)", "public float getGlyphY(@IntRange(from = 0) int index)", "public boolean getFakeBold(@IntRange(from = 0) int index)", "public boolean getFakeItalic(@IntRange(from = 0) int index)", "public float getWeightOverride(@IntRange(from = 0) int index)", "public float getItalicOverride(@IntRange(from = 0) int index)", "private static native int nGetGlyphCount(long minikinLayout)", "private static native float nGetTotalAdvance(long minikinLayout)", "private static native float nGetAscent(long minikinLayout)", "private static native float nGetDescent(long minikinLayout)", "private static native int nGetGlyphId(long minikinLayout, int i)", "private static native float nGetX(long minikinLayout, int i)", "private static native float nGetY(long minikinLayout, int i)", "private static native long nGetFont(long minikinLayout, int i)", "private static native long nReleaseFunc()", "private static native boolean nGetFakeBold(long minikinLayout, int i)", "private static native boolean nGetFakeItalic(long minikinLayout, int i)", "private static native float nGetWeightOverride(long minikinLayout, int i)", "private static native float nGetItalicOverride(long minikinLayout, int i)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "mLayoutPtr", "mXOffset", "mYOffset", "mFonts", "NO_OVERRIDE" ]
}