{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/ColorMatrix.java",
  "packageName" : "android.graphics",
  "className" : "ColorMatrix",
  "comment" : "\n * 4x5 matrix for transforming the color and alpha components of a Bitmap.\n * The matrix can be passed as single array, and is treated as follows:\n *\n * <pre>\n *  [ a, b, c, d, e,\n *    f, g, h, i, j,\n *    k, l, m, n, o,\n *    p, q, r, s, t ]</pre>\n *\n * <p>\n * When applied to a color <code>[R, G, B, A]</code>, the resulting color\n * is computed as:\n * </p>\n *\n * <pre>\n *   R&rsquo; = a*R + b*G + c*B + d*A + e;\n *   G&rsquo; = f*R + g*G + h*B + i*A + j;\n *   B&rsquo; = k*R + l*G + m*B + n*A + o;\n *   A&rsquo; = p*R + q*G + r*B + s*A + t;</pre>\n *\n * <p>\n * That resulting color <code>[R&rsquo;, G&rsquo;, B&rsquo;, A&rsquo;]</code>\n * then has each channel clamped to the <code>0</code> to <code>255</code>\n * range.\n * </p>\n *\n * <p>\n * The sample ColorMatrix below inverts incoming colors by scaling each\n * channel by <code>-1</code>, and then shifting the result up by\n * <code>255</code> to remain in the standard color space.\n * </p>\n *\n * <pre>\n *   [ -1, 0, 0, 0, 255,\n *     0, -1, 0, 0, 255,\n *     0, 0, -1, 0, 255,\n *     0, 0, 0, 1, 0 ]</pre>\n ",
  "variables" : [ {
    "name" : "mArray",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final float[] getArray()",
    "returnType" : "float[]",
    "comment" : "\n     * Return the array of floats representing this colormatrix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Set this colormatrix to identity:\n     * <pre>\n     * [ 1 0 0 0 0   - red vector\n     *   0 1 0 0 0   - green vector\n     *   0 0 1 0 0   - blue vector\n     *   0 0 0 1 0 ] - alpha vector\n     * </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(ColorMatrix src)",
    "returnType" : "void",
    "comment" : "\n     * Assign the src colormatrix into this matrix, copying all of its values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(float[] src)",
    "returnType" : "void",
    "comment" : "\n     * Assign the array of floats into this matrix, copying all of its values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScale(float rScale, float gScale, float bScale, float aScale)",
    "returnType" : "void",
    "comment" : "\n     * Set this colormatrix to scale by the specified values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRotate(int axis, float degrees)",
    "returnType" : "void",
    "comment" : "\n     * Set the rotation on a color axis by the specified values.\n     * <p>\n     * <code>axis=0</code> correspond to a rotation around the RED color\n     * <code>axis=1</code> correspond to a rotation around the GREEN color\n     * <code>axis=2</code> correspond to a rotation around the BLUE color\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setConcat(ColorMatrix matA, ColorMatrix matB)",
    "returnType" : "void",
    "comment" : "\n     * Set this colormatrix to the concatenation of the two specified\n     * colormatrices, such that the resulting colormatrix has the same effect\n     * as applying matB and then applying matA.\n     * <p>\n     * It is legal for either matA or matB to be the same colormatrix as this.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void preConcat(ColorMatrix prematrix)",
    "returnType" : "void",
    "comment" : "\n     * Concat this colormatrix with the specified prematrix.\n     * <p>\n     * This is logically the same as calling setConcat(this, prematrix);\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postConcat(ColorMatrix postmatrix)",
    "returnType" : "void",
    "comment" : "\n     * Concat this colormatrix with the specified postmatrix.\n     * <p>\n     * This is logically the same as calling setConcat(postmatrix, this);\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSaturation(float sat)",
    "returnType" : "void",
    "comment" : "\n     * Set the matrix to affect the saturation of colors.\n     *\n     * @param sat A value of 0 maps the color to gray-scale. 1 is identity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRGB2YUV()",
    "returnType" : "void",
    "comment" : "\n     * Set the matrix to convert RGB to YUV\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setYUV2RGB()",
    "returnType" : "void",
    "comment" : "\n     * Set the matrix to convert from YUV to RGB\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mArray" ],
  "methodNames" : [ "public final float[] getArray()", "public void reset()", "public void set(ColorMatrix src)", "public void set(float[] src)", "public void setScale(float rScale, float gScale, float bScale, float aScale)", "public void setRotate(int axis, float degrees)", "public void setConcat(ColorMatrix matA, ColorMatrix matB)", "public void preConcat(ColorMatrix prematrix)", "public void postConcat(ColorMatrix postmatrix)", "public void setSaturation(float sat)", "public void setRGB2YUV()", "public void setYUV2RGB()", "public boolean equals(Object obj)" ]
}