{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/gsm/SmsMessage.java",
  "packageName" : "android.telephony.gsm",
  "className" : "SmsMessage",
  "comment" : "\n * A Short Message Service message.\n * @deprecated Replaced by android.telephony.SmsMessage that supports both GSM and CDMA.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ENCODING_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown encoding scheme (see TS 23.038)\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "ENCODING_7BIT",
    "type" : "int",
    "comment" : " 7-bit encoding scheme (see TS 23.038)\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "ENCODING_8BIT",
    "type" : "int",
    "comment" : " 8-bit encoding scheme (see TS 23.038)\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "ENCODING_16BIT",
    "type" : "int",
    "comment" : " 16-bit encoding scheme (see TS 23.038)\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_USER_DATA_BYTES",
    "type" : "int",
    "comment" : " The maximum number of payload bytes per message\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_USER_DATA_BYTES_WITH_HEADER",
    "type" : "int",
    "comment" : "\n     * The maximum number of payload bytes per message if a user data header\n     * is present.  This assumes the header only contains the\n     * CONCATENATED_8_BIT_REFERENCE element.\n     *\n     * @deprecated Use android.telephony.SmsMessage.\n     * @hide pending API Council approval to extend the public API\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_USER_DATA_SEPTETS",
    "type" : "int",
    "comment" : " The maximum number of payload septets per message\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_USER_DATA_SEPTETS_WITH_HEADER",
    "type" : "int",
    "comment" : "\n     * The maximum number of payload septets per message if a user data header\n     * is present.  This assumes the header only contains the\n     * CONCATENATED_8_BIT_REFERENCE element.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWrappedSmsMessage",
    "type" : "SmsMessageBase",
    "comment" : " Contains actual SmsMessage. Only public for debugging and for framework layer.\n     * @deprecated Use android.telephony.SmsMessage.\n     * {@hide}\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SmsMessage createFromPdu(byte[] pdu)",
    "returnType" : "SmsMessage",
    "comment" : "\n     * Create an SmsMessage from a raw PDU.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getTPLayerLengthForPDU(String pdu)",
    "returnType" : "int",
    "comment" : "\n     * Get the TP-Layer-Length for the given SMS-SUBMIT PDU Basically, the\n     * length in bytes (not hex chars) less the SMSC header\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] calculateLength(CharSequence messageBody, boolean use7bitOnly)",
    "returnType" : "int[]",
    "comment" : "\n     * Calculates the number of SMS's required to encode the message body and\n     * the number of characters remaining until the next message, given the\n     * current encoding.\n     *\n     * @param messageBody the message to encode\n     * @param use7bitOnly if true, characters that are not part of the GSM\n     *         alphabet are counted as a single space char.  If false, a\n     *         messageBody containing non-GSM alphabet characters is calculated\n     *         for 16-bit encoding.\n     * @return an int[4] with int[0] being the number of SMS's required, int[1]\n     *         the number of code units used, and int[2] is the number of code\n     *         units remaining until the next message. int[3] is the encoding\n     *         type that should be used for the message.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] calculateLength(String messageBody, boolean use7bitOnly)",
    "returnType" : "int[]",
    "comment" : "\n     * Calculates the number of SMS's required to encode the message body and\n     * the number of characters remaining until the next message, given the\n     * current encoding.\n     *\n     * @param messageBody the message to encode\n     * @param use7bitOnly if true, characters that are not part of the GSM\n     *         alphabet are counted as a single space char.  If false, a\n     *         messageBody containing non-GSM alphabet characters is calculated\n     *         for 16-bit encoding.\n     * @return an int[4] with int[0] being the number of SMS's required, int[1]\n     *         the number of code units used, and int[2] is the number of code\n     *         units remaining until the next message. int[3] is the encoding\n     *         type that should be used for the message.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, String message, boolean statusReportRequested, byte[] header)",
    "returnType" : "SubmitPdu",
    "comment" : "\n     * Get an SMS-SUBMIT PDU for a destination address and a message\n     *\n     * @param scAddress Service Centre address.  Null means use default.\n     * @return a <code>SubmitPdu</code> containing the encoded SC\n     *         address, if applicable, and the encoded message.\n     *         Returns null on encode error.\n     * @deprecated Use android.telephony.SmsMessage.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, String message, boolean statusReportRequested)",
    "returnType" : "SubmitPdu",
    "comment" : "\n     * Get an SMS-SUBMIT PDU for a destination address and a message\n     *\n     * @param scAddress Service Centre address.  Null means use default.\n     * @return a <code>SubmitPdu</code> containing the encoded SC\n     *         address, if applicable, and the encoded message.\n     *         Returns null on encode error.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, short destinationPort, byte[] data, boolean statusReportRequested)",
    "returnType" : "SubmitPdu",
    "comment" : "\n     * Get an SMS-SUBMIT PDU for a data message to a destination address &amp; port\n     *\n     * @param scAddress Service Centre address. null == use default\n     * @param destinationAddress the address of the destination for the message\n     * @param destinationPort the port to deliver the message to at the\n     *        destination\n     * @param data the dat for the message\n     * @return a <code>SubmitPdu</code> containing the encoded SC\n     *         address, if applicable, and the encoded message.\n     *         Returns null on encode error.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getServiceCenterAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the address of the SMS service center that relayed this message\n     * or null if there is none.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOriginatingAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the originating address (sender) of this SMS message in String\n     * form or null if unavailable\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayOriginatingAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the originating address, or email from address if this message\n     * was from an email gateway. Returns null if originating address\n     * unavailable.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMessageBody()",
    "returnType" : "String",
    "comment" : "\n     * Returns the message body as a String, if it exists and is text based.\n     * @return message body is there is one, otherwise null\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MessageClass getMessageClass()",
    "returnType" : "MessageClass",
    "comment" : "\n     * Returns the class of this message.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayMessageBody()",
    "returnType" : "String",
    "comment" : "\n     * Returns the message body, or email message body if this message was from\n     * an email gateway. Returns null if message body unavailable.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPseudoSubject()",
    "returnType" : "String",
    "comment" : "\n     * Unofficial convention of a subject line enclosed in parens empty string\n     * if not present\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTimestampMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the service centre timestamp in currentTimeMillis() format\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmail()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if message is an email.\n     *\n     * @return true if this message came through an email gateway and email\n     *         sender / subject / parsed body are available\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEmailBody()",
    "returnType" : "String",
    "comment" : "\n     * @return if isEmail() is true, body of the email sent through the gateway.\n     *         null otherwise\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEmailFrom()",
    "returnType" : "String",
    "comment" : "\n     * @return if isEmail() is true, email from address of email sent through\n     *         the gateway. null otherwise\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProtocolIdentifier()",
    "returnType" : "int",
    "comment" : "\n     * Get protocol identifier.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReplace()",
    "returnType" : "boolean",
    "comment" : "\n     * See TS 23.040 9.2.3.9 returns true if this is a \"replace short message\" SMS\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCphsMwiMessage()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true for CPHS MWI toggle message.\n     *\n     * @return true if this is a CPHS MWI toggle message See CPHS 4.2 section B.4.2\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMWIClearMessage()",
    "returnType" : "boolean",
    "comment" : "\n     * returns true if this message is a CPHS voicemail / message waiting\n     * indicator (MWI) clear message\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMWISetMessage()",
    "returnType" : "boolean",
    "comment" : "\n     * returns true if this message is a CPHS voicemail / message waiting\n     * indicator (MWI) set message\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMwiDontStore()",
    "returnType" : "boolean",
    "comment" : "\n     * returns true if this message is a \"Message Waiting Indication Group:\n     * Discard Message\" notification and should not be stored.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getUserData()",
    "returnType" : "byte[]",
    "comment" : "\n     * returns the user data section minus the user data header if one was present.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getPdu()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the raw PDU for the message.\n     *\n     * @return the raw PDU for the message.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStatusOnSim()",
    "returnType" : "int",
    "comment" : "\n     * Returns the status of the message on the SIM (read, unread, sent, unsent).\n     *\n     * @return the status of the message on the SIM.  These are:\n     *         SmsManager.STATUS_ON_SIM_FREE\n     *         SmsManager.STATUS_ON_SIM_READ\n     *         SmsManager.STATUS_ON_SIM_UNREAD\n     *         SmsManager.STATUS_ON_SIM_SEND\n     *         SmsManager.STATUS_ON_SIM_UNSENT\n     * @deprecated Use android.telephony.SmsMessage and getStatusOnIcc instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStatusOnIcc()",
    "returnType" : "int",
    "comment" : "\n     * Returns the status of the message on the ICC (read, unread, sent, unsent).\n     *\n     * @return the status of the message on the ICC.  These are:\n     *         SmsManager.STATUS_ON_ICC_FREE\n     *         SmsManager.STATUS_ON_ICC_READ\n     *         SmsManager.STATUS_ON_ICC_UNREAD\n     *         SmsManager.STATUS_ON_ICC_SEND\n     *         SmsManager.STATUS_ON_ICC_UNSENT\n     * @deprecated Use android.telephony.SmsMessage.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndexOnSim()",
    "returnType" : "int",
    "comment" : "\n     * Returns the record index of the message on the SIM (1-based index).\n     * @return the record index of the message on the SIM, or -1 if this\n     *         SmsMessage was not created from a SIM SMS EF record.\n     * @deprecated Use android.telephony.SmsMessage and getIndexOnIcc instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndexOnIcc()",
    "returnType" : "int",
    "comment" : "\n     * Returns the record index of the message on the ICC (1-based index).\n     * @return the record index of the message on the ICC, or -1 if this\n     *         SmsMessage was not created from a ICC SMS EF record.\n     * @deprecated Use android.telephony.SmsMessage.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStatus()",
    "returnType" : "int",
    "comment" : "\n     * GSM:\n     * For an SMS-STATUS-REPORT message, this returns the status field from\n     * the status report.  This field indicates the status of a previously\n     * submitted SMS, if requested.  See TS 23.040, 9.2.3.15 TP-Status for a\n     * description of values.\n     * CDMA:\n     * For not interfering with status codes from GSM, the value is\n     * shifted to the bits 31-16.\n     * The value is composed of an error class (bits 25-24) and a status code (bits 23-16).\n     * Possible codes are described in C.S0015-B, v2.0, 4.5.21.\n     *\n     * @return 0 indicates the previously sent message was received.\n     *         See TS 23.040, 9.9.2.3.15 and C.S0015-B, v2.0, 4.5.21\n     *         for a description of other possible values.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStatusReportMessage()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true iff the message is a SMS-STATUS-REPORT message.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReplyPathPresent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff the <code>TP-Reply-Path</code> bit is set in\n     * this message.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final SmsMessageBase getSmsFacility()",
    "returnType" : "SmsMessageBase",
    "comment" : " This method returns the reference to a specific\n     *  SmsMessage object, which is used for accessing its static methods.\n     * @return Specific SmsMessage.\n     * @deprecated Use android.telephony.SmsMessage.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static SmsMessage createFromPdu(byte[] pdu)", "public static int getTPLayerLengthForPDU(String pdu)", "public static int[] calculateLength(CharSequence messageBody, boolean use7bitOnly)", "public static int[] calculateLength(String messageBody, boolean use7bitOnly)", "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, String message, boolean statusReportRequested, byte[] header)", "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, String message, boolean statusReportRequested)", "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, short destinationPort, byte[] data, boolean statusReportRequested)", "public String getServiceCenterAddress()", "public String getOriginatingAddress()", "public String getDisplayOriginatingAddress()", "public String getMessageBody()", "public MessageClass getMessageClass()", "public String getDisplayMessageBody()", "public String getPseudoSubject()", "public long getTimestampMillis()", "public boolean isEmail()", "public String getEmailBody()", "public String getEmailFrom()", "public int getProtocolIdentifier()", "public boolean isReplace()", "public boolean isCphsMwiMessage()", "public boolean isMWIClearMessage()", "public boolean isMWISetMessage()", "public boolean isMwiDontStore()", "public byte[] getUserData()", "public byte[] getPdu()", "public int getStatusOnSim()", "public int getStatusOnIcc()", "public int getIndexOnSim()", "public int getIndexOnIcc()", "public int getStatus()", "public boolean isStatusReportMessage()", "public boolean isReplyPathPresent()", "private static final SmsMessageBase getSmsFacility()" ],
  "variableNames" : [ "ENCODING_UNKNOWN", "ENCODING_7BIT", "ENCODING_8BIT", "ENCODING_16BIT", "MAX_USER_DATA_BYTES", "MAX_USER_DATA_BYTES_WITH_HEADER", "MAX_USER_DATA_SEPTETS", "MAX_USER_DATA_SEPTETS_WITH_HEADER", "mWrappedSmsMessage" ]
}