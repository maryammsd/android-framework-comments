{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/attribute/BasicFileAttributes.java",
  "packageName" : "java.nio.file.attribute",
  "className" : "BasicFileAttributes",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " FileTime lastModifiedTime()",
    "returnType" : "FileTime",
    "comment" : "\n     * Returns the time of last modification.\n     *\n     * <p> If the file system implementation does not support a time stamp\n     * to indicate the time of last modification then this method returns an\n     * implementation specific default value, typically a {@code FileTime}\n     * representing the epoch (1970-01-01T00:00:00Z).\n     *\n     * @return  a {@code FileTime} representing the time the file was last\n     *          modified\n     ",
    "links" : [ ]
  }, {
    "name" : " FileTime lastAccessTime()",
    "returnType" : "FileTime",
    "comment" : "\n     * Returns the time of last access.\n     *\n     * <p> If the file system implementation does not support a time stamp\n     * to indicate the time of last access then this method returns\n     * an implementation specific default value, typically the {@link\n     * #lastModifiedTime() last-modified-time} or a {@code FileTime}\n     * representing the epoch (1970-01-01T00:00:00Z).\n     *\n     * @return  a {@code FileTime} representing the time of last access\n     ",
    "links" : [ "#lastModifiedTime()" ]
  }, {
    "name" : " FileTime creationTime()",
    "returnType" : "FileTime",
    "comment" : "\n     * Returns the creation time. The creation time is the time that the file\n     * was created.\n     *\n     * <p> If the file system implementation does not support a time stamp\n     * to indicate the time when the file was created then this method returns\n     * an implementation specific default value, typically the {@link\n     * #lastModifiedTime() last-modified-time} or a {@code FileTime}\n     * representing the epoch (1970-01-01T00:00:00Z).\n     *\n     * @return   a {@code FileTime} representing the time the file was created\n     ",
    "links" : [ "#lastModifiedTime()" ]
  }, {
    "name" : " boolean isRegularFile()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether the file is a regular file with opaque content.\n     *\n     * @return {@code true} if the file is a regular file with opaque content\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isDirectory()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether the file is a directory.\n     *\n     * @return {@code true} if the file is a directory\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isSymbolicLink()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether the file is a symbolic link.\n     *\n     * @return {@code true} if the file is a symbolic link\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isOther()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether the file is something other than a regular file, directory,\n     * or symbolic link.\n     *\n     * @return {@code true} if the file something other than a regular file,\n     *         directory or symbolic link\n     ",
    "links" : [ ]
  }, {
    "name" : " long size()",
    "returnType" : "long",
    "comment" : "\n     * Returns the size of the file (in bytes). The size may differ from the\n     * actual size on the file system due to compression, support for sparse\n     * files, or other reasons. The size of files that are not {@link\n     * #isRegularFile regular} files is implementation specific and\n     * therefore unspecified.\n     *\n     * @return  the file size, in bytes\n     ",
    "links" : [ "#isRegularFile" ]
  }, {
    "name" : " Object fileKey()",
    "returnType" : "Object",
    "comment" : "\n     * Returns an object that uniquely identifies the given file, or {@code\n     * null} if a file key is not available. On some platforms or file systems\n     * it is possible to use an identifier, or a combination of identifiers to\n     * uniquely identify a file. Such identifiers are important for operations\n     * such as file tree traversal in file systems that support <a\n     * href=\"../package-summary.html#links\">symbolic links</a> or file systems\n     * that allow a file to be an entry in more than one directory. On UNIX file\n     * systems, for example, the <em>device ID</em> and <em>inode</em> are\n     * commonly used for such purposes.\n     *\n     * <p> The file key returned by this method can only be guaranteed to be\n     * unique if the file system and files remain static. Whether a file system\n     * re-uses identifiers after a file is deleted is implementation dependent and\n     * therefore unspecified.\n     *\n     * <p> File keys returned by this method can be compared for equality and are\n     * suitable for use in collections. If the file system and files remain static,\n     * and two files are the {@link java.nio.file.Files#isSameFile same} with\n     * non-{@code null} file keys, then their file keys are equal.\n     *\n     * @return an object that uniquely identifies the given file, or {@code null}\n     *\n     * @see java.nio.file.Files#walkFileTree\n     ",
    "links" : [ "java.nio.file.Files#isSameFile" ]
  } ],
  "methodNames" : [ " FileTime lastModifiedTime()", " FileTime lastAccessTime()", " FileTime creationTime()", " boolean isRegularFile()", " boolean isDirectory()", " boolean isSymbolicLink()", " boolean isOther()", " long size()", " Object fileKey()" ],
  "variableNames" : [ ]
}