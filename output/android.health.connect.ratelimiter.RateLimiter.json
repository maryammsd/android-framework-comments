{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/health/connect/ratelimiter/RateLimiter.java",
  "packageName" : "android.health.connect.ratelimiter",
  "className" : "RateLimiter",
  "comment" : "\n * Basic rate limiter that assigns a fixed request rate quota. If no quota has previously been noted\n * (e.g. first request scenario), the full quota for each window will be immediately granted.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CHUNK_SIZE_LIMIT_IN_BYTES",
    "type" : "String",
    "comment" : " The maximum number of bytes a client can insert in one go.",
    "links" : [ ]
  }, {
    "name" : "RECORD_SIZE_LIMIT_IN_BYTES",
    "type" : "String",
    "comment" : " The maximum size in bytes of a single record a client can insert in one go.",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_API_CALL_COST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLockAcrossAppQuota",
    "type" : "ReentrantReadWriteLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sQuotaBucketToAcrossAppsRemainingMemoryQuota",
    "type" : "Map<Integer, Quota>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUserIdToQuotasMap",
    "type" : "Map<Integer, Map<Integer, Quota>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLocks",
    "type" : "ConcurrentMap<Integer, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUOTA_BUCKET_TO_MAX_ROLLING_QUOTA_MAP",
    "type" : "Map<Integer, Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUOTA_BUCKET_TO_MAX_MEMORY_QUOTA_MAP",
    "type" : "Map<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "ReentrantReadWriteLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRateLimiterEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void tryAcquireApiCallQuota(int uid, @QuotaCategory.Type int quotaCategory, boolean isInForeground)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void tryAcquireApiCallQuota(int uid, @QuotaCategory.Type int quotaCategory, boolean isInForeground, long memoryCost)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void checkMaxChunkMemoryUsage(long memoryCost)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void checkMaxRecordMemoryUsage(long memoryCost)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void clearCache()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void updateMaxRollingQuotaMap(Map<Integer, Integer> quotaBucketToMaxRollingQuotaMap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void updateMemoryQuotaMap(Map<String, Integer> quotaBucketToMaxMemoryQuotaMap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void updateEnableRateLimiterFlag(boolean enableRateLimiter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Object getLockObject(int uid)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void spendApiCallResourcesIfAvailable(int uid, List<Integer> quotaBuckets, int cost)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void spendApiAndMemoryResourcesIfAvailable(int uid, List<Integer> apiQuotaBuckets, List<Integer> memoryQuotaBuckets, int cost, long memoryCost, boolean isInForeground)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkIfResourcesAreAvailable(Map<Integer, Float> quotaBucketToAvailableQuotaMap, List<Integer> quotaBuckets, long cost)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void spendAvailableResources(Quota quota, Integer quotaBucket, long memoryCost)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void spendAvailableResources(int uid, Map<Integer, Float> quotaBucketToAvailableQuotaMap, List<Integer> quotaBuckets, long cost)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void spendResources(int uid, @QuotaBucket.Type int quotaBucket, float availableQuota, long cost)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Map<Integer, Float> getQuotaBucketToAvailableQuotaMap(int uid, List<Integer> quotaBuckets)",
    "returnType" : "Map<Integer, Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void hasSufficientQuota(float availableQuota, long cost, @QuotaBucket.Type int quotaBucket)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float getAvailableQuota(@QuotaBucket.Type int quotaBucket, Quota quota)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Quota getQuota(int uid, @QuotaBucket.Type int quotaBucket)",
    "returnType" : "Quota",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Quota getQuota(@QuotaBucket.Type int quotaBucket)",
    "returnType" : "Quota",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Quota getInitialQuota(@QuotaBucket.Type int bucket)",
    "returnType" : "Quota",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Duration getWindowDuration(@QuotaBucket.Type int quotaBucket)",
    "returnType" : "Duration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float getConfiguredMaxRollingQuota(@QuotaBucket.Type int quotaBucket)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getConfiguredMaxApiMemoryQuota(String quotaBucket)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<Integer> getAffectedAPIQuotaBuckets(@QuotaCategory.Type int quotaCategory, boolean isInForeground)",
    "returnType" : "List<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<Integer> getAffectedMemoryQuotaBuckets(@QuotaCategory.Type int quotaCategory, boolean isInForeground)",
    "returnType" : "List<Integer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void tryAcquireApiCallQuota(int uid, @QuotaCategory.Type int quotaCategory, boolean isInForeground)", "public static void tryAcquireApiCallQuota(int uid, @QuotaCategory.Type int quotaCategory, boolean isInForeground, long memoryCost)", "public static void checkMaxChunkMemoryUsage(long memoryCost)", "public static void checkMaxRecordMemoryUsage(long memoryCost)", "public static void clearCache()", "public static void updateMaxRollingQuotaMap(Map<Integer, Integer> quotaBucketToMaxRollingQuotaMap)", "public static void updateMemoryQuotaMap(Map<String, Integer> quotaBucketToMaxMemoryQuotaMap)", "public static void updateEnableRateLimiterFlag(boolean enableRateLimiter)", "private static Object getLockObject(int uid)", "private static void spendApiCallResourcesIfAvailable(int uid, List<Integer> quotaBuckets, int cost)", "private static void spendApiAndMemoryResourcesIfAvailable(int uid, List<Integer> apiQuotaBuckets, List<Integer> memoryQuotaBuckets, int cost, long memoryCost, boolean isInForeground)", "private static void checkIfResourcesAreAvailable(Map<Integer, Float> quotaBucketToAvailableQuotaMap, List<Integer> quotaBuckets, long cost)", "private static void spendAvailableResources(Quota quota, Integer quotaBucket, long memoryCost)", "private static void spendAvailableResources(int uid, Map<Integer, Float> quotaBucketToAvailableQuotaMap, List<Integer> quotaBuckets, long cost)", "private static void spendResources(int uid, @QuotaBucket.Type int quotaBucket, float availableQuota, long cost)", "private static Map<Integer, Float> getQuotaBucketToAvailableQuotaMap(int uid, List<Integer> quotaBuckets)", "private static void hasSufficientQuota(float availableQuota, long cost, @QuotaBucket.Type int quotaBucket)", "private static float getAvailableQuota(@QuotaBucket.Type int quotaBucket, Quota quota)", "private static Quota getQuota(int uid, @QuotaBucket.Type int quotaBucket)", "private static Quota getQuota(@QuotaBucket.Type int quotaBucket)", "private static Quota getInitialQuota(@QuotaBucket.Type int bucket)", "private static Duration getWindowDuration(@QuotaBucket.Type int quotaBucket)", "private static float getConfiguredMaxRollingQuota(@QuotaBucket.Type int quotaBucket)", "private static int getConfiguredMaxApiMemoryQuota(String quotaBucket)", "private static List<Integer> getAffectedAPIQuotaBuckets(@QuotaCategory.Type int quotaCategory, boolean isInForeground)", "private static List<Integer> getAffectedMemoryQuotaBuckets(@QuotaCategory.Type int quotaCategory, boolean isInForeground)" ],
  "variableNames" : [ "CHUNK_SIZE_LIMIT_IN_BYTES", "RECORD_SIZE_LIMIT_IN_BYTES", "DEFAULT_API_CALL_COST", "sLockAcrossAppQuota", "sQuotaBucketToAcrossAppsRemainingMemoryQuota", "sUserIdToQuotasMap", "sLocks", "QUOTA_BUCKET_TO_MAX_ROLLING_QUOTA_MAP", "QUOTA_BUCKET_TO_MAX_MEMORY_QUOTA_MAP", "sLock", "sRateLimiterEnabled" ]
}