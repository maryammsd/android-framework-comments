{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/biometrics/BiometricPrompt.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "Builder",
  "comment" : "\n     * A builder that collects arguments to be shown on the system-provided biometric dialog.\n     ",
  "variables" : [ {
    "name" : "mBundle",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPositiveButtonInfo",
    "type" : "ButtonInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNegativeButtonInfo",
    "type" : "ButtonInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setTitle(@NonNull CharSequence title)",
    "returnType" : "Builder",
    "comment" : "\n         * Required: Sets the title that will be shown on the prompt.\n         * @param title The title to display.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUseDefaultTitle()",
    "returnType" : "Builder",
    "comment" : "\n         * Shows a default, modality-specific title for the prompt if the title would otherwise be\n         * null or empty. Currently for internal use only.\n         * @return This builder.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSubtitle(@NonNull CharSequence subtitle)",
    "returnType" : "Builder",
    "comment" : "\n         * Optional: Sets a subtitle that will be shown on the prompt.\n         * @param subtitle The subtitle to display.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDescription(@NonNull CharSequence description)",
    "returnType" : "Builder",
    "comment" : "\n         * Optional: Sets a description that will be shown on the prompt.\n         * @param description The description to display.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTextForDeviceCredential(@Nullable CharSequence title, @Nullable CharSequence subtitle, @Nullable CharSequence description)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an optional title, subtitle, and/or description that will override other text when\n         * the user is authenticating with PIN/pattern/password. Currently for internal use only.\n         * @return This builder.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setNegativeButton(@NonNull CharSequence text, @NonNull @CallbackExecutor Executor executor, @NonNull DialogInterface.OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Required: Sets the text, executor, and click listener for the negative button on the\n         * prompt. This is typically a cancel button, but may be also used to show an alternative\n         * method for authentication, such as a screen that asks for a backup password.\n         *\n         * <p>Note that this setting is not required, and in fact is explicitly disallowed, if\n         * device credential authentication is enabled via {@link #setAllowedAuthenticators(int)} or\n         * {@link #setDeviceCredentialAllowed(boolean)}.\n         *\n         * @param text Text to be shown on the negative button for the prompt.\n         * @param executor Executor that will be used to run the on click callback.\n         * @param listener Listener containing a callback to be run when the button is pressed.\n         * @return This builder.\n         ",
    "links" : [ "#setAllowedAuthenticators", "#setDeviceCredentialAllowed" ]
  }, {
    "name" : "public Builder setConfirmationRequired(boolean requireConfirmation)",
    "returnType" : "Builder",
    "comment" : "\n         * Optional: Sets a hint to the system for whether to require user confirmation after\n         * authentication. For example, implicit modalities like face and iris are passive, meaning\n         * they don't require an explicit user action to complete authentication. If set to true,\n         * these modalities should require the user to take some action (e.g. press a button)\n         * before {@link AuthenticationCallback#onAuthenticationSucceeded(AuthenticationResult)} is\n         * called. Defaults to true.\n         *\n         * <p>A typical use case for not requiring confirmation would be for low-risk transactions,\n         * such as re-authenticating a recently authenticated application. A typical use case for\n         * requiring confirmation would be for authorizing a purchase.\n         *\n         * <p>Note that this just passes a hint to the system, which the system may then ignore. For\n         * example, a value of false may be ignored if the user has disabled implicit authentication\n         * in Settings, or if it does not apply to a particular modality (e.g. fingerprint).\n         *\n         * @param requireConfirmation true if explicit user confirmation should be required, or\n         *                            false otherwise.\n         * @return This builder.\n         ",
    "links" : [ "AuthenticationCallback#onAuthenticationSucceeded" ]
  }, {
    "name" : "public Builder setDeviceCredentialAllowed(boolean allowed)",
    "returnType" : "Builder",
    "comment" : "\n         * Optional: If enabled, the user will be given the option to authenticate with their device\n         * PIN, pattern, or password. Developers should first check {@link\n         * BiometricManager#canAuthenticate(int)} for {@link Authenticators#DEVICE_CREDENTIAL}\n         * before enabling. If the device is not secured with a credential,\n         * {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)} will be invoked\n         * with {@link BiometricPrompt#BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL}. Defaults to false.\n         *\n         * <p>Note that enabling this option replaces the negative button on the prompt with one\n         * that allows the user to authenticate with their device credential, making it an error to\n         * call {@link #setNegativeButton(CharSequence, Executor, DialogInterface.OnClickListener)}.\n         *\n         * @param allowed true if the prompt should fall back to asking for the user's device\n         *                credential (PIN/pattern/password), or false otherwise.\n         * @return This builder.\n         *\n         * @deprecated Replaced by {@link #setAllowedAuthenticators(int)}.\n         ",
    "links" : [ "Authenticators#DEVICE_CREDENTIAL", "AuthenticationCallback#onAuthenticationError", "BiometricPrompt#BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL", "#setNegativeButton", "#setAllowedAuthenticators" ]
  }, {
    "name" : "public Builder setAllowedAuthenticators(@Authenticators.Types int authenticators)",
    "returnType" : "Builder",
    "comment" : "\n         * Optional: Specifies the type(s) of authenticators that may be invoked by\n         * {@link BiometricPrompt} to authenticate the user. Available authenticator types are\n         * defined in {@link Authenticators} and can be combined via bitwise OR. Defaults to:\n         * <ul>\n         *     <li>{@link Authenticators#BIOMETRIC_WEAK} for non-crypto authentication, or</li>\n         *     <li>{@link Authenticators#BIOMETRIC_STRONG} for crypto-based authentication.</li>\n         * </ul>\n         *\n         * <p>If this method is used and no authenticator of any of the specified types is available\n         * at the time <code>BiometricPrompt#authenticate(...)</code> is called, authentication will\n         * be canceled and {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)}\n         * will be invoked with an appropriate error code.\n         *\n         * <p>This method should be preferred over {@link #setDeviceCredentialAllowed(boolean)} and\n         * overrides the latter if both are used. Using this method to enable device credential\n         * authentication (with {@link Authenticators#DEVICE_CREDENTIAL}) will replace the negative\n         * button on the prompt, making it an error to also call\n         * {@link #setNegativeButton(CharSequence, Executor, DialogInterface.OnClickListener)}.\n         *\n         * <p>If unlocking cryptographic operation(s), it is the application's responsibility to\n         * request authentication with the proper set of authenticators (e.g. match the\n         * authenticators specified during key generation).\n         *\n         * @see KeyGenParameterSpec.Builder#setUserAuthenticationParameters(int, int)\n         * @see KeyProperties#AUTH_BIOMETRIC_STRONG\n         * @see KeyProperties#AUTH_DEVICE_CREDENTIAL\n         *\n         * @param authenticators A bit field representing all valid authenticator types that may be\n         *                       invoked by the prompt.\n         * @return This builder.\n         ",
    "links" : [ "BiometricPrompt", "Authenticators", "Authenticators#BIOMETRIC_WEAK", "Authenticators#BIOMETRIC_STRONG", "AuthenticationCallback#onAuthenticationError", "#setDeviceCredentialAllowed", "Authenticators#DEVICE_CREDENTIAL", "#setNegativeButton" ]
  }, {
    "name" : "public Builder setDisallowBiometricsIfPolicyExists(boolean checkDevicePolicyManager)",
    "returnType" : "Builder",
    "comment" : "\n         * If set check the Device Policy Manager for disabled biometrics.\n         *\n         * @param checkDevicePolicyManager\n         * @return This builder.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setReceiveSystemEvents(boolean set)",
    "returnType" : "Builder",
    "comment" : "\n         * If set, receive internal events via {@link AuthenticationCallback#onSystemEvent(int)}\n         * @param set\n         * @return This builder.\n         * @hide\n         ",
    "links" : [ "AuthenticationCallback#onSystemEvent" ]
  }, {
    "name" : "public BiometricPrompt build()",
    "returnType" : "BiometricPrompt",
    "comment" : "\n         * Creates a {@link BiometricPrompt}.\n         *\n         * @return An instance of {@link BiometricPrompt}.\n         *\n         * @throws IllegalArgumentException If any required fields are unset, or if given any\n         * invalid combination of field values.\n         ",
    "links" : [ "BiometricPrompt", "BiometricPrompt" ]
  } ],
  "variableNames" : [ "mBundle", "mPositiveButtonInfo", "mNegativeButtonInfo", "mContext" ],
  "methodNames" : [ "public Builder setTitle(@NonNull CharSequence title)", "public Builder setUseDefaultTitle()", "public Builder setSubtitle(@NonNull CharSequence subtitle)", "public Builder setDescription(@NonNull CharSequence description)", "public Builder setTextForDeviceCredential(@Nullable CharSequence title, @Nullable CharSequence subtitle, @Nullable CharSequence description)", "public Builder setNegativeButton(@NonNull CharSequence text, @NonNull @CallbackExecutor Executor executor, @NonNull DialogInterface.OnClickListener listener)", "public Builder setConfirmationRequired(boolean requireConfirmation)", "public Builder setDeviceCredentialAllowed(boolean allowed)", "public Builder setAllowedAuthenticators(@Authenticators.Types int authenticators)", "public Builder setDisallowBiometricsIfPolicyExists(boolean checkDevicePolicyManager)", "public Builder setReceiveSystemEvents(boolean set)", "public BiometricPrompt build()" ]
}