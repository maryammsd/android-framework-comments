{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/method/BaseKeyListener.java",
  "packageName" : "android.text.method",
  "className" : "BaseKeyListener",
  "comment" : "\n * Abstract base class for key listeners.\n *\n * Provides a basic foundation for entering and editing text.\n * Subclasses should override {@link #onKeyDown} and {@link #onKeyUp} to insert\n * characters as keys are pressed.\n * <p></p>\n * As for all implementations of {@link KeyListener}, this class is only concerned\n * with hardware keyboards.  Software input methods have no obligation to trigger\n * the methods in this class.\n ",
  "links" : [ "#onKeyDown", "android.text.method.KeyListener", "#onKeyUp" ],
  "variables" : [ {
    "name" : "OLD_SEL_START",
    "type" : "Object",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "LINE_FEED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CARRIAGE_RETURN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCachedPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean backspace(View view, Editable content, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs the action that happens when you press the {@link KeyEvent#KEYCODE_DEL} key in\n     * a {@link TextView}.  If there is a selection, deletes the selection; otherwise,\n     * deletes the character before the cursor, if any; ALT+DEL deletes everything on\n     * the line the cursor is on.\n     *\n     * @return true if anything was deleted; false otherwise.\n     ",
    "links" : [ "android.widget.TextView", "android.view.KeyEvent#KEYCODE_DEL" ]
  }, {
    "name" : "public boolean forwardDelete(View view, Editable content, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs the action that happens when you press the {@link KeyEvent#KEYCODE_FORWARD_DEL}\n     * key in a {@link TextView}.  If there is a selection, deletes the selection; otherwise,\n     * deletes the character before the cursor, if any; ALT+FORWARD_DEL deletes everything on\n     * the line the cursor is on.\n     *\n     * @return true if anything was deleted; false otherwise.\n     ",
    "links" : [ "android.widget.TextView", "android.view.KeyEvent#KEYCODE_FORWARD_DEL" ]
  }, {
    "name" : "private static boolean isVariationSelector(int codepoint)",
    "returnType" : "boolean",
    "comment" : " Returns true if the given code point is a variation selector.",
    "links" : [ ]
  }, {
    "name" : "private static int adjustReplacementSpan(CharSequence text, int offset, boolean moveToStart)",
    "returnType" : "int",
    "comment" : " span.  Otherwise, does nothing and returns the input offset value.",
    "links" : [ ]
  }, {
    "name" : "private static int getOffsetForBackspaceKey(CharSequence text, int offset)",
    "returnType" : "int",
    "comment" : " Returns the start offset to be deleted by a backspace key from the given offset.",
    "links" : [ ]
  }, {
    "name" : "private static int getOffsetForForwardDeleteKey(CharSequence text, int offset, Paint paint)",
    "returnType" : "int",
    "comment" : " Returns the end offset to be deleted by a forward delete key from the given offset.",
    "links" : [ ]
  }, {
    "name" : "private boolean backspaceOrForwardDelete(View view, Editable content, int keyCode, KeyEvent event, boolean isForwardDelete)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean deleteUntilWordBoundary(View view, Editable content, boolean isForwardDelete)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean deleteSelection(View view, Editable content)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean deleteLineFromCursor(View view, Editable content, boolean forward)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int makeTextContentType(Capitalize caps, boolean autoText)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(View view, Editable content, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyOther(View view, Editable content, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Base implementation handles ACTION_MULTIPLE KEYCODE_UNKNOWN by inserting\n     * the event's text into the content.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean backspace(View view, Editable content, int keyCode, KeyEvent event)", "public boolean forwardDelete(View view, Editable content, int keyCode, KeyEvent event)", "private static boolean isVariationSelector(int codepoint)", "private static int adjustReplacementSpan(CharSequence text, int offset, boolean moveToStart)", "private static int getOffsetForBackspaceKey(CharSequence text, int offset)", "private static int getOffsetForForwardDeleteKey(CharSequence text, int offset, Paint paint)", "private boolean backspaceOrForwardDelete(View view, Editable content, int keyCode, KeyEvent event, boolean isForwardDelete)", "private boolean deleteUntilWordBoundary(View view, Editable content, boolean isForwardDelete)", "private boolean deleteSelection(View view, Editable content)", "private boolean deleteLineFromCursor(View view, Editable content, boolean forward)", " static int makeTextContentType(Capitalize caps, boolean autoText)", "public boolean onKeyDown(View view, Editable content, int keyCode, KeyEvent event)", "public boolean onKeyOther(View view, Editable content, KeyEvent event)" ],
  "variableNames" : [ "OLD_SEL_START", "LINE_FEED", "CARRIAGE_RETURN", "mLock", "sCachedPaint" ]
}