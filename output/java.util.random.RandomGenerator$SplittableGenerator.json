{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/random/RandomGenerator.java",
  "packageName" : "java.util.random",
  "className" : "SplittableGenerator",
  "comment" : "\n     * This interface is designed to provide a common protocol for objects that\n     * generate sequences of pseudorandom values and can be <i>split</i> into\n     * two objects (the original one and a new one) each of which obey that same\n     * protocol (and therefore can be recursively split indefinitely).\n     *\n     * <p> Ideally, all {@link SplittableGenerator} objects produced by\n     * recursive splitting from a single original {@link SplittableGenerator}\n     * object are statistically independent of one another and individually\n     * uniform. Therefore we would expect the set of values collectively\n     * generated by a set of such objects to have the same statistical\n     * properties as if the same quantity of values were generated by a single\n     * thread using a single {@link SplittableGenerator} object. In practice,\n     * one must settle for some approximation to independence and uniformity.\n     *\n     * <p> Methods are provided to perform a single splitting operation and also\n     * to produce a stream of generators split off from the original (by either\n     * iterative or recursive splitting, or a combination).\n     *\n     * <p> Objects that implement {@link SplittableGenerator} are typically not\n     * cryptographically secure. Consider instead using {@link SecureRandom} to\n     * get a cryptographically secure pseudo-random number generator for use by\n     * security-sensitive applications.\n     ",
  "links" : [ "java.security.SecureRandom", "SplittableGenerator" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static SplittableGenerator of(String name)",
    "returnType" : "SplittableGenerator",
    "comment" : "\n         * Returns an instance of {@link SplittableGenerator} that utilizes the\n         * {@code name} <a href=\"package-summary.html#algorithms\">algorithm</a>.\n         *\n         * @param name  Name of random number generator\n         *              <a href=\"package-summary.html#algorithms\">algorithm</a>\n         *\n         * @return An instance of {@link SplittableGenerator}\n         *\n         * @throws NullPointerException if name is null\n         * @throws IllegalArgumentException if the named algorithm is not found\n         ",
    "links" : [ "SplittableGenerator" ]
  }, {
    "name" : " SplittableGenerator split()",
    "returnType" : "SplittableGenerator",
    "comment" : "\n         * Returns a new pseudorandom number generator, split off from this one,\n         * that implements the {@link RandomGenerator} and\n         * {@link SplittableGenerator} interfaces.\n         *\n         * <p> This pseudorandom number generator may be used as a source of\n         * pseudorandom bits used to initialize the state of the new one.\n         *\n         * @return a new object that implements the {@link RandomGenerator} and\n         *         {@link SplittableGenerator} interfaces\n         ",
    "links" : [ "java.util.random.RandomGenerator", "SplittableGenerator" ]
  }, {
    "name" : " SplittableGenerator split(SplittableGenerator source)",
    "returnType" : "SplittableGenerator",
    "comment" : "\n         * Returns a new pseudorandom number generator, split off from this one,\n         * that implements the {@link RandomGenerator} and\n         * {@link SplittableGenerator} interfaces.\n         *\n         * @param source a {@link SplittableGenerator} instance to be used instead\n         *               of this one as a source of pseudorandom bits used to\n         *               initialize the state of the new ones.\n         *\n         * @return an object that implements the {@link RandomGenerator} and\n         *         {@link SplittableGenerator} interfaces\n         *\n         * @throws NullPointerException if source is null\n         ",
    "links" : [ "java.util.random.RandomGenerator", "SplittableGenerator" ]
  }, {
    "name" : " Stream<SplittableGenerator> splits()",
    "returnType" : "Stream<SplittableGenerator>",
    "comment" : "\n         * Returns an effectively unlimited stream of new pseudorandom number\n         * generators, each of which implements the {@link SplittableGenerator}\n         * interface.\n         *\n         * <p> This pseudorandom number generator may be used as a source of\n         * pseudorandom bits used to initialize the state the new ones.\n         *\n         * @implNote It is permitted to implement this method in a manner\n         * equivalent to {@link SplittableGenerator#splits(long) splits}\n         * ({@link Long#MAX_VALUE Long.MAX_VALUE}).\n         *\n         * @return a stream of {@link SplittableGenerator} objects\n         *\n         * @implSpec The default implementation invokes\n         * {@link SplittableGenerator#splits(SplittableGenerator) splits(this)}.\n         ",
    "links" : [ "#MAX_VALUE", "#splits(SplittableGenerator)", "SplittableGenerator", "#splits(long)" ]
  }, {
    "name" : " Stream<SplittableGenerator> splits(long streamSize)",
    "returnType" : "Stream<SplittableGenerator>",
    "comment" : "\n         * Returns a stream producing the given {@code streamSize} number of new\n         * pseudorandom number generators, each of which implements the\n         * {@link SplittableGenerator} interface.\n         *\n         * <p> This pseudorandom number generator may be used as a source of\n         * pseudorandom bits used to initialize the state the new ones.\n         *\n         * @param streamSize the number of values to generate\n         *\n         * @return a stream of {@link SplittableGenerator} objects\n         *\n         * @throws IllegalArgumentException if {@code streamSize} is\n         *         less than zero\n         ",
    "links" : [ "SplittableGenerator" ]
  }, {
    "name" : " Stream<SplittableGenerator> splits(SplittableGenerator source)",
    "returnType" : "Stream<SplittableGenerator>",
    "comment" : "\n         * Returns an effectively unlimited stream of new pseudorandom number\n         * generators, each of which implements the {@link SplittableGenerator}\n         * interface.\n         *\n         * @param source a {@link SplittableGenerator} instance to be used instead\n         *               of this one as a source of pseudorandom bits used to\n         *               initialize the state of the new ones.\n         *\n         * @return a stream of {@link SplittableGenerator} objects\n         *\n         * @implNote It is permitted to implement this method in a manner\n         *           equivalent to {@link SplittableGenerator#splits(long, SplittableGenerator) splits}\n         *           ({@link Long#MAX_VALUE Long.MAX_VALUE}, source).\n         *\n         * @throws NullPointerException if source is null\n         ",
    "links" : [ "#splits(long", "#MAX_VALUE", "SplittableGenerator" ]
  }, {
    "name" : " Stream<SplittableGenerator> splits(long streamSize, SplittableGenerator source)",
    "returnType" : "Stream<SplittableGenerator>",
    "comment" : "\n         * Returns a stream producing the given {@code streamSize} number of new\n         * pseudorandom number generators, each of which implements the\n         * {@link SplittableGenerator} interface.\n         *\n         * @param streamSize the number of values to generate\n         * @param source a {@link SplittableGenerator} instance to be used instead\n         *               of this one as a source of pseudorandom bits used to\n         *               initialize the state of the new ones.\n         *\n         * @return a stream of {@link SplittableGenerator} objects\n         *\n         * @throws IllegalArgumentException if {@code streamSize} is\n         *         less than zero\n         * @throws NullPointerException if source is null\n         ",
    "links" : [ "SplittableGenerator" ]
  }, {
    "name" : " Stream<RandomGenerator> rngs()",
    "returnType" : "Stream<RandomGenerator>",
    "comment" : "\n         * Returns an effectively unlimited stream of new pseudorandom number\n         * generators, each of which implements the {@link RandomGenerator}\n         * interface. Ideally the generators in the stream will appear to be\n         * statistically independent.\n         *\n         * @return a stream of objects that implement the {@link RandomGenerator} interface\n         *\n         * @implSpec The default implementation calls {@link SplittableGenerator#splits() splits}().\n         ",
    "links" : [ "java.util.random.RandomGenerator", "#splits()" ]
  }, {
    "name" : " Stream<RandomGenerator> rngs(long streamSize)",
    "returnType" : "Stream<RandomGenerator>",
    "comment" : "\n         * Returns a stream producing the given {@code streamSize} number of new\n         * pseudorandom number generators, each of which implements the\n         * {@link RandomGenerator} interface. Ideally the generators in the\n         * stream will appear to be statistically independent.\n         *\n         * @param streamSize the number of generators to generate\n         *\n         * @return a stream of objects that implement the {@link RandomGenerator} interface\n         *\n         * @throws IllegalArgumentException if {@code streamSize} is\n         *         less than zero\n         *\n         * @implSpec The default implementation calls {@link SplittableGenerator#splits(long) splits}(streamSize).\n         ",
    "links" : [ "java.util.random.RandomGenerator", "#splits(long)" ]
  } ],
  "methodNames" : [ " static SplittableGenerator of(String name)", " SplittableGenerator split()", " SplittableGenerator split(SplittableGenerator source)", " Stream<SplittableGenerator> splits()", " Stream<SplittableGenerator> splits(long streamSize)", " Stream<SplittableGenerator> splits(SplittableGenerator source)", " Stream<SplittableGenerator> splits(long streamSize, SplittableGenerator source)", " Stream<RandomGenerator> rngs()", " Stream<RandomGenerator> rngs(long streamSize)" ],
  "variableNames" : [ ]
}