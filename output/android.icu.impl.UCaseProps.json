{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/UCaseProps.java",
  "packageName" : "android.icu.impl",
  "className" : "UCaseProps",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "flagsOffset",
    "type" : "byte[]",
    "comment" : " number of bits in an 8-bit integer value ",
    "links" : [ ]
  }, {
    "name" : "MAX_STRING_LENGTH",
    "type" : "int",
    "comment" : "\n     * For string case mappings, a single character (a code point) is mapped\n     * either to itself (in which case in-place mapping functions do nothing),\n     * or to another single code point, or to a string.\n     * Aside from the string contents, these are indicated with a single int\n     * value as follows:\n     *\n     * Mapping to self: Negative values (~self instead of -self to support U+0000)\n     *\n     * Mapping to another code point: Positive values >MAX_STRING_LENGTH\n     *\n     * Mapping to a string: The string length (0..MAX_STRING_LENGTH) is\n     * returned. Note that the string result may indeed have zero length.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOC_ROOT",
    "type" : "int",
    "comment" : "ivate static final int LOC_UNKNOWN=0;",
    "links" : [ ]
  }, {
    "name" : "LOC_TURKISH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOC_LITHUANIAN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOC_GREEK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOC_DUTCH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOC_ARMENIAN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "iDot",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "jDot",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "iOgonekDot",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "iDotGrave",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "iDotAcute",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "iDotTilde",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FOLD_CASE_OPTIONS_MASK",
    "type" : "int",
    "comment" : "\n     * Bit mask for getting just the options from a string compare options word\n     * that are relevant for case folding (of a single string or code point).\n     *\n     * Currently only bit 0 for FOLD_CASE_EXCLUDE_SPECIAL_I.\n     * It is conceivable that at some point we might use one more bit for using uppercase sharp s.\n     * It is conceivable that at some point we might want the option to use only simple case foldings\n     * when operating on strings.\n     *\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "dummyStringBuilder",
    "type" : "StringBuilder",
    "comment" : "\n     * We need a StringBuilder for multi-code point output from the\n     * full case mapping functions. However, we do not actually use that output,\n     * we just check whether the input character was mapped to anything else.\n     * We use a shared StringBuilder to avoid allocating a new one in each call.\n     * We remove its contents each time so that it does not grow large over time.\n     *\n     * @internal\n     ",
    "links" : [ ]
  }, {
    "name" : "indexes",
    "type" : "int[]",
    "comment" : " data members -------------------------------------------------------- ***",
    "links" : [ ]
  }, {
    "name" : "exceptions",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "unfold",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "trie",
    "type" : "Trie2_16",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_NAME",
    "type" : "String",
    "comment" : " data format constants ----------------------------------------------- ***",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_FILE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FMT",
    "type" : "int",
    "comment" : " format \"cAsE\" ",
    "links" : [ ]
  }, {
    "name" : "IX_TRIE_SIZE",
    "type" : "int",
    "comment" : "private static final int IX_LENGTH=1;",
    "links" : [ ]
  }, {
    "name" : "IX_EXC_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_UNFOLD_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_TOP",
    "type" : "int",
    "comment" : "private static final int IX_MAX_FULL_LENGTH=15;",
    "links" : [ ]
  }, {
    "name" : "TYPE_MASK",
    "type" : "int",
    "comment" : " 2-bit constants for types of cased characters ",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOWER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPPER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TITLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IGNORABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXCEPTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SENSITIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOT_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOFT_DOTTED",
    "type" : "int",
    "comment" : "private static final int NO_DOT=        0;      /* normal characters with cc=0 */",
    "links" : [ ]
  }, {
    "name" : "ABOVE",
    "type" : "int",
    "comment" : " soft-dotted characters with cc=0 ",
    "links" : [ ]
  }, {
    "name" : "OTHER_ACCENT",
    "type" : "int",
    "comment" : " \"above\" accents with cc=230 ",
    "links" : [ ]
  }, {
    "name" : "DELTA_SHIFT",
    "type" : "int",
    "comment" : " no exception: bits 15..7 are a 9-bit signed case mapping delta ",
    "links" : [ ]
  }, {
    "name" : "EXC_SHIFT",
    "type" : "int",
    "comment" : " exception: bits 15..4 are an unsigned 12-bit index into the exceptions array ",
    "links" : [ ]
  }, {
    "name" : "EXC_LOWER",
    "type" : "int",
    "comment" : " first 8 bits indicate values in optional slots ",
    "links" : [ ]
  }, {
    "name" : "EXC_FOLD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXC_UPPER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXC_TITLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXC_DELTA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXC_CLOSURE",
    "type" : "int",
    "comment" : "private static final int EXC_5=5;           /* reserved */",
    "links" : [ ]
  }, {
    "name" : "EXC_FULL_MAPPINGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXC_DOUBLE_SLOTS",
    "type" : "int",
    "comment" : " each slot is 2 uint16_t instead of 1 ",
    "links" : [ ]
  }, {
    "name" : "EXC_NO_SIMPLE_CASE_FOLDING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXC_DELTA_IS_NEGATIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXC_SENSITIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXC_DOT_SHIFT",
    "type" : "int",
    "comment" : " EXC_DOT_MASK=DOT_MASK<<EXC_DOT_SHIFT ",
    "links" : [ ]
  }, {
    "name" : "EXC_CONDITIONAL_SPECIAL",
    "type" : "int",
    "comment" : " complex/conditional mappings ",
    "links" : [ ]
  }, {
    "name" : "EXC_CONDITIONAL_FOLD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FULL_LOWER",
    "type" : "int",
    "comment" : " definitions for lengths word for full case mappings ",
    "links" : [ ]
  }, {
    "name" : "CLOSURE_MAX_LENGTH",
    "type" : "int",
    "comment" : "private static final int FULL_MAPPINGS_MAX_LENGTH=4*0xf;",
    "links" : [ ]
  }, {
    "name" : "UNFOLD_ROWS",
    "type" : "int",
    "comment" : " constants for reverse case folding (\"unfold\") data ",
    "links" : [ ]
  }, {
    "name" : "UNFOLD_ROW_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNFOLD_STRING_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INSTANCE",
    "type" : "UCaseProps",
    "comment" : "\n     * public singleton instance\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private final void readData(ByteBuffer bytes) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void addPropertyStarts(UnicodeSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int getExceptionsOffset(int props)",
    "returnType" : "int",
    "comment" : " data access primitives ---------------------------------------------- ***",
    "links" : [ ]
  }, {
    "name" : " static final boolean propsHasException(int props)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final boolean hasSlot(int flags, int index)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final byte slotOffset(int flags, int index)",
    "returnType" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final long getSlotValueAndOffset(int excWord, int index, int excOffset)",
    "returnType" : "long",
    "comment" : "\n     * Get the value of an optional-value slot where hasSlot(excWord, index).\n     *\n     * @param excWord (in) initial exceptions word\n     * @param index (in) desired slot index\n     * @param excOffset (in) offset into exceptions[] after excWord=exceptions.charAt(excOffset++);\n     * @return bits 31..0: slot value\n     *             63..32: modified excOffset, moved to the last char of the value, use +1 for beginning of next slot\n     ",
    "links" : [ ]
  }, {
    "name" : "private final int getSlotValue(int excWord, int index, int excOffset)",
    "returnType" : "int",
    "comment" : " same as getSlotValueAndOffset() but does not return the slot offset ",
    "links" : [ ]
  }, {
    "name" : "public final int tolower(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int toupper(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int totitle(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void addCaseClosure(int c, UnicodeSet set)",
    "returnType" : "void",
    "comment" : "\n     * Adds all simple case mappings and the full case folding for c to sa,\n     * and also adds special case closure mappings.\n     * c itself is not added.\n     * For example, the mappings\n     * - for s include long s\n     * - for sharp s include ss\n     * - for k include the Kelvin sign\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void addSimpleCaseClosure(int c, UnicodeSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final int strcmpMax(String s, int unfoldOffset, int max)",
    "returnType" : "int",
    "comment" : "\n     * compare s, which has a length, with t=unfold[unfoldOffset..], which has a maximum length or is NUL-terminated\n     * must be s.length()>0 and max>0 and s.length()<=max\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean addStringCaseClosure(String s, UnicodeSet set)",
    "returnType" : "boolean",
    "comment" : "\n     * Maps the string to single code points and adds the associated case closure\n     * mappings.\n     * The string is mapped to code points if it is their full case folding string.\n     * In other words, this performs a reverse full case folding and then\n     * adds the case closure items of the resulting code points.\n     * If the string is found and its closure applied, then\n     * the string itself is added as well as part of its code points' closure.\n     *\n     * @return true if the string was found\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getType(int c)",
    "returnType" : "int",
    "comment" : " @return NONE, LOWER, UPPER, TITLE ",
    "links" : [ ]
  }, {
    "name" : "public final int getTypeOrIgnorable(int c)",
    "returnType" : "int",
    "comment" : " @return like getType() but also sets IGNORABLE if c is case-ignorable ",
    "links" : [ ]
  }, {
    "name" : "public final int getDotType(int c)",
    "returnType" : "int",
    "comment" : " @return NO_DOT, SOFT_DOTTED, ABOVE, OTHER_ACCENT ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isSoftDotted(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isCaseSensitive(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final int getCaseLocale(Locale locale)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final int getCaseLocale(ULocale locale)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int getCaseLocale(String language)",
    "returnType" : "int",
    "comment" : " Accepts both 2- and 3-letter language subtags. ",
    "links" : [ ]
  }, {
    "name" : "private final boolean isFollowedByCasedLetter(ContextIterator iter, int dir)",
    "returnType" : "boolean",
    "comment" : " Is followed by {case-ignorable}* cased  ? (dir determines looking forward/backward) ",
    "links" : [ ]
  }, {
    "name" : "private final boolean isPrecededBySoftDotted(ContextIterator iter)",
    "returnType" : "boolean",
    "comment" : " Is preceded by Soft_Dotted character with no intervening cc=230 ? ",
    "links" : [ ]
  }, {
    "name" : "private final boolean isPrecededBy_I(ContextIterator iter)",
    "returnType" : "boolean",
    "comment" : " Is preceded by base character 'I' with no intervening cc=230 ? ",
    "links" : [ ]
  }, {
    "name" : "private final boolean isFollowedByMoreAbove(ContextIterator iter)",
    "returnType" : "boolean",
    "comment" : " Is followed by one or more cc==230 ? ",
    "links" : [ ]
  }, {
    "name" : "private final boolean isFollowedByDotAbove(ContextIterator iter)",
    "returnType" : "boolean",
    "comment" : " Is followed by a dot above (without cc==230 in between) ? ",
    "links" : [ ]
  }, {
    "name" : "public final int toFullLower(int c, ContextIterator iter, Appendable out, int caseLocale)",
    "returnType" : "int",
    "comment" : "\n     * Get the full lowercase mapping for c.\n     *\n     * @param c Character to be mapped.\n     * @param iter Character iterator, used for context-sensitive mappings.\n     *             See ContextIterator for details.\n     *             If iter==null then a context-independent result is returned.\n     * @param out If the mapping result is a string, then it is appended to out.\n     * @param caseLocale Case locale value from ucase_getCaseLocale().\n     * @return Output code point or string length, see MAX_STRING_LENGTH.\n     *\n     * @see ContextIterator\n     * @see #MAX_STRING_LENGTH\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private final int toUpperOrTitle(int c, ContextIterator iter, Appendable out, int loc, boolean upperNotTitle)",
    "returnType" : "int",
    "comment" : " internal ",
    "links" : [ ]
  }, {
    "name" : "public final int toFullUpper(int c, ContextIterator iter, Appendable out, int caseLocale)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int toFullTitle(int c, ContextIterator iter, Appendable out, int caseLocale)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int fold(int c, int options)",
    "returnType" : "int",
    "comment" : " return the simple case folding mapping for c ",
    "links" : [ ]
  }, {
    "name" : "public final int toFullFolding(int c, Appendable out, int options)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasBinaryProperty(int c, int which)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Trie2_16 getTrie()",
    "returnType" : "Trie2_16",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final int getTypeFromProps(int props)",
    "returnType" : "int",
    "comment" : " @return NONE, LOWER, UPPER, TITLE ",
    "links" : [ ]
  }, {
    "name" : "private static final int getTypeAndIgnorableFromProps(int props)",
    "returnType" : "int",
    "comment" : " @return like getTypeFromProps() but also sets IGNORABLE if props indicate case-ignorable ",
    "links" : [ ]
  }, {
    "name" : " static final boolean isUpperOrTitleFromProps(int props)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final int getDelta(int props)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private final void readData(ByteBuffer bytes) throws IOException", "public final void addPropertyStarts(UnicodeSet set)", "private static final int getExceptionsOffset(int props)", " static final boolean propsHasException(int props)", "private static final boolean hasSlot(int flags, int index)", "private static final byte slotOffset(int flags, int index)", "private final long getSlotValueAndOffset(int excWord, int index, int excOffset)", "private final int getSlotValue(int excWord, int index, int excOffset)", "public final int tolower(int c)", "public final int toupper(int c)", "public final int totitle(int c)", "public final void addCaseClosure(int c, UnicodeSet set)", "public final void addSimpleCaseClosure(int c, UnicodeSet set)", "private final int strcmpMax(String s, int unfoldOffset, int max)", "public final boolean addStringCaseClosure(String s, UnicodeSet set)", "public final int getType(int c)", "public final int getTypeOrIgnorable(int c)", "public final int getDotType(int c)", "public final boolean isSoftDotted(int c)", "public final boolean isCaseSensitive(int c)", "public static final int getCaseLocale(Locale locale)", "public static final int getCaseLocale(ULocale locale)", "private static final int getCaseLocale(String language)", "private final boolean isFollowedByCasedLetter(ContextIterator iter, int dir)", "private final boolean isPrecededBySoftDotted(ContextIterator iter)", "private final boolean isPrecededBy_I(ContextIterator iter)", "private final boolean isFollowedByMoreAbove(ContextIterator iter)", "private final boolean isFollowedByDotAbove(ContextIterator iter)", "public final int toFullLower(int c, ContextIterator iter, Appendable out, int caseLocale)", "private final int toUpperOrTitle(int c, ContextIterator iter, Appendable out, int loc, boolean upperNotTitle)", "public final int toFullUpper(int c, ContextIterator iter, Appendable out, int caseLocale)", "public final int toFullTitle(int c, ContextIterator iter, Appendable out, int caseLocale)", "public final int fold(int c, int options)", "public final int toFullFolding(int c, Appendable out, int options)", "public final boolean hasBinaryProperty(int c, int which)", " static Trie2_16 getTrie()", " static final int getTypeFromProps(int props)", "private static final int getTypeAndIgnorableFromProps(int props)", " static final boolean isUpperOrTitleFromProps(int props)", " static final int getDelta(int props)" ],
  "variableNames" : [ "flagsOffset", "MAX_STRING_LENGTH", "LOC_ROOT", "LOC_TURKISH", "LOC_LITHUANIAN", "LOC_GREEK", "LOC_DUTCH", "LOC_ARMENIAN", "iDot", "jDot", "iOgonekDot", "iDotGrave", "iDotAcute", "iDotTilde", "FOLD_CASE_OPTIONS_MASK", "dummyStringBuilder", "indexes", "exceptions", "unfold", "trie", "DATA_NAME", "DATA_TYPE", "DATA_FILE_NAME", "FMT", "IX_TRIE_SIZE", "IX_EXC_LENGTH", "IX_UNFOLD_LENGTH", "IX_TOP", "TYPE_MASK", "NONE", "LOWER", "UPPER", "TITLE", "IGNORABLE", "EXCEPTION", "SENSITIVE", "DOT_MASK", "SOFT_DOTTED", "ABOVE", "OTHER_ACCENT", "DELTA_SHIFT", "EXC_SHIFT", "EXC_LOWER", "EXC_FOLD", "EXC_UPPER", "EXC_TITLE", "EXC_DELTA", "EXC_CLOSURE", "EXC_FULL_MAPPINGS", "EXC_DOUBLE_SLOTS", "EXC_NO_SIMPLE_CASE_FOLDING", "EXC_DELTA_IS_NEGATIVE", "EXC_SENSITIVE", "EXC_DOT_SHIFT", "EXC_CONDITIONAL_SPECIAL", "EXC_CONDITIONAL_FOLD", "FULL_LOWER", "CLOSURE_MAX_LENGTH", "UNFOLD_ROWS", "UNFOLD_ROW_WIDTH", "UNFOLD_STRING_WIDTH", "INSTANCE" ]
}