{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/CloseGuard.java",
  "packageName" : "android.util",
  "className" : "CloseGuard",
  "comment" : "\n * CloseGuard is a mechanism for flagging implicit finalizer cleanup of\n * resources that should have been cleaned up by explicit close\n * methods (aka \"explicit termination methods\" in Effective Java).\n * <p>\n * A simple example: <pre>   {@code\n *   class Foo {\n *\n *       private final CloseGuard guard = new CloseGuard();\n *\n *       ...\n *\n *       public Foo() {\n *           ...;\n *           guard.open(\"cleanup\");\n *       }\n *\n *       public void cleanup() {\n *          guard.close();\n *          ...;\n *          if (Build.VERSION.SDK_INT >= 28) {\n *              Reference.reachabilityFence(this);\n *          }\n *          // For full correctness in the absence of a close() call, other methods may also need\n *          // reachabilityFence() calls.\n *       }\n *\n *       protected void finalize() throws Throwable {\n *           try {\n *               // Note that guard could be null if the constructor threw.\n *               if (guard != null) {\n *                   guard.warnIfOpen();\n *               }\n *               cleanup();\n *           } finally {\n *               super.finalize();\n *           }\n *       }\n *   }\n * }</pre>\n *\n * In usage where the resource to be explicitly cleaned up is\n * allocated after object construction, CloseGuard protection can\n * be deferred. For example: <pre>   {@code\n *   class Bar {\n *\n *       private final CloseGuard guard = new CloseGuard();\n *\n *       ...\n *\n *       public Bar() {\n *           ...;\n *       }\n *\n *       public void connect() {\n *          ...;\n *          guard.open(\"cleanup\");\n *       }\n *\n *       public void cleanup() {\n *          guard.close();\n *          ...;\n *          if (Build.VERSION.SDK_INT >= 28) {\n *              Reference.reachabilityFence(this);\n *          }\n *          // For full correctness in the absence of a close() call, other methods may also need\n *          // reachabilityFence() calls.\n *       }\n *\n *       protected void finalize() throws Throwable {\n *           try {\n *               // Note that guard could be null if the constructor threw.\n *               if (guard != null) {\n *                   guard.warnIfOpen();\n *               }\n *               cleanup();\n *           } finally {\n *               super.finalize();\n *           }\n *       }\n *   }\n * }</pre>\n *\n * When used in a constructor, calls to {@code open} should occur at\n * the end of the constructor since an exception that would cause\n * abrupt termination of the constructor will mean that the user will\n * not have a reference to the object to cleanup explicitly. When used\n * in a method, the call to {@code open} should occur just after\n * resource acquisition.\n ",
  "variables" : [ {
    "name" : "mImpl",
    "type" : "dalvik.system.CloseGuard",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void open(@NonNull String closeMethodName)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the instance with a warning that the caller should have explicitly called the\n     * {@code closeMethodName} method instead of relying on finalization.\n     *\n     * @param closeMethodName non-null name of explicit termination method. Printed by warnIfOpen.\n     * @throws NullPointerException if closeMethodName is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : " Marks this CloseGuard instance as closed to avoid warnings on finalization. ",
    "links" : [ ]
  }, {
    "name" : "public void warnIfOpen()",
    "returnType" : "void",
    "comment" : "\n     * Logs a warning if the caller did not properly cleanup by calling an explicit close method\n     * before finalization.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mImpl" ],
  "methodNames" : [ "public void open(@NonNull String closeMethodName)", "public void close()", "public void warnIfOpen()" ]
}