{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/webkit/FindAddress.java",
  "packageName" : "android.webkit",
  "className" : "FindAddress",
  "comment" : "\n * Java implementation of legacy WebView.findAddress algorithm.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MIN_ADDRESS_WORDS",
    "type" : "int",
    "comment" : " Addresses consist of at least this many words, not including state and zip code.",
    "links" : [ ]
  }, {
    "name" : "MAX_ADDRESS_WORDS",
    "type" : "int",
    "comment" : " Adddresses consist of at most this many words, not including state and zip code.",
    "links" : [ ]
  }, {
    "name" : "MAX_ADDRESS_LINES",
    "type" : "int",
    "comment" : " Addresses consist of at most this many lines.",
    "links" : [ ]
  }, {
    "name" : "kMaxAddressNameWordLength",
    "type" : "int",
    "comment" : " No words in an address are longer than this many characters.",
    "links" : [ ]
  }, {
    "name" : "MAX_LOCATION_NAME_DISTANCE",
    "type" : "int",
    "comment" : " Location name should be in the first MAX_LOCATION_NAME_DISTANCE words",
    "links" : [ ]
  }, {
    "name" : "sStateZipCodeRanges",
    "type" : "ZipRange[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NL",
    "type" : "String",
    "comment" : " Newlines",
    "links" : [ ]
  }, {
    "name" : "SP",
    "type" : "String",
    "comment" : " Space characters",
    "links" : [ ]
  }, {
    "name" : "WS",
    "type" : "String",
    "comment" : " Whitespace",
    "links" : [ ]
  }, {
    "name" : "WORD_DELIM",
    "type" : "String",
    "comment" : " Characters that are considered word delimiters.",
    "links" : [ ]
  }, {
    "name" : "WORD_END",
    "type" : "String",
    "comment" : " Lookahead for word end.",
    "links" : [ ]
  }, {
    "name" : "sWordRe",
    "type" : "Pattern",
    "comment" : " Address words are a sequence of non-delimiter characters.",
    "links" : [ ]
  }, {
    "name" : "HOUSE_POST_DELIM",
    "type" : "String",
    "comment" : " Characters that are considered suffix delimiters for house numbers.",
    "links" : [ ]
  }, {
    "name" : "HOUSE_END",
    "type" : "String",
    "comment" : " Lookahead for house end.",
    "links" : [ ]
  }, {
    "name" : "HOUSE_PRE_DELIM",
    "type" : "String",
    "comment" : " Characters that are considered prefix delimiters for house numbers.",
    "links" : [ ]
  }, {
    "name" : "HOUSE_COMPONENT",
    "type" : "String",
    "comment" : " followed by a single alphabetic character, or",
    "links" : [ ]
  }, {
    "name" : "sHouseNumberRe",
    "type" : "Pattern",
    "comment" : " a delimiter character.",
    "links" : [ ]
  }, {
    "name" : "sStateRe",
    "type" : "Pattern",
    "comment" : " XXX: do we want to accept whitespace other than 0x20 in state names?",
    "links" : [ ]
  }, {
    "name" : "sLocationNameRe",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSuffixedNumberRe",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sZipCodeRe",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean checkHouseNumber(String houseNumber)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static MatchResult matchHouseNumber(String content, int offset)",
    "returnType" : "MatchResult",
    "comment" : "\n     * Attempt to match a house number beginnning at position offset\n     * in content.  The house number must be followed by a word\n     * delimiter or the end of the string, and if offset is non-zero,\n     * then it must also be preceded by a word delimiter.\n     *\n     * @return a MatchResult if a valid house number was found.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static MatchResult matchState(String content, int offset)",
    "returnType" : "MatchResult",
    "comment" : "\n     * Attempt to match a US state beginnning at position offset in\n     * content.  The matching state must be followed by a word\n     * delimiter or the end of the string, and if offset is non-zero,\n     * then it must also be preceded by a word delimiter.\n     *\n     * @return a MatchResult if a valid US state (or two letter code)\n     * was found.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidZipCode(String zipCode, MatchResult stateMatch)",
    "returnType" : "boolean",
    "comment" : "\n     * Test whether zipCode matches the U.S. zip code format (ddddd or\n     * ddddd-dddd) and is within the expected range, given that\n     * stateMatch is a match of sStateRe.\n     *\n     * @return true if zipCode is a valid zip code, is legal for the\n     * matched state, and is followed by a word delimiter or the end\n     * of the string.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidLocationName(String location)",
    "returnType" : "boolean",
    "comment" : "\n     * Test whether location is one of the valid locations.\n     *\n     * @return true if location starts with a valid location name\n     * followed by a word delimiter or the end of the string.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int attemptMatch(String content, MatchResult houseNumberMatch)",
    "returnType" : "int",
    "comment" : "\n     * Attempt to match a complete address in content, starting with\n     * houseNumberMatch.\n     *\n     * @param content The string to search.\n     * @param houseNumberMatch A matching house number to start extending.\n     * @return +ve: the end of the match\n     *         +ve: the position to restart searching for house numbers, negated.\n     ",
    "links" : [ ]
  }, {
    "name" : " static String findAddress(String content)",
    "returnType" : "String",
    "comment" : "\n     * Return the first matching address in content.\n     *\n     * @param content The string to search.\n     * @return The first valid address, or null if no address was matched.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static boolean checkHouseNumber(String houseNumber)", "private static MatchResult matchHouseNumber(String content, int offset)", "private static MatchResult matchState(String content, int offset)", "private static boolean isValidZipCode(String zipCode, MatchResult stateMatch)", "private static boolean isValidLocationName(String location)", "private static int attemptMatch(String content, MatchResult houseNumberMatch)", " static String findAddress(String content)" ],
  "variableNames" : [ "MIN_ADDRESS_WORDS", "MAX_ADDRESS_WORDS", "MAX_ADDRESS_LINES", "kMaxAddressNameWordLength", "MAX_LOCATION_NAME_DISTANCE", "sStateZipCodeRanges", "NL", "SP", "WS", "WORD_DELIM", "WORD_END", "sWordRe", "HOUSE_POST_DELIM", "HOUSE_END", "HOUSE_PRE_DELIM", "HOUSE_COMPONENT", "sHouseNumberRe", "sStateRe", "sLocationNameRe", "sSuffixedNumberRe", "sZipCodeRe" ]
}