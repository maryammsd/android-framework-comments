{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/duration/PeriodFormatterFactory.java",
  "packageName" : "android.icu.impl.duration",
  "className" : "PeriodFormatterFactory",
  "comment" : "\n * Abstract factory interface used to create PeriodFormatters.\n * PeriodFormatters are immutable once created.\n * <p>\n * Setters on the factory mutate the factory and return it,\n * for chaining.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public PeriodFormatterFactory setLocale(String localeName)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set the name of the locale that will be used when \n   * creating new formatters.\n   *\n   * @param localeName the name of the Locale\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setDisplayLimit(boolean display)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set whether limits will be displayed.\n   *\n   * @param display true if limits will be displayed\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setDisplayPastFuture(boolean display)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set whether past and future will be displayed.\n   *\n   * @param display true if past and future will be displayed\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setSeparatorVariant(int variant)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set how separators will be displayed.\n   *\n   * @param variant the variant indicating how separators will be displayed\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setUnitVariant(int variant)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set the variant of the time unit names to use.\n   *\n   * @param variant the variant to use\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setCountVariant(int variant)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set the variant of the count to use.\n   *\n   * @param variant the variant to use\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatter getFormatter()",
    "returnType" : "PeriodFormatter",
    "comment" : "\n   * Return a formatter based on this factory's current settings.\n   *\n   * @return a PeriodFormatter\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public PeriodFormatterFactory setLocale(String localeName)", "public PeriodFormatterFactory setDisplayLimit(boolean display)", "public PeriodFormatterFactory setDisplayPastFuture(boolean display)", "public PeriodFormatterFactory setSeparatorVariant(int variant)", "public PeriodFormatterFactory setUnitVariant(int variant)", "public PeriodFormatterFactory setCountVariant(int variant)", "public PeriodFormatter getFormatter()" ],
  "variableNames" : [ ]
}