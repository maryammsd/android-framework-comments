{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/IndentingPrintWriter.java",
  "packageName" : "android.util",
  "className" : "IndentingPrintWriter",
  "comment" : " @android.ravenwood.annotation.RavenwoodKeepWholeClass",
  "links" : [ ],
  "variables" : [ {
    "name" : "mSingleIndent",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWrapLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndentBuilder",
    "type" : "StringBuilder",
    "comment" : " Mutable version of current indent ",
    "links" : [ ]
  }, {
    "name" : "mCurrentIndent",
    "type" : "char[]",
    "comment" : " Cache of current {@link #mIndentBuilder} value ",
    "links" : [ "#mIndentBuilder" ]
  }, {
    "name" : "mCurrentLength",
    "type" : "int",
    "comment" : " Length of current line being built, excluding any indent ",
    "links" : [ ]
  }, {
    "name" : "mEmptyLine",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating if we're currently sitting on an empty line, and that\n     * next write should be prefixed with the current indent.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSingleChar",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IndentingPrintWriter setIndent(@NonNull String indent)",
    "returnType" : "IndentingPrintWriter",
    "comment" : "\n     * Overrides the indent set in the constructor for the next printed line.\n     *\n     * @deprecated Use the \"prefix\" constructor parameter\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IndentingPrintWriter setIndent(int indent)",
    "returnType" : "IndentingPrintWriter",
    "comment" : "\n     * Overrides the indent set in the constructor with {@code singleIndent} repeated {@code indent}\n     * times.\n     *\n     * @deprecated Use the \"prefix\" constructor parameter\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IndentingPrintWriter increaseIndent()",
    "returnType" : "IndentingPrintWriter",
    "comment" : "\n     * Increases the indent starting with the next printed line.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IndentingPrintWriter decreaseIndent()",
    "returnType" : "IndentingPrintWriter",
    "comment" : "\n     * Decreases the indent starting with the next printed line.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IndentingPrintWriter print(@NonNull String key, @Nullable Object value)",
    "returnType" : "IndentingPrintWriter",
    "comment" : "\n     * Prints a key-value pair.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IndentingPrintWriter printHexInt(@NonNull String key, int value)",
    "returnType" : "IndentingPrintWriter",
    "comment" : "\n     * Prints a key-value pair, using hexadecimal format for the value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void println()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void write(int c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void write(@NonNull String s, int off, int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void write(@NonNull char[] buf, int offset, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void maybeWriteIndent()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public IndentingPrintWriter setIndent(@NonNull String indent)", "public IndentingPrintWriter setIndent(int indent)", "public IndentingPrintWriter increaseIndent()", "public IndentingPrintWriter decreaseIndent()", "public IndentingPrintWriter print(@NonNull String key, @Nullable Object value)", "public IndentingPrintWriter printHexInt(@NonNull String key, int value)", "public void println()", "public void write(int c)", "public void write(@NonNull String s, int off, int len)", "public void write(@NonNull char[] buf, int offset, int count)", "private void maybeWriteIndent()" ],
  "variableNames" : [ "mSingleIndent", "mWrapLength", "mIndentBuilder", "mCurrentIndent", "mCurrentLength", "mEmptyLine", "mSingleChar" ]
}