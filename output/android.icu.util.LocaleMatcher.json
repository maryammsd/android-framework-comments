{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/LocaleMatcher.java",
  "packageName" : "android.icu.util",
  "className" : "LocaleMatcher",
  "comment" : "\n * Immutable class that picks the best match between a user's desired locales and\n * an application's supported locales.\n *\n * <p>Example:\n * <pre>\n * LocaleMatcher matcher = LocaleMatcher.builder().setSupportedLocales(\"fr, en-GB, en\").build();\n * Locale bestSupported = matcher.getBestLocale(Locale.US);  // \"en\"\n * </pre>\n *\n * <p>A matcher takes into account when languages are close to one another,\n * such as Danish and Norwegian,\n * and when regional variants are close, like en-GB and en-AU as opposed to en-US.\n *\n * <p>If there are multiple supported locales with the same (language, script, region)\n * likely subtags, then the current implementation returns the first of those locales.\n * It ignores variant subtags (except for pseudolocale variants) and extensions.\n * This may change in future versions.\n *\n * <p>For example, the current implementation does not distinguish between\n * de, de-DE, de-Latn, de-1901, de-u-co-phonebk.\n *\n * <p>If you prefer one equivalent locale over another, then provide only the preferred one,\n * or place it earlier in the list of supported locales.\n *\n * <p>Otherwise, the order of supported locales may have no effect on the best-match results.\n * The current implementation compares each desired locale with supported locales\n * in the following order:\n * 1. Default locale, if supported;\n * 2. CLDR \"paradigm locales\" like en-GB and es-419;\n * 3. other supported locales.\n * This may change in future versions.\n *\n * <p>Often a product will just need one matcher instance, built with the languages\n * that it supports. However, it may want multiple instances with different\n * default languages based on additional information, such as the domain.\n *\n * <p>This class is not intended for public subclassing.\n *\n * @author markdavis@google.com\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "UND_LSR",
    "type" : "LSR",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UND_ULOCALE",
    "type" : "ULocale",
    "comment" : " In ULocale, \"und\" and \"\" make the same object.",
    "links" : [ ]
  }, {
    "name" : "UND_LOCALE",
    "type" : "Locale",
    "comment" : " In Locale, \"und\" and \"\" make different objects.",
    "links" : [ ]
  }, {
    "name" : "EMPTY_LOCALE",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRACE_MATCHER",
    "type" : "boolean",
    "comment" : " Activates debugging output to stderr with details of GetBestMatch.",
    "links" : [ ]
  }, {
    "name" : "thresholdDistance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "demotionPerDesiredLocale",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "favorSubtag",
    "type" : "FavorSubtag",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "direction",
    "type" : "Direction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "supportedULocales",
    "type" : "ULocale[]",
    "comment" : " These are in input order.",
    "links" : [ ]
  }, {
    "name" : "supportedLocales",
    "type" : "Locale[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "supportedLsrToIndex",
    "type" : "Map<LSR, Integer>",
    "comment" : " These are in preference order: 1. Default locale 2. paradigm locales 3. others.",
    "links" : [ ]
  }, {
    "name" : "supportedLSRs",
    "type" : "LSR[]",
    "comment" : " The distance lookup loops over the supportedLSRs and returns the index of the best match.",
    "links" : [ ]
  }, {
    "name" : "supportedIndexes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "supportedLSRsLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultULocale",
    "type" : "ULocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultLocale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Builder builder()",
    "returnType" : "Builder",
    "comment" : "\n     * Returns a builder used in chaining parameters for building a LocaleMatcher.\n     *\n     * @return a new Builder object\n     ",
    "links" : [ ]
  }, {
    "name" : "private final int putIfAbsent(LSR lsr, int i, int suppLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final LSR getMaximalLsrOrUnd(ULocale locale)",
    "returnType" : "LSR",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final LSR getMaximalLsrOrUnd(Locale locale)",
    "returnType" : "LSR",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ULocale getBestMatch(ULocale desiredLocale)",
    "returnType" : "ULocale",
    "comment" : "\n     * Returns the supported locale which best matches the desired locale.\n     *\n     * @param desiredLocale Typically a user's language.\n     * @return the best-matching supported locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ULocale getBestMatch(Iterable<ULocale> desiredLocales)",
    "returnType" : "ULocale",
    "comment" : "\n     * Returns the supported locale which best matches one of the desired locales.\n     *\n     * @param desiredLocales Typically a user's languages, in order of preference (descending).\n     *          (In ICU 4.4..63 this parameter had type LocalePriorityList.)\n     * @return the best-matching supported locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ULocale getBestMatch(String desiredLocaleList)",
    "returnType" : "ULocale",
    "comment" : "\n     * Parses the string like {@link LocalePriorityList} does and\n     * returns the supported locale which best matches one of the desired locales.\n     *\n     * @param desiredLocaleList Typically a user's languages,\n     *          as a string which is to be parsed like LocalePriorityList does.\n     * @return the best-matching supported locale.\n     ",
    "links" : [ "android.icu.util.LocalePriorityList" ]
  }, {
    "name" : "public Locale getBestLocale(Locale desiredLocale)",
    "returnType" : "Locale",
    "comment" : "\n     * Returns the supported locale which best matches the desired locale.\n     *\n     * @param desiredLocale Typically a user's language.\n     * @return the best-matching supported locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Locale getBestLocale(Iterable<Locale> desiredLocales)",
    "returnType" : "Locale",
    "comment" : "\n     * Returns the supported locale which best matches one of the desired locales.\n     *\n     * @param desiredLocales Typically a user's languages, in order of preference (descending).\n     * @return the best-matching supported locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Result defaultResult()",
    "returnType" : "Result",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Result makeResult(ULocale desiredLocale, ULocaleLsrIterator lsrIter, int suppIndex)",
    "returnType" : "Result",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Result makeResult(Locale desiredLocale, LocaleLsrIterator lsrIter, int suppIndex)",
    "returnType" : "Result",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Result getBestMatchResult(ULocale desiredLocale)",
    "returnType" : "Result",
    "comment" : "\n     * Returns the best match between the desired locale and the supported locales.\n     *\n     * @param desiredLocale Typically a user's language.\n     * @return the best-matching pair of the desired and a supported locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result getBestMatchResult(Iterable<ULocale> desiredLocales)",
    "returnType" : "Result",
    "comment" : "\n     * Returns the best match between the desired and supported locales.\n     *\n     * @param desiredLocales Typically a user's languages, in order of preference (descending).\n     * @return the best-matching pair of a desired and a supported locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result getBestLocaleResult(Locale desiredLocale)",
    "returnType" : "Result",
    "comment" : "\n     * Returns the best match between the desired locale and the supported locales.\n     *\n     * @param desiredLocale Typically a user's language.\n     * @return the best-matching pair of the desired and a supported locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result getBestLocaleResult(Iterable<Locale> desiredLocales)",
    "returnType" : "Result",
    "comment" : "\n     * Returns the best match between the desired and supported locales.\n     *\n     * @param desiredLocales Typically a user's languages, in order of preference (descending).\n     * @return the best-matching pair of a desired and a supported locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getBestSuppIndex(LSR desiredLSR, LsrIterator remainingIter)",
    "returnType" : "int",
    "comment" : "\n     * @param desiredLSR The first desired locale's LSR.\n     * @param remainingIter Remaining desired LSRs, null or empty if none.\n     * @return the index of the best-matching supported locale, or -1 if there is no good match.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMatch(Locale desired, Locale supported)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the pair of locales matches acceptably.\n     * This is influenced by Builder options such as setDirection(), setFavorSubtag(),\n     * and setMaxDistance().\n     *\n     * @param desired The desired locale.\n     * @param supported The supported locale.\n     * @return true if the pair of locales matches acceptably.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMatch(ULocale desired, ULocale supported)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the pair of locales matches acceptably.\n     * This is influenced by Builder options such as setDirection(), setFavorSubtag(),\n     * and setMaxDistance().\n     *\n     * @param desired The desired locale.\n     * @param supported The supported locale.\n     * @return true if the pair of locales matches acceptably.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double match(ULocale desired, ULocale desiredMax, ULocale supported, ULocale supportedMax)",
    "returnType" : "double",
    "comment" : "\n     * Returns a fraction between 0 and 1, where 1 means that the languages are a\n     * perfect match, and 0 means that they are completely different.\n     *\n     * <p>This is mostly an implementation detail, and the precise values may change over time.\n     * The implementation may use either the maximized forms or the others ones, or both.\n     * The implementation may or may not rely on the forms to be consistent with each other.\n     *\n     * <p>Callers should construct and use a matcher rather than match pairs of locales directly.\n     *\n     * @param desired Desired locale.\n     * @param desiredMax Maximized locale (using likely subtags).\n     * @param supported Supported locale.\n     * @param supportedMax Maximized locale (using likely subtags).\n     * @return value between 0 and 1, inclusive.\n     * @deprecated ICU 65 Build and use a matcher rather than comparing pairs of locales.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ULocale canonicalize(ULocale locale)",
    "returnType" : "ULocale",
    "comment" : "\n     * Partially canonicalizes a locale (language). Note that for now, it is canonicalizing\n     * according to CLDR conventions (he vs iw, etc), since that is what is needed\n     * for likelySubtags.\n     *\n     * <p>Currently, this is a much simpler canonicalization than what the ULocale class does:\n     * The language/script/region subtags are each mapped separately, ignoring the other subtags.\n     * If none of these change, then the input locale is returned.\n     * Otherwise a new ULocale with only those subtags is returned, removing variants and extensions.\n     *\n     * @param locale language/locale code\n     * @return ULocale with remapped subtags.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Builder builder()", "private final int putIfAbsent(LSR lsr, int i, int suppLength)", "private static final LSR getMaximalLsrOrUnd(ULocale locale)", "private static final LSR getMaximalLsrOrUnd(Locale locale)", "public ULocale getBestMatch(ULocale desiredLocale)", "public ULocale getBestMatch(Iterable<ULocale> desiredLocales)", "public ULocale getBestMatch(String desiredLocaleList)", "public Locale getBestLocale(Locale desiredLocale)", "public Locale getBestLocale(Iterable<Locale> desiredLocales)", "private Result defaultResult()", "private Result makeResult(ULocale desiredLocale, ULocaleLsrIterator lsrIter, int suppIndex)", "private Result makeResult(Locale desiredLocale, LocaleLsrIterator lsrIter, int suppIndex)", "public Result getBestMatchResult(ULocale desiredLocale)", "public Result getBestMatchResult(Iterable<ULocale> desiredLocales)", "public Result getBestLocaleResult(Locale desiredLocale)", "public Result getBestLocaleResult(Iterable<Locale> desiredLocales)", "private int getBestSuppIndex(LSR desiredLSR, LsrIterator remainingIter)", "public boolean isMatch(Locale desired, Locale supported)", "public boolean isMatch(ULocale desired, ULocale supported)", "public double match(ULocale desired, ULocale desiredMax, ULocale supported, ULocale supportedMax)", "public ULocale canonicalize(ULocale locale)", "public String toString()" ],
  "variableNames" : [ "UND_LSR", "UND_ULOCALE", "UND_LOCALE", "EMPTY_LOCALE", "TRACE_MATCHER", "thresholdDistance", "demotionPerDesiredLocale", "favorSubtag", "direction", "supportedULocales", "supportedLocales", "supportedLsrToIndex", "supportedLSRs", "supportedIndexes", "supportedLSRsLength", "defaultULocale", "defaultLocale" ]
}