{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/BitmapFactory.java",
  "packageName" : "android.graphics",
  "className" : "BitmapFactory",
  "comment" : "\n * Creates Bitmap objects from various sources, including files, streams,\n * and byte-arrays.\n ",
  "variables" : [ {
    "name" : "DECODE_BUFFER_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Bitmap decodeFile(String pathName, Options opts)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decode a file path into a bitmap. If the specified file name is null,\n     * or cannot be decoded into a bitmap, the function returns null.\n     *\n     * @param pathName complete path name for the file to be decoded.\n     * @param opts null-ok; Options that control downsampling and whether the\n     *             image should be completely decoded, or just is size returned.\n     * @return The decoded bitmap, or null if the image data could not be\n     *         decoded, or, if opts is non-null, if opts requested only the\n     *         size be returned (in opts.outWidth and opts.outHeight)\n     * @throws IllegalArgumentException if {@link BitmapFactory.Options#inPreferredConfig}\n     *         is {@link android.graphics.Bitmap.Config#HARDWARE}\n     *         and {@link BitmapFactory.Options#inMutable} is set, if the specified color space\n     *         is not {@link ColorSpace.Model#RGB RGB}, or if the specified color space's transfer\n     *         function is not an {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}\n     ",
    "links" : [ "BitmapFactory.Options#inPreferredConfig", "android.graphics.Bitmap.Config#HARDWARE", "BitmapFactory.Options#inMutable", "ColorSpace.Model#RGB", "ColorSpace.Rgb.TransferParameters" ]
  }, {
    "name" : "public static Bitmap decodeFile(String pathName)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decode a file path into a bitmap. If the specified file name is null,\n     * or cannot be decoded into a bitmap, the function returns null.\n     *\n     * @param pathName complete path name for the file to be decoded.\n     * @return the resulting decoded bitmap, or null if it could not be decoded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap decodeResourceStream(@Nullable Resources res, @Nullable TypedValue value, @Nullable InputStream is, @Nullable Rect pad, @Nullable Options opts)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decode a new Bitmap from an InputStream. This InputStream was obtained from\n     * resources, which we pass to be able to scale the bitmap accordingly.\n     * @throws IllegalArgumentException if {@link BitmapFactory.Options#inPreferredConfig}\n     *         is {@link android.graphics.Bitmap.Config#HARDWARE}\n     *         and {@link BitmapFactory.Options#inMutable} is set, if the specified color space\n     *         is not {@link ColorSpace.Model#RGB RGB}, or if the specified color space's transfer\n     *         function is not an {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}\n     ",
    "links" : [ "BitmapFactory.Options#inPreferredConfig", "android.graphics.Bitmap.Config#HARDWARE", "BitmapFactory.Options#inMutable", "ColorSpace.Model#RGB", "ColorSpace.Rgb.TransferParameters" ]
  }, {
    "name" : "public static Bitmap decodeResource(Resources res, int id, Options opts)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Synonym for opening the given resource and calling\n     * {@link #decodeResourceStream}.\n     *\n     * @param res   The resources object containing the image data\n     * @param id The resource id of the image data\n     * @param opts null-ok; Options that control downsampling and whether the\n     *             image should be completely decoded, or just is size returned.\n     * @return The decoded bitmap, or null if the image data could not be\n     *         decoded, or, if opts is non-null, if opts requested only the\n     *         size be returned (in opts.outWidth and opts.outHeight)\n     * @throws IllegalArgumentException if {@link BitmapFactory.Options#inPreferredConfig}\n     *         is {@link android.graphics.Bitmap.Config#HARDWARE}\n     *         and {@link BitmapFactory.Options#inMutable} is set, if the specified color space\n     *         is not {@link ColorSpace.Model#RGB RGB}, or if the specified color space's transfer\n     *         function is not an {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}\n     ",
    "links" : [ "#decodeResourceStream", "BitmapFactory.Options#inPreferredConfig", "android.graphics.Bitmap.Config#HARDWARE", "BitmapFactory.Options#inMutable", "ColorSpace.Model#RGB", "ColorSpace.Rgb.TransferParameters" ]
  }, {
    "name" : "public static Bitmap decodeResource(Resources res, int id)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Synonym for {@link #decodeResource(Resources, int, android.graphics.BitmapFactory.Options)}\n     * with null Options.\n     *\n     * @param res The resources object containing the image data\n     * @param id The resource id of the image data\n     * @return The decoded bitmap, or null if the image could not be decoded.\n     ",
    "links" : [ "#decodeResource" ]
  }, {
    "name" : "public static Bitmap decodeByteArray(byte[] data, int offset, int length, Options opts)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decode an immutable bitmap from the specified byte array.\n     *\n     * @param data byte array of compressed image data\n     * @param offset offset into imageData for where the decoder should begin\n     *               parsing.\n     * @param length the number of bytes, beginning at offset, to parse\n     * @param opts null-ok; Options that control downsampling and whether the\n     *             image should be completely decoded, or just is size returned.\n     * @return The decoded bitmap, or null if the image data could not be\n     *         decoded, or, if opts is non-null, if opts requested only the\n     *         size be returned (in opts.outWidth and opts.outHeight)\n     * @throws IllegalArgumentException if {@link BitmapFactory.Options#inPreferredConfig}\n     *         is {@link android.graphics.Bitmap.Config#HARDWARE}\n     *         and {@link BitmapFactory.Options#inMutable} is set, if the specified color space\n     *         is not {@link ColorSpace.Model#RGB RGB}, or if the specified color space's transfer\n     *         function is not an {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}\n     ",
    "links" : [ "BitmapFactory.Options#inPreferredConfig", "android.graphics.Bitmap.Config#HARDWARE", "BitmapFactory.Options#inMutable", "ColorSpace.Model#RGB", "ColorSpace.Rgb.TransferParameters" ]
  }, {
    "name" : "public static Bitmap decodeByteArray(byte[] data, int offset, int length)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decode an immutable bitmap from the specified byte array.\n     *\n     * @param data byte array of compressed image data\n     * @param offset offset into imageData for where the decoder should begin\n     *               parsing.\n     * @param length the number of bytes, beginning at offset, to parse\n     * @return The decoded bitmap, or null if the image could not be decoded.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setDensityFromOptions(Bitmap outputBitmap, Options opts)",
    "returnType" : "void",
    "comment" : "\n     * Set the newly decoded bitmap's density based on the Options.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap decodeStream(@Nullable InputStream is, @Nullable Rect outPadding, @Nullable Options opts)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decode an input stream into a bitmap. If the input stream is null, or\n     * cannot be used to decode a bitmap, the function returns null.\n     * The stream's position will be where ever it was after the encoded data\n     * was read.\n     *\n     * @param is The input stream that holds the raw data to be decoded into a\n     *           bitmap.\n     * @param outPadding If not null, return the padding rect for the bitmap if\n     *                   it exists, otherwise set padding to [-1,-1,-1,-1]. If\n     *                   no bitmap is returned (null) then padding is\n     *                   unchanged.\n     * @param opts null-ok; Options that control downsampling and whether the\n     *             image should be completely decoded, or just is size returned.\n     * @return The decoded bitmap, or null if the image data could not be\n     *         decoded, or, if opts is non-null, if opts requested only the\n     *         size be returned (in opts.outWidth and opts.outHeight)\n     * @throws IllegalArgumentException if {@link BitmapFactory.Options#inPreferredConfig}\n     *         is {@link android.graphics.Bitmap.Config#HARDWARE}\n     *         and {@link BitmapFactory.Options#inMutable} is set, if the specified color space\n     *         is not {@link ColorSpace.Model#RGB RGB}, or if the specified color space's transfer\n     *         function is not an {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}\n     *\n     * <p class=\"note\">Prior to {@link android.os.Build.VERSION_CODES#KITKAT},\n     * if {@link InputStream#markSupported is.markSupported()} returns true,\n     * <code>is.mark(1024)</code> would be called. As of\n     * {@link android.os.Build.VERSION_CODES#KITKAT}, this is no longer the case.</p>\n     ",
    "links" : [ "BitmapFactory.Options#inPreferredConfig", "android.graphics.Bitmap.Config#HARDWARE", "BitmapFactory.Options#inMutable", "ColorSpace.Model#RGB", "ColorSpace.Rgb.TransferParameters", "android.os.Build.VERSION_CODES#KITKAT", "InputStream#markSupported", "android.os.Build.VERSION_CODES#KITKAT" ]
  }, {
    "name" : "private static Bitmap decodeStreamInternal(@NonNull InputStream is, @Nullable Rect outPadding, @Nullable Options opts)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Private helper function for decoding an InputStream natively. Buffers the input enough to\n     * do a rewind as needed, and supplies temporary storage if necessary. is MUST NOT be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap decodeStream(InputStream is)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decode an input stream into a bitmap. If the input stream is null, or\n     * cannot be used to decode a bitmap, the function returns null.\n     * The stream's position will be where ever it was after the encoded data\n     * was read.\n     *\n     * @param is The input stream that holds the raw data to be decoded into a\n     *           bitmap.\n     * @return The decoded bitmap, or null if the image data could not be decoded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap decodeFileDescriptor(FileDescriptor fd, Rect outPadding, Options opts)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decode a bitmap from the file descriptor. If the bitmap cannot be decoded\n     * return null. The position within the descriptor will not be changed when\n     * this returns, so the descriptor can be used again as-is.\n     *\n     * @param fd The file descriptor containing the bitmap data to decode\n     * @param outPadding If not null, return the padding rect for the bitmap if\n     *                   it exists, otherwise set padding to [-1,-1,-1,-1]. If\n     *                   no bitmap is returned (null) then padding is\n     *                   unchanged.\n     * @param opts null-ok; Options that control downsampling and whether the\n     *             image should be completely decoded, or just its size returned.\n     * @return the decoded bitmap, or null\n     * @throws IllegalArgumentException if {@link BitmapFactory.Options#inPreferredConfig}\n     *         is {@link android.graphics.Bitmap.Config#HARDWARE}\n     *         and {@link BitmapFactory.Options#inMutable} is set, if the specified color space\n     *         is not {@link ColorSpace.Model#RGB RGB}, or if the specified color space's transfer\n     *         function is not an {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}\n     ",
    "links" : [ "BitmapFactory.Options#inPreferredConfig", "android.graphics.Bitmap.Config#HARDWARE", "BitmapFactory.Options#inMutable", "ColorSpace.Model#RGB", "ColorSpace.Rgb.TransferParameters" ]
  }, {
    "name" : "public static Bitmap decodeFileDescriptor(FileDescriptor fd)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decode a bitmap from the file descriptor. If the bitmap cannot be decoded\n     * return null. The position within the descriptor will not be changed when\n     * this returns, so the descriptor can be used again as is.\n     *\n     * @param fd The file descriptor containing the bitmap data to decode\n     * @return the decoded bitmap, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeDecodeStream(InputStream is, byte[] storage, Rect padding, Options opts, long inBitmapHandle, long colorSpaceHandle)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeDecodeFileDescriptor(FileDescriptor fd, Rect padding, Options opts, long inBitmapHandle, long colorSpaceHandle)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeDecodeAsset(long nativeAsset, Rect padding, Options opts, long inBitmapHandle, long colorSpaceHandle)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeDecodeByteArray(byte[] data, int offset, int length, Options opts, long inBitmapHandle, long colorSpaceHandle)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsSeekable(FileDescriptor fd)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DECODE_BUFFER_SIZE" ],
  "methodNames" : [ "public static Bitmap decodeFile(String pathName, Options opts)", "public static Bitmap decodeFile(String pathName)", "public static Bitmap decodeResourceStream(@Nullable Resources res, @Nullable TypedValue value, @Nullable InputStream is, @Nullable Rect pad, @Nullable Options opts)", "public static Bitmap decodeResource(Resources res, int id, Options opts)", "public static Bitmap decodeResource(Resources res, int id)", "public static Bitmap decodeByteArray(byte[] data, int offset, int length, Options opts)", "public static Bitmap decodeByteArray(byte[] data, int offset, int length)", "private static void setDensityFromOptions(Bitmap outputBitmap, Options opts)", "public static Bitmap decodeStream(@Nullable InputStream is, @Nullable Rect outPadding, @Nullable Options opts)", "private static Bitmap decodeStreamInternal(@NonNull InputStream is, @Nullable Rect outPadding, @Nullable Options opts)", "public static Bitmap decodeStream(InputStream is)", "public static Bitmap decodeFileDescriptor(FileDescriptor fd, Rect outPadding, Options opts)", "public static Bitmap decodeFileDescriptor(FileDescriptor fd)", "private static native Bitmap nativeDecodeStream(InputStream is, byte[] storage, Rect padding, Options opts, long inBitmapHandle, long colorSpaceHandle)", "private static native Bitmap nativeDecodeFileDescriptor(FileDescriptor fd, Rect padding, Options opts, long inBitmapHandle, long colorSpaceHandle)", "private static native Bitmap nativeDecodeAsset(long nativeAsset, Rect padding, Options opts, long inBitmapHandle, long colorSpaceHandle)", "private static native Bitmap nativeDecodeByteArray(byte[] data, int offset, int length, Options opts, long inBitmapHandle, long colorSpaceHandle)", "private static native boolean nativeIsSeekable(FileDescriptor fd)" ]
}