{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/processor/XSLTAttributeDef.java",
  "packageName" : "org.apache.xalan.processor",
  "className" : "XSLTAttributeDef",
  "comment" : "\n * This class defines an attribute for an element in a XSLT stylesheet,\n * is meant to reflect the structure defined in http://www.w3.org/TR/xslt#dtd, and the\n * mapping between Xalan classes and the markup attributes in the element.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FATAL",
    "type" : "int",
    "comment" : " How to handle invalid values for this attribute ",
    "links" : [ ]
  }, {
    "name" : "ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WARNING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "T_CDATA",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_URL",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_AVT",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_PATTERN",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_EXPR",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_CHAR",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_NUMBER",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_YESNO",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_QNAME",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_QNAMES",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_ENUM",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_SIMPLEPATTERNLIST",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_NMTOKEN",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_STRINGLIST",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_PREFIX_URLLIST",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_ENUM_OR_PQNAME",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_NCNAME",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_AVT_QNAME",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_QNAMES_RESOLVE_NULL",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "T_PREFIXLIST",
    "type" : "int",
    "comment" : " Type values that represent XSLT attribute types. ",
    "links" : [ ]
  }, {
    "name" : "m_foreignAttr",
    "type" : "XSLTAttributeDef",
    "comment" : " Representation for an attribute in a foreign namespace. ",
    "links" : [ ]
  }, {
    "name" : "S_FOREIGNATTR_SETTER",
    "type" : "String",
    "comment" : " Method name that objects may implement if they wish to have forein attributes set. ",
    "links" : [ ]
  }, {
    "name" : "m_namespace",
    "type" : "String",
    "comment" : "\n   * The allowed namespace for this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_name",
    "type" : "String",
    "comment" : "\n   * The name of this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_type",
    "type" : "int",
    "comment" : "\n   * The type of this attribute value.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_enums",
    "type" : "StringToIntTable",
    "comment" : "\n   * If this element is of type T_ENUM, this will contain\n   * a map from the attribute string to the Xalan integer\n   * value.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_default",
    "type" : "String",
    "comment" : "\n   * The default value for this attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_required",
    "type" : "boolean",
    "comment" : "\n   * If true, this is a required attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_supportsAVT",
    "type" : "boolean",
    "comment" : "\n   * If true, this is attribute supports AVT's.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_errorType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_setterString",
    "type" : "String",
    "comment" : "\n   * String that should represent the setter method which which\n   * may be used on objects to set a value that represents this attribute  \n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " String getNamespace()",
    "returnType" : "String",
    "comment" : "\n   * Get the allowed namespace for this attribute.\n   *\n   * @return The allowed namespace for this attribute, which may be null, or may be \"*\".\n   ",
    "links" : [ ]
  }, {
    "name" : " String getName()",
    "returnType" : "String",
    "comment" : "\n   * Get the name of this attribute.\n   *\n   * @return non-null reference to the name of this attribute, which may be \"*\".\n   ",
    "links" : [ ]
  }, {
    "name" : " int getType()",
    "returnType" : "int",
    "comment" : "\n   * Get the type of this attribute value.\n   *\n   * @return One of T_CDATA, T_URL, T_AVT, T_PATTERN, T_EXPR, T_CHAR,\n   * T_NUMBER, T_YESNO, T_QNAME, T_QNAMES, T_ENUM, T_SIMPLEPATTERNLIST,\n   * T_NMTOKEN, T_STRINGLIST, T_PREFIX_URLLIST, T_ENUM_OR_PQNAME.\n   ",
    "links" : [ ]
  }, {
    "name" : "private int getEnum(String key)",
    "returnType" : "int",
    "comment" : "\n   * If this element is of type T_ENUM, this will return\n   * a map from the attribute string to the Xalan integer\n   * value.\n   * @param key The XSLT attribute value.\n   *\n   * @return The integer representation of the enumerated value for this attribute.\n   * @throws Throws NullPointerException if m_enums is null.\n   ",
    "links" : [ ]
  }, {
    "name" : "private String[] getEnumNames()",
    "returnType" : "String[]",
    "comment" : "\n   * If this element is of type T_ENUM, this will return\n   * an array of strings - the values in the enumeration\n   *\n   * @return An array of the enumerated values permitted for this attribute.\n   *\n   * @throws Throws NullPointerException if m_enums is null.\n   ",
    "links" : [ ]
  }, {
    "name" : " String getDefault()",
    "returnType" : "String",
    "comment" : "\n   * Get the default value for this attribute.\n   *\n   * @return The default value for this attribute, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : " void setDefault(String def)",
    "returnType" : "void",
    "comment" : "\n   * Set the default value for this attribute.\n   *\n   * @param def String representation of the default value for this attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean getRequired()",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether or not this is a required attribute.\n   *\n   * @return true if this is a required attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean getSupportsAVT()",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether or not this attribute supports AVT's.\n   *\n   * @return true if this attribute supports AVT's.\n   ",
    "links" : [ ]
  }, {
    "name" : " int getErrorType()",
    "returnType" : "int",
    "comment" : "\n   * Get the type of error message to use if the attribute value is invalid.\n   *\n   * @return one of XSLAttributeDef.FATAL, XSLAttributeDef.ERROR, XSLAttributeDef.WARNING\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getSetterMethodName()",
    "returnType" : "String",
    "comment" : "\n   * Return a string that should represent the setter method.\n   * The setter method name will be created algorithmically the\n   * first time this method is accessed, and then cached for return\n   * by subsequent invocations of this method.\n   *\n   * @return String that should represent the setter method which which\n   * may be used on objects to set a value that represents this attribute,\n   * of null if no setter method should be called.\n   ",
    "links" : [ ]
  }, {
    "name" : " AVT processAVT(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "AVT",
    "comment" : "\n   * Process an attribute string of type T_AVT into\n   * a AVT value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value Should be an Attribute Value Template string.\n   *\n   * @return An AVT object that may be used to evaluate the Attribute Value Template.\n   *\n   * @throws org.xml.sax.SAXException which will wrap a\n   * {@link javax.xml.transform.TransformerException}, if there is a syntax error\n   * in the attribute value template string.\n   ",
    "links" : [ "javax.xml.transform.TransformerException" ]
  }, {
    "name" : " Object processCDATA(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type T_CDATA into\n   * a String value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value non-null string reference.\n   *\n   * @return The value argument.\n   * \n   * @throws org.xml.sax.SAXException.\n   ",
    "links" : [ ]
  }, {
    "name" : " Object processCHAR(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type T_CHAR into\n   * a Character value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value Should be a string with a length of 1.\n   *\n   * @return Character object.\n   *\n   * @throws org.xml.sax.SAXException if the string is not a length of 1.\n   ",
    "links" : [ ]
  }, {
    "name" : " Object processENUM(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type T_ENUM into a int value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value non-null string that represents an enumerated value that is\n   * valid for this element.\n   * @param owner\n   *\n   * @return An Integer representation of the enumerated value if this attribute does not support\n   *         AVT.  Otherwise, and AVT is returned.\n   ",
    "links" : [ ]
  }, {
    "name" : " Object processENUM_OR_PQNAME(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of that is either an enumerated value or a qname-but-not-ncname.\n   * Returns an AVT, if this attribute support AVT; otherwise returns int or qname.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value non-null string that represents an enumerated value that is\n   * valid for this element.\n   * @param owner\n   *\n   * @return AVT if attribute supports AVT. An Integer representation of the enumerated value if\n   *         attribute does not support AVT and an enumerated value was used.  Otherwise a qname\n   *         is returned.\n   ",
    "links" : [ ]
  }, {
    "name" : " Object processEXPR(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type T_EXPR into\n   * an XPath value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value An XSLT expression string.\n   *\n   * @return an XPath object that may be used for evaluation.\n   *\n   * @throws org.xml.sax.SAXException that wraps a\n   * {@link javax.xml.transform.TransformerException} if the expression\n   * string contains a syntax error.\n   ",
    "links" : [ "javax.xml.transform.TransformerException" ]
  }, {
    "name" : " Object processNMTOKEN(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type T_NMTOKEN into\n   * a String value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A NMTOKEN string.\n   *\n   * @return the value argument or an AVT if this attribute supports AVTs.\n   * \n   * @throws org.xml.sax.SAXException if the value is not a valid nmtoken\n   ",
    "links" : [ ]
  }, {
    "name" : " Object processPATTERN(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type T_PATTERN into\n   * an XPath match pattern value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A match pattern string.\n   *\n   * @return An XPath pattern that may be used to evaluate the XPath.\n   *\n   * @throws org.xml.sax.SAXException that wraps a\n   * {@link javax.xml.transform.TransformerException} if the match pattern\n   * string contains a syntax error.\n   ",
    "links" : [ "javax.xml.transform.TransformerException" ]
  }, {
    "name" : " Object processNUMBER(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type T_NUMBER into\n   * a double value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A string that can be parsed into a double value.\n   * @param number\n   *\n   * @return A Double object.\n   *\n   * @throws org.xml.sax.SAXException that wraps a\n   * {@link javax.xml.transform.TransformerException}\n   * if the string does not contain a parsable number.\n   ",
    "links" : [ "javax.xml.transform.TransformerException" ]
  }, {
    "name" : " Object processQNAME(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type T_QNAME into a QName value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A string that represents a potentially prefix qualified name.\n   * @param owner\n   *\n   * @return A QName object if this attribute does not support AVT's.  Otherwise, an AVT\n   *         is returned.\n   *\n   * @throws org.xml.sax.SAXException if the string contains a prefix that can not be\n   * resolved, or the string contains syntax that is invalid for a qualified name.\n   ",
    "links" : [ ]
  }, {
    "name" : " Object processAVT_QNAME(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type T_QNAME into a QName value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A string that represents a potentially prefix qualified name.\n   * @param owner\n   *\n   * @return An AVT is returned.\n   *\n   * @throws org.xml.sax.SAXException if the string contains a prefix that can not be\n   * resolved, or the string contains syntax that is invalid for a qualified name.\n   ",
    "links" : [ ]
  }, {
    "name" : " Object processNCNAME(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type NCName into a String\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A string that represents a potentially prefix qualified name.\n   * @param owner\n   *\n   * @return A String object if this attribute does not support AVT's.  Otherwise, an AVT\n   *         is returned.\n   *\n   * @throws org.xml.sax.SAXException if the string contains a prefix that can not be\n   * resolved, or the string contains syntax that is invalid for a NCName.\n   ",
    "links" : [ ]
  }, {
    "name" : " Vector processQNAMES(StylesheetHandler handler, String uri, String name, String rawName, String value) throws org.xml.sax.SAXException",
    "returnType" : "Vector",
    "comment" : "\n   * Process an attribute string of type T_QNAMES into a vector of QNames where\n   * the specification requires that non-prefixed elements not be placed in a\n   * namespace.  (See section 2.4 of XSLT 1.0.)\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A whitespace delimited list of qualified names.\n   *\n   * @return a Vector of QName objects.\n   *\n   * @throws org.xml.sax.SAXException if the one of the qualified name strings\n   * contains a prefix that can not be\n   * resolved, or a qualified name contains syntax that is invalid for a qualified name.\n   ",
    "links" : [ ]
  }, {
    "name" : " final Vector processQNAMESRNU(StylesheetHandler handler, String uri, String name, String rawName, String value) throws org.xml.sax.SAXException",
    "returnType" : "Vector",
    "comment" : "\n   * Process an attribute string of type T_QNAMES_RESOLVE_NULL into a vector\n   * of QNames where the specification requires non-prefixed elements to be\n   * placed in the default namespace.  (See section 16 of XSLT 1.0; the\n   * <em>only</em> time that this will get called is for the\n   * <code>cdata-section-elements</code> attribute on <code>xsl:output</code>.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A whitespace delimited list of qualified names.\n   *\n   * @return a Vector of QName objects.\n   *\n   * @throws org.xml.sax.SAXException if the one of the qualified name strings\n   * contains a prefix that can not be resolved, or a qualified name contains\n   * syntax that is invalid for a qualified name.\n   ",
    "links" : [ ]
  }, {
    "name" : " Vector processSIMPLEPATTERNLIST(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Vector",
    "comment" : "\n   * Process an attribute string of type T_SIMPLEPATTERNLIST into\n   * a vector of XPath match patterns.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A whitespace delimited list of simple match patterns.\n   *\n   * @return A Vector of XPath objects.\n   *\n   * @throws org.xml.sax.SAXException that wraps a\n   * {@link javax.xml.transform.TransformerException} if one of the match pattern\n   * strings contains a syntax error.\n   ",
    "links" : [ "javax.xml.transform.TransformerException" ]
  }, {
    "name" : " StringVector processSTRINGLIST(StylesheetHandler handler, String uri, String name, String rawName, String value)",
    "returnType" : "StringVector",
    "comment" : "\n   * Process an attribute string of type T_STRINGLIST into\n   * a vector of XPath match patterns.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value a whitespace delimited list of string values.\n   *\n   * @return A StringVector of the tokenized strings.\n   ",
    "links" : [ ]
  }, {
    "name" : " StringVector processPREFIX_URLLIST(StylesheetHandler handler, String uri, String name, String rawName, String value) throws org.xml.sax.SAXException",
    "returnType" : "StringVector",
    "comment" : "\n   * Process an attribute string of type T_URLLIST into\n   * a vector of prefixes that may be resolved to URLs.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A list of whitespace delimited prefixes.\n   *\n   * @return A vector of strings that may be resolved to URLs.\n   *\n   * @throws org.xml.sax.SAXException if one of the prefixes can not be resolved.\n   ",
    "links" : [ ]
  }, {
    "name" : " StringVector processPREFIX_LIST(StylesheetHandler handler, String uri, String name, String rawName, String value) throws org.xml.sax.SAXException",
    "returnType" : "StringVector",
    "comment" : "\n    * Process an attribute string of type T_PREFIXLIST into\n    * a vector of prefixes that may be resolved to URLs.\n    *\n    * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n    * @param uri The Namespace URI, or an empty string.\n    * @param name The local name (without prefix), or empty string if not namespace processing.\n    * @param rawName The qualified name (with prefix).\n    * @param value A list of whitespace delimited prefixes.\n    *\n    * @return A vector of strings that may be resolved to URLs.\n    *\n    * @throws org.xml.sax.SAXException if one of the prefixes can not be resolved.\n    ",
    "links" : [ ]
  }, {
    "name" : " Object processURL(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute string of type T_URL into\n   * a URL value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value non-null string that conforms to the URL syntax.\n   *\n   * @return The non-absolutized URL argument, in other words, the value argument.  If this \n   *         attribute supports AVT, an AVT is returned.\n   *\n   * @throws org.xml.sax.SAXException if the URL does not conform to the URL syntax.\n   ",
    "links" : [ ]
  }, {
    "name" : "private Boolean processYESNO(StylesheetHandler handler, String uri, String name, String rawName, String value) throws org.xml.sax.SAXException",
    "returnType" : "Boolean",
    "comment" : "\n   * Process an attribute string of type T_YESNO into\n   * a Boolean value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value A string that should be \"yes\" or \"no\".\n   *\n   * @return Boolean object representation of the value.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : " Object processValue(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException",
    "returnType" : "Object",
    "comment" : "\n   * Process an attribute value.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param name The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param value The unprocessed string value of the attribute.\n   *\n   * @return The processed Object representation of the attribute.\n   *\n   * @throws org.xml.sax.SAXException if the attribute value can not be processed.\n   ",
    "links" : [ ]
  }, {
    "name" : " void setDefAttrValue(StylesheetHandler handler, ElemTemplateElement elem) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Set the default value of an attribute.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param elem The object on which the property will be set.\n   *\n   * @throws org.xml.sax.SAXException wraps an invocation exception if the\n   * setter method can not be invoked on the object.\n   ",
    "links" : [ ]
  }, {
    "name" : "private Class getPrimativeClass(Object obj)",
    "returnType" : "Class",
    "comment" : "\n   * Get the primative type for the class, if there\n   * is one.  If the class is a Double, for instance,\n   * this will return double.class.  If the class is not one\n   * of the 9 primative types, it will return the same\n   * class that was passed in.\n   *\n   * @param obj The object which will be resolved to a primative class object if possible.\n   *\n   * @return The most primative class representation possible for the object, never null.\n   ",
    "links" : [ ]
  }, {
    "name" : "private StringBuffer getListOfEnums()",
    "returnType" : "StringBuffer",
    "comment" : "\n   * StringBuffer containing comma delimited list of valid values for ENUM type.\n   * Used to build error message.\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean setAttrValue(StylesheetHandler handler, String attrUri, String attrLocalName, String attrRawName, String attrValue, ElemTemplateElement elem) throws org.xml.sax.SAXException",
    "returnType" : "boolean",
    "comment" : "\n   * Set a value on an attribute.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param attrUri The Namespace URI of the attribute, or an empty string.\n   * @param attrLocalName The local name (without prefix), or empty string if not namespace processing.\n   * @param attrRawName The raw name of the attribute, including possible prefix.\n   * @param attrValue The attribute's value.\n   * @param elem The object that should contain a property that represents the attribute.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "private void handleError(StylesheetHandler handler, String msg, Object[] args, Exception exc) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " String getNamespace()", " String getName()", " int getType()", "private int getEnum(String key)", "private String[] getEnumNames()", " String getDefault()", " void setDefault(String def)", " boolean getRequired()", " boolean getSupportsAVT()", " int getErrorType()", "public String getSetterMethodName()", " AVT processAVT(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processCDATA(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processCHAR(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processENUM(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processENUM_OR_PQNAME(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processEXPR(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processNMTOKEN(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processPATTERN(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processNUMBER(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processQNAME(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processAVT_QNAME(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Object processNCNAME(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " Vector processQNAMES(StylesheetHandler handler, String uri, String name, String rawName, String value) throws org.xml.sax.SAXException", " final Vector processQNAMESRNU(StylesheetHandler handler, String uri, String name, String rawName, String value) throws org.xml.sax.SAXException", " Vector processSIMPLEPATTERNLIST(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " StringVector processSTRINGLIST(StylesheetHandler handler, String uri, String name, String rawName, String value)", " StringVector processPREFIX_URLLIST(StylesheetHandler handler, String uri, String name, String rawName, String value) throws org.xml.sax.SAXException", " StringVector processPREFIX_LIST(StylesheetHandler handler, String uri, String name, String rawName, String value) throws org.xml.sax.SAXException", " Object processURL(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", "private Boolean processYESNO(StylesheetHandler handler, String uri, String name, String rawName, String value) throws org.xml.sax.SAXException", " Object processValue(StylesheetHandler handler, String uri, String name, String rawName, String value, ElemTemplateElement owner) throws org.xml.sax.SAXException", " void setDefAttrValue(StylesheetHandler handler, ElemTemplateElement elem) throws org.xml.sax.SAXException", "private Class getPrimativeClass(Object obj)", "private StringBuffer getListOfEnums()", " boolean setAttrValue(StylesheetHandler handler, String attrUri, String attrLocalName, String attrRawName, String attrValue, ElemTemplateElement elem) throws org.xml.sax.SAXException", "private void handleError(StylesheetHandler handler, String msg, Object[] args, Exception exc) throws org.xml.sax.SAXException" ],
  "variableNames" : [ "FATAL", "ERROR", "WARNING", "T_CDATA", "T_URL", "T_AVT", "T_PATTERN", "T_EXPR", "T_CHAR", "T_NUMBER", "T_YESNO", "T_QNAME", "T_QNAMES", "T_ENUM", "T_SIMPLEPATTERNLIST", "T_NMTOKEN", "T_STRINGLIST", "T_PREFIX_URLLIST", "T_ENUM_OR_PQNAME", "T_NCNAME", "T_AVT_QNAME", "T_QNAMES_RESOLVE_NULL", "T_PREFIXLIST", "m_foreignAttr", "S_FOREIGNATTR_SETTER", "m_namespace", "m_name", "m_type", "m_enums", "m_default", "m_required", "m_supportsAVT", "m_errorType", "m_setterString" ]
}