{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/SplashScreen.java",
  "packageName" : "android.window",
  "className" : "SplashScreen",
  "comment" : "\n * The interface that apps use to talk to the splash screen.\n * <p>\n * Each splash screen instance is bound to a particular {@link Activity}.\n * To obtain a {@link SplashScreen} for an Activity, use\n * <code>Activity.getSplashScreen()</code> to get the SplashScreen.</p>\n ",
  "links" : [ "android.window.SplashScreen", "android.app.Activity" ],
  "variables" : [ {
    "name" : "SPLASH_SCREEN_STYLE_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * The splash screen style is not defined.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SPLASH_SCREEN_STYLE_SOLID_COLOR",
    "type" : "int",
    "comment" : "\n     * Flag to be used with {@link ActivityOptions#setSplashScreenStyle}, to avoid showing the\n     * splash screen icon of the launched activity\n     ",
    "links" : [ "android.app.ActivityOptions#setSplashScreenStyle" ]
  }, {
    "name" : "SPLASH_SCREEN_STYLE_ICON",
    "type" : "int",
    "comment" : "\n     * Flag to be used with {@link ActivityOptions#setSplashScreenStyle}, to show the splash screen\n     * icon of the launched activity.\n     ",
    "links" : [ "android.app.ActivityOptions#setSplashScreenStyle" ]
  } ],
  "methods" : [ {
    "name" : " void setOnExitAnimationListener(@NonNull SplashScreen.OnExitAnimationListener listener)",
    "returnType" : "void",
    "comment" : "\n     * <p>Specifies whether an {@link Activity} wants to handle the splash screen animation on its\n     * own. Normally the splash screen will show on screen before the content of the activity has\n     * been drawn, and disappear when the activity is showing on the screen. With this listener set,\n     * the activity will receive {@link OnExitAnimationListener#onSplashScreenExit} callback if\n     * splash screen is showed, then the activity can create its own exit animation based on the\n     * SplashScreenView.</p>\n     *\n     * <p> Note that this method must be called before splash screen leave, so it only takes effect\n     * during or before {@link Activity#onResume}.</p>\n     *\n     * @param listener the listener for receive the splash screen with\n     *\n     * @see OnExitAnimationListener#onSplashScreenExit(SplashScreenView)\n     ",
    "links" : [ "#onSplashScreenExit", "android.app.Activity#onResume", "android.app.Activity" ]
  }, {
    "name" : " void clearOnExitAnimationListener()",
    "returnType" : "void",
    "comment" : "\n     * Clear exist listener\n     * @see #setOnExitAnimationListener\n     ",
    "links" : [ ]
  }, {
    "name" : " void setSplashScreenTheme(@StyleRes int themeId)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the theme used for the {@link SplashScreen}s of this application.\n     * <p>\n     * By default, the {@link SplashScreen} uses the theme set in the manifest. This method\n     * overrides and persists the theme used for the {@link SplashScreen} of this application.\n     * <p>\n     * To reset to the default theme, set this the themeId to {@link Resources#ID_NULL}.\n     * <p>\n     * <b>Note:</b> Internally, the theme name is resolved and persisted. This means that the theme\n     * name must be stable across versions, otherwise it won't be found after your application is\n     * updated.\n     *\n     * @param themeId The ID of the splashscreen theme to be used in place of the one defined in\n     *                the manifest.\n     ",
    "links" : [ "android.window.SplashScreen", "android.content.res.Resources#ID_NULL" ]
  } ],
  "methodNames" : [ " void setOnExitAnimationListener(@NonNull SplashScreen.OnExitAnimationListener listener)", " void clearOnExitAnimationListener()", " void setSplashScreenTheme(@StyleRes int themeId)" ],
  "variableNames" : [ "SPLASH_SCREEN_STYLE_UNDEFINED", "SPLASH_SCREEN_STYLE_SOLID_COLOR", "SPLASH_SCREEN_STYLE_ICON" ]
}