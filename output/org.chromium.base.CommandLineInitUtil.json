{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/CommandLineInitUtil.java",
  "packageName" : "org.chromium.base",
  "className" : "CommandLineInitUtil",
  "comment" : " Provides implementation of command line initialization for Android. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "COMMAND_LINE_FILE_PATH",
    "type" : "String",
    "comment" : "\n     * The location of the command line file needs to be in a protected\n     * directory so requires root access to be tweaked, i.e., no other app in a\n     * regular (non-rooted) device can change this file's contents.\n     * See below for debugging on a regular (non-rooted) device.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMMAND_LINE_FILE_PATH_DEBUG_APP",
    "type" : "String",
    "comment" : "\n     * This path (writable by the shell in regular non-rooted \"user\" builds) is used when:\n     * 1) The \"debug app\" is set to the application calling this.\n     * and\n     * 2) ADB is enabled.\n     * 3) Force enabled by the embedder.\n     ",
    "links" : [ ]
  }, {
    "name" : "sFilenameOverrideForTesting",
    "type" : "String",
    "comment" : " The name of the command line file to pull arguments from. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setFilenameOverrideForTesting(String value)",
    "returnType" : "void",
    "comment" : " Set the filename to use. ",
    "links" : [ ]
  }, {
    "name" : "public static void initCommandLine(String fileName)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the CommandLine class, pulling command line arguments from {@code fileName}.\n     * @param fileName The name of the command line file to pull arguments from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void initCommandLine(String fileName, @Nullable Supplier<Boolean> shouldUseDebugFlags)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the CommandLine class, pulling command line arguments from {@code fileName}.\n     * @param fileName The name of the command line file to pull arguments from.\n     * @param shouldUseDebugFlags If non-null, returns whether debug flags are allowed to be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean shouldUseDebugCommandLine(@Nullable Supplier<Boolean> shouldUseDebugFlags)",
    "returnType" : "boolean",
    "comment" : "\n     * Use an alternative path if:\n     * - The current build is \"eng\" or \"userdebug\", OR\n     * - adb is enabled and this is the debug app, OR\n     * - Force enabled by the embedder.\n     * @param shouldUseDebugFlags If non-null, returns whether debug flags are allowed to be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDebugApp(Context context)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void setFilenameOverrideForTesting(String value)", "public static void initCommandLine(String fileName)", "public static void initCommandLine(String fileName, @Nullable Supplier<Boolean> shouldUseDebugFlags)", "private static boolean shouldUseDebugCommandLine(@Nullable Supplier<Boolean> shouldUseDebugFlags)", "private static String getDebugApp(Context context)" ],
  "variableNames" : [ "COMMAND_LINE_FILE_PATH", "COMMAND_LINE_FILE_PATH_DEBUG_APP", "sFilenameOverrideForTesting" ]
}