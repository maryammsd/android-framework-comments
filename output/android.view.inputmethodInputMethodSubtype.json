{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/inputmethod/InputMethodSubtype.java",
  "packageName" : "android.view.inputmethod",
  "className" : "InputMethodSubtype",
  "comment" : "\n * This class is used to specify meta information of a subtype contained in an input method editor\n * (IME). Subtype can describe locale (e.g. en_US, fr_FR...) and mode (e.g. voice, keyboard...),\n * and is used for IME switch and settings. The input method subtype allows the system to bring up\n * the specified subtype of the designated IME directly.\n *\n * <p>It should be defined in an XML resource file of the input method with the\n * <code>&lt;subtype&gt;</code> element, which resides within an {@code <input-method>} element.\n * For more information, see the guide to\n * <a href=\"{@docRoot}guide/topics/text/creating-input-method.html\">\n * Creating an Input Method</a>.</p>\n *\n * @see InputMethodInfo\n *\n * @attr ref android.R.styleable#InputMethod_Subtype_label\n * @attr ref android.R.styleable#InputMethod_Subtype_icon\n * @attr ref android.R.styleable#InputMethod_Subtype_languageTag\n * @attr ref android.R.styleable#InputMethod_Subtype_imeSubtypeLocale\n * @attr ref android.R.styleable#InputMethod_Subtype_imeSubtypeMode\n * @attr ref android.R.styleable#InputMethod_Subtype_imeSubtypeExtraValue\n * @attr ref android.R.styleable#InputMethod_Subtype_isAuxiliary\n * @attr ref android.R.styleable#InputMethod_Subtype_overridesImplicitlyEnabledSubtype\n * @attr ref android.R.styleable#InputMethod_Subtype_subtypeId\n * @attr ref android.R.styleable#InputMethod_Subtype_isAsciiCapable\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LANGUAGE_TAG_NONE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VALUE_PAIR_SEPARATOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VALUE_KEY_VALUE_SEPARATOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_KEY_UNTRANSLATABLE_STRING_IN_SUBTYPE_NAME",
    "type" : "String",
    "comment" : " TODO: remove this",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_ID_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAuxiliary",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverridesImplicitlyEnabledSubtype",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAsciiCapable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeHashCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeIconResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeNameResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeLocale",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeLanguageTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeMode",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeExtraValue",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedLocaleObj",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtraValueHashMapCache",
    "type" : "HashMap<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<InputMethodSubtype>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static InputMethodSubtypeBuilder getBuilder(int nameId, int iconId, String locale, String mode, String extraValue, boolean isAuxiliary, boolean overridesImplicitlyEnabledSubtype, int id, boolean isAsciiCapable)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getNameResId()",
    "returnType" : "int",
    "comment" : "\n     * @return Resource ID of the subtype name string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIconResId()",
    "returnType" : "int",
    "comment" : "\n     * @return Resource ID of the subtype icon drawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLocale()",
    "returnType" : "String",
    "comment" : "\n     * @return The locale of the subtype. This method returns the \"locale\" string parameter passed\n     * to the constructor.\n     *\n     * @deprecated Use {@link #getLanguageTag()} instead.\n     ",
    "links" : [ "#getLanguageTag" ]
  }, {
    "name" : "public String getLanguageTag()",
    "returnType" : "String",
    "comment" : "\n     * @return the BCP-47 Language Tag of the subtype.  Returns an empty string when no Language Tag\n     * is specified.\n     *\n     * @see Locale#forLanguageTag(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Locale getLocaleObject()",
    "returnType" : "Locale",
    "comment" : "\n     * @return {@link Locale} constructed from {@link #getLanguageTag()}. If the Language Tag is not\n     * specified, then try to construct from {@link #getLocale()}\n     *\n     * <p>TODO: Consider to make this a public API, or move this to support lib.</p>\n     * @hide\n     ",
    "links" : [ "Locale", "#getLanguageTag", "#getLocale" ]
  }, {
    "name" : "public String getMode()",
    "returnType" : "String",
    "comment" : "\n     * @return The mode of the subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getExtraValue()",
    "returnType" : "String",
    "comment" : "\n     * @return The extra value of the subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAuxiliary()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this subtype is auxiliary, false otherwise. An auxiliary subtype will not be\n     * shown in the list of enabled IMEs for choosing the current IME in the Settings even when this\n     * subtype is enabled. Please note that this subtype will still be shown in the list of IMEs in\n     * the IME switcher to allow the user to tentatively switch to this subtype while an IME is\n     * shown. The framework will never switch the current IME to this subtype by\n     * {@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.\n     * The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as\n     * auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager#switchToLastInputMethod" ]
  }, {
    "name" : "public boolean overridesImplicitlyEnabledSubtype()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true when this subtype will be enabled by default if no other subtypes in the IME\n     * are enabled explicitly, false otherwise. Note that a subtype with this method returning true\n     * will not be shown in the list of subtypes in each IME's subtype enabler. Having an\n     * \"automatic\" subtype is an example use of this flag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAsciiCapable()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this subtype is Ascii capable, false otherwise. If the subtype is ASCII\n     * capable, it should guarantee that the user can input ASCII characters with this subtype.\n     * This is important because many password fields only allow ASCII-characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDisplayName(Context context, String packageName, ApplicationInfo appInfo)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a display name for this subtype.\n     *\n     * <p>If {@code subtypeNameResId} is specified (!= 0) text generated from that resource will\n     * be returned. The localized string resource of the label should be capitalized for inclusion\n     * in UI lists. The string resource may contain at most one {@code %s}. If present, the\n     * {@code %s} will be replaced with the display name of the subtype locale in the user's locale.\n     *\n     * <p>If {@code subtypeNameResId} is not specified (== 0) the framework returns the display name\n     * of the subtype locale, as capitalized for use in UI lists, in the user's locale.\n     *\n     * @param context {@link Context} will be used for getting {@link Locale} and\n     * {@link android.content.pm.PackageManager}.\n     * @param packageName The package name of the input method.\n     * @param appInfo The {@link ApplicationInfo} of the input method.\n     * @return a display name for this subtype.\n     ",
    "links" : [ "Context", "Locale", "android.content.pm.PackageManager", "ApplicationInfo" ]
  }, {
    "name" : "private static Locale getLocaleFromContext(@Nullable final Context context)",
    "returnType" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getLocaleDisplayName(@Nullable Locale displayLocale, @Nullable Locale localeToDisplay, final DisplayContext displayContext)",
    "returnType" : "String",
    "comment" : "\n     * @param displayLocale {@link Locale} to be used to display {@code localeToDisplay}\n     * @param localeToDisplay {@link Locale} to be displayed in {@code displayLocale}\n     * @param displayContext context parameter to be used to display {@code localeToDisplay} in\n     * {@code displayLocale}\n     * @return Returns the name of the {@code localeToDisplay} in the user's current locale.\n     ",
    "links" : [ "Locale", "Locale" ]
  }, {
    "name" : "private HashMap<String, String> getExtraValueHashMap()",
    "returnType" : "HashMap<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsExtraValueKey(String key)",
    "returnType" : "boolean",
    "comment" : "\n     * The string of ExtraValue in subtype should be defined as follows:\n     * example: key0,key1=value1,key2,key3,key4=value4\n     * @param key The key of extra value\n     * @return The subtype contains specified the extra value\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getExtraValueOf(String key)",
    "returnType" : "String",
    "comment" : "\n     * The string of ExtraValue in subtype should be defined as follows:\n     * example: key0,key1=value1,key2,key3,key4=value4\n     * @param key The key of extra value\n     * @return The value of the specified key\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasSubtypeId()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @return {@code true} if a valid subtype ID exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getSubtypeId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @return subtype ID. {@code 0} means that not subtype ID is specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int hashCodeInternal(String locale, String mode, String extraValue, boolean isAuxiliary, boolean overridesImplicitlyEnabledSubtype, boolean isAsciiCapable)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static List<InputMethodSubtype> sort(Context context, int flags, InputMethodInfo imi, List<InputMethodSubtype> subtypeList)",
    "returnType" : "List<InputMethodSubtype>",
    "comment" : "\n     * Sort the list of InputMethodSubtype\n     * @param context Context will be used for getting localized strings from IME\n     * @param flags Flags for the sort order\n     * @param imi InputMethodInfo of which subtypes are subject to be sorted\n     * @param subtypeList List of InputMethodSubtype which will be sorted\n     * @return Sorted list of subtypes\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "LANGUAGE_TAG_NONE", "EXTRA_VALUE_PAIR_SEPARATOR", "EXTRA_VALUE_KEY_VALUE_SEPARATOR", "EXTRA_KEY_UNTRANSLATABLE_STRING_IN_SUBTYPE_NAME", "SUBTYPE_ID_NONE", "mIsAuxiliary", "mOverridesImplicitlyEnabledSubtype", "mIsAsciiCapable", "mSubtypeHashCode", "mSubtypeIconResId", "mSubtypeNameResId", "mSubtypeId", "mSubtypeLocale", "mSubtypeLanguageTag", "mSubtypeMode", "mSubtypeExtraValue", "mLock", "mCachedLocaleObj", "mExtraValueHashMapCache", "CREATOR" ],
  "methodNames" : [ "private static InputMethodSubtypeBuilder getBuilder(int nameId, int iconId, String locale, String mode, String extraValue, boolean isAuxiliary, boolean overridesImplicitlyEnabledSubtype, int id, boolean isAsciiCapable)", "public int getNameResId()", "public int getIconResId()", "public String getLocale()", "public String getLanguageTag()", "public Locale getLocaleObject()", "public String getMode()", "public String getExtraValue()", "public boolean isAuxiliary()", "public boolean overridesImplicitlyEnabledSubtype()", "public boolean isAsciiCapable()", "public CharSequence getDisplayName(Context context, String packageName, ApplicationInfo appInfo)", "private static Locale getLocaleFromContext(@Nullable final Context context)", "private static String getLocaleDisplayName(@Nullable Locale displayLocale, @Nullable Locale localeToDisplay, final DisplayContext displayContext)", "private HashMap<String, String> getExtraValueHashMap()", "public boolean containsExtraValueKey(String key)", "public String getExtraValueOf(String key)", "public int hashCode()", "public final boolean hasSubtypeId()", "public final int getSubtypeId()", "public boolean equals(Object o)", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)", "private static int hashCodeInternal(String locale, String mode, String extraValue, boolean isAuxiliary, boolean overridesImplicitlyEnabledSubtype, boolean isAsciiCapable)", "public static List<InputMethodSubtype> sort(Context context, int flags, InputMethodInfo imi, List<InputMethodSubtype> subtypeList)" ]
}