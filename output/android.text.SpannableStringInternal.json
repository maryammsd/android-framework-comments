{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/SpannableStringInternal.java",
  "packageName" : "android.text",
  "className" : "SpannableStringInternal",
  "comment" : " package ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mText",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpans",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpanData",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpanCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "END",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMNS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void copySpansFromSpanned(Spanned src, int start, int end, boolean ignoreNoCopySpan)",
    "returnType" : "void",
    "comment" : "\n     * Copies another {@link Spanned} object's spans between [start, end] into this object.\n     *\n     * @param src Source object to copy from.\n     * @param start Start index in the source object.\n     * @param end End index in the source object.\n     * @param ignoreNoCopySpan whether to copy NoCopySpans in the {@code source}\n     ",
    "links" : [ "android.text.Spanned" ]
  }, {
    "name" : "private void copySpansFromInternal(SpannableStringInternal src, int start, int end, boolean ignoreNoCopySpan)",
    "returnType" : "void",
    "comment" : "\n     * Copies a {@link SpannableStringInternal} object's spans between [start, end] into this\n     * object.\n     *\n     * @param src Source object to copy from.\n     * @param start Start index in the source object.\n     * @param end End index in the source object.\n     * @param ignoreNoCopySpan copy NoCopySpan for backward compatible reasons.\n     ",
    "links" : [ "android.text.SpannableStringInternal" ]
  }, {
    "name" : "private final boolean isOutOfCopyRange(int start, int end, int spanStart, int spanEnd)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if [spanStart, spanEnd] interval is excluded from [start, end].\n     *\n     * @return True if excluded, false if included.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int length()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final char charAt(int i)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void getChars(int start, int end, char[] dest, int off)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setSpan(Object what, int start, int end, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isIndexFollowsNextLine(int index)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setSpan(Object what, int start, int end, int flags, boolean enforceParagraph)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeSpan(Object what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeSpan(Object what, int flags)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSpanStart(Object what)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanEnd(Object what)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanFlags(Object what)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T[] getSpans(int queryStart, int queryEnd, Class<T> kind)",
    "returnType" : "T[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int nextSpanTransition(int start, int limit, Class kind)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendSpanAdded(Object what, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendSpanRemoved(Object what, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendSpanChanged(Object what, int s, int e, int st, int en)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String region(int start, int end)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkRange(final String operation, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : " Same as SpannableStringBuilder",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : " Same as SpannableStringBuilder",
    "links" : [ ]
  }, {
    "name" : "private void copySpans(Spanned src, int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * Following two unused methods are left since these are listed in hidden api list.\n     *\n     * Due to backward compatibility reasons, we copy even NoCopySpan by default\n     ",
    "links" : [ ]
  }, {
    "name" : "private void copySpans(SpannableStringInternal src, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void copySpansFromSpanned(Spanned src, int start, int end, boolean ignoreNoCopySpan)", "private void copySpansFromInternal(SpannableStringInternal src, int start, int end, boolean ignoreNoCopySpan)", "private final boolean isOutOfCopyRange(int start, int end, int spanStart, int spanEnd)", "public final int length()", "public final char charAt(int i)", "public final String toString()", "public final void getChars(int start, int end, char[] dest, int off)", " void setSpan(Object what, int start, int end, int flags)", "private boolean isIndexFollowsNextLine(int index)", "private void setSpan(Object what, int start, int end, int flags, boolean enforceParagraph)", " void removeSpan(Object what)", "public void removeSpan(Object what, int flags)", "public int getSpanStart(Object what)", "public int getSpanEnd(Object what)", "public int getSpanFlags(Object what)", "public T[] getSpans(int queryStart, int queryEnd, Class<T> kind)", "public int nextSpanTransition(int start, int limit, Class kind)", "private void sendSpanAdded(Object what, int start, int end)", "private void sendSpanRemoved(Object what, int start, int end)", "private void sendSpanChanged(Object what, int s, int e, int st, int en)", "private static String region(int start, int end)", "private void checkRange(final String operation, int start, int end)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "private void copySpans(Spanned src, int start, int end)", "private void copySpans(SpannableStringInternal src, int start, int end)" ],
  "variableNames" : [ "mText", "mSpans", "mSpanData", "mSpanCount", "EMPTY", "START", "END", "FLAGS", "COLUMNS" ]
}