{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/animation/Keyframes.java",
  "packageName" : "android.animation",
  "className" : "Keyframes",
  "comment" : "\n * This interface abstracts a collection of Keyframe objects and is called by\n * ValueAnimator to calculate values between those keyframes for a given animation.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void setEvaluator(TypeEvaluator evaluator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the TypeEvaluator to be used when calculating animated values. This object\n     * is required only for Keyframes that are not either IntKeyframes or FloatKeyframes,\n     * both of which assume their own evaluator to speed up calculations with those primitive\n     * types.\n     *\n     * @param evaluator The TypeEvaluator to be used to calculate animated values.\n     ",
    "links" : [ ]
  }, {
    "name" : " Class getType()",
    "returnType" : "Class",
    "comment" : "\n     * @return The value type contained by the contained Keyframes.\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getValue(float fraction)",
    "returnType" : "Object",
    "comment" : "\n     * Gets the animated value, given the elapsed fraction of the animation (interpolated by the\n     * animation's interpolator) and the evaluator used to calculate in-between values. This\n     * function maps the input fraction to the appropriate keyframe interval and a fraction\n     * between them and returns the interpolated value. Note that the input fraction may fall\n     * outside the [0-1] bounds, if the animation's interpolator made that happen (e.g., a\n     * spring interpolation that might send the fraction past 1.0). We handle this situation by\n     * just using the two keyframes at the appropriate end when the value is outside those bounds.\n     *\n     * @param fraction The elapsed fraction of the animation\n     * @return The animated value.\n     ",
    "links" : [ ]
  }, {
    "name" : " List<Keyframe> getKeyframes()",
    "returnType" : "List<Keyframe>",
    "comment" : "\n     * @return A list of all Keyframes contained by this. This may return null if this is\n     * not made up of Keyframes.\n     ",
    "links" : [ ]
  }, {
    "name" : " Keyframes clone()",
    "returnType" : "Keyframes",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setEvaluator(TypeEvaluator evaluator)", " Class getType()", " Object getValue(float fraction)", " List<Keyframe> getKeyframes()", " Keyframes clone()" ],
  "variableNames" : [ ]
}