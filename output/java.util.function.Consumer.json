{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/function/Consumer.java",
  "packageName" : "java.util.function",
  "className" : "Consumer",
  "comment" : "\n * Represents an operation that accepts a single input argument and returns no\n * result. Unlike most other functional interfaces, {@code Consumer} is expected\n * to operate via side-effects.\n *\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n * whose functional method is {@link #accept(Object)}.\n *\n * @param <T> the type of the input to the operation\n *\n * @since 1.8\n ",
  "links" : [ "#accept(Object)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void accept(T t)",
    "returnType" : "void",
    "comment" : "\n     * Performs this operation on the given argument.\n     *\n     * @param t the input argument\n     ",
    "links" : [ ]
  }, {
    "name" : " Consumer<T> andThen(Consumer<? super T> after)",
    "returnType" : "Consumer<T>",
    "comment" : "\n     * Returns a composed {@code Consumer} that performs, in sequence, this\n     * operation followed by the {@code after} operation. If performing either\n     * operation throws an exception, it is relayed to the caller of the\n     * composed operation.  If performing this operation throws an exception,\n     * the {@code after} operation will not be performed.\n     *\n     * @param after the operation to perform after this operation\n     * @return a composed {@code Consumer} that performs in sequence this\n     * operation followed by the {@code after} operation\n     * @throws NullPointerException if {@code after} is null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void accept(T t)", " Consumer<T> andThen(Consumer<? super T> after)" ],
  "variableNames" : [ ]
}