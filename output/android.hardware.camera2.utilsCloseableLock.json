{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/utils/CloseableLock.java",
  "packageName" : "android.hardware.camera2.utils",
  "className" : "CloseableLock",
  "comment" : "\n * Implement a shared/exclusive lock that can be closed.\n *\n * <p>A shared lock can be acquired if any other shared locks are also acquired. An\n * exclusive lock acquire will block until all shared locks have been released.</p>\n *\n * <p>Locks are re-entrant; trying to acquire another lock (of the same type)\n * while a lock is already held will immediately succeed.</p>\n *\n * <p>Acquiring to acquire a shared lock while holding an exclusive lock or vice versa is not\n * supported; attempting it will throw an {@link IllegalStateException}.</p>\n *\n * <p>If the lock is closed, all future and current acquires will immediately return {@code null}.\n * </p>\n ",
  "variables" : [ {
    "name" : "VERBOSE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExclusive",
    "type" : "boolean",
    "comment" : " If an exclusive lock is acquired by some thread. ",
    "links" : [ ]
  }, {
    "name" : "mSharedLocks",
    "type" : "int",
    "comment" : "\n     * How many shared locks are acquired by any thread:\n     *\n     * <p>Reentrant locking increments this. If an exclusive lock is held,\n     * this value will stay at 0.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "ReentrantLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCondition",
    "type" : "Condition",
    "comment" : " This condition automatically releases mLock when waiting; re-acquiring it after notify ",
    "links" : [ ]
  }, {
    "name" : "mLockCount",
    "type" : "ThreadLocal<Integer>",
    "comment" : " How many times the current thread is holding the lock ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Acquires the lock exclusively (blocking), marks it as closed, then releases the lock.\n     *\n     * <p>Marking a lock as closed will fail all further acquisition attempts;\n     * it will also immediately unblock all other threads currently trying to acquire a lock.</p>\n     *\n     * <p>This operation is idempotent; calling it more than once has no effect.</p>\n     *\n     * @throws IllegalStateException\n     *          if an attempt is made to {@code close} while this thread has a lock acquired\n     ",
    "links" : [ ]
  }, {
    "name" : "public ScopedLock acquireLock()",
    "returnType" : "ScopedLock",
    "comment" : "\n     * Try to acquire the lock non-exclusively, blocking until the operation completes.\n     *\n     * <p>If the lock has already been closed, or being closed before this operation returns,\n     * the call will immediately return {@code false}.</p>\n     *\n     * <p>If other threads hold a non-exclusive lock (and the lock is not yet closed),\n     * this operation will return immediately. If another thread holds an exclusive lock,\n     * this thread will block until the exclusive lock has been released.</p>\n     *\n     * <p>This lock is re-entrant; acquiring more than one non-exclusive lock per thread is\n     * supported, and must be matched by an equal number of {@link #releaseLock} calls.</p>\n     *\n     * @return {@code ScopedLock} instance if the lock was acquired, or {@code null} if the lock\n     *         was already closed.\n     *\n     * @throws IllegalStateException if this thread is already holding an exclusive lock\n     ",
    "links" : [ "#releaseLock" ]
  }, {
    "name" : "public ScopedLock acquireExclusiveLock()",
    "returnType" : "ScopedLock",
    "comment" : "\n     * Try to acquire the lock exclusively, blocking until all other threads release their locks.\n     *\n     * <p>If the lock has already been closed, or being closed before this operation returns,\n     * the call will immediately return {@code false}.</p>\n     *\n     * <p>If any other threads are holding a lock, this thread will block until all\n     * other locks are released.</p>\n     *\n     * <p>This lock is re-entrant; acquiring more than one exclusive lock per thread is supported,\n     * and must be matched by an equal number of {@link #releaseLock} calls.</p>\n     *\n     * @return {@code ScopedLock} instance if the lock was acquired, or {@code null} if the lock\n     *         was already closed.\n     *\n     * @throws IllegalStateException\n     *          if an attempt is made to acquire an exclusive lock while already holding a lock\n     ",
    "links" : [ "#releaseLock" ]
  }, {
    "name" : "public void releaseLock()",
    "returnType" : "void",
    "comment" : "\n     * Release a single lock that was acquired.\n     *\n     * <p>Any other thread that is blocked and trying to acquire a lock will get a chance\n     * to acquire the lock.</p>\n     *\n     * @throws IllegalStateException if no locks were acquired, or if the lock was already closed\n     ",
    "links" : [ ]
  }, {
    "name" : "private void log(String what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "VERBOSE", "TAG", "mName", "mClosed", "mExclusive", "mSharedLocks", "mLock", "mCondition", "mLockCount" ],
  "methodNames" : [ "public void close()", "public ScopedLock acquireLock()", "public ScopedLock acquireExclusiveLock()", "public void releaseLock()", "private void log(String what)" ]
}