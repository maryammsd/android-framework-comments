{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BugreportManager.java",
  "packageName" : "android.os",
  "className" : "BugreportManager",
  "comment" : "\n * Class that provides a privileged API to capture and consume bugreports.\n *\n * <p>This class may only be used by apps that currently have carrier privileges (see {@link\n * android.telephony.TelephonyManager#hasCarrierPrivileges}) on an active SIM or priv-apps\n * explicitly allowed by the device manufacturer.\n *\n * <p>Only one bugreport can be generated by the system at a time.\n ",
  "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IDumpstate",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void preDumpUiData()",
    "returnType" : "void",
    "comment" : "\n     * Speculatively pre-dumps UI data for a bugreport request that might come later.\n     *\n     * <p>Triggers the dump of certain critical UI data, e.g. traces stored in short\n     * ring buffers that might get lost by the time the actual bugreport is requested.\n     *\n     * <p>{@link #startBugreport} will then pick the pre-dumped data if both of the following\n     * conditions are met:\n     * - {@link android.os.BugreportParams#BUGREPORT_FLAG_USE_PREDUMPED_UI_DATA} is specified.\n     * - {@link #preDumpUiData} and {@link #startBugreport} were called by the same UID.\n     * @hide\n     ",
    "links" : [ "#preDumpUiData", "android.os.BugreportParams#BUGREPORT_FLAG_USE_PREDUMPED_UI_DATA", "#startBugreport" ]
  }, {
    "name" : "public void startBugreport(@NonNull ParcelFileDescriptor bugreportFd, @Nullable ParcelFileDescriptor screenshotFd, @NonNull BugreportParams params, @NonNull @CallbackExecutor Executor executor, @NonNull BugreportCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Starts a bugreport.\n     *\n     * <p>This starts a bugreport in the background. However the call itself can take several\n     * seconds to return in the worst case. {@code callback} will receive progress and status\n     * updates.\n     *\n     * <p>The bugreport artifacts will be copied over to the given file descriptors only if the user\n     * consents to sharing with the calling app. If\n     * {@link BugreportParams#BUGREPORT_FLAG_DEFER_CONSENT} is set, user consent will be deferred\n     * and no files will be copied to the given file descriptors.\n     *\n     * <p>{@link BugreportManager} takes ownership of {@code bugreportFd} and {@code screenshotFd}.\n     *\n     * @param bugreportFd file to write the bugreport. This should be opened in write-only, append\n     *     mode.\n     * @param screenshotFd file to write the screenshot, if necessary. This should be opened in\n     *     write-only, append mode.\n     * @param params options that specify what kind of a bugreport should be taken\n     * @param callback callback for progress and status updates\n     * @hide\n     ",
    "links" : [ "android.os.BugreportParams#BUGREPORT_FLAG_DEFER_CONSENT", "android.os.BugreportManager" ]
  }, {
    "name" : "public void retrieveBugreport(@NonNull String bugreportFile, @NonNull ParcelFileDescriptor bugreportFd, @NonNull @CallbackExecutor Executor executor, @NonNull BugreportCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves a previously generated bugreport.\n     *\n     * <p>The previously generated bugreport must have been generated by calling {@link\n     * #startBugreport(ParcelFileDescriptor, ParcelFileDescriptor, BugreportParams,\n     * Executor, BugreportCallback)} with the {@link BugreportParams#BUGREPORT_FLAG_DEFER_CONSENT}\n     * flag set. The bugreport file returned by the {@link BugreportCallback#onFinished(String)}\n     * callback for a previously generated bugreport must be passed to this method. A caller may\n     * only retrieve bugreports that they have previously requested.\n     *\n     * <p>The bugreport artifacts will be copied over to the given file descriptor only if the user\n     * consents to sharing with the calling app.\n     *\n     * <p>{@link BugreportManager} takes ownership of {@code bugreportFd}.\n     *\n     * <p>The caller can reattempt to retrieve the bugreport multiple times if the user has not\n     * consented on previous attempts.\n     *\n     * @param bugreportFile the identifier for a bugreport that was previously generated for this\n     *      caller using {@code startBugreport}.\n     * @param bugreportFd file to copy over the previous bugreport. This should be opened in\n     *      write-only, append mode.\n     * @param executor the executor to execute callback methods.\n     * @param callback callback for progress and status updates.\n     * @hide\n     ",
    "links" : [ "#startBugreport(ParcelFileDescriptor", "#onFinished(String)", "android.os.BugreportParams#BUGREPORT_FLAG_DEFER_CONSENT", "android.os.BugreportManager" ]
  }, {
    "name" : "public void startConnectivityBugreport(@NonNull ParcelFileDescriptor bugreportFd, @NonNull @CallbackExecutor Executor executor, @NonNull BugreportCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Starts a connectivity bugreport.\n     *\n     * <p>The connectivity bugreport is a specialized version of bugreport that only includes\n     * information specifically for debugging connectivity-related issues (e.g. telephony, wi-fi,\n     * and IP networking issues). It is intended primarily for use by OEMs and network providers\n     * such as mobile network operators. In addition to generally excluding information that isn't\n     * targeted to connectivity debugging, this type of bugreport excludes PII and sensitive\n     * information that isn't strictly necessary for connectivity debugging.\n     *\n     * <p>The calling app MUST have a context-specific reason for requesting a connectivity\n     * bugreport, such as detecting a connectivity-related issue. This API SHALL NOT be used to\n     * perform random sampling from a fleet of public end-user devices.\n     *\n     * <p>Calling this API will cause the system to ask the user for consent every single time. The\n     * bugreport artifacts will be copied over to the given file descriptors only if the user\n     * consents to sharing with the calling app.\n     *\n     * <p>This starts a bugreport in the background. However the call itself can take several\n     * seconds to return in the worst case. {@code callback} will receive progress and status\n     * updates.\n     *\n     * <p>Requires that the calling app has carrier privileges (see {@link\n     * android.telephony.TelephonyManager#hasCarrierPrivileges}) on any active subscription.\n     *\n     * @param bugreportFd file to write the bugreport. This should be opened in write-only, append\n     *     mode.\n     * @param callback callback for progress and status updates.\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public void cancelBugreport()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the currently running bugreport.\n     *\n     * <p>Apps are only able to cancel their own bugreports. App A cannot cancel a bugreport started\n     * by app B.\n     *\n     * <p>Requires permission: {@link android.Manifest.permission#DUMP} or that the calling app has\n     * carrier privileges (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}) on\n     * any active subscription.\n     *\n     * @throws SecurityException if trying to cancel another app's bugreport in progress\n     ",
    "links" : [ "android.Manifest.permission#DUMP", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public void requestBugreport(@NonNull BugreportParams params, @Nullable CharSequence shareTitle, @Nullable CharSequence shareDescription)",
    "returnType" : "void",
    "comment" : "\n     * Requests a bugreport.\n     *\n     * <p>This requests the platform/system to take a bugreport and makes the final bugreport\n     * available to the user. The user may choose to share it with another app, but the bugreport is\n     * never given back directly to the app that requested it.\n     *\n     * @param params {@link BugreportParams} that specify what kind of a bugreport should be taken,\n     *     please note that not all kinds of bugreport allow for a progress notification\n     * @param shareTitle title on the final share notification\n     * @param shareDescription description on the final share notification\n     * @hide\n     ",
    "links" : [ "android.os.BugreportParams" ]
  } ],
  "methodNames" : [ "public void preDumpUiData()", "public void startBugreport(@NonNull ParcelFileDescriptor bugreportFd, @Nullable ParcelFileDescriptor screenshotFd, @NonNull BugreportParams params, @NonNull @CallbackExecutor Executor executor, @NonNull BugreportCallback callback)", "public void retrieveBugreport(@NonNull String bugreportFile, @NonNull ParcelFileDescriptor bugreportFd, @NonNull @CallbackExecutor Executor executor, @NonNull BugreportCallback callback)", "public void startConnectivityBugreport(@NonNull ParcelFileDescriptor bugreportFd, @NonNull @CallbackExecutor Executor executor, @NonNull BugreportCallback callback)", "public void cancelBugreport()", "public void requestBugreport(@NonNull BugreportParams params, @Nullable CharSequence shareTitle, @Nullable CharSequence shareDescription)" ],
  "variableNames" : [ "TAG", "mContext", "mBinder" ]
}