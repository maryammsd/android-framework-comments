{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/task/AsyncTask.java",
  "packageName" : "org.chromium.base.task",
  "className" : "AsyncTask",
  "comment" : "\n * A Chromium version of android.os.AsyncTask.\n *\n * The API is quite close to Android's Oreo version, but with a number of things removed.\n * @param <Result> Return type of the background task.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GET_STATUS_UMA_HISTOGRAM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THREAD_POOL_EXECUTOR",
    "type" : "Executor",
    "comment" : "\n     * An {@link Executor} that can be used to execute tasks in parallel.\n     * We use the lowest task priority, and mayBlock = true since any user of this could\n     * block.\n     ",
    "links" : [ "java.util.concurrent.Executor" ]
  }, {
    "name" : "SERIAL_EXECUTOR",
    "type" : "Executor",
    "comment" : "\n     * An {@link Executor} that executes tasks one at a time in serial\n     * order.  This serialization is global to a particular process.\n     ",
    "links" : [ "java.util.concurrent.Executor" ]
  }, {
    "name" : "STEAL_RUNNABLE_HANDLER",
    "type" : "StealRunnableHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorker",
    "type" : "Callable<Result>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFuture",
    "type" : "NamedFutureTask",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancelled",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTaskInvoked",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIterationIdForTesting",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void takeOverAndroidThreadPool()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postResultIfNotInvoked(Result result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postResult(Result result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current status of this task.\n     *\n     * @return The current status.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getUmaStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current status of this task, with adjustments made to make UMA more useful.\n     * Namely, we are going to return \"PENDING\" until the asynctask actually starts running. Right\n     * now, as soon as you try to schedule the AsyncTask, it gets set to \"RUNNING\" which doesn't\n     * make sense. However, we aren't fixing this globally as this is the well-defined API\n     * AsyncTasks have, so we are just fixing this for our UMA reporting.\n     *\n     * @return The current status.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract Result doInBackground()",
    "returnType" : "Result",
    "comment" : "\n     * Override this method to perform a computation on a background thread.\n     *\n     * @return A result, defined by the subclass of this task.\n     *\n     * @see #onPreExecute()\n     * @see #onPostExecute\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onPreExecute()",
    "returnType" : "void",
    "comment" : "\n     * Runs on the UI thread before {@link #doInBackground}.\n     *\n     * @see #onPostExecute\n     * @see #doInBackground\n     ",
    "links" : [ "#doInBackground" ]
  }, {
    "name" : "protected abstract void onPostExecute(Result result)",
    "returnType" : "void",
    "comment" : "\n     * <p>Runs on the UI thread after {@link #doInBackground}. The\n     * specified result is the value returned by {@link #doInBackground}.</p>\n     *\n     * <p>This method won't be invoked if the task was cancelled.</p>\n     *\n     * <p> Must be overridden by subclasses. If a subclass doesn't need\n     * post-execution, is should extend BackgroundOnlyAsyncTask instead.\n     *\n     * @param result The result of the operation computed by {@link #doInBackground}.\n     *\n     * @see #onPreExecute\n     * @see #doInBackground\n     * @see #onCancelled(Object)\n     ",
    "links" : [ "#doInBackground" ]
  }, {
    "name" : "protected void onCancelled(Result result)",
    "returnType" : "void",
    "comment" : "\n     * <p>Runs on the UI thread after {@link #cancel(boolean)} is invoked and\n     * {@link #doInBackground()} has finished.</p>\n     *\n     * <p>The default implementation simply invokes {@link #onCancelled()} and\n     * ignores the result. If you write your own implementation, do not call\n     * <code>super.onCancelled(result)</code>.</p>\n     *\n     * @param result The result, if any, computed in\n     *               {@link #doInBackground()}, can be null\n     *\n     * @see #cancel(boolean)\n     * @see #isCancelled()\n     ",
    "links" : [ "#cancel(boolean)", "#onCancelled()", "#doInBackground()" ]
  }, {
    "name" : "protected void onCancelled()",
    "returnType" : "void",
    "comment" : "\n     * <p>Applications should preferably override {@link #onCancelled(Object)}.\n     * This method is invoked by the default implementation of\n     * {@link #onCancelled(Object)}.</p>\n     *\n     * <p>Runs on the UI thread after {@link #cancel(boolean)} is invoked and\n     * {@link #doInBackground()} has finished.</p>\n     *\n     * @see #onCancelled(Object)\n     * @see #cancel(boolean)\n     * @see #isCancelled()\n     ",
    "links" : [ "#cancel(boolean)", "#onCancelled(Object)", "#doInBackground()" ]
  }, {
    "name" : "public final boolean isCancelled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <tt>true</tt> if this task was cancelled before it completed\n     * normally. If you are calling {@link #cancel(boolean)} on the task,\n     * the value returned by this method should be checked periodically from\n     * {@link #doInBackground()} to end the task as soon as possible.\n     *\n     * @return <tt>true</tt> if task was cancelled before it completed\n     *\n     * @see #cancel(boolean)\n     ",
    "links" : [ "#cancel(boolean)", "#doInBackground()" ]
  }, {
    "name" : "public final boolean cancel(boolean mayInterruptIfRunning)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Attempts to cancel execution of this task.  This attempt will\n     * fail if the task has already completed, already been cancelled,\n     * or could not be cancelled for some other reason. If successful,\n     * and this task has not started when <tt>cancel</tt> is called,\n     * this task should never run. If the task has already started,\n     * then the <tt>mayInterruptIfRunning</tt> parameter determines\n     * whether the thread executing this task should be interrupted in\n     * an attempt to stop the task.</p>\n     *\n     * <p>Calling this method will result in {@link #onCancelled(Object)} being\n     * invoked on the UI thread after {@link #doInBackground()}\n     * returns. Calling this method guarantees that {@link #onPostExecute(Object)}\n     * is never invoked. After invoking this method, you should check the\n     * value returned by {@link #isCancelled()} periodically from\n     * {@link #doInBackground()} to finish the task as early as\n     * possible.</p>\n     *\n     * @param mayInterruptIfRunning <tt>true</tt> if the thread executing this\n     *        task should be interrupted; otherwise, in-progress tasks are allowed\n     *        to complete.\n     *\n     * @return <tt>false</tt> if the task could not be cancelled,\n     *         typically because it has already completed normally;\n     *         <tt>true</tt> otherwise\n     *\n     * @see #isCancelled()\n     * @see #onCancelled(Object)\n     ",
    "links" : [ "#onCancelled(Object)", "#doInBackground()", "#onPostExecute(Object)", "#isCancelled()" ]
  }, {
    "name" : "public final Result get() throws InterruptedException, ExecutionException",
    "returnType" : "Result",
    "comment" : "\n     * Waits if necessary for the computation to complete, and then\n     * retrieves its result.\n     *\n     * @return The computed result.\n     *\n     * @throws CancellationException If the computation was cancelled.\n     * @throws ExecutionException If the computation threw an exception.\n     * @throws InterruptedException If the current thread was interrupted\n     *         while waiting.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Result get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException",
    "returnType" : "Result",
    "comment" : "\n     * Waits if necessary for at most the given time for the computation to complete, and then\n     * retrieves its result.\n     *\n     * @param timeout Time to wait before cancelling the operation.\n     * @param unit The time unit for the timeout.\n     *\n     * @return The computed result.\n     *\n     * @throws CancellationException If the computation was cancelled.\n     * @throws ExecutionException If the computation threw an exception.\n     * @throws InterruptedException If the current thread was interrupted while waiting.\n     * @throws TimeoutException If the wait timed out.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void executionPreamble()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final AsyncTask<Result> executeOnExecutor(Executor exec)",
    "returnType" : "AsyncTask<Result>",
    "comment" : "\n     * Executes the task with the specified parameters. The task returns\n     * itself (this) so that the caller can keep a reference to it.\n     *\n     * <p>This method is typically used with {@link #THREAD_POOL_EXECUTOR} to\n     * allow multiple tasks to run in parallel on a pool of threads managed by\n     * AsyncTask, however you can also use your own {@link Executor} for custom\n     * behavior.\n     *\n     * <p><em>Warning:</em> Allowing multiple tasks to run in parallel from\n     * a thread pool is generally <em>not</em> what one wants, because the order\n     * of their operation is not defined.  For example, if these tasks are used\n     * to modify any state in common (such as writing a file due to a button click),\n     * there are no guarantees on the order of the modifications.\n     * Without careful work it is possible in rare cases for the newer version\n     * of the data to be over-written by an older one, leading to obscure data\n     * loss and stability issues.  Such changes are best\n     * executed in serial; to guarantee such work is serialized regardless of\n     * platform version you can use this function with {@link #SERIAL_EXECUTOR}.\n     *\n     * <p>This method must be invoked on the UI thread.\n     *\n     * @param exec The executor to use.  {@link #THREAD_POOL_EXECUTOR} is available as a\n     *              convenient process-wide thread pool for tasks that are loosely coupled.\n     *\n     * @return This instance of AsyncTask.\n     *\n     * @throws IllegalStateException If {@link #getStatus()} returns either\n     *         {@link AsyncTask.Status#RUNNING} or {@link AsyncTask.Status#FINISHED}.\n     ",
    "links" : [ "#THREAD_POOL_EXECUTOR", "java.util.concurrent.Executor", "AsyncTask.Status#RUNNING", "#SERIAL_EXECUTOR", "AsyncTask.Status#FINISHED", "#getStatus()" ]
  }, {
    "name" : "public final AsyncTask<Result> executeOnTaskRunner(TaskRunner taskRunner)",
    "returnType" : "AsyncTask<Result>",
    "comment" : "\n     * Executes an AsyncTask on the given TaskRunner.\n     *\n     * @param taskRunner taskRunner to run this AsyncTask on.\n     * @return This instance of AsyncTask.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final AsyncTask<Result> executeWithTaskTraits(@TaskTraits int taskTraits)",
    "returnType" : "AsyncTask<Result>",
    "comment" : "\n     * Executes an AsyncTask with the given task traits. Provides no guarantees about sequencing or\n     * which thread it runs on.\n     *\n     * @param taskTraits traits which describe this AsyncTask.\n     * @return This instance of AsyncTask.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void finish(Result result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void takeOverAndroidThreadPool()", "private void postResultIfNotInvoked(Result result)", "private void postResult(Result result)", "public final int getStatus()", "public final int getUmaStatus()", "protected abstract Result doInBackground()", "protected void onPreExecute()", "protected abstract void onPostExecute(Result result)", "protected void onCancelled(Result result)", "protected void onCancelled()", "public final boolean isCancelled()", "public final boolean cancel(boolean mayInterruptIfRunning)", "public final Result get() throws InterruptedException, ExecutionException", "public final Result get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException", "private void executionPreamble()", "public final AsyncTask<Result> executeOnExecutor(Executor exec)", "public final AsyncTask<Result> executeOnTaskRunner(TaskRunner taskRunner)", "public final AsyncTask<Result> executeWithTaskTraits(@TaskTraits int taskTraits)", "private void finish(Result result)" ],
  "variableNames" : [ "TAG", "GET_STATUS_UMA_HISTOGRAM", "THREAD_POOL_EXECUTOR", "SERIAL_EXECUTOR", "STEAL_RUNNABLE_HANDLER", "mWorker", "mFuture", "mStatus", "mCancelled", "mTaskInvoked", "mIterationIdForTesting" ]
}