{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/security/keystore/KeyInfo.java",
  "packageName" : "android.security.keystore",
  "className" : "KeyInfo",
  "comment" : "\n * Information about a key from the <a href=\"{@docRoot}training/articles/keystore.html\">Android\n * Keystore system</a>. This class describes whether the key material is available in\n * plaintext outside of secure hardware, whether user authentication is required for using the key\n * and whether this requirement is enforced by secure hardware, the key's origin, what uses the key\n * is authorized for (e.g., only in {@code GCM} mode, or signing only), whether the key should be\n * encrypted at rest, the key's and validity start and end dates.\n *\n * <p>Instances of this class are immutable.\n *\n * <p><h3>Example: Symmetric Key</h3>\n * The following example illustrates how to obtain a {@code KeyInfo} describing the provided Android\n * Keystore {@link SecretKey}.\n * <pre>{@code\n * SecretKey key = ...; // Android Keystore key\n *\n * SecretKeyFactory factory = SecretKeyFactory.getInstance(key.getAlgorithm(), \"AndroidKeyStore\");\n * KeyInfo keyInfo;\n * try {\n *     keyInfo = (KeyInfo) factory.getKeySpec(key, KeyInfo.class);\n * } catch (InvalidKeySpecException e) {\n *     // Not an Android KeyStore key.\n * }}</pre>\n *\n * <p><h3>Example: Private Key</h3>\n * The following example illustrates how to obtain a {@code KeyInfo} describing the provided\n * Android KeyStore {@link PrivateKey}.\n * <pre>{@code\n * PrivateKey key = ...; // Android KeyStore key\n *\n * KeyFactory factory = KeyFactory.getInstance(key.getAlgorithm(), \"AndroidKeyStore\");\n * KeyInfo keyInfo;\n * try {\n *     keyInfo = factory.getKeySpec(key, KeyInfo.class);\n * } catch (InvalidKeySpecException e) {\n *     // Not an Android KeyStore key.\n * }}</pre>\n ",
  "variables" : [ {
    "name" : "mKeystoreAlias",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeySize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsideSecureHardware",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrigin",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyValidityStart",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyValidityForOriginationEnd",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyValidityForConsumptionEnd",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPurposes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncryptionPaddings",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSignaturePaddings",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDigests",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockModes",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationValidityDurationSeconds",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationRequirementEnforcedBySecureHardware",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationValidWhileOnBody",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrustedUserPresenceRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInvalidatedByBiometricEnrollment",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserConfirmationRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getKeystoreAlias()",
    "returnType" : "String",
    "comment" : "\n     * Gets the entry alias under which the key is stored in the {@code AndroidKeyStore}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInsideSecureHardware()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key resides inside secure hardware (e.g., Trusted Execution\n     * Environment (TEE) or Secure Element (SE)). Key material of such keys is available in\n     * plaintext only inside the secure hardware and is not exposed outside of it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOrigin()",
    "returnType" : "int",
    "comment" : "\n     * Gets the origin of the key. See {@link KeyProperties}.{@code ORIGIN} constants.\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public int getKeySize()",
    "returnType" : "int",
    "comment" : "\n     * Gets the size of the key in bits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getKeyValidityStart()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the time instant before which the key is not yet valid.\n     *\n     * @return instant or {@code null} if not restricted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getKeyValidityForConsumptionEnd()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the time instant after which the key is no long valid for decryption and verification.\n     *\n     * @return instant or {@code null} if not restricted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getKeyValidityForOriginationEnd()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the time instant after which the key is no long valid for encryption and signing.\n     *\n     * @return instant or {@code null} if not restricted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPurposes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the set of purposes (e.g., encrypt, decrypt, sign) for which the key can be used.\n     * Attempts to use the key for any other purpose will be rejected.\n     *\n     * <p>See {@link KeyProperties}.{@code PURPOSE} flags.\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public String[] getBlockModes()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the set of block modes (e.g., {@code GCM}, {@code CBC}) with which the key can be used\n     * when encrypting/decrypting. Attempts to use the key with any other block modes will be\n     * rejected.\n     *\n     * <p>See {@link KeyProperties}.{@code BLOCK_MODE} constants.\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public String[] getEncryptionPaddings()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the set of padding schemes (e.g., {@code PKCS7Padding}, {@code PKCS1Padding},\n     * {@code NoPadding}) with which the key can be used when encrypting/decrypting. Attempts to use\n     * the key with any other padding scheme will be rejected.\n     *\n     * <p>See {@link KeyProperties}.{@code ENCRYPTION_PADDING} constants.\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public String[] getSignaturePaddings()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the set of padding schemes (e.g., {@code PSS}, {@code PKCS#1}) with which the key\n     * can be used when signing/verifying. Attempts to use the key with any other padding scheme\n     * will be rejected.\n     *\n     * <p>See {@link KeyProperties}.{@code SIGNATURE_PADDING} constants.\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public String[] getDigests()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the set of digest algorithms (e.g., {@code SHA-256}, {@code SHA-384}) with which the key\n     * can be used.\n     *\n     * <p>See {@link KeyProperties}.{@code DIGEST} constants.\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public boolean isUserAuthenticationRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key is authorized to be used only if the user has been\n     * authenticated.\n     *\n     * <p>This authorization applies only to secret key and private key operations. Public key\n     * operations are not restricted.\n     *\n     * @see #getUserAuthenticationValidityDurationSeconds()\n     * @see KeyGenParameterSpec.Builder#setUserAuthenticationRequired(boolean)\n     * @see KeyProtection.Builder#setUserAuthenticationRequired(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUserConfirmationRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key is authorized to be used only for messages confirmed by the\n     * user.\n     *\n     * Confirmation is separate from user authentication (see\n     * {@link #isUserAuthenticationRequired()}). Keys can be created that require confirmation but\n     * not user authentication, or user authentication but not confirmation, or both. Confirmation\n     * verifies that some user with physical possession of the device has approved a displayed\n     * message. User authentication verifies that the correct user is present and has\n     * authenticated.\n     *\n     * <p>This authorization applies only to secret key and private key operations. Public key\n     * operations are not restricted.\n     *\n     * @see KeyGenParameterSpec.Builder#setUserConfirmationRequired(boolean)\n     * @see KeyProtection.Builder#setUserConfirmationRequired(boolean)\n     ",
    "links" : [ "#isUserAuthenticationRequired" ]
  }, {
    "name" : "public int getUserAuthenticationValidityDurationSeconds()",
    "returnType" : "int",
    "comment" : "\n     * Gets the duration of time (seconds) for which this key is authorized to be used after the\n     * user is successfully authenticated. This has effect only if user authentication is required\n     * (see {@link #isUserAuthenticationRequired()}).\n     *\n     * <p>This authorization applies only to secret key and private key operations. Public key\n     * operations are not restricted.\n     *\n     * @return duration in seconds or {@code -1} if authentication is required for every use of the\n     *         key.\n     *\n     * @see #isUserAuthenticationRequired()\n     ",
    "links" : [ "#isUserAuthenticationRequired" ]
  }, {
    "name" : "public int getUserAuthenticationType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the acceptable user authentication types for which this key can be authorized to be\n     * used. This has effect only if user authentication is required (see\n     * {@link #isUserAuthenticationRequired()}).\n     *\n     * <p>This authorization applies only to secret key and private key operations. Public key\n     * operations are not restricted.\n     *\n     * @return integer representing the accepted forms of user authentication for this key\n     *\n     * @see #isUserAuthenticationRequired()\n     ",
    "links" : [ "#isUserAuthenticationRequired" ]
  }, {
    "name" : "public boolean isUserAuthenticationRequirementEnforcedBySecureHardware()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the requirement that this key can only be used if the user has been\n     * authenticated is enforced by secure hardware (e.g., Trusted Execution Environment (TEE) or\n     * Secure Element (SE)).\n     *\n     * @see #isUserAuthenticationRequired()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUserAuthenticationValidWhileOnBody()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this key will become unusable when the device is removed from the\n     * user's body.  This is possible only for keys with a specified validity duration, and only on\n     * devices with an on-body sensor.  Always returns {@code false} on devices that lack an on-body\n     * sensor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInvalidatedByBiometricEnrollment()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key will be invalidated by enrollment of a new fingerprint or\n     * removal of all fingerprints.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTrustedUserPresenceRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key can only be only be used if a test for user presence has\n     * succeeded since Signature.initSign() has been called.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mKeystoreAlias", "mKeySize", "mInsideSecureHardware", "mOrigin", "mKeyValidityStart", "mKeyValidityForOriginationEnd", "mKeyValidityForConsumptionEnd", "mPurposes", "mEncryptionPaddings", "mSignaturePaddings", "mDigests", "mBlockModes", "mUserAuthenticationRequired", "mUserAuthenticationValidityDurationSeconds", "mUserAuthenticationType", "mUserAuthenticationRequirementEnforcedBySecureHardware", "mUserAuthenticationValidWhileOnBody", "mTrustedUserPresenceRequired", "mInvalidatedByBiometricEnrollment", "mUserConfirmationRequired" ],
  "methodNames" : [ "public String getKeystoreAlias()", "public boolean isInsideSecureHardware()", "public int getOrigin()", "public int getKeySize()", "public Date getKeyValidityStart()", "public Date getKeyValidityForConsumptionEnd()", "public Date getKeyValidityForOriginationEnd()", "public int getPurposes()", "public String[] getBlockModes()", "public String[] getEncryptionPaddings()", "public String[] getSignaturePaddings()", "public String[] getDigests()", "public boolean isUserAuthenticationRequired()", "public boolean isUserConfirmationRequired()", "public int getUserAuthenticationValidityDurationSeconds()", "public int getUserAuthenticationType()", "public boolean isUserAuthenticationRequirementEnforcedBySecureHardware()", "public boolean isUserAuthenticationValidWhileOnBody()", "public boolean isInvalidatedByBiometricEnrollment()", "public boolean isTrustedUserPresenceRequired()" ]
}