{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/parsing/PackageLite.java",
  "packageName" : "android.content.pm.parsing",
  "className" : "PackageLite",
  "comment" : "\n * Lightweight parsed details about a single package.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : " Name of the package as used to identify it in the system ",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "String",
    "comment" : "\n     * Path where this package was found on disk. For monolithic packages\n     * this is path to single base APK file; for cluster packages this is\n     * path to the cluster directory.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaseApkPath",
    "type" : "String",
    "comment" : " Path of base APK ",
    "links" : [ ]
  }, {
    "name" : "mSplitApkPaths",
    "type" : "String[]",
    "comment" : " Paths of any split APKs, ordered by parsed splitName ",
    "links" : [ ]
  }, {
    "name" : "mSplitNames",
    "type" : "String[]",
    "comment" : " Names of any split APKs, ordered by parsed splitName ",
    "links" : [ ]
  }, {
    "name" : "mUsesSplitNames",
    "type" : "String[]",
    "comment" : " Dependencies of any split APKs, ordered by parsed splitName ",
    "links" : [ ]
  }, {
    "name" : "mConfigForSplit",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBaseRequiredSplitTypes",
    "type" : "Set<String>",
    "comment" : " Indicate the types of the required split are necessary for base APK to run ",
    "links" : [ ]
  }, {
    "name" : "mRequiredSplitTypes",
    "type" : "Set<String>[]",
    "comment" : " Indicate the types of the required split are necessary for split APKs to run ",
    "links" : [ ]
  }, {
    "name" : "mSplitTypes",
    "type" : "Set<String>[]",
    "comment" : " Split type of any split APKs, ordered by parsed splitName ",
    "links" : [ ]
  }, {
    "name" : "mVersionCodeMajor",
    "type" : "int",
    "comment" : " Major and minor version number of this package ",
    "links" : [ ]
  }, {
    "name" : "mVersionCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetSdk",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBaseRevisionCode",
    "type" : "int",
    "comment" : " Revision code of base APK ",
    "links" : [ ]
  }, {
    "name" : "mSplitRevisionCodes",
    "type" : "int[]",
    "comment" : " Revision codes of any split APKs, ordered by parsed splitName ",
    "links" : [ ]
  }, {
    "name" : "mInstallLocation",
    "type" : "int",
    "comment" : "\n     * Indicate the install location of this package\n     *\n     * @see {@link PackageInfo#INSTALL_LOCATION_AUTO}\n     * @see {@link PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY}\n     * @see {@link PackageInfo#INSTALL_LOCATION_PREFER_EXTERNAL}\n     ",
    "links" : [ "android.content.pm.PackageInfo#INSTALL_LOCATION_PREFER_EXTERNAL", "android.content.pm.PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY", "android.content.pm.PackageInfo#INSTALL_LOCATION_AUTO" ]
  }, {
    "name" : "mVerifiers",
    "type" : "VerifierInfo[]",
    "comment" : " Information about a package verifiers as used during package verification ",
    "links" : [ ]
  }, {
    "name" : "mSigningDetails",
    "type" : "SigningDetails",
    "comment" : " Signing-related data of an application package ",
    "links" : [ ]
  }, {
    "name" : "mIsFeatureSplits",
    "type" : "boolean[]",
    "comment" : " Indicate whether any split APKs that are features. Ordered by splitName ",
    "links" : [ ]
  }, {
    "name" : "mIsolatedSplits",
    "type" : "boolean",
    "comment" : " Indicate whether each split should be load into their own Context objects ",
    "links" : [ ]
  }, {
    "name" : "mSplitRequired",
    "type" : "boolean",
    "comment" : "\n     * Indicate whether this package requires at least one split (either feature or resource)\n     * to be present in order to function\n     ",
    "links" : [ ]
  }, {
    "name" : "mCoreApp",
    "type" : "boolean",
    "comment" : " Indicate whether this app is coreApp ",
    "links" : [ ]
  }, {
    "name" : "mDebuggable",
    "type" : "boolean",
    "comment" : " Indicate whether this app can be debugged ",
    "links" : [ ]
  }, {
    "name" : "mMultiArch",
    "type" : "boolean",
    "comment" : " Indicate whether this app needs to be loaded into other applications' processes ",
    "links" : [ ]
  }, {
    "name" : "mUse32bitAbi",
    "type" : "boolean",
    "comment" : " Indicate whether the 32 bit version of the ABI should be used ",
    "links" : [ ]
  }, {
    "name" : "mExtractNativeLibs",
    "type" : "boolean",
    "comment" : " Indicate whether installer extracts native libraries ",
    "links" : [ ]
  }, {
    "name" : "mProfileableByShell",
    "type" : "boolean",
    "comment" : " Indicate whether this app is profileable by Shell ",
    "links" : [ ]
  }, {
    "name" : "mUseEmbeddedDex",
    "type" : "boolean",
    "comment" : "\n     * Indicate whether this package wants to run the dex within its APK but not extracted\n     * or locally compiled variants.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsSdkLibrary",
    "type" : "boolean",
    "comment" : "\n     * Indicates if this package is a sdk.\n     ",
    "links" : [ ]
  }, {
    "name" : "mArchivedPackage",
    "type" : "ArchivedPackageParcel",
    "comment" : "\n     * Archival install info.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public List<String> getAllApkPaths()",
    "returnType" : "List<String>",
    "comment" : "\n     * Return code path to the base APK file, and split APK files if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLongVersionCode()",
    "returnType" : "long",
    "comment" : "\n     * Return {@link #mVersionCode} and {@link #mVersionCodeMajor} combined together as a\n     * single long value. The {@link #mVersionCodeMajor} is placed in the upper 32 bits.\n     ",
    "links" : [ "#mVersionCodeMajor", "#mVersionCode" ]
  }, {
    "name" : "private boolean hasAnyRequiredSplitTypes()",
    "returnType" : "boolean",
    "comment" : "\n     * Return if requiredSplitTypes presents in the package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Name of the package as used to identify it in the system\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPath()",
    "returnType" : "String",
    "comment" : "\n     * Path where this package was found on disk. For monolithic packages\n     * this is path to single base APK file; for cluster packages this is\n     * path to the cluster directory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseApkPath()",
    "returnType" : "String",
    "comment" : "\n     * Path of base APK\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getSplitApkPaths()",
    "returnType" : "String[]",
    "comment" : "\n     * Paths of any split APKs, ordered by parsed splitName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getSplitNames()",
    "returnType" : "String[]",
    "comment" : "\n     * Names of any split APKs, ordered by parsed splitName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getUsesSplitNames()",
    "returnType" : "String[]",
    "comment" : "\n     * Dependencies of any split APKs, ordered by parsed splitName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getConfigForSplit()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getBaseRequiredSplitTypes()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Indicate the types of the required split are necessary for base APK to run\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String>[] getRequiredSplitTypes()",
    "returnType" : "Set<String>[]",
    "comment" : "\n     * Indicate the types of the required split are necessary for split APKs to run\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String>[] getSplitTypes()",
    "returnType" : "Set<String>[]",
    "comment" : "\n     * Split type of any split APKs, ordered by parsed splitName\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVersionCodeMajor()",
    "returnType" : "int",
    "comment" : "\n     * Major and minor version number of this package\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVersionCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTargetSdk()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBaseRevisionCode()",
    "returnType" : "int",
    "comment" : "\n     * Revision code of base APK\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getSplitRevisionCodes()",
    "returnType" : "int[]",
    "comment" : "\n     * Revision codes of any split APKs, ordered by parsed splitName\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInstallLocation()",
    "returnType" : "int",
    "comment" : "\n     * Indicate the install location of this package\n     *\n     * @see {@link PackageInfo#INSTALL_LOCATION_AUTO}\n     * @see {@link PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY}\n     * @see {@link PackageInfo#INSTALL_LOCATION_PREFER_EXTERNAL}\n     ",
    "links" : [ "android.content.pm.PackageInfo#INSTALL_LOCATION_PREFER_EXTERNAL", "android.content.pm.PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY", "android.content.pm.PackageInfo#INSTALL_LOCATION_AUTO" ]
  }, {
    "name" : "public VerifierInfo[] getVerifiers()",
    "returnType" : "VerifierInfo[]",
    "comment" : "\n     * Information about a package verifiers as used during package verification\n     ",
    "links" : [ ]
  }, {
    "name" : "public SigningDetails getSigningDetails()",
    "returnType" : "SigningDetails",
    "comment" : "\n     * Signing-related data of an application package\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean[] getIsFeatureSplits()",
    "returnType" : "boolean[]",
    "comment" : "\n     * Indicate whether any split APKs that are features. Ordered by splitName\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIsolatedSplits()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether each split should be load into their own Context objects\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSplitRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this package requires at least one split (either feature or resource)\n     * to be present in order to function\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCoreApp()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this app is coreApp\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDebuggable()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this app can be debugged\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMultiArch()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this app needs to be loaded into other applications' processes\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUse32bitAbi()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether the 32 bit version of the ABI should be used\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExtractNativeLibs()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether installer extracts native libraries\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProfileableByShell()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this app is profileable by Shell\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUseEmbeddedDex()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this package wants to run the dex within its APK but not extracted\n     * or locally compiled variants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIsSdkLibrary()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this package is a sdk.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArchivedPackageParcel getArchivedPackage()",
    "returnType" : "ArchivedPackageParcel",
    "comment" : "\n     * Archival install info.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public List<String> getAllApkPaths()", "public long getLongVersionCode()", "private boolean hasAnyRequiredSplitTypes()", "public String getPackageName()", "public String getPath()", "public String getBaseApkPath()", "public String[] getSplitApkPaths()", "public String[] getSplitNames()", "public String[] getUsesSplitNames()", "public String[] getConfigForSplit()", "public Set<String> getBaseRequiredSplitTypes()", "public Set<String>[] getRequiredSplitTypes()", "public Set<String>[] getSplitTypes()", "public int getVersionCodeMajor()", "public int getVersionCode()", "public int getTargetSdk()", "public int getBaseRevisionCode()", "public int[] getSplitRevisionCodes()", "public int getInstallLocation()", "public VerifierInfo[] getVerifiers()", "public SigningDetails getSigningDetails()", "public boolean[] getIsFeatureSplits()", "public boolean isIsolatedSplits()", "public boolean isSplitRequired()", "public boolean isCoreApp()", "public boolean isDebuggable()", "public boolean isMultiArch()", "public boolean isUse32bitAbi()", "public boolean isExtractNativeLibs()", "public boolean isProfileableByShell()", "public boolean isUseEmbeddedDex()", "public boolean isIsSdkLibrary()", "public ArchivedPackageParcel getArchivedPackage()", "private void __metadata()" ],
  "variableNames" : [ "mPackageName", "mPath", "mBaseApkPath", "mSplitApkPaths", "mSplitNames", "mUsesSplitNames", "mConfigForSplit", "mBaseRequiredSplitTypes", "mRequiredSplitTypes", "mSplitTypes", "mVersionCodeMajor", "mVersionCode", "mTargetSdk", "mBaseRevisionCode", "mSplitRevisionCodes", "mInstallLocation", "mVerifiers", "mSigningDetails", "mIsFeatureSplits", "mIsolatedSplits", "mSplitRequired", "mCoreApp", "mDebuggable", "mMultiArch", "mUse32bitAbi", "mExtractNativeLibs", "mProfileableByShell", "mUseEmbeddedDex", "mIsSdkLibrary", "mArchivedPackage" ]
}