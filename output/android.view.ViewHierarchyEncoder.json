{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ViewHierarchyEncoder.java",
  "packageName" : "android.view",
  "className" : "ViewHierarchyEncoder",
  "comment" : "\n * {@link ViewHierarchyEncoder} is a serializer that is tailored towards writing out\n * view hierarchies (the view tree, along with the properties for each view) to a stream.\n *\n * It is typically used as follows:\n * <pre>\n *   ViewHierarchyEncoder e = new ViewHierarchyEncoder();\n *\n *   for (View view : views) {\n *      e.beginObject(view);\n *      e.addProperty(\"prop1\", value);\n *      ...\n *      e.endObject();\n *   }\n *\n *   // repeat above snippet for each view, finally end with:\n *   e.endStream();\n * </pre>\n *\n * <p>On the stream, a snippet such as the above gets encoded as a series of Map's (one\n * corresponding to each view) with the property name as the key and the property value\n * as the value.\n *\n * <p>Since the property names are practically the same across all views, rather than using\n * the property name directly as the key, we use a short integer id corresponding to each\n * property name as the key. A final map is added at the end which contains the mapping\n * from the integer to its property name.\n *\n * <p>A value is encoded as a single byte type identifier followed by the encoding of the\n * value. Only primitive types are supported as values, in addition to the Map type.\n *\n * @hide\n ",
  "links" : [ "android.view.ViewHierarchyEncoder" ],
  "variables" : [ {
    "name" : "SIG_BOOLEAN",
    "type" : "byte",
    "comment" : " Prefixes for simple primitives. These match the JNI definitions.",
    "links" : [ ]
  }, {
    "name" : "SIG_BYTE",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIG_SHORT",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIG_INT",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIG_LONG",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIG_FLOAT",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIG_DOUBLE",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIG_STRING",
    "type" : "byte",
    "comment" : " Prefixes for some commonly used objects",
    "links" : [ ]
  }, {
    "name" : "SIG_MAP",
    "type" : "byte",
    "comment" : " a map with an short key",
    "links" : [ ]
  }, {
    "name" : "SIG_END_MAP",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStream",
    "type" : "DataOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPropertyNames",
    "type" : "Map<String, Short>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPropertyId",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharset",
    "type" : "Charset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserPropertiesEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setUserPropertiesEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void beginObject(@NonNull Object o)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endObject()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endStream()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addProperty(@NonNull String name, boolean v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addProperty(@NonNull String name, short s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addProperty(@NonNull String name, int v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addProperty(@NonNull String name, float v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addProperty(@NonNull String name, @Nullable String s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addUserProperty(@NonNull String name, @Nullable String s)",
    "returnType" : "void",
    "comment" : "\n     * Encodes a user defined property if they are allowed to be encoded\n     *\n     * @see #setUserPropertiesEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addPropertyKey(@NonNull String name)",
    "returnType" : "void",
    "comment" : "\n     * Writes the given name as the property name, and leaves it to the callee\n     * to fill in value for this property.\n     ",
    "links" : [ ]
  }, {
    "name" : "private short createPropertyIndex(@NonNull String name)",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startPropertyMap()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void endPropertyMap()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeBoolean(boolean v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeShort(short s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeInt(int i)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeFloat(float v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeString(@Nullable String s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setUserPropertiesEnabled(boolean enabled)", "public void beginObject(@NonNull Object o)", "public void endObject()", "public void endStream()", "public void addProperty(@NonNull String name, boolean v)", "public void addProperty(@NonNull String name, short s)", "public void addProperty(@NonNull String name, int v)", "public void addProperty(@NonNull String name, float v)", "public void addProperty(@NonNull String name, @Nullable String s)", "public void addUserProperty(@NonNull String name, @Nullable String s)", "public void addPropertyKey(@NonNull String name)", "private short createPropertyIndex(@NonNull String name)", "private void startPropertyMap()", "private void endPropertyMap()", "private void writeBoolean(boolean v)", "private void writeShort(short s)", "private void writeInt(int i)", "private void writeFloat(float v)", "private void writeString(@Nullable String s)" ],
  "variableNames" : [ "SIG_BOOLEAN", "SIG_BYTE", "SIG_SHORT", "SIG_INT", "SIG_LONG", "SIG_FLOAT", "SIG_DOUBLE", "SIG_STRING", "SIG_MAP", "SIG_END_MAP", "mStream", "mPropertyNames", "mPropertyId", "mCharset", "mUserPropertiesEnabled" ]
}