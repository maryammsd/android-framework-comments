{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/AppComponentFactory.java",
  "packageName" : "android.app",
  "className" : "AppComponentFactory",
  "comment" : "\n * Interface used to control the instantiation of manifest elements.\n *\n * @see #instantiateApplication\n * @see #instantiateActivity\n * @see #instantiateClassLoader\n * @see #instantiateService\n * @see #instantiateReceiver\n * @see #instantiateProvider\n ",
  "variables" : [ {
    "name" : "DEFAULT",
    "type" : "AppComponentFactory",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ClassLoader instantiateClassLoader(@NonNull ClassLoader cl, @NonNull ApplicationInfo aInfo)",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Selects the class loader which will be used by the platform to instantiate app components.\n     * <p>\n     * The default implementation of this method returns the {@code cl} parameter unchanged.\n     * Applications can override this method to set up a custom class loader or a custom class\n     * loader hierarchy and return it to the platform.\n     * <p>\n     * The method is a hook invoked before any application components are instantiated or the\n     * application Context is initialized. It is intended to allow the application's classes to\n     * be loaded from a different source than the base/split APK(s).\n     * <p>\n     * The default class loader {@code cl} is created by the platform and used to load the\n     * application's base or split APK(s). Its parent is typically the boot class loader, unless\n     * running under instrumentation. Its classname is configurable using the\n     * {@link android.R.attr#classLoader} manifest attribute.\n     *\n     * @param cl        The default class loader created by the platform.\n     * @param aInfo     Information about the application being loaded.\n     ",
    "links" : [ "android.R.attr#classLoader" ]
  }, {
    "name" : "public Application instantiateApplication(@NonNull ClassLoader cl, @NonNull String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException",
    "returnType" : "Application",
    "comment" : "\n     * Allows application to override the creation of the application object. This can be used to\n     * perform things such as dependency injection or class loader changes to these\n     * classes.\n     * <p>\n     * This method is only intended to provide a hook for instantiation. It does not provide\n     * earlier access to the Application object. The returned object will not be initialized\n     * as a Context yet and should not be used to interact with other android APIs.\n     *\n     * @param cl        The default classloader to use for instantiation.\n     * @param className The class to be instantiated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Activity instantiateActivity(@NonNull ClassLoader cl, @NonNull String className, @Nullable Intent intent) throws InstantiationException, IllegalAccessException, ClassNotFoundException",
    "returnType" : "Activity",
    "comment" : "\n     * Allows application to override the creation of activities. This can be used to\n     * perform things such as dependency injection or class loader changes to these\n     * classes.\n     * <p>\n     * This method is only intended to provide a hook for instantiation. It does not provide\n     * earlier access to the Activity object. The returned object will not be initialized\n     * as a Context yet and should not be used to interact with other android APIs.\n     *\n     * @param cl        The default classloader to use for instantiation.\n     * @param className The class to be instantiated.\n     * @param intent    Intent creating the class.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BroadcastReceiver instantiateReceiver(@NonNull ClassLoader cl, @NonNull String className, @Nullable Intent intent) throws InstantiationException, IllegalAccessException, ClassNotFoundException",
    "returnType" : "BroadcastReceiver",
    "comment" : "\n     * Allows application to override the creation of receivers. This can be used to\n     * perform things such as dependency injection or class loader changes to these\n     * classes.\n     *\n     * @param cl        The default classloader to use for instantiation.\n     * @param className The class to be instantiated.\n     * @param intent    Intent creating the class.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Service instantiateService(@NonNull ClassLoader cl, @NonNull String className, @Nullable Intent intent) throws InstantiationException, IllegalAccessException, ClassNotFoundException",
    "returnType" : "Service",
    "comment" : "\n     * Allows application to override the creation of services. This can be used to\n     * perform things such as dependency injection or class loader changes to these\n     * classes.\n     * <p>\n     * This method is only intended to provide a hook for instantiation. It does not provide\n     * earlier access to the Service object. The returned object will not be initialized\n     * as a Context yet and should not be used to interact with other android APIs.\n     *\n     * @param cl        The default classloader to use for instantiation.\n     * @param className The class to be instantiated.\n     * @param intent    Intent creating the class.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentProvider instantiateProvider(@NonNull ClassLoader cl, @NonNull String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException",
    "returnType" : "ContentProvider",
    "comment" : "\n     * Allows application to override the creation of providers. This can be used to\n     * perform things such as dependency injection or class loader changes to these\n     * classes.\n     * <p>\n     * This method is only intended to provide a hook for instantiation. It does not provide\n     * earlier access to the ContentProvider object. The returned object will not be initialized\n     * with a Context yet and should not be used to interact with other android APIs.\n     *\n     * @param cl        The default classloader to use for instantiation.\n     * @param className The class to be instantiated.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEFAULT" ],
  "methodNames" : [ "public ClassLoader instantiateClassLoader(@NonNull ClassLoader cl, @NonNull ApplicationInfo aInfo)", "public Application instantiateApplication(@NonNull ClassLoader cl, @NonNull String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException", "public Activity instantiateActivity(@NonNull ClassLoader cl, @NonNull String className, @Nullable Intent intent) throws InstantiationException, IllegalAccessException, ClassNotFoundException", "public BroadcastReceiver instantiateReceiver(@NonNull ClassLoader cl, @NonNull String className, @Nullable Intent intent) throws InstantiationException, IllegalAccessException, ClassNotFoundException", "public Service instantiateService(@NonNull ClassLoader cl, @NonNull String className, @Nullable Intent intent) throws InstantiationException, IllegalAccessException, ClassNotFoundException", "public ContentProvider instantiateProvider(@NonNull ClassLoader cl, @NonNull String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException" ]
}