{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/AtomicReference.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "AtomicReference",
  "comment" : "\n * An object reference that may be updated atomically.  See the {@link\n * VarHandle} specification for descriptions of the properties of\n * atomic accesses.\n * @since 1.5\n * @author Doug Lea\n * @param <V> The type of object referred to by this reference\n ",
  "links" : [ "java.lang.invoke.VarHandle" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALUE",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "V",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final V get()",
    "returnType" : "V",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     *\n     * @return the current value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public final void set(V newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setVolatile}.\n     *\n     * @param newValue the new value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setVolatile" ]
  }, {
    "name" : "public final void lazySet(V newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setRelease}.\n     *\n     * @param newValue the new value\n     * @since 1.6\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setRelease" ]
  }, {
    "name" : "public final boolean compareAndSet(V expectedValue, V newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#compareAndSet}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful. False return indicates that\n     * the actual value was not equal to the expected value.\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final boolean weakCompareAndSet(V expectedValue, V newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#weakCompareAndSetPlain}.\n     *\n     * @deprecated This method has plain memory effects but the method\n     * name implies volatile memory effects (see methods such as\n     * {@link #compareAndExchange} and {@link #compareAndSet}).  To avoid\n     * confusion over plain or volatile memory effects it is recommended that\n     * the method {@link #weakCompareAndSetPlain} be used instead.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @see #weakCompareAndSetPlain\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetPlain", "#compareAndExchange", "#compareAndSet", "#weakCompareAndSetPlain" ]
  }, {
    "name" : "public final boolean weakCompareAndSetPlain(V expectedValue, V newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#weakCompareAndSetPlain}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetPlain" ]
  }, {
    "name" : "public final V getAndSet(V newValue)",
    "returnType" : "V",
    "comment" : "\n     * Atomically sets the value to {@code newValue} and returns the old value,\n     * with memory effects as specified by {@link VarHandle#getAndSet}.\n     *\n     * @param newValue the new value\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndSet" ]
  }, {
    "name" : "public final V getAndUpdate(UnaryOperator<V> updateFunction)",
    "returnType" : "V",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function, returning the previous value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final V updateAndGet(UnaryOperator<V> updateFunction)",
    "returnType" : "V",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function, returning the updated value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final V getAndAccumulate(V x, BinaryOperator<V> accumulatorFunction)",
    "returnType" : "V",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function to the current and given values,\n     * returning the previous value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value as its first argument, and the\n     * given update as the second argument.\n     *\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final V accumulateAndGet(V x, BinaryOperator<V> accumulatorFunction)",
    "returnType" : "V",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function to the current and given values,\n     * returning the updated value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value as its first argument, and the\n     * given update as the second argument.\n     *\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the String representation of the current value.\n     * @return the String representation of the current value\n     ",
    "links" : [ ]
  }, {
    "name" : "public final V getPlain()",
    "returnType" : "V",
    "comment" : "\n     * Returns the current value, with memory semantics of reading as\n     * if the variable was declared non-{@code volatile}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setPlain(V newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue}, with memory semantics\n     * of setting as if the variable was declared non-{@code volatile}\n     * and non-{@code final}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final V getOpaque()",
    "returnType" : "V",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getOpaque}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getOpaque" ]
  }, {
    "name" : "public final void setOpaque(V newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setOpaque}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setOpaque" ]
  }, {
    "name" : "public final V getAcquire()",
    "returnType" : "V",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getAcquire}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAcquire" ]
  }, {
    "name" : "public final void setRelease(V newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setRelease}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setRelease" ]
  }, {
    "name" : "public final V compareAndExchange(V expectedValue, V newValue)",
    "returnType" : "V",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchange}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchange" ]
  }, {
    "name" : "public final V compareAndExchangeAcquire(V expectedValue, V newValue)",
    "returnType" : "V",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchangeAcquire}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchangeAcquire" ]
  }, {
    "name" : "public final V compareAndExchangeRelease(V expectedValue, V newValue)",
    "returnType" : "V",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchangeRelease}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchangeRelease" ]
  }, {
    "name" : "public final boolean weakCompareAndSetVolatile(V expectedValue, V newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSet}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSet" ]
  }, {
    "name" : "public final boolean weakCompareAndSetAcquire(V expectedValue, V newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSetAcquire}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetAcquire" ]
  }, {
    "name" : "public final boolean weakCompareAndSetRelease(V expectedValue, V newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSetRelease}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetRelease" ]
  } ],
  "methodNames" : [ "public final V get()", "public final void set(V newValue)", "public final void lazySet(V newValue)", "public final boolean compareAndSet(V expectedValue, V newValue)", "public final boolean weakCompareAndSet(V expectedValue, V newValue)", "public final boolean weakCompareAndSetPlain(V expectedValue, V newValue)", "public final V getAndSet(V newValue)", "public final V getAndUpdate(UnaryOperator<V> updateFunction)", "public final V updateAndGet(UnaryOperator<V> updateFunction)", "public final V getAndAccumulate(V x, BinaryOperator<V> accumulatorFunction)", "public final V accumulateAndGet(V x, BinaryOperator<V> accumulatorFunction)", "public String toString()", "public final V getPlain()", "public final void setPlain(V newValue)", "public final V getOpaque()", "public final void setOpaque(V newValue)", "public final V getAcquire()", "public final void setRelease(V newValue)", "public final V compareAndExchange(V expectedValue, V newValue)", "public final V compareAndExchangeAcquire(V expectedValue, V newValue)", "public final V compareAndExchangeRelease(V expectedValue, V newValue)", "public final boolean weakCompareAndSetVolatile(V expectedValue, V newValue)", "public final boolean weakCompareAndSetAcquire(V expectedValue, V newValue)", "public final boolean weakCompareAndSetRelease(V expectedValue, V newValue)" ],
  "variableNames" : [ "serialVersionUID", "VALUE", "value" ]
}