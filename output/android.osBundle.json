{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/Bundle.java",
  "packageName" : "android.os",
  "className" : "Bundle",
  "comment" : "\n * A mapping from String keys to various {@link Parcelable} values.\n *\n * @see PersistableBundle\n ",
  "variables" : [ {
    "name" : "FLAG_HAS_FDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_HAS_FDS_KNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_ALLOW_FDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STRIPPED",
    "type" : "Bundle",
    "comment" : "\n     * Special extras used to denote extras have been stripped off.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Bundle>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void maybePrefillHasFds()",
    "returnType" : "void",
    "comment" : "\n     * If {@link #mParcelledData} is not null, copy the HAS FDS bit from it because it's fast.\n     * Otherwise (if {@link #mParcelledData} is already null), leave {@link #FLAG_HAS_FDS_KNOWN}\n     * unset, because scanning a map is slower.  We'll do it lazily in\n     * {@link #hasFileDescriptors()}.\n     ",
    "links" : [ "#mParcelledData", "#mParcelledData", "#FLAG_HAS_FDS_KNOWN", "#hasFileDescriptors" ]
  }, {
    "name" : "public static Bundle forPair(String key, String value)",
    "returnType" : "Bundle",
    "comment" : "\n     * Make a Bundle for a single key/value pair.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClassLoader(ClassLoader loader)",
    "returnType" : "void",
    "comment" : "\n     * Changes the ClassLoader this Bundle uses when instantiating objects.\n     *\n     * @param loader An explicit ClassLoader to use when instantiating objects\n     * inside of the Bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClassLoader getClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Return the ClassLoader currently associated with this Bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setAllowFds(boolean allowFds)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setDefusable(boolean defusable)",
    "returnType" : "void",
    "comment" : "\n     * Mark if this Bundle is okay to \"defuse.\" That is, it's okay for system\n     * processes to ignore any {@link BadParcelableException} encountered when\n     * unparceling it, leaving an empty bundle in its place.\n     * <p>\n     * This should <em>only</em> be set when the Bundle reaches its final\n     * destination, otherwise a system process may clobber contents that were\n     * destined for an app that could have unparceled them.\n     *\n     * @hide\n     ",
    "links" : [ "BadParcelableException" ]
  }, {
    "name" : "public static Bundle setDefusable(Bundle bundle, boolean defusable)",
    "returnType" : "Bundle",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Clones the current Bundle. The internal map is cloned, but the keys and\n     * values to which it refers are copied by reference.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle deepCopy()",
    "returnType" : "Bundle",
    "comment" : "\n     * Make a deep copy of the given bundle.  Traverses into inner containers and copies\n     * them as well, so they are not shared across bundles.  Will traverse in to\n     * {@link Bundle}, {@link PersistableBundle}, {@link ArrayList}, and all types of\n     * primitive arrays.  Other types of objects (such as Parcelable or Serializable)\n     * are referenced as-is and not copied in any way.\n     ",
    "links" : [ "Bundle", "PersistableBundle", "ArrayList" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all elements from the mapping of this Bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(String key)",
    "returnType" : "void",
    "comment" : "\n     * Removes any entry with the given key from the mapping of this Bundle.\n     *\n     * @param key a String key\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putAll(Bundle bundle)",
    "returnType" : "void",
    "comment" : "\n     * Inserts all mappings from the given Bundle into this Bundle.\n     *\n     * @param bundle a Bundle\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSize()",
    "returnType" : "int",
    "comment" : "\n     * Return the size of {@link #mParcelledData} in bytes if available, otherwise {@code 0}.\n     *\n     * @hide\n     ",
    "links" : [ "#mParcelledData" ]
  }, {
    "name" : "public boolean hasFileDescriptors()",
    "returnType" : "boolean",
    "comment" : "\n     * Reports whether the bundle contains any parcelled file descriptors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle filterValues()",
    "returnType" : "Bundle",
    "comment" : "\n     * Filter values in Bundle to only basic types.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putObject(@Nullable String key, @Nullable Object value)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void putByte(@Nullable String key, byte value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a byte value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value a byte\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putChar(@Nullable String key, char value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a char value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value a char\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putShort(@Nullable String key, short value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a short value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value a short\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putFloat(@Nullable String key, float value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a float value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value a float\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putCharSequence(@Nullable String key, @Nullable CharSequence value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a CharSequence value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a CharSequence, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putParcelable(@Nullable String key, @Nullable Parcelable value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a Parcelable value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a Parcelable object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putSize(@Nullable String key, @Nullable Size value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a Size value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a Size object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putSizeF(@Nullable String key, @Nullable SizeF value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a SizeF value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a SizeF object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putParcelableArray(@Nullable String key, @Nullable Parcelable[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an array of Parcelable values into the mapping of this Bundle,\n     * replacing any existing value for the given key.  Either key or value may\n     * be null.\n     *\n     * @param key a String, or null\n     * @param value an array of Parcelable objects, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putParcelableArrayList(@Nullable String key, @Nullable ArrayList<? extends Parcelable> value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a List of Parcelable values into the mapping of this Bundle,\n     * replacing any existing value for the given key.  Either key or value may\n     * be null.\n     *\n     * @param key a String, or null\n     * @param value an ArrayList of Parcelable objects, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putParcelableList(String key, List<? extends Parcelable> value)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void putSparseParcelableArray(@Nullable String key, @Nullable SparseArray<? extends Parcelable> value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a SparceArray of Parcelable values into the mapping of this\n     * Bundle, replacing any existing value for the given key.  Either key\n     * or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a SparseArray of Parcelable objects, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putIntegerArrayList(@Nullable String key, @Nullable ArrayList<Integer> value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an ArrayList<Integer> value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value an ArrayList<Integer> object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putStringArrayList(@Nullable String key, @Nullable ArrayList<String> value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an ArrayList<String> value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value an ArrayList<String> object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putCharSequenceArrayList(@Nullable String key, @Nullable ArrayList<CharSequence> value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an ArrayList<CharSequence> value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value an ArrayList<CharSequence> object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putSerializable(@Nullable String key, @Nullable Serializable value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a Serializable value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a Serializable object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putByteArray(@Nullable String key, @Nullable byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a byte array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a byte array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putShortArray(@Nullable String key, @Nullable short[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a short array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a short array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putCharArray(@Nullable String key, @Nullable char[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a char array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a char array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putFloatArray(@Nullable String key, @Nullable float[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a float array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a float array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putCharSequenceArray(@Nullable String key, @Nullable CharSequence[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a CharSequence array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a CharSequence array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putBundle(@Nullable String key, @Nullable Bundle value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a Bundle value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a Bundle object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putBinder(@Nullable String key, @Nullable IBinder value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an {@link IBinder} value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * <p class=\"note\">You should be very careful when using this function.  In many\n     * places where Bundles are used (such as inside of Intent objects), the Bundle\n     * can live longer inside of another process than the process that had originally\n     * created it.  In that case, the IBinder you supply here will become invalid\n     * when your process goes away, and no longer usable, even if a new process is\n     * created for you later on.</p>\n     *\n     * @param key a String, or null\n     * @param value an IBinder object, or null\n     ",
    "links" : [ "IBinder" ]
  }, {
    "name" : "public void putIBinder(@Nullable String key, @Nullable IBinder value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an IBinder value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value an IBinder object, or null\n     *\n     * @deprecated\n     * @hide This is the old name of the function.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getByte(String key)",
    "returnType" : "byte",
    "comment" : "\n     * Returns the value associated with the given key, or (byte) 0 if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a byte value\n     ",
    "links" : [ ]
  }, {
    "name" : "public Byte getByte(String key, byte defaultValue)",
    "returnType" : "Byte",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a byte value\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getChar(String key)",
    "returnType" : "char",
    "comment" : "\n     * Returns the value associated with the given key, or (char) 0 if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a char value\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getChar(String key, char defaultValue)",
    "returnType" : "char",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a char value\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getShort(String key)",
    "returnType" : "short",
    "comment" : "\n     * Returns the value associated with the given key, or (short) 0 if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a short value\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getShort(String key, short defaultValue)",
    "returnType" : "short",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a short value\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFloat(String key)",
    "returnType" : "float",
    "comment" : "\n     * Returns the value associated with the given key, or 0.0f if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a float value\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFloat(String key, float defaultValue)",
    "returnType" : "float",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a float value\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getCharSequence(@Nullable String key)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a CharSequence value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getCharSequence(@Nullable String key, CharSequence defaultValue)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key or if a null\n     * value is explicitly associatd with the given key.\n     *\n     * @param key a String, or null\n     * @param defaultValue Value to return if key does not exist or if a null\n     *     value is associated with the given key.\n     * @return the CharSequence value associated with the given key, or defaultValue\n     *     if no valid CharSequence object is currently mapped to that key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Size getSize(@Nullable String key)",
    "returnType" : "Size",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a Size value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public SizeF getSizeF(@Nullable String key)",
    "returnType" : "SizeF",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a Size value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getBundle(@Nullable String key)",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a Bundle value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getParcelable(@Nullable String key)",
    "returnType" : "T",
    "comment" : "\n     * Returns the value associated with the given key, or {@code null} if\n     * no mapping of the desired type exists for the given key or a {@code null}\n     * value is explicitly associated with the key.\n     *\n     * <p><b>Note: </b> if the expected value is not a class provided by the Android platform,\n     * you must call {@link #setClassLoader(ClassLoader)} with the proper {@link ClassLoader} first.\n     * Otherwise, this method might throw an exception or return {@code null}.\n     *\n     * @param key a String, or {@code null}\n     * @return a Parcelable value, or {@code null}\n     ",
    "links" : [ "#setClassLoader", "ClassLoader" ]
  }, {
    "name" : "public Parcelable[] getParcelableArray(@Nullable String key)",
    "returnType" : "Parcelable[]",
    "comment" : "\n     * Returns the value associated with the given key, or {@code null} if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * <p><b>Note: </b> if the expected value is not a class provided by the Android platform,\n     * you must call {@link #setClassLoader(ClassLoader)} with the proper {@link ClassLoader} first.\n     * Otherwise, this method might throw an exception or return {@code null}.\n     *\n     * @param key a String, or {@code null}\n     * @return a Parcelable[] value, or {@code null}\n     ",
    "links" : [ "#setClassLoader", "ClassLoader" ]
  }, {
    "name" : "public ArrayList<T> getParcelableArrayList(@Nullable String key)",
    "returnType" : "ArrayList<T>",
    "comment" : "\n     * Returns the value associated with the given key, or {@code null} if\n     * no mapping of the desired type exists for the given key or a {@code null}\n     * value is explicitly associated with the key.\n     *\n     * <p><b>Note: </b> if the expected value is not a class provided by the Android platform,\n     * you must call {@link #setClassLoader(ClassLoader)} with the proper {@link ClassLoader} first.\n     * Otherwise, this method might throw an exception or return {@code null}.\n     *\n     * @param key a String, or {@code null}\n     * @return an ArrayList<T> value, or {@code null}\n     ",
    "links" : [ "#setClassLoader", "ClassLoader" ]
  }, {
    "name" : "public SparseArray<T> getSparseParcelableArray(@Nullable String key)",
    "returnType" : "SparseArray<T>",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     *\n     * @return a SparseArray of T values, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public Serializable getSerializable(@Nullable String key)",
    "returnType" : "Serializable",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a Serializable value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<Integer> getIntegerArrayList(@Nullable String key)",
    "returnType" : "ArrayList<Integer>",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return an ArrayList<String> value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<String> getStringArrayList(@Nullable String key)",
    "returnType" : "ArrayList<String>",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return an ArrayList<String> value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<CharSequence> getCharSequenceArrayList(@Nullable String key)",
    "returnType" : "ArrayList<CharSequence>",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return an ArrayList<CharSequence> value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getByteArray(@Nullable String key)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a byte[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public short[] getShortArray(@Nullable String key)",
    "returnType" : "short[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a short[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public char[] getCharArray(@Nullable String key)",
    "returnType" : "char[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a char[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public float[] getFloatArray(@Nullable String key)",
    "returnType" : "float[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a float[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence[] getCharSequenceArray(@Nullable String key)",
    "returnType" : "CharSequence[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a CharSequence[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getBinder(@Nullable String key)",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return an IBinder value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getIBinder(@Nullable String key)",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return an IBinder value, or null\n     *\n     * @deprecated\n     * @hide This is the old name of the function.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Report the nature of this Parcelable's contents\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Writes the Bundle contents to a Parcel, typically in order for\n     * it to be passed through an IBinder connection.\n     * @param parcel The parcel to copy this bundle to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * Reads the Parcel contents into this Bundle, typically in order for\n     * it to be passed through an IBinder connection.\n     * @param parcel The parcel to overwrite this bundle from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized String toShortString()",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "FLAG_HAS_FDS", "FLAG_HAS_FDS_KNOWN", "FLAG_ALLOW_FDS", "EMPTY", "STRIPPED", "CREATOR" ],
  "methodNames" : [ "private void maybePrefillHasFds()", "public static Bundle forPair(String key, String value)", "public void setClassLoader(ClassLoader loader)", "public ClassLoader getClassLoader()", "public boolean setAllowFds(boolean allowFds)", "public void setDefusable(boolean defusable)", "public static Bundle setDefusable(Bundle bundle, boolean defusable)", "public Object clone()", "public Bundle deepCopy()", "public void clear()", "public void remove(String key)", "public void putAll(Bundle bundle)", "public int getSize()", "public boolean hasFileDescriptors()", "public Bundle filterValues()", "public void putObject(@Nullable String key, @Nullable Object value)", "public void putByte(@Nullable String key, byte value)", "public void putChar(@Nullable String key, char value)", "public void putShort(@Nullable String key, short value)", "public void putFloat(@Nullable String key, float value)", "public void putCharSequence(@Nullable String key, @Nullable CharSequence value)", "public void putParcelable(@Nullable String key, @Nullable Parcelable value)", "public void putSize(@Nullable String key, @Nullable Size value)", "public void putSizeF(@Nullable String key, @Nullable SizeF value)", "public void putParcelableArray(@Nullable String key, @Nullable Parcelable[] value)", "public void putParcelableArrayList(@Nullable String key, @Nullable ArrayList<? extends Parcelable> value)", "public void putParcelableList(String key, List<? extends Parcelable> value)", "public void putSparseParcelableArray(@Nullable String key, @Nullable SparseArray<? extends Parcelable> value)", "public void putIntegerArrayList(@Nullable String key, @Nullable ArrayList<Integer> value)", "public void putStringArrayList(@Nullable String key, @Nullable ArrayList<String> value)", "public void putCharSequenceArrayList(@Nullable String key, @Nullable ArrayList<CharSequence> value)", "public void putSerializable(@Nullable String key, @Nullable Serializable value)", "public void putByteArray(@Nullable String key, @Nullable byte[] value)", "public void putShortArray(@Nullable String key, @Nullable short[] value)", "public void putCharArray(@Nullable String key, @Nullable char[] value)", "public void putFloatArray(@Nullable String key, @Nullable float[] value)", "public void putCharSequenceArray(@Nullable String key, @Nullable CharSequence[] value)", "public void putBundle(@Nullable String key, @Nullable Bundle value)", "public void putBinder(@Nullable String key, @Nullable IBinder value)", "public void putIBinder(@Nullable String key, @Nullable IBinder value)", "public byte getByte(String key)", "public Byte getByte(String key, byte defaultValue)", "public char getChar(String key)", "public char getChar(String key, char defaultValue)", "public short getShort(String key)", "public short getShort(String key, short defaultValue)", "public float getFloat(String key)", "public float getFloat(String key, float defaultValue)", "public CharSequence getCharSequence(@Nullable String key)", "public CharSequence getCharSequence(@Nullable String key, CharSequence defaultValue)", "public Size getSize(@Nullable String key)", "public SizeF getSizeF(@Nullable String key)", "public Bundle getBundle(@Nullable String key)", "public T getParcelable(@Nullable String key)", "public Parcelable[] getParcelableArray(@Nullable String key)", "public ArrayList<T> getParcelableArrayList(@Nullable String key)", "public SparseArray<T> getSparseParcelableArray(@Nullable String key)", "public Serializable getSerializable(@Nullable String key)", "public ArrayList<Integer> getIntegerArrayList(@Nullable String key)", "public ArrayList<String> getStringArrayList(@Nullable String key)", "public ArrayList<CharSequence> getCharSequenceArrayList(@Nullable String key)", "public byte[] getByteArray(@Nullable String key)", "public short[] getShortArray(@Nullable String key)", "public char[] getCharArray(@Nullable String key)", "public float[] getFloatArray(@Nullable String key)", "public CharSequence[] getCharSequenceArray(@Nullable String key)", "public IBinder getBinder(@Nullable String key)", "public IBinder getIBinder(@Nullable String key)", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public void readFromParcel(Parcel parcel)", "public synchronized String toString()", "public synchronized String toShortString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)" ]
}