{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/assist/AssistStructure.java",
  "packageName" : "android.app.assist",
  "className" : "ViewNode",
  "comment" : "\n     * Describes a single view in the assist data.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TEXT_COLOR_UNDEFINED",
    "type" : "int",
    "comment" : "\n         * Magic value for text color that has not been defined, which is very unlikely\n         * to be confused with a real text color.\n         ",
    "links" : [ ]
  }, {
    "name" : "TEXT_STYLE_BOLD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEXT_STYLE_ITALIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEXT_STYLE_UNDERLINE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEXT_STYLE_STRIKE_THRU",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdEntry",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillId",
    "type" : "AutofillId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillHints",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGetCredentialRequest",
    "type" : "GetCredentialRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGetCredentialCallback",
    "type" : "OutcomeReceiver<GetCredentialResponse, GetCredentialException>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGetCredentialResultReceiver",
    "type" : "ResultReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillValue",
    "type" : "AutofillValue",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillOptions",
    "type" : "CharSequence[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSanitized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHtmlInfo",
    "type" : "HtmlInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinEms",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxEms",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextIdEntry",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHintIdEntry",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImportantForAutofill",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillOverlay",
    "type" : "AutofillOverlay",
    "comment" : " Not written to parcel.",
    "links" : [ ]
  }, {
    "name" : "mIsCredential",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElevation",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlpha",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_DISABLED",
    "type" : "int",
    "comment" : " TODO: The FLAGS_* below have filled all bits, will need to be refactored.",
    "links" : [ ]
  }, {
    "name" : "FLAGS_VISIBILITY_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_FOCUSABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_FOCUSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_SELECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_ASSIST_BLOCKED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_CHECKABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_CHECKED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_CLICKABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_LONG_CLICKABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_ACCESSIBILITY_FOCUSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_ACTIVATED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_CONTEXT_CLICKABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_OPAQUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_ALL_CONTROL",
    "type" : "int",
    "comment" : " This flag is used to clear all FLAGS_HAS_* values in mFlags prior to parceling.",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_MIME_TYPES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_MATRIX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_ALPHA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_ELEVATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_SCROLL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_LARGE_COORDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_CONTENT_DESCRIPTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_TEXT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_COMPLEX_TEXT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_EXTRAS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_CHILDREN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_URL_DOMAIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_INPUT_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_URL_SCHEME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_HAS_LOCALE_LIST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_AUTOFILL_VIEW_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_AUTOFILL_VIRTUAL_VIEW_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_AUTOFILL_VALUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_AUTOFILL_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_AUTOFILL_HINTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_AUTOFILL_OPTIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_HTML_INFO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_TEXT_ID_ENTRY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_MIN_TEXT_EMS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_MAX_TEXT_EMS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_MAX_TEXT_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_AUTOFILL_SESSION_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FLAGS_HAS_HINT_ID_ENTRY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "ViewNodeText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWebScheme",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWebDomain",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocaleList",
    "type" : "LocaleList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReceiveContentMimeTypes",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildren",
    "type" : "ViewNode[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void writeString(@NonNull Parcel out, @Nullable PooledStringWriter pwriter, @Nullable String str)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String readString(@NonNull Parcel in, @Nullable PooledStringReader preader)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void initializeFromParcelWithoutChildren(Parcel in, @Nullable PooledStringReader preader, @Nullable float[] tmpMatrix)",
    "returnType" : "void",
    "comment" : " This does not read the child nodes.",
    "links" : [ ]
  }, {
    "name" : " int writeSelfToParcel(@NonNull Parcel out, @Nullable PooledStringWriter pwriter, boolean sanitizeOnWrite, @Nullable float[] tmpMatrix, boolean willWriteChildren)",
    "returnType" : "int",
    "comment" : "\n         * This does not write the child nodes.\n         *\n         * @param willWriteChildren whether child nodes will be written to the parcel or not after\n         *                          calling this method.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n         * Returns the ID associated with this view, as per {@link View#getId() View.getId()}.\n         ",
    "links" : [ "android.view.View#getId()" ]
  }, {
    "name" : "public String getIdPackage()",
    "returnType" : "String",
    "comment" : "\n         * If {@link #getId()} is a resource identifier, this is the package name of that\n         * identifier.  See {@link android.view.ViewStructure#setId ViewStructure.setId}\n         * for more information.\n         ",
    "links" : [ "#getId()", "android.view.ViewStructure#setId" ]
  }, {
    "name" : "public String getIdType()",
    "returnType" : "String",
    "comment" : "\n         * If {@link #getId()} is a resource identifier, this is the type name of that\n         * identifier.  See {@link android.view.ViewStructure#setId ViewStructure.setId}\n         * for more information.\n         ",
    "links" : [ "#getId()", "android.view.ViewStructure#setId" ]
  }, {
    "name" : "public String getIdEntry()",
    "returnType" : "String",
    "comment" : "\n         * If {@link #getId()} is a resource identifier, this is the entry name of that\n         * identifier.  See {@link android.view.ViewStructure#setId ViewStructure.setId}\n         * for more information.\n         ",
    "links" : [ "#getId()", "android.view.ViewStructure#setId" ]
  }, {
    "name" : "public AutofillId getAutofillId()",
    "returnType" : "AutofillId",
    "comment" : "\n         * Gets the id that can be used to autofill the view contents.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes.\n         *\n         * @return id that can be used to autofill the view contents, or {@code null} if the\n         * structure was created for assist purposes.\n         ",
    "links" : [ "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public int getAutofillType()",
    "returnType" : "int",
    "comment" : "\n         * Gets the type of value that can be used to autofill the view contents.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes.\n         *\n         * @return autofill type as defined by {@link View#getAutofillType()},\n         * or {@link View#AUTOFILL_TYPE_NONE} if the structure was created for assist purposes.\n         ",
    "links" : [ "android.view.View#getAutofillType()", "android.view.View#AUTOFILL_TYPE_NONE", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public String[] getAutofillHints()",
    "returnType" : "String[]",
    "comment" : "\n         * Describes the content of a view so that a autofill service can fill in the appropriate\n         * data.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes,\n         * not for Assist - see {@link View#getAutofillHints()} for more info.\n         *\n         * @return The autofill hints for this view, or {@code null} if the structure was created\n         * for assist purposes.\n         ",
    "links" : [ "android.view.View#getAutofillHints()", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public AutofillValue getAutofillValue()",
    "returnType" : "AutofillValue",
    "comment" : "\n         * Gets the value of this view.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes,\n         * not for assist purposes.\n         *\n         * @return the autofill value of this view, or {@code null} if the structure was created\n         * for assist purposes.\n         ",
    "links" : [ "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public void setAutofillOverlay(AutofillOverlay overlay)",
    "returnType" : "void",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public CharSequence[] getAutofillOptions()",
    "returnType" : "CharSequence[]",
    "comment" : "\n         * Gets the options that can be used to autofill this view.\n         *\n         * <p>Typically used by nodes whose {@link View#getAutofillType()} is a list to indicate\n         * the meaning of each possible value in the list.\n         *\n         * <p>It's relevant when the {@link AssistStructure} is used for autofill purposes, not\n         * for assist purposes.\n         *\n         * @return the options that can be used to autofill this view, or {@code null} if the\n         * structure was created for assist purposes.\n         ",
    "links" : [ "android.view.View#getAutofillType()", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public boolean isCredential()",
    "returnType" : "boolean",
    "comment" : "\n         * @return whether the node is a credential.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes,\n         * not for assist purposes.\n         * TODO(b/303677885): add TestApi\n         *\n         * @hide\n         ",
    "links" : [ "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public GetCredentialRequest getPendingCredentialRequest()",
    "returnType" : "GetCredentialRequest",
    "comment" : "\n         * Returns the request associated with this node\n         * @return\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public ResultReceiver getPendingCredentialCallback()",
    "returnType" : "ResultReceiver",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getInputType()",
    "returnType" : "int",
    "comment" : "\n         * Gets the {@link android.text.InputType} bits of this structure.\n         *\n         * @return bits as defined by {@link android.text.InputType}.\n         ",
    "links" : [ "android.text.InputType" ]
  }, {
    "name" : "public boolean isSanitized()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updateAutofillValue(AutofillValue value)",
    "returnType" : "void",
    "comment" : "\n         * Updates the {@link AutofillValue} of this structure.\n         *\n         * <p>Should be used just before sending the structure to the\n         * {@link android.service.autofill.AutofillService} for saving, since it will override the\n         * initial value.\n         *\n         * @hide\n         ",
    "links" : [ "android.view.autofill.AutofillValue", "android.service.autofill.AutofillService" ]
  }, {
    "name" : "public int getLeft()",
    "returnType" : "int",
    "comment" : "\n         * Returns the left edge of this view, in pixels, relative to the left edge of its parent.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTop()",
    "returnType" : "int",
    "comment" : "\n         * Returns the top edge of this view, in pixels, relative to the top edge of its parent.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getScrollX()",
    "returnType" : "int",
    "comment" : "\n         * Returns the current X scroll offset of this view, as per\n         * {@link android.view.View#getScrollX() View.getScrollX()}.\n         ",
    "links" : [ "android.view.View#getScrollX()" ]
  }, {
    "name" : "public int getScrollY()",
    "returnType" : "int",
    "comment" : "\n         * Returns the current Y scroll offset of this view, as per\n         * {@link android.view.View#getScrollX() View.getScrollY()}.\n         ",
    "links" : [ "android.view.View#getScrollX()" ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n         * Returns the width of this view, in pixels.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n         * Returns the height of this view, in pixels.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Matrix getTransformation()",
    "returnType" : "Matrix",
    "comment" : "\n         * Returns the transformation that has been applied to this view, such as a translation\n         * or scaling.  The returned Matrix object is owned by ViewNode; do not modify it.\n         * Returns null if there is no transformation applied to the view.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for assist purposes,\n         * not for autofill purposes.\n         ",
    "links" : [ "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public float getElevation()",
    "returnType" : "float",
    "comment" : "\n         * Returns the visual elevation of the view, used for shadowing and other visual\n         * characterstics, as set by {@link ViewStructure#setElevation\n         * ViewStructure.setElevation(float)}.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for assist purposes,\n         * not for autofill purposes.\n         ",
    "links" : [ "android.app.assist.AssistStructure", "android.view.ViewStructure#setElevationViewStructure.setElevation(float)" ]
  }, {
    "name" : "public float getAlpha()",
    "returnType" : "float",
    "comment" : "\n         * Returns the alpha transformation of the view, used to reduce the overall opacity\n         * of the view's contents, as set by {@link ViewStructure#setAlpha\n         * ViewStructure.setAlpha(float)}.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for assist purposes,\n         * not for autofill purposes.\n         ",
    "links" : [ "android.view.ViewStructure#setAlphaViewStructure.setAlpha(float)", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public int getVisibility()",
    "returnType" : "int",
    "comment" : "\n         * Returns the visibility mode of this view, as per\n         * {@link android.view.View#getVisibility() View.getVisibility()}.\n         ",
    "links" : [ "android.view.View#getVisibility()" ]
  }, {
    "name" : "public boolean isAssistBlocked()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if assist data has been blocked starting at this node in the hierarchy.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node is in an enabled state.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isClickable()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node is clickable by the user.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFocusable()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node can take input focus.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFocused()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node currently had input focus at the time that the\n         * structure was collected.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAccessibilityFocused()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node currently had accessibility focus at the time that the\n         * structure was collected.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCheckable()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node represents something that is checkable by the user.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isChecked()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node is currently in a checked state.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSelected()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node has currently been selected by the user.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isActivated()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node has currently been activated by the user.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpaque()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node is opaque.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLongClickable()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node is something the user can perform a long click/press on.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isContextClickable()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this node is something the user can perform a context click on.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getClassName()",
    "returnType" : "String",
    "comment" : "\n         * Returns the class name of the node's implementation, indicating its behavior.\n         * For example, a button will report \"android.widget.Button\" meaning it behaves\n         * like a {@link android.widget.Button}.\n         ",
    "links" : [ "android.widget.Button" ]
  }, {
    "name" : "public CharSequence getContentDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Returns any content description associated with the node, which semantically describes\n         * its purpose for accessibility and other uses.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getWebDomain()",
    "returnType" : "String",
    "comment" : "\n         * Returns the domain of the HTML document represented by this view.\n         *\n         * <p>Typically used when the view associated with the view is a container for an HTML\n         * document.\n         *\n         * <p><b>Warning:</b> an autofill service cannot trust the value reported by this method\n         * without verifing its authenticity&mdash;see the \"Web security\" section of\n         * {@link android.service.autofill.AutofillService} for more details.\n         *\n         * @return domain-only part of the document. For example, if the full URL is\n         * {@code https://example.com/login?user=my_user}, it returns {@code example.com}.\n         ",
    "links" : [ "android.service.autofill.AutofillService" ]
  }, {
    "name" : "public void setWebDomain(@Nullable String domain)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getWebScheme()",
    "returnType" : "String",
    "comment" : "\n         * Returns the scheme of the HTML document represented by this view.\n         *\n         * <p>Typically used when the view associated with the view is a container for an HTML\n         * document.\n         *\n         * @return scheme-only part of the document. For example, if the full URL is\n         * {@code https://example.com/login?user=my_user}, it returns {@code https}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public HtmlInfo getHtmlInfo()",
    "returnType" : "HtmlInfo",
    "comment" : "\n         * Returns the HTML properties associated with this view.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes,\n         * not for assist purposes.\n         *\n         * @return the HTML properties associated with this view, or {@code null} if the\n         * structure was created for assist purposes.\n         ",
    "links" : [ "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public LocaleList getLocaleList()",
    "returnType" : "LocaleList",
    "comment" : "\n         * Returns the list of locales associated with this view.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String[] getReceiveContentMimeTypes()",
    "returnType" : "String[]",
    "comment" : "\n         * Returns the MIME types accepted by {@link View#performReceiveContent} for this view. See\n         * {@link View#getReceiveContentMimeTypes()} for details.\n         ",
    "links" : [ "android.view.View#performReceiveContent", "android.view.View#getReceiveContentMimeTypes()" ]
  }, {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Returns any text associated with the node that is displayed to the user, or null\n         * if there is none.\n         *\n         * <p> The text will be stripped of any spans that could potentially contain reference to\n         * the activity context, to avoid memory leak. If the text contained a span, a plain\n         * string version of the text will be returned.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTextSelectionStart()",
    "returnType" : "int",
    "comment" : "\n         * If {@link #getText()} is non-null, this is where the current selection starts.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for assist purposes,\n         * not for autofill purposes.\n         ",
    "links" : [ "#getText()", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public int getTextSelectionEnd()",
    "returnType" : "int",
    "comment" : "\n         * If {@link #getText()} is non-null, this is where the current selection starts.\n         * If there is no selection, returns the same value as {@link #getTextSelectionStart()},\n         * indicating the cursor position.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for assist purposes,\n         * not for autofill purposes.\n         ",
    "links" : [ "#getText()", "#getTextSelectionStart()", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public int getTextColor()",
    "returnType" : "int",
    "comment" : "\n         * If {@link #getText()} is non-null, this is the main text color associated with it.\n         * If there is no text color, {@link #TEXT_COLOR_UNDEFINED} is returned.\n         * Note that the text may also contain style spans that modify the color of specific\n         * parts of the text.\n         ",
    "links" : [ "#TEXT_COLOR_UNDEFINED", "#getText()" ]
  }, {
    "name" : "public int getTextBackgroundColor()",
    "returnType" : "int",
    "comment" : "\n         * If {@link #getText()} is non-null, this is the main text background color associated\n         * with it.\n         * If there is no text background color, {@link #TEXT_COLOR_UNDEFINED} is returned.\n         * Note that the text may also contain style spans that modify the color of specific\n         * parts of the text.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for assist purposes,\n         * not for autofill purposes.\n         ",
    "links" : [ "#TEXT_COLOR_UNDEFINED", "#getText()", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public float getTextSize()",
    "returnType" : "float",
    "comment" : "\n         * If {@link #getText()} is non-null, this is the main text size (in pixels) associated\n         * with it.\n         * Note that the text may also contain style spans that modify the size of specific\n         * parts of the text.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for assist purposes,\n         * not for autofill purposes.\n         ",
    "links" : [ "#getText()", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public int getTextStyle()",
    "returnType" : "int",
    "comment" : "\n         * If {@link #getText()} is non-null, this is the main text style associated\n         * with it, containing a bit mask of {@link #TEXT_STYLE_BOLD},\n         * {@link #TEXT_STYLE_BOLD}, {@link #TEXT_STYLE_STRIKE_THRU}, and/or\n         * {@link #TEXT_STYLE_UNDERLINE}.\n         * Note that the text may also contain style spans that modify the style of specific\n         * parts of the text.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for assist purposes,\n         * not for autofill purposes.\n         ",
    "links" : [ "#TEXT_STYLE_UNDERLINE", "#TEXT_STYLE_STRIKE_THRU", "#getText()", "#TEXT_STYLE_BOLD", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public int[] getTextLineCharOffsets()",
    "returnType" : "int[]",
    "comment" : "\n         * Return per-line offsets into the text returned by {@link #getText()}.  Each entry\n         * in the array is a formatted line of text, and the value it contains is the offset\n         * into the text string where that line starts.  May return null if there is no line\n         * information.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for assist purposes,\n         * not for autofill purposes.\n         ",
    "links" : [ "#getText()", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public int[] getTextLineBaselines()",
    "returnType" : "int[]",
    "comment" : "\n         * Return per-line baselines into the text returned by {@link #getText()}.  Each entry\n         * in the array is a formatted line of text, and the value it contains is the baseline\n         * where that text appears in the view.  May return null if there is no line\n         * information.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for assist purposes,\n         * not for autofill purposes.\n         ",
    "links" : [ "#getText()", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public String getTextIdEntry()",
    "returnType" : "String",
    "comment" : "\n         * Gets the identifier used to set the text associated with this view.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes,\n         * not for assist purposes.\n         ",
    "links" : [ "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public String getHint()",
    "returnType" : "String",
    "comment" : "\n         * Return additional hint text associated with the node; this is typically used with\n         * a node that takes user input, describing to the user what the input means.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getHintIdEntry()",
    "returnType" : "String",
    "comment" : "\n         * Gets the identifier used to set the hint associated with this view.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes,\n         * not for assist purposes.\n         ",
    "links" : [ "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n         * Return a Bundle containing optional vendor-specific extension information.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getChildCount()",
    "returnType" : "int",
    "comment" : "\n         * Return the number of children this node has.\n         ",
    "links" : [ ]
  }, {
    "name" : "public ViewNode getChildAt(int index)",
    "returnType" : "ViewNode",
    "comment" : "\n         * Return a child of this node, given an index value from 0 to\n         * {@link #getChildCount()}-1.\n         ",
    "links" : [ "#getChildCount()" ]
  }, {
    "name" : "public int getMinTextEms()",
    "returnType" : "int",
    "comment" : "\n         * Returns the minimum width in ems of the text associated with this node, or {@code -1}\n         * if not supported by the node.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes,\n         * not for assist purposes.\n         ",
    "links" : [ "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public int getMaxTextEms()",
    "returnType" : "int",
    "comment" : "\n         * Returns the maximum width in ems of the text associated with this node, or {@code -1}\n         * if not supported by the node.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes,\n         * not for assist purposes.\n         ",
    "links" : [ "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public int getMaxTextLength()",
    "returnType" : "int",
    "comment" : "\n         * Returns the maximum length of the text associated with this node, or {@code -1} if not\n         * supported by the node or not set. System may set a default value if the text length is\n         * not set.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes,\n         * not for assist purposes.\n         ",
    "links" : [ "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public int getImportantForAutofill()",
    "returnType" : "int",
    "comment" : "\n         * Gets the {@link View#setImportantForAutofill(int) importantForAutofill mode} of\n         * the view associated with this node.\n         *\n         * <p>It's only relevant when the {@link AssistStructure} is used for autofill purposes.\n         ",
    "links" : [ "android.view.View#setImportantForAutofill(int)", "android.app.assist.AssistStructure" ]
  } ],
  "methodNames" : [ "private static void writeString(@NonNull Parcel out, @Nullable PooledStringWriter pwriter, @Nullable String str)", "private static String readString(@NonNull Parcel in, @Nullable PooledStringReader preader)", " void initializeFromParcelWithoutChildren(Parcel in, @Nullable PooledStringReader preader, @Nullable float[] tmpMatrix)", " int writeSelfToParcel(@NonNull Parcel out, @Nullable PooledStringWriter pwriter, boolean sanitizeOnWrite, @Nullable float[] tmpMatrix, boolean willWriteChildren)", "public int getId()", "public String getIdPackage()", "public String getIdType()", "public String getIdEntry()", "public AutofillId getAutofillId()", "public int getAutofillType()", "public String[] getAutofillHints()", "public AutofillValue getAutofillValue()", "public void setAutofillOverlay(AutofillOverlay overlay)", "public CharSequence[] getAutofillOptions()", "public boolean isCredential()", "public GetCredentialRequest getPendingCredentialRequest()", "public ResultReceiver getPendingCredentialCallback()", "public int getInputType()", "public boolean isSanitized()", "public void updateAutofillValue(AutofillValue value)", "public int getLeft()", "public int getTop()", "public int getScrollX()", "public int getScrollY()", "public int getWidth()", "public int getHeight()", "public Matrix getTransformation()", "public float getElevation()", "public float getAlpha()", "public int getVisibility()", "public boolean isAssistBlocked()", "public boolean isEnabled()", "public boolean isClickable()", "public boolean isFocusable()", "public boolean isFocused()", "public boolean isAccessibilityFocused()", "public boolean isCheckable()", "public boolean isChecked()", "public boolean isSelected()", "public boolean isActivated()", "public boolean isOpaque()", "public boolean isLongClickable()", "public boolean isContextClickable()", "public String getClassName()", "public CharSequence getContentDescription()", "public String getWebDomain()", "public void setWebDomain(@Nullable String domain)", "public String getWebScheme()", "public HtmlInfo getHtmlInfo()", "public LocaleList getLocaleList()", "public String[] getReceiveContentMimeTypes()", "public CharSequence getText()", "public int getTextSelectionStart()", "public int getTextSelectionEnd()", "public int getTextColor()", "public int getTextBackgroundColor()", "public float getTextSize()", "public int getTextStyle()", "public int[] getTextLineCharOffsets()", "public int[] getTextLineBaselines()", "public String getTextIdEntry()", "public String getHint()", "public String getHintIdEntry()", "public Bundle getExtras()", "public int getChildCount()", "public ViewNode getChildAt(int index)", "public int getMinTextEms()", "public int getMaxTextEms()", "public int getMaxTextLength()", "public int getImportantForAutofill()" ],
  "variableNames" : [ "TEXT_COLOR_UNDEFINED", "TEXT_STYLE_BOLD", "TEXT_STYLE_ITALIC", "TEXT_STYLE_UNDERLINE", "TEXT_STYLE_STRIKE_THRU", "mId", "mIdPackage", "mIdType", "mIdEntry", "mAutofillId", "mAutofillType", "mAutofillHints", "mGetCredentialRequest", "mGetCredentialCallback", "mGetCredentialResultReceiver", "mAutofillValue", "mAutofillOptions", "mSanitized", "mHtmlInfo", "mMinEms", "mMaxEms", "mMaxLength", "mTextIdEntry", "mHintIdEntry", "mImportantForAutofill", "mAutofillOverlay", "mIsCredential", "mX", "mY", "mScrollX", "mScrollY", "mWidth", "mHeight", "mMatrix", "mElevation", "mAlpha", "FLAGS_DISABLED", "FLAGS_VISIBILITY_MASK", "FLAGS_FOCUSABLE", "FLAGS_FOCUSED", "FLAGS_SELECTED", "FLAGS_ASSIST_BLOCKED", "FLAGS_CHECKABLE", "FLAGS_CHECKED", "FLAGS_CLICKABLE", "FLAGS_LONG_CLICKABLE", "FLAGS_ACCESSIBILITY_FOCUSED", "FLAGS_ACTIVATED", "FLAGS_CONTEXT_CLICKABLE", "FLAGS_OPAQUE", "FLAGS_ALL_CONTROL", "FLAGS_HAS_MIME_TYPES", "FLAGS_HAS_MATRIX", "FLAGS_HAS_ALPHA", "FLAGS_HAS_ELEVATION", "FLAGS_HAS_SCROLL", "FLAGS_HAS_LARGE_COORDS", "FLAGS_HAS_CONTENT_DESCRIPTION", "FLAGS_HAS_TEXT", "FLAGS_HAS_COMPLEX_TEXT", "FLAGS_HAS_EXTRAS", "FLAGS_HAS_ID", "FLAGS_HAS_CHILDREN", "FLAGS_HAS_URL_DOMAIN", "FLAGS_HAS_INPUT_TYPE", "FLAGS_HAS_URL_SCHEME", "FLAGS_HAS_LOCALE_LIST", "AUTOFILL_FLAGS_HAS_AUTOFILL_VIEW_ID", "AUTOFILL_FLAGS_HAS_AUTOFILL_VIRTUAL_VIEW_ID", "AUTOFILL_FLAGS_HAS_AUTOFILL_VALUE", "AUTOFILL_FLAGS_HAS_AUTOFILL_TYPE", "AUTOFILL_FLAGS_HAS_AUTOFILL_HINTS", "AUTOFILL_FLAGS_HAS_AUTOFILL_OPTIONS", "AUTOFILL_FLAGS_HAS_HTML_INFO", "AUTOFILL_FLAGS_HAS_TEXT_ID_ENTRY", "AUTOFILL_FLAGS_HAS_MIN_TEXT_EMS", "AUTOFILL_FLAGS_HAS_MAX_TEXT_EMS", "AUTOFILL_FLAGS_HAS_MAX_TEXT_LENGTH", "AUTOFILL_FLAGS_HAS_AUTOFILL_SESSION_ID", "AUTOFILL_FLAGS_HAS_HINT_ID_ENTRY", "mFlags", "mAutofillFlags", "mClassName", "mContentDescription", "mText", "mInputType", "mWebScheme", "mWebDomain", "mExtras", "mLocaleList", "mReceiveContentMimeTypes", "mChildren" ]
}