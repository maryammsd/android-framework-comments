{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/CookieManager.java",
  "packageName" : "java.net",
  "className" : "CookieManager",
  "comment" : "\n * CookieManager provides a concrete implementation of {@link CookieHandler},\n * which separates the storage of cookies from the policy surrounding accepting\n * and rejecting cookies. A CookieManager is initialized with a {@link CookieStore}\n * which manages storage, and a {@link CookiePolicy} object, which makes\n * policy decisions on cookie acceptance/rejection.\n *\n * <p> The HTTP cookie management in java.net package looks like:\n * <blockquote>\n * <pre>{@code\n *                  use\n * CookieHandler <------- HttpURLConnection\n *       ^\n *       | impl\n *       |         use\n * CookieManager -------> CookiePolicy\n *             |   use\n *             |--------> HttpCookie\n *             |              ^\n *             |              | use\n *             |   use        |\n *             |--------> CookieStore\n *                            ^\n *                            | impl\n *                            |\n *                  Internal in-memory implementation\n * }</pre>\n * <ul>\n *   <li>\n *     CookieHandler is at the core of cookie management. User can call\n *     CookieHandler.setDefault to set a concrete CookieHanlder implementation\n *     to be used.\n *   </li>\n *   <li>\n *     CookiePolicy.shouldAccept will be called by CookieManager.put to see whether\n *     or not one cookie should be accepted and put into cookie store. User can use\n *     any of three pre-defined CookiePolicy, namely ACCEPT_ALL, ACCEPT_NONE and\n *     ACCEPT_ORIGINAL_SERVER, or user can define his own CookiePolicy implementation\n *     and tell CookieManager to use it.\n *   </li>\n *   <li>\n *     CookieStore is the place where any accepted HTTP cookie is stored in.\n *     If not specified when created, a CookieManager instance will use an internal\n *     in-memory implementation. Or user can implements one and tell CookieManager\n *     to use it.\n *   </li>\n *   <li>\n *     Currently, only CookieStore.add(URI, HttpCookie) and CookieStore.get(URI)\n *     are used by CookieManager. Others are for completeness and might be needed\n *     by a more sophisticated CookieStore implementation, e.g. a NetscapeCookieStore.\n *   </li>\n * </ul>\n * </blockquote>\n *\n * <p>There're various ways user can hook up his own HTTP cookie management behavior, e.g.\n * <blockquote>\n * <ul>\n *   <li>Use CookieHandler.setDefault to set a brand new {@link CookieHandler} implementation\n *   <li>Let CookieManager be the default {@link CookieHandler} implementation,\n *       but implement user's own {@link CookieStore} and {@link CookiePolicy}\n *       and tell default CookieManager to use them:\n *     <blockquote><pre>\n *       // this should be done at the beginning of an HTTP session\n *       CookieHandler.setDefault(new CookieManager(new MyCookieStore(), new MyCookiePolicy()));\n *     </pre></blockquote>\n *   <li>Let CookieManager be the default {@link CookieHandler} implementation, but\n *       use customized {@link CookiePolicy}:\n *     <blockquote><pre>\n *       // this should be done at the beginning of an HTTP session\n *       CookieHandler.setDefault(new CookieManager());\n *       // this can be done at any point of an HTTP session\n *       ((CookieManager)CookieHandler.getDefault()).setCookiePolicy(new MyCookiePolicy());\n *     </pre></blockquote>\n * </ul>\n * </blockquote>\n *\n * <p>The implementation conforms to <a href=\"http://www.ietf.org/rfc/rfc2965.txt\">RFC 2965</a>, section 3.3.\n *\n * @see CookiePolicy\n * @author Edward Wang\n * @since 1.6\n ",
  "links" : [ "java.net.CookiePolicy", "java.net.CookieStore", "java.net.CookieHandler" ],
  "variables" : [ {
    "name" : "policyCallback",
    "type" : "CookiePolicy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cookieJar",
    "type" : "CookieStore",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCookiePolicy(CookiePolicy cookiePolicy)",
    "returnType" : "void",
    "comment" : "\n     * To set the cookie policy of this cookie manager.\n     *\n     * <p> A instance of {@code CookieManager} will have\n     * cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always\n     * can call this method to set another cookie policy.\n     *\n     * @param cookiePolicy      the cookie policy. Can be {@code null}, which\n     *                          has no effects on current cookie policy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CookieStore getCookieStore()",
    "returnType" : "CookieStore",
    "comment" : "\n     * To retrieve current cookie store.\n     *\n     * @return  the cookie store currently used by cookie manager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<String>> get(URI uri, Map<String, List<String>> requestHeaders) throws IOException",
    "returnType" : "Map<String, List<String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void put(URI uri, Map<String, List<String>> responseHeaders) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldAcceptInternal(URI uri, HttpCookie cookie)",
    "returnType" : "boolean",
    "comment" : " to determine whether or not accept this cookie",
    "links" : [ ]
  }, {
    "name" : "private static boolean isInPortList(String lst, int port)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean pathMatches(URI uri, HttpCookie cookie)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true iff. the path from {@code cookie} matches the path from {@code uri}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String normalizePath(String path)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<String> sortByPath(List<HttpCookie> cookies)",
    "returnType" : "List<String>",
    "comment" : "\n     * sort cookies with respect to their path: those with more specific Path attributes\n     * precede those with less specific, as defined in RFC 2965 sec. 3.3.4\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setCookiePolicy(CookiePolicy cookiePolicy)", "public CookieStore getCookieStore()", "public Map<String, List<String>> get(URI uri, Map<String, List<String>> requestHeaders) throws IOException", "public void put(URI uri, Map<String, List<String>> responseHeaders) throws IOException", "private boolean shouldAcceptInternal(URI uri, HttpCookie cookie)", "private static boolean isInPortList(String lst, int port)", "private static boolean pathMatches(URI uri, HttpCookie cookie)", "private static String normalizePath(String path)", "private List<String> sortByPath(List<HttpCookie> cookies)" ],
  "variableNames" : [ "policyCallback", "cookieJar" ]
}