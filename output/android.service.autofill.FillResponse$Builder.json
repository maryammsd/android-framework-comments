{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/autofill/FillResponse.java",
  "packageName" : "android.service.autofill",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link FillResponse} objects. You must to provide at least\n     * one dataset or set an authentication intent with a presentation view.\n     ",
  "links" : [ "android.service.autofill.FillResponse" ],
  "variables" : [ {
    "name" : "mDatasets",
    "type" : "ArrayList<Dataset>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSaveInfo",
    "type" : "SaveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientState",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPresentation",
    "type" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInlinePresentation",
    "type" : "InlinePresentation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInlineTooltipPresentation",
    "type" : "InlinePresentation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialogPresentation",
    "type" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialogHeader",
    "type" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeader",
    "type" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFooter",
    "type" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthentication",
    "type" : "IntentSender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthenticationIds",
    "type" : "AutofillId[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIgnoredIds",
    "type" : "AutofillId[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisableDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFieldClassificationIds",
    "type" : "AutofillId[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFillDialogTriggerIds",
    "type" : "AutofillId[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserData",
    "type" : "UserData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancelIds",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportsInlineSuggestions",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconResourceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceDisplayNameResourceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowFillDialogIcon",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowSaveDialogIcon",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDetectedFieldTypes",
    "type" : "FieldClassification[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialogPendingIntent",
    "type" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setDetectedFieldClassifications(@NonNull Set<FieldClassification> fieldInfos)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a new {@link FieldClassification} to this response, to\n         * help the platform provide more accurate detection results.\n         *\n         * Call this when a field has been detected with a type.\n         *\n         * Altough similiarly named with {@link #setFieldClassificationIds},\n         * it provides a different functionality - setFieldClassificationIds should\n         * be used when a field is only suspected to be Autofillable.\n         * This method should be used when a field is certainly Autofillable\n         * with a certain type.\n         ",
    "links" : [ "#setFieldClassificationIds", "android.service.assist.classification.FieldClassification" ]
  }, {
    "name" : "public Builder setAuthentication(@NonNull AutofillId[] ids, @Nullable IntentSender authentication, @Nullable RemoteViews presentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Triggers a custom UI before autofilling the screen with any data set in this\n         * response.\n         *\n         * <p><b>Note:</b> Although the name of this method suggests that it should be used just for\n         * authentication flow, it can be used for other advanced flows; see {@link AutofillService}\n         * for examples.\n         *\n         * <p>This is typically useful when a user interaction is required to unlock their\n         * data vault if you encrypt the data set labels and data set data. It is recommended\n         * to encrypt only the sensitive data and not the data set labels which would allow\n         * auth on the data set level leading to a better user experience. Note that if you\n         * use sensitive data as a label, for example an email address, then it should also\n         * be encrypted. The provided {@link android.app.PendingIntent intent} must be an\n         * {@link Activity} which implements your authentication flow. Also if you provide an auth\n         * intent you also need to specify the presentation view to be shown in the fill UI\n         * for the user to trigger your authentication flow.\n         *\n         * <p>When a user triggers autofill, the system launches the provided intent\n         * whose extras will have the\n         * {@link android.view.autofill.AutofillManager#EXTRA_ASSIST_STRUCTURE screen\n         * content} and your {@link android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE\n         * client state}. Once you complete your authentication flow you should set the\n         * {@link Activity} result to {@link android.app.Activity#RESULT_OK} and set the\n         * {@link android.view.autofill.AutofillManager#EXTRA_AUTHENTICATION_RESULT} extra\n         * with the fully populated {@link FillResponse response} (or {@code null} if the screen\n         * cannot be autofilled).\n         *\n         * <p> <b>IMPORTANT</b>: Extras must be non-null on the intent being set for Android 12\n         * otherwise it will cause a crash. Do not use {@link Activity#setResult(int)}, instead use\n         * {@link Activity#setResult(int, Intent) with non-null extras. Consider setting {\n         * @link android.view.autofill.AutofillManager#EXTRA_AUTHENTICATION_RESULT} to null or use\n         * {@link Bundle#EMPTY} with {@link Intent#putExtras(Bundle)} on the intent when\n         * finishing activity to avoid crash). </p>\n         *\n         * <p>For example, if you provided an empty {@link FillResponse response} because the\n         * user's data was locked and marked that the response needs an authentication then\n         * in the response returned if authentication succeeds you need to provide all\n         * available data sets some of which may need to be further authenticated, for\n         * example a credit card whose CVV needs to be entered.\n         *\n         * <p>If you provide an authentication intent you must also provide a presentation\n         * which is used to visualize the response for triggering the authentication\n         * flow.\n         *\n         * <p><b>Note:</b> Do not make the provided pending intent\n         * immutable by using {@link android.app.PendingIntent#FLAG_IMMUTABLE} as the\n         * platform needs to fill in the authentication arguments.\n         *\n         * <p>Theme does not work with RemoteViews layout. Avoid hardcoded text color\n         * or background color: Autofill on different platforms may have different themes.\n         *\n         * @param authentication Intent to an activity with your authentication flow.\n         * @param presentation The presentation to visualize the response.\n         * @param ids id of Views that when focused will display the authentication UI.\n         *\n         * @return This builder.\n         *\n         * @throws IllegalArgumentException if any of the following occurs:\n         * <ul>\n         *   <li>{@code ids} is {@code null}</li>\n         *   <li>{@code ids} is empty</li>\n         *   <li>{@code ids} contains a {@code null} element</li>\n         *   <li>both {@code authentication} and {@code presentation} are {@code null}</li>\n         *   <li>both {@code authentication} and {@code presentation} are non-{@code null}</li>\n         * </ul>\n         *\n         * @throws IllegalStateException if a {@link #setHeader(RemoteViews) header} or a\n         * {@link #setFooter(RemoteViews) footer} are already set for this builder.\n         *\n         * @see android.app.PendingIntent#getIntentSender()\n         * @deprecated Use\n         * {@link #setAuthentication(AutofillId[], IntentSender, Presentations)}\n         * instead.\n         ",
    "links" : [ "android.view.autofill.AutofillManager#EXTRA_CLIENT_STATEclient", "android.view.autofill.AutofillManager#EXTRA_AUTHENTICATION_RESULT", "android.app.PendingIntent", "android.app.PendingIntent#putExtras(Bundle)", "#setHeader(RemoteViews)", "android.app.Activity#RESULT_OK", "android.app.Activity#setResult(int)", "android.service.autofill.FillResponse", "android.os.Bundle#EMPTY", "android.app.PendingIntent#FLAG_IMMUTABLE", "#setFooter(RemoteViews)", "#setAuthentication(AutofillId", "android.service.autofill.AutofillService", "android.app.Activity", "android.app.Activity#setResult(int", "android.view.autofill.AutofillManager#EXTRA_ASSIST_STRUCTURE" ]
  }, {
    "name" : "public Builder setAuthentication(@NonNull AutofillId[] ids, @Nullable IntentSender authentication, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Triggers a custom UI before autofilling the screen with any data set in this\n         * response.\n         *\n         * <p><b>Note:</b> Although the name of this method suggests that it should be used just for\n         * authentication flow, it can be used for other advanced flows; see {@link AutofillService}\n         * for examples.\n         *\n         * <p>This method is similar to\n         * {@link #setAuthentication(AutofillId[], IntentSender, RemoteViews)}, but also accepts\n         * an {@link InlinePresentation} presentation which is required for authenticating through\n         * the inline autofill flow.\n         *\n         * <p><b>Note:</b> {@link #setHeader(RemoteViews)} or {@link #setFooter(RemoteViews)} does\n         * not work with {@link InlinePresentation}.</p>\n         *\n         * @param authentication Intent to an activity with your authentication flow.\n         * @param presentation The presentation to visualize the response.\n         * @param inlinePresentation The inlinePresentation to visualize the response inline.\n         * @param ids id of Views that when focused will display the authentication UI.\n         *\n         * @return This builder.\n         *\n         * @throws IllegalArgumentException if any of the following occurs:\n         * <ul>\n         *   <li>{@code ids} is {@code null}</li>\n         *   <li>{@code ids} is empty</li>\n         *   <li>{@code ids} contains a {@code null} element</li>\n         *   <li>both {@code authentication} and {@code presentation} are {@code null}</li>\n         *   <li>both {@code authentication} and {@code presentation} are non-{@code null}</li>\n         *   <li>both {@code authentication} and {@code inlinePresentation} are {@code null}</li>\n         *   <li>both {@code authentication} and {@code inlinePresentation} are\n         *   non-{@code null}</li>\n         * </ul>\n         *\n         * @throws IllegalStateException if a {@link #setHeader(RemoteViews) header} or a\n         * {@link #setFooter(RemoteViews) footer} are already set for this builder.\n         *\n         * @see android.app.PendingIntent#getIntentSender()\n         * @deprecated Use\n         * {@link #setAuthentication(AutofillId[], IntentSender, Presentations)}\n         * instead.\n         ",
    "links" : [ "android.service.autofill.InlinePresentation", "#setAuthentication(AutofillId", "#setFooter(RemoteViews)", "android.service.autofill.AutofillService", "#setHeader(RemoteViews)" ]
  }, {
    "name" : "public Builder setAuthentication(@SuppressLint(\"ArrayReturn\") @NonNull AutofillId[] ids, @Nullable IntentSender authentication, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation, @Nullable InlinePresentation inlineTooltipPresentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Triggers a custom UI before autofilling the screen with any data set in this\n         * response.\n         *\n         * <p>This method like\n         * {@link #setAuthentication(AutofillId[], IntentSender, RemoteViews, InlinePresentation)}\n         * but allows setting an {@link InlinePresentation} for the inline suggestion tooltip.\n         *\n         * @deprecated Use\n         * {@link #setAuthentication(AutofillId[], IntentSender, Presentations)}\n         * instead.\n         ",
    "links" : [ "android.service.autofill.InlinePresentation", "#setAuthentication(AutofillId" ]
  }, {
    "name" : "public Builder setAuthentication(@SuppressLint(\"ArrayReturn\") @NonNull AutofillId[] ids, @Nullable IntentSender authentication, @Nullable Presentations presentations)",
    "returnType" : "Builder",
    "comment" : "\n         * Triggers a custom UI before autofilling the screen with any data set in this\n         * response.\n         *\n         * <p><b>Note:</b> Although the name of this method suggests that it should be used just for\n         * authentication flow, it can be used for other advanced flows; see {@link AutofillService}\n         * for examples.\n         *\n         * <p>This is typically useful when a user interaction is required to unlock their\n         * data vault if you encrypt the data set labels and data set data. It is recommended\n         * to encrypt only the sensitive data and not the data set labels which would allow\n         * auth on the data set level leading to a better user experience. Note that if you\n         * use sensitive data as a label, for example an email address, then it should also\n         * be encrypted. The provided {@link android.app.PendingIntent intent} must be an\n         * {@link Activity} which implements your authentication flow. Also if you provide an auth\n         * intent you also need to specify the presentation view to be shown in the fill UI\n         * for the user to trigger your authentication flow.\n         *\n         * <p>When a user triggers autofill, the system launches the provided intent\n         * whose extras will have the\n         * {@link android.view.autofill.AutofillManager#EXTRA_ASSIST_STRUCTURE screen\n         * content} and your {@link android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE\n         * client state}. Once you complete your authentication flow you should set the\n         * {@link Activity} result to {@link android.app.Activity#RESULT_OK} and set the\n         * {@link android.view.autofill.AutofillManager#EXTRA_AUTHENTICATION_RESULT} extra\n         * with the fully populated {@link FillResponse response} (or {@code null} if the screen\n         * cannot be autofilled).\n         *\n         * <p>For example, if you provided an empty {@link FillResponse response} because the\n         * user's data was locked and marked that the response needs an authentication then\n         * in the response returned if authentication succeeds you need to provide all\n         * available data sets some of which may need to be further authenticated, for\n         * example a credit card whose CVV needs to be entered.\n         *\n         * <p>If you provide an authentication intent you must also provide a presentation\n         * which is used to visualize the response for triggering the authentication\n         * flow.\n         *\n         * <p><b>Note:</b> Do not make the provided pending intent\n         * immutable by using {@link android.app.PendingIntent#FLAG_IMMUTABLE} as the\n         * platform needs to fill in the authentication arguments.\n         *\n         * <p><b>Note:</b> {@link #setHeader(RemoteViews)} or {@link #setFooter(RemoteViews)} does\n         * not work with {@link InlinePresentation}.</p>\n         *\n         * @param ids id of Views that when focused will display the authentication UI.\n         * @param authentication Intent to an activity with your authentication flow.\n         * @param presentations The presentations to visualize the response.\n         *\n         * @throws IllegalArgumentException if any of the following occurs:\n         * <ul>\n         *   <li>{@code ids} is {@code null}</li>\n         *   <li>{@code ids} is empty</li>\n         *   <li>{@code ids} contains a {@code null} element</li>\n         *   <li>{@code authentication} is {@code null}, but either or both of\n         *   {@code presentations.getPresentation()} and\n         *   {@code presentations.getInlinePresentation()} is non-{@code null}</li>\n         *   <li>{@code authentication} is non-{{@code null}, but both\n         *   {@code presentations.getPresentation()} and\n         *   {@code presentations.getInlinePresentation()} are {@code null}</li>\n         * </ul>\n         *\n         * @throws IllegalStateException if a {@link #setHeader(RemoteViews) header} or a\n         * {@link #setFooter(RemoteViews) footer} are already set for this builder.\n         *\n         * @return This builder.\n         ",
    "links" : [ "android.service.autofill.InlinePresentation", "android.view.autofill.AutofillManager#EXTRA_CLIENT_STATEclient", "android.app.Activity#RESULT_OK", "android.service.autofill.FillResponse", "android.view.autofill.AutofillManager#EXTRA_AUTHENTICATION_RESULT", "android.app.PendingIntent#FLAG_IMMUTABLE", "#setFooter(RemoteViews)", "android.service.autofill.AutofillService", "android.app.PendingIntent", "android.app.Activity", "#setHeader(RemoteViews)", "android.view.autofill.AutofillManager#EXTRA_ASSIST_STRUCTURE" ]
  }, {
    "name" : "private Builder setAuthentication(@SuppressLint(\"ArrayReturn\") @NonNull AutofillId[] ids, @Nullable IntentSender authentication, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation, @Nullable InlinePresentation inlineTooltipPresentation, @Nullable RemoteViews dialogPresentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Triggers a custom UI before autofilling the screen with any data set in this\n         * response.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIgnoredIds(AutofillId... ids)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies views that should not trigger new\n         * {@link AutofillService#onFillRequest(FillRequest, android.os.CancellationSignal,\n         * FillCallback)} requests.\n         *\n         * <p>This is typically used when the service cannot autofill the view; for example, a\n         * text field representing the result of a Captcha challenge.\n         ",
    "links" : [ "android.service.autofill.AutofillService#onFillRequest(FillRequest" ]
  }, {
    "name" : "public Builder addDataset(@Nullable Dataset dataset)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a new {@link Dataset} to this response.\n         *\n         * <p><b>Note: </b> on Android {@link android.os.Build.VERSION_CODES#O}, the total number of\n         * datasets is limited by the Binder transaction size, so it's recommended to keep it\n         * small (in the range of 10-20 at most) and use pagination by adding a fake\n         * {@link Dataset.Builder#setAuthentication(IntentSender) authenticated dataset} at the end\n         * with a presentation string like \"Next 10\" that would return a new {@link FillResponse}\n         * with the next 10 datasets, and so on. This limitation was lifted on\n         * Android {@link android.os.Build.VERSION_CODES#O_MR1}, although the Binder transaction\n         * size can still be reached if each dataset itself is too big.\n         *\n         * @return This builder.\n         ",
    "links" : [ "android.service.autofill.Dataset", "android.os.Build.VERSION_CODES#O", "android.service.autofill.FillResponse", "android.os.Build.VERSION_CODES#O_MR1", "Dataset.Builder#setAuthentication(IntentSender)" ]
  }, {
    "name" : "public Builder setDatasets(ArrayList<Dataset> dataset)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSaveInfo(@NonNull SaveInfo saveInfo)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the {@link SaveInfo} associated with this response.\n         *\n         * @return This builder.\n         ",
    "links" : [ "android.service.autofill.SaveInfo" ]
  }, {
    "name" : "public Builder setClientState(@Nullable Bundle clientState)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a bundle with state that is passed to subsequent APIs that manipulate this response.\n         *\n         * <p>You can use this bundle to store intermediate state that is passed to subsequent calls\n         * to {@link AutofillService#onFillRequest(FillRequest, android.os.CancellationSignal,\n         * FillCallback)} and {@link AutofillService#onSaveRequest(SaveRequest, SaveCallback)}, and\n         * you can also retrieve it by calling {@link FillEventHistory.Event#getClientState()}.\n         *\n         * <p>If this method is called on multiple {@link FillResponse} objects for the same\n         * screen, just the latest bundle is passed back to the service.\n         *\n         * @param clientState The custom client state.\n         * @return This builder.\n         ",
    "links" : [ "android.service.autofill.FillResponse", "android.service.autofill.AutofillService#onSaveRequest(SaveRequest", "android.service.autofill.AutofillService#onFillRequest(FillRequest", "FillEventHistory.Event#getClientState()" ]
  }, {
    "name" : "public Builder setFieldClassificationIds(@NonNull AutofillId... ids)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets which fields are used for\n         * <a href=\"AutofillService.html#FieldClassification\">field classification</a>\n         *\n         * <p><b>Note:</b> This method automatically adds the\n         * {@link FillResponse#FLAG_TRACK_CONTEXT_COMMITED} to the {@link #setFlags(int) flags}.\n\n         * @throws IllegalArgumentException is length of {@code ids} args is more than\n         * {@link UserData#getMaxFieldClassificationIdsSize()}.\n         * @throws IllegalStateException if {@link #build()} or {@link #disableAutofill(long)} was\n         * already called.\n         * @throws NullPointerException if {@code ids} or any element on it is {@code null}.\n         ",
    "links" : [ "#build()", "android.service.autofill.FillResponse#FLAG_TRACK_CONTEXT_COMMITED", "#setFlags(int)", "android.service.autofill.UserData#getMaxFieldClassificationIdsSize()", "#disableAutofill(long)" ]
  }, {
    "name" : "public Builder setFlags(@FillResponseFlags int flags)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets flags changing the response behavior.\n         *\n         * @param flags a combination of {@link #FLAG_TRACK_CONTEXT_COMMITED} and\n         * {@link #FLAG_DISABLE_ACTIVITY_ONLY}, or {@code 0}.\n         *\n         * @return This builder.\n         ",
    "links" : [ "#FLAG_DISABLE_ACTIVITY_ONLY", "#FLAG_TRACK_CONTEXT_COMMITED" ]
  }, {
    "name" : "public Builder disableAutofill(long duration)",
    "returnType" : "Builder",
    "comment" : "\n         * Disables autofill for the app or activity.\n         *\n         * <p>This method is useful to optimize performance in cases where the service knows it\n         * can not autofill an app&mdash;for example, when the service has a list of \"denylisted\"\n         * apps such as office suites.\n         *\n         * <p>By default, it disables autofill for all activities in the app, unless the response is\n         * {@link #setFlags(int) flagged} with {@link #FLAG_DISABLE_ACTIVITY_ONLY}.\n         *\n         * <p>Autofill for the app or activity is automatically re-enabled after any of the\n         * following conditions:\n         *\n         * <ol>\n         *   <li>{@code duration} milliseconds have passed.\n         *   <li>The autofill service for the user has changed.\n         *   <li>The device has rebooted.\n         * </ol>\n         *\n         * <p><b>Note:</b> Activities that are running when autofill is re-enabled remain\n         * disabled for autofill until they finish and restart.\n         *\n         * @param duration duration to disable autofill, in milliseconds.\n         *\n         * @return this builder\n         *\n         * @throws IllegalArgumentException if {@code duration} is not a positive number.\n         * @throws IllegalStateException if either {@link #addDataset(Dataset)},\n         *       {@link #setAuthentication(AutofillId[], IntentSender, Presentations)},\n         *       {@link #setSaveInfo(SaveInfo)}, {@link #setClientState(Bundle)}, or\n         *       {@link #setFieldClassificationIds(AutofillId...)} was already called.\n         ",
    "links" : [ "#FLAG_DISABLE_ACTIVITY_ONLY", "#setClientState(Bundle)", "#setFlags(int)", "#addDataset(Dataset)", "#setAuthentication(AutofillId", "#setSaveInfo(SaveInfo)", "#setFieldClassificationIds(AutofillId...)" ]
  }, {
    "name" : "public Builder setIconResourceId(@DrawableRes int id)",
    "returnType" : "Builder",
    "comment" : "\n         * Overwrites Save/Fill dialog header icon with a specific one specified by resource id.\n         * The image is pulled from the package, so id should be defined in the manifest.\n         *\n         * @param id {@link android.graphics.drawable.Drawable} resource id of the icon to be used.\n         * A value of 0 indicates to use the default header icon.\n         *\n         * @return this builder\n         ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public Builder setServiceDisplayNameResourceId(@StringRes int id)",
    "returnType" : "Builder",
    "comment" : "\n         * Overrides the service name in the Save Dialog header with a specific string defined\n         * in the service provider's manifest.xml\n         *\n         * @param id Resoure Id of the custom string defined in the provider's manifest. If set\n         * to 0, the default name will be used.\n         *\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShowFillDialogIcon(boolean show)",
    "returnType" : "Builder",
    "comment" : "\n         * Whether or not to show the Autofill provider icon inside of the Fill Dialog\n         *\n         * @param show True to show, false to hide. Defaults to true.\n         *\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShowSaveDialogIcon(boolean show)",
    "returnType" : "Builder",
    "comment" : "\n         * Whether or not to show the Autofill provider icon inside of the Save Dialog\n         *\n         * @param show True to show, false to hide. Defaults to true.\n         *\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setHeader(@NonNull RemoteViews header)",
    "returnType" : "Builder",
    "comment" : " TODO(b/69796626): make it sticky / update javadoc",
    "links" : [ ]
  }, {
    "name" : "public Builder setFooter(@NonNull RemoteViews footer)",
    "returnType" : "Builder",
    "comment" : " TODO(b/69796626): make it sticky / update javadoc",
    "links" : [ ]
  }, {
    "name" : "public Builder setUserData(@NonNull UserData userData)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a specific {@link UserData} for field classification for this request only.\n         *\n         * <p>Any fields in this UserData will override corresponding fields in the generic\n         * UserData object\n         *\n         * @return this builder\n         * @throws IllegalStateException if the FillResponse\n         * {@link #setAuthentication(AutofillId[], IntentSender, Presentations)\n         * requires authentication}.\n         ",
    "links" : [ "#setAuthentication(AutofillId", "android.service.autofill.UserData" ]
  }, {
    "name" : "public Builder setPresentationCancelIds(@Nullable int[] ids)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets target resource IDs of the child view in {@link RemoteViews Presentation Template}\n         * which will cancel the session when clicked.\n         * Those targets will be respectively applied to a child of the header, footer and\n         * each {@link Dataset}.\n         *\n         * @param ids array of the resource id. Empty list or non-existing id has no effect.\n         *\n         * @return this builder\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         ",
    "links" : [ "android.widget.RemoteViews", "android.service.autofill.Dataset", "#build()" ]
  }, {
    "name" : "public Builder setDialogHeader(@NonNull RemoteViews header)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the presentation of header in fill dialog UI. The header should have\n         * a prompt for what datasets are shown in the dialog. If this is not set,\n         * the dialog only shows your application icon.\n         *\n         * More details about the fill dialog, see\n         * <a href=\"Dataset.html#FillDialogUI\">fill dialog UI</a>\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFillDialogTriggerIds(@NonNull AutofillId... ids)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets which fields are used for the fill dialog UI.\n         *\n         * More details about the fill dialog, see\n         * <a href=\"Dataset.html#FillDialogUI\">fill dialog UI</a>\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         * @throws NullPointerException if {@code ids} or any element on it is {@code null}.\n         ",
    "links" : [ "#build()" ]
  }, {
    "name" : "public Builder setDialogPendingIntent(@NonNull PendingIntent pendingIntent)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets credential dialog pending intent. Framework will use the intent to launch the\n         * selector UI. A replacement for previous fill bottom sheet.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         * @throws NullPointerException if {@code pendingIntent} is {@code null}.\n         *\n         * @hide\n         ",
    "links" : [ "#build()" ]
  }, {
    "name" : "public FillResponse build()",
    "returnType" : "FillResponse",
    "comment" : "\n         * Builds a new {@link FillResponse} instance.\n         *\n         * @throws IllegalStateException if any of the following conditions occur:\n         * <ol>\n         *   <li>{@link #build()} was already called.\n         *   <li>No call was made to {@link #addDataset(Dataset)},\n         *       {@link #setAuthentication(AutofillId[], IntentSender, Presentations)},\n         *       {@link #setSaveInfo(SaveInfo)}, {@link #disableAutofill(long)},\n         *       {@link #setClientState(Bundle)},\n         *       or {@link #setFieldClassificationIds(AutofillId...)}.\n         *   <li>{@link #setHeader(RemoteViews)} or {@link #setFooter(RemoteViews)} is called\n         *       without any previous calls to {@link #addDataset(Dataset)}.\n         * </ol>\n         *\n         * @return A built response.\n         ",
    "links" : [ "#build()", "android.service.autofill.FillResponse", "#setClientState(Bundle)", "#addDataset(Dataset)", "#setAuthentication(AutofillId", "#setFooter(RemoteViews)", "#setSaveInfo(SaveInfo)", "#setFieldClassificationIds(AutofillId...)", "#setHeader(RemoteViews)", "#disableAutofill(long)" ]
  }, {
    "name" : "private void throwIfDestroyed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfDisableAutofillCalled()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfAuthenticationCalled()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setDetectedFieldClassifications(@NonNull Set<FieldClassification> fieldInfos)", "public Builder setAuthentication(@NonNull AutofillId[] ids, @Nullable IntentSender authentication, @Nullable RemoteViews presentation)", "public Builder setAuthentication(@NonNull AutofillId[] ids, @Nullable IntentSender authentication, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation)", "public Builder setAuthentication(@SuppressLint(\"ArrayReturn\") @NonNull AutofillId[] ids, @Nullable IntentSender authentication, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation, @Nullable InlinePresentation inlineTooltipPresentation)", "public Builder setAuthentication(@SuppressLint(\"ArrayReturn\") @NonNull AutofillId[] ids, @Nullable IntentSender authentication, @Nullable Presentations presentations)", "private Builder setAuthentication(@SuppressLint(\"ArrayReturn\") @NonNull AutofillId[] ids, @Nullable IntentSender authentication, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation, @Nullable InlinePresentation inlineTooltipPresentation, @Nullable RemoteViews dialogPresentation)", "public Builder setIgnoredIds(AutofillId... ids)", "public Builder addDataset(@Nullable Dataset dataset)", "public Builder setDatasets(ArrayList<Dataset> dataset)", "public Builder setSaveInfo(@NonNull SaveInfo saveInfo)", "public Builder setClientState(@Nullable Bundle clientState)", "public Builder setFieldClassificationIds(@NonNull AutofillId... ids)", "public Builder setFlags(@FillResponseFlags int flags)", "public Builder disableAutofill(long duration)", "public Builder setIconResourceId(@DrawableRes int id)", "public Builder setServiceDisplayNameResourceId(@StringRes int id)", "public Builder setShowFillDialogIcon(boolean show)", "public Builder setShowSaveDialogIcon(boolean show)", "public Builder setHeader(@NonNull RemoteViews header)", "public Builder setFooter(@NonNull RemoteViews footer)", "public Builder setUserData(@NonNull UserData userData)", "public Builder setPresentationCancelIds(@Nullable int[] ids)", "public Builder setDialogHeader(@NonNull RemoteViews header)", "public Builder setFillDialogTriggerIds(@NonNull AutofillId... ids)", "public Builder setDialogPendingIntent(@NonNull PendingIntent pendingIntent)", "public FillResponse build()", "private void throwIfDestroyed()", "private void throwIfDisableAutofillCalled()", "private void throwIfAuthenticationCalled()" ],
  "variableNames" : [ "mDatasets", "mSaveInfo", "mClientState", "mPresentation", "mInlinePresentation", "mInlineTooltipPresentation", "mDialogPresentation", "mDialogHeader", "mHeader", "mFooter", "mAuthentication", "mAuthenticationIds", "mIgnoredIds", "mDisableDuration", "mFieldClassificationIds", "mFillDialogTriggerIds", "mFlags", "mDestroyed", "mUserData", "mCancelIds", "mSupportsInlineSuggestions", "mIconResourceId", "mServiceDisplayNameResourceId", "mShowFillDialogIcon", "mShowSaveDialogIcon", "mDetectedFieldTypes", "mDialogPendingIntent" ]
}