{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/textclassifier/TextClassification.java",
  "packageName" : "android.view.textclassifier",
  "className" : "TextClassification",
  "comment" : "\n * Information for generating a widget to handle classified text.\n *\n * <p>A TextClassification object contains icons, labels, onClickListeners and intents that may\n * be used to build a widget that can be used to act on classified text. There is the concept of a\n * <i>primary action</i> and other <i>secondary actions</i>.\n *\n * <p>e.g. building a view that, when clicked, shares the classified text with the preferred app:\n *\n * <pre>{@code\n *   // Called preferably outside the UiThread.\n *   TextClassification classification = textClassifier.classifyText(allText, 10, 25);\n *\n *   // Called on the UiThread.\n *   Button button = new Button(context);\n *   button.setCompoundDrawablesWithIntrinsicBounds(classification.getIcon(), null, null, null);\n *   button.setText(classification.getLabel());\n *   button.setOnClickListener(v -> classification.getActions().get(0).getActionIntent().send());\n * }</pre>\n *\n * <p>e.g. starting an action mode with menu items that can handle the classified text:\n *\n * <pre>{@code\n *   // Called preferably outside the UiThread.\n *   final TextClassification classification = textClassifier.classifyText(allText, 10, 25);\n *\n *   // Called on the UiThread.\n *   view.startActionMode(new ActionMode.Callback() {\n *\n *       public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n *           for (int i = 0; i < classification.getActions().size(); ++i) {\n *              RemoteAction action = classification.getActions().get(i);\n *              menu.add(Menu.NONE, i, 20, action.getTitle())\n *                 .setIcon(action.getIcon());\n *           }\n *           return true;\n *       }\n *\n *       public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n *           classification.getActions().get(item.getItemId()).getActionIntent().send();\n *           return true;\n *       }\n *\n *       ...\n *   });\n * }</pre>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EMPTY",
    "type" : "TextClassification",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_LEGACY_ICON_SIZE",
    "type" : "int",
    "comment" : " TODO(toki): investigate a way to derive this based on device properties.",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLegacyIcon",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLegacyLabel",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLegacyIntent",
    "type" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLegacyOnClickListener",
    "type" : "OnClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActions",
    "type" : "List<RemoteAction>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEntityConfidence",
    "type" : "EntityConfidence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<TextClassification>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getText()",
    "returnType" : "String",
    "comment" : "\n     * Gets the classified text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEntityCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of entities found in the classified text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEntity(int index)",
    "returnType" : "String",
    "comment" : "\n     * Returns the entity at the specified index. Entities are ordered from high confidence\n     * to low confidence.\n     *\n     * @throws IndexOutOfBoundsException if the specified index is out of range.\n     * @see #getEntityCount() for the number of entities available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getConfidenceScore(@EntityType String entity)",
    "returnType" : "float",
    "comment" : "\n     * Returns the confidence score for the specified entity. The value ranges from\n     * 0 (low confidence) to 1 (high confidence). 0 indicates that the entity was not found for the\n     * classified text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<RemoteAction> getActions()",
    "returnType" : "List<RemoteAction>",
    "comment" : "\n     * Returns a list of actions that may be performed on the text. The list is ordered based on\n     * the likelihood that a user will use the action, with the most likely action appearing first.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getIcon()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns an icon that may be rendered on a widget used to act on the classified text.\n     *\n     * <p><strong>NOTE: </strong>This field is not parcelable and only represents the icon of the\n     * first {@link RemoteAction} (if one exists) when this object is read from a parcel.\n     *\n     * @deprecated Use {@link #getActions()} instead.\n     ",
    "links" : [ "#getActions()", "android.app.RemoteAction" ]
  }, {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a label that may be rendered on a widget used to act on the classified text.\n     *\n     * <p><strong>NOTE: </strong>This field is not parcelable and only represents the label of the\n     * first {@link RemoteAction} (if one exists) when this object is read from a parcel.\n     *\n     * @deprecated Use {@link #getActions()} instead.\n     ",
    "links" : [ "#getActions()", "android.app.RemoteAction" ]
  }, {
    "name" : "public Intent getIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an intent that may be fired to act on the classified text.\n     *\n     * <p><strong>NOTE: </strong>This field is not parcelled and will always return null when this\n     * object is read from a parcel.\n     *\n     * @deprecated Use {@link #getActions()} instead.\n     ",
    "links" : [ "#getActions()" ]
  }, {
    "name" : "public OnClickListener getOnClickListener()",
    "returnType" : "OnClickListener",
    "comment" : "\n     * Returns the OnClickListener that may be triggered to act on the classified text.\n     *\n     * <p><strong>NOTE: </strong>This field is not parcelable and only represents the first\n     * {@link RemoteAction} (if one exists) when this object is read from a parcel.\n     *\n     * @deprecated Use {@link #getActions()} instead.\n     ",
    "links" : [ "#getActions()", "android.app.RemoteAction" ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the id, if one exists, for this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the extended data.\n     *\n     * <p><b>NOTE: </b>Do not modify this bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Builder toBuilder()",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static OnClickListener createIntentOnClickListener(@NonNull final PendingIntent intent)",
    "returnType" : "OnClickListener",
    "comment" : "\n     * Creates an OnClickListener that triggers the specified PendingIntent.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PendingIntent createPendingIntent(@NonNull final Context context, @NonNull final Intent intent, int requestCode)",
    "returnType" : "PendingIntent",
    "comment" : "\n     * Creates a PendingIntent for the specified intent.\n     * Returns null if the intent is not supported for the specified context.\n     *\n     * @throws IllegalArgumentException if context or intent is null\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Drawable maybeLoadDrawable(Icon icon)",
    "returnType" : "Drawable",
    "comment" : " Best effort attempt to try to load a drawable from the provided icon.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getText()", "public int getEntityCount()", "public String getEntity(int index)", "public float getConfidenceScore(@EntityType String entity)", "public List<RemoteAction> getActions()", "public Drawable getIcon()", "public CharSequence getLabel()", "public Intent getIntent()", "public OnClickListener getOnClickListener()", "public String getId()", "public Bundle getExtras()", "public Builder toBuilder()", "public String toString()", "public static OnClickListener createIntentOnClickListener(@NonNull final PendingIntent intent)", "public static PendingIntent createPendingIntent(@NonNull final Context context, @NonNull final Intent intent, int requestCode)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "private static Drawable maybeLoadDrawable(Icon icon)" ],
  "variableNames" : [ "EMPTY", "LOG_TAG", "MAX_LEGACY_ICON_SIZE", "mText", "mLegacyIcon", "mLegacyLabel", "mLegacyIntent", "mLegacyOnClickListener", "mActions", "mEntityConfidence", "mId", "mExtras", "CREATOR" ]
}