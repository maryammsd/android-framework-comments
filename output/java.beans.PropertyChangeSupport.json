{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/beans/PropertyChangeSupport.java",
  "packageName" : "java.beans",
  "className" : "PropertyChangeSupport",
  "comment" : "\n * This is a utility class that can be used by beans that support bound\n * properties.  It manages a list of listeners and dispatches\n * {@link PropertyChangeEvent}s to them.  You can use an instance of this class\n * as a member field of your bean and delegate these types of work to it.\n * The {@link PropertyChangeListener} can be registered for all properties\n * or for a property specified by name.\n * <p>\n * Here is an example of {@code PropertyChangeSupport} usage that follows\n * the rules and recommendations laid out in the JavaBeans&trade; specification:\n * <pre>\n * public class MyBean {\n *     private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);\n *\n *     public void addPropertyChangeListener(PropertyChangeListener listener) {\n *         this.pcs.addPropertyChangeListener(listener);\n *     }\n *\n *     public void removePropertyChangeListener(PropertyChangeListener listener) {\n *         this.pcs.removePropertyChangeListener(listener);\n *     }\n *\n *     private String value;\n *\n *     public String getValue() {\n *         return this.value;\n *     }\n *\n *     public void setValue(String newValue) {\n *         String oldValue = this.value;\n *         this.value = newValue;\n *         this.pcs.firePropertyChange(\"value\", oldValue, newValue);\n *     }\n *\n *     [...]\n * }\n * </pre>\n * <p>\n * A {@code PropertyChangeSupport} instance is thread-safe.\n * <p>\n * This class is serializable.  When it is serialized it will save\n * (and restore) any listeners that are themselves serializable.  Any\n * non-serializable listeners will be skipped during serialization.\n ",
  "links" : [ "java.beans.PropertyChangeListener", "java.beans.PropertyChangeEvent" ],
  "variables" : [ {
    "name" : "map",
    "type" : "PropertyChangeListenerMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "source",
    "type" : "Object",
    "comment" : "\n     * The object to be provided as the \"source\" for any generated events.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : "\n     * @serialField children                                   Hashtable\n     * @serialField source                                     Object\n     * @serialField propertyChangeSupportSerializedDataVersion int\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Serialization version ID, so we're compatible with JDK 1.1\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addPropertyChangeListener(PropertyChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a PropertyChangeListener to the listener list.\n     * The listener is registered for all properties.\n     * The same listener object may be added more than once, and will be called\n     * as many times as it is added.\n     * If <code>listener</code> is null, no exception is thrown and no action\n     * is taken.\n     *\n     * @param listener  The PropertyChangeListener to be added\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removePropertyChangeListener(PropertyChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a PropertyChangeListener from the listener list.\n     * This removes a PropertyChangeListener that was registered\n     * for all properties.\n     * If <code>listener</code> was added more than once to the same event\n     * source, it will be notified one less time after being removed.\n     * If <code>listener</code> is null, or was never added, no exception is\n     * thrown and no action is taken.\n     *\n     * @param listener  The PropertyChangeListener to be removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public PropertyChangeListener[] getPropertyChangeListeners()",
    "returnType" : "PropertyChangeListener[]",
    "comment" : "\n     * Returns an array of all the listeners that were added to the\n     * PropertyChangeSupport object with addPropertyChangeListener().\n     * <p>\n     * If some listeners have been added with a named property, then\n     * the returned array will be a mixture of PropertyChangeListeners\n     * and <code>PropertyChangeListenerProxy</code>s. If the calling\n     * method is interested in distinguishing the listeners then it must\n     * test each element to see if it's a\n     * <code>PropertyChangeListenerProxy</code>, perform the cast, and examine\n     * the parameter.\n     *\n     * <pre>{@code\n     * PropertyChangeListener[] listeners = bean.getPropertyChangeListeners();\n     * for (int i = 0; i < listeners.length; i++) {\n     *   if (listeners[i] instanceof PropertyChangeListenerProxy) {\n     *     PropertyChangeListenerProxy proxy =\n     *                    (PropertyChangeListenerProxy)listeners[i];\n     *     if (proxy.getPropertyName().equals(\"foo\")) {\n     *       // proxy is a PropertyChangeListener which was associated\n     *       // with the property named \"foo\"\n     *     }\n     *   }\n     * }\n     * }</pre>\n     *\n     * @see PropertyChangeListenerProxy\n     * @return all of the <code>PropertyChangeListeners</code> added or an\n     *         empty array if no listeners have been added\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a PropertyChangeListener for a specific property.  The listener\n     * will be invoked only when a call on firePropertyChange names that\n     * specific property.\n     * The same listener object may be added more than once.  For each\n     * property,  the listener will be invoked the number of times it was added\n     * for that property.\n     * If <code>propertyName</code> or <code>listener</code> is null, no\n     * exception is thrown and no action is taken.\n     *\n     * @param propertyName  The name of the property to listen on.\n     * @param listener  The PropertyChangeListener to be added\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a PropertyChangeListener for a specific property.\n     * If <code>listener</code> was added more than once to the same event\n     * source for the specified property, it will be notified one less time\n     * after being removed.\n     * If <code>propertyName</code> is null,  no exception is thrown and no\n     * action is taken.\n     * If <code>listener</code> is null, or was never added for the specified\n     * property, no exception is thrown and no action is taken.\n     *\n     * @param propertyName  The name of the property that was listened on.\n     * @param listener  The PropertyChangeListener to be removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public PropertyChangeListener[] getPropertyChangeListeners(String propertyName)",
    "returnType" : "PropertyChangeListener[]",
    "comment" : "\n     * Returns an array of all the listeners which have been associated\n     * with the named property.\n     *\n     * @param propertyName  The name of the property being listened to\n     * @return all of the <code>PropertyChangeListeners</code> associated with\n     *         the named property.  If no such listeners have been added,\n     *         or if <code>propertyName</code> is null, an empty array is\n     *         returned.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public void firePropertyChange(String propertyName, Object oldValue, Object newValue)",
    "returnType" : "void",
    "comment" : "\n     * Reports a bound property update to listeners\n     * that have been registered to track updates of\n     * all properties or a property with the specified name.\n     * <p>\n     * No event is fired if old and new values are equal and non-null.\n     * <p>\n     * This is merely a convenience wrapper around the more general\n     * {@link #firePropertyChange(PropertyChangeEvent)} method.\n     *\n     * @param propertyName  the programmatic name of the property that was changed\n     * @param oldValue      the old value of the property\n     * @param newValue      the new value of the property\n     ",
    "links" : [ "#firePropertyChange(PropertyChangeEvent)" ]
  }, {
    "name" : "public void firePropertyChange(String propertyName, int oldValue, int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Reports an integer bound property update to listeners\n     * that have been registered to track updates of\n     * all properties or a property with the specified name.\n     * <p>\n     * No event is fired if old and new values are equal.\n     * <p>\n     * This is merely a convenience wrapper around the more general\n     * {@link #firePropertyChange(String, Object, Object)}  method.\n     *\n     * @param propertyName  the programmatic name of the property that was changed\n     * @param oldValue      the old value of the property\n     * @param newValue      the new value of the property\n     ",
    "links" : [ "#firePropertyChange(String" ]
  }, {
    "name" : "public void firePropertyChange(String propertyName, boolean oldValue, boolean newValue)",
    "returnType" : "void",
    "comment" : "\n     * Reports a boolean bound property update to listeners\n     * that have been registered to track updates of\n     * all properties or a property with the specified name.\n     * <p>\n     * No event is fired if old and new values are equal.\n     * <p>\n     * This is merely a convenience wrapper around the more general\n     * {@link #firePropertyChange(String, Object, Object)}  method.\n     *\n     * @param propertyName  the programmatic name of the property that was changed\n     * @param oldValue      the old value of the property\n     * @param newValue      the new value of the property\n     ",
    "links" : [ "#firePropertyChange(String" ]
  }, {
    "name" : "public void firePropertyChange(PropertyChangeEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Fires a property change event to listeners\n     * that have been registered to track updates of\n     * all properties or a property with the specified name.\n     * <p>\n     * No event is fired if the given event's old and new values are equal and non-null.\n     *\n     * @param event  the {@code PropertyChangeEvent} to be fired\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void fire(PropertyChangeListener[] listeners, PropertyChangeEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void fireIndexedPropertyChange(String propertyName, int index, Object oldValue, Object newValue)",
    "returnType" : "void",
    "comment" : "\n     * Reports a bound indexed property update to listeners\n     * that have been registered to track updates of\n     * all properties or a property with the specified name.\n     * <p>\n     * No event is fired if old and new values are equal and non-null.\n     * <p>\n     * This is merely a convenience wrapper around the more general\n     * {@link #firePropertyChange(PropertyChangeEvent)} method.\n     *\n     * @param propertyName  the programmatic name of the property that was changed\n     * @param index         the index of the property element that was changed\n     * @param oldValue      the old value of the property\n     * @param newValue      the new value of the property\n     * @since 1.5\n     ",
    "links" : [ "#firePropertyChange(PropertyChangeEvent)" ]
  }, {
    "name" : "public void fireIndexedPropertyChange(String propertyName, int index, int oldValue, int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Reports an integer bound indexed property update to listeners\n     * that have been registered to track updates of\n     * all properties or a property with the specified name.\n     * <p>\n     * No event is fired if old and new values are equal.\n     * <p>\n     * This is merely a convenience wrapper around the more general\n     * {@link #fireIndexedPropertyChange(String, int, Object, Object)} method.\n     *\n     * @param propertyName  the programmatic name of the property that was changed\n     * @param index         the index of the property element that was changed\n     * @param oldValue      the old value of the property\n     * @param newValue      the new value of the property\n     * @since 1.5\n     ",
    "links" : [ "#fireIndexedPropertyChange(String" ]
  }, {
    "name" : "public void fireIndexedPropertyChange(String propertyName, int index, boolean oldValue, boolean newValue)",
    "returnType" : "void",
    "comment" : "\n     * Reports a boolean bound indexed property update to listeners\n     * that have been registered to track updates of\n     * all properties or a property with the specified name.\n     * <p>\n     * No event is fired if old and new values are equal.\n     * <p>\n     * This is merely a convenience wrapper around the more general\n     * {@link #fireIndexedPropertyChange(String, int, Object, Object)} method.\n     *\n     * @param propertyName  the programmatic name of the property that was changed\n     * @param index         the index of the property element that was changed\n     * @param oldValue      the old value of the property\n     * @param newValue      the new value of the property\n     * @since 1.5\n     ",
    "links" : [ "#fireIndexedPropertyChange(String" ]
  }, {
    "name" : "public boolean hasListeners(String propertyName)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if there are any listeners for a specific property, including\n     * those registered on all properties.  If <code>propertyName</code>\n     * is null, only check for listeners registered on all properties.\n     *\n     * @param propertyName  the property name.\n     * @return true if there are one or more listeners for the given property\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @serialData Null terminated list of <code>PropertyChangeListeners</code>.\n     * <p>\n     * At serialization time we skip non-serializable listeners and\n     * only serialize the serializable listeners.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void addPropertyChangeListener(PropertyChangeListener listener)", "public void removePropertyChangeListener(PropertyChangeListener listener)", "public PropertyChangeListener[] getPropertyChangeListeners()", "public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)", "public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)", "public PropertyChangeListener[] getPropertyChangeListeners(String propertyName)", "public void firePropertyChange(String propertyName, Object oldValue, Object newValue)", "public void firePropertyChange(String propertyName, int oldValue, int newValue)", "public void firePropertyChange(String propertyName, boolean oldValue, boolean newValue)", "public void firePropertyChange(PropertyChangeEvent event)", "private static void fire(PropertyChangeListener[] listeners, PropertyChangeEvent event)", "public void fireIndexedPropertyChange(String propertyName, int index, Object oldValue, Object newValue)", "public void fireIndexedPropertyChange(String propertyName, int index, int oldValue, int newValue)", "public void fireIndexedPropertyChange(String propertyName, int index, boolean oldValue, boolean newValue)", "public boolean hasListeners(String propertyName)", "private void writeObject(ObjectOutputStream s) throws IOException", "private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException" ],
  "variableNames" : [ "map", "source", "serialPersistentFields", "serialVersionUID" ]
}