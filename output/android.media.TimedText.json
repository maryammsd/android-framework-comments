{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/TimedText.java",
  "packageName" : "android.media",
  "className" : "TimedText",
  "comment" : "\n * Class to hold the timed text's metadata, including:\n * <ul>\n * <li> The characters for rendering</li>\n * <li> The rendering position for the timed text</li>\n * </ul>\n *\n * <p> To render the timed text, applications need to do the following:\n *\n * <ul>\n * <li> Implement the {@link MediaPlayer.OnTimedTextListener} interface</li>\n * <li> Register the {@link MediaPlayer.OnTimedTextListener} callback on a MediaPlayer object that is used for playback</li>\n * <li> When a onTimedText callback is received, do the following:\n * <ul>\n * <li> call {@link #getText} to get the characters for rendering</li>\n * <li> call {@link #getBounds} to get the text rendering area/region</li>\n * </ul>\n * </li>\n * </ul>\n *\n * @see android.media.MediaPlayer\n ",
  "variables" : [ {
    "name" : "FIRST_PUBLIC_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DISPLAY_FLAGS",
    "type" : "int",
    "comment" : " int",
    "links" : [ ]
  }, {
    "name" : "KEY_STYLE_FLAGS",
    "type" : "int",
    "comment" : " int",
    "links" : [ ]
  }, {
    "name" : "KEY_BACKGROUND_COLOR_RGBA",
    "type" : "int",
    "comment" : " int",
    "links" : [ ]
  }, {
    "name" : "KEY_HIGHLIGHT_COLOR_RGBA",
    "type" : "int",
    "comment" : " int",
    "links" : [ ]
  }, {
    "name" : "KEY_SCROLL_DELAY",
    "type" : "int",
    "comment" : " int",
    "links" : [ ]
  }, {
    "name" : "KEY_WRAP_TEXT",
    "type" : "int",
    "comment" : " int",
    "links" : [ ]
  }, {
    "name" : "KEY_START_TIME",
    "type" : "int",
    "comment" : " int",
    "links" : [ ]
  }, {
    "name" : "KEY_STRUCT_BLINKING_TEXT_LIST",
    "type" : "int",
    "comment" : " List<CharPos>",
    "links" : [ ]
  }, {
    "name" : "KEY_STRUCT_FONT_LIST",
    "type" : "int",
    "comment" : " List<Font>",
    "links" : [ ]
  }, {
    "name" : "KEY_STRUCT_HIGHLIGHT_LIST",
    "type" : "int",
    "comment" : " List<CharPos>",
    "links" : [ ]
  }, {
    "name" : "KEY_STRUCT_HYPER_TEXT_LIST",
    "type" : "int",
    "comment" : " List<HyperText>",
    "links" : [ ]
  }, {
    "name" : "KEY_STRUCT_KARAOKE_LIST",
    "type" : "int",
    "comment" : " List<Karaoke>",
    "links" : [ ]
  }, {
    "name" : "KEY_STRUCT_STYLE_LIST",
    "type" : "int",
    "comment" : " List<Style>",
    "links" : [ ]
  }, {
    "name" : "KEY_STRUCT_TEXT_POS",
    "type" : "int",
    "comment" : " TextPos",
    "links" : [ ]
  }, {
    "name" : "KEY_STRUCT_JUSTIFICATION",
    "type" : "int",
    "comment" : " Justification",
    "links" : [ ]
  }, {
    "name" : "KEY_STRUCT_TEXT",
    "type" : "int",
    "comment" : " Text",
    "links" : [ ]
  }, {
    "name" : "LAST_PUBLIC_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIRST_PRIVATE_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_GLOBAL_SETTING",
    "type" : "int",
    "comment" : " TextDescription.cpp in order to parce the Parcel.",
    "links" : [ ]
  }, {
    "name" : "KEY_LOCAL_SETTING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_START_CHAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_END_CHAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_FONT_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_FONT_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_TEXT_COLOR_RGBA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LAST_PRIVATE_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyObjectMap",
    "type" : "HashMap<Integer, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackgroundColorRGBA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHighlightColorRGBA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollDelay",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWrapText",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlinkingPosList",
    "type" : "List<CharPos>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHighlightPosList",
    "type" : "List<CharPos>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKaraokeList",
    "type" : "List<Karaoke>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFontList",
    "type" : "List<Font>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStyleList",
    "type" : "List<Style>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHyperTextList",
    "type" : "List<HyperText>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextChars",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJustification",
    "type" : "Justification",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getText()",
    "returnType" : "String",
    "comment" : "\n     * Get the characters in the timed text.\n     *\n     * @return the characters as a String object in the TimedText. Applications\n     * should stop rendering previous timed text at the current rendering region if\n     * a null is returned, until the next non-null timed text is received.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * Get the rectangle area or region for rendering the timed text as specified\n     * by a Rect object.\n     *\n     * @return the rectangle region to render the characters in the timed text.\n     * If no bounds information is available (a null is returned), render the\n     * timed text at the center bottom of the display.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean parseParcel(Parcel parcel)",
    "returnType" : "boolean",
    "comment" : "\n     * Go over all the records, collecting metadata keys and fields in the\n     * Parcel. These are stored in mKeyObjectMap for application to retrieve.\n     * @return false if an error occurred during parsing. Otherwise, true.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readStyle(Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * To parse and store the Style list.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readFont(Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * To parse and store the Font list\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readHighlight(Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * To parse and store the Highlight list\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readKaraoke(Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * To parse and store the Karaoke list\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readHyperText(Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * To parse and store HyperText list\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readBlinkingText(Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * To parse and store blinking text list\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidKey(final int key)",
    "returnType" : "boolean",
    "comment" : "\n     * To check whether the given key is valid.\n     * @param key the key to be checked.\n     * @return true if the key is a valid one. Otherwise, false.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean containsKey(final int key)",
    "returnType" : "boolean",
    "comment" : "\n     * To check whether the given key is contained in this TimedText object.\n     * @param key the key to be checked.\n     * @return true if the key is contained in this TimedText object.\n     *         Otherwise, false.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Set keySet()",
    "returnType" : "Set",
    "comment" : "\n     * @return a set of the keys contained in this TimedText object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object getObject(final int key)",
    "returnType" : "Object",
    "comment" : "\n     * To retrieve the object associated with the key. Caller must make sure\n     * the key is present using the containsKey method otherwise a\n     * RuntimeException will occur.\n     * @param key the key used to retrieve the object.\n     * @return an object. The object could be 1) an instance of Integer; 2) a\n     * List of CharPos, Karaoke, Font, Style, and HyperText, or 3) an instance of\n     * Justification.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "FIRST_PUBLIC_KEY", "KEY_DISPLAY_FLAGS", "KEY_STYLE_FLAGS", "KEY_BACKGROUND_COLOR_RGBA", "KEY_HIGHLIGHT_COLOR_RGBA", "KEY_SCROLL_DELAY", "KEY_WRAP_TEXT", "KEY_START_TIME", "KEY_STRUCT_BLINKING_TEXT_LIST", "KEY_STRUCT_FONT_LIST", "KEY_STRUCT_HIGHLIGHT_LIST", "KEY_STRUCT_HYPER_TEXT_LIST", "KEY_STRUCT_KARAOKE_LIST", "KEY_STRUCT_STYLE_LIST", "KEY_STRUCT_TEXT_POS", "KEY_STRUCT_JUSTIFICATION", "KEY_STRUCT_TEXT", "LAST_PUBLIC_KEY", "FIRST_PRIVATE_KEY", "KEY_GLOBAL_SETTING", "KEY_LOCAL_SETTING", "KEY_START_CHAR", "KEY_END_CHAR", "KEY_FONT_ID", "KEY_FONT_SIZE", "KEY_TEXT_COLOR_RGBA", "LAST_PRIVATE_KEY", "TAG", "mKeyObjectMap", "mDisplayFlags", "mBackgroundColorRGBA", "mHighlightColorRGBA", "mScrollDelay", "mWrapText", "mBlinkingPosList", "mHighlightPosList", "mKaraokeList", "mFontList", "mStyleList", "mHyperTextList", "mTextBounds", "mTextChars", "mJustification" ],
  "methodNames" : [ "public String getText()", "public Rect getBounds()", "private boolean parseParcel(Parcel parcel)", "private void readStyle(Parcel parcel)", "private void readFont(Parcel parcel)", "private void readHighlight(Parcel parcel)", "private void readKaraoke(Parcel parcel)", "private void readHyperText(Parcel parcel)", "private void readBlinkingText(Parcel parcel)", "private boolean isValidKey(final int key)", "private boolean containsKey(final int key)", "private Set keySet()", "private Object getObject(final int key)" ]
}