{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/nfc/cardemulation/ApduServiceInfo.java",
  "packageName" : "android.nfc.cardemulation",
  "className" : "ApduServiceInfo",
  "comment" : "\n * Class holding APDU service info.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ResolveInfo",
    "comment" : "\n     * The service that implements this\n     ",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "String",
    "comment" : "\n     * Description of the service\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnHost",
    "type" : "boolean",
    "comment" : "\n     * Whether this service represents AIDs running on the host CPU\n     ",
    "links" : [ ]
  }, {
    "name" : "mOffHostName",
    "type" : "String",
    "comment" : "\n     * Offhost reader name.\n     * eg: SIM, eSE etc\n     ",
    "links" : [ ]
  }, {
    "name" : "mStaticOffHostName",
    "type" : "String",
    "comment" : "\n     * Offhost reader name from manifest file.\n     * Used for resetOffHostSecureElement()\n     ",
    "links" : [ ]
  }, {
    "name" : "mStaticAidGroups",
    "type" : "HashMap<String, AidGroup>",
    "comment" : "\n     * Mapping from category to static AID group\n     ",
    "links" : [ ]
  }, {
    "name" : "mDynamicAidGroups",
    "type" : "HashMap<String, AidGroup>",
    "comment" : "\n     * Mapping from category to dynamic AID group\n     ",
    "links" : [ ]
  }, {
    "name" : "mAutoTransact",
    "type" : "Map<String, Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoTransactPatterns",
    "type" : "Map<Pattern, Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequiresDeviceUnlock",
    "type" : "boolean",
    "comment" : "\n     * Whether this service should only be started when the device is unlocked.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRequiresDeviceScreenOn",
    "type" : "boolean",
    "comment" : "\n     * Whether this service should only be started when the device is screen on.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBannerResourceId",
    "type" : "int",
    "comment" : "\n     * The id of the service banner specified in XML.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUid",
    "type" : "int",
    "comment" : "\n     * The uid of the package the service belongs to\n     ",
    "links" : [ ]
  }, {
    "name" : "mSettingsActivityName",
    "type" : "String",
    "comment" : "\n     * Settings Activity for this service\n     ",
    "links" : [ ]
  }, {
    "name" : "mCategoryOtherServiceEnabled",
    "type" : "boolean",
    "comment" : "\n     * State of the service for CATEGORY_OTHER selection\n     ",
    "links" : [ ]
  }, {
    "name" : "mShouldDefaultToObserveMode",
    "type" : "boolean",
    "comment" : "\n     * Whether the NFC stack should default to Observe Mode when this preferred service.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ApduServiceInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AID_PATTERN",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ComponentName getComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the app component corresponding to this APDU service.\n     *\n     * @return app component for this service\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOffHostSecureElement()",
    "returnType" : "String",
    "comment" : "\n     * Returns the offhost secure element name (if the service is offhost).\n     *\n     * @return offhost secure element name for offhost services\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAids()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a consolidated list of AIDs from the AID groups\n     * registered by this service. Note that if a service has both\n     * a static (manifest-based) AID group for a category and a dynamic\n     * AID group, only the dynamically registered AIDs will be returned\n     * for that category.\n     * @return List of AIDs registered by the service\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getPollingLoopFilters()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the current polling loop filters for this service.\n     * @return List of polling loop filters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getShouldAutoTransact(@NonNull String plf)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this service would like to automatically transact for a given plf.\n     *\n     * @param plf the polling loop filter to query.\n     * @return {@code true} indicating to auto transact, {@code false} indicating to not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Pattern> getPollingLoopPatternFilters()",
    "returnType" : "List<Pattern>",
    "comment" : "\n     * Returns the current polling loop pattern filters for this service.\n     * @return List of polling loop pattern filters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getPrefixAids()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a consolidated list of AIDs with prefixes from the AID groups\n     * registered by this service. Note that if a service has both\n     * a static (manifest-based) AID group for a category and a dynamic\n     * AID group, only the dynamically registered AIDs will be returned\n     * for that category.\n     * @return List of prefix AIDs registered by the service\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getSubsetAids()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a consolidated list of AIDs with subsets from the AID groups\n     * registered by this service. Note that if a service has both\n     * a static (manifest-based) AID group for a category and a dynamic\n     * AID group, only the dynamically registered AIDs will be returned\n     * for that category.\n     * @return List of prefix AIDs registered by the service\n     ",
    "links" : [ ]
  }, {
    "name" : "public AidGroup getDynamicAidGroupForCategory(@NonNull String category)",
    "returnType" : "AidGroup",
    "comment" : "\n     * Returns the registered AID group for this category.\n     *\n     * @param category category name\n     * @return {@link AidGroup} instance for the provided category\n     ",
    "links" : [ "android.nfc.cardemulation.AidGroup" ]
  }, {
    "name" : "public boolean removeDynamicAidGroupForCategory(@NonNull String category)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the registered AID group for this category.\n     *\n     * @param category category name\n     * @return {@code true} if an AID group existed\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AidGroup> getAidGroups()",
    "returnType" : "List<AidGroup>",
    "comment" : "\n     * Returns a consolidated list of AID groups\n     * registered by this service. Note that if a service has both\n     * a static (manifest-based) AID group for a category and a dynamic\n     * AID group, only the dynamically registered AID group will be returned\n     * for that category.\n     * @return List of AIDs registered by the service\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCategoryForAid(@NonNull String aid)",
    "returnType" : "String",
    "comment" : "\n     * Returns the category to which this service has attributed the AID that is passed in,\n     * or null if we don't know this AID.\n     * @param aid AID to lookup for\n     * @return category name corresponding to this AID\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCategory(@NonNull String category)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether there is any AID group for this category.\n     * @param category category name\n     * @return {@code true} if an AID group exists\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOnHost()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the service is on host or not.\n     * @return true if the service is on host (not secure element)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requiresUnlock()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the service requires device unlock.\n     * @return whether the service requires device unlock\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requiresScreenOn()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this service should only be started when the device is screen on.\n     * @return whether the service requires screen on\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldDefaultToObserveMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the NFC stack should default to observe mode when this service is preferred.\n     * @return whether the NFC stack should default to observe mode when this service is preferred\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShouldDefaultToObserveMode(boolean shouldDefaultToObserveMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the NFC stack should default to observe mode when this service is preferred.\n     * @param shouldDefaultToObserveMode whether the NFC stack should default to observe mode when\n     *                                  this service is preferred\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDescription()",
    "returnType" : "String",
    "comment" : "\n     * Returns description of service.\n     * @return user readable description of service\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUid()",
    "returnType" : "int",
    "comment" : "\n     * Returns uid of service.\n     * @return uid of the service\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDynamicAidGroup(@NonNull AidGroup aidGroup)",
    "returnType" : "void",
    "comment" : "\n     * Add or replace an AID group to this service.\n     * @param aidGroup instance of aid group to set or replace\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addPollingLoopFilter(@NonNull String pollingLoopFilter, boolean autoTransact)",
    "returnType" : "void",
    "comment" : "\n     * Add a Polling Loop Filter. Custom NFC polling frames that match this filter will be\n     * delivered to {@link HostApduService#processPollingFrames(List)}. Adding a key with this\n     * multiple times will cause the value to be overwritten each time.\n     * @param pollingLoopFilter the polling loop filter to add, must be a valid hexadecimal string\n     * @param autoTransact when true, disable observe mode when this filter matches, when false,\n     *                     matching does not change the observe mode state\n     ",
    "links" : [ "android.nfc.cardemulation.HostApduService#processPollingFrames(List)" ]
  }, {
    "name" : "public void removePollingLoopFilter(@NonNull String pollingLoopFilter)",
    "returnType" : "void",
    "comment" : "\n     * Remove a Polling Loop Filter. Custom NFC polling frames that match this filter will no\n     * longer be delivered to {@link HostApduService#processPollingFrames(List)}.\n     * @param pollingLoopFilter this polling loop filter to add.\n     ",
    "links" : [ "android.nfc.cardemulation.HostApduService#processPollingFrames(List)" ]
  }, {
    "name" : "public void addPollingLoopPatternFilter(@NonNull String pollingLoopPatternFilter, boolean autoTransact)",
    "returnType" : "void",
    "comment" : "\n     * Add a Polling Loop Pattern Filter. Custom NFC polling frames that match this filter will be\n     * delivered to {@link HostApduService#processPollingFrames(List)}. Adding a key with this\n     * multiple times will cause the value to be overwritten each time.\n     * @param pollingLoopPatternFilter the polling loop pattern filter to add, must be a valid\n     *                                regex to match a hexadecimal string\n     * @param autoTransact when true, disable observe mode when this filter matches, when false,\n     *                     matching does not change the observe mode state\n     ",
    "links" : [ "android.nfc.cardemulation.HostApduService#processPollingFrames(List)" ]
  }, {
    "name" : "public void removePollingLoopPatternFilter(@NonNull String pollingLoopPatternFilter)",
    "returnType" : "void",
    "comment" : "\n     * Remove a Polling Loop Pattern Filter. Custom NFC polling frames that match this filter will\n     * no longer be delivered to {@link HostApduService#processPollingFrames(List)}.\n     * @param pollingLoopPatternFilter this polling loop filter to add.\n     ",
    "links" : [ "android.nfc.cardemulation.HostApduService#processPollingFrames(List)" ]
  }, {
    "name" : "public void setOffHostSecureElement(@NonNull String offHost)",
    "returnType" : "void",
    "comment" : "\n     * Sets the off host Secure Element.\n     * @param  offHost  Secure Element to set. Only accept strings with prefix SIM or prefix eSE.\n     *                  Ref: GSMA TS.26 - NFC Handset Requirements\n     *                  TS26_NFC_REQ_069: For UICC, Secure Element Name SHALL be SIM[smartcard slot]\n     *                                    (e.g. SIM/SIM1, SIM2… SIMn).\n     *                  TS26_NFC_REQ_070: For embedded SE, Secure Element Name SHALL be eSE[number]\n     *                                    (e.g. eSE/eSE1, eSE2, etc.).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetOffHostSecureElement()",
    "returnType" : "void",
    "comment" : "\n     * Resets the off host Secure Element to statically defined\n     * by the service in the manifest file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadLabel(@NonNull PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Load label for this service.\n     * @param pm packagemanager instance\n     * @return label name corresponding to service\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadAppLabel(@NonNull PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Load application label for this service.\n     * @param pm packagemanager instance\n     * @return app label name corresponding to service\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadIcon(@NonNull PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Load application icon for this service.\n     * @param pm packagemanager instance\n     * @return app icon corresponding to service\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadBanner(@NonNull PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Load application banner for this service.\n     * @param pm packagemanager instance\n     * @return app banner corresponding to service\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSettingsActivityName()",
    "returnType" : "String",
    "comment" : "\n     * Load activity name for this service.\n     * @return activity name for this service\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(@NonNull ParcelFileDescriptor fd, @NonNull PrintWriter pw, @NonNull String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Dump contents for debugging.\n     * @param fd parcelfiledescriptor instance\n     * @param pw printwriter instance\n     * @param args args for dumping\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCategoryOtherServiceEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable this CATEGORY_OTHER service.\n     *\n     * @param enabled true to indicate if user has enabled this service\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCategoryOtherServiceEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this CATEGORY_OTHER service is enabled or not.\n     *\n     * @return true to indicate if user has enabled this service\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(@NonNull ProtoOutputStream proto)",
    "returnType" : "void",
    "comment" : "\n     * Dump debugging info as ApduServiceInfoProto.\n     *\n     * If the output belongs to a sub message, the caller is responsible for wrapping this function\n     * between {@link ProtoOutputStream#start(long)} and {@link ProtoOutputStream#end(long)}.\n     * See proto definition in frameworks/base/core/proto/android/nfc/apdu_service_info.proto\n     *\n     * @param proto the ProtoOutputStream to write to\n     ",
    "links" : [ "android.util.proto.ProtoOutputStream#end(long)", "android.util.proto.ProtoOutputStream#start(long)" ]
  }, {
    "name" : "private static boolean isValidAid(String aid)",
    "returnType" : "boolean",
    "comment" : "\n     * Copied over from {@link CardEmulation#isValidAid(String)}\n     * @hide\n     ",
    "links" : [ "android.nfc.cardemulation.CardEmulation#isValidAid(String)" ]
  } ],
  "methodNames" : [ "public ComponentName getComponent()", "public String getOffHostSecureElement()", "public List<String> getAids()", "public List<String> getPollingLoopFilters()", "public boolean getShouldAutoTransact(@NonNull String plf)", "public List<Pattern> getPollingLoopPatternFilters()", "public List<String> getPrefixAids()", "public List<String> getSubsetAids()", "public AidGroup getDynamicAidGroupForCategory(@NonNull String category)", "public boolean removeDynamicAidGroupForCategory(@NonNull String category)", "public List<AidGroup> getAidGroups()", "public String getCategoryForAid(@NonNull String aid)", "public boolean hasCategory(@NonNull String category)", "public boolean isOnHost()", "public boolean requiresUnlock()", "public boolean requiresScreenOn()", "public boolean shouldDefaultToObserveMode()", "public void setShouldDefaultToObserveMode(boolean shouldDefaultToObserveMode)", "public String getDescription()", "public int getUid()", "public void setDynamicAidGroup(@NonNull AidGroup aidGroup)", "public void addPollingLoopFilter(@NonNull String pollingLoopFilter, boolean autoTransact)", "public void removePollingLoopFilter(@NonNull String pollingLoopFilter)", "public void addPollingLoopPatternFilter(@NonNull String pollingLoopPatternFilter, boolean autoTransact)", "public void removePollingLoopPatternFilter(@NonNull String pollingLoopPatternFilter)", "public void setOffHostSecureElement(@NonNull String offHost)", "public void resetOffHostSecureElement()", "public CharSequence loadLabel(@NonNull PackageManager pm)", "public CharSequence loadAppLabel(@NonNull PackageManager pm)", "public Drawable loadIcon(@NonNull PackageManager pm)", "public Drawable loadBanner(@NonNull PackageManager pm)", "public String getSettingsActivityName()", "public String toString()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public void dump(@NonNull ParcelFileDescriptor fd, @NonNull PrintWriter pw, @NonNull String[] args)", "public void setCategoryOtherServiceEnabled(boolean enabled)", "public boolean isCategoryOtherServiceEnabled()", "public void dumpDebug(@NonNull ProtoOutputStream proto)", "private static boolean isValidAid(String aid)" ],
  "variableNames" : [ "TAG", "mService", "mDescription", "mOnHost", "mOffHostName", "mStaticOffHostName", "mStaticAidGroups", "mDynamicAidGroups", "mAutoTransact", "mAutoTransactPatterns", "mRequiresDeviceUnlock", "mRequiresDeviceScreenOn", "mBannerResourceId", "mUid", "mSettingsActivityName", "mCategoryOtherServiceEnabled", "mShouldDefaultToObserveMode", "CREATOR", "AID_PATTERN" ]
}