{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/YuvImage.java",
  "packageName" : "android.graphics",
  "className" : "YuvImage",
  "comment" : "\n * YuvImage contains YUV data and provides a method that compresses a region of\n * the YUV data to a Jpeg. The YUV data should be provided as a single byte\n * array irrespective of the number of image planes in it.\n * Currently only ImageFormat.NV21 and ImageFormat.YUY2 are supported.\n *\n * To compress a rectangle region in the YUV data, users have to specify the\n * region by left, top, width and height.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "WORKING_COMPRESS_STORAGE",
    "type" : "int",
    "comment" : "\n     * Number of bytes of temp storage we use for communicating between the\n     * native compressor and the java OutputStream.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFormat",
    "type" : "int",
    "comment" : "\n     * The YUV format as defined in {@link ImageFormat}.\n     ",
    "links" : [ "android.graphics.ImageFormat" ]
  }, {
    "name" : "mData",
    "type" : "byte[]",
    "comment" : "\n     * The raw YUV data.\n     * In the case of more than one image plane, the image planes must be\n     * concatenated into a single byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStrides",
    "type" : "int[]",
    "comment" : "\n     * The number of row bytes in each image plane.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "\n     * The width of the image.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "\n     * The height of the image.\n     ",
    "links" : [ ]
  }, {
    "name" : "mColorSpace",
    "type" : "ColorSpace",
    "comment" : "\n     *  The color space of the image, defaults to SRGB\n     ",
    "links" : [ ]
  }, {
    "name" : "sSupportedFormats",
    "type" : "String[]",
    "comment" : "\n     * Array listing all supported ImageFormat that are supported by this class\n     ",
    "links" : [ ]
  }, {
    "name" : "sSupportedJpegRHdrColorSpaces",
    "type" : "ColorSpace.Named[]",
    "comment" : "\n     * Array listing all supported HDR ColorSpaces that are supported by JPEG/R encoding\n     ",
    "links" : [ ]
  }, {
    "name" : "sSupportedJpegRSdrColorSpaces",
    "type" : "ColorSpace.Named[]",
    "comment" : "\n     * Array listing all supported SDR ColorSpaces that are supported by JPEG/R encoding\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static String printSupportedFormats()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String printSupportedJpegRColorSpaces(boolean isHdr)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSupportedJpegRColorSpace(boolean isHdr, int colorSpace)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean compressToJpeg(Rect rectangle, int quality, OutputStream stream)",
    "returnType" : "boolean",
    "comment" : "\n     * Compress a rectangle region in the YuvImage to a jpeg.\n     * For image format, only ImageFormat.NV21 and ImageFormat.YUY2 are supported.\n     * For color space, only SRGB is supported.\n     *\n     * @param rectangle The rectangle region to be compressed. The medthod checks if rectangle is\n     *                  inside the image. Also, the method modifies rectangle if the chroma pixels\n     *                  in it are not matched with the luma pixels in it.\n     * @param quality   Hint to the compressor, 0-100. 0 meaning compress for\n     *                  small size, 100 meaning compress for max quality.\n     * @param stream    OutputStream to write the compressed data.\n     * @return          True if the compression is successful.\n     * @throws IllegalArgumentException if rectangle is invalid; color space or image format\n     *                  is not supported; quality is not within [0, 100]; or stream is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean compressToJpegR(@NonNull YuvImage sdr, int quality, @NonNull OutputStream stream)",
    "returnType" : "boolean",
    "comment" : "\n   * Compress the HDR image into JPEG/R format.\n   *\n   * Sample usage:\n   *     hdr_image.compressToJpegR(sdr_image, 90, stream);\n   *\n   * For the SDR image, only YUV_420_888 image format is supported, and the following\n   * color spaces are supported:\n   *     ColorSpace.Named.SRGB,\n   *     ColorSpace.Named.DISPLAY_P3\n   *\n   * For the HDR image, only YCBCR_P010 image format is supported, and the following\n   * color spaces are supported:\n   *     ColorSpace.Named.BT2020_HLG,\n   *     ColorSpace.Named.BT2020_PQ\n   *\n   * @param sdr       The SDR image, only ImageFormat.YUV_420_888 is supported.\n   * @param quality   Hint to the compressor, 0-100. 0 meaning compress for\n   *                  small size, 100 meaning compress for max quality.\n   * @param stream    OutputStream to write the compressed data.\n   * @return          True if the compression is successful.\n   * @throws IllegalArgumentException if input images are invalid; quality is not within [0,\n   *                  100]; or stream is null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean compressToJpegR(@NonNull YuvImage sdr, int quality, @NonNull OutputStream stream, @NonNull byte[] exif)",
    "returnType" : "boolean",
    "comment" : "\n     * Compress the HDR image into JPEG/R format.\n     *\n     * Sample usage:\n     *     hdr_image.compressToJpegR(sdr_image, 90, stream);\n     *\n     * For the SDR image, only YUV_420_888 image format is supported, and the following\n     * color spaces are supported:\n     *     ColorSpace.Named.SRGB,\n     *     ColorSpace.Named.DISPLAY_P3\n     *\n     * For the HDR image, only YCBCR_P010 image format is supported, and the following\n     * color spaces are supported:\n     *     ColorSpace.Named.BT2020_HLG,\n     *     ColorSpace.Named.BT2020_PQ\n     *\n     * @param sdr       The SDR image, only ImageFormat.YUV_420_888 is supported.\n     * @param quality   Hint to the compressor, 0-100. 0 meaning compress for\n     *                  small size, 100 meaning compress for max quality.\n     * @param stream    OutputStream to write the compressed data.\n     * @param exif      Exchangeable image file format.\n     * @return          True if the compression is successful.\n     * @throws IllegalArgumentException if input images are invalid; quality is not within [0,\n     *                  100]; or stream is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getYuvData()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return the YUV data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getYuvFormat()",
    "returnType" : "int",
    "comment" : "\n     * @return the YUV format as defined in {@link ImageFormat}.\n     ",
    "links" : [ "android.graphics.ImageFormat" ]
  }, {
    "name" : "public int[] getStrides()",
    "returnType" : "int[]",
    "comment" : "\n     * @return the number of row bytes in each image plane.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * @return the width of the image.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * @return the height of the image.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ColorSpace getColorSpace()",
    "returnType" : "ColorSpace",
    "comment" : "\n     * @return the color space of the image.\n     ",
    "links" : [ ]
  }, {
    "name" : " int[] calculateOffsets(int left, int top)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int[] calculateStrides(int width, int format)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void adjustRectangle(Rect rect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeCompressToJpeg(byte[] oriYuv, int format, int width, int height, int[] offsets, int[] strides, int quality, OutputStream stream, byte[] tempStorage)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeCompressToJpegR(byte[] hdr, int hdrColorSpaceId, byte[] sdr, int sdrColorSpaceId, int width, int height, int quality, OutputStream stream, byte[] tempStorage, byte[] exif, int[] hdrStrides, int[] sdrStrides)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static String printSupportedFormats()", "private static String printSupportedJpegRColorSpaces(boolean isHdr)", "private static boolean isSupportedJpegRColorSpace(boolean isHdr, int colorSpace)", "public boolean compressToJpeg(Rect rectangle, int quality, OutputStream stream)", "public boolean compressToJpegR(@NonNull YuvImage sdr, int quality, @NonNull OutputStream stream)", "public boolean compressToJpegR(@NonNull YuvImage sdr, int quality, @NonNull OutputStream stream, @NonNull byte[] exif)", "public byte[] getYuvData()", "public int getYuvFormat()", "public int[] getStrides()", "public int getWidth()", "public int getHeight()", "public ColorSpace getColorSpace()", " int[] calculateOffsets(int left, int top)", "private int[] calculateStrides(int width, int format)", "private void adjustRectangle(Rect rect)", "private static native boolean nativeCompressToJpeg(byte[] oriYuv, int format, int width, int height, int[] offsets, int[] strides, int quality, OutputStream stream, byte[] tempStorage)", "private static native boolean nativeCompressToJpegR(byte[] hdr, int hdrColorSpaceId, byte[] sdr, int sdrColorSpaceId, int width, int height, int quality, OutputStream stream, byte[] tempStorage, byte[] exif, int[] hdrStrides, int[] sdrStrides)" ],
  "variableNames" : [ "WORKING_COMPRESS_STORAGE", "mFormat", "mData", "mStrides", "mWidth", "mHeight", "mColorSpace", "sSupportedFormats", "sSupportedJpegRHdrColorSpaces", "sSupportedJpegRSdrColorSpaces" ]
}