{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/session/MediaSessionManager.java",
  "packageName" : "android.media.session",
  "className" : "RemoteSessionCallback",
  "comment" : "\n     * Callback to receive changes in the existing remote sessions. A remote session is a\n     * {@link MediaSession} that is connected to a remote player via\n     * {@link MediaSession#setPlaybackToRemote(VolumeProvider)}\n     *\n     * @hide\n     ",
  "links" : [ "android.media.session.MediaSession", "android.media.session.MediaSession#setPlaybackToRemote(VolumeProvider)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onVolumeChanged(@NonNull MediaSession.Token sessionToken, @AudioManager.SystemVolumeFlags int flags)",
    "returnType" : "void",
    "comment" : "\n         * Called when the volume is changed for the given session. Flags that are defined in\n         * {@link AudioManager} will also be sent and will contain information about how to\n         * handle the volume change. For example, {@link AudioManager#FLAG_SHOW_UI} indicates that a\n         * toast showing the volume should be shown.\n         *\n         * @param sessionToken the remote media session token\n         * @param flags flags containing extra action or information regarding the volume change\n         ",
    "links" : [ "android.media.AudioManager#FLAG_SHOW_UI", "android.media.AudioManager" ]
  }, {
    "name" : " void onDefaultRemoteSessionChanged(@Nullable MediaSession.Token sessionToken)",
    "returnType" : "void",
    "comment" : "\n         * Called when the default remote session is changed where the default remote session\n         * denotes an active remote session that has the highest priority for receiving key events.\n         * Null will be sent if there are currently no active remote sessions.\n         *\n         * @param sessionToken the token of the default remote session, a session with the highest\n         *                     priority for receiving key events.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void onVolumeChanged(@NonNull MediaSession.Token sessionToken, @AudioManager.SystemVolumeFlags int flags)", " void onDefaultRemoteSessionChanged(@Nullable MediaSession.Token sessionToken)" ],
  "variableNames" : [ ]
}