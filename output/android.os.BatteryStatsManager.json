{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BatteryStatsManager.java",
  "packageName" : "android.os",
  "className" : "BatteryStatsManager",
  "comment" : "\n * This class provides an API surface for internal system components to report events that are\n * needed for battery usage/estimation and battery blaming for apps.\n *\n * Note: This internally uses the same {@link IBatteryStats} binder service as the public\n * {@link BatteryManager}.\n * @hide\n ",
  "links" : [ "com.android.internal.app.IBatteryStats", "android.os.BatteryManager" ],
  "variables" : [ {
    "name" : "WIFI_STATE_OFF",
    "type" : "int",
    "comment" : "\n     * Wifi fully off.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STATE_OFF_SCANNING",
    "type" : "int",
    "comment" : "\n     * Wifi connectivity off, but scanning enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STATE_ON_NO_NETWORKS",
    "type" : "int",
    "comment" : "\n     * Wifi on, but no saved infrastructure networks to connect to.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STATE_ON_DISCONNECTED",
    "type" : "int",
    "comment" : "\n     * Wifi on, but not connected to any infrastructure networks.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STATE_ON_CONNECTED_STA",
    "type" : "int",
    "comment" : "\n     * Wifi on and connected to a infrastructure network.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STATE_ON_CONNECTED_P2P",
    "type" : "int",
    "comment" : "\n     * Wifi on and connected to a P2P device, but no infrastructure connection to a network.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STATE_ON_CONNECTED_STA_P2P",
    "type" : "int",
    "comment" : "\n     * Wifi on and connected to both a P2P device and infrastructure connection to a network.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STATE_SOFT_AP",
    "type" : "int",
    "comment" : "\n     * SoftAp/Hotspot turned on.\n     ",
    "links" : [ ]
  }, {
    "name" : "NUM_WIFI_STATES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_INVALID",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#INVALID ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_DISCONNECTED",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#DISCONNECTED",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_INTERFACE_DISABLED",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#INTERFACE_DISABLED ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_INACTIVE",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#INACTIVE",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_SCANNING",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#SCANNING",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_AUTHENTICATING",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#AUTHENTICATING ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_ASSOCIATING",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#ASSOCIATING ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_ASSOCIATED",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#ASSOCIATED ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_FOUR_WAY_HANDSHAKE",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#FOUR_WAY_HANDSHAKE ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_GROUP_HANDSHAKE",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#GROUP_HANDSHAKE ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_COMPLETED",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#COMPLETED ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_DORMANT",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#DORMANT ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_UNINITIALIZED",
    "type" : "int",
    "comment" : " @see android.net.wifi.SupplicantState#UNINITIALIZED ",
    "links" : [ ]
  }, {
    "name" : "NUM_WIFI_SUPPL_STATES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mBatteryStats",
    "type" : "IBatteryStats",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public BatteryUsageStats getBatteryUsageStats()",
    "returnType" : "BatteryUsageStats",
    "comment" : "\n     * Returns BatteryUsageStats, which contains power attribution data on a per-subsystem\n     * and per-UID basis.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BatteryUsageStats getBatteryUsageStats(BatteryUsageStatsQuery query)",
    "returnType" : "BatteryUsageStats",
    "comment" : "\n     * Returns BatteryUsageStats, which contains power attribution data on a per-subsystem\n     * and per-UID basis.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BatteryUsageStats> getBatteryUsageStats(List<BatteryUsageStatsQuery> queries)",
    "returnType" : "List<BatteryUsageStats>",
    "comment" : "\n     * Returns BatteryUsageStats, which contains power attribution data on a per-subsystem\n     * and per-UID basis.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiRssiChanged(@IntRange(from = -127, to = 0) int newRssi)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that the wifi connection RSSI has changed.\n     *\n     * @param newRssi The new RSSI value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiOn()",
    "returnType" : "void",
    "comment" : "\n     * Indicates that wifi was toggled on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiOff()",
    "returnType" : "void",
    "comment" : "\n     * Indicates that wifi was toggled off.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiState(@WifiState int newWifiState, @Nullable String accessPoint)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that wifi state has changed.\n     *\n     * @param newWifiState The new wifi State.\n     * @param accessPoint SSID of the network if wifi is connected to STA, else null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiScanStartedFromSource(@NonNull WorkSource ws)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that a new wifi scan has started.\n     *\n     * @param ws worksource (to be used for battery blaming).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiScanStoppedFromSource(@NonNull WorkSource ws)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that an ongoing wifi scan has stopped.\n     *\n     * @param ws worksource (to be used for battery blaming).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiBatchedScanStartedFromSource(@NonNull WorkSource ws, @IntRange(from = 0) int csph)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that a new wifi batched scan has started.\n     *\n     * @param ws worksource (to be used for battery blaming).\n     * @param csph Channels scanned per hour.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiBatchedScanStoppedFromSource(@NonNull WorkSource ws)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that an ongoing wifi batched scan has stopped.\n     *\n     * @param ws worksource (to be used for battery blaming).\n     ",
    "links" : [ ]
  }, {
    "name" : "public CellularBatteryStats getCellularBatteryStats()",
    "returnType" : "CellularBatteryStats",
    "comment" : "\n     * Retrieves all the cellular related battery stats.\n     *\n     * @return Instance of {@link CellularBatteryStats}.\n     ",
    "links" : [ "android.os.connectivity.CellularBatteryStats" ]
  }, {
    "name" : "public WifiBatteryStats getWifiBatteryStats()",
    "returnType" : "WifiBatteryStats",
    "comment" : "\n     * Retrieves all the wifi related battery stats.\n     *\n     * @return Instance of {@link WifiBatteryStats}.\n     ",
    "links" : [ "android.os.connectivity.WifiBatteryStats" ]
  }, {
    "name" : "public WakeLockStats getWakeLockStats()",
    "returnType" : "WakeLockStats",
    "comment" : "\n     * Retrieves accumulate wake lock stats.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothBatteryStats getBluetoothBatteryStats()",
    "returnType" : "BluetoothBatteryStats",
    "comment" : "\n     * Retrieves accumulated bluetooth stats.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportFullWifiLockAcquiredFromSource(@NonNull WorkSource ws)",
    "returnType" : "void",
    "comment" : "\n     * Indicates an app acquiring full wifi lock.\n     *\n     * @param ws worksource (to be used for battery blaming).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportFullWifiLockReleasedFromSource(@NonNull WorkSource ws)",
    "returnType" : "void",
    "comment" : "\n     * Indicates an app releasing full wifi lock.\n     *\n     * @param ws worksource (to be used for battery blaming).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiSupplicantStateChanged(@WifiSupplState int newSupplState, boolean failedAuth)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that supplicant state has changed.\n     *\n     * @param newSupplState The new Supplicant state.\n     * @param failedAuth Boolean indicating whether there was a connection failure due to\n     *                   authentication failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiMulticastEnabled(@NonNull WorkSource ws)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that an app has acquired the wifi multicast lock.\n     *\n     * @param ws Worksource with the uid of the app that acquired the wifi lock (to be used for\n     *           battery blaming).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiMulticastDisabled(@NonNull WorkSource ws)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that an app has released the wifi multicast lock.\n     *\n     * @param ws Worksource with the uid of the app that released the wifi lock (to be used for\n     *           battery blaming).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportMobileRadioPowerState(boolean isActive, int uid)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that the radio power state has changed.\n     *\n     * @param isActive indicates if the mobile radio is powered.\n     * @param uid Uid of this event. For the active state it represents the uid that was responsible\n     *            for waking the radio, or -1 if the system was responsible for waking the radio.\n     *            For inactive state, the UID should always be -1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportWifiRadioPowerState(boolean isActive, int uid)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that the wifi power state has changed.\n     *\n     * @param isActive indicates if the wifi radio is powered.\n     * @param uid Uid of this event. For the active state it represents the uid that was responsible\n     *            for waking the radio, or -1 if the system was responsible for waking the radio.\n     *            For inactive state, the UID should always be -1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportNetworkInterfaceForTransports(@NonNull String iface, @NonNull int[] transportTypes) throws RuntimeException",
    "returnType" : "void",
    "comment" : "\n     * Notifies the battery stats of a new interface, and the transport types of the network that\n     * includes that interface.\n     *\n     * @param iface The interface of the network.\n     * @param transportTypes The transport type of the network {@link Transport}.\n     * @hide\n     ",
    "links" : [ "Transport" ]
  }, {
    "name" : "public void reportBluetoothOn(int uid, int reason, @NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that Bluetooth was toggled on.\n     *\n     * @param uid calling package uid\n     * @param reason why Bluetooth has been turned on\n     * @param packageName package responsible for this change\n     * @deprecated Bluetooth self report its state and no longer call this\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportBluetoothOff(int uid, int reason, @NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that Bluetooth was toggled off.\n     *\n     * @param uid calling package uid\n     * @param reason why Bluetooth has been turned on\n     * @param packageName package responsible for this change\n     * @deprecated Bluetooth self report its state and no longer call this\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportBleScanStarted(@NonNull WorkSource ws, boolean isUnoptimized)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that a new Bluetooth LE scan has started.\n     *\n     * @param ws worksource (to be used for battery blaming).\n     * @param isUnoptimized whether or not the scan has a filter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportBleScanStopped(@NonNull WorkSource ws, boolean isUnoptimized)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that an ongoing Bluetooth LE scan has stopped.\n     *\n     * @param ws worksource (to be used for battery blaming).\n     * @param isUnoptimized whether or not the scan has a filter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportBleScanReset()",
    "returnType" : "void",
    "comment" : "\n     * Indicates that Bluetooth LE has been reset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportBleScanResults(@NonNull WorkSource ws, int numNewResults)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that Bluetooth LE scan has received new results.\n     *\n     * @param ws worksource (to be used for battery blaming).\n     * @param numNewResults number of results received since last update.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getDataConnectionPowerState(boolean isActive)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setChargerAcOnline(boolean online, boolean forceUpdate)",
    "returnType" : "void",
    "comment" : "\n     * Sets battery AC charger to enabled/disabled, and freezes the battery state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBatteryLevel(int level, boolean forceUpdate)",
    "returnType" : "void",
    "comment" : "\n     * Sets battery level, and freezes the battery state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unplugBattery(boolean forceUpdate)",
    "returnType" : "void",
    "comment" : "\n     * Unplugs battery, and freezes the battery state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetBattery(boolean forceUpdate)",
    "returnType" : "void",
    "comment" : "\n     * Unfreezes battery state, returning to current hardware values.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void suspendBatteryInput()",
    "returnType" : "void",
    "comment" : "\n     * Suspend charging even if plugged in.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public BatteryUsageStats getBatteryUsageStats()", "public BatteryUsageStats getBatteryUsageStats(BatteryUsageStatsQuery query)", "public List<BatteryUsageStats> getBatteryUsageStats(List<BatteryUsageStatsQuery> queries)", "public void reportWifiRssiChanged(@IntRange(from = -127, to = 0) int newRssi)", "public void reportWifiOn()", "public void reportWifiOff()", "public void reportWifiState(@WifiState int newWifiState, @Nullable String accessPoint)", "public void reportWifiScanStartedFromSource(@NonNull WorkSource ws)", "public void reportWifiScanStoppedFromSource(@NonNull WorkSource ws)", "public void reportWifiBatchedScanStartedFromSource(@NonNull WorkSource ws, @IntRange(from = 0) int csph)", "public void reportWifiBatchedScanStoppedFromSource(@NonNull WorkSource ws)", "public CellularBatteryStats getCellularBatteryStats()", "public WifiBatteryStats getWifiBatteryStats()", "public WakeLockStats getWakeLockStats()", "public BluetoothBatteryStats getBluetoothBatteryStats()", "public void reportFullWifiLockAcquiredFromSource(@NonNull WorkSource ws)", "public void reportFullWifiLockReleasedFromSource(@NonNull WorkSource ws)", "public void reportWifiSupplicantStateChanged(@WifiSupplState int newSupplState, boolean failedAuth)", "public void reportWifiMulticastEnabled(@NonNull WorkSource ws)", "public void reportWifiMulticastDisabled(@NonNull WorkSource ws)", "public void reportMobileRadioPowerState(boolean isActive, int uid)", "public void reportWifiRadioPowerState(boolean isActive, int uid)", "public void reportNetworkInterfaceForTransports(@NonNull String iface, @NonNull int[] transportTypes) throws RuntimeException", "public void reportBluetoothOn(int uid, int reason, @NonNull String packageName)", "public void reportBluetoothOff(int uid, int reason, @NonNull String packageName)", "public void reportBleScanStarted(@NonNull WorkSource ws, boolean isUnoptimized)", "public void reportBleScanStopped(@NonNull WorkSource ws, boolean isUnoptimized)", "public void reportBleScanReset()", "public void reportBleScanResults(@NonNull WorkSource ws, int numNewResults)", "private static int getDataConnectionPowerState(boolean isActive)", "public void setChargerAcOnline(boolean online, boolean forceUpdate)", "public void setBatteryLevel(int level, boolean forceUpdate)", "public void unplugBattery(boolean forceUpdate)", "public void resetBattery(boolean forceUpdate)", "public void suspendBatteryInput()" ],
  "variableNames" : [ "WIFI_STATE_OFF", "WIFI_STATE_OFF_SCANNING", "WIFI_STATE_ON_NO_NETWORKS", "WIFI_STATE_ON_DISCONNECTED", "WIFI_STATE_ON_CONNECTED_STA", "WIFI_STATE_ON_CONNECTED_P2P", "WIFI_STATE_ON_CONNECTED_STA_P2P", "WIFI_STATE_SOFT_AP", "NUM_WIFI_STATES", "WIFI_SUPPL_STATE_INVALID", "WIFI_SUPPL_STATE_DISCONNECTED", "WIFI_SUPPL_STATE_INTERFACE_DISABLED", "WIFI_SUPPL_STATE_INACTIVE", "WIFI_SUPPL_STATE_SCANNING", "WIFI_SUPPL_STATE_AUTHENTICATING", "WIFI_SUPPL_STATE_ASSOCIATING", "WIFI_SUPPL_STATE_ASSOCIATED", "WIFI_SUPPL_STATE_FOUR_WAY_HANDSHAKE", "WIFI_SUPPL_STATE_GROUP_HANDSHAKE", "WIFI_SUPPL_STATE_COMPLETED", "WIFI_SUPPL_STATE_DORMANT", "WIFI_SUPPL_STATE_UNINITIALIZED", "NUM_WIFI_SUPPL_STATES", "mBatteryStats" ]
}