{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/CmpApiVerifier.java",
  "packageName" : "android.provider",
  "className" : "CmpApiVerifier",
  "comment" : "\n * Provides helper methods that help verify that the received results from cloud provider\n * implementations are staying true to contract by returning non null outputs and setting required\n * extras/states in the result.\n *\n * Note: logs for local provider and not printed.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOCAL_PROVIDER_AUTHORITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CMP_API_TO_THRESHOLD_MAP",
    "type" : "Map<String, Long>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean isCloudMediaProviderLoggingEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void verifyApiResult(CmpApiResult result, long totalTimeTakenForExecution, String authority)",
    "returnType" : "void",
    "comment" : "\n     * Verifies and logs results received by CloudMediaProvider Apis.\n     *\n     * <p><b>Note:</b> It only logs the errors and does not throw any exceptions.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void verifyOnGetMediaCollectionInfo(Bundle outputBundle, List<String> verificationResult, List<String> errors)",
    "returnType" : "void",
    "comment" : "\n     * Verifies OnGetMediaCollectionInfo API by performing and logging the following checks:\n     *\n     * <ul>\n     * <li>Received Bundle is not null.</li>\n     * <li>Bundle contains media collection ID:\n     * {@link CloudMediaProviderContract.MediaCollectionInfo#MEDIA_COLLECTION_ID}</li>\n     * <li>Bundle contains last sync generation:\n     * {@link CloudMediaProviderContract.MediaCollectionInfo#LAST_MEDIA_SYNC_GENERATION}</li>\n     * <li>Bundle contains account name:\n     * {@link CloudMediaProviderContract.MediaCollectionInfo#ACCOUNT_NAME}</li>\n     * <li>Bundle contains account configuration intent:\n     * {@link CloudMediaProviderContract.MediaCollectionInfo#ACCOUNT_CONFIGURATION_INTENT}</li>\n     * </ul>\n     ",
    "links" : [ "CloudMediaProviderContract.MediaCollectionInfo#ACCOUNT_CONFIGURATION_INTENT", "CloudMediaProviderContract.MediaCollectionInfo#ACCOUNT_NAME", "CloudMediaProviderContract.MediaCollectionInfo#LAST_MEDIA_SYNC_GENERATION", "CloudMediaProviderContract.MediaCollectionInfo#MEDIA_COLLECTION_ID" ]
  }, {
    "name" : " static void verifyOnQueryMedia(Cursor c, List<String> verificationResult, List<String> errors)",
    "returnType" : "void",
    "comment" : "\n     * Verifies OnQueryMedia API by performing and logging the following checks:\n     *\n     * <ul>\n     * <li>Received Cursor is not null.</li>\n     * <li>Cursor contains non empty media collection ID:\n     * {@link CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID}</li>\n     * <li>Projection for cursor is as expected:\n     * {@link CloudMediaProviderContract.MediaColumns#ALL_PROJECTION}</li>\n     * <li>Logs count of rows in the cursor, if cursor is non null.</li>\n     * </ul>\n     ",
    "links" : [ "CloudMediaProviderContract.MediaColumns#ALL_PROJECTION", "android.provider.CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID" ]
  }, {
    "name" : " static void verifyOnQueryDeletedMedia(Cursor c, List<String> verificationResult, List<String> errors)",
    "returnType" : "void",
    "comment" : "\n     * Verifies OnQueryDeletedMedia API by performing and logging the following checks:\n     *\n     * <ul>\n     * <li>Received Cursor is not null.</li>\n     * <li>Cursor contains non empty media collection ID:\n     * {@link CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID}</li>\n     * <li>Logs count of rows in the cursor, if cursor is non null.</li>\n     * </ul>\n     ",
    "links" : [ "android.provider.CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID" ]
  }, {
    "name" : " static void verifyOnQueryAlbums(Cursor c, List<String> verificationResult, List<String> errors)",
    "returnType" : "void",
    "comment" : "\n     * Verifies OnQueryAlbums API by performing and logging the following checks:\n     *\n     * <ul>\n     * <li>Received Cursor is not null.</li>\n     * <li>Cursor contains non empty media collection ID:\n     * {@link CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID}</li>\n     * <li>Projection for cursor is as expected:\n     * {@link CloudMediaProviderContract.AlbumColumns#ALL_PROJECTION}</li>\n     * <li>Logs count of rows in the cursor and the album names, if cursor is non null.</li>\n     * </ul>\n     ",
    "links" : [ "CloudMediaProviderContract.AlbumColumns#ALL_PROJECTION", "android.provider.CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID" ]
  }, {
    "name" : " static void verifyOnOpenPreview(AssetFileDescriptor assetFileDescriptor, Point expectedSize, List<String> verificationResult, List<String> errors)",
    "returnType" : "void",
    "comment" : "\n     * Verifies OnOpenPreview API by performing and logging the following checks:\n     *\n     * <ul>\n     * <li>Received AssetFileDescriptor is not null.</li>\n     * <li>Logs size of the thumbnail.</li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : " static void verifyOnOpenMedia(ParcelFileDescriptor fd, List<String> verificationResult, List<String> errors)",
    "returnType" : "void",
    "comment" : "\n     * Verifies OnOpenMedia API by performing and logging the following checks:\n     *\n     * <ul>\n     * <li>Received ParcelFileDescriptor is not null.</li>\n     * </ul>\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static boolean isCloudMediaProviderLoggingEnabled()", " static void verifyApiResult(CmpApiResult result, long totalTimeTakenForExecution, String authority)", " static void verifyOnGetMediaCollectionInfo(Bundle outputBundle, List<String> verificationResult, List<String> errors)", " static void verifyOnQueryMedia(Cursor c, List<String> verificationResult, List<String> errors)", " static void verifyOnQueryDeletedMedia(Cursor c, List<String> verificationResult, List<String> errors)", " static void verifyOnQueryAlbums(Cursor c, List<String> verificationResult, List<String> errors)", " static void verifyOnOpenPreview(AssetFileDescriptor assetFileDescriptor, Point expectedSize, List<String> verificationResult, List<String> errors)", " static void verifyOnOpenMedia(ParcelFileDescriptor fd, List<String> verificationResult, List<String> errors)" ],
  "variableNames" : [ "LOCAL_PROVIDER_AUTHORITY", "CMP_API_TO_THRESHOLD_MAP" ]
}