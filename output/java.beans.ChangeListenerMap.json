{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/beans/ChangeListenerMap.java",
  "packageName" : "java.beans",
  "className" : "ChangeListenerMap",
  "comment" : "\n * This is an abstract class that provides base functionality\n * for the {@link PropertyChangeSupport PropertyChangeSupport} class\n * and the {@link VetoableChangeSupport VetoableChangeSupport} class.\n *\n * @see PropertyChangeListenerMap\n * @see VetoableChangeListenerMap\n *\n * @author Sergey A. Malenkov\n ",
  "links" : [ "VetoableChangeSupport", "java.beans.PropertyChangeSupport" ],
  "variables" : [ {
    "name" : "map",
    "type" : "Map<String, L[]>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected abstract L[] newArray(int length)",
    "returnType" : "L[]",
    "comment" : "\n     * Creates an array of listeners.\n     * This method can be optimized by using\n     * the same instance of the empty array\n     * when {@code length} is equal to {@code 0}.\n     *\n     * @param length  the array length\n     * @return        an array with specified length\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract L newProxy(String name, L listener)",
    "returnType" : "L",
    "comment" : "\n     * Creates a proxy listener for the specified property.\n     *\n     * @param name      the name of the property to listen on\n     * @param listener  the listener to process events\n     * @return          a proxy listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized void add(String name, L listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener to the list of listeners for the specified property.\n     * This listener is called as many times as it was added.\n     *\n     * @param name      the name of the property to listen on\n     * @param listener  the listener to process events\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized void remove(String name, L listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener from the list of listeners for the specified property.\n     * If the listener was added more than once to the same event source,\n     * this listener will be notified one less time after being removed.\n     *\n     * @param name      the name of the property to listen on\n     * @param listener  the listener to process events\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized L[] get(String name)",
    "returnType" : "L[]",
    "comment" : "\n     * Returns the list of listeners for the specified property.\n     *\n     * @param name  the name of the property\n     * @return      the corresponding list of listeners\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void set(String name, L[] listeners)",
    "returnType" : "void",
    "comment" : "\n     * Sets new list of listeners for the specified property.\n     *\n     * @param name       the name of the property\n     * @param listeners  new list of listeners\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized L[] getListeners()",
    "returnType" : "L[]",
    "comment" : "\n     * Returns all listeners in the map.\n     *\n     * @return an array of all listeners\n     ",
    "links" : [ ]
  }, {
    "name" : "public final L[] getListeners(String name)",
    "returnType" : "L[]",
    "comment" : "\n     * Returns listeners that have been associated with the named property.\n     *\n     * @param name  the name of the property\n     * @return an array of listeners for the named property\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized boolean hasListeners(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the map contains\n     * at least one listener to be notified.\n     *\n     * @param name  the name of the property\n     * @return      {@code true} if at least one listener exists or\n     *              {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Set<Entry<String, L[]>> getEntries()",
    "returnType" : "Set<Entry<String, L[]>>",
    "comment" : "\n     * Returns a set of entries from the map.\n     * Each entry is a pair consisted of the property name\n     * and the corresponding list of listeners.\n     *\n     * @return a set of entries from the map\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract L extract(L listener)",
    "returnType" : "L",
    "comment" : "\n     * Extracts a real listener from the proxy listener.\n     * It is necessary because default proxy class is not serializable.\n     *\n     * @return a real listener\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract L[] newArray(int length)", "protected abstract L newProxy(String name, L listener)", "public final synchronized void add(String name, L listener)", "public final synchronized void remove(String name, L listener)", "public final synchronized L[] get(String name)", "public final void set(String name, L[] listeners)", "public final synchronized L[] getListeners()", "public final L[] getListeners(String name)", "public final synchronized boolean hasListeners(String name)", "public final Set<Entry<String, L[]>> getEntries()", "public abstract L extract(L listener)" ],
  "variableNames" : [ "map" ]
}