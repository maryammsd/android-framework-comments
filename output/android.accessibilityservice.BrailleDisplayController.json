{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/BrailleDisplayController.java",
  "packageName" : "android.accessibilityservice",
  "className" : "BrailleDisplayController",
  "comment" : " and automatically closed by the system after the accessibility service is disconnected.",
  "links" : [ ],
  "variables" : [ {
    "name" : "TEST_BRAILLE_DISPLAY_HIDRAW_PATH",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TEST_BRAILLE_DISPLAY_DESCRIPTOR",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TEST_BRAILLE_DISPLAY_BUS_BLUETOOTH",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TEST_BRAILLE_DISPLAY_UNIQUE_ID",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TEST_BRAILLE_DISPLAY_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void checkApiFlagIsEnabled()",
    "returnType" : "void",
    "comment" : "\n     * Throw {@link IllegalStateException} if this feature's aconfig flag is disabled.\n     *\n     * @hide\n     ",
    "links" : [ "IllegalStateException" ]
  }, {
    "name" : " void connect(@NonNull BluetoothDevice bluetoothDevice, @NonNull BrailleDisplayCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Connects to the requested bluetooth Braille display using the Braille\n     * display HID standard (usage page 0x41).\n     *\n     * <p>If successful then the HID report descriptor will be provided to\n     * {@link BrailleDisplayCallback#onConnected}\n     * and the Braille display will start sending incoming input bytes to\n     * {@link BrailleDisplayCallback#onInput}. If there is an error in reading input\n     * then the system will disconnect the Braille display.\n     *\n     * <p>Note that the callbacks will be executed on the main thread using\n     * {@link AccessibilityService#getMainExecutor()}. To specify the execution thread, use\n     * {@link #connect(BluetoothDevice, Executor, BrailleDisplayCallback)}.\n     *\n     * @param bluetoothDevice The Braille display device.\n     * @param callback        Callbacks used to provide connection results.\n     * @see BrailleDisplayCallback#onConnected\n     * @see BrailleDisplayCallback#onConnectionFailed\n     * @throws IllegalStateException if a Braille display is already connected to this controller.\n     ",
    "links" : [ "#onInput", "android.accessibilityservice.AccessibilityService#getMainExecutor()", "#connect(BluetoothDevice", "#onConnected" ]
  }, {
    "name" : " void connect(@NonNull BluetoothDevice bluetoothDevice, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull BrailleDisplayCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Connects to the requested bluetooth Braille display using the Braille\n     * display HID standard (usage page 0x41).\n     *\n     * <p>If successful then the HID report descriptor will be provided to\n     * {@link BrailleDisplayCallback#onConnected}\n     * and the Braille display will start sending incoming input bytes to\n     * {@link BrailleDisplayCallback#onInput}. If there is an error in reading input\n     * then the system will disconnect the Braille display.\n     *\n     * @param bluetoothDevice  The Braille display device.\n     * @param callbackExecutor Executor for executing the provided callbacks.\n     * @param callback         Callbacks used to provide connection results.\n     * @see BrailleDisplayCallback#onConnected\n     * @see BrailleDisplayCallback#onConnectionFailed\n     * @throws IllegalStateException if a Braille display is already connected to this controller.\n     ",
    "links" : [ "#onInput", "#onConnected" ]
  }, {
    "name" : " void connect(@NonNull UsbDevice usbDevice, @NonNull BrailleDisplayCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Connects to the requested USB Braille display using the Braille\n     * display HID standard (usage page 0x41).\n     *\n     * <p>If successful then the HID report descriptor will be provided to\n     * {@link BrailleDisplayCallback#onConnected}\n     * and the Braille display will start sending incoming input bytes to\n     * {@link BrailleDisplayCallback#onInput}. If there is an error in reading input\n     * then the system will disconnect the Braille display.\n     *\n     * <p>The accessibility service app must already have approval to access the USB device\n     * from the standard {@link android.hardware.usb.UsbManager} access approval process.\n     *\n     * <p>Note that the callbacks will be executed on the main thread using\n     * {@link AccessibilityService#getMainExecutor()}. To specify the execution thread, use\n     * {@link #connect(UsbDevice, Executor, BrailleDisplayCallback)}.\n     *\n     * @param usbDevice        The Braille display device.\n     * @param callback         Callbacks used to provide connection results.\n     * @see BrailleDisplayCallback#onConnected\n     * @see BrailleDisplayCallback#onConnectionFailed\n     * @throws SecurityException if the caller does not have USB device approval.\n     * @throws IllegalStateException if a Braille display is already connected to this controller.\n     ",
    "links" : [ "#connect(UsbDevice", "#onInput", "android.accessibilityservice.AccessibilityService#getMainExecutor()", "#onConnected", "android.hardware.usb.UsbManager" ]
  }, {
    "name" : " void connect(@NonNull UsbDevice usbDevice, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull BrailleDisplayCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Connects to the requested USB Braille display using the Braille\n     * display HID standard (usage page 0x41).\n     *\n     * <p>If successful then the HID report descriptor will be provided to\n     * {@link BrailleDisplayCallback#onConnected}\n     * and the Braille display will start sending incoming input bytes to\n     * {@link BrailleDisplayCallback#onInput}. If there is an error in reading input\n     * then the system will disconnect the Braille display.\n     *\n     * <p>The accessibility service app must already have approval to access the USB device\n     * from the standard {@link android.hardware.usb.UsbManager} access approval process.\n     *\n     * @param usbDevice        The Braille display device.\n     * @param callbackExecutor Executor for executing the provided callbacks.\n     * @param callback         Callbacks used to provide connection results.\n     * @see BrailleDisplayCallback#onConnected\n     * @see BrailleDisplayCallback#onConnectionFailed\n     * @throws SecurityException if the caller does not have USB device approval.\n     * @throws IllegalStateException if a Braille display is already connected to this controller.\n     ",
    "links" : [ "#onInput", "#onConnected", "android.hardware.usb.UsbManager" ]
  }, {
    "name" : " boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if a Braille display is currently connected, otherwise false.\n     *\n     * @see #connect\n     ",
    "links" : [ ]
  }, {
    "name" : " void write(@NonNull byte[] buffer) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a HID report to the currently connected Braille display.\n     *\n     * <p>This method returns immediately after dispatching the write request to the system.\n     * If the system experiences an error in writing output (e.g. the Braille display is unplugged\n     * after the system receives the write request but before writing the bytes to the Braille\n     * display) then the system will disconnect the Braille display, which calls\n     * {@link BrailleDisplayCallback#onDisconnected()}.\n     *\n     * @param buffer The bytes to write to the Braille display. These bytes should be formatted\n     *               according to the HID report descriptor and the HIDRAW kernel driver.\n     * @throws IOException              if there is no currently connected Braille display.\n     * @throws IllegalArgumentException if the buffer exceeds the maximum safe payload size for\n     *                                  binder transactions of\n     *                                  {@link IBinder#getSuggestedMaxIpcSizeBytes()}\n     ",
    "links" : [ "#onDisconnected()", "android.os.IBinder#getSuggestedMaxIpcSizeBytes()" ]
  }, {
    "name" : " void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Disconnects from the currently connected Braille display.\n     *\n     * @see #isConnected()\n     ",
    "links" : [ ]
  }, {
    "name" : " static void setTestBrailleDisplayData(@NonNull AccessibilityService service, @NonNull List<Bundle> brailleDisplays)",
    "returnType" : "void",
    "comment" : "\n     * Provides test Braille display data to be used for automated CTS tests.\n     *\n     * <p>See {@code TEST_BRAILLE_DISPLAY_*} bundle keys.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static void checkApiFlagIsEnabled()", " void connect(@NonNull BluetoothDevice bluetoothDevice, @NonNull BrailleDisplayCallback callback)", " void connect(@NonNull BluetoothDevice bluetoothDevice, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull BrailleDisplayCallback callback)", " void connect(@NonNull UsbDevice usbDevice, @NonNull BrailleDisplayCallback callback)", " void connect(@NonNull UsbDevice usbDevice, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull BrailleDisplayCallback callback)", " boolean isConnected()", " void write(@NonNull byte[] buffer) throws IOException", " void disconnect()", " static void setTestBrailleDisplayData(@NonNull AccessibilityService service, @NonNull List<Bundle> brailleDisplays)" ],
  "variableNames" : [ "TEST_BRAILLE_DISPLAY_HIDRAW_PATH", "TEST_BRAILLE_DISPLAY_DESCRIPTOR", "TEST_BRAILLE_DISPLAY_BUS_BLUETOOTH", "TEST_BRAILLE_DISPLAY_UNIQUE_ID", "TEST_BRAILLE_DISPLAY_NAME" ]
}