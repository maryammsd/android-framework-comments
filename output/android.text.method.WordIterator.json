{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/method/WordIterator.java",
  "packageName" : "android.text.method",
  "className" : "WordIterator",
  "comment" : "\n * Walks through cursor positions at word boundaries. Internally uses\n * {@link BreakIterator#getWordInstance()}, and caches {@link CharSequence}\n * for performance reasons.\n *\n * Also provides methods to determine word boundaries.\n * {@hide}\n ",
  "variables" : [ {
    "name" : "WINDOW_WIDTH",
    "type" : "int",
    "comment" : " Size of the window for the word iterator, should be greater than the longest word's length",
    "links" : [ ]
  }, {
    "name" : "mStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharSeq",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIterator",
    "type" : "BreakIterator",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCharSequence(@NonNull CharSequence charSequence, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int preceding(int offset)",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public int following(int offset)",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBoundary(int offset)",
    "returnType" : "boolean",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public int nextBoundary(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the position of next boundary after the given offset. Returns\n     * {@code DONE} if there is no boundary after the given offset.\n     *\n     * @param offset the given start position to search from.\n     * @return the position of the last boundary preceding the given offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int prevBoundary(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the position of boundary preceding the given offset or\n     * {@code DONE} if the given offset specifies the starting position.\n     *\n     * @param offset the given start position to search from.\n     * @return the position of the last boundary preceding the given offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBeginning(int offset)",
    "returnType" : "int",
    "comment" : " If <code>offset</code> is within a word, returns the index of the first character of that\n     * word, otherwise returns BreakIterator.DONE.\n     *\n     * The offsets that are considered to be part of a word are the indexes of its characters,\n     * <i>as well as</i> the index of its last character plus one.\n     * If offset is the index of a low surrogate character, BreakIterator.DONE will be returned.\n     *\n     * Valid range for offset is [0..textLength] (note the inclusive upper bound).\n     * The returned value is within [0..offset] or BreakIterator.DONE.\n     *\n     * @throws IllegalArgumentException is offset is not valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEnd(int offset)",
    "returnType" : "int",
    "comment" : "\n     * If <code>offset</code> is within a word, returns the index of the last character of that\n     * word plus one, otherwise returns BreakIterator.DONE.\n     *\n     * The offsets that are considered to be part of a word are the indexes of its characters,\n     * <i>as well as</i> the index of its last character plus one.\n     * If offset is the index of a low surrogate character, BreakIterator.DONE will be returned.\n     *\n     * Valid range for offset is [0..textLength] (note the inclusive upper bound).\n     * The returned value is within [offset..textLength] or BreakIterator.DONE.\n     *\n     * @throws IllegalArgumentException is offset is not valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPrevWordBeginningOnTwoWordsBoundary(int offset)",
    "returnType" : "int",
    "comment" : "\n     * If the <code>offset</code> is within a word or on a word boundary that can only be\n     * considered the start of a word (e.g. _word where \"_\" is any character that would not\n     * be considered part of the word) then this returns the index of the first character of\n     * that word.\n     *\n     * If the offset is on a word boundary that can be considered the start and end of a\n     * word, e.g. AABB (where AA and BB are both words) and the offset is the boundary\n     * between AA and BB, this would return the start of the previous word, AA.\n     *\n     * Returns BreakIterator.DONE if there is no previous boundary.\n     *\n     * @throws IllegalArgumentException is offset is not valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNextWordEndOnTwoWordBoundary(int offset)",
    "returnType" : "int",
    "comment" : "\n     * If the <code>offset</code> is within a word or on a word boundary that can only be\n     * considered the end of a word (e.g. word_ where \"_\" is any character that would not\n     * be considered part of the word) then this returns the index of the last character\n     * plus one of that word.\n     *\n     * If the offset is on a word boundary that can be considered the start and end of a\n     * word, e.g. AABB (where AA and BB are both words) and the offset is the boundary\n     * between AA and BB, this would return the end of the next word, BB.\n     *\n     * Returns BreakIterator.DONE if there is no next boundary.\n     *\n     * @throws IllegalArgumentException is offset is not valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getBeginning(int offset, boolean getPrevWordBeginningOnTwoWordsBoundary)",
    "returnType" : "int",
    "comment" : "\n     * If the <code>offset</code> is within a word or on a word boundary that can only be\n     * considered the start of a word (e.g. _word where \"_\" is any character that would not\n     * be considered part of the word) then this returns the index of the first character of\n     * that word.\n     *\n     * If the offset is on a word boundary that can be considered the start and end of a\n     * word, e.g. AABB (where AA and BB are both words) and the offset is the boundary\n     * between AA and BB, and getPrevWordBeginningOnTwoWordsBoundary is true then this would\n     * return the start of the previous word, AA. Otherwise it would return the current offset,\n     * the start of BB.\n     *\n     * Returns BreakIterator.DONE if there is no previous boundary.\n     *\n     * @throws IllegalArgumentException is offset is not valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getEnd(int offset, boolean getNextWordEndOnTwoWordBoundary)",
    "returnType" : "int",
    "comment" : "\n     * If the <code>offset</code> is within a word or on a word boundary that can only be\n     * considered the end of a word (e.g. word_ where \"_\" is any character that would not be\n     * considered part of the word) then this returns the index of the last character plus one\n     * of that word.\n     *\n     * If the offset is on a word boundary that can be considered the start and end of a\n     * word, e.g. AABB (where AA and BB are both words) and the offset is the boundary\n     * between AA and BB, and getNextWordEndOnTwoWordBoundary is true then this would return\n     * the end of the next word, BB. Otherwise it would return the current offset, the end\n     * of AA.\n     *\n     * Returns BreakIterator.DONE if there is no next boundary.\n     *\n     * @throws IllegalArgumentException is offset is not valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPunctuationBeginning(int offset)",
    "returnType" : "int",
    "comment" : "\n     * If <code>offset</code> is within a group of punctuation as defined\n     * by {@link #isPunctuation(int)}, returns the index of the first character\n     * of that group, otherwise returns BreakIterator.DONE.\n     *\n     * @param offset the offset to search from.\n     ",
    "links" : [ "#isPunctuation(int)" ]
  }, {
    "name" : "public int getPunctuationEnd(int offset)",
    "returnType" : "int",
    "comment" : "\n     * If <code>offset</code> is within a group of punctuation as defined\n     * by {@link #isPunctuation(int)}, returns the index of the last character\n     * of that group plus one, otherwise returns BreakIterator.DONE.\n     *\n     * @param offset the offset to search from.\n     ",
    "links" : [ "#isPunctuation(int)" ]
  }, {
    "name" : "public boolean isAfterPunctuation(int offset)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if the provided offset is after a punctuation character\n     * as defined by {@link #isPunctuation(int)}.\n     *\n     * @param offset the offset to check from.\n     * @return Whether the offset is after a punctuation character.\n     ",
    "links" : [ "#isPunctuation(int)" ]
  }, {
    "name" : "public boolean isOnPunctuation(int offset)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if the provided offset is at a punctuation character\n     * as defined by {@link #isPunctuation(int)}.\n     *\n     * @param offset the offset to check from.\n     * @return Whether the offset is at a punctuation character.\n     ",
    "links" : [ "#isPunctuation(int)" ]
  }, {
    "name" : "public static boolean isMidWordPunctuation(Locale locale, int codePoint)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if the codepoint is a mid-word-only punctuation.\n     *\n     * At the moment, this is locale-independent, and includes all the characters in\n     * the MidLetter, MidNumLet, and Single_Quote class of Unicode word breaking algorithm (see\n     * UAX #29 \"Unicode Text Segmentation\" at http://unicode.org/reports/tr29/). These are all the\n     * characters that according to the rules WB6 and WB7 of UAX #29 prevent word breaks if they are\n     * in the middle of a word, but they become word breaks if they happen at the end of a word\n     * (accroding to rule WB999 that breaks word in any place that is not prohibited otherwise).\n     *\n     * @param locale the locale to consider the codepoint in. Presently ignored.\n     * @param codePoint the codepoint to check.\n     * @return True if the codepoint is a mid-word punctuation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isPunctuationStartBoundary(int offset)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isPunctuationEndBoundary(int offset)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isPunctuation(int cp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isAfterLetterOrDigit(int offset)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isOnLetterOrDigit(int offset)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkOffsetIsValid(int offset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "WINDOW_WIDTH", "mStart", "mEnd", "mCharSeq", "mIterator" ],
  "methodNames" : [ "public void setCharSequence(@NonNull CharSequence charSequence, int start, int end)", "public int preceding(int offset)", "public int following(int offset)", "public boolean isBoundary(int offset)", "public int nextBoundary(int offset)", "public int prevBoundary(int offset)", "public int getBeginning(int offset)", "public int getEnd(int offset)", "public int getPrevWordBeginningOnTwoWordsBoundary(int offset)", "public int getNextWordEndOnTwoWordBoundary(int offset)", "private int getBeginning(int offset, boolean getPrevWordBeginningOnTwoWordsBoundary)", "private int getEnd(int offset, boolean getNextWordEndOnTwoWordBoundary)", "public int getPunctuationBeginning(int offset)", "public int getPunctuationEnd(int offset)", "public boolean isAfterPunctuation(int offset)", "public boolean isOnPunctuation(int offset)", "public static boolean isMidWordPunctuation(Locale locale, int codePoint)", "private boolean isPunctuationStartBoundary(int offset)", "private boolean isPunctuationEndBoundary(int offset)", "private static boolean isPunctuation(int cp)", "private boolean isAfterLetterOrDigit(int offset)", "private boolean isOnLetterOrDigit(int offset)", "private void checkOffsetIsValid(int offset)" ]
}