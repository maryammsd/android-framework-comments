{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/le/ScanFilter.java",
  "packageName" : "android.bluetooth.le",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link ScanFilter}.\n     ",
  "variables" : [ {
    "name" : "mDeviceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceAddress",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceUuid",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUuidMask",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceSolicitationUuid",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceSolicitationUuidMask",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceDataUuid",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceDataMask",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManufacturerId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManufacturerData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManufacturerDataMask",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setDeviceName(String deviceName)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on device name.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDeviceAddress(String deviceAddress)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on device address.\n         *\n         * @param deviceAddress The device Bluetooth address for the filter. It needs to be in the\n         * format of \"01:02:03:AB:CD:EF\". The device address can be validated using {@link\n         * BluetoothAdapter#checkBluetoothAddress}.\n         * @throws IllegalArgumentException If the {@code deviceAddress} is invalid.\n         ",
    "links" : [ "android.bluetooth.BluetoothAdapter#checkBluetoothAddress" ]
  }, {
    "name" : "public Builder setServiceUuid(ParcelUuid serviceUuid)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on service uuid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceUuid(ParcelUuid serviceUuid, ParcelUuid uuidMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on partial service uuid. The {@code uuidMask} is the bit mask for the\n         * {@code serviceUuid}. Set any bit in the mask to 1 to indicate a match is needed for the\n         * bit in {@code serviceUuid}, and 0 to ignore that bit.\n         *\n         * @throws IllegalArgumentException If {@code serviceUuid} is {@code null} but {@code\n         * uuidMask} is not {@code null}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceSolicitationUuid(@Nullable ParcelUuid serviceSolicitationUuid)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on service solicitation uuid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceSolicitationUuid(@Nullable ParcelUuid serviceSolicitationUuid, @Nullable ParcelUuid solicitationUuidMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on partial service Solicitation uuid. The {@code SolicitationUuidMask} is the\n         * bit mask for the {@code serviceSolicitationUuid}. Set any bit in the mask to 1 to\n         * indicate a match is needed for the bit in {@code serviceSolicitationUuid}, and 0 to\n         * ignore that bit.\n         *\n         * @param serviceSolicitationUuid can only be null if solicitationUuidMask is null.\n         * @param solicitationUuidMask can be null or a mask with no restriction.\n         *\n         * @throws IllegalArgumentException If {@code serviceSolicitationUuid} is {@code null} but\n         *             {@code serviceSolicitationUuidMask} is not {@code null}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceData(ParcelUuid serviceDataUuid, byte[] serviceData)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filtering on service data.\n         *\n         * @throws IllegalArgumentException If {@code serviceDataUuid} is null.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceData(ParcelUuid serviceDataUuid, byte[] serviceData, byte[] serviceDataMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set partial filter on service data. For any bit in the mask, set it to 1 if it needs to\n         * match the one in service data, otherwise set it to 0 to ignore that bit.\n         * <p>\n         * The {@code serviceDataMask} must have the same length of the {@code serviceData}.\n         *\n         * @throws IllegalArgumentException If {@code serviceDataUuid} is null or {@code\n         * serviceDataMask} is {@code null} while {@code serviceData} is not or {@code\n         * serviceDataMask} and {@code serviceData} has different length.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setManufacturerData(int manufacturerId, byte[] manufacturerData)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on on manufacturerData. A negative manufacturerId is considered as invalid id.\n         *\n         * @throws IllegalArgumentException If the {@code manufacturerId} is invalid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setManufacturerData(int manufacturerId, byte[] manufacturerData, byte[] manufacturerDataMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on partial manufacture data. For any bit in the mask, set it the 1 if it needs\n         * to match the one in manufacturer data, otherwise set it to 0.\n         * <p>\n         * The {@code manufacturerDataMask} must have the same length of {@code manufacturerData}.\n         *\n         * @throws IllegalArgumentException If the {@code manufacturerId} is invalid, or {@code\n         * manufacturerData} is null while {@code manufacturerDataMask} is not, or {@code\n         * manufacturerData} and {@code manufacturerDataMask} have different length.\n         ",
    "links" : [ ]
  }, {
    "name" : "public ScanFilter build()",
    "returnType" : "ScanFilter",
    "comment" : "\n         * Build {@link ScanFilter}.\n         *\n         * @throws IllegalArgumentException If the filter cannot be built.\n         ",
    "links" : [ "android.bluetooth.le.ScanFilter" ]
  } ],
  "variableNames" : [ "mDeviceName", "mDeviceAddress", "mServiceUuid", "mUuidMask", "mServiceSolicitationUuid", "mServiceSolicitationUuidMask", "mServiceDataUuid", "mServiceData", "mServiceDataMask", "mManufacturerId", "mManufacturerData", "mManufacturerDataMask" ],
  "methodNames" : [ "public Builder setDeviceName(String deviceName)", "public Builder setDeviceAddress(String deviceAddress)", "public Builder setServiceUuid(ParcelUuid serviceUuid)", "public Builder setServiceUuid(ParcelUuid serviceUuid, ParcelUuid uuidMask)", "public Builder setServiceSolicitationUuid(@Nullable ParcelUuid serviceSolicitationUuid)", "public Builder setServiceSolicitationUuid(@Nullable ParcelUuid serviceSolicitationUuid, @Nullable ParcelUuid solicitationUuidMask)", "public Builder setServiceData(ParcelUuid serviceDataUuid, byte[] serviceData)", "public Builder setServiceData(ParcelUuid serviceDataUuid, byte[] serviceData, byte[] serviceDataMask)", "public Builder setManufacturerData(int manufacturerId, byte[] manufacturerData)", "public Builder setManufacturerData(int manufacturerId, byte[] manufacturerData, byte[] manufacturerDataMask)", "public ScanFilter build()" ]
}