{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/feature/RcsFeature.java",
  "packageName" : "android.telephony.ims.feature",
  "className" : "RcsFeatureBinder",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mReference",
    "type" : "RcsFeature",
    "comment" : " creating a inner class referencing the outer class directly.",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int queryCapabilityStatus() throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addCapabilityCallback(IImsCapabilityCallback c) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeCapabilityCallback(IImsCapabilityCallback c) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void changeCapabilitiesConfiguration(CapabilityChangeRequest r, IImsCapabilityCallback c) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void queryCapabilityConfiguration(int capability, int radioTech, IImsCapabilityCallback c) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFeatureState() throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCapabilityExchangeEventListener(@Nullable ICapabilityExchangeEventListener listener) throws RemoteException",
    "returnType" : "void",
    "comment" : " RcsCapabilityExchangeImplBase specific APIs",
    "links" : [ ]
  }, {
    "name" : "public void publishCapabilities(@NonNull String pidfXml, @NonNull IPublishResponseCallback callback) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void subscribeForCapabilities(@NonNull List<Uri> uris, @NonNull ISubscribeResponseCallback callback) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOptionsCapabilityRequest(@NonNull Uri contactUri, @NonNull List<String> myCapabilities, @NonNull IOptionsResponseCallback callback) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void executeMethodAsync(Runnable r, String errorLogName) throws RemoteException",
    "returnType" : "void",
    "comment" : " the future to return.",
    "links" : [ ]
  }, {
    "name" : "private T executeMethodAsyncForResult(Supplier<T> r, String errorLogName) throws RemoteException",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int queryCapabilityStatus() throws RemoteException", "public void addCapabilityCallback(IImsCapabilityCallback c) throws RemoteException", "public void removeCapabilityCallback(IImsCapabilityCallback c) throws RemoteException", "public void changeCapabilitiesConfiguration(CapabilityChangeRequest r, IImsCapabilityCallback c) throws RemoteException", "public void queryCapabilityConfiguration(int capability, int radioTech, IImsCapabilityCallback c) throws RemoteException", "public int getFeatureState() throws RemoteException", "public void setCapabilityExchangeEventListener(@Nullable ICapabilityExchangeEventListener listener) throws RemoteException", "public void publishCapabilities(@NonNull String pidfXml, @NonNull IPublishResponseCallback callback) throws RemoteException", "public void subscribeForCapabilities(@NonNull List<Uri> uris, @NonNull ISubscribeResponseCallback callback) throws RemoteException", "public void sendOptionsCapabilityRequest(@NonNull Uri contactUri, @NonNull List<String> myCapabilities, @NonNull IOptionsResponseCallback callback) throws RemoteException", "private void executeMethodAsync(Runnable r, String errorLogName) throws RemoteException", "private T executeMethodAsyncForResult(Supplier<T> r, String errorLogName) throws RemoteException" ],
  "variableNames" : [ "mReference", "mExecutor" ]
}