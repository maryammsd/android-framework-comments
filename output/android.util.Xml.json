{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/Xml.java",
  "packageName" : "android.util",
  "className" : "Xml",
  "comment" : "\n * XML utility methods.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FEATURE_RELAXED",
    "type" : "String",
    "comment" : "\n     * {@link org.xmlpull.v1.XmlPullParser} \"relaxed\" feature name.\n     *\n     * @see <a href=\"http://xmlpull.org/v1/doc/features.html#relaxed\">\n     *  specification</a>\n     ",
    "links" : [ "org.xmlpull.v1.XmlPullParser" ]
  }, {
    "name" : "ENABLE_BINARY_DEFAULT",
    "type" : "boolean",
    "comment" : "\n     * Feature flag: when set, {@link #resolveSerializer(OutputStream)} will\n     * emit binary XML by default.\n     *\n     * @hide\n     ",
    "links" : [ "#resolveSerializer(OutputStream)" ]
  }, {
    "name" : "ENABLE_RESOLVE_OPTIMIZATIONS",
    "type" : "boolean",
    "comment" : "\n     * Feature flag: when set, {@link #resolvePullParser(InputStream)}} will attempt to sniff\n     * using {@code pread} optimization.\n     *\n     * @hide\n     ",
    "links" : [ "#resolvePullParser(InputStream)" ]
  } ],
  "methods" : [ {
    "name" : "private static boolean shouldEnableBinaryDefault()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean shouldEnableBinaryDefault$ravenwood()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean shouldEnableResolveOptimizations()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean shouldEnableResolveOptimizations$ravenwood()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void parse(String xml, ContentHandler contentHandler) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Parses the given xml string and fires events on the given SAX handler.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void parse(Reader in, ContentHandler contentHandler) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "\n     * Parses xml from the given reader and fires events on the given SAX\n     * handler.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void parse(InputStream in, Encoding encoding, ContentHandler contentHandler) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "\n     * Parses xml from the given input stream and fires events on the given SAX\n     * handler.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static XmlPullParser newPullParser()",
    "returnType" : "XmlPullParser",
    "comment" : "\n     * Returns a new pull parser with namespace support.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static XmlPullParser newPullParser$ravenwood()",
    "returnType" : "XmlPullParser",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static TypedXmlPullParser newFastPullParser()",
    "returnType" : "TypedXmlPullParser",
    "comment" : "\n     * Creates a new {@link TypedXmlPullParser} which is optimized for use\n     * inside the system, typically by supporting only a basic set of features.\n     * <p>\n     * In particular, the returned parser does not support namespaces, prefixes,\n     * properties, or options.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.modules.utils.TypedXmlPullParser" ]
  }, {
    "name" : "public static TypedXmlPullParser newBinaryPullParser()",
    "returnType" : "TypedXmlPullParser",
    "comment" : "\n     * Creates a new {@link XmlPullParser} that reads XML documents using a\n     * custom binary wire protocol which benchmarking has shown to be 8.5x\n     * faster than {@code Xml.newFastPullParser()} for a typical\n     * {@code packages.xml}.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.internal.util.ArtBinaryXmlPullParser" ]
  }, {
    "name" : "public static TypedXmlPullParser newBinaryPullParser$ravenwood()",
    "returnType" : "TypedXmlPullParser",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static TypedXmlPullParser resolvePullParser(@NonNull InputStream in) throws IOException",
    "returnType" : "TypedXmlPullParser",
    "comment" : "\n     * Creates a new {@link XmlPullParser} which is optimized for use inside the\n     * system, typically by supporting only a basic set of features.\n     * <p>\n     * This returned instance may be configured to read using an efficient\n     * binary format instead of a human-readable text format, depending on\n     * device feature flags.\n     * <p>\n     * To ensure that both formats are detected and transparently handled\n     * correctly, you must shift to using both {@link #resolveSerializer} and\n     * {@link #resolvePullParser}.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.internal.util.ArtBinaryXmlPullParser", "#resolvePullParser", "#resolveSerializer" ]
  }, {
    "name" : "public static XmlSerializer newSerializer()",
    "returnType" : "XmlSerializer",
    "comment" : "\n     * Creates a new xml serializer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TypedXmlSerializer newFastSerializer()",
    "returnType" : "TypedXmlSerializer",
    "comment" : "\n     * Creates a new {@link XmlSerializer} which is optimized for use inside the\n     * system, typically by supporting only a basic set of features.\n     * <p>\n     * In particular, the returned parser does not support namespaces, prefixes,\n     * properties, or options.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.internal.util.ArtBinaryXmlSerializer" ]
  }, {
    "name" : "public static TypedXmlSerializer newBinarySerializer()",
    "returnType" : "TypedXmlSerializer",
    "comment" : "\n     * Creates a new {@link XmlSerializer} that writes XML documents using a\n     * custom binary wire protocol which benchmarking has shown to be 4.4x\n     * faster and use 2.8x less disk space than {@code Xml.newFastSerializer()}\n     * for a typical {@code packages.xml}.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.internal.util.ArtBinaryXmlSerializer" ]
  }, {
    "name" : "public static TypedXmlSerializer newBinarySerializer$ravenwood()",
    "returnType" : "TypedXmlSerializer",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static TypedXmlSerializer resolveSerializer(@NonNull OutputStream out) throws IOException",
    "returnType" : "TypedXmlSerializer",
    "comment" : "\n     * Creates a new {@link XmlSerializer} which is optimized for use inside the\n     * system, typically by supporting only a basic set of features.\n     * <p>\n     * This returned instance may be configured to write using an efficient\n     * binary format instead of a human-readable text format, depending on\n     * device feature flags.\n     * <p>\n     * To ensure that both formats are detected and transparently handled\n     * correctly, you must shift to using both {@link #resolveSerializer} and\n     * {@link #resolvePullParser}.\n     *\n     * @hide\n     ",
    "links" : [ "#resolvePullParser", "#resolveSerializer", "com.android.internal.util.ArtBinaryXmlSerializer" ]
  }, {
    "name" : "public static TypedXmlSerializer resolveSerializer$ravenwood(@NonNull OutputStream out) throws IOException",
    "returnType" : "TypedXmlSerializer",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void copy(@NonNull XmlPullParser in, @NonNull XmlSerializer out) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Copy the first XML document into the second document.\n     * <p>\n     * Implemented by reading all events from the given {@link XmlPullParser}\n     * and writing them directly to the given {@link XmlSerializer}. This can be\n     * useful for transparently converting between underlying wire protocols.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.internal.util.ArtBinaryXmlPullParser", "com.android.internal.util.ArtBinaryXmlSerializer" ]
  }, {
    "name" : "private static String normalizeNamespace(@Nullable String namespace)",
    "returnType" : "String",
    "comment" : "\n     * Some parsers may return an empty string {@code \"\"} when a namespace in\n     * unsupported, which can confuse serializers. This method normalizes empty\n     * strings to be {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Encoding findEncodingByName(String encodingName) throws UnsupportedEncodingException",
    "returnType" : "Encoding",
    "comment" : "\n     * Finds an encoding by name. Returns UTF-8 if you pass {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AttributeSet asAttributeSet(XmlPullParser parser)",
    "returnType" : "AttributeSet",
    "comment" : "\n     * Return an AttributeSet interface for use with the given XmlPullParser.\n     * If the given parser itself implements AttributeSet, that implementation\n     * is simply returned.  Otherwise a wrapper class is\n     * instantiated on top of the XmlPullParser, as a proxy for retrieving its\n     * attributes, and returned to you.\n     *\n     * @param parser The existing parser for which you would like an\n     *               AttributeSet.\n     *\n     * @return An AttributeSet you can use to retrieve the\n     *         attribute values at each of the tags as the parser moves\n     *         through its XML document.\n     *\n     * @see AttributeSet\n     ",
    "links" : [ ]
  }, {
    "name" : "private static XmlSerializer newXmlSerializer()",
    "returnType" : "XmlSerializer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static XmlSerializer newXmlSerializer$ravenwood()",
    "returnType" : "XmlSerializer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static XmlPullParser newXmlPullParser()",
    "returnType" : "XmlPullParser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static XmlPullParser newXmlPullParser$ravenwood()",
    "returnType" : "XmlPullParser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static XMLReader newXMLReader()",
    "returnType" : "XMLReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static XMLReader newXMLReader$ravenwood()",
    "returnType" : "XMLReader",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static boolean shouldEnableBinaryDefault()", "private static boolean shouldEnableBinaryDefault$ravenwood()", "private static boolean shouldEnableResolveOptimizations()", "private static boolean shouldEnableResolveOptimizations$ravenwood()", "public static void parse(String xml, ContentHandler contentHandler) throws SAXException", "public static void parse(Reader in, ContentHandler contentHandler) throws IOException, SAXException", "public static void parse(InputStream in, Encoding encoding, ContentHandler contentHandler) throws IOException, SAXException", "public static XmlPullParser newPullParser()", "public static XmlPullParser newPullParser$ravenwood()", "public static TypedXmlPullParser newFastPullParser()", "public static TypedXmlPullParser newBinaryPullParser()", "public static TypedXmlPullParser newBinaryPullParser$ravenwood()", "public static TypedXmlPullParser resolvePullParser(@NonNull InputStream in) throws IOException", "public static XmlSerializer newSerializer()", "public static TypedXmlSerializer newFastSerializer()", "public static TypedXmlSerializer newBinarySerializer()", "public static TypedXmlSerializer newBinarySerializer$ravenwood()", "public static TypedXmlSerializer resolveSerializer(@NonNull OutputStream out) throws IOException", "public static TypedXmlSerializer resolveSerializer$ravenwood(@NonNull OutputStream out) throws IOException", "public static void copy(@NonNull XmlPullParser in, @NonNull XmlSerializer out) throws XmlPullParserException, IOException", "private static String normalizeNamespace(@Nullable String namespace)", "public static Encoding findEncodingByName(String encodingName) throws UnsupportedEncodingException", "public static AttributeSet asAttributeSet(XmlPullParser parser)", "private static XmlSerializer newXmlSerializer()", "private static XmlSerializer newXmlSerializer$ravenwood()", "private static XmlPullParser newXmlPullParser()", "private static XmlPullParser newXmlPullParser$ravenwood()", "private static XMLReader newXMLReader()", "private static XMLReader newXMLReader$ravenwood()" ],
  "variableNames" : [ "FEATURE_RELAXED", "ENABLE_BINARY_DEFAULT", "ENABLE_RESOLVE_OPTIMIZATIONS" ]
}