{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/InsetsSource.java",
  "packageName" : "android.view",
  "className" : "InsetsSource",
  "comment" : "\n * Represents the state of a single window generating insets for clients.\n * @hide\n ",
  "variables" : [ {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrame",
    "type" : "Rect",
    "comment" : " Frame of the source in screen coordinate space ",
    "links" : [ ]
  }, {
    "name" : "mVisibleFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<InsetsSource>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setFrame(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFrame(Rect frame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVisibleFrame(@Nullable Rect visibleFrame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVisible(boolean visible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getFrame()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getVisibleFrame()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isUserControllable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets calculateInsets(Rect relativeFrame, boolean ignoreVisibility)",
    "returnType" : "Insets",
    "comment" : "\n     * Calculates the insets this source will cause to a client window.\n     *\n     * @param relativeFrame The frame to calculate the insets relative to.\n     * @param ignoreVisibility If true, always reports back insets even if source isn't visible.\n     * @return The resulting insets. The contract is that only one side will be occupied by a\n     *         source.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Insets calculateVisibleInsets(Rect relativeFrame)",
    "returnType" : "Insets",
    "comment" : "\n     * Like {@link #calculateInsets(Rect, boolean)}, but will return visible insets.\n     ",
    "links" : [ "#calculateInsets" ]
  }, {
    "name" : "private Insets calculateInsets(Rect relativeFrame, Rect frame, boolean ignoreVisibility)",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean getIntersection(@NonNull Rect a, @NonNull Rect b, @NonNull Rect out)",
    "returnType" : "boolean",
    "comment" : "\n     * Outputs the intersection of two rectangles. The shared edges will also be counted in the\n     * intersection.\n     *\n     * @param a The first rectangle being intersected with.\n     * @param b The second rectangle being intersected with.\n     * @param out The rectangle which represents the intersection.\n     * @return {@code true} if there is any intersection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o, boolean excludeInvisibleImeFrames)",
    "returnType" : "boolean",
    "comment" : "\n     * @param excludeInvisibleImeFrames If {@link InsetsState#ITYPE_IME} frames should be ignored\n     *                                  when IME is not visible.\n     ",
    "links" : [ "InsetsState#ITYPE_IME" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mType", "mFrame", "mVisibleFrame", "mVisible", "mTmpFrame", "CREATOR" ],
  "methodNames" : [ "public void setFrame(int left, int top, int right, int bottom)", "public void setFrame(Rect frame)", "public void setVisibleFrame(@Nullable Rect visibleFrame)", "public void setVisible(boolean visible)", "public int getType()", "public Rect getFrame()", "public Rect getVisibleFrame()", "public boolean isVisible()", " boolean isUserControllable()", "public Insets calculateInsets(Rect relativeFrame, boolean ignoreVisibility)", "public Insets calculateVisibleInsets(Rect relativeFrame)", "private Insets calculateInsets(Rect relativeFrame, Rect frame, boolean ignoreVisibility)", "private static boolean getIntersection(@NonNull Rect a, @NonNull Rect b, @NonNull Rect out)", "public void dump(String prefix, PrintWriter pw)", "public boolean equals(Object o)", "public boolean equals(Object o, boolean excludeInvisibleImeFrames)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toString()" ]
}