{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/AppOpsManager.java",
  "packageName" : "android.app",
  "className" : "HistoricalOp",
  "comment" : "\n     * This class represents historical information about an app op.\n     *\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mOp",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessCount",
    "type" : "LongSparseLongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRejectCount",
    "type" : "LongSparseLongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessDuration",
    "type" : "LongSparseLongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDiscreteAccesses",
    "type" : "List<AttributedOpEntry>",
    "comment" : " Discrete Ops for this Op ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<HistoricalOp>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void filter(@OpHistoryFlags int historyFlag, double scaleFactor, long beginTimeMillis, long endTimeMillis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasData(@NonNull LongSparseLongArray array)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private HistoricalOp splice(double fractionToRemove)",
    "returnType" : "HistoricalOp",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void splice(@Nullable LongSparseLongArray sourceContainer, @NonNull Supplier<LongSparseLongArray> destContainerProvider, double fractionToRemove)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void merge(@NonNull HistoricalOp other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void increaseAccessCount(@UidState int uidState, @OpFlags int flags, long increment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void increaseRejectCount(@UidState int uidState, @OpFlags int flags, long increment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void increaseAccessDuration(@UidState int uidState, @OpFlags int flags, long increment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void increaseCount(@NonNull LongSparseLongArray counts, @UidState int uidState, @OpFlags int flags, long increment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addDiscreteAccess(@UidState int uidState, @OpFlags int flag, long discreteAccessTime, long discreteAccessDuration, @Nullable OpEventProxyInfo proxy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getOpName()",
    "returnType" : "String",
    "comment" : "\n         * Gets the op name.\n         *\n         * @return The op name.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getOpCode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getDiscreteAccessCount()",
    "returnType" : "int",
    "comment" : "\n         * Gets number of discrete historical app ops.\n         *\n         * @return The number historical app ops.\n         * @see #getDiscreteAccessAt(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public AttributedOpEntry getDiscreteAccessAt(@IntRange(from = 0) int index)",
    "returnType" : "AttributedOpEntry",
    "comment" : "\n         * Gets the historical op at a given index.\n         *\n         * @param index The index to lookup.\n         * @return The op at the given index.\n         * @see #getDiscreteAccessCount()\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getForegroundAccessCount(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Gets the number times the op was accessed (performed) in the foreground.\n         *\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         * @return The times the op was accessed in the foreground.\n         *\n         * @see #getBackgroundAccessCount(int)\n         * @see #getAccessCount(int, int, int)\n         ",
    "links" : [ "#OP_FLAGS_ALL", "#OP_FLAG_TRUSTED_PROXIED", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public List<AttributedOpEntry> getForegroundDiscreteAccesses(@OpFlags int flags)",
    "returnType" : "List<AttributedOpEntry>",
    "comment" : "\n         * Gets the discrete events the op was accessed (performed) in the foreground.\n         *\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         * @return The list of discrete ops accessed in the foreground.\n         *\n         * @see #getBackgroundDiscreteAccesses(int)\n         * @see #getDiscreteAccesses(int, int, int)\n         ",
    "links" : [ "#OP_FLAGS_ALL", "#OP_FLAG_TRUSTED_PROXIED", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public long getBackgroundAccessCount(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Gets the number times the op was accessed (performed) in the background.\n         *\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         * @return The times the op was accessed in the background.\n         *\n         * @see #getForegroundAccessCount(int)\n         * @see #getAccessCount(int, int, int)\n         ",
    "links" : [ "#OP_FLAGS_ALL", "#OP_FLAG_TRUSTED_PROXIED", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public List<AttributedOpEntry> getBackgroundDiscreteAccesses(@OpFlags int flags)",
    "returnType" : "List<AttributedOpEntry>",
    "comment" : "\n         * Gets the discrete events the op was accessed (performed) in the background.\n         *\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         * @return The list of discrete ops accessed in the background.\n         *\n         * @see #getForegroundDiscreteAccesses(int)\n         * @see #getDiscreteAccesses(int, int, int)\n         ",
    "links" : [ "#OP_FLAGS_ALL", "#OP_FLAG_TRUSTED_PROXIED", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public long getAccessCount(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Gets the number times the op was accessed (performed) for a\n         * range of uid states.\n         *\n         * @param fromUidState The UID state from which to query. Could be one of\n         * {@link #UID_STATE_PERSISTENT}, {@link #UID_STATE_TOP},\n         * {@link #UID_STATE_FOREGROUND_SERVICE}, {@link #UID_STATE_FOREGROUND},\n         * {@link #UID_STATE_BACKGROUND}, {@link #UID_STATE_CACHED}.\n         * @param toUidState The UID state to which to query.\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         *\n         * @return The times the op was accessed for the given UID state.\n         *\n         * @see #getForegroundAccessCount(int)\n         * @see #getBackgroundAccessCount(int)\n         ",
    "links" : [ "#UID_STATE_BACKGROUND", "#OP_FLAGS_ALL", "#UID_STATE_PERSISTENT", "#OP_FLAG_TRUSTED_PROXIED", "#UID_STATE_TOP", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#UID_STATE_FOREGROUND_SERVICE", "#UID_STATE_CACHED", "#UID_STATE_FOREGROUND", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public List<AttributedOpEntry> getDiscreteAccesses(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "List<AttributedOpEntry>",
    "comment" : "\n         * Gets the discrete events the op was accessed (performed) for a\n         * range of uid states.\n         *\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         * @return The discrete the op was accessed in the background.\n         *\n         * @see #getBackgroundDiscreteAccesses(int)\n         * @see #getForegroundDiscreteAccesses(int)\n         ",
    "links" : [ "#OP_FLAGS_ALL", "#OP_FLAG_TRUSTED_PROXIED", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public long getForegroundRejectCount(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Gets the number times the op was rejected in the foreground.\n         *\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         * @return The times the op was rejected in the foreground.\n         *\n         * @see #getBackgroundRejectCount(int)\n         * @see #getRejectCount(int, int, int)\n         ",
    "links" : [ "#OP_FLAGS_ALL", "#OP_FLAG_TRUSTED_PROXIED", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public long getBackgroundRejectCount(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Gets the number times the op was rejected in the background.\n         *\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         * @return The times the op was rejected in the background.\n         *\n         * @see #getForegroundRejectCount(int)\n         * @see #getRejectCount(int, int, int)\n         ",
    "links" : [ "#OP_FLAGS_ALL", "#OP_FLAG_TRUSTED_PROXIED", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public long getRejectCount(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Gets the number times the op was rejected for a given range of UID states.\n         *\n         * @param fromUidState The UID state from which to query. Could be one of\n         * {@link #UID_STATE_PERSISTENT}, {@link #UID_STATE_TOP},\n         * {@link #UID_STATE_FOREGROUND_SERVICE}, {@link #UID_STATE_FOREGROUND},\n         * {@link #UID_STATE_BACKGROUND}, {@link #UID_STATE_CACHED}.\n         * @param toUidState The UID state to which to query.\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         *\n         * @return The times the op was rejected for the given UID state.\n         *\n         * @see #getForegroundRejectCount(int)\n         * @see #getBackgroundRejectCount(int)\n         ",
    "links" : [ "#UID_STATE_BACKGROUND", "#OP_FLAGS_ALL", "#UID_STATE_PERSISTENT", "#OP_FLAG_TRUSTED_PROXIED", "#UID_STATE_TOP", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#UID_STATE_FOREGROUND_SERVICE", "#UID_STATE_CACHED", "#UID_STATE_FOREGROUND", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public long getForegroundAccessDuration(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Gets the total duration the app op was accessed (performed) in the foreground.\n         * The duration is in wall time.\n         *\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         * @return The total duration the app op was accessed in the foreground.\n         *\n         * @see #getBackgroundAccessDuration(int)\n         * @see #getAccessDuration(int, int, int)\n         ",
    "links" : [ "#OP_FLAGS_ALL", "#OP_FLAG_TRUSTED_PROXIED", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public long getBackgroundAccessDuration(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Gets the total duration the app op was accessed (performed) in the background.\n         * The duration is in wall time.\n         *\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         * @return The total duration the app op was accessed in the background.\n         *\n         * @see #getForegroundAccessDuration(int)\n         * @see #getAccessDuration(int, int, int)\n         ",
    "links" : [ "#OP_FLAGS_ALL", "#OP_FLAG_TRUSTED_PROXIED", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public long getAccessDuration(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Gets the total duration the app op was accessed (performed) for a given\n         * range of UID states. The duration is in wall time.\n         *\n         * @param fromUidState The UID state from which to query. Could be one of\n         * {@link #UID_STATE_PERSISTENT}, {@link #UID_STATE_TOP},\n         * {@link #UID_STATE_FOREGROUND_SERVICE}, {@link #UID_STATE_FOREGROUND},\n         * {@link #UID_STATE_BACKGROUND}, {@link #UID_STATE_CACHED}.\n         * @param toUidState The UID state from which to query.\n         * @param flags The flags which are any combination of\n         * {@link #OP_FLAG_SELF}, {@link #OP_FLAG_TRUSTED_PROXY},\n         * {@link #OP_FLAG_UNTRUSTED_PROXY}, {@link #OP_FLAG_TRUSTED_PROXIED},\n         * {@link #OP_FLAG_UNTRUSTED_PROXIED}. You can use {@link #OP_FLAGS_ALL}\n         * for any flag.\n         *\n         * @return The total duration the app op was accessed for the given UID state.\n         *\n         * @see #getForegroundAccessDuration(int)\n         * @see #getBackgroundAccessDuration(int)\n         ",
    "links" : [ "#UID_STATE_BACKGROUND", "#OP_FLAGS_ALL", "#UID_STATE_PERSISTENT", "#OP_FLAG_TRUSTED_PROXIED", "#UID_STATE_TOP", "#OP_FLAG_TRUSTED_PROXY", "#OP_FLAG_SELF", "#UID_STATE_FOREGROUND_SERVICE", "#UID_STATE_CACHED", "#UID_STATE_FOREGROUND", "#OP_FLAG_UNTRUSTED_PROXY", "#OP_FLAG_UNTRUSTED_PROXIED" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void accept(@NonNull HistoricalOpsVisitor visitor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LongSparseLongArray getOrCreateAccessCount()",
    "returnType" : "LongSparseLongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LongSparseLongArray getOrCreateRejectCount()",
    "returnType" : "LongSparseLongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LongSparseLongArray getOrCreateAccessDuration()",
    "returnType" : "LongSparseLongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<AttributedOpEntry> getOrCreateDiscreteAccesses()",
    "returnType" : "List<AttributedOpEntry>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void scale(@NonNull LongSparseLongArray data, double scaleFactor)",
    "returnType" : "void",
    "comment" : "\n         * Multiplies the entries in the array with the passed in scale factor and\n         * rounds the result at up 0.5 boundary.\n         *\n         * @param data The data to scale.\n         * @param scaleFactor The scale factor.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static void merge(@NonNull Supplier<LongSparseLongArray> thisSupplier, @Nullable LongSparseLongArray other)",
    "returnType" : "void",
    "comment" : "\n         * Merges two arrays while lazily acquiring the destination.\n         *\n         * @param thisSupplier The destination supplier.\n         * @param other The array to merge in.\n         ",
    "links" : [ ]
  }, {
    "name" : "public LongSparseArray<Object> collectKeys()",
    "returnType" : "LongSparseArray<Object>",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void filter(@OpHistoryFlags int historyFlag, double scaleFactor, long beginTimeMillis, long endTimeMillis)", "private boolean isEmpty()", "private boolean hasData(@NonNull LongSparseLongArray array)", "private HistoricalOp splice(double fractionToRemove)", "private static void splice(@Nullable LongSparseLongArray sourceContainer, @NonNull Supplier<LongSparseLongArray> destContainerProvider, double fractionToRemove)", "private void merge(@NonNull HistoricalOp other)", "private void increaseAccessCount(@UidState int uidState, @OpFlags int flags, long increment)", "private void increaseRejectCount(@UidState int uidState, @OpFlags int flags, long increment)", "private void increaseAccessDuration(@UidState int uidState, @OpFlags int flags, long increment)", "private void increaseCount(@NonNull LongSparseLongArray counts, @UidState int uidState, @OpFlags int flags, long increment)", "private void addDiscreteAccess(@UidState int uidState, @OpFlags int flag, long discreteAccessTime, long discreteAccessDuration, @Nullable OpEventProxyInfo proxy)", "public String getOpName()", "public int getOpCode()", "public int getDiscreteAccessCount()", "public AttributedOpEntry getDiscreteAccessAt(@IntRange(from = 0) int index)", "public long getForegroundAccessCount(@OpFlags int flags)", "public List<AttributedOpEntry> getForegroundDiscreteAccesses(@OpFlags int flags)", "public long getBackgroundAccessCount(@OpFlags int flags)", "public List<AttributedOpEntry> getBackgroundDiscreteAccesses(@OpFlags int flags)", "public long getAccessCount(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public List<AttributedOpEntry> getDiscreteAccesses(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public long getForegroundRejectCount(@OpFlags int flags)", "public long getBackgroundRejectCount(@OpFlags int flags)", "public long getRejectCount(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public long getForegroundAccessDuration(@OpFlags int flags)", "public long getBackgroundAccessDuration(@OpFlags int flags)", "public long getAccessDuration(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public boolean equals(@Nullable Object obj)", "public int hashCode()", "private void accept(@NonNull HistoricalOpsVisitor visitor)", "private LongSparseLongArray getOrCreateAccessCount()", "private LongSparseLongArray getOrCreateRejectCount()", "private LongSparseLongArray getOrCreateAccessDuration()", "private List<AttributedOpEntry> getOrCreateDiscreteAccesses()", "private static void scale(@NonNull LongSparseLongArray data, double scaleFactor)", "private static void merge(@NonNull Supplier<LongSparseLongArray> thisSupplier, @Nullable LongSparseLongArray other)", "public LongSparseArray<Object> collectKeys()" ],
  "variableNames" : [ "mOp", "mAccessCount", "mRejectCount", "mAccessDuration", "mDiscreteAccesses", "CREATOR" ]
}