{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/attribute/FileTime.java",
  "packageName" : "java.nio.file.attribute",
  "className" : "FileTime",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "unit",
    "type" : "TimeUnit",
    "comment" : "\n     * The unit of granularity to interpret the value. Null if\n     * this {@code FileTime} is converted from an {@code Instant},\n     * the {@code value} and {@code unit} pair will not be used\n     * in this scenario.\n     ",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "long",
    "comment" : "\n     * The value since the epoch; can be negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "instant",
    "type" : "Instant",
    "comment" : "\n     * The value as Instant (created lazily, if not from an instant)\n     ",
    "links" : [ ]
  }, {
    "name" : "valueAsString",
    "type" : "String",
    "comment" : "\n     * The value return by toString (created lazily)\n     ",
    "links" : [ ]
  }, {
    "name" : "HOURS_PER_DAY",
    "type" : "long",
    "comment" : "\n     * Time unit constants for conversion.\n     ",
    "links" : [ ]
  }, {
    "name" : "MINUTES_PER_HOUR",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDS_PER_MINUTE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDS_PER_HOUR",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDS_PER_DAY",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MILLIS_PER_SECOND",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MICROS_PER_SECOND",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NANOS_PER_SECOND",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NANOS_PER_MILLI",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NANOS_PER_MICRO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_SECOND",
    "type" : "long",
    "comment" : " The epoch second of Instant.MIN.",
    "links" : [ ]
  }, {
    "name" : "MAX_SECOND",
    "type" : "long",
    "comment" : " The epoch second of Instant.MAX.",
    "links" : [ ]
  }, {
    "name" : "DAYS_PER_10000_YEARS",
    "type" : "long",
    "comment" : " seconds per day = 86400",
    "links" : [ ]
  }, {
    "name" : "SECONDS_PER_10000_YEARS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDS_0000_TO_1970",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static FileTime from(long value, TimeUnit unit)",
    "returnType" : "FileTime",
    "comment" : "\n     * Returns a {@code FileTime} representing a value at the given unit of\n     * granularity.\n     *\n     * @param   value\n     *          the value since the epoch (1970-01-01T00:00:00Z); can be\n     *          negative\n     * @param   unit\n     *          the unit of granularity to interpret the value\n     *\n     * @return  a {@code FileTime} representing the given value\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileTime fromMillis(long value)",
    "returnType" : "FileTime",
    "comment" : "\n     * Returns a {@code FileTime} representing the given value in milliseconds.\n     *\n     * @param   value\n     *          the value, in milliseconds, since the epoch\n     *          (1970-01-01T00:00:00Z); can be negative\n     *\n     * @return  a {@code FileTime} representing the given value\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileTime from(Instant instant)",
    "returnType" : "FileTime",
    "comment" : "\n     * Returns a {@code FileTime} representing the same point of time value\n     * on the time-line as the provided {@code Instant} object.\n     *\n     * @param   instant\n     *          the instant to convert\n     * @return  a {@code FileTime} representing the same point on the time-line\n     *          as the provided instant\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public long to(TimeUnit unit)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value at the given unit of granularity.\n     *\n     * <p> Conversion from a coarser granularity that would numerically overflow\n     * saturate to {@code Long.MIN_VALUE} if negative or {@code Long.MAX_VALUE}\n     * if positive.\n     *\n     * @param   unit\n     *          the unit of granularity for the return value\n     *\n     * @return  value in the given unit of granularity, since the epoch\n     *          since the epoch (1970-01-01T00:00:00Z); can be negative\n     ",
    "links" : [ ]
  }, {
    "name" : "public long toMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value in milliseconds.\n     *\n     * <p> Conversion from a coarser granularity that would numerically overflow\n     * saturate to {@code Long.MIN_VALUE} if negative or {@code Long.MAX_VALUE}\n     * if positive.\n     *\n     * @return  the value in milliseconds, since the epoch (1970-01-01T00:00:00Z)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long scale(long d, long m, long over)",
    "returnType" : "long",
    "comment" : "\n     * Scale d by m, checking for overflow.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Instant toInstant()",
    "returnType" : "Instant",
    "comment" : "\n     * Converts this {@code FileTime} object to an {@code Instant}.\n     *\n     * <p> The conversion creates an {@code Instant} that represents the\n     * same point on the time-line as this {@code FileTime}.\n     *\n     * <p> {@code FileTime} can store points on the time-line further in the\n     * future and further in the past than {@code Instant}. Conversion\n     * from such further time points saturates to {@link Instant#MIN} if\n     * earlier than {@code Instant.MIN} or {@link Instant#MAX} if later\n     * than {@code Instant.MAX}.\n     *\n     * @return  an instant representing the same point on the time-line as\n     *          this {@code FileTime} object\n     * @since 1.8\n     ",
    "links" : [ "java.time.Instant#MIN", "java.time.Instant#MAX" ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests this {@code FileTime} for equality with the given object.\n     *\n     * <p> The result is {@code true} if and only if the argument is not {@code\n     * null} and is a {@code FileTime} that represents the same time. This\n     * method satisfies the general contract of the {@code Object.equals} method.\n     *\n     * @param   obj\n     *          the object to compare with\n     *\n     * @return  {@code true} if, and only if, the given object is a {@code\n     *          FileTime} that represents the same time\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Computes a hash code for this file time.\n     *\n     * <p> The hash code is based upon the value represented, and satisfies the\n     * general contract of the {@link Object#hashCode} method.\n     *\n     * @return  the hash-code value\n     ",
    "links" : [ "#hashCode" ]
  }, {
    "name" : "private long toDays()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long toExcessNanos(long days)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(FileTime other)",
    "returnType" : "int",
    "comment" : "\n     * Compares the value of two {@code FileTime} objects for order.\n     *\n     * @param   other\n     *          the other {@code FileTime} to be compared\n     *\n     * @return  {@code 0} if this {@code FileTime} is equal to {@code other}, a\n     *          value less than 0 if this {@code FileTime} represents a time\n     *          that is before {@code other}, and a value greater than 0 if this\n     *          {@code FileTime} represents a time that is after {@code other}\n     ",
    "links" : [ ]
  }, {
    "name" : "private StringBuilder append(StringBuilder sb, int w, int d)",
    "returnType" : "StringBuilder",
    "comment" : " append year/month/day/hour/minute/second/nano with width and 0 padding",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the string representation of this {@code FileTime}. The string\n     * is returned in the <a\n     * href=\"http://www.w3.org/TR/NOTE-datetime\">ISO&nbsp;8601</a> format:\n     * <pre>\n     *     YYYY-MM-DDThh:mm:ss[.s+]Z\n     * </pre>\n     * where \"{@code [.s+]}\" represents a dot followed by one of more digits\n     * for the decimal fraction of a second. It is only present when the decimal\n     * fraction of a second is not zero. For example, {@code\n     * FileTime.fromMillis(1234567890000L).toString()} yields {@code\n     * \"2009-02-13T23:31:30Z\"}, and {@code FileTime.fromMillis(1234567890123L).toString()}\n     * yields {@code \"2009-02-13T23:31:30.123Z\"}.\n     *\n     * <p> A {@code FileTime} is primarily intended to represent the value of a\n     * file's time stamp. Where used to represent <i>extreme values</i>, where\n     * the year is less than \"{@code 0001}\" or greater than \"{@code 9999}\" then\n     * this method deviates from ISO 8601 in the same manner as the\n     * <a href=\"http://www.w3.org/TR/xmlschema-2/#deviantformats\">XML Schema\n     * language</a>. That is, the year may be expanded to more than four digits\n     * and may be negative-signed. If more than four digits then leading zeros\n     * are not present. The year before \"{@code 0001}\" is \"{@code -0001}\".\n     *\n     * @return  the string representation of this file time\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static FileTime from(long value, TimeUnit unit)", "public static FileTime fromMillis(long value)", "public static FileTime from(Instant instant)", "public long to(TimeUnit unit)", "public long toMillis()", "private static long scale(long d, long m, long over)", "public Instant toInstant()", "public boolean equals(Object obj)", "public int hashCode()", "private long toDays()", "private long toExcessNanos(long days)", "public int compareTo(FileTime other)", "private StringBuilder append(StringBuilder sb, int w, int d)", "public String toString()" ],
  "variableNames" : [ "unit", "value", "instant", "valueAsString", "HOURS_PER_DAY", "MINUTES_PER_HOUR", "SECONDS_PER_MINUTE", "SECONDS_PER_HOUR", "SECONDS_PER_DAY", "MILLIS_PER_SECOND", "MICROS_PER_SECOND", "NANOS_PER_SECOND", "NANOS_PER_MILLI", "NANOS_PER_MICRO", "MIN_SECOND", "MAX_SECOND", "DAYS_PER_10000_YEARS", "SECONDS_PER_10000_YEARS", "SECONDS_0000_TO_1970" ]
}