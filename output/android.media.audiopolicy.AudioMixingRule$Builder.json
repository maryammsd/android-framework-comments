{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/audiopolicy/AudioMixingRule.java",
  "packageName" : "android.media.audiopolicy",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link AudioMixingRule} objects\n     ",
  "links" : [ "android.media.audiopolicy.AudioMixingRule" ],
  "variables" : [ {
    "name" : "mCriteria",
    "type" : "Set<AudioMixMatchCriterion>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetMixType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowPrivilegedMediaPlaybackCapture",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVoiceCommunicationCaptureAllowed",
    "type" : "boolean",
    "comment" : " This value should be set internally according to a permission check",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder addRule(AudioAttributes attrToMatch, int rule) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Add a rule for the selection of which streams are mixed together.\n         * @param attrToMatch a non-null AudioAttributes instance for which a contradictory\n         *     rule hasn't been set yet.\n         * @param rule {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE} or\n         *     {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET}.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         * @see #excludeRule(AudioAttributes, int)\n         ",
    "links" : [ "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET" ]
  }, {
    "name" : "public Builder excludeRule(AudioAttributes attrToMatch, int rule) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Add a rule by exclusion for the selection of which streams are mixed together.\n         * <br>For instance the following code\n         * <br><pre>\n         * AudioAttributes mediaAttr = new AudioAttributes.Builder()\n         *         .setUsage(AudioAttributes.USAGE_MEDIA)\n         *         .build();\n         * AudioMixingRule noMediaRule = new AudioMixingRule.Builder()\n         *         .excludeRule(mediaAttr, AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE)\n         *         .build();\n         * </pre>\n         * <br>will create a rule which maps to any usage value, except USAGE_MEDIA.\n         * @param attrToMatch a non-null AudioAttributes instance for which a contradictory\n         *     rule hasn't been set yet.\n         * @param rule {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE} or\n         *     {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET}.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         * @see #addRule(AudioAttributes, int)\n         ",
    "links" : [ "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET" ]
  }, {
    "name" : "public Builder addMixRule(int rule, Object property) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Add a rule for the selection of which streams are mixed together.\n         * The rule defines what the matching will be made on. It also determines the type of the\n         * property to match against.\n         * @param rule one of {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE},\n         *     {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET} or\n         *     {@link AudioMixingRule#RULE_MATCH_UID} or\n         *     {@link AudioMixingRule#RULE_MATCH_USERID} or\n         *     {@link AudioMixingRule#RULE_MATCH_AUDIO_SESSION_ID}.\n         * @param property see the definition of each rule for the type to use (either an\n         *     {@link AudioAttributes} or an {@link java.lang.Integer}).\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         * @see #excludeMixRule(int, Object)\n         ",
    "links" : [ "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_USERID", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE", "android.media.AudioAttributes", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_UID", "java.lang.Integer", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_AUDIO_SESSION_ID" ]
  }, {
    "name" : "public Builder excludeMixRule(int rule, Object property) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Add a rule by exclusion for the selection of which streams are mixed together.\n         * <br>For instance the following code\n         * <br><pre>\n         * AudioAttributes mediaAttr = new AudioAttributes.Builder()\n         *         .setUsage(AudioAttributes.USAGE_MEDIA)\n         *         .build();\n         * AudioMixingRule noMediaRule = new AudioMixingRule.Builder()\n         *         .addMixRule(AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE, mediaAttr)\n         *         .excludeMixRule(AudioMixingRule.RULE_MATCH_UID, new Integer(uidToExclude)\n         *         .build();\n         * </pre>\n         * <br>will create a rule which maps to usage USAGE_MEDIA, but excludes any stream\n         * coming from the specified UID.\n         * @param rule one of {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE},\n         *     {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET} or\n         *     {@link AudioMixingRule#RULE_MATCH_UID} or\n         *     {@link AudioMixingRule#RULE_MATCH_USERID} or\n         *     {@link AudioMixingRule#RULE_MATCH_AUDIO_SESSION_ID}.\n         * @param property see the definition of each rule for the type to use (either an\n         *     {@link AudioAttributes} or an {@link java.lang.Integer}).\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_USERID", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE", "android.media.AudioAttributes", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_UID", "java.lang.Integer", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_AUDIO_SESSION_ID" ]
  }, {
    "name" : "public Builder allowPrivilegedPlaybackCapture(boolean allow)",
    "returnType" : "Builder",
    "comment" : "\n         * Set if the audio of app that opted out of audio playback capture should be captured.\n         *\n         * Caller of this method with <code>true</code>, MUST abide to the restriction listed in\n         * {@link ALLOW_CAPTURE_BY_SYSTEM}, including but not limited to the captured audio\n         * can not leave the capturing app, and the quality is limited to 16k mono.\n         *\n         * The permission {@link CAPTURE_AUDIO_OUTPUT} or {@link CAPTURE_MEDIA_OUTPUT} is needed\n         * to ignore the opt-out.\n         *\n         * Only affects LOOPBACK|RENDER mix.\n         *\n         * @return the same Builder instance.\n         ",
    "links" : [ "CAPTURE_MEDIA_OUTPUT", "ALLOW_CAPTURE_BY_SYSTEM", "CAPTURE_AUDIO_OUTPUT" ]
  }, {
    "name" : "public Builder voiceCommunicationCaptureAllowed(boolean allowed)",
    "returnType" : "Builder",
    "comment" : "\n         * Set if the caller of the rule is able to capture voice communication output.\n         * A system app can capture voice communication output only if it is granted with the.\n         * CAPTURE_VOICE_COMMUNICATION_OUTPUT permission.\n         *\n         * Note that this method is for internal use only and should not be called by the app that\n         * creates the rule.\n         *\n         * @return the same Builder instance.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTargetMixRole(@MixRole int mixRole)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets target mix role of the mixing rule.\n         *\n         * As each mixing rule is intended to be associated with an {@link AudioMix},\n         * explicitly setting the role of a mixing rule allows this {@link Builder} to\n         * verify validity of the mixing rules to be validated.<br>\n         * The mix role allows distinguishing between:\n         * <ul>\n         * <li>audio framework mixers that will mix / sample-rate convert / reformat the audio\n         *     signal of any audio player (e.g. a {@link android.media.MediaPlayer}) that matches\n         *     the selection rules defined in the object being built. Use\n         *     {@link AudioMixingRule#MIX_ROLE_PLAYERS} for such an {@code AudioMixingRule}</li>\n         * <li>audio framework mixers that will be used as the injection point (after sample-rate\n         *     conversion and reformatting of the audio signal) into any audio recorder (e.g. a\n         *     {@link android.media.AudioRecord}) that matches the selection rule defined in the\n         *     object being built. Use {@link AudioMixingRule#MIX_ROLE_INJECTOR} for such an\n         *     {@code AudioMixingRule}.</li>\n         * </ul>\n         * <p>If not specified, the mix role will be decided automatically when\n         * {@link #addRule(AudioAttributes, int)} or {@link #addMixRule(int, Object)} be called.\n         *\n         * @param mixRole integer value of {@link #MIX_ROLE_PLAYERS} or {@link #MIX_ROLE_INJECTOR}\n         * @return the same Builder instance.\n         ",
    "links" : [ "#addMixRule(int", "Builder", "android.media.MediaPlayer", "android.media.AudioRecord", "android.media.audiopolicy.AudioMixingRule#MIX_ROLE_INJECTOR", "#addRule(AudioAttributes", "android.media.audiopolicy.AudioMix", "android.media.audiopolicy.AudioMixingRule#MIX_ROLE_PLAYERS", "#MIX_ROLE_INJECTOR", "#MIX_ROLE_PLAYERS" ]
  }, {
    "name" : "private Builder checkAddRuleObjInternal(int rule, Object property) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Add or exclude a rule for the selection of which streams are mixed together.\n         * Does error checking on the parameters.\n         * @param rule\n         * @param property\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ ]
  }, {
    "name" : "private Builder addRuleInternal(AudioMixMatchCriterion criterion) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Add or exclude a rule on AudioAttributes or integer property for the selection of which\n         * streams are mixed together.\n         * No rule-to-parameter type check, all done in {@link #checkAddRuleObjInternal(int, Object)}.\n         * Exceptions are thrown only when incompatible rules are added.\n         * @param attrToMatch a non-null AudioAttributes instance for which a contradictory\n         *     rule hasn't been set yet, null if not used.\n         * @param intProp an integer property to match or exclude, null if not used.\n         * @param rule one of {@link AudioMixingRule#RULE_EXCLUDE_ATTRIBUTE_USAGE},\n         *     {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE},\n         *     {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET},\n         *     {@link AudioMixingRule#RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET},\n         *     {@link AudioMixingRule#RULE_MATCH_UID},\n         *     {@link AudioMixingRule#RULE_EXCLUDE_UID},\n         *     {@link AudioMixingRule#RULE_MATCH_AUDIO_SESSION_ID},\n         *     {@link AudioMixingRule#RULE_EXCLUDE_AUDIO_SESSION_ID}\n         *     {@link AudioMixingRule#RULE_MATCH_USERID},\n         *     {@link AudioMixingRule#RULE_EXCLUDE_USERID}.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.audiopolicy.AudioMixingRule#RULE_EXCLUDE_ATTRIBUTE_USAGE", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_USERID", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE", "android.media.audiopolicy.AudioMixingRule#RULE_EXCLUDE_UID", "android.media.audiopolicy.AudioMixingRule#RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET", "android.media.audiopolicy.AudioMixingRule#RULE_EXCLUDE_AUDIO_SESSION_ID", "android.media.audiopolicy.AudioMixingRule#RULE_EXCLUDE_USERID", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_UID", "#checkAddRuleObjInternal(int", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET", "android.media.audiopolicy.AudioMixingRule#RULE_MATCH_AUDIO_SESSION_ID" ]
  }, {
    "name" : "public AudioMixingRule build()",
    "returnType" : "AudioMixingRule",
    "comment" : "\n         * Combines all of the matching and exclusion rules that have been set and return a new\n         * {@link AudioMixingRule} object.\n         * @return a new {@link AudioMixingRule} object\n         * @throws IllegalArgumentException if the rule is empty.\n         ",
    "links" : [ "android.media.audiopolicy.AudioMixingRule" ]
  } ],
  "methodNames" : [ "public Builder addRule(AudioAttributes attrToMatch, int rule) throws IllegalArgumentException", "public Builder excludeRule(AudioAttributes attrToMatch, int rule) throws IllegalArgumentException", "public Builder addMixRule(int rule, Object property) throws IllegalArgumentException", "public Builder excludeMixRule(int rule, Object property) throws IllegalArgumentException", "public Builder allowPrivilegedPlaybackCapture(boolean allow)", "public Builder voiceCommunicationCaptureAllowed(boolean allowed)", "public Builder setTargetMixRole(@MixRole int mixRole)", "private Builder checkAddRuleObjInternal(int rule, Object property) throws IllegalArgumentException", "private Builder addRuleInternal(AudioMixMatchCriterion criterion) throws IllegalArgumentException", "public AudioMixingRule build()" ],
  "variableNames" : [ "mCriteria", "mTargetMixType", "mAllowPrivilegedMediaPlaybackCapture", "mVoiceCommunicationCaptureAllowed" ]
}