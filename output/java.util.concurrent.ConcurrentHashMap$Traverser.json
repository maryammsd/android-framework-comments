{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ConcurrentHashMap.java",
  "packageName" : "java.util.concurrent",
  "className" : "Traverser",
  "comment" : "\n     * Encapsulates traversal for methods such as containsValue; also\n     * serves as a base class for other iterators and spliterators.\n     *\n     * Method advance visits once each still-valid node that was\n     * reachable upon iterator construction. It might miss some that\n     * were added to a bin after the bin was visited, which is OK wrt\n     * consistency guarantees. Maintaining this property in the face\n     * of possible ongoing resizes requires a fair amount of\n     * bookkeeping state that is difficult to optimize away amidst\n     * volatile accesses.  Even so, traversal maintains reasonable\n     * throughput.\n     *\n     * Normally, iteration proceeds bin-by-bin traversing lists.\n     * However, if the table has been resized, then all future steps\n     * must traverse both the bin at the current index as well as at\n     * (index + baseSize); and so on for further resizings. To\n     * paranoically cope with potential sharing by users of iterators\n     * across threads, iteration terminates if a bounds checks fails\n     * for a table read.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "tab",
    "type" : "Node<K, V>[]",
    "comment" : " current table; updated if resized",
    "links" : [ ]
  }, {
    "name" : "next",
    "type" : "Node<K, V>",
    "comment" : " the next entry to use",
    "links" : [ ]
  }, {
    "name" : "stack",
    "type" : "TableStack<K, V>",
    "comment" : " to save/restore on ForwardingNodes",
    "links" : [ ]
  }, {
    "name" : "spare",
    "type" : "TableStack<K, V>",
    "comment" : " to save/restore on ForwardingNodes",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "int",
    "comment" : " index of bin to use next",
    "links" : [ ]
  }, {
    "name" : "baseIndex",
    "type" : "int",
    "comment" : " current index of initial table",
    "links" : [ ]
  }, {
    "name" : "baseLimit",
    "type" : "int",
    "comment" : " index bound for initial table",
    "links" : [ ]
  }, {
    "name" : "baseSize",
    "type" : "int",
    "comment" : " initial table size",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final Node<K, V> advance()",
    "returnType" : "Node<K, V>",
    "comment" : "\n         * Advances if possible, returning next valid node, or null if none.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void pushState(Node<K, V>[] t, int i, int n)",
    "returnType" : "void",
    "comment" : "\n         * Saves traversal state upon encountering a forwarding node.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void recoverState(int n)",
    "returnType" : "void",
    "comment" : "\n         * Possibly pops traversal state.\n         *\n         * @param n length of current table\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " final Node<K, V> advance()", "private void pushState(Node<K, V>[] t, int i, int n)", "private void recoverState(int n)" ],
  "variableNames" : [ "tab", "next", "stack", "spare", "index", "baseIndex", "baseLimit", "baseSize" ]
}