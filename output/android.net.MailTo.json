{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/MailTo.java",
  "packageName" : "android.net",
  "className" : "MailTo",
  "comment" : "\n *\n * MailTo URL parser\n *\n * This class parses a mailto scheme URL and then can be queried for\n * the parsed parameters. This implements RFC 2368.\n *\n ",
  "variables" : [ {
    "name" : "MAILTO_SCHEME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeaders",
    "type" : "HashMap<String, String>",
    "comment" : " All the parsed content is added to the headers.",
    "links" : [ ]
  }, {
    "name" : "TO",
    "type" : "String",
    "comment" : " Well known headers",
    "links" : [ ]
  }, {
    "name" : "BODY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CC",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUBJECT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isMailTo(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * Test to see if the given string is a mailto URL\n     * @param url string to be tested\n     * @return true if the string is a mailto URL\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MailTo parse(String url) throws ParseException",
    "returnType" : "MailTo",
    "comment" : "\n     * Parse and decode a mailto scheme string. This parser implements\n     * RFC 2368. The returned object can be queried for the parsed parameters.\n     * @param url String containing a mailto URL\n     * @return MailTo object\n     * @exception ParseException if the scheme is not a mailto URL\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTo()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the To address line from the parsed mailto URL. This could be\n     * several email address that are comma-space delimited.\n     * If no To line was specified, then null is return\n     * @return comma delimited email addresses or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCc()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the CC address line from the parsed mailto URL. This could be\n     * several email address that are comma-space delimited.\n     * If no CC line was specified, then null is return\n     * @return comma delimited email addresses or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSubject()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the subject line from the parsed mailto URL.\n     * If no subject line was specified, then null is return\n     * @return subject or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBody()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the body line from the parsed mailto URL.\n     * If no body line was specified, then null is return\n     * @return body or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getHeaders()",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Retrieve all the parsed email headers from the mailto URL\n     * @return map containing all parsed values\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MAILTO_SCHEME", "mHeaders", "TO", "BODY", "CC", "SUBJECT" ],
  "methodNames" : [ "public static boolean isMailTo(String url)", "public static MailTo parse(String url) throws ParseException", "public String getTo()", "public String getCc()", "public String getSubject()", "public String getBody()", "public Map<String, String> getHeaders()", "public String toString()" ]
}