{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/random/RandomGenerator.java",
  "packageName" : "java.util.random",
  "className" : "JumpableGenerator",
  "comment" : "\n     * This interface is designed to provide a common protocol for objects that\n     * generate pseudorandom values and can easily <i>jump</i> forward, by a\n     * moderate amount (ex. 2<sup>64</sup>) to a distant point in the state cycle.\n     *\n     * <p> Ideally, all {@link JumpableGenerator} objects produced by iterative\n     * jumping from a single original {@link JumpableGenerator} object are\n     * statistically independent of one another and individually uniform. In\n     * practice, one must settle for some approximation to independence and\n     * uniformity. In particular, a specific implementation may assume that each\n     * generator in a stream produced by the\n     * {@link JumpableGenerator#jump jump()} method is used to produce a number\n     * of values no larger than either 2<sup>64</sup> or the square root of its\n     * period. Implementors are advised to use algorithms whose period is at\n     * least 2<sup>127</sup>.\n     *\n     * <p> Methods are provided to perform a single jump operation and also to\n     * produce a stream of generators produced from the original by iterative\n     * copying and jumping of internal state. A typical strategy for a\n     * multithreaded application is to create a single {@link JumpableGenerator}\n     * object, calls its {@link JumpableGenerator#jump jump}() method exactly\n     * once, and then parcel out generators from the resulting stream, one to\n     * each thread. It is generally not a good idea to call\n     * {@link JumpableGenerator#jump jump}() on a generator that was itself\n     * produced by the {@link JumpableGenerator#jump jump}() method, because the\n     * result may be a generator identical to another generator already produce\n     * by that call to the {@link JumpableGenerator#jump jump}() method. For\n     * this reason, the return type of the {@link JumpableGenerator#jumps jumps}()\n     * method is {@code Stream<RandomGenerator>} rather than\n     * {@code Stream<JumpableGenerator>}, even though the actual generator\n     * objects in that stream likely do also implement the\n     * {@link JumpableGenerator} interface.\n     *\n     * <p> Objects that implement {@link JumpableGenerator} are typically not\n     * cryptographically secure. Consider instead using {@link SecureRandom} to\n     * get a cryptographically secure pseudo-random number generator for use by\n     * security-sensitive applications.\n     ",
  "links" : [ "java.security.SecureRandom", "#jumps", "JumpableGenerator", "#jump" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static JumpableGenerator of(String name)",
    "returnType" : "JumpableGenerator",
    "comment" : "\n         * Returns an instance of {@link JumpableGenerator} that utilizes the\n         * {@code name} <a href=\"package-summary.html#algorithms\">algorithm</a>.\n         *\n         * @param name  Name of random number generator\n         *              <a href=\"package-summary.html#algorithms\">algorithm</a>\n         *\n         * @return An instance of {@link JumpableGenerator}\n         *\n         * @throws NullPointerException if name is null\n         * @throws IllegalArgumentException if the named algorithm is not found\n         ",
    "links" : [ "JumpableGenerator" ]
  }, {
    "name" : " JumpableGenerator copy()",
    "returnType" : "JumpableGenerator",
    "comment" : "\n         * Returns a new generator whose internal state is an exact copy of this\n         * generator (therefore their future behavior should be identical if\n         * subjected to the same series of operations).\n         *\n         * @return a new object that is a copy of this generator\n         ",
    "links" : [ ]
  }, {
    "name" : " void jump()",
    "returnType" : "void",
    "comment" : "\n         * Alter the state of this pseudorandom number generator so as to jump\n         * forward a large, fixed distance (typically 2<sup>64</sup> or more)\n         * within its state cycle.\n         ",
    "links" : [ ]
  }, {
    "name" : " double jumpDistance()",
    "returnType" : "double",
    "comment" : "\n         * Returns the distance by which the\n         * {@link JumpableGenerator#jump jump}() method will jump forward within\n         * the state cycle of this generator object.\n         *\n         * @return the default jump distance (as a {@code double} value)\n         ",
    "links" : [ "#jump" ]
  }, {
    "name" : " Stream<RandomGenerator> jumps()",
    "returnType" : "Stream<RandomGenerator>",
    "comment" : "\n         * Returns an effectively unlimited stream of new pseudorandom number\n         * generators, each of which implements the {@link RandomGenerator}\n         * interface.\n         *\n         * @return a stream of objects that implement the {@link RandomGenerator} interface\n         *\n         * @implNote It is permitted to implement this method in a manner equivalent to\n         * {@link JumpableGenerator#jumps(long) jumps}\n         * ({@link Long#MAX_VALUE Long.MAX_VALUE}).\n         *\n         * @implSpec The default implementation produces a sequential stream that  repeatedly\n         * calls {@link JumpableGenerator#copy copy}() and {@link JumpableGenerator#jump jump}()\n         * on this generator, and the copies become the generators produced by the stream.\n         ",
    "links" : [ "java.util.random.RandomGenerator", "#jumps(long)", "#copy", "#MAX_VALUE", "#jump" ]
  }, {
    "name" : " Stream<RandomGenerator> jumps(long streamSize)",
    "returnType" : "Stream<RandomGenerator>",
    "comment" : "\n         * Returns a stream producing the given {@code streamSize} number of new\n         * pseudorandom number generators, each of which implements the\n         * {@link RandomGenerator} interface.\n         *\n         * @param streamSize the number of generators to generate\n         *\n         * @return a stream of objects that implement the {@link RandomGenerator} interface\n         *\n         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n         *\n         * @implSpec The default implementation produces a sequential stream that  repeatedly\n         * calls {@link JumpableGenerator#copy copy}() and {@link JumpableGenerator#jump jump}()\n         * on this generator, and the copies become the generators produced by the stream.\n         ",
    "links" : [ "java.util.random.RandomGenerator", "#copy", "#jump" ]
  }, {
    "name" : " Stream<RandomGenerator> rngs()",
    "returnType" : "Stream<RandomGenerator>",
    "comment" : "\n         * Returns an effectively unlimited stream of new pseudorandom number\n         * generators, each of which implements the {@link RandomGenerator}\n         * interface. Ideally the generators in the stream will appear to be\n         * statistically independent.\n         *\n         * @return a stream of objects that implement the {@link RandomGenerator} interface\n         *\n         * @implSpec The default implementation calls {@link JumpableGenerator#jump jump}().\n         ",
    "links" : [ "java.util.random.RandomGenerator", "#jump" ]
  }, {
    "name" : " Stream<RandomGenerator> rngs(long streamSize)",
    "returnType" : "Stream<RandomGenerator>",
    "comment" : "\n         * Returns a stream producing the given {@code streamSize} number of new\n         * pseudorandom number generators, each of which implements the\n         * {@link RandomGenerator} interface. Ideally the generators in the\n         * stream will appear to be statistically independent.\n         *\n         * @param streamSize the number of generators to generate\n         *\n         * @return a stream of objects that implement the {@link RandomGenerator} interface\n         *\n         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n         *\n         * @implSpec The default implementation calls {@link JumpableGenerator#jumps(long) jumps}(streamSize).\n         ",
    "links" : [ "java.util.random.RandomGenerator", "#jumps(long)" ]
  }, {
    "name" : " RandomGenerator copyAndJump()",
    "returnType" : "RandomGenerator",
    "comment" : "\n         * Copy this generator, jump this generator forward, then return the\n         * copy.\n         *\n         * @return a copy of this generator object before the jump occurred\n         *\n         * @implSpec The default implementation copies this, jumps and then\n         * returns the copy.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static JumpableGenerator of(String name)", " JumpableGenerator copy()", " void jump()", " double jumpDistance()", " Stream<RandomGenerator> jumps()", " Stream<RandomGenerator> jumps(long streamSize)", " Stream<RandomGenerator> rngs()", " Stream<RandomGenerator> rngs(long streamSize)", " RandomGenerator copyAndJump()" ],
  "variableNames" : [ ]
}