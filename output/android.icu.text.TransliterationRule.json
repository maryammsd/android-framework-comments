{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/TransliterationRule.java",
  "packageName" : "android.icu.text",
  "className" : "TransliterationRule",
  "comment" : "\n * A transliteration rule used by\n * <code>RuleBasedTransliterator</code>.\n * <code>TransliterationRule</code> is an immutable object.\n *\n * <p>A rule consists of an input pattern and an output string.  When\n * the input pattern is matched, the output string is emitted.  The\n * input pattern consists of zero or more characters which are matched\n * exactly (the key) and optional context.  Context must match if it\n * is specified.  Context may be specified before the key, after the\n * key, or both.  The key, preceding context, and following context\n * may contain variables.  Variables represent a set of Unicode\n * characters, such as the letters <i>a</i> through <i>z</i>.\n * Variables are detected by looking up each character in a supplied\n * variable list to see if it has been so defined.\n *\n * <p>A rule may contain segments in its input string and segment\n * references in its output string.  A segment is a substring of the\n * input pattern, indicated by an offset and limit.  The segment may\n * be in the preceding or following context.  It may not span a\n * context boundary.  A segment reference is a special character in\n * the output string that causes a segment of the input string (not\n * the input pattern) to be copied to the output string.  The range of\n * special characters that represent segment references is defined by\n * RuleBasedTransliterator.Data.\n *\n * <p>Example: The rule \"([a-z]) . ([0-9]) > $2 . $1\" will change the input\n * string \"abc.123\" to \"ab1.c23\".\n *\n * <p>Copyright &copy; IBM Corporation 1999.  All rights reserved.\n *\n * @author Alan Liu\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "anteContext",
    "type" : "StringMatcher",
    "comment" : "\n     * The match that must occur before the key, or null if there is no\n     * preceding context.\n     ",
    "links" : [ ]
  }, {
    "name" : "key",
    "type" : "StringMatcher",
    "comment" : "\n     * The matcher object for the key.  If null, then the key is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "postContext",
    "type" : "StringMatcher",
    "comment" : "\n     * The match that must occur after the key, or null if there is no\n     * following context.\n     ",
    "links" : [ ]
  }, {
    "name" : "output",
    "type" : "UnicodeReplacer",
    "comment" : "\n     * The object that performs the replacement if the key,\n     * anteContext, and postContext are matched.  Never null.\n     ",
    "links" : [ ]
  }, {
    "name" : "pattern",
    "type" : "String",
    "comment" : "\n     * The string that must be matched, consisting of the anteContext, key,\n     * and postContext, concatenated together, in that order.  Some components\n     * may be empty (zero length).\n     * @see anteContextLength\n     * @see keyLength\n     ",
    "links" : [ ]
  }, {
    "name" : "segments",
    "type" : "UnicodeMatcher[]",
    "comment" : "\n     * An array of matcher objects corresponding to the input pattern\n     * segments.  If there are no segments this is null.  N.B. This is\n     * a UnicodeMatcher for generality, but in practice it is always a\n     * StringMatcher.  In the future we may generalize this, but for\n     * now we sometimes cast down to StringMatcher.\n     ",
    "links" : [ ]
  }, {
    "name" : "anteContextLength",
    "type" : "int",
    "comment" : "\n     * The length of the string that must match before the key.  If\n     * zero, then there is no matching requirement before the key.\n     * Substring [0,anteContextLength) of pattern is the anteContext.\n     ",
    "links" : [ ]
  }, {
    "name" : "keyLength",
    "type" : "int",
    "comment" : "\n     * The length of the key.  Substring [anteContextLength,\n     * anteContextLength + keyLength) is the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "byte",
    "comment" : "\n     * Miscellaneous attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "ANCHOR_START",
    "type" : "int",
    "comment" : "\n     * Flag attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "ANCHOR_END",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "data",
    "type" : "RuleBasedTransliterator.Data",
    "comment" : "\n     * An alias pointer to the data for this rule.  The data provides\n     * lookup services for matchers and segments.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getAnteContextLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the preceding context length.  This method is needed to\n     * support the <code>Transliterator</code> method\n     * <code>getMaximumContextLength()</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : " final int getIndexValue()",
    "returnType" : "int",
    "comment" : "\n     * Internal method.  Returns 8-bit index value for this rule.\n     * This is the low byte of the first character of the key,\n     * unless the first character of the key is a set.  If it's a\n     * set, or otherwise can match multiple keys, the index value is -1.\n     ",
    "links" : [ ]
  }, {
    "name" : " final boolean matchesIndexValue(int v)",
    "returnType" : "boolean",
    "comment" : "\n     * Internal method.  Returns true if this rule matches the given\n     * index value.  The index value is an 8-bit integer, 0..255,\n     * representing the low byte of the first character of the key.\n     * It matches this rule if it matches the first character of the\n     * key, or if the first character of the key is a set, and the set\n     * contains any character with a low byte equal to the index\n     * value.  If the rule contains only ante context, as in foo)>bar,\n     * then it will match any key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean masks(TransliterationRule r2)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if this rule masks another rule.  If r1 masks r2 then\n     * r1 matches any input string that r2 matches.  If r1 masks r2 and r2 masks\n     * r1 then r1 == r2.  Examples: \"a>x\" masks \"ab>y\".  \"a>x\" masks \"a[b]>y\".\n     * \"[c]a>x\" masks \"[dc]a>y\".\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int posBefore(Replaceable str, int pos)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final int posAfter(Replaceable str, int pos)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int matchAndReplace(Replaceable text, Transliterator.Position pos, boolean incremental)",
    "returnType" : "int",
    "comment" : "\n     * Attempt a match and replacement at the given position.  Return\n     * the degree of match between this rule and the given text.  The\n     * degree of match may be mismatch, a partial match, or a full\n     * match.  A mismatch means at least one character of the text\n     * does not match the context or key.  A partial match means some\n     * context and key characters match, but the text is not long\n     * enough to match all of them.  A full match means all context\n     * and key characters match.\n     *\n     * If a full match is obtained, perform a replacement, update pos,\n     * and return U_MATCH.  Otherwise both text and pos are unchanged.\n     *\n     * @param text the text\n     * @param pos the position indices\n     * @param incremental if true, test for partial matches that may\n     * be completed by additional text inserted at pos.limit.\n     * @return one of <code>U_MISMATCH</code>,\n     * <code>U_PARTIAL_MATCH</code>, or <code>U_MATCH</code>.  If\n     * incremental is false then U_PARTIAL_MATCH will not be returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toRule(boolean escapeUnprintable)",
    "returnType" : "String",
    "comment" : "\n     * Create a source string that represents this rule.  Append it to the\n     * given string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation of this object.\n     * @return string representation of this object\n     ",
    "links" : [ ]
  }, {
    "name" : " void addSourceTargetSet(UnicodeSet filter, UnicodeSet sourceSet, UnicodeSet targetSet, UnicodeSet revisiting)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getAnteContextLength()", " final int getIndexValue()", " final boolean matchesIndexValue(int v)", "public boolean masks(TransliterationRule r2)", " static final int posBefore(Replaceable str, int pos)", " static final int posAfter(Replaceable str, int pos)", "public int matchAndReplace(Replaceable text, Transliterator.Position pos, boolean incremental)", "public String toRule(boolean escapeUnprintable)", "public String toString()", " void addSourceTargetSet(UnicodeSet filter, UnicodeSet sourceSet, UnicodeSet targetSet, UnicodeSet revisiting)" ],
  "variableNames" : [ "anteContext", "key", "postContext", "output", "pattern", "segments", "anteContextLength", "keyLength", "flags", "ANCHOR_START", "ANCHOR_END", "data" ]
}