{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/DigestOutputStream.java",
  "packageName" : "java.security",
  "className" : "DigestOutputStream",
  "comment" : "\n * A transparent stream that updates the associated message digest using\n * the bits going through the stream.\n *\n * <p>To complete the message digest computation, call one of the\n * {@code digest} methods on the associated message\n * digest after your calls to one of this digest output stream's\n * {@link #write(int) write} methods.\n *\n * <p>It is possible to turn this stream on or off (see\n * {@link #on(boolean) on}). When it is on, a call to one of the\n * {@code write} methods results in\n * an update on the message digest.  But when it is off, the message\n * digest is not updated. The default is for the stream to be on.\n *\n * @see MessageDigest\n * @see DigestInputStream\n *\n * @author Benjamin Renaud\n * @since 1.2\n ",
  "links" : [ "#on(boolean)", "#write(int)" ],
  "variables" : [ {
    "name" : "on",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "digest",
    "type" : "MessageDigest",
    "comment" : "\n     * The message digest associated with this stream.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public MessageDigest getMessageDigest()",
    "returnType" : "MessageDigest",
    "comment" : "\n     * Returns the message digest associated with this stream.\n     *\n     * @return the message digest associated with this stream.\n     * @see #setMessageDigest(java.security.MessageDigest)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMessageDigest(MessageDigest digest)",
    "returnType" : "void",
    "comment" : "\n     * Associates the specified message digest with this stream.\n     *\n     * @param digest the message digest to be associated with this stream.\n     * @see #getMessageDigest()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Updates the message digest (if the digest function is on) using\n     * the specified byte, and in any case writes the byte\n     * to the output stream. That is, if the digest function is on\n     * (see {@link #on(boolean) on}), this method calls\n     * {@code update} on the message digest associated with this\n     * stream, passing it the byte {@code b}. This method then\n     * writes the byte to the output stream, blocking until the byte\n     * is actually written.\n     *\n     * @param b the byte to be used for updating and writing to the\n     * output stream.\n     *\n     * @exception IOException if an I/O error occurs.\n     *\n     * @see MessageDigest#update(byte)\n     ",
    "links" : [ "#on(boolean)" ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Updates the message digest (if the digest function is on) using\n     * the specified subarray, and in any case writes the subarray to\n     * the output stream. That is, if the digest function is on (see\n     * {@link #on(boolean) on}), this method calls {@code update}\n     * on the message digest associated with this stream, passing it\n     * the subarray specifications. This method then writes the subarray\n     * bytes to the output stream, blocking until the bytes are actually\n     * written.\n     *\n     * @param b the array containing the subarray to be used for updating\n     * and writing to the output stream.\n     *\n     * @param off the offset into {@code b} of the first byte to\n     * be updated and written.\n     *\n     * @param len the number of bytes of data to be updated and written\n     * from {@code b}, starting at offset {@code off}.\n     *\n     * @exception IOException if an I/O error occurs.\n     *\n     * @see MessageDigest#update(byte[], int, int)\n     ",
    "links" : [ "#on(boolean)" ]
  }, {
    "name" : "public void on(boolean on)",
    "returnType" : "void",
    "comment" : "\n     * Turns the digest function on or off. The default is on.  When\n     * it is on, a call to one of the {@code write} methods results in an\n     * update on the message digest.  But when it is off, the message\n     * digest is not updated.\n     *\n     * @param on true to turn the digest function on, false to turn it\n     * off.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Prints a string representation of this digest output stream and\n     * its associated message digest object.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public MessageDigest getMessageDigest()", "public void setMessageDigest(MessageDigest digest)", "public void write(int b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException", "public void on(boolean on)", "public String toString()" ],
  "variableNames" : [ "on", "digest" ]
}