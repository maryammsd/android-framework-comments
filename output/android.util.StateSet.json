{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/StateSet.java",
  "packageName" : "android.util",
  "className" : "StateSet",
  "comment" : "\n * State sets are arrays of positive ints where each element\n * represents the state of a {@link android.view.View} (e.g. focused,\n * selected, visible, etc.).  A {@link android.view.View} may be in\n * one or more of those states.\n *\n * A state spec is an array of signed ints where each element\n * represents a required (if positive) or an undesired (if negative)\n * {@link android.view.View} state.\n *\n * Utils dealing with state sets.\n *\n * In theory we could encapsulate the state set and state spec arrays\n * and not have static methods here but there is some concern about\n * performance since these methods are called during view drawing.\n ",
  "links" : [ "android.view.View" ],
  "variables" : [ {
    "name" : "VIEW_STATE_SETS",
    "type" : "int[][]",
    "comment" : "\n     * The order here is very important to\n     * {@link android.view.View#getDrawableState()}\n     ",
    "links" : [ "android.view.View#getDrawableState()" ]
  }, {
    "name" : "VIEW_STATE_WINDOW_FOCUSED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_SELECTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_FOCUSED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_ENABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_PRESSED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_ACTIVATED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_ACCELERATED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_HOVERED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_DRAG_CAN_ACCEPT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_DRAG_HOVERED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_IDS",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WILD_CARD",
    "type" : "int[]",
    "comment" : "\n     * A state specification that will be matched by all StateSets.\n     ",
    "links" : [ ]
  }, {
    "name" : "NOTHING",
    "type" : "int[]",
    "comment" : "\n     * A state set that does not contain any valid states.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int[] get(int mask)",
    "returnType" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isWildCard(int[] stateSetOrSpec)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the stateSetOrSpec is matched by all StateSets.\n     *\n     * @param stateSetOrSpec a state set or state spec.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean stateSetMatches(int[] stateSpec, int[] stateSet)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the stateSet matches the desired stateSpec.\n     *\n     * @param stateSpec an array of required (if positive) or\n     *        prohibited (if negative) {@link android.view.View} states.\n     * @param stateSet an array of {@link android.view.View} states\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public static boolean stateSetMatches(int[] stateSpec, int state)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the state matches the desired stateSpec.\n     *\n     * @param stateSpec an array of required (if positive) or\n     *        prohibited (if negative) {@link android.view.View} states.\n     * @param state a {@link android.view.View} state\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public static boolean containsAttribute(int[][] stateSpecs, int attr)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether a list of state specs has an attribute specified.\n     * @param stateSpecs a list of state specs we're checking.\n     * @param attr an attribute we're looking for.\n     * @return {@code true} if the attribute is contained in the state specs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] trimStateSet(int[] states, int newSize)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String dump(int[] states)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int[] get(int mask)", "public static boolean isWildCard(int[] stateSetOrSpec)", "public static boolean stateSetMatches(int[] stateSpec, int[] stateSet)", "public static boolean stateSetMatches(int[] stateSpec, int state)", "public static boolean containsAttribute(int[][] stateSpecs, int attr)", "public static int[] trimStateSet(int[] states, int newSize)", "public static String dump(int[] states)" ],
  "variableNames" : [ "VIEW_STATE_SETS", "VIEW_STATE_WINDOW_FOCUSED", "VIEW_STATE_SELECTED", "VIEW_STATE_FOCUSED", "VIEW_STATE_ENABLED", "VIEW_STATE_PRESSED", "VIEW_STATE_ACTIVATED", "VIEW_STATE_ACCELERATED", "VIEW_STATE_HOVERED", "VIEW_STATE_DRAG_CAN_ACCEPT", "VIEW_STATE_DRAG_HOVERED", "VIEW_STATE_IDS", "WILD_CARD", "NOTHING" ]
}