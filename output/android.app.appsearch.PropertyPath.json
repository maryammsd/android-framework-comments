{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/PropertyPath.java",
  "packageName" : "android.app.appsearch",
  "className" : "PropertyPath",
  "comment" : "\n * Represents a property path returned from searching the AppSearch Database.\n *\n * <p>One of the use cases for this class is when searching the AppSearch Database for the snippet\n * matching use case. In this case you will get back {@link SearchResult.MatchInfo} objects that\n * contain a property path signifying the location of a match within the database. This is a string\n * that may look something like \"foo.bar[0]\". {@link PropertyPath} parses this string and breaks it\n * up into a List of {@link PathSegment}s. These may represent either a property or a property and a\n * 0-based index into the property. For instance, \"foo.bar[1]\" would be parsed into a {@link\n * PathSegment} with a property name of foo and a {@link PathSegment} with a property name of bar\n * and an index of 1. This allows for easier manipulation of the property path.\n *\n * <p>This class won't perform any retrievals, it will only parse the path string. As such, it may\n * not necessarily refer to a valid path in the database.\n *\n * @see SearchResult.MatchInfo\n ",
  "links" : [ "android.app.appsearch.PropertyPath", "SearchResult.MatchInfo", "PathSegment" ],
  "variables" : [ {
    "name" : "mPathList",
    "type" : "List<PathSegment>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void recursivePathScan(String path) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String consumePropertyWithIndex(@NonNull String path, int controlPos)",
    "returnType" : "String",
    "comment" : "\n     * Helper method to parse the parts of the path String that signify indices with square brackets\n     *\n     * <p>For example, when parsing the path \"foo[3]\", this will be used to parse the \"[3]\" part of\n     * the path to determine the index into the preceding \"foo\" property.\n     *\n     * @param path the string we are parsing\n     * @param controlPos the position of the start bracket\n     * @return the rest of the path after the end brackets, or null if there is nothing after them\n     ",
    "links" : [ ]
  }, {
    "name" : "public PathSegment get(int index)",
    "returnType" : "PathSegment",
    "comment" : " Allow use of the Kotlin indexing operator",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of {@link PathSegment}s in the PropertyPath.\n     *\n     * <p>Paths representing \"foo.bar\" and \"foo[1].bar[1]\" will have the same size, as a property\n     * and an index into that property are stored in one {@link PathSegment}.\n     ",
    "links" : [ "PathSegment" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " Returns a valid path string representing this PropertyPath ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<PathSegment> iterator()",
    "returnType" : "Iterator<PathSegment>",
    "comment" : " Returns an iterator over the PathSegments within the PropertyPath ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void recursivePathScan(String path) throws IllegalArgumentException", "private String consumePropertyWithIndex(@NonNull String path, int controlPos)", "public PathSegment get(int index)", "public int size()", "public String toString()", "public Iterator<PathSegment> iterator()", "public boolean equals(@Nullable Object o)", "public int hashCode()" ],
  "variableNames" : [ "mPathList" ]
}