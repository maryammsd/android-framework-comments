{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/ContentProviderOperation.java",
  "packageName" : "android.content",
  "className" : "ContentProviderOperation",
  "comment" : "\n * Represents a single operation to be performed as part of a batch of operations.\n *\n * @see ContentProvider#applyBatch(ArrayList)\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TYPE_INSERT",
    "type" : "int",
    "comment" : " @hide exposed for unit tests ",
    "links" : [ ]
  }, {
    "name" : "TYPE_UPDATE",
    "type" : "int",
    "comment" : " @hide exposed for unit tests ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DELETE",
    "type" : "int",
    "comment" : " @hide exposed for unit tests ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ASSERT",
    "type" : "int",
    "comment" : " @hide exposed for unit tests ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CALL",
    "type" : "int",
    "comment" : " @hide exposed for unit tests ",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMethod",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArg",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "ArrayMap<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "ArrayMap<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelection",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionArgs",
    "type" : "SparseArray<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpectedCount",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mYieldAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExceptionAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ContentProviderOperation>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Builder newInsert(@NonNull Uri uri)",
    "returnType" : "Builder",
    "comment" : "\n     * Create a {@link Builder} suitable for building an operation that will\n     * invoke {@link ContentProvider#insert}.\n     *\n     * @param uri The {@link Uri} that is the target of the operation.\n     ",
    "links" : [ "Builder", "android.net.Uri", "android.content.ContentProvider#insert" ]
  }, {
    "name" : "public static Builder newUpdate(@NonNull Uri uri)",
    "returnType" : "Builder",
    "comment" : "\n     * Create a {@link Builder} suitable for building an operation that will\n     * invoke {@link ContentProvider#update}.\n     *\n     * @param uri The {@link Uri} that is the target of the operation.\n     ",
    "links" : [ "Builder", "android.content.ContentProvider#update", "android.net.Uri" ]
  }, {
    "name" : "public static Builder newDelete(@NonNull Uri uri)",
    "returnType" : "Builder",
    "comment" : "\n     * Create a {@link Builder} suitable for building an operation that will\n     * invoke {@link ContentProvider#delete}.\n     *\n     * @param uri The {@link Uri} that is the target of the operation.\n     ",
    "links" : [ "Builder", "android.net.Uri", "android.content.ContentProvider#delete" ]
  }, {
    "name" : "public static Builder newAssertQuery(@NonNull Uri uri)",
    "returnType" : "Builder",
    "comment" : "\n     * Create a {@link Builder} suitable for building a\n     * {@link ContentProviderOperation} to assert a set of values as provided\n     * through {@link Builder#withValues(ContentValues)}.\n     ",
    "links" : [ "android.content.ContentProviderOperation", "Builder", "#withValues(ContentValues)" ]
  }, {
    "name" : "public static Builder newCall(@NonNull Uri uri, @Nullable String method, @Nullable String arg)",
    "returnType" : "Builder",
    "comment" : "\n     * Create a {@link Builder} suitable for building an operation that will\n     * invoke {@link ContentProvider#call}.\n     *\n     * @param uri The {@link Uri} that is the target of the operation.\n     ",
    "links" : [ "Builder", "android.net.Uri", "android.content.ContentProvider#call" ]
  }, {
    "name" : "public Uri getUri()",
    "returnType" : "Uri",
    "comment" : "\n     * Gets the Uri for the target of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isYieldAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the operation allows yielding the database to other transactions\n     * if the database is contended.\n     *\n     * @see android.database.sqlite.SQLiteDatabase#yieldIfContendedSafely()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExceptionAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this operation allows subsequent operations to continue\n     * even if this operation throws an exception. When true, any encountered\n     * exception is returned via {@link ContentProviderResult#exception}.\n     ",
    "links" : [ "android.content.ContentProviderResult#exception" ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : " @hide exposed for unit tests ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInsert()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the operation represents a {@link ContentProvider#insert}\n     * operation.\n     *\n     * @see #newInsert\n     ",
    "links" : [ "android.content.ContentProvider#insert" ]
  }, {
    "name" : "public boolean isDelete()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the operation represents a {@link ContentProvider#delete}\n     * operation.\n     *\n     * @see #newDelete\n     ",
    "links" : [ "android.content.ContentProvider#delete" ]
  }, {
    "name" : "public boolean isUpdate()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the operation represents a {@link ContentProvider#update}\n     * operation.\n     *\n     * @see #newUpdate\n     ",
    "links" : [ "android.content.ContentProvider#update" ]
  }, {
    "name" : "public boolean isAssertQuery()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the operation represents an assert query.\n     *\n     * @see #newAssertQuery\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCall()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the operation represents a {@link ContentProvider#call}\n     * operation.\n     *\n     * @see #newCall\n     ",
    "links" : [ "android.content.ContentProvider#call" ]
  }, {
    "name" : "public boolean isWriteOperation()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the operation represents an insertion, deletion, or update.\n     *\n     * @see #isInsert\n     * @see #isDelete\n     * @see #isUpdate\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReadOperation()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the operation represents an assert query.\n     *\n     * @see #isAssertQuery\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentProviderResult apply(@NonNull ContentProvider provider, @NonNull ContentProviderResult[] backRefs, int numBackRefs) throws OperationApplicationException",
    "returnType" : "ContentProviderResult",
    "comment" : "\n     * Applies this operation using the given provider. The backRefs array is used to resolve any\n     * back references that were requested using\n     * {@link Builder#withValueBackReferences(ContentValues)} and\n     * {@link Builder#withSelectionBackReference}.\n     * @param provider the {@link ContentProvider} on which this batch is applied\n     * @param backRefs a {@link ContentProviderResult} array that will be consulted\n     * to resolve any requested back references.\n     * @param numBackRefs the number of valid results on the backRefs array.\n     * @return a {@link ContentProviderResult} that contains either the {@link Uri} of the inserted\n     * row if this was an insert otherwise the number of rows affected.\n     * @throws OperationApplicationException thrown if either the insert fails or\n     * if the number of rows affected didn't match the expected count\n     ",
    "links" : [ "#withValueBackReferences(ContentValues)", "android.content.ContentProviderResult", "#withSelectionBackReference", "android.net.Uri", "android.content.ContentProvider" ]
  }, {
    "name" : "private ContentProviderResult applyInternal(ContentProvider provider, ContentProviderResult[] backRefs, int numBackRefs) throws OperationApplicationException",
    "returnType" : "ContentProviderResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentValues resolveValueBackReferences(@NonNull ContentProviderResult[] backRefs, int numBackRefs)",
    "returnType" : "ContentValues",
    "comment" : "\n     * Return the values for this operation after resolving any requested\n     * back-references using the given results.\n     *\n     * @param backRefs the results to use when resolving any back-references\n     * @param numBackRefs the number of results which are valid\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle resolveExtrasBackReferences(@NonNull ContentProviderResult[] backRefs, int numBackRefs)",
    "returnType" : "Bundle",
    "comment" : "\n     * Return the extras for this operation after resolving any requested\n     * back-references using the given results.\n     *\n     * @param backRefs the results to use when resolving any back-references\n     * @param numBackRefs the number of results which are valid\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] resolveSelectionArgsBackReferences(@NonNull ContentProviderResult[] backRefs, int numBackRefs)",
    "returnType" : "String[]",
    "comment" : "\n     * Return the selection arguments for this operation after resolving any\n     * requested back-references using the given results.\n     *\n     * @param backRefs the results to use when resolving any back-references\n     * @param numBackRefs the number of results which are valid\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String typeToString(int type)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(Parcel dest, int flags)", "public static Builder newInsert(@NonNull Uri uri)", "public static Builder newUpdate(@NonNull Uri uri)", "public static Builder newDelete(@NonNull Uri uri)", "public static Builder newAssertQuery(@NonNull Uri uri)", "public static Builder newCall(@NonNull Uri uri, @Nullable String method, @Nullable String arg)", "public Uri getUri()", "public boolean isYieldAllowed()", "public boolean isExceptionAllowed()", "public int getType()", "public boolean isInsert()", "public boolean isDelete()", "public boolean isUpdate()", "public boolean isAssertQuery()", "public boolean isCall()", "public boolean isWriteOperation()", "public boolean isReadOperation()", "public ContentProviderResult apply(@NonNull ContentProvider provider, @NonNull ContentProviderResult[] backRefs, int numBackRefs) throws OperationApplicationException", "private ContentProviderResult applyInternal(ContentProvider provider, ContentProviderResult[] backRefs, int numBackRefs) throws OperationApplicationException", "public ContentValues resolveValueBackReferences(@NonNull ContentProviderResult[] backRefs, int numBackRefs)", "public Bundle resolveExtrasBackReferences(@NonNull ContentProviderResult[] backRefs, int numBackRefs)", "public String[] resolveSelectionArgsBackReferences(@NonNull ContentProviderResult[] backRefs, int numBackRefs)", "public static String typeToString(int type)", "public String toString()", "public int describeContents()" ],
  "variableNames" : [ "TYPE_INSERT", "TYPE_UPDATE", "TYPE_DELETE", "TYPE_ASSERT", "TYPE_CALL", "mType", "mUri", "mMethod", "mArg", "mValues", "mExtras", "mSelection", "mSelectionArgs", "mExpectedCount", "mYieldAllowed", "mExceptionAllowed", "TAG", "CREATOR" ]
}