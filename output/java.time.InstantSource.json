{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/InstantSource.java",
  "packageName" : "java.time",
  "className" : "InstantSource",
  "comment" : "\n * Provides access to the current instant.\n * <p>\n * Instances of this interface are used to access a pluggable representation of the current instant.\n * For example, {@code InstantSource} can be used instead of {@link System#currentTimeMillis()}.\n * <p>\n * The primary purpose of this abstraction is to allow alternate instant sources to be\n * plugged in as and when required. Applications use an object to obtain the\n * current time rather than a static method. This can simplify testing.\n * <p>\n * As such, this interface does not guarantee the result actually represents the current instant\n * on the time-line. Instead, it allows the application to provide a controlled view as to what\n * the current instant is.\n * <p>\n * Best practice for applications is to pass an {@code InstantSource} into any method\n * that requires the current instant. A dependency injection framework is one\n * way to achieve this:\n * <pre>\n *  public class MyBean {\n *    private InstantSource source;  // dependency inject\n *    ...\n *    public void process(Instant endInstant) {\n *      if (source.instant().isAfter(endInstant) {\n *        ...\n *      }\n *    }\n *  }\n * </pre>\n * This approach allows an alternative source, such as {@link #fixed(Instant) fixed}\n * or {@link #offset(InstantSource, Duration) offset} to be used during testing.\n * <p>\n * The {@code system} factory method provides a source based on the best available\n * system clock. This may use {@link System#currentTimeMillis()}, or a higher\n * resolution clock if one is available.\n *\n * @implSpec\n * This interface must be implemented with care to ensure other classes operate correctly.\n * All implementations must be thread-safe - a single instance must be capable of be invoked\n * from multiple threads without negative consequences such as race conditions.\n * <p>\n * The principal methods are defined to allow the throwing of an exception.\n * In normal use, no exceptions will be thrown, however one possible implementation would be to\n * obtain the time from a central time server across the network. Obviously, in this case the\n * lookup could fail, and so the method is permitted to throw an exception.\n * <p>\n * The returned instants from {@code InstantSource} work on a time-scale that ignores leap seconds,\n * as described in {@link Instant}. If the implementation wraps a source that provides leap\n * second information, then a mechanism should be used to \"smooth\" the leap second.\n * The Java Time-Scale mandates the use of UTC-SLS, however implementations may choose\n * how accurate they are with the time-scale so long as they document how they work.\n * Implementations are therefore not required to actually perform the UTC-SLS slew or to\n * otherwise be aware of leap seconds.\n * <p>\n * Implementations should implement {@code Serializable} wherever possible and must\n * document whether or not they do support serialization.\n *\n * @implNote\n * The implementation provided here is based on the same underlying system clock\n * as {@link System#currentTimeMillis()}, but may have a precision finer than\n * milliseconds if available.\n * However, little to no guarantee is provided about the accuracy of the\n * underlying system clock. Applications requiring a more accurate system clock must\n * implement this abstract class themselves using a different external system clock,\n * such as an NTP server.\n *\n * @since 17\n ",
  "links" : [ "#currentTimeMillis()", "#fixed(Instant)", "java.time.Instant", "#offset(InstantSource" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static InstantSource system()",
    "returnType" : "InstantSource",
    "comment" : "\n     * Obtains a source that returns the current instant using the best available\n     * system clock.\n     * <p>\n     * This source is based on the best available system clock. This may use\n     * {@link System#currentTimeMillis()}, or a higher resolution system clock if\n     * one is available.\n     * <p>\n     * The returned implementation is immutable, thread-safe and\n     * {@code Serializable}.\n     *\n     * @return a source that uses the best available system clock, not null\n     ",
    "links" : [ "#currentTimeMillis()" ]
  }, {
    "name" : " static InstantSource tick(InstantSource baseSource, Duration tickDuration)",
    "returnType" : "InstantSource",
    "comment" : "\n     * Obtains a source that returns instants from the specified source truncated to\n     * the nearest occurrence of the specified duration.\n     * <p>\n     * This source will only tick as per the specified duration. Thus, if the\n     * duration is half a second, the source will return instants truncated to the\n     * half second.\n     * <p>\n     * The tick duration must be positive. If it has a part smaller than a whole\n     * millisecond, then the whole duration must divide into one second without\n     * leaving a remainder. All normal tick durations will match these criteria,\n     * including any multiple of hours, minutes, seconds and milliseconds, and\n     * sensible nanosecond durations, such as 20ns, 250,000ns and 500,000ns.\n     * <p>\n     * A duration of zero or one nanosecond would have no truncation effect. Passing\n     * one of these will return the underlying source.\n     * <p>\n     * Implementations may use a caching strategy for performance reasons. As such,\n     * it is possible that the start of the requested duration observed via this\n     * source will be later than that observed directly via the underlying source.\n     * <p>\n     * The returned implementation is immutable, thread-safe and\n     * {@code Serializable} providing that the base source is.\n     *\n     * @param baseSource  the base source to base the ticking source on, not null\n     * @param tickDuration  the duration of each visible tick, not negative, not null\n     * @return a source that ticks in whole units of the duration, not null\n     * @throws IllegalArgumentException if the duration is negative, or has a\n     *  part smaller than a whole millisecond such that the whole duration is not\n     *  divisible into one second\n     * @throws ArithmeticException if the duration is too large to be represented as nanos\n     ",
    "links" : [ ]
  }, {
    "name" : " static InstantSource fixed(Instant fixedInstant)",
    "returnType" : "InstantSource",
    "comment" : "\n     * Obtains a source that always returns the same instant.\n     * <p>\n     * This source simply returns the specified instant.\n     * As such, it is not a source that represents the current instant.\n     * The main use case for this is in testing, where the fixed source ensures\n     * tests are not dependent on the current source.\n     * <p>\n     * The returned implementation is immutable, thread-safe and {@code Serializable}.\n     *\n     * @param fixedInstant  the instant to use, not null\n     * @return a source that always returns the same instant, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " static InstantSource offset(InstantSource baseSource, Duration offsetDuration)",
    "returnType" : "InstantSource",
    "comment" : "\n     * Obtains a source that returns instants from the specified source with the\n     * specified duration added.\n     * <p>\n     * This source wraps another source, returning instants that are later by the\n     * specified duration. If the duration is negative, the instants will be\n     * earlier than the current date and time.\n     * The main use case for this is to simulate running in the future or in the past.\n     * <p>\n     * A duration of zero would have no offsetting effect.\n     * Passing zero will return the underlying source.\n     * <p>\n     * The returned implementation is immutable, thread-safe and {@code Serializable}\n     * providing that the base source is.\n     *\n     * @param baseSource  the base source to add the duration to, not null\n     * @param offsetDuration  the duration to add, not null\n     * @return a source based on the base source with the duration added, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " Instant instant()",
    "returnType" : "Instant",
    "comment" : "\n     * Gets the current instant of the source.\n     * <p>\n     * This returns an instant representing the current instant as defined by the source.\n     *\n     * @return the current instant from this source, not null\n     * @throws DateTimeException if the instant cannot be obtained, not thrown by most implementations\n     ",
    "links" : [ ]
  }, {
    "name" : " long millis()",
    "returnType" : "long",
    "comment" : "\n     * Gets the current millisecond instant of the source.\n     * <p>\n     * This returns the millisecond-based instant, measured from 1970-01-01T00:00Z (UTC).\n     * This is equivalent to the definition of {@link System#currentTimeMillis()}.\n     * <p>\n     * Most applications should avoid this method and use {@link Instant} to represent\n     * an instant on the time-line rather than a raw millisecond value.\n     * This method is provided to allow the use of the source in high performance use cases\n     * where the creation of an object would be unacceptable.\n     *\n     * @implSpec\n     * The default implementation calls {@link #instant()}.\n     *\n     * @return the current millisecond instant from this source, measured from\n     *  the Java epoch of 1970-01-01T00:00Z (UTC), not null\n     * @throws DateTimeException if the instant cannot be obtained, not thrown by most implementations\n     ",
    "links" : [ "#currentTimeMillis()", "#instant()", "java.time.Instant" ]
  }, {
    "name" : " Clock withZone(ZoneId zone)",
    "returnType" : "Clock",
    "comment" : "\n     * Returns a clock with the specified time-zone.\n     * <p>\n     * This returns a {@link Clock}, which is an extension of this interface\n     * that combines this source and the specified time-zone.\n     * <p>\n     * The returned implementation is immutable, thread-safe and {@code Serializable}\n     * providing that this source is.\n     *\n     * @implSpec\n     * The default implementation returns an immutable, thread-safe and\n     * {@code Serializable} subclass of {@link Clock} that combines this\n     * source and the specified zone.\n     *\n     * @param zone  the time-zone to use, not null\n     * @return a clock based on this source with the specified time-zone, not null\n     ",
    "links" : [ "java.time.Clock.SourceClock" ]
  } ],
  "methodNames" : [ " static InstantSource system()", " static InstantSource tick(InstantSource baseSource, Duration tickDuration)", " static InstantSource fixed(Instant fixedInstant)", " static InstantSource offset(InstantSource baseSource, Duration offsetDuration)", " Instant instant()", " long millis()", " Clock withZone(ZoneId zone)" ],
  "variableNames" : [ ]
}