{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Presentation.java",
  "packageName" : "android.app",
  "className" : "Presentation",
  "comment" : "\n * Base class for presentations.\n * <p>\n * A presentation is a special kind of dialog whose purpose is to present\n * content on a secondary display.  A {@link Presentation} is associated with\n * the target {@link Display} at creation time and configures its context and\n * resource configuration according to the display's metrics.\n * </p><p>\n * Notably, the {@link Context} of a presentation is different from the context\n * of its containing {@link Activity}.  It is important to inflate the layout\n * of a presentation and load other resources using the presentation's own context\n * to ensure that assets of the correct size and density for the target display\n * are loaded.\n * </p><p>\n * A presentation is automatically canceled (see {@link Dialog#cancel()}) when\n * the display to which it is attached is removed.  An activity should take\n * care of pausing and resuming whatever content is playing within the presentation\n * whenever the activity itself is paused or resumed.\n * </p>\n *\n * <h3>Choosing a presentation display</h3>\n * <p>\n * Before showing a {@link Presentation} it's important to choose the {@link Display}\n * on which it will appear.  Choosing a presentation display is sometimes difficult\n * because there may be multiple displays attached.  Rather than trying to guess\n * which display is best, an application should let the system choose a suitable\n * presentation display.\n * </p><p>\n * There are two main ways to choose a {@link Display}.\n * </p>\n *\n * <h4>Using the media router to choose a presentation display</h4>\n * <p>\n * The easiest way to choose a presentation display is to use the\n * {@link android.media.MediaRouter MediaRouter} API.  The media router service keeps\n * track of which audio and video routes are available on the system.\n * The media router sends notifications whenever routes are selected or unselected\n * or when the preferred presentation display of a route changes.\n * So an application can simply watch for these notifications and show or dismiss\n * a presentation on the preferred presentation display automatically.\n * </p><p>\n * The preferred presentation display is the display that the media router recommends\n * that the application should use if it wants to show content on the secondary display.\n * Sometimes there may not be a preferred presentation display in which\n * case the application should show its content locally without using a presentation.\n * </p><p>\n * Here's how to use the media router to create and show a presentation on the preferred\n * presentation display using {@link android.media.MediaRouter.RouteInfo#getPresentationDisplay()}.\n * </p>\n * <pre>\n * MediaRouter mediaRouter = (MediaRouter) context.getSystemService(Context.MEDIA_ROUTER_SERVICE);\n * MediaRouter.RouteInfo route = mediaRouter.getSelectedRoute(MediaRouter.ROUTE_TYPE_LIVE_VIDEO);\n * if (route != null) {\n *     Display presentationDisplay = route.getPresentationDisplay();\n *     if (presentationDisplay != null) {\n *         Presentation presentation = new MyPresentation(context, presentationDisplay);\n *         presentation.show();\n *     }\n * }</pre>\n * <p>\n * The following sample code from <code>ApiDemos</code> demonstrates how to use the media\n * router to automatically switch between showing content in the main activity and showing\n * the content in a presentation when a presentation display is available.\n * </p>\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/PresentationWithMediaRouterActivity.java\n *      activity}\n *\n * <h4>Using the display manager to choose a presentation display</h4>\n * <p>\n * Another way to choose a presentation display is to use the {@link DisplayManager} API\n * directly.  The display manager service provides functions to enumerate and describe all\n * displays that are attached to the system including displays that may be used\n * for presentations.\n * </p><p>\n * The display manager keeps track of all displays in the system.  However, not all\n * displays are appropriate for showing presentations.  For example, if an activity\n * attempted to show a presentation on the main display it might obscure its own content\n * (it's like opening a dialog on top of your activity).  Creating a presentation on the main\n * display will result in {@link android.view.WindowManager.InvalidDisplayException} being thrown\n * when invoking {@link #show()}.\n * </p><p>\n * Here's how to identify suitable displays for showing presentations using\n * {@link DisplayManager#getDisplays(String)} and the\n * {@link DisplayManager#DISPLAY_CATEGORY_PRESENTATION} category.\n * </p>\n * <pre>\n * DisplayManager displayManager = (DisplayManager) context.getSystemService(Context.DISPLAY_SERVICE);\n * Display[] presentationDisplays = displayManager.getDisplays(DisplayManager.DISPLAY_CATEGORY_PRESENTATION);\n * if (presentationDisplays.length > 0) {\n *     // If there is more than one suitable presentation display, then we could consider\n *     // giving the user a choice.  For this example, we simply choose the first display\n *     // which is the one the system recommends as the preferred presentation display.\n *     Display display = presentationDisplays[0];\n *     Presentation presentation = new MyPresentation(context, presentationDisplay);\n *     presentation.show();\n * }</pre>\n * <p>\n * The following sample code from <code>ApiDemos</code> demonstrates how to use the display\n * manager to enumerate displays and show content on multiple presentation displays\n * simultaneously.\n * </p>\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/PresentationActivity.java\n *      activity}\n *\n * @see android.media.MediaRouter#ROUTE_TYPE_LIVE_VIDEO for information on about live\n * video routes and how to obtain the preferred presentation display for the\n * current media route.\n * @see DisplayManager for information on how to enumerate displays and receive\n * notifications when displays are added or removed.\n ",
  "links" : [ "android.media.MediaRouter.RouteInfo#getPresentationDisplay()", "android.content.Context", "#show()", "android.hardware.display.DisplayManager", "android.media.MediaRouter", "android.app.Presentation", "android.view.Display", "android.hardware.display.DisplayManager#getDisplays(String)", "android.app.Dialog#cancel()", "android.view.WindowManager.InvalidDisplayException", "android.hardware.display.DisplayManager#DISPLAY_CATEGORY_PRESENTATION", "android.app.Activity" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplay",
    "type" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayManager",
    "type" : "DisplayManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayListener",
    "type" : "DisplayListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int getWindowType(@WindowType int type, @NonNull Display display)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Display getDisplay()",
    "returnType" : "Display",
    "comment" : "\n     * Gets the {@link Display} that this presentation appears on.\n     *\n     * @return The display.\n     ",
    "links" : [ "android.view.Display" ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "\n     * Gets the {@link Resources} that should be used to inflate the layout of this presentation.\n     * This resources object has been configured according to the metrics of the\n     * display that the presentation appears on.\n     *\n     * @return The presentation resources object.\n     ",
    "links" : [ "android.content.res.Resources" ]
  }, {
    "name" : "protected void onStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void show()",
    "returnType" : "void",
    "comment" : "\n     * Inherited from {@link Dialog#show}. Will throw\n     * {@link android.view.WindowManager.InvalidDisplayException} if the specified secondary\n     * {@link Display} can't be found or if it does not have {@link Display#FLAG_PRESENTATION} set.\n     ",
    "links" : [ "android.app.Dialog#show", "android.view.Display", "android.view.Display#FLAG_PRESENTATION", "android.view.WindowManager.InvalidDisplayException" ]
  }, {
    "name" : "public void onDisplayRemoved()",
    "returnType" : "void",
    "comment" : "\n     * Called by the system when the {@link Display} to which the presentation\n     * is attached has been removed.\n     *\n     * The system automatically calls {@link #cancel} to dismiss the presentation\n     * after sending this event.\n     *\n     * @see #getDisplay\n     ",
    "links" : [ "android.view.Display", "#cancel" ]
  }, {
    "name" : "public void onDisplayChanged()",
    "returnType" : "void",
    "comment" : "\n     * Called by the system when the properties of the {@link Display} to which\n     * the presentation is attached have changed.\n     *\n     * @see #getDisplay\n     ",
    "links" : [ "android.view.Display" ]
  }, {
    "name" : "private void handleDisplayRemoved()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDisplayChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Context createPresentationContext(Context outerContext, Display display, int theme)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Context createPresentationContext(Context outerContext, Display display, int theme, @WindowType int type)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int getWindowType(@WindowType int type, @NonNull Display display)", "public Display getDisplay()", "public Resources getResources()", "protected void onStart()", "protected void onStop()", "public void show()", "public void onDisplayRemoved()", "public void onDisplayChanged()", "private void handleDisplayRemoved()", "private void handleDisplayChanged()", "private static Context createPresentationContext(Context outerContext, Display display, int theme)", "private static Context createPresentationContext(Context outerContext, Display display, int theme, @WindowType int type)" ],
  "variableNames" : [ "TAG", "mDisplay", "mDisplayManager", "mHandler", "mDisplayListener" ]
}