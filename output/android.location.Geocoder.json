{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/Geocoder.java",
  "packageName" : "android.location",
  "className" : "Geocoder",
  "comment" : "\n * A class for handling geocoding and reverse geocoding. Geocoding is the process of transforming a\n * street address or other description of a location into a (latitude, longitude) coordinate.\n * Reverse geocoding is the process of transforming a (latitude, longitude) coordinate into a\n * (partial) address. The amount of detail in a reverse geocoded location description may vary, for\n * example one might contain the full street address of the closest building, while another might\n * contain only a city name and postal code.\n *\n * <p>Use the isPresent() method to determine whether a Geocoder implementation exists on the\n * current device. If no implementation is present, any attempt to geocode will result in an error.\n *\n * <p>Geocoder implementations are only required to make a best effort to return results in the\n * chosen locale. Note that geocoder implementations may return results in other locales if they\n * have no information available for the chosen locale.\n *\n * <p class=\"note\"><strong>Warning:</strong> Geocoding services may provide no guarantees on\n * availability or accuracy. Results are a best guess, and are not guaranteed to be meaningful or\n * correct. Do not use this API for any safety-critical or regulatory compliance purpose.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TIMEOUT_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ILocationManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isPresent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there is a geocoder implementation present on the device that may return\n     * results. If true, there is still no guarantee that any individual geocoding attempt will\n     * succeed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Address> getFromLocation(@FloatRange(from = -90D, to = 90D) double latitude, @FloatRange(from = -180D, to = 180D) double longitude, @IntRange(from = 1) int maxResults) throws IOException",
    "returnType" : "List<Address>",
    "comment" : "\n     * Returns an array of Addresses that attempt to describe the area immediately surrounding the\n     * given latitude and longitude. The returned addresses should be localized for the locale\n     * provided to this class's constructor.\n     *\n     * <p class=\"warning\"><strong>Warning:</strong> Geocoding services may provide no guarantees on\n     * availability or accuracy. Results are a best guess, and are not guaranteed to be meaningful\n     * or correct. Do <b>NOT</b> use this API for any safety-critical or regulatory compliance\n     * purposes.\n     *\n     * <p class=\"warning\"><strong>Warning:</strong> This API may hit the network, and may block for\n     * excessive amounts of time. It's strongly encouraged to use the asynchronous version of this\n     * API. If that is not possible, this should be run on a background thread to avoid blocking\n     * other operations.\n     *\n     * @param latitude the latitude a point for the search\n     * @param longitude the longitude a point for the search\n     * @param maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended\n     * @return a list of Address objects. Returns null or empty list if no matches were found or\n     *     there is no backend service available.\n     * @throws IllegalArgumentException if latitude or longitude is invalid\n     * @throws IOException if there is a failure\n     * @deprecated Use {@link #getFromLocation(double, double, int, GeocodeListener)} instead to\n     *     avoid blocking a thread waiting for results.\n     ",
    "links" : [ "#getFromLocation(double" ]
  }, {
    "name" : "public void getFromLocation(@FloatRange(from = -90D, to = 90D) double latitude, @FloatRange(from = -180D, to = 180D) double longitude, @IntRange(from = 1) int maxResults, @NonNull GeocodeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Provides an array of Addresses that attempt to describe the area immediately surrounding the\n     * given latitude and longitude. The returned addresses should be localized for the locale\n     * provided to this class's constructor.\n     *\n     * <p class=\"warning\"><strong>Warning:</strong> Geocoding services may provide no guarantees on\n     * availability or accuracy. Results are a best guess, and are not guaranteed to be meaningful\n     * or correct. Do <b>NOT</b> use this API for any safety-critical or regulatory compliance\n     * purposes.\n     *\n     * @param latitude the latitude a point for the search\n     * @param longitude the longitude a point for the search\n     * @param maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended\n     * @param listener a listener for receiving results\n     * @throws IllegalArgumentException if latitude or longitude is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Address> getFromLocationName(@NonNull String locationName, @IntRange(from = 1) int maxResults) throws IOException",
    "returnType" : "List<Address>",
    "comment" : "\n     * Returns an array of Addresses that attempt to describe the named location, which may be a\n     * place name such as \"Dalvik, Iceland\", an address such as \"1600 Amphitheatre Parkway, Mountain\n     * View, CA\", an airport code such as \"SFO\", and so forth. The returned addresses should be\n     * localized for the locale provided to this class's constructor.\n     *\n     * <p class=\"note\"><strong>Warning:</strong> Geocoding services may provide no guarantees on\n     * availability or accuracy. Results are a best guess, and are not guaranteed to be meaningful\n     * or correct. Do <b>NOT</b> use this API for any safety-critical or regulatory compliance\n     * purposes.\n     *\n     * <p class=\"warning\"><strong>Warning:</strong> This API may hit the network, and may block for\n     * excessive amounts of time. It's strongly encouraged to use the asynchronous version of this\n     * API. If that is not possible, this should be run on a background thread to avoid blocking\n     * other operations.\n     *\n     * @param locationName a user-supplied description of a location\n     * @param maxResults max number of results to return. Smaller numbers (1 to 5) are recommended\n     * @return a list of Address objects. Returns null or empty list if no matches were found or\n     *     there is no backend service available.\n     * @throws IllegalArgumentException if locationName is null\n     * @throws IOException if there is a failure\n     * @deprecated Use {@link #getFromLocationName(String, int, GeocodeListener)} instead to avoid\n     *     blocking a thread waiting for results.\n     ",
    "links" : [ "#getFromLocationName(String" ]
  }, {
    "name" : "public void getFromLocationName(@NonNull String locationName, @IntRange(from = 1) int maxResults, @NonNull GeocodeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Provides an array of Addresses that attempt to describe the named location, which may be a\n     * place name such as \"Dalvik, Iceland\", an address such as \"1600 Amphitheatre Parkway, Mountain\n     * View, CA\", an airport code such as \"SFO\", and so forth. The returned addresses should be\n     * localized for the locale provided to this class's constructor.\n     *\n     * <p class=\"note\"><strong>Warning:</strong> Geocoding services may provide no guarantees on\n     * availability or accuracy. Results are a best guess, and are not guaranteed to be meaningful\n     * or correct. Do <b>NOT</b> use this API for any safety-critical or regulatory compliance\n     * purposes.\n     *\n     * @param locationName a user-supplied description of a location\n     * @param maxResults max number of results to return. Smaller numbers (1 to 5) are recommended\n     * @param listener a listener for receiving results\n     * @throws IllegalArgumentException if locationName is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Address> getFromLocationName(@NonNull String locationName, @IntRange(from = 1) int maxResults, @FloatRange(from = -90D, to = 90D) double lowerLeftLatitude, @FloatRange(from = -180D, to = 180D) double lowerLeftLongitude, @FloatRange(from = -90D, to = 90D) double upperRightLatitude, @FloatRange(from = -180D, to = 180D) double upperRightLongitude) throws IOException",
    "returnType" : "List<Address>",
    "comment" : "\n     * Returns an array of Addresses that attempt to describe the named location, which may be a\n     * place name such as \"Dalvik, Iceland\", an address such as \"1600 Amphitheatre Parkway, Mountain\n     * View, CA\", an airport code such as \"SFO\", and so forth. The returned addresses should be\n     * localized for the locale provided to this class's constructor.\n     *\n     * <p>You may specify a bounding box for the search results by including the latitude and\n     * longitude of the lower left point and upper right point of the box.\n     *\n     * <p class=\"note\"><strong>Warning:</strong> Geocoding services may provide no guarantees on\n     * availability or accuracy. Results are a best guess, and are not guaranteed to be meaningful\n     * or correct. Do <b>NOT</b> use this API for any safety-critical or regulatory compliance\n     * purposes.\n     *\n     * <p class=\"warning\"><strong>Warning:</strong> This API may hit the network, and may block for\n     * excessive amounts of time. It's strongly encouraged to use the asynchronous version of this\n     * API. If that is not possible, this should be run on a background thread to avoid blocking\n     * other operations.\n     *\n     * @param locationName a user-supplied description of a location\n     * @param maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended\n     * @param lowerLeftLatitude the latitude of the lower left corner of the bounding box\n     * @param lowerLeftLongitude the longitude of the lower left corner of the bounding box\n     * @param upperRightLatitude the latitude of the upper right corner of the bounding box\n     * @param upperRightLongitude the longitude of the upper right corner of the bounding box\n     * @return a list of Address objects. Returns null or empty list if no matches were found or\n     *     there is no backend service available.\n     * @throws IllegalArgumentException if locationName is null\n     * @throws IllegalArgumentException if any latitude or longitude is invalid\n     * @throws IOException if there is a failure\n     * @deprecated Use {@link #getFromLocationName(String, int, double, double, double, double,\n     *     GeocodeListener)} instead to avoid blocking a thread waiting for results.\n     ",
    "links" : [ "#getFromLocationName(String" ]
  }, {
    "name" : "public void getFromLocationName(@NonNull String locationName, @IntRange(from = 1) int maxResults, @FloatRange(from = -90D, to = 90D) double lowerLeftLatitude, @FloatRange(from = -180D, to = 180D) double lowerLeftLongitude, @FloatRange(from = -90D, to = 90D) double upperRightLatitude, @FloatRange(from = -180D, to = 180D) double upperRightLongitude, @NonNull GeocodeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Returns an array of Addresses that attempt to describe the named location, which may be a\n     * place name such as \"Dalvik, Iceland\", an address such as \"1600 Amphitheatre Parkway, Mountain\n     * View, CA\", an airport code such as \"SFO\", and so forth. The returned addresses should be\n     * localized for the locale provided to this class's constructor.\n     *\n     * <p>You may specify a bounding box for the search results by including the latitude and\n     * longitude of the lower left point and upper right point of the box.\n     *\n     * <p class=\"note\"><strong>Warning:</strong> Geocoding services may provide no guarantees on\n     * availability or accuracy. Results are a best guess, and are not guaranteed to be meaningful\n     * or correct. Do <b>NOT</b> use this API for any safety-critical or regulatory compliance\n     * purposes.\n     *\n     * @param locationName a user-supplied description of a location\n     * @param maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended\n     * @param lowerLeftLatitude the latitude of the lower left corner of the bounding box\n     * @param lowerLeftLongitude the longitude of the lower left corner of the bounding box\n     * @param upperRightLatitude the latitude of the upper right corner of the bounding box\n     * @param upperRightLongitude the longitude of the upper right corner of the bounding box\n     * @param listener a listener for receiving results\n     * @throws IllegalArgumentException if locationName is null\n     * @throws IllegalArgumentException if any latitude or longitude is invalid\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isPresent()", "public List<Address> getFromLocation(@FloatRange(from = -90D, to = 90D) double latitude, @FloatRange(from = -180D, to = 180D) double longitude, @IntRange(from = 1) int maxResults) throws IOException", "public void getFromLocation(@FloatRange(from = -90D, to = 90D) double latitude, @FloatRange(from = -180D, to = 180D) double longitude, @IntRange(from = 1) int maxResults, @NonNull GeocodeListener listener)", "public List<Address> getFromLocationName(@NonNull String locationName, @IntRange(from = 1) int maxResults) throws IOException", "public void getFromLocationName(@NonNull String locationName, @IntRange(from = 1) int maxResults, @NonNull GeocodeListener listener)", "public List<Address> getFromLocationName(@NonNull String locationName, @IntRange(from = 1) int maxResults, @FloatRange(from = -90D, to = 90D) double lowerLeftLatitude, @FloatRange(from = -180D, to = 180D) double lowerLeftLongitude, @FloatRange(from = -90D, to = 90D) double upperRightLatitude, @FloatRange(from = -180D, to = 180D) double upperRightLongitude) throws IOException", "public void getFromLocationName(@NonNull String locationName, @IntRange(from = 1) int maxResults, @FloatRange(from = -90D, to = 90D) double lowerLeftLatitude, @FloatRange(from = -180D, to = 180D) double lowerLeftLongitude, @FloatRange(from = -90D, to = 90D) double upperRightLatitude, @FloatRange(from = -180D, to = 180D) double upperRightLongitude, @NonNull GeocodeListener listener)" ],
  "variableNames" : [ "TIMEOUT_MS", "mContext", "mLocale", "mService" ]
}