{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/location/Geocoder.java",
  "packageName" : "android.location",
  "className" : "Geocoder",
  "comment" : "\n * A class for handling geocoding and reverse geocoding.  Geocoding is\n * the process of transforming a street address or other description\n * of a location into a (latitude, longitude) coordinate.  Reverse\n * geocoding is the process of transforming a (latitude, longitude)\n * coordinate into a (partial) address.  The amount of detail in a\n * reverse geocoded location description may vary, for example one\n * might contain the full street address of the closest building, while\n * another might contain only a city name and postal code.\n *\n * The Geocoder class requires a backend service that is not included in\n * the core android framework.  The Geocoder query methods will return an\n * empty list if there no backend service in the platform.  Use the\n * isPresent() method to determine whether a Geocoder implementation\n * exists.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParams",
    "type" : "GeocoderParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ILocationManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isPresent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the Geocoder methods getFromLocation and\n     * getFromLocationName are implemented.  Lack of network\n     * connectivity may still cause these methods to return null or\n     * empty lists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Address> getFromLocation(double latitude, double longitude, int maxResults) throws IOException",
    "returnType" : "List<Address>",
    "comment" : "\n     * Returns an array of Addresses that are known to describe the\n     * area immediately surrounding the given latitude and longitude.\n     * The returned addresses will be localized for the locale\n     * provided to this class's constructor.\n     *\n     * <p> The returned values may be obtained by means of a network lookup.\n     * The results are a best guess and are not guaranteed to be meaningful or\n     * correct. It may be useful to call this method from a thread separate from your\n     * primary UI thread.\n     *\n     * @param latitude the latitude a point for the search\n     * @param longitude the longitude a point for the search\n     * @param maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended\n     *\n     * @return a list of Address objects. Returns null or empty list if no matches were\n     * found or there is no backend service available.\n     *\n     * @throws IllegalArgumentException if latitude is\n     * less than -90 or greater than 90\n     * @throws IllegalArgumentException if longitude is\n     * less than -180 or greater than 180\n     * @throws IOException if the network is unavailable or any other\n     * I/O problem occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Address> getFromLocationName(String locationName, int maxResults) throws IOException",
    "returnType" : "List<Address>",
    "comment" : "\n     * Returns an array of Addresses that are known to describe the\n     * named location, which may be a place name such as \"Dalvik,\n     * Iceland\", an address such as \"1600 Amphitheatre Parkway,\n     * Mountain View, CA\", an airport code such as \"SFO\", etc..  The\n     * returned addresses will be localized for the locale provided to\n     * this class's constructor.\n     *\n     * <p> The query will block and returned values will be obtained by means of a network lookup.\n     * The results are a best guess and are not guaranteed to be meaningful or\n     * correct. It may be useful to call this method from a thread separate from your\n     * primary UI thread.\n     *\n     * @param locationName a user-supplied description of a location\n     * @param maxResults max number of results to return. Smaller numbers (1 to 5) are recommended\n     *\n     * @return a list of Address objects. Returns null or empty list if no matches were\n     * found or there is no backend service available.\n     *\n     * @throws IllegalArgumentException if locationName is null\n     * @throws IOException if the network is unavailable or any other\n     * I/O problem occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Address> getFromLocationName(String locationName, int maxResults, double lowerLeftLatitude, double lowerLeftLongitude, double upperRightLatitude, double upperRightLongitude) throws IOException",
    "returnType" : "List<Address>",
    "comment" : "\n     * Returns an array of Addresses that are known to describe the\n     * named location, which may be a place name such as \"Dalvik,\n     * Iceland\", an address such as \"1600 Amphitheatre Parkway,\n     * Mountain View, CA\", an airport code such as \"SFO\", etc..  The\n     * returned addresses will be localized for the locale provided to\n     * this class's constructor.\n     *\n     * <p> You may specify a bounding box for the search results by including\n     * the Latitude and Longitude of the Lower Left point and Upper Right\n     * point of the box.\n     *\n     * <p> The query will block and returned values will be obtained by means of a network lookup.\n     * The results are a best guess and are not guaranteed to be meaningful or\n     * correct. It may be useful to call this method from a thread separate from your\n     * primary UI thread.\n     *\n     * @param locationName a user-supplied description of a location\n     * @param maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended\n     * @param lowerLeftLatitude the latitude of the lower left corner of the bounding box\n     * @param lowerLeftLongitude the longitude of the lower left corner of the bounding box\n     * @param upperRightLatitude the latitude of the upper right corner of the bounding box\n     * @param upperRightLongitude the longitude of the upper right corner of the bounding box\n     *\n     * @return a list of Address objects. Returns null or empty list if no matches were\n     * found or there is no backend service available.\n     *\n     * @throws IllegalArgumentException if locationName is null\n     * @throws IllegalArgumentException if any latitude is\n     * less than -90 or greater than 90\n     * @throws IllegalArgumentException if any longitude is\n     * less than -180 or greater than 180\n     * @throws IOException if the network is unavailable or any other\n     * I/O problem occurs\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mParams", "mService" ],
  "methodNames" : [ "public static boolean isPresent()", "public List<Address> getFromLocation(double latitude, double longitude, int maxResults) throws IOException", "public List<Address> getFromLocationName(String locationName, int maxResults) throws IOException", "public List<Address> getFromLocationName(String locationName, int maxResults, double lowerLeftLatitude, double lowerLeftLongitude, double upperRightLatitude, double upperRightLongitude) throws IOException" ]
}