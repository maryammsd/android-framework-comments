{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Date.java",
  "packageName" : "java.util",
  "className" : "Date",
  "comment" : "\n * The class {@code Date} represents a specific instant\n * in time, with millisecond precision.\n * <p>\n * Prior to JDK&nbsp;1.1, the class {@code Date} had two additional\n * functions.  It allowed the interpretation of dates as year, month, day, hour,\n * minute, and second values.  It also allowed the formatting and parsing\n * of date strings.  Unfortunately, the API for these functions was not\n * amenable to internationalization.  As of JDK&nbsp;1.1, the\n * {@code Calendar} class should be used to convert between dates and time\n * fields and the {@code DateFormat} class should be used to format and\n * parse date strings.\n * The corresponding methods in {@code Date} are deprecated.\n * <p>\n * Although the {@code Date} class is intended to reflect\n * coordinated universal time (UTC), it may not do so exactly,\n * depending on the host environment of the Java Virtual Machine.\n * Nearly all modern operating systems assume that 1&nbsp;day&nbsp;=\n * 24&nbsp;&times;&nbsp;60&nbsp;&times;&nbsp;60&nbsp;= 86400 seconds\n * in all cases. In UTC, however, about once every year or two there\n * is an extra second, called a \"leap second.\" The leap\n * second is always added as the last second of the day, and always\n * on December 31 or June 30. For example, the last minute of the\n * year 1995 was 61 seconds long, thanks to an added leap second.\n * Most computer clocks are not accurate enough to be able to reflect\n * the leap-second distinction.\n * <p>\n * Some computer standards are defined in terms of Greenwich mean\n * time (GMT), which is equivalent to universal time (UT).  GMT is\n * the \"civil\" name for the standard; UT is the\n * \"scientific\" name for the same standard. The\n * distinction between UTC and UT is that UTC is based on an atomic\n * clock and UT is based on astronomical observations, which for all\n * practical purposes is an invisibly fine hair to split. Because the\n * earth's rotation is not uniform (it slows down and speeds up\n * in complicated ways), UT does not always flow uniformly. Leap\n * seconds are introduced as needed into UTC so as to keep UTC within\n * 0.9 seconds of UT1, which is a version of UT with certain\n * corrections applied. There are other time and date systems as\n * well; for example, the time scale used by the satellite-based\n * global positioning system (GPS) is synchronized to UTC but is\n * <i>not</i> adjusted for leap seconds. An interesting source of\n * further information is the United States Naval Observatory (USNO):\n * <blockquote><pre>\n *     <a href=\"https://www.usno.navy.mil/USNO\">https://www.usno.navy.mil/USNO</a>\n * </pre></blockquote>\n * <p>\n * and the material regarding \"Systems of Time\" at:\n * <blockquote><pre>\n *     <a href=\"https://www.usno.navy.mil/USNO/time/master-clock/systems-of-time\">https://www.usno.navy.mil/USNO/time/master-clock/systems-of-time</a>\n * </pre></blockquote>\n * <p>\n * which has descriptions of various different time systems including\n * UT, UT1, and UTC.\n * <p>\n * In all methods of class {@code Date} that accept or return\n * year, month, date, hours, minutes, and seconds values, the\n * following representations are used:\n * <ul>\n * <li>A year <i>y</i> is represented by the integer\n *     <i>y</i>&nbsp;{@code - 1900}.\n * <li>A month is represented by an integer from 0 to 11; 0 is January,\n *     1 is February, and so forth; thus 11 is December.\n * <li>A date (day of month) is represented by an integer from 1 to 31\n *     in the usual manner.\n * <li>An hour is represented by an integer from 0 to 23. Thus, the hour\n *     from midnight to 1 a.m. is hour 0, and the hour from noon to 1\n *     p.m. is hour 12.\n * <li>A minute is represented by an integer from 0 to 59 in the usual manner.\n * <li>A second is represented by an integer from 0 to 61; the values 60 and\n *     61 occur only for leap seconds and even then only in Java\n *     implementations that actually track leap seconds correctly. Because\n *     of the manner in which leap seconds are currently introduced, it is\n *     extremely unlikely that two leap seconds will occur in the same\n *     minute, but this specification follows the date and time conventions\n *     for ISO C.\n * </ul>\n * <p>\n * In all cases, arguments given to methods for these purposes need\n * not fall within the indicated ranges; for example, a date may be\n * specified as January 32 and is interpreted as meaning February 1.\n *\n * @author  James Gosling\n * @author  Arthur van Hoff\n * @author  Alan Liu\n * @see     java.text.DateFormat\n * @see     java.util.Calendar\n * @see     java.util.TimeZone\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "gcal",
    "type" : "BaseCalendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "jcal",
    "type" : "BaseCalendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fastTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cdate",
    "type" : "BaseCalendar.Date",
    "comment" : "\n     * If cdate is null, then fastTime indicates the time in millis.\n     * If cdate.isNormalized() is true, then fastTime and cdate are in\n     * synch. Otherwise, fastTime is ignored, and cdate indicates the\n     * time.\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultCenturyStart",
    "type" : "int",
    "comment" : " Initialized just before the value is used. See parse().",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from modified java.util.Date for\n     * interoperability with JDK1.1. The Date was modified to write\n     * and read only the UTC time.\n     ",
    "links" : [ ]
  }, {
    "name" : "wtb",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ttb",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Return a copy of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long UTC(int year, int month, int date, int hrs, int min, int sec)",
    "returnType" : "long",
    "comment" : "\n     * Determines the date and time based on the arguments. The\n     * arguments are interpreted as a year, month, day of the month,\n     * hour of the day, minute within the hour, and second within the\n     * minute, exactly as for the {@code Date} constructor with six\n     * arguments, except that the arguments are interpreted relative\n     * to UTC rather than to the local time zone. The time indicated is\n     * returned represented as the distance, measured in milliseconds,\n     * of that time from the epoch (00:00:00 GMT on January 1, 1970).\n     *\n     * @param   year    the year minus 1900.\n     * @param   month   the month between 0-11.\n     * @param   date    the day of the month between 1-31.\n     * @param   hrs     the hours between 0-23.\n     * @param   min     the minutes between 0-59.\n     * @param   sec     the seconds between 0-59.\n     * @return  the number of milliseconds since January 1, 1970, 00:00:00 GMT for\n     *          the date and time specified by the arguments.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.set(year + 1900, month, date, hrs, min, sec)}\n     * or {@code GregorianCalendar(year + 1900, month, date, hrs, min, sec)}, using a UTC\n     * {@code TimeZone}, followed by {@code Calendar.getTime().getTime()}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long parse(String s)",
    "returnType" : "long",
    "comment" : "\n     * Attempts to interpret the string {@code s} as a representation\n     * of a date and time. If the attempt is successful, the time\n     * indicated is returned represented as the distance, measured in\n     * milliseconds, of that time from the epoch (00:00:00 GMT on\n     * January 1, 1970). If the attempt fails, an\n     * {@code IllegalArgumentException} is thrown.\n     * <p>\n     * It accepts many syntaxes; in particular, it recognizes the IETF\n     * standard date syntax: \"Sat, 12 Aug 1995 13:30:00 GMT\". It also\n     * understands the continental U.S. time-zone abbreviations, but for\n     * general use, a time-zone offset should be used: \"Sat, 12 Aug 1995\n     * 13:30:00 GMT+0430\" (4 hours, 30 minutes west of the Greenwich\n     * meridian). If no time zone is specified, the local time zone is\n     * assumed. GMT and UTC are considered equivalent.\n     * <p>\n     * The string {@code s} is processed from left to right, looking for\n     * data of interest. Any material in {@code s} that is within the\n     * ASCII parenthesis characters {@code (} and {@code )} is ignored.\n     * Parentheses may be nested. Otherwise, the only characters permitted\n     * within {@code s} are these ASCII characters:\n     * <blockquote><pre>\n     * abcdefghijklmnopqrstuvwxyz\n     * ABCDEFGHIJKLMNOPQRSTUVWXYZ\n     * 0123456789,+-:/</pre></blockquote>\n     * and whitespace characters.<p>\n     * A consecutive sequence of decimal digits is treated as a decimal\n     * number:<ul>\n     * <li>If a number is preceded by {@code +} or {@code -} and a year\n     *     has already been recognized, then the number is a time-zone\n     *     offset. If the number is less than 24, it is an offset measured\n     *     in hours. Otherwise, it is regarded as an offset in minutes,\n     *     expressed in 24-hour time format without punctuation. A\n     *     preceding {@code -} means a westward offset. Time zone offsets\n     *     are always relative to UTC (Greenwich). Thus, for example,\n     *     {@code -5} occurring in the string would mean \"five hours west\n     *     of Greenwich\" and {@code +0430} would mean \"four hours and\n     *     thirty minutes east of Greenwich.\" It is permitted for the\n     *     string to specify {@code GMT}, {@code UT}, or {@code UTC}\n     *     redundantly-for example, {@code GMT-5} or {@code utc+0430}.\n     * <li>The number is regarded as a year number if one of the\n     *     following conditions is true:\n     * <ul>\n     *     <li>The number is equal to or greater than 70 and followed by a\n     *         space, comma, slash, or end of string\n     *     <li>The number is less than 70, and both a month and a day of\n     *         the month have already been recognized</li>\n     * </ul>\n     *     If the recognized year number is less than 100, it is\n     *     interpreted as an abbreviated year relative to a century of\n     *     which dates are within 80 years before and 19 years after\n     *     the time when the Date class is initialized.\n     *     After adjusting the year number, 1900 is subtracted from\n     *     it. For example, if the current year is 1999 then years in\n     *     the range 19 to 99 are assumed to mean 1919 to 1999, while\n     *     years from 0 to 18 are assumed to mean 2000 to 2018.  Note\n     *     that this is slightly different from the interpretation of\n     *     years less than 100 that is used in {@link java.text.SimpleDateFormat}.\n     * <li>If the number is followed by a colon, it is regarded as an hour,\n     *     unless an hour has already been recognized, in which case it is\n     *     regarded as a minute.\n     * <li>If the number is followed by a slash, it is regarded as a month\n     *     (it is decreased by 1 to produce a number in the range {@code 0}\n     *     to {@code 11}), unless a month has already been recognized, in\n     *     which case it is regarded as a day of the month.\n     * <li>If the number is followed by whitespace, a comma, a hyphen, or\n     *     end of string, then if an hour has been recognized but not a\n     *     minute, it is regarded as a minute; otherwise, if a minute has\n     *     been recognized but not a second, it is regarded as a second;\n     *     otherwise, it is regarded as a day of the month. </ul><p>\n     * A consecutive sequence of letters is regarded as a word and treated\n     * as follows:<ul>\n     * <li>A word that matches {@code AM}, ignoring case, is ignored (but\n     *     the parse fails if an hour has not been recognized or is less\n     *     than {@code 1} or greater than {@code 12}).\n     * <li>A word that matches {@code PM}, ignoring case, adds {@code 12}\n     *     to the hour (but the parse fails if an hour has not been\n     *     recognized or is less than {@code 1} or greater than {@code 12}).\n     * <li>Any word that matches any prefix of {@code SUNDAY, MONDAY, TUESDAY,\n     *     WEDNESDAY, THURSDAY, FRIDAY}, or {@code SATURDAY}, ignoring\n     *     case, is ignored. For example, {@code sat, Friday, TUE}, and\n     *     {@code Thurs} are ignored.\n     * <li>Otherwise, any word that matches any prefix of {@code JANUARY,\n     *     FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER,\n     *     OCTOBER, NOVEMBER}, or {@code DECEMBER}, ignoring case, and\n     *     considering them in the order given here, is recognized as\n     *     specifying a month and is converted to a number ({@code 0} to\n     *     {@code 11}). For example, {@code aug, Sept, april}, and\n     *     {@code NOV} are recognized as months. So is {@code Ma}, which\n     *     is recognized as {@code MARCH}, not {@code MAY}.\n     * <li>Any word that matches {@code GMT, UT}, or {@code UTC}, ignoring\n     *     case, is treated as referring to UTC.\n     * <li>Any word that matches {@code EST, CST, MST}, or {@code PST},\n     *     ignoring case, is recognized as referring to the time zone in\n     *     North America that is five, six, seven, or eight hours west of\n     *     Greenwich, respectively. Any word that matches {@code EDT, CDT,\n     *     MDT}, or {@code PDT}, ignoring case, is recognized as\n     *     referring to the same time zone, respectively, during daylight\n     *     saving time.</ul><p>\n     * Once the entire string s has been scanned, it is converted to a time\n     * result in one of two ways. If a time zone or time-zone offset has been\n     * recognized, then the year, month, day of month, hour, minute, and\n     * second are interpreted in UTC and then the time-zone offset is\n     * applied. Otherwise, the year, month, day of month, hour, minute, and\n     * second are interpreted in the local time zone.\n     *\n     * @param   s   a string to be parsed as a date.\n     * @return  the number of milliseconds since January 1, 1970, 00:00:00 GMT\n     *          represented by the string argument.\n     * @see     java.text.DateFormat\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code DateFormat.parse(String s)}.\n     ",
    "links" : [ "java.text.SimpleDateFormat" ]
  }, {
    "name" : "public int getYear()",
    "returnType" : "int",
    "comment" : "\n     * Returns a value that is the result of subtracting 1900 from the\n     * year that contains or begins with the instant in time represented\n     * by this {@code Date} object, as interpreted in the local\n     * time zone.\n     *\n     * @return  the year represented by this date, minus 1900.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.get(Calendar.YEAR) - 1900}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setYear(int year)",
    "returnType" : "void",
    "comment" : "\n     * Sets the year of this {@code Date} object to be the specified\n     * value plus 1900. This {@code Date} object is modified so\n     * that it represents a point in time within the specified year,\n     * with the month, date, hour, minute, and second the same as\n     * before, as interpreted in the local time zone. (Of course, if\n     * the date was February 29, for example, and the year is set to a\n     * non-leap year, then the new date will be treated as if it were\n     * on March 1.)\n     *\n     * @param   year    the year value.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.set(Calendar.YEAR, year + 1900)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMonth()",
    "returnType" : "int",
    "comment" : "\n     * Returns a number representing the month that contains or begins\n     * with the instant in time represented by this {@code Date} object.\n     * The value returned is between {@code 0} and {@code 11},\n     * with the value {@code 0} representing January.\n     *\n     * @return  the month represented by this date.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.get(Calendar.MONTH)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMonth(int month)",
    "returnType" : "void",
    "comment" : "\n     * Sets the month of this date to the specified value. This\n     * {@code Date} object is modified so that it represents a point\n     * in time within the specified month, with the year, date, hour,\n     * minute, and second the same as before, as interpreted in the\n     * local time zone. If the date was October 31, for example, and\n     * the month is set to June, then the new date will be treated as\n     * if it were on July 1, because June has only 30 days.\n     *\n     * @param   month   the month value between 0-11.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.set(Calendar.MONTH, int month)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDate()",
    "returnType" : "int",
    "comment" : "\n     * Returns the day of the month represented by this {@code Date} object.\n     * The value returned is between {@code 1} and {@code 31}\n     * representing the day of the month that contains or begins with the\n     * instant in time represented by this {@code Date} object, as\n     * interpreted in the local time zone.\n     *\n     * @return  the day of the month represented by this date.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.get(Calendar.DAY_OF_MONTH)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDate(int date)",
    "returnType" : "void",
    "comment" : "\n     * Sets the day of the month of this {@code Date} object to the\n     * specified value. This {@code Date} object is modified so that\n     * it represents a point in time within the specified day of the\n     * month, with the year, month, hour, minute, and second the same\n     * as before, as interpreted in the local time zone. If the date\n     * was April 30, for example, and the date is set to 31, then it\n     * will be treated as if it were on May 1, because April has only\n     * 30 days.\n     *\n     * @param   date   the day of the month value between 1-31.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.set(Calendar.DAY_OF_MONTH, int date)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDay()",
    "returnType" : "int",
    "comment" : "\n     * Returns the day of the week represented by this date. The\n     * returned value ({@code 0} = Sunday, {@code 1} = Monday,\n     * {@code 2} = Tuesday, {@code 3} = Wednesday, {@code 4} =\n     * Thursday, {@code 5} = Friday, {@code 6} = Saturday)\n     * represents the day of the week that contains or begins with\n     * the instant in time represented by this {@code Date} object,\n     * as interpreted in the local time zone.\n     *\n     * @return  the day of the week represented by this date.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.get(Calendar.DAY_OF_WEEK)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHours()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hour represented by this {@code Date} object. The\n     * returned value is a number ({@code 0} through {@code 23})\n     * representing the hour within the day that contains or begins\n     * with the instant in time represented by this {@code Date}\n     * object, as interpreted in the local time zone.\n     *\n     * @return  the hour represented by this date.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.get(Calendar.HOUR_OF_DAY)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHours(int hours)",
    "returnType" : "void",
    "comment" : "\n     * Sets the hour of this {@code Date} object to the specified value.\n     * This {@code Date} object is modified so that it represents a point\n     * in time within the specified hour of the day, with the year, month,\n     * date, minute, and second the same as before, as interpreted in the\n     * local time zone.\n     *\n     * @param   hours   the hour value.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.set(Calendar.HOUR_OF_DAY, int hours)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinutes()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of minutes past the hour represented by this date,\n     * as interpreted in the local time zone.\n     * The value returned is between {@code 0} and {@code 59}.\n     *\n     * @return  the number of minutes past the hour represented by this date.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.get(Calendar.MINUTE)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinutes(int minutes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minutes of this {@code Date} object to the specified value.\n     * This {@code Date} object is modified so that it represents a point\n     * in time within the specified minute of the hour, with the year, month,\n     * date, hour, and second the same as before, as interpreted in the\n     * local time zone.\n     *\n     * @param   minutes   the value of the minutes.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.set(Calendar.MINUTE, int minutes)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSeconds()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of seconds past the minute represented by this date.\n     * The value returned is between {@code 0} and {@code 61}. The\n     * values {@code 60} and {@code 61} can only occur on those\n     * Java Virtual Machines that take leap seconds into account.\n     *\n     * @return  the number of seconds past the minute represented by this date.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.get(Calendar.SECOND)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSeconds(int seconds)",
    "returnType" : "void",
    "comment" : "\n     * Sets the seconds of this {@code Date} to the specified value.\n     * This {@code Date} object is modified so that it represents a\n     * point in time within the specified second of the minute, with\n     * the year, month, date, hour, and minute the same as before, as\n     * interpreted in the local time zone.\n     *\n     * @param   seconds   the seconds value.\n     * @see     java.util.Calendar\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code Calendar.set(Calendar.SECOND, int seconds)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT\n     * represented by this {@code Date} object.\n     *\n     * @return  the number of milliseconds since January 1, 1970, 00:00:00 GMT\n     *          represented by this date.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final long getTimeImpl()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTime(long time)",
    "returnType" : "void",
    "comment" : "\n     * Sets this {@code Date} object to represent a point in time that is\n     * {@code time} milliseconds after January 1, 1970 00:00:00 GMT.\n     *\n     * @param   time   the number of milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean before(Date when)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this date is before the specified date.\n     *\n     * @param   when   a date.\n     * @return  {@code true} if and only if the instant of time\n     *            represented by this {@code Date} object is strictly\n     *            earlier than the instant represented by {@code when};\n     *          {@code false} otherwise.\n     * @throws    NullPointerException if {@code when} is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean after(Date when)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this date is after the specified date.\n     *\n     * @param   when   a date.\n     * @return  {@code true} if and only if the instant represented\n     *          by this {@code Date} object is strictly later than the\n     *          instant represented by {@code when};\n     *          {@code false} otherwise.\n     * @throws    NullPointerException if {@code when} is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares two dates for equality.\n     * The result is {@code true} if and only if the argument is\n     * not {@code null} and is a {@code Date} object that\n     * represents the same point in time, to the millisecond, as this object.\n     * <p>\n     * Thus, two {@code Date} objects are equal if and only if the\n     * {@code getTime} method returns the same {@code long}\n     * value for both.\n     *\n     * @param   obj   the object to compare with.\n     * @return  {@code true} if the objects are the same;\n     *          {@code false} otherwise.\n     * @see     java.util.Date#getTime()\n     ",
    "links" : [ ]
  }, {
    "name" : " static final long getMillisOf(Date date)",
    "returnType" : "long",
    "comment" : "\n     * Returns the millisecond value of this {@code Date} object\n     * without affecting its internal state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(Date anotherDate)",
    "returnType" : "int",
    "comment" : "\n     * Compares two Dates for ordering.\n     *\n     * @param   anotherDate   the {@code Date} to be compared.\n     * @return  the value {@code 0} if the argument Date is equal to\n     *          this Date; a value less than {@code 0} if this Date\n     *          is before the Date argument; and a value greater than\n     *      {@code 0} if this Date is after the Date argument.\n     * @since   1.2\n     * @throws    NullPointerException if {@code anotherDate} is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code value for this object. The result is the\n     * exclusive OR of the two halves of the primitive {@code long}\n     * value returned by the {@link Date#getTime}\n     * method. That is, the hash code is the value of the expression:\n     * <blockquote><pre>{@code\n     * (int)(this.getTime()^(this.getTime() >>> 32))\n     * }</pre></blockquote>\n     *\n     * @return  a hash code value for this object.\n     ",
    "links" : [ "java.time.LocalDate#getTime" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Converts this {@code Date} object to a {@code String}\n     * of the form:\n     * <blockquote><pre>\n     * dow mon dd hh:mm:ss zzz yyyy</pre></blockquote>\n     * where:<ul>\n     * <li>{@code dow} is the day of the week ({@code Sun, Mon, Tue, Wed,\n     *     Thu, Fri, Sat}).\n     * <li>{@code mon} is the month ({@code Jan, Feb, Mar, Apr, May, Jun,\n     *     Jul, Aug, Sep, Oct, Nov, Dec}).\n     * <li>{@code dd} is the day of the month ({@code 01} through\n     *     {@code 31}), as two decimal digits.\n     * <li>{@code hh} is the hour of the day ({@code 00} through\n     *     {@code 23}), as two decimal digits.\n     * <li>{@code mm} is the minute within the hour ({@code 00} through\n     *     {@code 59}), as two decimal digits.\n     * <li>{@code ss} is the second within the minute ({@code 00} through\n     *     {@code 61}, as two decimal digits.\n     * <li>{@code zzz} is the time zone (and may reflect daylight saving\n     *     time). Standard time zone abbreviations include those\n     *     recognized by the method {@code parse}. If time zone\n     *     information is not available, then {@code zzz} is empty -\n     *     that is, it consists of no characters at all.\n     * <li>{@code yyyy} is the year, as four decimal digits.\n     * </ul>\n     *\n     * @return  a string representation of this date.\n     * @see     java.util.Date#toLocaleString()\n     * @see     java.util.Date#toGMTString()\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final StringBuilder convertToAbbr(StringBuilder sb, String name)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Converts the given name to its 3-letter abbreviation (e.g.,\n     * \"monday\" -> \"Mon\") and stored the abbreviation in the given\n     * {@code StringBuilder}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toLocaleString()",
    "returnType" : "String",
    "comment" : "\n     * Creates a string representation of this {@code Date} object in an\n     * implementation-dependent form. The intent is that the form should\n     * be familiar to the user of the Java application, wherever it may\n     * happen to be running. The intent is comparable to that of the\n     * \"{@code %c}\" format supported by the {@code strftime()}\n     * function of ISO&nbsp;C.\n     *\n     * @return  a string representation of this date, using the locale\n     *          conventions.\n     * @see     java.text.DateFormat\n     * @see     java.util.Date#toString()\n     * @see     java.util.Date#toGMTString()\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code DateFormat.format(Date date)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toGMTString()",
    "returnType" : "String",
    "comment" : "\n     * Creates a string representation of this {@code Date} object of\n     * the form:\n     * <blockquote><pre>\n     * d mon yyyy hh:mm:ss GMT</pre></blockquote>\n     * where:<ul>\n     * <li><i>d</i> is the day of the month ({@code 1} through {@code 31}),\n     *     as one or two decimal digits.\n     * <li><i>mon</i> is the month ({@code Jan, Feb, Mar, Apr, May, Jun, Jul,\n     *     Aug, Sep, Oct, Nov, Dec}).\n     * <li><i>yyyy</i> is the year, as four decimal digits.\n     * <li><i>hh</i> is the hour of the day ({@code 00} through {@code 23}),\n     *     as two decimal digits.\n     * <li><i>mm</i> is the minute within the hour ({@code 00} through\n     *     {@code 59}), as two decimal digits.\n     * <li><i>ss</i> is the second within the minute ({@code 00} through\n     *     {@code 61}), as two decimal digits.\n     * <li><i>GMT</i> is exactly the ASCII letters \"{@code GMT}\" to indicate\n     *     Greenwich Mean Time.\n     * </ul><p>\n     * The result does not depend on the local time zone.\n     *\n     * @return  a string representation of this date, using the Internet GMT\n     *          conventions.\n     * @see     java.text.DateFormat\n     * @see     java.util.Date#toString()\n     * @see     java.util.Date#toLocaleString()\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code DateFormat.format(Date date)}, using a\n     * GMT {@code TimeZone}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTimezoneOffset()",
    "returnType" : "int",
    "comment" : "\n     * Returns the offset, measured in minutes, for the local time zone\n     * relative to UTC that is appropriate for the time represented by\n     * this {@code Date} object.\n     * <p>\n     * For example, in Massachusetts, five time zones west of Greenwich:\n     * <blockquote><pre>\n     * new Date(96, 1, 14).getTimezoneOffset() returns 300</pre></blockquote>\n     * because on February 14, 1996, standard time (Eastern Standard Time)\n     * is in use, which is offset five hours from UTC; but:\n     * <blockquote><pre>\n     * new Date(96, 5, 1).getTimezoneOffset() returns 240</pre></blockquote>\n     * because on June 1, 1996, daylight saving time (Eastern Daylight Time)\n     * is in use, which is offset only four hours from UTC.<p>\n     * This method produces the same result as if it computed:\n     * <blockquote><pre>\n     * (this.getTime() - UTC(this.getYear(),\n     *                       this.getMonth(),\n     *                       this.getDate(),\n     *                       this.getHours(),\n     *                       this.getMinutes(),\n     *                       this.getSeconds())) / (60 * 1000)\n     * </pre></blockquote>\n     *\n     * @return  the time-zone offset, in minutes, for the current time zone.\n     * @see     java.util.Calendar#ZONE_OFFSET\n     * @see     java.util.Calendar#DST_OFFSET\n     * @see     java.util.TimeZone#getDefault\n     * @deprecated As of JDK version 1.1,\n     * replaced by {@code -(Calendar.get(Calendar.ZONE_OFFSET) +\n     * Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final BaseCalendar.Date getCalendarDate()",
    "returnType" : "BaseCalendar.Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final BaseCalendar.Date normalize()",
    "returnType" : "BaseCalendar.Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final BaseCalendar.Date normalize(BaseCalendar.Date date)",
    "returnType" : "BaseCalendar.Date",
    "comment" : " fastTime and the returned data are in sync upon return.",
    "links" : [ ]
  }, {
    "name" : "private static final BaseCalendar getCalendarSystem(int year)",
    "returnType" : "BaseCalendar",
    "comment" : "\n     * Returns the Gregorian or Julian calendar system to use with the\n     * given date. Use Gregorian from October 15, 1582.\n     *\n     * @param year normalized calendar year (not -1900)\n     * @return the CalendarSystem to use for the specified date\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final BaseCalendar getCalendarSystem(long utc)",
    "returnType" : "BaseCalendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final BaseCalendar getCalendarSystem(BaseCalendar.Date cdate)",
    "returnType" : "BaseCalendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final synchronized BaseCalendar getJulianCalendar()",
    "returnType" : "BaseCalendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Save the state of this object to a stream (i.e., serialize it).\n     *\n     * @serialData The value returned by {@code getTime()}\n     *             is emitted (long).  This represents the offset from\n     *             January 1, 1970, 00:00:00 GMT in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitute this object from a stream (i.e., deserialize it).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Date from(Instant instant)",
    "returnType" : "Date",
    "comment" : "\n     * Obtains an instance of {@code Date} from an {@code Instant} object.\n     * <p>\n     * {@code Instant} uses a precision of nanoseconds, whereas {@code Date}\n     * uses a precision of milliseconds.  The conversion will truncate any\n     * excess precision information as though the amount in nanoseconds was\n     * subject to integer division by one million.\n     * <p>\n     * {@code Instant} can store points on the time-line further in the future\n     * and further in the past than {@code Date}. In this scenario, this method\n     * will throw an exception.\n     *\n     * @param instant  the instant to convert\n     * @return a {@code Date} representing the same point on the time-line as\n     *  the provided instant\n     * @throws    NullPointerException if {@code instant} is null.\n     * @throws    IllegalArgumentException if the instant is too large to\n     *  represent as a {@code Date}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public Instant toInstant()",
    "returnType" : "Instant",
    "comment" : "\n     * Converts this {@code Date} object to an {@code Instant}.\n     * <p>\n     * The conversion creates an {@code Instant} that represents the same\n     * point on the time-line as this {@code Date}.\n     *\n     * @return an instant representing the same point on the time-line as\n     *  this {@code Date} object\n     * @since 1.8\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object clone()", "public static long UTC(int year, int month, int date, int hrs, int min, int sec)", "public static long parse(String s)", "public int getYear()", "public void setYear(int year)", "public int getMonth()", "public void setMonth(int month)", "public int getDate()", "public void setDate(int date)", "public int getDay()", "public int getHours()", "public void setHours(int hours)", "public int getMinutes()", "public void setMinutes(int minutes)", "public int getSeconds()", "public void setSeconds(int seconds)", "public long getTime()", "private final long getTimeImpl()", "public void setTime(long time)", "public boolean before(Date when)", "public boolean after(Date when)", "public boolean equals(Object obj)", " static final long getMillisOf(Date date)", "public int compareTo(Date anotherDate)", "public int hashCode()", "public String toString()", "private static final StringBuilder convertToAbbr(StringBuilder sb, String name)", "public String toLocaleString()", "public String toGMTString()", "public int getTimezoneOffset()", "private final BaseCalendar.Date getCalendarDate()", "private final BaseCalendar.Date normalize()", "private final BaseCalendar.Date normalize(BaseCalendar.Date date)", "private static final BaseCalendar getCalendarSystem(int year)", "private static final BaseCalendar getCalendarSystem(long utc)", "private static final BaseCalendar getCalendarSystem(BaseCalendar.Date cdate)", "private static final synchronized BaseCalendar getJulianCalendar()", "private void writeObject(ObjectOutputStream s) throws IOException", "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException", "public static Date from(Instant instant)", "public Instant toInstant()" ],
  "variableNames" : [ "gcal", "jcal", "fastTime", "cdate", "defaultCenturyStart", "serialVersionUID", "wtb", "ttb" ]
}