{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/WindowManager.java",
  "packageName" : "android.view",
  "className" : "LayoutParams",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "x",
    "type" : "int",
    "comment" : "\n         * X position for this window.  With the default gravity it is ignored.\n         * When using {@link Gravity#LEFT} or {@link Gravity#START} or {@link Gravity#RIGHT} or\n         * {@link Gravity#END} it provides an offset from the given edge.\n         ",
    "links" : [ "android.view.Gravity#LEFT", "android.view.Gravity#RIGHT", "android.view.Gravity#START", "android.view.Gravity#END" ]
  }, {
    "name" : "y",
    "type" : "int",
    "comment" : "\n         * Y position for this window.  With the default gravity it is ignored.\n         * When using {@link Gravity#TOP} or {@link Gravity#BOTTOM} it provides\n         * an offset from the given edge.\n         ",
    "links" : [ "android.view.Gravity#TOP", "android.view.Gravity#BOTTOM" ]
  }, {
    "name" : "horizontalWeight",
    "type" : "float",
    "comment" : "\n         * Indicates how much of the extra space will be allocated horizontally\n         * to the view associated with these LayoutParams. Specify 0 if the view\n         * should not be stretched. Otherwise the extra pixels will be pro-rated\n         * among all views whose weight is greater than 0.\n         ",
    "links" : [ ]
  }, {
    "name" : "verticalWeight",
    "type" : "float",
    "comment" : "\n         * Indicates how much of the extra space will be allocated vertically\n         * to the view associated with these LayoutParams. Specify 0 if the view\n         * should not be stretched. Otherwise the extra pixels will be pro-rated\n         * among all views whose weight is greater than 0.\n         ",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "int",
    "comment" : "\n         * The general type of window.  There are three main classes of\n         * window types:\n         * <ul>\n         * <li> <strong>Application windows</strong> (ranging from\n         * {@link #FIRST_APPLICATION_WINDOW} to\n         * {@link #LAST_APPLICATION_WINDOW}) are normal top-level application\n         * windows.  For these types of windows, the {@link #token} must be\n         * set to the token of the activity they are a part of (this will\n         * normally be done for you if {@link #token} is null).\n         * <li> <strong>Sub-windows</strong> (ranging from\n         * {@link #FIRST_SUB_WINDOW} to\n         * {@link #LAST_SUB_WINDOW}) are associated with another top-level\n         * window.  For these types of windows, the {@link #token} must be\n         * the token of the window it is attached to.\n         * <li> <strong>System windows</strong> (ranging from\n         * {@link #FIRST_SYSTEM_WINDOW} to\n         * {@link #LAST_SYSTEM_WINDOW}) are special types of windows for\n         * use by the system for specific purposes.  They should not normally\n         * be used by applications, and a special permission is required\n         * to use them.\n         * </ul>\n         *\n         * @see #TYPE_BASE_APPLICATION\n         * @see #TYPE_APPLICATION\n         * @see #TYPE_APPLICATION_STARTING\n         * @see #TYPE_DRAWN_APPLICATION\n         * @see #TYPE_APPLICATION_PANEL\n         * @see #TYPE_APPLICATION_MEDIA\n         * @see #TYPE_APPLICATION_SUB_PANEL\n         * @see #TYPE_APPLICATION_ATTACHED_DIALOG\n         * @see #TYPE_STATUS_BAR\n         * @see #TYPE_SEARCH_BAR\n         * @see #TYPE_PHONE\n         * @see #TYPE_SYSTEM_ALERT\n         * @see #TYPE_TOAST\n         * @see #TYPE_SYSTEM_OVERLAY\n         * @see #TYPE_PRIORITY_PHONE\n         * @see #TYPE_SYSTEM_DIALOG\n         * @see #TYPE_KEYGUARD_DIALOG\n         * @see #TYPE_SYSTEM_ERROR\n         * @see #TYPE_INPUT_METHOD\n         * @see #TYPE_INPUT_METHOD_DIALOG\n         ",
    "links" : [ "#FIRST_SUB_WINDOW", "#LAST_SYSTEM_WINDOW", "#token", "#LAST_APPLICATION_WINDOW", "#FIRST_SYSTEM_WINDOW", "#LAST_SUB_WINDOW", "#FIRST_APPLICATION_WINDOW" ]
  }, {
    "name" : "FIRST_APPLICATION_WINDOW",
    "type" : "int",
    "comment" : "\n         * Start of window types that represent normal application windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BASE_APPLICATION",
    "type" : "int",
    "comment" : "\n         * Window type: an application window that serves as the \"base\" window\n         * of the overall application; all other application windows will\n         * appear on top of it.\n         * In multiuser systems shows only on the owning user's window.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_APPLICATION",
    "type" : "int",
    "comment" : "\n         * Window type: a normal application window.  The {@link #token} must be\n         * an Activity token identifying who the window belongs to.\n         * In multiuser systems shows only on the owning user's window.\n         ",
    "links" : [ "#token" ]
  }, {
    "name" : "TYPE_APPLICATION_STARTING",
    "type" : "int",
    "comment" : "\n         * Window type: special application window that is displayed while the\n         * application is starting.  Not for use by applications themselves;\n         * this is used by the system to display something until the\n         * application can show its own windows.\n         * In multiuser systems shows on all users' windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DRAWN_APPLICATION",
    "type" : "int",
    "comment" : "\n         * Window type: a variation on TYPE_APPLICATION that ensures the window\n         * manager will wait for this window to be drawn before the app is shown.\n         * In multiuser systems shows only on the owning user's window.\n         ",
    "links" : [ ]
  }, {
    "name" : "LAST_APPLICATION_WINDOW",
    "type" : "int",
    "comment" : "\n         * End of types of application windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "FIRST_SUB_WINDOW",
    "type" : "int",
    "comment" : "\n         * Start of types of sub-windows.  The {@link #token} of these windows\n         * must be set to the window they are attached to.  These types of\n         * windows are kept next to their attached window in Z-order, and their\n         * coordinate space is relative to their attached window.\n         ",
    "links" : [ "#token" ]
  }, {
    "name" : "TYPE_APPLICATION_PANEL",
    "type" : "int",
    "comment" : "\n         * Window type: a panel on top of an application window.  These windows\n         * appear on top of their attached window.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_APPLICATION_MEDIA",
    "type" : "int",
    "comment" : "\n         * Window type: window for showing media (such as video).  These windows\n         * are displayed behind their attached window.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_APPLICATION_SUB_PANEL",
    "type" : "int",
    "comment" : "\n         * Window type: a sub-panel on top of an application window.  These\n         * windows are displayed on top their attached window and any\n         * {@link #TYPE_APPLICATION_PANEL} panels.\n         ",
    "links" : [ "#TYPE_APPLICATION_PANEL" ]
  }, {
    "name" : "TYPE_APPLICATION_ATTACHED_DIALOG",
    "type" : "int",
    "comment" : " Window type: like {@link #TYPE_APPLICATION_PANEL}, but layout\n         * of the window happens as that of a top-level window, <em>not</em>\n         * as a child of its container.\n         ",
    "links" : [ "#TYPE_APPLICATION_PANEL" ]
  }, {
    "name" : "TYPE_APPLICATION_MEDIA_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Window type: window for showing overlays on top of media windows.\n         * These windows are displayed between TYPE_APPLICATION_MEDIA and the\n         * application window.  They should be translucent to be useful.  This\n         * is a big ugly hack so:\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_APPLICATION_ABOVE_SUB_PANEL",
    "type" : "int",
    "comment" : "\n         * Window type: a above sub-panel on top of an application window and it's\n         * sub-panel windows. These windows are displayed on top of their attached window\n         * and any {@link #TYPE_APPLICATION_SUB_PANEL} panels.\n         * @hide\n         ",
    "links" : [ "#TYPE_APPLICATION_SUB_PANEL" ]
  }, {
    "name" : "LAST_SUB_WINDOW",
    "type" : "int",
    "comment" : "\n         * End of types of sub-windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "FIRST_SYSTEM_WINDOW",
    "type" : "int",
    "comment" : "\n         * Start of system-specific window types.  These are not normally\n         * created by applications.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_STATUS_BAR",
    "type" : "int",
    "comment" : "\n         * Window type: the status bar.  There can be only one status bar\n         * window; it is placed at the top of the screen, and all other\n         * windows are shifted down so they are below it.\n         * In multiuser systems shows on all users' windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SEARCH_BAR",
    "type" : "int",
    "comment" : "\n         * Window type: the search bar.  There can be only one search bar\n         * window; it is placed at the top of the screen.\n         * In multiuser systems shows on all users' windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PHONE",
    "type" : "int",
    "comment" : "\n         * Window type: phone.  These are non-application windows providing\n         * user interaction with the phone (in particular incoming calls).\n         * These windows are normally placed above all applications, but behind\n         * the status bar.\n         * In multiuser systems shows on all users' windows.\n         * @deprecated for non-system apps. Use {@link #TYPE_APPLICATION_OVERLAY} instead.\n         ",
    "links" : [ "#TYPE_APPLICATION_OVERLAY" ]
  }, {
    "name" : "TYPE_SYSTEM_ALERT",
    "type" : "int",
    "comment" : "\n         * Window type: system window, such as low power alert. These windows\n         * are always on top of application windows.\n         * In multiuser systems shows only on the owning user's window.\n         * @deprecated for non-system apps. Use {@link #TYPE_APPLICATION_OVERLAY} instead.\n         ",
    "links" : [ "#TYPE_APPLICATION_OVERLAY" ]
  }, {
    "name" : "TYPE_KEYGUARD",
    "type" : "int",
    "comment" : "\n         * Window type: keyguard window.\n         * In multiuser systems shows on all users' windows.\n         * @removed\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TOAST",
    "type" : "int",
    "comment" : "\n         * Window type: transient notifications.\n         * In multiuser systems shows only on the owning user's window.\n         * @deprecated for non-system apps. Use {@link #TYPE_APPLICATION_OVERLAY} instead.\n         ",
    "links" : [ "#TYPE_APPLICATION_OVERLAY" ]
  }, {
    "name" : "TYPE_SYSTEM_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Window type: system overlay windows, which need to be displayed\n         * on top of everything else.  These windows must not take input\n         * focus, or they will interfere with the keyguard.\n         * In multiuser systems shows only on the owning user's window.\n         * @deprecated for non-system apps. Use {@link #TYPE_APPLICATION_OVERLAY} instead.\n         ",
    "links" : [ "#TYPE_APPLICATION_OVERLAY" ]
  }, {
    "name" : "TYPE_PRIORITY_PHONE",
    "type" : "int",
    "comment" : "\n         * Window type: priority phone UI, which needs to be displayed even if\n         * the keyguard is active.  These windows must not take input\n         * focus, or they will interfere with the keyguard.\n         * In multiuser systems shows on all users' windows.\n         * @deprecated for non-system apps. Use {@link #TYPE_APPLICATION_OVERLAY} instead.\n         ",
    "links" : [ "#TYPE_APPLICATION_OVERLAY" ]
  }, {
    "name" : "TYPE_SYSTEM_DIALOG",
    "type" : "int",
    "comment" : "\n         * Window type: panel that slides out from the status bar\n         * In multiuser systems shows on all users' windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_KEYGUARD_DIALOG",
    "type" : "int",
    "comment" : "\n         * Window type: dialogs that the keyguard shows\n         * In multiuser systems shows on all users' windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SYSTEM_ERROR",
    "type" : "int",
    "comment" : "\n         * Window type: internal system error windows, appear on top of\n         * everything they can.\n         * In multiuser systems shows only on the owning user's window.\n         * @deprecated for non-system apps. Use {@link #TYPE_APPLICATION_OVERLAY} instead.\n         ",
    "links" : [ "#TYPE_APPLICATION_OVERLAY" ]
  }, {
    "name" : "TYPE_INPUT_METHOD",
    "type" : "int",
    "comment" : "\n         * Window type: internal input methods windows, which appear above\n         * the normal UI.  Application windows may be resized or panned to keep\n         * the input focus visible while this window is displayed.\n         * In multiuser systems shows only on the owning user's window.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INPUT_METHOD_DIALOG",
    "type" : "int",
    "comment" : "\n         * Window type: internal input methods dialog windows, which appear above\n         * the current input method window.\n         * In multiuser systems shows only on the owning user's window.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_WALLPAPER",
    "type" : "int",
    "comment" : "\n         * Window type: wallpaper window, placed behind any window that wants\n         * to sit on top of the wallpaper.\n         * In multiuser systems shows only on the owning user's window.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_STATUS_BAR_PANEL",
    "type" : "int",
    "comment" : "\n         * Window type: panel that slides out from over the status bar\n         * In multiuser systems shows on all users' windows.\n         *\n         * @removed\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SECURE_SYSTEM_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Window type: secure system overlay windows, which need to be displayed\n         * on top of everything else.  These windows must not take input\n         * focus, or they will interfere with the keyguard.\n         *\n         * This is exactly like {@link #TYPE_SYSTEM_OVERLAY} except that only the\n         * system itself is allowed to create these overlays.  Applications cannot\n         * obtain permission to create secure system overlays.\n         *\n         * In multiuser systems shows only on the owning user's window.\n         * @hide\n         ",
    "links" : [ "#TYPE_SYSTEM_OVERLAY" ]
  }, {
    "name" : "TYPE_DRAG",
    "type" : "int",
    "comment" : "\n         * Window type: the drag-and-drop pseudowindow.  There is only one\n         * drag layer (at most), and it is placed on top of all other windows.\n         * In multiuser systems shows only on the owning user's window.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_STATUS_BAR_SUB_PANEL",
    "type" : "int",
    "comment" : "\n         * Window type: panel that slides out from over the status bar\n         * In multiuser systems shows on all users' windows. These windows\n         * are displayed on top of the stauts bar and any {@link #TYPE_STATUS_BAR_PANEL}\n         * windows.\n         * @hide\n         ",
    "links" : [ "#TYPE_STATUS_BAR_PANEL" ]
  }, {
    "name" : "TYPE_POINTER",
    "type" : "int",
    "comment" : "\n         * Window type: (mouse) pointer\n         * In multiuser systems shows on all users' windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_NAVIGATION_BAR",
    "type" : "int",
    "comment" : "\n         * Window type: Navigation bar (when distinct from status bar)\n         * In multiuser systems shows on all users' windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VOLUME_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Window type: The volume level overlay/dialog shown when the user\n         * changes the system volume.\n         * In multiuser systems shows on all users' windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BOOT_PROGRESS",
    "type" : "int",
    "comment" : "\n         * Window type: The boot progress dialog, goes on top of everything\n         * in the world.\n         * In multiuser systems shows on all users' windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INPUT_CONSUMER",
    "type" : "int",
    "comment" : "\n         * Window type to consume input events when the systemUI bars are hidden.\n         * In multiuser systems shows on all users' windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_NAVIGATION_BAR_PANEL",
    "type" : "int",
    "comment" : "\n         * Window type: Navigation bar panel (when navigation bar is distinct from status bar)\n         * In multiuser systems shows on all users' windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DISPLAY_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Window type: Display overlay window.  Used to simulate secondary display devices.\n         * In multiuser systems shows on all users' windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MAGNIFICATION_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Window type: Magnification overlay window. Used to highlight the magnified\n         * portion of a display when accessibility magnification is enabled.\n         * In multiuser systems shows on all users' windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PRIVATE_PRESENTATION",
    "type" : "int",
    "comment" : "\n         * Window type: Window for Presentation on top of private\n         * virtual display.\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VOICE_INTERACTION",
    "type" : "int",
    "comment" : "\n         * Window type: Windows in the voice interaction layer.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ACCESSIBILITY_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Window type: Windows that are overlaid <em>only</em> by a connected {@link\n         * android.accessibilityservice.AccessibilityService} for interception of\n         * user interactions without changing the windows an accessibility service\n         * can introspect. In particular, an accessibility service can introspect\n         * only windows that a sighted user can interact with which is they can touch\n         * these windows or can type into these windows. For example, if there\n         * is a full screen accessibility overlay that is touchable, the windows\n         * below it will be introspectable by an accessibility service even though\n         * they are covered by a touchable window.\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "TYPE_VOICE_INTERACTION_STARTING",
    "type" : "int",
    "comment" : "\n         * Window type: Starting window for voice interaction layer.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DOCK_DIVIDER",
    "type" : "int",
    "comment" : "\n         * Window for displaying a handle used for resizing docked stacks. This window is owned\n         * by the system process.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_QS_DIALOG",
    "type" : "int",
    "comment" : "\n         * Window type: like {@link #TYPE_APPLICATION_ATTACHED_DIALOG}, but used\n         * by Quick Settings Tiles.\n         * @hide\n         ",
    "links" : [ "#TYPE_APPLICATION_ATTACHED_DIALOG" ]
  }, {
    "name" : "TYPE_SCREENSHOT",
    "type" : "int",
    "comment" : "\n         * Window type: shows directly above the keyguard. The layer is\n         * reserved for screenshot animation, region selection and UI.\n         * In multiuser systems shows only on the owning user's window.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PRESENTATION",
    "type" : "int",
    "comment" : "\n         * Window type: Window for Presentation on an external display.\n         * @see android.app.Presentation\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_APPLICATION_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Window type: Application overlay windows are displayed above all activity windows\n         * (types between {@link #FIRST_APPLICATION_WINDOW} and {@link #LAST_APPLICATION_WINDOW})\n         * but below critical system windows like the status bar or IME.\n         * <p>\n         * The system may change the position, size, or visibility of these windows at anytime\n         * to reduce visual clutter to the user and also manage resources.\n         * <p>\n         * Requires {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW} permission.\n         * <p>\n         * The system will adjust the importance of processes with this window type to reduce the\n         * chance of the low-memory-killer killing them.\n         * <p>\n         * In multi-user systems shows only on the owning user's screen.\n         ",
    "links" : [ "#LAST_APPLICATION_WINDOW", "android.Manifest.permission#SYSTEM_ALERT_WINDOW", "#FIRST_APPLICATION_WINDOW" ]
  }, {
    "name" : "TYPE_ACCESSIBILITY_MAGNIFICATION_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Window type: Window for adding accessibility window magnification above other windows.\n         * This will place the window in the overlay windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_NOTIFICATION_SHADE",
    "type" : "int",
    "comment" : "\n         * Window type: the notification shade and keyguard. There can be only one status bar\n         * window; it is placed at the top of the screen, and all other\n         * windows are shifted down so they are below it.\n         * In multiuser systems shows on all users' windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_STATUS_BAR_ADDITIONAL",
    "type" : "int",
    "comment" : "\n         * Window type: used to show the status bar in non conventional parts of the screen (i.e.\n         * the left or the bottom of the screen).\n         * In multiuser systems shows on all users' windows.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LAST_SYSTEM_WINDOW",
    "type" : "int",
    "comment" : "\n         * End of types of system windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "INVALID_WINDOW_TYPE",
    "type" : "int",
    "comment" : "\n         * @hide\n         * Used internally when there is no suitable type available.\n         ",
    "links" : [ ]
  }, {
    "name" : "MEMORY_TYPE_NORMAL",
    "type" : "int",
    "comment" : " @deprecated this is ignored, this value is set automatically when needed. ",
    "links" : [ ]
  }, {
    "name" : "MEMORY_TYPE_HARDWARE",
    "type" : "int",
    "comment" : " @deprecated this is ignored, this value is set automatically when needed. ",
    "links" : [ ]
  }, {
    "name" : "MEMORY_TYPE_GPU",
    "type" : "int",
    "comment" : " @deprecated this is ignored, this value is set automatically when needed. ",
    "links" : [ ]
  }, {
    "name" : "MEMORY_TYPE_PUSH_BUFFERS",
    "type" : "int",
    "comment" : " @deprecated this is ignored, this value is set automatically when needed. ",
    "links" : [ ]
  }, {
    "name" : "memoryType",
    "type" : "int",
    "comment" : "\n         * @deprecated this is ignored\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ALLOW_LOCK_WHILE_SCREEN_ON",
    "type" : "int",
    "comment" : " Window flag: as long as this window is visible to the user, allow\n         *  the lock screen to activate while the screen is on.\n         *  This can be used independently, or in combination with\n         *  {@link #FLAG_KEEP_SCREEN_ON} and/or {@link #FLAG_SHOW_WHEN_LOCKED} ",
    "links" : [ "#FLAG_KEEP_SCREEN_ON", "#FLAG_SHOW_WHEN_LOCKED" ]
  }, {
    "name" : "FLAG_DIM_BEHIND",
    "type" : "int",
    "comment" : " Window flag: everything behind this window will be dimmed.\n         *  Use {@link #dimAmount} to control the amount of dim. ",
    "links" : [ "#dimAmount" ]
  }, {
    "name" : "FLAG_BLUR_BEHIND",
    "type" : "int",
    "comment" : " Window flag: enable blur behind for this window. ",
    "links" : [ ]
  }, {
    "name" : "FLAG_NOT_FOCUSABLE",
    "type" : "int",
    "comment" : " Window flag: this window won't ever get key input focus, so the\n         * user can not send key or other button events to it.  Those will\n         * instead go to whatever focusable window is behind it.  This flag\n         * will also enable {@link #FLAG_NOT_TOUCH_MODAL} whether or not that\n         * is explicitly set.\n         *\n         * <p>Setting this flag also implies that the window will not need to\n         * interact with\n         * a soft input method, so it will be Z-ordered and positioned\n         * independently of any active input method (typically this means it\n         * gets Z-ordered on top of the input method, so it can use the full\n         * screen for its content and cover the input method if needed.  You\n         * can use {@link #FLAG_ALT_FOCUSABLE_IM} to modify this behavior. ",
    "links" : [ "#FLAG_NOT_TOUCH_MODAL", "#FLAG_ALT_FOCUSABLE_IM" ]
  }, {
    "name" : "FLAG_NOT_TOUCHABLE",
    "type" : "int",
    "comment" : "\n         * Window flag: this window can never receive touch events.\n         *\n         * <p>The intention of this flag is to leave the touch to be handled by some window below\n         * this window (in Z order).\n         *\n         * <p>Starting from Android {@link Build.VERSION_CODES#S}, for security reasons, touch\n         * events that pass through windows containing this flag (ie. are within the bounds of the\n         * window) will only be delivered to the touch-consuming window if one (or more) of the\n         * items below are true:\n         * <ol>\n         *   <li><b>Same UID</b>: This window belongs to the same UID that owns the touch-consuming\n         *   window.\n         *   <li><b>Trusted windows</b>: This window is trusted. Trusted windows include (but are\n         *   not limited to) accessibility windows ({@link #TYPE_ACCESSIBILITY_OVERLAY}), the IME\n         *   ({@link #TYPE_INPUT_METHOD}) and assistant windows (TYPE_VOICE_INTERACTION). Windows of\n         *   type {@link #TYPE_APPLICATION_OVERLAY} are <b>not</b> trusted, see below.\n         *   <li><b>Invisible windows</b>: This window is {@link View#GONE} or\n         *   {@link View#INVISIBLE}.\n         *   <li><b>Fully transparent windows</b>: This window has {@link LayoutParams#alpha} equal\n         *   to 0.\n         *   <li><b>One SAW window with enough transparency</b>: This window is of type {@link\n         *   #TYPE_APPLICATION_OVERLAY}, has {@link LayoutParams#alpha} below or equal to the\n         *   <a href=\"#MaximumOpacity\">maximum obscuring opacity</a> (see below) and it's the\n         *   <b>only</b> window of type {@link #TYPE_APPLICATION_OVERLAY} from this UID in the touch\n         *   path.\n         *   <li><b>Multiple SAW windows with enough transparency</b>: The multiple overlapping\n         *   {@link #TYPE_APPLICATION_OVERLAY} windows in the\n         *   touch path from this UID have a <b>combined obscuring opacity</b> below or equal to\n         *   the <a href=\"#MaximumOpacity\">maximum obscuring opacity</a>. See section\n         *   <a href=\"#ObscuringOpacity\">Combined obscuring opacity</a> below on how to compute this\n         *   value.\n         * </ol>\n         * <p>If none of these cases hold, the touch will not be delivered and a message will be\n         * logged to logcat.</p>\n         *\n         * <a name=\"MaximumOpacity\"></a>\n         * <h3>Maximum obscuring opacity</h3>\n         * <p>This value is <b>0.8</b>. Apps that want to gather this value from the system rather\n         * than hard-coding it might want to use {@link\n         * android.hardware.input.InputManager#getMaximumObscuringOpacityForTouch()}.</p>\n         *\n         * <a name=\"ObscuringOpacity\"></a>\n         * <h3>Combined obscuring opacity</h3>\n         *\n         * <p>The <b>combined obscuring opacity</b> of a set of windows is obtained by combining the\n         * opacity values of all windows in the set using the associative and commutative operation\n         * defined as:\n         * <pre>\n         * opacity({A,B}) = 1 - (1 - opacity(A))*(1 - opacity(B))\n         * </pre>\n         * <p>where {@code opacity(X)} is the {@link LayoutParams#alpha} of window X. So, for a set\n         * of windows {@code {W1, .., Wn}}, the combined obscuring opacity will be:\n         * <pre>\n         * opacity({W1, .., Wn}) = 1 - (1 - opacity(W1)) * ... * (1 - opacity(Wn))\n         * </pre>\n         ",
    "links" : [ "#TYPE_INPUT_METHOD", "Build.VERSION_CODES#S", "#alpha", "#TYPE_ACCESSIBILITY_OVERLAY", "android.view.View#INVISIBLE", "android.view.View#GONE", "#TYPE_APPLICATION_OVERLAY", "android.hardware.input.InputManager#getMaximumObscuringOpacityForTouch()" ]
  }, {
    "name" : "FLAG_NOT_TOUCH_MODAL",
    "type" : "int",
    "comment" : " Window flag: even when this window is focusable (its\n         * {@link #FLAG_NOT_FOCUSABLE} is not set), allow any pointer events\n         * outside of the window to be sent to the windows behind it.  Otherwise\n         * it will consume all pointer events itself, regardless of whether they\n         * are inside of the window. ",
    "links" : [ "#FLAG_NOT_FOCUSABLE" ]
  }, {
    "name" : "FLAG_TOUCHABLE_WHEN_WAKING",
    "type" : "int",
    "comment" : " Window flag: when set, if the device is asleep when the touch\n         * screen is pressed, you will receive this first touch event.  Usually\n         * the first touch event is consumed by the system since the user can\n         * not see what they are pressing on.\n         *\n         * @deprecated This flag has no effect.\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEEP_SCREEN_ON",
    "type" : "int",
    "comment" : " Window flag: as long as this window is visible to the user, keep\n         *  the device's screen turned on and bright. ",
    "links" : [ ]
  }, {
    "name" : "FLAG_LAYOUT_IN_SCREEN",
    "type" : "int",
    "comment" : "\n         * Window flag for attached windows: Place the window within the entire screen, ignoring\n         * any constraints from the parent window.\n         *\n         *  <p>Note: on displays that have a {@link DisplayCutout}, the window may be placed\n         *  such that it avoids the {@link DisplayCutout} area if necessary according to the\n         *  {@link #layoutInDisplayCutoutMode}.\n         ",
    "links" : [ "android.view.DisplayCutout", "#layoutInDisplayCutoutMode" ]
  }, {
    "name" : "FLAG_LAYOUT_NO_LIMITS",
    "type" : "int",
    "comment" : " Window flag: allow window to extend outside of the screen. ",
    "links" : [ ]
  }, {
    "name" : "FLAG_FULLSCREEN",
    "type" : "int",
    "comment" : "\n         * Window flag: hide all screen decorations (such as the status bar) while\n         * this window is displayed.  This allows the window to use the entire\n         * display space for itself -- the status bar will be hidden when\n         * an app window with this flag set is on the top layer. A fullscreen window\n         * will ignore a value of {@link #SOFT_INPUT_ADJUST_RESIZE} for the window's\n         * {@link #softInputMode} field; the window will stay fullscreen\n         * and will not resize.\n         *\n         * <p>This flag can be controlled in your theme through the\n         * {@link android.R.attr#windowFullscreen} attribute; this attribute\n         * is automatically set for you in the standard fullscreen themes\n         * such as {@link android.R.style#Theme_NoTitleBar_Fullscreen},\n         * {@link android.R.style#Theme_Black_NoTitleBar_Fullscreen},\n         * {@link android.R.style#Theme_Light_NoTitleBar_Fullscreen},\n         * {@link android.R.style#Theme_Holo_NoActionBar_Fullscreen},\n         * {@link android.R.style#Theme_Holo_Light_NoActionBar_Fullscreen},\n         * {@link android.R.style#Theme_DeviceDefault_NoActionBar_Fullscreen}, and\n         * {@link android.R.style#Theme_DeviceDefault_Light_NoActionBar_Fullscreen}.</p>\n         *\n         * @deprecated Use {@link WindowInsetsController#hide(int)} with {@link Type#statusBars()}\n         * instead.\n         ",
    "links" : [ "android.R.style#Theme_NoTitleBar_Fullscreen", "#SOFT_INPUT_ADJUST_RESIZE", "android.R.style#Theme_Black_NoTitleBar_Fullscreen", "android.R.style#Theme_Light_NoTitleBar_Fullscreen", "android.R.attr#windowFullscreen", "android.R.style#Theme_Holo_NoActionBar_Fullscreen", "android.view.WindowInsetsController#hide(int)", "#softInputMode", "android.R.style#Theme_DeviceDefault_NoActionBar_Fullscreen", "android.R.style#Theme_DeviceDefault_Light_NoActionBar_Fullscreen", "android.view.WindowInsets.Type#statusBars()", "android.R.style#Theme_Holo_Light_NoActionBar_Fullscreen" ]
  }, {
    "name" : "FLAG_FORCE_NOT_FULLSCREEN",
    "type" : "int",
    "comment" : "\n         * Window flag: override {@link #FLAG_FULLSCREEN} and force the\n         * screen decorations (such as the status bar) to be shown.\n         *\n         * @deprecated This value became API \"by accident\", and shouldn't be used by 3rd party\n         * applications.\n         ",
    "links" : [ "#FLAG_FULLSCREEN" ]
  }, {
    "name" : "FLAG_DITHER",
    "type" : "int",
    "comment" : " Window flag: turn on dithering when compositing this window to\n         *  the screen.\n         * @deprecated This flag is no longer used. ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SECURE",
    "type" : "int",
    "comment" : " Window flag: treat the content of the window as secure, preventing\n         * it from appearing in screenshots or from being viewed on non-secure\n         * displays.\n         *\n         * <p>See {@link android.view.Display#FLAG_SECURE} for more details about\n         * secure surfaces and secure displays.\n         ",
    "links" : [ "android.view.Display#FLAG_SECURE" ]
  }, {
    "name" : "FLAG_SCALED",
    "type" : "int",
    "comment" : " Window flag: a special mode where the layout parameters are used\n         * to perform scaling of the surface when it is composited to the\n         * screen. ",
    "links" : [ ]
  }, {
    "name" : "FLAG_IGNORE_CHEEK_PRESSES",
    "type" : "int",
    "comment" : " Window flag: intended for windows that will often be used when the user is\n         * holding the screen against their face, it will aggressively filter the event\n         * stream to prevent unintended presses in this situation that may not be\n         * desired for a particular window, when such an event stream is detected, the\n         * application will receive a CANCEL motion event to indicate this so applications\n         * can handle this accordingly by taking no action on the event\n         * until the finger is released. ",
    "links" : [ ]
  }, {
    "name" : "FLAG_LAYOUT_INSET_DECOR",
    "type" : "int",
    "comment" : "\n         * Window flag: a special option only for use in combination with\n         * {@link #FLAG_LAYOUT_IN_SCREEN}.  When requesting layout in the\n         * screen your window may appear on top of or behind screen decorations\n         * such as the status bar.  By also including this flag, the window\n         * manager will report the inset rectangle needed to ensure your\n         * content is not covered by screen decorations.  This flag is normally\n         * set for you by Window as described in {@link Window#setFlags}\n         *\n         * @deprecated Insets will always be delivered to your application.\n         ",
    "links" : [ "#FLAG_LAYOUT_IN_SCREEN", "android.view.Window#setFlags" ]
  }, {
    "name" : "FLAG_ALT_FOCUSABLE_IM",
    "type" : "int",
    "comment" : " Window flag: when set, inverts the input method focusability of the window.\n         *\n         * The effect of setting this flag depends on whether {@link #FLAG_NOT_FOCUSABLE} is set:\n         * <p>\n         * If {@link #FLAG_NOT_FOCUSABLE} is <em>not</em> set, i.e. when the window is focusable,\n         * setting this flag prevents this window from becoming the target of the input method.\n         * Consequently, it will <em>not</em> be able to interact with the input method,\n         * and will be layered above the input method (unless there is another input method\n         * target above it).\n         *\n         * <p>\n         * If {@link #FLAG_NOT_FOCUSABLE} <em>is</em> set, setting this flag requests for the window\n         * to be the input method target even though  the window is <em>not</em> focusable.\n         * Consequently, it will be layered below the input method.\n         * Note: Windows that set {@link #FLAG_NOT_FOCUSABLE} cannot interact with the input method,\n         * regardless of this flag.\n         ",
    "links" : [ "#FLAG_NOT_FOCUSABLE" ]
  }, {
    "name" : "FLAG_WATCH_OUTSIDE_TOUCH",
    "type" : "int",
    "comment" : " Window flag: if you have set {@link #FLAG_NOT_TOUCH_MODAL}, you\n         * can set this flag to receive a single special MotionEvent with\n         * the action\n         * {@link MotionEvent#ACTION_OUTSIDE MotionEvent.ACTION_OUTSIDE} for\n         * touches that occur outside of your window.  Note that you will not\n         * receive the full down/move/up gesture, only the location of the\n         * first down as an ACTION_OUTSIDE.\n         ",
    "links" : [ "android.view.MotionEvent#ACTION_OUTSIDE", "#FLAG_NOT_TOUCH_MODAL" ]
  }, {
    "name" : "FLAG_SHOW_WHEN_LOCKED",
    "type" : "int",
    "comment" : " Window flag: special flag to let windows be shown when the screen\n         * is locked. This will let application windows take precedence over\n         * key guard or any other lock screens. Can be used with\n         * {@link #FLAG_KEEP_SCREEN_ON} to turn screen on and display windows\n         * directly before showing the key guard window.  Can be used with\n         * {@link #FLAG_DISMISS_KEYGUARD} to automatically fully dismisss\n         * non-secure keyguards.  This flag only applies to the top-most\n         * full-screen window.\n         * @deprecated Use {@link android.R.attr#showWhenLocked} or\n         * {@link android.app.Activity#setShowWhenLocked(boolean)} instead to prevent an\n         * unintentional double life-cycle event.\n         ",
    "links" : [ "#FLAG_KEEP_SCREEN_ON", "#FLAG_DISMISS_KEYGUARD", "android.app.Activity#setShowWhenLocked(boolean)", "android.R.attr#showWhenLocked" ]
  }, {
    "name" : "FLAG_SHOW_WALLPAPER",
    "type" : "int",
    "comment" : " Window flag: ask that the system wallpaper be shown behind\n         * your window.  The window surface must be translucent to be able\n         * to actually see the wallpaper behind it; this flag just ensures\n         * that the wallpaper surface will be there if this window actually\n         * has translucent regions.\n         *\n         * <p>This flag can be controlled in your theme through the\n         * {@link android.R.attr#windowShowWallpaper} attribute; this attribute\n         * is automatically set for you in the standard wallpaper themes\n         * such as {@link android.R.style#Theme_Wallpaper},\n         * {@link android.R.style#Theme_Wallpaper_NoTitleBar},\n         * {@link android.R.style#Theme_Wallpaper_NoTitleBar_Fullscreen},\n         * {@link android.R.style#Theme_Holo_Wallpaper},\n         * {@link android.R.style#Theme_Holo_Wallpaper_NoTitleBar},\n         * {@link android.R.style#Theme_DeviceDefault_Wallpaper}, and\n         * {@link android.R.style#Theme_DeviceDefault_Wallpaper_NoTitleBar}.</p>\n         *\n         * <p> When this flag is set, all touch events sent to this window is also sent to the\n         * wallpaper, which is used to interact with live wallpapers. Check\n         * {@link LayoutParams#areWallpaperTouchEventsEnabled()}, which is set to {@code true}\n         * by default. When showing sensitive information on the window, if you want to disable\n         * sending the touch events to the wallpaper, use\n         * {@link LayoutParams#setWallpaperTouchEventsEnabled(boolean)}.</p>\n         ",
    "links" : [ "#setWallpaperTouchEventsEnabled(boolean)", "android.R.style#Theme_Holo_Wallpaper", "android.R.style#Theme_DeviceDefault_Wallpaper_NoTitleBar", "android.R.style#Theme_Wallpaper_NoTitleBar", "#areWallpaperTouchEventsEnabled()", "android.R.style#Theme_Holo_Wallpaper_NoTitleBar", "android.R.attr#windowShowWallpaper", "android.R.style#Theme_Wallpaper_NoTitleBar_Fullscreen", "android.R.style#Theme_Wallpaper", "android.R.style#Theme_DeviceDefault_Wallpaper" ]
  }, {
    "name" : "FLAG_TURN_SCREEN_ON",
    "type" : "int",
    "comment" : " Window flag: when set as a window is being added or made\n         * visible, once the window has been shown then the system will\n         * poke the power manager's user activity (as if the user had woken\n         * up the device) to turn the screen on.\n         * @deprecated Use {@link android.R.attr#turnScreenOn} or\n         * {@link android.app.Activity#setTurnScreenOn(boolean)} instead to prevent an\n         * unintentional double life-cycle event.\n         ",
    "links" : [ "android.app.Activity#setTurnScreenOn(boolean)", "android.R.attr#turnScreenOn" ]
  }, {
    "name" : "FLAG_DISMISS_KEYGUARD",
    "type" : "int",
    "comment" : "\n         * Window flag: when set the window will cause the keyguard to be\n         * dismissed, only if it is not a secure lock keyguard. Because such a\n         * keyguard is not needed for security, it will never re-appear if the\n         * user navigates to another window (in contrast to\n         * {@link #FLAG_SHOW_WHEN_LOCKED}, which will only temporarily hide both\n         * secure and non-secure keyguards but ensure they reappear when the\n         * user moves to another UI that doesn't hide them). If the keyguard is\n         * currently active and is secure (requires an unlock credential) than\n         * the user will still need to confirm it before seeing this window,\n         * unless {@link #FLAG_SHOW_WHEN_LOCKED} has also been set.\n         *\n         * @deprecated Use {@link #FLAG_SHOW_WHEN_LOCKED} or\n         *             {@link KeyguardManager#requestDismissKeyguard} instead.\n         *             Since keyguard was dismissed all the time as long as an\n         *             activity with this flag on its window was focused,\n         *             keyguard couldn't guard against unintentional touches on\n         *             the screen, which isn't desired.\n         ",
    "links" : [ "android.app.KeyguardManager#requestDismissKeyguard", "#FLAG_SHOW_WHEN_LOCKED" ]
  }, {
    "name" : "FLAG_SPLIT_TOUCH",
    "type" : "int",
    "comment" : " Window flag: when set the window will accept for touch events\n         * outside of its bounds to be sent to other windows that also\n         * support split touch.  When this flag is not set, the first pointer\n         * that goes down determines the window to which all subsequent touches\n         * go until all pointers go up.  When this flag is set, each pointer\n         * (not necessarily the first) that goes down determines the window\n         * to which all subsequent touches of that pointer will go until that\n         * pointer goes up thereby enabling touches with multiple pointers\n         * to be split across multiple windows.\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_HARDWARE_ACCELERATED",
    "type" : "int",
    "comment" : "\n         * <p>Indicates whether this window should be hardware accelerated.\n         * Requesting hardware acceleration does not guarantee it will happen.</p>\n         *\n         * <p>This flag can be controlled programmatically <em>only</em> to enable\n         * hardware acceleration. To enable hardware acceleration for a given\n         * window programmatically, do the following:</p>\n         *\n         * <pre>\n         * Window w = activity.getWindow(); // in Activity's onCreate() for instance\n         * w.setFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,\n         *         WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);\n         * </pre>\n         *\n         * <p>It is important to remember that this flag <strong>must</strong>\n         * be set before setting the content view of your activity or dialog.</p>\n         *\n         * <p>This flag cannot be used to disable hardware acceleration after it\n         * was enabled in your manifest using\n         * {@link android.R.attr#hardwareAccelerated}. If you need to selectively\n         * and programmatically disable hardware acceleration (for automated testing\n         * for instance), make sure it is turned off in your manifest and enable it\n         * on your activity or dialog when you need it instead, using the method\n         * described above.</p>\n         *\n         * <p>This flag is automatically set by the system if the\n         * {@link android.R.attr#hardwareAccelerated android:hardwareAccelerated}\n         * XML attribute is set to true on an activity or on the application.</p>\n         ",
    "links" : [ "android.R.attr#hardwareAccelerated" ]
  }, {
    "name" : "FLAG_LAYOUT_IN_OVERSCAN",
    "type" : "int",
    "comment" : "\n         * Window flag: allow window contents to extend in to the screen's\n         * overscan area, if there is one.  The window should still correctly\n         * position its contents to take the overscan area into account.\n         *\n         * <p>This flag can be controlled in your theme through the\n         * {@link android.R.attr#windowOverscan} attribute; this attribute\n         * is automatically set for you in the standard overscan themes\n         * such as\n         * {@link android.R.style#Theme_Holo_NoActionBar_Overscan},\n         * {@link android.R.style#Theme_Holo_Light_NoActionBar_Overscan},\n         * {@link android.R.style#Theme_DeviceDefault_NoActionBar_Overscan}, and\n         * {@link android.R.style#Theme_DeviceDefault_Light_NoActionBar_Overscan}.</p>\n         *\n         * <p>When this flag is enabled for a window, its normal content may be obscured\n         * to some degree by the overscan region of the display.  To ensure key parts of\n         * that content are visible to the user, you can use\n         * {@link View#setFitsSystemWindows(boolean) View.setFitsSystemWindows(boolean)}\n         * to set the point in the view hierarchy where the appropriate offsets should\n         * be applied.  (This can be done either by directly calling this function, using\n         * the {@link android.R.attr#fitsSystemWindows} attribute in your view hierarchy,\n         * or implementing you own {@link View#fitSystemWindows(android.graphics.Rect)\n         * View.fitSystemWindows(Rect)} method).</p>\n         *\n         * <p>This mechanism for positioning content elements is identical to its equivalent\n         * use with layout and {@link View#setSystemUiVisibility(int)\n         * View.setSystemUiVisibility(int)}; here is an example layout that will correctly\n         * position its UI elements with this overscan flag is set:</p>\n         *\n         * {@sample development/samples/ApiDemos/res/layout/overscan_activity.xml complete}\n         *\n         * @deprecated Overscan areas aren't set by any Android product anymore as of Android 11.\n         ",
    "links" : [ "android.R.attr#windowOverscan", "android.view.View#setFitsSystemWindows(boolean)", "android.view.View#fitSystemWindows(android.graphics.Rect)", "android.R.style#Theme_Holo_NoActionBar_Overscan", "android.R.style#Theme_Holo_Light_NoActionBar_Overscan", "android.R.attr#fitsSystemWindows", "android.R.style#Theme_DeviceDefault_NoActionBar_Overscan", "android.R.style#Theme_DeviceDefault_Light_NoActionBar_Overscan", "android.view.View#setSystemUiVisibility(int)" ]
  }, {
    "name" : "FLAG_TRANSLUCENT_STATUS",
    "type" : "int",
    "comment" : "\n         * Window flag: request a translucent status bar with minimal system-provided\n         * background protection.\n         *\n         * <p>This flag can be controlled in your theme through the\n         * {@link android.R.attr#windowTranslucentStatus} attribute; this attribute\n         * is automatically set for you in the standard translucent decor themes\n         * such as\n         * {@link android.R.style#Theme_Holo_NoActionBar_TranslucentDecor},\n         * {@link android.R.style#Theme_Holo_Light_NoActionBar_TranslucentDecor},\n         * {@link android.R.style#Theme_DeviceDefault_NoActionBar_TranslucentDecor}, and\n         * {@link android.R.style#Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor}.</p>\n         *\n         * <p>When this flag is enabled for a window, it automatically sets\n         * the system UI visibility flags {@link View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and\n         * {@link View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.</p>\n         *\n         * <p>Note: For devices that support\n         * {@link android.content.pm.PackageManager#FEATURE_AUTOMOTIVE} this flag may be ignored.\n         *\n         * @deprecated Use {@link Window#setStatusBarColor(int)} with a half-translucent color\n         * instead.\n         ",
    "links" : [ "android.R.style#Theme_Holo_Light_NoActionBar_TranslucentDecor", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "android.content.pm.PackageManager#FEATURE_AUTOMOTIVE", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE", "android.R.attr#windowTranslucentStatus", "android.R.style#Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor", "android.R.style#Theme_Holo_NoActionBar_TranslucentDecor", "android.R.style#Theme_DeviceDefault_NoActionBar_TranslucentDecor", "android.view.Window#setStatusBarColor(int)" ]
  }, {
    "name" : "FLAG_TRANSLUCENT_NAVIGATION",
    "type" : "int",
    "comment" : "\n         * Window flag: request a translucent navigation bar with minimal system-provided\n         * background protection.\n         *\n         * <p>This flag can be controlled in your theme through the\n         * {@link android.R.attr#windowTranslucentNavigation} attribute; this attribute\n         * is automatically set for you in the standard translucent decor themes\n         * such as\n         * {@link android.R.style#Theme_Holo_NoActionBar_TranslucentDecor},\n         * {@link android.R.style#Theme_Holo_Light_NoActionBar_TranslucentDecor},\n         * {@link android.R.style#Theme_DeviceDefault_NoActionBar_TranslucentDecor}, and\n         * {@link android.R.style#Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor}.</p>\n         *\n         * <p>When this flag is enabled for a window, it automatically sets\n         * the system UI visibility flags {@link View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and\n         * {@link View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.</p>\n         *\n         * <p>Note: For devices that support\n         * {@link android.content.pm.PackageManager#FEATURE_AUTOMOTIVE} this flag can be disabled\n         * by the car manufacturers.\n         *\n         * @deprecated Use {@link Window#setNavigationBarColor(int)} with a half-translucent color\n         * instead.\n         ",
    "links" : [ "android.R.style#Theme_Holo_Light_NoActionBar_TranslucentDecor", "android.content.pm.PackageManager#FEATURE_AUTOMOTIVE", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE", "android.R.attr#windowTranslucentNavigation", "android.R.style#Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor", "android.R.style#Theme_Holo_NoActionBar_TranslucentDecor", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION", "android.R.style#Theme_DeviceDefault_NoActionBar_TranslucentDecor", "android.view.Window#setNavigationBarColor(int)" ]
  }, {
    "name" : "FLAG_LOCAL_FOCUS_MODE",
    "type" : "int",
    "comment" : "\n         * Flag for a window in local focus mode.\n         * Window in local focus mode can control focus independent of window manager using\n         * {@link Window#setLocalFocus(boolean, boolean)}.\n         * Usually window in this mode will not get touch/key events from window manager, but will\n         * get events only via local injection using {@link Window#injectInputEvent(InputEvent)}.\n         ",
    "links" : [ "android.view.Window#setLocalFocus(boolean", "android.view.Window#injectInputEvent(InputEvent)" ]
  }, {
    "name" : "FLAG_SLIPPERY",
    "type" : "int",
    "comment" : " Window flag: Enable touches to slide out of a window into neighboring\n         * windows in mid-gesture instead of being captured for the duration of\n         * the gesture.\n         *\n         * This flag changes the behavior of touch focus for this window only.\n         * Touches can slide out of the window but they cannot necessarily slide\n         * back in (unless the other window with touch focus permits it).\n         *\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_LAYOUT_ATTACHED_IN_DECOR",
    "type" : "int",
    "comment" : "\n         * Window flag: When requesting layout with an attached window, the attached window may\n         * overlap with the screen decorations of the parent window such as the navigation bar. By\n         * including this flag, the window manager will layout the attached window within the decor\n         * frame of the parent window such that it doesn't overlap with screen decorations.\n         *\n         * @deprecated Use {@link #setFitInsetsTypes(int)} to determine whether the attached\n         * window will overlap with system bars.\n         ",
    "links" : [ "#setFitInsetsTypes(int)" ]
  }, {
    "name" : "FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS",
    "type" : "int",
    "comment" : "\n         * Flag indicating that this Window is responsible for drawing the background for the\n         * system bars. If set, the system bars are drawn with a transparent background and the\n         * corresponding areas in this window are filled with the colors specified in\n         * {@link Window#getStatusBarColor()} and {@link Window#getNavigationBarColor()}.\n         ",
    "links" : [ "android.view.Window#getStatusBarColor()", "android.view.Window#getNavigationBarColor()" ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "\n         * Various behavioral options/flags.  Default is none.\n         *\n         * @see #FLAG_ALLOW_LOCK_WHILE_SCREEN_ON\n         * @see #FLAG_DIM_BEHIND\n         * @see #FLAG_NOT_FOCUSABLE\n         * @see #FLAG_NOT_TOUCHABLE\n         * @see #FLAG_NOT_TOUCH_MODAL\n         * @see #FLAG_TOUCHABLE_WHEN_WAKING\n         * @see #FLAG_KEEP_SCREEN_ON\n         * @see #FLAG_LAYOUT_IN_SCREEN\n         * @see #FLAG_LAYOUT_NO_LIMITS\n         * @see #FLAG_FULLSCREEN\n         * @see #FLAG_FORCE_NOT_FULLSCREEN\n         * @see #FLAG_SECURE\n         * @see #FLAG_SCALED\n         * @see #FLAG_IGNORE_CHEEK_PRESSES\n         * @see #FLAG_LAYOUT_INSET_DECOR\n         * @see #FLAG_ALT_FOCUSABLE_IM\n         * @see #FLAG_WATCH_OUTSIDE_TOUCH\n         * @see #FLAG_SHOW_WHEN_LOCKED\n         * @see #FLAG_SHOW_WALLPAPER\n         * @see #FLAG_TURN_SCREEN_ON\n         * @see #FLAG_DISMISS_KEYGUARD\n         * @see #FLAG_SPLIT_TOUCH\n         * @see #FLAG_HARDWARE_ACCELERATED\n         * @see #FLAG_LOCAL_FOCUS_MODE\n         * @see #FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED",
    "type" : "int",
    "comment" : "\n         * In the system process, we globally do not use hardware acceleration\n         * because there are many threads doing UI there and they conflict.\n         * If certain parts of the UI that really do want to use hardware\n         * acceleration, this flag can be set to force it.  This is basically\n         * for the lock screen.  Anyone else using it, you are probably wrong.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_WANTS_OFFSET_NOTIFICATIONS",
    "type" : "int",
    "comment" : "\n         * By default, wallpapers are sent new offsets when the wallpaper is scrolled. Wallpapers\n         * may elect to skip these notifications if they are not doing anything productive with\n         * them (they do not affect the wallpaper scrolling operation) by calling\n         * {@link\n         * android.service.wallpaper.WallpaperService.Engine#setOffsetNotificationsEnabled(boolean)}.\n         *\n         * @hide\n         ",
    "links" : [ "android.service.wallpaper.WallpaperService.Engine#setOffsetNotificationsEnabled(boolean)" ]
  }, {
    "name" : "PRIVATE_FLAG_SYSTEM_APPLICATION_OVERLAY",
    "type" : "int",
    "comment" : "\n         * When set {@link LayoutParams#TYPE_APPLICATION_OVERLAY} windows will stay visible, even if\n         * {@link LayoutParams#SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS} is set for another\n         * visible window.\n         * @hide\n         ",
    "links" : [ "#SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS", "#TYPE_APPLICATION_OVERLAY" ]
  }, {
    "name" : "SYSTEM_FLAG_SHOW_FOR_ALL_USERS",
    "type" : "int",
    "comment" : " In a multiuser system if this flag is set and the owner is a system process then this\n         * window will appear on all user screens. This overrides the default behavior of window\n         * types that normally only appear on the owning user's screen. Refer to each window type\n         * to determine its default behavior.\n         *\n         * {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_UNRESTRICTED_GESTURE_EXCLUSION",
    "type" : "int",
    "comment" : "\n         * Flag to allow this window to have unrestricted gesture exclusion.\n         *\n         * @see View#setSystemGestureExclusionRects(List)\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_NO_MOVE_ANIMATION",
    "type" : "int",
    "comment" : "\n         * Never animate position changes of the window.\n         *\n         * @see android.R.styleable#Window_windowNoMoveAnimation\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_SYSTEM_ERROR",
    "type" : "int",
    "comment" : " Window flag: a special option intended for system dialogs.  When\n         * this flag is set, the window will demand focus unconditionally when\n         * it is created.\n         * {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_OPTIMIZE_MEASURE",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that the view hierarchy of the window can only be measured when\n         * necessary. If a window size can be known by the LayoutParams, we can use the size to\n         * relayout window, and we don't have to measure the view hierarchy before laying out the\n         * views. This reduces the chances to perform measure.\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_DISABLE_WALLPAPER_TOUCH_EVENTS",
    "type" : "int",
    "comment" : "\n         * Flag that prevents the wallpaper behind the current window from receiving touch events.\n         *\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_EDGE_TO_EDGE_ENFORCED",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that the window is forcibly to go edge-to-edge.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_LAYOUT_SIZE_EXTENDED_BY_CUTOUT",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that the window frame should be the requested frame adding the display\n         * cutout frame. This will only be applied if a specific size smaller than the parent frame\n         * is given, and the window is covering the display cutout. The extended frame will not be\n         * larger than the parent frame.\n         *\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_FORCE_DECOR_VIEW_VISIBILITY",
    "type" : "int",
    "comment" : "\n         * Flag that will make window ignore app visibility and instead depend purely on the decor\n         * view visibility for determining window visibility. This is used by recents to keep\n         * drawing after it launches an app.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_LAYOUT_CHILD_WINDOW_IN_PARENT_FRAME",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that this child window should always be laid-out in the parent\n         * frame regardless of the current windowing mode configuration.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_FORCE_DRAW_BAR_BACKGROUNDS",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that this window is always drawing the status bar background, no matter\n         * what the other flags are.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that this window needs Sustained Performance Mode if\n         * the device supports it.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_IMMERSIVE_CONFIRMATION_WINDOW",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that this window is a immersive mode confirmation window. The window\n         * should be ignored when calculating insets control. This is used for prompt window\n         * triggered by insets visibility changes. If it can take over the insets control, the\n         * visibility will change unexpectedly and the window may dismiss itself. Power button panic\n         * handling will be disabled when this window exists.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_OVERRIDE_LAYOUT_IN_DISPLAY_CUTOUT_MODE",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that the window is forcibly to layout under the display cutout.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that any window added by an application process that is of type\n         * {@link #TYPE_TOAST} or that requires\n         * {@link android.app.AppOpsManager#OP_SYSTEM_ALERT_WINDOW} permission should be hidden when\n         * this window is visible.\n         * @hide\n         ",
    "links" : [ "#TYPE_TOAST", "android.app.AppOpsManager#OP_SYSTEM_ALERT_WINDOW" ]
  }, {
    "name" : "PRIVATE_FLAG_IS_ROUNDED_CORNERS_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Indicates that this window is the rounded corners overlay present on some\n         * devices this means that it will be excluded from: screenshots,\n         * screen magnification, and mirroring.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_EXCLUDE_FROM_SCREEN_MAGNIFICATION",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that this window will be excluded while computing the magnifiable region\n         * on the un-scaled screen coordinate, which could avoid the cutout on the magnification\n         * border. It should be used for unmagnifiable overlays.\n         *\n         * </p><p>\n         * Note unlike {@link #PRIVATE_FLAG_NOT_MAGNIFIABLE}, this flag doesn't affect the ability\n         * of magnification. If you want to the window to be unmagnifiable and doesn't lead to the\n         * cutout, you need to combine both of them.\n         * </p><p>\n         * @hide\n         ",
    "links" : [ "#PRIVATE_FLAG_NOT_MAGNIFIABLE" ]
  }, {
    "name" : "PRIVATE_FLAG_NOT_MAGNIFIABLE",
    "type" : "int",
    "comment" : "\n         * Flag to prevent the window from being magnified by the accessibility magnifier.\n         *\n         * TODO(b/190623172): This is a temporary solution and need to find out another way instead.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_COLOR_SPACE_AGNOSTIC",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that the window is color space agnostic, and the color can be\n         * interpreted to any color space.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_CONSUME_IME_INSETS",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that the window consumes the insets of {@link Type#ime()}. This makes\n         * windows below this window unable to receive visible IME insets.\n         * @hide\n         ",
    "links" : [ "android.view.WindowInsets.Type#ime()" ]
  }, {
    "name" : "PRIVATE_FLAG_FIT_INSETS_CONTROLLED",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that the window is controlling how it fits window insets on its own.\n         * So we don't need to adjust its attributes for fitting window insets.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_TRUSTED_OVERLAY",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that the window is a trusted overlay.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_INSET_PARENT_FRAME_BY_IME",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that the parent frame of a window should be inset by IME.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_INTERCEPT_GLOBAL_DRAG_AND_DROP",
    "type" : "int",
    "comment" : "\n         * Flag to indicate that we want to intercept and handle global drag and drop for all users.\n         * This flag allows a window to considered for drag events even if not visible, and will\n         * receive drags for all active users in the system.\n         *\n         * Additional data is provided to windows with this flag, including the {@link ClipData}\n         * including all items with the {@link DragEvent#ACTION_DRAG_STARTED} event, and the\n         * actual drag surface with the {@link DragEvent#ACTION_DROP} event. If the window consumes,\n         * the drop, then the cleanup of the drag surface (provided as a part of\n         * {@link DragEvent#ACTION_DROP}) will be relinquished to the window.\n         * @hide\n         ",
    "links" : [ "android.content.ClipData", "android.view.DragEvent#ACTION_DRAG_STARTED", "android.view.DragEvent#ACTION_DROP" ]
  }, {
    "name" : "privateFlags",
    "type" : "int",
    "comment" : "\n         * Control flags that are private to the platform.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SOFT_INPUT_MASK_STATE",
    "type" : "int",
    "comment" : "\n         * Mask for {@link #softInputMode} of the bits that determine the\n         * desired visibility state of the soft input area for this window.\n         ",
    "links" : [ "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_STATE_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n         * Visibility state for {@link #softInputMode}: no state has been specified. The system may\n         * show or hide the software keyboard for better user experience when the window gains\n         * focus.\n         ",
    "links" : [ "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_STATE_UNCHANGED",
    "type" : "int",
    "comment" : "\n         * Visibility state for {@link #softInputMode}: please don't change the state of\n         * the soft input area.\n         ",
    "links" : [ "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_STATE_HIDDEN",
    "type" : "int",
    "comment" : "\n         * Visibility state for {@link #softInputMode}: please hide any soft input\n         * area when normally appropriate (when the user is navigating\n         * forward to your window).\n         ",
    "links" : [ "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_STATE_ALWAYS_HIDDEN",
    "type" : "int",
    "comment" : "\n         * Visibility state for {@link #softInputMode}: please always hide any\n         * soft input area when this window receives focus.\n         ",
    "links" : [ "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_STATE_VISIBLE",
    "type" : "int",
    "comment" : "\n         * Visibility state for {@link #softInputMode}: please show the soft\n         * input area when normally appropriate (when the user is navigating\n         * forward to your window).\n         *\n         * <p>Applications that target {@link android.os.Build.VERSION_CODES#P} and later, this flag\n         * is ignored unless there is a focused view that returns {@code true} from\n         * {@link View#onCheckIsTextEditor()} when the window is focused.</p>\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.view.View#onCheckIsTextEditor()", "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_STATE_ALWAYS_VISIBLE",
    "type" : "int",
    "comment" : "\n         * Visibility state for {@link #softInputMode}: please always make the\n         * soft input area visible when this window receives input focus.\n         *\n         * <p>Applications that target {@link android.os.Build.VERSION_CODES#P} and later, this flag\n         * is ignored unless there is a focused view that returns {@code true} from\n         * {@link View#onCheckIsTextEditor()} when the window is focused.</p>\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.view.View#onCheckIsTextEditor()", "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_MASK_ADJUST",
    "type" : "int",
    "comment" : "\n         * Mask for {@link #softInputMode} of the bits that determine the\n         * way that the window should be adjusted to accommodate the soft\n         * input window.\n         ",
    "links" : [ "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_ADJUST_UNSPECIFIED",
    "type" : "int",
    "comment" : " Adjustment option for {@link #softInputMode}: nothing specified.\n         * The system will try to pick one or\n         * the other depending on the contents of the window.\n         ",
    "links" : [ "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_ADJUST_RESIZE",
    "type" : "int",
    "comment" : " Adjustment option for {@link #softInputMode}: set to allow the\n         * window to be resized when an input\n         * method is shown, so that its contents are not covered by the input\n         * method.  This can <em>not</em> be combined with\n         * {@link #SOFT_INPUT_ADJUST_PAN}; if\n         * neither of these are set, then the system will try to pick one or\n         * the other depending on the contents of the window. If the window's\n         * layout parameter flags include {@link #FLAG_FULLSCREEN}, this\n         * value for {@link #softInputMode} will be ignored; the window will\n         * not resize, but will stay fullscreen.\n         *\n         * @deprecated Call {@link Window#setDecorFitsSystemWindows(boolean)} with {@code false} and\n         * install an {@link OnApplyWindowInsetsListener} on your root content view that fits insets\n         * of type {@link Type#ime()}.\n         ",
    "links" : [ "#SOFT_INPUT_ADJUST_PAN", "#FLAG_FULLSCREEN", "android.view.WindowInsets.Type#ime()", "#softInputMode", "android.view.Window#setDecorFitsSystemWindows(boolean)", "android.view.View.OnApplyWindowInsetsListener" ]
  }, {
    "name" : "SOFT_INPUT_ADJUST_PAN",
    "type" : "int",
    "comment" : " Adjustment option for {@link #softInputMode}: set to have a window\n         * pan when an input method is\n         * shown, so it doesn't need to deal with resizing but just panned\n         * by the framework to ensure the current input focus is visible.  This\n         * can <em>not</em> be combined with {@link #SOFT_INPUT_ADJUST_RESIZE}; if\n         * neither of these are set, then the system will try to pick one or\n         * the other depending on the contents of the window.\n         ",
    "links" : [ "#SOFT_INPUT_ADJUST_RESIZE", "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_ADJUST_NOTHING",
    "type" : "int",
    "comment" : " Adjustment option for {@link #softInputMode}: set to have a window\n         * not adjust for a shown input method.  The window will not be resized,\n         * and it will not be panned to make its focus visible.\n         ",
    "links" : [ "#softInputMode" ]
  }, {
    "name" : "SOFT_INPUT_IS_FORWARD_NAVIGATION",
    "type" : "int",
    "comment" : "\n         * Bit for {@link #softInputMode}: set when the user has navigated\n         * forward to the window.  This is normally set automatically for\n         * you by the system, though you may want to set it in certain cases\n         * when you are displaying a window yourself.  This flag will always\n         * be cleared automatically after the window is displayed.\n         ",
    "links" : [ "#softInputMode" ]
  }, {
    "name" : "softInputMode",
    "type" : "int",
    "comment" : "\n         * Desired operating mode for any soft input area.  May be any combination\n         * of:\n         *\n         * <ul>\n         * <li> One of the visibility states\n         * {@link #SOFT_INPUT_STATE_UNSPECIFIED}, {@link #SOFT_INPUT_STATE_UNCHANGED},\n         * {@link #SOFT_INPUT_STATE_HIDDEN}, {@link #SOFT_INPUT_STATE_ALWAYS_HIDDEN},\n         * {@link #SOFT_INPUT_STATE_VISIBLE}, or {@link #SOFT_INPUT_STATE_ALWAYS_VISIBLE}.\n         * <li> One of the adjustment options\n         * {@link #SOFT_INPUT_ADJUST_UNSPECIFIED}, {@link #SOFT_INPUT_ADJUST_RESIZE},\n         * {@link #SOFT_INPUT_ADJUST_PAN}, or {@link #SOFT_INPUT_ADJUST_NOTHING}.\n         * </ul>\n         *\n         *\n         * <p>This flag can be controlled in your theme through the\n         * {@link android.R.attr#windowSoftInputMode} attribute.</p>\n         ",
    "links" : [ "#SOFT_INPUT_ADJUST_PAN", "android.R.attr#windowSoftInputMode", "#SOFT_INPUT_ADJUST_NOTHING", "#SOFT_INPUT_STATE_UNSPECIFIED", "#SOFT_INPUT_ADJUST_RESIZE", "#SOFT_INPUT_STATE_HIDDEN", "#SOFT_INPUT_STATE_ALWAYS_HIDDEN", "#SOFT_INPUT_ADJUST_UNSPECIFIED", "#SOFT_INPUT_STATE_ALWAYS_VISIBLE", "#SOFT_INPUT_STATE_UNCHANGED", "#SOFT_INPUT_STATE_VISIBLE" ]
  }, {
    "name" : "gravity",
    "type" : "int",
    "comment" : "\n         * Placement of window within the screen as per {@link Gravity}.  Both\n         * {@link Gravity#apply(int, int, int, android.graphics.Rect, int, int,\n         * android.graphics.Rect) Gravity.apply} and\n         * {@link Gravity#applyDisplay(int, android.graphics.Rect, android.graphics.Rect)\n         * Gravity.applyDisplay} are used during window layout, with this value\n         * given as the desired gravity.  For example you can specify\n         * {@link Gravity#DISPLAY_CLIP_HORIZONTAL Gravity.DISPLAY_CLIP_HORIZONTAL} and\n         * {@link Gravity#DISPLAY_CLIP_VERTICAL Gravity.DISPLAY_CLIP_VERTICAL} here\n         * to control the behavior of\n         * {@link Gravity#applyDisplay(int, android.graphics.Rect, android.graphics.Rect)\n         * Gravity.applyDisplay}.\n         *\n         * @see Gravity\n         ",
    "links" : [ "android.view.Gravity", "android.view.Gravity#DISPLAY_CLIP_HORIZONTAL", "android.view.Gravity#applyDisplay(int", "android.view.Gravity#DISPLAY_CLIP_VERTICAL", "android.view.Gravity#apply(int" ]
  }, {
    "name" : "horizontalMargin",
    "type" : "float",
    "comment" : "\n         * The horizontal margin, as a percentage of the container's width,\n         * between the container and the widget.  See\n         * {@link Gravity#apply(int, int, int, android.graphics.Rect, int, int,\n         * android.graphics.Rect) Gravity.apply} for how this is used.  This\n         * field is added with {@link #x} to supply the <var>xAdj</var> parameter.\n         ",
    "links" : [ "#x", "android.view.Gravity#apply(int" ]
  }, {
    "name" : "verticalMargin",
    "type" : "float",
    "comment" : "\n         * The vertical margin, as a percentage of the container's height,\n         * between the container and the widget.  See\n         * {@link Gravity#apply(int, int, int, android.graphics.Rect, int, int,\n         * android.graphics.Rect) Gravity.apply} for how this is used.  This\n         * field is added with {@link #y} to supply the <var>yAdj</var> parameter.\n         ",
    "links" : [ "#y", "android.view.Gravity#apply(int" ]
  }, {
    "name" : "surfaceInsets",
    "type" : "Rect",
    "comment" : "\n         * Positive insets between the drawing surface and window content.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "hasManualSurfaceInsets",
    "type" : "boolean",
    "comment" : "\n         * Whether the surface insets have been manually set. When set to\n         * {@code false}, the view root will automatically determine the\n         * appropriate surface insets.\n         *\n         * @see #surfaceInsets\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "receiveInsetsIgnoringZOrder",
    "type" : "boolean",
    "comment" : "\n         * Whether we should use global insets state when report insets to the window. When set to\n         * {@code true}, all the insets will be reported to the window regardless of the z-order.\n         * Otherwise, only the insets above the given window will be reported.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "preservePreviousSurfaceInsets",
    "type" : "boolean",
    "comment" : "\n         * Whether the previous surface insets should be used vs. what is currently set. When set\n         * to {@code true}, the view root will ignore surfaces insets in this object and use what\n         * it currently has.\n         *\n         * @see #surfaceInsets\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "format",
    "type" : "int",
    "comment" : "\n         * The desired bitmap format.  May be one of the constants in\n         * {@link android.graphics.PixelFormat}. The choice of format\n         * might be overridden by {@link #setColorMode(int)}. Default is OPAQUE.\n         ",
    "links" : [ "#setColorMode(int)", "android.graphics.PixelFormat" ]
  }, {
    "name" : "windowAnimations",
    "type" : "int",
    "comment" : "\n         * A style resource defining the animations to use for this window.\n         * This must be a system resource; it can not be an application resource\n         * because the window manager does not have access to applications.\n         ",
    "links" : [ ]
  }, {
    "name" : "alpha",
    "type" : "float",
    "comment" : "\n         * An alpha value to apply to this entire window.\n         * An alpha of 1.0 means fully opaque and 0.0 means fully transparent\n         ",
    "links" : [ ]
  }, {
    "name" : "dimAmount",
    "type" : "float",
    "comment" : "\n         * When {@link #FLAG_DIM_BEHIND} is set, this is the amount of dimming\n         * to apply.  Range is from 1.0 for completely opaque to 0.0 for no\n         * dim.\n         ",
    "links" : [ "#FLAG_DIM_BEHIND" ]
  }, {
    "name" : "BRIGHTNESS_OVERRIDE_NONE",
    "type" : "float",
    "comment" : "\n         * Default value for {@link #screenBrightness} and {@link #buttonBrightness}\n         * indicating that the brightness value is not overridden for this window\n         * and normal brightness policy should be used.\n         ",
    "links" : [ "#buttonBrightness", "#screenBrightness" ]
  }, {
    "name" : "BRIGHTNESS_OVERRIDE_OFF",
    "type" : "float",
    "comment" : "\n         * Value for {@link #screenBrightness} and {@link #buttonBrightness}\n         * indicating that the screen or button backlight brightness should be set\n         * to the lowest value when this window is in front.\n         ",
    "links" : [ "#buttonBrightness", "#screenBrightness" ]
  }, {
    "name" : "BRIGHTNESS_OVERRIDE_FULL",
    "type" : "float",
    "comment" : "\n         * Value for {@link #screenBrightness} and {@link #buttonBrightness}\n         * indicating that the screen or button backlight brightness should be set\n         * to the hightest value when this window is in front.\n         ",
    "links" : [ "#buttonBrightness", "#screenBrightness" ]
  }, {
    "name" : "screenBrightness",
    "type" : "float",
    "comment" : "\n         * This can be used to override the user's preferred brightness of\n         * the screen.  A value of less than 0, the default, means to use the\n         * preferred screen brightness.  0 to 1 adjusts the brightness from\n         * dark to full bright.\n         ",
    "links" : [ ]
  }, {
    "name" : "buttonBrightness",
    "type" : "float",
    "comment" : "\n         * This can be used to override the standard behavior of the button and\n         * keyboard backlights.  A value of less than 0, the default, means to\n         * use the standard backlight behavior.  0 to 1 adjusts the brightness\n         * from dark to full bright.\n         ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_ANIMATION_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n         * Unspecified value for {@link #rotationAnimation} indicating\n         * a lack of preference.\n         * @hide\n         ",
    "links" : [ "#rotationAnimation" ]
  }, {
    "name" : "ROTATION_ANIMATION_ROTATE",
    "type" : "int",
    "comment" : "\n         * Value for {@link #rotationAnimation} which specifies that this\n         * window will visually rotate in or out following a rotation.\n         ",
    "links" : [ "#rotationAnimation" ]
  }, {
    "name" : "ROTATION_ANIMATION_CROSSFADE",
    "type" : "int",
    "comment" : "\n         * Value for {@link #rotationAnimation} which specifies that this\n         * window will fade in or out following a rotation.\n         ",
    "links" : [ "#rotationAnimation" ]
  }, {
    "name" : "ROTATION_ANIMATION_JUMPCUT",
    "type" : "int",
    "comment" : "\n         * Value for {@link #rotationAnimation} which specifies that this window\n         * will immediately disappear or appear following a rotation.\n         ",
    "links" : [ "#rotationAnimation" ]
  }, {
    "name" : "ROTATION_ANIMATION_SEAMLESS",
    "type" : "int",
    "comment" : "\n         * Value for {@link #rotationAnimation} to specify seamless rotation mode.\n         * This works like JUMPCUT but will fall back to CROSSFADE if rotation\n         * can't be applied without pausing the screen. For example, this is ideal\n         * for Camera apps which don't want the viewfinder contents to ever rotate\n         * or fade (and rather to be seamless) but also don't want ROTATION_ANIMATION_JUMPCUT\n         * during app transition scenarios where seamless rotation can't be applied.\n         ",
    "links" : [ "#rotationAnimation" ]
  }, {
    "name" : "rotationAnimation",
    "type" : "int",
    "comment" : "\n         * Define the exit and entry animations used on this window when the device is rotated.\n         * This only has an affect if the incoming and outgoing topmost\n         * opaque windows have the #FLAG_FULLSCREEN bit set and are not covered\n         * by other windows. All other situations default to the\n         * {@link #ROTATION_ANIMATION_ROTATE} behavior.\n         *\n         * @see #ROTATION_ANIMATION_ROTATE\n         * @see #ROTATION_ANIMATION_CROSSFADE\n         * @see #ROTATION_ANIMATION_JUMPCUT\n         * @see #ROTATION_ANIMATION_SEAMLESS\n         ",
    "links" : [ "#ROTATION_ANIMATION_ROTATE" ]
  }, {
    "name" : "token",
    "type" : "IBinder",
    "comment" : "\n         * Identifier for this window.  This will usually be filled in for\n         * you.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWindowContextToken",
    "type" : "IBinder",
    "comment" : "\n         * The token of {@link android.window.WindowContext}. It is usually a\n         * {@link android.app.WindowTokenClient} and is used for associating the params with an\n         * existing node in the WindowManager hierarchy and getting the corresponding\n         * {@link Configuration} and {@link android.content.res.Resources} values with updates\n         * propagated from the server side.\n         *\n         * @hide\n         ",
    "links" : [ "android.app.WindowTokenClient", "android.content.res.Configuration", "android.window.WindowContext", "android.content.res.Resources" ]
  }, {
    "name" : "packageName",
    "type" : "String",
    "comment" : "\n         * Name of the package owning this window.\n         ",
    "links" : [ ]
  }, {
    "name" : "screenOrientation",
    "type" : "int",
    "comment" : "\n         * Specific orientation value for a window.\n         * May be any of the same values allowed\n         * for {@link android.content.pm.ActivityInfo#screenOrientation}.\n         * If not set, a default value of\n         * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED}\n         * will be used.\n         ",
    "links" : [ "android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED", "android.content.pm.ActivityInfo#screenOrientation" ]
  }, {
    "name" : "preferredRefreshRate",
    "type" : "float",
    "comment" : "\n         * The preferred refresh rate for the window.\n         * <p>\n         * Before API 34, this must be one of the supported refresh rates obtained\n         * for the display(s) the window is on. The selected refresh rate will be\n         * applied to the display's default mode.\n         * <p>\n         * Starting API 34, this value is not limited to the supported refresh rates\n         * obtained from the display(s) for the window: it can be any refresh rate\n         * the window intends to run at. Any refresh rate can be provided as the\n         * preferred window refresh rate. The OS will select the refresh rate that\n         * best matches the {@link #preferredRefreshRate}.\n         * <p>\n         * Setting this value is the equivalent of calling {@link Surface#setFrameRate} with (\n         *     preferred_frame_rate,\n         *     {@link Surface#FRAME_RATE_COMPATIBILITY_DEFAULT},\n         *     {@link Surface#CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS}).\n         * This should be used in favor of {@link LayoutParams#preferredDisplayModeId} for\n         * applications that want to specify the refresh rate, but do not want to specify a\n         * preference for any other displayMode properties (e.g., resolution).\n         * <p>\n         * This value is ignored if {@link #preferredDisplayModeId} is set.\n         *\n         * @see Display#getSupportedRefreshRates()\n         ",
    "links" : [ "android.view.Surface#CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS", "#preferredDisplayModeId", "#preferredRefreshRate", "android.view.Surface#setFrameRate", "android.view.Surface#FRAME_RATE_COMPATIBILITY_DEFAULT" ]
  }, {
    "name" : "preferredDisplayModeId",
    "type" : "int",
    "comment" : "\n         * Id of the preferred display mode for the window.\n         * <p>\n         * This must be one of the supported modes obtained for the display(s) the window is on.\n         * A value of {@code 0} means no preference.\n         *\n         * @see Display#getSupportedModes()\n         * @see Display.Mode#getModeId()\n         ",
    "links" : [ ]
  }, {
    "name" : "preferredMinDisplayRefreshRate",
    "type" : "float",
    "comment" : "\n         * The min display refresh rate while the window is in focus.\n         *\n         * This value is ignored if {@link #preferredDisplayModeId} is set.\n         * @hide\n         ",
    "links" : [ "#preferredDisplayModeId" ]
  }, {
    "name" : "preferredMaxDisplayRefreshRate",
    "type" : "float",
    "comment" : "\n         * The max display refresh rate while the window is in focus.\n         *\n         * This value is ignored if {@link #preferredDisplayModeId} is set.\n         * @hide\n         ",
    "links" : [ "#preferredDisplayModeId" ]
  }, {
    "name" : "DISPLAY_FLAG_DISABLE_HDR_CONVERSION",
    "type" : "int",
    "comment" : " Indicates whether this window wants the HDR conversion is disabled. ",
    "links" : [ ]
  }, {
    "name" : "mDisplayFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "systemUiVisibility",
    "type" : "int",
    "comment" : "\n         * Control the visibility of the status bar.\n         *\n         * @see View#STATUS_BAR_VISIBLE\n         * @see View#STATUS_BAR_HIDDEN\n         *\n         * @deprecated SystemUiVisibility flags are deprecated. Use {@link WindowInsetsController}\n         * instead.\n         ",
    "links" : [ "android.view.WindowInsetsController" ]
  }, {
    "name" : "subtreeSystemUiVisibility",
    "type" : "int",
    "comment" : "\n         * @hide\n         * The ui visibility as requested by the views in this hierarchy.\n         * the combined value should be systemUiVisibility | subtreeSystemUiVisibility.\n         ",
    "links" : [ ]
  }, {
    "name" : "hasSystemUiListeners",
    "type" : "boolean",
    "comment" : "\n         * Get callbacks about the system ui visibility changing.\n         *\n         * TODO: Maybe there should be a bitfield of optional callbacks that we need.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "layoutInDisplayCutoutMode",
    "type" : "int",
    "comment" : "\n         * Controls how the window is laid out if there is a {@link DisplayCutout}.\n         *\n         * <p>\n         * Defaults to {@link #LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT}.\n         *\n         * @see #LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT\n         * @see #LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES\n         * @see #LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER\n         * @see #LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS\n         * @see DisplayCutout\n         * @see android.R.attr#windowLayoutInDisplayCutoutMode\n         *         android:windowLayoutInDisplayCutoutMode\n         ",
    "links" : [ "android.view.DisplayCutout", "#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT" ]
  }, {
    "name" : "LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT",
    "type" : "int",
    "comment" : "\n         * The window is allowed to extend into the {@link DisplayCutout} area, only if the\n         * {@link DisplayCutout} is fully contained within a system bar or the {@link DisplayCutout}\n         * is not deeper than 16 dp, but this depends on the OEM choice. Otherwise, the window is\n         * laid out such that it does not overlap with the {@link DisplayCutout} area.\n         *\n         * <p>\n         * In practice, this means that if the window did not set {@link #FLAG_FULLSCREEN} or\n         * {@link View#SYSTEM_UI_FLAG_FULLSCREEN}, it can extend into the cutout area in portrait\n         * if the cutout is at the top edge. Similarly for\n         * {@link View#SYSTEM_UI_FLAG_HIDE_NAVIGATION} and a cutout at the bottom of the screen.\n         * Otherwise (i.e. fullscreen or landscape) it is laid out such that it does not overlap the\n         * cutout area.\n         *\n         * <p>\n         * The usual precautions for not overlapping with the status and navigation bar are\n         * sufficient for ensuring that no important content overlaps with the DisplayCutout.\n         *\n         * <p>\n         * Note: OEMs can have an option to allow the window to always extend into the\n         * {@link DisplayCutout} area, no matter the cutout flag set, when the {@link DisplayCutout}\n         * is on the different side from system bars, only if the {@link DisplayCutout} overlaps at\n         * most 16dp with the windows.\n         * In such case, OEMs must provide an opt-in/out affordance for users.\n         *\n         * @see DisplayCutout\n         * @see WindowInsets\n         * @see #layoutInDisplayCutoutMode\n         * @see android.R.attr#windowLayoutInDisplayCutoutMode\n         *         android:windowLayoutInDisplayCutoutMode\n         ",
    "links" : [ "#FLAG_FULLSCREEN", "android.view.View#SYSTEM_UI_FLAG_FULLSCREEN", "android.view.DisplayCutout", "android.view.View#SYSTEM_UI_FLAG_HIDE_NAVIGATION" ]
  }, {
    "name" : "LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES",
    "type" : "int",
    "comment" : "\n         * The window is always allowed to extend into the {@link DisplayCutout} areas on the short\n         * edges of the screen.\n         *\n         * <p>\n         * The window will never extend into a {@link DisplayCutout} area on the long edges of the\n         * screen, unless the {@link DisplayCutout} is not deeper than 16 dp, but this depends on\n         * the OEM choice.\n         *\n         * <p>\n         * Note: OEMs can have an option to allow the window to extend into the\n         * {@link DisplayCutout} area on the long edge side, only if the cutout overlaps at most\n         * 16dp with the windows. In such case, OEMs must provide an opt-in/out affordance for\n         * users.\n         *\n         * <p>\n         * The window must make sure that no important content overlaps with the\n         * {@link DisplayCutout}.\n         *\n         * <p>\n         * In this mode, the window extends under cutouts on the short edge of the display in both\n         * portrait and landscape, regardless of whether the window is hiding the system bars:<br/>\n         * <img src=\"{@docRoot}reference/android/images/display_cutout/short_edge/fullscreen_top_no_letterbox.png\"\n         * height=\"720\"\n         * alt=\"Screenshot of a fullscreen activity on a display with a cutout at the top edge in\n         *         portrait, no letterbox is applied.\"/>\n         *\n         * <img src=\"{@docRoot}reference/android/images/display_cutout/short_edge/landscape_top_no_letterbox.png\"\n         * width=\"720\"\n         * alt=\"Screenshot of an activity on a display with a cutout at the top edge in landscape,\n         *         no letterbox is applied.\"/>\n         *\n         * <p>\n         * A cutout in the corner is considered to be on the short edge: <br/>\n         * <img src=\"{@docRoot}reference/android/images/display_cutout/short_edge/fullscreen_corner_no_letterbox.png\"\n         * height=\"720\"\n         * alt=\"Screenshot of a fullscreen activity on a display with a cutout in the corner in\n         *         portrait, no letterbox is applied.\"/>\n         *\n         * <p>\n         * On the other hand, should the cutout be on the long edge of the display, a letterbox will\n         * be applied such that the window does not extend into the cutout on either long edge:\n         * <br/>\n         * <img src=\"{@docRoot}reference/android/images/display_cutout/short_edge/portrait_side_letterbox.png\"\n         * height=\"720\"\n         * alt=\"Screenshot of an activity on a display with a cutout on the long edge in portrait,\n         *         letterbox is applied.\"/>\n         *\n         * <p>\n         * Note: Android might not allow the content view to overlap the system bars in view level.\n         * To override this behavior and allow content to be able to extend into the cutout area,\n         * call {@link Window#setDecorFitsSystemWindows(boolean)} with {@code false}.\n         *\n         * @see DisplayCutout\n         * @see WindowInsets#getDisplayCutout()\n         * @see #layoutInDisplayCutoutMode\n         * @see android.R.attr#windowLayoutInDisplayCutoutMode\n         *         android:windowLayoutInDisplayCutoutMode\n         ",
    "links" : [ "android.view.DisplayCutout", "android.view.Window#setDecorFitsSystemWindows(boolean)" ]
  }, {
    "name" : "LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER",
    "type" : "int",
    "comment" : "\n         * The window is never allowed to overlap with the DisplayCutout area.\n         *\n         * <p>\n         * This should be used with windows that transiently set\n         * {@link View#SYSTEM_UI_FLAG_FULLSCREEN} or {@link View#SYSTEM_UI_FLAG_HIDE_NAVIGATION}\n         * to avoid a relayout of the window when the respective flag is set or cleared.\n         *\n         * @see DisplayCutout\n         * @see #layoutInDisplayCutoutMode\n         * @see android.R.attr#windowLayoutInDisplayCutoutMode\n         *         android:windowLayoutInDisplayCutoutMode\n         ",
    "links" : [ "android.view.View#SYSTEM_UI_FLAG_FULLSCREEN", "android.view.View#SYSTEM_UI_FLAG_HIDE_NAVIGATION" ]
  }, {
    "name" : "LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS",
    "type" : "int",
    "comment" : "\n         * The window is always allowed to extend into the {@link DisplayCutout} areas on the all\n         * edges of the screen.\n         *\n         * <p>\n         * The window must make sure that no important content overlaps with the\n         * {@link DisplayCutout}.\n         *\n         * <p>\n         * In this mode, the window extends under cutouts on the all edges of the display in both\n         * portrait and landscape, regardless of whether the window is hiding the system bars.\n         *\n         * <p>\n         * Note: Android might not allow the content view to overlap the system bars in view level.\n         * To override this behavior and allow content to be able to extend into the cutout area,\n         * call {@link Window#setDecorFitsSystemWindows(boolean)} with {@code false}.\n         *\n         * @see DisplayCutout\n         * @see WindowInsets#getDisplayCutout()\n         * @see #layoutInDisplayCutoutMode\n         * @see android.R.attr#windowLayoutInDisplayCutoutMode\n         *         android:windowLayoutInDisplayCutoutMode\n         ",
    "links" : [ "android.view.DisplayCutout", "android.view.Window#setDecorFitsSystemWindows(boolean)" ]
  }, {
    "name" : "INPUT_FEATURE_NO_INPUT_CHANNEL",
    "type" : "int",
    "comment" : "\n         * Does not construct an input channel for this window.  The channel will therefore\n         * be incapable of receiving input.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INPUT_FEATURE_DISABLE_USER_ACTIVITY",
    "type" : "int",
    "comment" : "\n         * When this window has focus, does not call user activity for all input events so\n         * the application will have to do it itself.  Should only be used by\n         * the keyguard and phone app.\n         * <p>\n         * Should only be used by the keyguard and phone app.\n         * </p>\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INPUT_FEATURE_SPY",
    "type" : "int",
    "comment" : "\n         * An input spy window. This window will receive all pointer events within its touchable\n         * area, but will not stop events from being sent to other windows below it in z-order.\n         * An input event will be dispatched to all spy windows above the top non-spy window at the\n         * event's coordinates.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INPUT_FEATURE_SENSITIVE_FOR_PRIVACY",
    "type" : "int",
    "comment" : "\n         * Input feature used to indicate that this window is privacy sensitive. This may be used\n         * to redact input interactions from tracing or screen mirroring.\n         * <p>\n         * A window that uses {@link LayoutParams#FLAG_SECURE} will automatically be treated as\n         * a sensitive for input tracing, but this input feature can be set on windows that don't\n         * set FLAG_SECURE. The tracing configuration will determine how these sensitive events\n         * are eventually traced.\n         * <p>\n         * This can only be set for trusted system overlays.\n         * <p>\n         * Note: Input tracing is only available on userdebug and eng builds.\n         *\n         * @hide\n         ",
    "links" : [ "#FLAG_SECURE" ]
  }, {
    "name" : "inputFeatures",
    "type" : "int",
    "comment" : "\n         * Control a set of features of the input subsystem that are exposed to the app process.\n         *\n         * WARNING: Do NOT use {@link android.os.InputConfig} flags! This must be set to flag values\n         * included in {@link InputFeatureFlags}.\n         *\n         * @hide\n         * @see InputFeatureFlags\n         ",
    "links" : [ "InputFeatureFlags", "android.os.InputConfig" ]
  }, {
    "name" : "userActivityTimeout",
    "type" : "long",
    "comment" : "\n         * Sets the number of milliseconds before the user activity timeout occurs\n         * when this window has focus.  A value of -1 uses the standard timeout.\n         * A value of 0 uses the minimum support display timeout.\n         * <p>\n         * This property can only be used to reduce the user specified display timeout;\n         * it can never make the timeout longer than it normally would be.\n         * </p><p>\n         * Should only be used by the keyguard and phone app.\n         * </p>\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "accessibilityIdOfAnchor",
    "type" : "long",
    "comment" : "\n         * For windows with an anchor (e.g. PopupWindow), keeps track of the View that anchors the\n         * window.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "accessibilityTitle",
    "type" : "CharSequence",
    "comment" : "\n         * The window title isn't kept in sync with what is displayed in the title bar, so we\n         * separately track the currently shown title to provide to accessibility.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "hideTimeoutMilliseconds",
    "type" : "long",
    "comment" : "\n         * Sets a timeout in milliseconds before which the window will be hidden\n         * by the window manager. Useful for transient notifications like toasts\n         * so we don't have to rely on client cooperation to ensure the window\n         * is hidden. Must be specified at window creation time. Note that apps\n         * are not prepared to handle their windows being removed without their\n         * explicit request and may try to interact with the removed window\n         * resulting in undefined behavior and crashes. Therefore, we do hide\n         * such windows to prevent them from overlaying other apps.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "preferMinimalPostProcessing",
    "type" : "boolean",
    "comment" : "\n         * Indicates whether this window wants the connected display to do minimal post processing\n         * on the produced image or video frames. This will only be requested if the window is\n         * visible on the screen.\n         *\n         * <p>This setting should be used when low latency has a higher priority than image\n         * enhancement processing (e.g. for games or video conferencing).\n         *\n         * <p>If the Display sink is connected via HDMI, the device will begin to send infoframes\n         * with Auto Low Latency Mode enabled and Game Content Type. This will switch the connected\n         * display to a minimal image processing mode (if available), which reduces latency,\n         * improving the user experience for gaming or video conferencing applications. For more\n         * information, see HDMI 2.1 specification.\n         *\n         * <p>If the Display sink has an internal connection or uses some other protocol than HDMI,\n         * effects may be similar but implementation-defined.\n         *\n         * <p>The ability to switch to a mode with minimal post proessing may be disabled by a user\n         * setting in the system settings menu. In that case, this field is ignored and the display\n         * will remain in its current mode.\n         *\n         * @see android.content.pm.ActivityInfo#FLAG_PREFER_MINIMAL_POST_PROCESSING\n         * @see android.view.Display#isMinimalPostProcessingSupported\n         * @see android.view.Window#setPreferMinimalPostProcessing\n         ",
    "links" : [ ]
  }, {
    "name" : "mBlurBehindRadius",
    "type" : "int",
    "comment" : "\n         * Specifies the amount of blur to be used to blur everything behind the window.\n         * The effect is similar to the dimAmount, but instead of dimming, the content behind\n         * will be blurred.\n         *\n         * The blur behind radius range starts at 0, which means no blur, and increases until 150\n         * for the densest blur.\n         *\n         * @see #setBlurBehindRadius\n         ",
    "links" : [ ]
  }, {
    "name" : "mColorMode",
    "type" : "int",
    "comment" : "\n         * The color mode requested by this window. The target display may\n         * not be able to honor the request. When the color mode is not set\n         * to {@link ActivityInfo#COLOR_MODE_DEFAULT}, it might override the\n         * pixel format specified in {@link #format}.\n         *\n         * @hide\n         ",
    "links" : [ "#format", "android.content.pm.ActivityInfo#COLOR_MODE_DEFAULT" ]
  }, {
    "name" : "mDesiredHdrHeadroom",
    "type" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mFrameRateBoostOnTouch",
    "type" : "boolean",
    "comment" : "\n         * For variable refresh rate project.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsFrameRatePowerSavingsBalanced",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sToolkitSetFrameRateReadOnlyFlagValue",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "insetsFlags",
    "type" : "InsetsFlags",
    "comment" : "\n         * Carries the requests about {@link WindowInsetsController.Appearance} and\n         * {@link WindowInsetsController.Behavior} to the system windows which can produce insets.\n         *\n         * @hide\n         ",
    "links" : [ "WindowInsetsController.Behavior", "WindowInsetsController.Appearance" ]
  }, {
    "name" : "mFitInsetsTypes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFitInsetsSides",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFitInsetsIgnoringVisibility",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "providedInsets",
    "type" : "InsetsFrameProvider[]",
    "comment" : "\n         * If set, the specified insets types will be provided by the window and the insets frame\n         * will be calculated based on the provider's parameters. The insets types and the array\n         * should not be modified after the window is added. If multiple layout parameters are\n         * provided for different rotations in {@link LayoutParams#paramsForRotation}, the types in\n         * the providedInsets array should be the same in all rotations, including the base one.\n         * All other params can be adjusted at runtime.\n         * See {@link InsetsFrameProvider}.\n         *\n         * @hide\n         ",
    "links" : [ "#paramsForRotation", "android.view.InsetsFrameProvider" ]
  }, {
    "name" : "forciblyShownTypes",
    "type" : "int",
    "comment" : "\n         * Specifies which {@link InsetsType}s should be forcibly shown. The types shown by this\n         * method won't affect the app's layout. This field only takes effects if the caller has\n         * {@link android.Manifest.permission#STATUS_BAR_SERVICE} or the caller has the same uid as\n         * the recents component.\n         *\n         * @hide\n         ",
    "links" : [ "android.Manifest.permission#STATUS_BAR_SERVICE", "android.view.WindowInsets.Type.InsetsType" ]
  }, {
    "name" : "paramsForRotation",
    "type" : "LayoutParams[]",
    "comment" : "\n         * {@link LayoutParams} to be applied to the window when layout with a assigned rotation.\n         * This will make layout during rotation change smoothly.\n         *\n         * @hide\n         ",
    "links" : [ "LayoutParams" ]
  }, {
    "name" : "mWallpaperTouchEventsEnabled",
    "type" : "boolean",
    "comment" : "\n         * Specifies whether to send touch events to wallpaper, if the window shows wallpaper in the\n         * background. By default, this is set to {@code true} i.e. if any window shows wallpaper\n         * in the background, the wallpaper will receive touch events, unless specified otherwise.\n         *\n         * @see android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER\n         ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<LayoutParams>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAGS_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIM_AMOUNT_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TITLE_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALPHA_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEMORY_TYPE_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOFT_INPUT_MODE_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_ORIENTATION_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROTATION_ANIMATION_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUTTON_BRIGHTNESS_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_UI_VISIBILITY_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_UI_LISTENER_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "INPUT_FEATURES_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAGS_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "USER_ACTIVITY_TIMEOUT_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "TRANSLUCENT_FLAGS_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "SURFACE_INSETS_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PREFERRED_REFRESH_RATE_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_FLAGS_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PREFERRED_DISPLAY_MODE_ID",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_ANCHOR_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_TITLE_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "COLOR_MODE_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "INSET_FLAGS_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "MINIMAL_POST_PROCESSING_PREFERENCE_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "BLUR_BEHIND_RADIUS_CHANGED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PREFERRED_MIN_DISPLAY_REFRESH_RATE",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PREFERRED_MAX_DISPLAY_REFRESH_RATE",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "mCompatibilityParamsBackup",
    "type" : "int[]",
    "comment" : " internal buffer to backup/restore parameters under compatibility mode.",
    "links" : [ ]
  }, {
    "name" : "mTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isSystemAlertWindowType(@WindowType int type)",
    "returnType" : "boolean",
    "comment" : "\n         * Return true if the window type is an alert window.\n         *\n         * @param type The window type.\n         * @return If the window type is an alert window.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean mayUseInputMethod(int flags)",
    "returnType" : "boolean",
    "comment" : "\n         * Given a particular set of window manager flags, determine whether\n         * such a window may be a target for an input method when it has\n         * focus.  In particular, this checks the\n         * {@link #FLAG_NOT_FOCUSABLE} and {@link #FLAG_ALT_FOCUSABLE_IM}\n         * flags and returns true if the combination of the two corresponds\n         * to a window that can use the input method.\n         *\n         * @param flags The current window manager flags.\n         *\n         * @return Returns {@code true} if a window with the given flags would be able to\n         * use the input method, {@code false} if not.\n         ",
    "links" : [ "#FLAG_ALT_FOCUSABLE_IM", "#FLAG_NOT_FOCUSABLE" ]
  }, {
    "name" : "public void setFitInsetsTypes(@InsetsType int types)",
    "returnType" : "void",
    "comment" : "\n         * Specifies types of insets that this window should avoid overlapping during layout.\n         *\n         * @param types which {@link WindowInsets.Type}s of insets that this window should avoid.\n         *              The initial value of this object includes all system bars.\n         ",
    "links" : [ "WindowInsets.Type" ]
  }, {
    "name" : "public void setFitInsetsSides(@InsetsSide int sides)",
    "returnType" : "void",
    "comment" : "\n         * Specifies sides of insets that this window should avoid overlapping during layout.\n         *\n         * @param sides which sides that this window should avoid overlapping with the types\n         *              specified. The initial value of this object includes all sides.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setFitInsetsIgnoringVisibility(boolean ignore)",
    "returnType" : "void",
    "comment" : "\n         * Specifies if this window should fit the window insets no matter they are visible or not.\n         *\n         * @param ignore if true, this window will fit the given types even if they are not visible.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setTrustedOverlay()",
    "returnType" : "void",
    "comment" : "\n         * Specifies that the window should be considered a trusted system overlay. Trusted system\n         * overlays are ignored when considering whether windows are obscured during input\n         * dispatch. Requires the {@link android.Manifest.permission#INTERNAL_SYSTEM_WINDOW}\n         * permission.\n         *\n         * {@see android.view.MotionEvent#FLAG_WINDOW_IS_OBSCURED}\n         * {@see android.view.MotionEvent#FLAG_WINDOW_IS_PARTIALLY_OBSCURED}\n         * @hide\n         ",
    "links" : [ "android.Manifest.permission#INTERNAL_SYSTEM_WINDOW" ]
  }, {
    "name" : "public void setSystemApplicationOverlay(boolean isSystemApplicationOverlay)",
    "returnType" : "void",
    "comment" : "\n         * When set on {@link LayoutParams#TYPE_APPLICATION_OVERLAY} windows they stay visible,\n         * even if {@link LayoutParams#SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS} is set for\n         * another visible window.\n         * @hide\n         ",
    "links" : [ "#SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS", "#TYPE_APPLICATION_OVERLAY" ]
  }, {
    "name" : "public boolean isSystemApplicationOverlay()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns if this window is marked as being a system application overlay.\n         * @see LayoutParams#setSystemApplicationOverlay(boolean)\n         *\n         * <p>Note: the owner of the window must hold\n         * {@link android.Manifest.permission#SYSTEM_APPLICATION_OVERLAY} for this to have any\n         * effect.\n         * @hide\n         ",
    "links" : [ "android.Manifest.permission#SYSTEM_APPLICATION_OVERLAY" ]
  }, {
    "name" : "public void setWallpaperTouchEventsEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "\n         * Set whether sending touch events to the system wallpaper (which can be provided by a\n         * third-party application) should be enabled for windows that show wallpaper in\n         * background. By default, this is set to {@code true}.\n         * Check {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER} for more\n         * information on showing system wallpaper behind the window.\n         *\n         * @param enable whether to enable sending touch events to the system wallpaper.\n         ",
    "links" : [ "android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER" ]
  }, {
    "name" : "public boolean areWallpaperTouchEventsEnabled()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether sending touch events to the system wallpaper (which can be provided by a\n         * third-party application) is enabled for windows that show wallpaper in background.\n         * Check {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER} for more\n         * information on showing system wallpaper behind the window.\n         *\n         * @return whether sending touch events to the system wallpaper is enabled.\n         ",
    "links" : [ "android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER" ]
  }, {
    "name" : "public void setCanPlayMoveAnimation(boolean enable)",
    "returnType" : "void",
    "comment" : "\n         * Set whether animations can be played for position changes on this window. If disabled,\n         * the window will move to its new position instantly without animating.\n         *\n         * @attr ref android.R.styleable#Window_windowNoMoveAnimation\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean canPlayMoveAnimation()",
    "returnType" : "boolean",
    "comment" : "\n         * @return whether playing an animation during a position change is allowed on this window.\n         * This does not guarantee that an animation will be played in all such situations. For\n         * example, drag-resizing may move the window but not play an animation.\n         *\n         * @attr ref android.R.styleable#Window_windowNoMoveAnimation\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getFitInsetsTypes()",
    "returnType" : "int",
    "comment" : "\n         * @return the {@link WindowInsets.Type}s that this window is avoiding overlapping.\n         ",
    "links" : [ "WindowInsets.Type" ]
  }, {
    "name" : "public int getFitInsetsSides()",
    "returnType" : "int",
    "comment" : "\n         * @return the sides that this window is avoiding overlapping.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFitInsetsIgnoringVisibility()",
    "returnType" : "boolean",
    "comment" : "\n         * @return {@code true} if this window fits the window insets no matter they are visible or\n         *         not.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void checkNonRecursiveParams()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams forRotation(int rotation)",
    "returnType" : "LayoutParams",
    "comment" : "\n         * @see #paramsForRotation\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public final void setTitle(CharSequence title)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setSurfaceInsets(View view, boolean manual, boolean preservePrevious)",
    "returnType" : "void",
    "comment" : "\n         * Sets the surface insets based on the elevation (visual z position) of the input view.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHdrConversionEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns whether the HDR conversion is enabled for the window ",
    "links" : [ ]
  }, {
    "name" : "public void setHdrConversionEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Enables/disables the HDR conversion for the window.\n         *\n         * By default, the HDR conversion is enabled for the window.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setColorMode(@ActivityInfo.ColorMode int colorMode)",
    "returnType" : "void",
    "comment" : "\n         * <p>Set the color mode of the window. Setting the color mode might\n         * override the window's pixel {@link WindowManager.LayoutParams#format format}.</p>\n         *\n         * <p>The color mode must be one of {@link ActivityInfo#COLOR_MODE_DEFAULT},\n         * {@link ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT} or\n         * {@link ActivityInfo#COLOR_MODE_HDR}.</p>\n         *\n         * @see #getColorMode()\n         ",
    "links" : [ "android.content.pm.ActivityInfo#COLOR_MODE_HDR", "WindowManager.LayoutParams#format", "android.content.pm.ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT", "android.content.pm.ActivityInfo#COLOR_MODE_DEFAULT" ]
  }, {
    "name" : "public int getColorMode()",
    "returnType" : "int",
    "comment" : "\n         * Returns the color mode of the window, one of {@link ActivityInfo#COLOR_MODE_DEFAULT},\n         * {@link ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT} or {@link ActivityInfo#COLOR_MODE_HDR}.\n         *\n         * @see #setColorMode(int)\n         ",
    "links" : [ "android.content.pm.ActivityInfo#COLOR_MODE_HDR", "android.content.pm.ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT", "android.content.pm.ActivityInfo#COLOR_MODE_DEFAULT" ]
  }, {
    "name" : "public void setDesiredHdrHeadroom(@FloatRange(from = 0.0f, to = 10000.0f) float desiredHeadroom)",
    "returnType" : "void",
    "comment" : "\n         * <p>Sets the desired about of HDR headroom to be used when rendering as a ratio of\n         * targetHdrPeakBrightnessInNits / targetSdrWhitePointInNits. Only applies when\n         * {@link #setColorMode(int)} is {@link ActivityInfo#COLOR_MODE_HDR}</p>\n         *\n         * @see Window#setDesiredHdrHeadroom(float)\n         * @param desiredHeadroom Desired amount of HDR headroom. Must be in the range of 1.0 (SDR)\n         *                        to 10,000.0, or 0.0 to reset to default.\n         ",
    "links" : [ "#setColorMode(int)", "android.content.pm.ActivityInfo#COLOR_MODE_HDR" ]
  }, {
    "name" : "public float getDesiredHdrHeadroom()",
    "returnType" : "float",
    "comment" : "\n         * Get the desired amount of HDR headroom as set by {@link #setDesiredHdrHeadroom(float)}\n         * @return The amount of HDR headroom set, or 0 for automatic/default behavior.\n         ",
    "links" : [ "#setDesiredHdrHeadroom(float)" ]
  }, {
    "name" : "public void setFrameRateBoostOnTouchEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Set the value whether we should enable Touch Boost\n         *\n         * @param enabled Whether we should enable Touch Boost\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getFrameRateBoostOnTouchEnabled()",
    "returnType" : "boolean",
    "comment" : "\n         * Get the value whether we should enable touch boost as set\n         * by {@link #setFrameRateBoostOnTouchEnabled(boolean)}\n         *\n         * @return A boolean value to indicate whether we should enable touch boost\n         ",
    "links" : [ "#setFrameRateBoostOnTouchEnabled(boolean)" ]
  }, {
    "name" : "public void setFrameRatePowerSavingsBalanced(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Set the value whether frameratepowersavingsbalance is enabled for this Window.\n         * This allows device to adjust refresh rate\n         * as needed and can be useful for power saving.\n         *\n         * @param enabled Whether we should enable frameratepowersavingsbalance.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrameRatePowerSavingsBalanced()",
    "returnType" : "boolean",
    "comment" : "\n         * Get the value whether frameratepowersavingsbalance is enabled for this Window.\n         * This allows device to adjust refresh rate\n         * as needed and can be useful for power saving.\n         * by {@link #setFrameRatePowerSavingsBalanced(boolean)}\n         *\n         * @return Whether we should enable frameratepowersavingsbalance.\n         ",
    "links" : [ "#setFrameRatePowerSavingsBalanced(boolean)" ]
  }, {
    "name" : "public void setBlurBehindRadius(@IntRange(from = 0) int blurBehindRadius)",
    "returnType" : "void",
    "comment" : "\n         * <p>\n         * Blurs the screen behind the window. The effect is similar to that of {@link #dimAmount},\n         * but instead of dimmed, the content behind the window will be blurred (or combined with\n         * the dim amount, if such is specified).\n         * </p><p>\n         * The density of the blur is set by the blur radius. The radius defines the size\n         * of the neighbouring area, from which pixels will be averaged to form the final\n         * color for each pixel. The operation approximates a Gaussian blur.\n         * A radius of 0 means no blur. The higher the radius, the denser the blur.\n         * </p><p>\n         * Note the difference with {@link android.view.Window#setBackgroundBlurRadius},\n         * which blurs only within the bounds of the window. Blur behind blurs the whole screen\n         * behind the window.\n         * </p><p>\n         * Requires {@link #FLAG_BLUR_BEHIND} to be set.\n         * </p><p>\n         * Cross-window blur might not be supported by some devices due to GPU limitations. It can\n         * also be disabled at runtime, e.g. during battery saving mode, when multimedia tunneling\n         * is used or when minimal post processing is requested. In such situations, no blur will\n         * be computed or drawn, resulting in there being no depth separation between the window\n         * and the content behind it. To avoid this, the app might want to use more\n         * {@link #dimAmount} on its window. To listen for cross-window blur enabled/disabled\n         * events, use {@link #addCrossWindowBlurEnabledListener}.\n         * </p>\n         * @param blurBehindRadius The blur radius to use for blur behind in pixels\n         *\n         * @see #FLAG_BLUR_BEHIND\n         * @see #getBlurBehindRadius\n         * @see WindowManager#addCrossWindowBlurEnabledListener\n         * @see Window#setBackgroundBlurRadius\n         ",
    "links" : [ "android.view.Window#setBackgroundBlurRadius", "#addCrossWindowBlurEnabledListener", "#dimAmount", "#FLAG_BLUR_BEHIND" ]
  }, {
    "name" : "public int getBlurBehindRadius()",
    "returnType" : "int",
    "comment" : "\n         * Returns the blur behind radius of the window.\n         *\n         * @see #setBlurBehindRadius\n         ",
    "links" : [ ]
  }, {
    "name" : "public final void setUserActivityTimeout(long timeout)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final long getUserActivityTimeout()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setWindowContextToken(@NonNull IBinder token)",
    "returnType" : "void",
    "comment" : "\n         * Sets the {@link android.app.WindowContext} token.\n         *\n         * @see #getWindowContextToken()\n         *\n         * @hide\n         ",
    "links" : [ "android.app.WindowContext" ]
  }, {
    "name" : "public final IBinder getWindowContextToken()",
    "returnType" : "IBinder",
    "comment" : "\n         * Gets the {@link android.app.WindowContext} token.\n         *\n         * The token is usually a {@link android.app.WindowTokenClient} and is used for associating\n         * the params with an existing node in the WindowManager hierarchy and getting the\n         * corresponding {@link Configuration} and {@link android.content.res.Resources} values with\n         * updates propagated from the server side.\n         *\n         * @see android.app.WindowTokenClient\n         * @see Context#createWindowContext(Display, int, Bundle)\n         *\n         * @hide\n         ",
    "links" : [ "android.app.WindowContext", "android.app.WindowTokenClient", "android.content.res.Configuration", "android.content.res.Resources" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int copyFrom(LayoutParams o)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasLayoutDiff(LayoutParams a, LayoutParams b)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if the 2 params may have difference results of\n         * {@link WindowLayout#computeFrames}.\n         ",
    "links" : [ "android.view.WindowLayout#computeFrames" ]
  }, {
    "name" : "public String debug(String output)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDimensions(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString(String prefix)",
    "returnType" : "String",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void scale(float scale)",
    "returnType" : "void",
    "comment" : "\n         * Scale the layout params' coordinates and size.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void backup()",
    "returnType" : "void",
    "comment" : "\n         * Backup the layout parameters used in compatibility mode.\n         * @see LayoutParams#restore()\n         ",
    "links" : [ ]
  }, {
    "name" : " void restore()",
    "returnType" : "void",
    "comment" : "\n         * Restore the layout params' coordinates, size and gravity\n         * @see LayoutParams#backup()\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFullscreen()",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         * @return True if the layout parameters will cause the window to cover the full screen;\n         *         false otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static String layoutInDisplayCutoutModeToString(@LayoutInDisplayCutoutMode int mode)",
    "returnType" : "String",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private static String softInputModeToString(@SoftInputModeFlags int softInputMode)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String rotationAnimationToString(int rotationAnimation)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String inputFeaturesToString(int inputFeatures)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isModal()",
    "returnType" : "boolean",
    "comment" : "\n         * True if the window should consume all pointer events itself, regardless of whether they\n         * are inside of the window. If the window is modal, its touchable region will expand to the\n         * size of its task.\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isSystemAlertWindowType(@WindowType int type)", "public static boolean mayUseInputMethod(int flags)", "public void setFitInsetsTypes(@InsetsType int types)", "public void setFitInsetsSides(@InsetsSide int sides)", "public void setFitInsetsIgnoringVisibility(boolean ignore)", "public void setTrustedOverlay()", "public void setSystemApplicationOverlay(boolean isSystemApplicationOverlay)", "public boolean isSystemApplicationOverlay()", "public void setWallpaperTouchEventsEnabled(boolean enable)", "public boolean areWallpaperTouchEventsEnabled()", "public void setCanPlayMoveAnimation(boolean enable)", "public boolean canPlayMoveAnimation()", "public int getFitInsetsTypes()", "public int getFitInsetsSides()", "public boolean isFitInsetsIgnoringVisibility()", "private void checkNonRecursiveParams()", "public LayoutParams forRotation(int rotation)", "public final void setTitle(CharSequence title)", "public final CharSequence getTitle()", "public final void setSurfaceInsets(View view, boolean manual, boolean preservePrevious)", "public boolean isHdrConversionEnabled()", "public void setHdrConversionEnabled(boolean enabled)", "public void setColorMode(@ActivityInfo.ColorMode int colorMode)", "public int getColorMode()", "public void setDesiredHdrHeadroom(@FloatRange(from = 0.0f, to = 10000.0f) float desiredHeadroom)", "public float getDesiredHdrHeadroom()", "public void setFrameRateBoostOnTouchEnabled(boolean enabled)", "public boolean getFrameRateBoostOnTouchEnabled()", "public void setFrameRatePowerSavingsBalanced(boolean enabled)", "public boolean isFrameRatePowerSavingsBalanced()", "public void setBlurBehindRadius(@IntRange(from = 0) int blurBehindRadius)", "public int getBlurBehindRadius()", "public final void setUserActivityTimeout(long timeout)", "public final long getUserActivityTimeout()", "public final void setWindowContextToken(@NonNull IBinder token)", "public final IBinder getWindowContextToken()", "public int describeContents()", "public void writeToParcel(Parcel out, int parcelableFlags)", "public final int copyFrom(LayoutParams o)", "private static boolean hasLayoutDiff(LayoutParams a, LayoutParams b)", "public String debug(String output)", "public String toString()", "public void dumpDimensions(StringBuilder sb)", "public String toString(String prefix)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public void scale(float scale)", " void backup()", " void restore()", "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)", "public boolean isFullscreen()", "public static String layoutInDisplayCutoutModeToString(@LayoutInDisplayCutoutMode int mode)", "private static String softInputModeToString(@SoftInputModeFlags int softInputMode)", "private static String rotationAnimationToString(int rotationAnimation)", "private static String inputFeaturesToString(int inputFeatures)", "public boolean isModal()" ],
  "variableNames" : [ "x", "y", "horizontalWeight", "verticalWeight", "type", "FIRST_APPLICATION_WINDOW", "TYPE_BASE_APPLICATION", "TYPE_APPLICATION", "TYPE_APPLICATION_STARTING", "TYPE_DRAWN_APPLICATION", "LAST_APPLICATION_WINDOW", "FIRST_SUB_WINDOW", "TYPE_APPLICATION_PANEL", "TYPE_APPLICATION_MEDIA", "TYPE_APPLICATION_SUB_PANEL", "TYPE_APPLICATION_ATTACHED_DIALOG", "TYPE_APPLICATION_MEDIA_OVERLAY", "TYPE_APPLICATION_ABOVE_SUB_PANEL", "LAST_SUB_WINDOW", "FIRST_SYSTEM_WINDOW", "TYPE_STATUS_BAR", "TYPE_SEARCH_BAR", "TYPE_PHONE", "TYPE_SYSTEM_ALERT", "TYPE_KEYGUARD", "TYPE_TOAST", "TYPE_SYSTEM_OVERLAY", "TYPE_PRIORITY_PHONE", "TYPE_SYSTEM_DIALOG", "TYPE_KEYGUARD_DIALOG", "TYPE_SYSTEM_ERROR", "TYPE_INPUT_METHOD", "TYPE_INPUT_METHOD_DIALOG", "TYPE_WALLPAPER", "TYPE_STATUS_BAR_PANEL", "TYPE_SECURE_SYSTEM_OVERLAY", "TYPE_DRAG", "TYPE_STATUS_BAR_SUB_PANEL", "TYPE_POINTER", "TYPE_NAVIGATION_BAR", "TYPE_VOLUME_OVERLAY", "TYPE_BOOT_PROGRESS", "TYPE_INPUT_CONSUMER", "TYPE_NAVIGATION_BAR_PANEL", "TYPE_DISPLAY_OVERLAY", "TYPE_MAGNIFICATION_OVERLAY", "TYPE_PRIVATE_PRESENTATION", "TYPE_VOICE_INTERACTION", "TYPE_ACCESSIBILITY_OVERLAY", "TYPE_VOICE_INTERACTION_STARTING", "TYPE_DOCK_DIVIDER", "TYPE_QS_DIALOG", "TYPE_SCREENSHOT", "TYPE_PRESENTATION", "TYPE_APPLICATION_OVERLAY", "TYPE_ACCESSIBILITY_MAGNIFICATION_OVERLAY", "TYPE_NOTIFICATION_SHADE", "TYPE_STATUS_BAR_ADDITIONAL", "LAST_SYSTEM_WINDOW", "INVALID_WINDOW_TYPE", "MEMORY_TYPE_NORMAL", "MEMORY_TYPE_HARDWARE", "MEMORY_TYPE_GPU", "MEMORY_TYPE_PUSH_BUFFERS", "memoryType", "FLAG_ALLOW_LOCK_WHILE_SCREEN_ON", "FLAG_DIM_BEHIND", "FLAG_BLUR_BEHIND", "FLAG_NOT_FOCUSABLE", "FLAG_NOT_TOUCHABLE", "FLAG_NOT_TOUCH_MODAL", "FLAG_TOUCHABLE_WHEN_WAKING", "FLAG_KEEP_SCREEN_ON", "FLAG_LAYOUT_IN_SCREEN", "FLAG_LAYOUT_NO_LIMITS", "FLAG_FULLSCREEN", "FLAG_FORCE_NOT_FULLSCREEN", "FLAG_DITHER", "FLAG_SECURE", "FLAG_SCALED", "FLAG_IGNORE_CHEEK_PRESSES", "FLAG_LAYOUT_INSET_DECOR", "FLAG_ALT_FOCUSABLE_IM", "FLAG_WATCH_OUTSIDE_TOUCH", "FLAG_SHOW_WHEN_LOCKED", "FLAG_SHOW_WALLPAPER", "FLAG_TURN_SCREEN_ON", "FLAG_DISMISS_KEYGUARD", "FLAG_SPLIT_TOUCH", "FLAG_HARDWARE_ACCELERATED", "FLAG_LAYOUT_IN_OVERSCAN", "FLAG_TRANSLUCENT_STATUS", "FLAG_TRANSLUCENT_NAVIGATION", "FLAG_LOCAL_FOCUS_MODE", "FLAG_SLIPPERY", "FLAG_LAYOUT_ATTACHED_IN_DECOR", "FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS", "flags", "PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED", "PRIVATE_FLAG_WANTS_OFFSET_NOTIFICATIONS", "PRIVATE_FLAG_SYSTEM_APPLICATION_OVERLAY", "SYSTEM_FLAG_SHOW_FOR_ALL_USERS", "PRIVATE_FLAG_UNRESTRICTED_GESTURE_EXCLUSION", "PRIVATE_FLAG_NO_MOVE_ANIMATION", "PRIVATE_FLAG_SYSTEM_ERROR", "PRIVATE_FLAG_OPTIMIZE_MEASURE", "PRIVATE_FLAG_DISABLE_WALLPAPER_TOUCH_EVENTS", "PRIVATE_FLAG_EDGE_TO_EDGE_ENFORCED", "PRIVATE_FLAG_LAYOUT_SIZE_EXTENDED_BY_CUTOUT", "PRIVATE_FLAG_FORCE_DECOR_VIEW_VISIBILITY", "PRIVATE_FLAG_LAYOUT_CHILD_WINDOW_IN_PARENT_FRAME", "PRIVATE_FLAG_FORCE_DRAW_BAR_BACKGROUNDS", "PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE", "PRIVATE_FLAG_IMMERSIVE_CONFIRMATION_WINDOW", "PRIVATE_FLAG_OVERRIDE_LAYOUT_IN_DISPLAY_CUTOUT_MODE", "SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS", "PRIVATE_FLAG_IS_ROUNDED_CORNERS_OVERLAY", "PRIVATE_FLAG_EXCLUDE_FROM_SCREEN_MAGNIFICATION", "PRIVATE_FLAG_NOT_MAGNIFIABLE", "PRIVATE_FLAG_COLOR_SPACE_AGNOSTIC", "PRIVATE_FLAG_CONSUME_IME_INSETS", "PRIVATE_FLAG_FIT_INSETS_CONTROLLED", "PRIVATE_FLAG_TRUSTED_OVERLAY", "PRIVATE_FLAG_INSET_PARENT_FRAME_BY_IME", "PRIVATE_FLAG_INTERCEPT_GLOBAL_DRAG_AND_DROP", "privateFlags", "SOFT_INPUT_MASK_STATE", "SOFT_INPUT_STATE_UNSPECIFIED", "SOFT_INPUT_STATE_UNCHANGED", "SOFT_INPUT_STATE_HIDDEN", "SOFT_INPUT_STATE_ALWAYS_HIDDEN", "SOFT_INPUT_STATE_VISIBLE", "SOFT_INPUT_STATE_ALWAYS_VISIBLE", "SOFT_INPUT_MASK_ADJUST", "SOFT_INPUT_ADJUST_UNSPECIFIED", "SOFT_INPUT_ADJUST_RESIZE", "SOFT_INPUT_ADJUST_PAN", "SOFT_INPUT_ADJUST_NOTHING", "SOFT_INPUT_IS_FORWARD_NAVIGATION", "softInputMode", "gravity", "horizontalMargin", "verticalMargin", "surfaceInsets", "hasManualSurfaceInsets", "receiveInsetsIgnoringZOrder", "preservePreviousSurfaceInsets", "format", "windowAnimations", "alpha", "dimAmount", "BRIGHTNESS_OVERRIDE_NONE", "BRIGHTNESS_OVERRIDE_OFF", "BRIGHTNESS_OVERRIDE_FULL", "screenBrightness", "buttonBrightness", "ROTATION_ANIMATION_UNSPECIFIED", "ROTATION_ANIMATION_ROTATE", "ROTATION_ANIMATION_CROSSFADE", "ROTATION_ANIMATION_JUMPCUT", "ROTATION_ANIMATION_SEAMLESS", "rotationAnimation", "token", "mWindowContextToken", "packageName", "screenOrientation", "preferredRefreshRate", "preferredDisplayModeId", "preferredMinDisplayRefreshRate", "preferredMaxDisplayRefreshRate", "DISPLAY_FLAG_DISABLE_HDR_CONVERSION", "mDisplayFlags", "systemUiVisibility", "subtreeSystemUiVisibility", "hasSystemUiListeners", "layoutInDisplayCutoutMode", "LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT", "LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES", "LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER", "LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS", "INPUT_FEATURE_NO_INPUT_CHANNEL", "INPUT_FEATURE_DISABLE_USER_ACTIVITY", "INPUT_FEATURE_SPY", "INPUT_FEATURE_SENSITIVE_FOR_PRIVACY", "inputFeatures", "userActivityTimeout", "accessibilityIdOfAnchor", "accessibilityTitle", "hideTimeoutMilliseconds", "preferMinimalPostProcessing", "mBlurBehindRadius", "mColorMode", "mDesiredHdrHeadroom", "mFrameRateBoostOnTouch", "mIsFrameRatePowerSavingsBalanced", "sToolkitSetFrameRateReadOnlyFlagValue", "insetsFlags", "mFitInsetsTypes", "mFitInsetsSides", "mFitInsetsIgnoringVisibility", "providedInsets", "forciblyShownTypes", "paramsForRotation", "mWallpaperTouchEventsEnabled", "CREATOR", "LAYOUT_CHANGED", "TYPE_CHANGED", "FLAGS_CHANGED", "FORMAT_CHANGED", "ANIMATION_CHANGED", "DIM_AMOUNT_CHANGED", "TITLE_CHANGED", "ALPHA_CHANGED", "MEMORY_TYPE_CHANGED", "SOFT_INPUT_MODE_CHANGED", "SCREEN_ORIENTATION_CHANGED", "SCREEN_BRIGHTNESS_CHANGED", "ROTATION_ANIMATION_CHANGED", "BUTTON_BRIGHTNESS_CHANGED", "SYSTEM_UI_VISIBILITY_CHANGED", "SYSTEM_UI_LISTENER_CHANGED", "INPUT_FEATURES_CHANGED", "PRIVATE_FLAGS_CHANGED", "USER_ACTIVITY_TIMEOUT_CHANGED", "TRANSLUCENT_FLAGS_CHANGED", "SURFACE_INSETS_CHANGED", "PREFERRED_REFRESH_RATE_CHANGED", "DISPLAY_FLAGS_CHANGED", "PREFERRED_DISPLAY_MODE_ID", "ACCESSIBILITY_ANCHOR_CHANGED", "ACCESSIBILITY_TITLE_CHANGED", "COLOR_MODE_CHANGED", "INSET_FLAGS_CHANGED", "MINIMAL_POST_PROCESSING_PREFERENCE_CHANGED", "BLUR_BEHIND_RADIUS_CHANGED", "PREFERRED_MIN_DISPLAY_REFRESH_RATE", "PREFERRED_MAX_DISPLAY_REFRESH_RATE", "mCompatibilityParamsBackup", "mTitle" ]
}