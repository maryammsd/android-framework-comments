{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/Magnifier.java",
  "packageName" : "android.widget",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link Magnifier} objects.\n     ",
  "variables" : [ {
    "name" : "mView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mZoom",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElevation",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCornerRadius",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlay",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHorizontalDefaultSourceToMagnifierOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerticalDefaultSourceToMagnifierOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClippingEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeftContentBound",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTopContentBound",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRightContentBound",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBottomContentBound",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsFishEyeStyle",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void applyDefaults()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setSize(@Px @IntRange(from = 0) int width, @Px @IntRange(from = 0) int height)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the size of the magnifier window, in pixels. Defaults to (100dp, 48dp).\n         * Note that the size of the content being magnified and copied to the magnifier\n         * will be computed as (window width / zoom, window height / zoom).\n         * @param width the window width to be set\n         * @param height the window height to be set\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setInitialZoom(@FloatRange(from = 0f) float zoom)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the zoom to be applied to the chosen content before being copied to the magnifier.\n         * A content of size (content_width, content_height) will be magnified to\n         * (content_width * zoom, content_height * zoom), which will coincide with the size\n         * of the magnifier. A zoom of 1 will translate to no magnification (the content will\n         * be just copied to the magnifier with no scaling). The zoom defaults to 1.25.\n         * Note that the zoom can also be changed after the instance is built, using the\n         * {@link Magnifier#setZoom(float)} method.\n         * @param zoom the zoom to be set\n         ",
    "links" : [ "Magnifier#setZoom" ]
  }, {
    "name" : "public Builder setElevation(@Px @FloatRange(from = 0) float elevation)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the elevation of the magnifier window, in pixels. Defaults to 4dp.\n         * @param elevation the elevation to be set\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCornerRadius(@Px @FloatRange(from = 0) float cornerRadius)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the corner radius of the magnifier window, in pixels. Defaults to 2dp.\n         * @param cornerRadius the corner radius to be set\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setOverlay(@Nullable Drawable overlay)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an overlay that will be drawn on the top of the magnifier.\n         * In general, the overlay should not be opaque, in order to let the magnified\n         * content be partially visible in the magnifier. The default overlay is {@code null}\n         * (no overlay). As an example, TextView applies a white {@link ColorDrawable}\n         * overlay with 5% alpha, aiming to make the magnifier distinguishable when shown in dark\n         * application regions. To disable the overlay, the parameter should be set\n         * to {@code null}. If not null, the overlay will be automatically redrawn\n         * when the drawable is invalidated. To achieve this, the magnifier will set a new\n         * {@link android.graphics.drawable.Drawable.Callback} for the overlay drawable,\n         * so keep in mind that any existing one set by the application will be lost.\n         * @param overlay the overlay to be drawn on top\n         ",
    "links" : [ "ColorDrawable", "android.graphics.drawable.Drawable.Callback" ]
  }, {
    "name" : "public Builder setDefaultSourceToMagnifierOffset(@Px int horizontalOffset, @Px int verticalOffset)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an offset that should be added to the content source center to obtain\n         * the position of the magnifier window, when the {@link #show(float, float)}\n         * method is called. The offset is ignored when {@link #show(float, float, float, float)}\n         * is used. The offset can be negative. It defaults to (0dp, 0dp).\n         * @param horizontalOffset the horizontal component of the offset\n         * @param verticalOffset the vertical component of the offset\n         ",
    "links" : [ "#show", "#show" ]
  }, {
    "name" : "public Builder setClippingEnabled(boolean clip)",
    "returnType" : "Builder",
    "comment" : "\n         * Defines the behavior of the magnifier when it is requested to position outside the\n         * surface of the main application window. The default value is {@code true}, which means\n         * that the position will be adjusted such that the magnifier will be fully within the\n         * bounds of the main application window, while also avoiding any overlap with system insets\n         * (such as the one corresponding to the status bar). If this flag is set to {@code false},\n         * the area where the magnifier can be positioned will no longer be clipped, so the\n         * magnifier will be able to extend outside the main application window boundaries (and also\n         * overlap the system insets). This can be useful if you require a custom behavior, but it\n         * should be handled with care, when passing coordinates to {@link #show(float, float)};\n         * note that:\n         * <ul>\n         *   <li>in a multiwindow context, if the magnifier crosses the boundary between the two\n         *   windows, it will not be able to show over the window of the other application</li>\n         *   <li>if the magnifier overlaps the status bar, there is no guarantee about which one\n         *   will be displayed on top. This should be handled with care.</li>\n         * </ul>\n         * @param clip whether the magnifier position will be adjusted\n         ",
    "links" : [ "#show" ]
  }, {
    "name" : "public Builder setSourceBounds(@SourceBound int left, @SourceBound int top, @SourceBound int right, @SourceBound int bottom)",
    "returnType" : "Builder",
    "comment" : "\n         * Defines the bounds of the rectangle where the magnifier will be able to copy its content\n         * from. The content will always be copied from the {@link Surface} of the main application\n         * window unless the magnified view is a {@link SurfaceView}, in which case its backing\n         * surface will be used. Each bound can have a different behavior, with the options being:\n         * <ul>\n         *   <li>{@link #SOURCE_BOUND_MAX_VISIBLE}, which extends the bound as much as possible\n         *   while remaining in the visible region of the magnified view, as given by\n         *   {@link android.view.View#getGlobalVisibleRect(Rect)}. For example, this will take into\n         *   account the case when the view is contained in a scrollable container, and the\n         *   magnifier will refuse to copy content outside of the visible view region</li>\n         *   <li>{@link #SOURCE_BOUND_MAX_IN_SURFACE}, which extends the bound as much\n         *   as possible while remaining inside the surface the content is copied from.</li>\n         * </ul>\n         * Note that if either of the first three options is used, the bound will be compared to\n         * the bound of the surface (i.e. as if {@link #SOURCE_BOUND_MAX_IN_SURFACE} was used),\n         * and the more restrictive one will be chosen. In other words, no attempt to copy content\n         * from outside the surface will be permitted. If two opposite bounds are not well-behaved\n         * (i.e. left + sourceWidth > right or top + sourceHeight > bottom), the left and top\n         * bounds will have priority and the others will be extended accordingly. If the pairs\n         * obtained this way still remain out of bounds, the smallest possible offset will be added\n         * to the pairs to bring them inside the surface bounds. If this is impossible\n         * (i.e. the surface is too small for the size of the content we try to copy on either\n         * dimension), an error will be logged and the magnifier content will look distorted.\n         * The default values assumed by the builder for the source bounds are\n         * left: {@link #SOURCE_BOUND_MAX_VISIBLE}, top: {@link #SOURCE_BOUND_MAX_IN_SURFACE},\n         * right: {@link #SOURCE_BOUND_MAX_VISIBLE}, bottom: {@link #SOURCE_BOUND_MAX_IN_SURFACE}.\n         * @param left the left bound for content copy\n         * @param top the top bound for content copy\n         * @param right the right bound for content copy\n         * @param bottom the bottom bound for content copy\n         ",
    "links" : [ "Surface", "SurfaceView", "#SOURCE_BOUND_MAX_VISIBLE", "android.view.View#getGlobalVisibleRect", "#SOURCE_BOUND_MAX_IN_SURFACE", "#SOURCE_BOUND_MAX_IN_SURFACE", "#SOURCE_BOUND_MAX_VISIBLE", "#SOURCE_BOUND_MAX_IN_SURFACE", "#SOURCE_BOUND_MAX_VISIBLE", "#SOURCE_BOUND_MAX_IN_SURFACE" ]
  }, {
    "name" : " Builder setSourceSize(int width, int height)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the source width/height.\n         ",
    "links" : [ ]
  }, {
    "name" : " Builder setFishEyeStyle()",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the magnifier as the new fish-eye style.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Magnifier build()",
    "returnType" : "Magnifier",
    "comment" : "\n         * Builds a {@link Magnifier} instance based on the configuration of this {@link Builder}.\n         ",
    "links" : [ "Magnifier", "Builder" ]
  } ],
  "variableNames" : [ "mView", "mWidth", "mHeight", "mZoom", "mElevation", "mCornerRadius", "mOverlay", "mHorizontalDefaultSourceToMagnifierOffset", "mVerticalDefaultSourceToMagnifierOffset", "mClippingEnabled", "mLeftContentBound", "mTopContentBound", "mRightContentBound", "mBottomContentBound", "mIsFishEyeStyle", "mSourceWidth", "mSourceHeight" ],
  "methodNames" : [ "private void applyDefaults()", "public Builder setSize(@Px @IntRange(from = 0) int width, @Px @IntRange(from = 0) int height)", "public Builder setInitialZoom(@FloatRange(from = 0f) float zoom)", "public Builder setElevation(@Px @FloatRange(from = 0) float elevation)", "public Builder setCornerRadius(@Px @FloatRange(from = 0) float cornerRadius)", "public Builder setOverlay(@Nullable Drawable overlay)", "public Builder setDefaultSourceToMagnifierOffset(@Px int horizontalOffset, @Px int verticalOffset)", "public Builder setClippingEnabled(boolean clip)", "public Builder setSourceBounds(@SourceBound int left, @SourceBound int top, @SourceBound int right, @SourceBound int bottom)", " Builder setSourceSize(int width, int height)", " Builder setFishEyeStyle()", "public Magnifier build()" ]
}