{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/Attributes.java",
  "packageName" : "org.xml.sax",
  "className" : "Attributes",
  "comment" : "\n * Interface for a list of XML attributes.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This interface allows access to a list of attributes in\n * three different ways:</p>\n *\n * <ol>\n * <li>by attribute index;</li>\n * <li>by Namespace-qualified name; or</li>\n * <li>by qualified (prefixed) name.</li>\n * </ol>\n *\n * <p>The list will not contain attributes that were declared\n * #IMPLIED but not specified in the start tag.  It will also not\n * contain attributes used as Namespace declarations (xmlns*) unless\n * the <code>http://xml.org/sax/features/namespace-prefixes</code>\n * feature is set to <var>true</var> (it is <var>false</var> by\n * default).\n * Because SAX2 conforms to the original \"Namespaces in XML\"\n * recommendation, it normally does not\n * give namespace declaration attributes a namespace URI.\n * </p>\n *\n * <p>Some SAX2 parsers may support using an optional feature flag\n * (<code>http://xml.org/sax/features/xmlns-uris</code>) to request\n * that those attributes be given URIs, conforming to a later\n * backwards-incompatible revision of that recommendation.  (The\n * attribute's \"local name\" will be the prefix, or \"xmlns\" when\n * defining a default element namespace.)  For portability, handler\n * code should always resolve that conflict, rather than requiring\n * parsers that can change the setting of that feature flag.  </p>\n *\n * <p>If the namespace-prefixes feature (see above) is\n * <var>false</var>, access by qualified name may not be available; if\n * the <code>http://xml.org/sax/features/namespaces</code> feature is\n * <var>false</var>, access by Namespace-qualified names may not be\n * available.</p>\n *\n * <p>This interface replaces the now-deprecated SAX1 {@link\n * org.xml.sax.AttributeList AttributeList} interface, which does not\n * contain Namespace support.  In addition to Namespace support, it\n * adds the <var>getIndex</var> methods (below).</p>\n *\n * <p>The order of attributes in the list is unspecified, and will\n * vary from implementation to implementation.</p>\n *\n * @since SAX 2.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.helpers.AttributesImpl\n * @see org.xml.sax.ext.DeclHandler#attributeDecl\n ",
  "links" : [ "org.xml.sax.AttributeList" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract int getLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of attributes in the list.\n     *\n     * <p>Once you know the number of attributes, you can iterate\n     * through the list.</p>\n     *\n     * @return The number of attributes in the list.\n     * @see #getURI(int)\n     * @see #getLocalName(int)\n     * @see #getQName(int)\n     * @see #getType(int)\n     * @see #getValue(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getURI(int index)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's Namespace URI by index.\n     *\n     * @param index The attribute index (zero-based).\n     * @return The Namespace URI, or the empty string if none\n     *         is available, or null if the index is out of\n     *         range.\n     * @see #getLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getLocalName(int index)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's local name by index.\n     *\n     * @param index The attribute index (zero-based).\n     * @return The local name, or the empty string if Namespace\n     *         processing is not being performed, or null\n     *         if the index is out of range.\n     * @see #getLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getQName(int index)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's XML qualified (prefixed) name by index.\n     *\n     * @param index The attribute index (zero-based).\n     * @return The XML qualified name, or the empty string\n     *         if none is available, or null if the index\n     *         is out of range.\n     * @see #getLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getType(int index)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's type by index.\n     *\n     * <p>The attribute type is one of the strings \"CDATA\", \"ID\",\n     * \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\",\n     * or \"NOTATION\" (always in upper case).</p>\n     *\n     * <p>If the parser has not read a declaration for the attribute,\n     * or if the parser does not report attribute types, then it must\n     * return the value \"CDATA\" as stated in the XML 1.0 Recommendation\n     * (clause 3.3.3, \"Attribute-Value Normalization\").</p>\n     *\n     * <p>For an enumerated attribute that is not a notation, the\n     * parser will report the type as \"NMTOKEN\".</p>\n     *\n     * @param index The attribute index (zero-based).\n     * @return The attribute's type as a string, or null if the\n     *         index is out of range.\n     * @see #getLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getValue(int index)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's value by index.\n     *\n     * <p>If the attribute value is a list of tokens (IDREFS,\n     * ENTITIES, or NMTOKENS), the tokens will be concatenated\n     * into a single string with each token separated by a\n     * single space.</p>\n     *\n     * @param index The attribute index (zero-based).\n     * @return The attribute's value as a string, or null if the\n     *         index is out of range.\n     * @see #getLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex(String uri, String localName)",
    "returnType" : "int",
    "comment" : "\n     * Look up the index of an attribute by Namespace name.\n     *\n     * @param uri The Namespace URI, or the empty string if\n     *        the name has no Namespace URI.\n     * @param localName The attribute's local name.\n     * @return The index of the attribute, or -1 if it does not\n     *         appear in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex(String qName)",
    "returnType" : "int",
    "comment" : "\n     * Look up the index of an attribute by XML qualified (prefixed) name.\n     *\n     * @param qName The qualified (prefixed) name.\n     * @return The index of the attribute, or -1 if it does not\n     *         appear in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getType(String uri, String localName)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's type by Namespace name.\n     *\n     * <p>See {@link #getType(int) getType(int)} for a description\n     * of the possible types.</p>\n     *\n     * @param uri The Namespace URI, or the empty String if the\n     *        name has no Namespace URI.\n     * @param localName The local name of the attribute.\n     * @return The attribute type as a string, or null if the\n     *         attribute is not in the list or if Namespace\n     *         processing is not being performed.\n     ",
    "links" : [ "#getType(int)" ]
  }, {
    "name" : "public abstract String getType(String qName)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's type by XML qualified (prefixed) name.\n     *\n     * <p>See {@link #getType(int) getType(int)} for a description\n     * of the possible types.</p>\n     *\n     * @param qName The XML qualified name.\n     * @return The attribute type as a string, or null if the\n     *         attribute is not in the list or if qualified names\n     *         are not available.\n     ",
    "links" : [ "#getType(int)" ]
  }, {
    "name" : "public abstract String getValue(String uri, String localName)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's value by Namespace name.\n     *\n     * <p>See {@link #getValue(int) getValue(int)} for a description\n     * of the possible values.</p>\n     *\n     * @param uri The Namespace URI, or the empty String if the\n     *        name has no Namespace URI.\n     * @param localName The local name of the attribute.\n     * @return The attribute value as a string, or null if the\n     *         attribute is not in the list.\n     ",
    "links" : [ "#getValue(int)" ]
  }, {
    "name" : "public abstract String getValue(String qName)",
    "returnType" : "String",
    "comment" : "\n     * Look up an attribute's value by XML qualified (prefixed) name.\n     *\n     * <p>See {@link #getValue(int) getValue(int)} for a description\n     * of the possible values.</p>\n     *\n     * @param qName The XML qualified name.\n     * @return The attribute value as a string, or null if the\n     *         attribute is not in the list or if qualified names\n     *         are not available.\n     ",
    "links" : [ "#getValue(int)" ]
  } ],
  "methodNames" : [ "public abstract int getLength()", "public abstract String getURI(int index)", "public abstract String getLocalName(int index)", "public abstract String getQName(int index)", "public abstract String getType(int index)", "public abstract String getValue(int index)", "public int getIndex(String uri, String localName)", "public int getIndex(String qName)", "public abstract String getType(String uri, String localName)", "public abstract String getType(String qName)", "public abstract String getValue(String uri, String localName)", "public abstract String getValue(String qName)" ],
  "variableNames" : [ ]
}