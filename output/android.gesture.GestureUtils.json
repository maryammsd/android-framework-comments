{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/gesture/GestureUtils.java",
  "packageName" : "android.gesture",
  "className" : "GestureUtils",
  "comment" : "\n * Utility functions for gesture processing & analysis, including methods for:\n * <ul> \n * <li>feature extraction (e.g., samplers and those for calculating bounding\n * boxes and gesture path lengths);\n * <li>geometric transformation (e.g., translation, rotation and scaling);\n * <li>gesture similarity comparison (e.g., calculating Euclidean or Cosine\n * distances between two gestures).\n * </ul>\n ",
  "variables" : [ {
    "name" : "SCALING_THRESHOLD",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NONUNIFORM_SCALE",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void closeStream(Closeable stream)",
    "returnType" : "void",
    "comment" : "\n     * Closes the specified stream.\n     *\n     * @param stream The stream to close.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float[] spatialSampling(Gesture gesture, int bitmapSize)",
    "returnType" : "float[]",
    "comment" : "\n     * Samples the gesture spatially by rendering the gesture into a 2D \n     * grayscale bitmap. Scales the gesture to fit the size of the bitmap. \n     * The scaling does not necessarily keep the aspect ratio of the gesture. \n     * \n     * @param gesture the gesture to be sampled\n     * @param bitmapSize the size of the bitmap\n     * @return a bitmapSize x bitmapSize grayscale bitmap that is represented \n     *         as a 1D array. The float at index i represents the grayscale \n     *         value at pixel [i%bitmapSize, i/bitmapSize] \n     ",
    "links" : [ ]
  }, {
    "name" : "public static float[] spatialSampling(Gesture gesture, int bitmapSize, boolean keepAspectRatio)",
    "returnType" : "float[]",
    "comment" : "\n     * Samples the gesture spatially by rendering the gesture into a 2D \n     * grayscale bitmap. Scales the gesture to fit the size of the bitmap. \n     * \n     * @param gesture the gesture to be sampled\n     * @param bitmapSize the size of the bitmap\n     * @param keepAspectRatio if the scaling should keep the gesture's \n     *        aspect ratio\n     * \n     * @return a bitmapSize x bitmapSize grayscale bitmap that is represented \n     *         as a 1D array. The float at index i represents the grayscale \n     *         value at pixel [i%bitmapSize, i/bitmapSize] \n     ",
    "links" : [ ]
  }, {
    "name" : "private static void plot(float x, float y, float[] sample, int sampleSize)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float[] temporalSampling(GestureStroke stroke, int numPoints)",
    "returnType" : "float[]",
    "comment" : "\n     * Samples a stroke temporally into a given number of evenly-distributed \n     * points.\n     * \n     * @param stroke the gesture stroke to be sampled\n     * @param numPoints the number of points\n     * @return the sampled points in the form of [x1, y1, x2, y2, ..., xn, yn]\n     ",
    "links" : [ ]
  }, {
    "name" : " static float[] computeCentroid(float[] points)",
    "returnType" : "float[]",
    "comment" : "\n     * Calculates the centroid of a set of points.\n     * \n     * @param points the points in the form of [x1, y1, x2, y2, ..., xn, yn]\n     * @return the centroid\n     ",
    "links" : [ ]
  }, {
    "name" : "private static float[][] computeCoVariance(float[] points)",
    "returnType" : "float[][]",
    "comment" : "\n     * Calculates the variance-covariance matrix of a set of points.\n     * \n     * @param points the points in the form of [x1, y1, x2, y2, ..., xn, yn]\n     * @return the variance-covariance matrix\n     ",
    "links" : [ ]
  }, {
    "name" : " static float computeTotalLength(float[] points)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float computeStraightness(float[] points)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float computeStraightness(float[] points, float totalLen)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float squaredEuclideanDistance(float[] vector1, float[] vector2)",
    "returnType" : "float",
    "comment" : "\n     * Calculates the squared Euclidean distance between two vectors.\n     * \n     * @param vector1\n     * @param vector2\n     * @return the distance\n     ",
    "links" : [ ]
  }, {
    "name" : " static float cosineDistance(float[] vector1, float[] vector2)",
    "returnType" : "float",
    "comment" : "\n     * Calculates the cosine distance between two instances.\n     * \n     * @param vector1\n     * @param vector2\n     * @return the distance between 0 and Math.PI\n     ",
    "links" : [ ]
  }, {
    "name" : " static float minimumCosineDistance(float[] vector1, float[] vector2, int numOrientations)",
    "returnType" : "float",
    "comment" : "\n     * Calculates the \"minimum\" cosine distance between two instances.\n     * \n     * @param vector1\n     * @param vector2\n     * @param numOrientations the maximum number of orientation allowed\n     * @return the distance between the two instances (between 0 and Math.PI)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static OrientedBoundingBox computeOrientedBoundingBox(ArrayList<GesturePoint> originalPoints)",
    "returnType" : "OrientedBoundingBox",
    "comment" : "\n     * Computes an oriented, minimum bounding box of a set of points.\n     * \n     * @param originalPoints\n     * @return an oriented bounding box\n     ",
    "links" : [ ]
  }, {
    "name" : "public static OrientedBoundingBox computeOrientedBoundingBox(float[] originalPoints)",
    "returnType" : "OrientedBoundingBox",
    "comment" : "\n     * Computes an oriented, minimum bounding box of a set of points.\n     * \n     * @param originalPoints\n     * @return an oriented bounding box\n     ",
    "links" : [ ]
  }, {
    "name" : "private static OrientedBoundingBox computeOrientedBoundingBox(float[] points, float[] centroid)",
    "returnType" : "OrientedBoundingBox",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float[] computeOrientation(float[][] covarianceMatrix)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float[] rotate(float[] points, float angle)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float[] translate(float[] points, float dx, float dy)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float[] scale(float[] points, float sx, float sy)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "SCALING_THRESHOLD", "NONUNIFORM_SCALE" ],
  "methodNames" : [ " static void closeStream(Closeable stream)", "public static float[] spatialSampling(Gesture gesture, int bitmapSize)", "public static float[] spatialSampling(Gesture gesture, int bitmapSize, boolean keepAspectRatio)", "private static void plot(float x, float y, float[] sample, int sampleSize)", "public static float[] temporalSampling(GestureStroke stroke, int numPoints)", " static float[] computeCentroid(float[] points)", "private static float[][] computeCoVariance(float[] points)", " static float computeTotalLength(float[] points)", " static float computeStraightness(float[] points)", " static float computeStraightness(float[] points, float totalLen)", " static float squaredEuclideanDistance(float[] vector1, float[] vector2)", " static float cosineDistance(float[] vector1, float[] vector2)", " static float minimumCosineDistance(float[] vector1, float[] vector2, int numOrientations)", "public static OrientedBoundingBox computeOrientedBoundingBox(ArrayList<GesturePoint> originalPoints)", "public static OrientedBoundingBox computeOrientedBoundingBox(float[] originalPoints)", "private static OrientedBoundingBox computeOrientedBoundingBox(float[] points, float[] centroid)", "private static float[] computeOrientation(float[][] covarianceMatrix)", " static float[] rotate(float[] points, float angle)", " static float[] translate(float[] points, float dx, float dy)", " static float[] scale(float[] points, float sx, float sy)" ]
}