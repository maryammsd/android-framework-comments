{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/GraphicsEnvironment.java",
  "packageName" : "android.os",
  "className" : "GraphicsEnvironment",
  "comment" : "\n * GraphicsEnvironment sets up necessary properties for the graphics environment of the\n * application process.\n * GraphicsEnvironment uses a bunch of settings global variables to determine the setup,\n * the change of settings global variables will only take effect before setup() is called,\n * and any subsequent change will not impact the current running processes.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sInstance",
    "type" : "GraphicsEnvironment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_DRIVER_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_DRIVER_VERSION_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_DRIVER_VERSION_CODE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANGLE_DRIVER_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANGLE_DRIVER_VERSION_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANGLE_DRIVER_VERSION_CODE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_GFX_DRIVER_PRODUCTION",
    "type" : "String",
    "comment" : " System properties related to updatable graphics drivers.",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_GFX_DRIVER_PRERELEASE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_GFX_DRIVER_BUILD_TIME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_DRIVER_BUILD_TIME",
    "type" : "String",
    "comment" : " Metadata flags within the <application> tag in the AndroidManifest.xml file.",
    "links" : [ ]
  }, {
    "name" : "METADATA_DEVELOPER_DRIVER_ENABLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_INJECT_LAYERS_ENABLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPDATABLE_DRIVER_ALLOWLIST_ALL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPDATABLE_DRIVER_SPHAL_LIBRARIES_FILENAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_ANGLE_FOR_ANDROID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_ANGLE_FOR_ANDROID_TOAST_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INTENT_KEY_A4A_TOAST_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VULKAN_1_0",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VULKAN_1_1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VULKAN_1_2",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VULKAN_1_3",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPDATABLE_DRIVER_GLOBAL_OPT_IN_DEFAULT",
    "type" : "int",
    "comment" : " 3: All apps use system graphics driver",
    "links" : [ ]
  }, {
    "name" : "UPDATABLE_DRIVER_GLOBAL_OPT_IN_PRODUCTION_DRIVER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPDATABLE_DRIVER_GLOBAL_OPT_IN_PRERELEASE_DRIVER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPDATABLE_DRIVER_GLOBAL_OPT_IN_OFF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANGLE_GL_DRIVER_ALL_ANGLE_ON",
    "type" : "int",
    "comment" : " Values for ANGLE_GL_DRIVER_ALL_ANGLE",
    "links" : [ ]
  }, {
    "name" : "ANGLE_GL_DRIVER_ALL_ANGLE_OFF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANGLE_GL_DRIVER_CHOICE_DEFAULT",
    "type" : "String",
    "comment" : " Values for ANGLE_GL_DRIVER_SELECTION_VALUES",
    "links" : [ ]
  }, {
    "name" : "ANGLE_GL_DRIVER_CHOICE_ANGLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANGLE_GL_DRIVER_CHOICE_NATIVE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_ANGLE_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassLoader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLibrarySearchPaths",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLibraryPermittedPaths",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAngleOptInIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldUseAngle",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static GraphicsEnvironment getInstance()",
    "returnType" : "GraphicsEnvironment",
    "comment" : "\n     * Returns the shared {@link GraphicsEnvironment} instance.\n     ",
    "links" : [ "android.os.GraphicsEnvironment" ]
  }, {
    "name" : "public void setup(Context context, Bundle coreSettings)",
    "returnType" : "void",
    "comment" : "\n     * Set up GraphicsEnvironment\n     ",
    "links" : [ ]
  }, {
    "name" : "public void toggleAngleAsSystemDriver(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Switch the system to use ANGLE as the default GLES driver.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String queryAngleChoice(Context context, Bundle coreSettings, String packageName)",
    "returnType" : "String",
    "comment" : "\n     * Query to determine the ANGLE driver choice.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getVulkanVersion(PackageManager pm)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean canInjectLayers(ApplicationInfo ai)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether application is has set the manifest metadata for layer injection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerPaths(ClassLoader classLoader, String searchPaths, String permittedPaths)",
    "returnType" : "void",
    "comment" : "\n     * Store the class loader for namespace lookup later.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDebugLayerPathsFromSettings(Bundle coreSettings, IPackageManager pm, String packageName, ApplicationInfo ai)",
    "returnType" : "String",
    "comment" : "\n     * Returns the debug layer paths from settings.\n     * Returns null if:\n     *     1) The application process is not debuggable or layer injection metadata flag is not\n     *        true; Or\n     *     2) ENABLE_GPU_DEBUG_LAYERS is not true; Or\n     *     3) Package name is not equal to GPU_DEBUG_APP.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getDebugLayerAppPaths(IPackageManager pm, String packageName)",
    "returnType" : "String",
    "comment" : "\n     * Return the debug layer app's on-disk and in-APK lib directories\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean debugLayerEnabled(Bundle coreSettings, String packageName, ApplicationInfo ai)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupGpuLayers(Context context, Bundle coreSettings, PackageManager pm, String packageName, ApplicationInfo ai)",
    "returnType" : "void",
    "comment" : "\n     * Set up layer search paths for all apps\n     ",
    "links" : [ ]
  }, {
    "name" : "private static List<String> getGlobalSettingsString(ContentResolver contentResolver, Bundle bundle, String globalSetting)",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getPackageIndex(String packageName, List<String> packages)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ApplicationInfo getAppInfoWithMetadata(Context context, PackageManager pm, String packageName)",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String queryAngleChoiceInternal(Context context, Bundle bundle, String packageName)",
    "returnType" : "String",
    "comment" : "\n     * Determine which GLES \"driver\" should be used for the package, taking into account the\n     * following factors (in priority order):\n     *\n     * 1) The semi-global switch (i.e. Settings.Global.ANGLE_GL_DRIVER_ALL_ANGLE; which is set by\n     *    the \"angle_gl_driver_all_angle\" setting; which forces a driver for all processes that\n     *    start after the Java run time is up), if it forces a choice;\n     * 2) The per-application switch (i.e. Settings.Global.ANGLE_GL_DRIVER_SELECTION_PKGS and\n     *    Settings.Global.ANGLE_GL_DRIVER_SELECTION_VALUES; which corresponds to the\n     *    “angle_gl_driver_selection_pkgs” and “angle_gl_driver_selection_values” settings); if it\n     *    forces a choice.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getAnglePackageName(PackageManager pm)",
    "returnType" : "String",
    "comment" : "\n     * Get the ANGLE package name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getAngleDebugPackage(Context context, Bundle coreSettings)",
    "returnType" : "String",
    "comment" : "\n     * Check for ANGLE debug package, but only for apps that can load them.\n     * An application can load ANGLE debug package if it is a debuggable application, or\n     * the device is debuggable.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean setupAngle(Context context, Bundle bundle, PackageManager packageManager, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether ANGLE should be used, attempt to set up from apk first, if ANGLE can be\n     * set up from apk, pass ANGLE details down to the C++ GraphicsEnv class via\n     * GraphicsEnv::setAngleInfo(). If apk setup fails, attempt to set up to use system ANGLE.\n     * Return false if both fail.\n     *\n     * @param context - Context of the application.\n     * @param bundle - Bundle of the application.\n     * @param packageManager - PackageManager of the application process.\n     * @param packageName - package name of the application.\n     * @return true: can set up to use ANGLE successfully.\n     *         false: can not set up to use ANGLE (not on allowlist, ANGLE not present, etc.)\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean setupAngleFromApk(Context context, Bundle bundle, PackageManager packageManager, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempt to set up ANGLE from the packaged apk, if the apk can be found, pass ANGLE details to\n     * the C++ GraphicsEnv class.\n     *\n     * @param context - Context of the application.\n     * @param bundle - Bundle of the application.\n     * @param packageManager - PackageManager of the application process.\n     * @param packageName - package name of the application.\n     * @return true: can set up to use ANGLE apk.\n     *         false: can not set up to use ANGLE apk (ANGLE apk not present, etc.)\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean setupAngleFromSystem(Context context, Bundle bundle, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Set up ANGLE from system.\n     *\n     * @param context - Context of the application.\n     * @param bundle - Bundle of the application.\n     * @param packageName - package name of the application.\n     * @return true: can set up to use system ANGLE.\n     *         false: can not set up to use system ANGLE because it doesn't exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldShowAngleInUseDialogBox(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if the \"ANGLE In Use\" dialog box should be shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showAngleInUseDialogBox(Context context)",
    "returnType" : "void",
    "comment" : "\n     * Show the ANGLE in use dialog box.\n     * The ANGLE in use dialog box will show up as long as the application\n     * should use ANGLE. It does not mean the application has successfully\n     * loaded ANGLE because this check happens before the loading completes.\n     * @param context\n     ",
    "links" : [ ]
  }, {
    "name" : "private String[] getAngleEglFeatures(Context context, Bundle coreSettings)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String chooseDriverInternal(Bundle coreSettings, ApplicationInfo ai)",
    "returnType" : "String",
    "comment" : "\n     * Return the driver package name to use. Return null for system driver.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean chooseDriver(Context context, Bundle coreSettings, PackageManager pm, String packageName, ApplicationInfo ai)",
    "returnType" : "boolean",
    "comment" : "\n     * Choose whether the current process should use the builtin or an updated driver.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String chooseAbi(ApplicationInfo ai)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getSphalLibraries(Context context, String driverPackageName)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean isDebuggable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setLayerPaths(ClassLoader classLoader, String layerPaths)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setDebugLayers(String layers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setDebugLayersGLES(String layers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setDriverPathAndSphalLibraries(String path, String sphalLibraries)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setGpuStats(String driverPackageName, String driverVersionName, long driverVersionCode, long driverBuildTime, String appPackageName, int vulkanVersion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetAngleInfo(String path, boolean useNativeDriver, String packageName, String[] features)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean setInjectLayersPrSetDumpable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeToggleAngleAsSystemDriver(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static native void hintActivityLaunch()",
    "returnType" : "void",
    "comment" : "\n     * Hint for GraphicsEnvironment that an activity is launching on the process.\n     * Then the app process is allowed to send stats to GpuStats module.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static GraphicsEnvironment getInstance()", "public void setup(Context context, Bundle coreSettings)", "public void toggleAngleAsSystemDriver(boolean enabled)", "private String queryAngleChoice(Context context, Bundle coreSettings, String packageName)", "private int getVulkanVersion(PackageManager pm)", "private boolean canInjectLayers(ApplicationInfo ai)", "public void setLayerPaths(ClassLoader classLoader, String searchPaths, String permittedPaths)", "public String getDebugLayerPathsFromSettings(Bundle coreSettings, IPackageManager pm, String packageName, ApplicationInfo ai)", "private String getDebugLayerAppPaths(IPackageManager pm, String packageName)", "private boolean debugLayerEnabled(Bundle coreSettings, String packageName, ApplicationInfo ai)", "private void setupGpuLayers(Context context, Bundle coreSettings, PackageManager pm, String packageName, ApplicationInfo ai)", "private static List<String> getGlobalSettingsString(ContentResolver contentResolver, Bundle bundle, String globalSetting)", "private static int getPackageIndex(String packageName, List<String> packages)", "private static ApplicationInfo getAppInfoWithMetadata(Context context, PackageManager pm, String packageName)", "private String queryAngleChoiceInternal(Context context, Bundle bundle, String packageName)", "private String getAnglePackageName(PackageManager pm)", "private String getAngleDebugPackage(Context context, Bundle coreSettings)", "private boolean setupAngle(Context context, Bundle bundle, PackageManager packageManager, String packageName)", "private boolean setupAngleFromApk(Context context, Bundle bundle, PackageManager packageManager, String packageName)", "private boolean setupAngleFromSystem(Context context, Bundle bundle, String packageName)", "private boolean shouldShowAngleInUseDialogBox(Context context)", "public void showAngleInUseDialogBox(Context context)", "private String[] getAngleEglFeatures(Context context, Bundle coreSettings)", "private String chooseDriverInternal(Bundle coreSettings, ApplicationInfo ai)", "private boolean chooseDriver(Context context, Bundle coreSettings, PackageManager pm, String packageName, ApplicationInfo ai)", "private static String chooseAbi(ApplicationInfo ai)", "private String getSphalLibraries(Context context, String driverPackageName)", "private static native boolean isDebuggable()", "private static native void setLayerPaths(ClassLoader classLoader, String layerPaths)", "private static native void setDebugLayers(String layers)", "private static native void setDebugLayersGLES(String layers)", "private static native void setDriverPathAndSphalLibraries(String path, String sphalLibraries)", "private static native void setGpuStats(String driverPackageName, String driverVersionName, long driverVersionCode, long driverBuildTime, String appPackageName, int vulkanVersion)", "private static native void nativeSetAngleInfo(String path, boolean useNativeDriver, String packageName, String[] features)", "private static native boolean setInjectLayersPrSetDumpable()", "private static native void nativeToggleAngleAsSystemDriver(boolean enabled)", "public static native void hintActivityLaunch()" ],
  "variableNames" : [ "sInstance", "DEBUG", "TAG", "SYSTEM_DRIVER_NAME", "SYSTEM_DRIVER_VERSION_NAME", "SYSTEM_DRIVER_VERSION_CODE", "ANGLE_DRIVER_NAME", "ANGLE_DRIVER_VERSION_NAME", "ANGLE_DRIVER_VERSION_CODE", "PROPERTY_GFX_DRIVER_PRODUCTION", "PROPERTY_GFX_DRIVER_PRERELEASE", "PROPERTY_GFX_DRIVER_BUILD_TIME", "METADATA_DRIVER_BUILD_TIME", "METADATA_DEVELOPER_DRIVER_ENABLE", "METADATA_INJECT_LAYERS_ENABLE", "UPDATABLE_DRIVER_ALLOWLIST_ALL", "UPDATABLE_DRIVER_SPHAL_LIBRARIES_FILENAME", "ACTION_ANGLE_FOR_ANDROID", "ACTION_ANGLE_FOR_ANDROID_TOAST_MESSAGE", "INTENT_KEY_A4A_TOAST_MESSAGE", "VULKAN_1_0", "VULKAN_1_1", "VULKAN_1_2", "VULKAN_1_3", "UPDATABLE_DRIVER_GLOBAL_OPT_IN_DEFAULT", "UPDATABLE_DRIVER_GLOBAL_OPT_IN_PRODUCTION_DRIVER", "UPDATABLE_DRIVER_GLOBAL_OPT_IN_PRERELEASE_DRIVER", "UPDATABLE_DRIVER_GLOBAL_OPT_IN_OFF", "ANGLE_GL_DRIVER_ALL_ANGLE_ON", "ANGLE_GL_DRIVER_ALL_ANGLE_OFF", "ANGLE_GL_DRIVER_CHOICE_DEFAULT", "ANGLE_GL_DRIVER_CHOICE_ANGLE", "ANGLE_GL_DRIVER_CHOICE_NATIVE", "SYSTEM_ANGLE_STRING", "mClassLoader", "mLibrarySearchPaths", "mLibraryPermittedPaths", "mAngleOptInIndex", "mShouldUseAngle" ]
}