{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/virtual/camera/VirtualCameraCallback.java",
  "packageName" : "android.companion.virtual.camera",
  "className" : "VirtualCameraCallback",
  "comment" : "\n * Interface to be provided when creating a new {@link VirtualCamera} in order to receive callbacks\n * from the framework and the camera system.\n *\n * @see VirtualCameraConfig.Builder#setVirtualCameraCallback(Executor, VirtualCameraCallback)\n * @hide\n ",
  "links" : [ "android.companion.virtual.camera.VirtualCamera" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onStreamConfigured(int streamId, @NonNull Surface surface, @IntRange(from = 1) int width, @IntRange(from = 1) int height, @ImageFormat.Format int format)",
    "returnType" : "void",
    "comment" : "\n     * Called when one of the requested stream has been configured by the virtual camera service and\n     * is ready to receive data onto its {@link Surface}\n     *\n     * @param streamId The id of the configured stream\n     * @param surface The surface to write data into for this stream\n     * @param width The width of the surface\n     * @param height The height of the surface\n     * @param format The {@link ImageFormat} of the surface\n     ",
    "links" : [ "android.graphics.ImageFormat", "android.view.Surface" ]
  }, {
    "name" : " void onProcessCaptureRequest(int streamId, long frameId)",
    "returnType" : "void",
    "comment" : "\n     * The client application is requesting a camera frame for the given streamId and frameId.\n     *\n     * <p>The virtual camera needs to write the frame data in the {@link Surface} corresponding to\n     * this stream that was provided during the\n     * {@link #onStreamConfigured(int, Surface, int, int, int)} call.\n     *\n     * @param streamId The streamId for which the frame is requested. This corresponds to the\n     *     streamId that was given in {@link #onStreamConfigured(int, Surface, int, int, int)}\n     * @param frameId The frameId that is being requested. Each request will have a different\n     *     frameId, that will be increasing for each call with a particular streamId.\n     ",
    "links" : [ "android.view.Surface", "#onStreamConfigured(int" ]
  }, {
    "name" : " void onStreamClosed(int streamId)",
    "returnType" : "void",
    "comment" : "\n     * The stream previously configured when\n     * {@link #onStreamConfigured(int, Surface, int, int, int)} was called is now being closed and\n     * associated resources can be freed. The Surface corresponding to that streamId was disposed on\n     * the client side and should not be used anymore by the virtual camera owner.\n     *\n     * @param streamId The id of the stream that was closed.\n     ",
    "links" : [ "#onStreamConfigured(int" ]
  } ],
  "methodNames" : [ " void onStreamConfigured(int streamId, @NonNull Surface surface, @IntRange(from = 1) int width, @IntRange(from = 1) int height, @ImageFormat.Format int format)", " void onProcessCaptureRequest(int streamId, long frameId)", " void onStreamClosed(int streamId)" ],
  "variableNames" : [ ]
}