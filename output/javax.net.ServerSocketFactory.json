{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ServerSocketFactory.java",
  "packageName" : "javax.net",
  "className" : "ServerSocketFactory",
  "comment" : "\n * This class creates server sockets.  It may be subclassed by other\n * factories, which create particular types of server sockets.  This\n * provides a general framework for the addition of public socket-level\n * functionality.  It is the server side analogue of a socket factory,\n * and similarly provides a way to capture a variety of policies related\n * to the sockets being constructed.\n *\n * <P> Like socket factories, server Socket factory instances have\n * methods used to create sockets. There is also an environment\n * specific default server socket factory; frameworks will often use\n * their own customized factory.\n *\n * @since 1.4\n * @see SocketFactory\n *\n * @author David Brownell\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "theFactory",
    "type" : "ServerSocketFactory",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ServerSocketFactory getDefault()",
    "returnType" : "ServerSocketFactory",
    "comment" : "\n     * Returns a copy of the environment's default socket factory.\n     *\n     * @return the <code>ServerSocketFactory</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public ServerSocket createServerSocket() throws IOException",
    "returnType" : "ServerSocket",
    "comment" : "\n     * Returns an unbound server socket.  The socket is configured with\n     * the socket options (such as accept timeout) given to this factory.\n     *\n     * @return the unbound socket\n     * @throws IOException if the socket cannot be created\n     * @see java.net.ServerSocket#bind(java.net.SocketAddress)\n     * @see java.net.ServerSocket#bind(java.net.SocketAddress, int)\n     * @see java.net.ServerSocket#ServerSocket()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ServerSocket createServerSocket(int port) throws IOException",
    "returnType" : "ServerSocket",
    "comment" : "\n     * Returns a server socket bound to the specified port.\n     * The socket is configured with the socket options\n     * (such as accept timeout) given to this factory.\n     * <P>\n     * If there is a security manager, its <code>checkListen</code>\n     * method is called with the <code>port</code> argument as its\n     * argument to ensure the operation is allowed. This could result\n     * in a SecurityException.\n     *\n     * @param port the port to listen to\n     * @return the <code>ServerSocket</code>\n     * @throws IOException for networking errors\n     * @throws SecurityException if a security manager exists and its\n     *         <code>checkListen</code> method doesn't allow the operation.\n     * @throws IllegalArgumentException if the port parameter is outside the\n     *         specified range of valid port values, which is between 0 and\n     *         65535, inclusive.\n     * @see    SecurityManager#checkListen\n     * @see java.net.ServerSocket#ServerSocket(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ServerSocket createServerSocket(int port, int backlog) throws IOException",
    "returnType" : "ServerSocket",
    "comment" : "\n     * Returns a server socket bound to the specified port, and uses the\n     * specified connection backlog.  The socket is configured with\n     * the socket options (such as accept timeout) given to this factory.\n     * <P>\n     * The <code>backlog</code> argument must be a positive\n     * value greater than 0. If the value passed if equal or less\n     * than 0, then the default value will be assumed.\n     * <P>\n     * If there is a security manager, its <code>checkListen</code>\n     * method is called with the <code>port</code> argument as its\n     * argument to ensure the operation is allowed. This could result\n     * in a SecurityException.\n     *\n     * @param port the port to listen to\n     * @param backlog how many connections are queued\n     * @return the <code>ServerSocket</code>\n     * @throws IOException for networking errors\n     * @throws SecurityException if a security manager exists and its\n     *         <code>checkListen</code> method doesn't allow the operation.\n     * @throws IllegalArgumentException if the port parameter is outside the\n     *         specified range of valid port values, which is between 0 and\n     *         65535, inclusive.\n     * @see    SecurityManager#checkListen\n     * @see java.net.ServerSocket#ServerSocket(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException",
    "returnType" : "ServerSocket",
    "comment" : "\n     * Returns a server socket bound to the specified port,\n     * with a specified listen backlog and local IP.\n     * <P>\n     * The <code>ifAddress</code> argument can be used on a multi-homed\n     * host for a <code>ServerSocket</code> that will only accept connect\n     * requests to one of its addresses. If <code>ifAddress</code> is null,\n     * it will accept connections on all local addresses. The socket is\n     * configured with the socket options (such as accept timeout) given\n     * to this factory.\n     * <P>\n     * The <code>backlog</code> argument must be a positive\n     * value greater than 0. If the value passed if equal or less\n     * than 0, then the default value will be assumed.\n     * <P>\n     * If there is a security manager, its <code>checkListen</code>\n     * method is called with the <code>port</code> argument as its\n     * argument to ensure the operation is allowed. This could result\n     * in a SecurityException.\n     *\n     * @param port the port to listen to\n     * @param backlog how many connections are queued\n     * @param ifAddress the network interface address to use\n     * @return the <code>ServerSocket</code>\n     * @throws IOException for networking errors\n     * @throws SecurityException if a security manager exists and its\n     *         <code>checkListen</code> method doesn't allow the operation.\n     * @throws IllegalArgumentException if the port parameter is outside the\n     *         specified range of valid port values, which is between 0 and\n     *         65535, inclusive.\n     * @see    SecurityManager#checkListen\n     * @see java.net.ServerSocket#ServerSocket(int, int, java.net.InetAddress)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ServerSocketFactory getDefault()", "public ServerSocket createServerSocket() throws IOException", "public abstract ServerSocket createServerSocket(int port) throws IOException", "public abstract ServerSocket createServerSocket(int port, int backlog) throws IOException", "public abstract ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException" ],
  "variableNames" : [ "theFactory" ]
}