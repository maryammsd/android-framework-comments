{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/ipsec/ike/IkeSessionParams.java",
  "packageName" : "android.net.ipsec.ike",
  "className" : "Builder",
  "comment" : " This class can be used to incrementally construct a {@link IkeSessionParams}. ",
  "links" : [ "android.net.ipsec.ike.IkeSessionParams" ],
  "variables" : [ {
    "name" : "mConnectivityManager",
    "type" : "ConnectivityManager",
    "comment" : " the IkeSessionParams built from it will still work in the old way. @see #Builder(Context)",
    "links" : [ ]
  }, {
    "name" : "mSaProposalList",
    "type" : "List<IkeSaProposal>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfigRequestList",
    "type" : "List<IkeConfigAttribute>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetransTimeoutMsList",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLivenessRetransTimeoutMsList",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServerHostname",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerConfiguredNetwork",
    "type" : "Network",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalIdentification",
    "type" : "IkeIdentification",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteIdentification",
    "type" : "IkeIdentification",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalAuthConfig",
    "type" : "IkeAuthConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteAuthConfig",
    "type" : "IkeAuthConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIke3gppExtension",
    "type" : "Ike3gppExtension",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIkeOptions",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardLifetimeSec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSoftLifetimeSec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDpdDelaySec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNattKeepaliveDelaySec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDscp",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsIkeFragmentationSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIpVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncapType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setServerHostname(@NonNull String serverHostname)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the server hostname for the {@link IkeSessionParams} being built.\n         *\n         * @param serverHostname the hostname of the IKE server, such as \"ike.android.com\".\n         * @return Builder this, to facilitate chaining.\n         ",
    "links" : [ "android.net.ipsec.ike.IkeSessionParams" ]
  }, {
    "name" : "public Builder setNetwork(@Nullable Network network)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the {@link Network} for the {@link IkeSessionParams} being built.\n         *\n         * <p>If no {@link Network} is provided, the default Network (as per {@link\n         * ConnectivityManager#getActiveNetwork()}) will be used when constructing an {@link\n         * IkeSession}.\n         *\n         * @param network the {@link Network} that IKE Session will use, or {@code null} to clear\n         *     the previously set {@link Network}\n         * @return Builder this, to facilitate chaining.\n         ",
    "links" : [ "android.net.ConnectivityManager#getActiveNetwork()", "android.net.ipsec.ike.IkeSessionParams", "android.net.ipsec.ike.IkeSession", "android.net.Network" ]
  }, {
    "name" : "public Builder setLocalIdentification(@NonNull IkeIdentification identification)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets local IKE identification for the {@link IkeSessionParams} being built.\n         *\n         * <p>It is not allowed to use KEY ID together with digital-signature-based authentication\n         * as per RFC 7296.\n         *\n         * @param identification the local IKE identification.\n         * @return Builder this, to facilitate chaining.\n         ",
    "links" : [ "android.net.ipsec.ike.IkeSessionParams" ]
  }, {
    "name" : "public Builder setRemoteIdentification(@NonNull IkeIdentification identification)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets remote IKE identification for the {@link IkeSessionParams} being built.\n         *\n         * @param identification the remote IKE identification.\n         * @return Builder this, to facilitate chaining.\n         ",
    "links" : [ "android.net.ipsec.ike.IkeSessionParams" ]
  }, {
    "name" : "public Builder addSaProposal(@NonNull IkeSaProposal proposal)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds an IKE SA proposal to the {@link IkeSessionParams} being built.\n         *\n         * @param proposal IKE SA proposal.\n         * @return Builder this, to facilitate chaining.\n         * @deprecated Callers should use {@link #addIkeSaProposal(IkeSaProposal)}. This method is\n         *     deprecated because its name does not match the input type.\n         * @hide\n         ",
    "links" : [ "android.net.ipsec.ike.IkeSessionParams", "#addIkeSaProposal(IkeSaProposal)" ]
  }, {
    "name" : "public Builder addIkeSaProposal(@NonNull IkeSaProposal proposal)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds an IKE SA proposal to the {@link IkeSessionParams} being built.\n         *\n         * @param proposal IKE SA proposal.\n         * @return Builder this, to facilitate chaining.\n         ",
    "links" : [ "android.net.ipsec.ike.IkeSessionParams" ]
  }, {
    "name" : "private Builder setAuth(IkeAuthConfig local, IkeAuthConfig remote)",
    "returnType" : "Builder",
    "comment" : "\n         * Configures authentication for IKE Session. Internal use only.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAuthPsk(@NonNull byte[] sharedKey)",
    "returnType" : "Builder",
    "comment" : " authentication configurations",
    "links" : [ ]
  }, {
    "name" : "public Builder setAuthEap(@Nullable X509Certificate serverCaCert, @NonNull EapSessionConfig eapConfig)",
    "returnType" : "Builder",
    "comment" : " retrieve authentication configurations",
    "links" : [ ]
  }, {
    "name" : "public Builder setAuthDigitalSignature(@Nullable X509Certificate serverCaCert, @NonNull X509Certificate clientEndCert, @NonNull PrivateKey clientPrivateKey)",
    "returnType" : "Builder",
    "comment" : " authentication configurations",
    "links" : [ ]
  }, {
    "name" : "public Builder setAuthDigitalSignature(@Nullable X509Certificate serverCaCert, @NonNull X509Certificate clientEndCert, @NonNull List<X509Certificate> clientIntermediateCerts, @NonNull PrivateKey clientPrivateKey)",
    "returnType" : "Builder",
    "comment" : " authentication configurations",
    "links" : [ ]
  }, {
    "name" : "private Builder addConfigRequest(IkeConfigAttribute configReq)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a configuration request. Internal use only.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addPcscfServerRequest(@NonNull InetAddress address)",
    "returnType" : "Builder",
    "comment" : " #getConfigurationRequests is defined to retrieve PCSCF server requests",
    "links" : [ ]
  }, {
    "name" : "public Builder addPcscfServerRequest(int addressFamily)",
    "returnType" : "Builder",
    "comment" : " #getConfigurationRequests is defined to retrieve PCSCF server requests",
    "links" : [ ]
  }, {
    "name" : "public Builder setLifetimeSeconds(@IntRange(from = IKE_HARD_LIFETIME_SEC_MINIMUM, to = IKE_HARD_LIFETIME_SEC_MAXIMUM) int hardLifetimeSeconds, @IntRange(from = IKE_SOFT_LIFETIME_SEC_MINIMUM, to = IKE_HARD_LIFETIME_SEC_MAXIMUM) int softLifetimeSeconds)",
    "returnType" : "Builder",
    "comment" : " the lifetimes",
    "links" : [ ]
  }, {
    "name" : "public Builder setDpdDelaySeconds(@IntRange(from = IKE_DPD_DELAY_SEC_MIN) int dpdDelaySeconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the Dead Peer Detection(DPD) delay in seconds.\n         *\n         * @param dpdDelaySeconds number of seconds after which IKE SA will initiate DPD if no\n         *     inbound cryptographically protected IKE message was received. Defaults to 120\n         *     seconds. MUST be a value greater than or equal to than 20 seconds. Setting the value\n         *     to {@link IkeSessionParams#IKE_DPD_DELAY_SEC_DISABLED} will disable DPD.\n         * @return Builder this, to facilitate chaining.\n         ",
    "links" : [ "android.net.ipsec.ike.IkeSessionParams#IKE_DPD_DELAY_SEC_DISABLED" ]
  }, {
    "name" : "public Builder setNattKeepAliveDelaySeconds(@IntRange(from = IKE_NATT_KEEPALIVE_DELAY_SEC_MIN, to = IKE_NATT_KEEPALIVE_DELAY_SEC_MAX) int nattKeepaliveDelaySeconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the Network Address Translation Traversal (NATT) keepalive delay in seconds.\n         *\n         * @param nattKeepaliveDelaySeconds number of seconds between keepalive packet\n         *     transmissions. Defaults to 10 seconds. MUST be a value from 10 seconds to 3600\n         *     seconds, inclusive.\n         * @return Builder this, to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDscp(@IntRange(from = DSCP_MIN, to = DSCP_MAX) int dscp)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the DSCP field of the IKE packets.\n         *\n         * <p>Differentiated services code point (DSCP) is a 6-bit field in the IP header that is\n         * used for packet classification and prioritization. The DSCP field is encoded in the 6\n         * higher order bits of the Type of Service (ToS) in IPv4 header, or the traffic class (TC)\n         * field in IPv6 header.\n         *\n         * <p>Any 6-bit values (0 to 63) are acceptable, whether IANA-defined, or\n         * implementation-specific values.\n         *\n         * @see <a href=\"https://tools.ietf.org/html/rfc2474\">RFC 2474, Definition of the\n         *     Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</a>\n         * @see <a href=\"https://www.iana.org/assignments/dscp-registry/dscp-registry.xhtml\">\n         *     Differentiated Services Field Codepoints (DSCP)</a>\n         * @param dscp the dscp value. Defaults to 0.\n         * @return Builder this, to facilitate chaining.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIpVersion(@EspIpVersion int ipVersion)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the IP version to use for ESP packets.\n         *\n         * @param ipVersion the IP version to use.\n         * @return the {@code Builder} to facilitate chaining.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEncapType(@EspEncapType int encapType)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the encapsulation type to use for ESP packets.\n         *\n         * @param encapType the IP version to use.\n         * @return the {@code Builder} to facilitate chaining.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRetransmissionTimeoutsMillis(@NonNull int[] retransTimeoutMillisList)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the retransmission timeout list in milliseconds.\n         *\n         * <p>Configures the retransmission by providing an array of relative retransmission\n         * timeouts in milliseconds. After sending out a request and before receiving the response,\n         * the IKE Session will iterate through the array and wait for the relative timeout before\n         * the next retry. If the last timeout is exceeded, the IKE Session will be terminated.\n         *\n         * <p>Each element in the array MUST be a value from 500 ms to 1800000 ms (30 minutes). The\n         * length of the array MUST NOT exceed 10. This retransmission timeout list defaults to\n         * {0.5s, 1s, 2s, 4s, 8s}\n         *\n         * @param retransTimeoutMillisList the array of relative retransmission timeout in\n         *     milliseconds.\n         * @return Builder this, to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLivenessRetransmissionTimeoutsMillis(@NonNull int[] retransTimeoutMillisList)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a list of retransmission timeouts in milliseconds for performing on-demand liveness\n         * checks.\n         *\n         * <p>Provides the user the ability to set an array of relative retransmission timeouts for\n         * on-demand liveness checks in milliseconds. After sending out a request and before\n         * receiving the response, the IKE Session will iterate through the array and wait for the\n         * relative timeout before the next retry. If the last timeout is exceeded, the IKE Session\n         * will be terminated.\n         *\n         * <p>Each element in the array MUST be a value from 500 ms to 30000 ms. The length of the\n         * array MUST NOT exceed 10. The total retransmission timeouts MUST NOT exceed 30000 ms.\n         * This retransmission timeout list defaults to {0.5s, 1s, 2s, 4s, 8s}.\n         *\n         * @param retransTimeoutMillisList the array of relative retransmission timeout in\n         *     milliseconds for checking peer's liveness.\n         * @return Builder this, to facilitate chaining.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIke3gppExtension(@NonNull Ike3gppExtension ike3gppExtension)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the parameters to be used for 3GPP-specific behavior during the IKE Session.\n         *\n         * <p>Setting the Ike3gppExtension also enables support for non-configurable payloads, such\n         * as the Notify - BACKOFF_TIMER payload.\n         *\n         * @see 3GPP ETSI TS 24.302: Access to the 3GPP Evolved Packet Core (EPC) via non-3GPP\n         *     access networks\n         * @param ike3gppExtension the Ike3gppExtension to use for this IKE Session.\n         * @return Builder this, to facilitate chaining.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addIkeOption(@IkeOption int ikeOption)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the specified IKE Option as enabled.\n         *\n         * @param ikeOption the option to be enabled.\n         * @return Builder this, to facilitate chaining.\n         * @throws IllegalArgumentException if the provided option is invalid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addIkeOptionInternal(@IkeOption int ikeOption)",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder removeIkeOption(@IkeOption int ikeOption)",
    "returnType" : "Builder",
    "comment" : " clearing all enabled IKE options",
    "links" : [ ]
  }, {
    "name" : "public IkeSessionParams build()",
    "returnType" : "IkeSessionParams",
    "comment" : "\n         * Validates and builds the {@link IkeSessionParams}.\n         *\n         * @return IkeSessionParams the validated IkeSessionParams.\n         ",
    "links" : [ "android.net.ipsec.ike.IkeSessionParams" ]
  } ],
  "methodNames" : [ "public Builder setServerHostname(@NonNull String serverHostname)", "public Builder setNetwork(@Nullable Network network)", "public Builder setLocalIdentification(@NonNull IkeIdentification identification)", "public Builder setRemoteIdentification(@NonNull IkeIdentification identification)", "public Builder addSaProposal(@NonNull IkeSaProposal proposal)", "public Builder addIkeSaProposal(@NonNull IkeSaProposal proposal)", "private Builder setAuth(IkeAuthConfig local, IkeAuthConfig remote)", "public Builder setAuthPsk(@NonNull byte[] sharedKey)", "public Builder setAuthEap(@Nullable X509Certificate serverCaCert, @NonNull EapSessionConfig eapConfig)", "public Builder setAuthDigitalSignature(@Nullable X509Certificate serverCaCert, @NonNull X509Certificate clientEndCert, @NonNull PrivateKey clientPrivateKey)", "public Builder setAuthDigitalSignature(@Nullable X509Certificate serverCaCert, @NonNull X509Certificate clientEndCert, @NonNull List<X509Certificate> clientIntermediateCerts, @NonNull PrivateKey clientPrivateKey)", "private Builder addConfigRequest(IkeConfigAttribute configReq)", "public Builder addPcscfServerRequest(@NonNull InetAddress address)", "public Builder addPcscfServerRequest(int addressFamily)", "public Builder setLifetimeSeconds(@IntRange(from = IKE_HARD_LIFETIME_SEC_MINIMUM, to = IKE_HARD_LIFETIME_SEC_MAXIMUM) int hardLifetimeSeconds, @IntRange(from = IKE_SOFT_LIFETIME_SEC_MINIMUM, to = IKE_HARD_LIFETIME_SEC_MAXIMUM) int softLifetimeSeconds)", "public Builder setDpdDelaySeconds(@IntRange(from = IKE_DPD_DELAY_SEC_MIN) int dpdDelaySeconds)", "public Builder setNattKeepAliveDelaySeconds(@IntRange(from = IKE_NATT_KEEPALIVE_DELAY_SEC_MIN, to = IKE_NATT_KEEPALIVE_DELAY_SEC_MAX) int nattKeepaliveDelaySeconds)", "public Builder setDscp(@IntRange(from = DSCP_MIN, to = DSCP_MAX) int dscp)", "public Builder setIpVersion(@EspIpVersion int ipVersion)", "public Builder setEncapType(@EspEncapType int encapType)", "public Builder setRetransmissionTimeoutsMillis(@NonNull int[] retransTimeoutMillisList)", "public Builder setLivenessRetransmissionTimeoutsMillis(@NonNull int[] retransTimeoutMillisList)", "public Builder setIke3gppExtension(@NonNull Ike3gppExtension ike3gppExtension)", "public Builder addIkeOption(@IkeOption int ikeOption)", "public Builder addIkeOptionInternal(@IkeOption int ikeOption)", "public Builder removeIkeOption(@IkeOption int ikeOption)", "public IkeSessionParams build()" ],
  "variableNames" : [ "mConnectivityManager", "mSaProposalList", "mConfigRequestList", "mRetransTimeoutMsList", "mLivenessRetransTimeoutMsList", "mServerHostname", "mCallerConfiguredNetwork", "mLocalIdentification", "mRemoteIdentification", "mLocalAuthConfig", "mRemoteAuthConfig", "mIke3gppExtension", "mIkeOptions", "mHardLifetimeSec", "mSoftLifetimeSec", "mDpdDelaySec", "mNattKeepaliveDelaySec", "mDscp", "mIsIkeFragmentationSupported", "mIpVersion", "mEncapType" ]
}