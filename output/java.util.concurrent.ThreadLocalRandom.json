{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ThreadLocalRandom.java",
  "packageName" : "java.util.concurrent",
  "className" : "ThreadLocalRandom",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "initialized",
    "type" : "boolean",
    "comment" : "\n     * Field used only during singleton initialization.\n     * True when constructor completes.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : "\n     * @serialField rnd long\n     *              seed for random computations\n     * @serialField initialized boolean\n     *              always true\n     ",
    "links" : [ ]
  }, {
    "name" : "GOLDEN_GAMMA",
    "type" : "long",
    "comment" : "\n     * The seed increment.  This must be an odd value for the generator to\n     * have the maximum period (2 to the 64th power).\n     *\n     * The value 0x9e3779b97f4a7c15L is odd, and moreover consists of the\n     * first 64 bits of the fractional part of the golden ratio,\n     * which is known to generate good Weyl sequences.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROBE_INCREMENT",
    "type" : "int",
    "comment" : "\n     * The increment for generating probe values.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEEDER_INCREMENT",
    "type" : "long",
    "comment" : "\n     * The increment of seeder per new instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "BAD_BOUND",
    "type" : "String",
    "comment" : " IllegalArgumentException messages",
    "links" : [ ]
  }, {
    "name" : "BAD_RANGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BAD_SIZE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U",
    "type" : "Unsafe",
    "comment" : " Unsafe mechanics",
    "links" : [ ]
  }, {
    "name" : "SEED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROBE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDARY",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THREADLOCALS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INHERITABLETHREADLOCALS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INHERITEDACCESSCONTROLCONTEXT",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "probeGenerator",
    "type" : "AtomicInteger",
    "comment" : " Generates per-thread initialization/probe field ",
    "links" : [ ]
  }, {
    "name" : "instance",
    "type" : "ThreadLocalRandom",
    "comment" : " The common ThreadLocalRandom ",
    "links" : [ ]
  }, {
    "name" : "seeder",
    "type" : "AtomicLong",
    "comment" : "\n     * The next seed for default constructors.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int mix32(long z)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final void localInit()",
    "returnType" : "void",
    "comment" : "\n     * Initialize Thread fields for the current thread.  Called only\n     * when Thread.threadLocalRandomProbe is zero, indicating that a\n     * thread local seed value needs to be generated. Note that even\n     * though the initialization is purely thread-local, we need to\n     * rely on (static) atomic generators to initialize the values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ThreadLocalRandom current()",
    "returnType" : "ThreadLocalRandom",
    "comment" : "\n     * Returns the current thread's {@code ThreadLocalRandom} object.\n     * Methods of this object should be called only by the current thread,\n     * not by other threads.\n     *\n     * @return the current thread's {@code ThreadLocalRandom}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSeed(long seed)",
    "returnType" : "void",
    "comment" : "\n     * Throws {@code UnsupportedOperationException}.  Setting seeds in\n     * this generator is not supported.\n     *\n     * @throws UnsupportedOperationException always\n     ",
    "links" : [ ]
  }, {
    "name" : " final long nextSeed()",
    "returnType" : "long",
    "comment" : "\n     * Update the thread local seed value by adding to it the sum\n     * of {@code GOLDEN_GAMMA} (an odd value) and twice the thread id.\n     * This sum is always odd (to guarantee that the generator\n     * has maximum period) and is different for different threads.\n     * Because thread id values are allocated consecutively starting\n     * from 0, the high 32 bits of this sum will be the same as the\n     * high 32 bits of {@code GOLDEN_GAMMA} unless an extremely large\n     * number of threads have been created, and so the overall\n     * value added to the thread local seed value will have at least\n     * fourteen 01 and 10 transitions (see the documentation for the\n     * method {@code mixGamma} in class {@code SplittableRandom}),\n     * which should provide adequate statistical quality for\n     * applications likely to use {@code ThreadLocalRandom}.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int next(int bits)",
    "returnType" : "int",
    "comment" : "\n     * Generates a pseudorandom number with the indicated number of\n     * low-order bits.  Because this class has no subclasses, this\n     * method cannot be invoked or overridden.\n     *\n     * @param  bits random bits\n     * @return the next pseudorandom value from this random number\n     *         generator's sequence\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int getProbe()",
    "returnType" : "int",
    "comment" : "\n     * Returns the probe value for the current thread without forcing\n     * initialization. Note that invoking ThreadLocalRandom.current()\n     * can be used to force initialization on zero return.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int advanceProbe(int probe)",
    "returnType" : "int",
    "comment" : "\n     * Pseudo-randomly advances and records the given probe value for the\n     * given thread.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int nextSecondarySeed()",
    "returnType" : "int",
    "comment" : "\n     * Returns the pseudo-randomly initialized or updated secondary seed.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final void eraseThreadLocals(Thread thread)",
    "returnType" : "void",
    "comment" : "\n     * Erases ThreadLocals by nulling out Thread maps.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final void setInheritedAccessControlContext(Thread thread, @SuppressWarnings(\"removal\") AccessControlContext acc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves the {@code ThreadLocalRandom} to a stream (that is, serializes it).\n     * @param s the stream\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object readResolve()",
    "returnType" : "Object",
    "comment" : "\n     * Returns the {@link #current() current} thread's {@code ThreadLocalRandom}.\n     * @return the {@link #current() current} thread's {@code ThreadLocalRandom}\n     ",
    "links" : [ "#current()" ]
  }, {
    "name" : "public boolean nextBoolean()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int nextInt()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int nextInt(int bound)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int nextInt(int origin, int bound)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public long nextLong()",
    "returnType" : "long",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public long nextLong(long bound)",
    "returnType" : "long",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public long nextLong(long origin, long bound)",
    "returnType" : "long",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public float nextFloat()",
    "returnType" : "float",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public float nextFloat(float bound)",
    "returnType" : "float",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @implNote {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public float nextFloat(float origin, float bound)",
    "returnType" : "float",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @implNote {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public double nextDouble()",
    "returnType" : "double",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public double nextDouble(double bound)",
    "returnType" : "double",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @implNote {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public double nextDouble(double origin, double bound)",
    "returnType" : "double",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @implNote {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints(long streamSize)",
    "returnType" : "IntStream",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints()",
    "returnType" : "IntStream",
    "comment" : "\n     * {@inheritDoc}\n     * @implNote This method is implemented to be equivalent to\n     *           {@code ints(Long.MAX_VALUE)}.\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",
    "returnType" : "IntStream",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints(int randomNumberOrigin, int randomNumberBound)",
    "returnType" : "IntStream",
    "comment" : "\n     * {@inheritDoc}\n     * @implNote This method is implemented to be equivalent to\n     *           {@code ints(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongStream longs(long streamSize)",
    "returnType" : "LongStream",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongStream longs()",
    "returnType" : "LongStream",
    "comment" : "\n     * {@inheritDoc}\n     * @implNote This method is implemented to be equivalent to\n     *           {@code longs(Long.MAX_VALUE)}.\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound)",
    "returnType" : "LongStream",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongStream longs(long randomNumberOrigin, long randomNumberBound)",
    "returnType" : "LongStream",
    "comment" : "\n     * {@inheritDoc}\n     * @implNote This method is implemented to be equivalent to\n     *           {@code longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream doubles(long streamSize)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream doubles()",
    "returnType" : "DoubleStream",
    "comment" : "\n     * {@inheritDoc}\n     * @implNote This method is implemented to be equivalent to\n     *           {@code doubles(Long.MAX_VALUE)}.\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * {@inheritDoc}\n     * @implNote This method is implemented to be equivalent to\n     *           {@code doubles(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n     * @throws IllegalArgumentException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int mix32(long z)", " static final void localInit()", "public static ThreadLocalRandom current()", "public void setSeed(long seed)", " final long nextSeed()", "protected int next(int bits)", " static final int getProbe()", " static final int advanceProbe(int probe)", " static final int nextSecondarySeed()", " static final void eraseThreadLocals(Thread thread)", " static final void setInheritedAccessControlContext(Thread thread, @SuppressWarnings(\"removal\") AccessControlContext acc)", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private Object readResolve()", "public boolean nextBoolean()", "public int nextInt()", "public int nextInt(int bound)", "public int nextInt(int origin, int bound)", "public long nextLong()", "public long nextLong(long bound)", "public long nextLong(long origin, long bound)", "public float nextFloat()", "public float nextFloat(float bound)", "public float nextFloat(float origin, float bound)", "public double nextDouble()", "public double nextDouble(double bound)", "public double nextDouble(double origin, double bound)", "public IntStream ints(long streamSize)", "public IntStream ints()", "public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound)", "public IntStream ints(int randomNumberOrigin, int randomNumberBound)", "public LongStream longs(long streamSize)", "public LongStream longs()", "public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound)", "public LongStream longs(long randomNumberOrigin, long randomNumberBound)", "public DoubleStream doubles(long streamSize)", "public DoubleStream doubles()", "public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)", "public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound)" ],
  "variableNames" : [ "initialized", "serialVersionUID", "serialPersistentFields", "GOLDEN_GAMMA", "PROBE_INCREMENT", "SEEDER_INCREMENT", "BAD_BOUND", "BAD_RANGE", "BAD_SIZE", "U", "SEED", "PROBE", "SECONDARY", "THREADLOCALS", "INHERITABLETHREADLOCALS", "INHERITEDACCESSCONTROLCONTEXT", "probeGenerator", "instance", "seeder" ]
}