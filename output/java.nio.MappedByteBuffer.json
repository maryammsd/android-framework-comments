{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/MappedByteBuffer.java",
  "packageName" : "java.nio",
  "className" : "MappedByteBuffer",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "fd",
    "type" : "FileDescriptor",
    "comment" : " operations if valid; null if the buffer is not mapped.",
    "links" : [ ]
  }, {
    "name" : "isSync",
    "type" : "boolean",
    "comment" : " determines the behavior of force operations.",
    "links" : [ ]
  }, {
    "name" : "unused",
    "type" : "byte",
    "comment" : " Android-added: Added the unused field to avoid compiler optimization in load();",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final boolean isSync()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this buffer was mapped against a non-volatile\n     * memory device by passing one of the sync map modes {@link\n     * jdk.nio.mapmode.ExtendedMapMode#READ_ONLY_SYNC\n     * ExtendedMapModeMapMode#READ_ONLY_SYNC} or {@link\n     * jdk.nio.mapmode.ExtendedMapMode#READ_ONLY_SYNC\n     * ExtendedMapMode#READ_WRITE_SYNC} in the call to {@link\n     * java.nio.channels.FileChannel#map FileChannel.map} or was\n     * mapped by passing one of the other map modes.\n     *\n     * @return true if the file was mapped using one of the sync map\n     * modes, otherwise false.\n     ",
    "links" : [ "jdk.nio.mapmode.ExtendedMapMode#READ_ONLY_SYNCExtendedMapModeMapMode", "java.nio.channels.FileChannel#map", "jdk.nio.mapmode.ExtendedMapMode#READ_ONLY_SYNCExtendedMapMode" ]
  }, {
    "name" : " final FileDescriptor fileDescriptor()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Returns the {@code FileDescriptor} associated with this\n     * {@code MappedByteBuffer}.\n     *\n     * @return the buffer's file descriptor; may be {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkMapped()",
    "returnType" : "void",
    "comment" : " Android-added: Added checkMapped as Android doesn't allow null fd in DirectByteBuffer.",
    "links" : [ ]
  }, {
    "name" : "private long mappingOffset()",
    "returnType" : "long",
    "comment" : " of the mapping. Computed each time to avoid storing in every direct buffer.",
    "links" : [ ]
  }, {
    "name" : "private static long mappingOffset(long addr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long mappingAddress(long mappingOffset)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long mappingAddress(long addr, long mappingOffset)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long mappingLength(long mappingOffset)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long mappingLength(long length, long mappingOffset)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isLoaded()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this buffer's content is resident in physical\n     * memory.\n     *\n     * <p> A return value of {@code true} implies that it is highly likely\n     * that all of the data in this buffer is resident in physical memory and\n     * may therefore be accessed without incurring any virtual-memory page\n     * faults or I/O operations.  A return value of {@code false} does not\n     * necessarily imply that the buffer's content is not resident in physical\n     * memory.\n     *\n     * <p> The returned value is a hint, rather than a guarantee, because the\n     * underlying operating system may have paged out some of the buffer's data\n     * by the time that an invocation of this method returns.  </p>\n     *\n     * @return  {@code true} if it is likely that this buffer's content\n     *          is resident in physical memory\n     ",
    "links" : [ ]
  }, {
    "name" : "public final MappedByteBuffer load()",
    "returnType" : "MappedByteBuffer",
    "comment" : "\n     * Loads this buffer's content into physical memory.\n     *\n     * <p> This method makes a best effort to ensure that, when it returns,\n     * this buffer's content is resident in physical memory.  Invoking this\n     * method may cause some number of page faults and I/O operations to\n     * occur. </p>\n     *\n     * @return  This buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public final MappedByteBuffer force()",
    "returnType" : "MappedByteBuffer",
    "comment" : "\n     * Forces any changes made to this buffer's content to be written to the\n     * storage device containing the mapped file.  The region starts at index\n     * zero in this buffer and is {@code capacity()} bytes.\n     *\n     * <p> If the file mapped into this buffer resides on a local storage\n     * device then when this method returns it is guaranteed that all changes\n     * made to the buffer since it was created, or since this method was last\n     * invoked, will have been written to that device.\n     *\n     * <p> If the file does not reside on a local device then no such guarantee\n     * is made.\n     *\n     * <p> If this buffer was not mapped in read/write mode ({@link\n     * java.nio.channels.FileChannel.MapMode#READ_WRITE}) then\n     * invoking this method may have no effect. In particular, the\n     * method has no effect for buffers mapped in read-only or private\n     * mapping modes. This method may or may not have an effect for\n     * implementation-specific mapping modes. </p>\n     *\n     * @throws UncheckedIOException\n     *         If an I/O error occurs writing the buffer's content to the\n     *         storage device containing the mapped file\n     *\n     * @return  This buffer\n     ",
    "links" : [ "java.nio.channels.FileChannel.MapMode#READ_WRITE" ]
  }, {
    "name" : "public final MappedByteBuffer force(int index, int length)",
    "returnType" : "MappedByteBuffer",
    "comment" : "\n     * Forces any changes made to a region of this buffer's content to\n     * be written to the storage device containing the mapped\n     * file. The region starts at the given {@code index} in this\n     * buffer and is {@code length} bytes.\n     *\n     * <p> If the file mapped into this buffer resides on a local\n     * storage device then when this method returns it is guaranteed\n     * that all changes made to the selected region buffer since it\n     * was created, or since this method was last invoked, will have\n     * been written to that device. The force operation is free to\n     * write bytes that lie outside the specified region, for example\n     * to ensure that data blocks of some device-specific granularity\n     * are transferred in their entirety.\n     *\n     * <p> If the file does not reside on a local device then no such\n     * guarantee is made.\n     *\n     * <p> If this buffer was not mapped in read/write mode ({@link\n     * java.nio.channels.FileChannel.MapMode#READ_WRITE}) then\n     * invoking this method may have no effect. In particular, the\n     * method has no effect for buffers mapped in read-only or private\n     * mapping modes. This method may or may not have an effect for\n     * implementation-specific mapping modes. </p>\n     *\n     * @param  index\n     *         The index of the first byte in the buffer region that is\n     *         to be written back to storage; must be non-negative\n     *         and less than {@code capacity()}\n     *\n     * @param  length\n     *         The length of the region in bytes; must be non-negative\n     *         and no larger than {@code capacity() - index}\n     *\n     * @throws IndexOutOfBoundsException\n     *         if the preconditions on the index and length do not\n     *         hold.\n     *\n     * @throws UncheckedIOException\n     *         If an I/O error occurs writing the buffer's content to the\n     *         storage device containing the mapped file\n     *\n     * @return  This buffer\n     *\n     * @since 13\n     ",
    "links" : [ "java.nio.channels.FileChannel.MapMode#READ_WRITE" ]
  }, {
    "name" : "public final Buffer position(int newPosition)",
    "returnType" : "Buffer",
    "comment" : " Android-changed: covariant overloads of *Buffer methods that return this.",
    "links" : [ ]
  }, {
    "name" : "public final Buffer limit(int newLimit)",
    "returnType" : "Buffer",
    "comment" : " Android-changed: covariant overloads of *Buffer methods that return this.",
    "links" : [ ]
  }, {
    "name" : "public final Buffer mark()",
    "returnType" : "Buffer",
    "comment" : " Android-changed: covariant overloads of *Buffer methods that return this.",
    "links" : [ ]
  }, {
    "name" : "public final Buffer reset()",
    "returnType" : "Buffer",
    "comment" : " Android-changed: covariant overloads of *Buffer methods that return this.",
    "links" : [ ]
  }, {
    "name" : "public final Buffer clear()",
    "returnType" : "Buffer",
    "comment" : " Android-changed: covariant overloads of *Buffer methods that return this.",
    "links" : [ ]
  }, {
    "name" : "public final Buffer flip()",
    "returnType" : "Buffer",
    "comment" : " Android-changed: covariant overloads of *Buffer methods that return this.",
    "links" : [ ]
  }, {
    "name" : "public final Buffer rewind()",
    "returnType" : "Buffer",
    "comment" : " Android-changed: covariant overloads of *Buffer methods that return this.",
    "links" : [ ]
  }, {
    "name" : "public abstract ByteBuffer slice()",
    "returnType" : "ByteBuffer",
    "comment" : " Android-changed: covariant overloads of *Buffer methods that return this.",
    "links" : [ ]
  }, {
    "name" : "public abstract MappedByteBuffer slice(int index, int length)",
    "returnType" : "MappedByteBuffer",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p> Reading bytes into physical memory by invoking {@code load()} on the\n     * returned buffer, or writing bytes to the storage device by invoking\n     * {@code force()} on the returned buffer, will only act on the sub-range\n     * of this buffer that the returned buffer represents, namely\n     * {@code [index,index+length)}, where {@code index} and {@code length} are\n     * assumed to satisfy the preconditions.\n     ",
    "links" : [ ]
  }, {
    "name" : "private native boolean isLoaded0(long address, long length, long pageCount)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void load0(long address, long length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void force0(FileDescriptor fd, long address, long length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract ByteBuffer duplicate()",
    "returnType" : "ByteBuffer",
    "comment" : " Android-changed: covariant overloads of *Buffer methods that return this.",
    "links" : [ ]
  }, {
    "name" : "public abstract ByteBuffer compact()",
    "returnType" : "ByteBuffer",
    "comment" : " Android-changed: covariant overloads of *Buffer methods that return this.",
    "links" : [ ]
  } ],
  "methodNames" : [ " final boolean isSync()", " final FileDescriptor fileDescriptor()", "private void checkMapped()", "private long mappingOffset()", "private static long mappingOffset(long addr)", "private long mappingAddress(long mappingOffset)", "private static long mappingAddress(long addr, long mappingOffset)", "private long mappingLength(long mappingOffset)", "private long mappingLength(long length, long mappingOffset)", "public final boolean isLoaded()", "public final MappedByteBuffer load()", "public final MappedByteBuffer force()", "public final MappedByteBuffer force(int index, int length)", "public final Buffer position(int newPosition)", "public final Buffer limit(int newLimit)", "public final Buffer mark()", "public final Buffer reset()", "public final Buffer clear()", "public final Buffer flip()", "public final Buffer rewind()", "public abstract ByteBuffer slice()", "public abstract MappedByteBuffer slice(int index, int length)", "private native boolean isLoaded0(long address, long length, long pageCount)", "private native void load0(long address, long length)", "private native void force0(FileDescriptor fd, long address, long length)", "public abstract ByteBuffer duplicate()", "public abstract ByteBuffer compact()" ],
  "variableNames" : [ "fd", "isSync", "unused" ]
}