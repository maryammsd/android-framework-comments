{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/UnixFileSystem.java",
  "packageName" : "java.io",
  "className" : "UnixFileSystem",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "slash",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "colon",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "javaHome",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "userDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cache",
    "type" : "ExpiringCache",
    "comment" : " prefix cache is conservative and is not used for complex path names.",
    "links" : [ ]
  }, {
    "name" : "javaHomePrefixCache",
    "type" : "ExpiringCache",
    "comment" : " canonicalization algorithm",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public char getSeparator()",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public char getPathSeparator()",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String normalize(String pathname)",
    "returnType" : "String",
    "comment" : " Check that the given pathname is normal.  If not, invoke the real\n       normalizer on the part of the pathname that requires normalization.\n       This way we iterate through the whole pathname string only once. ",
    "links" : [ ]
  }, {
    "name" : "public int prefixLength(String pathname)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String resolve(String parent, String child)",
    "returnType" : "String",
    "comment" : " Invariant: Both |parent| and |child| are normalized paths.",
    "links" : [ ]
  }, {
    "name" : "public String getDefaultParent()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String fromURIPath(String path)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAbsolute(File f)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String resolve(File f)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String canonicalize(String path) throws IOException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String canonicalize0(String path) throws IOException",
    "returnType" : "String",
    "comment" : " BEGIN Android-changed: Remove parent directory /.. at the rootfs. http://b/312399441",
    "links" : [ ]
  }, {
    "name" : "private native String canonicalize0(String path, boolean isAtLeastTargetSdk35) throws IOException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String parentOrNull(String path)",
    "returnType" : "String",
    "comment" : " (expensive) canonicalization routine to be called.",
    "links" : [ ]
  }, {
    "name" : "private native int getBooleanAttributes0(String abspath)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBooleanAttributes(File f)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean checkAccess(File f, int access)",
    "returnType" : "boolean",
    "comment" : " Android-changed: Access files through common interface.",
    "links" : [ ]
  }, {
    "name" : "public long getLastModifiedTime(File f)",
    "returnType" : "long",
    "comment" : " Android-changed: Add method to intercept native method call; BlockGuard support.",
    "links" : [ ]
  }, {
    "name" : "private native long getLastModifiedTime0(File f)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getLength(File f)",
    "returnType" : "long",
    "comment" : " Android-changed: Access files through common interface.",
    "links" : [ ]
  }, {
    "name" : "public boolean setPermission(File f, int access, boolean enable, boolean owneronly)",
    "returnType" : "boolean",
    "comment" : " Android-changed: Add method to intercept native method call; BlockGuard support.",
    "links" : [ ]
  }, {
    "name" : "private native boolean setPermission0(File f, int access, boolean enable, boolean owneronly)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean createFileExclusively(String path) throws IOException",
    "returnType" : "boolean",
    "comment" : " Android-changed: Add method to intercept native method call; BlockGuard support.",
    "links" : [ ]
  }, {
    "name" : "private native boolean createFileExclusively0(String path) throws IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean delete(File f)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] list(File f)",
    "returnType" : "String[]",
    "comment" : " Android-changed: Add method to intercept native method call; BlockGuard support.",
    "links" : [ ]
  }, {
    "name" : "private native String[] list0(File f)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean createDirectory(File f)",
    "returnType" : "boolean",
    "comment" : " Android-changed: Add method to intercept native method call; BlockGuard support.",
    "links" : [ ]
  }, {
    "name" : "private native boolean createDirectory0(File f)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean rename(File f1, File f2)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setLastModifiedTime(File f, long time)",
    "returnType" : "boolean",
    "comment" : " Android-changed: Add method to intercept native method call; BlockGuard support.",
    "links" : [ ]
  }, {
    "name" : "private native boolean setLastModifiedTime0(File f, long time)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setReadOnly(File f)",
    "returnType" : "boolean",
    "comment" : " Android-changed: Add method to intercept native method call; BlockGuard support.",
    "links" : [ ]
  }, {
    "name" : "private native boolean setReadOnly0(File f)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] listRoots()",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getSpace(File f, int t)",
    "returnType" : "long",
    "comment" : " Android-changed: Add method to intercept native method call; BlockGuard support.",
    "links" : [ ]
  }, {
    "name" : "private native long getSpace0(File f, int t)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long getNameMax0(String path)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getNameMax(String path)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int compare(File f1, File f2)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode(File f)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void initIDs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public char getSeparator()", "public char getPathSeparator()", "public String normalize(String pathname)", "public int prefixLength(String pathname)", "public String resolve(String parent, String child)", "public String getDefaultParent()", "public String fromURIPath(String path)", "public boolean isAbsolute(File f)", "public String resolve(File f)", "public String canonicalize(String path) throws IOException", "private String canonicalize0(String path) throws IOException", "private native String canonicalize0(String path, boolean isAtLeastTargetSdk35) throws IOException", " static String parentOrNull(String path)", "private native int getBooleanAttributes0(String abspath)", "public int getBooleanAttributes(File f)", "public boolean checkAccess(File f, int access)", "public long getLastModifiedTime(File f)", "private native long getLastModifiedTime0(File f)", "public long getLength(File f)", "public boolean setPermission(File f, int access, boolean enable, boolean owneronly)", "private native boolean setPermission0(File f, int access, boolean enable, boolean owneronly)", "public boolean createFileExclusively(String path) throws IOException", "private native boolean createFileExclusively0(String path) throws IOException", "public boolean delete(File f)", "public String[] list(File f)", "private native String[] list0(File f)", "public boolean createDirectory(File f)", "private native boolean createDirectory0(File f)", "public boolean rename(File f1, File f2)", "public boolean setLastModifiedTime(File f, long time)", "private native boolean setLastModifiedTime0(File f, long time)", "public boolean setReadOnly(File f)", "private native boolean setReadOnly0(File f)", "public File[] listRoots()", "public long getSpace(File f, int t)", "private native long getSpace0(File f, int t)", "private native long getNameMax0(String path)", "public int getNameMax(String path)", "public int compare(File f1, File f2)", "public int hashCode(File f)", "private static native void initIDs()" ],
  "variableNames" : [ "slash", "colon", "javaHome", "userDir", "cache", "javaHomePrefixCache" ]
}