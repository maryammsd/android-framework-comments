{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/units/SingleUnitImpl.java",
  "packageName" : "android.icu.impl.units",
  "className" : "SingleUnitImpl",
  "comment" : "\n * A class representing a single unit (optional SI or binary prefix, and dimensionality).\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "index",
    "type" : "int",
    "comment" : "\n     * Simple unit index, unique for every simple unit, -1 for the dimensionless\n     * unit. This is an index into a string list in unit.txt {ConversionUnits}.\n     * <p>\n     * The default value is -1, meaning the dimensionless unit:\n     * isDimensionless() will return true, until index is changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "simpleUnitID",
    "type" : "String",
    "comment" : "\n     * SimpleUnit is the simplest form of a Unit. For example, for \"square-millimeter\", the simple unit would be \"meter\"Ã’\n     * <p>\n     * The default value is \"\", meaning the dimensionless unit:\n     * isDimensionless() will return true, until index is changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "dimensionality",
    "type" : "int",
    "comment" : "\n     * Determine the power of the {@code SingleUnit}. For example, for \"square-meter\", the dimensionality will be {@code 2}.\n     * <p>\n     * NOTE:\n     * Default dimensionality is 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "unitPrefix",
    "type" : "MeasureUnit.MeasurePrefix",
    "comment" : "\n     * SI or binary prefix.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SingleUnitImpl copy()",
    "returnType" : "SingleUnitImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MeasureUnit build()",
    "returnType" : "MeasureUnit",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNeutralIdentifier()",
    "returnType" : "String",
    "comment" : "\n     * Generates a neutral identifier string for a single unit which means we do not include the dimension signal.\n     ",
    "links" : [ ]
  }, {
    "name" : " int compareTo(SingleUnitImpl other)",
    "returnType" : "int",
    "comment" : "\n     * Compare this SingleUnitImpl to another SingleUnitImpl for the sake of\n     * sorting and coalescing.\n     * <p>\n     * Sort order of units is specified by UTS #35\n     * (https://unicode.org/reports/tr35/tr35-info.html#Unit_Identifier_Normalization).\n     * <p>\n     * Takes the sign of dimensionality into account, but not the absolute\n     * value: per-meter is not considered the same as meter, but meter is\n     * considered the same as square-meter.\n     * <p>\n     * The dimensionless unit generally does not get compared, but if it did, it\n     * would sort before other units by virtue of index being < 0 and\n     * dimensionality not being negative.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isCompatibleWith(SingleUnitImpl other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this SingleUnitImpl is compatible with another for the purpose of coalescing.\n     * <p>\n     * Units with the same base unit and SI or binary prefix should match, except that they must also\n     * have the same dimensionality sign, such that we don't merge numerator and denominator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSimpleUnitID()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSimpleUnit(int simpleUnitIndex, String[] simpleUnits)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDimensionality()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDimensionality(int dimensionality)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MeasureUnit.MeasurePrefix getPrefix()",
    "returnType" : "MeasureUnit.MeasurePrefix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPrefix(MeasureUnit.MeasurePrefix unitPrefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIndex()",
    "returnType" : "int",
    "comment" : " TODO: unused? Delete?",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SingleUnitImpl copy()", "public MeasureUnit build()", "public String getNeutralIdentifier()", " int compareTo(SingleUnitImpl other)", " boolean isCompatibleWith(SingleUnitImpl other)", "public String getSimpleUnitID()", "public void setSimpleUnit(int simpleUnitIndex, String[] simpleUnits)", "public int getDimensionality()", "public void setDimensionality(int dimensionality)", "public MeasureUnit.MeasurePrefix getPrefix()", "public void setPrefix(MeasureUnit.MeasurePrefix unitPrefix)", "public int getIndex()" ],
  "variableNames" : [ "index", "simpleUnitID", "dimensionality", "unitPrefix" ]
}