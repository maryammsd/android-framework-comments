{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/NinePatchDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "NinePatchDrawable",
  "comment" : "\n *\n * A resizeable bitmap, with stretchable areas that you define. This type of image\n * is defined in a .png file with a special format.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about how to use a NinePatchDrawable, read the\n * <a href=\"{@docRoot}guide/topics/graphics/2d-graphics.html#nine-patch\">\n * Canvas and Drawables</a> developer guide. For information about creating a NinePatch image\n * file using the draw9patch tool, see the\n * <a href=\"{@docRoot}guide/developing/tools/draw9patch.html\">Draw 9-patch</a> tool guide.</p></div>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT_DITHER",
    "type" : "boolean",
    "comment" : " dithering helps a lot, and is pretty cheap, so default is true",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : " Temporary rect used for density scaling. ",
    "links" : [ ]
  }, {
    "name" : "mNinePatchState",
    "type" : "NinePatchState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlendModeFilter",
    "type" : "BlendModeColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPadding",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpticalInsets",
    "type" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutlineInsets",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutlineRadius",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetDensity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBitmapWidth",
    "type" : "int",
    "comment" : " These are scaled to match the target density.",
    "links" : [ ]
  }, {
    "name" : "mBitmapHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTargetDensity(@NonNull Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Set the density scale at which this drawable will be rendered. This\n     * method assumes the drawable will be rendered at the same density as the\n     * specified canvas.\n     *\n     * @param canvas The Canvas from which the density scale must be obtained.\n     *\n     * @see android.graphics.Bitmap#setDensity(int)\n     * @see android.graphics.Bitmap#getDensity()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTargetDensity(@NonNull DisplayMetrics metrics)",
    "returnType" : "void",
    "comment" : "\n     * Set the density scale at which this drawable will be rendered.\n     *\n     * @param metrics The DisplayMetrics indicating the density scale for this drawable.\n     *\n     * @see android.graphics.Bitmap#setDensity(int)\n     * @see android.graphics.Bitmap#getDensity()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTargetDensity(int density)",
    "returnType" : "void",
    "comment" : "\n     * Set the density at which this drawable will be rendered.\n     *\n     * @param density The density scale for this drawable.\n     *\n     * @see android.graphics.Bitmap#setDensity(int)\n     * @see android.graphics.Bitmap#getDensity()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getPadding(@NonNull Rect padding)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets getOpticalInsets()",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(@Nullable ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDither(boolean dither)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAutoMirrored(boolean mirrored)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean needsMirroring()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoMirrored()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFilterBitmap(boolean filter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFilterBitmap()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(@NonNull TypedArray a) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "\n     * Updates the constant state from the values in the typed array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@NonNull Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Paint getPaint()",
    "returnType" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Region getTransparentRegion()",
    "returnType" : "Region",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] stateSet)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void computeBitmapSize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLocalState(@Nullable Resources res)",
    "returnType" : "void",
    "comment" : "\n     * Initializes local dynamic properties from state.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setTargetDensity(@NonNull Canvas canvas)", "public void setTargetDensity(@NonNull DisplayMetrics metrics)", "public void setTargetDensity(int density)", "public void draw(Canvas canvas)", "public int getChangingConfigurations()", "public boolean getPadding(@NonNull Rect padding)", "public void getOutline(@NonNull Outline outline)", "public Insets getOpticalInsets()", "public void setAlpha(int alpha)", "public int getAlpha()", "public void setColorFilter(@Nullable ColorFilter colorFilter)", "public void setTintList(@Nullable ColorStateList tint)", "public void setTintBlendMode(@Nullable BlendMode blendMode)", "public void setDither(boolean dither)", "public void setAutoMirrored(boolean mirrored)", "private boolean needsMirroring()", "public boolean isAutoMirrored()", "public void setFilterBitmap(boolean filter)", "public boolean isFilterBitmap()", "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "private void updateStateFromTypedArray(@NonNull TypedArray a) throws XmlPullParserException", "public void applyTheme(@NonNull Theme t)", "public boolean canApplyTheme()", "public Paint getPaint()", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "public int getOpacity()", "public Region getTransparentRegion()", "public ConstantState getConstantState()", "public Drawable mutate()", "public void clearMutated()", "protected boolean onStateChange(int[] stateSet)", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "private void computeBitmapSize()", "private void updateLocalState(@Nullable Resources res)" ],
  "variableNames" : [ "DEFAULT_DITHER", "mTempRect", "mNinePatchState", "mBlendModeFilter", "mPadding", "mOpticalInsets", "mOutlineInsets", "mOutlineRadius", "mPaint", "mMutated", "mTargetDensity", "mBitmapWidth", "mBitmapHeight" ]
}