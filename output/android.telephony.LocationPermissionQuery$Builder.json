{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/LocationAccessPolicy.java",
  "packageName" : "android.telephony",
  "className" : "Builder",
  "comment" : " Builder for LocationPermissionQuery ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mCallingPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallingFeatureId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallingUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallingPid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinSdkVersionForCoarse",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinSdkVersionForFine",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinSdkVersionForEnforcement",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogAsInfo",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMethod",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setCallingPackage(String callingPackage)",
    "returnType" : "Builder",
    "comment" : "\n             * Mandatory parameter, used for performing permission checks.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCallingFeatureId(@Nullable String callingFeatureId)",
    "returnType" : "Builder",
    "comment" : "\n             * Mandatory parameter, used for performing permission checks.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCallingUid(int callingUid)",
    "returnType" : "Builder",
    "comment" : "\n             * Mandatory parameter, used for performing permission checks.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCallingPid(int callingPid)",
    "returnType" : "Builder",
    "comment" : "\n             * Mandatory parameter, used for performing permission checks.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMinSdkVersionForCoarse(int minSdkVersionForCoarse)",
    "returnType" : "Builder",
    "comment" : "\n             * Apps that target at least this sdk version will be checked for coarse location\n             * permission. This method MUST be called before calling {@link #build()}. Otherwise, an\n             * {@link IllegalArgumentException} will be thrown.\n             *\n             * Additionally, if both the argument to this method and\n             * {@link #setMinSdkVersionForFine} are greater than {@link Build.VERSION_CODES#BASE},\n             * you must call {@link #setMinSdkVersionForEnforcement} with the min of the two to\n             * affirm that you do not want any location checks below a certain SDK version.\n             * Otherwise, {@link #build} will throw an {@link IllegalArgumentException}.\n             ",
    "links" : [ "#build()", "#setMinSdkVersionForFine", "Build.VERSION_CODES#BASE", "IllegalArgumentException", "#build", "#setMinSdkVersionForEnforcement" ]
  }, {
    "name" : "public Builder setMinSdkVersionForFine(int minSdkVersionForFine)",
    "returnType" : "Builder",
    "comment" : "\n             * Apps that target at least this sdk version will be checked for fine location\n             * permission.  This method MUST be called before calling {@link #build()}.\n             * Otherwise, an {@link IllegalArgumentException} will be thrown.\n             *\n             * Additionally, if both the argument to this method and\n             * {@link #setMinSdkVersionForCoarse} are greater than {@link Build.VERSION_CODES#BASE},\n             * you must call {@link #setMinSdkVersionForEnforcement} with the min of the two to\n             * affirm that you do not want any location checks below a certain SDK version.\n             * Otherwise, {@link #build} will throw an {@link IllegalArgumentException}.\n             ",
    "links" : [ "#build()", "#setMinSdkVersionForCoarse", "Build.VERSION_CODES#BASE", "IllegalArgumentException", "#build", "#setMinSdkVersionForEnforcement" ]
  }, {
    "name" : "public Builder setMinSdkVersionForEnforcement(int minSdkVersionForEnforcement)",
    "returnType" : "Builder",
    "comment" : "\n             * If both the argument to {@link #setMinSdkVersionForFine} and\n             * {@link #setMinSdkVersionForCoarse} are greater than {@link Build.VERSION_CODES#BASE},\n             * this method must be called with the min of the two to\n             * affirm that you do not want any location checks below a certain SDK version.\n             ",
    "links" : [ "#setMinSdkVersionForFine", "#setMinSdkVersionForCoarse", "Build.VERSION_CODES#BASE" ]
  }, {
    "name" : "public Builder setMethod(String method)",
    "returnType" : "Builder",
    "comment" : "\n             * Optional, for logging purposes only.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLogAsInfo(boolean logAsInfo)",
    "returnType" : "Builder",
    "comment" : "\n             * If called with {@code true}, log messages will only be printed at the info level.\n             ",
    "links" : [ ]
  }, {
    "name" : "public LocationPermissionQuery build()",
    "returnType" : "LocationPermissionQuery",
    "comment" : " build LocationPermissionQuery ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setCallingPackage(String callingPackage)", "public Builder setCallingFeatureId(@Nullable String callingFeatureId)", "public Builder setCallingUid(int callingUid)", "public Builder setCallingPid(int callingPid)", "public Builder setMinSdkVersionForCoarse(int minSdkVersionForCoarse)", "public Builder setMinSdkVersionForFine(int minSdkVersionForFine)", "public Builder setMinSdkVersionForEnforcement(int minSdkVersionForEnforcement)", "public Builder setMethod(String method)", "public Builder setLogAsInfo(boolean logAsInfo)", "public LocationPermissionQuery build()" ],
  "variableNames" : [ "mCallingPackage", "mCallingFeatureId", "mCallingUid", "mCallingPid", "mMinSdkVersionForCoarse", "mMinSdkVersionForFine", "mMinSdkVersionForEnforcement", "mLogAsInfo", "mMethod" ]
}