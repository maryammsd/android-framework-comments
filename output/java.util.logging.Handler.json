{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/Handler.java",
  "packageName" : "java.util.logging",
  "className" : "Handler",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "offValue",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "manager",
    "type" : "LogManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "filter",
    "type" : "Filter",
    "comment" : " of the execution of a 'publish' call.",
    "links" : [ ]
  }, {
    "name" : "formatter",
    "type" : "Formatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "logLevel",
    "type" : "Level",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "errorManager",
    "type" : "ErrorManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "encoding",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sealed",
    "type" : "boolean",
    "comment" : " is true, we access check updates to the class.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void publish(LogRecord record)",
    "returnType" : "void",
    "comment" : "\n     * Publish a <tt>LogRecord</tt>.\n     * <p>\n     * The logging request was made initially to a <tt>Logger</tt> object,\n     * which initialized the <tt>LogRecord</tt> and forwarded it here.\n     * <p>\n     * The <tt>Handler</tt>  is responsible for formatting the message, when and\n     * if necessary.  The formatting should include localization.\n     *\n     * @param  record  description of the log event. A null record is\n     *                 silently ignored and is not published\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void flush()",
    "returnType" : "void",
    "comment" : "\n     * Flush any buffered output.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void close() throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Close the <tt>Handler</tt> and free all associated resources.\n     * <p>\n     * The close method will perform a <tt>flush</tt> and then close the\n     * <tt>Handler</tt>.   After close has been called this <tt>Handler</tt>\n     * should no longer be used.  Method calls may either be silently\n     * ignored or may throw runtime exceptions.\n     *\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setFormatter(Formatter newFormatter) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Set a <tt>Formatter</tt>.  This <tt>Formatter</tt> will be used\n     * to format <tt>LogRecords</tt> for this <tt>Handler</tt>.\n     * <p>\n     * Some <tt>Handlers</tt> may not use <tt>Formatters</tt>, in\n     * which case the <tt>Formatter</tt> will be remembered, but not used.\n     * <p>\n     * @param newFormatter the <tt>Formatter</tt> to use (may not be null)\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Formatter getFormatter()",
    "returnType" : "Formatter",
    "comment" : "\n     * Return the <tt>Formatter</tt> for this <tt>Handler</tt>.\n     * @return the <tt>Formatter</tt> (may be null).\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setEncoding(String encoding) throws SecurityException, java.io.UnsupportedEncodingException",
    "returnType" : "void",
    "comment" : "\n     * Set the character encoding used by this <tt>Handler</tt>.\n     * <p>\n     * The encoding should be set before any <tt>LogRecords</tt> are written\n     * to the <tt>Handler</tt>.\n     *\n     * @param encoding  The name of a supported character encoding.\n     *        May be null, to indicate the default platform encoding.\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     * @exception  UnsupportedEncodingException if the named encoding is\n     *          not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEncoding()",
    "returnType" : "String",
    "comment" : "\n     * Return the character encoding for this <tt>Handler</tt>.\n     *\n     * @return  The encoding name.  May be null, which indicates the\n     *          default encoding should be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setFilter(Filter newFilter) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Set a <tt>Filter</tt> to control output on this <tt>Handler</tt>.\n     * <P>\n     * For each call of <tt>publish</tt> the <tt>Handler</tt> will call\n     * this <tt>Filter</tt> (if it is non-null) to check if the\n     * <tt>LogRecord</tt> should be published or discarded.\n     *\n     * @param   newFilter  a <tt>Filter</tt> object (may be null)\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Filter getFilter()",
    "returnType" : "Filter",
    "comment" : "\n     * Get the current <tt>Filter</tt> for this <tt>Handler</tt>.\n     *\n     * @return  a <tt>Filter</tt> object (may be null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setErrorManager(ErrorManager em)",
    "returnType" : "void",
    "comment" : "\n     * Define an ErrorManager for this Handler.\n     * <p>\n     * The ErrorManager's \"error\" method will be invoked if any\n     * errors occur while using this Handler.\n     *\n     * @param em  the new ErrorManager\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ErrorManager getErrorManager()",
    "returnType" : "ErrorManager",
    "comment" : "\n     * Retrieves the ErrorManager for this Handler.\n     *\n     * @return the ErrorManager for this Handler\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void reportError(String msg, Exception ex, int code)",
    "returnType" : "void",
    "comment" : "\n     * Protected convenience method to report an error to this Handler's\n     * ErrorManager.  Note that this method retrieves and uses the ErrorManager\n     * without doing a security check.  It can therefore be used in\n     * environments where the caller may be non-privileged.\n     *\n     * @param msg    a descriptive string (may be null)\n     * @param ex     an exception (may be null)\n     * @param code   an error code defined in ErrorManager\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setLevel(Level newLevel) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Set the log level specifying which message levels will be\n     * logged by this <tt>Handler</tt>.  Message levels lower than this\n     * value will be discarded.\n     * <p>\n     * The intention is to allow developers to turn on voluminous\n     * logging, but to limit the messages that are sent to certain\n     * <tt>Handlers</tt>.\n     *\n     * @param newLevel   the new value for the log level\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Level getLevel()",
    "returnType" : "Level",
    "comment" : "\n     * Get the log level specifying which messages will be\n     * logged by this <tt>Handler</tt>.  Message levels lower\n     * than this level will be discarded.\n     * @return  the level of messages being logged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLoggable(LogRecord record)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.\n     * <p>\n     * This method checks if the <tt>LogRecord</tt> has an appropriate\n     * <tt>Level</tt> and  whether it satisfies any <tt>Filter</tt>.  It also\n     * may make other <tt>Handler</tt> specific checks that might prevent a\n     * handler from logging the <tt>LogRecord</tt>. It will return false if\n     * the <tt>LogRecord</tt> is null.\n     * <p>\n     * @param record  a <tt>LogRecord</tt>\n     * @return true if the <tt>LogRecord</tt> would be logged.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " void checkPermission() throws SecurityException",
    "returnType" : "void",
    "comment" : " state and if not throw a SecurityException.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void publish(LogRecord record)", "public abstract void flush()", "public abstract void close() throws SecurityException", "public synchronized void setFormatter(Formatter newFormatter) throws SecurityException", "public Formatter getFormatter()", "public synchronized void setEncoding(String encoding) throws SecurityException, java.io.UnsupportedEncodingException", "public String getEncoding()", "public synchronized void setFilter(Filter newFilter) throws SecurityException", "public Filter getFilter()", "public synchronized void setErrorManager(ErrorManager em)", "public ErrorManager getErrorManager()", "protected void reportError(String msg, Exception ex, int code)", "public synchronized void setLevel(Level newLevel) throws SecurityException", "public Level getLevel()", "public boolean isLoggable(LogRecord record)", " void checkPermission() throws SecurityException" ],
  "variableNames" : [ "offValue", "manager", "filter", "formatter", "logLevel", "errorManager", "encoding", "sealed" ]
}