{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/ICUNotifier.java",
  "packageName" : "android.icu.impl",
  "className" : "ICUNotifier",
  "comment" : "\n * <p>Abstract implementation of a notification facility.  Clients add\n * EventListeners with addListener and remove them with removeListener.\n * Notifiers call notifyChanged when they wish to notify listeners.\n * This queues the listener list on the notification thread, which\n * eventually dequeues the list and calls notifyListener on each\n * listener in the list.</p>\n *\n * <p>Subclasses override acceptsListener and notifyListener\n * to add type-safe notification.  AcceptsListener should return\n * true if the listener is of the appropriate type; ICUNotifier\n * itself will ensure the listener is non-null and that the\n * identical listener is not already registered with the Notifier.\n * NotifyListener should cast the listener to the appropriate\n * type and call the appropriate method on the listener.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "notifyLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "notifyThread",
    "type" : "NotifyThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "listeners",
    "type" : "List<EventListener>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addListener(EventListener l)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener to be notified when notifyChanged is called.\n     * The listener must not be null. AcceptsListener must return\n     * true for the listener.  Attempts to concurrently\n     * register the identical listener more than once will be\n     * silently ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeListener(EventListener l)",
    "returnType" : "void",
    "comment" : "\n     * Stop notifying this listener.  The listener must\n     * not be null.  Attempts to remove a listener that is\n     * not registered will be silently ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyChanged()",
    "returnType" : "void",
    "comment" : "\n     * Queue a notification on the notification thread for the current\n     * listeners.  When the thread unqueues the notification, notifyListener\n     * is called on each listener from the notification thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract boolean acceptsListener(EventListener l)",
    "returnType" : "boolean",
    "comment" : "\n     * Subclasses implement this to return true if the listener is\n     * of the appropriate type.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void notifyListener(EventListener l)",
    "returnType" : "void",
    "comment" : "\n     * Subclasses implement this to notify the listener.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void addListener(EventListener l)", "public void removeListener(EventListener l)", "public void notifyChanged()", "protected abstract boolean acceptsListener(EventListener l)", "protected abstract void notifyListener(EventListener l)" ],
  "variableNames" : [ "notifyLock", "notifyThread", "listeners" ]
}