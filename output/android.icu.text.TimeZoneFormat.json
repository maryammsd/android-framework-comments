{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/TimeZoneFormat.java",
  "packageName" : "android.icu.text",
  "className" : "TimeZoneFormat",
  "comment" : "\n * <code>TimeZoneFormat</code> supports time zone display name formatting and parsing.\n * An instance of TimeZoneFormat works as a subformatter of {@link SimpleDateFormat},\n * but you can also directly get a new instance of <code>TimeZoneFormat</code> and\n * formatting/parsing time zone display names.\n * <p>\n * ICU implements the time zone display names defined by <a href=\"http://www.unicode.org/reports/tr35/\">UTS#35\n * Unicode Locale Data Markup Language (LDML)</a>. {@link TimeZoneNames} represents the\n * time zone display name data model and this class implements the algorithm for actual\n * formatting and parsing.\n *\n * @see SimpleDateFormat\n * @see TimeZoneNames\n ",
  "links" : [ "android.icu.impl.TZDBTimeZoneNames", "android.icu.text.SimpleDateFormat" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ISO_Z_STYLE_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ISO_LOCAL_STYLE_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_locale",
    "type" : "ULocale",
    "comment" : "\n     * fields to be serialized\n     ",
    "links" : [ ]
  }, {
    "name" : "_tznames",
    "type" : "TimeZoneNames",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_gmtPattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_gmtOffsetPatterns",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_gmtOffsetDigits",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_gmtZeroFormat",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_parseAllStyles",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_parseTZDBNames",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_gnames",
    "type" : "TimeZoneGenericNames",
    "comment" : "\n     * Transient fields\n     ",
    "links" : [ ]
  }, {
    "name" : "_gmtPatternPrefix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_gmtPatternSuffix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_gmtOffsetPatternItems",
    "type" : "Object[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_abuttingOffsetHoursAndMinutes",
    "type" : "boolean",
    "comment" : " cache if offset hours and minutes are abutting",
    "links" : [ ]
  }, {
    "name" : "_region",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_frozen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_tzdbNames",
    "type" : "TimeZoneNames",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TZID_GMT",
    "type" : "String",
    "comment" : " canonical tzid for GMT",
    "links" : [ ]
  }, {
    "name" : "ALT_GMT_STRINGS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_GMT_PATTERN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_GMT_ZERO",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_GMT_DIGITS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_GMT_OFFSET_SEP",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ASCII_DIGITS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ISO8601_UTC",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_ZONE_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_SHORT_ZONE_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_LOCATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_GMT_OFFSET_TYPES",
    "type" : "GMTOffsetPatternType[]",
    "comment" : " because *_HM is most likely a substring of *_HMS",
    "links" : [ ]
  }, {
    "name" : "MILLIS_PER_HOUR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MILLIS_PER_MINUTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MILLIS_PER_SECOND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_OFFSET",
    "type" : "int",
    "comment" : " Maximum offset (exclusive) in millisecond supported by offset formats",
    "links" : [ ]
  }, {
    "name" : "MAX_OFFSET_HOUR",
    "type" : "int",
    "comment" : " Maximum values for GMT offset fields",
    "links" : [ ]
  }, {
    "name" : "MAX_OFFSET_MINUTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_OFFSET_SECOND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_tzfCache",
    "type" : "TimeZoneFormatCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALL_SIMPLE_NAME_TYPES",
    "type" : "EnumSet<NameType>",
    "comment" : " The filter used for searching all specific names and exemplar location names",
    "links" : [ ]
  }, {
    "name" : "ALL_GENERIC_NAME_TYPES",
    "type" : "EnumSet<GenericNameType>",
    "comment" : " The filter used for searching all generic names",
    "links" : [ ]
  }, {
    "name" : "ZONE_ID_TRIE",
    "type" : "TextTrieMap<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHORT_ZONE_ID_TRIE",
    "type" : "TextTrieMap<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : "\n     * @serialField _locale ULocale The locale of this TimeZoneFormat object.\n     * @serialField _tznames TimeZoneNames The time zone name data.\n     * @serialField _gmtPattern String The pattern string for localized GMT format.\n     * @serialField _gmtOffsetPatterns String[] The array of GMT offset patterns used by localized GMT format\n     *              (positive hour-min, positive hour-min-sec, negative hour-min, negative hour-min-sec).\n     * @serialField _gmtOffsetDigits String[] The array of decimal digits used by localized GMT format\n     *              (the size of array is 10).\n     * @serialField _gmtZeroFormat String The localized GMT string used for GMT(UTC).\n     * @serialField _parseAllStyles boolean <code>true</code> if this TimeZoneFormat object is configure\n     *              for parsing all available names.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TimeZoneFormat getInstance(ULocale locale)",
    "returnType" : "TimeZoneFormat",
    "comment" : "\n     * Returns a frozen instance of <code>TimeZoneFormat</code> for the given locale.\n     * <p><b>Note</b>: The instance returned by this method is frozen. If you want to\n     * customize a TimeZoneFormat, you must use {@link #cloneAsThawed()} to get a\n     * thawed copy first.\n     *\n     * @param locale the locale.\n     * @return a frozen instance of <code>TimeZoneFormat</code> for the given locale.\n     ",
    "links" : [ "#cloneAsThawed()" ]
  }, {
    "name" : "public static TimeZoneFormat getInstance(Locale locale)",
    "returnType" : "TimeZoneFormat",
    "comment" : "\n     * Returns a frozen instance of <code>TimeZoneFormat</code> for the given\n     * {@link java.util.Locale}.\n     * <p><b>Note</b>: The instance returned by this method is frozen. If you want to\n     * customize a TimeZoneFormat, you must use {@link #cloneAsThawed()} to get a\n     * thawed copy first.\n     *\n     * @param locale the {@link Locale}.\n     * @return a frozen instance of <code>TimeZoneFormat</code> for the given locale.\n     ",
    "links" : [ "java.util.Locale", "#cloneAsThawed()" ]
  }, {
    "name" : "public TimeZoneNames getTimeZoneNames()",
    "returnType" : "TimeZoneNames",
    "comment" : "\n     * Returns the time zone display name data used by this instance.\n     *\n     * @return the time zone display name data.\n     * @see #setTimeZoneNames(TimeZoneNames)\n     ",
    "links" : [ ]
  }, {
    "name" : "private TimeZoneGenericNames getTimeZoneGenericNames()",
    "returnType" : "TimeZoneGenericNames",
    "comment" : "\n     * Private method returning the instance of TimeZoneGenericNames\n     * used by this object. The instance of TimeZoneGenericNames might\n     * not be available until the first use (lazy instantiation) because\n     * it is only required for handling generic names (that are not used\n     * by DateFormat's default patterns) and it requires relatively heavy\n     * one time initialization.\n     * @return the instance of TimeZoneGenericNames used by this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private TimeZoneNames getTZDBTimeZoneNames()",
    "returnType" : "TimeZoneNames",
    "comment" : "\n     * Private method returning the instance of TZDBTimeZoneNames.\n     * The instance if used only for parsing when {@link ParseOption#TZ_DATABASE_ABBREVIATIONS}\n     * is enabled.\n     * @return an instance of TZDBTimeZoneNames.\n     ",
    "links" : [ "#TZ_DATABASE_ABBREVIATIONS" ]
  }, {
    "name" : "public TimeZoneFormat setTimeZoneNames(TimeZoneNames tznames)",
    "returnType" : "TimeZoneFormat",
    "comment" : "\n     * Sets the time zone display name data to this instance.\n     *\n     * @param tznames the time zone display name data.\n     * @return this object.\n     * @throws UnsupportedOperationException when this object is frozen.\n     * @see #getTimeZoneNames()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getGMTPattern()",
    "returnType" : "String",
    "comment" : "\n     * Returns the localized GMT format pattern.\n     *\n     * @return the localized GMT format pattern.\n     * @see #setGMTPattern(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneFormat setGMTPattern(String pattern)",
    "returnType" : "TimeZoneFormat",
    "comment" : "\n     * Sets the localized GMT format pattern. The pattern must contain\n     * a single argument {0}, for example \"GMT {0}\".\n     *\n     * @param pattern the localized GMT format pattern string\n     * @return this object.\n     * @throws IllegalArgumentException when the pattern string does not contain \"{0}\"\n     * @throws UnsupportedOperationException when this object is frozen.\n     * @see #getGMTPattern()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getGMTOffsetPattern(GMTOffsetPatternType type)",
    "returnType" : "String",
    "comment" : "\n     * Returns the offset pattern used for localized GMT format.\n     *\n     * @param type the offset pattern enum\n     * @see #setGMTOffsetPattern(GMTOffsetPatternType, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneFormat setGMTOffsetPattern(GMTOffsetPatternType type, String pattern)",
    "returnType" : "TimeZoneFormat",
    "comment" : "\n     * Sets the offset pattern for the given offset type.\n     *\n     * @param type the offset pattern.\n     * @param pattern the pattern string.\n     * @return this object.\n     * @throws IllegalArgumentException when the pattern string does not have required time field letters.\n     * @throws UnsupportedOperationException when this object is frozen.\n     * @see #getGMTOffsetPattern(GMTOffsetPatternType)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getGMTOffsetDigits()",
    "returnType" : "String",
    "comment" : "\n     * Returns the decimal digit characters used for localized GMT format in a single string\n     * containing from 0 to 9 in the ascending order.\n     *\n     * @return the decimal digits for localized GMT format.\n     * @see #setGMTOffsetDigits(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneFormat setGMTOffsetDigits(String digits)",
    "returnType" : "TimeZoneFormat",
    "comment" : "\n     * Sets the decimal digit characters used for localized GMT format.\n     *\n     * @param digits a string contains the decimal digit characters from 0 to 9 n the ascending order.\n     * @return this object.\n     * @throws IllegalArgumentException when the string did not contain ten characters.\n     * @throws UnsupportedOperationException when this object is frozen.\n     * @see #getGMTOffsetDigits()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getGMTZeroFormat()",
    "returnType" : "String",
    "comment" : "\n     * Returns the localized GMT format string for GMT(UTC) itself (GMT offset is 0).\n     *\n     * @return the localized GMT string string for GMT(UTC) itself.\n     * @see #setGMTZeroFormat(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneFormat setGMTZeroFormat(String gmtZeroFormat)",
    "returnType" : "TimeZoneFormat",
    "comment" : "\n     * Sets the localized GMT format string for GMT(UTC) itself (GMT offset is 0).\n     *\n     * @param gmtZeroFormat the localized GMT format string for GMT(UTC).\n     * @return this object.\n     * @throws UnsupportedOperationException when this object is frozen.\n     * @see #getGMTZeroFormat()\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneFormat setDefaultParseOptions(EnumSet<ParseOption> options)",
    "returnType" : "TimeZoneFormat",
    "comment" : "\n     * Sets the default parse options.\n     * <p>\n     * <b>Note:</b> By default, an instance of <code>TimeZoneFormat</code>\n     * created by {@link #getInstance(ULocale)} has no parse options set.\n     *\n     * @param options the default parse options.\n     * @return this object.\n     * @see ParseOption\n     ",
    "links" : [ "#getInstance(ULocale)" ]
  }, {
    "name" : "public EnumSet<ParseOption> getDefaultParseOptions()",
    "returnType" : "EnumSet<ParseOption>",
    "comment" : "\n     * Returns the default parse options used by this <code>TimeZoneFormat</code> instance.\n     * @return the default parse options.\n     * @see ParseOption\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String formatOffsetISO8601Basic(int offset, boolean useUtcIndicator, boolean isShort, boolean ignoreSeconds)",
    "returnType" : "String",
    "comment" : "\n     * Returns the ISO 8601 basic time zone string for the given offset.\n     * For example, \"-08\", \"-0830\" and \"Z\"\n     *\n     * @param offset the offset from GMT(UTC) in milliseconds.\n     * @param useUtcIndicator true if ISO 8601 UTC indicator \"Z\" is used when the offset is 0.\n     * @param isShort true if shortest form is used.\n     * @param ignoreSeconds true if non-zero offset seconds is appended.\n     * @return the ISO 8601 basic format.\n     * @throws IllegalArgumentException if the specified offset is out of supported range\n     * (-24 hours &lt; offset &lt; +24 hours).\n     * @see #formatOffsetISO8601Extended(int, boolean, boolean, boolean)\n     * @see #parseOffsetISO8601(String, ParsePosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String formatOffsetISO8601Extended(int offset, boolean useUtcIndicator, boolean isShort, boolean ignoreSeconds)",
    "returnType" : "String",
    "comment" : "\n     * Returns the ISO 8601 extended time zone string for the given offset.\n     * For example, \"-08:00\", \"-08:30\" and \"Z\"\n     *\n     * @param offset the offset from GMT(UTC) in milliseconds.\n     * @param useUtcIndicator true if ISO 8601 UTC indicator \"Z\" is used when the offset is 0.\n     * @param isShort true if shortest form is used.\n     * @param ignoreSeconds true if non-zero offset seconds is appended.\n     * @return the ISO 8601 extended format.\n     * @throws IllegalArgumentException if the specified offset is out of supported range\n     * (-24 hours &lt; offset &lt; +24 hours).\n     * @see #formatOffsetISO8601Basic(int, boolean, boolean, boolean)\n     * @see #parseOffsetISO8601(String, ParsePosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String formatOffsetLocalizedGMT(int offset)",
    "returnType" : "String",
    "comment" : "\n     * Returns the localized GMT(UTC) offset format for the given offset.\n     * The localized GMT offset is defined by;\n     * <ul>\n     * <li>GMT format pattern (e.g. \"GMT {0}\" - see {@link #getGMTPattern()})\n     * <li>Offset time pattern (e.g. \"+HH:mm\" - see {@link #getGMTOffsetPattern(GMTOffsetPatternType)})\n     * <li>Offset digits (e.g. \"0123456789\" - see {@link #getGMTOffsetDigits()})\n     * <li>GMT zero format (e.g. \"GMT\" - see {@link #getGMTZeroFormat()})\n     * </ul>\n     * This format always uses 2 digit hours and minutes. When the given offset has non-zero\n     * seconds, 2 digit seconds field will be appended. For example,\n     * GMT+05:00 and GMT+05:28:06.\n     * @param offset the offset from GMT(UTC) in milliseconds.\n     * @return the localized GMT format string\n     * @see #parseOffsetLocalizedGMT(String, ParsePosition)\n     * @throws IllegalArgumentException if the specified offset is out of supported range\n     * (-24 hours &lt; offset &lt; +24 hours).\n     ",
    "links" : [ "#getGMTPattern()", "#getGMTOffsetPattern(GMTOffsetPatternType)", "#getGMTOffsetDigits()", "#getGMTZeroFormat()" ]
  }, {
    "name" : "public String formatOffsetShortLocalizedGMT(int offset)",
    "returnType" : "String",
    "comment" : "\n     * Returns the short localized GMT(UTC) offset format for the given offset.\n     * The short localized GMT offset is defined by;\n     * <ul>\n     * <li>GMT format pattern (e.g. \"GMT {0}\" - see {@link #getGMTPattern()})\n     * <li>Offset time pattern (e.g. \"+HH:mm\" - see {@link #getGMTOffsetPattern(GMTOffsetPatternType)})\n     * <li>Offset digits (e.g. \"0123456789\" - see {@link #getGMTOffsetDigits()})\n     * <li>GMT zero format (e.g. \"GMT\" - see {@link #getGMTZeroFormat()})\n     * </ul>\n     * This format uses the shortest representation of offset. The hours field does not\n     * have leading zero and lower fields with zero will be truncated. For example,\n     * GMT+5 and GMT+530.\n     * @param offset the offset from GMT(UTC) in milliseconds.\n     * @return the short localized GMT format string\n     * @see #parseOffsetLocalizedGMT(String, ParsePosition)\n     * @throws IllegalArgumentException if the specified offset is out of supported range\n     * (-24 hours &lt; offset &lt; +24 hours).\n     ",
    "links" : [ "#getGMTPattern()", "#getGMTOffsetPattern(GMTOffsetPatternType)", "#getGMTOffsetDigits()", "#getGMTZeroFormat()" ]
  }, {
    "name" : "public final String format(Style style, TimeZone tz, long date)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name of the time zone at the given date for\n     * the style.\n     *\n     * <p><b>Note</b>: A style may have fallback styles defined. For example,\n     * when <code>GENERIC_LONG</code> is requested, but there is no display name\n     * data available for <code>GENERIC_LONG</code> style, the implementation\n     * may use <code>GENERIC_LOCATION</code> or <code>LOCALIZED_GMT</code>.\n     * See UTS#35 UNICODE LOCALE DATA MARKUP LANGUAGE (LDML)\n     * <a href=\"http://www.unicode.org/reports/tr35/#Time_Zone_Fallback\">Appendix J: Time Zone Display Name</a>\n     * for the details.\n     *\n     * @param style the style enum (e.g. <code>GENERIC_LONG</code>, <code>LOCALIZED_GMT</code>...)\n     * @param tz the time zone.\n     * @param date the date.\n     * @return the display name of the time zone.\n     * @see Style\n     * @see #format(Style, TimeZone, long, Output)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String format(Style style, TimeZone tz, long date, Output<TimeType> timeType)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name of the time zone at the given date for\n     * the style. This method takes an extra argument <code>Output&lt;TimeType&gt; timeType</code>\n     * in addition to the argument list of {@link #format(Style, TimeZone, long)}.\n     * The argument is used for receiving the time type (standard time\n     * or daylight saving time, or unknown) actually used for the display name.\n     *\n     * @param style the style enum (e.g. <code>GENERIC_LONG</code>, <code>LOCALIZED_GMT</code>...)\n     * @param tz the time zone.\n     * @param date the date.\n     * @param timeType the output argument for receiving the time type (standard/daylight/unknown)\n     * used for the display name, or specify null if the information is not necessary.\n     * @return the display name of the time zone.\n     * @see Style\n     * @see #format(Style, TimeZone, long)\n     ",
    "links" : [ "#format(Style" ]
  }, {
    "name" : "public final int parseOffsetISO8601(String text, ParsePosition pos)",
    "returnType" : "int",
    "comment" : "\n     * Returns offset from GMT(UTC) in milliseconds for the given ISO 8601\n     * basic or extended time zone string. When the given string is not an ISO 8601 time\n     * zone string, this method sets the current position as the error index\n     * to <code>ParsePosition pos</code> and returns 0.\n     *\n     * @param text the text contains ISO 8601 style time zone string (e.g. \"-08\", \"-0800\", \"-08:00\", and \"Z\")\n     * at the position.\n     * @param pos the position.\n     * @return the offset from GMT(UTC) in milliseconds for the given ISO 8601 style\n     * time zone string.\n     * @see #formatOffsetISO8601Basic(int, boolean, boolean, boolean)\n     * @see #formatOffsetISO8601Extended(int, boolean, boolean, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int parseOffsetLocalizedGMT(String text, ParsePosition pos)",
    "returnType" : "int",
    "comment" : "\n     * Returns offset from GMT(UTC) in milliseconds for the given localized GMT\n     * offset format string. When the given string cannot be parsed, this method\n     * sets the current position as the error index to <code>ParsePosition pos</code>\n     * and returns 0.\n     *\n     * @param text the text contains a localized GMT offset string at the position.\n     * @param pos the position.\n     * @return the offset from GMT(UTC) in milliseconds for the given localized GMT\n     * offset format string.\n     * @see #formatOffsetLocalizedGMT(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int parseOffsetShortLocalizedGMT(String text, ParsePosition pos)",
    "returnType" : "int",
    "comment" : "\n     * Returns offset from GMT(UTC) in milliseconds for the given short localized GMT\n     * offset format string. When the given string cannot be parsed, this method\n     * sets the current position as the error index to <code>ParsePosition pos</code>\n     * and returns 0.\n     *\n     * @param text the text contains a short localized GMT offset string at the position.\n     * @param pos the position.\n     * @return the offset from GMT(UTC) in milliseconds for the given short localized GMT\n     * offset format string.\n     * @see #formatOffsetShortLocalizedGMT(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone parse(Style style, String text, ParsePosition pos, EnumSet<ParseOption> options, Output<TimeType> timeType)",
    "returnType" : "TimeZone",
    "comment" : "\n     * Returns a <code>TimeZone</code> by parsing the time zone string according to\n     * the parse position, the style and the parse options.\n     *\n     * @param text the text contains a time zone string at the position.\n     * @param style the format style.\n     * @param pos the position.\n     * @param options the parse options.\n     * @param timeType The output argument for receiving the time type (standard/daylight/unknown),\n     * or specify null if the information is not necessary.\n     * @return A <code>TimeZone</code>, or null if the input could not be parsed.\n     * @see Style\n     * @see #format(Style, TimeZone, long, Output)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone parse(Style style, String text, ParsePosition pos, Output<TimeType> timeType)",
    "returnType" : "TimeZone",
    "comment" : "\n     * Returns a <code>TimeZone</code> by parsing the time zone string according to\n     * the parse position, the style and the default parse options.\n     * <p>\n     * <b>Note</b>: This method is equivalent to {@link #parse(Style, String, ParsePosition, EnumSet, Output)\n     * parse(style, text, pos, null, timeType)}.\n     *\n     * @param text the text contains a time zone string at the position.\n     * @param style the format style\n     * @param pos the position.\n     * @param timeType The output argument for receiving the time type (standard/daylight/unknown),\n     * or specify null if the information is not necessary.\n     * @return A <code>TimeZone</code>, or null if the input could not be parsed.\n     * @see Style\n     * @see #parse(Style, String, ParsePosition, EnumSet, Output)\n     * @see #format(Style, TimeZone, long, Output)\n     * @see #setDefaultParseOptions(EnumSet)\n     ",
    "links" : [ "#parse(Style" ]
  }, {
    "name" : "public final TimeZone parse(String text, ParsePosition pos)",
    "returnType" : "TimeZone",
    "comment" : "\n     * Returns a <code>TimeZone</code> by parsing the time zone string according to\n     * the given parse position.\n     * <p>\n     * <b>Note</b>: This method is equivalent to {@link #parse(Style, String, ParsePosition, EnumSet, Output)\n     * parse(Style.GENERIC_LOCATION, text, pos, EnumSet.of(ParseOption.ALL_STYLES), timeType)}.\n     *\n     * @param text the text contains a time zone string at the position.\n     * @param pos the position.\n     * @return A <code>TimeZone</code>, or null if the input could not be parsed.\n     * @see #parse(Style, String, ParsePosition, EnumSet, Output)\n     ",
    "links" : [ "#parse(Style" ]
  }, {
    "name" : "public final TimeZone parse(String text) throws ParseException",
    "returnType" : "TimeZone",
    "comment" : "\n     * Returns a <code>TimeZone</code> for the given text.\n     * <p>\n     * <b>Note</b>: The behavior of this method is equivalent to {@link #parse(String, ParsePosition)}.\n     * @param text the time zone string\n     * @return A <code>TimeZone</code>.\n     * @throws ParseException when the input could not be parsed as a time zone string.\n     * @see #parse(String, ParsePosition)\n     ",
    "links" : [ "#parse(String" ]
  }, {
    "name" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public AttributedCharacterIterator formatToCharacterIterator(Object obj)",
    "returnType" : "AttributedCharacterIterator",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object parseObject(String source, ParsePosition pos)",
    "returnType" : "Object",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private String formatOffsetLocalizedGMT(int offset, boolean isShort)",
    "returnType" : "String",
    "comment" : "\n     * Private method used for localized GMT formatting.\n     * @param offset the zone's UTC offset\n     * @param isShort true if the short localized GMT format is desired\n     * @return the localized GMT string\n     ",
    "links" : [ ]
  }, {
    "name" : "private String formatOffsetISO8601(int offset, boolean isBasic, boolean useUtcIndicator, boolean isShort, boolean ignoreSeconds)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String formatSpecific(TimeZone tz, NameType stdType, NameType dstType, long date, Output<TimeType> timeType)",
    "returnType" : "String",
    "comment" : "\n     * Private method returning the time zone's specific format string.\n     *\n     * @param tz the time zone\n     * @param stdType the name type used for standard time\n     * @param dstType the name type used for daylight time\n     * @param date the date\n     * @param timeType when null, actual time type is set\n     * @return the time zone's specific format name string\n     ",
    "links" : [ ]
  }, {
    "name" : "private String formatExemplarLocation(TimeZone tz)",
    "returnType" : "String",
    "comment" : "\n     * Private method returning the time zone's exemplar location string.\n     * This method will never return null.\n     *\n     * @param tz the time zone\n     * @return the time zone's exemplar location name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getTimeZoneID(String tzID, String mzID)",
    "returnType" : "String",
    "comment" : "\n     * Private method returns a time zone ID. If tzID is not null, the value of tzID is returned.\n     * If tzID is null, then this method look up a time zone ID for the current region. This is a\n     * small helper method used by the parse implementation method\n     *\n     * @param tzID\n     *            the time zone ID or null\n     * @param mzID\n     *            the meta zone ID or null\n     * @return A time zone ID\n     * @throws IllegalArgumentException\n     *             when both tzID and mzID are null\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized String getTargetRegion()",
    "returnType" : "String",
    "comment" : "\n     * Private method returning the target region. The target regions is determined by\n     * the locale of this instance. When a generic name is coming from\n     * a meta zone, this region is used for checking if the time zone\n     * is a reference zone of the meta zone.\n     *\n     * @return the target region\n     ",
    "links" : [ ]
  }, {
    "name" : "private TimeType getTimeType(NameType nameType)",
    "returnType" : "TimeType",
    "comment" : "\n     * Returns the time type for the given name type\n     * @param nameType the name type\n     * @return the time type (unknown/standard/daylight)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initGMTPattern(String gmtPattern)",
    "returnType" : "void",
    "comment" : "\n     * Parses the localized GMT pattern string and initialize\n     * localized gmt pattern fields including {@link #_gmtPatternTokens}.\n     * This method must be also called at deserialization time.\n     *\n     * @param gmtPattern the localized GMT pattern string such as \"GMT {0}\"\n     * @throws IllegalArgumentException when the pattern string does not contain \"{0}\"\n     ",
    "links" : [ "#_gmtPatternTokens" ]
  }, {
    "name" : "private static String unquote(String s)",
    "returnType" : "String",
    "comment" : "\n     * Unquotes the message format style pattern.\n     *\n     * @param s the pattern\n     * @return the unquoted pattern string\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initGMTOffsetPatterns(String[] gmtOffsetPatterns)",
    "returnType" : "void",
    "comment" : "\n     * Initialize localized GMT format offset hour/min/sec patterns.\n     * This method parses patterns into optimized run-time format.\n     * This method must be called at deserialization time.\n     *\n     * @param gmtOffsetPatterns patterns, String[4]\n     * @throws IllegalArgumentException when patterns are not valid\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkAbuttingHoursAndMinutes()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Object[] parseOffsetPattern(String pattern, String letters)",
    "returnType" : "Object[]",
    "comment" : "\n     * Parse the GMT offset pattern into runtime optimized format\n     *\n     * @param pattern the offset pattern string\n     * @param letters the required pattern letters such as \"Hm\"\n     * @return An array of Object. Each array entry is either String (representing\n     * pattern literal) or GMTOffsetField (hour/min/sec field)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String expandOffsetPattern(String offsetHM)",
    "returnType" : "String",
    "comment" : "TODO This code will be obsoleted once we add hour-minute-second pattern data in CLDR",
    "links" : [ ]
  }, {
    "name" : "private static String truncateOffsetPattern(String offsetHM)",
    "returnType" : "String",
    "comment" : "TODO This code will be obsoleted once we add hour pattern data in CLDR",
    "links" : [ ]
  }, {
    "name" : "private void appendOffsetDigits(StringBuilder buf, int n, int minDigits)",
    "returnType" : "void",
    "comment" : "\n     * Appends localized digits to the buffer.\n     * <p>\n     * Note: This code assumes that the input number is 0 - 59\n     *\n     * @param buf the target buffer\n     * @param n the integer number\n     * @param minDigits the minimum digits width\n     ",
    "links" : [ ]
  }, {
    "name" : "private TimeZone getTimeZoneForOffset(int offset)",
    "returnType" : "TimeZone",
    "comment" : "\n     * Creates an instance of TimeZone for the given offset\n     * @param offset the offset\n     * @return A TimeZone with the given offset\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseOffsetLocalizedGMT(String text, ParsePosition pos, boolean isShort, Output<Boolean> hasDigitOffset)",
    "returnType" : "int",
    "comment" : "\n     * Returns offset from GMT(UTC) in milliseconds for the given localized GMT\n     * offset format string. When the given string cannot be parsed, this method\n     * sets the current position as the error index to <code>ParsePosition pos</code>\n     * and returns 0.\n     *\n     * @param text the text contains a localized GMT offset string at the position.\n     * @param pos the position.\n     * @param isShort true if this parser to try the short format first\n     * @param hasDigitOffset receiving if the parsed zone string contains offset digits.\n     * @return the offset from GMT(UTC) in milliseconds for the given localized GMT\n     * offset format string.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseOffsetLocalizedGMTPattern(String text, int start, boolean isShort, int[] parsedLen)",
    "returnType" : "int",
    "comment" : "\n     * Parse localized GMT format generated by the pattern used by this formatter, except\n     * GMT Zero format.\n     * @param text the input text\n     * @param start the start index\n     * @param isShort true if the short localized GMT format is parsed.\n     * @param parsedLen the parsed length, or 0 on failure.\n     * @return the parsed offset in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseOffsetFields(String text, int start, boolean isShort, int[] parsedLen)",
    "returnType" : "int",
    "comment" : "\n     * Parses localized GMT offset fields into offset.\n     *\n     * @param text the input text\n     * @param start the start index\n     * @param isShort true if this is a short format - currently not used\n     * @param parsedLen the parsed length, or 0 on failure.\n     * @return the parsed offset in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseOffsetFieldsWithPattern(String text, int start, Object[] patternItems, boolean forceSingleHourDigit, int[] fields)",
    "returnType" : "int",
    "comment" : "\n     * Parses localized GMT offset fields with the given pattern\n     *\n     * @param text the input text\n     * @param start the start index\n     * @param patternItems the pattern (already itemized)\n     * @param forceSingleHourDigit true if hours field is parsed as a single digit\n     * @param fields receives the parsed hours/minutes/seconds\n     * @return parsed length\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseOffsetDefaultLocalizedGMT(String text, int start, int[] parsedLen)",
    "returnType" : "int",
    "comment" : "\n     * Parses the input text using the default format patterns (e.g. \"UTC{0}\").\n     * @param text the input text\n     * @param start the start index\n     * @param parsedLen the parsed length, or 0 on failure\n     * @return the parsed offset in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseDefaultOffsetFields(String text, int start, char separator, int[] parsedLen)",
    "returnType" : "int",
    "comment" : "\n     * Parses the input GMT offset fields with the default offset pattern.\n     * @param text the input text\n     * @param start the start index\n     * @param separator the separator character, e.g. ':'\n     * @param parsedLen the parsed length, or 0 on failure.\n     * @return the parsed offset in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseAbuttingOffsetFields(String text, int start, int[] parsedLen)",
    "returnType" : "int",
    "comment" : "\n     * Parses abutting localized GMT offset fields (such as 0800) into offset.\n     * @param text the input text\n     * @param start the start index\n     * @param parsedLen the parsed length, or 0 on failure\n     * @return the parsed offset in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseOffsetFieldWithLocalizedDigits(String text, int start, int minDigits, int maxDigits, int minVal, int maxVal, int[] parsedLen)",
    "returnType" : "int",
    "comment" : "\n     * Reads an offset field value. This method will stop parsing when\n     * 1) number of digits reaches <code>maxDigits</code>\n     * 2) just before already parsed number exceeds <code>maxVal</code>\n     *\n     * @param text the text\n     * @param start the start offset\n     * @param minDigits the minimum number of required digits\n     * @param maxDigits the maximum number of digits\n     * @param minVal the minimum value\n     * @param maxVal the maximum value\n     * @param parsedLen the actual parsed length is set to parsedLen[0], must not be null.\n     * @return the integer value parsed\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseSingleLocalizedDigit(String text, int start, int[] len)",
    "returnType" : "int",
    "comment" : "\n     * Reads a single decimal digit, either localized digits used by this object\n     * or any Unicode numeric character.\n     * @param text the text\n     * @param start the start index\n     * @param len the actual length read from the text\n     * the start index is not a decimal number.\n     * @return the integer value of the parsed digit, or -1 on failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String[] toCodePoints(String str)",
    "returnType" : "String[]",
    "comment" : "\n     * Break input String into String[]. Each array element represents\n     * a code point. This method is used for parsing localized digit\n     * characters and support characters in Unicode supplemental planes.\n     *\n     * @param str the string\n     * @return the array of code points in String[]\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int parseOffsetISO8601(String text, ParsePosition pos, boolean extendedOnly, Output<Boolean> hasDigitOffset)",
    "returnType" : "int",
    "comment" : "\n     * Returns offset from GMT(UTC) in milliseconds for the given ISO 8601 time zone string\n     * (basic format, extended format, or UTC indicator). When the given string is not an ISO 8601 time\n     * zone string, this method sets the current position as the error index\n     * to <code>ParsePosition pos</code> and returns 0.\n     *\n     * @param text the text contains ISO 8601 style time zone string (e.g. \"-08\", \"-08:00\", \"Z\")\n     * at the position.\n     * @param pos the position.\n     * @param extendedOnly <code>true</code> if parsing the text as ISO 8601 extended offset format (e.g. \"-08:00\"),\n     *                     or <code>false</code> to evaluate the text as basic format.\n     * @param hasDigitOffset receiving if the parsed zone string contains offset digits.\n     * @return the offset from GMT(UTC) in milliseconds for the given ISO 8601 style\n     * time zone string.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int parseAbuttingAsciiOffsetFields(String text, ParsePosition pos, OffsetFields minFields, OffsetFields maxFields, boolean fixedHourWidth)",
    "returnType" : "int",
    "comment" : "\n     * Parses offset represented by contiguous ASCII digits\n     * <p>\n     * Note: This method expects the input position is already at the start of\n     * ASCII digits and does not parse sign (+/-).\n     *\n     * @param text The text contains a sequence of ASCII digits\n     * @param pos The parse position\n     * @param minFields The minimum Fields to be parsed\n     * @param maxFields The maximum Fields to be parsed\n     * @param fixedHourWidth true if hours field must be width of 2\n     * @return Parsed offset, 0 or positive number.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int parseAsciiOffsetFields(String text, ParsePosition pos, char sep, OffsetFields minFields, OffsetFields maxFields)",
    "returnType" : "int",
    "comment" : "\n     * Parses offset represented by ASCII digits and separators.\n     * <p>\n     * Note: This method expects the input position is already at the start of\n     * ASCII digits and does not parse sign (+/-).\n     *\n     * @param text The text\n     * @param pos The parse position\n     * @param sep The separator character\n     * @param minFields The minimum Fields to be parsed\n     * @param maxFields The maximum Fields to be parsed\n     * @return Parsed offset, 0 or positive number.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String parseZoneID(String text, ParsePosition pos)",
    "returnType" : "String",
    "comment" : "\n     * Parse a zone ID.\n     * @param text the text contains a time zone ID string at the position.\n     * @param pos the position.\n     * @return The zone ID parsed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String parseShortZoneID(String text, ParsePosition pos)",
    "returnType" : "String",
    "comment" : "\n     * Parse a short zone ID.\n     * @param text the text contains a time zone ID string at the position.\n     * @param pos the position.\n     * @return The zone ID for the parsed short zone ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String parseExemplarLocation(String text, ParsePosition pos)",
    "returnType" : "String",
    "comment" : "\n     * Parse an exemplar location string.\n     * @param text the text contains an exemplar location string at the position.\n     * @param pos the position.\n     * @return The zone ID for the parsed exemplar location.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream oos) throws IOException",
    "returnType" : "void",
    "comment" : "\n     *\n     * @param oos the object output stream\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException",
    "returnType" : "void",
    "comment" : "\n     *\n     * @param ois the object input stream\n     * @throws ClassNotFoundException\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneFormat freeze()",
    "returnType" : "TimeZoneFormat",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneFormat cloneAsThawed()",
    "returnType" : "TimeZoneFormat",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static TimeZoneFormat getInstance(ULocale locale)", "public static TimeZoneFormat getInstance(Locale locale)", "public TimeZoneNames getTimeZoneNames()", "private TimeZoneGenericNames getTimeZoneGenericNames()", "private TimeZoneNames getTZDBTimeZoneNames()", "public TimeZoneFormat setTimeZoneNames(TimeZoneNames tznames)", "public String getGMTPattern()", "public TimeZoneFormat setGMTPattern(String pattern)", "public String getGMTOffsetPattern(GMTOffsetPatternType type)", "public TimeZoneFormat setGMTOffsetPattern(GMTOffsetPatternType type, String pattern)", "public String getGMTOffsetDigits()", "public TimeZoneFormat setGMTOffsetDigits(String digits)", "public String getGMTZeroFormat()", "public TimeZoneFormat setGMTZeroFormat(String gmtZeroFormat)", "public TimeZoneFormat setDefaultParseOptions(EnumSet<ParseOption> options)", "public EnumSet<ParseOption> getDefaultParseOptions()", "public final String formatOffsetISO8601Basic(int offset, boolean useUtcIndicator, boolean isShort, boolean ignoreSeconds)", "public final String formatOffsetISO8601Extended(int offset, boolean useUtcIndicator, boolean isShort, boolean ignoreSeconds)", "public String formatOffsetLocalizedGMT(int offset)", "public String formatOffsetShortLocalizedGMT(int offset)", "public final String format(Style style, TimeZone tz, long date)", "public String format(Style style, TimeZone tz, long date, Output<TimeType> timeType)", "public final int parseOffsetISO8601(String text, ParsePosition pos)", "public int parseOffsetLocalizedGMT(String text, ParsePosition pos)", "public int parseOffsetShortLocalizedGMT(String text, ParsePosition pos)", "public TimeZone parse(Style style, String text, ParsePosition pos, EnumSet<ParseOption> options, Output<TimeType> timeType)", "public TimeZone parse(Style style, String text, ParsePosition pos, Output<TimeType> timeType)", "public final TimeZone parse(String text, ParsePosition pos)", "public final TimeZone parse(String text) throws ParseException", "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)", "public AttributedCharacterIterator formatToCharacterIterator(Object obj)", "public Object parseObject(String source, ParsePosition pos)", "private String formatOffsetLocalizedGMT(int offset, boolean isShort)", "private String formatOffsetISO8601(int offset, boolean isBasic, boolean useUtcIndicator, boolean isShort, boolean ignoreSeconds)", "private String formatSpecific(TimeZone tz, NameType stdType, NameType dstType, long date, Output<TimeType> timeType)", "private String formatExemplarLocation(TimeZone tz)", "private String getTimeZoneID(String tzID, String mzID)", "private synchronized String getTargetRegion()", "private TimeType getTimeType(NameType nameType)", "private void initGMTPattern(String gmtPattern)", "private static String unquote(String s)", "private void initGMTOffsetPatterns(String[] gmtOffsetPatterns)", "private void checkAbuttingHoursAndMinutes()", "private static Object[] parseOffsetPattern(String pattern, String letters)", "private static String expandOffsetPattern(String offsetHM)", "private static String truncateOffsetPattern(String offsetHM)", "private void appendOffsetDigits(StringBuilder buf, int n, int minDigits)", "private TimeZone getTimeZoneForOffset(int offset)", "private int parseOffsetLocalizedGMT(String text, ParsePosition pos, boolean isShort, Output<Boolean> hasDigitOffset)", "private int parseOffsetLocalizedGMTPattern(String text, int start, boolean isShort, int[] parsedLen)", "private int parseOffsetFields(String text, int start, boolean isShort, int[] parsedLen)", "private int parseOffsetFieldsWithPattern(String text, int start, Object[] patternItems, boolean forceSingleHourDigit, int[] fields)", "private int parseOffsetDefaultLocalizedGMT(String text, int start, int[] parsedLen)", "private int parseDefaultOffsetFields(String text, int start, char separator, int[] parsedLen)", "private int parseAbuttingOffsetFields(String text, int start, int[] parsedLen)", "private int parseOffsetFieldWithLocalizedDigits(String text, int start, int minDigits, int maxDigits, int minVal, int maxVal, int[] parsedLen)", "private int parseSingleLocalizedDigit(String text, int start, int[] len)", "private static String[] toCodePoints(String str)", "private static int parseOffsetISO8601(String text, ParsePosition pos, boolean extendedOnly, Output<Boolean> hasDigitOffset)", "private static int parseAbuttingAsciiOffsetFields(String text, ParsePosition pos, OffsetFields minFields, OffsetFields maxFields, boolean fixedHourWidth)", "private static int parseAsciiOffsetFields(String text, ParsePosition pos, char sep, OffsetFields minFields, OffsetFields maxFields)", "private static String parseZoneID(String text, ParsePosition pos)", "private static String parseShortZoneID(String text, ParsePosition pos)", "private String parseExemplarLocation(String text, ParsePosition pos)", "private void writeObject(ObjectOutputStream oos) throws IOException", "private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException", "public boolean isFrozen()", "public TimeZoneFormat freeze()", "public TimeZoneFormat cloneAsThawed()" ],
  "variableNames" : [ "serialVersionUID", "ISO_Z_STYLE_FLAG", "ISO_LOCAL_STYLE_FLAG", "_locale", "_tznames", "_gmtPattern", "_gmtOffsetPatterns", "_gmtOffsetDigits", "_gmtZeroFormat", "_parseAllStyles", "_parseTZDBNames", "_gnames", "_gmtPatternPrefix", "_gmtPatternSuffix", "_gmtOffsetPatternItems", "_abuttingOffsetHoursAndMinutes", "_region", "_frozen", "_tzdbNames", "TZID_GMT", "ALT_GMT_STRINGS", "DEFAULT_GMT_PATTERN", "DEFAULT_GMT_ZERO", "DEFAULT_GMT_DIGITS", "DEFAULT_GMT_OFFSET_SEP", "ASCII_DIGITS", "ISO8601_UTC", "UNKNOWN_ZONE_ID", "UNKNOWN_SHORT_ZONE_ID", "UNKNOWN_LOCATION", "PARSE_GMT_OFFSET_TYPES", "MILLIS_PER_HOUR", "MILLIS_PER_MINUTE", "MILLIS_PER_SECOND", "MAX_OFFSET", "MAX_OFFSET_HOUR", "MAX_OFFSET_MINUTE", "MAX_OFFSET_SECOND", "UNKNOWN_OFFSET", "_tzfCache", "ALL_SIMPLE_NAME_TYPES", "ALL_GENERIC_NAME_TYPES", "ZONE_ID_TRIE", "SHORT_ZONE_ID_TRIE", "serialPersistentFields" ]
}