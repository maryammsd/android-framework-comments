{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/ApiCompatibilityUtils.java",
  "packageName" : "org.chromium.base",
  "className" : "ApiCompatibilityUtils",
  "comment" : "\n * Utility class to use APIs not in all supported Android versions.\n *\n * Do not inline because we use many new APIs, and if they are inlined, they could cause dex\n * validation errors on low Android versions.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static T requireNonNull(T obj)",
    "returnType" : "T",
    "comment" : "\n     * Checks that the object reference is not null and throws NullPointerException if it is.\n     * See {@link Objects#requireNonNull} which is available since API level 19.\n     * @param obj The object to check\n     ",
    "links" : [ "#requireNonNull" ]
  }, {
    "name" : "public static T requireNonNull(T obj, String message)",
    "returnType" : "T",
    "comment" : "\n     * Checks that the object reference is not null and throws NullPointerException if it is.\n     * See {@link Objects#requireNonNull} which is available since API level 19.\n     * @param obj The object to check\n     * @param message The message to put into NullPointerException\n     ",
    "links" : [ "#requireNonNull" ]
  }, {
    "name" : "public static byte[] getBytesUtf8(String str)",
    "returnType" : "byte[]",
    "comment" : "\n     * {@link String#getBytes()} but specifying UTF-8 as the encoding and capturing the resulting\n     * UnsupportedEncodingException.\n     ",
    "links" : [ "#getBytes()" ]
  }, {
    "name" : "public static Intent getNotificationSettingsIntent()",
    "returnType" : "Intent",
    "comment" : "\n     *  Gets an intent to start the Android system notification settings activity for an app.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Drawable getDrawable(Resources res, int id) throws NotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * @see android.content.res.Resources#getDrawable(int id).\n     * TODO(ltian): use {@link AppCompatResources} to parse drawable to prevent fail on\n     * {@link VectorDrawable}. (http://crbug.com/792129)\n     ",
    "links" : [ "AppCompatResources", "VectorDrawable" ]
  }, {
    "name" : "public static Drawable getDrawableForDensity(Resources res, int id, int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * @see android.content.res.Resources#getDrawableForDensity(int id, int density).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getColor(Resources res, int id) throws NotFoundException",
    "returnType" : "int",
    "comment" : "\n     * @see android.content.res.Resources#getColor(int id).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setTextAppearance(TextView view, int id)",
    "returnType" : "void",
    "comment" : "\n     * @see android.widget.TextView#setTextAppearance(int id).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDemoUser()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the device is running in demo mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int checkPermission(Context context, String permission, int pid, int uid)",
    "returnType" : "int",
    "comment" : "\n     * @see Context#checkPermission(String, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isInMultiWindowMode(Activity activity)",
    "returnType" : "boolean",
    "comment" : "\n     * @param activity The {@link Activity} to check.\n     * @return Whether or not {@code activity} is currently in Android N+ multi-window mode.\n     ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "public static List<Integer> getTargetableDisplayIds(Activity activity)",
    "returnType" : "List<Integer>",
    "comment" : "\n     * Get a list of ids of targetable displays, including the default display for the\n     * current activity. A set of targetable displays can only be determined on Q+. An empty list\n     * is returned if called on prior Q.\n     * @param activity The {@link Activity} to check.\n     * @return A list of display ids. Empty if there is none or version is less than Q, or\n     *         windowAndroid does not contain an activity.\n     ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "public static void disableSmartSelectionTextClassifier(TextView textView)",
    "returnType" : "void",
    "comment" : "\n     * Disables the Smart Select {@link TextClassifier} for the given {@link TextView} instance.\n     * @param textView The {@link TextView} that should have its classifier disabled.\n     ",
    "links" : [ "android.view.textclassifier.TextClassifier", "android.widget.TextView" ]
  }, {
    "name" : "public static Bundle createLaunchDisplayIdActivityOptions(int displayId)",
    "returnType" : "Bundle",
    "comment" : "\n     * Creates an ActivityOptions Bundle with basic options and the LaunchDisplayId set.\n     * @param displayId The id of the display to launch into.\n     * @return The created bundle, or null if unsupported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setActivityOptionsBackgroundActivityStartMode(@NonNull ActivityOptions options)",
    "returnType" : "void",
    "comment" : "\n     * Sets the mode {@link ActivityOptions#MODE_BACKGROUND_ACTIVITY_START_ALLOWED} to the\n     * given {@link ActivityOptions}. The options can be used to send {@link PendingIntent}\n     * passed to Chrome from a backgrounded app.\n     * @param options {@ActivityOptions} to set the required mode to.\n     ",
    "links" : [ "android.app.ActivityOptions", "android.app.ActivityOptions#MODE_BACKGROUND_ACTIVITY_START_ALLOWED", "PendingIntent" ]
  }, {
    "name" : "public static void clearHandwritingBoundsOffsetBottom(View view)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bottom handwriting bounds offset of the given view to 0.\n     * See https://crbug.com/1427112\n     * @param view The view on which to set the handwriting bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : " static String getProcessName()",
    "returnType" : "String",
    "comment" : " Access this via ContextUtils.getProcessName().",
    "links" : [ ]
  }, {
    "name" : "public static boolean isRunningInUserTestHarness()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap getBitmapByUri(ContentResolver cr, Uri uri) throws IOException",
    "returnType" : "Bitmap",
    "comment" : " Retrieves an image for the given uri as a Bitmap. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static T requireNonNull(T obj)", "public static T requireNonNull(T obj, String message)", "public static byte[] getBytesUtf8(String str)", "public static Intent getNotificationSettingsIntent()", "public static Drawable getDrawable(Resources res, int id) throws NotFoundException", "public static Drawable getDrawableForDensity(Resources res, int id, int density)", "public static int getColor(Resources res, int id) throws NotFoundException", "public static void setTextAppearance(TextView view, int id)", "public static boolean isDemoUser()", "public static int checkPermission(Context context, String permission, int pid, int uid)", "public static boolean isInMultiWindowMode(Activity activity)", "public static List<Integer> getTargetableDisplayIds(Activity activity)", "public static void disableSmartSelectionTextClassifier(TextView textView)", "public static Bundle createLaunchDisplayIdActivityOptions(int displayId)", "public static void setActivityOptionsBackgroundActivityStartMode(@NonNull ActivityOptions options)", "public static void clearHandwritingBoundsOffsetBottom(View view)", " static String getProcessName()", "public static boolean isRunningInUserTestHarness()", "public static Bitmap getBitmapByUri(ContentResolver cr, Uri uri) throws IOException" ],
  "variableNames" : [ "TAG" ]
}