{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/SharedMemory.java",
  "packageName" : "android.os",
  "className" : "SharedMemory",
  "comment" : "\n * SharedMemory enables the creation, mapping, and protection control over anonymous shared memory.\n ",
  "variables" : [ {
    "name" : "mFileDescriptor",
    "type" : "FileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMemoryRegistration",
    "type" : "MemoryRegistration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCleaner",
    "type" : "Cleaner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROT_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SharedMemory>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SharedMemory create(@Nullable String name, int size) throws ErrnoException",
    "returnType" : "SharedMemory",
    "comment" : "\n     * Creates an anonymous SharedMemory instance with the provided debug name and size. The name\n     * is only used for debugging purposes and can help identify what the shared memory is used\n     * for when inspecting memory maps for the processes that have mapped this SharedMemory\n     * instance.\n     *\n     * @param name The debug name to use for this SharedMemory instance. This can be null, however\n     *             a debug name is recommended to help identify memory usage when using tools\n     *             such as lsof or examining /proc/[pid]/maps\n     * @param size The size of the shared memory to create. Must be greater than 0.\n     * @return A SharedMemory instance of the requested size\n     * @throws ErrnoException if the requested allocation fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkOpen()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void validateProt(int prot)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setProtect(int prot)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the protection on the shared memory to the combination specified in prot, which\n     * is either a bitwise-or'd combination of {@link android.system.OsConstants#PROT_READ},\n     * {@link android.system.OsConstants#PROT_WRITE}, {@link android.system.OsConstants#PROT_EXEC}\n     * from {@link android.system.OsConstants}, or {@link android.system.OsConstants#PROT_NONE},\n     * to remove all further access.\n     *\n     * Note that protection can only ever be removed, not added. By default shared memory\n     * is created with protection set to PROT_READ | PROT_WRITE | PROT_EXEC. The protection\n     * passed here also only applies to any mappings created after calling this method. Existing\n     * mmaps of the shared memory retain whatever protection they had when they were created.\n     *\n     * A common usage of this is to share a read-only copy of the data with something else. To do\n     * that first create the read/write mapping with PROT_READ | PROT_WRITE,\n     * then call setProtect(PROT_READ) to remove write capability, then send the SharedMemory\n     * to another process. That process will only be able to mmap with PROT_READ.\n     *\n     * @param prot Any bitwise-or'ed combination of\n     *                  {@link android.system.OsConstants#PROT_READ},\n     *                  {@link android.system.OsConstants#PROT_WRITE}, and\n     *                  {@link android.system.OsConstants#PROT_EXEC}; or\n     *                  {@link android.system.OsConstants#PROT_NONE}\n     * @return Whether or not the requested protection was applied. Returns true on success,\n     * false if the requested protection was broader than the existing protection.\n     ",
    "links" : [ "android.system.OsConstants#PROT_READ", "android.system.OsConstants#PROT_WRITE", "android.system.OsConstants#PROT_EXEC", "android.system.OsConstants", "android.system.OsConstants#PROT_NONE", "android.system.OsConstants#PROT_READ", "android.system.OsConstants#PROT_WRITE", "android.system.OsConstants#PROT_EXEC", "android.system.OsConstants#PROT_NONE" ]
  }, {
    "name" : "public FileDescriptor getFileDescriptor()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Returns the backing {@link FileDescriptor} for this SharedMemory object. The SharedMemory\n     * instance retains ownership of the FileDescriptor.\n     *\n     * This FileDescriptor is interoperable with the ASharedMemory NDK APIs.\n     *\n     * @return Returns the FileDescriptor associated with this object.\n     *\n     * @hide Exists only for MemoryFile interop\n     ",
    "links" : [ "FileDescriptor" ]
  }, {
    "name" : "public int getFd()",
    "returnType" : "int",
    "comment" : "\n     * Returns the backing native fd int for this SharedMemory object. The SharedMemory\n     * instance retains ownership of the fd.\n     *\n     * This fd is interoperable with the ASharedMemory NDK APIs.\n     *\n     * @return Returns the native fd associated with this object, or -1 if it is already closed.\n     *\n     * @hide Exposed for native ASharedMemory_dupFromJava()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSize()",
    "returnType" : "int",
    "comment" : "\n     * @return The size of the SharedMemory region.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ByteBuffer mapReadWrite() throws ErrnoException",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Creates a read/write mapping of the entire shared memory region. This requires the the\n     * protection level of the shared memory is at least PROT_READ|PROT_WRITE or the map will fail.\n     *\n     * Use {@link #map(int, int, int)} to have more control over the mapping if desired.\n     * This is equivalent to map(OsConstants.PROT_READ | OsConstants.PROT_WRITE, 0, getSize())\n     *\n     * @return A ByteBuffer mapping\n     * @throws ErrnoException if the mmap call failed.\n     ",
    "links" : [ "#map" ]
  }, {
    "name" : "public ByteBuffer mapReadOnly() throws ErrnoException",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Creates a read-only mapping of the entire shared memory region. This requires the the\n     * protection level of the shared memory is at least PROT_READ or the map will fail.\n     *\n     * Use {@link #map(int, int, int)} to have more control over the mapping if desired.\n     * This is equivalent to map(OsConstants.PROT_READ, 0, getSize())\n     *\n     * @return A ByteBuffer mapping\n     * @throws ErrnoException if the mmap call failed.\n     ",
    "links" : [ "#map" ]
  }, {
    "name" : "public ByteBuffer map(int prot, int offset, int length) throws ErrnoException",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Creates an mmap of the SharedMemory with the specified prot, offset, and length. This will\n     * always produce a new ByteBuffer window to the backing shared memory region. Every call\n     * to map() may be paired with a call to {@link #unmap(ByteBuffer)} when the ByteBuffer\n     * returned by map() is no longer needed.\n     *\n     * @param prot A bitwise-or'd combination of PROT_READ, PROT_WRITE, PROT_EXEC, or PROT_NONE.\n     * @param offset The offset into the shared memory to begin mapping. Must be >= 0 and less than\n     *         getSize().\n     * @param length The length of the region to map. Must be > 0 and offset + length must not\n     *         exceed getSize().\n     * @return A ByteBuffer mapping.\n     * @throws ErrnoException if the mmap call failed.\n     ",
    "links" : [ "#unmap" ]
  }, {
    "name" : "public static void unmap(@NonNull ByteBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n     * Unmaps a buffer previously returned by {@link #map(int, int, int)}. This will immediately\n     * release the backing memory of the ByteBuffer, invalidating all references to it. Only\n     * call this method if there are no duplicates of the ByteBuffer in use and don't\n     * access the ByteBuffer after calling this method.\n     *\n     * @param buffer The buffer to unmap\n     ",
    "links" : [ "#map" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the backing {@link FileDescriptor} of this SharedMemory instance. Note that all\n     * open mappings of the shared memory will remain valid and may continue to be used. The\n     * shared memory will not be freed until all file descriptor handles are closed and all\n     * memory mappings are unmapped.\n     ",
    "links" : [ "FileDescriptor" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor getFdDup() throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Returns a dup'd ParcelFileDescriptor from the SharedMemory FileDescriptor.\n     * This obeys standard POSIX semantics, where the\n     * new file descriptor shared state such as file position with the\n     * original file descriptor.\n     * TODO: propose this method as a public or system API for next release to achieve parity with\n     *  NDK ASharedMemory_dupFromJava.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native FileDescriptor nCreate(String name, int size) throws ErrnoException",
    "returnType" : "FileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetSize(FileDescriptor fd)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nSetProt(FileDescriptor fd, int prot)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mFileDescriptor", "mSize", "mMemoryRegistration", "mCleaner", "PROT_MASK", "CREATOR" ],
  "methodNames" : [ "public static SharedMemory create(@Nullable String name, int size) throws ErrnoException", "private void checkOpen()", "private static void validateProt(int prot)", "public boolean setProtect(int prot)", "public FileDescriptor getFileDescriptor()", "public int getFd()", "public int getSize()", "public ByteBuffer mapReadWrite() throws ErrnoException", "public ByteBuffer mapReadOnly() throws ErrnoException", "public ByteBuffer map(int prot, int offset, int length) throws ErrnoException", "public static void unmap(@NonNull ByteBuffer buffer)", "public void close()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public ParcelFileDescriptor getFdDup() throws IOException", "private static native FileDescriptor nCreate(String name, int size) throws ErrnoException", "private static native int nGetSize(FileDescriptor fd)", "private static native int nSetProt(FileDescriptor fd, int prot)" ]
}