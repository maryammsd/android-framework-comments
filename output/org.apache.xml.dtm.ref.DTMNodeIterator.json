{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/DTMNodeIterator.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "DTMNodeIterator",
  "comment" : "\n * <code>DTMNodeIterator</code> gives us an implementation of the \n * DTMNodeIterator which returns DOM nodes.\n *\n * Please note that this is not necessarily equivlaent to a DOM\n * NodeIterator operating over the same document. In particular:\n * <ul>\n *\n * <li>If there are several Text nodes in logical succession (ie,\n * across CDATASection and EntityReference boundaries), we will return\n * only the first; the caller is responsible for stepping through\n * them.\n * (%REVIEW% Provide a convenience routine here to assist, pending\n * proposed DOM Level 3 getAdjacentText() operation?) </li>\n *\n * <li>Since the whole XPath/XSLT architecture assumes that the source\n * document is not altered while we're working with it, we do not\n * promise to implement the DOM NodeIterator's \"maintain current\n * position\" response to document mutation. </li>\n *\n * <li>Since our design for XPath NodeIterators builds a stateful\n * filter directly into the traversal object, getNodeFilter() is not\n * supported.</li>\n *\n * </ul>\n *\n * <p>State: In progress!!</p>\n * ",
  "links" : [ ],
  "variables" : [ {
    "name" : "dtm_iter",
    "type" : "DTMIterator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "valid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public DTMIterator getDTMIterator()",
    "returnType" : "DTMIterator",
    "comment" : " Access the wrapped DTMIterator. I'm not sure whether anyone will\n   * need this or not, but let's write it and think about it.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : " Detaches the NodeIterator from the set which it iterated over,\n   * releasing any computational resources and placing the iterator in\n   * the INVALID state.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public boolean getExpandEntityReferences()",
    "returnType" : "boolean",
    "comment" : " The value of this flag determines whether the children\n   * of entity reference nodes are visible to the iterator.\n   *\n   * @return false, always (the DTM model flattens entity references)\n   * ",
    "links" : [ ]
  }, {
    "name" : "public NodeFilter getFilter()",
    "returnType" : "NodeFilter",
    "comment" : " Return a handle to the filter used to screen nodes.\n   *\n   * This is ill-defined in Xalan's usage of Nodeiterator, where we have\n   * built stateful XPath-based filtering directly into the traversal\n   * object. We could return something which supports the NodeFilter interface\n   * and allows querying whether a given node would be permitted if it appeared\n   * as our next node, but in the current implementation that would be very\n   * complex -- and just isn't all that useful.\n   * \n   * @throws DOMException -- NOT_SUPPORTED_ERROR because I can't think\n   * of anything more useful to do in this case\n   * ",
    "links" : [ ]
  }, {
    "name" : "public Node getRoot()",
    "returnType" : "Node",
    "comment" : " @return The root node of the NodeIterator, as specified\n   * when it was created.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public int getWhatToShow()",
    "returnType" : "int",
    "comment" : " Return a mask describing which node types are presented via the\n   * iterator.\n   *",
    "links" : [ ]
  }, {
    "name" : "public Node nextNode() throws DOMException",
    "returnType" : "Node",
    "comment" : " @return the next node in the set and advance the position of the\n   * iterator in the set.\n   *\n   * @throws DOMException - INVALID_STATE_ERR Raised if this method is\n   * called after the detach method was invoked.\n   *  ",
    "links" : [ ]
  }, {
    "name" : "public Node previousNode()",
    "returnType" : "Node",
    "comment" : " @return the next previous in the set and advance the position of the\n   * iterator in the set.\n   *\n   * @throws DOMException - INVALID_STATE_ERR Raised if this method is\n   * called after the detach method was invoked.\n   *  ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public DTMIterator getDTMIterator()", "public void detach()", "public boolean getExpandEntityReferences()", "public NodeFilter getFilter()", "public Node getRoot()", "public int getWhatToShow()", "public Node nextNode() throws DOMException", "public Node previousNode()" ],
  "variableNames" : [ "dtm_iter", "valid" ]
}