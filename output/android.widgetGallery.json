{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/Gallery.java",
  "packageName" : "android.widget",
  "className" : "Gallery",
  "comment" : "\n * A view that shows items in a center-locked, horizontally scrolling list.\n * <p>\n * The default values for the Gallery assume you will be using\n * {@link android.R.styleable#Theme_galleryItemBackground} as the background for\n * each View given to the Gallery from the Adapter. If you are not doing this,\n * you may need to adjust some Gallery properties, such as the spacing.\n * <p>\n * Views given to the Gallery should use {@link Gallery.LayoutParams} as their\n * layout parameters type.\n * \n * @attr ref android.R.styleable#Gallery_animationDuration\n * @attr ref android.R.styleable#Gallery_spacing\n * @attr ref android.R.styleable#Gallery_gravity\n * \n * @deprecated This widget is no longer supported. Other horizontally scrolling\n * widgets include {@link HorizontalScrollView} and {@link android.support.v4.view.ViewPager}\n * from the support library.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "localLOGV",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCROLL_TO_FLING_UNCERTAINTY_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Duration in milliseconds from the start of a scroll during which we're\n     * unsure whether the user is scrolling or flinging.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSpacing",
    "type" : "int",
    "comment" : "\n     * Horizontal spacing between items.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimationDuration",
    "type" : "int",
    "comment" : "\n     * How long the transition animation should run when a child view changes\n     * position, measured in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUnselectedAlpha",
    "type" : "float",
    "comment" : "\n     * The alpha of items that are not selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLeftMost",
    "type" : "int",
    "comment" : "\n     * Left most edge of a child seen so far during layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRightMost",
    "type" : "int",
    "comment" : "\n     * Right most edge of a child seen so far during layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "mGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGestureDetector",
    "type" : "GestureDetector",
    "comment" : "\n     * Helper for detecting touch gestures.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDownTouchPosition",
    "type" : "int",
    "comment" : "\n     * The position of the item that received the user's down touch.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDownTouchView",
    "type" : "View",
    "comment" : "\n     * The view of the item that received the user's down touch.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFlingRunnable",
    "type" : "FlingRunnable",
    "comment" : "\n     * Executes the delta scrolls from a fling or scroll movement. \n     ",
    "links" : [ ]
  }, {
    "name" : "mDisableSuppressSelectionChangedRunnable",
    "type" : "Runnable",
    "comment" : "\n     * Sets mSuppressSelectionChanged = false. This is used to set it to false\n     * in the future. It will also trigger a selection changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShouldStopFling",
    "type" : "boolean",
    "comment" : "\n     * When fling runnable runs, it resets this to false. Any method along the\n     * path until the end of its run() can set this to true to abort any\n     * remaining fling. For example, if we've reached either the leftmost or\n     * rightmost item, we will set this to true.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectedChild",
    "type" : "View",
    "comment" : "\n     * The currently selected item's child.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShouldCallbackDuringFling",
    "type" : "boolean",
    "comment" : "\n     * Whether to continuously callback on the item selected listener during a\n     * fling.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShouldCallbackOnUnselectedItemClick",
    "type" : "boolean",
    "comment" : "\n     * Whether to callback when an item that is not selected is clicked.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSuppressSelectionChanged",
    "type" : "boolean",
    "comment" : "\n     * If true, do not callback to item selected listener. \n     ",
    "links" : [ ]
  }, {
    "name" : "mReceivedInvokeKeyDown",
    "type" : "boolean",
    "comment" : "\n     * If true, we have received the \"invoke\" (center or enter buttons) key\n     * down. This is checked before we action on the \"invoke\" key up, and is\n     * subsequently cleared.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContextMenuInfo",
    "type" : "AdapterContextMenuInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsFirstScroll",
    "type" : "boolean",
    "comment" : "\n     * If true, this onScroll is the first for this user's drag (remember, a\n     * drag sends many onScrolls).\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsRtl",
    "type" : "boolean",
    "comment" : "\n     * If true, mFirstPosition is the position of the rightmost child, and\n     * the children are ordered right to left.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectedCenterOffset",
    "type" : "int",
    "comment" : "\n     * Offset between the center of the selected child view and the center of the Gallery.\n     * Used to reset position correctly during layout.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCallbackDuringFling(boolean shouldCallback)",
    "returnType" : "void",
    "comment" : "\n     * Whether or not to callback on any {@link #getOnItemSelectedListener()}\n     * while the items are being flinged. If false, only the final selected item\n     * will cause the callback. If true, all items between the first and the\n     * final will cause callbacks.\n     * \n     * @param shouldCallback Whether or not to callback on the listener while\n     *            the items are being flinged.\n     ",
    "links" : [ "#getOnItemSelectedListener" ]
  }, {
    "name" : "public void setCallbackOnUnselectedItemClick(boolean shouldCallback)",
    "returnType" : "void",
    "comment" : "\n     * Whether or not to callback when an item that is not selected is clicked.\n     * If false, the item will become selected (and re-centered). If true, the\n     * {@link #getOnItemClickListener()} will get the callback.\n     * \n     * @param shouldCallback Whether or not to callback on the listener when a\n     *            item that is not selected is clicked.\n     * @hide\n     ",
    "links" : [ "#getOnItemClickListener" ]
  }, {
    "name" : "public void setAnimationDuration(int animationDurationMillis)",
    "returnType" : "void",
    "comment" : "\n     * Sets how long the transition animation should run when a child view\n     * changes position. Only relevant if animation is turned on.\n     * \n     * @param animationDurationMillis The duration of the transition, in\n     *        milliseconds.\n     * \n     * @attr ref android.R.styleable#Gallery_animationDuration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSpacing(int spacing)",
    "returnType" : "void",
    "comment" : "\n     * Sets the spacing between items in a Gallery\n     * \n     * @param spacing The spacing in pixels between items in the Gallery\n     * \n     * @attr ref android.R.styleable#Gallery_spacing\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUnselectedAlpha(float unselectedAlpha)",
    "returnType" : "void",
    "comment" : "\n     * Sets the alpha of items that are not selected in the Gallery.\n     * \n     * @param unselectedAlpha the alpha for the items that are not selected.\n     * \n     * @attr ref android.R.styleable#Gallery_unselectedAlpha\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean getChildStaticTransformation(View child, Transformation t)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeHorizontalScrollExtent()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeHorizontalScrollOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeHorizontalScrollRange()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "ViewGroup.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs)",
    "returnType" : "ViewGroup.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ViewGroup.LayoutParams generateDefaultLayoutParams()",
    "returnType" : "ViewGroup.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getChildHeight(View child)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void trackMotionScroll(int deltaX)",
    "returnType" : "void",
    "comment" : "\n     * Tracks a motion scroll. In reality, this is used to do just about any\n     * movement to items (touch scroll, arrow-key scroll, set an item as selected).\n     * \n     * @param deltaX Change in X from the previous event.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getLimitedMotionScrollAmount(boolean motionToLeft, int deltaX)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void offsetChildrenLeftAndRight(int offset)",
    "returnType" : "void",
    "comment" : "\n     * Offset the horizontal location of all children of this view by the\n     * specified number of pixels.\n     * \n     * @param offset the number of pixels to offset\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getCenterOfGallery()",
    "returnType" : "int",
    "comment" : "\n     * @return The center of this Gallery.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getCenterOfView(View view)",
    "returnType" : "int",
    "comment" : "\n     * @return The center of the given view.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void detachOffScreenChildren(boolean toLeft)",
    "returnType" : "void",
    "comment" : "\n     * Detaches children that are off the screen (i.e.: Gallery bounds).\n     * \n     * @param toLeft Whether to detach children to the left of the Gallery, or\n     *            to the right.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void scrollIntoSlots()",
    "returnType" : "void",
    "comment" : "\n     * Scrolls the items so that the selected item is in its 'slot' (its center\n     * is the gallery's center).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onFinishedMovement()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void selectionChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setSelectionToCenterChild()",
    "returnType" : "void",
    "comment" : "\n     * Looks for the child that is closest to the center and sets it as the\n     * selected child.\n     ",
    "links" : [ ]
  }, {
    "name" : " void layout(int delta, boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Creates and positions all views for this Gallery.\n     * <p>\n     * We layout rarely, most of the time {@link #trackMotionScroll(int)} takes\n     * care of repositioning, adding, and removing children.\n     * \n     * @param delta Change in the selected position. +1 means the selection is\n     *            moving to the right, so views are scrolling to the left. -1\n     *            means the selection is moving to the left.\n     ",
    "links" : [ "#trackMotionScroll" ]
  }, {
    "name" : "private void fillToGalleryLeft()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fillToGalleryLeftRtl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fillToGalleryLeftLtr()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fillToGalleryRight()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fillToGalleryRightRtl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fillToGalleryRightLtr()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View makeAndAddView(int position, int offset, int x, boolean fromLeft)",
    "returnType" : "View",
    "comment" : "\n     * Obtain a view, either by pulling an existing view from the recycler or by\n     * getting a new one from the adapter. If we are animating, make sure there\n     * is enough information in the view's layout parameters to animate from the\n     * old to new positions.\n     * \n     * @param position Position in the gallery for the view to obtain\n     * @param offset Offset from the selected position\n     * @param x X-coordinate indicating where this view should be placed. This\n     *        will either be the left or right edge of the view, depending on\n     *        the fromLeft parameter\n     * @param fromLeft Are we positioning views based on the left edge? (i.e.,\n     *        building from left to right)?\n     * @return A view that has been added to the gallery\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setUpChild(View child, int offset, int x, boolean fromLeft)",
    "returnType" : "void",
    "comment" : "\n     * Helper for makeAndAddView to set the position of a view and fill out its\n     * layout parameters.\n     * \n     * @param child The view to position\n     * @param offset Offset from the selected position\n     * @param x X-coordinate indicating where this view should be placed. This\n     *        will either be the left or right edge of the view, depending on\n     *        the fromLeft parameter\n     * @param fromLeft Are we positioning views based on the left edge? (i.e.,\n     *        building from left to right)?\n     ",
    "links" : [ ]
  }, {
    "name" : "private int calculateTop(View child, boolean duringLayout)",
    "returnType" : "int",
    "comment" : "\n     * Figure out vertical placement based on mGravity\n     * \n     * @param child Child to place\n     * @return Where the top of the child should be\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onSingleTapUp(MotionEvent e)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onDown(MotionEvent e)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onUp()",
    "returnType" : "void",
    "comment" : "\n     * Called when a touch event's action is MotionEvent.ACTION_UP.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onCancel()",
    "returnType" : "void",
    "comment" : "\n     * Called when a touch event's action is MotionEvent.ACTION_CANCEL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onLongPress(@NonNull MotionEvent e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onShowPress(MotionEvent e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchPress(View child)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchUnpress()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchSetSelected(boolean selected)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchSetPressed(boolean pressed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ContextMenuInfo getContextMenuInfo()",
    "returnType" : "ContextMenuInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean showContextMenuForChild(View originalView)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean showContextMenuForChild(View originalView, float x, float y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean showContextMenuForChildInternal(View originalView, float x, float y, boolean useOffsets)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean showContextMenu()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean showContextMenu(float x, float y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean showContextMenuInternal(float x, float y, boolean useOffsets)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean dispatchLongPress(View view, int position, long id, float x, float y, boolean useOffsets)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Handles left, right, and clicking\n     * @see android.view.View#onKeyDown\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean moveDirection(int direction)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean scrollToChild(int childPosition)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setSelectedPositionInt(int position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSelectedItemMetadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGravity(int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Describes how the child views are aligned.\n     * @param gravity\n     * \n     * @attr ref android.R.styleable#Gallery_gravity\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getChildDrawingOrder(int childCount, int i)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean performAccessibilityActionInternal(int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "localLOGV", "SCROLL_TO_FLING_UNCERTAINTY_TIMEOUT", "mSpacing", "mAnimationDuration", "mUnselectedAlpha", "mLeftMost", "mRightMost", "mGravity", "mGestureDetector", "mDownTouchPosition", "mDownTouchView", "mFlingRunnable", "mDisableSuppressSelectionChangedRunnable", "mShouldStopFling", "mSelectedChild", "mShouldCallbackDuringFling", "mShouldCallbackOnUnselectedItemClick", "mSuppressSelectionChanged", "mReceivedInvokeKeyDown", "mContextMenuInfo", "mIsFirstScroll", "mIsRtl", "mSelectedCenterOffset" ],
  "methodNames" : [ "protected void onAttachedToWindow()", "public void setCallbackDuringFling(boolean shouldCallback)", "public void setCallbackOnUnselectedItemClick(boolean shouldCallback)", "public void setAnimationDuration(int animationDurationMillis)", "public void setSpacing(int spacing)", "public void setUnselectedAlpha(float unselectedAlpha)", "protected boolean getChildStaticTransformation(View child, Transformation t)", "protected int computeHorizontalScrollExtent()", "protected int computeHorizontalScrollOffset()", "protected int computeHorizontalScrollRange()", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)", "public ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs)", "protected ViewGroup.LayoutParams generateDefaultLayoutParams()", "protected void onLayout(boolean changed, int l, int t, int r, int b)", " int getChildHeight(View child)", " void trackMotionScroll(int deltaX)", " int getLimitedMotionScrollAmount(boolean motionToLeft, int deltaX)", "private void offsetChildrenLeftAndRight(int offset)", "private int getCenterOfGallery()", "private static int getCenterOfView(View view)", "private void detachOffScreenChildren(boolean toLeft)", "private void scrollIntoSlots()", "private void onFinishedMovement()", " void selectionChanged()", "private void setSelectionToCenterChild()", " void layout(int delta, boolean animate)", "private void fillToGalleryLeft()", "private void fillToGalleryLeftRtl()", "private void fillToGalleryLeftLtr()", "private void fillToGalleryRight()", "private void fillToGalleryRightRtl()", "private void fillToGalleryRightLtr()", "private View makeAndAddView(int position, int offset, int x, boolean fromLeft)", "private void setUpChild(View child, int offset, int x, boolean fromLeft)", "private int calculateTop(View child, boolean duringLayout)", "public boolean onTouchEvent(MotionEvent event)", "public boolean onSingleTapUp(MotionEvent e)", "public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY)", "public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)", "public boolean onDown(MotionEvent e)", " void onUp()", " void onCancel()", "public void onLongPress(@NonNull MotionEvent e)", "public void onShowPress(MotionEvent e)", "private void dispatchPress(View child)", "private void dispatchUnpress()", "public void dispatchSetSelected(boolean selected)", "protected void dispatchSetPressed(boolean pressed)", "protected ContextMenuInfo getContextMenuInfo()", "public boolean showContextMenuForChild(View originalView)", "public boolean showContextMenuForChild(View originalView, float x, float y)", "private boolean showContextMenuForChildInternal(View originalView, float x, float y, boolean useOffsets)", "public boolean showContextMenu()", "public boolean showContextMenu(float x, float y)", "private boolean showContextMenuInternal(float x, float y, boolean useOffsets)", "private boolean dispatchLongPress(View view, int position, long id, float x, float y, boolean useOffsets)", "public boolean dispatchKeyEvent(KeyEvent event)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", " boolean moveDirection(int direction)", "private boolean scrollToChild(int childPosition)", " void setSelectedPositionInt(int position)", "private void updateSelectedItemMetadata()", "public void setGravity(int gravity)", "protected int getChildDrawingOrder(int childCount, int i)", "protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)", "public CharSequence getAccessibilityClassName()", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public boolean performAccessibilityActionInternal(int action, Bundle arguments)" ]
}