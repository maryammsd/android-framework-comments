{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/Trace.java",
  "packageName" : "android.os",
  "className" : "Trace",
  "comment" : "\n * Writes trace events to the system trace buffer.  These trace events can be\n * collected and visualized using the Systrace tool.\n *\n * <p>This tracing mechanism is independent of the method tracing mechanism\n * offered by {@link Debug#startMethodTracing}.  In particular, it enables\n * tracing of events that occur across multiple processes.\n * <p>For information about using the Systrace tool, read <a\n * href=\"{@docRoot}tools/debugging/systrace.html\">Analyzing Display and Performance\n * with Systrace</a>.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_NEVER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_ALWAYS",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_GRAPHICS",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_INPUT",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_VIEW",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_WEBVIEW",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_WINDOW_MANAGER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_ACTIVITY_MANAGER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_SYNC_MANAGER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_AUDIO",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_VIDEO",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_CAMERA",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_HAL",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_APP",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_RESOURCES",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_DALVIK",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_RS",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_BIONIC",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_POWER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_PACKAGE_MANAGER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_SYSTEM_SERVER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_DATABASE",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_NETWORK",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_ADB",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_VIBRATOR",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_AIDL",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_NNAPI",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_RRO",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_APEX_MANAGER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACE_TAG_NOT_READY",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SECTION_NAME_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sEnabledTags",
    "type" : "long",
    "comment" : " check the return value for null.",
    "links" : [ ]
  }, {
    "name" : "sZygoteDebugFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeGetEnabledTags()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetAppTracingAllowed(boolean allowed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetTracingEnabled(boolean allowed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeTraceCounter(long tag, String name, long value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeTraceBegin(long tag, String name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeTraceEnd(long tag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAsyncTraceBegin(long tag, String name, int cookie)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAsyncTraceEnd(long tag, String name, int cookie)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isTagEnabled(long traceTag)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if a trace tag is enabled.\n     *\n     * @param traceTag The trace tag to check.\n     * @return True if the trace tag is valid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void traceCounter(long traceTag, String counterName, int counterValue)",
    "returnType" : "void",
    "comment" : "\n     * Writes trace message to indicate the value of a given counter.\n     *\n     * @param traceTag The trace tag.\n     * @param counterName The counter name to appear in the trace.\n     * @param counterValue The counter value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setAppTracingAllowed(boolean allowed)",
    "returnType" : "void",
    "comment" : "\n     * Set whether application tracing is allowed for this process.  This is intended to be set\n     * once at application start-up time based on whether the application is debuggable.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setTracingEnabled(boolean enabled, int debugFlags)",
    "returnType" : "void",
    "comment" : "\n     * Set whether tracing is enabled in this process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void traceBegin(long traceTag, String methodName)",
    "returnType" : "void",
    "comment" : "\n     * Writes a trace message to indicate that a given section of code has\n     * begun. Must be followed by a call to {@link #traceEnd} using the same\n     * tag.\n     *\n     * @param traceTag The trace tag.\n     * @param methodName The method name to appear in the trace.\n     *\n     * @hide\n     ",
    "links" : [ "#traceEnd" ]
  }, {
    "name" : "public static void traceEnd(long traceTag)",
    "returnType" : "void",
    "comment" : "\n     * Writes a trace message to indicate that the current method has ended.\n     * Must be called exactly once for each call to {@link #traceBegin} using the same tag.\n     *\n     * @param traceTag The trace tag.\n     *\n     * @hide\n     ",
    "links" : [ "#traceBegin" ]
  }, {
    "name" : "public static void asyncTraceBegin(long traceTag, String methodName, int cookie)",
    "returnType" : "void",
    "comment" : "\n     * Writes a trace message to indicate that a given section of code has\n     * begun. Must be followed by a call to {@link #asyncTraceEnd} using the same\n     * tag. Unlike {@link #traceBegin(long, String)} and {@link #traceEnd(long)},\n     * asynchronous events do not need to be nested. The name and cookie used to\n     * begin an event must be used to end it.\n     *\n     * @param traceTag The trace tag.\n     * @param methodName The method name to appear in the trace.\n     * @param cookie Unique identifier for distinguishing simultaneous events\n     *\n     * @hide\n     ",
    "links" : [ "#traceEnd(long)", "#asyncTraceEnd", "#traceBegin(long" ]
  }, {
    "name" : "public static void asyncTraceEnd(long traceTag, String methodName, int cookie)",
    "returnType" : "void",
    "comment" : "\n     * Writes a trace message to indicate that the current method has ended.\n     * Must be called exactly once for each call to {@link #asyncTraceBegin(long, String, int)}\n     * using the same tag, name and cookie.\n     *\n     * @param traceTag The trace tag.\n     * @param methodName The method name to appear in the trace.\n     * @param cookie Unique identifier for distinguishing simultaneous events\n     *\n     * @hide\n     ",
    "links" : [ "#asyncTraceBegin(long" ]
  }, {
    "name" : "public static boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether or not tracing is currently enabled. This is useful to avoid intermediate\n     * string creation for trace sections that require formatting. It is not necessary\n     * to guard all Trace method calls as they internally already check this. However it is\n     * recommended to use this to prevent creating any temporary objects that would then be\n     * passed to those methods to reduce runtime cost when tracing isn't enabled.\n     *\n     * @return true if tracing is currently enabled, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void beginSection(@NonNull String sectionName)",
    "returnType" : "void",
    "comment" : "\n     * Writes a trace message to indicate that a given section of code has begun. This call must\n     * be followed by a corresponding call to {@link #endSection()} on the same thread.\n     *\n     * <p class=\"note\"> At this time the vertical bar character '|', newline character '\\n', and\n     * null character '\\0' are used internally by the tracing mechanism.  If sectionName contains\n     * these characters they will be replaced with a space character in the trace.\n     *\n     * @param sectionName The name of the code section to appear in the trace.  This may be at\n     * most 127 Unicode code units long.\n     ",
    "links" : [ "#endSection()" ]
  }, {
    "name" : "public static void endSection()",
    "returnType" : "void",
    "comment" : "\n     * Writes a trace message to indicate that a given section of code has ended. This call must\n     * be preceeded by a corresponding call to {@link #beginSection(String)}. Calling this method\n     * will mark the end of the most recently begun section of code, so care must be taken to\n     * ensure that beginSection / endSection pairs are properly nested and called from the same\n     * thread.\n     ",
    "links" : [ "#beginSection(String)" ]
  }, {
    "name" : "public static void beginAsyncSection(@NonNull String methodName, int cookie)",
    "returnType" : "void",
    "comment" : "\n     * Writes a trace message to indicate that a given section of code has\n     * begun. Must be followed by a call to {@link #endAsyncSection(String, int)} with the same\n     * methodName and cookie. Unlike {@link #beginSection(String)} and {@link #endSection()},\n     * asynchronous events do not need to be nested. The name and cookie used to\n     * begin an event must be used to end it.\n     *\n     * @param methodName The method name to appear in the trace.\n     * @param cookie Unique identifier for distinguishing simultaneous events\n     ",
    "links" : [ "#beginSection(String)", "#endSection()", "#endAsyncSection(String" ]
  }, {
    "name" : "public static void endAsyncSection(@NonNull String methodName, int cookie)",
    "returnType" : "void",
    "comment" : "\n     * Writes a trace message to indicate that the current method has ended.\n     * Must be called exactly once for each call to {@link #beginAsyncSection(String, int)}\n     * using the same name and cookie.\n     *\n     * @param methodName The method name to appear in the trace.\n     * @param cookie Unique identifier for distinguishing simultaneous events\n     ",
    "links" : [ "#beginAsyncSection(String" ]
  }, {
    "name" : "public static void setCounter(@NonNull String counterName, long counterValue)",
    "returnType" : "void",
    "comment" : "\n     * Writes trace message to indicate the value of a given counter.\n     *\n     * @param counterName The counter name to appear in the trace.\n     * @param counterValue The counter value.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "TRACE_TAG_NEVER", "TRACE_TAG_ALWAYS", "TRACE_TAG_GRAPHICS", "TRACE_TAG_INPUT", "TRACE_TAG_VIEW", "TRACE_TAG_WEBVIEW", "TRACE_TAG_WINDOW_MANAGER", "TRACE_TAG_ACTIVITY_MANAGER", "TRACE_TAG_SYNC_MANAGER", "TRACE_TAG_AUDIO", "TRACE_TAG_VIDEO", "TRACE_TAG_CAMERA", "TRACE_TAG_HAL", "TRACE_TAG_APP", "TRACE_TAG_RESOURCES", "TRACE_TAG_DALVIK", "TRACE_TAG_RS", "TRACE_TAG_BIONIC", "TRACE_TAG_POWER", "TRACE_TAG_PACKAGE_MANAGER", "TRACE_TAG_SYSTEM_SERVER", "TRACE_TAG_DATABASE", "TRACE_TAG_NETWORK", "TRACE_TAG_ADB", "TRACE_TAG_VIBRATOR", "TRACE_TAG_AIDL", "TRACE_TAG_NNAPI", "TRACE_TAG_RRO", "TRACE_TAG_APEX_MANAGER", "TRACE_TAG_NOT_READY", "MAX_SECTION_NAME_LEN", "sEnabledTags", "sZygoteDebugFlags" ],
  "methodNames" : [ "private static native long nativeGetEnabledTags()", "private static native void nativeSetAppTracingAllowed(boolean allowed)", "private static native void nativeSetTracingEnabled(boolean allowed)", "private static native void nativeTraceCounter(long tag, String name, long value)", "private static native void nativeTraceBegin(long tag, String name)", "private static native void nativeTraceEnd(long tag)", "private static native void nativeAsyncTraceBegin(long tag, String name, int cookie)", "private static native void nativeAsyncTraceEnd(long tag, String name, int cookie)", "public static boolean isTagEnabled(long traceTag)", "public static void traceCounter(long traceTag, String counterName, int counterValue)", "public static void setAppTracingAllowed(boolean allowed)", "public static void setTracingEnabled(boolean enabled, int debugFlags)", "public static void traceBegin(long traceTag, String methodName)", "public static void traceEnd(long traceTag)", "public static void asyncTraceBegin(long traceTag, String methodName, int cookie)", "public static void asyncTraceEnd(long traceTag, String methodName, int cookie)", "public static boolean isEnabled()", "public static void beginSection(@NonNull String sectionName)", "public static void endSection()", "public static void beginAsyncSection(@NonNull String methodName, int cookie)", "public static void endAsyncSection(@NonNull String methodName, int cookie)", "public static void setCounter(@NonNull String counterName, long counterValue)" ]
}