{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/SensorPrivacyManager.java",
  "packageName" : "android.hardware",
  "className" : "SensorPrivacyManager",
  "comment" : "\n * This class provides information about the microphone and camera toggles.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "token",
    "type" : "IBinder",
    "comment" : "\n     * Unique Id of this manager to identify to the service\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SENSOR",
    "type" : "String",
    "comment" : "\n     * An extra containing a sensor\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NOTIFICATION_ID",
    "type" : "String",
    "comment" : "\n     * An extra containing the notification id that triggered the intent\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ALL_SENSORS",
    "type" : "String",
    "comment" : "\n     * An extra indicating if all sensors are affected\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TOGGLE_TYPE",
    "type" : "String",
    "comment" : "\n     * An extra containing the sensor type\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TOGGLE_TYPE_SOFTWARE",
    "type" : "int",
    "comment" : "\n     * Constant for software toggle.\n     ",
    "links" : [ ]
  }, {
    "name" : "TOGGLE_TYPE_HARDWARE",
    "type" : "int",
    "comment" : "\n     * Constant for hardware toggle.\n     ",
    "links" : [ ]
  }, {
    "name" : "sInstanceLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "SensorPrivacyManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ISensorPrivacyManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToggleSupportCache",
    "type" : "ArrayMap<Pair<Integer, Integer>, Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayMap<OnAllSensorPrivacyChangedListener, ISensorPrivacyListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToggleListeners",
    "type" : "ArrayMap<OnSensorPrivacyChangedListener, Executor>",
    "comment" : " Registered listeners ",
    "links" : [ ]
  }, {
    "name" : "mLegacyToggleListeners",
    "type" : "ArrayMap<Pair<Integer, OnSensorPrivacyChangedListener>, OnSensorPrivacyChangedListener>",
    "comment" : " Listeners registered using the deprecated APIs and which\n     * OnSensorPrivacyChangedListener they're using. ",
    "links" : [ ]
  }, {
    "name" : "mIToggleListener",
    "type" : "ISensorPrivacyListener",
    "comment" : " The singleton ISensorPrivacyListener for IPC which will be used to dispatch to local\n     * listeners ",
    "links" : [ ]
  }, {
    "name" : "mToggleListenerRegistered",
    "type" : "boolean",
    "comment" : " Whether the singleton ISensorPrivacyListener has been registered ",
    "links" : [ ]
  }, {
    "name" : "mRequiresAuthentication",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SensorPrivacyManager getInstance(Context context)",
    "returnType" : "SensorPrivacyManager",
    "comment" : "\n     * Returns the single instance of the SensorPrivacyManager.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SensorPrivacyManager getInstance(Context context, ISensorPrivacyManager service)",
    "returnType" : "SensorPrivacyManager",
    "comment" : "\n     * Returns the single instance of the SensorPrivacyManager.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsSensorToggle(@Sensors.Sensor int sensor)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given toggle is supported on this device\n     * @param sensor The sensor to check\n     * @return whether the toggle for the sensor is supported on this device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsSensorToggle(@ToggleType int toggleType, @Sensors.Sensor int sensor)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given toggle is supported on this device\n     * @param sensor The sensor to check\n     * @return whether the toggle for the sensor is supported on this device.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSensorPrivacyListener(@Sensors.Sensor int sensor, @NonNull OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     *\n     * Registers a new listener to receive notification when the state of sensor privacy\n     * changes.\n     *\n     * @param sensor the sensor to listen to changes to\n     * @param listener the OnSensorPrivacyChangedListener to be notified when the state of sensor\n     *                       privacy changes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSensorPrivacyListener(@Sensors.Sensor int sensor, int userId, @NonNull OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     *\n     * Registers a new listener to receive notification when the state of sensor privacy\n     * changes.\n     *\n     * @param sensor the sensor to listen to changes to\n     * @param userId the user's id\n     * @param listener the OnSensorPrivacyChangedListener to be notified when the state of sensor\n     *                 privacy changes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSensorPrivacyListener(@Sensors.Sensor int sensor, @NonNull Executor executor, @NonNull OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     *\n     * Registers a new listener to receive notification when the state of sensor privacy\n     * changes.\n     *\n     * @param sensor the sensor to listen to changes to\n     * @param executor the executor to dispatch the callback on\n     * @param listener the OnSensorPrivacyChangedListener to be notified when the state of sensor\n     *                       privacy changes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSensorPrivacyListener(@NonNull OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     *\n     * Registers a new listener to receive notification when the state of sensor privacy\n     * changes.\n     *\n     * @param listener the OnSensorPrivacyChangedListener to be notified when the state of\n     *                 sensor privacy changes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSensorPrivacyListener(@NonNull Executor executor, @NonNull OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     *\n     * Registers a new listener to receive notification when the state of sensor privacy\n     * changes.\n     *\n     * @param executor the executor to dispatch the callback on\n     * @param listener the OnSensorPrivacyChangedListener to be notified when the state of\n     *                 sensor privacy changes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addSensorPrivacyListenerLocked(@NonNull Executor executor, @NonNull OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeSensorPrivacyListener(@Sensors.Sensor int sensor, @NonNull OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the specified listener from receiving notifications when the state of any sensor\n     * privacy changes.\n     *\n     * @param listener the OnSensorPrivacyChangedListener to be unregistered from notifications when\n     *                 sensor privacy changes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeSensorPrivacyListener(@NonNull OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the specified listener from receiving notifications when the state of any sensor\n     * privacy changes.\n     *\n     * @param listener the {@link OnSensorPrivacyChangedListener} to be unregistered from\n     *                 notifications when sensor privacy changes.\n     *\n     * @hide\n     ",
    "links" : [ "OnSensorPrivacyChangedListener" ]
  }, {
    "name" : "private void removeSensorPrivacyListenerLocked(@NonNull OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSensorPrivacyEnabled(@Sensors.Sensor int sensor)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether sensor privacy is currently enabled by software control for a specific\n     * sensor.\n     *\n     * @return true if sensor privacy is currently enabled, false otherwise.\n     *\n     * @deprecated Prefer to use {@link #isSensorPrivacyEnabled(int, int)}\n     *\n     * @hide\n     ",
    "links" : [ "#isSensorPrivacyEnabled(int" ]
  }, {
    "name" : "public boolean isSensorPrivacyEnabled(@ToggleType int toggleType, @Sensors.Sensor int sensor)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether sensor privacy is currently enabled for a specific sensor.\n     *\n     * @return true if sensor privacy is currently enabled, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean areAnySensorPrivacyTogglesEnabled(@Sensors.Sensor int sensor)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether sensor privacy is currently enabled for a specific sensor.\n     * Combines the state of the SW + HW toggles and returns true if either the\n     * SOFTWARE or the HARDWARE toggles are enabled.\n     *\n     * @return true if sensor privacy is currently enabled, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSensorPrivacyState(@ToggleType int toggleType, @Sensors.Sensor int sensor)",
    "returnType" : "int",
    "comment" : "\n     * Returns sensor privacy state for a specific sensor.\n     *\n     * @param toggleType The type of toggle to use\n     * @param sensor The sensor to check\n     * @return int sensor privacy state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCameraPrivacyEnabled(@NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if camera privacy is enabled for a specific package.\n     *\n     * @param packageName The package to check\n     * @return boolean camera privacy state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getCameraPrivacyAllowlist()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns camera privacy allowlist.\n     *\n     * @return List of automotive driver assistance packages for\n     * privacy allowlisting.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCameraPrivacyAllowlist(@NonNull List<String> allowlist)",
    "returnType" : "void",
    "comment" : "\n     * Sets camera privacy allowlist.\n     *\n     * @param allowlist List of automotive driver assistance packages for\n     * privacy allowlisting.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSensorPrivacy(@Sensors.Sensor int sensor, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Sets sensor privacy to the specified state for an individual sensor.\n     *\n     * @param sensor the sensor which to change the state for\n     * @param enable the state to which sensor privacy should be set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private int resolveSourceFromCurrentContext()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSensorPrivacyState(@Sensors.Sensor int sensor, @StateTypes.StateType int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets sensor privacy to the specified state for an individual sensor.\n     *\n     * @param sensor the sensor which to change the state for\n     * @param state the state to which sensor privacy should be set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSensorPrivacy(@Sources.Source int source, @Sensors.Sensor int sensor, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Sets sensor privacy to the specified state for an individual sensor.\n     *\n     * @param sensor the sensor which to change the state for\n     * @param enable the state to which sensor privacy should be set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSensorPrivacy(@Sources.Source int source, @Sensors.Sensor int sensor, boolean enable, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Sets sensor privacy to the specified state for an individual sensor.\n     *\n     * @param sensor the sensor which to change the state for\n     * @param enable the state to which sensor privacy should be set.\n     * @param userId the user's id\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSensorPrivacyState(@Sources.Source int source, @Sensors.Sensor int sensor, @StateTypes.StateType int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets sensor privacy to the specified state for an individual sensor.\n     *\n     * @param source the source using which the sensor is toggled\n     * @param sensor the sensor which to change the state for\n     * @param state the state to which sensor privacy should be set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSensorPrivacyForProfileGroup(@Sources.Source int source, @Sensors.Sensor int sensor, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Sets sensor privacy to the specified state for an individual sensor for the profile group of\n     * context's user.\n     *\n     * @param source the source using which the sensor is toggled.\n     * @param sensor the sensor which to change the state for\n     * @param enable the state to which sensor privacy should be set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSensorPrivacyForProfileGroup(@Sources.Source int source, @Sensors.Sensor int sensor, boolean enable, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Sets sensor privacy to the specified state for an individual sensor for the profile group of\n     * context's user.\n     *\n     * @param source the source using which the sensor is toggled.\n     * @param sensor the sensor which to change the state for\n     * @param enable the state to which sensor privacy should be set.\n     * @param userId the user's id\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSensorPrivacyStateForProfileGroup(@Sources.Source int source, @Sensors.Sensor int sensor, @StateTypes.StateType int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets sensor privacy to the specified state for an individual sensor for the profile group of\n     * context's user.\n     *\n     * @param source the source using which the sensor is toggled.\n     * @param sensor the sensor which to change the state for\n     * @param state the state to which sensor privacy should be set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void suppressSensorPrivacyReminders(int sensor, boolean suppress)",
    "returnType" : "void",
    "comment" : "\n     * Don't show dialogs to turn off sensor privacy for this package.\n     *\n     * @param suppress Whether to suppress or re-enable.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void suppressSensorPrivacyReminders(int sensor, boolean suppress, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Don't show dialogs to turn off sensor privacy for this package.\n     *\n     * @param suppress Whether to suppress or re-enable.\n     * @param userId the user's id\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requiresAuthentication()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the device is required to be unlocked to change software state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showSensorUseDialog(int sensor)",
    "returnType" : "void",
    "comment" : "\n     * If sensor privacy for the provided sensor is enabled then this call will show the user the\n     * dialog which is shown when an application attempts to use that sensor. If privacy isn't\n     * enabled then this does nothing.\n     *\n     * This call can only be made by the system uid.\n     *\n     * @throws SecurityException when called by someone other than system uid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAllSensorPrivacy(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Sets all-sensor privacy to the specified state.\n     *\n     * @param enable the state to which sensor privacy should be set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAllSensorPrivacyListener(@NonNull final OnAllSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a new listener to receive notification when the state of all-sensor privacy\n     * changes.\n     *\n     * @param listener the OnSensorPrivacyChangedListener to be notified when the state of\n     *                 all-sensor privacy changes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAllSensorPrivacyListener(@NonNull OnAllSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the specified listener from receiving notifications when the state of all-sensor\n     * privacy changes.\n     *\n     * @param listener the OnAllSensorPrivacyChangedListener to be unregistered from notifications\n     *                 when all-sensor privacy changes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAllSensorPrivacyEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether all-sensor privacy is currently enabled.\n     *\n     * @return true if all-sensor privacy is currently enabled, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static SensorPrivacyManager getInstance(Context context)", "public static SensorPrivacyManager getInstance(Context context, ISensorPrivacyManager service)", "public boolean supportsSensorToggle(@Sensors.Sensor int sensor)", "public boolean supportsSensorToggle(@ToggleType int toggleType, @Sensors.Sensor int sensor)", "public void addSensorPrivacyListener(@Sensors.Sensor int sensor, @NonNull OnSensorPrivacyChangedListener listener)", "public void addSensorPrivacyListener(@Sensors.Sensor int sensor, int userId, @NonNull OnSensorPrivacyChangedListener listener)", "public void addSensorPrivacyListener(@Sensors.Sensor int sensor, @NonNull Executor executor, @NonNull OnSensorPrivacyChangedListener listener)", "public void addSensorPrivacyListener(@NonNull OnSensorPrivacyChangedListener listener)", "public void addSensorPrivacyListener(@NonNull Executor executor, @NonNull OnSensorPrivacyChangedListener listener)", "private void addSensorPrivacyListenerLocked(@NonNull Executor executor, @NonNull OnSensorPrivacyChangedListener listener)", "public void removeSensorPrivacyListener(@Sensors.Sensor int sensor, @NonNull OnSensorPrivacyChangedListener listener)", "public void removeSensorPrivacyListener(@NonNull OnSensorPrivacyChangedListener listener)", "private void removeSensorPrivacyListenerLocked(@NonNull OnSensorPrivacyChangedListener listener)", "public boolean isSensorPrivacyEnabled(@Sensors.Sensor int sensor)", "public boolean isSensorPrivacyEnabled(@ToggleType int toggleType, @Sensors.Sensor int sensor)", "public boolean areAnySensorPrivacyTogglesEnabled(@Sensors.Sensor int sensor)", "public int getSensorPrivacyState(@ToggleType int toggleType, @Sensors.Sensor int sensor)", "public boolean isCameraPrivacyEnabled(@NonNull String packageName)", "public List<String> getCameraPrivacyAllowlist()", "public void setCameraPrivacyAllowlist(@NonNull List<String> allowlist)", "public void setSensorPrivacy(@Sensors.Sensor int sensor, boolean enable)", "private int resolveSourceFromCurrentContext()", "public void setSensorPrivacyState(@Sensors.Sensor int sensor, @StateTypes.StateType int state)", "public void setSensorPrivacy(@Sources.Source int source, @Sensors.Sensor int sensor, boolean enable)", "public void setSensorPrivacy(@Sources.Source int source, @Sensors.Sensor int sensor, boolean enable, @UserIdInt int userId)", "public void setSensorPrivacyState(@Sources.Source int source, @Sensors.Sensor int sensor, @StateTypes.StateType int state)", "public void setSensorPrivacyForProfileGroup(@Sources.Source int source, @Sensors.Sensor int sensor, boolean enable)", "public void setSensorPrivacyForProfileGroup(@Sources.Source int source, @Sensors.Sensor int sensor, boolean enable, @UserIdInt int userId)", "public void setSensorPrivacyStateForProfileGroup(@Sources.Source int source, @Sensors.Sensor int sensor, @StateTypes.StateType int state)", "public void suppressSensorPrivacyReminders(int sensor, boolean suppress)", "public void suppressSensorPrivacyReminders(int sensor, boolean suppress, @UserIdInt int userId)", "public boolean requiresAuthentication()", "public void showSensorUseDialog(int sensor)", "public void setAllSensorPrivacy(boolean enable)", "public void addAllSensorPrivacyListener(@NonNull final OnAllSensorPrivacyChangedListener listener)", "public void removeAllSensorPrivacyListener(@NonNull OnAllSensorPrivacyChangedListener listener)", "public boolean isAllSensorPrivacyEnabled()" ],
  "variableNames" : [ "LOG_TAG", "token", "EXTRA_SENSOR", "EXTRA_NOTIFICATION_ID", "EXTRA_ALL_SENSORS", "EXTRA_TOGGLE_TYPE", "TOGGLE_TYPE_SOFTWARE", "TOGGLE_TYPE_HARDWARE", "sInstanceLock", "mLock", "sInstance", "mContext", "mService", "mToggleSupportCache", "mListeners", "mToggleListeners", "mLegacyToggleListeners", "mIToggleListener", "mToggleListenerRegistered", "mRequiresAuthentication" ]
}