{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/HandlerThread.java",
  "packageName" : "android.os",
  "className" : "HandlerThread",
  "comment" : "\n * A {@link Thread} that has a {@link Looper}.\n * The {@link Looper} can then be used to create {@link Handler}s.\n * <p>\n * Note that just like with a regular {@link Thread}, {@link #start()} must still be called.\n ",
  "variables" : [ {
    "name" : "mPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onLooperPrepared()",
    "returnType" : "void",
    "comment" : "\n     * Call back method that can be explicitly overridden if needed to execute some\n     * setup before Looper loops.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void run()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Looper getLooper()",
    "returnType" : "Looper",
    "comment" : "\n     * This method returns the Looper associated with this thread. If this thread not been started\n     * or for any reason isAlive() returns false, this method will return null. If this thread\n     * has been started, this method will block until the looper has been initialized.  \n     * @return The looper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Handler getThreadHandler()",
    "returnType" : "Handler",
    "comment" : "\n     * @return a shared {@link Handler} associated with this thread\n     * @hide\n     ",
    "links" : [ "android.os.Handler" ]
  }, {
    "name" : "public boolean quit()",
    "returnType" : "boolean",
    "comment" : "\n     * Quits the handler thread's looper.\n     * <p>\n     * Causes the handler thread's looper to terminate without processing any\n     * more messages in the message queue.\n     * </p><p>\n     * Any attempt to post messages to the queue after the looper is asked to quit will fail.\n     * For example, the {@link Handler#sendMessage(Message)} method will return false.\n     * </p><p class=\"note\">\n     * Using this method may be unsafe because some messages may not be delivered\n     * before the looper terminates.  Consider using {@link #quitSafely} instead to ensure\n     * that all pending work is completed in an orderly manner.\n     * </p>\n     *\n     * @return True if the looper looper has been asked to quit or false if the\n     * thread had not yet started running.\n     *\n     * @see #quitSafely\n     ",
    "links" : [ "#quitSafely", "android.os.Handler#sendMessage(Message)" ]
  }, {
    "name" : "public boolean quitSafely()",
    "returnType" : "boolean",
    "comment" : "\n     * Quits the handler thread's looper safely.\n     * <p>\n     * Causes the handler thread's looper to terminate as soon as all remaining messages\n     * in the message queue that are already due to be delivered have been handled.\n     * Pending delayed messages with due times in the future will not be delivered.\n     * </p><p>\n     * Any attempt to post messages to the queue after the looper is asked to quit will fail.\n     * For example, the {@link Handler#sendMessage(Message)} method will return false.\n     * </p><p>\n     * If the thread has not been started or has finished (that is if\n     * {@link #getLooper} returns null), then false is returned.\n     * Otherwise the looper is asked to quit and true is returned.\n     * </p>\n     *\n     * @return True if the looper looper has been asked to quit or false if the\n     * thread had not yet started running.\n     ",
    "links" : [ "#getLooper", "android.os.Handler#sendMessage(Message)" ]
  }, {
    "name" : "public int getThreadId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the identifier of this thread. See Process.myTid().\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPriority", "mTid", "mLooper", "mHandler" ],
  "methodNames" : [ "protected void onLooperPrepared()", "public void run()", "public Looper getLooper()", "public Handler getThreadHandler()", "public boolean quit()", "public boolean quitSafely()", "public int getThreadId()" ]
}