{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/ULocale.java",
  "packageName" : "android.icu.util",
  "className" : "Builder",
  "comment" : "\n     * <code>Builder</code> is used to build instances of <code>ULocale</code>\n     * from values configured by the setters.  Unlike the <code>ULocale</code>\n     * constructors, the <code>Builder</code> checks if a value configured by a\n     * setter satisfies the syntax requirements defined by the <code>ULocale</code>\n     * class.  A <code>ULocale</code> object created by a <code>Builder</code> is\n     * well-formed and can be transformed to a well-formed IETF BCP 47 language tag\n     * without losing information.\n     *\n     * <p><b>Note:</b> The <code>ULocale</code> class does not provide any\n     * syntactic restrictions on variant, while BCP 47 requires each variant\n     * subtag to be 5 to 8 alphanumerics or a single numeric followed by 3\n     * alphanumerics.  The method <code>setVariant</code> throws\n     * <code>IllformedLocaleException</code> for a variant that does not satisfy\n     * this restriction. If it is necessary to support such a variant, use a\n     * ULocale constructor.  However, keep in mind that a <code>ULocale</code>\n     * object created this way might lose the variant information when\n     * transformed to a BCP 47 language tag.\n     *\n     * <p>The following example shows how to create a <code>Locale</code> object\n     * with the <code>Builder</code>.\n     * <blockquote>\n     * <pre>\n     *     ULocale aLocale = new Builder().setLanguage(\"sr\").setScript(\"Latn\").setRegion(\"RS\").build();\n     * </pre>\n     * </blockquote>\n     *\n     * <p>Builders can be reused; <code>clear()</code> resets all\n     * fields to their default values.\n     *\n     * @see ULocale#toLanguageTag()\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "_locbld",
    "type" : "InternalLocaleBuilder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setLocale(ULocale locale)",
    "returnType" : "Builder",
    "comment" : "\n         * Resets the <code>Builder</code> to match the provided\n         * <code>locale</code>.  Existing state is discarded.\n         *\n         * <p>All fields of the locale must be well-formed, see {@link Locale}.\n         *\n         * <p>Locales with any ill-formed fields cause\n         * <code>IllformedLocaleException</code> to be thrown.\n         *\n         * @param locale the locale\n         * @return This builder.\n         * @throws IllformedLocaleException if <code>locale</code> has\n         * any ill-formed fields.\n         * @throws NullPointerException if <code>locale</code> is null.\n         ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public Builder setLanguageTag(String languageTag)",
    "returnType" : "Builder",
    "comment" : "\n         * Resets the Builder to match the provided IETF BCP 47\n         * language tag.  Discards the existing state.  Null and the\n         * empty string cause the builder to be reset, like {@link\n         * #clear}.  Legacy tags (see {@link\n         * ULocale#forLanguageTag}) are converted to their canonical\n         * form before being processed.  Otherwise, the language tag\n         * must be well-formed (see {@link ULocale}) or an exception is\n         * thrown (unlike <code>ULocale.forLanguageTag</code>, which\n         * just discards ill-formed and following portions of the\n         * tag).\n         *\n         * @param languageTag the language tag\n         * @return This builder.\n         * @throws IllformedLocaleException if <code>languageTag</code> is ill-formed\n         * @see ULocale#forLanguageTag(String)\n         ",
    "links" : [ "#clear", "android.icu.util.ULocale#forLanguageTag", "android.icu.util.ULocale" ]
  }, {
    "name" : "public Builder setLanguage(String language)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the language.  If <code>language</code> is the empty string or\n         * null, the language in this <code>Builder</code> is removed.  Otherwise,\n         * the language must be <a href=\"./Locale.html#def_language\">well-formed</a>\n         * or an exception is thrown.\n         *\n         * <p>The typical language value is a two or three-letter language\n         * code as defined in ISO639.\n         *\n         * @param language the language\n         * @return This builder.\n         * @throws IllformedLocaleException if <code>language</code> is ill-formed\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setScript(String script)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the script. If <code>script</code> is null or the empty string,\n         * the script in this <code>Builder</code> is removed.\n         * Otherwise, the script must be well-formed or an exception is thrown.\n         *\n         * <p>The typical script value is a four-letter script code as defined by ISO 15924.\n         *\n         * @param script the script\n         * @return This builder.\n         * @throws IllformedLocaleException if <code>script</code> is ill-formed\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRegion(String region)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the region.  If region is null or the empty string, the region\n         * in this <code>Builder</code> is removed.  Otherwise,\n         * the region must be well-formed or an exception is thrown.\n         *\n         * <p>The typical region value is a two-letter ISO 3166 code or a\n         * three-digit UN M.49 area code.\n         *\n         * <p>The country value in the <code>Locale</code> created by the\n         * <code>Builder</code> is always normalized to upper case.\n         *\n         * @param region the region\n         * @return This builder.\n         * @throws IllformedLocaleException if <code>region</code> is ill-formed\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setVariant(String variant)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the variant.  If variant is null or the empty string, the\n         * variant in this <code>Builder</code> is removed.  Otherwise, it\n         * must consist of one or more well-formed subtags, or an exception is thrown.\n         *\n         * <p><b>Note:</b> This method checks if <code>variant</code>\n         * satisfies the IETF BCP 47 variant subtag's syntax requirements,\n         * and normalizes the value to lowercase letters.  However,\n         * the <code>ULocale</code> class does not impose any syntactic\n         * restriction on variant.  To set such a variant,\n         * use a ULocale constructor.\n         *\n         * @param variant the variant\n         * @return This builder.\n         * @throws IllformedLocaleException if <code>variant</code> is ill-formed\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setExtension(char key, String value)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the extension for the given key. If the value is null or the\n         * empty string, the extension is removed.  Otherwise, the extension\n         * must be well-formed or an exception is thrown.\n         *\n         * <p><b>Note:</b> The key {@link ULocale#UNICODE_LOCALE_EXTENSION\n         * UNICODE_LOCALE_EXTENSION} ('u') is used for the Unicode locale extension.\n         * Setting a value for this key replaces any existing Unicode locale key/type\n         * pairs with those defined in the extension.\n         *\n         * <p><b>Note:</b> The key {@link ULocale#PRIVATE_USE_EXTENSION\n         * PRIVATE_USE_EXTENSION} ('x') is used for the private use code. To be\n         * well-formed, the value for this key needs only to have subtags of one to\n         * eight alphanumeric characters, not two to eight as in the general case.\n         *\n         * @param key the extension key\n         * @param value the extension value\n         * @return This builder.\n         * @throws IllformedLocaleException if <code>key</code> is illegal\n         * or <code>value</code> is ill-formed\n         * @see #setUnicodeLocaleKeyword(String, String)\n         ",
    "links" : [ "android.icu.util.ULocale#PRIVATE_USE_EXTENSIONPRIVATE_USE_EXTENSION", "android.icu.util.ULocale#UNICODE_LOCALE_EXTENSIONUNICODE_LOCALE_EXTENSION" ]
  }, {
    "name" : "public Builder setUnicodeLocaleKeyword(String key, String type)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the Unicode locale keyword type for the given key.  If the type\n         * is null, the Unicode keyword is removed.  Otherwise, the key must be\n         * non-null and both key and type must be well-formed or an exception\n         * is thrown.\n         *\n         * <p>Keys and types are converted to lower case.\n         *\n         * <p><b>Note</b>:Setting the 'u' extension via {@link #setExtension}\n         * replaces all Unicode locale keywords with those defined in the\n         * extension.\n         *\n         * @param key the Unicode locale key\n         * @param type the Unicode locale type\n         * @return This builder.\n         * @throws IllformedLocaleException if <code>key</code> or <code>type</code>\n         * is ill-formed\n         * @throws NullPointerException if <code>key</code> is null\n         * @see #setExtension(char, String)\n         ",
    "links" : [ "#setExtension" ]
  }, {
    "name" : "public Builder addUnicodeLocaleAttribute(String attribute)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a unicode locale attribute, if not already present, otherwise\n         * has no effect.  The attribute must not be null and must be well-formed\n         * or an exception is thrown.\n         *\n         * @param attribute the attribute\n         * @return This builder.\n         * @throws NullPointerException if <code>attribute</code> is null\n         * @throws IllformedLocaleException if <code>attribute</code> is ill-formed\n         * @see #setExtension(char, String)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder removeUnicodeLocaleAttribute(String attribute)",
    "returnType" : "Builder",
    "comment" : "\n         * Removes a unicode locale attribute, if present, otherwise has no\n         * effect.  The attribute must not be null and must be well-formed\n         * or an exception is thrown.\n         *\n         * <p>Attribute comparison for removal is case-insensitive.\n         *\n         * @param attribute the attribute\n         * @return This builder.\n         * @throws NullPointerException if <code>attribute</code> is null\n         * @throws IllformedLocaleException if <code>attribute</code> is ill-formed\n         * @see #setExtension(char, String)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder clear()",
    "returnType" : "Builder",
    "comment" : "\n         * Resets the builder to its initial, empty state.\n         *\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder clearExtensions()",
    "returnType" : "Builder",
    "comment" : "\n         * Resets the extensions to their initial, empty state.\n         * Language, script, region and variant are unchanged.\n         *\n         * @return this builder\n         * @see #setExtension(char, String)\n         ",
    "links" : [ ]
  }, {
    "name" : "public ULocale build()",
    "returnType" : "ULocale",
    "comment" : "\n         * Returns an instance of <code>ULocale</code> created from the fields set\n         * on this builder.\n         *\n         * @return a new Locale\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setLocale(ULocale locale)", "public Builder setLanguageTag(String languageTag)", "public Builder setLanguage(String language)", "public Builder setScript(String script)", "public Builder setRegion(String region)", "public Builder setVariant(String variant)", "public Builder setExtension(char key, String value)", "public Builder setUnicodeLocaleKeyword(String key, String type)", "public Builder addUnicodeLocaleAttribute(String attribute)", "public Builder removeUnicodeLocaleAttribute(String attribute)", "public Builder clear()", "public Builder clearExtensions()", "public ULocale build()" ],
  "variableNames" : [ "_locbld" ]
}