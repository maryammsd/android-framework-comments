{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/opengl/GLSurfaceView.java",
  "packageName" : "android.opengl",
  "className" : "GLThread",
  "comment" : "\n     * A generic GL Thread. Takes care of initializing EGL and GL. Delegates\n     * to a Renderer instance to do the actual drawing. Can be configured to\n     * render continuously or on request.\n     *\n     * All potentially blocking synchronization is done through the\n     * sGLThreadManager object. This avoids multiple-lock ordering issues.\n     *\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mShouldExit",
    "type" : "boolean",
    "comment" : " variables are protected by the sGLThreadManager monitor",
    "links" : [ ]
  }, {
    "name" : "mExited",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestPaused",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaused",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasSurface",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceIsBad",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWaitingForSurface",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHaveEglContext",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHaveEglSurface",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinishedCreatingEglSurface",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldReleaseEglContext",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenderMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestRender",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWantRenderNotification",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenderComplete",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventQueue",
    "type" : "ArrayList<Runnable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSizeChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinishDrawingRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEglHelper",
    "type" : "EglHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGLSurfaceViewWeakRef",
    "type" : "WeakReference<GLSurfaceView>",
    "comment" : "\n         * Set once at thread construction time, nulled out when the parent view is garbage\n         * called. This weak reference allows the GLSurfaceView to be garbage collected while\n         * the GLThread is still alive.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void run()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void stopEglSurfaceLocked()",
    "returnType" : "void",
    "comment" : "\n         * This private method should only be called inside a\n         * synchronized(sGLThreadManager) block.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void stopEglContextLocked()",
    "returnType" : "void",
    "comment" : "\n         * This private method should only be called inside a\n         * synchronized(sGLThreadManager) block.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void guardedRun() throws InterruptedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean ableToDraw()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean readyToDraw()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRenderMode(int renderMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getRenderMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestRender()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestRenderAndNotify(Runnable finishDrawing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void surfaceCreated()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void surfaceDestroyed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onPause()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onResume()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onWindowResize(int w, int h)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestExitAndWait()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestReleaseEglContextLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void queueEvent(Runnable r)",
    "returnType" : "void",
    "comment" : "\n         * Queue an \"event\" to be run on the GL rendering thread.\n         * @param r the runnable to be run on the GL rendering thread.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void run()", "private void stopEglSurfaceLocked()", "private void stopEglContextLocked()", "private void guardedRun() throws InterruptedException", "public boolean ableToDraw()", "private boolean readyToDraw()", "public void setRenderMode(int renderMode)", "public int getRenderMode()", "public void requestRender()", "public void requestRenderAndNotify(Runnable finishDrawing)", "public void surfaceCreated()", "public void surfaceDestroyed()", "public void onPause()", "public void onResume()", "public void onWindowResize(int w, int h)", "public void requestExitAndWait()", "public void requestReleaseEglContextLocked()", "public void queueEvent(Runnable r)" ],
  "variableNames" : [ "mShouldExit", "mExited", "mRequestPaused", "mPaused", "mHasSurface", "mSurfaceIsBad", "mWaitingForSurface", "mHaveEglContext", "mHaveEglSurface", "mFinishedCreatingEglSurface", "mShouldReleaseEglContext", "mWidth", "mHeight", "mRenderMode", "mRequestRender", "mWantRenderNotification", "mRenderComplete", "mEventQueue", "mSizeChanged", "mFinishDrawingRunnable", "mEglHelper", "mGLSurfaceViewWeakRef" ]
}