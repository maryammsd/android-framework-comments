{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/CompletionService.java",
  "packageName" : "java.util.concurrent",
  "className" : "CompletionService",
  "comment" : "\n * A service that decouples the production of new asynchronous tasks\n * from the consumption of the results of completed tasks.  Producers\n * {@code submit} tasks for execution. Consumers {@code take}\n * completed tasks and process their results in the order they\n * complete.  A {@code CompletionService} can for example be used to\n * manage asynchronous I/O, in which tasks that perform reads are\n * submitted in one part of a program or system, and then acted upon\n * in a different part of the program when the reads complete,\n * possibly in a different order than they were requested.\n *\n * <p>Typically, a {@code CompletionService} relies on a separate\n * {@link Executor} to actually execute the tasks, in which case the\n * {@code CompletionService} only manages an internal completion\n * queue. The {@link ExecutorCompletionService} class provides an\n * implementation of this approach.\n *\n * <p>Memory consistency effects: Actions in a thread prior to\n * submitting a task to a {@code CompletionService}\n * <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n * actions taken by that task, which in turn <i>happen-before</i>\n * actions following a successful return from the corresponding {@code take()}.\n *\n * @since 1.5\n ",
  "links" : [ "java.util.concurrent.Executor", "java.util.concurrent.ExecutorCompletionService" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Future<V> submit(Callable<V> task)",
    "returnType" : "Future<V>",
    "comment" : "\n     * Submits a value-returning task for execution and returns a Future\n     * representing the pending results of the task.  Upon completion,\n     * this task may be taken or polled.\n     *\n     * @param task the task to submit\n     * @return a Future representing pending completion of the task\n     * @throws RejectedExecutionException if the task cannot be\n     *         scheduled for execution\n     * @throws NullPointerException if the task is null\n     ",
    "links" : [ ]
  }, {
    "name" : " Future<V> submit(Runnable task, V result)",
    "returnType" : "Future<V>",
    "comment" : "\n     * Submits a Runnable task for execution and returns a Future\n     * representing that task.  Upon completion, this task may be\n     * taken or polled.\n     *\n     * @param task the task to submit\n     * @param result the result to return upon successful completion\n     * @return a Future representing pending completion of the task,\n     *         and whose {@code get()} method will return the given\n     *         result value upon completion\n     * @throws RejectedExecutionException if the task cannot be\n     *         scheduled for execution\n     * @throws NullPointerException if the task is null\n     ",
    "links" : [ ]
  }, {
    "name" : " Future<V> take() throws InterruptedException",
    "returnType" : "Future<V>",
    "comment" : "\n     * Retrieves and removes the Future representing the next\n     * completed task, waiting if none are yet present.\n     *\n     * @return the Future representing the next completed task\n     * @throws InterruptedException if interrupted while waiting\n     ",
    "links" : [ ]
  }, {
    "name" : " Future<V> poll()",
    "returnType" : "Future<V>",
    "comment" : "\n     * Retrieves and removes the Future representing the next\n     * completed task, or {@code null} if none are present.\n     *\n     * @return the Future representing the next completed task, or\n     *         {@code null} if none are present\n     ",
    "links" : [ ]
  }, {
    "name" : " Future<V> poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "Future<V>",
    "comment" : "\n     * Retrieves and removes the Future representing the next\n     * completed task, waiting if necessary up to the specified wait\n     * time if none are yet present.\n     *\n     * @param timeout how long to wait before giving up, in units of\n     *        {@code unit}\n     * @param unit a {@code TimeUnit} determining how to interpret the\n     *        {@code timeout} parameter\n     * @return the Future representing the next completed task or\n     *         {@code null} if the specified waiting time elapses\n     *         before one is present\n     * @throws InterruptedException if interrupted while waiting\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Future<V> submit(Callable<V> task)", " Future<V> submit(Runnable task, V result)", " Future<V> take() throws InterruptedException", " Future<V> poll()", " Future<V> poll(long timeout, TimeUnit unit) throws InterruptedException" ],
  "variableNames" : [ ]
}