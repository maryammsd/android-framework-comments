{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ActionMode.java",
  "packageName" : "android.view",
  "className" : "ActionMode",
  "comment" : "\n * Represents a contextual mode of the user interface. Action modes can be used to provide\n * alternative interaction modes and replace parts of the normal UI until finished.\n * Examples of good action modes include text selection and contextual actions.\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about how to provide contextual actions with {@code ActionMode},\n * read the <a href=\"{@docRoot}guide/topics/ui/menus.html#context-menu\">Menus</a>\n * developer guide.</p>\n * </div>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TYPE_PRIMARY",
    "type" : "int",
    "comment" : "\n     * The action mode is treated as a Primary mode. This is the default.\n     * Use with {@link #setType}.\n     ",
    "links" : [ "#setType" ]
  }, {
    "name" : "TYPE_FLOATING",
    "type" : "int",
    "comment" : "\n     * The action mode is treated as a Floating Toolbar.\n     * Use with {@link #setType}.\n     ",
    "links" : [ "#setType" ]
  }, {
    "name" : "DEFAULT_HIDE_DURATION",
    "type" : "int",
    "comment" : "\n     * Default value to hide the action mode for\n     * {@link ViewConfiguration#getDefaultActionModeHideDuration()}.\n     ",
    "links" : [ "android.view.ViewConfiguration#getDefaultActionModeHideDuration()" ]
  }, {
    "name" : "mTag",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleOptionalHint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTag(Object tag)",
    "returnType" : "void",
    "comment" : "\n     * Set a tag object associated with this ActionMode.\n     *\n     * <p>Like the tag available to views, this allows applications to associate arbitrary\n     * data with an ActionMode for later reference.\n     *\n     * @param tag Tag to associate with this ActionMode\n     *\n     * @see #getTag()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getTag()",
    "returnType" : "Object",
    "comment" : "\n     * Retrieve the tag object associated with this ActionMode.\n     *\n     * <p>Like the tag available to views, this allows applications to associate arbitrary\n     * data with an ActionMode for later reference.\n     *\n     * @return Tag associated with this ActionMode\n     *\n     * @see #setTag(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setTitle(CharSequence title)",
    "returnType" : "void",
    "comment" : "\n     * Set the title of the action mode. This method will have no visible effect if\n     * a custom view has been set.\n     *\n     * @param title Title string to set\n     *\n     * @see #setTitle(int)\n     * @see #setCustomView(View)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setTitle(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the title of the action mode. This method will have no visible effect if\n     * a custom view has been set.\n     *\n     * @param resId Resource ID of a string to set as the title\n     *\n     * @see #setTitle(CharSequence)\n     * @see #setCustomView(View)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setSubtitle(CharSequence subtitle)",
    "returnType" : "void",
    "comment" : "\n     * Set the subtitle of the action mode. This method will have no visible effect if\n     * a custom view has been set.\n     *\n     * @param subtitle Subtitle string to set\n     *\n     * @see #setSubtitle(int)\n     * @see #setCustomView(View)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setSubtitle(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the subtitle of the action mode. This method will have no visible effect if\n     * a custom view has been set.\n     *\n     * @param resId Resource ID of a string to set as the subtitle\n     *\n     * @see #setSubtitle(CharSequence)\n     * @see #setCustomView(View)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitleOptionalHint(boolean titleOptional)",
    "returnType" : "void",
    "comment" : "\n     * Set whether or not the title/subtitle display for this action mode\n     * is optional.\n     *\n     * <p>In many cases the supplied title for an action mode is merely\n     * meant to add context and is not strictly required for the action\n     * mode to be useful. If the title is optional, the system may choose\n     * to hide the title entirely rather than truncate it due to a lack\n     * of available space.</p>\n     *\n     * <p>Note that this is merely a hint; the underlying implementation\n     * may choose to ignore this setting under some circumstances.</p>\n     *\n     * @param titleOptional true if the title only presents optional information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getTitleOptionalHint()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this action mode has been given a hint to consider the\n     *         title/subtitle display to be optional.\n     *\n     * @see #setTitleOptionalHint(boolean)\n     * @see #isTitleOptional()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTitleOptional()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this action mode considers the title and subtitle fields\n     *         as optional. Optional titles may not be displayed to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setCustomView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Set a custom view for this action mode. The custom view will take the place of\n     * the title and subtitle. Useful for things like search boxes.\n     *\n     * @param view Custom view to use in place of the title/subtitle.\n     *\n     * @see #setTitle(CharSequence)\n     * @see #setSubtitle(CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setType(int type)",
    "returnType" : "void",
    "comment" : "\n     * Set a type for this action mode. This will affect how the system renders the action mode if\n     * it has to.\n     *\n     * @param type One of {@link #TYPE_PRIMARY} or {@link #TYPE_FLOATING}.\n     ",
    "links" : [ "#TYPE_PRIMARY", "#TYPE_FLOATING" ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the type for this action mode.\n     *\n     * @return One of {@link #TYPE_PRIMARY} or {@link #TYPE_FLOATING}.\n     ",
    "links" : [ "#TYPE_PRIMARY", "#TYPE_FLOATING" ]
  }, {
    "name" : "public abstract void invalidate()",
    "returnType" : "void",
    "comment" : "\n     * Invalidate the action mode and refresh menu content. The mode's\n     * {@link ActionMode.Callback} will have its\n     * {@link Callback#onPrepareActionMode(ActionMode, Menu)} method called.\n     * If it returns true the menu will be scanned for updated content and any relevant changes\n     * will be reflected to the user.\n     ",
    "links" : [ "ActionMode.Callback", "#onPrepareActionMode(ActionMode" ]
  }, {
    "name" : "public void invalidateContentRect()",
    "returnType" : "void",
    "comment" : "\n     * Invalidate the content rect associated to this ActionMode. This only makes sense for\n     * action modes that support dynamic positioning on the screen, and provides a more efficient\n     * way to reposition it without invalidating the whole action mode.\n     *\n     * @see Callback2#onGetContentRect(ActionMode, View, Rect) .\n     ",
    "links" : [ ]
  }, {
    "name" : "public void hide(long duration)",
    "returnType" : "void",
    "comment" : "\n     * Hide the action mode view from obstructing the content below for a short duration.\n     * This only makes sense for action modes that support dynamic positioning on the screen.\n     * If this method is called again before the hide duration expires, the later hide call will\n     * cancel the former and then take effect.\n     * NOTE that there is an internal limit to how long the mode can be hidden for. It's typically\n     * about a few seconds.\n     *\n     * @param duration The number of milliseconds to hide for.\n     * @see #DEFAULT_HIDE_DURATION\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void finish()",
    "returnType" : "void",
    "comment" : "\n     * Finish and close this action mode. The action mode's {@link ActionMode.Callback} will\n     * have its {@link Callback#onDestroyActionMode(ActionMode)} method called.\n     ",
    "links" : [ "ActionMode.Callback", "#onDestroyActionMode(ActionMode)" ]
  }, {
    "name" : "public abstract Menu getMenu()",
    "returnType" : "Menu",
    "comment" : "\n     * Returns the menu of actions that this action mode presents.\n     * @return The action mode's menu.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the current title of this action mode.\n     * @return Title text\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharSequence getSubtitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the current subtitle of this action mode.\n     * @return Subtitle text\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract View getCustomView()",
    "returnType" : "View",
    "comment" : "\n     * Returns the current custom view for this action mode.\n     * @return The current custom view\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract MenuInflater getMenuInflater()",
    "returnType" : "MenuInflater",
    "comment" : "\n     * Returns a {@link MenuInflater} with the ActionMode's context.\n     ",
    "links" : [ "android.view.MenuInflater" ]
  }, {
    "name" : "public void onWindowFocusChanged(boolean hasWindowFocus)",
    "returnType" : "void",
    "comment" : "\n     * Called when the window containing the view that started this action mode gains or loses\n     * focus.\n     *\n     * @param hasWindowFocus True if the window containing the view that started this action mode\n     *        now has focus, false otherwise.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUiFocusable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the UI presenting this action mode can take focus or not.\n     * This is used by internal components within the framework that would otherwise\n     * present an action mode UI that requires focus, such as an EditText as a custom view.\n     *\n     * @return true if the UI used to show this action mode can take focus\n     * @hide Internal use only\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setTag(Object tag)", "public Object getTag()", "public abstract void setTitle(CharSequence title)", "public abstract void setTitle(@StringRes int resId)", "public abstract void setSubtitle(CharSequence subtitle)", "public abstract void setSubtitle(@StringRes int resId)", "public void setTitleOptionalHint(boolean titleOptional)", "public boolean getTitleOptionalHint()", "public boolean isTitleOptional()", "public abstract void setCustomView(View view)", "public void setType(int type)", "public int getType()", "public abstract void invalidate()", "public void invalidateContentRect()", "public void hide(long duration)", "public abstract void finish()", "public abstract Menu getMenu()", "public abstract CharSequence getTitle()", "public abstract CharSequence getSubtitle()", "public abstract View getCustomView()", "public abstract MenuInflater getMenuInflater()", "public void onWindowFocusChanged(boolean hasWindowFocus)", "public boolean isUiFocusable()" ],
  "variableNames" : [ "TYPE_PRIMARY", "TYPE_FLOATING", "DEFAULT_HIDE_DURATION", "mTag", "mTitleOptionalHint", "mType" ]
}