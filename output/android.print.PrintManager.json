{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/print/PrintManager.java",
  "packageName" : "android.print",
  "className" : "PrintManager",
  "comment" : "\n * System level service for accessing the printing capabilities of the platform.\n *\n * <h3>Print mechanics</h3>\n * <p>\n * The key idea behind printing on the platform is that the content to be printed\n * should be laid out for the currently selected print options resulting in an\n * optimized output and higher user satisfaction. To achieve this goal the platform\n * declares a contract that the printing application has to follow which is defined\n * by the {@link PrintDocumentAdapter} class. At a higher level the contract is that\n * when the user selects some options from the print UI that may affect the way\n * content is laid out, for example page size, the application receives a callback\n * allowing it to layout the content to better fit these new constraints. After a\n * layout pass the system may ask the application to render one or more pages one\n * or more times. For example, an application may produce a single column list for\n * smaller page sizes and a multi-column table for larger page sizes.\n * </p>\n * <h3>Print jobs</h3>\n * <p>\n * Print jobs are started by calling the {@link #print(String, PrintDocumentAdapter,\n * PrintAttributes)} from an activity which results in bringing up the system print\n * UI. Once the print UI is up, when the user changes a selected print option that\n * affects the way content is laid out the system starts to interact with the\n * application following the mechanics described the section above.\n * </p>\n * <p>\n * Print jobs can be in {@link PrintJobInfo#STATE_CREATED created}, {@link\n * PrintJobInfo#STATE_QUEUED queued}, {@link PrintJobInfo#STATE_STARTED started},\n * {@link PrintJobInfo#STATE_BLOCKED blocked}, {@link PrintJobInfo#STATE_COMPLETED\n * completed}, {@link PrintJobInfo#STATE_FAILED failed}, and {@link\n * PrintJobInfo#STATE_CANCELED canceled} state. Print jobs are stored in dedicated\n * system spooler until they are handled which is they are cancelled or completed.\n * Active print jobs, ones that are not cancelled or completed, are considered failed\n * if the device reboots as the new boot may be after a very long time. The user may\n * choose to restart such print jobs. Once a print job is queued all relevant content\n * is stored in the system spooler and its lifecycle becomes detached from this of\n * the application that created it.\n * </p>\n * <p>\n * An applications can query the print spooler for current print jobs it created\n * but not print jobs created by other applications.\n * </p>\n *\n * @see PrintJob\n * @see PrintJobInfo\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_NOTIFY_PRINT_JOB_STATE_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRINT_SPOOLER_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * Package name of print spooler.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_SERVICES",
    "type" : "int",
    "comment" : "\n     * Select enabled services.\n     * </p>\n     * @see #getPrintServices\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_SERVICES",
    "type" : "int",
    "comment" : "\n     * Select disabled services.\n     * </p>\n     * @see #getPrintServices\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALL_SERVICES",
    "type" : "int",
    "comment" : "\n     * Select all services.\n     * </p>\n     * @see #getPrintServices\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PRINT_DIALOG",
    "type" : "String",
    "comment" : "\n     * The action for launching the print dialog activity.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PRINT_DIALOG_INTENT",
    "type" : "String",
    "comment" : "\n     * Extra with the intent for starting the print dialog.\n     * <p>\n     * <strong>Type:</strong> {@link android.content.IntentSender}\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "android.content.IntentSender" ]
  }, {
    "name" : "EXTRA_PRINT_JOB",
    "type" : "String",
    "comment" : "\n     * Extra with a print job.\n     * <p>\n     * <strong>Type:</strong> {@link android.print.PrintJobInfo}\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "android.print.PrintJobInfo" ]
  }, {
    "name" : "EXTRA_PRINT_DOCUMENT_ADAPTER",
    "type" : "String",
    "comment" : "\n     * Extra with the print document adapter to be printed.\n     * <p>\n     * <strong>Type:</strong> {@link android.print.IPrintDocumentAdapter}\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "android.print.IPrintDocumentAdapter" ]
  }, {
    "name" : "APP_ID_ANY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IPrintManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrintJobStateChangeListeners",
    "type" : "Map<PrintJobStateChangeListener, PrintJobStateChangeListenerWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrintServicesChangeListeners",
    "type" : "Map<PrintServicesChangeListener, PrintServicesChangeListenerWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrintServiceRecommendationsChangeListeners",
    "type" : "Map<PrintServiceRecommendationsChangeListener, PrintServiceRecommendationsChangeListenerWrapper>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public PrintManager getGlobalPrintManagerForUser(int userId)",
    "returnType" : "PrintManager",
    "comment" : "\n     * Creates an instance that can access all print jobs.\n     *\n     * @param userId The user id for which to get all print jobs.\n     * @return An instance if the caller has the permission to access all print\n     *         jobs, null otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " PrintJobInfo getPrintJobInfo(PrintJobId printJobId)",
    "returnType" : "PrintJobInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addPrintJobStateChangeListener(PrintJobStateChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener for observing the state of print jobs.\n     *\n     * @param listener The listener to add.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removePrintJobStateChangeListener(PrintJobStateChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener for observing the state of print jobs.\n     *\n     * @param listener The listener to remove.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PrintJob getPrintJob(PrintJobId printJobId)",
    "returnType" : "PrintJob",
    "comment" : "\n     * Gets a print job given its id.\n     *\n     * @param printJobId The id of the print job.\n     * @return The print job list.\n     * @see PrintJob\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Icon getCustomPrinterIcon(PrinterId printerId)",
    "returnType" : "Icon",
    "comment" : "\n     * Get the custom icon for a printer. If the icon is not cached, the icon is\n     * requested asynchronously. Once it is available the printer is updated.\n     *\n     * @param printerId the id of the printer the icon should be loaded for\n     * @return the custom icon to be used for the printer or null if the icon is\n     *         not yet available\n     * @see android.print.PrinterInfo.Builder#setHasCustomPrinterIcon(boolean)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<PrintJob> getPrintJobs()",
    "returnType" : "List<PrintJob>",
    "comment" : "\n     * Gets the print jobs for this application.\n     *\n     * @return The print job list.\n     * @see PrintJob\n     ",
    "links" : [ ]
  }, {
    "name" : " void cancelPrintJob(PrintJobId printJobId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void restartPrintJob(PrintJobId printJobId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PrintJob print(@NonNull String printJobName, @NonNull PrintDocumentAdapter documentAdapter, @Nullable PrintAttributes attributes)",
    "returnType" : "PrintJob",
    "comment" : "\n     * Creates a print job for printing a {@link PrintDocumentAdapter} with\n     * default print attributes.\n     * <p>\n     * Calling this method brings the print UI allowing the user to customize\n     * the print job and returns a {@link PrintJob} object without waiting for the\n     * user to customize or confirm the print job. The returned print job instance\n     * is in a {@link PrintJobInfo#STATE_CREATED created} state.\n     * <p>\n     * This method can be called only from an {@link Activity}. The rationale is that\n     * printing from a service will create an inconsistent user experience as the print\n     * UI would appear without any context.\n     * </p>\n     * <p>\n     * Also the passed in {@link PrintDocumentAdapter} will be considered invalid if\n     * your activity is finished. The rationale is that once the activity that\n     * initiated printing is finished, the provided adapter may be in an inconsistent\n     * state as it may depend on the UI presented by the activity.\n     * </p>\n     * <p>\n     * The default print attributes are a hint to the system how the data is to\n     * be printed. For example, a photo editor may look at the photo aspect ratio\n     * to determine the default orientation and provide a hint whether the printing\n     * should be in portrait or landscape. The system will do a best effort to\n     * selected the hinted options in the print dialog, given the current printer\n     * supports them.\n     * </p>\n     * <p>\n     * <strong>Note:</strong> Calling this method will bring the print dialog and\n     * the system will connect to the provided {@link PrintDocumentAdapter}. If a\n     * configuration change occurs that you application does not handle, for example\n     * a rotation change, the system will drop the connection to the adapter as the\n     * activity has to be recreated and the old adapter may be invalid in this context,\n     * hence a new adapter instance is required. As a consequence, if your activity\n     * does not handle configuration changes (default behavior), you have to save the\n     * state that you were printing and call this method again when your activity\n     * is recreated.\n     * </p>\n     *\n     * @param printJobName A name for the new print job which is shown to the user.\n     * @param documentAdapter An adapter that emits the document to print.\n     * @param attributes The default print job attributes or <code>null</code>.\n     * @return The created print job on success or null on failure.\n     * @throws IllegalStateException If not called from an {@link Activity}.\n     * @throws IllegalArgumentException If the print job name is empty or the\n     * document adapter is null.\n     *\n     * @see PrintJob\n     ",
    "links" : [ "android.print.PrintDocumentAdapter", "android.print.PrintJobInfo#STATE_CREATED", "android.print.PrintJob", "android.app.Activity" ]
  }, {
    "name" : "public void addPrintServicesChangeListener(@NonNull PrintServicesChangeListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Listen for changes to the installed and enabled print services.\n     *\n     * @param listener the listener to add\n     * @param handler the handler the listener is called back on\n     *\n     * @see android.print.PrintManager#getPrintServices\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removePrintServicesChangeListener(@NonNull PrintServicesChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Stop listening for changes to the installed and enabled print services.\n     *\n     * @param listener the listener to remove\n     *\n     * @see android.print.PrintManager#getPrintServices\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<PrintServiceInfo> getPrintServices(int selectionFlags)",
    "returnType" : "List<PrintServiceInfo>",
    "comment" : "\n     * Gets the list of print services, but does not register for updates. The user has to register\n     * for updates by itself, or use {@link PrintServicesLoader}.\n     *\n     * @param selectionFlags flags selecting which services to get. Either\n     *                       {@link #ENABLED_SERVICES},{@link #DISABLED_SERVICES}, or both.\n     *\n     * @return The print service list or an empty list.\n     *\n     * @see #addPrintServicesChangeListener(PrintServicesChangeListener, Handler)\n     * @see #removePrintServicesChangeListener(PrintServicesChangeListener)\n     *\n     * @hide\n     ",
    "links" : [ "#ENABLED_SERVICES", "android.print.PrintServicesLoader", "#DISABLED_SERVICES" ]
  }, {
    "name" : "public void addPrintServiceRecommendationsChangeListener(@NonNull PrintServiceRecommendationsChangeListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Listen for changes to the print service recommendations.\n     *\n     * @param listener the listener to add\n     * @param handler the handler the listener is called back on\n     *\n     * @see android.print.PrintManager#getPrintServiceRecommendations\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removePrintServiceRecommendationsChangeListener(@NonNull PrintServiceRecommendationsChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Stop listening for changes to the print service recommendations.\n     *\n     * @param listener the listener to remove\n     *\n     * @see android.print.PrintManager#getPrintServiceRecommendations\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<RecommendationInfo> getPrintServiceRecommendations()",
    "returnType" : "List<RecommendationInfo>",
    "comment" : "\n     * Gets the list of print service recommendations, but does not register for updates. The user\n     * has to register for updates by itself, or use {@link PrintServiceRecommendationsLoader}.\n     *\n     * @return The print service recommendations list or an empty list.\n     *\n     * @see #addPrintServiceRecommendationsChangeListener\n     * @see #removePrintServiceRecommendationsChangeListener\n     *\n     * @hide\n     ",
    "links" : [ "android.print.PrintServiceRecommendationsLoader" ]
  }, {
    "name" : "public PrinterDiscoverySession createPrinterDiscoverySession()",
    "returnType" : "PrinterDiscoverySession",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPrintServiceEnabled(@NonNull ComponentName service, boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable a print service.\n     *\n     * @param service The service to enabled or disable\n     * @param isEnabled whether the service should be enabled or disabled\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "DEBUG", "MSG_NOTIFY_PRINT_JOB_STATE_CHANGED", "PRINT_SPOOLER_PACKAGE_NAME", "ENABLED_SERVICES", "DISABLED_SERVICES", "ALL_SERVICES", "ACTION_PRINT_DIALOG", "EXTRA_PRINT_DIALOG_INTENT", "EXTRA_PRINT_JOB", "EXTRA_PRINT_DOCUMENT_ADAPTER", "APP_ID_ANY", "mContext", "mService", "mUserId", "mAppId", "mHandler", "mPrintJobStateChangeListeners", "mPrintServicesChangeListeners", "mPrintServiceRecommendationsChangeListeners" ],
  "methodNames" : [ "public PrintManager getGlobalPrintManagerForUser(int userId)", " PrintJobInfo getPrintJobInfo(PrintJobId printJobId)", "public void addPrintJobStateChangeListener(PrintJobStateChangeListener listener)", "public void removePrintJobStateChangeListener(PrintJobStateChangeListener listener)", "public PrintJob getPrintJob(PrintJobId printJobId)", "public Icon getCustomPrinterIcon(PrinterId printerId)", "public List<PrintJob> getPrintJobs()", " void cancelPrintJob(PrintJobId printJobId)", " void restartPrintJob(PrintJobId printJobId)", "public PrintJob print(@NonNull String printJobName, @NonNull PrintDocumentAdapter documentAdapter, @Nullable PrintAttributes attributes)", "public void addPrintServicesChangeListener(@NonNull PrintServicesChangeListener listener, @Nullable Handler handler)", "public void removePrintServicesChangeListener(@NonNull PrintServicesChangeListener listener)", "public List<PrintServiceInfo> getPrintServices(int selectionFlags)", "public void addPrintServiceRecommendationsChangeListener(@NonNull PrintServiceRecommendationsChangeListener listener, @Nullable Handler handler)", "public void removePrintServiceRecommendationsChangeListener(@NonNull PrintServiceRecommendationsChangeListener listener)", "public List<RecommendationInfo> getPrintServiceRecommendations()", "public PrinterDiscoverySession createPrinterDiscoverySession()", "public void setPrintServiceEnabled(@NonNull ComponentName service, boolean isEnabled)" ]
}