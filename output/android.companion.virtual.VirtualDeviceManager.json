{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/virtual/VirtualDeviceManager.java",
  "packageName" : "android.companion.virtual",
  "className" : "VirtualDeviceManager",
  "comment" : "\n * System level service for creation and management of virtual devices.\n *\n * <p>VirtualDeviceManager enables interactive sharing of capabilities between the host Android\n * device and a remote device.\n *\n * <p class=\"note\">Not to be confused with the Android Studio's Virtual Device Manager, which allows\n * for device emulation.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_VIRTUAL_DEVICE_REMOVED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A Virtual Device was removed.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.</p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VIRTUAL_DEVICE_ID",
    "type" : "String",
    "comment" : "\n     * Int intent extra to be used with {@link #ACTION_VIRTUAL_DEVICE_REMOVED}.\n     * Contains the identifier of the virtual device, which was removed.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_VIRTUAL_DEVICE_REMOVED" ]
  }, {
    "name" : "LAUNCH_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Status for {@link VirtualDevice#launchPendingIntent}, indicating that the launch was\n     * successful.\n     *\n     * @hide\n     ",
    "links" : [ "android.companion.virtual.VirtualDevice#launchPendingIntent" ]
  }, {
    "name" : "LAUNCH_FAILURE_PENDING_INTENT_CANCELED",
    "type" : "int",
    "comment" : "\n     * Status for {@link VirtualDevice#launchPendingIntent}, indicating that the launch failed\n     * because the pending intent was canceled.\n     *\n     * @hide\n     ",
    "links" : [ "android.companion.virtual.VirtualDevice#launchPendingIntent" ]
  }, {
    "name" : "LAUNCH_FAILURE_NO_ACTIVITY",
    "type" : "int",
    "comment" : "\n     * Status for {@link VirtualDevice#launchPendingIntent}, indicating that the launch failed\n     * because no activity starts were detected as a result of calling the pending intent.\n     *\n     * @hide\n     ",
    "links" : [ "android.companion.virtual.VirtualDevice#launchPendingIntent" ]
  }, {
    "name" : "PERSISTENT_DEVICE_ID_DEFAULT",
    "type" : "String",
    "comment" : "\n     * Persistent device identifier corresponding to the default device.\n     *\n     * @see Context#DEVICE_ID_DEFAULT\n     * @see VirtualDevice#getPersistentDeviceId()\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IVirtualDeviceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVirtualDeviceListeners",
    "type" : "List<VirtualDeviceListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public VirtualDevice createVirtualDevice(int associationId, @NonNull VirtualDeviceParams params)",
    "returnType" : "VirtualDevice",
    "comment" : "\n     * Creates a virtual device where applications can launch and receive input events injected by\n     * the creator.\n     *\n     * <p>The {@link android.Manifest.permission#CREATE_VIRTUAL_DEVICE} permission is required to\n     * create virtual devices, which is only available to system apps holding specific roles.\n     *\n     * @param associationId The association ID as returned by {@link AssociationInfo#getId()} from\n     *   Companion Device Manager. Virtual devices must have a corresponding association with CDM in\n     *   order to be created.\n     * @param params The parameters for creating virtual devices. See {@link VirtualDeviceParams}\n     *   for the available options.\n     * @return The created virtual device.\n     *\n     * @hide\n     ",
    "links" : [ "android.companion.AssociationInfo#getId()", "android.Manifest.permission#CREATE_VIRTUAL_DEVICE", "android.companion.virtual.VirtualDeviceParams" ]
  }, {
    "name" : "public List<android.companion.virtual.VirtualDevice> getVirtualDevices()",
    "returnType" : "List<android.companion.virtual.VirtualDevice>",
    "comment" : " availability  of virtual devices.\" in the note paragraph above with a link annotation.",
    "links" : [ ]
  }, {
    "name" : "public android.companion.virtual.VirtualDevice getVirtualDevice(int deviceId)",
    "returnType" : "android.companion.virtual.VirtualDevice",
    "comment" : "\n     * Returns the details of the virtual device with the given ID, if any.\n     *\n     * <p>The returned object is a read-only representation of the virtual device that expose its\n     * properties.</p>\n     *\n     * <p>Note that if the virtual device is closed and becomes invalid, the returned object will\n     * not be updated and may contain stale values. Use a {@link VirtualDeviceListener} for real\n     * time updates of the availability of virtual devices.</p>\n     *\n     * @return the virtual device with the requested ID, or {@code null} if no such device exists or\n     *   it has already been closed.\n     ",
    "links" : [ "VirtualDeviceListener" ]
  }, {
    "name" : "public void registerVirtualDeviceListener(@NonNull @CallbackExecutor Executor executor, @NonNull VirtualDeviceListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a virtual device listener to receive notifications when virtual devices are created\n     * or closed.\n     *\n     * @param executor The executor where the listener is executed on.\n     * @param listener The listener to add.\n     * @see #unregisterVirtualDeviceListener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterVirtualDeviceListener(@NonNull VirtualDeviceListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a virtual device listener previously registered with\n     * {@link #registerVirtualDeviceListener}.\n     *\n     * @param listener The listener to unregister.\n     * @see #registerVirtualDeviceListener\n     ",
    "links" : [ "#registerVirtualDeviceListener" ]
  }, {
    "name" : "public int getDevicePolicy(int deviceId, @VirtualDeviceParams.PolicyType int policyType)",
    "returnType" : "int",
    "comment" : "\n     * Returns the device policy for the given virtual device and policy type.\n     *\n     * <p>In case the virtual device identifier is not valid, or there's no explicitly specified\n     * policy for that device and policy type, then\n     * {@link VirtualDeviceParams#DEVICE_POLICY_DEFAULT} is returned.\n     *\n     * @hide\n     ",
    "links" : [ "android.companion.virtual.VirtualDeviceParams#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "public int getDeviceIdForDisplayId(int displayId)",
    "returnType" : "int",
    "comment" : "\n     * Returns the ID of the device which owns the display with the given ID.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDisplayNameForPersistentDeviceId(@NonNull String persistentDeviceId)",
    "returnType" : "CharSequence",
    "comment" : " TODO(b/315481938): Link @see VirtualDevice#getPersistentDeviceId()",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getAllPersistentDeviceIds()",
    "returnType" : "Set<String>",
    "comment" : " TODO(b/315481938): Link @see VirtualDevice#getPersistentDeviceId()",
    "links" : [ ]
  }, {
    "name" : "public boolean isValidVirtualDeviceId(int deviceId)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the passed {@code deviceId} is a valid virtual device ID or not.\n     * {@link Context#DEVICE_ID_DEFAULT} is not valid as it is the ID of the default\n     * device which is not a virtual device. {@code deviceId} must correspond to a virtual device\n     * created by {@link VirtualDeviceManager#createVirtualDevice(int, VirtualDeviceParams)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Context#DEVICE_ID_DEFAULT", "android.companion.virtual.VirtualDeviceManager#createVirtualDevice(int" ]
  }, {
    "name" : "public int getAudioPlaybackSessionId(int deviceId)",
    "returnType" : "int",
    "comment" : "\n     * Returns device-specific audio session id for audio playback.\n     *\n     * @param deviceId - id of the virtual audio device\n     * @return Device specific session id to be used for audio playback (see\n     *   {@link AudioManager#generateAudioSessionId}) if virtual device has\n     *   {@link VirtualDeviceParams#POLICY_TYPE_AUDIO} set to\n     *   {@link VirtualDeviceParams#DEVICE_POLICY_CUSTOM} and Virtual Audio Device\n     *   is configured in context-aware mode. Otherwise\n     *   {@link AudioManager#AUDIO_SESSION_ID_GENERATE} constant is returned.\n     *\n     * @hide\n     ",
    "links" : [ "android.companion.virtual.VirtualDeviceParams#DEVICE_POLICY_CUSTOM", "android.companion.virtual.VirtualDeviceParams#POLICY_TYPE_AUDIO", "android.media.AudioManager#AUDIO_SESSION_ID_GENERATE", "android.media.AudioManager#generateAudioSessionId" ]
  }, {
    "name" : "public int getAudioRecordingSessionId(int deviceId)",
    "returnType" : "int",
    "comment" : "\n     * Returns device-specific audio session id for audio recording.\n     *\n     * @param deviceId - id of the virtual audio device\n     * @return Device specific session id to be used for audio recording (see\n     *   {@link AudioManager#generateAudioSessionId}) if virtual device has\n     *   {@link VirtualDeviceParams#POLICY_TYPE_AUDIO} set to\n     *   {@link VirtualDeviceParams#DEVICE_POLICY_CUSTOM} and Virtual Audio Device\n     *   is configured in context-aware mode. Otherwise\n     *   {@link AudioManager#AUDIO_SESSION_ID_GENERATE} constant is returned.\n     *\n     * @hide\n     ",
    "links" : [ "android.companion.virtual.VirtualDeviceParams#DEVICE_POLICY_CUSTOM", "android.companion.virtual.VirtualDeviceParams#POLICY_TYPE_AUDIO", "android.media.AudioManager#AUDIO_SESSION_ID_GENERATE", "android.media.AudioManager#generateAudioSessionId" ]
  }, {
    "name" : "public void playSoundEffect(int deviceId, @AudioManager.SystemSoundEffect int effectType)",
    "returnType" : "void",
    "comment" : "\n     * Requests sound effect to be played on virtual device.\n     *\n     * @see AudioManager#playSoundEffect(int)\n     *\n     * @param deviceId - id of the virtual audio device\n     * @param effectType the type of sound effect\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVirtualDeviceOwnedMirrorDisplay(int displayId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given display is an auto-mirror display owned by a virtual device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public VirtualDevice createVirtualDevice(int associationId, @NonNull VirtualDeviceParams params)", "public List<android.companion.virtual.VirtualDevice> getVirtualDevices()", "public android.companion.virtual.VirtualDevice getVirtualDevice(int deviceId)", "public void registerVirtualDeviceListener(@NonNull @CallbackExecutor Executor executor, @NonNull VirtualDeviceListener listener)", "public void unregisterVirtualDeviceListener(@NonNull VirtualDeviceListener listener)", "public int getDevicePolicy(int deviceId, @VirtualDeviceParams.PolicyType int policyType)", "public int getDeviceIdForDisplayId(int displayId)", "public CharSequence getDisplayNameForPersistentDeviceId(@NonNull String persistentDeviceId)", "public Set<String> getAllPersistentDeviceIds()", "public boolean isValidVirtualDeviceId(int deviceId)", "public int getAudioPlaybackSessionId(int deviceId)", "public int getAudioRecordingSessionId(int deviceId)", "public void playSoundEffect(int deviceId, @AudioManager.SystemSoundEffect int effectType)", "public boolean isVirtualDeviceOwnedMirrorDisplay(int displayId)" ],
  "variableNames" : [ "TAG", "ACTION_VIRTUAL_DEVICE_REMOVED", "EXTRA_VIRTUAL_DEVICE_ID", "LAUNCH_SUCCESS", "LAUNCH_FAILURE_PENDING_INTENT_CANCELED", "LAUNCH_FAILURE_NO_ACTIVITY", "PERSISTENT_DEVICE_ID_DEFAULT", "mService", "mContext", "mVirtualDeviceListeners" ]
}