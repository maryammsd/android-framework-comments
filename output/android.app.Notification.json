{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "Notification",
  "comment" : "\n * A class that represents how a persistent notification is to be presented to\n * the user using the {@link android.app.NotificationManager}.\n *\n * <p>The {@link Notification.Builder Notification.Builder} has been added to make it\n * easier to construct Notifications.</p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For a guide to creating notifications, read the\n * <a href=\"{@docRoot}guide/topics/ui/notifiers/notifications.html\">Status Bar Notifications</a>\n * developer guide.</p>\n * </div>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INTENT_CATEGORY_NOTIFICATION_PREFERENCES",
    "type" : "String",
    "comment" : "\n     * An activity that provides a user interface for adjusting notification preferences for its\n     * containing application.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CHANNEL_ID",
    "type" : "String",
    "comment" : "\n     * Optional extra for {@link #INTENT_CATEGORY_NOTIFICATION_PREFERENCES}. If provided, will\n     * contain a {@link NotificationChannel#getId() channel id} that can be used to narrow down\n     * what settings should be shown in the target app.\n     ",
    "links" : [ "android.app.NotificationChannel#getId()", "#INTENT_CATEGORY_NOTIFICATION_PREFERENCES" ]
  }, {
    "name" : "EXTRA_CHANNEL_GROUP_ID",
    "type" : "String",
    "comment" : "\n     * Optional extra for {@link #INTENT_CATEGORY_NOTIFICATION_PREFERENCES}. If provided, will\n     * contain a {@link NotificationChannelGroup#getId() group id} that can be used to narrow down\n     * what settings should be shown in the target app.\n     ",
    "links" : [ "android.app.NotificationChannelGroup#getId()", "#INTENT_CATEGORY_NOTIFICATION_PREFERENCES" ]
  }, {
    "name" : "EXTRA_NOTIFICATION_TAG",
    "type" : "String",
    "comment" : "\n     * Optional extra for {@link #INTENT_CATEGORY_NOTIFICATION_PREFERENCES}. If provided, will\n     * contain the tag provided to {@link NotificationManager#notify(String, int, Notification)}\n     * that can be used to narrow down what settings should be shown in the target app.\n     ",
    "links" : [ "#INTENT_CATEGORY_NOTIFICATION_PREFERENCES", "android.app.NotificationManager#notify(String" ]
  }, {
    "name" : "EXTRA_NOTIFICATION_ID",
    "type" : "String",
    "comment" : "\n     * Optional extra for {@link #INTENT_CATEGORY_NOTIFICATION_PREFERENCES}. If provided, will\n     * contain the id provided to {@link NotificationManager#notify(String, int, Notification)}\n     * that can be used to narrow down what settings should be shown in the target app.\n     ",
    "links" : [ "#INTENT_CATEGORY_NOTIFICATION_PREFERENCES", "android.app.NotificationManager#notify(String" ]
  }, {
    "name" : "DEFAULT_ALL",
    "type" : "int",
    "comment" : "\n     * Use all default values (where applicable).\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SOUND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_VIBRATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_LIGHTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CHARSEQUENCE_LENGTH",
    "type" : "int",
    "comment" : "\n     * Maximum length of CharSequences accepted by Builder and friends.\n     *\n     * <p>\n     * Avoids spamming the system with overly large strings such as full e-mails.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_REPLY_HISTORY",
    "type" : "int",
    "comment" : "\n     * Maximum entries of reply text that are accepted by Builder and friends.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_ACTION_BUTTONS",
    "type" : "int",
    "comment" : "\n     * Maximum number of (generic) action buttons in a notification (contextual action buttons are\n     * handled separately).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REMOTE_INPUT_DRAFT",
    "type" : "String",
    "comment" : "\n     * If the notification contained an unsent draft for a RemoteInput when the user clicked on it,\n     * we're adding the draft as a String extra to the {@link #contentIntent} using this key.\n     *\n     * <p>Apps may use this extra to prepopulate text fields in the app, where the user usually\n     * sends messages.</p>\n     ",
    "links" : [ "#contentIntent" ]
  }, {
    "name" : "when",
    "type" : "long",
    "comment" : "\n     * A timestamp related to this notification, in milliseconds since the epoch.\n     *\n     * Default value: {@link System#currentTimeMillis() Now}.\n     *\n     * Choose a timestamp that will be most relevant to the user. For most finite events, this\n     * corresponds to the time the event happened (or will happen, in the case of events that have\n     * yet to occur but about which the user is being informed). Indefinite events should be\n     * timestamped according to when the activity began.\n     *\n     * Some examples:\n     *\n     * <ul>\n     *   <li>Notification of a new chat message should be stamped when the message was received.</li>\n     *   <li>Notification of an ongoing file download (with a progress bar, for example) should be stamped when the download started.</li>\n     *   <li>Notification of a completed file download should be stamped when the download finished.</li>\n     *   <li>Notification of an upcoming meeting should be stamped with the time the meeting will begin (that is, in the future).</li>\n     *   <li>Notification of an ongoing stopwatch (increasing timer) should be stamped with the watch's start time.\n     *   <li>Notification of an ongoing countdown timer should be stamped with the timer's end time.\n     * </ul>\n     *\n     * For apps targeting {@link android.os.Build.VERSION_CODES#N} and above, this time is not shown\n     * anymore by default and must be opted into by using\n     * {@link android.app.Notification.Builder#setShowWhen(boolean)}\n     ",
    "links" : [ "#currentTimeMillis()", "android.app.Notification.Builder#setShowWhen(boolean)", "android.os.Build.VERSION_CODES#N" ]
  }, {
    "name" : "creationTime",
    "type" : "long",
    "comment" : "\n     * The creation time of the notification\n     ",
    "links" : [ ]
  }, {
    "name" : "icon",
    "type" : "int",
    "comment" : "\n     * The resource id of a drawable to use as the icon in the status bar.\n     *\n     * @deprecated Use {@link Builder#setSmallIcon(Icon)} instead.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setSmallIcon(Icon)" ]
  }, {
    "name" : "iconLevel",
    "type" : "int",
    "comment" : "\n     * If the icon in the status bar is to have more than one level, you can set this.  Otherwise,\n     * leave it at its default value of 0.\n     *\n     * @see android.widget.ImageView#setImageLevel\n     * @see android.graphics.drawable.Drawable#setLevel\n     ",
    "links" : [ ]
  }, {
    "name" : "number",
    "type" : "int",
    "comment" : "\n     * The number of events that this notification represents. For example, in a new mail\n     * notification, this could be the number of unread messages.\n     *\n     * The system may or may not use this field to modify the appearance of the notification.\n     * Starting with {@link android.os.Build.VERSION_CODES#O}, the number may be displayed as a\n     * badge icon in Launchers that support badging.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O" ]
  }, {
    "name" : "contentIntent",
    "type" : "PendingIntent",
    "comment" : "\n     * The intent to execute when the expanded status entry is clicked.  If\n     * this is an activity, it must include the\n     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK} flag, which requires\n     * that you take care of task management as described in the\n     * <a href=\"{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html\">Tasks and Back\n     * Stack</a> document.  In particular, make sure to read the notification section\n     * <a href=\"{@docRoot}guide/topics/ui/notifiers/notifications.html#HandlingNotifications\">Handling\n     * Notifications</a> for the correct ways to launch an application from a\n     * notification.\n     ",
    "links" : [ "android.content.Intent#FLAG_ACTIVITY_NEW_TASK" ]
  }, {
    "name" : "deleteIntent",
    "type" : "PendingIntent",
    "comment" : "\n     * The intent to execute when the notification is explicitly dismissed by the user, either with\n     * the \"Clear All\" button or by swiping it away individually.\n     *\n     * This probably shouldn't be launching an activity since several of those will be sent\n     * at the same time.\n     ",
    "links" : [ ]
  }, {
    "name" : "fullScreenIntent",
    "type" : "PendingIntent",
    "comment" : "\n     * An intent to launch instead of posting the notification to the status bar.\n     *\n     * <p>\n     * The system UI may choose to display a heads-up notification, instead of\n     * launching this intent, while the user is using the device.\n     * </p>\n     *\n     * @see Notification.Builder#setFullScreenIntent\n     ",
    "links" : [ ]
  }, {
    "name" : "tickerText",
    "type" : "CharSequence",
    "comment" : "\n     * Text that summarizes this notification for accessibility services.\n     *\n     * As of the L release, this text is no longer shown on screen, but it is still useful to\n     * accessibility services (where it serves as an audible announcement of the notification's\n     * appearance).\n     *\n     * @see #tickerView\n     ",
    "links" : [ ]
  }, {
    "name" : "tickerView",
    "type" : "RemoteViews",
    "comment" : "\n     * Formerly, a view showing the {@link #tickerText}.\n     *\n     * No longer displayed in the status bar as of API 21.\n     ",
    "links" : [ "#tickerText" ]
  }, {
    "name" : "contentView",
    "type" : "RemoteViews",
    "comment" : "\n     * The view that will represent this notification in the notification list (which is pulled\n     * down from the status bar).\n     *\n     * As of N, this field may be null. The notification view is determined by the inputs\n     * to {@link Notification.Builder}; a custom RemoteViews can optionally be\n     * supplied with {@link Notification.Builder#setCustomContentView(RemoteViews)}.\n     ",
    "links" : [ "Notification.Builder#setCustomContentView(RemoteViews)", "Notification.Builder" ]
  }, {
    "name" : "bigContentView",
    "type" : "RemoteViews",
    "comment" : "\n     * A large-format version of {@link #contentView}, giving the Notification an\n     * opportunity to show more detail. The system UI may choose to show this\n     * instead of the normal content view at its discretion.\n     *\n     * As of N, this field may be null. The expanded notification view is determined by the\n     * inputs to {@link Notification.Builder}; a custom RemoteViews can optionally be\n     * supplied with {@link Notification.Builder#setCustomBigContentView(RemoteViews)}.\n     ",
    "links" : [ "#contentView", "Notification.Builder", "Notification.Builder#setCustomBigContentView(RemoteViews)" ]
  }, {
    "name" : "headsUpContentView",
    "type" : "RemoteViews",
    "comment" : "\n     * A medium-format version of {@link #contentView}, providing the Notification an\n     * opportunity to add action buttons to contentView. At its discretion, the system UI may\n     * choose to show this as a heads-up notification, which will pop up so the user can see\n     * it without leaving their current activity.\n     *\n     * As of N, this field may be null. The heads-up notification view is determined by the\n     * inputs to {@link Notification.Builder}; a custom RemoteViews can optionally be\n     * supplied with {@link Notification.Builder#setCustomHeadsUpContentView(RemoteViews)}.\n     ",
    "links" : [ "#contentView", "Notification.Builder", "Notification.Builder#setCustomHeadsUpContentView(RemoteViews)" ]
  }, {
    "name" : "mUsesStandardHeader",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STANDARD_LAYOUTS",
    "type" : "ArraySet<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "largeIcon",
    "type" : "Bitmap",
    "comment" : "\n     * A large bitmap to be shown in the notification content area.\n     *\n     * @deprecated Use {@link Builder#setLargeIcon(Icon)} instead.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setLargeIcon(Icon)" ]
  }, {
    "name" : "sound",
    "type" : "Uri",
    "comment" : "\n     * The sound to play.\n     *\n     * <p>\n     * A notification that is noisy is more likely to be presented as a heads-up notification.\n     * </p>\n     *\n     * <p>\n     * To play the default notification sound, see {@link #defaults}.\n     * </p>\n     * @deprecated use {@link NotificationChannel#getSound()}.\n     ",
    "links" : [ "android.app.NotificationChannel#getSound()", "#defaults" ]
  }, {
    "name" : "STREAM_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Use this constant as the value for audioStreamType to request that\n     * the default stream type for notifications be used.  Currently the\n     * default stream type is {@link AudioManager#STREAM_NOTIFICATION}.\n     *\n     * @deprecated Use {@link NotificationChannel#getAudioAttributes()} instead.\n     ",
    "links" : [ "android.media.AudioManager#STREAM_NOTIFICATION", "android.app.NotificationChannel#getAudioAttributes()" ]
  }, {
    "name" : "audioStreamType",
    "type" : "int",
    "comment" : "\n     * The audio stream type to use when playing the sound.\n     * Should be one of the STREAM_ constants from\n     * {@link android.media.AudioManager}.\n     *\n     * @deprecated Use {@link #audioAttributes} instead.\n     ",
    "links" : [ "#audioAttributes", "android.media.AudioManager" ]
  }, {
    "name" : "AUDIO_ATTRIBUTES_DEFAULT",
    "type" : "AudioAttributes",
    "comment" : "\n     * The default value of {@link #audioAttributes}.\n     ",
    "links" : [ "#audioAttributes" ]
  }, {
    "name" : "audioAttributes",
    "type" : "AudioAttributes",
    "comment" : "\n     * The {@link AudioAttributes audio attributes} to use when playing the sound.\n     *\n     * @deprecated use {@link NotificationChannel#getAudioAttributes()} instead.\n     ",
    "links" : [ "android.media.AudioAttributes", "android.app.NotificationChannel#getAudioAttributes()" ]
  }, {
    "name" : "vibrate",
    "type" : "long[]",
    "comment" : "\n     * The pattern with which to vibrate.\n     *\n     * <p>\n     * To vibrate the default pattern, see {@link #defaults}.\n     * </p>\n     *\n     * @see android.os.Vibrator#vibrate(long[],int)\n     * @deprecated use {@link NotificationChannel#getVibrationPattern()}.\n     ",
    "links" : [ "#defaults", "android.app.NotificationChannel#getVibrationPattern()" ]
  }, {
    "name" : "ledARGB",
    "type" : "int",
    "comment" : "\n     * The color of the led.  The hardware will do its best approximation.\n     *\n     * @see #FLAG_SHOW_LIGHTS\n     * @see #flags\n     * @deprecated use {@link NotificationChannel#shouldShowLights()}.\n     ",
    "links" : [ "android.app.NotificationChannel#shouldShowLights()" ]
  }, {
    "name" : "ledOnMS",
    "type" : "int",
    "comment" : "\n     * The number of milliseconds for the LED to be on while it's flashing.\n     * The hardware will do its best approximation.\n     *\n     * @see #FLAG_SHOW_LIGHTS\n     * @see #flags\n     * @deprecated use {@link NotificationChannel#shouldShowLights()}.\n     ",
    "links" : [ "android.app.NotificationChannel#shouldShowLights()" ]
  }, {
    "name" : "ledOffMS",
    "type" : "int",
    "comment" : "\n     * The number of milliseconds for the LED to be off while it's flashing.\n     * The hardware will do its best approximation.\n     *\n     * @see #FLAG_SHOW_LIGHTS\n     * @see #flags\n     *\n     * @deprecated use {@link NotificationChannel#shouldShowLights()}.\n     ",
    "links" : [ "android.app.NotificationChannel#shouldShowLights()" ]
  }, {
    "name" : "defaults",
    "type" : "int",
    "comment" : "\n     * Specifies which values should be taken from the defaults.\n     * <p>\n     * To set, OR the desired from {@link #DEFAULT_SOUND},\n     * {@link #DEFAULT_VIBRATE}, {@link #DEFAULT_LIGHTS}. For all default\n     * values, use {@link #DEFAULT_ALL}.\n     * </p>\n     *\n     * @deprecated use {@link NotificationChannel#getSound()} and\n     * {@link NotificationChannel#shouldShowLights()} and\n     * {@link NotificationChannel#shouldVibrate()}.\n     ",
    "links" : [ "#DEFAULT_LIGHTS", "#DEFAULT_ALL", "android.app.NotificationChannel#getSound()", "android.app.NotificationChannel#shouldVibrate()", "#DEFAULT_VIBRATE", "android.app.NotificationChannel#shouldShowLights()", "#DEFAULT_SOUND" ]
  }, {
    "name" : "FLAG_SHOW_LIGHTS",
    "type" : "int",
    "comment" : "\n     * Bit to be bitwise-ored into the {@link #flags} field that should be\n     * set if you want the LED on for this notification.\n     * <ul>\n     * <li>To turn the LED off, pass 0 in the alpha channel for colorARGB\n     *      or 0 for both ledOnMS and ledOffMS.</li>\n     * <li>To turn the LED on, pass 1 for ledOnMS and 0 for ledOffMS.</li>\n     * <li>To flash the LED, pass the number of milliseconds that it should\n     *      be on and off to ledOnMS and ledOffMS.</li>\n     * </ul>\n     * <p>\n     * Since hardware varies, you are not guaranteed that any of the values\n     * you pass are honored exactly.  Use the system defaults if possible\n     * because they will be set to values that work on any given hardware.\n     * <p>\n     * The alpha channel must be set for forward compatibility.\n     *\n     * @deprecated use {@link NotificationChannel#shouldShowLights()}.\n     ",
    "links" : [ "#flags", "android.app.NotificationChannel#shouldShowLights()" ]
  }, {
    "name" : "FLAG_ONGOING_EVENT",
    "type" : "int",
    "comment" : "\n     * Bit to be bitwise-ored into the {@link #flags} field that should be\n     * set if this notification is in reference to something that is ongoing,\n     * like a phone call.  It should not be set if this notification is in\n     * reference to something that happened at a particular point in time,\n     * like a missed phone call.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_INSISTENT",
    "type" : "int",
    "comment" : "\n     * Bit to be bitwise-ored into the {@link #flags} field that if set,\n     * the audio will be repeated until the notification is\n     * cancelled or the notification window is opened.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_ONLY_ALERT_ONCE",
    "type" : "int",
    "comment" : "\n     * Bit to be bitwise-ored into the {@link #flags} field that should be\n     * set if you would only like the sound, vibrate and ticker to be played\n     * if the notification was not already showing.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_AUTO_CANCEL",
    "type" : "int",
    "comment" : "\n     * Bit to be bitwise-ored into the {@link #flags} field that should be\n     * set if the notification should be canceled when it is clicked by the\n     * user.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_NO_CLEAR",
    "type" : "int",
    "comment" : "\n     * Bit to be bitwise-ored into the {@link #flags} field that should be\n     * set if the notification should not be canceled when the user clicks\n     * the Clear all button.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_FOREGROUND_SERVICE",
    "type" : "int",
    "comment" : "\n     * Bit to be bitwise-ored into the {@link #flags} field that should be\n     * set if this notification represents a currently running service.  This\n     * will normally be set for you by {@link Service#startForeground}.\n     ",
    "links" : [ "android.app.Service#startForeground", "#flags" ]
  }, {
    "name" : "FLAG_HIGH_PRIORITY",
    "type" : "int",
    "comment" : "\n     * Obsolete flag indicating high-priority notifications; use the priority field instead.\n     *\n     * @deprecated Use {@link #priority} with a positive value.\n     ",
    "links" : [ "#priority" ]
  }, {
    "name" : "FLAG_LOCAL_ONLY",
    "type" : "int",
    "comment" : "\n     * Bit to be bitswise-ored into the {@link #flags} field that should be\n     * set if this notification is relevant to the current device only\n     * and it is not recommended that it bridge to other devices.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_GROUP_SUMMARY",
    "type" : "int",
    "comment" : "\n     * Bit to be bitswise-ored into the {@link #flags} field that should be\n     * set if this notification is the group summary for a group of notifications.\n     * Grouped notifications may display in a cluster or stack on devices which\n     * support such rendering. Requires a group key also be set using {@link Builder#setGroup}.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setGroup", "#flags" ]
  }, {
    "name" : "FLAG_AUTOGROUP_SUMMARY",
    "type" : "int",
    "comment" : "\n     * Bit to be bitswise-ored into the {@link #flags} field that should be\n     * set if this notification is the group summary for an auto-group of notifications.\n     *\n     * @hide\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_CAN_COLORIZE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_BUBBLE",
    "type" : "int",
    "comment" : "\n     * Bit to be bitswised-ored into the {@link #flags} field that should be\n     * set by the system if this notification is showing as a bubble.\n     *\n     * Applications cannot set this flag directly; they should instead call\n     * {@link Notification.Builder#setBubbleMetadata(BubbleMetadata)} to\n     * request that a notification be displayed as a bubble, and then check\n     * this flag to see whether that request was honored by the system.\n     ",
    "links" : [ "Notification.Builder#setBubbleMetadata(BubbleMetadata)", "#flags" ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default notification {@link #priority}. If your application does not prioritize its own\n     * notifications, use this value for all notifications.\n     *\n     * @deprecated use {@link NotificationManager#IMPORTANCE_DEFAULT} instead.\n     ",
    "links" : [ "#priority", "android.app.NotificationManager#IMPORTANCE_DEFAULT" ]
  }, {
    "name" : "PRIORITY_LOW",
    "type" : "int",
    "comment" : "\n     * Lower {@link #priority}, for items that are less important. The UI may choose to show these\n     * items smaller, or at a different position in the list, compared with your app's\n     * {@link #PRIORITY_DEFAULT} items.\n     *\n     * @deprecated use {@link NotificationManager#IMPORTANCE_LOW} instead.\n     ",
    "links" : [ "#priority", "android.app.NotificationManager#IMPORTANCE_LOW", "#PRIORITY_DEFAULT" ]
  }, {
    "name" : "PRIORITY_MIN",
    "type" : "int",
    "comment" : "\n     * Lowest {@link #priority}; these items might not be shown to the user except under special\n     * circumstances, such as detailed notification logs.\n     *\n     * @deprecated use {@link NotificationManager#IMPORTANCE_MIN} instead.\n     ",
    "links" : [ "#priority", "android.app.NotificationManager#IMPORTANCE_MIN" ]
  }, {
    "name" : "PRIORITY_HIGH",
    "type" : "int",
    "comment" : "\n     * Higher {@link #priority}, for more important notifications or alerts. The UI may choose to\n     * show these items larger, or at a different position in notification lists, compared with\n     * your app's {@link #PRIORITY_DEFAULT} items.\n     *\n     * @deprecated use {@link NotificationManager#IMPORTANCE_HIGH} instead.\n     ",
    "links" : [ "#priority", "#PRIORITY_DEFAULT", "android.app.NotificationManager#IMPORTANCE_HIGH" ]
  }, {
    "name" : "PRIORITY_MAX",
    "type" : "int",
    "comment" : "\n     * Highest {@link #priority}, for your application's most important items that require the\n     * user's prompt attention or input.\n     *\n     * @deprecated use {@link NotificationManager#IMPORTANCE_HIGH} instead.\n     ",
    "links" : [ "#priority", "android.app.NotificationManager#IMPORTANCE_HIGH" ]
  }, {
    "name" : "priority",
    "type" : "int",
    "comment" : "\n     * Relative priority for this notification.\n     *\n     * Priority is an indication of how much of the user's valuable attention should be consumed by\n     * this notification. Low-priority notifications may be hidden from the user in certain\n     * situations, while the user might be interrupted for a higher-priority notification. The\n     * system will make a determination about how to interpret this priority when presenting\n     * the notification.\n     *\n     * <p>\n     * A notification that is at least {@link #PRIORITY_HIGH} is more likely to be presented\n     * as a heads-up notification.\n     * </p>\n     *\n     * @deprecated use {@link NotificationChannel#getImportance()} instead.\n     ",
    "links" : [ "android.app.NotificationChannel#getImportance()", "#PRIORITY_HIGH" ]
  }, {
    "name" : "color",
    "type" : "int",
    "comment" : "\n     * Accent color (an ARGB integer like the constants in {@link android.graphics.Color})\n     * to be applied by the standard Style templates when presenting this notification.\n     *\n     * The current template design constructs a colorful header image by overlaying the\n     * {@link #icon} image (stenciled in white) atop a field of this color. Alpha components are\n     * ignored.\n     ",
    "links" : [ "android.graphics.Color", "#icon" ]
  }, {
    "name" : "COLOR_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Special value of {@link #color} telling the system not to decorate this notification with\n     * any special color but instead use default colors when presenting this notification.\n     ",
    "links" : [ "#color" ]
  }, {
    "name" : "COLOR_INVALID",
    "type" : "int",
    "comment" : "\n     * Special value of {@link #color} used as a place holder for an invalid color.\n     * @hide\n     ",
    "links" : [ "#color" ]
  }, {
    "name" : "visibility",
    "type" : "int",
    "comment" : "\n     * Sphere of visibility of this notification, which affects how and when the SystemUI reveals\n     * the notification's presence and contents in untrusted situations (namely, on the secure\n     * lockscreen).\n     *\n     * The default level, {@link #VISIBILITY_PRIVATE}, behaves exactly as notifications have always\n     * done on Android: The notification's {@link #icon} and {@link #tickerText} (if available) are\n     * shown in all situations, but the contents are only available if the device is unlocked for\n     * the appropriate user.\n     *\n     * A more permissive policy can be expressed by {@link #VISIBILITY_PUBLIC}; such a notification\n     * can be read even in an \"insecure\" context (that is, above a secure lockscreen).\n     * To modify the public version of this notification—for example, to redact some portions—see\n     * {@link Builder#setPublicVersion(Notification)}.\n     *\n     * Finally, a notification can be made {@link #VISIBILITY_SECRET}, which will suppress its icon\n     * and ticker until the user has bypassed the lockscreen.\n     ",
    "links" : [ "#VISIBILITY_PRIVATE", "#icon", "#VISIBILITY_PUBLIC", "#VISIBILITY_SECRET", "#tickerText", "android.text.SpannableStringBuilder#setPublicVersion(Notification)" ]
  }, {
    "name" : "VISIBILITY_PUBLIC",
    "type" : "int",
    "comment" : "\n     * Notification visibility: Show this notification in its entirety on all lockscreens.\n     *\n     * {@see #visibility}\n     ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_PRIVATE",
    "type" : "int",
    "comment" : "\n     * Notification visibility: Show this notification on all lockscreens, but conceal sensitive or\n     * private information on secure lockscreens.\n     *\n     * {@see #visibility}\n     ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_SECRET",
    "type" : "int",
    "comment" : "\n     * Notification visibility: Do not reveal any part of this notification on a secure lockscreen.\n     *\n     * {@see #visibility}\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_CALL",
    "type" : "String",
    "comment" : "\n     * Notification category: incoming call (voice or video) or similar synchronous communication request.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_NAVIGATION",
    "type" : "String",
    "comment" : "\n     * Notification category: map turn-by-turn navigation.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_MESSAGE",
    "type" : "String",
    "comment" : "\n     * Notification category: incoming direct message (SMS, instant message, etc.).\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_EMAIL",
    "type" : "String",
    "comment" : "\n     * Notification category: asynchronous bulk message (email).\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_EVENT",
    "type" : "String",
    "comment" : "\n     * Notification category: calendar event.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_PROMO",
    "type" : "String",
    "comment" : "\n     * Notification category: promotion or advertisement.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_ALARM",
    "type" : "String",
    "comment" : "\n     * Notification category: alarm or timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_PROGRESS",
    "type" : "String",
    "comment" : "\n     * Notification category: progress of a long-running background operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SOCIAL",
    "type" : "String",
    "comment" : "\n     * Notification category: social network or sharing update.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_ERROR",
    "type" : "String",
    "comment" : "\n     * Notification category: error in background operation or authentication status.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_TRANSPORT",
    "type" : "String",
    "comment" : "\n     * Notification category: media transport control for playback.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SYSTEM",
    "type" : "String",
    "comment" : "\n     * Notification category: system or device status update.  Reserved for system use.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SERVICE",
    "type" : "String",
    "comment" : "\n     * Notification category: indication of running background service.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_RECOMMENDATION",
    "type" : "String",
    "comment" : "\n     * Notification category: a specific, timely recommendation for a single thing.\n     * For example, a news app might want to recommend a news story it believes the user will\n     * want to read next.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_STATUS",
    "type" : "String",
    "comment" : "\n     * Notification category: ongoing information about device or contextual status.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_REMINDER",
    "type" : "String",
    "comment" : "\n     * Notification category: user-scheduled reminder.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_CAR_EMERGENCY",
    "type" : "String",
    "comment" : "\n     * Notification category: extreme car emergencies.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_CAR_WARNING",
    "type" : "String",
    "comment" : "\n     * Notification category: car warnings.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_CAR_INFORMATION",
    "type" : "String",
    "comment" : "\n     * Notification category: general car system information.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "category",
    "type" : "String",
    "comment" : "\n     * One of the predefined notification categories (see the <code>CATEGORY_*</code> constants)\n     * that best describes this Notification.  May be used by the system for ranking and filtering.\n     ",
    "links" : [ ]
  }, {
    "name" : "mGroupKey",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSortKey",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "extras",
    "type" : "Bundle",
    "comment" : "\n     * Additional semantic data to be carried around with this Notification.\n     * <p>\n     * The extras keys defined here are intended to capture the original inputs to {@link Builder}\n     * APIs, and are intended to be used by\n     * {@link android.service.notification.NotificationListenerService} implementations to extract\n     * detailed information from notification objects.\n     ",
    "links" : [ "android.text.SpannableStringBuilder", "android.service.notification.NotificationListenerService" ]
  }, {
    "name" : "allPendingIntents",
    "type" : "ArraySet<PendingIntent>",
    "comment" : "\n     * All pending intents in the notification as the system needs to be able to access them but\n     * touching the extras bundle in the system process is not safe because the bundle may contain\n     * custom parcelable objects.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mWhitelistToken",
    "type" : "IBinder",
    "comment" : "\n     * Token identifying the notification that is applying doze/bgcheck whitelisting to the\n     * pending intents inside of it, so only those will get the behavior.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "processWhitelistToken",
    "type" : "IBinder",
    "comment" : "\n     * Must be set by a process to start associating tokens with Notification objects\n     * coming in to it.  This is set by NotificationManagerService.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TITLE",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is the title of the notification,\n     * as supplied to {@link Builder#setContentTitle(CharSequence)}.\n     ",
    "links" : [ "#extras", "android.text.SpannableStringBuilder#setContentTitle(CharSequence)" ]
  }, {
    "name" : "EXTRA_TITLE_BIG",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is the title of the notification when shown in expanded form,\n     * e.g. as supplied to {@link BigTextStyle#setBigContentTitle(CharSequence)}.\n     ",
    "links" : [ "#extras", "#setBigContentTitle(CharSequence)" ]
  }, {
    "name" : "EXTRA_TEXT",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is the main text payload, as supplied to\n     * {@link Builder#setContentText(CharSequence)}.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setContentText(CharSequence)", "#extras" ]
  }, {
    "name" : "EXTRA_SUB_TEXT",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is a third line of text, as supplied to\n     * {@link Builder#setSubText(CharSequence)}.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setSubText(CharSequence)", "#extras" ]
  }, {
    "name" : "EXTRA_REMOTE_INPUT_HISTORY",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is the remote input history, as supplied to\n     * {@link Builder#setRemoteInputHistory(CharSequence[])}.\n     *\n     * Apps can fill this through {@link Builder#setRemoteInputHistory(CharSequence[])}\n     * with the most recent inputs that have been sent through a {@link RemoteInput} of this\n     * Notification and are expected to clear it once the it is no longer relevant (e.g. for chat\n     * notifications once the other party has responded).\n     *\n     * The extra with this key is of type CharSequence[] and contains the most recent entry at\n     * the 0 index, the second most recent at the 1 index, etc.\n     *\n     * @see Builder#setRemoteInputHistory(CharSequence[])\n     ",
    "links" : [ "android.app.RemoteInput", "android.text.SpannableStringBuilder#setRemoteInputHistory(CharSequence", "#extras" ]
  }, {
    "name" : "EXTRA_REMOTE_INPUT_HISTORY_ITEMS",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is a remote input history which can include media messages\n     * in addition to text, as supplied to\n     * {@link Builder#setRemoteInputHistory(RemoteInputHistoryItem[])} or\n     * {@link Builder#setRemoteInputHistory(CharSequence[])}.\n     *\n     * SystemUI can populate this through\n     * {@link Builder#setRemoteInputHistory(RemoteInputHistoryItem[])} with the most recent inputs\n     * that have been sent through a {@link RemoteInput} of this Notification. These items can\n     * represent either media content (specified by a URI and a MIME type) or a text message\n     * (described by a CharSequence).\n     *\n     * To maintain compatibility, this can also be set by apps with\n     * {@link Builder#setRemoteInputHistory(CharSequence[])}, which will create a\n     * {@link RemoteInputHistoryItem} for each of the provided text-only messages.\n     *\n     * The extra with this key is of type {@link RemoteInputHistoryItem[]} and contains the most\n     * recent entry at the 0 index, the second most recent at the 1 index, etc.\n     *\n     * @see Builder#setRemoteInputHistory(RemoteInputHistoryItem[])\n     * @hide\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setRemoteInputHistory(RemoteInputHistoryItem", "android.app.RemoteInput", "android.text.SpannableStringBuilder#setRemoteInputHistory(CharSequence", "#extras", "android.app.RemoteInputHistoryItem" ]
  }, {
    "name" : "EXTRA_SHOW_REMOTE_INPUT_SPINNER",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: boolean as supplied to\n     * {@link Builder#setShowRemoteInputSpinner(boolean)}.\n     *\n     * If set to true, then the view displaying the remote input history from\n     * {@link Builder#setRemoteInputHistory(CharSequence[])} will have a progress spinner.\n     *\n     * @see Builder#setShowRemoteInputSpinner(boolean)\n     * @hide\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setRemoteInputHistory(CharSequence", "#extras", "android.text.SpannableStringBuilder#setShowRemoteInputSpinner(boolean)" ]
  }, {
    "name" : "EXTRA_HIDE_SMART_REPLIES",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: boolean as supplied to\n     * {@link Builder#setHideSmartReplies(boolean)}.\n     *\n     * If set to true, then any smart reply buttons will be hidden.\n     *\n     * @see Builder#setHideSmartReplies(boolean)\n     * @hide\n     ",
    "links" : [ "#extras", "android.text.SpannableStringBuilder#setHideSmartReplies(boolean)" ]
  }, {
    "name" : "EXTRA_INFO_TEXT",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is a small piece of additional text as supplied to\n     * {@link Builder#setContentInfo(CharSequence)}.\n     ",
    "links" : [ "#extras", "android.text.SpannableStringBuilder#setContentInfo(CharSequence)" ]
  }, {
    "name" : "EXTRA_SUMMARY_TEXT",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is a line of summary information intended to be shown\n     * alongside expanded notifications, as supplied to (e.g.)\n     * {@link BigTextStyle#setSummaryText(CharSequence)}.\n     ",
    "links" : [ "#extras", "#setSummaryText(CharSequence)" ]
  }, {
    "name" : "EXTRA_BIG_TEXT",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is the longer text shown in the big form of a\n     * {@link BigTextStyle} notification, as supplied to\n     * {@link BigTextStyle#bigText(CharSequence)}.\n     ",
    "links" : [ "#extras", "BigTextStyle", "#bigText(CharSequence)" ]
  }, {
    "name" : "EXTRA_SMALL_ICON",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is the resource ID of the notification's main small icon, as\n     * supplied to {@link Builder#setSmallIcon(int)}.\n     *\n     * @deprecated Use {@link #getSmallIcon()}, which supports a wider variety of icon sources.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setSmallIcon(int)", "#getSmallIcon()", "#extras" ]
  }, {
    "name" : "EXTRA_LARGE_ICON",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is a bitmap to be used instead of the small icon when showing the\n     * notification payload, as\n     * supplied to {@link Builder#setLargeIcon(android.graphics.Bitmap)}.\n     *\n     * @deprecated Use {@link #getLargeIcon()}, which supports a wider variety of icon sources.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setLargeIcon(android.graphics.Bitmap)", "#extras", "#getLargeIcon()" ]
  }, {
    "name" : "EXTRA_LARGE_ICON_BIG",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is a bitmap to be used instead of the one from\n     * {@link Builder#setLargeIcon(android.graphics.Bitmap)} when the notification is\n     * shown in its expanded form, as supplied to\n     * {@link BigPictureStyle#bigLargeIcon(android.graphics.Bitmap)}.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setLargeIcon(android.graphics.Bitmap)", "#bigLargeIcon(android.graphics.Bitmap)", "#extras" ]
  }, {
    "name" : "EXTRA_PROGRESS",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is the progress value supplied to\n     * {@link Builder#setProgress(int, int, boolean)}.\n     ",
    "links" : [ "#extras", "android.text.SpannableStringBuilder#setProgress(int" ]
  }, {
    "name" : "EXTRA_PROGRESS_MAX",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is the maximum value supplied to\n     * {@link Builder#setProgress(int, int, boolean)}.\n     ",
    "links" : [ "#extras", "android.text.SpannableStringBuilder#setProgress(int" ]
  }, {
    "name" : "EXTRA_PROGRESS_INDETERMINATE",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: whether the progress bar is indeterminate, supplied to\n     * {@link Builder#setProgress(int, int, boolean)}.\n     ",
    "links" : [ "#extras", "android.text.SpannableStringBuilder#setProgress(int" ]
  }, {
    "name" : "EXTRA_SHOW_CHRONOMETER",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: whether {@link #when} should be shown as a count-up timer (specifically\n     * a {@link android.widget.Chronometer}) instead of a timestamp, as supplied to\n     * {@link Builder#setUsesChronometer(boolean)}.\n     ",
    "links" : [ "#extras", "android.text.SpannableStringBuilder#setUsesChronometer(boolean)", "#when", "android.widget.Chronometer" ]
  }, {
    "name" : "EXTRA_CHRONOMETER_COUNT_DOWN",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: whether the chronometer set on the notification should count down\n     * instead of counting up. Is only relevant if key {@link #EXTRA_SHOW_CHRONOMETER} is present.\n     * This extra is a boolean. The default is false.\n     ",
    "links" : [ "#extras", "#EXTRA_SHOW_CHRONOMETER" ]
  }, {
    "name" : "EXTRA_SHOW_WHEN",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: whether {@link #when} should be shown,\n     * as supplied to {@link Builder#setShowWhen(boolean)}.\n     ",
    "links" : [ "#extras", "android.text.SpannableStringBuilder#setShowWhen(boolean)", "#when" ]
  }, {
    "name" : "EXTRA_PICTURE",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: this is a bitmap to be shown in {@link BigPictureStyle} expanded\n     * notifications, supplied to {@link BigPictureStyle#bigPicture(android.graphics.Bitmap)}.\n     ",
    "links" : [ "#extras", "#bigPicture(android.graphics.Bitmap)", "BigPictureStyle" ]
  }, {
    "name" : "EXTRA_TEXT_LINES",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: An array of CharSequences to show in {@link InboxStyle} expanded\n     * notifications, each of which was supplied to {@link InboxStyle#addLine(CharSequence)}.\n     ",
    "links" : [ "#extras", "InboxStyle", "#addLine(CharSequence)" ]
  }, {
    "name" : "EXTRA_TEMPLATE",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: A string representing the name of the specific\n     * {@link android.app.Notification.Style} used to create this notification.\n     ",
    "links" : [ "android.app.Notification.Style", "#extras" ]
  }, {
    "name" : "EXTRA_PEOPLE",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: A String array containing the people that this notification relates to,\n     * each of which was supplied to {@link Builder#addPerson(String)}.\n     *\n     * @deprecated the actual objects are now in {@link #EXTRA_PEOPLE_LIST}\n     ",
    "links" : [ "#extras", "#EXTRA_PEOPLE_LIST", "android.text.SpannableStringBuilder#addPerson(String)" ]
  }, {
    "name" : "EXTRA_PEOPLE_LIST",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: An arrayList of {@link Person} objects containing the people that\n     * this notification relates to.\n     ",
    "links" : [ "#extras", "android.app.Person" ]
  }, {
    "name" : "EXTRA_ALLOW_DURING_SETUP",
    "type" : "String",
    "comment" : "\n     * Allow certain system-generated notifications to appear before the device is provisioned.\n     * Only available to notifications coming from the android package.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_BACKGROUND_IMAGE_URI",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key:\n     * flat {@link String} representation of a {@link android.content.ContentUris content URI}\n     * pointing to an image that can be displayed in the background when the notification is\n     * selected. Used on television platforms. The URI must point to an image stream suitable for\n     * passing into {@link android.graphics.BitmapFactory#decodeStream(java.io.InputStream)\n     * BitmapFactory.decodeStream}; all other content types will be ignored.\n     ",
    "links" : [ "android.graphics.BitmapFactory#decodeStream(java.io.InputStream)", "#extras", "String", "android.content.ContentUris" ]
  }, {
    "name" : "EXTRA_MEDIA_SESSION",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: A\n     * {@link android.media.session.MediaSession.Token} associated with a\n     * {@link android.app.Notification.MediaStyle} notification.\n     ",
    "links" : [ "android.app.Notification.MediaStyle", "#extras", "android.media.session.MediaSession.Token" ]
  }, {
    "name" : "EXTRA_COMPACT_ACTIONS",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: the indices of actions to be shown in the compact view,\n     * as supplied to (e.g.) {@link MediaStyle#setShowActionsInCompactView(int...)}.\n     ",
    "links" : [ "#setShowActionsInCompactView(int...)", "#extras" ]
  }, {
    "name" : "EXTRA_SELF_DISPLAY_NAME",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: the username to be displayed for all messages sent by the user including\n     * direct replies\n     * {@link android.app.Notification.MessagingStyle} notification. This extra is a\n     * {@link CharSequence}\n     *\n     * @deprecated use {@link #EXTRA_MESSAGING_PERSON}\n     ",
    "links" : [ "#extras", "android.app.Notification.MessagingStyle", "CharSequence", "#EXTRA_MESSAGING_PERSON" ]
  }, {
    "name" : "EXTRA_MESSAGING_PERSON",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: the person to be displayed for all messages sent by the user including\n     * direct replies\n     * {@link android.app.Notification.MessagingStyle} notification. This extra is a\n     * {@link Person}\n     ",
    "links" : [ "#extras", "android.app.Notification.MessagingStyle", "android.app.Person" ]
  }, {
    "name" : "EXTRA_CONVERSATION_TITLE",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: a {@link CharSequence} to be displayed as the title to a conversation\n     * represented by a {@link android.app.Notification.MessagingStyle}\n     ",
    "links" : [ "#extras", "android.app.Notification.MessagingStyle", "CharSequence" ]
  }, {
    "name" : "EXTRA_CONVERSATION_ICON",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CONVERSATION_UNREAD_MESSAGE_COUNT",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MESSAGES",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: an array of {@link android.app.Notification.MessagingStyle.Message}\n     * bundles provided by a\n     * {@link android.app.Notification.MessagingStyle} notification. This extra is a parcelable\n     * array of bundles.\n     ",
    "links" : [ "#extras", "android.app.Notification.MessagingStyle", "android.app.Notification.MessagingStyle.Message" ]
  }, {
    "name" : "EXTRA_HISTORIC_MESSAGES",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: an array of\n     * {@link android.app.Notification.MessagingStyle#addHistoricMessage historic}\n     * {@link android.app.Notification.MessagingStyle.Message} bundles provided by a\n     * {@link android.app.Notification.MessagingStyle} notification. This extra is a parcelable\n     * array of bundles.\n     ",
    "links" : [ "#extras", "android.app.Notification.MessagingStyle", "android.app.Notification.MessagingStyle#addHistoricMessage", "android.app.Notification.MessagingStyle.Message" ]
  }, {
    "name" : "EXTRA_IS_GROUP_CONVERSATION",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: whether the {@link android.app.Notification.MessagingStyle} notification\n     * represents a group conversation.\n     ",
    "links" : [ "#extras", "android.app.Notification.MessagingStyle" ]
  }, {
    "name" : "EXTRA_COLORIZED",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: whether the notification should be colorized as\n     * supplied to {@link Builder#setColorized(boolean)}.\n     ",
    "links" : [ "#extras", "android.text.SpannableStringBuilder#setColorized(boolean)" ]
  }, {
    "name" : "EXTRA_BUILDER_APPLICATION_INFO",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CONTAINS_CUSTOM_VIEW",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REDUCED_IMAGES",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AUDIO_CONTENTS_URI",
    "type" : "String",
    "comment" : "\n     * {@link #extras} key: the audio contents of this notification.\n     *\n     * This is for use when rendering the notification on an audio-focused interface;\n     * the audio contents are a complete sound sample that contains the contents/body of the\n     * notification. This may be used in substitute of a Text-to-Speech reading of the\n     * notification. For example if the notification represents a voice message this should point\n     * to the audio of that message.\n     *\n     * The data stored under this key should be a String representation of a Uri that contains the\n     * audio contents in one of the following formats: WAV, PCM 16-bit, AMR-WB.\n     *\n     * This extra is unnecessary if you are using {@code MessagingStyle} since each {@code Message}\n     * has a field for holding data URI. That field can be used for audio.\n     * See {@code Message#setData}.\n     *\n     * Example usage:\n     * <pre>\n     * {@code\n     * Notification.Builder myBuilder = (build your Notification as normal);\n     * myBuilder.getExtras().putString(EXTRA_AUDIO_CONTENTS_URI, myAudioUri.toString());\n     * }\n     * </pre>\n     ",
    "links" : [ "#extras" ]
  }, {
    "name" : "EXTRA_SUBSTITUTE_APP_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_FOREGROUND_APPS",
    "type" : "String",
    "comment" : "\n     * This is set on the notifications shown by system_server about apps running foreground\n     * services. It indicates that the notification should be shown\n     * only if any of the given apps do not already have a properly tagged\n     * {@link #FLAG_FOREGROUND_SERVICE} notification currently visible to the user.\n     * This is a string array of all package names of the apps.\n     * @hide\n     ",
    "links" : [ "#FLAG_FOREGROUND_SERVICE" ]
  }, {
    "name" : "mSmallIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLargeIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeout",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortcutId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocusId",
    "type" : "LocusId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSettingsText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBubbleMetadata",
    "type" : "BubbleMetadata",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GROUP_ALERT_ALL",
    "type" : "int",
    "comment" : "\n     * Constant for {@link Builder#setGroupAlertBehavior(int)}, meaning that all notifications in a\n     * group with sound or vibration ought to make sound or vibrate (respectively), so this\n     * notification will not be muted when it is in a group.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setGroupAlertBehavior(int)" ]
  }, {
    "name" : "GROUP_ALERT_SUMMARY",
    "type" : "int",
    "comment" : "\n     * Constant for {@link Builder#setGroupAlertBehavior(int)}, meaning that all children\n     * notification in a group should be silenced (no sound or vibration) even if they are posted\n     * to a {@link NotificationChannel} that has sound and/or vibration. Use this constant to\n     * mute this notification if this notification is a group child. This must be applied to all\n     * children notifications you want to mute.\n     *\n     * <p> For example, you might want to use this constant if you post a number of children\n     * notifications at once (say, after a periodic sync), and only need to notify the user\n     * audibly once.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setGroupAlertBehavior(int)", "android.app.NotificationChannel" ]
  }, {
    "name" : "GROUP_ALERT_CHILDREN",
    "type" : "int",
    "comment" : "\n     * Constant for {@link Builder#setGroupAlertBehavior(int)}, meaning that the summary\n     * notification in a group should be silenced (no sound or vibration) even if they are\n     * posted to a {@link NotificationChannel} that has sound and/or vibration. Use this constant\n     * to mute this notification if this notification is a group summary.\n     *\n     * <p>For example, you might want to use this constant if only the children notifications\n     * in your group have content and the summary is only used to visually group notifications\n     * rather than to alert the user that new information is available.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setGroupAlertBehavior(int)", "android.app.NotificationChannel" ]
  }, {
    "name" : "mGroupAlertBehavior",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BADGE_ICON_NONE",
    "type" : "int",
    "comment" : "\n     * If this notification is being shown as a badge, always show as a number.\n     ",
    "links" : [ ]
  }, {
    "name" : "BADGE_ICON_SMALL",
    "type" : "int",
    "comment" : "\n     * If this notification is being shown as a badge, use the {@link #getSmallIcon()} to\n     * represent this notification.\n     ",
    "links" : [ "#getSmallIcon()" ]
  }, {
    "name" : "BADGE_ICON_LARGE",
    "type" : "int",
    "comment" : "\n     * If this notification is being shown as a badge, use the {@link #getLargeIcon()} to\n     * represent this notification.\n     ",
    "links" : [ "#getLargeIcon()" ]
  }, {
    "name" : "mBadgeIcon",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowSystemGeneratedContextualActions",
    "type" : "boolean",
    "comment" : "\n     * Determines whether the platform can generate contextual actions for a notification.\n     ",
    "links" : [ ]
  }, {
    "name" : "actions",
    "type" : "Action[]",
    "comment" : "\n     * Array of all {@link Action} structures attached to this notification by\n     * {@link Builder#addAction(int, CharSequence, PendingIntent)}. Mostly useful for instances of\n     * {@link android.service.notification.NotificationListenerService} that provide an alternative\n     * interface for invoking actions.\n     ",
    "links" : [ "Action", "android.text.SpannableStringBuilder#addAction(int", "android.service.notification.NotificationListenerService" ]
  }, {
    "name" : "publicVersion",
    "type" : "Notification",
    "comment" : "\n     * Replacement version of this notification whose content will be shown\n     * in an insecure context such as atop a secure keyguard. See {@link #visibility}\n     * and {@link #VISIBILITY_PUBLIC}.\n     ",
    "links" : [ "#VISIBILITY_PUBLIC", "#visibility" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Notification>",
    "comment" : "\n     * Parcelable.Creator that instantiates Notification objects\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getGroup()",
    "returnType" : "String",
    "comment" : "\n     * Get the key used to group this notification into a cluster or stack\n     * with other notifications on devices which support such rendering.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSortKey()",
    "returnType" : "String",
    "comment" : "\n     * Get a sort key that orders this notification among other notifications from the\n     * same package. This can be useful if an external sort was already applied and an app\n     * would like to preserve this. Notifications will be sorted lexicographically using this\n     * value, although providing different priorities in addition to providing sort key may\n     * cause this value to be ignored.\n     *\n     * <p>This sort key can also be used to order members of a notification group. See\n     * {@link Builder#setGroup}.\n     *\n     * @see String#compareTo(String)\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setGroup" ]
  }, {
    "name" : "private void readFromParcelImpl(Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Notification clone()",
    "returnType" : "Notification",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cloneInto(Notification that, boolean heavy)",
    "returnType" : "void",
    "comment" : "\n     * Copy all (or if heavy is false, all except Bitmaps and RemoteViews) members\n     * of this into that.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void visitUris(@NonNull Consumer<Uri> visitor)",
    "returnType" : "void",
    "comment" : "\n     * Note all {@link Uri} that are referenced internally, with the expectation\n     * that Uri permission grants will need to be issued to ensure the recipient\n     * of this object is able to render its contents.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.Uri" ]
  }, {
    "name" : "public final void lightenPayload()",
    "returnType" : "void",
    "comment" : "\n     * Removes heavyweight parts of the Notification object for archival or for sending to\n     * listeners when the full contents are not necessary.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CharSequence safeCharSequence(CharSequence cs)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Make sure this CharSequence is safe to put into a bundle, which basically\n     * means it had better not be some custom Parcelable implementation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static CharSequence removeTextSizeSpans(CharSequence charSequence)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Flatten this notification into a parcel.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeToParcelImpl(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean areActionsVisiblyDifferent(Notification first, Notification second)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areStyledNotificationsVisiblyDifferent(Builder first, Builder second)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areRemoteViewsChanged(Builder first, Builder second)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean areRemoteViewsChanged(RemoteViews first, RemoteViews second)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fixDuplicateExtras()",
    "returnType" : "void",
    "comment" : "\n     * Parcelling creates multiple copies of objects in {@code extras}. Fix them.\n     * <p>\n     * For backwards compatibility {@code extras} holds some references to \"real\" member data such\n     * as {@link getLargeIcon()} which is mirrored by {@link #EXTRA_LARGE_ICON}. This is mostly\n     * fine as long as the object stays in one process.\n     * <p>\n     * However, once the notification goes into a parcel each reference gets marshalled separately,\n     * wasting memory. Especially with large images on Auto and TV, this is worth fixing.\n     ",
    "links" : [ "getLargeIcon()", "#EXTRA_LARGE_ICON" ]
  }, {
    "name" : "private void fixDuplicateExtra(@Nullable Parcelable original, @NonNull String extraName)",
    "returnType" : "void",
    "comment" : "\n     * If we find an extra that's exactly the same as one of the \"real\" fields but refers to a\n     * separate object, replace it with the field's version to avoid holding duplicate copies.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLatestEventInfo(Context context, CharSequence contentTitle, CharSequence contentText, PendingIntent contentIntent)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link #contentView} field to be a view with the standard \"Latest Event\"\n     * layout.\n     *\n     * <p>Uses the {@link #icon} and {@link #when} fields to set the icon and time fields\n     * in the view.</p>\n     * @param context       The context for your application / activity.\n     * @param contentTitle The title that goes in the expanded entry.\n     * @param contentText  The text that goes in the expanded entry.\n     * @param contentIntent The intent to launch when the user clicks the expanded notification.\n     * If this is an activity, it must include the\n     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK} flag, which requires\n     * that you take care of task management as described in the\n     * <a href=\"{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html\">Tasks and Back\n     * Stack</a> document.\n     *\n     * @deprecated Use {@link Builder} instead.\n     * @removed\n     ",
    "links" : [ "#icon", "android.text.SpannableStringBuilder", "#contentView", "android.content.Intent#FLAG_ACTIVITY_NEW_TASK", "#when" ]
  }, {
    "name" : "public static void addFieldsFromContext(Context context, Notification notification)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addFieldsFromContext(ApplicationInfo ai, Notification notification)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String visibilityToString(int vis)",
    "returnType" : "String",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String priorityToString(@Priority int pri)",
    "returnType" : "String",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCompletedProgress()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getChannel()",
    "returnType" : "String",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public String getChannelId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the id of the channel this notification posts to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTimeout()",
    "returnType" : "long",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public long getTimeoutAfter()",
    "returnType" : "long",
    "comment" : "\n     * Returns the duration from posting after which this notification should be canceled by the\n     * system, if it's not canceled already.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBadgeIconType()",
    "returnType" : "int",
    "comment" : "\n     * Returns what icon should be shown for this notification if it is being displayed in a\n     * Launcher that supports badging. Will be one of {@link #BADGE_ICON_NONE},\n     * {@link #BADGE_ICON_SMALL}, or {@link #BADGE_ICON_LARGE}.\n     ",
    "links" : [ "#BADGE_ICON_LARGE", "#BADGE_ICON_SMALL", "#BADGE_ICON_NONE" ]
  }, {
    "name" : "public String getShortcutId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the {@link ShortcutInfo#getId() id} that this notification supersedes, if any.\n     *\n     * <p>Used by some Launchers that display notification content to hide shortcuts that duplicate\n     * notifications.\n     ",
    "links" : [ "android.content.pm.ShortcutInfo#getId()" ]
  }, {
    "name" : "public LocusId getLocusId()",
    "returnType" : "LocusId",
    "comment" : "\n     * Gets the {@link LocusId} associated with this notification.\n     *\n     * <p>Used by the device's intelligence services to correlate objects (such as\n     * {@link ShortcutInfo} and {@link ContentCaptureContext}) that are correlated.\n     ",
    "links" : [ "android.content.pm.ShortcutInfo", "android.view.contentcapture.ContentCaptureContext", "android.content.LocusId" ]
  }, {
    "name" : "public CharSequence getSettingsText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the settings text provided to {@link Builder#setSettingsText(CharSequence)}.\n     ",
    "links" : [ "android.text.SpannableStringBuilder#setSettingsText(CharSequence)" ]
  }, {
    "name" : "public int getGroupAlertBehavior()",
    "returnType" : "int",
    "comment" : "\n     * Returns which type of notifications in a group are responsible for audibly alerting the\n     * user. See {@link #GROUP_ALERT_ALL}, {@link #GROUP_ALERT_CHILDREN},\n     * {@link #GROUP_ALERT_SUMMARY}.\n     ",
    "links" : [ "#GROUP_ALERT_ALL", "#GROUP_ALERT_CHILDREN", "#GROUP_ALERT_SUMMARY" ]
  }, {
    "name" : "public BubbleMetadata getBubbleMetadata()",
    "returnType" : "BubbleMetadata",
    "comment" : "\n     * Returns the bubble metadata that will be used to display app content in a floating window\n     * over the existing foreground activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBubbleMetadata(BubbleMetadata data)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link BubbleMetadata} for this notification.\n     * @hide\n     ",
    "links" : [ "BubbleMetadata" ]
  }, {
    "name" : "public boolean getAllowSystemGeneratedContextualActions()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the platform is allowed (by the app developer) to generate contextual actions\n     * for this notification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Icon getSmallIcon()",
    "returnType" : "Icon",
    "comment" : "\n     * The small icon representing this notification in the status bar and content view.\n     *\n     * @return the small icon representing this notification.\n     *\n     * @see Builder#getSmallIcon()\n     * @see Builder#setSmallIcon(Icon)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSmallIcon(Icon icon)",
    "returnType" : "void",
    "comment" : "\n     * Used when notifying to clean up legacy small icons.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Icon getLargeIcon()",
    "returnType" : "Icon",
    "comment" : "\n     * The large icon shown in this notification's content view.\n     * @see Builder#getLargeIcon()\n     * @see Builder#setLargeIcon(Icon)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isGroupSummary()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isGroupChild()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean suppressAlertingDueToGrouping()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Pair<RemoteInput, Action> findRemoteInputActionPair(boolean requiresFreeform)",
    "returnType" : "Pair<RemoteInput, Action>",
    "comment" : "\n     * Finds and returns a remote input and its corresponding action.\n     *\n     * @param requiresFreeform requires the remoteinput to allow freeform or not.\n     * @return the result pair, {@code null} if no result is found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Notification.Action> getContextualActions()",
    "returnType" : "List<Notification.Action>",
    "comment" : "\n     * Returns the actions that are contextual (that is, suggested because of the content of the\n     * notification) out of the actions in this notification.\n     ",
    "links" : [ ]
  }, {
    "name" : " void reduceImageSizes(Context context)",
    "returnType" : "void",
    "comment" : "\n     * Reduces the image sizes to conform to a maximum allowed size. This also processes all custom\n     * remote views.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void reduceImageSizesForRemoteView(RemoteViews remoteView, Context context, boolean isLowRam)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isForegroundService()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether this notification is a foreground service notification\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMediaSession()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether this notification has a media session attached\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<? extends Notification.Style> getNotificationStyle()",
    "returnType" : "Class<? extends Notification.Style>",
    "comment" : "\n     * @return the style class of this notification\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isColorized()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this notification is colorized.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasColorizedPermission()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether an app can colorize due to the android.permission.USE_COLORIZED_NOTIFICATIONS\n     * permission. The permission is checked when a notification is enqueued.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isColorizedMedia()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this notification is colorized and it is a media notification\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMediaNotification()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this is a media notification\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBubbleNotification()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this notification is showing as a bubble\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasLargeIcon()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean showsTime()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the notification will show the time; false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean showsChronometer()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the notification will show a chronometer; false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Class<? extends Style> getNotificationStyleClass(String templateClass)",
    "returnType" : "Class<? extends Style>",
    "comment" : "\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "private static T[] getParcelableArrayFromBundle(Bundle bundle, String key, Class<T> itemClass)",
    "returnType" : "T[]",
    "comment" : "\n     * Get an array of Parcelable objects from a parcelable array bundle field.\n     * Update the bundle to have a typed array so fetches in the future don't need\n     * to do an array copy.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "INTENT_CATEGORY_NOTIFICATION_PREFERENCES", "EXTRA_CHANNEL_ID", "EXTRA_CHANNEL_GROUP_ID", "EXTRA_NOTIFICATION_TAG", "EXTRA_NOTIFICATION_ID", "DEFAULT_ALL", "DEFAULT_SOUND", "DEFAULT_VIBRATE", "DEFAULT_LIGHTS", "MAX_CHARSEQUENCE_LENGTH", "MAX_REPLY_HISTORY", "MAX_ACTION_BUTTONS", "EXTRA_REMOTE_INPUT_DRAFT", "when", "creationTime", "icon", "iconLevel", "number", "contentIntent", "deleteIntent", "fullScreenIntent", "tickerText", "tickerView", "contentView", "bigContentView", "headsUpContentView", "mUsesStandardHeader", "STANDARD_LAYOUTS", "largeIcon", "sound", "STREAM_DEFAULT", "audioStreamType", "AUDIO_ATTRIBUTES_DEFAULT", "audioAttributes", "vibrate", "ledARGB", "ledOnMS", "ledOffMS", "defaults", "FLAG_SHOW_LIGHTS", "FLAG_ONGOING_EVENT", "FLAG_INSISTENT", "FLAG_ONLY_ALERT_ONCE", "FLAG_AUTO_CANCEL", "FLAG_NO_CLEAR", "FLAG_FOREGROUND_SERVICE", "FLAG_HIGH_PRIORITY", "FLAG_LOCAL_ONLY", "FLAG_GROUP_SUMMARY", "FLAG_AUTOGROUP_SUMMARY", "FLAG_CAN_COLORIZE", "FLAG_BUBBLE", "flags", "PRIORITY_DEFAULT", "PRIORITY_LOW", "PRIORITY_MIN", "PRIORITY_HIGH", "PRIORITY_MAX", "priority", "color", "COLOR_DEFAULT", "COLOR_INVALID", "visibility", "VISIBILITY_PUBLIC", "VISIBILITY_PRIVATE", "VISIBILITY_SECRET", "CATEGORY_CALL", "CATEGORY_NAVIGATION", "CATEGORY_MESSAGE", "CATEGORY_EMAIL", "CATEGORY_EVENT", "CATEGORY_PROMO", "CATEGORY_ALARM", "CATEGORY_PROGRESS", "CATEGORY_SOCIAL", "CATEGORY_ERROR", "CATEGORY_TRANSPORT", "CATEGORY_SYSTEM", "CATEGORY_SERVICE", "CATEGORY_RECOMMENDATION", "CATEGORY_STATUS", "CATEGORY_REMINDER", "CATEGORY_CAR_EMERGENCY", "CATEGORY_CAR_WARNING", "CATEGORY_CAR_INFORMATION", "category", "mGroupKey", "mSortKey", "extras", "allPendingIntents", "mWhitelistToken", "processWhitelistToken", "EXTRA_TITLE", "EXTRA_TITLE_BIG", "EXTRA_TEXT", "EXTRA_SUB_TEXT", "EXTRA_REMOTE_INPUT_HISTORY", "EXTRA_REMOTE_INPUT_HISTORY_ITEMS", "EXTRA_SHOW_REMOTE_INPUT_SPINNER", "EXTRA_HIDE_SMART_REPLIES", "EXTRA_INFO_TEXT", "EXTRA_SUMMARY_TEXT", "EXTRA_BIG_TEXT", "EXTRA_SMALL_ICON", "EXTRA_LARGE_ICON", "EXTRA_LARGE_ICON_BIG", "EXTRA_PROGRESS", "EXTRA_PROGRESS_MAX", "EXTRA_PROGRESS_INDETERMINATE", "EXTRA_SHOW_CHRONOMETER", "EXTRA_CHRONOMETER_COUNT_DOWN", "EXTRA_SHOW_WHEN", "EXTRA_PICTURE", "EXTRA_TEXT_LINES", "EXTRA_TEMPLATE", "EXTRA_PEOPLE", "EXTRA_PEOPLE_LIST", "EXTRA_ALLOW_DURING_SETUP", "EXTRA_BACKGROUND_IMAGE_URI", "EXTRA_MEDIA_SESSION", "EXTRA_COMPACT_ACTIONS", "EXTRA_SELF_DISPLAY_NAME", "EXTRA_MESSAGING_PERSON", "EXTRA_CONVERSATION_TITLE", "EXTRA_CONVERSATION_ICON", "EXTRA_CONVERSATION_UNREAD_MESSAGE_COUNT", "EXTRA_MESSAGES", "EXTRA_HISTORIC_MESSAGES", "EXTRA_IS_GROUP_CONVERSATION", "EXTRA_COLORIZED", "EXTRA_BUILDER_APPLICATION_INFO", "EXTRA_CONTAINS_CUSTOM_VIEW", "EXTRA_REDUCED_IMAGES", "EXTRA_AUDIO_CONTENTS_URI", "EXTRA_SUBSTITUTE_APP_NAME", "EXTRA_FOREGROUND_APPS", "mSmallIcon", "mLargeIcon", "mChannelId", "mTimeout", "mShortcutId", "mLocusId", "mSettingsText", "mBubbleMetadata", "GROUP_ALERT_ALL", "GROUP_ALERT_SUMMARY", "GROUP_ALERT_CHILDREN", "mGroupAlertBehavior", "BADGE_ICON_NONE", "BADGE_ICON_SMALL", "BADGE_ICON_LARGE", "mBadgeIcon", "mAllowSystemGeneratedContextualActions", "actions", "publicVersion", "CREATOR" ],
  "methodNames" : [ "public String getGroup()", "public String getSortKey()", "private void readFromParcelImpl(Parcel parcel)", "public Notification clone()", "public void cloneInto(Notification that, boolean heavy)", "public void visitUris(@NonNull Consumer<Uri> visitor)", "public final void lightenPayload()", "public static CharSequence safeCharSequence(CharSequence cs)", "private static CharSequence removeTextSizeSpans(CharSequence charSequence)", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "private void writeToParcelImpl(Parcel parcel, int flags)", "public static boolean areActionsVisiblyDifferent(Notification first, Notification second)", "public static boolean areStyledNotificationsVisiblyDifferent(Builder first, Builder second)", "public static boolean areRemoteViewsChanged(Builder first, Builder second)", "private static boolean areRemoteViewsChanged(RemoteViews first, RemoteViews second)", "private void fixDuplicateExtras()", "private void fixDuplicateExtra(@Nullable Parcelable original, @NonNull String extraName)", "public void setLatestEventInfo(Context context, CharSequence contentTitle, CharSequence contentText, PendingIntent contentIntent)", "public static void addFieldsFromContext(Context context, Notification notification)", "public static void addFieldsFromContext(ApplicationInfo ai, Notification notification)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public String toString()", "public static String visibilityToString(int vis)", "public static String priorityToString(@Priority int pri)", "public boolean hasCompletedProgress()", "public String getChannel()", "public String getChannelId()", "public long getTimeout()", "public long getTimeoutAfter()", "public int getBadgeIconType()", "public String getShortcutId()", "public LocusId getLocusId()", "public CharSequence getSettingsText()", "public int getGroupAlertBehavior()", "public BubbleMetadata getBubbleMetadata()", "public void setBubbleMetadata(BubbleMetadata data)", "public boolean getAllowSystemGeneratedContextualActions()", "public Icon getSmallIcon()", "public void setSmallIcon(Icon icon)", "public Icon getLargeIcon()", "public boolean isGroupSummary()", "public boolean isGroupChild()", "public boolean suppressAlertingDueToGrouping()", "public Pair<RemoteInput, Action> findRemoteInputActionPair(boolean requiresFreeform)", "public List<Notification.Action> getContextualActions()", " void reduceImageSizes(Context context)", "private void reduceImageSizesForRemoteView(RemoteViews remoteView, Context context, boolean isLowRam)", "public boolean isForegroundService()", "public boolean hasMediaSession()", "public Class<? extends Notification.Style> getNotificationStyle()", "public boolean isColorized()", "private boolean hasColorizedPermission()", "public boolean isColorizedMedia()", "public boolean isMediaNotification()", "public boolean isBubbleNotification()", "private boolean hasLargeIcon()", "public boolean showsTime()", "public boolean showsChronometer()", "public static Class<? extends Style> getNotificationStyleClass(String templateClass)", "private static T[] getParcelableArrayFromBundle(Bundle bundle, String key, Class<T> itemClass)" ]
}