{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/euicc/EuiccRulesAuthTable.java",
  "packageName" : "android.telephony.euicc",
  "className" : "EuiccRulesAuthTable",
  "comment" : "\n * This represents the RAT (Rules Authorisation Table) stored on eUICC.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "POLICY_RULE_FLAG_CONSENT_REQUIRED",
    "type" : "int",
    "comment" : " User consent is required to install the profile. ",
    "links" : [ ]
  }, {
    "name" : "mPolicyRules",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierIds",
    "type" : "CarrierIdentifier[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPolicyRuleFlags",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<EuiccRulesAuthTable>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean match(String mccRule, String mcc)",
    "returnType" : "boolean",
    "comment" : "\n     * @param mccRule A 2-character or 3-character string which can be either MCC or MNC. The\n     *     character 'E' is used as a wild char to match any digit.\n     * @param mcc A 2-character or 3-character string which can be either MCC or MNC.\n     * @return Whether the {@code mccRule} matches {@code mcc}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int findIndex(@EuiccProfileInfo.PolicyRule int policy, CarrierIdentifier carrierId)",
    "returnType" : "int",
    "comment" : "\n     * Finds the index of the first authorisation rule matching the given policy and carrier id. If\n     * the returned index is not negative, the carrier is allowed to apply this policy to its\n     * profile.\n     *\n     * @param policy The policy rule.\n     * @param carrierId The carrier id.\n     * @return The index of authorization rule. If no rule is found, -1 will be returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPolicyRuleFlag(int index, @PolicyRuleFlag int flag)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the entry in the table has the given policy rule flag.\n     *\n     * @param index The index of the entry.\n     * @param flag The policy rule flag to be tested.\n     * @throws ArrayIndexOutOfBoundsException If the {@code index} is negative or larger than the\n     *     size of this table.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean match(String mccRule, String mcc)", "public int findIndex(@EuiccProfileInfo.PolicyRule int policy, CarrierIdentifier carrierId)", "public boolean hasPolicyRuleFlag(int index, @PolicyRuleFlag int flag)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(@Nullable Object obj)" ],
  "variableNames" : [ "POLICY_RULE_FLAG_CONSENT_REQUIRED", "mPolicyRules", "mCarrierIds", "mPolicyRuleFlags", "CREATOR" ]
}