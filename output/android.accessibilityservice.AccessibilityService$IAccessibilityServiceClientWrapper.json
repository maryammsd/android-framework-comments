{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/AccessibilityService.java",
  "packageName" : "android.accessibilityservice",
  "className" : "IAccessibilityServiceClientWrapper",
  "comment" : "\n     * Implements the internal {@link IAccessibilityServiceClient} interface to convert\n     * incoming calls to it back to calls on an {@link AccessibilityService}.\n     *\n     * @hide\n     ",
  "links" : [ "android.accessibilityservice.AccessibilityService", "IAccessibilityServiceClient" ],
  "variables" : [ {
    "name" : "mCallback",
    "type" : "Callbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancellationGroup",
    "type" : "CancellationGroup",
    "comment" : "\n         * This is not {@code null} only between {@link #bindInput()} and {@link #unbindInput()} so\n         * that {@link RemoteAccessibilityInputConnection} can query if {@link #unbindInput()} has\n         * already been called or not, mainly to avoid unnecessary blocking operations.\n         *\n         * <p>This field must be set and cleared only from the binder thread(s), where the system\n         * guarantees that {@link #bindInput()},\n         * {@link #startInput(IRemoteAccessibilityInputConnection, EditorInfo, boolean)},\n         * and {@link #unbindInput()} are called with the same order as the original calls\n         * in {@link com.android.server.inputmethod.InputMethodManagerService}.\n         * See {@link IBinder#FLAG_ONEWAY} for detailed semantics.</p>\n         ",
    "links" : [ "android.os.IBinder#FLAG_ONEWAY", "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection", "#bindInput()", "#startInput(IRemoteAccessibilityInputConnection", "#unbindInput()", "com.android.server.inputmethod.InputMethodManagerService" ]
  } ],
  "methods" : [ {
    "name" : "public void init(IAccessibilityServiceConnection connection, int connectionId, IBinder windowToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInterrupt()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onAccessibilityEvent(AccessibilityEvent event, boolean serviceWantsEvent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onGesture(AccessibilityGestureEvent gestureInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearAccessibilityCache()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onKeyEvent(KeyEvent event, int sequence)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onMagnificationChanged(int displayId, @NonNull Region region, MagnificationConfig config)",
    "returnType" : "void",
    "comment" : " Magnification changed callbacks for different displays ",
    "links" : [ ]
  }, {
    "name" : "public void onSoftKeyboardShowModeChanged(int showMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onPerformGestureResult(int sequence, boolean successfully)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onFingerprintCapturingGesturesChanged(boolean active)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onFingerprintGesture(int gesture)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onAccessibilityButtonClicked(int displayId)",
    "returnType" : "void",
    "comment" : " Accessibility button clicked callbacks for different displays ",
    "links" : [ ]
  }, {
    "name" : "public void onAccessibilityButtonAvailabilityChanged(boolean available)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSystemActionsChanged()",
    "returnType" : "void",
    "comment" : " This is called when the system action list is changed. ",
    "links" : [ ]
  }, {
    "name" : "public void createImeSession(IAccessibilityInputMethodSessionCallback callback)",
    "returnType" : "void",
    "comment" : " This is called when an app requests ime sessions or when the service is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public void setImeSessionEnabled(IAccessibilityInputMethodSession session, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * This is called when InputMethodManagerService requests to set the session enabled or\n         * disabled\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bindInput()",
    "returnType" : "void",
    "comment" : " This is called when an app binds input or when the service is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public void unbindInput()",
    "returnType" : "void",
    "comment" : " This is called when an app unbinds input or when the service is disabled. ",
    "links" : [ ]
  }, {
    "name" : "public void startInput(IRemoteAccessibilityInputConnection connection, EditorInfo editorInfo, boolean restarting)",
    "returnType" : "void",
    "comment" : " This is called when an app starts input or when the service is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public void onMotionEvent(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTouchStateChanged(int displayId, int state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void init(IAccessibilityServiceConnection connection, int connectionId, IBinder windowToken)", "public void onInterrupt()", "public void onAccessibilityEvent(AccessibilityEvent event, boolean serviceWantsEvent)", "public void onGesture(AccessibilityGestureEvent gestureInfo)", "public void clearAccessibilityCache()", "public void onKeyEvent(KeyEvent event, int sequence)", "public void onMagnificationChanged(int displayId, @NonNull Region region, MagnificationConfig config)", "public void onSoftKeyboardShowModeChanged(int showMode)", "public void onPerformGestureResult(int sequence, boolean successfully)", "public void onFingerprintCapturingGesturesChanged(boolean active)", "public void onFingerprintGesture(int gesture)", "public void onAccessibilityButtonClicked(int displayId)", "public void onAccessibilityButtonAvailabilityChanged(boolean available)", "public void onSystemActionsChanged()", "public void createImeSession(IAccessibilityInputMethodSessionCallback callback)", "public void setImeSessionEnabled(IAccessibilityInputMethodSession session, boolean enabled)", "public void bindInput()", "public void unbindInput()", "public void startInput(IRemoteAccessibilityInputConnection connection, EditorInfo editorInfo, boolean restarting)", "public void onMotionEvent(MotionEvent event)", "public void onTouchStateChanged(int displayId, int state)" ],
  "variableNames" : [ "mCallback", "mContext", "mExecutor", "mConnectionId", "mCancellationGroup" ]
}