{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/AppOpsManager.java",
  "packageName" : "android.app",
  "className" : "HistoricalOps",
  "comment" : "\n     * This class represents historical app op state of all UIDs for a given time interval.\n     *\n     * @hide\n     ",
  "variables" : [ {
    "name" : "mBeginTimeMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndTimeMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHistoricalUidOps",
    "type" : "SparseArray<HistoricalUidOps>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<HistoricalOps>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public HistoricalOps spliceFromBeginning(double splicePoint)",
    "returnType" : "HistoricalOps",
    "comment" : "\n         * Splice a piece from the beginning of these ops.\n         *\n         * @param splicePoint The fraction of the data to be spliced off.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public HistoricalOps spliceFromEnd(double fractionToRemove)",
    "returnType" : "HistoricalOps",
    "comment" : "\n         * Splice a piece from the end of these ops.\n         *\n         * @param fractionToRemove The fraction of the data to be spliced off.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private HistoricalOps splice(double fractionToRemove, boolean beginning)",
    "returnType" : "HistoricalOps",
    "comment" : "\n         * Splice a piece from the beginning or end of these ops.\n         *\n         * @param fractionToRemove The fraction of the data to be spliced off.\n         * @param beginning Whether to splice off the beginning or the end.\n         *\n         * @return The spliced off part.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void merge(@NonNull HistoricalOps other)",
    "returnType" : "void",
    "comment" : "\n         * Merge the passed ops into the current ones. The time interval is a\n         * union of the current and passed in one and the passed in data is\n         * folded into the data of this instance.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void filter(int uid, @Nullable String packageName, @Nullable String attributionTag, @Nullable String[] opNames, @HistoricalOpsRequestFilter int filter, long beginTimeMillis, long endTimeMillis)",
    "returnType" : "void",
    "comment" : "\n         * AppPermissionUsage the ops to leave only the data we filter for.\n         *\n         * @param uid Uid to filter for.\n         * @param packageName Package to filter for.\n         * @param attributionTag attribution tag to filter for\n         * @param opNames Ops to filter for.\n         * @param filter Which parameters to filter on.\n         * @param beginTimeMillis The begin time to filter for or {@link Long#MIN_VALUE} for all.\n         * @param endTimeMillis The end time to filter for or {@link Long#MAX_VALUE} for all.\n         *\n         * @hide\n         ",
    "links" : [ "Long#MIN_VALUE", "Long#MAX_VALUE" ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getDurationMillis()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void increaseAccessCount(int opCode, int uid, @NonNull String packageName, @Nullable String attributionTag, @UidState int uidState, @OpFlags int flags, long increment)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void increaseRejectCount(int opCode, int uid, @NonNull String packageName, @Nullable String attributionTag, @UidState int uidState, @OpFlags int flags, long increment)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void increaseAccessDuration(int opCode, int uid, @NonNull String packageName, @Nullable String attributionTag, @UidState int uidState, @OpFlags int flags, long increment)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void offsetBeginAndEndTime(long offsetMillis)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setBeginAndEndTime(long beginTimeMillis, long endTimeMillis)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setBeginTime(long beginTimeMillis)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setEndTime(long endTimeMillis)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getBeginTimeMillis()",
    "returnType" : "long",
    "comment" : "\n         * @return The beginning of the interval in milliseconds since\n         *    epoch start (January 1, 1970 00:00:00.000 GMT - Gregorian).\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getEndTimeMillis()",
    "returnType" : "long",
    "comment" : "\n         * @return The end of the interval in milliseconds since\n         *    epoch start (January 1, 1970 00:00:00.000 GMT - Gregorian).\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getUidCount()",
    "returnType" : "int",
    "comment" : "\n         * Gets number of UIDs with historical ops.\n         *\n         * @return The number of UIDs with historical ops.\n         *\n         * @see #getUidOpsAt(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public HistoricalUidOps getUidOpsAt(@IntRange(from = 0) int index)",
    "returnType" : "HistoricalUidOps",
    "comment" : "\n         * Gets the historical UID ops at a given index.\n         *\n         * @param index The index.\n         *\n         * @return The historical UID ops at the given index.\n         *\n         * @see #getUidCount()\n         ",
    "links" : [ ]
  }, {
    "name" : "public HistoricalUidOps getUidOps(int uid)",
    "returnType" : "HistoricalUidOps",
    "comment" : "\n         * Gets the historical UID ops for a given UID.\n         *\n         * @param uid The UID.\n         *\n         * @return The historical ops for the UID.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void clearHistory(int uid, @NonNull String packageName)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void accept(@NonNull HistoricalOpsVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n         * Accepts a visitor to traverse the ops tree.\n         *\n         * @param visitor The visitor.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private HistoricalUidOps getOrCreateHistoricalUidOps(int uid)",
    "returnType" : "HistoricalUidOps",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static double round(double value)",
    "returnType" : "double",
    "comment" : "\n         * @return Rounded value up at the 0.5 boundary.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mBeginTimeMillis", "mEndTimeMillis", "mHistoricalUidOps", "CREATOR" ],
  "methodNames" : [ "public HistoricalOps spliceFromBeginning(double splicePoint)", "public HistoricalOps spliceFromEnd(double fractionToRemove)", "private HistoricalOps splice(double fractionToRemove, boolean beginning)", "public void merge(@NonNull HistoricalOps other)", "public void filter(int uid, @Nullable String packageName, @Nullable String attributionTag, @Nullable String[] opNames, @HistoricalOpsRequestFilter int filter, long beginTimeMillis, long endTimeMillis)", "public boolean isEmpty()", "public long getDurationMillis()", "public void increaseAccessCount(int opCode, int uid, @NonNull String packageName, @Nullable String attributionTag, @UidState int uidState, @OpFlags int flags, long increment)", "public void increaseRejectCount(int opCode, int uid, @NonNull String packageName, @Nullable String attributionTag, @UidState int uidState, @OpFlags int flags, long increment)", "public void increaseAccessDuration(int opCode, int uid, @NonNull String packageName, @Nullable String attributionTag, @UidState int uidState, @OpFlags int flags, long increment)", "public void offsetBeginAndEndTime(long offsetMillis)", "public void setBeginAndEndTime(long beginTimeMillis, long endTimeMillis)", "public void setBeginTime(long beginTimeMillis)", "public void setEndTime(long endTimeMillis)", "public long getBeginTimeMillis()", "public long getEndTimeMillis()", "public int getUidCount()", "public HistoricalUidOps getUidOpsAt(@IntRange(from = 0) int index)", "public HistoricalUidOps getUidOps(int uid)", "public void clearHistory(int uid, @NonNull String packageName)", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public void accept(@NonNull HistoricalOpsVisitor visitor)", "private HistoricalUidOps getOrCreateHistoricalUidOps(int uid)", "public static double round(double value)", "public boolean equals(@Nullable Object obj)", "public int hashCode()", "public String toString()" ]
}