{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/IContentProvider.java",
  "packageName" : "android.content",
  "className" : "IContentProvider",
  "comment" : "\n * The ipc interface to talk to a content provider.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "descriptor",
    "type" : "String",
    "comment" : " IPC constants ",
    "links" : [ ]
  }, {
    "name" : "QUERY_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GET_TYPE_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INSERT_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELETE_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPDATE_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BULK_INSERT_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OPEN_FILE_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OPEN_ASSET_FILE_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APPLY_BATCH_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CALL_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GET_STREAM_TYPES_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OPEN_TYPED_ASSET_FILE_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATE_CANCELATION_SIGNAL_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANONICALIZE_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNCANONICALIZE_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REFRESH_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHECK_URI_PERMISSION_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GET_TYPE_ASYNC_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANONICALIZE_ASYNC_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNCANONICALIZE_ASYNC_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GET_TYPE_ANONYMOUS_ASYNC_TRANSACTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " Cursor query(@NonNull AttributionSource attributionSource, Uri url, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getType(@NonNull AttributionSource attributionSource, Uri url) throws RemoteException",
    "returnType" : "String",
    "comment" : "\n     * getType function with AttributionSource\n     ",
    "links" : [ ]
  }, {
    "name" : " void getTypeAsync(@NonNull AttributionSource attributionSource, Uri url, RemoteCallback callback) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * one way getType function with AttributionSource\n     ",
    "links" : [ ]
  }, {
    "name" : " String getType(Uri url) throws RemoteException",
    "returnType" : "String",
    "comment" : "\n     * @deprecated -- use getType with AttributionSource\n     ",
    "links" : [ ]
  }, {
    "name" : " void getTypeAsync(Uri uri, RemoteCallback callback) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * A oneway version of getType. The functionality is exactly the same, except that the\n     * call returns immediately, and the resulting type is returned when available via\n     * a binder callback.\n     *\n     * @deprecated -- use getTypeAsync with AttributionSource\n     ",
    "links" : [ ]
  }, {
    "name" : " void getTypeAnonymousAsync(Uri uri, RemoteCallback callback) throws RemoteException",
    "returnType" : "void",
    "comment" : " oneway version of getTypeAnonymous",
    "links" : [ ]
  }, {
    "name" : " Uri insert(String callingPkg, Uri url, ContentValues initialValues) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Uri insert(@NonNull AttributionSource attributionSource, Uri url, ContentValues initialValues, Bundle extras) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int bulkInsert(String callingPkg, Uri url, ContentValues[] initialValues) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int bulkInsert(@NonNull AttributionSource attributionSource, Uri url, ContentValues[] initialValues) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int delete(String callingPkg, Uri url, String selection, String[] selectionArgs) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int delete(@NonNull AttributionSource attributionSource, Uri url, Bundle extras) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int update(String callingPkg, Uri url, ContentValues values, String selection, String[] selectionArgs) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int update(@NonNull AttributionSource attributionSource, Uri url, ContentValues values, Bundle extras) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ParcelFileDescriptor openFile(@NonNull AttributionSource attributionSource, Uri url, String mode, ICancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AssetFileDescriptor openAssetFile(@NonNull AttributionSource attributionSource, Uri url, String mode, ICancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContentProviderResult[] applyBatch(@NonNull AttributionSource attributionSource, String authority, ArrayList<ContentProviderOperation> operations) throws RemoteException, OperationApplicationException",
    "returnType" : "ContentProviderResult[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle call(String callingPkg, String method, @Nullable String arg, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Bundle call(@NonNull AttributionSource attributionSource, String authority, String method, @Nullable String arg, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int checkUriPermission(@NonNull AttributionSource attributionSource, Uri uri, int uid, int modeFlags) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ICancellationSignal createCancellationSignal() throws RemoteException",
    "returnType" : "ICancellationSignal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Uri canonicalize(@NonNull AttributionSource attributionSource, Uri uri) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void canonicalizeAsync(@NonNull AttributionSource attributionSource, Uri uri, RemoteCallback callback) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * A oneway version of canonicalize. The functionality is exactly the same, except that the\n     * call returns immediately, and the resulting type is returned when available via\n     * a binder callback.\n     ",
    "links" : [ ]
  }, {
    "name" : " Uri uncanonicalize(@NonNull AttributionSource attributionSource, Uri uri) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void uncanonicalizeAsync(@NonNull AttributionSource attributionSource, Uri uri, RemoteCallback callback) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * A oneway version of uncanonicalize. The functionality is exactly the same, except that the\n     * call returns immediately, and the resulting type is returned when available via\n     * a binder callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean refresh(@NonNull AttributionSource attributionSource, Uri url, @Nullable Bundle extras, ICancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String[] getStreamTypes(Uri url, String mimeTypeFilter) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "\n     * @deprecated -- use getStreamTypes with AttributionSource\n     ",
    "links" : [ ]
  }, {
    "name" : " String[] getStreamTypes(AttributionSource attributionSource, Uri url, String mimeTypeFilter) throws RemoteException",
    "returnType" : "String[]",
    "comment" : " Data interchange.",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openTypedAssetFile(@NonNull AttributionSource attributionSource, Uri url, String mimeType, Bundle opts, ICancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " Cursor query(@NonNull AttributionSource attributionSource, Uri url, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal) throws RemoteException", " String getType(@NonNull AttributionSource attributionSource, Uri url) throws RemoteException", " void getTypeAsync(@NonNull AttributionSource attributionSource, Uri url, RemoteCallback callback) throws RemoteException", " String getType(Uri url) throws RemoteException", " void getTypeAsync(Uri uri, RemoteCallback callback) throws RemoteException", " void getTypeAnonymousAsync(Uri uri, RemoteCallback callback) throws RemoteException", " Uri insert(String callingPkg, Uri url, ContentValues initialValues) throws RemoteException", " Uri insert(@NonNull AttributionSource attributionSource, Uri url, ContentValues initialValues, Bundle extras) throws RemoteException", " int bulkInsert(String callingPkg, Uri url, ContentValues[] initialValues) throws RemoteException", " int bulkInsert(@NonNull AttributionSource attributionSource, Uri url, ContentValues[] initialValues) throws RemoteException", " int delete(String callingPkg, Uri url, String selection, String[] selectionArgs) throws RemoteException", " int delete(@NonNull AttributionSource attributionSource, Uri url, Bundle extras) throws RemoteException", " int update(String callingPkg, Uri url, ContentValues values, String selection, String[] selectionArgs) throws RemoteException", " int update(@NonNull AttributionSource attributionSource, Uri url, ContentValues values, Bundle extras) throws RemoteException", " ParcelFileDescriptor openFile(@NonNull AttributionSource attributionSource, Uri url, String mode, ICancellationSignal signal) throws RemoteException, FileNotFoundException", " AssetFileDescriptor openAssetFile(@NonNull AttributionSource attributionSource, Uri url, String mode, ICancellationSignal signal) throws RemoteException, FileNotFoundException", " ContentProviderResult[] applyBatch(@NonNull AttributionSource attributionSource, String authority, ArrayList<ContentProviderOperation> operations) throws RemoteException, OperationApplicationException", "public Bundle call(String callingPkg, String method, @Nullable String arg, @Nullable Bundle extras) throws RemoteException", " Bundle call(@NonNull AttributionSource attributionSource, String authority, String method, @Nullable String arg, @Nullable Bundle extras) throws RemoteException", " int checkUriPermission(@NonNull AttributionSource attributionSource, Uri uri, int uid, int modeFlags) throws RemoteException", " ICancellationSignal createCancellationSignal() throws RemoteException", " Uri canonicalize(@NonNull AttributionSource attributionSource, Uri uri) throws RemoteException", " void canonicalizeAsync(@NonNull AttributionSource attributionSource, Uri uri, RemoteCallback callback) throws RemoteException", " Uri uncanonicalize(@NonNull AttributionSource attributionSource, Uri uri) throws RemoteException", " void uncanonicalizeAsync(@NonNull AttributionSource attributionSource, Uri uri, RemoteCallback callback) throws RemoteException", "public boolean refresh(@NonNull AttributionSource attributionSource, Uri url, @Nullable Bundle extras, ICancellationSignal cancellationSignal) throws RemoteException", " String[] getStreamTypes(Uri url, String mimeTypeFilter) throws RemoteException", " String[] getStreamTypes(AttributionSource attributionSource, Uri url, String mimeTypeFilter) throws RemoteException", "public AssetFileDescriptor openTypedAssetFile(@NonNull AttributionSource attributionSource, Uri url, String mimeType, Bundle opts, ICancellationSignal signal) throws RemoteException, FileNotFoundException" ],
  "variableNames" : [ "descriptor", "QUERY_TRANSACTION", "GET_TYPE_TRANSACTION", "INSERT_TRANSACTION", "DELETE_TRANSACTION", "UPDATE_TRANSACTION", "BULK_INSERT_TRANSACTION", "OPEN_FILE_TRANSACTION", "OPEN_ASSET_FILE_TRANSACTION", "APPLY_BATCH_TRANSACTION", "CALL_TRANSACTION", "GET_STREAM_TYPES_TRANSACTION", "OPEN_TYPED_ASSET_FILE_TRANSACTION", "CREATE_CANCELATION_SIGNAL_TRANSACTION", "CANONICALIZE_TRANSACTION", "UNCANONICALIZE_TRANSACTION", "REFRESH_TRANSACTION", "CHECK_URI_PERMISSION_TRANSACTION", "GET_TYPE_ASYNC_TRANSACTION", "CANONICALIZE_ASYNC_TRANSACTION", "UNCANONICALIZE_ASYNC_TRANSACTION", "GET_TYPE_ANONYMOUS_ASYNC_TRANSACTION" ]
}