{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/quickaccesswallet/QuickAccessWalletClient.java",
  "packageName" : "android.service.quickaccesswallet",
  "className" : "QuickAccessWalletClient",
  "comment" : "\n * Facilitates accessing cards from the {@link QuickAccessWalletService}.\n *\n * @hide\n ",
  "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static QuickAccessWalletClient create(@NonNull Context context)",
    "returnType" : "QuickAccessWalletClient",
    "comment" : "\n     * Create a client for accessing wallet cards from the {@link QuickAccessWalletService}. If the\n     * service is unavailable, {@link #isWalletServiceAvailable()} will return false.\n     ",
    "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService", "#isWalletServiceAvailable()" ]
  }, {
    "name" : " static QuickAccessWalletClient create(@NonNull Context context, @Nullable Executor bgExecutor)",
    "returnType" : "QuickAccessWalletClient",
    "comment" : "\n     * Create a client for accessing wallet cards from the {@link QuickAccessWalletService}. If the\n     * service is unavailable, {@link #isWalletServiceAvailable()} will return false.\n     * @param context Context.\n     * @param bgExecutor A background {@link Executor} for service registration.\n     * @hide\n     ",
    "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService", "#isWalletServiceAvailable()", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : " boolean isWalletServiceAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the {@link QuickAccessWalletService} is available. This means that the\n     * default NFC payment application has an exported service that can provide cards to the Quick\n     * Access Wallet. However, it does not mean that (1) the call will necessarily be successful,\n     * nor does it mean that cards may be displayed at this time. Addition checks are required:\n     * <ul>\n     *     <li>If {@link #isWalletFeatureAvailable()} is false, cards should not be displayed\n     *     <li>If the device is locked and {@link #isWalletFeatureAvailableWhenDeviceLocked} is\n     *     false, cards should not be displayed while the device remains locked. (A message\n     *     prompting the user to unlock to view cards may be appropriate).</li>\n     * </ul>\n     ",
    "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService", "#isWalletFeatureAvailableWhenDeviceLocked", "#isWalletFeatureAvailable()" ]
  }, {
    "name" : " boolean isWalletFeatureAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Wallet cards should not be displayed if:\n     * <ul>\n     *     <li>The wallet service is unavailable</li>\n     *     <li>The device is not provisioned, ie user setup is incomplete</li>\n     *     <li>If the wallet feature has been disabled by the user</li>\n     *     <li>If the phone has been put into lockdown mode</li>\n     * </ul>\n     * <p>\n     * Quick Access Wallet implementers should call this method before calling\n     * {@link #getWalletCards} to ensure that cards may be displayed.\n     ",
    "links" : [ "#getWalletCards" ]
  }, {
    "name" : " boolean isWalletFeatureAvailableWhenDeviceLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Wallet cards may not be displayed on the lock screen if the user has opted to hide\n     * notifications or sensitive content on the lock screen.\n     * <ul>\n     *     <li>The device is not provisioned, ie user setup is incomplete</li>\n     *     <li>If the wallet feature has been disabled by the user</li>\n     *     <li>If the phone has been put into lockdown mode</li>\n     * </ul>\n     *\n     * <p>\n     * Quick Access Wallet implementers should call this method before calling\n     * {@link #getWalletCards} if the device is currently locked.\n     *\n     * @return true if cards may be displayed on the lock screen.\n     ",
    "links" : [ "#getWalletCards" ]
  }, {
    "name" : " void getWalletCards(@NonNull GetWalletCardsRequest request, @NonNull OnWalletCardsRetrievedCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Get wallet cards from the {@link QuickAccessWalletService}.\n     ",
    "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService" ]
  }, {
    "name" : " void getWalletCards(@NonNull @CallbackExecutor Executor executor, @NonNull GetWalletCardsRequest request, @NonNull OnWalletCardsRetrievedCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Get wallet cards from the {@link QuickAccessWalletService}.\n     ",
    "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService" ]
  }, {
    "name" : " void selectWalletCard(@NonNull SelectWalletCardRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Notify the {@link QuickAccessWalletService} service that a wallet card was selected.\n     ",
    "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService" ]
  }, {
    "name" : " void notifyWalletDismissed()",
    "returnType" : "void",
    "comment" : "\n     * Notify the {@link QuickAccessWalletService} service that the Wallet was dismissed.\n     ",
    "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService" ]
  }, {
    "name" : " void addWalletServiceEventListener(@NonNull WalletServiceEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register an event listener.\n     ",
    "links" : [ ]
  }, {
    "name" : " void addWalletServiceEventListener(@NonNull @CallbackExecutor Executor executor, @NonNull WalletServiceEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register an event listener.\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeWalletServiceEventListener(@NonNull WalletServiceEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregister an event listener\n     ",
    "links" : [ ]
  }, {
    "name" : " void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Unregister all event listeners and disconnect from the service.\n     ",
    "links" : [ ]
  }, {
    "name" : " void getWalletPendingIntent(@NonNull @CallbackExecutor Executor executor, @NonNull WalletPendingIntentCallback walletPendingIntentCallback)",
    "returnType" : "void",
    "comment" : "\n     * The QuickAccessWalletService may provide a {@link PendingIntent} to start the activity that\n     * hosts the Wallet view. This is typically the home screen of the Wallet application. If this\n     * method returns null, the value returned by getWalletIntent() will be used instead.\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : " Intent createWalletIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * The manifest entry for the QuickAccessWalletService may also publish information about the\n     * activity that hosts the Wallet view. This is typically the home screen of the Wallet\n     * application.\n     ",
    "links" : [ ]
  }, {
    "name" : " Intent createWalletSettingsIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * The manifest entry for the {@link QuickAccessWalletService} may publish the activity that\n     * hosts the settings\n     ",
    "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService" ]
  }, {
    "name" : " Drawable getLogo()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the logo associated with the {@link QuickAccessWalletService}. This is specified by\n     * {@code android:logo} manifest entry. If the logo is not specified, the app icon will be\n     * returned instead ({@code android:icon}).\n     *\n     * @hide\n     ",
    "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService" ]
  }, {
    "name" : " Drawable getTileIcon()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the tile icon associated with the {@link QuickAccessWalletService}.\n     *\n     * @hide\n     ",
    "links" : [ "android.service.quickaccesswallet.QuickAccessWalletService" ]
  }, {
    "name" : " CharSequence getServiceLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the service label specified by {@code android:label} in the service manifest entry.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " CharSequence getShortcutShortLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the text specified by the {@link android:shortcutShortLabel} in the service manifest\n     * entry. If the shortcutShortLabel isn't specified, the service label ({@code android:label})\n     * will be returned instead.\n     *\n     * @hide\n     ",
    "links" : [ "android" ]
  }, {
    "name" : " CharSequence getShortcutLongLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the text specified by the {@link android:shortcutLongLabel} in the service manifest\n     * entry. If the shortcutShortLabel isn't specified, the service label ({@code android:label})\n     * will be returned instead.\n     *\n     * @hide\n     ",
    "links" : [ "android" ]
  } ],
  "methodNames" : [ " static QuickAccessWalletClient create(@NonNull Context context)", " static QuickAccessWalletClient create(@NonNull Context context, @Nullable Executor bgExecutor)", " boolean isWalletServiceAvailable()", " boolean isWalletFeatureAvailable()", " boolean isWalletFeatureAvailableWhenDeviceLocked()", " void getWalletCards(@NonNull GetWalletCardsRequest request, @NonNull OnWalletCardsRetrievedCallback callback)", " void getWalletCards(@NonNull @CallbackExecutor Executor executor, @NonNull GetWalletCardsRequest request, @NonNull OnWalletCardsRetrievedCallback callback)", " void selectWalletCard(@NonNull SelectWalletCardRequest request)", " void notifyWalletDismissed()", " void addWalletServiceEventListener(@NonNull WalletServiceEventListener listener)", " void addWalletServiceEventListener(@NonNull @CallbackExecutor Executor executor, @NonNull WalletServiceEventListener listener)", " void removeWalletServiceEventListener(@NonNull WalletServiceEventListener listener)", " void disconnect()", " void getWalletPendingIntent(@NonNull @CallbackExecutor Executor executor, @NonNull WalletPendingIntentCallback walletPendingIntentCallback)", " Intent createWalletIntent()", " Intent createWalletSettingsIntent()", " Drawable getLogo()", " Drawable getTileIcon()", " CharSequence getServiceLabel()", " CharSequence getShortcutShortLabel()", " CharSequence getShortcutLongLabel()" ],
  "variableNames" : [ ]
}