{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/servertransaction/ClientTransaction.java",
  "packageName" : "android.app.servertransaction",
  "className" : "ClientTransaction",
  "comment" : "\n * A container that holds a sequence of messages, which may be sent to a client.\n * This includes a list of callbacks and a final lifecycle state.\n *\n * @see com.android.server.wm.ClientLifecycleManager\n * @see ClientTransactionItem\n * @see ActivityLifecycleItem\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mTransactionItems",
    "type" : "List<ClientTransactionItem>",
    "comment" : "\n     * List of transaction items that should be executed in order. Including both\n     * {@link ActivityLifecycleItem} and other {@link ClientTransactionItem}.\n     ",
    "links" : [ "android.app.servertransaction.ClientTransactionItem", "android.app.servertransaction.ActivityLifecycleItem" ]
  }, {
    "name" : "mActivityCallbacks",
    "type" : "List<ClientTransactionItem>",
    "comment" : " @deprecated use {@link #getTransactionItems} instead. ",
    "links" : [ "#getTransactionItems" ]
  }, {
    "name" : "mLifecycleStateRequest",
    "type" : "ActivityLifecycleItem",
    "comment" : " TODO(b/324203798): cleanup after remove UnsupportedAppUsage",
    "links" : [ ]
  }, {
    "name" : "mActivityToken",
    "type" : "IBinder",
    "comment" : " TODO(b/324203798): cleanup after remove UnsupportedAppUsage",
    "links" : [ ]
  }, {
    "name" : "mClient",
    "type" : "IApplicationThread",
    "comment" : " Target client. ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ClientTransaction>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IApplicationThread getClient()",
    "returnType" : "IApplicationThread",
    "comment" : " Get the target client of the transaction. ",
    "links" : [ ]
  }, {
    "name" : "public void addTransactionItem(@NonNull ClientTransactionItem item)",
    "returnType" : "void",
    "comment" : "\n     * Adds a message to the end of the sequence of transaction items.\n     * @param item A single message that can contain a client activity/window request/callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ClientTransactionItem> getTransactionItems()",
    "returnType" : "List<ClientTransactionItem>",
    "comment" : "\n     * Gets the list of client window requests/callbacks.\n     * TODO(b/260873529): must be non null after remove the deprecated methods.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addCallback(@NonNull ClientTransactionItem activityCallback)",
    "returnType" : "void",
    "comment" : " TODO(b/324203798): cleanup after remove UnsupportedAppUsage",
    "links" : [ ]
  }, {
    "name" : "public List<ClientTransactionItem> getCallbacks()",
    "returnType" : "List<ClientTransactionItem>",
    "comment" : " @deprecated use {@link #getTransactionItems()} instead. ",
    "links" : [ "#getTransactionItems()" ]
  }, {
    "name" : "public IBinder getActivityToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * A transaction can contain {@link ClientTransactionItem} of different activities,\n     * this must not be used. For any unsupported app usages, please be aware that this is set to\n     * the activity of the first item in {@link #getTransactionItems()}.\n     *\n     * @deprecated use {@link ClientTransactionItem#getActivityToken()} instead.\n     ",
    "links" : [ "#getTransactionItems()", "android.app.servertransaction.ClientTransactionItem", "android.app.servertransaction.ClientTransactionItem#getActivityToken()" ]
  }, {
    "name" : "public ActivityLifecycleItem getLifecycleStateRequest()",
    "returnType" : "ActivityLifecycleItem",
    "comment" : " @deprecated use {@link #getTransactionItems()} instead. ",
    "links" : [ "#getTransactionItems()" ]
  }, {
    "name" : "private void setLifecycleStateRequest(@NonNull ActivityLifecycleItem stateRequest)",
    "returnType" : "void",
    "comment" : " TODO(b/324203798): cleanup after remove UnsupportedAppUsage",
    "links" : [ ]
  }, {
    "name" : "private void setActivityTokenIfNotSet(@Nullable ClientTransactionItem item)",
    "returnType" : "void",
    "comment" : " TODO(b/324203798): cleanup after remove UnsupportedAppUsage",
    "links" : [ ]
  }, {
    "name" : "public void preExecute(@NonNull ClientTransactionHandler clientTransactionHandler)",
    "returnType" : "void",
    "comment" : "\n     * Do what needs to be done while the transaction is being scheduled on the client side.\n     * @param clientTransactionHandler Handler on the client side that will executed all operations\n     *                                 requested by transaction items.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void schedule() throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Schedule the transaction after it was initialized. It will be send to client and all its\n     * individual parts will be applied in the following sequence:\n     * 1. The client calls {@link #preExecute(ClientTransactionHandler)}, which triggers all work\n     *    that needs to be done before actually scheduling the transaction for callbacks and\n     *    lifecycle state request.\n     * 2. The transaction message is scheduled.\n     * 3. The client calls {@link TransactionExecutor#execute(ClientTransaction)}, which executes\n     *    all callbacks and necessary lifecycle transitions.\n     ",
    "links" : [ "#preExecute(ClientTransactionHandler)", "android.app.servertransaction.TransactionExecutor#execute(ClientTransaction)" ]
  }, {
    "name" : "public static ClientTransaction obtain(@Nullable IApplicationThread client)",
    "returnType" : "ClientTransaction",
    "comment" : " Obtains an instance initialized with provided params. ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Write to Parcel. ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dump(@NonNull String prefix, @NonNull PrintWriter pw, @NonNull ClientTransactionHandler transactionHandler)",
    "returnType" : "void",
    "comment" : " Dump transaction items callback items and final lifecycle state request. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public IApplicationThread getClient()", "public void addTransactionItem(@NonNull ClientTransactionItem item)", "public List<ClientTransactionItem> getTransactionItems()", "private void addCallback(@NonNull ClientTransactionItem activityCallback)", "public List<ClientTransactionItem> getCallbacks()", "public IBinder getActivityToken()", "public ActivityLifecycleItem getLifecycleStateRequest()", "private void setLifecycleStateRequest(@NonNull ActivityLifecycleItem stateRequest)", "private void setActivityTokenIfNotSet(@Nullable ClientTransactionItem item)", "public void preExecute(@NonNull ClientTransactionHandler clientTransactionHandler)", "public void schedule() throws RemoteException", "public static ClientTransaction obtain(@Nullable IApplicationThread client)", "public void recycle()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public String toString()", " void dump(@NonNull String prefix, @NonNull PrintWriter pw, @NonNull ClientTransactionHandler transactionHandler)" ],
  "variableNames" : [ "mTransactionItems", "mActivityCallbacks", "mLifecycleStateRequest", "mActivityToken", "mClient", "CREATOR" ]
}