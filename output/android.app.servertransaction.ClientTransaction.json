{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/servertransaction/ClientTransaction.java",
  "packageName" : "android.app.servertransaction",
  "className" : "ClientTransaction",
  "comment" : "\n * A container that holds a sequence of messages, which may be sent to a client.\n * This includes a list of callbacks and a final lifecycle state.\n *\n * @see com.android.server.am.ClientLifecycleManager\n * @see ClientTransactionItem\n * @see ActivityLifecycleItem\n * @hide\n ",
  "variables" : [ {
    "name" : "mActivityCallbacks",
    "type" : "List<ClientTransactionItem>",
    "comment" : " A list of individual callbacks to a client. ",
    "links" : [ ]
  }, {
    "name" : "mLifecycleStateRequest",
    "type" : "ActivityLifecycleItem",
    "comment" : "\n     * Final lifecycle state in which the client activity should be after the transaction is\n     * executed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mClient",
    "type" : "IApplicationThread",
    "comment" : " Target client. ",
    "links" : [ ]
  }, {
    "name" : "mActivityToken",
    "type" : "IBinder",
    "comment" : " Target client activity. Might be null if the entire transaction is targeting an app. ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ClientTransaction>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IApplicationThread getClient()",
    "returnType" : "IApplicationThread",
    "comment" : " Get the target client of the transaction. ",
    "links" : [ ]
  }, {
    "name" : "public void addCallback(ClientTransactionItem activityCallback)",
    "returnType" : "void",
    "comment" : "\n     * Add a message to the end of the sequence of callbacks.\n     * @param activityCallback A single message that can contain a lifecycle request/callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ClientTransactionItem> getCallbacks()",
    "returnType" : "List<ClientTransactionItem>",
    "comment" : " Get the list of callbacks. ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getActivityToken()",
    "returnType" : "IBinder",
    "comment" : " Get the target activity. ",
    "links" : [ ]
  }, {
    "name" : "public ActivityLifecycleItem getLifecycleStateRequest()",
    "returnType" : "ActivityLifecycleItem",
    "comment" : " Get the target state lifecycle request. ",
    "links" : [ ]
  }, {
    "name" : "public void setLifecycleStateRequest(ActivityLifecycleItem stateRequest)",
    "returnType" : "void",
    "comment" : "\n     * Set the lifecycle state in which the client should be after executing the transaction.\n     * @param stateRequest A lifecycle request initialized with right parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void preExecute(android.app.ClientTransactionHandler clientTransactionHandler)",
    "returnType" : "void",
    "comment" : "\n     * Do what needs to be done while the transaction is being scheduled on the client side.\n     * @param clientTransactionHandler Handler on the client side that will executed all operations\n     *                                 requested by transaction items.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void schedule() throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Schedule the transaction after it was initialized. It will be send to client and all its\n     * individual parts will be applied in the following sequence:\n     * 1. The client calls {@link #preExecute(ClientTransactionHandler)}, which triggers all work\n     *    that needs to be done before actually scheduling the transaction for callbacks and\n     *    lifecycle state request.\n     * 2. The transaction message is scheduled.\n     * 3. The client calls {@link TransactionExecutor#execute(ClientTransaction)}, which executes\n     *    all callbacks and necessary lifecycle transitions.\n     ",
    "links" : [ "#preExecute(ClientTransactionHandler)", "android.app.servertransaction.TransactionExecutor#execute(ClientTransaction)" ]
  }, {
    "name" : "public static ClientTransaction obtain(IApplicationThread client, IBinder activityToken)",
    "returnType" : "ClientTransaction",
    "comment" : " Obtain an instance initialized with provided params. ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Write to Parcel. ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : " Dump transaction items callback items and final lifecycle state request. ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mActivityCallbacks", "mLifecycleStateRequest", "mClient", "mActivityToken", "CREATOR" ],
  "methodNames" : [ "public IApplicationThread getClient()", "public void addCallback(ClientTransactionItem activityCallback)", "public List<ClientTransactionItem> getCallbacks()", "public IBinder getActivityToken()", "public ActivityLifecycleItem getLifecycleStateRequest()", "public void setLifecycleStateRequest(ActivityLifecycleItem stateRequest)", "public void preExecute(android.app.ClientTransactionHandler clientTransactionHandler)", "public void schedule() throws RemoteException", "public static ClientTransaction obtain(IApplicationThread client, IBinder activityToken)", "public void recycle()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public boolean equals(Object o)", "public int hashCode()", "public void dump(String prefix, PrintWriter pw)" ]
}