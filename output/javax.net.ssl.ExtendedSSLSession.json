{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/ExtendedSSLSession.java",
  "packageName" : "javax.net.ssl",
  "className" : "ExtendedSSLSession",
  "comment" : "\n * Extends the <code>SSLSession</code> interface to support additional\n * session attributes.\n *\n * @since 1.7\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract String[] getLocalSupportedSignatureAlgorithms()",
    "returnType" : "String[]",
    "comment" : "\n     * Obtains an array of supported signature algorithms that the local side\n     * is willing to use.\n     * <p>\n     * Note: this method is used to indicate to the peer which signature\n     * algorithms may be used for digital signatures in TLS 1.2. It is\n     * not meaningful for TLS versions prior to 1.2.\n     * <p>\n     * The signature algorithm name must be a standard Java Security\n     * name (such as \"SHA1withRSA\", \"SHA256withECDSA\", and so on).\n     * See Appendix A in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA\">\n     * Java Cryptography Architecture API Specification &amp; Reference </a>\n     * for information about standard algorithm names.\n     * <p>\n     * Note: the local supported signature algorithms should conform to\n     * the algorithm constraints specified by\n     * {@link SSLParameters#getAlgorithmConstraints getAlgorithmConstraints()}\n     * method in <code>SSLParameters</code>.\n     *\n     * @return An array of supported signature algorithms, in descending\n     *     order of preference.  The return value is an empty array if\n     *     no signature algorithm is supported.\n     *\n     * @see SSLParameters#getAlgorithmConstraints\n     ",
    "links" : [ "javax.net.ssl.SSLParameters#getAlgorithmConstraints" ]
  }, {
    "name" : "public abstract String[] getPeerSupportedSignatureAlgorithms()",
    "returnType" : "String[]",
    "comment" : "\n     * Obtains an array of supported signature algorithms that the peer is\n     * able to use.\n     * <p>\n     * Note: this method is used to indicate to the local side which signature\n     * algorithms may be used for digital signatures in TLS 1.2. It is\n     * not meaningful for TLS versions prior to 1.2.\n     * <p>\n     * The signature algorithm name must be a standard Java Security\n     * name (such as \"SHA1withRSA\", \"SHA256withECDSA\", and so on).\n     * See Appendix A in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA\">\n     * Java Cryptography Architecture API Specification &amp; Reference </a>\n     * for information about standard algorithm names.\n     *\n     * @return An array of supported signature algorithms, in descending\n     *     order of preference.  The return value is an empty array if\n     *     the peer has not sent the supported signature algorithms.\n     *\n     * @see X509KeyManager\n     * @see X509ExtendedKeyManager\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<SNIServerName> getRequestedServerNames()",
    "returnType" : "List<SNIServerName>",
    "comment" : "\n     * Obtains a {@link List} containing all {@link SNIServerName}s\n     * of the requested Server Name Indication (SNI) extension.\n     * <P>\n     * In server mode, unless the return {@link List} is empty,\n     * the server should use the requested server names to guide its\n     * selection of an appropriate authentication certificate, and/or\n     * other aspects of security policy.\n     * <P>\n     * In client mode, unless the return {@link List} is empty,\n     * the client should use the requested server names to guide its\n     * endpoint identification of the peer's identity, and/or\n     * other aspects of security policy.\n     *\n     * @return a non-null immutable list of {@link SNIServerName}s of the\n     *         requested server name indications. The returned list may be\n     *         empty if no server name indications were requested.\n     * @throws UnsupportedOperationException if the underlying provider\n     *         does not implement the operation\n     *\n     * @see SNIServerName\n     * @see X509ExtendedTrustManager\n     * @see X509ExtendedKeyManager\n     *\n     * @since 1.8\n     ",
    "links" : [ "java.util.List", "javax.net.ssl.SNIServerName" ]
  } ],
  "methodNames" : [ "public abstract String[] getLocalSupportedSignatureAlgorithms()", "public abstract String[] getPeerSupportedSignatureAlgorithms()", "public List<SNIServerName> getRequestedServerNames()" ],
  "variableNames" : [ ]
}