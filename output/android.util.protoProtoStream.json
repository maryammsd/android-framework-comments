{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/proto/ProtoStream.java",
  "packageName" : "android.util.proto",
  "className" : "ProtoStream",
  "comment" : "\n * Base utility class for protobuf streams.\n *\n * Contains a set of constants and methods used in generated code for\n * {@link ProtoOutputStream}.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "FIELD_ID_SHIFT",
    "type" : "int",
    "comment" : "\n     * Number of bits to shift the field number to form a tag.\n     *\n     * <pre>\n     * // Reading a field number from a tag.\n     * int fieldNumber = tag &gt;&gt;&gt; FIELD_ID_SHIFT;\n     *\n     * // Building a tag from a field number and a wire type.\n     * int tag = (fieldNumber &lt;&lt; FIELD_ID_SHIFT) | wireType;\n     * </pre>\n     *\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "WIRE_TYPE_MASK",
    "type" : "int",
    "comment" : "\n     * Mask to select the wire type from a tag.\n     *\n     * <pre>\n     * // Reading a wire type from a tag.\n     * int wireType = tag &amp; WIRE_TYPE_MASK;\n     *\n     * // Building a tag from a field number and a wire type.\n     * int tag = (fieldNumber &lt;&lt; FIELD_ID_SHIFT) | wireType;\n     * </pre>\n     *\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "FIELD_ID_MASK",
    "type" : "int",
    "comment" : "\n     * Mask to select the field id from a tag.\n     * @hide (not used by anything, and not actually useful, because you also want\n     * to shift when you mask the field id).\n     ",
    "links" : [ ]
  }, {
    "name" : "WIRE_TYPE_VARINT",
    "type" : "int",
    "comment" : "\n     * Varint wire type code.\n     *\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "WIRE_TYPE_FIXED64",
    "type" : "int",
    "comment" : "\n     * Fixed64 wire type code.\n     *\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "WIRE_TYPE_LENGTH_DELIMITED",
    "type" : "int",
    "comment" : "\n     * Length delimited wire type code.\n     *\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "WIRE_TYPE_START_GROUP",
    "type" : "int",
    "comment" : "\n     * Start group wire type code.\n     *\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "WIRE_TYPE_END_GROUP",
    "type" : "int",
    "comment" : "\n     * End group wire type code.\n     *\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "WIRE_TYPE_FIXED32",
    "type" : "int",
    "comment" : "\n     * Fixed32 wire type code.\n     *\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "FIELD_TYPE_SHIFT",
    "type" : "int",
    "comment" : "\n     * Position of the field type in a (long) fieldId.\n     ",
    "links" : [ ]
  }, {
    "name" : "FIELD_TYPE_MASK",
    "type" : "long",
    "comment" : "\n     * Mask for the field types stored in a fieldId.  Leaves a whole\n     * byte for future expansion, even though there are currently only 17 types.\n     ",
    "links" : [ ]
  }, {
    "name" : "FIELD_TYPE_UNKNOWN",
    "type" : "long",
    "comment" : "\n     * Not a real field type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FIELD_TYPE_DOUBLE",
    "type" : "long",
    "comment" : "\n     * Field type code for double fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, double)\n     * ProtoOutputStream.write(long, double)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_FLOAT",
    "type" : "long",
    "comment" : "\n     * Field type code for float fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, float)\n     * ProtoOutputStream.write(long, float)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_INT64",
    "type" : "long",
    "comment" : "\n     * Field type code for int64 fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, long)\n     * ProtoOutputStream.write(long, long)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_UINT64",
    "type" : "long",
    "comment" : "\n     * Field type code for uint64 fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, long)\n     * ProtoOutputStream.write(long, long)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_INT32",
    "type" : "long",
    "comment" : "\n     * Field type code for int32 fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, int)\n     * ProtoOutputStream.write(long, int)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_FIXED64",
    "type" : "long",
    "comment" : "\n     * Field type code for fixed64 fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, long)\n     * ProtoOutputStream.write(long, long)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_FIXED32",
    "type" : "long",
    "comment" : "\n     * Field type code for fixed32 fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, int)\n     * ProtoOutputStream.write(long, int)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_BOOL",
    "type" : "long",
    "comment" : "\n     * Field type code for bool fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, boolean)\n     * ProtoOutputStream.write(long, boolean)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_STRING",
    "type" : "long",
    "comment" : "\n     * Field type code for string fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, String)\n     * ProtoOutputStream.write(long, String)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_MESSAGE",
    "type" : "long",
    "comment" : "\n     * Field type code for message fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#start(long)\n     * ProtoOutputStream.start(long)} method.\n     ",
    "links" : [ "ProtoOutputStream#start" ]
  }, {
    "name" : "FIELD_TYPE_BYTES",
    "type" : "long",
    "comment" : "\n     * Field type code for bytes fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, byte[])\n     * ProtoOutputStream.write(long, byte[])} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_UINT32",
    "type" : "long",
    "comment" : "\n     * Field type code for uint32 fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, int)\n     * ProtoOutputStream.write(long, int)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_ENUM",
    "type" : "long",
    "comment" : "\n     * Field type code for enum fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, int)\n     * ProtoOutputStream.write(long, int)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_SFIXED32",
    "type" : "long",
    "comment" : "\n     * Field type code for sfixed32 fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, int)\n     * ProtoOutputStream.write(long, int)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_SFIXED64",
    "type" : "long",
    "comment" : "\n     * Field type code for sfixed64 fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, long)\n     * ProtoOutputStream.write(long, long)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_SINT32",
    "type" : "long",
    "comment" : "\n     * Field type code for sint32 fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, int)\n     * ProtoOutputStream.write(long, int)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_SINT64",
    "type" : "long",
    "comment" : "\n     * Field type code for sint64 fields. Used to build constants in generated\n     * code for use with the {@link ProtoOutputStream#write(long, long)\n     * ProtoOutputStream.write(long, long)} method.\n     ",
    "links" : [ "ProtoOutputStream#write" ]
  }, {
    "name" : "FIELD_TYPE_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIELD_COUNT_SHIFT",
    "type" : "int",
    "comment" : "\n     * Bit offset for building a field id to be used with a\n     * <code>{@link ProtoOutputStream}.write(...)</code>.\n     *\n     * @see #FIELD_COUNT_MASK\n     * @see #FIELD_COUNT_UNKNOWN\n     * @see #FIELD_COUNT_SINGLE\n     * @see #FIELD_COUNT_REPEATED\n     * @see #FIELD_COUNT_PACKED\n     ",
    "links" : [ "ProtoOutputStream" ]
  }, {
    "name" : "FIELD_COUNT_MASK",
    "type" : "long",
    "comment" : "\n     * Bit mask for selecting the field count when reading a field id that\n     * is used with a <code>{@link ProtoOutputStream}.write(...)</code> method.\n     *\n     * @see #FIELD_COUNT_SHIFT\n     * @see #FIELD_COUNT_MASK\n     * @see #FIELD_COUNT_UNKNOWN\n     * @see #FIELD_COUNT_SINGLE\n     * @see #FIELD_COUNT_REPEATED\n     * @see #FIELD_COUNT_PACKED\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ "ProtoOutputStream" ]
  }, {
    "name" : "FIELD_COUNT_UNKNOWN",
    "type" : "long",
    "comment" : "\n     * Unknown field count, encoded into a field id used with a\n     * <code>{@link ProtoOutputStream}.write(...)</code> method.\n     *\n     * @see #FIELD_COUNT_SHIFT\n     * @see #FIELD_COUNT_MASK\n     * @see #FIELD_COUNT_SINGLE\n     * @see #FIELD_COUNT_REPEATED\n     * @see #FIELD_COUNT_PACKED\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ "ProtoOutputStream" ]
  }, {
    "name" : "FIELD_COUNT_SINGLE",
    "type" : "long",
    "comment" : "\n     * Single field count, encoded into a field id used with a\n     * <code>{@link ProtoOutputStream}.write(...)</code> method.\n     *\n     * @see #FIELD_COUNT_SHIFT\n     * @see #FIELD_COUNT_MASK\n     * @see #FIELD_COUNT_UNKNOWN\n     * @see #FIELD_COUNT_REPEATED\n     * @see #FIELD_COUNT_PACKED\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ "ProtoOutputStream" ]
  }, {
    "name" : "FIELD_COUNT_REPEATED",
    "type" : "long",
    "comment" : "\n     * Repeated field count, encoded into a field id used with a\n     * <code>{@link ProtoOutputStream}.write(...)</code> method.\n     *\n     * @see #FIELD_COUNT_SHIFT\n     * @see #FIELD_COUNT_MASK\n     * @see #FIELD_COUNT_UNKNOWN\n     * @see #FIELD_COUNT_SINGLE\n     * @see #FIELD_COUNT_PACKED\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ "ProtoOutputStream" ]
  }, {
    "name" : "FIELD_COUNT_PACKED",
    "type" : "long",
    "comment" : "\n     * Repeated packed field count, encoded into a field id used with a\n     * <code>{@link ProtoOutputStream}.write(...)</code> method.\n     *\n     * @see #FIELD_COUNT_SHIFT\n     * @see #FIELD_COUNT_MASK\n     * @see #FIELD_COUNT_UNKNOWN\n     * @see #FIELD_COUNT_SINGLE\n     * @see #FIELD_COUNT_REPEATED\n     * @see <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\">Protobuf\n     * Encoding</a>\n     ",
    "links" : [ "ProtoOutputStream" ]
  } ],
  "methods" : [ {
    "name" : "public static String getFieldTypeString(@FieldType long fieldType)",
    "returnType" : "String",
    "comment" : "\n     * Get the developer-usable name of a field type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getFieldCountString(long fieldCount)",
    "returnType" : "String",
    "comment" : "\n     * Get the developer-usable name of a field count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getWireTypeString(@WireType int wireType)",
    "returnType" : "String",
    "comment" : "\n     * Get the developer-usable name of a wire type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getFieldIdString(long fieldId)",
    "returnType" : "String",
    "comment" : "\n     * Get a debug string for a fieldId.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long makeFieldId(int id, long fieldFlags)",
    "returnType" : "long",
    "comment" : "\n     * Combine a fieldId (the field keys in the proto file) and the field flags.\n     * Mostly useful for testing because the generated code contains the fieldId\n     * constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long makeToken(int tagSize, boolean repeated, int depth, int objectId, int offset)",
    "returnType" : "long",
    "comment" : "\n     * Make a token.\n     * Bits 61-63 - tag size (So we can go backwards later if the object had not data)\n     *            - 3 bits, max value 7, max value needed 5\n     * Bit  60    - true if the object is repeated (lets us require endObject or endRepeatedObject)\n     * Bits 59-51 - depth (For error checking)\n     *            - 9 bits, max value 512, when checking, value is masked (if we really\n     *              are more than 512 levels deep)\n     * Bits 32-50 - objectId (For error checking)\n     *            - 19 bits, max value 524,288. that's a lot of objects. IDs will wrap\n     *              because of the overflow, and only the tokens are compared.\n     * Bits  0-31 - offset of interest for the object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getTagSizeFromToken(long token)",
    "returnType" : "int",
    "comment" : "\n     * Get the encoded tag size from the token.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getRepeatedFromToken(long token)",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether the token has the repeated bit set to true or false\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getDepthFromToken(long token)",
    "returnType" : "int",
    "comment" : "\n     * Get the nesting depth from the token.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getObjectIdFromToken(long token)",
    "returnType" : "int",
    "comment" : "\n     * Get the object ID from the token.\n     *\n     * <p>The object ID is a serial number for the\n     * startObject calls that have happened on this object.  The values are truncated\n     * to 9 bits, but that is sufficient for error checking.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getOffsetFromToken(long token)",
    "returnType" : "int",
    "comment" : "\n     * Get the location of the offset recorded in the token.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int convertObjectIdToOrdinal(int objectId)",
    "returnType" : "int",
    "comment" : "\n     * Convert the object ID to the ordinal value -- the n-th call to startObject.\n     *\n     * <p>The object IDs start at -1 and count backwards, so that the value is unlikely\n     * to alias with an actual size field that had been written.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String token2String(long token)",
    "returnType" : "String",
    "comment" : "\n     * Return a debugging string of a token.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "FIELD_ID_SHIFT", "WIRE_TYPE_MASK", "FIELD_ID_MASK", "WIRE_TYPE_VARINT", "WIRE_TYPE_FIXED64", "WIRE_TYPE_LENGTH_DELIMITED", "WIRE_TYPE_START_GROUP", "WIRE_TYPE_END_GROUP", "WIRE_TYPE_FIXED32", "FIELD_TYPE_SHIFT", "FIELD_TYPE_MASK", "FIELD_TYPE_UNKNOWN", "FIELD_TYPE_DOUBLE", "FIELD_TYPE_FLOAT", "FIELD_TYPE_INT64", "FIELD_TYPE_UINT64", "FIELD_TYPE_INT32", "FIELD_TYPE_FIXED64", "FIELD_TYPE_FIXED32", "FIELD_TYPE_BOOL", "FIELD_TYPE_STRING", "FIELD_TYPE_MESSAGE", "FIELD_TYPE_BYTES", "FIELD_TYPE_UINT32", "FIELD_TYPE_ENUM", "FIELD_TYPE_SFIXED32", "FIELD_TYPE_SFIXED64", "FIELD_TYPE_SINT32", "FIELD_TYPE_SINT64", "FIELD_TYPE_NAMES", "FIELD_COUNT_SHIFT", "FIELD_COUNT_MASK", "FIELD_COUNT_UNKNOWN", "FIELD_COUNT_SINGLE", "FIELD_COUNT_REPEATED", "FIELD_COUNT_PACKED" ],
  "methodNames" : [ "public static String getFieldTypeString(@FieldType long fieldType)", "public static String getFieldCountString(long fieldCount)", "public static String getWireTypeString(@WireType int wireType)", "public static String getFieldIdString(long fieldId)", "public static long makeFieldId(int id, long fieldFlags)", "public static long makeToken(int tagSize, boolean repeated, int depth, int objectId, int offset)", "public static int getTagSizeFromToken(long token)", "public static boolean getRepeatedFromToken(long token)", "public static int getDepthFromToken(long token)", "public static int getObjectIdFromToken(long token)", "public static int getOffsetFromToken(long token)", "public static int convertObjectIdToOrdinal(int objectId)", "public static String token2String(long token)" ]
}