{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/TimerTask.java",
  "packageName" : "java.util",
  "className" : "TimerTask",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "lock",
    "type" : "Object",
    "comment" : "\n     * This object is used to control access to the TimerTask internals.\n     ",
    "links" : [ ]
  }, {
    "name" : "state",
    "type" : "int",
    "comment" : "\n     * The state of this task, chosen from the constants below.\n     ",
    "links" : [ ]
  }, {
    "name" : "VIRGIN",
    "type" : "int",
    "comment" : "\n     * This task has not yet been scheduled.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHEDULED",
    "type" : "int",
    "comment" : "\n     * This task is scheduled for execution.  If it is a non-repeating task,\n     * it has not yet been executed.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXECUTED",
    "type" : "int",
    "comment" : "\n     * This non-repeating task has already executed (or is currently\n     * executing) and has not been cancelled.\n     ",
    "links" : [ ]
  }, {
    "name" : "CANCELLED",
    "type" : "int",
    "comment" : "\n     * This task has been cancelled (with a call to TimerTask.cancel).\n     ",
    "links" : [ ]
  }, {
    "name" : "nextExecutionTime",
    "type" : "long",
    "comment" : "\n     * Next execution time for this task in the format returned by\n     * System.currentTimeMillis, assuming this task is scheduled for execution.\n     * For repeating tasks, this field is updated prior to each task execution.\n     ",
    "links" : [ ]
  }, {
    "name" : "period",
    "type" : "long",
    "comment" : "\n     * Period in milliseconds for repeating tasks.  A positive value indicates\n     * fixed-rate execution.  A negative value indicates fixed-delay execution.\n     * A value of 0 indicates a non-repeating task.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void run()",
    "returnType" : "void",
    "comment" : "\n     * The action to be performed by this timer task.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean cancel()",
    "returnType" : "boolean",
    "comment" : "\n     * Cancels this timer task.  If the task has been scheduled for one-time\n     * execution and has not yet run, or has not yet been scheduled, it will\n     * never run.  If the task has been scheduled for repeated execution, it\n     * will never run again.  (If the task is running when this call occurs,\n     * the task will run to completion, but will never run again.)\n     *\n     * <p>Note that calling this method from within the {@code run} method of\n     * a repeating timer task absolutely guarantees that the timer task will\n     * not run again.\n     *\n     * <p>This method may be called repeatedly; the second and subsequent\n     * calls have no effect.\n     *\n     * @return true if this task is scheduled for one-time execution and has\n     *         not yet run, or this task is scheduled for repeated execution.\n     *         Returns false if the task was scheduled for one-time execution\n     *         and has already run, or if the task was never scheduled, or if\n     *         the task was already cancelled.  (Loosely speaking, this method\n     *         returns {@code true} if it prevents one or more scheduled\n     *         executions from taking place.)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long scheduledExecutionTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the <i>scheduled</i> execution time of the most recent\n     * <i>actual</i> execution of this task.  (If this method is invoked\n     * while task execution is in progress, the return value is the scheduled\n     * execution time of the ongoing task execution.)\n     *\n     * <p>This method is typically invoked from within a task's run method, to\n     * determine whether the current execution of the task is sufficiently\n     * timely to warrant performing the scheduled activity:\n     * <pre>{@code\n     *   public void run() {\n     *       if (System.currentTimeMillis() - scheduledExecutionTime() >=\n     *           MAX_TARDINESS)\n     *               return;  // Too late; skip this execution.\n     *       // Perform the task\n     *   }\n     * }</pre>\n     * This method is typically <i>not</i> used in conjunction with\n     * <i>fixed-delay execution</i> repeating tasks, as their scheduled\n     * execution times are allowed to drift over time, and so are not terribly\n     * significant.\n     *\n     * @return the time at which the most recent execution of this task was\n     *         scheduled to occur, in the format returned by Date.getTime().\n     *         The return value is undefined if the task has yet to commence\n     *         its first execution.\n     * @see Date#getTime()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void run()", "public boolean cancel()", "public long scheduledExecutionTime()" ],
  "variableNames" : [ "lock", "state", "VIRGIN", "SCHEDULED", "EXECUTED", "CANCELLED", "nextExecutionTime", "period" ]
}