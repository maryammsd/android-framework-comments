{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/se/omapi/Channel.java",
  "packageName" : "android.se.omapi",
  "className" : "Channel",
  "comment" : "\n * Instances of this class represent an ISO/IEC 7816-4 channel opened to a\n * Secure Element. It can be either a logical channel or the basic channel. They\n * can be used to send APDUs to the secure element. Channels are opened by\n * calling the Session.openBasicChannel(byte[]) or\n * Session.openLogicalChannel(byte[]) methods.\n *\n * @see <a href=\"http://globalplatform.org\">GlobalPlatform Open Mobile API</a>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "Session",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannel",
    "type" : "ISecureElementChannel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "SEService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this channel to the Secure Element. If the method is called when\n     * the channel is already closed, this method will be ignored. The close()\n     * method shall wait for completion of any pending transmit(byte[] command)\n     * before closing the channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpen()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if this channel is open.\n     *\n     * @return <code>false</code> if the channel is closed or in case of an error.\n     *         <code>true</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBasicChannel()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns a boolean telling if this channel is the basic channel.\n     *\n     * @return <code>true</code> if this channel is a basic channel. <code>false</code> if\n     *         this channel is a logical channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] transmit(@NonNull byte[] command) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Transmit an APDU command (as per ISO/IEC 7816-4) to the Secure Element. The\n     * underlying layers generate as many TPDUs as necessary to transport this APDU. The\n     * API shall ensure that all available data returned from Secure Element, including\n     * concatenated responses, are retrieved and made available to the calling application. If a\n     * warning status code is received the API wont check for further response data but will\n     * return all data received so far and the warning status code.<br>\n     * The transport part is invisible from the application. The generated response is the\n     * response of the APDU which means that all protocols related responses are handled\n     * inside the API or the underlying implementation.<br>\n     * The transmit method shall support extended length APDU commands independently of\n     * the coding within the ATR.<br>\n     * For status word '61 XX' the API or underlying implementation shall issue a GET\n     * RESPONSE command as specified by ISO 7816-4 standard with LE=XX; for the status\n     * word '6C XX', the API or underlying implementation shall reissue the input command\n     * with LE=XX. For other status words, the API (or underlying implementation) shall return\n     * the complete response including data and status word to the device application. The API\n     * (or underlying implementation) shall not handle internally the received status words. The\n     * channel shall not be closed even if the Secure Element answered with an error code.\n     * The system ensures the synchronization between all the concurrent calls to this method,\n     * and that only one APDU will be sent at a time, irrespective of the number of TPDUs that\n     * might be required to transport it to the SE. The entire APDU communication to this SE is\n     * locked to the APDU.<br>\n     * The channel information in the class byte in the APDU will be ignored. The system will\n     * add any required information to ensure the APDU is transported on this channel.\n     * The only restrictions on the set of commands that can be sent is defined below, the API\n     * implementation shall be able to send all other commands: <br>\n     * <ul>\n     * <li>MANAGE_CHANNEL commands are not allowed.</li>\n     * <li>SELECT by DF Name (p1=04) are not allowed.</li>\n     * <li>CLA bytes with channel numbers are de-masked.</li>\n     * </ul>\n     *\n     * @param command the APDU command to be transmitted, as a byte array.\n     *\n     * @return the response received, as a byte array. The returned byte array contains the data\n     * bytes in the following order:\n     * [&lt;first data byte&gt;, ..., &lt;last data byte&gt;, &lt;sw1&gt;, &lt;sw2&gt;]\n     *\n     * @throws IOException if there is a communication problem to the reader or the Secure Element.\n     * @throws IllegalStateException if the channel is used after being closed.\n     * @throws IllegalArgumentException if the command byte array is less than 4 bytes long.\n     * @throws IllegalArgumentException if Lc byte is inconsistent with length of the byte array.\n     * @throws IllegalArgumentException if CLA byte is invalid according to [2] (0xff).\n     * @throws IllegalArgumentException if INS byte is invalid according to [2] (0x6x or 0x9x).\n     * @throws SecurityException if the command is filtered by the security policy.\n     * @throws NullPointerException if command is NULL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Session getSession()",
    "returnType" : "Session",
    "comment" : "\n     * Get the session that has opened this channel.\n     *\n     * @return the session object this channel is bound to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSelectResponse()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the data as received from the application select command inclusively the status word\n     * received at applet selection.\n     * The returned byte array contains the data bytes in the following order:\n     * [&lt;first data byte&gt;, ..., &lt;last data byte&gt;, &lt;sw1&gt;, &lt;sw2&gt;]\n     * @return The data as returned by the application select command inclusively the status word.\n     * Only the status word if the application select command has no returned data.\n     * Returns null if an application select command has not been performed or the selection\n     * response can not be retrieved by the reader implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean selectNext() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Performs a selection of the next Applet on this channel that matches to the partial AID\n     * specified in the openBasicChannel(byte[] aid) or openLogicalChannel(byte[] aid) method.\n     * This mechanism can be used by a device application to iterate through all Applets\n     * matching to the same partial AID.\n     * If selectNext() returns true a new Applet was successfully selected on this channel.\n     * If no further Applet exists with matches to the partial AID this method returns false\n     * and the already selected Applet stays selected. <br>\n     *\n     * Since the API cannot distinguish between a partial and full AID the API shall rely on the\n     * response of the Secure Element for the return value of this method. <br>\n     * The implementation of the underlying SELECT command within this method shall use\n     * the same values as the corresponding openBasicChannel(byte[] aid) or\n     * openLogicalChannel(byte[] aid) command with the option: <br>\n     * P2='02' (Next occurrence) <br>\n     * The select response stored in the Channel object shall be updated with the APDU\n     * response of the SELECT command.\n\n     * @return <code>true</code> if new Applet was selected on this channel.\n               <code>false</code> he already selected Applet stays selected on this channel.\n     *\n     * @throws IOException if there is a communication problem to the reader or the Secure Element.\n     * @throws IllegalStateException if the channel is used after being closed.\n     * @throws UnsupportedOperationException if this operation is not supported by the card.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mSession", "mChannel", "mService", "mLock" ],
  "methodNames" : [ "public void close()", "public boolean isOpen()", "public boolean isBasicChannel()", "public byte[] transmit(@NonNull byte[] command) throws IOException", "public Session getSession()", "public byte[] getSelectResponse()", "public boolean selectNext() throws IOException" ]
}