{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/impl/CameraDeviceImpl.java",
  "packageName" : "android.hardware.camera2.impl",
  "className" : "CameraDeviceImpl",
  "comment" : "\n * HAL2.1+ implementation of CameraDevice. Use CameraManager#open to instantiate\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REQUEST_ID_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteDevice",
    "type" : "ICameraDeviceUserWrapper",
    "comment" : " TODO: guard every function with if (!mRemoteDevice) check (if it was closed)",
    "links" : [ ]
  }, {
    "name" : "mInterfaceLock",
    "type" : "Object",
    "comment" : " access from this class and Session only!",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "CameraDeviceCallbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceCallback",
    "type" : "StateCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionStateCallback",
    "type" : "StateCallbackKK",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClosing",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInError",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdle",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptureCallbackMap",
    "type" : "SparseArray<CaptureCallbackHolder>",
    "comment" : " map request IDs to callback/request data ",
    "links" : [ ]
  }, {
    "name" : "mRepeatingRequestId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRepeatingRequestTypes",
    "type" : "int[]",
    "comment" : " Latest repeating request list's types",
    "links" : [ ]
  }, {
    "name" : "mConfiguredInput",
    "type" : "SimpleEntry<Integer, InputConfiguration>",
    "comment" : " Map stream IDs to input/output configurations",
    "links" : [ ]
  }, {
    "name" : "mConfiguredOutputs",
    "type" : "SparseArray<OutputConfiguration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOfflineSupport",
    "type" : "HashSet<Integer>",
    "comment" : " Cache all stream IDs capable of supporting offline mode.",
    "links" : [ ]
  }, {
    "name" : "mCameraId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacteristics",
    "type" : "CameraCharacteristics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTotalPartialCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NANO_PER_SECOND",
    "type" : "long",
    "comment" : "ns",
    "links" : [ ]
  }, {
    "name" : "mRequestLastFrameNumbersList",
    "type" : "List<RequestLastFrameNumbersHolder>",
    "comment" : "\n     * A list tracking request and its expected last regular/reprocess/zslStill frame\n     * number. Updated when calling ICameraDeviceUser methods.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFrameNumberTracker",
    "type" : "FrameNumberTracker",
    "comment" : "\n     * An object tracking received frame numbers.\n     * Updated when receiving callbacks from ICameraDeviceCallbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCurrentSession",
    "type" : "CameraCaptureSessionCore",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppTargetSdkVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOfflineSwitchService",
    "type" : "ExecutorService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOfflineSessionImpl",
    "type" : "CameraOfflineSessionImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallOnOpened",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallOnUnconfigured",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallOnActive",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallOnBusy",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallOnClosed",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallOnIdle",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallOnDisconnected",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CameraDeviceCallbacks getCallbacks()",
    "returnType" : "CameraDeviceCallbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRemoteDevice(ICameraDeviceUser remoteDevice) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * Set remote device, which triggers initial onOpened/onUnconfigured callbacks\n     *\n     * <p>This function may post onDisconnected and throw CAMERA_DISCONNECTED if remoteDevice dies\n     * during setup.</p>\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRemoteFailure(final ServiceSpecificException failure)",
    "returnType" : "void",
    "comment" : "\n     * Call to indicate failed connection to a remote camera device.\n     *\n     * <p>This places the camera device in the error state and informs the callback.\n     * Use in place of setRemoteDevice() when startup fails.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void configureOutputs(List<Surface> outputs) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean configureStreamsChecked(InputConfiguration inputConfig, List<OutputConfiguration> outputs, int operatingMode, CaptureRequest sessionParams) throws CameraAccessException",
    "returnType" : "boolean",
    "comment" : "\n     * Attempt to configure the input and outputs; the device goes to idle and then configures the\n     * new input and outputs if possible.\n     *\n     * <p>The configuration may gracefully fail, if input configuration is not supported,\n     * if there are too many outputs, if the formats are not supported, or if the sizes for that\n     * format is not supported. In this case this function will return {@code false} and the\n     * unconfigured callback will be fired.</p>\n     *\n     * <p>If the configuration succeeds (with 1 or more outputs with or without an input),\n     * then the idle callback is fired. Unconfiguring the device always fires the idle callback.</p>\n     *\n     * @param inputConfig input configuration or {@code null} for no input\n     * @param outputs a list of one or more surfaces, or {@code null} to unconfigure\n     * @param operatingMode If the stream configuration is for a normal session,\n     *     a constrained high speed session, or something else.\n     * @param sessionParams Session parameters.\n     * @return whether or not the configuration was successful\n     *\n     * @throws CameraAccessException if there were any unexpected problems during configuration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void createCaptureSession(List<Surface> outputs, CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void createCaptureSessionByOutputConfigurations(List<OutputConfiguration> outputConfigurations, CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void createReprocessableCaptureSession(InputConfiguration inputConfig, List<Surface> outputs, CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void createReprocessableCaptureSessionByConfigurations(InputConfiguration inputConfig, List<OutputConfiguration> outputs, android.hardware.camera2.CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void createConstrainedHighSpeedCaptureSession(List<Surface> outputs, android.hardware.camera2.CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void createCustomCaptureSession(InputConfiguration inputConfig, List<OutputConfiguration> outputs, int operatingMode, android.hardware.camera2.CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void createCaptureSession(SessionConfiguration config) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createCaptureSessionInternal(InputConfiguration inputConfig, List<OutputConfiguration> outputConfigurations, CameraCaptureSession.StateCallback callback, Executor executor, int operatingMode, CaptureRequest sessionParams) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSessionConfigurationSupported(@NonNull SessionConfiguration sessionConfig) throws CameraAccessException, UnsupportedOperationException, IllegalArgumentException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSessionListener(StateCallbackKK sessionCallback)",
    "returnType" : "void",
    "comment" : "\n     * For use by backwards-compatibility code only.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void overrideEnableZsl(CameraMetadataNative request, boolean newValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CaptureRequest.Builder createCaptureRequest(int templateType, Set<String> physicalCameraIdSet) throws CameraAccessException",
    "returnType" : "CaptureRequest.Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CaptureRequest.Builder createCaptureRequest(int templateType) throws CameraAccessException",
    "returnType" : "CaptureRequest.Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CaptureRequest.Builder createReprocessCaptureRequest(TotalCaptureResult inputResult) throws CameraAccessException",
    "returnType" : "CaptureRequest.Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepare(Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepare(int maxCount, Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateOutputConfiguration(OutputConfiguration config) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CameraOfflineSession switchToOffline(@NonNull Collection<Surface> offlineOutputs, @NonNull Executor executor, @NonNull CameraOfflineSession.CameraOfflineSessionCallback listener) throws CameraAccessException",
    "returnType" : "CameraOfflineSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsOfflineProcessing(Surface surface)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void tearDown(Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void finalizeOutputConfigs(List<OutputConfiguration> outputConfigs) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int capture(CaptureRequest request, CaptureCallback callback, Executor executor) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int captureBurst(List<CaptureRequest> requests, CaptureCallback callback, Executor executor) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkEarlyTriggerSequenceCompleteLocked(final int requestId, final long lastFrameNumber, final int[] repeatingRequestTypes)",
    "returnType" : "void",
    "comment" : "\n     * This method checks lastFrameNumber returned from ICameraDeviceUser methods for\n     * starting and stopping repeating request and flushing.\n     *\n     * <p>If lastFrameNumber is NO_FRAMES_CAPTURED, it means that the request was never\n     * sent to HAL. Then onCaptureSequenceAborted is immediately triggered.\n     * If lastFrameNumber is non-negative, then the requestId and lastFrameNumber as the last\n     * regular frame number will be added to the list mRequestLastFrameNumbersList.</p>\n     *\n     * @param requestId the request ID of the current repeating request.\n     * @param lastFrameNumber last frame number returned from binder.\n     * @param repeatingRequestTypes the repeating requests' types.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int[] getRequestTypes(final CaptureRequest[] requestArray)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int submitCaptureRequest(List<CaptureRequest> requestList, CaptureCallback callback, Executor executor, boolean repeating) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingRequest(CaptureRequest request, CaptureCallback callback, Executor executor) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingBurst(List<CaptureRequest> requests, CaptureCallback callback, Executor executor) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopRepeating() throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void waitUntilIdle() throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkInputConfiguration(InputConfiguration inputConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkAndFireSequenceComplete()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeCompletedCallbackHolderLocked(long lastCompletedRegularFrameNumber, long lastCompletedReprocessFrameNumber, long lastCompletedZslStillFrameNumber)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDeviceError(final int errorCode, CaptureResultExtras resultExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleNotifyError(int code)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyError(int code)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onCaptureErrorLocked(int errorCode, CaptureResultExtras resultExtras)",
    "returnType" : "void",
    "comment" : "\n     * Called by onDeviceError for handling single-capture failures.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDeviceIdle()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Executor checkExecutor(Executor executor)",
    "returnType" : "Executor",
    "comment" : "\n     * Default executor management.\n     *\n     * <p>\n     * If executor is null, get the current thread's\n     * Looper to create a Executor with. If no looper exists, throw\n     * {@code IllegalArgumentException}.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Executor checkExecutor(Executor executor, T callback)",
    "returnType" : "Executor",
    "comment" : "\n     * Default executor management.\n     *\n     * <p>If the callback isn't null, check the executor, otherwise pass it through.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Executor checkAndWrapHandler(Handler handler)",
    "returnType" : "Executor",
    "comment" : "\n     * Wrap Handler in Executor.\n     *\n     * <p>\n     * If handler is null, get the current thread's\n     * Looper to create a Executor with. If no looper exists, throw\n     * {@code IllegalArgumentException}.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : " static Handler checkHandler(Handler handler)",
    "returnType" : "Handler",
    "comment" : "\n     * Default handler management.\n     *\n     * <p>\n     * If handler is null, get the current thread's\n     * Looper to create a Handler with. If no looper exists, throw {@code IllegalArgumentException}.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : " static Handler checkHandler(Handler handler, T callback)",
    "returnType" : "Handler",
    "comment" : "\n     * Default handler management, conditional on there being a callback.\n     *\n     * <p>If the callback isn't null, check the handler, otherwise pass it through.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkIfCameraClosedOrInError() throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isClosed()",
    "returnType" : "boolean",
    "comment" : " Whether the camera device has started to close (may not yet have finished) ",
    "links" : [ ]
  }, {
    "name" : "private CameraCharacteristics getCharacteristics()",
    "returnType" : "CameraCharacteristics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void binderDied()",
    "returnType" : "void",
    "comment" : "\n     * Listener for binder death.\n     *\n     * <p> Handle binder death for ICameraDeviceUser. Trigger onError.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCameraAudioRestriction(@CAMERA_AUDIO_RESTRICTION int mode) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCameraAudioRestriction() throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "REQUEST_ID_NONE", "mRemoteDevice", "mInterfaceLock", "mCallbacks", "mDeviceCallback", "mSessionStateCallback", "mDeviceExecutor", "mClosing", "mInError", "mIdle", "mCaptureCallbackMap", "mRepeatingRequestId", "mRepeatingRequestTypes", "mConfiguredInput", "mConfiguredOutputs", "mOfflineSupport", "mCameraId", "mCharacteristics", "mTotalPartialCount", "NANO_PER_SECOND", "mRequestLastFrameNumbersList", "mFrameNumberTracker", "mCurrentSession", "mNextSessionId", "mAppTargetSdkVersion", "mOfflineSwitchService", "mOfflineSessionImpl", "mCallOnOpened", "mCallOnUnconfigured", "mCallOnActive", "mCallOnBusy", "mCallOnClosed", "mCallOnIdle", "mCallOnDisconnected" ],
  "methodNames" : [ "public CameraDeviceCallbacks getCallbacks()", "public void setRemoteDevice(ICameraDeviceUser remoteDevice) throws CameraAccessException", "public void setRemoteFailure(final ServiceSpecificException failure)", "public String getId()", "public void configureOutputs(List<Surface> outputs) throws CameraAccessException", "public boolean configureStreamsChecked(InputConfiguration inputConfig, List<OutputConfiguration> outputs, int operatingMode, CaptureRequest sessionParams) throws CameraAccessException", "public void createCaptureSession(List<Surface> outputs, CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException", "public void createCaptureSessionByOutputConfigurations(List<OutputConfiguration> outputConfigurations, CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException", "public void createReprocessableCaptureSession(InputConfiguration inputConfig, List<Surface> outputs, CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException", "public void createReprocessableCaptureSessionByConfigurations(InputConfiguration inputConfig, List<OutputConfiguration> outputs, android.hardware.camera2.CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException", "public void createConstrainedHighSpeedCaptureSession(List<Surface> outputs, android.hardware.camera2.CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException", "public void createCustomCaptureSession(InputConfiguration inputConfig, List<OutputConfiguration> outputs, int operatingMode, android.hardware.camera2.CameraCaptureSession.StateCallback callback, Handler handler) throws CameraAccessException", "public void createCaptureSession(SessionConfiguration config) throws CameraAccessException", "private void createCaptureSessionInternal(InputConfiguration inputConfig, List<OutputConfiguration> outputConfigurations, CameraCaptureSession.StateCallback callback, Executor executor, int operatingMode, CaptureRequest sessionParams) throws CameraAccessException", "public boolean isSessionConfigurationSupported(@NonNull SessionConfiguration sessionConfig) throws CameraAccessException, UnsupportedOperationException, IllegalArgumentException", "public void setSessionListener(StateCallbackKK sessionCallback)", "private void overrideEnableZsl(CameraMetadataNative request, boolean newValue)", "public CaptureRequest.Builder createCaptureRequest(int templateType, Set<String> physicalCameraIdSet) throws CameraAccessException", "public CaptureRequest.Builder createCaptureRequest(int templateType) throws CameraAccessException", "public CaptureRequest.Builder createReprocessCaptureRequest(TotalCaptureResult inputResult) throws CameraAccessException", "public void prepare(Surface surface) throws CameraAccessException", "public void prepare(int maxCount, Surface surface) throws CameraAccessException", "public void updateOutputConfiguration(OutputConfiguration config) throws CameraAccessException", "public CameraOfflineSession switchToOffline(@NonNull Collection<Surface> offlineOutputs, @NonNull Executor executor, @NonNull CameraOfflineSession.CameraOfflineSessionCallback listener) throws CameraAccessException", "public boolean supportsOfflineProcessing(Surface surface)", "public void tearDown(Surface surface) throws CameraAccessException", "public void finalizeOutputConfigs(List<OutputConfiguration> outputConfigs) throws CameraAccessException", "public int capture(CaptureRequest request, CaptureCallback callback, Executor executor) throws CameraAccessException", "public int captureBurst(List<CaptureRequest> requests, CaptureCallback callback, Executor executor) throws CameraAccessException", "private void checkEarlyTriggerSequenceCompleteLocked(final int requestId, final long lastFrameNumber, final int[] repeatingRequestTypes)", "private int[] getRequestTypes(final CaptureRequest[] requestArray)", "private int submitCaptureRequest(List<CaptureRequest> requestList, CaptureCallback callback, Executor executor, boolean repeating) throws CameraAccessException", "public int setRepeatingRequest(CaptureRequest request, CaptureCallback callback, Executor executor) throws CameraAccessException", "public int setRepeatingBurst(List<CaptureRequest> requests, CaptureCallback callback, Executor executor) throws CameraAccessException", "public void stopRepeating() throws CameraAccessException", "private void waitUntilIdle() throws CameraAccessException", "public void flush() throws CameraAccessException", "public void close()", "protected void finalize() throws Throwable", "private void checkInputConfiguration(InputConfiguration inputConfig)", "private void checkAndFireSequenceComplete()", "private void removeCompletedCallbackHolderLocked(long lastCompletedRegularFrameNumber, long lastCompletedReprocessFrameNumber, long lastCompletedZslStillFrameNumber)", "public void onDeviceError(final int errorCode, CaptureResultExtras resultExtras)", "private void scheduleNotifyError(int code)", "private void notifyError(int code)", "private void onCaptureErrorLocked(int errorCode, CaptureResultExtras resultExtras)", "public void onDeviceIdle()", " static Executor checkExecutor(Executor executor)", "public static Executor checkExecutor(Executor executor, T callback)", "public static Executor checkAndWrapHandler(Handler handler)", " static Handler checkHandler(Handler handler)", " static Handler checkHandler(Handler handler, T callback)", "private void checkIfCameraClosedOrInError() throws CameraAccessException", "private boolean isClosed()", "private CameraCharacteristics getCharacteristics()", "public void binderDied()", "public void setCameraAudioRestriction(@CAMERA_AUDIO_RESTRICTION int mode) throws CameraAccessException", "public int getCameraAudioRestriction() throws CameraAccessException" ]
}