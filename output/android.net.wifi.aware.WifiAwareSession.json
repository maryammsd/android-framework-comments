{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/aware/WifiAwareSession.java",
  "packageName" : "android.net.wifi.aware",
  "className" : "WifiAwareSession",
  "comment" : "\n * This class represents a Wi-Fi Aware session - an attachment to the Wi-Fi Aware service through\n * which the app can execute discovery operations.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : " STOPSHIP if true",
    "links" : [ ]
  }, {
    "name" : "mMgr",
    "type" : "WeakReference<WifiAwareManager>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "Binder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTerminated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Destroy the Wi-Fi Aware service session and, if no other applications are attached to Aware,\n     * also disable Aware. This method destroys all outstanding operations - i.e. all publish and\n     * subscribes are terminated, and any outstanding data-links are shut-down. However, it is\n     * good practice to destroy these discovery sessions and connections explicitly before a\n     * session-wide destroy.\n     * <p>\n     * An application may re-attach after a destroy using\n     * {@link WifiAwareManager#attach(AttachCallback, Handler)} .\n     ",
    "links" : [ "android.net.wifi.aware.WifiAwareManager#attach(AttachCallback" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getClientId()",
    "returnType" : "int",
    "comment" : "\n     * Access the client ID of the Aware session.\n     *\n     * Note: internal visibility for testing.\n     *\n     * @return The internal client ID.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void publish(@NonNull PublishConfig publishConfig, @NonNull DiscoverySessionCallback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Issue a request to the Aware service to create a new Aware publish discovery session, using\n     * the specified {@code publishConfig} configuration. The results of the publish operation\n     * are routed to the callbacks of {@link DiscoverySessionCallback}:\n     * <ul>\n     *     <li>\n     *     {@link DiscoverySessionCallback#onPublishStarted(\n     *PublishDiscoverySession)}\n     *     is called when the publish session is created and provides a handle to the session.\n     *     Further operations on the publish session can be executed on that object.\n     *     <li>{@link DiscoverySessionCallback#onSessionConfigFailed()} is called if the\n     *     publish operation failed.\n     * </ul>\n     * <p>\n     * Other results of the publish session operations will also be routed to callbacks\n     * on the {@code callback} object. The resulting publish session can be modified using\n     * {@link PublishDiscoverySession#updatePublish(PublishConfig)}.\n     * <p> The total count of currently available Wi-Fi Aware publish sessions is limited and is\n     * available via the {@link AwareResources#getAvailablePublishSessionsCount()} method.\n     * <p>\n     *      An application must use the {@link DiscoverySession#close()} to\n     *      terminate the publish discovery session once it isn't needed. This will free\n     *      resources as well terminate any on-air transmissions.\n     * <p>\n     * If targeting {@link android.os.Build.VERSION_CODES#TIRAMISU} or later, the application must\n     * have {@link android.Manifest.permission#NEARBY_WIFI_DEVICES} with\n     * android:usesPermissionFlags=\"neverForLocation\". If the application does not declare\n     * android:usesPermissionFlags=\"neverForLocation\", then it must also have\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION}.\n     *\n     * If targeting an earlier release than {@link android.os.Build.VERSION_CODES#TIRAMISU}, the\n     * application must have {@link android.Manifest.permission#ACCESS_FINE_LOCATION}.\n     *\n     * @param publishConfig The {@link PublishConfig} specifying the\n     *            configuration of the requested publish session.\n     * @param callback A {@link DiscoverySessionCallback} derived object to be used for\n     *                 session event callbacks.\n     * @param handler The Handler on whose thread to execute the callbacks of the {@code\n     * callback} object. If a null is provided then the application's main thread will be used.\n     ",
    "links" : [ "android.net.wifi.aware.PublishDiscoverySession#updatePublish(PublishConfig)", "android.os.Build.VERSION_CODES#TIRAMISU", "android.net.wifi.aware.DiscoverySessionCallback#onPublishStarted(", "android.net.wifi.aware.AwareResources#getAvailablePublishSessionsCount()", "android.Manifest.permission#ACCESS_FINE_LOCATION", "android.net.wifi.aware.DiscoverySessionCallback", "android.net.wifi.aware.PublishConfig", "android.net.wifi.aware.DiscoverySession#close()", "android.Manifest.permission#NEARBY_WIFI_DEVICES", "android.net.wifi.aware.DiscoverySessionCallback#onSessionConfigFailed()" ]
  }, {
    "name" : "public void subscribe(@NonNull SubscribeConfig subscribeConfig, @NonNull DiscoverySessionCallback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Issue a request to the Aware service to create a new Aware subscribe discovery session, using\n     * the specified {@code subscribeConfig} configuration. The results of the subscribe\n     * operation are routed to the callbacks of {@link DiscoverySessionCallback}:\n     * <ul>\n     *     <li>\n     *  {@link DiscoverySessionCallback#onSubscribeStarted(\n     *SubscribeDiscoverySession)}\n     *     is called when the subscribe session is created and provides a handle to the session.\n     *     Further operations on the subscribe session can be executed on that object.\n     *     <li>{@link DiscoverySessionCallback#onSessionConfigFailed()} is called if the\n     *     subscribe operation failed.\n     * </ul>\n     * <p>\n     * Other results of the subscribe session operations will also be routed to callbacks\n     * on the {@code callback} object. The resulting subscribe session can be modified using\n     * {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}.\n     * <p> The total count of currently available Wi-Fi Aware subscribe sessions is limited and is\n     * available via the {@link AwareResources#getAvailableSubscribeSessionsCount()} method.\n     * <p>\n     *      An application must use the {@link DiscoverySession#close()} to\n     *      terminate the subscribe discovery session once it isn't needed. This will free\n     *      resources as well terminate any on-air transmissions.\n     * <p>\n     * If targeting {@link android.os.Build.VERSION_CODES#TIRAMISU} or later, the application must\n     * have {@link android.Manifest.permission#NEARBY_WIFI_DEVICES} with\n     * android:usesPermissionFlags=\"neverForLocation\". If the application does not declare\n     * android:usesPermissionFlags=\"neverForLocation\", then it must also have\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION}.\n     *\n     * If targeting an earlier release than {@link android.os.Build.VERSION_CODES#TIRAMISU}, the\n     * application must have {@link android.Manifest.permission#ACCESS_FINE_LOCATION}.\n     *\n     * @param subscribeConfig The {@link SubscribeConfig} specifying the\n     *            configuration of the requested subscribe session.\n     * @param callback A {@link DiscoverySessionCallback} derived object to be used for\n     *                 session event callbacks.\n     * @param handler The Handler on whose thread to execute the callbacks of the {@code\n     * callback} object. If a null is provided then the application's main thread will be used.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "android.net.wifi.aware.SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)", "android.Manifest.permission#ACCESS_FINE_LOCATION", "android.net.wifi.aware.DiscoverySessionCallback", "android.net.wifi.aware.AwareResources#getAvailableSubscribeSessionsCount()", "android.net.wifi.aware.DiscoverySession#close()", "android.net.wifi.aware.DiscoverySessionCallback#onSubscribeStarted(", "android.Manifest.permission#NEARBY_WIFI_DEVICES", "android.net.wifi.aware.DiscoverySessionCallback#onSessionConfigFailed()", "android.net.wifi.aware.SubscribeConfig" ]
  }, {
    "name" : "public void setMasterPreference(@IntRange(from = 0, to = 254) int masterPreference)",
    "returnType" : "void",
    "comment" : "\n     * Set the master preference of the current Aware session. Device will use the highest master\n     * preference among all the active sessions on the device. The permitted range is 0 (the\n     * default) to 255 with 1 and 255 excluded (reserved).\n     *\n     * @param masterPreference The requested master preference\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getMasterPreference(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Integer> resultsCallback)",
    "returnType" : "void",
    "comment" : "\n     * Get the master preference of the current Aware session. Which configured by\n     * {@link #setMasterPreference(int)}.\n     *\n     * @param executor The executor on which callback will be invoked.\n     * @param resultsCallback An asynchronous callback that will return boolean\n     * @hide\n     ",
    "links" : [ "#setMasterPreference(int)" ]
  }, {
    "name" : "public NetworkSpecifier createNetworkSpecifierOpen(@WifiAwareManager.DataPathRole int role, @NonNull byte[] peer)",
    "returnType" : "NetworkSpecifier",
    "comment" : "\n     * Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for\n     * an unencrypted WiFi Aware connection (link) to the specified peer. The\n     * {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to\n     * {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}.\n     * <p>\n     *     This API is targeted for applications which can obtain the peer MAC address using OOB\n     *     (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer -\n     *     when using Aware discovery use the alternative network specifier method -\n     *     {@link android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder}.\n     * <p>\n     * To set up an encrypted link use the\n     * {@link #createNetworkSpecifierPassphrase(int, byte[], String)} API.\n     *\n     * @deprecated Please use in-band data-path setup, refer to\n     * {@link WifiAwareNetworkSpecifier.Builder},\n     * {@link #publish(PublishConfig, DiscoverySessionCallback, Handler)} and\n     * {@link #subscribe(SubscribeConfig, DiscoverySessionCallback, Handler)}\n     *\n     * @param role  The role of this device:\n     *              {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR} or\n     *              {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER}\n     * @param peer  The MAC address of the peer's Aware discovery interface. On a RESPONDER this\n     *              value is used to gate the acceptance of a connection request from only that\n     *              peer.\n     *\n     * @return A {@link NetworkSpecifier} to be used to construct\n     * {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to\n     * {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest,\n     * android.net.ConnectivityManager.NetworkCallback)}\n     * [or other varieties of that API].\n     ",
    "links" : [ "#subscribe(SubscribeConfig", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR", "android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER", "#createNetworkSpecifierPassphrase(int", "WifiAwareNetworkSpecifier.Builder", "android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest", "#publish(PublishConfig", "android.net.NetworkRequest.Builder#addTransportType(int)", "android.net.NetworkSpecifier", "android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)", "android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE" ]
  }, {
    "name" : "public NetworkSpecifier createNetworkSpecifierPassphrase(@WifiAwareManager.DataPathRole int role, @NonNull byte[] peer, @NonNull String passphrase)",
    "returnType" : "NetworkSpecifier",
    "comment" : "\n     * Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for\n     * an encrypted WiFi Aware connection (link) to the specified peer. The\n     * {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to\n     * {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}.\n     * <p>\n     *     This API is targeted for applications which can obtain the peer MAC address using OOB\n     *     (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer -\n     *     when using Aware discovery use the alternative network specifier method -\n     *     {@link android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder}.\n     *\n     * @deprecated Please use in-band data-path setup, refer to\n     * {@link WifiAwareNetworkSpecifier.Builder},\n     * {@link #publish(PublishConfig, DiscoverySessionCallback, Handler)} and\n     * {@link #subscribe(SubscribeConfig, DiscoverySessionCallback, Handler)}\n     *\n     * @param role  The role of this device:\n     *              {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR} or\n     *              {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER}\n     * @param peer  The MAC address of the peer's Aware discovery interface. On a RESPONDER this\n     *              value is used to gate the acceptance of a connection request from only that\n     *              peer.\n     * @param passphrase The passphrase to be used to encrypt the link. The PMK is generated from\n     *                   the passphrase. Use {@link #createNetworkSpecifierOpen(int, byte[])} to\n     *                   specify an open (unencrypted) link.\n     *\n     * @return A {@link NetworkSpecifier} to be used to construct\n     * {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to\n     * {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest,\n     * android.net.ConnectivityManager.NetworkCallback)}\n     * [or other varieties of that API].\n     ",
    "links" : [ "#subscribe(SubscribeConfig", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR", "android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER", "WifiAwareNetworkSpecifier.Builder", "android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest", "#publish(PublishConfig", "#createNetworkSpecifierOpen(int", "android.net.NetworkRequest.Builder#addTransportType(int)", "android.net.NetworkSpecifier", "android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)", "android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE" ]
  }, {
    "name" : "public NetworkSpecifier createNetworkSpecifierPmk(@WifiAwareManager.DataPathRole int role, @NonNull byte[] peer, @NonNull byte[] pmk)",
    "returnType" : "NetworkSpecifier",
    "comment" : "\n     * Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for\n     * an encrypted WiFi Aware connection (link) to the specified peer. The\n     * {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to\n     * {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}.\n     * <p>\n     *     This API is targeted for applications which can obtain the peer MAC address using OOB\n     *     (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer -\n     *     when using Aware discovery use the alternative network specifier method -\n     *     {@link android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder}.\n     *\n     * @deprecated Please use in-band data-path setup, refer to\n     * {@link WifiAwareNetworkSpecifier.Builder},\n     * {@link #publish(PublishConfig, DiscoverySessionCallback, Handler)} and\n     * {@link #subscribe(SubscribeConfig, DiscoverySessionCallback, Handler)}\n     *\n     * @param role  The role of this device:\n     *              {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR} or\n     *              {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER}\n     * @param peer  The MAC address of the peer's Aware discovery interface. On a RESPONDER this\n     *              value is used to gate the acceptance of a connection request from only that\n     *              peer.\n     * @param pmk A PMK (pairwise master key, see IEEE 802.11i) specifying the key to use for\n     *            encrypting the data-path. Use the\n     *            {@link #createNetworkSpecifierPassphrase(int, byte[], String)} to specify a\n     *            Passphrase or {@link #createNetworkSpecifierOpen(int, byte[])} to specify an\n     *            open (unencrypted) link.\n     *\n     * @return A {@link NetworkSpecifier} to be used to construct\n     * {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to\n     * {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest,\n     * android.net.ConnectivityManager.NetworkCallback)}\n     * [or other varieties of that API].\n     *\n     * @hide\n     ",
    "links" : [ "#subscribe(SubscribeConfig", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER", "WifiAwareNetworkSpecifier.Builder", "#publish(PublishConfig", "android.net.NetworkRequest.Builder#addTransportType(int)", "android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)", "android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR", "android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder", "#createNetworkSpecifierPassphrase(int", "android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest", "#createNetworkSpecifierOpen(int", "android.net.NetworkSpecifier" ]
  } ],
  "methodNames" : [ "public void close()", "protected void finalize() throws Throwable", "public int getClientId()", "public void publish(@NonNull PublishConfig publishConfig, @NonNull DiscoverySessionCallback callback, @Nullable Handler handler)", "public void subscribe(@NonNull SubscribeConfig subscribeConfig, @NonNull DiscoverySessionCallback callback, @Nullable Handler handler)", "public void setMasterPreference(@IntRange(from = 0, to = 254) int masterPreference)", "public void getMasterPreference(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Integer> resultsCallback)", "public NetworkSpecifier createNetworkSpecifierOpen(@WifiAwareManager.DataPathRole int role, @NonNull byte[] peer)", "public NetworkSpecifier createNetworkSpecifierPassphrase(@WifiAwareManager.DataPathRole int role, @NonNull byte[] peer, @NonNull String passphrase)", "public NetworkSpecifier createNetworkSpecifierPmk(@WifiAwareManager.DataPathRole int role, @NonNull byte[] peer, @NonNull byte[] pmk)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mMgr", "mBinder", "mClientId", "mTerminated", "mCloseGuard" ]
}