{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/FilterInputStream.java",
  "packageName" : "java.io",
  "className" : "FilterInputStream",
  "comment" : "\n * A <code>FilterInputStream</code> contains\n * some other input stream, which it uses as\n * its  basic source of data, possibly transforming\n * the data along the way or providing  additional\n * functionality. The class <code>FilterInputStream</code>\n * itself simply overrides all  methods of\n * <code>InputStream</code> with versions that\n * pass all requests to the contained  input\n * stream. Subclasses of <code>FilterInputStream</code>\n * may further override some of  these methods\n * and may also provide additional methods\n * and fields.\n *\n * @author  Jonathan Payne\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "in",
    "type" : "InputStream",
    "comment" : "\n     * The input stream to be filtered.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads the next byte of data from this input stream. The value\n     * byte is returned as an <code>int</code> in the range\n     * <code>0</code> to <code>255</code>. If no byte is available\n     * because the end of the stream has been reached, the value\n     * <code>-1</code> is returned. This method blocks until input data\n     * is available, the end of the stream is detected, or an exception\n     * is thrown.\n     * <p>\n     * This method\n     * simply performs <code>in.read()</code> and returns the result.\n     *\n     * @return     the next byte of data, or <code>-1</code> if the end of the\n     *             stream is reached.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to <code>b.length</code> bytes of data from this\n     * input stream into an array of bytes. This method blocks until some\n     * input is available.\n     * <p>\n     * This method simply performs the call\n     * <code>read(b, 0, b.length)</code> and returns\n     * the  result. It is important that it does\n     * <i>not</i> do <code>in.read(b)</code> instead;\n     * certain subclasses of  <code>FilterInputStream</code>\n     * depend on the implementation strategy actually\n     * used.\n     *\n     * @param      b   the buffer into which the data is read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1</code> if there is no more data because the end of\n     *             the stream has been reached.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterInputStream#read(byte[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to <code>len</code> bytes of data from this input stream\n     * into an array of bytes. If <code>len</code> is not zero, the method\n     * blocks until some input is available; otherwise, no\n     * bytes are read and <code>0</code> is returned.\n     * <p>\n     * This method simply performs <code>in.read(b, off, len)</code>\n     * and returns the result.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in the destination array <code>b</code>\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1</code> if there is no more data because the end of\n     *             the stream has been reached.\n     * @exception  NullPointerException If <code>b</code> is <code>null</code>.\n     * @exception  IndexOutOfBoundsException If <code>off</code> is negative,\n     * <code>len</code> is negative, or <code>len</code> is greater than\n     * <code>b.length - off</code>\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips over and discards <code>n</code> bytes of data from the\n     * input stream. The <code>skip</code> method may, for a variety of\n     * reasons, end up skipping over some smaller number of bytes,\n     * possibly <code>0</code>. The actual number of bytes skipped is\n     * returned.\n     * <p>\n     * This method simply performs <code>in.skip(n)</code>.\n     *\n     * @param      n   the number of bytes to be skipped.\n     * @return     the actual number of bytes skipped.\n     * @throws     IOException  if {@code in.skip(n)} throws an IOException.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the number of bytes that can be read (or\n     * skipped over) from this input stream without blocking by the next\n     * caller of a method for this input stream. The next caller might be\n     * the same thread or another thread.  A single read or skip of this\n     * many bytes will not block, but may read or skip fewer bytes.\n     * <p>\n     * This method returns the result of {@link #in in}.available().\n     *\n     * @return     an estimate of the number of bytes that can be read (or skipped\n     *             over) from this input stream without blocking.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ "#in" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this input stream and releases any system resources\n     * associated with the stream.\n     * This\n     * method simply performs <code>in.close()</code>.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void mark(int readlimit)",
    "returnType" : "void",
    "comment" : "\n     * Marks the current position in this input stream. A subsequent\n     * call to the <code>reset</code> method repositions this stream at\n     * the last marked position so that subsequent reads re-read the same bytes.\n     * <p>\n     * The <code>readlimit</code> argument tells this input stream to\n     * allow that many bytes to be read before the mark position gets\n     * invalidated.\n     * <p>\n     * This method simply performs <code>in.mark(readlimit)</code>.\n     *\n     * @param   readlimit   the maximum limit of bytes that can be read before\n     *                      the mark position becomes invalid.\n     * @see     java.io.FilterInputStream#in\n     * @see     java.io.FilterInputStream#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Repositions this stream to the position at the time the\n     * <code>mark</code> method was last called on this input stream.\n     * <p>\n     * This method\n     * simply performs <code>in.reset()</code>.\n     * <p>\n     * Stream marks are intended to be used in\n     * situations where you need to read ahead a little to see what's in\n     * the stream. Often this is most easily done by invoking some\n     * general parser. If the stream is of the type handled by the\n     * parse, it just chugs along happily. If the stream is not of\n     * that type, the parser should toss an exception when it fails.\n     * If this happens within readlimit bytes, it allows the outer\n     * code to reset the stream and try another parser.\n     *\n     * @exception  IOException  if the stream has not been marked or if the\n     *               mark has been invalidated.\n     * @see        java.io.FilterInputStream#in\n     * @see        java.io.FilterInputStream#mark(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this input stream supports the <code>mark</code>\n     * and <code>reset</code> methods.\n     * This method\n     * simply performs <code>in.markSupported()</code>.\n     *\n     * @return  <code>true</code> if this stream type supports the\n     *          <code>mark</code> and <code>reset</code> method;\n     *          <code>false</code> otherwise.\n     * @see     java.io.FilterInputStream#in\n     * @see     java.io.InputStream#mark(int)\n     * @see     java.io.InputStream#reset()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int read() throws IOException", "public int read(byte[] b) throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public long skip(long n) throws IOException", "public int available() throws IOException", "public void close() throws IOException", "public synchronized void mark(int readlimit)", "public synchronized void reset() throws IOException", "public boolean markSupported()" ],
  "variableNames" : [ "in" ]
}