{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/SyncResult.java",
  "packageName" : "android.content",
  "className" : "SyncResult",
  "comment" : "\n * This class is used to communicate the results of a sync operation to the SyncManager.\n * Based on the values here the SyncManager will determine the disposition of the\n * sync and whether or not a new sync operation needs to be scheduled in the future.\n *\n ",
  "variables" : [ {
    "name" : "syncAlreadyInProgress",
    "type" : "boolean",
    "comment" : "\n     * Used to indicate that the SyncAdapter is already performing a sync operation, though\n     * not necessarily for the requested account and authority and that it wasn't able to\n     * process this request. The SyncManager will reschedule the request to run later.\n     ",
    "links" : [ ]
  }, {
    "name" : "tooManyDeletions",
    "type" : "boolean",
    "comment" : "\n     * Used to indicate that the SyncAdapter determined that it would need to issue\n     * too many delete operations to the server in order to satisfy the request\n     * (as defined by the SyncAdapter). The SyncManager will record\n     * that the sync request failed and will cause a System Notification to be created\n     * asking the user what they want to do about this. It will give the user a chance to\n     * choose between (1) go ahead even with those deletes, (2) revert the deletes,\n     * or (3) take no action. If the user decides (1) or (2) the SyncManager will issue another\n     * sync request with either {@link ContentResolver#SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS}\n     * or {@link ContentResolver#SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS} set in the extras.\n     * It is then up to the SyncAdapter to decide how to honor that request.\n     ",
    "links" : [ "android.content.ContentResolver#SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS", "android.content.ContentResolver#SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS" ]
  }, {
    "name" : "tooManyRetries",
    "type" : "boolean",
    "comment" : "\n     * Used to indicate that the SyncAdapter experienced a hard error due to trying the same\n     * operation too many times (as defined by the SyncAdapter). The SyncManager will record\n     * that the sync request failed and it will not reschedule the request.\n     ",
    "links" : [ ]
  }, {
    "name" : "databaseError",
    "type" : "boolean",
    "comment" : "\n     * Used to indicate that the SyncAdapter experienced a hard error due to an error it\n     * received from interacting with the storage layer. The SyncManager will record that\n     * the sync request failed and it will not reschedule the request.\n     ",
    "links" : [ ]
  }, {
    "name" : "fullSyncRequested",
    "type" : "boolean",
    "comment" : "\n     * If set the SyncManager will request an immediate sync with the same Account and authority\n     * (but empty extras Bundle) as was used in the sync request.\n     ",
    "links" : [ ]
  }, {
    "name" : "partialSyncUnavailable",
    "type" : "boolean",
    "comment" : "\n     * This field is ignored by the SyncManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "moreRecordsToGet",
    "type" : "boolean",
    "comment" : "\n     * This field is ignored by the SyncManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "delayUntil",
    "type" : "long",
    "comment" : "\n     * Used to indicate to the SyncManager that future sync requests that match the request's\n     * Account and authority should be delayed until a time in seconds since Java epoch.\n     *\n     * <p>For example, if you want to delay the next sync for at least 5 minutes, then:\n     * <pre>\n     * result.delayUntil = (System.currentTimeMillis() / 1000) + 5 * 60;\n     * </pre>\n     *\n     * <p>By default, when a sync fails, the system retries later with an exponential back-off\n     * with the system default initial delay time, which always wins over {@link #delayUntil} --\n     * i.e. if the system back-off time is larger than {@link #delayUntil}, {@link #delayUntil}\n     * will essentially be ignored.\n     ",
    "links" : [ "#delayUntil" ]
  }, {
    "name" : "stats",
    "type" : "SyncStats",
    "comment" : "\n     * Used to hold extras statistics about the sync operation. Some of these indicate that\n     * the sync request resulted in a hard or soft error, others are for purely informational\n     * purposes.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALREADY_IN_PROGRESS",
    "type" : "SyncResult",
    "comment" : "\n     * This instance of a SyncResult is returned by the SyncAdapter in response to a\n     * sync request when a sync is already underway. The SyncManager will reschedule the\n     * sync request to try again later.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SyncResult>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean hasHardError()",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience method for determining if the SyncResult indicates that a hard error\n     * occurred. See {@link #SyncResult()} for an explanation of what the SyncManager does\n     * when it sees a hard error.\n     * <p>\n     * A hard error is indicated when any of the following is true:\n     * <ul>\n     * <li> {@link SyncStats#numParseExceptions} > 0\n     * <li> {@link SyncStats#numConflictDetectedExceptions} > 0\n     * <li> {@link SyncStats#numAuthExceptions} > 0\n     * <li> {@link #tooManyDeletions}\n     * <li> {@link #tooManyRetries}\n     * <li> {@link #databaseError}\n     * @return true if a hard error is indicated\n     ",
    "links" : [ "#tooManyDeletions", "android.content.SyncStats#numParseExceptions", "android.content.SyncStats#numConflictDetectedExceptions", "#databaseError", "#SyncResult()", "android.content.SyncStats#numAuthExceptions", "#tooManyRetries" ]
  }, {
    "name" : "public boolean hasSoftError()",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience method for determining if the SyncResult indicates that a soft error\n     * occurred. See {@link #SyncResult()} for an explanation of what the SyncManager does\n     * when it sees a soft error.\n     * <p>\n     * A soft error is indicated when any of the following is true:\n     * <ul>\n     * <li> {@link SyncStats#numIoExceptions} > 0\n     * <li> {@link #syncAlreadyInProgress}\n     * </ul>\n     * @return true if a soft error is indicated\n     ",
    "links" : [ "#syncAlreadyInProgress", "#SyncResult()", "android.content.SyncStats#numIoExceptions" ]
  }, {
    "name" : "public boolean hasError()",
    "returnType" : "boolean",
    "comment" : "\n     * A convenience method for determining of the SyncResult indicates that an error occurred.\n     * @return true if either a soft or hard error occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean madeSomeProgress()",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience method for determining if the Sync should be rescheduled after failing for some\n     * reason.\n     * @return true if the SyncManager should reschedule this sync.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears the SyncResult to a clean state. Throws an {@link UnsupportedOperationException}\n     * if this is called when {@link #syncAlreadyInProgress} is set.\n     ",
    "links" : [ "#syncAlreadyInProgress", "UnsupportedOperationException" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toDebugString()",
    "returnType" : "String",
    "comment" : "\n     * Generates a debugging string indicating the status.\n     * The string consist of a sequence of code letter followed by the count.\n     * Code letters are f - fullSyncRequested, r - partialSyncUnavailable,\n     * X - hardError, e - numParseExceptions, c - numConflictDetectedExceptions,\n     * a - numAuthExceptions, D - tooManyDeletions, R - tooManyRetries,\n     * b - databaseError, x - softError, l - syncAlreadyInProgress,\n     * I - numIoExceptions\n     * @return debugging string.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "syncAlreadyInProgress", "tooManyDeletions", "tooManyRetries", "databaseError", "fullSyncRequested", "partialSyncUnavailable", "moreRecordsToGet", "delayUntil", "stats", "ALREADY_IN_PROGRESS", "CREATOR" ],
  "methodNames" : [ "public boolean hasHardError()", "public boolean hasSoftError()", "public boolean hasError()", "public boolean madeSomeProgress()", "public void clear()", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public String toString()", "public String toDebugString()" ]
}