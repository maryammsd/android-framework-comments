{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/parsing/ApkLiteParseUtils.java",
  "packageName" : "android.content.pm.parsing",
  "className" : "ApkLiteParseUtils",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_DEFAULT_INSTALL_LOCATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSplitNameComparator",
    "type" : "Comparator<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APK_FILE_EXTENSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANDROID_RES_NAMESPACE",
    "type" : "String",
    "comment" : " Constants copied from services.jar side since they're not accessible",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MIN_SDK_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TARGET_SDK_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANDROID_MANIFEST_FILENAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_IS_SYSTEM_DIR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_COLLECT_CERTIFICATES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_APPLICATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PACKAGE_VERIFIER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PROFILEABLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_RECEIVER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_OVERLAY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_USES_SDK",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_USES_SPLIT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_MANIFEST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_SDK_LIBRARY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SDK_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SDK_CODENAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PROCESSES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PROCESS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ParseResult<PackageLite> parsePackageLite(ParseInput input, File packageFile, int flags)",
    "returnType" : "ParseResult<PackageLite>",
    "comment" : "\n     * Parse only lightweight details about the package at the given location.\n     * Automatically detects if the package is a monolithic style (single APK\n     * file) or cluster style (directory of APKs).\n     * <p>\n     * This performs validity checking on cluster style packages, such as\n     * requiring identical package name and version codes, a single base APK,\n     * and unique split names.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<PackageLite> parseMonolithicPackageLite(ParseInput input, File packageFile, int flags)",
    "returnType" : "ParseResult<PackageLite>",
    "comment" : "\n     * Parse lightweight details about a single APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<PackageLite> parseMonolithicPackageLite(ParseInput input, FileDescriptor packageFd, String debugPathName, int flags)",
    "returnType" : "ParseResult<PackageLite>",
    "comment" : "\n     * Parse lightweight details about a single APK file passed as an FD.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<PackageLite> parseClusterPackageLite(ParseInput input, File packageDir, int flags)",
    "returnType" : "ParseResult<PackageLite>",
    "comment" : "\n     * Parse lightweight details about a directory of APKs.\n     *\n     * @param packageDir is the folder that contains split apks for a regular app\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<PackageLite> composePackageLiteFromApks(ParseInput input, File packageDir, ApkLite baseApk, ArrayMap<String, ApkLite> splitApks)",
    "returnType" : "ParseResult<PackageLite>",
    "comment" : "\n     * Utility method that retrieves lightweight details about the package by given location,\n     * base APK, and split APKs.\n     *\n     * @param packageDir Path to the package\n     * @param baseApk Parsed base APK\n     * @param splitApks Parsed split APKs\n     * @return PackageLite\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<PackageLite> composePackageLiteFromApks(ParseInput input, File packageDir, ApkLite baseApk, ArrayMap<String, ApkLite> splitApks, boolean apkRenamed)",
    "returnType" : "ParseResult<PackageLite>",
    "comment" : "\n     * Utility method that retrieves lightweight details about the package by given location,\n     * base APK, and split APKs.\n     *\n     * @param packageDir Path to the package\n     * @param baseApk Parsed base APK\n     * @param splitApks Parsed split APKs\n     * @param apkRenamed Indicate whether the APKs are renamed after parsed.\n     * @return PackageLite\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String splitNameToFileName(@NonNull ApkLite apk)",
    "returnType" : "String",
    "comment" : "\n     * Utility method that retrieves canonical file name by given split name from parsed APK.\n     *\n     * @param apk Parsed APK\n     * @return The canonical file name\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<ApkLite> parseApkLite(ParseInput input, File apkFile, int flags)",
    "returnType" : "ParseResult<ApkLite>",
    "comment" : "\n     * Utility method that retrieves lightweight details about a single APK\n     * file, including package name, split name, and install location.\n     *\n     * @param apkFile path to a single APK\n     * @param flags optional parse flags, such as\n     *            {@link ParsingPackageUtils#PARSE_COLLECT_CERTIFICATES}\n     ",
    "links" : [ "#PARSE_COLLECT_CERTIFICATES" ]
  }, {
    "name" : "public static ParseResult<ApkLite> parseApkLite(ParseInput input, FileDescriptor fd, String debugPathName, int flags)",
    "returnType" : "ParseResult<ApkLite>",
    "comment" : "\n     * Utility method that retrieves lightweight details about a single APK\n     * file, including package name, split name, and install location.\n     *\n     * @param fd already open file descriptor of an apk file\n     * @param debugPathName arbitrary text name for this file, for debug output\n     * @param flags optional parse flags, such as\n     *            {@link ParsingPackageUtils#PARSE_COLLECT_CERTIFICATES}\n     ",
    "links" : [ "#PARSE_COLLECT_CERTIFICATES" ]
  }, {
    "name" : "private static ParseResult<ApkLite> parseApkLiteInner(ParseInput input, File apkFile, FileDescriptor fd, String debugPathName, int flags)",
    "returnType" : "ParseResult<ApkLite>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ApkLite> parseApkLite(ParseInput input, String codePath, XmlResourceParser parser, SigningDetails signingDetails, int flags) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult<ApkLite>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDeviceAdminReceiver(XmlResourceParser parser, boolean applicationHasBindDeviceAdminPermission) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<Pair<String, String>> parsePackageSplitNames(ParseInput input, XmlResourceParser parser) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult<Pair<String, String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<Pair<Set<String>, Set<String>>> parseRequiredSplitTypes(ParseInput input, XmlResourceParser parser)",
    "returnType" : "ParseResult<Pair<Set<String>, Set<String>>>",
    "comment" : "\n     * Utility method that parses attributes android:requiredSplitTypes and android:splitTypes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<Set<String>> separateAndValidateSplitTypes(ParseInput input, String values)",
    "returnType" : "ParseResult<Set<String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static VerifierInfo parseVerifier(AttributeSet attrs)",
    "returnType" : "VerifierInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isApkFile(File file)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the given file is an APK file.\n     *\n     * @param file the file to check.\n     * @return {@code true} if the given file is an APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isApkPath(String path)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the given path ends with APK file extension.\n     *\n     * @param path the path to check.\n     * @return {@code true} if the given path ends with APK file extension.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ParseResult<PackageLite> parsePackageLite(ParseInput input, File packageFile, int flags)", "public static ParseResult<PackageLite> parseMonolithicPackageLite(ParseInput input, File packageFile, int flags)", "public static ParseResult<PackageLite> parseMonolithicPackageLite(ParseInput input, FileDescriptor packageFd, String debugPathName, int flags)", "public static ParseResult<PackageLite> parseClusterPackageLite(ParseInput input, File packageDir, int flags)", "public static ParseResult<PackageLite> composePackageLiteFromApks(ParseInput input, File packageDir, ApkLite baseApk, ArrayMap<String, ApkLite> splitApks)", "public static ParseResult<PackageLite> composePackageLiteFromApks(ParseInput input, File packageDir, ApkLite baseApk, ArrayMap<String, ApkLite> splitApks, boolean apkRenamed)", "public static String splitNameToFileName(@NonNull ApkLite apk)", "public static ParseResult<ApkLite> parseApkLite(ParseInput input, File apkFile, int flags)", "public static ParseResult<ApkLite> parseApkLite(ParseInput input, FileDescriptor fd, String debugPathName, int flags)", "private static ParseResult<ApkLite> parseApkLiteInner(ParseInput input, File apkFile, FileDescriptor fd, String debugPathName, int flags)", "private static ParseResult<ApkLite> parseApkLite(ParseInput input, String codePath, XmlResourceParser parser, SigningDetails signingDetails, int flags) throws IOException, XmlPullParserException", "private static boolean isDeviceAdminReceiver(XmlResourceParser parser, boolean applicationHasBindDeviceAdminPermission) throws XmlPullParserException, IOException", "public static ParseResult<Pair<String, String>> parsePackageSplitNames(ParseInput input, XmlResourceParser parser) throws IOException, XmlPullParserException", "public static ParseResult<Pair<Set<String>, Set<String>>> parseRequiredSplitTypes(ParseInput input, XmlResourceParser parser)", "private static ParseResult<Set<String>> separateAndValidateSplitTypes(ParseInput input, String values)", "public static VerifierInfo parseVerifier(AttributeSet attrs)", "public static boolean isApkFile(File file)", "public static boolean isApkPath(String path)" ],
  "variableNames" : [ "TAG", "PARSE_DEFAULT_INSTALL_LOCATION", "sSplitNameComparator", "APK_FILE_EXTENSION", "ANDROID_RES_NAMESPACE", "DEFAULT_MIN_SDK_VERSION", "DEFAULT_TARGET_SDK_VERSION", "ANDROID_MANIFEST_FILENAME", "PARSE_IS_SYSTEM_DIR", "PARSE_COLLECT_CERTIFICATES", "TAG_APPLICATION", "TAG_PACKAGE_VERIFIER", "TAG_PROFILEABLE", "TAG_RECEIVER", "TAG_OVERLAY", "TAG_USES_SDK", "TAG_USES_SPLIT", "TAG_MANIFEST", "TAG_SDK_LIBRARY", "SDK_VERSION", "SDK_CODENAMES", "TAG_PROCESSES", "TAG_PROCESS" ]
}