{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/PackageInstaller.java",
  "packageName" : "android.content.pm",
  "className" : "UnarchivalState",
  "comment" : "\n     * Used to communicate the unarchival state in {@link #reportUnarchivalState}.\n     ",
  "links" : [ "#reportUnarchivalState" ],
  "variables" : [ {
    "name" : "mUnarchiveId",
    "type" : "int",
    "comment" : "\n         * The ID provided by the system as part of the intent.action.UNARCHIVE broadcast with\n         * EXTRA_UNARCHIVE_ID.\n         ",
    "links" : [ ]
  }, {
    "name" : "mStatus",
    "type" : "int",
    "comment" : " Used for the system to provide the user with necessary follow-up steps or errors. ",
    "links" : [ ]
  }, {
    "name" : "mRequiredStorageBytes",
    "type" : "long",
    "comment" : "\n         * If the error is UNARCHIVAL_ERROR_INSUFFICIENT_STORAGE this field should be set to specify\n         * how many additional bytes of storage are required to unarchive the app.\n         ",
    "links" : [ ]
  }, {
    "name" : "mUserActionIntent",
    "type" : "PendingIntent",
    "comment" : "\n         * Optional intent to start a follow up action required to facilitate the unarchival flow\n         * (e.g., user needs to log in).\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static UnarchivalState createOkState(int unarchiveId)",
    "returnType" : "UnarchivalState",
    "comment" : "\n         * The caller is able to facilitate the unarchival for the given {@code unarchiveId}.\n         *\n         * @param unarchiveId the ID provided by the system as part of the intent.action.UNARCHIVE\n         *                    broadcast with EXTRA_UNARCHIVE_ID.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static UnarchivalState createUserActionRequiredState(int unarchiveId, @NonNull PendingIntent userActionIntent)",
    "returnType" : "UnarchivalState",
    "comment" : "\n         * User action is required before commencing with the unarchival for the given\n         * {@code unarchiveId}. E.g., this could be used if it's necessary for the user to sign-in\n         * first.\n         *\n         * @param unarchiveId      the ID provided by the system as part of the\n         *                         intent.action.UNARCHIVE\n         *                         broadcast with EXTRA_UNARCHIVE_ID.\n         * @param userActionIntent optional intent to start a follow up action required to\n         *                         facilitate the unarchival flow (e.g. user needs to log in).\n         ",
    "links" : [ ]
  }, {
    "name" : "public static UnarchivalState createInsufficientStorageState(int unarchiveId, long requiredStorageBytes, @Nullable PendingIntent userActionIntent)",
    "returnType" : "UnarchivalState",
    "comment" : "\n         * There is not enough storage to start the unarchival for the given {@code unarchiveId}.\n         *\n         * @param unarchiveId          the ID provided by the system as part of the\n         *                             intent.action.UNARCHIVE\n         *                             broadcast with EXTRA_UNARCHIVE_ID.\n         * @param requiredStorageBytes ff the error is UNARCHIVAL_ERROR_INSUFFICIENT_STORAGE this\n         *                             field should be set to specify how many additional bytes of\n         *                             storage are required to unarchive the app.\n         * @param userActionIntent     can optionally be set to provide a custom storage-clearing\n         *                             action.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static UnarchivalState createNoConnectivityState(int unarchiveId)",
    "returnType" : "UnarchivalState",
    "comment" : "\n         * The device has no data connectivity and unarchival cannot be started for the given\n         * {@code unarchiveId}.\n         *\n         * @param unarchiveId the ID provided by the system as part of the intent.action.UNARCHIVE\n         *                    broadcast with EXTRA_UNARCHIVE_ID.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static UnarchivalState createGenericErrorState(int unarchiveId)",
    "returnType" : "UnarchivalState",
    "comment" : "\n         * Generic error state for all cases that are not covered by other methods in this class.\n         *\n         * @param unarchiveId the ID provided by the system as part of the intent.action.UNARCHIVE\n         *                    broadcast with EXTRA_UNARCHIVE_ID.\n         ",
    "links" : [ ]
  }, {
    "name" : " int getUnarchiveId()",
    "returnType" : "int",
    "comment" : "\n         * The ID provided by the system as part of the intent.action.UNARCHIVE broadcast with\n         * EXTRA_UNARCHIVE_ID.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " int getStatus()",
    "returnType" : "int",
    "comment" : "\n         * Used for the system to provide the user with necessary follow-up steps or errors.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " long getRequiredStorageBytes()",
    "returnType" : "long",
    "comment" : "\n         * If the error is UNARCHIVAL_ERROR_INSUFFICIENT_STORAGE this field should be set to specify\n         * how many additional bytes of storage are required to unarchive the app.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " PendingIntent getUserActionIntent()",
    "returnType" : "PendingIntent",
    "comment" : "\n         * Optional intent to start a follow up action required to facilitate the unarchival flow\n         * (e.g. user needs to log in).\n         *\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static UnarchivalState createOkState(int unarchiveId)", "public static UnarchivalState createUserActionRequiredState(int unarchiveId, @NonNull PendingIntent userActionIntent)", "public static UnarchivalState createInsufficientStorageState(int unarchiveId, long requiredStorageBytes, @Nullable PendingIntent userActionIntent)", "public static UnarchivalState createNoConnectivityState(int unarchiveId)", "public static UnarchivalState createGenericErrorState(int unarchiveId)", " int getUnarchiveId()", " int getStatus()", " long getRequiredStorageBytes()", " PendingIntent getUserActionIntent()" ],
  "variableNames" : [ "mUnarchiveId", "mStatus", "mRequiredStorageBytes", "mUserActionIntent" ]
}