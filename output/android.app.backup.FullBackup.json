{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/backup/FullBackup.java",
  "packageName" : "android.app.backup",
  "className" : "FullBackup",
  "comment" : "\n * Global constant definitions et cetera related to the full-backup-to-fd\n * binary format.  Nothing in this namespace is part of any API; it's all\n * hidden details of the current implementation gathered into one location.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_XML_PARSER",
    "type" : "String",
    "comment" : " Enable this log tag to get verbose information while parsing the client xml. ",
    "links" : [ ]
  }, {
    "name" : "APK_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OBB_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_VALUE_DATA_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROOT_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FILES_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_BACKUP_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATABASE_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHAREDPREFS_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ROOT_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_FILES_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_NO_BACKUP_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_DATABASE_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_SHAREDPREFS_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CACHE_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MANAGED_EXTERNAL_TREE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHARED_STORAGE_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APPS_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHARED_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FULL_BACKUP_INTENT_ACTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FULL_RESTORE_INTENT_ACTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONF_TOKEN_INTENT_EXTRA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_REQUIRED_CLIENT_SIDE_ENCRYPTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_REQUIRED_DEVICE_TO_DEVICE_TRANSFER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_REQUIRED_FAKE_CLIENT_SIDE_ENCRYPTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kPackageBackupSchemeMap",
    "type" : "Map<String, BackupScheme>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static native int backupToTar(String packageName, String domain, String linkdomain, String rootpath, String path, FullBackupDataOutput output)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static synchronized BackupScheme getBackupScheme(Context context)",
    "returnType" : "BackupScheme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static BackupScheme getBackupSchemeForTest(Context context)",
    "returnType" : "BackupScheme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void restoreFile(ParcelFileDescriptor data, long size, int type, long mode, long mtime, File outFile) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Copy data from a socket to the given File location on permanent storage.  The\n     * modification time and access mode of the resulting file will be set if desired,\n     * although group/all rwx modes will be stripped: the restored file will not be\n     * accessible from outside the target application even if the original file was.\n     * If the {@code type} parameter indicates that the result should be a directory,\n     * the socket parameter may be {@code null}; even if it is valid, no data will be\n     * read from it in this case.\n     * <p>\n     * If the {@code mode} argument is negative, then the resulting output file will not\n     * have its access mode or last modification time reset as part of this operation.\n     *\n     * @param data Socket supplying the data to be copied to the output file.  If the\n     *    output is a directory, this may be {@code null}.\n     * @param size Number of bytes of data to copy from the socket to the file.  At least\n     *    this much data must be available through the {@code data} parameter.\n     * @param type Must be either {@link BackupAgent#TYPE_FILE} for ordinary file data\n     *    or {@link BackupAgent#TYPE_DIRECTORY} for a directory.\n     * @param mode Unix-style file mode (as used by the chmod(2) syscall) to be set on\n     *    the output file or directory.  group/all rwx modes are stripped even if set\n     *    in this parameter.  If this parameter is negative then neither\n     *    the mode nor the mtime values will be applied to the restored file.\n     * @param mtime A timestamp in the standard Unix epoch that will be imposed as the\n     *    last modification time of the output file.  if the {@code mode} parameter is\n     *    negative then this parameter will be ignored.\n     * @param outFile Location within the filesystem to place the data.  This must point\n     *    to a location that is writeable by the caller, preferably using an absolute path.\n     * @throws IOException\n     ",
    "links" : [ "android.app.backup.BackupAgent#TYPE_DIRECTORY", "android.app.backup.BackupAgent#TYPE_FILE" ]
  } ],
  "variableNames" : [ "TAG", "TAG_XML_PARSER", "APK_TREE_TOKEN", "OBB_TREE_TOKEN", "KEY_VALUE_DATA_TOKEN", "ROOT_TREE_TOKEN", "FILES_TREE_TOKEN", "NO_BACKUP_TREE_TOKEN", "DATABASE_TREE_TOKEN", "SHAREDPREFS_TREE_TOKEN", "CACHE_TREE_TOKEN", "DEVICE_ROOT_TREE_TOKEN", "DEVICE_FILES_TREE_TOKEN", "DEVICE_NO_BACKUP_TREE_TOKEN", "DEVICE_DATABASE_TREE_TOKEN", "DEVICE_SHAREDPREFS_TREE_TOKEN", "DEVICE_CACHE_TREE_TOKEN", "MANAGED_EXTERNAL_TREE_TOKEN", "SHARED_STORAGE_TOKEN", "APPS_PREFIX", "SHARED_PREFIX", "FULL_BACKUP_INTENT_ACTION", "FULL_RESTORE_INTENT_ACTION", "CONF_TOKEN_INTENT_EXTRA", "FLAG_REQUIRED_CLIENT_SIDE_ENCRYPTION", "FLAG_REQUIRED_DEVICE_TO_DEVICE_TRANSFER", "FLAG_REQUIRED_FAKE_CLIENT_SIDE_ENCRYPTION", "kPackageBackupSchemeMap" ],
  "methodNames" : [ "public static native int backupToTar(String packageName, String domain, String linkdomain, String rootpath, String path, FullBackupDataOutput output)", " static synchronized BackupScheme getBackupScheme(Context context)", "public static BackupScheme getBackupSchemeForTest(Context context)", "public static void restoreFile(ParcelFileDescriptor data, long size, int type, long mode, long mtime, File outFile) throws IOException" ]
}