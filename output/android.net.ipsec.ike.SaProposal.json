{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/ipsec/ike/SaProposal.java",
  "packageName" : "android.net.ipsec.ike",
  "className" : "SaProposal",
  "comment" : "\n * SaProposal represents a proposed configuration to negotiate an IKE or Child SA.\n *\n * <p>SaProposal will contain cryptograhic algorithms and key generation materials for the\n * negotiation of an IKE or Child SA.\n *\n * <p>User must provide at least one valid SaProposal when they are creating a new IKE or Child SA.\n *\n * @see <a href=\"https://tools.ietf.org/html/rfc7296#section-3.3\">RFC 7296, Internet Key Exchange\n *     Protocol Version 2 (IKEv2)</a>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ENCRYPTION_ALGORITHM_3DES",
    "type" : "int",
    "comment" : " 3DES Encryption/Ciphering Algorithm. ",
    "links" : [ ]
  }, {
    "name" : "ENCRYPTION_ALGORITHM_AES_CBC",
    "type" : "int",
    "comment" : " AES-CBC Encryption/Ciphering Algorithm. ",
    "links" : [ ]
  }, {
    "name" : "ENCRYPTION_ALGORITHM_AES_CTR",
    "type" : "int",
    "comment" : " AES-CTR Encryption/Ciphering Algorithm. ",
    "links" : [ ]
  }, {
    "name" : "ENCRYPTION_ALGORITHM_AES_GCM_8",
    "type" : "int",
    "comment" : "\n     * AES-GCM Authentication/Integrity + Encryption/Ciphering Algorithm with 8-octet ICV\n     * (truncation).\n     ",
    "links" : [ ]
  }, {
    "name" : "ENCRYPTION_ALGORITHM_AES_GCM_12",
    "type" : "int",
    "comment" : "\n     * AES-GCM Authentication/Integrity + Encryption/Ciphering Algorithm with 12-octet ICV\n     * (truncation).\n     ",
    "links" : [ ]
  }, {
    "name" : "ENCRYPTION_ALGORITHM_AES_GCM_16",
    "type" : "int",
    "comment" : "\n     * AES-GCM Authentication/Integrity + Encryption/Ciphering Algorithm with 16-octet ICV\n     * (truncation).\n     ",
    "links" : [ ]
  }, {
    "name" : "ENCRYPTION_ALGORITHM_CHACHA20_POLY1305",
    "type" : "int",
    "comment" : "\n     * ChaCha20-Poly1305 Authentication/Integrity + Encryption/Ciphering Algorithm with 16-octet ICV\n     * (truncation).\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_ENCRYPTION_ALGO_TO_STR",
    "type" : "SparseArray<String>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "KEY_LEN_UNUSED",
    "type" : "int",
    "comment" : "\n     * Key length unused.\n     *\n     * <p>This value should only be used with the Encryption/Ciphering Algorithm that accepts a\n     * fixed key size such as {@link #ENCRYPTION_ALGORITHM_3DES}.\n     ",
    "links" : [ "#ENCRYPTION_ALGORITHM_3DES" ]
  }, {
    "name" : "KEY_LEN_AES_128",
    "type" : "int",
    "comment" : " AES Encryption/Ciphering Algorithm key length 128 bits. ",
    "links" : [ ]
  }, {
    "name" : "KEY_LEN_AES_192",
    "type" : "int",
    "comment" : " AES Encryption/Ciphering Algorithm key length 192 bits. ",
    "links" : [ ]
  }, {
    "name" : "KEY_LEN_AES_256",
    "type" : "int",
    "comment" : " AES Encryption/Ciphering Algorithm key length 256 bits. ",
    "links" : [ ]
  }, {
    "name" : "PSEUDORANDOM_FUNCTION_HMAC_SHA1",
    "type" : "int",
    "comment" : " HMAC-SHA1 Pseudorandom Function. ",
    "links" : [ ]
  }, {
    "name" : "PSEUDORANDOM_FUNCTION_AES128_XCBC",
    "type" : "int",
    "comment" : " AES128-XCBC Pseudorandom Function. ",
    "links" : [ ]
  }, {
    "name" : "PSEUDORANDOM_FUNCTION_SHA2_256",
    "type" : "int",
    "comment" : " HMAC-SHA2-256 Pseudorandom Function. ",
    "links" : [ ]
  }, {
    "name" : "PSEUDORANDOM_FUNCTION_SHA2_384",
    "type" : "int",
    "comment" : " HMAC-SHA2-384 Pseudorandom Function. ",
    "links" : [ ]
  }, {
    "name" : "PSEUDORANDOM_FUNCTION_SHA2_512",
    "type" : "int",
    "comment" : " HMAC-SHA2-384 Pseudorandom Function. ",
    "links" : [ ]
  }, {
    "name" : "PSEUDORANDOM_FUNCTION_AES128_CMAC",
    "type" : "int",
    "comment" : " AES128-CMAC Pseudorandom Function. ",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_PRF_TO_STR",
    "type" : "SparseArray<String>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INTEGRITY_ALGORITHM_NONE",
    "type" : "int",
    "comment" : " None Authentication/Integrity Algorithm. ",
    "links" : [ ]
  }, {
    "name" : "INTEGRITY_ALGORITHM_HMAC_SHA1_96",
    "type" : "int",
    "comment" : " HMAC-SHA1 Authentication/Integrity Algorithm. ",
    "links" : [ ]
  }, {
    "name" : "INTEGRITY_ALGORITHM_AES_XCBC_96",
    "type" : "int",
    "comment" : " AES-XCBC-96 Authentication/Integrity Algorithm. ",
    "links" : [ ]
  }, {
    "name" : "INTEGRITY_ALGORITHM_AES_CMAC_96",
    "type" : "int",
    "comment" : " AES-CMAC-96 Authentication/Integrity Algorithm. ",
    "links" : [ ]
  }, {
    "name" : "INTEGRITY_ALGORITHM_HMAC_SHA2_256_128",
    "type" : "int",
    "comment" : " HMAC-SHA256 Authentication/Integrity Algorithm with 128-bit truncation. ",
    "links" : [ ]
  }, {
    "name" : "INTEGRITY_ALGORITHM_HMAC_SHA2_384_192",
    "type" : "int",
    "comment" : " HMAC-SHA384 Authentication/Integrity Algorithm with 192-bit truncation. ",
    "links" : [ ]
  }, {
    "name" : "INTEGRITY_ALGORITHM_HMAC_SHA2_512_256",
    "type" : "int",
    "comment" : " HMAC-SHA512 Authentication/Integrity Algorithm with 256-bit truncation. ",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_INTEGRITY_ALGO_TO_STR",
    "type" : "SparseArray<String>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DH_GROUP_NONE",
    "type" : "int",
    "comment" : " None Diffie-Hellman Group. ",
    "links" : [ ]
  }, {
    "name" : "DH_GROUP_1024_BIT_MODP",
    "type" : "int",
    "comment" : " 1024-bit MODP Diffie-Hellman Group. ",
    "links" : [ ]
  }, {
    "name" : "DH_GROUP_1536_BIT_MODP",
    "type" : "int",
    "comment" : " 1536-bit MODP Diffie-Hellman Group. ",
    "links" : [ ]
  }, {
    "name" : "DH_GROUP_2048_BIT_MODP",
    "type" : "int",
    "comment" : " 2048-bit MODP Diffie-Hellman Group. ",
    "links" : [ ]
  }, {
    "name" : "DH_GROUP_3072_BIT_MODP",
    "type" : "int",
    "comment" : " 3072-bit MODP Diffie-Hellman Group. ",
    "links" : [ ]
  }, {
    "name" : "DH_GROUP_4096_BIT_MODP",
    "type" : "int",
    "comment" : " 4096-bit MODP Diffie-Hellman Group. ",
    "links" : [ ]
  }, {
    "name" : "DH_GROUP_CURVE_25519",
    "type" : "int",
    "comment" : " Elliptic Curve Diffie-Hellman 25519. ",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_DH_GROUP_TO_STR",
    "type" : "SparseArray<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_ID_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENCRYPT_ALGO_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INTEGRITY_ALGO_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DH_GROUP_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mProtocolId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncryptionAlgorithms",
    "type" : "EncryptionTransform[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntegrityAlgorithms",
    "type" : "IntegrityTransform[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDhGroups",
    "type" : "DhGroupTransform[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SaProposal fromPersistableBundle(@NonNull PersistableBundle in)",
    "returnType" : "SaProposal",
    "comment" : "\n     * Constructs this object by deserializing a PersistableBundle\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle toPersistableBundle()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Serializes this object to a PersistableBundle\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNegotiatedFrom(SaProposal reqProposal)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the current SaProposal from the SA responder is consistent with the selected\n     * reqProposal from the SA initiator.\n     *\n     * <p>As per RFC 7296, The accepted cryptographic suite MUST contain exactly one transform of\n     * each type included in the proposal. But for interoperability reason, IKE library allows\n     * exceptions when the accepted suite or the request proposal has a NONE value transform.\n     * Currently only IntegrityTransform and DhGroupTransform have NONE value transform ID defined.\n     *\n     * @param reqProposal selected SaProposal from SA initiator\n     * @return if current SaProposal from SA responder is consistent with the selected reqProposal\n     *     from SA initiator.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isTransformSelectedFrom(Transform[] selected, Transform[] selectFrom)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the response transform can be selected from the request transforms\n     *\n     * <p>Package private\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isIntegrityTransformSelectedFrom(IntegrityTransform[] selected, IntegrityTransform[] selectFrom)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the response integrity transform can be selected from the request integrity\n     * transforms.\n     *\n     * <p>For interoperability reason, it is allowed to do not include integrity transform in the\n     * response proposal when the request proposal has a NONE value integrity transform; and it is\n     * also allowed to have a NONE value integrity transform when the request proposal does not have\n     * integrity transforms.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDhGroupTransformSelectedFrom(DhGroupTransform[] selected, DhGroupTransform[] selectFrom)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the response DH group can be selected from the request DH groups\n     *\n     * <p>For interoperability reason, it is allowed to do not include DH group in the response\n     * proposal when the request proposal has a NONE value DH group; and it is also allowed to have\n     * a NONE value DH group when the request proposal does not have DH groups.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProtocolId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<Pair<Integer, Integer>> getEncryptionAlgorithms()",
    "returnType" : "List<Pair<Integer, Integer>>",
    "comment" : "\n     * Gets all proposed encryption algorithms\n     *\n     * @return A list of Pairs, with the IANA-defined ID for the proposed encryption algorithm as\n     *     the first item, and the key length (in bits) as the second.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Integer> getIntegrityAlgorithms()",
    "returnType" : "List<Integer>",
    "comment" : "\n     * Gets all proposed integrity algorithms\n     *\n     * @return A list of the IANA-defined IDs for the proposed integrity algorithms\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Integer> getDhGroups()",
    "returnType" : "List<Integer>",
    "comment" : "\n     * Gets all proposed Diffie-Hellman groups\n     *\n     * @return A list of the IANA-defined IDs for the proposed Diffie-Hellman groups\n     ",
    "links" : [ ]
  }, {
    "name" : "public EncryptionTransform[] getEncryptionTransforms()",
    "returnType" : "EncryptionTransform[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IntegrityTransform[] getIntegrityTransforms()",
    "returnType" : "IntegrityTransform[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public DhGroupTransform[] getDhGroupTransforms()",
    "returnType" : "DhGroupTransform[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected List<Transform> getAllTransformsAsList()",
    "returnType" : "List<Transform>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract Transform[] getAllTransforms()",
    "returnType" : "Transform[]",
    "comment" : "\n     * Return all SA Transforms in this SaProposal to be encoded for building an outbound IKE\n     * message.\n     *\n     * <p>This method should be called by only IKE library.\n     *\n     * @return Array of Transforms to be encoded.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static Set<Integer> getKeySet(SparseArray array)",
    "returnType" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static Set<Integer> getSupportedDhGroups()",
    "returnType" : "Set<Integer>",
    "comment" : " Returns supported DH groups for IKE and Child SA proposal negotiation. ",
    "links" : [ ]
  }, {
    "name" : "public static String getEncryptionAlgorithmString(int algorithm)",
    "returnType" : "String",
    "comment" : "\n     * Return the encryption algorithm as a String.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getPseudorandomFunctionString(int algorithm)",
    "returnType" : "String",
    "comment" : "\n     * Return the pseudorandom function as a String.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getIntegrityAlgorithmString(int algorithm)",
    "returnType" : "String",
    "comment" : "\n     * Return the integrity algorithm as a String.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDhGroupString(int dhGroup)",
    "returnType" : "String",
    "comment" : "\n     * Return Diffie-Hellman Group as a String.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static SaProposal fromPersistableBundle(@NonNull PersistableBundle in)", "public PersistableBundle toPersistableBundle()", "public boolean isNegotiatedFrom(SaProposal reqProposal)", " static boolean isTransformSelectedFrom(Transform[] selected, Transform[] selectFrom)", "private static boolean isIntegrityTransformSelectedFrom(IntegrityTransform[] selected, IntegrityTransform[] selectFrom)", "private static boolean isDhGroupTransformSelectedFrom(DhGroupTransform[] selected, DhGroupTransform[] selectFrom)", "public int getProtocolId()", "public List<Pair<Integer, Integer>> getEncryptionAlgorithms()", "public List<Integer> getIntegrityAlgorithms()", "public List<Integer> getDhGroups()", "public EncryptionTransform[] getEncryptionTransforms()", "public IntegrityTransform[] getIntegrityTransforms()", "public DhGroupTransform[] getDhGroupTransforms()", "protected List<Transform> getAllTransformsAsList()", "public abstract Transform[] getAllTransforms()", "public String toString()", "public int hashCode()", "public boolean equals(Object o)", "protected static Set<Integer> getKeySet(SparseArray array)", "public static Set<Integer> getSupportedDhGroups()", "public static String getEncryptionAlgorithmString(int algorithm)", "public static String getPseudorandomFunctionString(int algorithm)", "public static String getIntegrityAlgorithmString(int algorithm)", "public static String getDhGroupString(int dhGroup)" ],
  "variableNames" : [ "ENCRYPTION_ALGORITHM_3DES", "ENCRYPTION_ALGORITHM_AES_CBC", "ENCRYPTION_ALGORITHM_AES_CTR", "ENCRYPTION_ALGORITHM_AES_GCM_8", "ENCRYPTION_ALGORITHM_AES_GCM_12", "ENCRYPTION_ALGORITHM_AES_GCM_16", "ENCRYPTION_ALGORITHM_CHACHA20_POLY1305", "SUPPORTED_ENCRYPTION_ALGO_TO_STR", "KEY_LEN_UNUSED", "KEY_LEN_AES_128", "KEY_LEN_AES_192", "KEY_LEN_AES_256", "PSEUDORANDOM_FUNCTION_HMAC_SHA1", "PSEUDORANDOM_FUNCTION_AES128_XCBC", "PSEUDORANDOM_FUNCTION_SHA2_256", "PSEUDORANDOM_FUNCTION_SHA2_384", "PSEUDORANDOM_FUNCTION_SHA2_512", "PSEUDORANDOM_FUNCTION_AES128_CMAC", "SUPPORTED_PRF_TO_STR", "INTEGRITY_ALGORITHM_NONE", "INTEGRITY_ALGORITHM_HMAC_SHA1_96", "INTEGRITY_ALGORITHM_AES_XCBC_96", "INTEGRITY_ALGORITHM_AES_CMAC_96", "INTEGRITY_ALGORITHM_HMAC_SHA2_256_128", "INTEGRITY_ALGORITHM_HMAC_SHA2_384_192", "INTEGRITY_ALGORITHM_HMAC_SHA2_512_256", "SUPPORTED_INTEGRITY_ALGO_TO_STR", "DH_GROUP_NONE", "DH_GROUP_1024_BIT_MODP", "DH_GROUP_1536_BIT_MODP", "DH_GROUP_2048_BIT_MODP", "DH_GROUP_3072_BIT_MODP", "DH_GROUP_4096_BIT_MODP", "DH_GROUP_CURVE_25519", "SUPPORTED_DH_GROUP_TO_STR", "PROTOCOL_ID_KEY", "ENCRYPT_ALGO_KEY", "INTEGRITY_ALGO_KEY", "DH_GROUP_KEY", "mProtocolId", "mEncryptionAlgorithms", "mIntegrityAlgorithms", "mDhGroups" ]
}