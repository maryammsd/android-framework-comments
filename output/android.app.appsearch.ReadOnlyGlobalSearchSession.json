{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/ReadOnlyGlobalSearchSession.java",
  "packageName" : "android.app.appsearch",
  "className" : "ReadOnlyGlobalSearchSession",
  "comment" : "\n * Holds the shared implementation for the query methods of {@link GlobalSearchSession} and\n * EnterpriseGlobalSearchSession. Enterprise calls direct queries to the user's work profile\n * AppSearch instance.\n *\n * @hide\n ",
  "links" : [ "android.app.appsearch.GlobalSearchSession" ],
  "variables" : [ {
    "name" : "mService",
    "type" : "IAppSearchManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserHandle",
    "type" : "UserHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerAttributionSource",
    "type" : "AppSearchAttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsForEnterprise",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void initialize(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<Void>> callback)",
    "returnType" : "void",
    "comment" : " Once the callback.accept has been called here, the class is ready to use.",
    "links" : [ ]
  }, {
    "name" : "public void getByDocumentId(@NonNull String packageName, @NonNull String databaseName, @NonNull GetByDocumentIdRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull BatchResultCallback<String, GenericDocument> callback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves {@link GenericDocument} documents, belonging to the specified package name and\n     * database name and identified by the namespace and ids in the request, from the {@link\n     * GlobalSearchSession} database.\n     *\n     * <p>If the package or database doesn't exist or if the calling package doesn't have access,\n     * the gets will be handled as failures in an {@link AppSearchBatchResult} object in the\n     * callback.\n     *\n     * @param packageName the name of the package to get from\n     * @param databaseName the name of the database to get from\n     * @param request a request containing a namespace and IDs to get documents for.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive the pending result of performing this operation. The keys\n     *     of the returned {@link AppSearchBatchResult} are the input IDs. The values are the\n     *     returned {@link GenericDocument}s on success, or a failed {@link AppSearchResult}\n     *     otherwise. IDs that are not found will return a failed {@link AppSearchResult} with a\n     *     result code of {@link AppSearchResult#RESULT_NOT_FOUND}. If an unexpected internal error\n     *     occurs in the AppSearch service, {@link BatchResultCallback#onSystemError} will be\n     *     invoked with a {@link Throwable}.\n     ",
    "links" : [ "android.app.appsearch.AppSearchResult", "android.app.appsearch.AppSearchBatchResult", "android.app.appsearch.BatchResultCallback#onSystemError", "android.app.appsearch.AppSearchResult#RESULT_NOT_FOUND", "Throwable", "android.app.appsearch.GenericDocument", "android.app.appsearch.GlobalSearchSession" ]
  }, {
    "name" : "public SearchResults search(@NonNull String queryExpression, @NonNull SearchSpec searchSpec)",
    "returnType" : "SearchResults",
    "comment" : "\n     * Retrieves documents from all AppSearch databases that the querying application has access to.\n     *\n     * <p>Applications can be granted access to documents by specifying {@link\n     * SetSchemaRequest.Builder#setSchemaTypeVisibilityForPackage} when building a schema.\n     *\n     * <p>Document access can also be granted to system UIs by specifying {@link\n     * SetSchemaRequest.Builder#setSchemaTypeDisplayedBySystem} when building a schema.\n     *\n     * <p>See {@link AppSearchSession#search} for a detailed explanation on forming a query string.\n     *\n     * <p>This method is lightweight. The heavy work will be done in {@link\n     * SearchResults#getNextPage}.\n     *\n     * @param queryExpression query string to search.\n     * @param searchSpec spec for setting document filters, adding projection, setting term match\n     *     type, etc.\n     * @return a {@link SearchResults} object for retrieved matched documents.\n     ",
    "links" : [ "SetSchemaRequest.Builder#setSchemaTypeDisplayedBySystem", "android.app.appsearch.SearchResults", "android.app.appsearch.AppSearchSession#search", "android.app.appsearch.SearchResults#getNextPage", "SetSchemaRequest.Builder#setSchemaTypeVisibilityForPackage" ]
  }, {
    "name" : "public void getSchema(@NonNull String packageName, @NonNull String databaseName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<GetSchemaResponse>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves the collection of schemas most recently successfully provided to {@link\n     * AppSearchSession#setSchema} for any types belonging to the requested package and database\n     * that the caller has been granted access to.\n     *\n     * <p>If the requested package/database combination does not exist or the caller has not been\n     * granted access to it, then an empty GetSchemaResponse will be returned.\n     *\n     * @param packageName the package that owns the requested {@link AppSearchSchema} instances.\n     * @param databaseName the database that owns the requested {@link AppSearchSchema} instances.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback The pending {@link GetSchemaResponse} containing the schemas that the caller\n     *     has access to or an empty GetSchemaResponse if the request package and database does not\n     *     exist, has not set a schema or contains no schemas that are accessible to the caller.\n     ",
    "links" : [ "android.app.appsearch.AppSearchSchema", "android.app.appsearch.AppSearchSession#setSchema", "android.app.appsearch.GetSchemaResponse" ]
  }, {
    "name" : "public IAppSearchManager getService()",
    "returnType" : "IAppSearchManager",
    "comment" : "\n     * Returns the service instance to make IPC calls.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isForEnterprise()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if session supports Enterprise flow.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void initialize(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<Void>> callback)", "public void getByDocumentId(@NonNull String packageName, @NonNull String databaseName, @NonNull GetByDocumentIdRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull BatchResultCallback<String, GenericDocument> callback)", "public SearchResults search(@NonNull String queryExpression, @NonNull SearchSpec searchSpec)", "public void getSchema(@NonNull String packageName, @NonNull String databaseName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<GetSchemaResponse>> callback)", "public IAppSearchManager getService()", "public boolean isForEnterprise()" ],
  "variableNames" : [ "mService", "mUserHandle", "mCallerAttributionSource", "mIsForEnterprise" ]
}