{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/SimpleAdapter.java",
  "packageName" : "android.widget",
  "className" : "SimpleAdapter",
  "comment" : "\n * An easy adapter to map static data to views defined in an XML file. You can specify the data\n * backing the list as an ArrayList of Maps. Each entry in the ArrayList corresponds to one row\n * in the list. The Maps contain the data for each row. You also specify an XML file that\n * defines the views used to display the row, and a mapping from keys in the Map to specific\n * views.\n *\n * Binding data to views occurs in two phases. First, if a\n * {@link android.widget.SimpleAdapter.ViewBinder} is available,\n * {@link ViewBinder#setViewValue(android.view.View, Object, String)}\n * is invoked. If the returned value is true, binding has occurred.\n * If the returned value is false, the following views are then tried in order:\n * <ul>\n * <li> A view that implements Checkable (e.g. CheckBox).  The expected bind value is a boolean.\n * <li> TextView.  The expected bind value is a string and {@link #setViewText(TextView, String)}\n * is invoked.\n * <li> ImageView. The expected bind value is a resource id or a string and\n * {@link #setViewImage(ImageView, int)} or {@link #setViewImage(ImageView, String)} is invoked.\n * </ul>\n * If no appropriate binding can be found, an {@link IllegalStateException} is thrown.\n ",
  "variables" : [ {
    "name" : "mInflater",
    "type" : "LayoutInflater",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTo",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrom",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewBinder",
    "type" : "ViewBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mData",
    "type" : "List<? extends Map<String, ?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownInflater",
    "type" : "LayoutInflater",
    "comment" : " Layout inflater used for {@link #getDropDownView(int, View, ViewGroup)}. ",
    "links" : [ "#getDropDownView" ]
  }, {
    "name" : "mFilter",
    "type" : "SimpleFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnfilteredData",
    "type" : "ArrayList<Map<String, ?>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getCount()",
    "returnType" : "int",
    "comment" : "\n     * @see android.widget.Adapter#getCount()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getItem(int position)",
    "returnType" : "Object",
    "comment" : "\n     * @see android.widget.Adapter#getItem(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getItemId(int position)",
    "returnType" : "long",
    "comment" : "\n     * @see android.widget.Adapter#getItemId(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getView(int position, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * @see android.widget.Adapter#getView(int, View, ViewGroup)\n     ",
    "links" : [ ]
  }, {
    "name" : "private View createViewFromResource(LayoutInflater inflater, int position, View convertView, ViewGroup parent, int resource)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownViewResource(int resource)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the layout resource to create the drop down views.</p>\n     *\n     * @param resource the layout resource defining the drop down views\n     * @see #getDropDownView(int, android.view.View, android.view.ViewGroup)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownViewTheme(Resources.Theme theme)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link android.content.res.Resources.Theme} against which drop-down views are\n     * inflated.\n     * <p>\n     * By default, drop-down views are inflated against the theme of the\n     * {@link Context} passed to the adapter's constructor.\n     *\n     * @param theme the theme against which to inflate drop-down views or\n     *              {@code null} to use the theme from the adapter's context\n     * @see #getDropDownView(int, View, ViewGroup)\n     ",
    "links" : [ "android.content.res.Resources.Theme", "Context" ]
  }, {
    "name" : "public Resources.Theme getDropDownViewTheme()",
    "returnType" : "Resources.Theme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getDropDownView(int position, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void bindView(int position, View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ViewBinder getViewBinder()",
    "returnType" : "ViewBinder",
    "comment" : "\n     * Returns the {@link ViewBinder} used to bind data to views.\n     *\n     * @return a ViewBinder or null if the binder does not exist\n     *\n     * @see #setViewBinder(android.widget.SimpleAdapter.ViewBinder)\n     ",
    "links" : [ "ViewBinder" ]
  }, {
    "name" : "public void setViewBinder(ViewBinder viewBinder)",
    "returnType" : "void",
    "comment" : "\n     * Sets the binder used to bind data to views.\n     *\n     * @param viewBinder the binder used to bind data to views, can be null to\n     *        remove the existing binder\n     *\n     * @see #getViewBinder()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setViewImage(ImageView v, int value)",
    "returnType" : "void",
    "comment" : "\n     * Called by bindView() to set the image for an ImageView but only if\n     * there is no existing ViewBinder or if the existing ViewBinder cannot\n     * handle binding to an ImageView.\n     *\n     * This method is called instead of {@link #setViewImage(ImageView, String)}\n     * if the supplied data is an int or Integer.\n     *\n     * @param v ImageView to receive an image\n     * @param value the value retrieved from the data set\n     *\n     * @see #setViewImage(ImageView, String)\n     ",
    "links" : [ "#setViewImage" ]
  }, {
    "name" : "public void setViewImage(ImageView v, String value)",
    "returnType" : "void",
    "comment" : "\n     * Called by bindView() to set the image for an ImageView but only if\n     * there is no existing ViewBinder or if the existing ViewBinder cannot\n     * handle binding to an ImageView.\n     *\n     * By default, the value will be treated as an image resource. If the\n     * value cannot be used as an image resource, the value is used as an\n     * image Uri.\n     *\n     * This method is called instead of {@link #setViewImage(ImageView, int)}\n     * if the supplied data is not an int or Integer.\n     *\n     * @param v ImageView to receive an image\n     * @param value the value retrieved from the data set\n     *\n     * @see #setViewImage(ImageView, int)\n     ",
    "links" : [ "#setViewImage" ]
  }, {
    "name" : "public void setViewText(TextView v, String text)",
    "returnType" : "void",
    "comment" : "\n     * Called by bindView() to set the text for a TextView but only if\n     * there is no existing ViewBinder or if the existing ViewBinder cannot\n     * handle binding to a TextView.\n     *\n     * @param v TextView to receive text\n     * @param text the text to be set for the TextView\n     ",
    "links" : [ ]
  }, {
    "name" : "public Filter getFilter()",
    "returnType" : "Filter",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mInflater", "mTo", "mFrom", "mViewBinder", "mData", "mResource", "mDropDownResource", "mDropDownInflater", "mFilter", "mUnfilteredData" ],
  "methodNames" : [ "public int getCount()", "public Object getItem(int position)", "public long getItemId(int position)", "public View getView(int position, View convertView, ViewGroup parent)", "private View createViewFromResource(LayoutInflater inflater, int position, View convertView, ViewGroup parent, int resource)", "public void setDropDownViewResource(int resource)", "public void setDropDownViewTheme(Resources.Theme theme)", "public Resources.Theme getDropDownViewTheme()", "public View getDropDownView(int position, View convertView, ViewGroup parent)", "private void bindView(int position, View view)", "public ViewBinder getViewBinder()", "public void setViewBinder(ViewBinder viewBinder)", "public void setViewImage(ImageView v, int value)", "public void setViewImage(ImageView v, String value)", "public void setViewText(TextView v, String text)", "public Filter getFilter()" ]
}