{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/StreamSupport.java",
  "packageName" : "java.util.stream",
  "className" : "StreamSupport",
  "comment" : "\n * Low-level utility methods for creating and manipulating streams.\n *\n * <p>This class is mostly for library writers presenting stream views\n * of data structures; most static stream methods intended for end users are in\n * the various {@code Stream} classes.\n *\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Stream<T> stream(Spliterator<T> spliterator, boolean parallel)",
    "returnType" : "Stream<T>",
    "comment" : "\n     * Creates a new sequential or parallel {@code Stream} from a\n     * {@code Spliterator}.\n     *\n     * <p>The spliterator is only traversed, split, or queried for estimated\n     * size after the terminal operation of the stream pipeline commences.\n     *\n     * <p>It is strongly recommended the spliterator report a characteristic of\n     * {@code IMMUTABLE} or {@code CONCURRENT}, or be\n     * <a href=\"../Spliterator.html#binding\">late-binding</a>.  Otherwise,\n     * {@link #stream(java.util.function.Supplier, int, boolean)} should be used\n     * to reduce the scope of potential interference with the source.  See\n     * <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n     * more details.\n     *\n     * @param <T> the type of stream elements\n     * @param spliterator a {@code Spliterator} describing the stream elements\n     * @param parallel if {@code true} then the returned stream is a parallel\n     *        stream; if {@code false} the returned stream is a sequential\n     *        stream.\n     * @return a new sequential or parallel {@code Stream}\n     ",
    "links" : [ "#stream(java.util.function.Supplier" ]
  }, {
    "name" : "public static Stream<T> stream(Supplier<? extends Spliterator<T>> supplier, int characteristics, boolean parallel)",
    "returnType" : "Stream<T>",
    "comment" : "\n     * Creates a new sequential or parallel {@code Stream} from a\n     * {@code Supplier} of {@code Spliterator}.\n     *\n     * <p>The {@link Supplier#get()} method will be invoked on the supplier no\n     * more than once, and only after the terminal operation of the stream pipeline\n     * commences.\n     *\n     * <p>For spliterators that report a characteristic of {@code IMMUTABLE}\n     * or {@code CONCURRENT}, or that are\n     * <a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely\n     * more efficient to use {@link #stream(java.util.Spliterator, boolean)}\n     * instead.\n     * <p>The use of a {@code Supplier} in this form provides a level of\n     * indirection that reduces the scope of potential interference with the\n     * source.  Since the supplier is only invoked after the terminal operation\n     * commences, any modifications to the source up to the start of the\n     * terminal operation are reflected in the stream result.  See\n     * <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n     * more details.\n     *\n     * @param <T> the type of stream elements\n     * @param supplier a {@code Supplier} of a {@code Spliterator}\n     * @param characteristics Spliterator characteristics of the supplied\n     *        {@code Spliterator}.  The characteristics must be equal to\n     *        {@code supplier.get().characteristics()}, otherwise undefined\n     *        behavior may occur when terminal operation commences.\n     * @param parallel if {@code true} then the returned stream is a parallel\n     *        stream; if {@code false} the returned stream is a sequential\n     *        stream.\n     * @return a new sequential or parallel {@code Stream}\n     * @see #stream(java.util.Spliterator, boolean)\n     ",
    "links" : [ "#stream(java.util.Spliterator", "java.util.function.Supplier#get()" ]
  }, {
    "name" : "public static IntStream intStream(Spliterator.OfInt spliterator, boolean parallel)",
    "returnType" : "IntStream",
    "comment" : "\n     * Creates a new sequential or parallel {@code IntStream} from a\n     * {@code Spliterator.OfInt}.\n     *\n     * <p>The spliterator is only traversed, split, or queried for estimated size\n     * after the terminal operation of the stream pipeline commences.\n     *\n     * <p>It is strongly recommended the spliterator report a characteristic of\n     * {@code IMMUTABLE} or {@code CONCURRENT}, or be\n     * <a href=\"../Spliterator.html#binding\">late-binding</a>.  Otherwise,\n     * {@link #intStream(java.util.function.Supplier, int, boolean)} should be\n     * used to reduce the scope of potential interference with the source.  See\n     * <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n     * more details.\n     *\n     * @param spliterator a {@code Spliterator.OfInt} describing the stream elements\n     * @param parallel if {@code true} then the returned stream is a parallel\n     *        stream; if {@code false} the returned stream is a sequential\n     *        stream.\n     * @return a new sequential or parallel {@code IntStream}\n     ",
    "links" : [ "#intStream(java.util.function.Supplier" ]
  }, {
    "name" : "public static IntStream intStream(Supplier<? extends Spliterator.OfInt> supplier, int characteristics, boolean parallel)",
    "returnType" : "IntStream",
    "comment" : "\n     * Creates a new sequential or parallel {@code IntStream} from a\n     * {@code Supplier} of {@code Spliterator.OfInt}.\n     *\n     * <p>The {@link Supplier#get()} method will be invoked on the supplier no\n     * more than once, and only after the terminal operation of the stream pipeline\n     * commences.\n     *\n     * <p>For spliterators that report a characteristic of {@code IMMUTABLE}\n     * or {@code CONCURRENT}, or that are\n     * <a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely\n     * more efficient to use {@link #intStream(java.util.Spliterator.OfInt, boolean)}\n     * instead.\n     * <p>The use of a {@code Supplier} in this form provides a level of\n     * indirection that reduces the scope of potential interference with the\n     * source.  Since the supplier is only invoked after the terminal operation\n     * commences, any modifications to the source up to the start of the\n     * terminal operation are reflected in the stream result.  See\n     * <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n     * more details.\n     *\n     * @param supplier a {@code Supplier} of a {@code Spliterator.OfInt}\n     * @param characteristics Spliterator characteristics of the supplied\n     *        {@code Spliterator.OfInt}.  The characteristics must be equal to\n     *        {@code supplier.get().characteristics()}, otherwise undefined\n     *        behavior may occur when terminal operation commences.\n     * @param parallel if {@code true} then the returned stream is a parallel\n     *        stream; if {@code false} the returned stream is a sequential\n     *        stream.\n     * @return a new sequential or parallel {@code IntStream}\n     * @see #intStream(java.util.Spliterator.OfInt, boolean)\n     ",
    "links" : [ "java.util.function.Supplier#get()", "#intStream(java.util.Spliterator.OfInt" ]
  }, {
    "name" : "public static LongStream longStream(Spliterator.OfLong spliterator, boolean parallel)",
    "returnType" : "LongStream",
    "comment" : "\n     * Creates a new sequential or parallel {@code LongStream} from a\n     * {@code Spliterator.OfLong}.\n     *\n     * <p>The spliterator is only traversed, split, or queried for estimated\n     * size after the terminal operation of the stream pipeline commences.\n     *\n     * <p>It is strongly recommended the spliterator report a characteristic of\n     * {@code IMMUTABLE} or {@code CONCURRENT}, or be\n     * <a href=\"../Spliterator.html#binding\">late-binding</a>.  Otherwise,\n     * {@link #longStream(java.util.function.Supplier, int, boolean)} should be\n     * used to reduce the scope of potential interference with the source.  See\n     * <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n     * more details.\n     *\n     * @param spliterator a {@code Spliterator.OfLong} describing the stream elements\n     * @param parallel if {@code true} then the returned stream is a parallel\n     *        stream; if {@code false} the returned stream is a sequential\n     *        stream.\n     * @return a new sequential or parallel {@code LongStream}\n     ",
    "links" : [ "#longStream(java.util.function.Supplier" ]
  }, {
    "name" : "public static LongStream longStream(Supplier<? extends Spliterator.OfLong> supplier, int characteristics, boolean parallel)",
    "returnType" : "LongStream",
    "comment" : "\n     * Creates a new sequential or parallel {@code LongStream} from a\n     * {@code Supplier} of {@code Spliterator.OfLong}.\n     *\n     * <p>The {@link Supplier#get()} method will be invoked on the supplier no\n     * more than once, and only after the terminal operation of the stream pipeline\n     * commences.\n     *\n     * <p>For spliterators that report a characteristic of {@code IMMUTABLE}\n     * or {@code CONCURRENT}, or that are\n     * <a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely\n     * more efficient to use {@link #longStream(java.util.Spliterator.OfLong, boolean)}\n     * instead.\n     * <p>The use of a {@code Supplier} in this form provides a level of\n     * indirection that reduces the scope of potential interference with the\n     * source.  Since the supplier is only invoked after the terminal operation\n     * commences, any modifications to the source up to the start of the\n     * terminal operation are reflected in the stream result.  See\n     * <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n     * more details.\n     *\n     * @param supplier a {@code Supplier} of a {@code Spliterator.OfLong}\n     * @param characteristics Spliterator characteristics of the supplied\n     *        {@code Spliterator.OfLong}.  The characteristics must be equal to\n     *        {@code supplier.get().characteristics()}, otherwise undefined\n     *        behavior may occur when terminal operation commences.\n     * @param parallel if {@code true} then the returned stream is a parallel\n     *        stream; if {@code false} the returned stream is a sequential\n     *        stream.\n     * @return a new sequential or parallel {@code LongStream}\n     * @see #longStream(java.util.Spliterator.OfLong, boolean)\n     ",
    "links" : [ "#longStream(java.util.Spliterator.OfLong", "java.util.function.Supplier#get()" ]
  }, {
    "name" : "public static DoubleStream doubleStream(Spliterator.OfDouble spliterator, boolean parallel)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Creates a new sequential or parallel {@code DoubleStream} from a\n     * {@code Spliterator.OfDouble}.\n     *\n     * <p>The spliterator is only traversed, split, or queried for estimated size\n     * after the terminal operation of the stream pipeline commences.\n     *\n     * <p>It is strongly recommended the spliterator report a characteristic of\n     * {@code IMMUTABLE} or {@code CONCURRENT}, or be\n     * <a href=\"../Spliterator.html#binding\">late-binding</a>.  Otherwise,\n     * {@link #doubleStream(java.util.function.Supplier, int, boolean)} should\n     * be used to reduce the scope of potential interference with the source.  See\n     * <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n     * more details.\n     *\n     * @param spliterator A {@code Spliterator.OfDouble} describing the stream elements\n     * @param parallel if {@code true} then the returned stream is a parallel\n     *        stream; if {@code false} the returned stream is a sequential\n     *        stream.\n     * @return a new sequential or parallel {@code DoubleStream}\n     ",
    "links" : [ "#doubleStream(java.util.function.Supplier" ]
  }, {
    "name" : "public static DoubleStream doubleStream(Supplier<? extends Spliterator.OfDouble> supplier, int characteristics, boolean parallel)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Creates a new sequential or parallel {@code DoubleStream} from a\n     * {@code Supplier} of {@code Spliterator.OfDouble}.\n     *\n     * <p>The {@link Supplier#get()} method will be invoked on the supplier no\n     * more than once, and only after the terminal operation of the stream pipeline\n     * commences.\n     *\n     * <p>For spliterators that report a characteristic of {@code IMMUTABLE}\n     * or {@code CONCURRENT}, or that are\n     * <a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely\n     * more efficient to use {@link #doubleStream(java.util.Spliterator.OfDouble, boolean)}\n     * instead.\n     * <p>The use of a {@code Supplier} in this form provides a level of\n     * indirection that reduces the scope of potential interference with the\n     * source.  Since the supplier is only invoked after the terminal operation\n     * commences, any modifications to the source up to the start of the\n     * terminal operation are reflected in the stream result.  See\n     * <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n     * more details.\n     *\n     * @param supplier A {@code Supplier} of a {@code Spliterator.OfDouble}\n     * @param characteristics Spliterator characteristics of the supplied\n     *        {@code Spliterator.OfDouble}.  The characteristics must be equal to\n     *        {@code supplier.get().characteristics()}, otherwise undefined\n     *        behavior may occur when terminal operation commences.\n     * @param parallel if {@code true} then the returned stream is a parallel\n     *        stream; if {@code false} the returned stream is a sequential\n     *        stream.\n     * @return a new sequential or parallel {@code DoubleStream}\n     * @see #doubleStream(java.util.Spliterator.OfDouble, boolean)\n     ",
    "links" : [ "java.util.function.Supplier#get()", "#doubleStream(java.util.Spliterator.OfDouble" ]
  } ],
  "methodNames" : [ "public static Stream<T> stream(Spliterator<T> spliterator, boolean parallel)", "public static Stream<T> stream(Supplier<? extends Spliterator<T>> supplier, int characteristics, boolean parallel)", "public static IntStream intStream(Spliterator.OfInt spliterator, boolean parallel)", "public static IntStream intStream(Supplier<? extends Spliterator.OfInt> supplier, int characteristics, boolean parallel)", "public static LongStream longStream(Spliterator.OfLong spliterator, boolean parallel)", "public static LongStream longStream(Supplier<? extends Spliterator.OfLong> supplier, int characteristics, boolean parallel)", "public static DoubleStream doubleStream(Spliterator.OfDouble spliterator, boolean parallel)", "public static DoubleStream doubleStream(Supplier<? extends Spliterator.OfDouble> supplier, int characteristics, boolean parallel)" ],
  "variableNames" : [ ]
}