{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/DTMDefaultBaseTraversers.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "DescendantFromRootTraverser",
  "comment" : "\n   * A non-xpath axis, returns all nodes that aren't namespaces or attributes,\n   * from but not including the root.\n   ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected int getFirstPotential(int identity)",
    "returnType" : "int",
    "comment" : "\n     * Get the first potential identity that can be returned, which is the axis \n     * root context in this case.\n     *\n     * @param identity The node identity of the root context of the traversal.\n     *\n     * @return The identity argument.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getSubtreeRoot(int handle)",
    "returnType" : "int",
    "comment" : "\n     * Get the first potential identity that can be returned.\n     * @param handle handle to the root context.\n     * @return identity of the root of the subtree.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int first(int context)",
    "returnType" : "int",
    "comment" : "\n     * Return the root.\n     *\n     * @param context The context node of this traversal.\n     *\n     * @return the first node in the traversal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int first(int context, int expandedTypeID)",
    "returnType" : "int",
    "comment" : "\n     * By the nature of the stateless traversal, the context node can not be\n     * returned or the iteration will go into an infinate loop.  So to traverse\n     * an axis, the first function must be used to get the first node.\n     *\n     * <p>This method needs to be overloaded only by those axis that process\n     * the self node. <\\p>\n     *\n     * @param context The context node of this traversal. This is the point\n     * of origin for the traversal -- its \"root node\" or starting point.\n     * @param expandedTypeID The expanded type ID that must match.\n     *\n     * @return the first node in the traversal.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected int getFirstPotential(int identity)", "protected int getSubtreeRoot(int handle)", "public int first(int context)", "public int first(int context, int expandedTypeID)" ],
  "variableNames" : [ ]
}