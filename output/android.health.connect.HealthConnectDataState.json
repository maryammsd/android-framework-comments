{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/health/connect/HealthConnectDataState.java",
  "packageName" : "android.health.connect",
  "className" : "HealthConnectDataState",
  "comment" : "\n * Represents the state of HealthConnect data as it goes through one of the following operations:\n * <li>Data Restore: fetching and restoring the data either from the cloud or from another device.\n * <li>Data Migration: migrating the data from the app using the data-migration APIs: {@link\n *     HealthConnectManager#startMigration}, {@link HealthConnectManager#writeMigrationData}, and\n *     {@link HealthConnectManager#finishMigration}\n *\n * @hide\n ",
  "links" : [ "android.health.connect.HealthConnectManager#finishMigration", "android.health.connect.HealthConnectManager#startMigration", "android.health.connect.HealthConnectManager#writeMigrationData" ],
  "variables" : [ {
    "name" : "RESTORE_STATE_IDLE",
    "type" : "int",
    "comment" : "\n     * The default idle state of HealthConnect data restore process. This states means that nothing\n     * related to the data restore process is undergoing. {@link #getDataRestoreError()} could\n     * return an error for previous restoration attempt.\n     *\n     * <p>See also {@link DataRestoreState}\n     *\n     * @hide\n     ",
    "links" : [ "#getDataRestoreError()", "DataRestoreState" ]
  }, {
    "name" : "RESTORE_STATE_PENDING",
    "type" : "int",
    "comment" : "\n     * The HealthConnect data is pending restoration. The system is in the process of fetching /\n     * staging the remote data on this device. Once the data has been fetched and staged for\n     * restoration an attempt will be made to restore the data. So, this will follow with {@link\n     * #RESTORE_STATE_IN_PROGRESS} state.\n     *\n     * <p>See also {@link DataRestoreState}\n     *\n     * @hide\n     ",
    "links" : [ "#RESTORE_STATE_IN_PROGRESS", "DataRestoreState" ]
  }, {
    "name" : "RESTORE_STATE_IN_PROGRESS",
    "type" : "int",
    "comment" : "\n     * The HealthConnect staged data is being restored. On a successful restore the data will be\n     * available for use on this device.\n     *\n     * <p>After the restore process is finished, we'll come back to the {@link #RESTORE_STATE_IDLE}.\n     *\n     * <p>See also {@link DataRestoreState}\n     *\n     * @hide\n     ",
    "links" : [ "#RESTORE_STATE_IDLE", "DataRestoreState" ]
  }, {
    "name" : "RESTORE_ERROR_NONE",
    "type" : "int",
    "comment" : "\n     * No error.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESTORE_ERROR_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * An unknown error caused a failure in restoring the data.\n     *\n     * <p>This is a non-recoverable error.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESTORE_ERROR_FETCHING_DATA",
    "type" : "int",
    "comment" : "\n     * An error was encountered fetching the remote HealthConnect data.\n     *\n     * <p>This is a non-recoverable error.\n     *\n     * <p>For instance, this could have been caused by a network issue leading to download failure.\n     * In such a case a retry would've been attempted, but eventually that failed as well.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESTORE_ERROR_VERSION_DIFF",
    "type" : "int",
    "comment" : "\n     * The fetched remote data could not be restored because the current HealthConnect version on\n     * the device is behind the staged data version.\n     *\n     * <p>This is a recoverable error.\n     *\n     * <p>Until the module has been updated we'll be waiting in the {@link #RESTORE_STATE_PENDING}\n     * state. Once the HealthConnect version on the device is updated and rebooted then the restore\n     * will be attempted on the same device reboot.\n     *\n     * @hide\n     ",
    "links" : [ "#RESTORE_STATE_PENDING" ]
  }, {
    "name" : "MIGRATION_STATE_IDLE",
    "type" : "int",
    "comment" : "\n     * The starting default state for the Migration process.\n     *\n     * <p>We'll begin in this state irrespective of whether there's an app installed that can\n     * perform Migration. If there's no such app installed then we stay in this state. However, if\n     * an installed app can be upgraded to become Migration-aware, then we'll move to the {@link\n     * #MIGRATION_STATE_APP_UPGRADE_REQUIRED} state. Please see {@link\n     * #MIGRATION_STATE_APP_UPGRADE_REQUIRED} for more info.\n     *\n     * <p>See also {@link DataMigrationState}\n     *\n     * @hide\n     ",
    "links" : [ "DataMigrationState", "#MIGRATION_STATE_APP_UPGRADE_REQUIRED" ]
  }, {
    "name" : "MIGRATION_STATE_APP_UPGRADE_REQUIRED",
    "type" : "int",
    "comment" : "\n     * This reflects that the app needs an upgrade before it can start the Migration process.\n     *\n     * <p>This happens when the module finds out that there's an installed app that can perform the\n     * Migration process once it has been upgraded to the correct version. Once such an app is\n     * available then we'll move back to the {@link #MIGRATION_STATE_IDLE} state.\n     *\n     * <p>We can come here only from the {@link #MIGRATION_STATE_IDLE} state.\n     *\n     * <p>See also {@link DataMigrationState}\n     *\n     * @hide\n     ",
    "links" : [ "#MIGRATION_STATE_IDLE", "DataMigrationState" ]
  }, {
    "name" : "MIGRATION_STATE_MODULE_UPGRADE_REQUIRED",
    "type" : "int",
    "comment" : "\n     * This reflects that the module needs an upgrade to handle the Migration process.\n     *\n     * <p>This happens when the version set by the caller is ahead of the HealthConnect module. Once\n     * the module has updated to a version greater or equal to the said set version, then we'll move\n     * to the {@link #MIGRATION_STATE_ALLOWED} state from where the Migration process can start.\n     *\n     * <p>We can come here only from the {@link #MIGRATION_STATE_IDLE} state.\n     *\n     * <p>See also {@link DataMigrationState}\n     *\n     * @hide\n     ",
    "links" : [ "#MIGRATION_STATE_IDLE", "DataMigrationState", "#MIGRATION_STATE_ALLOWED" ]
  }, {
    "name" : "MIGRATION_STATE_IN_PROGRESS",
    "type" : "int",
    "comment" : "\n     * We are in the process of integrating the data shared by the app using the {@link\n     * HealthConnectManager#writeMigrationData} API.\n     *\n     * <p>We get into this state when the app makes the {@link HealthConnectManager#startMigration}\n     * call.\n     *\n     * <p>We can come here from either {@link #MIGRATION_STATE_ALLOWED} or {@link\n     * #MIGRATION_STATE_IDLE} states when {@link HealthConnectManager#startMigration} is called.\n     *\n     * <p>From here we can go to either {@link #MIGRATION_STATE_ALLOWED} OR {@link\n     * #MIGRATION_STATE_COMPLETE} state.\n     *\n     * <p>All other HealthConnect APIs unrelated to Migration are blocked while we are in this\n     * state. For more info on this please see\n     *\n     * <p>See also {@link DataMigrationState}\n     *\n     * @hide\n     ",
    "links" : [ "#MIGRATION_STATE_IDLE", "DataMigrationState", "android.health.connect.HealthConnectManager#startMigration", "#MIGRATION_STATE_ALLOWED", "#MIGRATION_STATE_COMPLETE", "android.health.connect.HealthConnectManager#writeMigrationData" ]
  }, {
    "name" : "MIGRATION_STATE_ALLOWED",
    "type" : "int",
    "comment" : "\n     * The Migration is now allowed and is waiting to start or resume.\n     *\n     * <p>We can come to this state from any of the following states:\n     *\n     * <ul>\n     *   <li>{@link #MIGRATION_STATE_IDLE} if the module is ready to\n     *   <li>{@link #MIGRATION_STATE_MODULE_UPGRADE_REQUIRED} when the module upgrades to the\n     *       minimum required version.\n     *   <li>{@link #MIGRATION_STATE_IN_PROGRESS} in case of a timeout of 12 hours.\n     * </ul>\n     *\n     * <p>From this state we can go to either {@link #MIGRATION_STATE_IN_PROGRESS} or {@link\n     * #MIGRATION_STATE_COMPLETE} (in case of timeout of 15 days).\n     *\n     * <p>See also {@link DataMigrationState}\n     *\n     * @hide\n     ",
    "links" : [ "#MIGRATION_STATE_IDLE", "DataMigrationState", "#MIGRATION_STATE_MODULE_UPGRADE_REQUIRED", "#MIGRATION_STATE_IN_PROGRESS", "#MIGRATION_STATE_COMPLETE" ]
  }, {
    "name" : "MIGRATION_STATE_COMPLETE",
    "type" : "int",
    "comment" : "\n     * This is the final state for the Migration process. We can come here from any other state:\n     *\n     * <ul>\n     *   <li>From {@link #MIGRATION_STATE_IDLE} after a timeout of 30 days.\n     *   <li>From {@link #MIGRATION_STATE_MODULE_UPGRADE_REQUIRED} after a timeout of 15 days.\n     *   <li>From {@link #MIGRATION_STATE_IN_PROGRESS} when {@link\n     *       HealthConnectManager#finishMigration} is called.\n     *   <li>From {@link #MIGRATION_STATE_ALLOWED} after a timeout of 15 days.\n     * </ul>\n     *\n     * <p>See also {@link DataMigrationState}\n     *\n     * @hide\n     ",
    "links" : [ "#MIGRATION_STATE_IDLE", "DataMigrationState", "#MIGRATION_STATE_MODULE_UPGRADE_REQUIRED", "android.health.connect.HealthConnectManager#finishMigration", "#MIGRATION_STATE_ALLOWED", "#MIGRATION_STATE_IN_PROGRESS" ]
  }, {
    "name" : "mDataRestoreState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataRestoreError",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataMigrationState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<HealthConnectDataState>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getDataRestoreState()",
    "returnType" : "int",
    "comment" : "\n     * The state of the HealthConnect data as it goes through the Data Restore process.\n     *\n     * <p>See also {@link DataRestoreState}\n     ",
    "links" : [ "DataRestoreState" ]
  }, {
    "name" : "public int getDataRestoreError()",
    "returnType" : "int",
    "comment" : "\n     * Get error encountered at the time of calling this API as we try to fetch and restore the\n     * remote HealthConnect data.\n     *\n     * <p>Since we stop at the first encounter of an error there can be only one error at any time.\n     *\n     * <p>Some of the errors are recoverable while others are non-recoverable. Please see {@link\n     * DataRestoreError} for more details on which errors are recoverable and how to recover from\n     * them.\n     ",
    "links" : [ "DataRestoreError" ]
  }, {
    "name" : "public int getDataMigrationState()",
    "returnType" : "int",
    "comment" : "\n     * The state of the HealthConnect data as it goes through the Data Migration process.\n     *\n     * <p>See also {@link DataMigrationState}\n     ",
    "links" : [ "DataMigrationState" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getDataRestoreState()", "public int getDataRestoreError()", "public int getDataMigrationState()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "RESTORE_STATE_IDLE", "RESTORE_STATE_PENDING", "RESTORE_STATE_IN_PROGRESS", "RESTORE_ERROR_NONE", "RESTORE_ERROR_UNKNOWN", "RESTORE_ERROR_FETCHING_DATA", "RESTORE_ERROR_VERSION_DIFF", "MIGRATION_STATE_IDLE", "MIGRATION_STATE_APP_UPGRADE_REQUIRED", "MIGRATION_STATE_MODULE_UPGRADE_REQUIRED", "MIGRATION_STATE_IN_PROGRESS", "MIGRATION_STATE_ALLOWED", "MIGRATION_STATE_COMPLETE", "mDataRestoreState", "mDataRestoreError", "mDataMigrationState", "CREATOR" ]
}