{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/NodeVector.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "NodeVector",
  "comment" : "\n * A very simple table that stores a list of Nodes.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_blocksize",
    "type" : "int",
    "comment" : "\n   * Size of blocks to allocate.\n   *  @serial          \n   ",
    "links" : [ ]
  }, {
    "name" : "m_map",
    "type" : "int[]",
    "comment" : "\n   * Array of nodes this points to.\n   *  @serial          \n   ",
    "links" : [ ]
  }, {
    "name" : "m_firstFree",
    "type" : "int",
    "comment" : "\n   * Number of nodes in this NodeVector.\n   *  @serial          \n   ",
    "links" : [ ]
  }, {
    "name" : "m_mapSize",
    "type" : "int",
    "comment" : " lazy initialization",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Get a cloned LocPathIterator.\n   *\n   * @return A clone of this\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n   * Get the length of the list.\n   *\n   * @return Number of nodes in this NodeVector\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addElement(int value)",
    "returnType" : "void",
    "comment" : "\n   * Append a Node onto the vector.\n   *\n   * @param value Node to add to the vector\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void push(int value)",
    "returnType" : "void",
    "comment" : "\n   * Append a Node onto the vector.\n   *\n   * @param value Node to add to the vector\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int pop()",
    "returnType" : "int",
    "comment" : "\n   * Pop a node from the tail of the vector and return the result.\n   *\n   * @return the node at the tail of the vector\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int popAndTop()",
    "returnType" : "int",
    "comment" : "\n   * Pop a node from the tail of the vector and return the\n   * top of the stack after the pop.\n   *\n   * @return The top of the stack after it's been popped\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popQuick()",
    "returnType" : "void",
    "comment" : "\n   * Pop a node from the tail of the vector.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int peepOrNull()",
    "returnType" : "int",
    "comment" : "\n   * Return the node at the top of the stack without popping the stack.\n   * Special purpose method for TransformerImpl, pushElemTemplateElement.\n   * Performance critical.\n   *\n   * @return Node at the top of the stack or null if stack is empty.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void pushPair(int v1, int v2)",
    "returnType" : "void",
    "comment" : "\n   * Push a pair of nodes into the stack.\n   * Special purpose method for TransformerImpl, pushElemTemplateElement.\n   * Performance critical.\n   *\n   * @param v1 First node to add to vector\n   * @param v2 Second node to add to vector\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popPair()",
    "returnType" : "void",
    "comment" : "\n   * Pop a pair of nodes from the tail of the stack.\n   * Special purpose method for TransformerImpl, pushElemTemplateElement.\n   * Performance critical.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setTail(int n)",
    "returnType" : "void",
    "comment" : "\n   * Set the tail of the stack to the given node.\n   * Special purpose method for TransformerImpl, pushElemTemplateElement.\n   * Performance critical.\n   *\n   * @param n Node to set at the tail of vector\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setTailSub1(int n)",
    "returnType" : "void",
    "comment" : "\n   * Set the given node one position from the tail.\n   * Special purpose method for TransformerImpl, pushElemTemplateElement.\n   * Performance critical.\n   *\n   * @param n Node to set\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int peepTail()",
    "returnType" : "int",
    "comment" : "\n   * Return the node at the tail of the vector without popping\n   * Special purpose method for TransformerImpl, pushElemTemplateElement.\n   * Performance critical.\n   *\n   * @return Node at the tail of the vector\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int peepTailSub1()",
    "returnType" : "int",
    "comment" : "\n   * Return the node one position from the tail without popping.\n   * Special purpose method for TransformerImpl, pushElemTemplateElement.\n   * Performance critical.\n   *\n   * @return Node one away from the tail\n   ",
    "links" : [ ]
  }, {
    "name" : "public void insertInOrder(int value)",
    "returnType" : "void",
    "comment" : "\n   * Insert a node in order in the list.\n   *\n   * @param value Node to insert\n   ",
    "links" : [ ]
  }, {
    "name" : "public void insertElementAt(int value, int at)",
    "returnType" : "void",
    "comment" : "\n   * Inserts the specified node in this vector at the specified index.\n   * Each component in this vector with an index greater or equal to\n   * the specified index is shifted upward to have an index one greater\n   * than the value it had previously.\n   *\n   * @param value Node to insert\n   * @param at Position where to insert\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendNodes(NodeVector nodes)",
    "returnType" : "void",
    "comment" : "\n   * Append the nodes to the list.\n   *\n   * @param nodes NodeVector to append to this list\n   ",
    "links" : [ ]
  }, {
    "name" : "public void removeAllElements()",
    "returnType" : "void",
    "comment" : "\n   * Inserts the specified node in this vector at the specified index.\n   * Each component in this vector with an index greater or equal to\n   * the specified index is shifted upward to have an index one greater\n   * than the value it had previously.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void RemoveAllNoClear()",
    "returnType" : "void",
    "comment" : "\n   * Set the length to zero, but don't clear the array.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeElement(int s)",
    "returnType" : "boolean",
    "comment" : "\n   * Removes the first occurrence of the argument from this vector.\n   * If the object is found in this vector, each component in the vector\n   * with an index greater or equal to the object's index is shifted\n   * downward to have an index one smaller than the value it had\n   * previously.\n   *\n   * @param s Node to remove from the list\n   *\n   * @return True if the node was successfully removed\n   ",
    "links" : [ ]
  }, {
    "name" : "public void removeElementAt(int i)",
    "returnType" : "void",
    "comment" : "\n   * Deletes the component at the specified index. Each component in\n   * this vector with an index greater or equal to the specified\n   * index is shifted downward to have an index one smaller than\n   * the value it had previously.\n   *\n   * @param i Index of node to remove\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setElementAt(int node, int index)",
    "returnType" : "void",
    "comment" : "\n   * Sets the component at the specified index of this vector to be the\n   * specified object. The previous component at that position is discarded.\n   *\n   * The index must be a value greater than or equal to 0 and less\n   * than the current size of the vector.\n   *\n   * @param node Node to set\n   * @param index Index of where to set the node\n   ",
    "links" : [ ]
  }, {
    "name" : "public int elementAt(int i)",
    "returnType" : "int",
    "comment" : "\n   * Get the nth element.\n   *\n   * @param i Index of node to get\n   *\n   * @return Node at specified index\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(int s)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the table contains the given node.\n   *\n   * @param s Node to look for\n   *\n   * @return True if the given node was found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(int elem, int index)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the first occurence of the given argument,\n   * beginning the search at index, and testing for equality\n   * using the equals method.\n   *\n   * @param elem Node to look for\n   * @param index Index of where to start the search\n   * @return the index of the first occurrence of the object\n   * argument in this vector at position index or later in the\n   * vector; returns -1 if the object is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(int elem)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the first occurence of the given argument,\n   * beginning the search at index, and testing for equality\n   * using the equals method.\n   *\n   * @param elem Node to look for\n   * @return the index of the first occurrence of the object\n   * argument in this vector at position index or later in the\n   * vector; returns -1 if the object is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void sort(int[] a, int lo0, int hi0) throws Exception",
    "returnType" : "void",
    "comment" : "\n   * Sort an array using a quicksort algorithm.\n   *\n   * @param a The array to be sorted.\n   * @param lo0  The low index.\n   * @param hi0  The high index.\n   *\n   * @throws Exception\n   ",
    "links" : [ ]
  }, {
    "name" : "public void sort() throws Exception",
    "returnType" : "void",
    "comment" : "\n   * Sort an array using a quicksort algorithm.\n   *\n   * @throws Exception\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object clone() throws CloneNotSupportedException", "public int size()", "public void addElement(int value)", "public final void push(int value)", "public final int pop()", "public final int popAndTop()", "public final void popQuick()", "public final int peepOrNull()", "public final void pushPair(int v1, int v2)", "public final void popPair()", "public final void setTail(int n)", "public final void setTailSub1(int n)", "public final int peepTail()", "public final int peepTailSub1()", "public void insertInOrder(int value)", "public void insertElementAt(int value, int at)", "public void appendNodes(NodeVector nodes)", "public void removeAllElements()", "public void RemoveAllNoClear()", "public boolean removeElement(int s)", "public void removeElementAt(int i)", "public void setElementAt(int node, int index)", "public int elementAt(int i)", "public boolean contains(int s)", "public int indexOf(int elem, int index)", "public int indexOf(int elem)", "public void sort(int[] a, int lo0, int hi0) throws Exception", "public void sort() throws Exception" ],
  "variableNames" : [ "serialVersionUID", "m_blocksize", "m_map", "m_firstFree", "m_mapSize" ]
}