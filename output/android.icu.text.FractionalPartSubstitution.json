{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/NFSubstitution.java",
  "packageName" : "android.icu.text",
  "className" : "FractionalPartSubstitution",
  "comment" : "\n * A substitution that formats the fractional part of a number.  This is\n * represented by &gt;&gt; in a fraction rule.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "byDigits",
    "type" : "boolean",
    "comment" : "\n     * true if this substitution should have the default \"by digits\"\n     * behavior, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "useSpaces",
    "type" : "boolean",
    "comment" : "\n     * true if we automatically insert spaces to separate names of digits\n     * set to false by '>>>' in fraction rules, used by Thai.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void doSubstitution(double number, StringBuilder toInsertInto, int position, int recursionCount)",
    "returnType" : "void",
    "comment" : "\n     * If in \"by digits\" mode, fills in the substitution one decimal digit\n     * at a time using the rule set containing this substitution.\n     * Otherwise, uses the superclass function.\n     * @param number The number being formatted\n     * @param toInsertInto The string to insert the result of formatting\n     * the substitution into\n     * @param position The position of the owning rule's rule text in\n     * toInsertInto\n     ",
    "links" : [ ]
  }, {
    "name" : "public long transformNumber(long number)",
    "returnType" : "long",
    "comment" : "\n     * Returns the fractional part of the number, which will always be\n     * zero if it's a long.\n     * @param number The number being formatted\n     * @return 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public double transformNumber(double number)",
    "returnType" : "double",
    "comment" : "\n     * Returns the fractional part of the number.\n     * @param number The number being formatted.\n     * @return number - floor(number)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Number doParse(String text, ParsePosition parsePosition, double baseValue, double upperBound, boolean lenientParse, int nonNumericalExecutedRuleMask)",
    "returnType" : "Number",
    "comment" : "\n     * If in \"by digits\" mode, parses the string as if it were a string\n     * of individual digits; otherwise, uses the superclass function.\n     * @param text The string to parse\n     * @param parsePosition Ignored on entry, but updated on exit to point\n     * to the first unmatched character\n     * @param baseValue The partial parse result prior to entering this\n     * function\n     * @param upperBound Only consider rules with base values lower than\n     * this when filling in the substitution\n     * @param lenientParse If true, try matching the text as numerals if\n     * matching as words doesn't work\n     * @return If the match was successful, the current partial parse\n     * result; otherwise Long.valueOf(0).  The result is either a Long or\n     * a Double.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double composeRuleValue(double newRuleValue, double oldRuleValue)",
    "returnType" : "double",
    "comment" : "\n     * Returns the sum of the two partial parse results.\n     * @param newRuleValue The result of parsing the substitution\n     * @param oldRuleValue The partial parse result prior to calling\n     * this function\n     * @return newRuleValue + oldRuleValue\n     ",
    "links" : [ ]
  }, {
    "name" : "public double calcUpperBound(double oldUpperBound)",
    "returnType" : "double",
    "comment" : "\n     * Not used.\n     ",
    "links" : [ ]
  }, {
    "name" : " char tokenChar()",
    "returnType" : "char",
    "comment" : "\n     * The token character for a FractionalPartSubstitution is &gt;.\n     * @return '&gt;'\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void doSubstitution(double number, StringBuilder toInsertInto, int position, int recursionCount)", "public long transformNumber(long number)", "public double transformNumber(double number)", "public Number doParse(String text, ParsePosition parsePosition, double baseValue, double upperBound, boolean lenientParse, int nonNumericalExecutedRuleMask)", "public double composeRuleValue(double newRuleValue, double oldRuleValue)", "public double calcUpperBound(double oldUpperBound)", " char tokenChar()" ],
  "variableNames" : [ "byDigits", "useSpaces" ]
}