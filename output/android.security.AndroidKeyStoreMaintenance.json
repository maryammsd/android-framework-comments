{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/AndroidKeyStoreMaintenance.java",
  "packageName" : "android.security",
  "className" : "AndroidKeyStoreMaintenance",
  "comment" : "\n * @hide This is the client side for IKeystoreMaintenance AIDL.\n * It is used mainly by LockSettingsService.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_ARGUMENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_DENIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_NOT_FOUND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static IKeystoreMaintenance getService()",
    "returnType" : "IKeystoreMaintenance",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int onUserAdded(int userId)",
    "returnType" : "int",
    "comment" : "\n     * Informs Keystore 2.0 about adding a user\n     *\n     * @param userId - Android user id of the user being added\n     * @return 0 if successful or a {@code ResponseCode}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int initUserSuperKeys(int userId, @NonNull byte[] password, boolean allowExisting)",
    "returnType" : "int",
    "comment" : "\n     * Tells Keystore to create a user's super keys and store them encrypted by the given secret.\n     *\n     * @param userId - Android user id of the user\n     * @param password - a secret derived from the user's synthetic password\n     * @param allowExisting - true if the keys already existing should not be considered an error\n     * @return 0 if successful or a {@code ResponseCode}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int onUserRemoved(int userId)",
    "returnType" : "int",
    "comment" : "\n     * Informs Keystore 2.0 about removing a user\n     *\n     * @param userId - Android user id of the user being removed\n     * @return 0 if successful or a {@code ResponseCode}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int onUserPasswordChanged(int userId, @Nullable byte[] password)",
    "returnType" : "int",
    "comment" : "\n     * Informs Keystore 2.0 about changing user's password\n     *\n     * @param userId   - Android user id of the user\n     * @param password - a secret derived from the synthetic password provided by the\n     *                 LockSettingsService\n     * @return 0 if successful or a {@code ResponseCode}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int onUserLskfRemoved(int userId)",
    "returnType" : "int",
    "comment" : "\n     * Tells Keystore that a user's LSKF is being removed, ie the user's lock screen is changing to\n     * Swipe or None.  Keystore uses this notification to delete the user's auth-bound keys.\n     *\n     * @param userId - Android user id of the user\n     * @return 0 if successful or a {@code ResponseCode}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int clearNamespace(@Domain int domain, long namespace)",
    "returnType" : "int",
    "comment" : "\n     * Informs Keystore 2.0 that an app was uninstalled and the corresponding namespace is to\n     * be cleared.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int migrateKeyNamespace(KeyDescriptor source, KeyDescriptor destination)",
    "returnType" : "int",
    "comment" : "\n     * Migrates a key given by the source descriptor to the location designated by the destination\n     * descriptor.\n     *\n     * @param source - The key to migrate may be specified by Domain.APP, Domain.SELINUX, or\n     *               Domain.KEY_ID. The caller needs the permissions use, delete, and grant for the\n     *               source namespace.\n     * @param destination - The new designation for the key may be specified by Domain.APP or\n     *                    Domain.SELINUX. The caller need the permission rebind for the destination\n     *                    namespace.\n     *\n     * @return * 0 on success\n     *         * KEY_NOT_FOUND if the source did not exist.\n     *         * PERMISSION_DENIED if any of the required permissions was missing.\n     *         * INVALID_ARGUMENT if the destination was occupied or any domain value other than\n     *                   the allowed ones was specified.\n     *         * SYSTEM_ERROR if an unexpected error occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long[] getAllAppUidsAffectedBySid(int userId, long userSecureId) throws KeyStoreException",
    "returnType" : "long[]",
    "comment" : "\n     * Returns the list of Application UIDs that have auth-bound keys that are bound to\n     * the given SID. This enables warning the user when they are about to invalidate\n     * a SID (for example, removing the LSKF).\n     *\n     * @param userId - The ID of the user the SID is associated with.\n     * @param userSecureId - The SID in question.\n     *\n     * @return A list of app UIDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void deleteAllKeys() throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n    * Deletes all keys in all KeyMint devices.\n    * Called by RecoverySystem before rebooting to recovery in order to delete all KeyMint keys,\n    * including synthetic password protector keys (used by LockSettingsService), as well as keys\n    * protecting DE and metadata encryption keys (used by vold). This ensures that FBE-encrypted\n    * data is unrecoverable even if the data wipe in recovery is interrupted or skipped.\n    ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static IKeystoreMaintenance getService()", "public static int onUserAdded(int userId)", "public static int initUserSuperKeys(int userId, @NonNull byte[] password, boolean allowExisting)", "public static int onUserRemoved(int userId)", "public static int onUserPasswordChanged(int userId, @Nullable byte[] password)", "public static int onUserLskfRemoved(int userId)", "public static int clearNamespace(@Domain int domain, long namespace)", "public static int migrateKeyNamespace(KeyDescriptor source, KeyDescriptor destination)", "public static long[] getAllAppUidsAffectedBySid(int userId, long userSecureId) throws KeyStoreException", "public static void deleteAllKeys() throws KeyStoreException" ],
  "variableNames" : [ "TAG", "SYSTEM_ERROR", "INVALID_ARGUMENT", "PERMISSION_DENIED", "KEY_NOT_FOUND" ]
}