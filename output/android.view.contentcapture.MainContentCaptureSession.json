{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/contentcapture/MainContentCaptureSession.java",
  "packageName" : "android.view.contentcapture",
  "className" : "MainContentCaptureSession",
  "comment" : "\n * Main session associated with a context.\n *\n * <p>This session is created when the activity starts and finished when it stops; clients can use\n * it to create children activities.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_CAPTURE_WRONG_THREAD_METRIC_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORCE_FLUSH",
    "type" : "boolean",
    "comment" : " For readability purposes...",
    "links" : [ ]
  }, {
    "name" : "MSG_FLUSH",
    "type" : "int",
    "comment" : "\n     * Handler message used to flush the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDisabled",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "ContentCaptureManager.StrippedContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManager",
    "type" : "ContentCaptureManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemServerInterface",
    "type" : "IContentCaptureManager",
    "comment" : "\n     * Interface to the system_server binder object - it's only used to start the session (and\n     * notify when the session is finished).\n     ",
    "links" : [ ]
  }, {
    "name" : "mDirectServiceInterface",
    "type" : "IContentCaptureDirectManager",
    "comment" : "\n     * Direct interface to the service binder object - it's used to send the events, including the\n     * last ones (when the session is finished)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mDirectServiceVulture",
    "type" : "DeathRecipient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApplicationToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShareableActivityToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComponentName",
    "type" : "ComponentName",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mEvents",
    "type" : "ArrayList<ContentCaptureEvent>",
    "comment" : "\n     * List of events held to be sent to the {@link ContentCaptureService} as a batch.\n     *\n     * @hide\n     ",
    "links" : [ "android.service.contentcapture.ContentCaptureService" ]
  }, {
    "name" : "mNextFlush",
    "type" : "long",
    "comment" : " Used just for debugging purposes (on dump)",
    "links" : [ ]
  }, {
    "name" : "mNextFlushForTextChanged",
    "type" : "boolean",
    "comment" : "\n     * Whether the next buffer flush is queued by a text changed event.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFlushHistory",
    "type" : "LocalLog",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWrongThreadCount",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionStateReceiver",
    "type" : "SessionStateReceiver",
    "comment" : "\n     * Binder object used to update the session state.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContentProtectionEventProcessor",
    "type" : "ContentProtectionEventProcessor",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " ContentCaptureSession getMainCaptureSession()",
    "returnType" : "ContentCaptureSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContentCaptureSession newChild(@NonNull ContentCaptureContext clientContext)",
    "returnType" : "ContentCaptureSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void start(@NonNull IBinder token, @NonNull IBinder shareableActivityToken, @NonNull ComponentName component, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Starts this session.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSessionStarted(int resultCode, @Nullable IBinder binder)",
    "returnType" : "void",
    "comment" : "\n     * Callback from {@code system_server} after call to {@link\n     * IContentCaptureManager#startSession(IBinder, ComponentName, String, int, IResultReceiver)}.\n     *\n     * @param resultCode session state\n     * @param binder handle to {@code IContentCaptureDirectManager}\n     * @hide\n     ",
    "links" : [ "#startSession(IBinder" ]
  }, {
    "name" : "public void sendEvent(@NonNull ContentCaptureEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void sendEvent(@NonNull ContentCaptureEvent event, boolean forceFlush)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendContentProtectionEvent(@NonNull ContentCaptureEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendContentCaptureEvent(@NonNull ContentCaptureEvent event, boolean forceFlush)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasStarted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleFlush(@FlushReason int reason, boolean checkExisting)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void flushIfNeeded(@FlushReason int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flush(@FlushReason int reason)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updateContentCaptureContext(@Nullable ContentCaptureContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ParceledListSlice<ContentCaptureEvent> clearEvents()",
    "returnType" : "ParceledListSlice<ContentCaptureEvent>",
    "comment" : "\n     * Resets the buffer and return a {@link ParceledListSlice} with the previous events.\n     ",
    "links" : [ "android.content.pm.ParceledListSlice" ]
  }, {
    "name" : "public void destroySession()",
    "returnType" : "void",
    "comment" : " hide ",
    "links" : [ ]
  }, {
    "name" : "public void resetSession(int newState)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyViewAppeared(int sessionId, @NonNull ViewStructureImpl node)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyViewDisappeared(int sessionId, @NonNull AutofillId id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyViewTextChanged(int sessionId, @NonNull AutofillId id, @Nullable CharSequence text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyViewInsetsChanged(int sessionId, @NonNull Insets viewInsets)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void internalNotifyViewTreeEvent(int sessionId, boolean started)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void internalNotifySessionResumed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void internalNotifySessionPaused()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isContentCaptureEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isDisabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean setDisabled(boolean disabled)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyChildSessionStarted(int parentSessionId, int childSessionId, @NonNull ContentCaptureContext clientContext)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyChildSessionFinished(int parentSessionId, int childSessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyContextUpdated(int sessionId, @Nullable ContentCaptureContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyWindowBoundsChanged(int sessionId, @NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyContentCaptureEvents(@NonNull SparseArray<ArrayList<Object>> contentCaptureEvents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyContentCaptureEventsImpl(@NonNull SparseArray<ArrayList<Object>> contentCaptureEvents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dump(@NonNull String prefix, @NonNull PrintWriter pw)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getActivityName()",
    "returnType" : "String",
    "comment" : "\n     * Gets a string that can be used to identify the activity on logging statements.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getDebugState()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getDebugState(@FlushReason int reason)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isContentProtectionReceiverEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isContentCaptureReceiverEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isContentProtectionEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkOnUiThread()",
    "returnType" : "void",
    "comment" : "\n     * Checks that the current work is running on the assigned thread from {@code mHandler} and\n     * count the number of times running on the wrong thread.\n     *\n     * <p>It is not guaranteed that the callers always invoke function from a single thread.\n     * Therefore, accessing internal properties in {@link MainContentCaptureSession} should\n     * always delegate to the assigned thread from {@code mHandler} for synchronization.</p>\n     ",
    "links" : [ "android.view.contentcapture.MainContentCaptureSession" ]
  }, {
    "name" : "private void reportWrongThreadMetric()",
    "returnType" : "void",
    "comment" : " Reports number of times running on the wrong thread. ",
    "links" : [ ]
  } ],
  "methodNames" : [ " ContentCaptureSession getMainCaptureSession()", " ContentCaptureSession newChild(@NonNull ContentCaptureContext clientContext)", " void start(@NonNull IBinder token, @NonNull IBinder shareableActivityToken, @NonNull ComponentName component, int flags)", " void onDestroy()", "public void onSessionStarted(int resultCode, @Nullable IBinder binder)", "public void sendEvent(@NonNull ContentCaptureEvent event)", "private void sendEvent(@NonNull ContentCaptureEvent event, boolean forceFlush)", "private void sendContentProtectionEvent(@NonNull ContentCaptureEvent event)", "private void sendContentCaptureEvent(@NonNull ContentCaptureEvent event, boolean forceFlush)", "private boolean hasStarted()", "private void scheduleFlush(@FlushReason int reason, boolean checkExisting)", "private void flushIfNeeded(@FlushReason int reason)", "public void flush(@FlushReason int reason)", "public void updateContentCaptureContext(@Nullable ContentCaptureContext context)", "private ParceledListSlice<ContentCaptureEvent> clearEvents()", "public void destroySession()", "public void resetSession(int newState)", " void internalNotifyViewAppeared(int sessionId, @NonNull ViewStructureImpl node)", " void internalNotifyViewDisappeared(int sessionId, @NonNull AutofillId id)", " void internalNotifyViewTextChanged(int sessionId, @NonNull AutofillId id, @Nullable CharSequence text)", " void internalNotifyViewInsetsChanged(int sessionId, @NonNull Insets viewInsets)", "public void internalNotifyViewTreeEvent(int sessionId, boolean started)", "public void internalNotifySessionResumed()", "public void internalNotifySessionPaused()", " boolean isContentCaptureEnabled()", " boolean isDisabled()", " boolean setDisabled(boolean disabled)", " void internalNotifyChildSessionStarted(int parentSessionId, int childSessionId, @NonNull ContentCaptureContext clientContext)", " void internalNotifyChildSessionFinished(int parentSessionId, int childSessionId)", " void internalNotifyContextUpdated(int sessionId, @Nullable ContentCaptureContext context)", "public void notifyWindowBoundsChanged(int sessionId, @NonNull Rect bounds)", "public void notifyContentCaptureEvents(@NonNull SparseArray<ArrayList<Object>> contentCaptureEvents)", "private void notifyContentCaptureEventsImpl(@NonNull SparseArray<ArrayList<Object>> contentCaptureEvents)", " void dump(@NonNull String prefix, @NonNull PrintWriter pw)", "private String getActivityName()", "private String getDebugState()", "private String getDebugState(@FlushReason int reason)", "private boolean isContentProtectionReceiverEnabled()", "private boolean isContentCaptureReceiverEnabled()", "private boolean isContentProtectionEnabled()", "private void checkOnUiThread()", "private void reportWrongThreadMetric()" ],
  "variableNames" : [ "TAG", "CONTENT_CAPTURE_WRONG_THREAD_METRIC_ID", "FORCE_FLUSH", "MSG_FLUSH", "mDisabled", "mContext", "mManager", "mHandler", "mSystemServerInterface", "mDirectServiceInterface", "mDirectServiceVulture", "mState", "mApplicationToken", "mShareableActivityToken", "mComponentName", "mEvents", "mNextFlush", "mNextFlushForTextChanged", "mFlushHistory", "mWrongThreadCount", "mSessionStateReceiver", "mContentProtectionEventProcessor" ]
}