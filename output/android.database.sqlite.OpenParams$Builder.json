{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/database/sqlite/SQLiteDatabase.java",
  "packageName" : "android.database.sqlite",
  "className" : "Builder",
  "comment" : "\n         * Builder for {@link OpenParams}.\n         ",
  "links" : [ "OpenParams" ],
  "variables" : [ {
    "name" : "mLookasideSlotSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLookasideSlotCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdleConnectionTimeout",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpenFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCursorFactory",
    "type" : "CursorFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorHandler",
    "type" : "DatabaseErrorHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJournalMode",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSyncMode",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setLookasideConfig(@IntRange(from = 0) final int slotSize, @IntRange(from = 0) final int slotCount)",
    "returnType" : "Builder",
    "comment" : "\n             * Configures\n             * <a href=\"https://sqlite.org/malloc.html#lookaside\">lookaside memory allocator</a>\n             *\n             * <p>SQLite default settings will be used, if this method isn't called.\n             * Use {@code setLookasideConfig(0,0)} to disable lookaside\n             *\n             * <p><strong>Note:</strong> Provided slotSize/slotCount configuration is just a\n             * recommendation. The system may choose different values depending on a device, e.g.\n             * lookaside allocations can be disabled on low-RAM devices\n             *\n             * @param slotSize The size in bytes of each lookaside slot.\n             * @param slotCount The total number of lookaside memory slots per database connection.\n             ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWriteAheadLoggingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n             * Returns true if {@link #ENABLE_WRITE_AHEAD_LOGGING} flag is set\n             * @hide\n             ",
    "links" : [ "#ENABLE_WRITE_AHEAD_LOGGING" ]
  }, {
    "name" : "public Builder setOpenFlags(@DatabaseOpenFlags int openFlags)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets flags to control database access mode\n             * @param openFlags The new flags to set\n             * @see #OPEN_READWRITE\n             * @see #OPEN_READONLY\n             * @see #CREATE_IF_NECESSARY\n             * @see #NO_LOCALIZED_COLLATORS\n             * @see #ENABLE_WRITE_AHEAD_LOGGING\n             * @return same builder instance for chaining multiple calls into a single statement\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder addOpenFlags(@DatabaseOpenFlags int openFlags)",
    "returnType" : "Builder",
    "comment" : "\n             * Adds flags to control database access mode\n             *\n             * @param openFlags The new flags to add\n             * @return same builder instance for chaining multiple calls into a single statement\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder removeOpenFlags(@DatabaseOpenFlags int openFlags)",
    "returnType" : "Builder",
    "comment" : "\n             * Removes database access mode flags\n             *\n             * @param openFlags Flags to remove\n             * @return same builder instance for chaining multiple calls into a single statement\n             ",
    "links" : [ ]
  }, {
    "name" : "public void setWriteAheadLoggingEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n             * Sets {@link #ENABLE_WRITE_AHEAD_LOGGING} flag if {@code enabled} is {@code true},\n             * unsets otherwise\n             * @hide\n             ",
    "links" : [ "#ENABLE_WRITE_AHEAD_LOGGING" ]
  }, {
    "name" : "public Builder setCursorFactory(@Nullable CursorFactory cursorFactory)",
    "returnType" : "Builder",
    "comment" : "\n             * Set an optional factory class that is called to instantiate a cursor when query\n             * is called.\n             *\n             * @param cursorFactory instance\n             * @return same builder instance for chaining multiple calls into a single statement\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setErrorHandler(@Nullable DatabaseErrorHandler errorHandler)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets {@link DatabaseErrorHandler} object to handle db corruption errors\n             ",
    "links" : [ "android.database.DatabaseErrorHandler" ]
  }, {
    "name" : "public Builder setIdleConnectionTimeout(@IntRange(from = 0) long idleConnectionTimeoutMs)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets the maximum number of milliseconds that SQLite connection is allowed to be idle\n             * before it is closed and removed from the pool.\n             *\n             * <p><b>DO NOT USE</b> this method.\n             * This feature has negative side effects that are very hard to foresee.\n             * <p>A connection timeout allows the system to internally close a connection to\n             * a SQLite database after a given timeout, which is good for reducing app's memory\n             * consumption.\n             * <b>However</b> the side effect is it <b>will reset all of SQLite's per-connection\n             * states</b>, which are typically modified with a {@code PRAGMA} statement, and\n             * these states <b>will not be restored</b> when a connection is re-established\n             * internally, and the system does not provide a callback for an app to reconfigure a\n             * connection.\n             * This feature may only be used if an app relies on none of such per-connection states.\n             *\n             * @param idleConnectionTimeoutMs timeout in milliseconds. Use {@link Long#MAX_VALUE}\n             * to allow unlimited idle connections.\n             *\n             * @see SQLiteOpenHelper#setIdleConnectionTimeout(long)\n             *\n             * @deprecated DO NOT USE this method. See the javadoc for the details.\n             ",
    "links" : [ "#MAX_VALUE" ]
  }, {
    "name" : "public Builder setJournalMode(@JournalMode @NonNull String journalMode)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets <a href=\"https://sqlite.org/pragma.html#pragma_journal_mode\">journal mode</a>\n             * to use.\n             *\n             * <p>Note: If journal mode is not set, the platform will use a manufactured-specified\n             * default which can vary across devices.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSynchronousMode(@SyncMode @NonNull String syncMode)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets <a href=\"https://sqlite.org/pragma.html#pragma_synchronous\">synchronous mode</a>\n             *\n             * <p>Note: If sync mode is not set, the platform will use a manufactured-specified\n             * default which can vary across devices.\n             ",
    "links" : [ ]
  }, {
    "name" : "public OpenParams build()",
    "returnType" : "OpenParams",
    "comment" : "\n             * Creates an instance of {@link OpenParams} with the options that were previously set\n             * on this builder\n             ",
    "links" : [ "OpenParams" ]
  } ],
  "methodNames" : [ "public Builder setLookasideConfig(@IntRange(from = 0) final int slotSize, @IntRange(from = 0) final int slotCount)", "public boolean isWriteAheadLoggingEnabled()", "public Builder setOpenFlags(@DatabaseOpenFlags int openFlags)", "public Builder addOpenFlags(@DatabaseOpenFlags int openFlags)", "public Builder removeOpenFlags(@DatabaseOpenFlags int openFlags)", "public void setWriteAheadLoggingEnabled(boolean enabled)", "public Builder setCursorFactory(@Nullable CursorFactory cursorFactory)", "public Builder setErrorHandler(@Nullable DatabaseErrorHandler errorHandler)", "public Builder setIdleConnectionTimeout(@IntRange(from = 0) long idleConnectionTimeoutMs)", "public Builder setJournalMode(@JournalMode @NonNull String journalMode)", "public Builder setSynchronousMode(@SyncMode @NonNull String syncMode)", "public OpenParams build()" ],
  "variableNames" : [ "mLookasideSlotSize", "mLookasideSlotCount", "mIdleConnectionTimeout", "mOpenFlags", "mCursorFactory", "mErrorHandler", "mJournalMode", "mSyncMode" ]
}