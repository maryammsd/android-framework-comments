{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/number/NumberSkeletonImpl.java",
  "packageName" : "android.icu.number",
  "className" : "NumberSkeletonImpl",
  "comment" : "\n * @author sffc\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "WILDCARD_CHAR",
    "type" : "char",
    "comment" : " Default wildcard char, accepted on input and printed in output ",
    "links" : [ ]
  }, {
    "name" : "ALT_WILDCARD_CHAR",
    "type" : "char",
    "comment" : " Alternative wildcard char, accept on input but not printed in output ",
    "links" : [ ]
  }, {
    "name" : "STEM_ENUM_VALUES",
    "type" : "StemEnum[]",
    "comment" : " For mapping from ordinal back to StemEnum in Java. ",
    "links" : [ ]
  }, {
    "name" : "SERIALIZED_STEM_TRIE",
    "type" : "String",
    "comment" : " A data structure for mapping from stem strings to the stem enum. Built at startup. ",
    "links" : [ ]
  }, {
    "name" : "cache",
    "type" : "CacheBase<String, UnlocalizedNumberFormatter, Void>",
    "comment" : " Cache for parsed skeleton strings. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static boolean isWildcardChar(char c)",
    "returnType" : "boolean",
    "comment" : " Checks whether the char is a wildcard on input ",
    "links" : [ ]
  }, {
    "name" : " static String buildStemTrie()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static UnlocalizedNumberFormatter getOrCreate(String skeletonString)",
    "returnType" : "UnlocalizedNumberFormatter",
    "comment" : "\n     * Gets the number formatter for the given number skeleton string from the cache, creating it if it\n     * does not exist in the cache.\n     *\n     * @param skeletonString\n     *            A number skeleton string, possibly not in its shortest form.\n     * @return An UnlocalizedNumberFormatter with behavior defined by the given skeleton string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UnlocalizedNumberFormatter create(String skeletonString)",
    "returnType" : "UnlocalizedNumberFormatter",
    "comment" : "\n     * Creates a NumberFormatter corresponding to the given skeleton string.\n     *\n     * @param skeletonString\n     *            A number skeleton string, possibly not in its shortest form.\n     * @return An UnlocalizedNumberFormatter with behavior defined by the given skeleton string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String generate(MacroProps macros)",
    "returnType" : "String",
    "comment" : "\n     * Create a skeleton string corresponding to the given NumberFormatter.\n     *\n     * @param macros\n     *            The NumberFormatter options object.\n     * @return A skeleton string in normalized form.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static MacroProps parseSkeleton(String skeletonString)",
    "returnType" : "MacroProps",
    "comment" : "\n     * Converts from a skeleton string to a MacroProps. This method contains the primary parse loop.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseState parseStem(StringSegment segment, CharsTrie stemTrie, MacroProps macros)",
    "returnType" : "ParseState",
    "comment" : "\n     * Given that the current segment represents a stem, parse it and save the result.\n     *\n     * @return The next state after parsing this stem, corresponding to what subset of options to expect.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseState parseOption(ParseState stem, StringSegment segment, MacroProps macros)",
    "returnType" : "ParseState",
    "comment" : "\n     * Given that the current segment represents an option, parse it and save the result.\n     *\n     * @return The next state after parsing this option, corresponding to what subset of options to\n     *         expect next.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void generateSkeleton(MacroProps macros, StringBuilder sb)",
    "returnType" : "void",
    "comment" : "\n     * Main skeleton generator function. Appends the normalized skeleton for the MacroProps to the given\n     * StringBuilder.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkNull(Object value, CharSequence content)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendMultiple(StringBuilder sb, int cp, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static boolean isWildcardChar(char c)", " static String buildStemTrie()", "public static UnlocalizedNumberFormatter getOrCreate(String skeletonString)", "public static UnlocalizedNumberFormatter create(String skeletonString)", "public static String generate(MacroProps macros)", "private static MacroProps parseSkeleton(String skeletonString)", "private static ParseState parseStem(StringSegment segment, CharsTrie stemTrie, MacroProps macros)", "private static ParseState parseOption(ParseState stem, StringSegment segment, MacroProps macros)", "private static void generateSkeleton(MacroProps macros, StringBuilder sb)", "private static void checkNull(Object value, CharSequence content)", "private static void appendMultiple(StringBuilder sb, int cp, int count)" ],
  "variableNames" : [ "WILDCARD_CHAR", "ALT_WILDCARD_CHAR", "STEM_ENUM_VALUES", "SERIALIZED_STEM_TRIE", "cache" ]
}