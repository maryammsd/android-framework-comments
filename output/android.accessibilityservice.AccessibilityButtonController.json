{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/AccessibilityButtonController.java",
  "packageName" : "android.accessibilityservice",
  "className" : "AccessibilityButtonController",
  "comment" : "\n * Controller for the accessibility button within the system's navigation area\n * <p>\n * This class may be used to query the accessibility button's state and register\n * callbacks for interactions with and state changes to the accessibility button when\n * {@link AccessibilityServiceInfo#FLAG_REQUEST_ACCESSIBILITY_BUTTON} is set.\n * </p>\n * <p>\n * <strong>Note:</strong> This class and\n * {@link AccessibilityServiceInfo#FLAG_REQUEST_ACCESSIBILITY_BUTTON} should not be used as\n * the sole means for offering functionality to users via an {@link AccessibilityService}.\n * Some device implementations may choose not to provide a software-rendered system\n * navigation area, making this affordance permanently unavailable.\n * </p>\n * <p>\n * <strong>Note:</strong> On device implementations where the accessibility button is\n * supported, it may not be available at all times, such as when a foreground application uses\n * {@link android.view.View#SYSTEM_UI_FLAG_HIDE_NAVIGATION}. A user may also choose to assign\n * this button to another accessibility service or feature. In each of these cases, a\n * registered {@link AccessibilityButtonCallback}'s\n * {@link AccessibilityButtonCallback#onAvailabilityChanged(AccessibilityButtonController, boolean)}\n * method will be invoked to provide notifications of changes in the accessibility button's\n * availability to the registering service.\n * </p>\n ",
  "links" : [ "android.accessibilityservice.AccessibilityService", "AccessibilityButtonCallback", "android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ACCESSIBILITY_BUTTON", "android.view.View#SYSTEM_UI_FLAG_HIDE_NAVIGATION", "#onAvailabilityChanged(AccessibilityButtonController" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceConnection",
    "type" : "IAccessibilityServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "ArrayMap<AccessibilityButtonCallback, Handler>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isAccessibilityButtonAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the accessibility button in the system's navigation area is\n     * available to the calling service.\n     * <p>\n     * <strong>Note:</strong> If the service is not yet connected (e.g.\n     * {@link AccessibilityService#onServiceConnected()} has not yet been called) or the\n     * service has been disconnected, this method will have no effect and return {@code false}.\n     * </p>\n     *\n     * @return {@code true} if the accessibility button in the system's navigation area is\n     * available to the calling service, {@code false} otherwise\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()" ]
  }, {
    "name" : "public void registerAccessibilityButtonCallback(@NonNull AccessibilityButtonCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers the provided {@link AccessibilityButtonCallback} for interaction and state\n     * changes callbacks related to the accessibility button.\n     *\n     * @param callback the callback to add, must be non-null\n     ",
    "links" : [ "AccessibilityButtonCallback" ]
  }, {
    "name" : "public void registerAccessibilityButtonCallback(@NonNull AccessibilityButtonCallback callback, @NonNull Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers the provided {@link AccessibilityButtonCallback} for interaction and state\n     * change callbacks related to the accessibility button. The callback will occur on the\n     * specified {@link Handler}'s thread, or on the services's main thread if the handler is\n     * {@code null}.\n     *\n     * @param callback the callback to add, must be non-null\n     * @param handler the handler on which the callback should execute, must be non-null\n     ",
    "links" : [ "AccessibilityButtonCallback", "android.os.Handler" ]
  }, {
    "name" : "public void unregisterAccessibilityButtonCallback(@NonNull AccessibilityButtonCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the provided {@link AccessibilityButtonCallback} for interaction and state\n     * change callbacks related to the accessibility button.\n     *\n     * @param callback the callback to remove, must be non-null\n     ",
    "links" : [ "AccessibilityButtonCallback" ]
  }, {
    "name" : " void dispatchAccessibilityButtonClicked()",
    "returnType" : "void",
    "comment" : "\n     * Dispatches the accessibility button click to any registered callbacks. This should\n     * be called on the service's main thread.\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchAccessibilityButtonAvailabilityChanged(boolean available)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches the accessibility button availability changes to any registered callbacks.\n     * This should be called on the service's main thread.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isAccessibilityButtonAvailable()", "public void registerAccessibilityButtonCallback(@NonNull AccessibilityButtonCallback callback)", "public void registerAccessibilityButtonCallback(@NonNull AccessibilityButtonCallback callback, @NonNull Handler handler)", "public void unregisterAccessibilityButtonCallback(@NonNull AccessibilityButtonCallback callback)", " void dispatchAccessibilityButtonClicked()", " void dispatchAccessibilityButtonAvailabilityChanged(boolean available)" ],
  "variableNames" : [ "LOG_TAG", "mServiceConnection", "mLock", "mCallbacks" ]
}