{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/AccessControlContext.java",
  "packageName" : "java.security",
  "className" : "AccessControlContext",
  "comment" : "\n * Android doesn't support {@link SecurityManager}. Do not use this class.\n ",
  "links" : [ "SecurityManager" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " ProtectionDomain[] getContext()",
    "returnType" : "ProtectionDomain[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isPrivileged()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DomainCombiner getAssignedCombiner()",
    "returnType" : "DomainCombiner",
    "comment" : "\n     * get the assigned combiner from the privileged or inherited context\n     ",
    "links" : [ ]
  }, {
    "name" : "public DomainCombiner getDomainCombiner()",
    "returnType" : "DomainCombiner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkPermission(Permission perm) throws AccessControlException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AccessControlContext optimize()",
    "returnType" : "AccessControlContext",
    "comment" : "\n     * Take the stack-based context (this) and combine it with the\n     * privileged or inherited context, if need be. Any limited\n     * privilege scope is flagged regardless of whether the assigned\n     * context comes from an immediately enclosing limited doPrivileged().\n     * The limited privilege scope can indirectly flow from the inherited\n     * parent thread or an assigned context previously captured by getContext().\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " ProtectionDomain[] getContext()", " boolean isPrivileged()", " DomainCombiner getAssignedCombiner()", "public DomainCombiner getDomainCombiner()", "public void checkPermission(Permission perm) throws AccessControlException", " AccessControlContext optimize()" ],
  "variableNames" : [ ]
}