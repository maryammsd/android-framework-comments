{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/database/sqlite/SQLiteQueryBuilder.java",
  "packageName" : "android.database.sqlite",
  "className" : "SQLiteQueryBuilder",
  "comment" : "\n * This is a convenience class that helps build SQL queries to be sent to\n * {@link SQLiteDatabase} objects.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAggregationPattern",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProjectionMap",
    "type" : "Map<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProjectionGreylist",
    "type" : "Collection<Pattern>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTables",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWhereClause",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDistinct",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFactory",
    "type" : "SQLiteDatabase.CursorFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STRICT_PARENTHESES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STRICT_COLUMNS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STRICT_GRAMMAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStrictFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDistinct(boolean distinct)",
    "returnType" : "void",
    "comment" : "\n     * Mark the query as {@code DISTINCT}.\n     *\n     * @param distinct if true the query is {@code DISTINCT}, otherwise it isn't\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDistinct()",
    "returnType" : "boolean",
    "comment" : "\n     * Get if the query is marked as {@code DISTINCT}, as last configured by\n     * {@link #setDistinct(boolean)}.\n     ",
    "links" : [ "#setDistinct(boolean)" ]
  }, {
    "name" : "public String getTables()",
    "returnType" : "String",
    "comment" : "\n     * Returns the list of tables being queried\n     *\n     * @return the list of tables being queried\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTables(@Nullable String inTables)",
    "returnType" : "void",
    "comment" : "\n     * Sets the list of tables to query. Multiple tables can be specified to perform a join.\n     * For example:\n     *   setTables(\"foo, bar\")\n     *   setTables(\"foo LEFT OUTER JOIN bar ON (foo.id = bar.foo_id)\")\n     *\n     * @param inTables the list of tables to query on\n     ",
    "links" : [ ]
  }, {
    "name" : "public void appendWhere(@NonNull CharSequence inWhere)",
    "returnType" : "void",
    "comment" : "\n     * Append a chunk to the {@code WHERE} clause of the query. All chunks appended are surrounded\n     * by parenthesis and {@code AND}ed with the selection passed to {@link #query}. The final\n     * {@code WHERE} clause looks like:\n     * <p>\n     * WHERE (&lt;append chunk 1>&lt;append chunk2>) AND (&lt;query() selection parameter>)\n     *\n     * @param inWhere the chunk of text to append to the {@code WHERE} clause.\n     ",
    "links" : [ "#query" ]
  }, {
    "name" : "public void appendWhereEscapeString(@NonNull String inWhere)",
    "returnType" : "void",
    "comment" : "\n     * Append a chunk to the {@code WHERE} clause of the query. All chunks appended are surrounded\n     * by parenthesis and ANDed with the selection passed to {@link #query}. The final\n     * {@code WHERE} clause looks like:\n     * <p>\n     * WHERE (&lt;append chunk 1>&lt;append chunk2>) AND (&lt;query() selection parameter>)\n     *\n     * @param inWhere the chunk of text to append to the {@code WHERE} clause. it will be escaped\n     * to avoid SQL injection attacks\n     ",
    "links" : [ "#query" ]
  }, {
    "name" : "public void appendWhereStandalone(@NonNull CharSequence inWhere)",
    "returnType" : "void",
    "comment" : "\n     * Add a standalone chunk to the {@code WHERE} clause of this query.\n     * <p>\n     * This method differs from {@link #appendWhere(CharSequence)} in that it\n     * automatically appends {@code AND} to any existing {@code WHERE} clause\n     * already under construction before appending the given standalone\n     * expression wrapped in parentheses.\n     *\n     * @param inWhere the standalone expression to append to the {@code WHERE}\n     *            clause. It will be wrapped in parentheses when it's appended.\n     ",
    "links" : [ "#appendWhere(CharSequence)" ]
  }, {
    "name" : "public void setProjectionMap(@Nullable Map<String, String> columnMap)",
    "returnType" : "void",
    "comment" : "\n     * Sets the projection map for the query.  The projection map maps\n     * from column names that the caller passes into query to database\n     * column names. This is useful for renaming columns as well as\n     * disambiguating column names when doing joins. For example you\n     * could map \"name\" to \"people.name\".  If a projection map is set\n     * it must contain all column names the user may request, even if\n     * the key and value are the same.\n     *\n     * @param columnMap maps from the user column names to the database column names\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getProjectionMap()",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Gets the projection map for the query, as last configured by\n     * {@link #setProjectionMap(Map)}.\n     ",
    "links" : [ "#setProjectionMap(Map)" ]
  }, {
    "name" : "public void setProjectionGreylist(@Nullable Collection<Pattern> projectionGreylist)",
    "returnType" : "void",
    "comment" : "\n     * Sets a projection greylist of columns that will be allowed through, even\n     * when {@link #setStrict(boolean)} is enabled. This provides a way for\n     * abusive custom columns like {@code COUNT(*)} to continue working.\n     ",
    "links" : [ "#setStrict(boolean)" ]
  }, {
    "name" : "public Collection<Pattern> getProjectionGreylist()",
    "returnType" : "Collection<Pattern>",
    "comment" : "\n     * Gets the projection greylist for the query, as last configured by\n     * {@link #setProjectionGreylist}.\n     ",
    "links" : [ "#setProjectionGreylist" ]
  }, {
    "name" : "public void setProjectionAggregationAllowed(boolean projectionAggregationAllowed)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProjectionAggregationAllowed()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setCursorFactory(@Nullable SQLiteDatabase.CursorFactory factory)",
    "returnType" : "void",
    "comment" : "\n     * Sets the cursor factory to be used for the query.  You can use\n     * one factory for all queries on a database but it is normally\n     * easier to specify the factory when doing this query.\n     *\n     * @param factory the factory to use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SQLiteDatabase.CursorFactory getCursorFactory()",
    "returnType" : "SQLiteDatabase.CursorFactory",
    "comment" : "\n     * Gets the cursor factory to be used for the query, as last configured by\n     * {@link #setCursorFactory(android.database.sqlite.SQLiteDatabase.CursorFactory)}.\n     ",
    "links" : [ "#setCursorFactory(android.database.sqlite.SQLiteDatabase.CursorFactory)" ]
  }, {
    "name" : "public void setStrict(boolean strict)",
    "returnType" : "void",
    "comment" : "\n     * When set, the selection is verified against malicious arguments. When\n     * using this class to create a statement using\n     * {@link #buildQueryString(boolean, String, String[], String, String, String, String, String)},\n     * non-numeric limits will raise an exception. If a projection map is\n     * specified, fields not in that map will be ignored. If this class is used\n     * to execute the statement directly using\n     * {@link #query(SQLiteDatabase, String[], String, String[], String, String, String)}\n     * or\n     * {@link #query(SQLiteDatabase, String[], String, String[], String, String, String, String)},\n     * additionally also parenthesis escaping selection are caught. To\n     * summarize: To get maximum protection against malicious third party apps\n     * (for example content provider consumers), make sure to do the following:\n     * <ul>\n     * <li>Set this value to true</li>\n     * <li>Use a projection map</li>\n     * <li>Use one of the query overloads instead of getting the statement as a\n     * sql string</li>\n     * </ul>\n     * <p>\n     * This feature is disabled by default on each newly constructed\n     * {@link SQLiteQueryBuilder} and needs to be manually enabled.\n     ",
    "links" : [ "#buildQueryString(boolean", "android.database.sqlite.SQLiteQueryBuilder", "#query(SQLiteDatabase" ]
  }, {
    "name" : "public boolean isStrict()",
    "returnType" : "boolean",
    "comment" : "\n     * Get if the query is marked as strict, as last configured by\n     * {@link #setStrict(boolean)}.\n     ",
    "links" : [ "#setStrict(boolean)" ]
  }, {
    "name" : "public void setStrictColumns(boolean strictColumns)",
    "returnType" : "void",
    "comment" : "\n     * When enabled, verify that all projections and {@link ContentValues} only\n     * contain valid columns as defined by {@link #setProjectionMap(Map)}.\n     * <p>\n     * This enforcement applies to {@link #insert}, {@link #query}, and\n     * {@link #update} operations. Any enforcement failures will throw an\n     * {@link IllegalArgumentException}.\n     * <p>\n     * This feature is disabled by default on each newly constructed\n     * {@link SQLiteQueryBuilder} and needs to be manually enabled.\n     ",
    "links" : [ "#setProjectionMap(Map)", "android.database.sqlite.SQLiteQueryBuilder", "#insert", "#update", "android.content.ContentValues", "#query", "IllegalArgumentException" ]
  }, {
    "name" : "public boolean isStrictColumns()",
    "returnType" : "boolean",
    "comment" : "\n     * Get if the query is marked as strict, as last configured by\n     * {@link #setStrictColumns(boolean)}.\n     ",
    "links" : [ "#setStrictColumns(boolean)" ]
  }, {
    "name" : "public void setStrictGrammar(boolean strictGrammar)",
    "returnType" : "void",
    "comment" : "\n     * When enabled, verify that all untrusted SQL conforms to a restricted SQL\n     * grammar. Here are the restrictions applied:\n     * <ul>\n     * <li>In {@code WHERE} and {@code HAVING} clauses: subqueries, raising, and\n     * windowing terms are rejected.\n     * <li>In {@code GROUP BY} clauses: only valid columns are allowed.\n     * <li>In {@code ORDER BY} clauses: only valid columns, collation, and\n     * ordering terms are allowed.\n     * <li>In {@code LIMIT} clauses: only numerical values and offset terms are\n     * allowed.\n     * </ul>\n     * All column references must be valid as defined by\n     * {@link #setProjectionMap(Map)}.\n     * <p>\n     * This enforcement applies to {@link #query}, {@link #update} and\n     * {@link #delete} operations. This enforcement does not apply to trusted\n     * inputs, such as those provided by {@link #appendWhere}. Any enforcement\n     * failures will throw an {@link IllegalArgumentException}.\n     * <p>\n     * This feature is disabled by default on each newly constructed\n     * {@link SQLiteQueryBuilder} and needs to be manually enabled.\n     ",
    "links" : [ "#setProjectionMap(Map)", "android.database.sqlite.SQLiteQueryBuilder", "#update", "#appendWhere", "#query", "#delete", "IllegalArgumentException" ]
  }, {
    "name" : "public boolean isStrictGrammar()",
    "returnType" : "boolean",
    "comment" : "\n     * Get if the query is marked as strict, as last configured by\n     * {@link #setStrictGrammar(boolean)}.\n     ",
    "links" : [ "#setStrictGrammar(boolean)" ]
  }, {
    "name" : "public static String buildQueryString(boolean distinct, String tables, String[] columns, String where, String groupBy, String having, String orderBy, String limit)",
    "returnType" : "String",
    "comment" : "\n     * Build an SQL query string from the given clauses.\n     *\n     * @param distinct true if you want each row to be unique, false otherwise.\n     * @param tables The table names to compile the query against.\n     * @param columns A list of which columns to return. Passing null will\n     *            return all columns, which is discouraged to prevent reading\n     *            data from storage that isn't going to be used.\n     * @param where A filter declaring which rows to return, formatted as an SQL\n     *            {@code WHERE} clause (excluding the {@code WHERE} itself). Passing {@code null} will\n     *            return all rows for the given URL.\n     * @param groupBy A filter declaring how to group rows, formatted as an SQL\n     *            {@code GROUP BY} clause (excluding the {@code GROUP BY} itself). Passing {@code null}\n     *            will cause the rows to not be grouped.\n     * @param having A filter declare which row groups to include in the cursor,\n     *            if row grouping is being used, formatted as an SQL {@code HAVING}\n     *            clause (excluding the {@code HAVING} itself). Passing null will cause\n     *            all row groups to be included, and is required when row\n     *            grouping is not being used.\n     * @param orderBy How to order the rows, formatted as an SQL {@code ORDER BY} clause\n     *            (excluding the {@code ORDER BY} itself). Passing null will use the\n     *            default sort order, which may be unordered.\n     * @param limit Limits the number of rows returned by the query,\n     *            formatted as {@code LIMIT} clause. Passing null denotes no {@code LIMIT} clause.\n     * @return the SQL query string\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void appendClause(StringBuilder s, String name, String clause)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void appendColumns(StringBuilder s, String[] columns)",
    "returnType" : "void",
    "comment" : "\n     * Add the names that are non-null in columns to s, separating\n     * them with commas.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(SQLiteDatabase db, String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder)",
    "returnType" : "Cursor",
    "comment" : "\n     * Perform a query by combining all current settings and the\n     * information passed into this method.\n     *\n     * @param db the database to query on\n     * @param projectionIn A list of which columns to return. Passing\n     *   null will return all columns, which is discouraged to prevent\n     *   reading data from storage that isn't going to be used.\n     * @param selection A filter declaring which rows to return,\n     *   formatted as an SQL {@code WHERE} clause (excluding the {@code WHERE}\n     *   itself). Passing null will return all rows for the given URL.\n     * @param selectionArgs You may include ?s in selection, which\n     *   will be replaced by the values from selectionArgs, in order\n     *   that they appear in the selection. The values will be bound\n     *   as Strings.\n     * @param groupBy A filter declaring how to group rows, formatted\n     *   as an SQL {@code GROUP BY} clause (excluding the {@code GROUP BY}\n     *   itself). Passing null will cause the rows to not be grouped.\n     * @param having A filter declare which row groups to include in\n     *   the cursor, if row grouping is being used, formatted as an\n     *   SQL {@code HAVING} clause (excluding the {@code HAVING} itself).  Passing\n     *   null will cause all row groups to be included, and is\n     *   required when row grouping is not being used.\n     * @param sortOrder How to order the rows, formatted as an SQL\n     *   {@code ORDER BY} clause (excluding the {@code ORDER BY} itself). Passing null\n     *   will use the default sort order, which may be unordered.\n     * @return a cursor over the result set\n     * @see android.content.ContentResolver#query(android.net.Uri, String[],\n     *      String, String[], String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(SQLiteDatabase db, String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit)",
    "returnType" : "Cursor",
    "comment" : "\n     * Perform a query by combining all current settings and the\n     * information passed into this method.\n     *\n     * @param db the database to query on\n     * @param projectionIn A list of which columns to return. Passing\n     *   null will return all columns, which is discouraged to prevent\n     *   reading data from storage that isn't going to be used.\n     * @param selection A filter declaring which rows to return,\n     *   formatted as an SQL {@code WHERE} clause (excluding the {@code WHERE}\n     *   itself). Passing null will return all rows for the given URL.\n     * @param selectionArgs You may include ?s in selection, which\n     *   will be replaced by the values from selectionArgs, in order\n     *   that they appear in the selection. The values will be bound\n     *   as Strings.\n     * @param groupBy A filter declaring how to group rows, formatted\n     *   as an SQL {@code GROUP BY} clause (excluding the {@code GROUP BY}\n     *   itself). Passing null will cause the rows to not be grouped.\n     * @param having A filter declare which row groups to include in\n     *   the cursor, if row grouping is being used, formatted as an\n     *   SQL {@code HAVING} clause (excluding the {@code HAVING} itself).  Passing\n     *   null will cause all row groups to be included, and is\n     *   required when row grouping is not being used.\n     * @param sortOrder How to order the rows, formatted as an SQL\n     *   {@code ORDER BY} clause (excluding the {@code ORDER BY} itself). Passing null\n     *   will use the default sort order, which may be unordered.\n     * @param limit Limits the number of rows returned by the query,\n     *   formatted as {@code LIMIT} clause. Passing null denotes no {@code LIMIT} clause.\n     * @return a cursor over the result set\n     * @see android.content.ContentResolver#query(android.net.Uri, String[],\n     *      String, String[], String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(SQLiteDatabase db, String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit, CancellationSignal cancellationSignal)",
    "returnType" : "Cursor",
    "comment" : "\n     * Perform a query by combining all current settings and the\n     * information passed into this method.\n     *\n     * @param db the database to query on\n     * @param projectionIn A list of which columns to return. Passing\n     *   null will return all columns, which is discouraged to prevent\n     *   reading data from storage that isn't going to be used.\n     * @param selection A filter declaring which rows to return,\n     *   formatted as an SQL {@code WHERE} clause (excluding the {@code WHERE}\n     *   itself). Passing null will return all rows for the given URL.\n     * @param selectionArgs You may include ?s in selection, which\n     *   will be replaced by the values from selectionArgs, in order\n     *   that they appear in the selection. The values will be bound\n     *   as Strings.\n     * @param groupBy A filter declaring how to group rows, formatted\n     *   as an SQL {@code GROUP BY} clause (excluding the {@code GROUP BY}\n     *   itself). Passing null will cause the rows to not be grouped.\n     * @param having A filter declare which row groups to include in\n     *   the cursor, if row grouping is being used, formatted as an\n     *   SQL {@code HAVING} clause (excluding the {@code HAVING} itself).  Passing\n     *   null will cause all row groups to be included, and is\n     *   required when row grouping is not being used.\n     * @param sortOrder How to order the rows, formatted as an SQL\n     *   {@code ORDER BY} clause (excluding the {@code ORDER BY} itself). Passing null\n     *   will use the default sort order, which may be unordered.\n     * @param limit Limits the number of rows returned by the query,\n     *   formatted as {@code LIMIT} clause. Passing null denotes no {@code LIMIT} clause.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none.\n     * If the operation is canceled, then {@link OperationCanceledException} will be thrown\n     * when the query is executed.\n     * @return a cursor over the result set\n     * @see android.content.ContentResolver#query(android.net.Uri, String[],\n     *      String, String[], String)\n     ",
    "links" : [ "android.os.OperationCanceledException" ]
  }, {
    "name" : "public long insert(@NonNull SQLiteDatabase db, @NonNull ContentValues values)",
    "returnType" : "long",
    "comment" : "\n     * Perform an insert by combining all current settings and the\n     * information passed into this method.\n     *\n     * @param db the database to insert on\n     * @return the row ID of the newly inserted row, or -1 if an error occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public int update(@NonNull SQLiteDatabase db, @NonNull ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "\n     * Perform an update by combining all current settings and the\n     * information passed into this method.\n     *\n     * @param db the database to update on\n     * @param selection A filter declaring which rows to return,\n     *   formatted as an SQL {@code WHERE} clause (excluding the {@code WHERE}\n     *   itself). Passing null will return all rows for the given URL.\n     * @param selectionArgs You may include ?s in selection, which\n     *   will be replaced by the values from selectionArgs, in order\n     *   that they appear in the selection. The values will be bound\n     *   as Strings.\n     * @return the number of rows updated\n     ",
    "links" : [ ]
  }, {
    "name" : "public int delete(@NonNull SQLiteDatabase db, @Nullable String selection, @Nullable String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "\n     * Perform a delete by combining all current settings and the\n     * information passed into this method.\n     *\n     * @param db the database to delete on\n     * @param selection A filter declaring which rows to return,\n     *   formatted as an SQL {@code WHERE} clause (excluding the {@code WHERE}\n     *   itself). Passing null will return all rows for the given URL.\n     * @param selectionArgs You may include ?s in selection, which\n     *   will be replaced by the values from selectionArgs, in order\n     *   that they appear in the selection. The values will be bound\n     *   as Strings.\n     * @return the number of rows deleted\n     ",
    "links" : [ ]
  }, {
    "name" : "private void enforceStrictColumns(@Nullable String[] projection)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enforceStrictColumns(@NonNull ContentValues values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enforceStrictGrammar(@Nullable String selection, @Nullable String groupBy, @Nullable String having, @Nullable String sortOrder, @Nullable String limit)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enforceStrictToken(@NonNull String token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String buildQuery(String[] projectionIn, String selection, String groupBy, String having, String sortOrder, String limit)",
    "returnType" : "String",
    "comment" : "\n     * Construct a {@code SELECT} statement suitable for use in a group of\n     * {@code SELECT} statements that will be joined through {@code UNION} operators\n     * in buildUnionQuery.\n     *\n     * @param projectionIn A list of which columns to return. Passing\n     *    null will return all columns, which is discouraged to\n     *    prevent reading data from storage that isn't going to be\n     *    used.\n     * @param selection A filter declaring which rows to return,\n     *   formatted as an SQL {@code WHERE} clause (excluding the {@code WHERE}\n     *   itself).  Passing null will return all rows for the given\n     *   URL.\n     * @param groupBy A filter declaring how to group rows, formatted\n     *   as an SQL {@code GROUP BY} clause (excluding the {@code GROUP BY} itself).\n     *   Passing null will cause the rows to not be grouped.\n     * @param having A filter declare which row groups to include in\n     *   the cursor, if row grouping is being used, formatted as an\n     *   SQL {@code HAVING} clause (excluding the {@code HAVING} itself).  Passing\n     *   null will cause all row groups to be included, and is\n     *   required when row grouping is not being used.\n     * @param sortOrder How to order the rows, formatted as an SQL\n     *   {@code ORDER BY} clause (excluding the {@code ORDER BY} itself). Passing null\n     *   will use the default sort order, which may be unordered.\n     * @param limit Limits the number of rows returned by the query,\n     *   formatted as {@code LIMIT} clause. Passing null denotes no {@code LIMIT} clause.\n     * @return the resulting SQL {@code SELECT} statement\n     ",
    "links" : [ ]
  }, {
    "name" : "public String buildQuery(String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit)",
    "returnType" : "String",
    "comment" : "\n     * @deprecated This method's signature is misleading since no SQL parameter\n     * substitution is carried out.  The selection arguments parameter does not get\n     * used at all.  To avoid confusion, call\n     * {@link #buildQuery(String[], String, String, String, String, String)} instead.\n     ",
    "links" : [ "#buildQuery(String" ]
  }, {
    "name" : "public String buildInsert(ContentValues values)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String buildUpdate(ContentValues values, String selection)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String buildDelete(String selection)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String buildUnionSubQuery(String typeDiscriminatorColumn, String[] unionColumns, Set<String> columnsPresentInTable, int computedColumnsOffset, String typeDiscriminatorValue, String selection, String groupBy, String having)",
    "returnType" : "String",
    "comment" : "\n     * Construct a {@code SELECT} statement suitable for use in a group of\n     * {@code SELECT} statements that will be joined through {@code UNION} operators\n     * in buildUnionQuery.\n     *\n     * @param typeDiscriminatorColumn the name of the result column\n     *   whose cells will contain the name of the table from which\n     *   each row was drawn.\n     * @param unionColumns the names of the columns to appear in the\n     *   result.  This may include columns that do not appear in the\n     *   table this {@code SELECT} is querying (i.e. mTables), but that do\n     *   appear in one of the other tables in the {@code UNION} query that we\n     *   are constructing.\n     * @param columnsPresentInTable a Set of the names of the columns\n     *   that appear in this table (i.e. in the table whose name is\n     *   mTables).  Since columns in unionColumns include columns that\n     *   appear only in other tables, we use this array to distinguish\n     *   which ones actually are present.  Other columns will have\n     *   NULL values for results from this subquery.\n     * @param computedColumnsOffset all columns in unionColumns before\n     *   this index are included under the assumption that they're\n     *   computed and therefore won't appear in columnsPresentInTable,\n     *   e.g. \"date * 1000 as normalized_date\"\n     * @param typeDiscriminatorValue the value used for the\n     *   type-discriminator column in this subquery\n     * @param selection A filter declaring which rows to return,\n     *   formatted as an SQL {@code WHERE} clause (excluding the {@code WHERE}\n     *   itself).  Passing null will return all rows for the given\n     *   URL.\n     * @param groupBy A filter declaring how to group rows, formatted\n     *   as an SQL {@code GROUP BY} clause (excluding the {@code GROUP BY} itself).\n     *   Passing null will cause the rows to not be grouped.\n     * @param having A filter declare which row groups to include in\n     *   the cursor, if row grouping is being used, formatted as an\n     *   SQL {@code HAVING} clause (excluding the {@code HAVING} itself).  Passing\n     *   null will cause all row groups to be included, and is\n     *   required when row grouping is not being used.\n     * @return the resulting SQL {@code SELECT} statement\n     ",
    "links" : [ ]
  }, {
    "name" : "public String buildUnionSubQuery(String typeDiscriminatorColumn, String[] unionColumns, Set<String> columnsPresentInTable, int computedColumnsOffset, String typeDiscriminatorValue, String selection, String[] selectionArgs, String groupBy, String having)",
    "returnType" : "String",
    "comment" : "\n     * @deprecated This method's signature is misleading since no SQL parameter\n     * substitution is carried out.  The selection arguments parameter does not get\n     * used at all.  To avoid confusion, call\n     * {@link #buildUnionSubQuery}\n     * instead.\n     ",
    "links" : [ "#buildUnionSubQuery" ]
  }, {
    "name" : "public String buildUnionQuery(String[] subQueries, String sortOrder, String limit)",
    "returnType" : "String",
    "comment" : "\n     * Given a set of subqueries, all of which are {@code SELECT} statements,\n     * construct a query that returns the union of what those\n     * subqueries return.\n     * @param subQueries an array of SQL {@code SELECT} statements, all of\n     *   which must have the same columns as the same positions in\n     *   their results\n     * @param sortOrder How to order the rows, formatted as an SQL\n     *   {@code ORDER BY} clause (excluding the {@code ORDER BY} itself).  Passing\n     *   null will use the default sort order, which may be unordered.\n     * @param limit The limit clause, which applies to the entire union result set\n     *\n     * @return the resulting SQL {@code SELECT} statement\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String maybeWithOperator(@Nullable String operator, @NonNull String column)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] computeProjection(@Nullable String[] projectionIn)",
    "returnType" : "String[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private String computeSingleProjectionOrThrow(@NonNull String userColumn)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String computeSingleProjection(@NonNull String userColumn)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isTableOrColumn(String token)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String computeWhere(@Nullable String selection)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private String wrap(@Nullable String arg)",
    "returnType" : "String",
    "comment" : "\n     * Wrap given argument in parenthesis, unless it's {@code null} or\n     * {@code ()}, in which case return it verbatim.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sAggregationPattern", "mProjectionMap", "mProjectionGreylist", "mTables", "mWhereClause", "mDistinct", "mFactory", "STRICT_PARENTHESES", "STRICT_COLUMNS", "STRICT_GRAMMAR", "mStrictFlags" ],
  "methodNames" : [ "public void setDistinct(boolean distinct)", "public boolean isDistinct()", "public String getTables()", "public void setTables(@Nullable String inTables)", "public void appendWhere(@NonNull CharSequence inWhere)", "public void appendWhereEscapeString(@NonNull String inWhere)", "public void appendWhereStandalone(@NonNull CharSequence inWhere)", "public void setProjectionMap(@Nullable Map<String, String> columnMap)", "public Map<String, String> getProjectionMap()", "public void setProjectionGreylist(@Nullable Collection<Pattern> projectionGreylist)", "public Collection<Pattern> getProjectionGreylist()", "public void setProjectionAggregationAllowed(boolean projectionAggregationAllowed)", "public boolean isProjectionAggregationAllowed()", "public void setCursorFactory(@Nullable SQLiteDatabase.CursorFactory factory)", "public SQLiteDatabase.CursorFactory getCursorFactory()", "public void setStrict(boolean strict)", "public boolean isStrict()", "public void setStrictColumns(boolean strictColumns)", "public boolean isStrictColumns()", "public void setStrictGrammar(boolean strictGrammar)", "public boolean isStrictGrammar()", "public static String buildQueryString(boolean distinct, String tables, String[] columns, String where, String groupBy, String having, String orderBy, String limit)", "private static void appendClause(StringBuilder s, String name, String clause)", "public static void appendColumns(StringBuilder s, String[] columns)", "public Cursor query(SQLiteDatabase db, String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder)", "public Cursor query(SQLiteDatabase db, String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit)", "public Cursor query(SQLiteDatabase db, String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit, CancellationSignal cancellationSignal)", "public long insert(@NonNull SQLiteDatabase db, @NonNull ContentValues values)", "public int update(@NonNull SQLiteDatabase db, @NonNull ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs)", "public int delete(@NonNull SQLiteDatabase db, @Nullable String selection, @Nullable String[] selectionArgs)", "private void enforceStrictColumns(@Nullable String[] projection)", "private void enforceStrictColumns(@NonNull ContentValues values)", "private void enforceStrictGrammar(@Nullable String selection, @Nullable String groupBy, @Nullable String having, @Nullable String sortOrder, @Nullable String limit)", "private void enforceStrictToken(@NonNull String token)", "public String buildQuery(String[] projectionIn, String selection, String groupBy, String having, String sortOrder, String limit)", "public String buildQuery(String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit)", "public String buildInsert(ContentValues values)", "public String buildUpdate(ContentValues values, String selection)", "public String buildDelete(String selection)", "public String buildUnionSubQuery(String typeDiscriminatorColumn, String[] unionColumns, Set<String> columnsPresentInTable, int computedColumnsOffset, String typeDiscriminatorValue, String selection, String groupBy, String having)", "public String buildUnionSubQuery(String typeDiscriminatorColumn, String[] unionColumns, Set<String> columnsPresentInTable, int computedColumnsOffset, String typeDiscriminatorValue, String selection, String[] selectionArgs, String groupBy, String having)", "public String buildUnionQuery(String[] subQueries, String sortOrder, String limit)", "private static String maybeWithOperator(@Nullable String operator, @NonNull String column)", "public String[] computeProjection(@Nullable String[] projectionIn)", "private String computeSingleProjectionOrThrow(@NonNull String userColumn)", "private String computeSingleProjection(@NonNull String userColumn)", "private boolean isTableOrColumn(String token)", "public String computeWhere(@Nullable String selection)", "private String wrap(@Nullable String arg)" ]
}