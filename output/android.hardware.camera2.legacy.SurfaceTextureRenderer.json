{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/legacy/SurfaceTextureRenderer.java",
  "packageName" : "android.hardware.camera2.legacy",
  "className" : "SurfaceTextureRenderer",
  "comment" : "\n * A renderer class that manages the GL state, and can draw a frame into a set of output\n * {@link Surface}s.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EGL_RECORDABLE_ANDROID",
    "type" : "int",
    "comment" : " from EGL/eglext.h",
    "links" : [ ]
  }, {
    "name" : "GL_MATRIX_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERTEX_POS_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERTEX_UV_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EGL_COLOR_BITLENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GLES_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PBUFFER_PIXEL_BYTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLIP_TYPE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLIP_TYPE_HORIZONTAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLIP_TYPE_VERTICAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLIP_TYPE_BOTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_NAME_TIME_FORMATTER",
    "type" : "DateTimeFormatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEGLDisplay",
    "type" : "EGLDisplay",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEGLContext",
    "type" : "EGLContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfigs",
    "type" : "EGLConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaces",
    "type" : "List<EGLSurfaceHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConversionSurfaces",
    "type" : "List<EGLSurfaceHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPBufferPixels",
    "type" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceTexture",
    "type" : "SurfaceTexture",
    "comment" : " Hold this to avoid GC",
    "links" : [ ]
  }, {
    "name" : "FLOAT_SIZE_BYTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRIANGLE_VERTICES_DATA_STRIDE_BYTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRIANGLE_VERTICES_DATA_POS_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRIANGLE_VERTICES_DATA_UV_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sHorizontalFlipTriangleVertices",
    "type" : "float[]",
    "comment" : " Sampling is mirrored across the horizontal axis",
    "links" : [ ]
  }, {
    "name" : "sVerticalFlipTriangleVertices",
    "type" : "float[]",
    "comment" : " Sampling is mirrored across the vertical axis",
    "links" : [ ]
  }, {
    "name" : "sBothFlipTriangleVertices",
    "type" : "float[]",
    "comment" : " Sampling is mirrored across the both axes",
    "links" : [ ]
  }, {
    "name" : "sRegularTriangleVertices",
    "type" : "float[]",
    "comment" : " Sampling is 1:1 for a straight copy for the back camera",
    "links" : [ ]
  }, {
    "name" : "mRegularTriangleVertices",
    "type" : "FloatBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHorizontalFlipTriangleVertices",
    "type" : "FloatBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerticalFlipTriangleVertices",
    "type" : "FloatBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBothFlipTriangleVertices",
    "type" : "FloatBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFacing",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERTEX_SHADER",
    "type" : "String",
    "comment" : "\n     * As used in this file, this vertex shader maps a unit square to the view, and\n     * tells the fragment shader to interpolate over it.  Each surface pixel position\n     * is mapped to a 2D homogeneous texture coordinate of the form (s, t, 0, 1) with\n     * s and t in the inclusive range [0, 1], and the matrix from\n     * {@link SurfaceTexture#getTransformMatrix(float[])} is used to map this\n     * coordinate to a texture location.\n     ",
    "links" : [ "android.graphics.SurfaceTexture#getTransformMatrix(float" ]
  }, {
    "name" : "FRAGMENT_SHADER",
    "type" : "String",
    "comment" : "\n     * This fragment shader simply draws the color in the 2D texture at\n     * the location from the {@code VERTEX_SHADER}.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMVPMatrix",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSTMatrix",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgram",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextureID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "muMVPMatrixHandle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "muSTMatrixHandle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maPositionHandle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maTextureHandle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerfMeasurer",
    "type" : "PerfMeasurement",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEGACY_PERF_PROPERTY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private int loadShader(int shaderType, String source)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int createProgram(String vertexSource, String fragmentSource)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawFrame(SurfaceTexture st, int width, int height, int flipType) throws LegacyExceptionUtils.BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initializeGLState()",
    "returnType" : "void",
    "comment" : "\n     * Initializes GL state.  Call this after the EGL surface has been created and made current.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getTextureId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clearState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void configureEGLContext()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void configureEGLOutputSurfaces(Collection<EGLSurfaceHolder> surfaces)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void configureEGLPbufferSurfaces(Collection<EGLSurfaceHolder> surfaces)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseEGLContext()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void makeCurrent(EGLSurface surface) throws LegacyExceptionUtils.BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean swapBuffers(EGLSurface surface) throws LegacyExceptionUtils.BufferQueueAbandonedException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkEglDrawError(String msg) throws LegacyExceptionUtils.BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkEglError(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkGlError(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkGlDrawError(String msg) throws LegacyExceptionUtils.BufferQueueAbandonedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dumpGlTiming()",
    "returnType" : "void",
    "comment" : "\n     * Save a measurement dump to disk, in\n     * {@code /sdcard/CameraLegacy/durations_<time>_<width1>x<height1>_...txt}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String formatTimestamp(long timeMillis)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupGlTiming()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void beginGlTiming()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addGlTimestamp(long timestamp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void endGlTiming()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SurfaceTexture getSurfaceTexture()",
    "returnType" : "SurfaceTexture",
    "comment" : "\n     * Return the surface texture to draw to - this is the texture use to when producing output\n     * surface buffers.\n     *\n     * @return a {@link SurfaceTexture}.\n     ",
    "links" : [ "android.graphics.SurfaceTexture" ]
  }, {
    "name" : "public void configureSurfaces(Collection<Pair<Surface, Size>> surfaces)",
    "returnType" : "void",
    "comment" : "\n     * Set a collection of output {@link Surface}s that can be drawn to.\n     *\n     * @param surfaces a {@link Collection} of surfaces.\n     ",
    "links" : [ "android.opengl.EGLSurface", "java.util.Collection" ]
  }, {
    "name" : "public void drawIntoSurfaces(CaptureCollector targetCollector)",
    "returnType" : "void",
    "comment" : "\n     * Draw the current buffer in the {@link SurfaceTexture} returned from\n     * {@link #getSurfaceTexture()} into the set of target {@link Surface}s\n     * in the next request from the given {@link CaptureCollector}, or drop\n     * the frame if none is available.\n     *\n     * <p>\n     * Any {@link Surface}s targeted must be a subset of the {@link Surface}s\n     * set in the last {@link #configureSurfaces(java.util.Collection)} call.\n     * </p>\n     *\n     * @param targetCollector the surfaces to draw to.\n     ",
    "links" : [ "android.graphics.SurfaceTexture", "android.opengl.EGLSurface", "#configureSurfaces(java.util.Collection)", "#getSurfaceTexture()", "android.hardware.camera2.legacy.CaptureCollector" ]
  }, {
    "name" : "public void cleanupEGLContext()",
    "returnType" : "void",
    "comment" : "\n     * Clean up the current GL context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush()",
    "returnType" : "void",
    "comment" : "\n     * Drop all current GL operations on the floor.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "EGL_RECORDABLE_ANDROID", "GL_MATRIX_SIZE", "VERTEX_POS_SIZE", "VERTEX_UV_SIZE", "EGL_COLOR_BITLENGTH", "GLES_VERSION", "PBUFFER_PIXEL_BYTES", "FLIP_TYPE_NONE", "FLIP_TYPE_HORIZONTAL", "FLIP_TYPE_VERTICAL", "FLIP_TYPE_BOTH", "LOG_NAME_TIME_FORMATTER", "mEGLDisplay", "mEGLContext", "mConfigs", "mSurfaces", "mConversionSurfaces", "mPBufferPixels", "mSurfaceTexture", "FLOAT_SIZE_BYTES", "TRIANGLE_VERTICES_DATA_STRIDE_BYTES", "TRIANGLE_VERTICES_DATA_POS_OFFSET", "TRIANGLE_VERTICES_DATA_UV_OFFSET", "sHorizontalFlipTriangleVertices", "sVerticalFlipTriangleVertices", "sBothFlipTriangleVertices", "sRegularTriangleVertices", "mRegularTriangleVertices", "mHorizontalFlipTriangleVertices", "mVerticalFlipTriangleVertices", "mBothFlipTriangleVertices", "mFacing", "VERTEX_SHADER", "FRAGMENT_SHADER", "mMVPMatrix", "mSTMatrix", "mProgram", "mTextureID", "muMVPMatrixHandle", "muSTMatrixHandle", "maPositionHandle", "maTextureHandle", "mPerfMeasurer", "LEGACY_PERF_PROPERTY" ],
  "methodNames" : [ "private int loadShader(int shaderType, String source)", "private int createProgram(String vertexSource, String fragmentSource)", "private void drawFrame(SurfaceTexture st, int width, int height, int flipType) throws LegacyExceptionUtils.BufferQueueAbandonedException", "private void initializeGLState()", "private int getTextureId()", "private void clearState()", "private void configureEGLContext()", "private void configureEGLOutputSurfaces(Collection<EGLSurfaceHolder> surfaces)", "private void configureEGLPbufferSurfaces(Collection<EGLSurfaceHolder> surfaces)", "private void releaseEGLContext()", "private void makeCurrent(EGLSurface surface) throws LegacyExceptionUtils.BufferQueueAbandonedException", "private boolean swapBuffers(EGLSurface surface) throws LegacyExceptionUtils.BufferQueueAbandonedException", "private void checkEglDrawError(String msg) throws LegacyExceptionUtils.BufferQueueAbandonedException", "private void checkEglError(String msg)", "private void checkGlError(String msg)", "private void checkGlDrawError(String msg) throws LegacyExceptionUtils.BufferQueueAbandonedException", "private void dumpGlTiming()", "private static String formatTimestamp(long timeMillis)", "private void setupGlTiming()", "private void beginGlTiming()", "private void addGlTimestamp(long timestamp)", "private void endGlTiming()", "public SurfaceTexture getSurfaceTexture()", "public void configureSurfaces(Collection<Pair<Surface, Size>> surfaces)", "public void drawIntoSurfaces(CaptureCollector targetCollector)", "public void cleanupEGLContext()", "public void flush()" ]
}