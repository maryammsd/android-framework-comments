{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/PKCS12Attribute.java",
  "packageName" : "java.security",
  "className" : "PKCS12Attribute",
  "comment" : "\n * An attribute associated with a PKCS12 keystore entry.\n * The attribute name is an ASN.1 Object Identifier and the attribute\n * value is a set of ASN.1 types.\n *\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "COLON_SEPARATED_HEX_PAIRS",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "encoded",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hashValue",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the attribute's ASN.1 Object Identifier represented as a\n     * list of dot-separated integers.\n     *\n     * @return the attribute's identifier\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue()",
    "returnType" : "String",
    "comment" : "\n     * Returns the attribute's ASN.1 DER-encoded value as a string.\n     * An ASN.1 DER-encoded value is returned in one of the following\n     * {@code String} formats:\n     * <ul>\n     * <li> the DER encoding of a basic ASN.1 type that has a natural\n     *      string representation is returned as the string itself.\n     *      Such types are currently limited to BOOLEAN, INTEGER,\n     *      OBJECT IDENTIFIER, UTCTime, GeneralizedTime and the\n     *      following six ASN.1 string types: UTF8String,\n     *      PrintableString, T61String, IA5String, BMPString and\n     *      GeneralString.\n     * <li> the DER encoding of any other ASN.1 type is not decoded but\n     *      returned as a binary string of colon-separated pairs of\n     *      hexadecimal digits.\n     * </ul>\n     * Multi-valued attributes are represented as a comma-separated\n     * list of values, enclosed in square brackets. See\n     * {@link Arrays#toString(java.lang.Object[])}.\n     *\n     * @return the attribute value's string encoding\n     ",
    "links" : [ "java.util.Arrays#toString(java.lang.Object" ]
  }, {
    "name" : "public byte[] getEncoded()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the attribute's ASN.1 DER encoding.\n     *\n     * @return a clone of the attribute's DER encoding\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code PKCS12Attribute} and a specified object for\n     * equality.\n     *\n     * @param obj the comparison object\n     *\n     * @return true if {@code obj} is a {@code PKCS12Attribute} and\n     * their DER encodings are equal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hashcode for this {@code PKCS12Attribute}.\n     * The hash code is computed from its DER encoding.\n     *\n     * @return the hash code\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this {@code PKCS12Attribute}.\n     *\n     * @return a name/value pair separated by an 'equals' symbol\n     ",
    "links" : [ ]
  }, {
    "name" : "private byte[] encode(ObjectIdentifier type, String[] values) throws IOException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parse(byte[] encoded) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getName()", "public String getValue()", "public byte[] getEncoded()", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()", "private byte[] encode(ObjectIdentifier type, String[] values) throws IOException", "private void parse(byte[] encoded) throws IOException" ],
  "variableNames" : [ "COLON_SEPARATED_HEX_PAIRS", "name", "value", "encoded", "hashValue" ]
}