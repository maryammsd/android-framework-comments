{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/SurfaceControl.java",
  "packageName" : "android.view",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link SurfaceControl} objects.\n     *\n     * By default the surface will be hidden, and have \"unset\" bounds, meaning it can\n     * be as large as the bounds of its parent if a buffer or child so requires.\n     *\n     * It is necessary to set at least a name via {@link Builder#setName}\n     ",
  "links" : [ "android.view.SurfaceControl", "#setName" ],
  "variables" : [ {
    "name" : "mSession",
    "type" : "SurfaceSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalOwnerView",
    "type" : "WeakReference<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParent",
    "type" : "SurfaceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetadata",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallsite",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SurfaceControl build()",
    "returnType" : "SurfaceControl",
    "comment" : "\n         * Construct a new {@link SurfaceControl} with the set parameters. The builder\n         * remains valid.\n         ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "public Builder setName(@NonNull String name)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a debugging-name for the SurfaceControl.\n         *\n         * @param name A name to identify the Surface in debugging.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLocalOwnerView(@NonNull View view)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the local owner view for the surface. This view is only\n         * valid in the same process and is not transferred in an IPC.\n         *\n         * Note: This is used for cases where we want to know the view\n         * that manages the surface control while intercepting reparenting.\n         * A specific example is InlineContentView which exposes is surface\n         * control for reparenting as a way to implement clipping of several\n         * InlineContentView instances within a certain area.\n         *\n         * @param view The owner view.\n         * @return This builder.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBufferSize(@IntRange(from = 0) int width, @IntRange(from = 0) int height)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the initial size of the controlled surface's buffers in pixels.\n         *\n         * @param width The buffer width in pixels.\n         * @param height The buffer height in pixels.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void unsetBufferSize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setFormat(@PixelFormat.Format int format)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the pixel format of the controlled surface's buffers, using constants from\n         * {@link android.graphics.PixelFormat}.\n         ",
    "links" : [ "android.graphics.PixelFormat" ]
  }, {
    "name" : "public Builder setProtected(boolean protectedContent)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify if the app requires a hardware-protected path to\n         * an external display sync. If protected content is enabled, but\n         * such a path is not available, then the controlled Surface will\n         * not be displayed.\n         *\n         * @param protectedContent Whether to require a protected sink.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSecure(boolean secure)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify whether the Surface contains secure content. If true, the system\n         * will prevent the surfaces content from being copied by another process. In\n         * particular screenshots and VNC servers will be disabled. This is however\n         * not a complete prevention of readback as {@link #setProtected}.\n         * @hide\n         ",
    "links" : [ "#setProtected" ]
  }, {
    "name" : "public Builder setOpaque(boolean opaque)",
    "returnType" : "Builder",
    "comment" : "\n         * Indicates whether the surface must be considered opaque,\n         * even if its pixel format is set to translucent. This can be useful if an\n         * application needs full RGBA 8888 support for instance but will\n         * still draw every pixel opaque.\n         * <p>\n         * This flag only determines whether opacity will be sampled from the alpha channel.\n         * Plane-alpha from calls to setAlpha() can still result in blended composition\n         * regardless of the opaque setting.\n         *\n         * Combined effects are (assuming a buffer format with an alpha channel):\n         * <ul>\n         * <li>OPAQUE + alpha(1.0) == opaque composition\n         * <li>OPAQUE + alpha(0.x) == blended composition\n         * <li>OPAQUE + alpha(0.0) == no composition\n         * <li>!OPAQUE + alpha(1.0) == blended composition\n         * <li>!OPAQUE + alpha(0.x) == blended composition\n         * <li>!OPAQUE + alpha(0.0) == no composition\n         * </ul>\n         * If the underlying buffer lacks an alpha channel, it is as if setOpaque(true)\n         * were set automatically.\n         * @param opaque Whether the Surface is OPAQUE.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setHidden(boolean hidden)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the initial visibility for the SurfaceControl.\n         *\n         * @param hidden Whether the Surface is initially HIDDEN.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setParent(@Nullable SurfaceControl parent)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a parent surface for our new SurfaceControl.\n         *\n         * Child surfaces are constrained to the onscreen region of their parent.\n         * Furthermore they stack relatively in Z order, and inherit the transformation\n         * of the parent.\n         *\n         * @param parent The parent control.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMetadata(int key, int data)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a metadata int.\n         *\n         * @param key metadata key\n         * @param data associated data\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEffectLayer()",
    "returnType" : "Builder",
    "comment" : "\n         * Indicate whether an 'EffectLayer' is to be constructed.\n         *\n         * An effect layer behaves like a container layer by default but it can support\n         * color fill, shadows and/or blur. These layers will not have an associated buffer.\n         * When created, this layer has no effects set and will be transparent but the caller\n         * can render an effect by calling:\n         *  - {@link Transaction#setColor(SurfaceControl, float[])}\n         *  - {@link Transaction#setBackgroundBlurRadius(SurfaceControl, int)}\n         *  - {@link Transaction#setShadowRadius(SurfaceControl, float)}\n         *\n         * @hide\n         ",
    "links" : [ "#setBackgroundBlurRadius(SurfaceControl", "#setShadowRadius(SurfaceControl", "#setColor(SurfaceControl" ]
  }, {
    "name" : "public Builder setColorLayer()",
    "returnType" : "Builder",
    "comment" : "\n         * A convenience function to create an effect layer with a default color fill\n         * applied to it. Currently that color is black.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEffectLayer()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setBLASTLayer()",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setContainerLayer()",
    "returnType" : "Builder",
    "comment" : "\n         * Indicates whether a 'ContainerLayer' is to be constructed.\n         *\n         * Container layers will not be rendered in any fashion and instead are used\n         * as a parent of renderable layers.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean isContainerLayer()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setFlags(int flags)",
    "returnType" : "Builder",
    "comment" : "\n         * Set 'Surface creation flags' such as {@link #HIDDEN}, {@link #SECURE}.\n         *\n         * TODO: Finish conversion to individual builder methods?\n         * @param flags The combined flags\n         * @hide\n         ",
    "links" : [ "#SECURE", "#HIDDEN" ]
  }, {
    "name" : "public Builder setCallsite(String callsite)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the callsite this SurfaceControl is constructed from.\n         *\n         * @param callsite String uniquely identifying callsite that created this object. Used for\n         *                 leakage tracking.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private Builder setFlags(int flags, int mask)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SurfaceControl build()", "public Builder setName(@NonNull String name)", "public Builder setLocalOwnerView(@NonNull View view)", "public Builder setBufferSize(@IntRange(from = 0) int width, @IntRange(from = 0) int height)", "private void unsetBufferSize()", "public Builder setFormat(@PixelFormat.Format int format)", "public Builder setProtected(boolean protectedContent)", "public Builder setSecure(boolean secure)", "public Builder setOpaque(boolean opaque)", "public Builder setHidden(boolean hidden)", "public Builder setParent(@Nullable SurfaceControl parent)", "public Builder setMetadata(int key, int data)", "public Builder setEffectLayer()", "public Builder setColorLayer()", "private boolean isEffectLayer()", "public Builder setBLASTLayer()", "public Builder setContainerLayer()", "private boolean isContainerLayer()", "public Builder setFlags(int flags)", "public Builder setCallsite(String callsite)", "private Builder setFlags(int flags, int mask)" ],
  "variableNames" : [ "mSession", "mFlags", "mWidth", "mHeight", "mFormat", "mName", "mLocalOwnerView", "mParent", "mMetadata", "mCallsite" ]
}