{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/autofill/Dataset.java",
  "packageName" : "android.service.autofill",
  "className" : "Builder",
  "comment" : "\n     * A builder for {@link Dataset} objects. You must provide at least\n     * one value for a field or set an authentication intent.\n     ",
  "links" : [ "android.service.autofill.Dataset" ],
  "variables" : [ {
    "name" : "mFieldIds",
    "type" : "ArrayList<AutofillId>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFieldValues",
    "type" : "ArrayList<AutofillValue>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFieldPresentations",
    "type" : "ArrayList<RemoteViews>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFieldDialogPresentations",
    "type" : "ArrayList<RemoteViews>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFieldInlinePresentations",
    "type" : "ArrayList<InlinePresentation>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFieldInlineTooltipPresentations",
    "type" : "ArrayList<InlinePresentation>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFieldFilters",
    "type" : "ArrayList<DatasetFieldFilter>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillDatatypes",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFieldContent",
    "type" : "ClipData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPresentation",
    "type" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialogPresentation",
    "type" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInlinePresentation",
    "type" : "InlinePresentation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInlineTooltipPresentation",
    "type" : "InlinePresentation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthentication",
    "type" : "IntentSender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCredentialFillInIntent",
    "type" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFieldToIndexdMap",
    "type" : "ArrayMap<Field, Integer>",
    "comment" : "\n         * Usually, a field will be associated with a single autofill id and/or datatype.\n         * There could be null field value corresponding to different autofill ids or datatye\n         * values, but the implementation is ok with duplicating that information.\n         * This map is just for the purpose of optimization, to reduce the size of the pelled data\n         * over the binder transaction.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setInlinePresentation(@NonNull InlinePresentation inlinePresentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the {@link InlinePresentation} used to visualize this dataset as inline suggestions.\n         * If the dataset supports inline suggestions this should not be null.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         * @deprecated Use {@link #Builder(Presentations)} instead.\n         ",
    "links" : [ "android.service.autofill.InlinePresentation", "#build()", "#Builder(Presentations)" ]
  }, {
    "name" : "public Builder setInlinePresentation(@NonNull InlinePresentation inlinePresentation, @NonNull InlinePresentation inlineTooltipPresentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Visualizes this dataset as inline suggestions.\n         *\n         * @param inlinePresentation the {@link InlinePresentation} used to visualize this\n         *         dataset as inline suggestions. If the dataset supports inline suggestions this\n         *         should not be null.\n         * @param inlineTooltipPresentation the {@link InlinePresentation} used to show\n         *         the tooltip for the {@code inlinePresentation}.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         * @deprecated Use {@link #Builder(Presentations)} instead.\n         ",
    "links" : [ "android.service.autofill.InlinePresentation", "#build()", "#Builder(Presentations)" ]
  }, {
    "name" : "public Builder setAuthentication(@Nullable IntentSender authentication)",
    "returnType" : "Builder",
    "comment" : "\n         * Triggers a custom UI before before autofilling the screen with the contents of this\n         * dataset.\n         *\n         * <p><b>Note:</b> Although the name of this method suggests that it should be used just for\n         * authentication flow, it can be used for other advanced flows; see {@link AutofillService}\n         * for examples.\n         *\n         * <p>This method is called when you need to provide an authentication\n         * UI for the data set. For example, when a data set contains credit card information\n         * (such as number, expiration date, and verification code), you can display UI\n         * asking for the verification code before filing in the data. Even if the\n         * data set is completely populated the system will launch the specified authentication\n         * intent and will need your approval to fill it in. Since the data set is \"locked\"\n         * until the user authenticates it, typically this data set name is masked\n         * (for example, \"VISA....1234\"). Typically you would want to store the data set\n         * labels non-encrypted and the actual sensitive data encrypted and not in memory.\n         * This allows showing the labels in the UI while involving the user if one of\n         * the items with these labels is chosen. Note that if you use sensitive data as\n         * a label, for example an email address, then it should also be encrypted.</p>\n         *\n         * <p>When a user triggers autofill, the system launches the provided intent\n         * whose extras will have the {@link\n         * android.view.autofill.AutofillManager#EXTRA_ASSIST_STRUCTURE screen content},\n         * and your {@link android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE client\n         * state}. Once you complete your authentication flow you should set the activity\n         * result to {@link android.app.Activity#RESULT_OK} and provide the fully populated\n         * {@link Dataset dataset} or a fully-populated {@link FillResponse response} by\n         * setting it to the {@link\n         * android.view.autofill.AutofillManager#EXTRA_AUTHENTICATION_RESULT} extra. If you\n         * provide a dataset in the result, it will replace the authenticated dataset and\n         * will be immediately filled in. An exception to this behavior is if the original\n         * dataset represents a pinned inline suggestion (i.e. any of the field in the dataset\n         * has a pinned inline presentation, see {@link InlinePresentation#isPinned()}), then\n         * the original dataset will not be replaced,\n         * so that it can be triggered as a pending intent again.\n         * If you provide a response, it will replace the\n         * current response and the UI will be refreshed. For example, if you provided\n         * credit card information without the CVV for the data set in the {@link FillResponse\n         * response} then the returned data set should contain the CVV entry.\n         *\n         * <p><b>Note:</b> Do not make the provided pending intent\n         * immutable by using {@link android.app.PendingIntent#FLAG_IMMUTABLE} as the\n         * platform needs to fill in the authentication arguments.\n         *\n         * @param authentication Intent to an activity with your authentication flow.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         *\n         * @see android.app.PendingIntent\n         ",
    "links" : [ "android.service.autofill.InlinePresentation#isPinned()", "android.service.autofill.Dataset", "#build()", "android.app.Activity#RESULT_OK", "FillResponseresponse", "android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE", "android.service.autofill.FillResponse", "android.view.autofill.AutofillManager#EXTRA_AUTHENTICATION_RESULT", "android.app.PendingIntent#FLAG_IMMUTABLE", "android.service.autofill.AutofillService", "android.view.autofill.AutofillManager#EXTRA_ASSIST_STRUCTURE" ]
  }, {
    "name" : "public Builder setCredentialFillInIntent(@Nullable Intent credentialFillInIntent)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets extras to be associated with the {@code authentication} intent sender, to be\n         * set on the intent that is fired through the intent sender.\n         *\n         * Autofill providers can set any extras they wish to receive directly on the intent\n         * that is used to create the {@code authentication}. This is an internal API, to be\n         * used by the platform to associate data with a given dataset. These extras will be\n         * merged with the {@code clientState} and sent as part of the fill in intent when\n         * the {@code authentication} intentSender is invoked.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setId(@Nullable String id)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the id for the dataset so its usage can be tracked.\n         *\n         * <p>Dataset usage can be tracked for 2 purposes:\n         *\n         * <ul>\n         *   <li>For statistical purposes, the service can call\n         * {@link AutofillService#getFillEventHistory()} when handling {@link\n         * AutofillService#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)}\n         * calls.\n         *   <li>For normal autofill workflow, the service can call\n         *   {@link SaveRequest#getDatasetIds()} when handling\n         *   {@link AutofillService#onSaveRequest(SaveRequest, SaveCallback)} calls.\n         * </ul>\n         *\n         * @param id id for this dataset or {@code null} to unset.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         ",
    "links" : [ "#build()", "android.service.autofill.AutofillService#onSaveRequest(SaveRequest", "android.service.autofill.AutofillService#onFillRequest(FillRequest", "android.service.autofill.AutofillService#getFillEventHistory()", "android.service.autofill.SaveRequest#getDatasetIds()" ]
  }, {
    "name" : "public Builder setContent(@NonNull AutofillId id, @Nullable ClipData content)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the content for a field.\n         *\n         * <p>Only called by augmented autofill.\n         *\n         * <p>For a given field, either a {@link AutofillValue value} or content can be filled, but\n         * not both. Furthermore, when filling content, only a single field can be filled.\n         *\n         * <p>The provided {@link ClipData} can contain content URIs (e.g. a URI for an image).\n         * The augmented autofill provider setting the content here must itself have at least\n         * read permissions to any passed content URIs. If the user accepts the suggestion backed\n         * by the content URI(s), the platform will automatically grant read URI permissions to\n         * the app being autofilled, just before passing the content URI(s) to it. The granted\n         * permissions will be transient and tied to the lifecycle of the activity being filled\n         * (when the activity finishes, permissions will automatically be revoked by the platform).\n         *\n         * @param id id returned by\n         * {@link android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param content content to be autofilled. Pass {@code null} if you do not have the content\n         * but the target view is a logical part of the dataset. For example, if the dataset needs\n         * authentication.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         * @throws IllegalArgumentException if the provided content\n         * {@link ClipData.Item#getIntent() contains an intent}\n         *\n         * @return this builder.\n         *\n         * @hide\n         ",
    "links" : [ "android.content.ClipData", "#build()", "android.view.autofill.AutofillValue", "android.app.assist.AssistStructure.ViewNode#getAutofillId()", "ClipData.Item#getIntent()" ]
  }, {
    "name" : "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the value of a field.\n         *\n         * <b>Note:</b> Prior to Android {@link android.os.Build.VERSION_CODES#P}, this method would\n         * throw an {@link IllegalStateException} if this builder was constructed without a\n         * {@link RemoteViews presentation}. Android {@link android.os.Build.VERSION_CODES#P} and\n         * higher removed this restriction because datasets used as an\n         * {@link android.view.autofill.AutofillManager#EXTRA_AUTHENTICATION_RESULT\n         * authentication result} do not need a presentation. But if you don't set the presentation\n         * in the constructor in a dataset that is meant to be shown to the user, the autofill UI\n         * for this field will not be displayed.\n         *\n         * <p><b>Note:</b> On Android {@link android.os.Build.VERSION_CODES#P} and\n         * higher, datasets that require authentication can be also be filtered by passing a\n         * {@link AutofillValue#forText(CharSequence) text value} as the {@code value} parameter.\n         *\n         * @param id id returned by {@link\n         *         android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param value value to be autofilled. Pass {@code null} if you do not have the value\n         *        but the target view is a logical part of the dataset. For example, if\n         *        the dataset needs authentication and you have no access to the value.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         * @deprecated Use {@link #setField(AutofillId, Field)} instead.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.widget.RemoteViews", "android.view.autofill.AutofillManager#EXTRA_AUTHENTICATION_RESULTauthentication", "IllegalStateException", "#build()", "#setField(AutofillId", "android.view.autofill.AutofillValue#forText(CharSequence)", "android.app.assist.AssistStructure.ViewNode#getAutofillId()" ]
  }, {
    "name" : "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @NonNull RemoteViews presentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the value of a field, using a custom {@link RemoteViews presentation} to\n         * visualize it.\n         *\n         * <p><b>Note:</b> On Android {@link android.os.Build.VERSION_CODES#P} and\n         * higher, datasets that require authentication can be also be filtered by passing a\n         * {@link AutofillValue#forText(CharSequence) text value} as the  {@code value} parameter.\n         *\n         * <p>Theme does not work with RemoteViews layout. Avoid hardcoded text color\n         * or background color: Autofill on different platforms may have different themes.\n         *\n         * @param id id returned by {@link\n         *         android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param value the value to be autofilled. Pass {@code null} if you do not have the value\n         *        but the target view is a logical part of the dataset. For example, if\n         *        the dataset needs authentication and you have no access to the value.\n         * @param presentation the presentation used to visualize this field.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         * @deprecated Use {@link #setField(AutofillId, Field)} instead.\n         ",
    "links" : [ "android.widget.RemoteViews", "android.os.Build.VERSION_CODES#P", "#build()", "#setField(AutofillId", "android.view.autofill.AutofillValue#forText(CharSequence)", "android.app.assist.AssistStructure.ViewNode#getAutofillId()" ]
  }, {
    "name" : "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable Pattern filter)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the value of a field using an <a href=\"#Filtering\">explicit filter</a>.\n         *\n         * <p>This method is typically used when the dataset requires authentication and the service\n         * does not know its value but wants to hide the dataset after the user enters a minimum\n         * number of characters. For example, if the dataset represents a credit card number and the\n         * service does not want to show the \"Tap to authenticate\" message until the user tapped\n         * 4 digits, in which case the filter would be {@code Pattern.compile(\"\\\\d.{4,}\")}.\n         *\n         * <p><b>Note:</b> If the dataset requires authentication but the service knows its text\n         * value it's easier to filter by calling {@link #setValue(AutofillId, AutofillValue)} and\n         * use the value to filter.\n         *\n         * @param id id returned by {@link\n         *         android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param value the value to be autofilled. Pass {@code null} if you do not have the value\n         *        but the target view is a logical part of the dataset. For example, if\n         *        the dataset needs authentication and you have no access to the value.\n         * @param filter regex used to determine if the dataset should be shown in the autofill UI;\n         *        when {@code null}, it disables filtering on that dataset (this is the recommended\n         *        approach when {@code value} is not {@code null} and field contains sensitive data\n         *        such as passwords).\n         *\n         * @return this builder.\n         * @throws IllegalStateException if the builder was constructed without a\n         *         {@link RemoteViews presentation} or {@link #build()} was already called.\n         * @deprecated Use {@link #setField(AutofillId, Field)} instead.\n         ",
    "links" : [ "android.widget.RemoteViews", "#build()", "#setField(AutofillId", "android.app.assist.AssistStructure.ViewNode#getAutofillId()", "#setValue(AutofillId" ]
  }, {
    "name" : "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable Pattern filter, @NonNull RemoteViews presentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the value of a field, using a custom {@link RemoteViews presentation} to\n         * visualize it and a <a href=\"#Filtering\">explicit filter</a>.\n         *\n         * <p>This method is typically used when the dataset requires authentication and the service\n         * does not know its value but wants to hide the dataset after the user enters a minimum\n         * number of characters. For example, if the dataset represents a credit card number and the\n         * service does not want to show the \"Tap to authenticate\" message until the user tapped\n         * 4 digits, in which case the filter would be {@code Pattern.compile(\"\\\\d.{4,}\")}.\n         *\n         * <p><b>Note:</b> If the dataset requires authentication but the service knows its text\n         * value it's easier to filter by calling\n         * {@link #setValue(AutofillId, AutofillValue, RemoteViews)} and using the value to filter.\n         *\n         * @param id id returned by {@link\n         *         android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param value the value to be autofilled. Pass {@code null} if you do not have the value\n         *        but the target view is a logical part of the dataset. For example, if\n         *        the dataset needs authentication and you have no access to the value.\n         * @param filter regex used to determine if the dataset should be shown in the autofill UI;\n         *        when {@code null}, it disables filtering on that dataset (this is the recommended\n         *        approach when {@code value} is not {@code null} and field contains sensitive data\n         *        such as passwords).\n         * @param presentation the presentation used to visualize this field.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         * @deprecated Use {@link #setField(AutofillId, Field)} instead.\n         ",
    "links" : [ "android.widget.RemoteViews", "#build()", "#setField(AutofillId", "android.app.assist.AssistStructure.ViewNode#getAutofillId()", "#setValue(AutofillId" ]
  }, {
    "name" : "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @NonNull RemoteViews presentation, @NonNull InlinePresentation inlinePresentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the value of a field, using a custom {@link RemoteViews presentation} to\n         * visualize it and an {@link InlinePresentation} to visualize it as an inline suggestion.\n         *\n         * <p><b>Note:</b> If the dataset requires authentication but the service knows its text\n         * value it's easier to filter by calling\n         * {@link #setValue(AutofillId, AutofillValue, RemoteViews)} and using the value to filter.\n         *\n         * @param id id returned by {@link\n         *        android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param value the value to be autofilled. Pass {@code null} if you do not have the value\n         *        but the target view is a logical part of the dataset. For example, if\n         *        the dataset needs authentication and you have no access to the value.\n         * @param presentation the presentation used to visualize this field.\n         * @param inlinePresentation The {@link InlinePresentation} used to visualize this dataset\n         *        as inline suggestions. If the dataset supports inline suggestions,\n         *        this should not be null.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         * @deprecated Use {@link #setField(AutofillId, Field)} instead.\n         ",
    "links" : [ "android.widget.RemoteViews", "android.service.autofill.InlinePresentation", "#build()", "#setField(AutofillId", "android.app.assist.AssistStructure.ViewNode#getAutofillId()", "#setValue(AutofillId" ]
  }, {
    "name" : "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @NonNull RemoteViews presentation, @NonNull InlinePresentation inlinePresentation, @NonNull InlinePresentation inlineTooltipPresentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the value of a field, using a custom {@link RemoteViews presentation} to\n         * visualize it and an {@link InlinePresentation} to visualize it as an inline suggestion.\n         *\n         * @see #setValue(AutofillId, AutofillValue, RemoteViews, InlinePresentation)\n         *\n         * @param id id returned by {@link\n         *        android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param value the value to be autofilled. Pass {@code null} if you do not have the value\n         *        but the target view is a logical part of the dataset. For example, if\n         *        the dataset needs authentication and you have no access to the value.\n         * @param presentation the presentation used to visualize this field.\n         * @param inlinePresentation The {@link InlinePresentation} used to visualize this dataset\n         *        as inline suggestions. If the dataset supports inline suggestions,\n         *        this should not be null.\n         * @param inlineTooltipPresentation The {@link InlinePresentation} used to show\n         *        the tooltip for the {@code inlinePresentation}.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         * @deprecated Use {@link #setField(AutofillId, Field)} instead.\n         ",
    "links" : [ "android.widget.RemoteViews", "android.service.autofill.InlinePresentation", "#build()", "#setField(AutofillId", "android.app.assist.AssistStructure.ViewNode#getAutofillId()" ]
  }, {
    "name" : "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable Pattern filter, @NonNull RemoteViews presentation, @NonNull InlinePresentation inlinePresentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the value of a field, using a custom {@link RemoteViews presentation} to\n         * visualize it and a <a href=\"#Filtering\">explicit filter</a>, and an\n         * {@link InlinePresentation} to visualize it as an inline suggestion.\n         *\n         * <p>This method is typically used when the dataset requires authentication and the service\n         * does not know its value but wants to hide the dataset after the user enters a minimum\n         * number of characters. For example, if the dataset represents a credit card number and the\n         * service does not want to show the \"Tap to authenticate\" message until the user tapped\n         * 4 digits, in which case the filter would be {@code Pattern.compile(\"\\\\d.{4,}\")}.\n         *\n         * <p><b>Note:</b> If the dataset requires authentication but the service knows its text\n         * value it's easier to filter by calling\n         * {@link #setValue(AutofillId, AutofillValue, RemoteViews)} and using the value to filter.\n         *\n         * @param id id returned by {@link\n         *         android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param value the value to be autofilled. Pass {@code null} if you do not have the value\n         *        but the target view is a logical part of the dataset. For example, if\n         *        the dataset needs authentication and you have no access to the value.\n         * @param filter regex used to determine if the dataset should be shown in the autofill UI;\n         *        when {@code null}, it disables filtering on that dataset (this is the recommended\n         *        approach when {@code value} is not {@code null} and field contains sensitive data\n         *        such as passwords).\n         * @param presentation the presentation used to visualize this field.\n         * @param inlinePresentation The {@link InlinePresentation} used to visualize this dataset\n         *        as inline suggestions. If the dataset supports inline suggestions, this\n         *        should not be null.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         * @deprecated Use {@link #setField(AutofillId, Field)} instead.\n         ",
    "links" : [ "android.widget.RemoteViews", "android.service.autofill.InlinePresentation", "#build()", "#setField(AutofillId", "android.app.assist.AssistStructure.ViewNode#getAutofillId()", "#setValue(AutofillId" ]
  }, {
    "name" : "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable Pattern filter, @NonNull RemoteViews presentation, @NonNull InlinePresentation inlinePresentation, @NonNull InlinePresentation inlineTooltipPresentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the value of a field, using a custom {@link RemoteViews presentation} to\n         * visualize it and a <a href=\"#Filtering\">explicit filter</a>, and an\n         * {@link InlinePresentation} to visualize it as an inline suggestion.\n         *\n         * @see #setValue(AutofillId, AutofillValue, Pattern, RemoteViews, InlinePresentation)\n         *\n         * @param id id returned by {@link\n         *         android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param value the value to be autofilled. Pass {@code null} if you do not have the value\n         *        but the target view is a logical part of the dataset. For example, if\n         *        the dataset needs authentication and you have no access to the value.\n         * @param filter regex used to determine if the dataset should be shown in the autofill UI;\n         *        when {@code null}, it disables filtering on that dataset (this is the recommended\n         *        approach when {@code value} is not {@code null} and field contains sensitive data\n         *        such as passwords).\n         * @param presentation the presentation used to visualize this field.\n         * @param inlinePresentation The {@link InlinePresentation} used to visualize this dataset\n         *        as inline suggestions. If the dataset supports inline suggestions, this\n         *        should not be null.\n         * @param inlineTooltipPresentation The {@link InlinePresentation} used to show\n         *        the tooltip for the {@code inlinePresentation}.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         * @deprecated Use {@link #setField(AutofillId, Field)} instead.\n         ",
    "links" : [ "android.widget.RemoteViews", "android.service.autofill.InlinePresentation", "#build()", "#setField(AutofillId", "android.app.assist.AssistStructure.ViewNode#getAutofillId()" ]
  }, {
    "name" : "public Builder setField(@NonNull AutofillId id, @Nullable Field field)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the value of a field.\n         *\n         * Before Android 13, this information could be provided using several overloaded\n         * setValue(...) methods. This method replaces those with a Builder pattern.\n         * For example, in the old workflow, the app sets a field would be:\n         * <pre class=\"prettyprint\">\n         *  Dataset.Builder dataset = new Dataset.Builder();\n         *  if (filter != null) {\n         *      if (presentation != null) {\n         *          if (inlinePresentation != null) {\n         *              dataset.setValue(id, value, filter, presentation, inlinePresentation)\n         *          } else {\n         *              dataset.setValue(id, value, filter, presentation);\n         *          }\n         *      } else {\n         *          dataset.setValue(id, value, filter);\n         *      }\n         *  } else {\n         *      if (presentation != null) {\n         *          if (inlinePresentation != null) {\n         *              dataset.setValue(id, value, presentation, inlinePresentation)\n         *          } else {\n         *              dataset.setValue(id, value, presentation);\n         *          }\n         *      } else {\n         *          dataset.setValue(id, value);\n         *      }\n         *  }\n         *  </pre>\n         * <p>The new workflow would be:\n         * <pre class=\"prettyprint\">\n         * Field.Builder fieldBuilder = new Field.Builder();\n         * if (value != null) {\n         *     fieldBuilder.setValue(value);\n         * }\n         * if (filter != null) {\n         *     fieldBuilder.setFilter(filter);\n         * }\n         * Presentations.Builder presentationsBuilder = new Presentations.Builder();\n         * if (presentation != null) {\n         *     presentationsBuilder.setMenuPresentation(presentation);\n         * }\n         * if (inlinePresentation != null) {\n         *     presentationsBuilder.setInlinePresentation(inlinePresentation);\n         * }\n         * if (dialogPresentation != null) {\n         *     presentationsBuilder.setDialogPresentation(dialogPresentation);\n         * }\n         * fieldBuilder.setPresentations(presentationsBuilder.build());\n         * dataset.setField(id, fieldBuilder.build());\n         * </pre>\n         *\n         * @see Field\n         *\n         * @param id id returned by {@link\n         *         android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param field the fill information about the field.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         ",
    "links" : [ "#build()", "android.app.assist.AssistStructure.ViewNode#getAutofillId()" ]
  }, {
    "name" : "public Dataset.Builder setField(@NonNull String hint, @NonNull Field field)",
    "returnType" : "Dataset.Builder",
    "comment" : "\n         * Adds a field to this Dataset with a specific type. This is used to send back Field\n         * information when Autofilling with platform detections is on.\n         * Platform detections are on when receiving a populated list from\n         * FillRequest#getHints().\n         *\n         * Populate every field/type known for this user for this app.\n         *\n         * For example, if getHints() contains \"username\" and \"password\",\n         * a new Dataset should be created that calls this method twice,\n         * one for the username, then another for the password (assuming\n         * the only one credential pair is found for the user). If a user\n         * has two credential pairs, then two Datasets should be created,\n         * and so on.\n         *\n         * @param hint An autofill hint returned from {@link\n         *         FillRequest#getHints()}.\n         *\n         * @param field the fill information about the field.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called\n         * or this builder also contains AutofillId information\n         *\n         * @return this builder.\n         ",
    "links" : [ "#build()", "android.service.autofill.FillRequest#getHints()" ]
  }, {
    "name" : "public Dataset.Builder setFieldForAllHints(@NonNull Field field)",
    "returnType" : "Dataset.Builder",
    "comment" : "\n         * Adds a field to this Dataset that is relevant to all applicable hints. This is used to\n         * provide field information when autofill with platform detections is enabled.\n         * Platform detections are on when receiving a populated list from\n         * FillRequest#getHints().\n         *\n         * @param field the fill information about the field.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called\n         * or this builder also contains AutofillId information\n         *\n         * @return this builder.\n         ",
    "links" : [ "#build()" ]
  }, {
    "name" : "public Builder setFieldInlinePresentation(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable Pattern filter, @NonNull InlinePresentation inlinePresentation)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the value of a field with an <a href=\"#Filtering\">explicit filter</a>, and using an\n         * {@link InlinePresentation} to visualize it as an inline suggestion.\n         *\n         * <p>Only called by augmented autofill.\n         *\n         * @param id id returned by {@link\n         *         android.app.assist.AssistStructure.ViewNode#getAutofillId()}.\n         * @param value the value to be autofilled. Pass {@code null} if you do not have the value\n         *        but the target view is a logical part of the dataset. For example, if\n         *        the dataset needs authentication and you have no access to the value.\n         * @param filter regex used to determine if the dataset should be shown in the autofill UI;\n         *        when {@code null}, it disables filtering on that dataset (this is the recommended\n         *        approach when {@code value} is not {@code null} and field contains sensitive data\n         *        such as passwords).\n         * @param inlinePresentation The {@link InlinePresentation} used to visualize this dataset\n         *        as inline suggestions. If the dataset supports inline suggestions, this\n         *        should not be null.\n         *\n         * @throws IllegalStateException if {@link #build()} was already called.\n         *\n         * @return this builder.\n         * @deprecated Use {@link #setField(AutofillId, Field)} instead.\n         * @hide\n         ",
    "links" : [ "android.service.autofill.InlinePresentation", "#build()", "#setField(AutofillId", "android.app.assist.AssistStructure.ViewNode#getAutofillId()" ]
  }, {
    "name" : "private int setLifeTheUniverseAndEverything(@NonNull String datatype, @Nullable AutofillValue value, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation, @Nullable InlinePresentation tooltip, @Nullable DatasetFieldFilter filter, @Nullable RemoteViews dialogPresentation)",
    "returnType" : "int",
    "comment" : " Returns the index at which this id was modified or inserted ",
    "links" : [ ]
  }, {
    "name" : "private int setLifeTheUniverseAndEverything(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation, @Nullable InlinePresentation tooltip, @Nullable DatasetFieldFilter filter, @Nullable RemoteViews dialogPresentation)",
    "returnType" : "int",
    "comment" : " Returns the index at which this id was modified or inserted ",
    "links" : [ ]
  }, {
    "name" : "private void createFromParcel(@Nullable AutofillId id, @Nullable String datatype, @Nullable AutofillValue value, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation, @Nullable InlinePresentation tooltip, @Nullable DatasetFieldFilter filter, @Nullable RemoteViews dialogPresentation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Dataset build()",
    "returnType" : "Dataset",
    "comment" : "\n         * Creates a new {@link Dataset} instance.\n         *\n         * <p>You should not interact with this builder once this method is called.\n         *\n         * @throws IllegalStateException if no field was set (through\n         * {@link #setField(AutofillId, Field)}), or if {@link #build()} was already called.\n         *\n         * @return The built dataset.\n         ",
    "links" : [ "android.service.autofill.Dataset", "#setField(AutofillId", "#build()" ]
  }, {
    "name" : "private void throwIfDestroyed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setInlinePresentation(@NonNull InlinePresentation inlinePresentation)", "public Builder setInlinePresentation(@NonNull InlinePresentation inlinePresentation, @NonNull InlinePresentation inlineTooltipPresentation)", "public Builder setAuthentication(@Nullable IntentSender authentication)", "public Builder setCredentialFillInIntent(@Nullable Intent credentialFillInIntent)", "public Builder setId(@Nullable String id)", "public Builder setContent(@NonNull AutofillId id, @Nullable ClipData content)", "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value)", "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @NonNull RemoteViews presentation)", "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable Pattern filter)", "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable Pattern filter, @NonNull RemoteViews presentation)", "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @NonNull RemoteViews presentation, @NonNull InlinePresentation inlinePresentation)", "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @NonNull RemoteViews presentation, @NonNull InlinePresentation inlinePresentation, @NonNull InlinePresentation inlineTooltipPresentation)", "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable Pattern filter, @NonNull RemoteViews presentation, @NonNull InlinePresentation inlinePresentation)", "public Builder setValue(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable Pattern filter, @NonNull RemoteViews presentation, @NonNull InlinePresentation inlinePresentation, @NonNull InlinePresentation inlineTooltipPresentation)", "public Builder setField(@NonNull AutofillId id, @Nullable Field field)", "public Dataset.Builder setField(@NonNull String hint, @NonNull Field field)", "public Dataset.Builder setFieldForAllHints(@NonNull Field field)", "public Builder setFieldInlinePresentation(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable Pattern filter, @NonNull InlinePresentation inlinePresentation)", "private int setLifeTheUniverseAndEverything(@NonNull String datatype, @Nullable AutofillValue value, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation, @Nullable InlinePresentation tooltip, @Nullable DatasetFieldFilter filter, @Nullable RemoteViews dialogPresentation)", "private int setLifeTheUniverseAndEverything(@NonNull AutofillId id, @Nullable AutofillValue value, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation, @Nullable InlinePresentation tooltip, @Nullable DatasetFieldFilter filter, @Nullable RemoteViews dialogPresentation)", "private void createFromParcel(@Nullable AutofillId id, @Nullable String datatype, @Nullable AutofillValue value, @Nullable RemoteViews presentation, @Nullable InlinePresentation inlinePresentation, @Nullable InlinePresentation tooltip, @Nullable DatasetFieldFilter filter, @Nullable RemoteViews dialogPresentation)", "public Dataset build()", "private void throwIfDestroyed()" ],
  "variableNames" : [ "mFieldIds", "mFieldValues", "mFieldPresentations", "mFieldDialogPresentations", "mFieldInlinePresentations", "mFieldInlineTooltipPresentations", "mFieldFilters", "mAutofillDatatypes", "mFieldContent", "mPresentation", "mDialogPresentation", "mInlinePresentation", "mInlineTooltipPresentation", "mAuthentication", "mCredentialFillInIntent", "mDestroyed", "mId", "mFieldToIndexdMap" ]
}