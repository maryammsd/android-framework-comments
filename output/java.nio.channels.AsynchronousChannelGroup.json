{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/AsynchronousChannelGroup.java",
  "packageName" : "java.nio.channels",
  "className" : "AsynchronousChannelGroup",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "AsynchronousChannelProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final AsynchronousChannelProvider provider()",
    "returnType" : "AsynchronousChannelProvider",
    "comment" : "\n     * Returns the provider that created this channel group.\n     *\n     * @return  The provider that created this channel group\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AsynchronousChannelGroup withFixedThreadPool(int nThreads, ThreadFactory threadFactory) throws IOException",
    "returnType" : "AsynchronousChannelGroup",
    "comment" : "\n     * Creates an asynchronous channel group with a fixed thread pool.\n     *\n     * <p> The resulting asynchronous channel group reuses a fixed number of\n     * threads. At any point, at most {@code nThreads} threads will be active\n     * processing tasks that are submitted to handle I/O events and dispatch\n     * completion results for operations initiated on asynchronous channels in\n     * the group.\n     *\n     * <p> The group is created by invoking the {@link\n     * AsynchronousChannelProvider#openAsynchronousChannelGroup(int,ThreadFactory)\n     * openAsynchronousChannelGroup(int,ThreadFactory)} method of the system-wide\n     * default {@link AsynchronousChannelProvider} object.\n     *\n     * @param   nThreads\n     *          The number of threads in the pool\n     * @param   threadFactory\n     *          The factory to use when creating new threads\n     *\n     * @return  A new asynchronous channel group\n     *\n     * @throws  IllegalArgumentException\n     *          If {@code nThreads <= 0}\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "java.nio.channels.spi.AsynchronousChannelProvider#openAsynchronousChannelGroup(int", "java.nio.channels.spi.AsynchronousChannelProvider" ]
  }, {
    "name" : "public static AsynchronousChannelGroup withCachedThreadPool(ExecutorService executor, int initialSize) throws IOException",
    "returnType" : "AsynchronousChannelGroup",
    "comment" : "\n     * Creates an asynchronous channel group with a given thread pool that\n     * creates new threads as needed.\n     *\n     * <p> The {@code executor} parameter is an {@code ExecutorService} that\n     * creates new threads as needed to execute tasks that are submitted to\n     * handle I/O events and dispatch completion results for operations initiated\n     * on asynchronous channels in the group. It may reuse previously constructed\n     * threads when they are available.\n     *\n     * <p> The {@code initialSize} parameter may be used by the implementation\n     * as a <em>hint</em> as to the initial number of tasks it may submit. For\n     * example, it may be used to indicate the initial number of threads that\n     * wait on I/O events.\n     *\n     * <p> The executor is intended to be used exclusively by the resulting\n     * asynchronous channel group. Termination of the group results in the\n     * orderly  {@link ExecutorService#shutdown shutdown} of the executor\n     * service. Shutting down the executor service by other means results in\n     * unspecified behavior.\n     *\n     * <p> The group is created by invoking the {@link\n     * AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService,int)\n     * openAsynchronousChannelGroup(ExecutorService,int)} method of the system-wide\n     * default {@link AsynchronousChannelProvider} object.\n     *\n     * @param   executor\n     *          The thread pool for the resulting group\n     * @param   initialSize\n     *          A value {@code >=0} or a negative value for implementation\n     *          specific default\n     *\n     * @return  A new asynchronous channel group\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @see java.util.concurrent.Executors#newCachedThreadPool\n     ",
    "links" : [ "java.nio.channels.spi.AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService", "java.util.concurrent.ExecutorService#shutdown", "java.nio.channels.spi.AsynchronousChannelProvider" ]
  }, {
    "name" : "public static AsynchronousChannelGroup withThreadPool(ExecutorService executor) throws IOException",
    "returnType" : "AsynchronousChannelGroup",
    "comment" : "\n     * Creates an asynchronous channel group with a given thread pool.\n     *\n     * <p> The {@code executor} parameter is an {@code ExecutorService} that\n     * executes tasks submitted to dispatch completion results for operations\n     * initiated on asynchronous channels in the group.\n     *\n     * <p> Care should be taken when configuring the executor service. It\n     * should support <em>direct handoff</em> or <em>unbounded queuing</em> of\n     * submitted tasks, and the thread that invokes the {@link\n     * ExecutorService#execute execute} method should never invoke the task\n     * directly. An implementation may mandate additional constraints.\n     *\n     * <p> The executor is intended to be used exclusively by the resulting\n     * asynchronous channel group. Termination of the group results in the\n     * orderly  {@link ExecutorService#shutdown shutdown} of the executor\n     * service. Shutting down the executor service by other means results in\n     * unspecified behavior.\n     *\n     * <p> The group is created by invoking the {@link\n     * AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService,int)\n     * openAsynchronousChannelGroup(ExecutorService,int)} method of the system-wide\n     * default {@link AsynchronousChannelProvider} object with an {@code\n     * initialSize} of {@code 0}.\n     *\n     * @param   executor\n     *          The thread pool for the resulting group\n     *\n     * @return  A new asynchronous channel group\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "java.nio.channels.spi.AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService", "java.util.concurrent.ExecutorService#execute", "java.util.concurrent.ExecutorService#shutdown", "java.nio.channels.spi.AsynchronousChannelProvider" ]
  }, {
    "name" : "public abstract boolean isShutdown()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this asynchronous channel group is shutdown.\n     *\n     * @return  {@code true} if this asynchronous channel group is shutdown or\n     *          has been marked for shutdown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isTerminated()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this group has terminated.\n     *\n     * <p> Where this method returns {@code true}, then the associated thread\n     * pool has also {@link ExecutorService#isTerminated terminated}.\n     *\n     * @return  {@code true} if this group has terminated\n     ",
    "links" : [ "java.util.concurrent.ExecutorService#isTerminated" ]
  }, {
    "name" : "public abstract void shutdown()",
    "returnType" : "void",
    "comment" : "\n     * Initiates an orderly shutdown of the group.\n     *\n     * <p> This method marks the group as shutdown. Further attempts to construct\n     * channel that binds to this group will throw {@link ShutdownChannelGroupException}.\n     * The group terminates when all asynchronous channels in the group are\n     * closed, all actively executing completion handlers have run to completion,\n     * and all resources have been released. This method has no effect if the\n     * group is already shutdown.\n     ",
    "links" : [ "java.nio.channels.ShutdownChannelGroupException" ]
  }, {
    "name" : "public abstract void shutdownNow() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Shuts down the group and closes all open channels in the group.\n     *\n     * <p> In addition to the actions performed by the {@link #shutdown() shutdown}\n     * method, this method invokes the {@link AsynchronousChannel#close close}\n     * method on all open channels in the group. This method does not attempt to\n     * stop or interrupt threads that are executing completion handlers. The\n     * group terminates when all actively executing completion handlers have run\n     * to completion and all resources have been released. This method may be\n     * invoked at any time. If some other thread has already invoked it, then\n     * another invocation will block until the first invocation is complete,\n     * after which it will return without effect.\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "java.nio.channels.AsynchronousChannel#close", "#shutdown()" ]
  }, {
    "name" : "public abstract boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Awaits termination of the group.\n\n     * <p> This method blocks until the group has terminated, or the timeout\n     * occurs, or the current thread is interrupted, whichever happens first.\n     *\n     * @param   timeout\n     *          The maximum time to wait, or zero or less to not wait\n     * @param   unit\n     *          The time unit of the timeout argument\n     *\n     * @return  {@code true} if the group has terminated; {@code false} if the\n     *          timeout elapsed before termination\n     *\n     * @throws  InterruptedException\n     *          If interrupted while waiting\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final AsynchronousChannelProvider provider()", "public static AsynchronousChannelGroup withFixedThreadPool(int nThreads, ThreadFactory threadFactory) throws IOException", "public static AsynchronousChannelGroup withCachedThreadPool(ExecutorService executor, int initialSize) throws IOException", "public static AsynchronousChannelGroup withThreadPool(ExecutorService executor) throws IOException", "public abstract boolean isShutdown()", "public abstract boolean isTerminated()", "public abstract void shutdown()", "public abstract void shutdownNow() throws IOException", "public abstract boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException" ],
  "variableNames" : [ "provider" ]
}