{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/SecurityParams.java",
  "packageName" : "android.net.wifi",
  "className" : "SecurityParams",
  "comment" : "\n * A class representing a security configuration.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PASSPOINT_R1",
    "type" : "int",
    "comment" : " Passpoint Release 1 ",
    "links" : [ ]
  }, {
    "name" : "PASSPOINT_R2",
    "type" : "int",
    "comment" : " Passpoint Release 2 ",
    "links" : [ ]
  }, {
    "name" : "PASSPOINT_R3",
    "type" : "int",
    "comment" : " Passpoint Release 3 ",
    "links" : [ ]
  }, {
    "name" : "mSecurityType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnabled",
    "type" : "boolean",
    "comment" : "\n     * This indicates that this security type is enabled or disabled.\n     * Ex. While receiving Transition Disable Indication, older\n     * security should be disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAllowedKeyManagement",
    "type" : "BitSet",
    "comment" : "\n     * The set of key management protocols supported by this configuration.\n     * See {@link KeyMgmt} for descriptions of the values.\n     * This is set automatically based on the security type.\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration.KeyMgmt" ]
  }, {
    "name" : "mAllowedProtocols",
    "type" : "BitSet",
    "comment" : "\n     * The set of security protocols supported by this configuration.\n     * See {@link Protocol} for descriptions of the values.\n     * This is set automatically based on the security type.\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration.Protocol" ]
  }, {
    "name" : "mAllowedAuthAlgorithms",
    "type" : "BitSet",
    "comment" : "\n     * The set of authentication protocols supported by this configuration.\n     * See {@link AuthAlgorithm} for descriptions of the values.\n     * This is set automatically based on the security type.\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration.AuthAlgorithm" ]
  }, {
    "name" : "mAllowedPairwiseCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of pairwise ciphers for WPA supported by this configuration.\n     * See {@link PairwiseCipher} for descriptions of the values.\n     * This is set automatically based on the security type.\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration.PairwiseCipher" ]
  }, {
    "name" : "mAllowedGroupCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of group ciphers supported by this configuration.\n     * See {@link GroupCipher} for descriptions of the values.\n     * This is set automatically based on the security type.\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration.GroupCipher" ]
  }, {
    "name" : "mAllowedGroupManagementCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of group management ciphers supported by this configuration.\n     * See {@link GroupMgmtCipher} for descriptions of the values.\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration.GroupMgmtCipher" ]
  }, {
    "name" : "mAllowedSuiteBCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of SuiteB ciphers supported by this configuration.\n     * To be used for WPA3-Enterprise mode. Set automatically by the framework based on the\n     * certificate type that is used in this configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRequirePmf",
    "type" : "boolean",
    "comment" : "\n     * True if the network requires Protected Management Frames (PMF), false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPasspointRelease",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSaeH2eOnlyMode",
    "type" : "boolean",
    "comment" : " Indicate that this SAE security type only accepts H2E (Hash-to-Element) mode. ",
    "links" : [ ]
  }, {
    "name" : "mIsSaePkOnlyMode",
    "type" : "boolean",
    "comment" : " Indicate that this SAE security type only accepts PK (Public Key) mode. ",
    "links" : [ ]
  }, {
    "name" : "mIsAddedByAutoUpgrade",
    "type" : "boolean",
    "comment" : " Indicate whether this is added by auto-upgrade or not. ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SecurityParams>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object thatObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSecurityType()",
    "returnType" : "int",
    "comment" : "\n     * Get the security type of this params.\n     *\n     * @return The security type defined in {@link WifiConfiguration}.\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration" ]
  }, {
    "name" : "public boolean isSecurityType(@SecurityType int type)",
    "returnType" : "boolean",
    "comment" : "\n     * Check the security type of this params.\n     *\n     * @param type the testing security type.\n     * @return true if this is for the corresponiding type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameSecurityType(SecurityParams params)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the security of given params is the same as this one.\n     *\n     * @param params the testing security params.\n     * @return true if their security types are the same.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateLegacyWifiConfiguration(WifiConfiguration config)",
    "returnType" : "void",
    "comment" : "\n     * Update security params to legacy WifiConfiguration object.\n     *\n     * @param config the target configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Set this params enabled.\n     *\n     * @param enable enable a specific security type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate this params is enabled or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableFils(boolean enableFilsSha256, boolean enableFilsSha384)",
    "returnType" : "void",
    "comment" : "\n     * Set the supporting Fast Initial Link Set-up (FILS) key management.\n     *\n     * FILS can be applied to all security types.\n     * @param enableFilsSha256 Enable FILS SHA256.\n     * @param enableFilsSha384 Enable FILS SHA256.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BitSet getAllowedKeyManagement()",
    "returnType" : "BitSet",
    "comment" : "\n     * Get the copy of allowed key management.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BitSet getAllowedProtocols()",
    "returnType" : "BitSet",
    "comment" : "\n     * Get the copy of allowed protocols.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BitSet getAllowedAuthAlgorithms()",
    "returnType" : "BitSet",
    "comment" : "\n     * Get the copy of allowed auth algorithms.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BitSet getAllowedPairwiseCiphers()",
    "returnType" : "BitSet",
    "comment" : "\n     * Get the copy of allowed pairwise ciphers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BitSet getAllowedGroupCiphers()",
    "returnType" : "BitSet",
    "comment" : "\n     * Get the copy of allowed group ciphers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BitSet getAllowedGroupManagementCiphers()",
    "returnType" : "BitSet",
    "comment" : "\n     * Get the copy of allowed group management ciphers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableSuiteBCiphers(boolean enableEcdheEcdsa, boolean enableEcdheRsa)",
    "returnType" : "void",
    "comment" : "\n     * Enable Suite-B ciphers.\n     *\n     * @param enableEcdheEcdsa enable Diffie-Hellman with Elliptic Curve ECDSA cipher support.\n     * @param enableEcdheRsa enable Diffie-Hellman with RSA cipher support.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BitSet getAllowedSuiteBCiphers()",
    "returnType" : "BitSet",
    "comment" : "\n     * Get the copy of allowed suite-b ciphers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRequirePmf(boolean required)",
    "returnType" : "void",
    "comment" : "\n     * Set PMF is required or not.\n     *\n     * @param required indicates whether PMF is required or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequirePmf()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate PMF is required or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpenSecurityType()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate that this is open security type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnterpriseSecurityType()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate that this is enterprise security type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableSaeH2eOnlyMode(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Enable Hash-to-Element only mode.\n     *\n     * @param enable set H2E only mode enabled or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSaeH2eOnlyMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this params is H2E only mode.\n     *\n     * @return true if this is H2E only mode params.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableSaePkOnlyMode(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Enable Pubilc-Key only mode.\n     *\n     * @param enable set PK only mode enabled or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSaePkOnlyMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this params is PK only mode.\n     *\n     * @return true if this is PK only mode params.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIsAddedByAutoUpgrade(boolean addedByAutoUpgrade)",
    "returnType" : "void",
    "comment" : "\n     * Set whether this is added by auto-upgrade.\n     *\n     * @param addedByAutoUpgrade true if added by auto-upgrade.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAddedByAutoUpgrade()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this is added by auto-upgrade or not.\n     *\n     * @return true if added by auto-upgrade; otherwise, false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static BitSet readBitSet(Parcel src)",
    "returnType" : "BitSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeBitSet(Parcel dest, BitSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public static SecurityParams createSecurityParamsBySecurityType(@WifiConfiguration.SecurityType int securityType)",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create a params according to the security type.\n     *\n     * @param securityType One of the following security types:\n     * {@link WifiConfiguration#SECURITY_TYPE_OPEN},\n     * {@link WifiConfiguration#SECURITY_TYPE_WEP},\n     * {@link WifiConfiguration#SECURITY_TYPE_PSK},\n     * {@link WifiConfiguration#SECURITY_TYPE_EAP},\n     * {@link WifiConfiguration#SECURITY_TYPE_SAE},\n     * {@link WifiConfiguration#SECURITY_TYPE_OWE},\n     * {@link WifiConfiguration#SECURITY_TYPE_WAPI_PSK},\n     * {@link WifiConfiguration#SECURITY_TYPE_WAPI_CERT},\n     * {@link WifiConfiguration#SECURITY_TYPE_EAP_WPA3_ENTERPRISE},\n     * {@link WifiConfiguration#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT},\n     * {@link WifiConfiguration#SECURITY_TYPE_OSEN},\n     * {@link WifiConfiguration#SECURITY_TYPE_PASSPOINT_R1_R2},\n     * {@link WifiConfiguration#SECURITY_TYPE_PASSPOINT_R3},\n     * {@link WifiConfiguration#SECURITY_TYPE_DPP}\n     *\n     * @return the corresponding security params if the security type is valid;\n     *         otherwise, throw IllegalArgumentException.\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration#SECURITY_TYPE_EAP_WPA3_ENTERPRISE", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_PASSPOINT_R1_R2", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_PSK", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_DPP", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_WEP", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_OWE", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_WAPI_PSK", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_PASSPOINT_R3", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_SAE", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_OPEN", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_EAP", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_WAPI_CERT", "android.net.wifi.WifiConfiguration#SECURITY_TYPE_OSEN" ]
  }, {
    "name" : "private static SecurityParams createWpaWpa2EnterpriseParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create EAP security params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createPasspointParams(@PasspointRelease int release)",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create Passpoint security params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createEnhancedOpenParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create Enhanced Open params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createOpenParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create Open params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createOsenParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create OSEN params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createWapiCertParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create WAPI-CERT params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createWapiPskParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create WAPI-PSK params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createWepParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create WEP params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createWpa3Enterprise192BitParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create WPA3 Enterprise 192-bit params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createWpa3EnterpriseParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create WPA3 Enterprise params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createWpa3PersonalParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create WPA3 Personal params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createWpaWpa2PersonalParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create WPA/WPA2 Personal params.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SecurityParams createDppParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Create Easy Connect (DPP) params.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(Object thatObject)", "public int hashCode()", "public int getSecurityType()", "public boolean isSecurityType(@SecurityType int type)", "public boolean isSameSecurityType(SecurityParams params)", "public void updateLegacyWifiConfiguration(WifiConfiguration config)", "public void setEnabled(boolean enable)", "public boolean isEnabled()", "public void enableFils(boolean enableFilsSha256, boolean enableFilsSha384)", "public BitSet getAllowedKeyManagement()", "public BitSet getAllowedProtocols()", "public BitSet getAllowedAuthAlgorithms()", "public BitSet getAllowedPairwiseCiphers()", "public BitSet getAllowedGroupCiphers()", "public BitSet getAllowedGroupManagementCiphers()", "public void enableSuiteBCiphers(boolean enableEcdheEcdsa, boolean enableEcdheRsa)", "public BitSet getAllowedSuiteBCiphers()", "public void setRequirePmf(boolean required)", "public boolean isRequirePmf()", "public boolean isOpenSecurityType()", "public boolean isEnterpriseSecurityType()", "public void enableSaeH2eOnlyMode(boolean enable)", "public boolean isSaeH2eOnlyMode()", "public void enableSaePkOnlyMode(boolean enable)", "public boolean isSaePkOnlyMode()", "public void setIsAddedByAutoUpgrade(boolean addedByAutoUpgrade)", "public boolean isAddedByAutoUpgrade()", "public String toString()", "private static BitSet readBitSet(Parcel src)", "private static void writeBitSet(Parcel dest, BitSet set)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public static SecurityParams createSecurityParamsBySecurityType(@WifiConfiguration.SecurityType int securityType)", "private static SecurityParams createWpaWpa2EnterpriseParams()", "private static SecurityParams createPasspointParams(@PasspointRelease int release)", "private static SecurityParams createEnhancedOpenParams()", "private static SecurityParams createOpenParams()", "private static SecurityParams createOsenParams()", "private static SecurityParams createWapiCertParams()", "private static SecurityParams createWapiPskParams()", "private static SecurityParams createWepParams()", "private static SecurityParams createWpa3Enterprise192BitParams()", "private static SecurityParams createWpa3EnterpriseParams()", "private static SecurityParams createWpa3PersonalParams()", "private static SecurityParams createWpaWpa2PersonalParams()", "private static SecurityParams createDppParams()" ],
  "variableNames" : [ "TAG", "PASSPOINT_R1", "PASSPOINT_R2", "PASSPOINT_R3", "mSecurityType", "mEnabled", "mAllowedKeyManagement", "mAllowedProtocols", "mAllowedAuthAlgorithms", "mAllowedPairwiseCiphers", "mAllowedGroupCiphers", "mAllowedGroupManagementCiphers", "mAllowedSuiteBCiphers", "mRequirePmf", "mPasspointRelease", "mIsSaeH2eOnlyMode", "mIsSaePkOnlyMode", "mIsAddedByAutoUpgrade", "CREATOR" ]
}