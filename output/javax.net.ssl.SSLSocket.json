{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SSLSocket.java",
  "packageName" : "javax.net.ssl",
  "className" : "SSLSocket",
  "comment" : "\n * This class extends <code>Socket</code>s and provides secure\n * socket using protocols such as the \"Secure\n * Sockets Layer\" (SSL) or IETF \"Transport Layer Security\" (TLS) protocols.\n * <P>\n * Such sockets are normal stream sockets, but they\n * add a layer of security protections over the underlying network transport\n * protocol, such as TCP.  Those protections include: <UL>\n *\n *      <LI> <em>Integrity Protection</em>.  SSL protects against\n *      modification of messages by an active wiretapper.\n *\n *      <LI> <em>Authentication</em>.  In most modes, SSL provides\n *      peer authentication.  Servers are usually authenticated,\n *      and clients may be authenticated as requested by servers.\n *\n *      <LI> <em>Confidentiality (Privacy Protection)</em>.  In most\n *      modes, SSL encrypts data being sent between client and server.\n *      This protects the confidentiality of data, so that passive\n *      wiretappers won't see sensitive data such as financial\n *      information or personal information of many kinds.\n *\n *      </UL>\n *\n * <P>These kinds of protection are specified by a \"cipher suite\", which\n * is a combination of cryptographic algorithms used by a given SSL connection.\n * During the negotiation process, the two endpoints must agree on\n * a ciphersuite that is available in both environments.\n * If there is no such suite in common, no SSL connection can\n * be established, and no data can be exchanged.\n *\n * <P> The cipher suite used is established by a negotiation process\n * called \"handshaking\".  The goal of this\n * process is to create or rejoin a \"session\", which may protect many\n * connections over time.  After handshaking has completed, you can access\n * session attributes by using the <em>getSession</em> method.\n * The initial handshake on this connection can be initiated in\n * one of three ways: <UL>\n *\n *      <LI> calling <code>startHandshake</code> which explicitly\n *              begins handshakes, or\n *      <LI> any attempt to read or write application data on\n *              this socket causes an implicit handshake, or\n *      <LI> a call to <code>getSession</code> tries to set up a session\n *              if there is no currently valid session, and\n *              an implicit handshake is done.\n * </UL>\n *\n * <P>If handshaking fails for any reason, the <code>SSLSocket</code>\n * is closed, and no further communications can be done.\n *\n * <P>There are two groups of cipher suites which you will need to know\n * about when managing cipher suites: <UL>\n *\n *      <LI> <em>Supported</em> cipher suites:  all the suites which are\n *      supported by the SSL implementation.  This list is reported\n *      using <em>getSupportedCipherSuites</em>.\n *\n *      <LI> <em>Enabled</em> cipher suites, which may be fewer\n *      than the full set of supported suites.  This group is\n *      set using the <em>setEnabledCipherSuites</em> method, and\n *      queried using the <em>getEnabledCipherSuites</em> method.\n *      Initially, a default set of cipher suites will be enabled on\n *      a new socket that represents the minimum suggested configuration.\n *\n *      </UL>\n *\n * <P> Implementation defaults require that only cipher\n * suites which authenticate servers and provide confidentiality\n * be enabled by default.\n * Only if both sides explicitly agree to unauthenticated and/or\n * non-private (unencrypted) communications will such a ciphersuite be\n * selected.\n *\n * <P>When <code>SSLSocket</code>s are first created, no handshaking\n * is done so that applications may first set their communication\n * preferences:  what cipher suites to use, whether the socket should be\n * in client or server mode, etc.\n * However, security is always provided by the time that application data\n * is sent over the connection.\n *\n * <P> You may register to receive event notification of handshake\n * completion.  This involves\n * the use of two additional classes.  <em>HandshakeCompletedEvent</em>\n * objects are passed to <em>HandshakeCompletedListener</em> instances,\n * which are registered by users of this API.\n *\n * <code>SSLSocket</code>s are created by <code>SSLSocketFactory</code>s,\n * or by <code>accept</code>ing a connection from a\n * <code>SSLServerSocket</code>.\n *\n * <P>A SSL socket must choose to operate in the client or server mode.\n * This will determine who begins the handshaking process, as well\n * as which messages should be sent by each party.  Each\n * connection must have one client and one server, or handshaking\n * will not progress properly.  Once the initial handshaking has started, a\n * socket can not switch between client and server modes, even when\n * performing renegotiations.\n *\n * <h3>Default configuration for different Android versions</h3>\n * <p>{@code SSLSocket} instances obtained from default {@link SSLSocketFactory},\n * {@link SSLServerSocketFactory}, and {@link SSLContext} are configured as follows:\n *\n * <style type=\"text/css\">\n *   tr.deprecated {\n *     background-color: #ccc;\n *     color: #999;\n *     font-style: italic;\n *   }\n * </style>\n *\n * <h4>Protocols</h4>\n *\n * <p>Client socket:\n * <table>\n *     <thead>\n *         <tr>\n *             <th>Protocol</th>\n *             <th>Supported (API Levels)</th>\n *             <th>Enabled by default (API Levels)</th>\n *         </tr>\n *     </thead>\n *     <tbody>\n *         <tr class=\"deprecated\">\n *             <td>SSLv3</td>\n *             <td>1&ndash;25</td>\n *             <td>1&ndash;22</td>\n *         </tr>\n *         <tr>\n *             <td>TLSv1</td>\n *             <td>1+</td>\n *             <td>1+</td>\n *         </tr>\n *         <tr>\n *             <td>TLSv1.1</td>\n *             <td>16+</td>\n *             <td>20+</td>\n *         </tr>\n *         <tr>\n *             <td>TLSv1.2</td>\n *             <td>16+</td>\n *             <td>20+</td>\n *         </tr>\n *         <tr>\n *             <td>TLSv1.3</td>\n *             <td>29+</td>\n *             <td>29+</td>\n *         </tr>\n *     </tbody>\n * </table>\n *\n * <p>Server socket:\n * <table>\n *     <thead>\n *         <tr>\n *             <th>Protocol</th>\n *             <th>Supported (API Levels)</th>\n *             <th>Enabled by default (API Levels)</th>\n *         </tr>\n *     </thead>\n *     <tbody>\n *         <tr class=\"deprecated\">\n *             <td>SSLv3</td>\n *             <td>1&ndash;25</td>\n *             <td>1&ndash;22</td>\n *         </tr>\n *         <tr>\n *             <td>TLSv1</td>\n *             <td>1+</td>\n *             <td>1+</td>\n *         </tr>\n *         <tr>\n *             <td>TLSv1.1</td>\n *             <td>16+</td>\n *             <td>16+</td>\n *         </tr>\n *         <tr>\n *             <td>TLSv1.2</td>\n *             <td>16+</td>\n *             <td>16+</td>\n *         </tr>\n *         <tr>\n *             <td>TLSv1.3</td>\n *             <td>29+</td>\n *             <td>29+</td>\n *         </tr>\n *     </tbody>\n * </table>\n *\n * <h4>Cipher suites</h4>\n *\n * <p>Methods that operate with cipher suite names (for example,\n * {@link #getSupportedCipherSuites() getSupportedCipherSuites},\n * {@link #setEnabledCipherSuites(String[]) setEnabledCipherSuites}) have used\n * standard names for cipher suites since API Level 9, as listed in the table\n * below. Prior to API Level 9, non-standard (OpenSSL) names had been used (see\n * the table following this table).\n * <table>\n *   <thead>\n *     <tr>\n *       <th>Cipher suite</th>\n *       <th>Supported (API Levels)</th>\n *       <th>Enabled by default (API Levels)</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DHE_DSS_WITH_DES_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DHE_RSA_WITH_DES_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DH_anon_EXPORT_WITH_RC4_40_MD5</td>\n *       <td>9-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DH_anon_WITH_3DES_EDE_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DH_anon_WITH_DES_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_DH_anon_WITH_RC4_128_MD5</td>\n *       <td>9-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_RSA_EXPORT_WITH_DES40_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_RSA_EXPORT_WITH_RC4_40_MD5</td>\n *       <td>9-22</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr>\n *       <td>SSL_RSA_WITH_3DES_EDE_CBC_SHA</td>\n *       <td>9+</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_RSA_WITH_DES_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_RSA_WITH_NULL_MD5</td>\n *       <td>9-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_RSA_WITH_NULL_SHA</td>\n *       <td>9-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_RSA_WITH_RC4_128_MD5</td>\n *       <td>9-25</td>\n *       <td>9-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>SSL_RSA_WITH_RC4_128_SHA</td>\n *       <td>9-25</td>\n *       <td>9-23</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_AES_128_GCM_SHA256</td>\n *       <td>29+</td>\n *       <td>29+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_AES_256_GCM_SHA384</td>\n *       <td>29+</td>\n *       <td>29+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_CHACHA20_POLY1305_SHA256</td>\n *       <td>29+</td>\n *       <td>29+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_DSS_WITH_AES_128_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td>9-22</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_DSS_WITH_AES_128_CBC_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_DSS_WITH_AES_128_GCM_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_DSS_WITH_AES_256_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td>11-22</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_DSS_WITH_AES_256_CBC_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_DSS_WITH_AES_256_GCM_SHA384</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</td>\n *       <td>9-25</td>\n *       <td>9-25</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</td>\n *       <td>20-25</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</td>\n *       <td>20-25</td>\n *       <td>20-25</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_RSA_WITH_AES_256_CBC_SHA</td>\n *       <td>9-25</td>\n *       <td>11-25</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</td>\n *       <td>20-25</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</td>\n *       <td>20-25</td>\n *       <td>20-25</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DH_anon_WITH_AES_128_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DH_anon_WITH_AES_128_CBC_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DH_anon_WITH_AES_128_GCM_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DH_anon_WITH_AES_256_CBC_SHA</td>\n *       <td>9-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DH_anon_WITH_AES_256_CBC_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_DH_anon_WITH_AES_256_GCM_SHA384</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td>11-19</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</td>\n *       <td>11+</td>\n *       <td>11+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</td>\n *       <td>20-28</td>\n *       <td></td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</td>\n *       <td>20+</td>\n *       <td>20+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</td>\n *       <td>11+</td>\n *       <td>11+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</td>\n *       <td>20-28</td>\n *       <td></td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</td>\n *       <td>20+</td>\n *       <td>20+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</td>\n *       <td>24+</td>\n *       <td>24+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDHE_ECDSA_WITH_NULL_SHA</td>\n *       <td>11-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDHE_ECDSA_WITH_RC4_128_SHA</td>\n *       <td>11-25</td>\n *       <td>11-23</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA</td>\n *       <td>21+</td>\n *       <td>21+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA</td>\n *       <td>21+</td>\n *       <td>21+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256</td>\n *       <td>24+</td>\n *       <td>24+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td>11-19</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</td>\n *       <td>11+</td>\n *       <td>11+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</td>\n *       <td>20-28</td>\n *       <td></td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</td>\n *       <td>20+</td>\n *       <td>20+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</td>\n *       <td>11+</td>\n *       <td>11+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</td>\n *       <td>20-28</td>\n *       <td></td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</td>\n *       <td>20+</td>\n *       <td>20+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</td>\n *       <td>24+</td>\n *       <td>24+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDHE_RSA_WITH_NULL_SHA</td>\n *       <td>11-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDHE_RSA_WITH_RC4_128_SHA</td>\n *       <td>11-25</td>\n *       <td>11-23</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td>11-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td>11-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td>11-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_ECDSA_WITH_NULL_SHA</td>\n *       <td>11-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_ECDSA_WITH_RC4_128_SHA</td>\n *       <td>11-22</td>\n *       <td>11-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td>11-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_RSA_WITH_AES_128_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td>11-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td>11-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_RSA_WITH_NULL_SHA</td>\n *       <td>11-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_RSA_WITH_RC4_128_SHA</td>\n *       <td>11-22</td>\n *       <td>11-19</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_anon_WITH_AES_128_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_anon_WITH_AES_256_CBC_SHA</td>\n *       <td>11-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_anon_WITH_NULL_SHA</td>\n *       <td>11-22</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_ECDH_anon_WITH_RC4_128_SHA</td>\n *       <td>11-22</td>\n *       <td></td>\n *     </tr>\n *     <tr>\n *       <td>TLS_EMPTY_RENEGOTIATION_INFO_SCSV</td>\n *       <td>11+</td>\n *       <td>11+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_FALLBACK_SCSV</td>\n *       <td>21+</td>\n *       <td></td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_PSK_WITH_3DES_EDE_CBC_SHA</td>\n *       <td>21-22</td>\n *       <td></td>\n *     </tr>\n *     <tr>\n *       <td>TLS_PSK_WITH_AES_128_CBC_SHA</td>\n *       <td>21+</td>\n *       <td>21+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_PSK_WITH_AES_256_CBC_SHA</td>\n *       <td>21+</td>\n *       <td>21+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_PSK_WITH_RC4_128_SHA</td>\n *       <td>21-25</td>\n *       <td></td>\n *     </tr>\n *     <tr>\n *       <td>TLS_RSA_WITH_AES_128_CBC_SHA</td>\n *       <td>9+</td>\n *       <td>9+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_RSA_WITH_AES_128_CBC_SHA256</td>\n *       <td>20-28</td>\n *       <td></td>\n *     </tr>\n *     <tr>\n *       <td>TLS_RSA_WITH_AES_128_GCM_SHA256</td>\n *       <td>20+</td>\n *       <td>20+</td>\n *     </tr>\n *     <tr>\n *       <td>TLS_RSA_WITH_AES_256_CBC_SHA</td>\n *       <td>9+</td>\n *       <td>11+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_RSA_WITH_AES_256_CBC_SHA256</td>\n *       <td>20-28</td>\n *       <td></td>\n *     </tr>\n *     <tr>\n *       <td>TLS_RSA_WITH_AES_256_GCM_SHA384</td>\n *       <td>20+</td>\n *       <td>20+</td>\n *     </tr>\n *     <tr class=\"deprecated\">\n *       <td>TLS_RSA_WITH_NULL_SHA256</td>\n *       <td>20-22</td>\n *       <td></td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * <p><em>NOTE</em>: PSK cipher suites are enabled by default only if the {@code SSLContext} through\n * which the socket was created has been initialized with a {@code PSKKeyManager}.\n *\n * <p>API Levels 1 to 8 use OpenSSL names for cipher suites. The table below\n * lists these OpenSSL names and their corresponding standard names used in API\n * Levels 9 and newer.\n * <table>\n *     <thead>\n *         <tr>\n *             <th>OpenSSL cipher suite</th>\n *             <th>Standard cipher suite</th>\n *             <th>Supported (API Levels)</th>\n *             <th>Enabled by default (API Levels)</th>\n *         </tr>\n *     </thead>\n *\n *     <tbody>\n *         <tr>\n *             <td>AES128-SHA</td>\n *             <td>TLS_RSA_WITH_AES_128_CBC_SHA</td>\n *             <td>1+</td>\n *             <td>1+</td>\n *         </tr>\n *         <tr>\n *             <td>AES256-SHA</td>\n *             <td>TLS_RSA_WITH_AES_256_CBC_SHA</td>\n *             <td>1+</td>\n *             <td>1&ndash;8, 11+</td>\n *         </tr>\n *         <tr>\n *             <td>DES-CBC-MD5</td>\n *             <td>SSL_CK_DES_64_CBC_WITH_MD5</td>\n *             <td>1&ndash;8</td>\n *             <td>1&ndash;8</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>DES-CBC-SHA</td>\n *             <td>SSL_RSA_WITH_DES_CBC_SHA</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr>\n *             <td>DES-CBC3-MD5</td>\n *             <td>SSL_CK_DES_192_EDE3_CBC_WITH_MD5</td>\n *             <td>1&ndash;8</td>\n *             <td>1&ndash;8</td>\n *         </tr>\n *         <tr>\n *             <td>DES-CBC3-SHA</td>\n *             <td>SSL_RSA_WITH_3DES_EDE_CBC_SHA</td>\n *             <td>1+</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>DHE-DSS-AES128-SHA</td>\n *             <td>TLS_DHE_DSS_WITH_AES_128_CBC_SHA</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;22</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>DHE-DSS-AES256-SHA</td>\n *             <td>TLS_DHE_DSS_WITH_AES_256_CBC_SHA</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;8, 11&ndash;22</td>\n *         </tr>\n *         <tr>\n *             <td>DHE-RSA-AES128-SHA</td>\n *             <td>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</td>\n *             <td>1+</td>\n *             <td>1+</td>\n *         </tr>\n *         <tr>\n *             <td>DHE-RSA-AES256-SHA</td>\n *             <td>TLS_DHE_RSA_WITH_AES_256_CBC_SHA</td>\n *             <td>1+</td>\n *             <td>1&ndash;8, 11+</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>EDH-DSS-DES-CBC-SHA</td>\n *             <td>SSL_DHE_DSS_WITH_DES_CBC_SHA</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>EDH-DSS-DES-CBC3-SHA</td>\n *             <td>SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>EDH-RSA-DES-CBC-SHA</td>\n *             <td>SSL_DHE_RSA_WITH_DES_CBC_SHA</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>EDH-RSA-DES-CBC3-SHA</td>\n *             <td>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>EXP-DES-CBC-SHA</td>\n *             <td>SSL_RSA_EXPORT_WITH_DES40_CBC_SHA</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>EXP-EDH-DSS-DES-CBC-SHA</td>\n *             <td>SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>EXP-EDH-RSA-DES-CBC-SHA</td>\n *             <td>SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr>\n *             <td>EXP-RC2-CBC-MD5</td>\n *             <td>SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5</td>\n *             <td>1&ndash;8</td>\n *             <td>1&ndash;8</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>EXP-RC4-MD5</td>\n *             <td>SSL_RSA_EXPORT_WITH_RC4_40_MD5</td>\n *             <td>1&ndash;22</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr>\n *             <td>RC2-CBC-MD5</td>\n *             <td>SSL_CK_RC2_128_CBC_WITH_MD5</td>\n *             <td>1&ndash;8</td>\n *             <td>1&ndash;8</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>RC4-MD5</td>\n *             <td>SSL_RSA_WITH_RC4_128_MD5</td>\n *             <td>1&ndash;25</td>\n *             <td>1&ndash;19</td>\n *         </tr>\n *         <tr class=\"deprecated\">\n *             <td>RC4-SHA</td>\n *             <td>SSL_RSA_WITH_RC4_128_SHA</td>\n *             <td>1&ndash;25</td>\n *             <td>1&ndash;23</td>\n *         </tr>\n *     </tbody>\n * </table>\n *\n * @see java.net.Socket\n * @see SSLServerSocket\n * @see SSLSocketFactory\n *\n * @since 1.4\n * @author David Brownell\n ",
  "links" : [ "javax.net.ssl.SSLContext", "#setEnabledCipherSuites(String", "javax.net.ssl.SSLServerSocketFactory", "javax.net.ssl.SSLSocketFactory", "#getSupportedCipherSuites()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract String[] getSupportedCipherSuites()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of the cipher suites which could be enabled for use\n     * on this connection.  Normally, only a subset of these will actually\n     * be enabled by default, since this list may include cipher suites which\n     * do not meet quality of service requirements for those defaults.  Such\n     * cipher suites might be useful in specialized applications.\n     *\n     * <p class=\"caution\">Applications should not blindly enable all supported\n     * cipher suites.  The supported cipher suites can include signaling cipher suite\n     * values that can cause connection problems if enabled inappropriately.\n     *\n     * <p>The proper way to use this method is to either check if a specific cipher\n     * suite is supported via {@code Arrays.asList(getSupportedCipherSuites()).contains(...)}\n     * or to filter a desired list of cipher suites to only the supported ones via\n     * {@code desiredSuiteSet.retainAll(Arrays.asList(getSupportedCipherSuites()))}.\n     *\n     * @return an array of cipher suite names\n     * @see #getEnabledCipherSuites()\n     * @see #setEnabledCipherSuites(String [])\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getEnabledCipherSuites()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of the SSL cipher suites which are currently\n     * enabled for use on this connection.  When an SSLSocket is first\n     * created, all enabled cipher suites support a minimum quality of\n     * service.  Thus, in some environments this value might be empty.\n     * <P>\n     * Even if a suite has been enabled, it might never be used.  (For\n     * example, the peer does not support it, the requisite certificates\n     * (and private keys) for the suite are not available, or an\n     * anonymous suite is enabled but authentication is required.\n     *\n     * @return an array of cipher suite names\n     * @see #getSupportedCipherSuites()\n     * @see #setEnabledCipherSuites(String [])\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setEnabledCipherSuites(String[] suites)",
    "returnType" : "void",
    "comment" : "\n     * Sets the cipher suites enabled for use on this connection.\n     * <P>\n     * Each cipher suite in the <code>suites</code> parameter must have\n     * been listed by getSupportedCipherSuites(), or the method will\n     * fail.  Following a successful call to this method, only suites\n     * listed in the <code>suites</code> parameter are enabled for use.\n     * <P>\n     * See {@link #getEnabledCipherSuites()} for more information\n     * on why a specific ciphersuite may never be used on a connection.\n     *\n     * @param suites Names of all the cipher suites to enable\n     * @throws IllegalArgumentException when one or more of the ciphers\n     *          named by the parameter is not supported, or when the\n     *          parameter is null.\n     * @see #getSupportedCipherSuites()\n     * @see #getEnabledCipherSuites()\n     ",
    "links" : [ "#getEnabledCipherSuites()" ]
  }, {
    "name" : "public abstract String[] getSupportedProtocols()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of the protocols which could be enabled for use\n     * on an SSL connection.\n     *\n     * @return an array of protocols supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getEnabledProtocols()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of the protocol versions which are currently\n     * enabled for use on this connection.\n     * @see #setEnabledProtocols(String [])\n     * @return an array of protocols\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setEnabledProtocols(String[] protocols)",
    "returnType" : "void",
    "comment" : "\n     * Sets the protocol versions enabled for use on this connection.\n     * <P>\n     * The protocols must have been listed by\n     * <code>getSupportedProtocols()</code> as being supported.\n     * Following a successful call to this method, only protocols listed\n     * in the <code>protocols</code> parameter are enabled for use.\n     * <p>\n     * Because of the way the protocol version is negotiated, connections\n     * will only be able to use a member of the lowest set of contiguous\n     * enabled protocol versions.  For example, enabling TLSv1.2 and TLSv1\n     * will result in connections only being able to use TLSv1.\n     *\n     * @param protocols Names of all the protocols to enable.\n     * @throws IllegalArgumentException when one or more of\n     *            the protocols named by the parameter is not supported or\n     *            when the protocols parameter is null.\n     * @see #getEnabledProtocols()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract SSLSession getSession()",
    "returnType" : "SSLSession",
    "comment" : "\n     * Returns the SSL Session in use by this connection.  These can\n     * be long lived, and frequently correspond to an entire login session\n     * for some user.  The session specifies a particular cipher suite\n     * which is being actively used by all connections in that session,\n     * as well as the identities of the session's client and server.\n     * <P>\n     * This method will initiate the initial handshake if\n     * necessary and then block until the handshake has been\n     * established.\n     * <P>\n     * If an error occurs during the initial handshake, this method\n     * returns an invalid session object which reports an invalid\n     * cipher suite of \"SSL_NULL_WITH_NULL_NULL\".\n     *\n     * @return the <code>SSLSession</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public SSLSession getHandshakeSession()",
    "returnType" : "SSLSession",
    "comment" : "\n     * Returns the {@code SSLSession} being constructed during a SSL/TLS\n     * handshake.\n     * <p>\n     * TLS protocols may negotiate parameters that are needed when using\n     * an instance of this class, but before the {@code SSLSession} has\n     * been completely initialized and made available via {@code getSession}.\n     * For example, the list of valid signature algorithms may restrict\n     * the type of certificates that can used during TrustManager\n     * decisions, or the maximum TLS fragment packet sizes can be\n     * resized to better support the network environment.\n     * <p>\n     * This method provides early access to the {@code SSLSession} being\n     * constructed.  Depending on how far the handshake has progressed,\n     * some data may not yet be available for use.  For example, if a\n     * remote server will be sending a Certificate chain, but that chain\n     * has yet not been processed, the {@code getPeerCertificates}\n     * method of {@code SSLSession} will throw a\n     * SSLPeerUnverifiedException.  Once that chain has been processed,\n     * {@code getPeerCertificates} will return the proper value.\n     * <p>\n     * Unlike {@link #getSession()}, this method does not initiate the\n     * initial handshake and does not block until handshaking is\n     * complete.\n     *\n     * @see SSLEngine\n     * @see SSLSession\n     * @see ExtendedSSLSession\n     * @see X509ExtendedKeyManager\n     * @see X509ExtendedTrustManager\n     *\n     * @return null if this instance is not currently handshaking, or\n     *         if the current handshake has not progressed far enough to\n     *         create a basic SSLSession.  Otherwise, this method returns the\n     *         {@code SSLSession} currently being negotiated.\n     * @throws UnsupportedOperationException if the underlying provider\n     *         does not implement the operation.\n     *\n     * @since 1.7\n     ",
    "links" : [ "#getSession()" ]
  }, {
    "name" : "public abstract void addHandshakeCompletedListener(HandshakeCompletedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers an event listener to receive notifications that an\n     * SSL handshake has completed on this connection.\n     *\n     * @param listener the HandShake Completed event listener\n     * @see #startHandshake()\n     * @see #removeHandshakeCompletedListener(HandshakeCompletedListener)\n     * @throws IllegalArgumentException if the argument is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void removeHandshakeCompletedListener(HandshakeCompletedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a previously registered handshake completion listener.\n     *\n     * @param listener the HandShake Completed event listener\n     * @throws IllegalArgumentException if the listener is not registered,\n     * or the argument is null.\n     * @see #addHandshakeCompletedListener(HandshakeCompletedListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void startHandshake() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Starts an SSL handshake on this connection.  Common reasons include\n     * a need to use new encryption keys, to change cipher suites, or to\n     * initiate a new session.  To force complete reauthentication, the\n     * current session could be invalidated before starting this handshake.\n     *\n     * <P> If data has already been sent on the connection, it continues\n     * to flow during this handshake.  When the handshake completes, this\n     * will be signaled with an event.\n     *\n     * This method is synchronous for the initial handshake on a connection\n     * and returns when the negotiated handshake is complete. Some\n     * protocols may not support multiple handshakes on an existing socket\n     * and may throw an IOException.\n     *\n     * @throws IOException on a network level error\n     * @see #addHandshakeCompletedListener(HandshakeCompletedListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setUseClientMode(boolean mode)",
    "returnType" : "void",
    "comment" : "\n     * Configures the socket to use client (or server) mode when\n     * handshaking.\n     * <P>\n     * This method must be called before any handshaking occurs.\n     * Once handshaking has begun, the mode can not be reset for the\n     * life of this socket.\n     * <P>\n     * Servers normally authenticate themselves, and clients\n     * are not required to do so.\n     *\n     * @param mode true if the socket should start its handshaking\n     *          in \"client\" mode\n     * @throws IllegalArgumentException if a mode change is attempted\n     *          after the initial handshake has begun.\n     * @see #getUseClientMode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getUseClientMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the socket is set to use client mode when\n     * handshaking.\n     *\n     * @return true if the socket should do handshaking\n     *          in \"client\" mode\n     * @see #setUseClientMode(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setNeedClientAuth(boolean need)",
    "returnType" : "void",
    "comment" : "\n     * Configures the socket to <i>require</i> client authentication.  This\n     * option is only useful for sockets in the server mode.\n     * <P>\n     * A socket's client authentication setting is one of the following:\n     * <ul>\n     * <li> client authentication required\n     * <li> client authentication requested\n     * <li> no client authentication desired\n     * </ul>\n     * <P>\n     * Unlike {@link #setWantClientAuth(boolean)}, if this option is set and\n     * the client chooses not to provide authentication information\n     * about itself, <i>the negotiations will stop and the connection\n     * will be dropped</i>.\n     * <P>\n     * Calling this method overrides any previous setting made by\n     * this method or {@link #setWantClientAuth(boolean)}.\n     *\n     * @param   need set to true if client authentication is required,\n     *          or false if no client authentication is desired.\n     * @see #getNeedClientAuth()\n     * @see #setWantClientAuth(boolean)\n     * @see #getWantClientAuth()\n     * @see #setUseClientMode(boolean)\n     ",
    "links" : [ "#setWantClientAuth(boolean)" ]
  }, {
    "name" : "public abstract boolean getNeedClientAuth()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the socket will <i>require</i> client authentication.\n     * This option is only useful to sockets in the server mode.\n     *\n     * @return  true if client authentication is required,\n     *          or false if no client authentication is desired.\n     * @see #setNeedClientAuth(boolean)\n     * @see #setWantClientAuth(boolean)\n     * @see #getWantClientAuth()\n     * @see #setUseClientMode(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setWantClientAuth(boolean want)",
    "returnType" : "void",
    "comment" : "\n     * Configures the socket to <i>request</i> client authentication.\n     * This option is only useful for sockets in the server mode.\n     * <P>\n     * A socket's client authentication setting is one of the following:\n     * <ul>\n     * <li> client authentication required\n     * <li> client authentication requested\n     * <li> no client authentication desired\n     * </ul>\n     * <P>\n     * Unlike {@link #setNeedClientAuth(boolean)}, if this option is set and\n     * the client chooses not to provide authentication information\n     * about itself, <i>the negotiations will continue</i>.\n     * <P>\n     * Calling this method overrides any previous setting made by\n     * this method or {@link #setNeedClientAuth(boolean)}.\n     *\n     * @param   want set to true if client authentication is requested,\n     *          or false if no client authentication is desired.\n     * @see #getWantClientAuth()\n     * @see #setNeedClientAuth(boolean)\n     * @see #getNeedClientAuth()\n     * @see #setUseClientMode(boolean)\n     ",
    "links" : [ "#setNeedClientAuth(boolean)" ]
  }, {
    "name" : "public abstract boolean getWantClientAuth()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the socket will <i>request</i> client authentication.\n     * This option is only useful for sockets in the server mode.\n     *\n     * @return  true if client authentication is requested,\n     *          or false if no client authentication is desired.\n     * @see #setNeedClientAuth(boolean)\n     * @see #getNeedClientAuth()\n     * @see #setWantClientAuth(boolean)\n     * @see #setUseClientMode(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setEnableSessionCreation(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether new SSL sessions may be established by this socket.\n     * If session creations are not allowed, and there are no\n     * existing sessions to resume, there will be no successful\n     * handshaking.\n     *\n     * @param flag true indicates that sessions may be created; this\n     *          is the default.  false indicates that an existing session\n     *          must be resumed\n     * @see #getEnableSessionCreation()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getEnableSessionCreation()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if new SSL sessions may be established by this socket.\n     *\n     * @return true indicates that sessions may be created; this\n     *          is the default.  false indicates that an existing session\n     *          must be resumed\n     * @see #setEnableSessionCreation(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public SSLParameters getSSLParameters()",
    "returnType" : "SSLParameters",
    "comment" : "\n     * Returns the SSLParameters in effect for this SSLSocket.\n     * The ciphersuites and protocols of the returned SSLParameters\n     * are always non-null.\n     *\n     * @return the SSLParameters in effect for this SSLSocket.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSSLParameters(SSLParameters params)",
    "returnType" : "void",
    "comment" : "\n     * Applies SSLParameters to this socket.\n     *\n     * <p>This means:\n     * <ul>\n     * <li>If {@code params.getCipherSuites()} is non-null,\n     *   {@code setEnabledCipherSuites()} is called with that value.</li>\n     * <li>If {@code params.getProtocols()} is non-null,\n     *   {@code setEnabledProtocols()} is called with that value.</li>\n     * <li>If {@code params.getNeedClientAuth()} or\n     *   {@code params.getWantClientAuth()} return {@code true},\n     *   {@code setNeedClientAuth(true)} and\n     *   {@code setWantClientAuth(true)} are called, respectively;\n     *   otherwise {@code setWantClientAuth(false)} is called.</li>\n     * <li>If {@code params.getServerNames()} is non-null, the socket will\n     *   configure its server names with that value.</li>\n     * <li>If {@code params.getSNIMatchers()} is non-null, the socket will\n     *   configure its SNI matchers with that value.</li>\n     * </ul>\n     *\n     * @param params the parameters\n     * @throws IllegalArgumentException if the setEnabledCipherSuites() or\n     *    the setEnabledProtocols() call fails\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getApplicationProtocol()",
    "returnType" : "String",
    "comment" : "\n     * Returns the most recent application protocol value negotiated for this\n     * connection.\n     * <p>\n     * If supported by the underlying SSL/TLS implementation,\n     * application name negotiation mechanisms such as <a\n     * href=\"http://www.ietf.org/rfc/rfc7301.txt\"> RFC 7301 </a>, the\n     * Application-Layer Protocol Negotiation (ALPN), can negotiate\n     * application-level values between peers.\n     * <p>\n     * @implSpec\n     * The implementation in this class throws\n     * {@code UnsupportedOperationException} and performs no other action.\n     *\n     * @return null if it has not yet been determined if application\n     *         protocols might be used for this connection, an empty\n     *         {@code String} if application protocols values will not\n     *         be used, or a non-empty application protocol {@code String}\n     *         if a value was successfully negotiated.\n     * @throws UnsupportedOperationException if the underlying provider\n     *         does not implement the operation.\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getHandshakeApplicationProtocol()",
    "returnType" : "String",
    "comment" : "\n     * Returns the application protocol value negotiated on a SSL/TLS\n     * handshake currently in progress.\n     * <p>\n     * Like {@link #getHandshakeSession()},\n     * a connection may be in the middle of a handshake. The\n     * application protocol may or may not yet be available.\n     * <p>\n     * @implSpec\n     * The implementation in this class throws\n     * {@code UnsupportedOperationException} and performs no other action.\n     *\n     * @return null if it has not yet been determined if application\n     *         protocols might be used for this handshake, an empty\n     *         {@code String} if application protocols values will not\n     *         be used, or a non-empty application protocol {@code String}\n     *         if a value was successfully negotiated.\n     * @throws UnsupportedOperationException if the underlying provider\n     *         does not implement the operation.\n     * @since 9\n     ",
    "links" : [ "#getHandshakeSession()" ]
  }, {
    "name" : "public void setHandshakeApplicationProtocolSelector(BiFunction<SSLSocket, List<String>, String> selector)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback function that selects an application protocol\n     * value for a SSL/TLS handshake.\n     * The function overrides any values supplied using\n     * {@link SSLParameters#setApplicationProtocols\n     * SSLParameters.setApplicationProtocols} and it supports the following\n     * type parameters:\n     * <blockquote>\n     * <dl>\n     * <dt> {@code SSLSocket}\n     * <dd> The function's first argument allows the current {@code SSLSocket}\n     *      to be inspected, including the handshake session and configuration\n     *      settings.\n     * <dt> {@code List<String>}\n     * <dd> The function's second argument lists the application protocol names\n     *      advertised by the TLS peer.\n     * <dt> {@code String}\n     * <dd> The function's result is an application protocol name, or null to\n     *      indicate that none of the advertised names are acceptable.\n     *      If the return value is an empty {@code String} then application\n     *      protocol indications will not be used.\n     *      If the return value is null (no value chosen) or is a value that\n     *      was not advertised by the peer, the underlying protocol will\n     *      determine what action to take. (For example, ALPN will send a\n     *      \"no_application_protocol\" alert and terminate the connection.)\n     * </dl>\n     * </blockquote>\n     *\n     * For example, the following call registers a callback function that\n     * examines the TLS handshake parameters and selects an application protocol\n     * name:\n     * <pre>{@code\n     *     serverSocket.setHandshakeApplicationProtocolSelector(\n     *         (serverSocket, clientProtocols) -> {\n     *             SSLSession session = serverSocket.getHandshakeSession();\n     *             return chooseApplicationProtocol(\n     *                 serverSocket,\n     *                 clientProtocols,\n     *                 session.getProtocol(),\n     *                 session.getCipherSuite());\n     *         });\n     * }</pre>\n     *\n     * @apiNote\n     * This method should be called by TLS server applications before the TLS\n     * handshake begins. Also, this {@code SSLSocket} should be configured with\n     * parameters that are compatible with the application protocol selected by\n     * the callback function. For example, enabling a poor choice of cipher\n     * suites could result in no suitable application protocol.\n     * See {@link SSLParameters}.\n     *\n     * @implSpec\n     * The implementation in this class throws\n     * {@code UnsupportedOperationException} and performs no other action.\n     *\n     * @param selector the callback function, or null to de-register.\n     * @throws UnsupportedOperationException if the underlying provider\n     *         does not implement the operation.\n     * @since 9\n     ",
    "links" : [ "javax.net.ssl.SSLParameters", "javax.net.ssl.SSLParameters#setApplicationProtocolsSSLParameters.setApplicationProtocols" ]
  }, {
    "name" : "public BiFunction<SSLSocket, List<String>, String> getHandshakeApplicationProtocolSelector()",
    "returnType" : "BiFunction<SSLSocket, List<String>, String>",
    "comment" : "\n     * Retrieves the callback function that selects an application protocol\n     * value during a SSL/TLS handshake.\n     * See {@link #setHandshakeApplicationProtocolSelector\n     * setHandshakeApplicationProtocolSelector}\n     * for the function's type parameters.\n     *\n     * @implSpec\n     * The implementation in this class throws\n     * {@code UnsupportedOperationException} and performs no other action.\n     *\n     * @return the callback function, or null if none has been set.\n     * @throws UnsupportedOperationException if the underlying provider\n     *         does not implement the operation.\n     * @since 9\n     ",
    "links" : [ "#setHandshakeApplicationProtocolSelectorsetHandshakeApplicationProtocolSelector" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " Android-added: Make toString explicit that this is an SSLSocket (http://b/6602228)",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract String[] getSupportedCipherSuites()", "public abstract String[] getEnabledCipherSuites()", "public abstract void setEnabledCipherSuites(String[] suites)", "public abstract String[] getSupportedProtocols()", "public abstract String[] getEnabledProtocols()", "public abstract void setEnabledProtocols(String[] protocols)", "public abstract SSLSession getSession()", "public SSLSession getHandshakeSession()", "public abstract void addHandshakeCompletedListener(HandshakeCompletedListener listener)", "public abstract void removeHandshakeCompletedListener(HandshakeCompletedListener listener)", "public abstract void startHandshake() throws IOException", "public abstract void setUseClientMode(boolean mode)", "public abstract boolean getUseClientMode()", "public abstract void setNeedClientAuth(boolean need)", "public abstract boolean getNeedClientAuth()", "public abstract void setWantClientAuth(boolean want)", "public abstract boolean getWantClientAuth()", "public abstract void setEnableSessionCreation(boolean flag)", "public abstract boolean getEnableSessionCreation()", "public SSLParameters getSSLParameters()", "public void setSSLParameters(SSLParameters params)", "public String getApplicationProtocol()", "public String getHandshakeApplicationProtocol()", "public void setHandshakeApplicationProtocolSelector(BiFunction<SSLSocket, List<String>, String> selector)", "public BiFunction<SSLSocket, List<String>, String> getHandshakeApplicationProtocolSelector()", "public String toString()" ],
  "variableNames" : [ ]
}