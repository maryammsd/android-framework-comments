{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/HttpCookie.java",
  "packageName" : "java.net",
  "className" : "HttpCookie",
  "comment" : "\n * An HttpCookie object represents an HTTP cookie, which carries state\n * information between server and user agent. Cookie is widely adopted\n * to create stateful sessions.\n *\n * <p> There are 3 HTTP cookie specifications:\n * <blockquote>\n *   Netscape draft<br>\n *   RFC 2109 - <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">\n * <i>http://www.ietf.org/rfc/rfc2109.txt</i></a><br>\n *   RFC 2965 - <a href=\"http://www.ietf.org/rfc/rfc2965.txt\">\n * <i>http://www.ietf.org/rfc/rfc2965.txt</i></a>\n * </blockquote>\n *\n * <p> HttpCookie class can accept all these 3 forms of syntax.\n *\n * @author Edward Wang\n * @since 1.6\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "RESERVED_NAMES",
    "type" : "Set<String>",
    "comment" : " BEGIN Android-added: Reserved name can't be HttpCookie name.",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : " NAME= ... \"$Name\" style is reserved",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "String",
    "comment" : " value of NAME",
    "links" : [ ]
  }, {
    "name" : "comment",
    "type" : "String",
    "comment" : " Comment=VALUE ... describes cookie's use",
    "links" : [ ]
  }, {
    "name" : "commentURL",
    "type" : "String",
    "comment" : " CommentURL=\"http URL\" ... describes cookie's use",
    "links" : [ ]
  }, {
    "name" : "toDiscard",
    "type" : "boolean",
    "comment" : " Discard ... discard cookie unconditionally",
    "links" : [ ]
  }, {
    "name" : "domain",
    "type" : "String",
    "comment" : " Domain=VALUE ... domain that sees cookie",
    "links" : [ ]
  }, {
    "name" : "maxAge",
    "type" : "long",
    "comment" : " Max-Age=VALUE ... cookies auto-expire",
    "links" : [ ]
  }, {
    "name" : "path",
    "type" : "String",
    "comment" : " Path=VALUE ... URLs that see the cookie",
    "links" : [ ]
  }, {
    "name" : "portlist",
    "type" : "String",
    "comment" : " Port[=\"portlist\"] ... the port cookie may be returned to",
    "links" : [ ]
  }, {
    "name" : "secure",
    "type" : "boolean",
    "comment" : " Secure ... e.g. use SSL",
    "links" : [ ]
  }, {
    "name" : "httpOnly",
    "type" : "boolean",
    "comment" : " HttpOnly ... i.e. not accessible to scripts",
    "links" : [ ]
  }, {
    "name" : "version",
    "type" : "int",
    "comment" : " Version=1 ... RFC 2965 style",
    "links" : [ ]
  }, {
    "name" : "header",
    "type" : "String",
    "comment" : " constructed by parsing a header, otherwise null.",
    "links" : [ ]
  }, {
    "name" : "whenCreated",
    "type" : "long",
    "comment" : " expiration calculation",
    "links" : [ ]
  }, {
    "name" : "MAX_AGE_UNSPECIFIED",
    "type" : "long",
    "comment" : " this value serves as a hint as 'not specify max-age'",
    "links" : [ ]
  }, {
    "name" : "SET_COOKIE",
    "type" : "String",
    "comment" : " constant strings represent set-cookie header token",
    "links" : [ ]
  }, {
    "name" : "SET_COOKIE2",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tspecials",
    "type" : "String",
    "comment" : " private static final String tspecials = \",; \";  // deliberately includes space",
    "links" : [ ]
  }, {
    "name" : "assignors",
    "type" : "java.util.Map<String, CookieAttributeAssignor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GMT",
    "type" : "TimeZone",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static List<HttpCookie> parse(String header)",
    "returnType" : "List<HttpCookie>",
    "comment" : "\n     * Constructs cookies from set-cookie or set-cookie2 header string.\n     * RFC 2965 section 3.2.2 set-cookie2 syntax indicates that one header line\n     * may contain more than one cookie definitions, so this is a static\n     * utility method instead of another constructor.\n     *\n     * @param  header\n     *         a {@code String} specifying the set-cookie header. The header\n     *         should start with \"set-cookie\", or \"set-cookie2\" token; or it\n     *         should have no leading token at all.\n     *\n     * @return  a List of cookie parsed from header line string\n     *\n     * @throws  IllegalArgumentException\n     *          if header string violates the cookie specification's syntax or\n     *          the cookie name contains illegal characters.\n     * @throws  NullPointerException\n     *          if the header string is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static List<HttpCookie> parse(String header, boolean retainHeader)",
    "returnType" : "List<HttpCookie>",
    "comment" : " class.",
    "links" : [ ]
  }, {
    "name" : "public boolean hasExpired()",
    "returnType" : "boolean",
    "comment" : "\n     * Reports whether this HTTP cookie has expired or not.\n     *\n     * @return  {@code true} to indicate this HTTP cookie has expired;\n     *          otherwise, {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setComment(String purpose)",
    "returnType" : "void",
    "comment" : "\n     * Specifies a comment that describes a cookie's purpose.\n     * The comment is useful if the browser presents the cookie\n     * to the user. Comments are not supported by Netscape Version 0 cookies.\n     *\n     * @param  purpose\n     *         a {@code String} specifying the comment to display to the user\n     *\n     * @see  #getComment\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getComment()",
    "returnType" : "String",
    "comment" : "\n     * Returns the comment describing the purpose of this cookie, or\n     * {@code null} if the cookie has no comment.\n     *\n     * @return  a {@code String} containing the comment, or {@code null} if none\n     *\n     * @see  #setComment\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCommentURL(String purpose)",
    "returnType" : "void",
    "comment" : "\n     * Specifies a comment URL that describes a cookie's purpose.\n     * The comment URL is useful if the browser presents the cookie\n     * to the user. Comment URL is RFC 2965 only.\n     *\n     * @param  purpose\n     *         a {@code String} specifying the comment URL to display to the user\n     *\n     * @see  #getCommentURL\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCommentURL()",
    "returnType" : "String",
    "comment" : "\n     * Returns the comment URL describing the purpose of this cookie, or\n     * {@code null} if the cookie has no comment URL.\n     *\n     * @return  a {@code String} containing the comment URL, or {@code null}\n     *          if none\n     *\n     * @see  #setCommentURL\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDiscard(boolean discard)",
    "returnType" : "void",
    "comment" : "\n     * Specify whether user agent should discard the cookie unconditionally.\n     * This is RFC 2965 only attribute.\n     *\n     * @param  discard\n     *         {@code true} indicates to discard cookie unconditionally\n     *\n     * @see  #getDiscard\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDiscard()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the discard attribute of the cookie\n     *\n     * @return  a {@code boolean} to represent this cookie's discard attribute\n     *\n     * @see  #setDiscard\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPortlist(String ports)",
    "returnType" : "void",
    "comment" : "\n     * Specify the portlist of the cookie, which restricts the port(s)\n     * to which a cookie may be sent back in a Cookie header.\n     *\n     * @param  ports\n     *         a {@code String} specify the port list, which is comma separated\n     *         series of digits\n     *\n     * @see  #getPortlist\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPortlist()",
    "returnType" : "String",
    "comment" : "\n     * Returns the port list attribute of the cookie\n     *\n     * @return  a {@code String} contains the port list or {@code null} if none\n     *\n     * @see  #setPortlist\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDomain(String pattern)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the domain within which this cookie should be presented.\n     *\n     * <p> The form of the domain name is specified by RFC 2965. A domain\n     * name begins with a dot ({@code .foo.com}) and means that\n     * the cookie is visible to servers in a specified Domain Name System\n     * (DNS) zone (for example, {@code www.foo.com}, but not\n     * {@code a.b.foo.com}). By default, cookies are only returned\n     * to the server that sent them.\n     *\n     * @param  pattern\n     *         a {@code String} containing the domain name within which this\n     *         cookie is visible; form is according to RFC 2965\n     *\n     * @see  #getDomain\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDomain()",
    "returnType" : "String",
    "comment" : "\n     * Returns the domain name set for this cookie. The form of the domain name\n     * is set by RFC 2965.\n     *\n     * @return  a {@code String} containing the domain name\n     *\n     * @see  #setDomain\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxAge(long expiry)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum age of the cookie in seconds.\n     *\n     * <p> A positive value indicates that the cookie will expire\n     * after that many seconds have passed. Note that the value is\n     * the <i>maximum</i> age when the cookie will expire, not the cookie's\n     * current age.\n     *\n     * <p> A negative value means that the cookie is not stored persistently\n     * and will be deleted when the Web browser exits. A zero value causes the\n     * cookie to be deleted.\n     *\n     * @param  expiry\n     *         an integer specifying the maximum age of the cookie in seconds;\n     *         if zero, the cookie should be discarded immediately; otherwise,\n     *         the cookie's max age is unspecified.\n     *\n     * @see  #getMaxAge\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMaxAge()",
    "returnType" : "long",
    "comment" : "\n     * Returns the maximum age of the cookie, specified in seconds. By default,\n     * {@code -1} indicating the cookie will persist until browser shutdown.\n     *\n     * @return  an integer specifying the maximum age of the cookie in seconds\n     *\n     * @see  #setMaxAge\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPath(String uri)",
    "returnType" : "void",
    "comment" : "\n     * Specifies a path for the cookie to which the client should return\n     * the cookie.\n     *\n     * <p> The cookie is visible to all the pages in the directory\n     * you specify, and all the pages in that directory's subdirectories.\n     * A cookie's path must include the servlet that set the cookie,\n     * for example, <i>/catalog</i>, which makes the cookie\n     * visible to all directories on the server under <i>/catalog</i>.\n     *\n     * <p> Consult RFC 2965 (available on the Internet) for more\n     * information on setting path names for cookies.\n     *\n     * @param  uri\n     *         a {@code String} specifying a path\n     *\n     * @see  #getPath\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPath()",
    "returnType" : "String",
    "comment" : "\n     * Returns the path on the server to which the browser returns this cookie.\n     * The cookie is visible to all subpaths on the server.\n     *\n     * @return  a {@code String} specifying a path that contains a servlet name,\n     *          for example, <i>/catalog</i>\n     *\n     * @see  #setPath\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSecure(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether the cookie should only be sent using a secure protocol,\n     * such as HTTPS or SSL.\n     *\n     * <p> The default value is {@code false}.\n     *\n     * @param  flag\n     *         If {@code true}, the cookie can only be sent over a secure\n     *         protocol like HTTPS. If {@code false}, it can be sent over\n     *         any protocol.\n     *\n     * @see  #getSecure\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSecure()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if sending this cookie should be restricted to a\n     * secure protocol, or {@code false} if the it can be sent using any\n     * protocol.\n     *\n     * @return  {@code false} if the cookie can be sent over any standard\n     *          protocol; otherwise, {@code true}\n     *\n     * @see  #setSecure\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the cookie. The name cannot be changed after\n     * creation.\n     *\n     * @return  a {@code String} specifying the cookie's name\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setValue(String newValue)",
    "returnType" : "void",
    "comment" : "\n     * Assigns a new value to a cookie after the cookie is created.\n     * If you use a binary value, you may want to use BASE64 encoding.\n     *\n     * <p> With Version 0 cookies, values should not contain white space,\n     * brackets, parentheses, equals signs, commas, double quotes, slashes,\n     * question marks, at signs, colons, and semicolons. Empty values may not\n     * behave the same way on all browsers.\n     *\n     * @param  newValue\n     *         a {@code String} specifying the new value\n     *\n     * @see  #getValue\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue()",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the cookie.\n     *\n     * @return  a {@code String} containing the cookie's present value\n     *\n     * @see  #setValue\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVersion()",
    "returnType" : "int",
    "comment" : "\n     * Returns the version of the protocol this cookie complies with. Version 1\n     * complies with RFC 2965/2109, and version 0 complies with the original\n     * cookie specification drafted by Netscape. Cookies provided by a browser\n     * use and identify the browser's cookie version.\n     *\n     * @return  0 if the cookie complies with the original Netscape\n     *          specification; 1 if the cookie complies with RFC 2965/2109\n     *\n     * @see  #setVersion\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVersion(int v)",
    "returnType" : "void",
    "comment" : "\n     * Sets the version of the cookie protocol this cookie complies\n     * with. Version 0 complies with the original Netscape cookie\n     * specification. Version 1 complies with RFC 2965/2109.\n     *\n     * @param  v\n     *         0 if the cookie should comply with the original Netscape\n     *         specification; 1 if the cookie should comply with RFC 2965/2109\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code v} is neither 0 nor 1\n     *\n     * @see  #getVersion\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHttpOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this cookie contains the <i>HttpOnly</i>\n     * attribute. This means that the cookie should not be accessible to\n     * scripting engines, like javascript.\n     *\n     * @return  {@code true} if this cookie should be considered HTTPOnly\n     *\n     * @see  #setHttpOnly(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHttpOnly(boolean httpOnly)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether the cookie should be considered HTTP Only. If set to\n     * {@code true} it means the cookie should not be accessible to scripting\n     * engines like javascript.\n     *\n     * @param  httpOnly\n     *         if {@code true} make the cookie HTTP only, i.e. only visible as\n     *         part of an HTTP request.\n     *\n     * @see  #isHttpOnly()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean domainMatches(String domain, String host)",
    "returnType" : "boolean",
    "comment" : "\n     * The utility method to check whether a host name is in a domain or not.\n     *\n     * <p> This concept is described in the cookie specification.\n     * To understand the concept, some terminologies need to be defined first:\n     * <blockquote>\n     * effective host name = hostname if host name contains dot<br>\n     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or = hostname.local if not\n     * </blockquote>\n     * <p>Host A's name domain-matches host B's if:\n     * <blockquote><ul>\n     *   <li>their host name strings string-compare equal; or</li>\n     *   <li>A is a HDN string and has the form NB, where N is a non-empty\n     *   name string, B has the form .B', and B' is a HDN string.  (So,\n     *   x.y.com domain-matches .Y.com but not Y.com.)</li>\n     * </ul></blockquote>\n     *\n     * <p>A host isn't in a domain (RFC 2965 sec. 3.3.2) if:\n     * <blockquote><ul>\n     *   <li>The value for the Domain attribute contains no embedded dots,\n     *   and the value is not .local.</li>\n     *   <li>The effective host name that derives from the request-host does\n     *   not domain-match the Domain attribute.</li>\n     *   <li>The request-host is a HDN (not IP address) and has the form HD,\n     *   where D is the value of the Domain attribute, and H is a string\n     *   that contains one or more dots.</li>\n     * </ul></blockquote>\n     *\n     * <p>Examples:\n     * <blockquote><ul>\n     *   <li>A Set-Cookie2 from request-host y.x.foo.com for Domain=.foo.com\n     *   would be rejected, because H is y.x and contains a dot.</li>\n     *   <li>A Set-Cookie2 from request-host x.foo.com for Domain=.foo.com\n     *   would be accepted.</li>\n     *   <li>A Set-Cookie2 with Domain=.com or Domain=.com., will always be\n     *   rejected, because there is no embedded dot.</li>\n     *   <li>A Set-Cookie2 from request-host example for Domain=.local will\n     *   be accepted, because the effective host name for the request-\n     *   host is example.local, and example.local domain-matches .local.</li>\n     * </ul></blockquote>\n     *\n     * @param  domain\n     *         the domain name to check host name with\n     *\n     * @param  host\n     *         the host name in question\n     *\n     * @return  {@code true} if they domain-matches; {@code false} if not\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isFullyQualifiedDomainName(String s, int firstCharacter)",
    "returnType" : "boolean",
    "comment" : " BEGIN Android-added: App compat reason.",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Constructs a cookie header string representation of this cookie,\n     * which is in the format defined by corresponding cookie specification,\n     * but without the leading \"Cookie:\" token.\n     *\n     * @return  a string form of the cookie. The string has the defined format\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Test the equality of two HTTP cookies.\n     *\n     * <p> The result is {@code true} only if two cookies come from same domain\n     * (case-insensitive), have same name (case-insensitive), and have same path\n     * (case-sensitive).\n     *\n     * @return  {@code true} if two HTTP cookies equal to each other;\n     *          otherwise, {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code of this HTTP cookie. The result is the sum of\n     * hash code value of three significant components of this cookie: name,\n     * domain, and path. That is, the hash code is the value of the expression:\n     * <blockquote>\n     * getName().toLowerCase().hashCode()<br>\n     * + getDomain().toLowerCase().hashCode()<br>\n     * + getPath().hashCode()\n     * </blockquote>\n     *\n     * @return  this HTTP cookie's hash code\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Create and return a copy of this object.\n     *\n     * @return  a clone of this HTTP cookie\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isToken(String value)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests a string and returns true if the string counts as a token.\n     *\n     * @param  value\n     *         the {@code String} to be tested\n     *\n     * @return  {@code true} if the {@code String} is a token;\n     *          {@code false} if it is not\n     ",
    "links" : [ ]
  }, {
    "name" : "private static HttpCookie parseInternal(String header, boolean retainHeader)",
    "returnType" : "HttpCookie",
    "comment" : "\n     * Parse header string to cookie object.\n     *\n     * @param  header\n     *         header string; should contain only one NAME=VALUE pair\n     *\n     * @return  an HttpCookie being extracted\n     *\n     * @throws  IllegalArgumentException\n     *          if header string violates the cookie specification\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void assignAttribute(HttpCookie cookie, String attrName, String attrValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String header()",
    "returnType" : "String",
    "comment" : "\n     * Returns the original header this cookie was consructed from, if it was\n     * constructed by parsing a header, otherwise null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String toNetscapeHeaderString()",
    "returnType" : "String",
    "comment" : "\n     * Constructs a string representation of this cookie. The string format is\n     * as Netscape spec, but without leading \"Cookie:\" token.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String toRFC2965HeaderString()",
    "returnType" : "String",
    "comment" : "\n     * Constructs a string representation of this cookie. The string format is\n     * as RFC 2965/2109, but without leading \"Cookie:\" token.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int guessCookieVersion(String header)",
    "returnType" : "int",
    "comment" : "\n     * try to guess the cookie version through set-cookie header string\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String stripOffSurroundingQuote(String str)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean equalsIgnoreCase(String s, String t)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean startsWithIgnoreCase(String s, String start)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<String> splitMultiCookies(String header)",
    "returnType" : "List<String>",
    "comment" : "\n     * Split cookie header string according to rfc 2965:\n     *   1) split where it is a comma;\n     *   2) but not the comma surrounding by double-quotes, which is the comma\n     *      inside port list or embeded URIs.\n     *\n     * @param  header\n     *         the cookie header string to split\n     *\n     * @return  list of strings; never null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static List<HttpCookie> parse(String header)", "private static List<HttpCookie> parse(String header, boolean retainHeader)", "public boolean hasExpired()", "public void setComment(String purpose)", "public String getComment()", "public void setCommentURL(String purpose)", "public String getCommentURL()", "public void setDiscard(boolean discard)", "public boolean getDiscard()", "public void setPortlist(String ports)", "public String getPortlist()", "public void setDomain(String pattern)", "public String getDomain()", "public void setMaxAge(long expiry)", "public long getMaxAge()", "public void setPath(String uri)", "public String getPath()", "public void setSecure(boolean flag)", "public boolean getSecure()", "public String getName()", "public void setValue(String newValue)", "public String getValue()", "public int getVersion()", "public void setVersion(int v)", "public boolean isHttpOnly()", "public void setHttpOnly(boolean httpOnly)", "public static boolean domainMatches(String domain, String host)", "private static boolean isFullyQualifiedDomainName(String s, int firstCharacter)", "public String toString()", "public boolean equals(Object obj)", "public int hashCode()", "public Object clone()", "private static boolean isToken(String value)", "private static HttpCookie parseInternal(String header, boolean retainHeader)", "private static void assignAttribute(HttpCookie cookie, String attrName, String attrValue)", "private String header()", "private String toNetscapeHeaderString()", "private String toRFC2965HeaderString()", "private static int guessCookieVersion(String header)", "private static String stripOffSurroundingQuote(String str)", "private static boolean equalsIgnoreCase(String s, String t)", "private static boolean startsWithIgnoreCase(String s, String start)", "private static List<String> splitMultiCookies(String header)" ],
  "variableNames" : [ "RESERVED_NAMES", "name", "value", "comment", "commentURL", "toDiscard", "domain", "maxAge", "path", "portlist", "secure", "httpOnly", "version", "header", "whenCreated", "MAX_AGE_UNSPECIFIED", "SET_COOKIE", "SET_COOKIE2", "tspecials", "assignors", "GMT" ]
}