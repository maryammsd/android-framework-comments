{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/DistanceMeasurementSession.java",
  "packageName" : "android.bluetooth.le",
  "className" : "DistanceMeasurementSession",
  "comment" : "\n * This class provides a way to control an active distance measurement session.\n *\n * <p>It also defines the required {@link DistanceMeasurementSession.Callback} that must be\n * implemented in order to be notified of distance measurement results and status events related to\n * the {@link DistanceMeasurementSession}.\n *\n * <p>To get an instance of {@link DistanceMeasurementSession}, first use {@link\n * DistanceMeasurementManager#startMeasurementSession(DistanceMeasurementParams, Executor,\n * DistanceMeasurementSession.Callback)} to request to start a session. Once the session is started,\n * a {@link DistanceMeasurementSession} object is provided through {@link\n * DistanceMeasurementSession.Callback#onStarted(DistanceMeasurementSession)}. If starting a session\n * fails, the failure is reported through {@link\n * DistanceMeasurementSession.Callback#onStartFail(int)} with the failure reason.\n *\n * @hide\n ",
  "links" : [ "DistanceMeasurementSession.Callback#onStartFail(int)", "DistanceMeasurementSession.Callback#onStarted(DistanceMeasurementSession)", "DistanceMeasurementSession.Callback", "android.bluetooth.le.DistanceMeasurementManager#startMeasurementSession(DistanceMeasurementParams", "android.bluetooth.le.DistanceMeasurementSession" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGatt",
    "type" : "IBluetoothGatt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUuid",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDistanceMeasurementParams",
    "type" : "DistanceMeasurementParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int stopSession()",
    "returnType" : "int",
    "comment" : "\n     * Stops actively ranging, {@link Callback#onStopped} will be invoked if this succeeds.\n     *\n     * @return whether successfully stop or not\n     * @hide\n     ",
    "links" : [ "#onStopped" ]
  }, {
    "name" : " void onStarted()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void onStartFail(int reason)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void onStopped(int reason)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void onResult(@NonNull BluetoothDevice device, @NonNull DistanceMeasurementResult result)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void executeCallback(@NonNull Runnable runnable)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int stopSession()", " void onStarted()", " void onStartFail(int reason)", " void onStopped(int reason)", " void onResult(@NonNull BluetoothDevice device, @NonNull DistanceMeasurementResult result)", "private void executeCallback(@NonNull Runnable runnable)" ],
  "variableNames" : [ "TAG", "mGatt", "mUuid", "mDistanceMeasurementParams", "mExecutor", "mCallback", "mAttributionSource" ]
}