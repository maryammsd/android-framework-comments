{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/transformer/TransformState.java",
  "packageName" : "org.apache.xalan.transformer",
  "className" : "TransformState",
  "comment" : "\n * This interface is meant to be used by a consumer of\n * SAX2 events produced by Xalan, and enables the consumer\n * to get information about the state of the transform.  It\n * is primarily intended as a tooling interface.  A content\n * handler can get a reference to a TransformState by implementing\n * the TransformerClient interface.  Xalan will check for\n * that interface before it calls startDocument, and, if it\n * is implemented, pass in a TransformState reference to the\n * setTransformState method.\n *\n * <p>Note that the current stylesheet and root stylesheet can\n * be retrieved from the ElemTemplateElement obtained from\n * either getCurrentElement() or getCurrentTemplate().</p>\n * \n * This interface contains only getter methods, any setters are in the interface\n * TransformStateSetter which this interface extends.\n * \n * @see org.apache.xml.serializer.TransformStateSetter\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " ElemTemplateElement getCurrentElement()",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Retrieves the stylesheet element that produced\n   * the SAX event.\n   *\n   * <p>Please note that the ElemTemplateElement returned may\n   * be in a default template, and thus may not be\n   * defined in the stylesheet.</p>\n   *\n   * @return the stylesheet element that produced the SAX event.\n   ",
    "links" : [ ]
  }, {
    "name" : " Node getCurrentNode()",
    "returnType" : "Node",
    "comment" : "\n   * This method retrieves the current context node\n   * in the source tree.\n   *\n   * @return the current context node in the source tree.\n   ",
    "links" : [ ]
  }, {
    "name" : " ElemTemplate getCurrentTemplate()",
    "returnType" : "ElemTemplate",
    "comment" : "\n   * This method retrieves the xsl:template\n   * that is in effect, which may be a matched template\n   * or a named template.\n   *\n   * <p>Please note that the ElemTemplate returned may\n   * be a default template, and thus may not have a template\n   * defined in the stylesheet.</p>\n   *\n   * @return the xsl:template that is in effect\n   ",
    "links" : [ ]
  }, {
    "name" : " ElemTemplate getMatchedTemplate()",
    "returnType" : "ElemTemplate",
    "comment" : "\n   * This method retrieves the xsl:template\n   * that was matched.  Note that this may not be\n   * the same thing as the current template (which\n   * may be from getCurrentElement()), since a named\n   * template may be in effect.\n   *\n   * <p>Please note that the ElemTemplate returned may\n   * be a default template, and thus may not have a template\n   * defined in the stylesheet.</p>\n   *\n   * @return the xsl:template that was matched.\n   ",
    "links" : [ ]
  }, {
    "name" : " Node getMatchedNode()",
    "returnType" : "Node",
    "comment" : "\n   * Retrieves the node in the source tree that matched\n   * the template obtained via getMatchedTemplate().\n   *\n   * @return the node in the source tree that matched\n   * the template obtained via getMatchedTemplate().\n   ",
    "links" : [ ]
  }, {
    "name" : " NodeIterator getContextNodeList()",
    "returnType" : "NodeIterator",
    "comment" : "\n   * Get the current context node list.\n   *\n   * @return the current context node list.\n   ",
    "links" : [ ]
  }, {
    "name" : " Transformer getTransformer()",
    "returnType" : "Transformer",
    "comment" : "\n   * Get the TrAX Transformer object in effect.\n   *\n   * @return the TrAX Transformer object in effect.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " ElemTemplateElement getCurrentElement()", " Node getCurrentNode()", " ElemTemplate getCurrentTemplate()", " ElemTemplate getMatchedTemplate()", " Node getMatchedNode()", " NodeIterator getContextNodeList()", " Transformer getTransformer()" ],
  "variableNames" : [ ]
}