{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/ClipDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "ClipDrawable",
  "comment" : "\n * A Drawable that clips another Drawable based on this Drawable's current\n * level value.  You can control how much the child Drawable gets clipped in width\n * and height based on the level, as well as a gravity to control where it is\n * placed in its overall container.  Most often used to implement things like\n * progress bars, by increasing the drawable's level with {@link\n * android.graphics.drawable.Drawable#setLevel(int) setLevel()}.\n * <p class=\"note\"><strong>Note:</strong> The drawable is clipped completely and not visible when\n * the level is 0 and fully revealed when the level is 10,000.</p>\n *\n * <p>It can be defined in an XML file with the <code>&lt;clip></code> element.  For more\n * information, see the guide to <a\n * href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.</p>\n *\n * @attr ref android.R.styleable#ClipDrawable_clipOrientation\n * @attr ref android.R.styleable#ClipDrawable_gravity\n * @attr ref android.R.styleable#ClipDrawable_drawable\n ",
  "variables" : [ {
    "name" : "HORIZONTAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERTICAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "ClipState",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@NonNull Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyRequiredAttributes(@NonNull TypedArray a) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(@NonNull TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLevelChange(int level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DrawableWrapperState mutateConstantState()",
    "returnType" : "DrawableWrapperState",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "HORIZONTAL", "VERTICAL", "MAX_LEVEL", "mTmpRect", "mState" ],
  "methodNames" : [ "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public void applyTheme(@NonNull Theme t)", "private void verifyRequiredAttributes(@NonNull TypedArray a) throws XmlPullParserException", "private void updateStateFromTypedArray(@NonNull TypedArray a)", "protected boolean onLevelChange(int level)", "public int getOpacity()", "public void draw(Canvas canvas)", " DrawableWrapperState mutateConstantState()" ]
}