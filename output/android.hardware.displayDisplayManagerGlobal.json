{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/display/DisplayManagerGlobal.java",
  "packageName" : "android.hardware.display",
  "className" : "DisplayManagerGlobal",
  "comment" : "\n * Manager communication with the display manager service on behalf of\n * an application process.  You're probably looking for {@link DisplayManager}.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USE_CACHE",
    "type" : "boolean",
    "comment" : " orientation change before the display info cache has actually been invalidated.",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_ADDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_REMOVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "DisplayManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatchNativeCallbacks",
    "type" : "boolean",
    "comment" : " Guarded by mLock",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDm",
    "type" : "IDisplayManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "DisplayManagerCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayListeners",
    "type" : "ArrayList<DisplayListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayInfoCache",
    "type" : "SparseArray<DisplayInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWideColorSpace",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayIdCache",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWifiDisplayScanNestCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayCache",
    "type" : "PropertyInvalidatedCache<Integer, DisplayInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_KEY_DISPLAY_INFO_PROPERTY",
    "type" : "String",
    "comment" : "\n     * Name of the property containing a unique token which changes every time we update the\n     * system's display configuration.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DisplayManagerGlobal getInstance()",
    "returnType" : "DisplayManagerGlobal",
    "comment" : "\n     * Gets an instance of the display manager global singleton.\n     *\n     * @return The display manager instance, may be null early in system startup\n     * before the display manager has been fully initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayInfo getDisplayInfo(int displayId)",
    "returnType" : "DisplayInfo",
    "comment" : "\n     * Get information about a particular logical display.\n     *\n     * @param displayId The logical display id.\n     * @return Information about the specified display, or null if it does not exist.\n     * This object belongs to an internal cache and should be treated as if it were immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "private DisplayInfo getDisplayInfoLocked(int displayId)",
    "returnType" : "DisplayInfo",
    "comment" : "\n     * Gets information about a particular logical display\n     * See {@link getDisplayInfo}, but assumes that {@link mLock} is held\n     ",
    "links" : [ "getDisplayInfo", "mLock" ]
  }, {
    "name" : "public int[] getDisplayIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets all currently valid logical display ids.\n     *\n     * @return An array containing all display ids.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUidPresentOnDisplay(int uid, int displayId)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if specified UID's content is present on display and should be granted access to it.\n     *\n     * @param uid UID to be checked.\n     * @param displayId id of the display where presence of the content is checked.\n     * @return {@code true} if UID is present on display, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Display getCompatibleDisplay(int displayId, DisplayAdjustments daj)",
    "returnType" : "Display",
    "comment" : "\n     * Gets information about a logical display.\n     *\n     * The display metrics may be adjusted to provide compatibility\n     * for legacy applications or limited screen areas.\n     *\n     * @param displayId The logical display id.\n     * @param daj The compatibility info and activityToken.\n     * @return The display object, or null if there is no display with the given id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Display getCompatibleDisplay(int displayId, Resources resources)",
    "returnType" : "Display",
    "comment" : "\n     * Gets information about a logical display.\n     *\n     * The display metrics may be adjusted to provide compatibility\n     * for legacy applications or limited screen areas.\n     *\n     * @param displayId The logical display id.\n     * @param resources Resources providing compatibility info.\n     * @return The display object, or null if there is no display with the given id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Display getRealDisplay(int displayId)",
    "returnType" : "Display",
    "comment" : "\n     * Gets information about a logical display without applying any compatibility metrics.\n     *\n     * @param displayId The logical display id.\n     * @return The display object, or null if there is no display with the given id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerDisplayListener(@NonNull DisplayListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Register a listener for display-related changes.\n     *\n     * @param listener The listener that will be called when display changes occur.\n     * @param handler Handler for the thread that will be receiving the callbacks. May be null.\n     * If null, listener will use the handler for the current thread, and if still null,\n     * the handler for the main thread.\n     * If that is still null, a runtime exception will be thrown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterDisplayListener(DisplayListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Looper getLooperForHandler(@Nullable Handler handler)",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findDisplayListenerLocked(DisplayListener listener)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void registerCallbackIfNeededLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDisplayEvent(int displayId, int event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startWifiDisplayScan()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopWifiDisplayScan()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void connectWifiDisplay(String deviceAddress)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pauseWifiDisplay()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resumeWifiDisplay()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disconnectWifiDisplay()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void renameWifiDisplay(String deviceAddress, String alias)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forgetWifiDisplay(String deviceAddress)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WifiDisplayStatus getWifiDisplayStatus()",
    "returnType" : "WifiDisplayStatus",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestColorMode(int displayId, int colorMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplay(@NonNull Context context, MediaProjection projection, @NonNull VirtualDisplayConfig virtualDisplayConfig, VirtualDisplay.Callback callback, Handler handler)",
    "returnType" : "VirtualDisplay",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVirtualDisplaySurface(IVirtualDisplayCallback token, Surface surface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resizeVirtualDisplay(IVirtualDisplayCallback token, int width, int height, int densityDpi)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void releaseVirtualDisplay(IVirtualDisplayCallback token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setVirtualDisplayState(IVirtualDisplayCallback token, boolean isOn)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Point getStableDisplaySize()",
    "returnType" : "Point",
    "comment" : "\n     * Gets the stable device display size, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BrightnessChangeEvent> getBrightnessEvents(String callingPackage)",
    "returnType" : "List<BrightnessChangeEvent>",
    "comment" : "\n     * Retrieves brightness change events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ColorSpace getPreferredWideGamutColorSpace()",
    "returnType" : "ColorSpace",
    "comment" : "\n     * Gets the preferred wide gamut color space for all displays.\n     * The wide gamut color space is returned from composition pipeline\n     * based on hardware capability.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBrightnessConfigurationForUser(BrightnessConfiguration c, int userId, String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the global brightness configuration for a given user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BrightnessConfiguration getBrightnessConfigurationForUser(int userId)",
    "returnType" : "BrightnessConfiguration",
    "comment" : "\n     * Gets the global brightness configuration for a given user or null if one hasn't been set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BrightnessConfiguration getDefaultBrightnessConfiguration()",
    "returnType" : "BrightnessConfiguration",
    "comment" : "\n     * Gets the default brightness configuration or null if one hasn't been configured.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMinimalPostProcessingRequested(int displayId)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the last requested minimal post processing setting for the display with displayId.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTemporaryBrightness(float brightness)",
    "returnType" : "void",
    "comment" : "\n     * Temporarily sets the brightness of the display.\n     * <p>\n     * Requires the {@link android.Manifest.permission#CONTROL_DISPLAY_BRIGHTNESS} permission.\n     * </p>\n     *\n     * @param brightness The brightness value from 0 to 255.\n     *\n     * @hide Requires signature permission.\n     ",
    "links" : [ "android.Manifest.permission#CONTROL_DISPLAY_BRIGHTNESS" ]
  }, {
    "name" : "public void setTemporaryAutoBrightnessAdjustment(float adjustment)",
    "returnType" : "void",
    "comment" : "\n     * Temporarily sets the auto brightness adjustment factor.\n     * <p>\n     * Requires the {@link android.Manifest.permission#CONTROL_DISPLAY_BRIGHTNESS} permission.\n     * </p>\n     *\n     * @param adjustment The adjustment factor from -1.0 to 1.0.\n     *\n     * @hide Requires signature permission.\n     ",
    "links" : [ "android.Manifest.permission#CONTROL_DISPLAY_BRIGHTNESS" ]
  }, {
    "name" : "public Pair<float[], float[]> getMinimumBrightnessCurve()",
    "returnType" : "Pair<float[], float[]>",
    "comment" : "\n     * Returns the minimum brightness curve, which guarantess that any brightness curve that dips\n     * below it is rejected by the system.\n     * This prevent auto-brightness from setting the screen so dark as to prevent the user from\n     * resetting or disabling it, and maps lux to the absolute minimum nits that are still readable\n     * in that ambient brightness.\n     *\n     * @return The minimum brightness curve (as lux values and their corresponding nits values).\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AmbientBrightnessDayStats> getAmbientBrightnessStats()",
    "returnType" : "List<AmbientBrightnessDayStats>",
    "comment" : "\n     * Retrieves ambient brightness stats.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void invalidateLocalDisplayInfoCaches()",
    "returnType" : "void",
    "comment" : "\n     * Invalidates the contents of the display info cache for all applications. Can only\n     * be called by system_server.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableLocalDisplayInfoCaches()",
    "returnType" : "void",
    "comment" : "\n     * Disables the binder call cache.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void nSignalNativeCallbacks(float refreshRate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void registerNativeChoreographerForRefreshRateCallbacks()",
    "returnType" : "void",
    "comment" : " Registers AChoreographer so that refresh rate callbacks can be dispatched from DMS.",
    "links" : [ ]
  }, {
    "name" : "private void unregisterNativeChoreographerForRefreshRateCallbacks()",
    "returnType" : "void",
    "comment" : " Unregisters AChoreographer from receiving refresh rate callbacks.",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "USE_CACHE", "EVENT_DISPLAY_ADDED", "EVENT_DISPLAY_CHANGED", "EVENT_DISPLAY_REMOVED", "sInstance", "mDispatchNativeCallbacks", "mLock", "mDm", "mCallback", "mDisplayListeners", "mDisplayInfoCache", "mWideColorSpace", "mDisplayIdCache", "mWifiDisplayScanNestCount", "mDisplayCache", "CACHE_KEY_DISPLAY_INFO_PROPERTY" ],
  "methodNames" : [ "public static DisplayManagerGlobal getInstance()", "public DisplayInfo getDisplayInfo(int displayId)", "private DisplayInfo getDisplayInfoLocked(int displayId)", "public int[] getDisplayIds()", "public boolean isUidPresentOnDisplay(int uid, int displayId)", "public Display getCompatibleDisplay(int displayId, DisplayAdjustments daj)", "public Display getCompatibleDisplay(int displayId, Resources resources)", "public Display getRealDisplay(int displayId)", "public void registerDisplayListener(@NonNull DisplayListener listener, @Nullable Handler handler)", "public void unregisterDisplayListener(DisplayListener listener)", "private static Looper getLooperForHandler(@Nullable Handler handler)", "private int findDisplayListenerLocked(DisplayListener listener)", "private void registerCallbackIfNeededLocked()", "private void handleDisplayEvent(int displayId, int event)", "public void startWifiDisplayScan()", "public void stopWifiDisplayScan()", "public void connectWifiDisplay(String deviceAddress)", "public void pauseWifiDisplay()", "public void resumeWifiDisplay()", "public void disconnectWifiDisplay()", "public void renameWifiDisplay(String deviceAddress, String alias)", "public void forgetWifiDisplay(String deviceAddress)", "public WifiDisplayStatus getWifiDisplayStatus()", "public void requestColorMode(int displayId, int colorMode)", "public VirtualDisplay createVirtualDisplay(@NonNull Context context, MediaProjection projection, @NonNull VirtualDisplayConfig virtualDisplayConfig, VirtualDisplay.Callback callback, Handler handler)", "public void setVirtualDisplaySurface(IVirtualDisplayCallback token, Surface surface)", "public void resizeVirtualDisplay(IVirtualDisplayCallback token, int width, int height, int densityDpi)", "public void releaseVirtualDisplay(IVirtualDisplayCallback token)", " void setVirtualDisplayState(IVirtualDisplayCallback token, boolean isOn)", "public Point getStableDisplaySize()", "public List<BrightnessChangeEvent> getBrightnessEvents(String callingPackage)", "public ColorSpace getPreferredWideGamutColorSpace()", "public void setBrightnessConfigurationForUser(BrightnessConfiguration c, int userId, String packageName)", "public BrightnessConfiguration getBrightnessConfigurationForUser(int userId)", "public BrightnessConfiguration getDefaultBrightnessConfiguration()", "public boolean isMinimalPostProcessingRequested(int displayId)", "public void setTemporaryBrightness(float brightness)", "public void setTemporaryAutoBrightnessAdjustment(float adjustment)", "public Pair<float[], float[]> getMinimumBrightnessCurve()", "public List<AmbientBrightnessDayStats> getAmbientBrightnessStats()", "public static void invalidateLocalDisplayInfoCaches()", "public void disableLocalDisplayInfoCaches()", "private static native void nSignalNativeCallbacks(float refreshRate)", "private void registerNativeChoreographerForRefreshRateCallbacks()", "private void unregisterNativeChoreographerForRefreshRateCallbacks()" ]
}