{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/flags/FeatureFlags.java",
  "packageName" : "android.flags",
  "className" : "FeatureFlags",
  "comment" : "\n * A class for querying constants from the system - primarily booleans.\n *\n * Clients using this class can define their flags and their default values in one place,\n * can override those values on running devices for debugging and testing purposes, and can control\n * what flags are available to be used on release builds.\n *\n * TODO(b/279054964): A lot. This is skeleton code right now.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "FeatureFlags",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstanceLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKnownFlags",
    "type" : "Set<Flag<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDirtyFlags",
    "type" : "Set<Flag<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIFeatureFlags",
    "type" : "IFeatureFlags",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBooleanOverrides",
    "type" : "Map<String, Map<String, Boolean>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "Set<ChangeListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIFeatureFlagsCallback",
    "type" : "IFeatureFlagsCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static FeatureFlags getInstance()",
    "returnType" : "FeatureFlags",
    "comment" : "\n     * Obtain a per-process instance of FeatureFlags.\n     * @return A singleton instance of {@link FeatureFlags}.\n     ",
    "links" : [ "android.flags.FeatureFlags" ]
  }, {
    "name" : "public static void setInstance(FeatureFlags instance)",
    "returnType" : "void",
    "comment" : " See {@link FeatureFlagsFake}. ",
    "links" : [ "android.flags.FeatureFlagsFake" ]
  }, {
    "name" : "public static BooleanFlag booleanFlag(@NonNull String namespace, @NonNull String name, boolean def)",
    "returnType" : "BooleanFlag",
    "comment" : "\n     * Construct a new {@link BooleanFlag}.\n     *\n     * Use this instead of constructing a {@link BooleanFlag} directly, as it registers the flag\n     * with the internals of the flagging system.\n     ",
    "links" : [ "android.flags.BooleanFlag" ]
  }, {
    "name" : "public static FusedOffFlag fusedOffFlag(@NonNull String namespace, @NonNull String name)",
    "returnType" : "FusedOffFlag",
    "comment" : "\n     * Construct a new {@link FusedOffFlag}.\n     *\n     * Use this instead of constructing a {@link FusedOffFlag} directly, as it registers the\n     * flag with the internals of the flagging system.\n     ",
    "links" : [ "android.flags.FusedOffFlag" ]
  }, {
    "name" : "public static FusedOnFlag fusedOnFlag(@NonNull String namespace, @NonNull String name)",
    "returnType" : "FusedOnFlag",
    "comment" : "\n     * Construct a new {@link FusedOnFlag}.\n     *\n     * Use this instead of constructing a {@link FusedOnFlag} directly, as it registers the flag\n     * with the internals of the flagging system.\n     ",
    "links" : [ "android.flags.FusedOnFlag" ]
  }, {
    "name" : "public static DynamicBooleanFlag dynamicBooleanFlag(@NonNull String namespace, @NonNull String name, boolean def)",
    "returnType" : "DynamicBooleanFlag",
    "comment" : "\n     * Construct a new {@link DynamicBooleanFlag}.\n     *\n     * Use this instead of constructing a {@link DynamicBooleanFlag} directly, as it registers\n     * the flag with the internals of the flagging system.\n     ",
    "links" : [ "android.flags.DynamicBooleanFlag" ]
  }, {
    "name" : "public void addChangeListener(@NonNull ChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener to be alerted when a {@link DynamicFlag} changes.\n     *\n     * See also {@link #removeChangeListener(ChangeListener)}.\n     *\n     * @param listener The listener to add.\n     ",
    "links" : [ "android.flags.DynamicFlag", "#removeChangeListener(ChangeListener)" ]
  }, {
    "name" : "public void removeChangeListener(@NonNull ChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a listener that was added earlier.\n     *\n     * See also {@link #addChangeListener(ChangeListener)}.\n     *\n     * @param listener The listener to remove.\n     ",
    "links" : [ "#addChangeListener(ChangeListener)" ]
  }, {
    "name" : "protected void onFlagChange(@NonNull DynamicFlag<?> flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled(@NonNull BooleanFlag flag)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the supplied flag is true or not.\n     *\n     * {@link BooleanFlag} should only be used in debug builds. They do not get optimized out.\n     *\n     * The first time a flag is read, its value is cached for the lifetime of the process.\n     ",
    "links" : [ "android.flags.BooleanFlag" ]
  }, {
    "name" : "public boolean isEnabled(@NonNull FusedOffFlag flag)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the supplied flag is true or not.\n     *\n     * Always returns false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled(@NonNull FusedOnFlag flag)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the supplied flag is true or not.\n     *\n     * Always returns true;\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCurrentlyEnabled(@NonNull DynamicBooleanFlag flag)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the supplied flag is true or not.\n     *\n     * Can return a different value for the flag each time it is called if an override comes in.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean getBooleanInternal(Flag<Boolean> flag)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private T addFlag(T flag)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sync()",
    "returnType" : "void",
    "comment" : "\n     * Sync any known flags that have not yet been synced.\n     *\n     * This is called implicitly when any flag is read, and is not generally needed except in\n     * exceptional circumstances.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void syncInternal(Set<Flag<?>> dirtyFlags)",
    "returnType" : "void",
    "comment" : "\n     * Called when new flags have been declared. Gives the implementation a chance to act on them.\n     *\n     * Guaranteed to be called from a synchronized, thread-safe context.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addBooleanOverride(String namespace, String name, String override)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SyncableFlag flagToSyncableFlag(Flag<?> f)",
    "returnType" : "SyncableFlag",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IFeatureFlags bind()",
    "returnType" : "IFeatureFlags",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean parseBoolean(String value)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean flagEqualsSyncableFlag(Flag<?> f, SyncableFlag sf)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static FeatureFlags getInstance()", "public static void setInstance(FeatureFlags instance)", "public static BooleanFlag booleanFlag(@NonNull String namespace, @NonNull String name, boolean def)", "public static FusedOffFlag fusedOffFlag(@NonNull String namespace, @NonNull String name)", "public static FusedOnFlag fusedOnFlag(@NonNull String namespace, @NonNull String name)", "public static DynamicBooleanFlag dynamicBooleanFlag(@NonNull String namespace, @NonNull String name, boolean def)", "public void addChangeListener(@NonNull ChangeListener listener)", "public void removeChangeListener(@NonNull ChangeListener listener)", "protected void onFlagChange(@NonNull DynamicFlag<?> flag)", "public boolean isEnabled(@NonNull BooleanFlag flag)", "public boolean isEnabled(@NonNull FusedOffFlag flag)", "public boolean isEnabled(@NonNull FusedOnFlag flag)", "public boolean isCurrentlyEnabled(@NonNull DynamicBooleanFlag flag)", "private boolean getBooleanInternal(Flag<Boolean> flag)", "private T addFlag(T flag)", "public void sync()", "protected void syncInternal(Set<Flag<?>> dirtyFlags)", "private void addBooleanOverride(String namespace, String name, String override)", "private SyncableFlag flagToSyncableFlag(Flag<?> f)", "private IFeatureFlags bind()", " static boolean parseBoolean(String value)", "private static boolean flagEqualsSyncableFlag(Flag<?> f, SyncableFlag sf)" ],
  "variableNames" : [ "TAG", "sInstance", "sInstanceLock", "mKnownFlags", "mDirtyFlags", "mIFeatureFlags", "mBooleanOverrides", "mListeners", "mIFeatureFlagsCallback" ]
}