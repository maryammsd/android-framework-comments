{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/SimpleTimeZone.java",
  "packageName" : "android.icu.util",
  "className" : "SimpleTimeZone",
  "comment" : "\n * <strong>[icu enhancement]</strong> ICU's replacement for {@link java.util.SimpleTimeZone}.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.\n *\n * <p><code>SimpleTimeZone</code> is a concrete subclass of <code>TimeZone</code>\n * that represents a time zone for use with a Gregorian calendar. This\n * class does not handle historical changes.\n *\n * <p>Use a negative value for <code>dayOfWeekInMonth</code> to indicate that\n * <code>SimpleTimeZone</code> should count from the end of the month backwards.  For\n * example, if Daylight Savings Time starts or ends at the last Sunday in a month, use\n * <code>dayOfWeekInMonth = -1</code> along with <code>dayOfWeek = Calendar.SUNDAY</code>\n * to specify the rule.\n *\n * @see      Calendar\n * @see      GregorianCalendar\n * @see      TimeZone\n * @author   Deborah Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "java.util.SimpleTimeZone" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WALL_TIME",
    "type" : "int",
    "comment" : "\n     * Constant for a mode of start or end time specified as local wall time.\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_TIME",
    "type" : "int",
    "comment" : "\n     * Constant for a mode of start or end time specified as local standard time.\n     ",
    "links" : [ ]
  }, {
    "name" : "UTC_TIME",
    "type" : "int",
    "comment" : "\n     * Constant for a mode of start or end time specified as UTC.\n     ",
    "links" : [ ]
  }, {
    "name" : "staticMonthLength",
    "type" : "byte[]",
    "comment" : "  Gregorian calendar started.",
    "links" : [ ]
  }, {
    "name" : "DOM_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOW_IN_MONTH_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOW_GE_DOM_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOW_LE_DOM_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "raw",
    "type" : "int",
    "comment" : " the TimeZone's raw GMT offset",
    "links" : [ ]
  }, {
    "name" : "dst",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "xinfo",
    "type" : "STZInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "startMonth",
    "type" : "int",
    "comment" : " the month, day, DOW, and time DST starts",
    "links" : [ ]
  }, {
    "name" : "startDay",
    "type" : "int",
    "comment" : " the month, day, DOW, and time DST starts",
    "links" : [ ]
  }, {
    "name" : "startDayOfWeek",
    "type" : "int",
    "comment" : " the month, day, DOW, and time DST starts",
    "links" : [ ]
  }, {
    "name" : "startTime",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "startTimeMode",
    "type" : "int",
    "comment" : " Mode for startTime, endTime; see TimeMode",
    "links" : [ ]
  }, {
    "name" : "endTimeMode",
    "type" : "int",
    "comment" : " Mode for startTime, endTime; see TimeMode",
    "links" : [ ]
  }, {
    "name" : "endMonth",
    "type" : "int",
    "comment" : " the month, day, DOW, and time DST ends",
    "links" : [ ]
  }, {
    "name" : "endDay",
    "type" : "int",
    "comment" : " the month, day, DOW, and time DST ends",
    "links" : [ ]
  }, {
    "name" : "endDayOfWeek",
    "type" : "int",
    "comment" : " the month, day, DOW, and time DST ends",
    "links" : [ ]
  }, {
    "name" : "endTime",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "startYear",
    "type" : "int",
    "comment" : " the year these DST rules took effect",
    "links" : [ ]
  }, {
    "name" : "useDaylight",
    "type" : "boolean",
    "comment" : " flag indicating whether this TimeZone uses DST",
    "links" : [ ]
  }, {
    "name" : "startMode",
    "type" : "int",
    "comment" : " flags indicating what kind of rules the DST rules are",
    "links" : [ ]
  }, {
    "name" : "endMode",
    "type" : "int",
    "comment" : " flags indicating what kind of rules the DST rules are",
    "links" : [ ]
  }, {
    "name" : "transitionRulesInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initialRule",
    "type" : "InitialTimeZoneRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "firstTransition",
    "type" : "TimeZoneTransition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "stdRule",
    "type" : "AnnualTimeZoneRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dstRule",
    "type" : "AnnualTimeZoneRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isFrozen",
    "type" : "boolean",
    "comment" : " Freezable stuffs",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setID(String ID)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRawOffset(int offsetMillis)",
    "returnType" : "void",
    "comment" : "\n     * Overrides TimeZone\n     * Sets the base time zone offset to GMT.\n     * This is the offset to add \"to\" UTC to get local time.\n     * @param offsetMillis the raw offset of the time zone\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRawOffset()",
    "returnType" : "int",
    "comment" : "\n     * Overrides TimeZone\n     * Gets the GMT offset for this time zone.\n     * @return the raw offset\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStartYear(int year)",
    "returnType" : "void",
    "comment" : "\n     * Sets the daylight savings starting year.\n     *\n     * @param year  The daylight savings starting year.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStartRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time)",
    "returnType" : "void",
    "comment" : "\n     * Sets the daylight savings starting rule. For example, Daylight Savings\n     * Time starts at the second Sunday in March, at 2 AM in standard time.\n     * Therefore, you can set the start rule by calling:\n     * setStartRule(Calendar.MARCH, 2, Calendar.SUNDAY, 2*60*60*1000);\n     *\n     * @param month             The daylight savings starting month. Month is\n     *                          0-based. eg, 0 for January.\n     * @param dayOfWeekInMonth  The daylight savings starting\n     *                          day-of-week-in-month. Please see the member\n     *                          description for an example.\n     * @param dayOfWeek         The daylight savings starting day-of-week.\n     *                          Please see the member description for an\n     *                          example.\n     * @param time              The daylight savings starting time in local wall\n     *                          time, which is standard time in this case. Please see\n     *                          the member description for an example.\n     * @throws IllegalArgumentException the month, dayOfWeekInMonth,\n     * dayOfWeek, or time parameters are out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setStartRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time, int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the daylight savings starting rule. For example, in the U.S., Daylight Savings\n     * Time starts at the second Sunday in March, at 2 AM in standard time.\n     * Therefore, you can set the start rule by calling:\n     * <code>setStartRule(Calendar.MARCH, 2, Calendar.SUNDAY, 2*60*60*1000);</code>\n     * The dayOfWeekInMonth and dayOfWeek parameters together specify how to calculate\n     * the exact starting date.  Their exact meaning depend on their respective signs,\n     * allowing various types of rules to be constructed, as follows:<ul>\n     *   <li>If both dayOfWeekInMonth and dayOfWeek are positive, they specify the\n     *       day of week in the month (e.g., (2, WEDNESDAY) is the second Wednesday\n     *       of the month).\n     *   <li>If dayOfWeek is positive and dayOfWeekInMonth is negative, they specify\n     *       the day of week in the month counting backward from the end of the month.\n     *       (e.g., (-1, MONDAY) is the last Monday in the month)\n     *   <li>If dayOfWeek is zero and dayOfWeekInMonth is positive, dayOfWeekInMonth\n     *       specifies the day of the month, regardless of what day of the week it is.\n     *       (e.g., (10, 0) is the tenth day of the month)\n     *   <li>If dayOfWeek is zero and dayOfWeekInMonth is negative, dayOfWeekInMonth\n     *       specifies the day of the month counting backward from the end of the\n     *       month, regardless of what day of the week it is (e.g., (-2, 0) is the\n     *       next-to-last day of the month).\n     *   <li>If dayOfWeek is negative and dayOfWeekInMonth is positive, they specify the\n     *       first specified day of the week on or after the specified day of the month.\n     *       (e.g., (15, -SUNDAY) is the first Sunday after the 15th of the month\n     *       [or the 15th itself if the 15th is a Sunday].)\n     *   <li>If dayOfWeek and DayOfWeekInMonth are both negative, they specify the\n     *       last specified day of the week on or before the specified day of the month.\n     *       (e.g., (-20, -TUESDAY) is the last Tuesday before the 20th of the month\n     *       [or the 20th itself if the 20th is a Tuesday].)</ul>\n     * @param month the daylight savings starting month. Month is 0-based.\n     * eg, 0 for January.\n     * @param dayOfWeekInMonth the daylight savings starting\n     * day-of-week-in-month. Please see the member description for an example.\n     * @param dayOfWeek the daylight savings starting day-of-week. Please see\n     * the member description for an example.\n     * @param time the daylight savings starting time. Please see the member\n     * description for an example.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStartRule(int month, int dayOfMonth, int time)",
    "returnType" : "void",
    "comment" : "\n     * Sets the DST start rule to a fixed date within a month.\n     *\n     * @param month         The month in which this rule occurs (0-based).\n     * @param dayOfMonth    The date in that month (1-based).\n     * @param time          The time of that day (number of millis after midnight)\n     *                      when DST takes effect in local wall time, which is\n     *                      standard time in this case.\n     * @throws IllegalArgumentException the month,\n     * dayOfMonth, or time parameters are out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStartRule(int month, int dayOfMonth, int dayOfWeek, int time, boolean after)",
    "returnType" : "void",
    "comment" : "\n     * Sets the DST start rule to a weekday before or after a give date within\n     * a month, e.g., the first Monday on or after the 8th.\n     *\n     * @param month         The month in which this rule occurs (0-based).\n     * @param dayOfMonth    A date within that month (1-based).\n     * @param dayOfWeek     The day of the week on which this rule occurs.\n     * @param time          The time of that day (number of millis after midnight)\n     *                      when DST takes effect in local wall time, which is\n     *                      standard time in this case.\n     * @param after         If true, this rule selects the first dayOfWeek on\n     *                      or after dayOfMonth.  If false, this rule selects\n     *                      the last dayOfWeek on or before dayOfMonth.\n     * @throws IllegalArgumentException the month, dayOfMonth,\n     * dayOfWeek, or time parameters are out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEndRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time)",
    "returnType" : "void",
    "comment" : "\n     * Sets the daylight savings ending rule. For example, if Daylight Savings Time\n     * ends at the last (-1) Sunday in October, at 2 AM in standard time,\n     * you can set the end rule by calling:\n     * <code>setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);</code>\n     *\n     * @param month             The daylight savings ending month. Month is\n     *                          0-based. eg, 0 for January.\n     * @param dayOfWeekInMonth  The daylight savings ending\n     *                          day-of-week-in-month. Please see the member\n     *                          description for an example.\n     * @param dayOfWeek         The daylight savings ending day-of-week. Please\n     *                          see the member description for an example.\n     * @param time              The daylight savings ending time in local wall time,\n     *                          which is daylight time in this case. Please see the\n     *                          member description for an example.\n     * @throws IllegalArgumentException the month, dayOfWeekInMonth,\n     * dayOfWeek, or time parameters are out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEndRule(int month, int dayOfMonth, int time)",
    "returnType" : "void",
    "comment" : "\n     * Sets the DST end rule to a fixed date within a month.\n     *\n     * @param month         The month in which this rule occurs (0-based).\n     * @param dayOfMonth    The date in that month (1-based).\n     * @param time          The time of that day (number of millis after midnight)\n     *                      when DST ends in local wall time, which is daylight\n     *                      time in this case.\n     * @throws IllegalArgumentException the month,\n     * dayOfMonth, or time parameters are out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEndRule(int month, int dayOfMonth, int dayOfWeek, int time, boolean after)",
    "returnType" : "void",
    "comment" : "\n     * Sets the DST end rule to a weekday before or after a give date within\n     * a month, e.g., the first Monday on or after the 8th.\n     *\n     * @param month         The month in which this rule occurs (0-based).\n     * @param dayOfMonth    A date within that month (1-based).\n     * @param dayOfWeek     The day of the week on which this rule occurs.\n     * @param time          The time of that day (number of millis after midnight)\n     *                      when DST ends in local wall time, which is daylight\n     *                      time in this case.\n     * @param after         If true, this rule selects the first dayOfWeek on\n     *                      or after dayOfMonth.  If false, this rule selects\n     *                      the last dayOfWeek on or before dayOfMonth.\n     * @throws IllegalArgumentException the month, dayOfMonth,\n     * dayOfWeek, or time parameters are out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setEndRule(int month, int dayOfMonth, int dayOfWeek, int time, int mode, boolean after)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setEndRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time, int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the daylight savings ending rule. For example, in the U.S., Daylight\n     * Savings Time ends at the first Sunday in November, at 2 AM in standard time.\n     * Therefore, you can set the end rule by calling:\n     * setEndRule(Calendar.NOVEMBER, 1, Calendar.SUNDAY, 2*60*60*1000);\n     * Various other types of rules can be specified by manipulating the dayOfWeek\n     * and dayOfWeekInMonth parameters.  For complete details, see the documentation\n     * for setStartRule().\n     * @param month the daylight savings ending month. Month is 0-based.\n     * eg, 0 for January.\n     * @param dayOfWeekInMonth the daylight savings ending\n     * day-of-week-in-month. See setStartRule() for a complete explanation.\n     * @param dayOfWeek the daylight savings ending day-of-week. See setStartRule()\n     * for a complete explanation.\n     * @param time the daylight savings ending time. Please see the member\n     * description for an example.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDSTSavings(int millisSavedDuringDST)",
    "returnType" : "void",
    "comment" : "\n     * Sets the amount of time in ms that the clock is advanced during DST.\n     * @param millisSavedDuringDST the number of milliseconds the time is\n     * advanced with respect to standard time when the daylight savings rules\n     * are in effect. Typically one hour (+3600000). The amount could be negative,\n     * but not 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDSTSavings()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of time in ms that the clock is advanced during DST.\n     * @return the number of milliseconds the time is\n     * advanced with respect to standard time when the daylight savings rules\n     * are in effect. Typically one hour (3600000). The amount could be negative,\n     * but not 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : " on JDK 1.4 and later, can't deserialize a SimpleTimeZone as a SimpleTimeZone...",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this object.\n     * @return  a string representation of this object\n     ",
    "links" : [ ]
  }, {
    "name" : "private STZInfo getSTZInfo()",
    "returnType" : "STZInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int millis)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int millis, int monthLength)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getOffset(int era, int year, int month, int day, int dayOfWeek, int millis, int monthLength, int prevMonthLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOffsetFromLocal(long date, LocalOption nonExistingTimeOpt, LocalOption duplicatedTimeOpt, int[] offsets)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private int compareToRule(int month, int monthLen, int prevMonthLen, int dayOfMonth, int dayOfWeek, int millis, int millisDelta, int ruleMode, int ruleMonth, int ruleDayOfWeek, int ruleDay, int ruleMillis)",
    "returnType" : "int",
    "comment" : "\n     * Compare a given date in the year to a rule. Return 1, 0, or -1, depending\n     * on whether the date is after, equal to, or before the rule date. The\n     * millis are compared directly against the ruleMillis, so any\n     * standard-daylight adjustments must be handled by the caller.\n     *\n     * @return  1 if the date is after the rule date, -1 if the date is before\n     *          the rule date, or 0 if the date is equal to the rule date.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean useDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * Overrides TimeZone\n     * Queries if this time zone uses Daylight Saving Time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean observesDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean inDaylightTime(Date date)",
    "returnType" : "boolean",
    "comment" : "\n     * Overrides TimeZone\n     * Queries if the give date is in Daylight Saving Time.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void construct(int _raw, int _startMonth, int _startDay, int _startDayOfWeek, int _startTime, int _startTimeMode, int _endMonth, int _endDay, int _endDayOfWeek, int _endTime, int _endTimeMode, int _dst)",
    "returnType" : "void",
    "comment" : "\n     * Internal construction method.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void decodeRules()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void decodeStartRule()",
    "returnType" : "void",
    "comment" : "\n     * Decode the start rule and validate the parameters.  The parameters are\n     * expected to be in encoded form, which represents the various rule modes\n     * by negating or zeroing certain values.  Representation formats are:\n     * <p>\n     * <pre>\n     *            DOW_IN_MONTH  DOM    DOW>=DOM  DOW<=DOM  no DST\n     *            ------------  -----  --------  --------  ----------\n     * month       0..11        same    same      same     don't care\n     * day        -5..5         1..31   1..31    -1..-31   0\n     * dayOfWeek   1..7         0      -1..-7    -1..-7    don't care\n     * time        0..ONEDAY    same    same      same     don't care\n     * </pre>\n     * The range for month does not include UNDECIMBER since this class is\n     * really specific to GregorianCalendar, which does not use that month.\n     * The range for time includes ONEDAY (vs. ending at ONEDAY-1) because the\n     * end rule is an exclusive limit point.  That is, the range of times that\n     * are in DST include those >= the start and < the end.  For this reason,\n     * it should be possible to specify an end of ONEDAY in order to include the\n     * entire day.  Although this is equivalent to time 0 of the following day,\n     * it's not always possible to specify that, for example, on December 31.\n     * While arguably the start range should still be 0..ONEDAY-1, we keep\n     * the start and end ranges the same for consistency.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void decodeEndRule()",
    "returnType" : "void",
    "comment" : "\n     * Decode the end rule and validate the parameters.  This method is exactly\n     * analogous to decodeStartRule().\n     * @see #decodeStartRule\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Overrides equals.\n     * @return true if obj is a SimpleTimeZone equivalent to this\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean idEquals(String id1, String id2)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Overrides hashCode.\n     * @return a hash code value for this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Overrides clone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSameRules(TimeZone othr)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this zone has the same rules and offset as another zone.\n     * @param othr the TimeZone object to be compared with\n     * @return true if the given zone has the same rules and offset as this one\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneTransition getNextTransition(long base, boolean inclusive)",
    "returnType" : "TimeZoneTransition",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneTransition getPreviousTransition(long base, boolean inclusive)",
    "returnType" : "TimeZoneTransition",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneRule[] getTimeZoneRules()",
    "returnType" : "TimeZoneRule[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void initTransitionRules()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone freeze()",
    "returnType" : "TimeZone",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone cloneAsThawed()",
    "returnType" : "TimeZone",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setID(String ID)", "public void setRawOffset(int offsetMillis)", "public int getRawOffset()", "public void setStartYear(int year)", "public void setStartRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time)", "private void setStartRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time, int mode)", "public void setStartRule(int month, int dayOfMonth, int time)", "public void setStartRule(int month, int dayOfMonth, int dayOfWeek, int time, boolean after)", "public void setEndRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time)", "public void setEndRule(int month, int dayOfMonth, int time)", "public void setEndRule(int month, int dayOfMonth, int dayOfWeek, int time, boolean after)", "private void setEndRule(int month, int dayOfMonth, int dayOfWeek, int time, int mode, boolean after)", "private void setEndRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time, int mode)", "public void setDSTSavings(int millisSavedDuringDST)", "public int getDSTSavings()", "private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException", "public String toString()", "private STZInfo getSTZInfo()", "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int millis)", "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int millis, int monthLength)", "private int getOffset(int era, int year, int month, int day, int dayOfWeek, int millis, int monthLength, int prevMonthLength)", "public void getOffsetFromLocal(long date, LocalOption nonExistingTimeOpt, LocalOption duplicatedTimeOpt, int[] offsets)", "private int compareToRule(int month, int monthLen, int prevMonthLen, int dayOfMonth, int dayOfWeek, int millis, int millisDelta, int ruleMode, int ruleMonth, int ruleDayOfWeek, int ruleDay, int ruleMillis)", "public boolean useDaylightTime()", "public boolean observesDaylightTime()", "public boolean inDaylightTime(Date date)", "private void construct(int _raw, int _startMonth, int _startDay, int _startDayOfWeek, int _startTime, int _startTimeMode, int _endMonth, int _endDay, int _endDayOfWeek, int _endTime, int _endTimeMode, int _dst)", "private void decodeRules()", "private void decodeStartRule()", "private void decodeEndRule()", "public boolean equals(Object obj)", "private boolean idEquals(String id1, String id2)", "public int hashCode()", "public Object clone()", "public boolean hasSameRules(TimeZone othr)", "public TimeZoneTransition getNextTransition(long base, boolean inclusive)", "public TimeZoneTransition getPreviousTransition(long base, boolean inclusive)", "public TimeZoneRule[] getTimeZoneRules()", "private synchronized void initTransitionRules()", "public boolean isFrozen()", "public TimeZone freeze()", "public TimeZone cloneAsThawed()" ],
  "variableNames" : [ "serialVersionUID", "WALL_TIME", "STANDARD_TIME", "UTC_TIME", "staticMonthLength", "DOM_MODE", "DOW_IN_MONTH_MODE", "DOW_GE_DOM_MODE", "DOW_LE_DOM_MODE", "raw", "dst", "xinfo", "startMonth", "startDay", "startDayOfWeek", "startTime", "startTimeMode", "endTimeMode", "endMonth", "endDay", "endDayOfWeek", "endTime", "startYear", "useDaylight", "startMode", "endMode", "transitionRulesInitialized", "initialRule", "firstTransition", "stdRule", "dstRule", "isFrozen" ]
}