{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/TextClock.java",
  "packageName" : "android.widget",
  "className" : "TextClock",
  "comment" : "\n * <p><code>TextClock</code> can display the current date and/or time as\n * a formatted string.</p>\n *\n * <p>This view honors the 24-hour format system setting. As such, it is\n * possible and recommended to provide two different formatting patterns:\n * one to display the date/time in 24-hour mode and one to display the\n * date/time in 12-hour mode. Most callers will want to use the defaults,\n * though, which will be appropriate for the user's locale.</p>\n *\n * <p>It is possible to determine whether the system is currently in\n * 24-hour mode by calling {@link #is24HourModeEnabled()}.</p>\n *\n * <p>The rules used by this widget to decide how to format the date and\n * time are the following:</p>\n * <ul>\n *     <li>In 24-hour mode:\n *         <ul>\n *             <li>Use the value returned by {@link #getFormat24Hour()} when non-null</li>\n *             <li>Otherwise, use the value returned by {@link #getFormat12Hour()} when non-null</li>\n *             <li>Otherwise, use a default value appropriate for the user's locale, such as {@code h:mm a}</li>\n *         </ul>\n *     </li>\n *     <li>In 12-hour mode:\n *         <ul>\n *             <li>Use the value returned by {@link #getFormat12Hour()} when non-null</li>\n *             <li>Otherwise, use the value returned by {@link #getFormat24Hour()} when non-null</li>\n *             <li>Otherwise, use a default value appropriate for the user's locale, such as {@code HH:mm}</li>\n *         </ul>\n *     </li>\n * </ul>\n *\n * <p>The {@link CharSequence} instances used as formatting patterns when calling either\n * {@link #setFormat24Hour(CharSequence)} or {@link #setFormat12Hour(CharSequence)} can\n * contain styling information. To do so, use a {@link android.text.Spanned} object.\n * Note that if you customize these strings, it is your responsibility to supply strings\n * appropriate for formatting dates and/or times in the user's locale.</p>\n *\n * @attr ref android.R.styleable#TextClock_format12Hour\n * @attr ref android.R.styleable#TextClock_format24Hour\n * @attr ref android.R.styleable#TextClock_timeZone\n ",
  "links" : [ "#setFormat12Hour(CharSequence)", "#is24HourModeEnabled()", "android.text.Spanned", "CharSequence", "#getFormat24Hour()", "#getFormat12Hour()", "#setFormat24Hour(CharSequence)" ],
  "variables" : [ {
    "name" : "DEFAULT_FORMAT_12_HOUR",
    "type" : "CharSequence",
    "comment" : "\n     * The default formatting pattern in 12-hour mode. This pattern is used\n     * if {@link #setFormat12Hour(CharSequence)} is called with a null pattern\n     * or if no pattern was specified when creating an instance of this class.\n     *\n     * This default pattern shows only the time, hours and minutes, and an am/pm\n     * indicator.\n     *\n     * @see #setFormat12Hour(CharSequence)\n     * @see #getFormat12Hour()\n     *\n     * @deprecated Let the system use locale-appropriate defaults instead.\n     ",
    "links" : [ "#setFormat12Hour(CharSequence)" ]
  }, {
    "name" : "DEFAULT_FORMAT_24_HOUR",
    "type" : "CharSequence",
    "comment" : "\n     * The default formatting pattern in 24-hour mode. This pattern is used\n     * if {@link #setFormat24Hour(CharSequence)} is called with a null pattern\n     * or if no pattern was specified when creating an instance of this class.\n     *\n     * This default pattern shows only the time, hours and minutes.\n     *\n     * @see #setFormat24Hour(CharSequence)\n     * @see #getFormat24Hour()\n     *\n     * @deprecated Let the system use locale-appropriate defaults instead.\n     ",
    "links" : [ "#setFormat24Hour(CharSequence)" ]
  }, {
    "name" : "mFormat12",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormat24",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescFormat12",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescFormat24",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormat",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasSeconds",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescFormat",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegistered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldRunTicker",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClockEventDelegate",
    "type" : "ClockEventDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTime",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeZone",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowCurrentUserTime",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatChangeObserver",
    "type" : "ContentObserver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStopTicking",
    "type" : "boolean",
    "comment" : " Used by tests to stop time change events from triggering the text update",
    "links" : [ ]
  }, {
    "name" : "mIntentReceiver",
    "type" : "BroadcastReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTicker",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createTime(String timeZone)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getFormat12Hour()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the formatting pattern used to display the date and/or time\n     * in 12-hour mode. The formatting pattern syntax is described in\n     * {@link DateFormat}.\n     *\n     * @return A {@link CharSequence} or null.\n     *\n     * @see #setFormat12Hour(CharSequence)\n     * @see #is24HourModeEnabled()\n     ",
    "links" : [ "android.text.format.DateFormat", "CharSequence" ]
  }, {
    "name" : "public void setFormat12Hour(CharSequence format)",
    "returnType" : "void",
    "comment" : "\n     * <p>Specifies the formatting pattern used to display the date and/or time\n     * in 12-hour mode. The formatting pattern syntax is described in\n     * {@link DateFormat}.</p>\n     *\n     * <p>If this pattern is set to null, {@link #getFormat24Hour()} will be used\n     * even in 12-hour mode. If both 24-hour and 12-hour formatting patterns\n     * are set to null, the default pattern for the current locale will be used\n     * instead.</p>\n     *\n     * <p><strong>Note:</strong> if styling is not needed, it is highly recommended\n     * you supply a format string generated by\n     * {@link DateFormat#getBestDateTimePattern(java.util.Locale, String)}. This method\n     * takes care of generating a format string adapted to the desired locale.</p>\n     *\n     *\n     * @param format A date/time formatting pattern as described in {@link DateFormat}\n     *\n     * @see #getFormat12Hour()\n     * @see #is24HourModeEnabled()\n     * @see DateFormat#getBestDateTimePattern(java.util.Locale, String)\n     * @see DateFormat\n     *\n     * @attr ref android.R.styleable#TextClock_format12Hour\n     ",
    "links" : [ "android.text.format.DateFormat", "android.text.format.DateFormat#getBestDateTimePattern(java.util.Locale", "#getFormat24Hour()" ]
  }, {
    "name" : "public void setContentDescriptionFormat12Hour(CharSequence format)",
    "returnType" : "void",
    "comment" : "\n     * Like setFormat12Hour, but for the content description.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getFormat24Hour()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the formatting pattern used to display the date and/or time\n     * in 24-hour mode. The formatting pattern syntax is described in\n     * {@link DateFormat}.\n     *\n     * @return A {@link CharSequence} or null.\n     *\n     * @see #setFormat24Hour(CharSequence)\n     * @see #is24HourModeEnabled()\n     ",
    "links" : [ "android.text.format.DateFormat", "CharSequence" ]
  }, {
    "name" : "public void setFormat24Hour(CharSequence format)",
    "returnType" : "void",
    "comment" : "\n     * <p>Specifies the formatting pattern used to display the date and/or time\n     * in 24-hour mode. The formatting pattern syntax is described in\n     * {@link DateFormat}.</p>\n     *\n     * <p>If this pattern is set to null, {@link #getFormat24Hour()} will be used\n     * even in 12-hour mode. If both 24-hour and 12-hour formatting patterns\n     * are set to null, the default pattern for the current locale will be used\n     * instead.</p>\n     *\n     * <p><strong>Note:</strong> if styling is not needed, it is highly recommended\n     * you supply a format string generated by\n     * {@link DateFormat#getBestDateTimePattern(java.util.Locale, String)}. This method\n     * takes care of generating a format string adapted to the desired locale.</p>\n     *\n     * @param format A date/time formatting pattern as described in {@link DateFormat}\n     *\n     * @see #getFormat24Hour()\n     * @see #is24HourModeEnabled()\n     * @see DateFormat#getBestDateTimePattern(java.util.Locale, String)\n     * @see DateFormat\n     *\n     * @attr ref android.R.styleable#TextClock_format24Hour\n     ",
    "links" : [ "android.text.format.DateFormat", "android.text.format.DateFormat#getBestDateTimePattern(java.util.Locale", "#getFormat24Hour()" ]
  }, {
    "name" : "public void setContentDescriptionFormat24Hour(CharSequence format)",
    "returnType" : "void",
    "comment" : "\n     * Like setFormat24Hour, but for the content description.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShowCurrentUserTime(boolean showCurrentUserTime)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this clock should always track the current user and not the user of the\n     * current process. This is used for single instance processes like the systemUI who need\n     * to display time for different users.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClockEventDelegate(ClockEventDelegate delegate)",
    "returnType" : "void",
    "comment" : "\n     * Sets a delegate to handle clock event registration. This must be called before the view is\n     * attached to the window\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void refreshTime()",
    "returnType" : "void",
    "comment" : "\n     * Update the displayed time if necessary and invalidate the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is24HourModeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the system is currently using the 24-hour mode.\n     *\n     * When the system is in 24-hour mode, this view will use the pattern\n     * returned by {@link #getFormat24Hour()}. In 12-hour mode, the pattern\n     * returned by {@link #getFormat12Hour()} is used instead.\n     *\n     * If either one of the formats is null, the other format is used. If\n     * both formats are null, the default formats for the current locale are used.\n     *\n     * @return true if time should be displayed in 24-hour format, false if it\n     *         should be displayed in 12-hour format.\n     *\n     * @see #setFormat12Hour(CharSequence)\n     * @see #getFormat12Hour()\n     * @see #setFormat24Hour(CharSequence)\n     * @see #getFormat24Hour()\n     ",
    "links" : [ "#getFormat24Hour()", "#getFormat12Hour()" ]
  }, {
    "name" : "public String getTimeZone()",
    "returnType" : "String",
    "comment" : "\n     * Indicates which time zone is currently used by this view.\n     *\n     * @return The ID of the current time zone or null if the default time zone,\n     *         as set by the user, must be used\n     *\n     * @see TimeZone\n     * @see java.util.TimeZone#getAvailableIDs()\n     * @see #setTimeZone(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimeZone(String timeZone)",
    "returnType" : "void",
    "comment" : "\n     * Sets the specified time zone to use in this clock. When the time zone\n     * is set through this method, system time zone changes (when the user\n     * sets the time zone in settings for instance) will be ignored.\n     *\n     * @param timeZone The desired time zone's ID as specified in {@link TimeZone}\n     *                 or null to user the time zone specified by the user\n     *                 (system time zone)\n     *\n     * @see #getTimeZone()\n     * @see java.util.TimeZone#getAvailableIDs()\n     * @see TimeZone#getTimeZone(String)\n     *\n     * @attr ref android.R.styleable#TextClock_timeZone\n     ",
    "links" : [ "java.util.TimeZone" ]
  }, {
    "name" : "public CharSequence getFormat()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the current format string. Always valid after constructor has\n     * finished, and will never be {@code null}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void chooseFormat()",
    "returnType" : "void",
    "comment" : "\n     * Selects either one of {@link #getFormat12Hour()} or {@link #getFormat24Hour()}\n     * depending on whether the user has selected 24-hour format.\n     ",
    "links" : [ "#getFormat24Hour()", "#getFormat12Hour()" ]
  }, {
    "name" : "private String getBestDateTimePattern(String skeleton)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static CharSequence abc(CharSequence a, CharSequence b, CharSequence c)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a if not null, else return b if not null, else return c.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onVisibilityAggregated(boolean isVisible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disableClockTick()",
    "returnType" : "void",
    "comment" : "\n     * Used by tests to stop the clock tick from updating the text.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerObserver()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unregisterObserver()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onTimeChanged()",
    "returnType" : "void",
    "comment" : "\n     * Update the displayed time if this view and its ancestors and window is visible\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init()", "private void createTime(String timeZone)", "public CharSequence getFormat12Hour()", "public void setFormat12Hour(CharSequence format)", "public void setContentDescriptionFormat12Hour(CharSequence format)", "public CharSequence getFormat24Hour()", "public void setFormat24Hour(CharSequence format)", "public void setContentDescriptionFormat24Hour(CharSequence format)", "public void setShowCurrentUserTime(boolean showCurrentUserTime)", "public void setClockEventDelegate(ClockEventDelegate delegate)", "public void refreshTime()", "public boolean is24HourModeEnabled()", "public String getTimeZone()", "public void setTimeZone(String timeZone)", "public CharSequence getFormat()", "private void chooseFormat()", "private String getBestDateTimePattern(String skeleton)", "private static CharSequence abc(CharSequence a, CharSequence b, CharSequence c)", "protected void onAttachedToWindow()", "public void onVisibilityAggregated(boolean isVisible)", "protected void onDetachedFromWindow()", "public void disableClockTick()", "private void registerObserver()", "private void unregisterObserver()", "private void onTimeChanged()", "protected void encodeProperties(@NonNull ViewHierarchyEncoder stream)" ],
  "variableNames" : [ "DEFAULT_FORMAT_12_HOUR", "DEFAULT_FORMAT_24_HOUR", "mFormat12", "mFormat24", "mDescFormat12", "mDescFormat24", "mFormat", "mHasSeconds", "mDescFormat", "mRegistered", "mShouldRunTicker", "mClockEventDelegate", "mTime", "mTimeZone", "mShowCurrentUserTime", "mFormatChangeObserver", "mStopTicking", "mIntentReceiver", "mTicker" ]
}