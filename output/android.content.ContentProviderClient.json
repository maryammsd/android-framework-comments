{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/ContentProviderClient.java",
  "packageName" : "android.content",
  "className" : "ContentProviderClient",
  "comment" : "\n * The public interface object used to interact with a specific\n * {@link ContentProvider}.\n * <p>\n * Instances can be obtained by calling\n * {@link ContentResolver#acquireContentProviderClient} or\n * {@link ContentResolver#acquireUnstableContentProviderClient}. Instances must\n * be released using {@link #close()} in order to indicate to the system that\n * the underlying {@link ContentProvider} is no longer needed and can be killed\n * to free up resources.\n * <p>\n * Note that you should generally create a new ContentProviderClient instance\n * for each thread that will be performing operations. Unlike\n * {@link ContentResolver}, the methods here such as {@link #query} and\n * {@link #openFile} are not thread safe -- you must not call {@link #close()}\n * on the ContentProviderClient those calls are made from until you are finished\n * with the data they have returned.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAnrHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentResolver",
    "type" : "ContentResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentProvider",
    "type" : "IContentProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthority",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClosed",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnrTimeout",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnrRunnable",
    "type" : "NotRespondingRunnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDetectNotResponding(@DurationMillisLong long timeoutMillis)",
    "returnType" : "void",
    "comment" : "\n     * Configure this client to automatically detect and kill the remote\n     * provider when an \"application not responding\" event is detected.\n     *\n     * @param timeoutMillis the duration for which a pending call is allowed\n     *            block before the remote provider is considered to be\n     *            unresponsive. Set to {@code 0} to allow pending calls to block\n     *            indefinitely with no action taken.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void beforeRemote()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void afterRemote()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(@NonNull Uri url, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) throws RemoteException",
    "returnType" : "Cursor",
    "comment" : " See {@link ContentProvider#query ContentProvider.query} ",
    "links" : [ "android.content.ContentProvider#query" ]
  }, {
    "name" : "public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder, @Nullable CancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "Cursor",
    "comment" : " See {@link ContentProvider#query ContentProvider.query} ",
    "links" : [ "android.content.ContentProvider#query" ]
  }, {
    "name" : "public Cursor query(@NonNull Uri uri, @Nullable String[] projection, Bundle queryArgs, @Nullable CancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "Cursor",
    "comment" : " See {@link ContentProvider#query ContentProvider.query} ",
    "links" : [ "android.content.ContentProvider#query" ]
  }, {
    "name" : "public String getType(@NonNull Uri url) throws RemoteException",
    "returnType" : "String",
    "comment" : " See {@link ContentProvider#getType ContentProvider.getType} ",
    "links" : [ "android.content.ContentProvider#getType" ]
  }, {
    "name" : "public String[] getStreamTypes(@NonNull Uri url, @NonNull String mimeTypeFilter) throws RemoteException",
    "returnType" : "String[]",
    "comment" : " See {@link ContentProvider#getStreamTypes ContentProvider.getStreamTypes} ",
    "links" : [ "android.content.ContentProvider#getStreamTypes" ]
  }, {
    "name" : "public final Uri canonicalize(@NonNull Uri url) throws RemoteException",
    "returnType" : "Uri",
    "comment" : " See {@link ContentProvider#canonicalize} ",
    "links" : [ "android.content.ContentProvider#canonicalize" ]
  }, {
    "name" : "public final Uri uncanonicalize(@NonNull Uri url) throws RemoteException",
    "returnType" : "Uri",
    "comment" : " See {@link ContentProvider#uncanonicalize} ",
    "links" : [ "android.content.ContentProvider#uncanonicalize" ]
  }, {
    "name" : "public boolean refresh(Uri url, @Nullable Bundle extras, @Nullable CancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "boolean",
    "comment" : " See {@link ContentProvider#refresh} ",
    "links" : [ "android.content.ContentProvider#refresh" ]
  }, {
    "name" : "public int checkUriPermission(@NonNull Uri uri, int uid, @Intent.AccessUriMode int modeFlags) throws RemoteException",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public Uri insert(@NonNull Uri url, @Nullable ContentValues initialValues) throws RemoteException",
    "returnType" : "Uri",
    "comment" : " See {@link ContentProvider#insert ContentProvider.insert} ",
    "links" : [ "android.content.ContentProvider#insert" ]
  }, {
    "name" : "public Uri insert(@NonNull Uri url, @Nullable ContentValues initialValues, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "Uri",
    "comment" : " See {@link ContentProvider#insert ContentProvider.insert} ",
    "links" : [ "android.content.ContentProvider#insert" ]
  }, {
    "name" : "public int bulkInsert(@NonNull Uri url, @NonNull ContentValues[] initialValues) throws RemoteException",
    "returnType" : "int",
    "comment" : " See {@link ContentProvider#bulkInsert ContentProvider.bulkInsert} ",
    "links" : [ "android.content.ContentProvider#bulkInsert" ]
  }, {
    "name" : "public int delete(@NonNull Uri url, @Nullable String selection, @Nullable String[] selectionArgs) throws RemoteException",
    "returnType" : "int",
    "comment" : " See {@link ContentProvider#delete ContentProvider.delete} ",
    "links" : [ "android.content.ContentProvider#delete" ]
  }, {
    "name" : "public int delete(@NonNull Uri url, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "int",
    "comment" : " See {@link ContentProvider#delete ContentProvider.delete} ",
    "links" : [ "android.content.ContentProvider#delete" ]
  }, {
    "name" : "public int update(@NonNull Uri url, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) throws RemoteException",
    "returnType" : "int",
    "comment" : " See {@link ContentProvider#update ContentProvider.update} ",
    "links" : [ "android.content.ContentProvider#update" ]
  }, {
    "name" : "public int update(@NonNull Uri url, @Nullable ContentValues values, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "int",
    "comment" : " See {@link ContentProvider#update ContentProvider.update} ",
    "links" : [ "android.content.ContentProvider#update" ]
  }, {
    "name" : "public ParcelFileDescriptor openFile(@NonNull Uri url, @NonNull String mode) throws RemoteException, FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * See {@link ContentProvider#openFile ContentProvider.openFile}.  Note that\n     * this <em>does not</em>\n     * take care of non-content: URIs such as file:.  It is strongly recommended\n     * you use the {@link ContentResolver#openFileDescriptor\n     * ContentResolver.openFileDescriptor} API instead.\n     ",
    "links" : [ "android.content.ContentProvider#openFile", "android.content.ContentResolver#openFileDescriptorContentResolver.openFileDescriptor" ]
  }, {
    "name" : "public ParcelFileDescriptor openFile(@NonNull Uri url, @NonNull String mode, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * See {@link ContentProvider#openFile ContentProvider.openFile}.  Note that\n     * this <em>does not</em>\n     * take care of non-content: URIs such as file:.  It is strongly recommended\n     * you use the {@link ContentResolver#openFileDescriptor\n     * ContentResolver.openFileDescriptor} API instead.\n     ",
    "links" : [ "android.content.ContentProvider#openFile", "android.content.ContentResolver#openFileDescriptorContentResolver.openFileDescriptor" ]
  }, {
    "name" : "public AssetFileDescriptor openAssetFile(@NonNull Uri url, @NonNull String mode) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * See {@link ContentProvider#openAssetFile ContentProvider.openAssetFile}.\n     * Note that this <em>does not</em>\n     * take care of non-content: URIs such as file:.  It is strongly recommended\n     * you use the {@link ContentResolver#openAssetFileDescriptor\n     * ContentResolver.openAssetFileDescriptor} API instead.\n     ",
    "links" : [ "android.content.ContentProvider#openAssetFile", "android.content.ContentResolver#openAssetFileDescriptorContentResolver.openAssetFileDescriptor" ]
  }, {
    "name" : "public AssetFileDescriptor openAssetFile(@NonNull Uri url, @NonNull String mode, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * See {@link ContentProvider#openAssetFile ContentProvider.openAssetFile}.\n     * Note that this <em>does not</em>\n     * take care of non-content: URIs such as file:.  It is strongly recommended\n     * you use the {@link ContentResolver#openAssetFileDescriptor\n     * ContentResolver.openAssetFileDescriptor} API instead.\n     ",
    "links" : [ "android.content.ContentProvider#openAssetFile", "android.content.ContentResolver#openAssetFileDescriptorContentResolver.openAssetFileDescriptor" ]
  }, {
    "name" : "public final AssetFileDescriptor openTypedAssetFileDescriptor(@NonNull Uri uri, @NonNull String mimeType, @Nullable Bundle opts) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : " See {@link ContentProvider#openTypedAssetFile ContentProvider.openTypedAssetFile} ",
    "links" : [ "android.content.ContentProvider#openTypedAssetFile" ]
  }, {
    "name" : "public final AssetFileDescriptor openTypedAssetFileDescriptor(@NonNull Uri uri, @NonNull String mimeType, @Nullable Bundle opts, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : " See {@link ContentProvider#openTypedAssetFile ContentProvider.openTypedAssetFile} ",
    "links" : [ "android.content.ContentProvider#openTypedAssetFile" ]
  }, {
    "name" : "public final AssetFileDescriptor openTypedAssetFile(@NonNull Uri uri, @NonNull String mimeTypeFilter, @Nullable Bundle opts, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentProviderResult[] applyBatch(@NonNull ArrayList<ContentProviderOperation> operations) throws RemoteException, OperationApplicationException",
    "returnType" : "ContentProviderResult[]",
    "comment" : " See {@link ContentProvider#applyBatch ContentProvider.applyBatch} ",
    "links" : [ "android.content.ContentProvider#applyBatch" ]
  }, {
    "name" : "public ContentProviderResult[] applyBatch(@NonNull String authority, @NonNull ArrayList<ContentProviderOperation> operations) throws RemoteException, OperationApplicationException",
    "returnType" : "ContentProviderResult[]",
    "comment" : " See {@link ContentProvider#applyBatch ContentProvider.applyBatch} ",
    "links" : [ "android.content.ContentProvider#applyBatch" ]
  }, {
    "name" : "public Bundle call(@NonNull String method, @Nullable String arg, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "Bundle",
    "comment" : " See {@link ContentProvider#call(String, String, Bundle)} ",
    "links" : [ "android.content.ContentProvider#call(String" ]
  }, {
    "name" : "public Bundle call(@NonNull String authority, @NonNull String method, @Nullable String arg, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "Bundle",
    "comment" : " See {@link ContentProvider#call(String, String, Bundle)} ",
    "links" : [ "android.content.ContentProvider#call(String" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this client connection, indicating to the system that the\n     * underlying {@link ContentProvider} is no longer needed.\n     ",
    "links" : [ "android.content.ContentProvider" ]
  }, {
    "name" : "public boolean release()",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated replaced by {@link #close()}.\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "private boolean closeInternal()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentProvider getLocalContentProvider()",
    "returnType" : "ContentProvider",
    "comment" : "\n     * Get a reference to the {@link ContentProvider} that is associated with this\n     * client. If the {@link ContentProvider} is running in a different process then\n     * null will be returned. This can be used if you know you are running in the same\n     * process as a provider, and want to get direct access to its implementation details.\n     *\n     * @return If the associated {@link ContentProvider} is local, returns it.\n     * Otherwise returns null.\n     ",
    "links" : [ "android.content.ContentProvider" ]
  }, {
    "name" : "public static void closeQuietly(ContentProviderClient client)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static void releaseQuietly(ContentProviderClient client)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sAnrHandler", "mContentResolver", "mContentProvider", "mPackageName", "mAttributionTag", "mAuthority", "mStable", "mClosed", "mCloseGuard", "mAnrTimeout", "mAnrRunnable" ],
  "methodNames" : [ "public void setDetectNotResponding(@DurationMillisLong long timeoutMillis)", "private void beforeRemote()", "private void afterRemote()", "public Cursor query(@NonNull Uri url, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) throws RemoteException", "public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder, @Nullable CancellationSignal cancellationSignal) throws RemoteException", "public Cursor query(@NonNull Uri uri, @Nullable String[] projection, Bundle queryArgs, @Nullable CancellationSignal cancellationSignal) throws RemoteException", "public String getType(@NonNull Uri url) throws RemoteException", "public String[] getStreamTypes(@NonNull Uri url, @NonNull String mimeTypeFilter) throws RemoteException", "public final Uri canonicalize(@NonNull Uri url) throws RemoteException", "public final Uri uncanonicalize(@NonNull Uri url) throws RemoteException", "public boolean refresh(Uri url, @Nullable Bundle extras, @Nullable CancellationSignal cancellationSignal) throws RemoteException", "public int checkUriPermission(@NonNull Uri uri, int uid, @Intent.AccessUriMode int modeFlags) throws RemoteException", "public Uri insert(@NonNull Uri url, @Nullable ContentValues initialValues) throws RemoteException", "public Uri insert(@NonNull Uri url, @Nullable ContentValues initialValues, @Nullable Bundle extras) throws RemoteException", "public int bulkInsert(@NonNull Uri url, @NonNull ContentValues[] initialValues) throws RemoteException", "public int delete(@NonNull Uri url, @Nullable String selection, @Nullable String[] selectionArgs) throws RemoteException", "public int delete(@NonNull Uri url, @Nullable Bundle extras) throws RemoteException", "public int update(@NonNull Uri url, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) throws RemoteException", "public int update(@NonNull Uri url, @Nullable ContentValues values, @Nullable Bundle extras) throws RemoteException", "public ParcelFileDescriptor openFile(@NonNull Uri url, @NonNull String mode) throws RemoteException, FileNotFoundException", "public ParcelFileDescriptor openFile(@NonNull Uri url, @NonNull String mode, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException", "public AssetFileDescriptor openAssetFile(@NonNull Uri url, @NonNull String mode) throws RemoteException, FileNotFoundException", "public AssetFileDescriptor openAssetFile(@NonNull Uri url, @NonNull String mode, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException", "public final AssetFileDescriptor openTypedAssetFileDescriptor(@NonNull Uri uri, @NonNull String mimeType, @Nullable Bundle opts) throws RemoteException, FileNotFoundException", "public final AssetFileDescriptor openTypedAssetFileDescriptor(@NonNull Uri uri, @NonNull String mimeType, @Nullable Bundle opts, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException", "public final AssetFileDescriptor openTypedAssetFile(@NonNull Uri uri, @NonNull String mimeTypeFilter, @Nullable Bundle opts, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException", "public ContentProviderResult[] applyBatch(@NonNull ArrayList<ContentProviderOperation> operations) throws RemoteException, OperationApplicationException", "public ContentProviderResult[] applyBatch(@NonNull String authority, @NonNull ArrayList<ContentProviderOperation> operations) throws RemoteException, OperationApplicationException", "public Bundle call(@NonNull String method, @Nullable String arg, @Nullable Bundle extras) throws RemoteException", "public Bundle call(@NonNull String authority, @NonNull String method, @Nullable String arg, @Nullable Bundle extras) throws RemoteException", "public void close()", "public boolean release()", "private boolean closeInternal()", "protected void finalize() throws Throwable", "public ContentProvider getLocalContentProvider()", "public static void closeQuietly(ContentProviderClient client)", "public static void releaseQuietly(ContentProviderClient client)" ]
}