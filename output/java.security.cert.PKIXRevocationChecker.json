{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/PKIXRevocationChecker.java",
  "packageName" : "java.security.cert",
  "className" : "PKIXRevocationChecker",
  "comment" : "\n * A {@code PKIXCertPathChecker} for checking the revocation status of\n * certificates with the PKIX algorithm.\n *\n * <p>A {@code PKIXRevocationChecker} checks the revocation status of\n * certificates with the Online Certificate Status Protocol (OCSP) or\n * Certificate Revocation Lists (CRLs). OCSP is described in RFC 2560 and\n * is a network protocol for determining the status of a certificate. A CRL\n * is a time-stamped list identifying revoked certificates, and RFC 5280\n * describes an algorithm for determining the revocation status of certificates\n * using CRLs.\n *\n * <p>Each {@code PKIXRevocationChecker} must be able to check the revocation\n * status of certificates with OCSP and CRLs. By default, OCSP is the\n * preferred mechanism for checking revocation status, with CRLs as the\n * fallback mechanism. However, this preference can be switched to CRLs with\n * the {@link Option#PREFER_CRLS PREFER_CRLS} option. In addition, the fallback\n * mechanism can be disabled with the {@link Option#NO_FALLBACK NO_FALLBACK}\n * option.\n *\n * <p>A {@code PKIXRevocationChecker} is obtained by calling the\n * {@link CertPathValidator#getRevocationChecker getRevocationChecker} method\n * of a PKIX {@code CertPathValidator}. Additional parameters and options\n * specific to revocation can be set (by calling the\n * {@link #setOcspResponder setOcspResponder} method for instance). The\n * {@code PKIXRevocationChecker} is added to a {@code PKIXParameters} object\n * using the {@link PKIXParameters#addCertPathChecker addCertPathChecker}\n * or {@link PKIXParameters#setCertPathCheckers setCertPathCheckers} method,\n * and then the {@code PKIXParameters} is passed along with the {@code CertPath}\n * to be validated to the {@link CertPathValidator#validate validate} method\n * of a PKIX {@code CertPathValidator}. When supplying a revocation checker in\n * this manner, it will be used to check revocation irrespective of the setting\n * of the {@link PKIXParameters#isRevocationEnabled RevocationEnabled} flag.\n * Similarly, a {@code PKIXRevocationChecker} may be added to a\n * {@code PKIXBuilderParameters} object for use with a PKIX\n * {@code CertPathBuilder}.\n *\n * <p>Note that when a {@code PKIXRevocationChecker} is added to\n * {@code PKIXParameters}, it clones the {@code PKIXRevocationChecker};\n * thus any subsequent modifications to the {@code PKIXRevocationChecker}\n * have no effect.\n *\n * <p>Any parameter that is not set (or is set to {@code null}) will be set to\n * the default value for that parameter.\n *\n * <p><b>Concurrent Access</b>\n *\n * <p>Unless otherwise specified, the methods defined in this class are not\n * thread-safe. Multiple threads that need to access a single object\n * concurrently should synchronize amongst themselves and provide the\n * necessary locking. Multiple threads each manipulating separate objects\n * need not synchronize.\n *\n * @since 1.8\n *\n * // Android-changed: Changed invalid `@`see to \"See\".\n * See <a href=\"http://www.ietf.org/rfc/rfc2560.txt\"><i>RFC&nbsp;2560: X.509\n * Internet Public Key Infrastructure Online Certificate Status Protocol -\n * OCSP</i></a>, <br><a\n * href=\"http://www.ietf.org/rfc/rfc5280.txt\"><i>RFC&nbsp;5280: Internet X.509\n * Public Key Infrastructure Certificate and Certificate Revocation List (CRL)\n * Profile</i></a>\n ",
  "links" : [ "#NO_FALLBACK", "java.security.cert.CertPathValidator#getRevocationChecker", "java.security.cert.PKIXParameters#setCertPathCheckers", "#PREFER_CRLS", "java.security.cert.PKIXParameters#isRevocationEnabled", "#setOcspResponder", "java.security.cert.PKIXParameters#addCertPathChecker", "java.security.cert.CertPathValidator#validate" ],
  "variables" : [ {
    "name" : "ocspResponder",
    "type" : "URI",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ocspResponderCert",
    "type" : "X509Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ocspExtensions",
    "type" : "List<Extension>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ocspResponses",
    "type" : "Map<X509Certificate, byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "options",
    "type" : "Set<Option>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOcspResponder(URI uri)",
    "returnType" : "void",
    "comment" : "\n     * Sets the URI that identifies the location of the OCSP responder. This\n     * overrides the {@code ocsp.responderURL} security property and any\n     * responder specified in a certificate's Authority Information Access\n     * Extension, as defined in RFC 5280.\n     *\n     * @param uri the responder URI\n     ",
    "links" : [ ]
  }, {
    "name" : "public URI getOcspResponder()",
    "returnType" : "URI",
    "comment" : "\n     * Gets the URI that identifies the location of the OCSP responder. This\n     * overrides the {@code ocsp.responderURL} security property. If this\n     * parameter or the {@code ocsp.responderURL} property is not set, the\n     * location is determined from the certificate's Authority Information\n     * Access Extension, as defined in RFC 5280.\n     *\n     * @return the responder URI, or {@code null} if not set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOcspResponderCert(X509Certificate cert)",
    "returnType" : "void",
    "comment" : "\n     * Sets the OCSP responder's certificate. This overrides the\n     * {@code ocsp.responderCertSubjectName},\n     * {@code ocsp.responderCertIssuerName},\n     * and {@code ocsp.responderCertSerialNumber} security properties.\n     *\n     * @param cert the responder's certificate\n     ",
    "links" : [ ]
  }, {
    "name" : "public X509Certificate getOcspResponderCert()",
    "returnType" : "X509Certificate",
    "comment" : "\n     * Gets the OCSP responder's certificate. This overrides the\n     * {@code ocsp.responderCertSubjectName},\n     * {@code ocsp.responderCertIssuerName},\n     * and {@code ocsp.responderCertSerialNumber} security properties. If this\n     * parameter or the aforementioned properties are not set, then the\n     * responder's certificate is determined as specified in RFC 2560.\n     *\n     * @return the responder's certificate, or {@code null} if not set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOcspExtensions(List<Extension> extensions)",
    "returnType" : "void",
    "comment" : "\n     * Sets the optional OCSP request extensions.\n     *\n     * @param extensions a list of extensions. The list is copied to protect\n     *        against subsequent modification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Extension> getOcspExtensions()",
    "returnType" : "List<Extension>",
    "comment" : "\n     * Gets the optional OCSP request extensions.\n     *\n     * @return an unmodifiable list of extensions. The list is empty if no\n     *         extensions have been specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOcspResponses(Map<X509Certificate, byte[]> responses)",
    "returnType" : "void",
    "comment" : "\n     * Sets the OCSP responses. These responses are used to determine\n     * the revocation status of the specified certificates when OCSP is used.\n     *\n     * @param responses a map of OCSP responses. Each key is an\n     *        {@code X509Certificate} that maps to the corresponding\n     *        DER-encoded OCSP response for that certificate. A deep copy of\n     *        the map is performed to protect against subsequent modification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<X509Certificate, byte[]> getOcspResponses()",
    "returnType" : "Map<X509Certificate, byte[]>",
    "comment" : "\n     * Gets the OCSP responses. These responses are used to determine\n     * the revocation status of the specified certificates when OCSP is used.\n     *\n     * @return a map of OCSP responses. Each key is an\n     *        {@code X509Certificate} that maps to the corresponding\n     *        DER-encoded OCSP response for that certificate. A deep copy of\n     *        the map is returned to protect against subsequent modification.\n     *        Returns an empty map if no responses have been specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOptions(Set<Option> options)",
    "returnType" : "void",
    "comment" : "\n     * Sets the revocation options.\n     *\n     * @param options a set of revocation options. The set is copied to protect\n     *        against subsequent modification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Option> getOptions()",
    "returnType" : "Set<Option>",
    "comment" : "\n     * Gets the revocation options.\n     *\n     * @return an unmodifiable set of revocation options. The set is empty if\n     *         no options have been specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<CertPathValidatorException> getSoftFailExceptions()",
    "returnType" : "List<CertPathValidatorException>",
    "comment" : "\n     * Returns a list containing the exceptions that are ignored by the\n     * revocation checker when the {@link Option#SOFT_FAIL SOFT_FAIL} option\n     * is set. The list is cleared each time {@link #init init} is called.\n     * The list is ordered in ascending order according to the certificate\n     * index returned by {@link CertPathValidatorException#getIndex getIndex}\n     * method of each entry.\n     * <p>\n     * An implementation of {@code PKIXRevocationChecker} is responsible for\n     * adding the ignored exceptions to the list.\n     *\n     * @return an unmodifiable list containing the ignored exceptions. The list\n     *         is empty if no exceptions have been ignored.\n     ",
    "links" : [ "java.security.cert.CertPathValidatorException#getIndex", "#init", "#SOFT_FAIL" ]
  }, {
    "name" : "public PKIXRevocationChecker clone()",
    "returnType" : "PKIXRevocationChecker",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setOcspResponder(URI uri)", "public URI getOcspResponder()", "public void setOcspResponderCert(X509Certificate cert)", "public X509Certificate getOcspResponderCert()", "public void setOcspExtensions(List<Extension> extensions)", "public List<Extension> getOcspExtensions()", "public void setOcspResponses(Map<X509Certificate, byte[]> responses)", "public Map<X509Certificate, byte[]> getOcspResponses()", "public void setOptions(Set<Option> options)", "public Set<Option> getOptions()", "public abstract List<CertPathValidatorException> getSoftFailExceptions()", "public PKIXRevocationChecker clone()" ],
  "variableNames" : [ "ocspResponder", "ocspResponderCert", "ocspExtensions", "ocspResponses", "options" ]
}