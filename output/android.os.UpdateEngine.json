{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/UpdateEngine.java",
  "packageName" : "android.os",
  "className" : "UpdateEngine",
  "comment" : "\n * UpdateEngine handles calls to the update engine which takes care of A/B OTA\n * updates. It wraps up the update engine Binder APIs and exposes them as\n * SystemApis, which will be called by the system app responsible for OTAs.\n * On a Google device, this will be GmsCore.\n *\n * The minimal flow is:\n * <ol>\n * <li>Create a new UpdateEngine instance.\n * <li>Call {@link #bind}, optionally providing callbacks.\n * <li>Call {@link #applyPayload}.\n * </ol>\n *\n * In addition, methods are provided to {@link #cancel} or\n * {@link #suspend}/{@link #resume} application of an update.\n *\n * The APIs defined in this class and UpdateEngineCallback class must be in\n * sync with the ones in\n * {@code system/update_engine/binder_bindings/android/os/IUpdateEngine.aidl}\n * and\n * {@code system/update_engine/binder_bindings/android/os/IUpdateEngineCallback.aidl}.\n *\n * {@hide}\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPDATE_ENGINE_SERVICE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateEngine",
    "type" : "IUpdateEngine",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateEngineCallback",
    "type" : "IUpdateEngineCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateEngineCallbackLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean bind(final UpdateEngineCallback callback, final Handler handler)",
    "returnType" : "boolean",
    "comment" : "\n     * Prepares this instance for use. The callback will be notified on any\n     * status change, and when the update completes. A handler can be supplied\n     * to control which thread runs the callback, or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean bind(final UpdateEngineCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Equivalent to {@code bind(callback, null)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyPayload(String url, long offset, long size, String[] headerKeyValuePairs)",
    "returnType" : "void",
    "comment" : "\n     * Applies the payload found at the given {@code url}. For non-streaming\n     * updates, the URL can be a local file using the {@code file://} scheme.\n     *\n     * <p>The {@code offset} and {@code size} parameters specify the location\n     * of the payload within the file represented by the URL. This is useful\n     * if the downloadable package at the URL contains more than just the\n     * update_engine payload (such as extra metadata). This is true for\n     * Google's OTA system, where the URL points to a zip file in which the\n     * payload is stored uncompressed within the zip file alongside other\n     * data.\n     *\n     * <p>The {@code headerKeyValuePairs} parameter is used to pass metadata\n     * to update_engine. In Google's implementation, this is stored as\n     * {@code payload_properties.txt} in the zip file. It's generated by the\n     * script {@code system/update_engine/scripts/brillo_update_payload}.\n     * The complete list of keys and their documentation is in\n     * {@code system/update_engine/common/constants.cc}, but an example\n     * might be:\n     * <pre>\n     * String[] pairs = {\n     *   \"FILE_HASH=lURPCIkIAjtMOyB/EjQcl8zDzqtD6Ta3tJef6G/+z2k=\",\n     *   \"FILE_SIZE=871903868\",\n     *   \"METADATA_HASH=tBvj43QOB0Jn++JojcpVdbRLz0qdAuL+uTkSy7hokaw=\",\n     *   \"METADATA_SIZE=70604\"\n     * };\n     * </pre>\n     *\n     * <p>The callback functions registered via {@code #bind} will be called\n     * during and at the end of the payload application.\n     *\n     * <p>By default the newly updated slot will be set active upon\n     * successfully finishing an update. Device will attempt to boot into the\n     * new slot on next reboot. This behavior can be customized by specifying\n     * {@code SWITCH_SLOT_ON_REBOOT=0} in {@code headerKeyValuePairs}, which\n     * allows the caller to later determine a good time to boot into the new\n     * slot. Calling {@code applyPayload} again with the same payload but with\n     * {@code SWITCH_SLOT_ON_REBOOT=1} will do the minimal work to set the new\n     * slot active, after verifying its integrity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyPayload(@NonNull AssetFileDescriptor assetFd, @NonNull String[] headerKeyValuePairs)",
    "returnType" : "void",
    "comment" : "\n     * Applies the payload passed as AssetFileDescriptor {@code assetFd}\n     * instead of using the {@code file://} scheme.\n     *\n     * <p>See {@link #applyPayload(String)} for {@code offset}, {@code size} and\n     * {@code headerKeyValuePairs} parameters.\n     ",
    "links" : [ "#applyPayload(String)" ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Permanently cancels an in-progress update.\n     *\n     * <p>See {@link #resetStatus} to undo a finshed update (only available\n     * before the updated system has been rebooted).\n     *\n     * <p>See {@link #suspend} for a way to temporarily stop an in-progress\n     * update with the ability to resume it later.\n     ",
    "links" : [ "#resetStatus", "#suspend" ]
  }, {
    "name" : "public void suspend()",
    "returnType" : "void",
    "comment" : "\n     * Suspends an in-progress update. This can be undone by calling\n     * {@link #resume}.\n     ",
    "links" : [ "#resume" ]
  }, {
    "name" : "public void resume()",
    "returnType" : "void",
    "comment" : "\n     * Resumes a suspended update.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetStatus()",
    "returnType" : "void",
    "comment" : "\n     * Resets the bootable flag on the non-current partition and all internal\n     * update_engine state. This can be used after an unwanted payload has been\n     * successfully applied and the device has not yet been rebooted to signal\n     * that we no longer want to boot into that updated system. After this call\n     * completes, update_engine will no longer report\n     * {@code UPDATED_NEED_REBOOT}, so your callback can remove any outstanding\n     * notification that rebooting into the new system is possible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean unbind()",
    "returnType" : "boolean",
    "comment" : "\n     * Unbinds the last bound callback function.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean verifyPayloadMetadata(String payloadMetadataFilename)",
    "returnType" : "boolean",
    "comment" : "\n     * Verifies that a payload associated with the given payload metadata\n     * {@code payloadMetadataFilename} can be safely applied to ths device.\n     * Returns {@code true} if the update can successfully be applied and\n     * returns {@code false} otherwise.\n     *\n     * @param payloadMetadataFilename the location of the metadata without the\n     * {@code file://} prefix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AllocateSpaceResult allocateSpace(@NonNull String payloadMetadataFilename, @NonNull String[] headerKeyValuePairs)",
    "returnType" : "AllocateSpaceResult",
    "comment" : "\n     * Initialize partitions for a payload associated with the given payload\n     * metadata {@code payloadMetadataFilename} by preallocating required space.\n     *\n     * <p>This function should be called after payload has been verified after\n     * {@link #verifyPayloadMetadata}. This function does not verify whether\n     * the given payload is applicable or not.\n     *\n     * <p>Implementation of {@code allocateSpace} uses\n     * {@code headerKeyValuePairs} to determine whether space has been allocated\n     * for a different or same payload previously. If space has been allocated\n     * for a different payload before, space will be reallocated for the given\n     * payload. If space has been allocated for the same payload, no actions to\n     * storage devices are taken.\n     *\n     * <p>This function is synchronous and may take a non-trivial amount of\n     * time. Callers should call this function in a background thread.\n     *\n     * @param payloadMetadataFilename See {@link #verifyPayloadMetadata}.\n     * @param headerKeyValuePairs See {@link #applyPayload}.\n     * @return See {@link AllocateSpaceResult#getErrorCode} and\n     *             {@link AllocateSpaceResult#getFreeSpaceRequired}.\n     ",
    "links" : [ "#verifyPayloadMetadata", "#getErrorCode", "#getFreeSpaceRequired", "#applyPayload" ]
  }, {
    "name" : "public int cleanupAppliedPayload()",
    "returnType" : "int",
    "comment" : "\n     * Cleanup files used by the previous update and free up space after the\n     * device has been booted successfully into the new build.\n     *\n     * <p>In particular, this function waits until delta files for snapshots for\n     * Virtual A/B update are merged to OS partitions, then delete these delta\n     * files.\n     *\n     * <p>This function is synchronous and may take a non-trivial amount of\n     * time. Callers should call this function in a background thread.\n     *\n     * <p>This function does not delete payload binaries downloaded for a\n     * non-streaming OTA update.\n     *\n     * @return One of the following:\n     * <ul>\n     * <li>{@link ErrorCodeConstants#SUCCESS} if execution is successful.</li>\n     * <li>{@link ErrorCodeConstants#ERROR} if a transient error has occurred.\n     * The device should be able to recover after a reboot. The function should\n     * be retried after the reboot.</li>\n     * <li>{@link ErrorCodeConstants#DEVICE_CORRUPTED} if a permanent error is\n     * encountered. Device is corrupted, and future updates must not be applied.\n     * The device cannot recover without flashing and factory resets.\n     * </ul>\n     ",
    "links" : [ "#DEVICE_CORRUPTED", "#SUCCESS", "#ERROR" ]
  } ],
  "variableNames" : [ "TAG", "UPDATE_ENGINE_SERVICE", "mUpdateEngine", "mUpdateEngineCallback", "mUpdateEngineCallbackLock" ],
  "methodNames" : [ "public boolean bind(final UpdateEngineCallback callback, final Handler handler)", "public boolean bind(final UpdateEngineCallback callback)", "public void applyPayload(String url, long offset, long size, String[] headerKeyValuePairs)", "public void applyPayload(@NonNull AssetFileDescriptor assetFd, @NonNull String[] headerKeyValuePairs)", "public void cancel()", "public void suspend()", "public void resume()", "public void resetStatus()", "public boolean unbind()", "public boolean verifyPayloadMetadata(String payloadMetadataFilename)", "public AllocateSpaceResult allocateSpace(@NonNull String payloadMetadataFilename, @NonNull String[] headerKeyValuePairs)", "public int cleanupAppliedPayload()" ]
}