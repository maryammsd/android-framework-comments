{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/SortedSet.java",
  "packageName" : "java.util",
  "className" : "SortedSet",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Comparator<? super E> comparator()",
    "returnType" : "Comparator<? super E>",
    "comment" : "\n     * Returns the comparator used to order the elements in this set,\n     * or {@code null} if this set uses the {@linkplain Comparable\n     * natural ordering} of its elements.\n     *\n     * @return the comparator used to order the elements in this set,\n     *         or {@code null} if this set uses the natural ordering\n     *         of its elements\n     ",
    "links" : [ ]
  }, {
    "name" : " SortedSet<E> subSet(E fromElement, E toElement)",
    "returnType" : "SortedSet<E>",
    "comment" : "\n     * Returns a view of the portion of this set whose elements range\n     * from {@code fromElement}, inclusive, to {@code toElement},\n     * exclusive.  (If {@code fromElement} and {@code toElement} are\n     * equal, the returned set is empty.)  The returned set is backed\n     * by this set, so changes in the returned set are reflected in\n     * this set, and vice-versa.  The returned set supports all\n     * optional set operations that this set supports.\n     *\n     * <p>The returned set will throw an {@code IllegalArgumentException}\n     * on an attempt to insert an element outside its range.\n     *\n     * @param fromElement low endpoint (inclusive) of the returned set\n     * @param toElement high endpoint (exclusive) of the returned set\n     * @return a view of the portion of this set whose elements range from\n     *         {@code fromElement}, inclusive, to {@code toElement}, exclusive\n     * @throws ClassCastException if {@code fromElement} and\n     *         {@code toElement} cannot be compared to one another using this\n     *         set's comparator (or, if the set has no comparator, using\n     *         natural ordering).  Implementations may, but are not required\n     *         to, throw this exception if {@code fromElement} or\n     *         {@code toElement} cannot be compared to elements currently in\n     *         the set.\n     * @throws NullPointerException if {@code fromElement} or\n     *         {@code toElement} is null and this set does not permit null\n     *         elements\n     * @throws IllegalArgumentException if {@code fromElement} is\n     *         greater than {@code toElement}; or if this set itself\n     *         has a restricted range, and {@code fromElement} or\n     *         {@code toElement} lies outside the bounds of the range\n     ",
    "links" : [ ]
  }, {
    "name" : " SortedSet<E> headSet(E toElement)",
    "returnType" : "SortedSet<E>",
    "comment" : "\n     * Returns a view of the portion of this set whose elements are\n     * strictly less than {@code toElement}.  The returned set is\n     * backed by this set, so changes in the returned set are\n     * reflected in this set, and vice-versa.  The returned set\n     * supports all optional set operations that this set supports.\n     *\n     * <p>The returned set will throw an {@code IllegalArgumentException}\n     * on an attempt to insert an element outside its range.\n     *\n     * @param toElement high endpoint (exclusive) of the returned set\n     * @return a view of the portion of this set whose elements are strictly\n     *         less than {@code toElement}\n     * @throws ClassCastException if {@code toElement} is not compatible\n     *         with this set's comparator (or, if the set has no comparator,\n     *         if {@code toElement} does not implement {@link Comparable}).\n     *         Implementations may, but are not required to, throw this\n     *         exception if {@code toElement} cannot be compared to elements\n     *         currently in the set.\n     * @throws NullPointerException if {@code toElement} is null and\n     *         this set does not permit null elements\n     * @throws IllegalArgumentException if this set itself has a\n     *         restricted range, and {@code toElement} lies outside the\n     *         bounds of the range\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : " SortedSet<E> tailSet(E fromElement)",
    "returnType" : "SortedSet<E>",
    "comment" : "\n     * Returns a view of the portion of this set whose elements are\n     * greater than or equal to {@code fromElement}.  The returned\n     * set is backed by this set, so changes in the returned set are\n     * reflected in this set, and vice-versa.  The returned set\n     * supports all optional set operations that this set supports.\n     *\n     * <p>The returned set will throw an {@code IllegalArgumentException}\n     * on an attempt to insert an element outside its range.\n     *\n     * @param fromElement low endpoint (inclusive) of the returned set\n     * @return a view of the portion of this set whose elements are greater\n     *         than or equal to {@code fromElement}\n     * @throws ClassCastException if {@code fromElement} is not compatible\n     *         with this set's comparator (or, if the set has no comparator,\n     *         if {@code fromElement} does not implement {@link Comparable}).\n     *         Implementations may, but are not required to, throw this\n     *         exception if {@code fromElement} cannot be compared to elements\n     *         currently in the set.\n     * @throws NullPointerException if {@code fromElement} is null\n     *         and this set does not permit null elements\n     * @throws IllegalArgumentException if this set itself has a\n     *         restricted range, and {@code fromElement} lies outside the\n     *         bounds of the range\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : " E first()",
    "returnType" : "E",
    "comment" : "\n     * Returns the first (lowest) element currently in this set.\n     *\n     * @return the first (lowest) element currently in this set\n     * @throws NoSuchElementException if this set is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " E last()",
    "returnType" : "E",
    "comment" : "\n     * Returns the last (highest) element currently in this set.\n     *\n     * @return the last (highest) element currently in this set\n     * @throws NoSuchElementException if this set is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Creates a {@code Spliterator} over the elements in this sorted set.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#DISTINCT},\n     * {@link Spliterator#SORTED} and {@link Spliterator#ORDERED}.\n     * Implementations should document the reporting of additional\n     * characteristic values.\n     *\n     * <p>The spliterator's comparator (see\n     * {@link java.util.Spliterator#getComparator()}) must be {@code null} if\n     * the sorted set's comparator (see {@link #comparator()}) is {@code null}.\n     * Otherwise, the spliterator's comparator must be the same as or impose the\n     * same total ordering as the sorted set's comparator.\n     *\n     * @implSpec\n     * The default implementation creates a\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em> spliterator\n     * from the sorted set's {@code Iterator}.  The spliterator inherits the\n     * <em>fail-fast</em> properties of the set's iterator.  The\n     * spliterator's comparator is the same as the sorted set's comparator.\n     * <p>\n     * The created {@code Spliterator} additionally reports\n     * {@link Spliterator#SIZED}.\n     *\n     * @implNote\n     * The created {@code Spliterator} additionally reports\n     * {@link Spliterator#SUBSIZED}.\n     *\n     * @return a {@code Spliterator} over the elements in this sorted set\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#getComparator()", "java.util.Spliterator#SIZED", "java.util.Spliterator#SORTED", "java.util.Spliterator#DISTINCT", "#comparator()", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : " void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * Throws {@code UnsupportedOperationException}. The encounter order induced by this\n     * set's comparison method determines the position of elements, so explicit positioning\n     * is not supported.\n     *\n     * @implSpec\n     * The implementation in this interface always throws {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException always\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * Throws {@code UnsupportedOperationException}. The encounter order induced by this\n     * set's comparison method determines the position of elements, so explicit positioning\n     * is not supported.\n     *\n     * @implSpec\n     * The implementation in this interface always throws {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException always\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " E getFirst()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * The implementation in this interface returns the result of calling the {@code first} method.\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " E getLast()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * The implementation in this interface returns the result of calling the {@code last} method.\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " E removeFirst()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * The implementation in this interface calls the {@code first} method to obtain the first\n     * element, then it calls {@code remove(element)} to remove the element, and then it returns\n     * the element.\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " E removeLast()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * The implementation in this interface calls the {@code last} method to obtain the last\n     * element, then it calls {@code remove(element)} to remove the element, and then it returns\n     * the element.\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " SortedSet<E> reversed()",
    "returnType" : "SortedSet<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * The implementation in this interface returns a reverse-ordered SortedSet\n     * view. The {@code reversed()} method of the view returns a reference\n     * to this SortedSet. Other operations on the view are implemented via calls to\n     * public methods on this SortedSet. The exact relationship between calls on the\n     * view and calls on this SortedSet is unspecified. However, order-sensitive\n     * operations generally delegate to the appropriate method with the opposite\n     * orientation. For example, calling {@code getFirst} on the view results in\n     * a call to {@code getLast} on this SortedSet.\n     *\n     * @return a reverse-ordered view of this collection, as a {@code SortedSet}\n     * @since 21\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Comparator<? super E> comparator()", " SortedSet<E> subSet(E fromElement, E toElement)", " SortedSet<E> headSet(E toElement)", " SortedSet<E> tailSet(E fromElement)", " E first()", " E last()", " Spliterator<E> spliterator()", " void addFirst(E e)", " void addLast(E e)", " E getFirst()", " E getLast()", " E removeFirst()", " E removeLast()", " SortedSet<E> reversed()" ],
  "variableNames" : [ ]
}