{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/utils/ParamsUtils.java",
  "packageName" : "android.hardware.camera2.utils",
  "className" : "ParamsUtils",
  "comment" : "\n * Various assortment of params utilities.\n ",
  "variables" : [ {
    "name" : "RATIONAL_DENOMINATOR",
    "type" : "int",
    "comment" : " 1million",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Rect createRect(Size size)",
    "returnType" : "Rect",
    "comment" : "\n     * Create a {@link Rect} from a {@code Size} by creating a new rectangle with\n     * left, top = {@code (0, 0)} and right, bottom = {@code (width, height)}\n     *\n     * @param size a non-{@code null} size\n     *\n     * @return a {@code non-null} rectangle\n     *\n     * @throws NullPointerException if {@code size} was {@code null}\n     ",
    "links" : [ "Rect" ]
  }, {
    "name" : "public static Rect createRect(RectF rect)",
    "returnType" : "Rect",
    "comment" : "\n     * Create a {@link Rect} from a {@code RectF} by creating a new rectangle with\n     * each corner (left, top, right, bottom) rounded towards the nearest integer bounding box.\n     *\n     * <p>In particular (left, top) is floored, and (right, bottom) is ceiled.</p>\n     *\n     * @param size a non-{@code null} rect\n     *\n     * @return a {@code non-null} rectangle\n     *\n     * @throws NullPointerException if {@code rect} was {@code null}\n     ",
    "links" : [ "Rect" ]
  }, {
    "name" : "public static Rect mapRect(Matrix transform, Rect rect)",
    "returnType" : "Rect",
    "comment" : "\n     * Map the rectangle in {@code rect} with the transform in {@code transform} into\n     * a new rectangle, with each corner (left, top, right, bottom) rounded towards the nearest\n     * integer bounding box.\n     *\n     * <p>None of the arguments are mutated.</p>\n     *\n     * @param transform a non-{@code null} transformation matrix\n     * @param rect a non-{@code null} rectangle\n     * @return a new rectangle that was transformed by {@code transform}\n     *\n     * @throws NullPointerException if any of the args were {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Size createSize(Rect rect)",
    "returnType" : "Size",
    "comment" : "\n     * Create a {@link Size} from a {@code Rect} by creating a new size whose width\n     * and height are the same as the rectangle's width and heights.\n     *\n     * @param rect a non-{@code null} rectangle\n     *\n     * @return a {@code non-null} size\n     *\n     * @throws NullPointerException if {@code rect} was {@code null}\n     ",
    "links" : [ "Size" ]
  }, {
    "name" : "public static Rational createRational(float value)",
    "returnType" : "Rational",
    "comment" : "\n     * Create a {@link Rational} value by approximating the float value as a rational.\n     *\n     * <p>Floating points too large to be represented as an integer will be converted to\n     * to {@link Integer#MAX_VALUE}; floating points too small to be represented as an integer\n     * will be converted to {@link Integer#MIN_VALUE}.</p>\n     *\n     * @param value a floating point value\n     * @return the rational representation of the float\n     ",
    "links" : [ "Rational", "Integer#MAX_VALUE", "Integer#MIN_VALUE" ]
  }, {
    "name" : "public static void convertRectF(Rect source, RectF destination)",
    "returnType" : "void",
    "comment" : "\n     * Convert an integral rectangle ({@code source}) to a floating point rectangle\n     * ({@code destination}) in-place.\n     *\n     * @param source the originating integer rectangle will be read from here\n     * @param destination the resulting floating point rectangle will be written out to here\n     *\n     * @throws NullPointerException if {@code rect} was {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T getOrDefault(CaptureRequest r, CaptureRequest.Key<T> key, T defaultValue)",
    "returnType" : "T",
    "comment" : "\n     * Return the value set by the key, or the {@code defaultValue} if no value was set.\n     *\n     * @throws NullPointerException if any of the args were {@code null}\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "RATIONAL_DENOMINATOR" ],
  "methodNames" : [ "public static Rect createRect(Size size)", "public static Rect createRect(RectF rect)", "public static Rect mapRect(Matrix transform, Rect rect)", "public static Size createSize(Rect rect)", "public static Rational createRational(float value)", "public static void convertRectF(Rect source, RectF destination)", "public static T getOrDefault(CaptureRequest r, CaptureRequest.Key<T> key, T defaultValue)" ]
}