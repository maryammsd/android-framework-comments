{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkFactory.java",
  "packageName" : "android.net",
  "className" : "NetworkFactory",
  "comment" : "\n * A NetworkFactory is an entity that creates NetworkAgent objects.\n * The bearers register with ConnectivityService using {@link #register} and\n * their factory will start receiving scored NetworkRequests.  NetworkRequests\n * can be filtered 3 ways: by NetworkCapabilities, by score and more complexly by\n * overridden function.  All of these can be dynamic - changing NetworkCapabilities\n * or score forces re-evaluation of all current requests.\n *\n * If any requests pass the filter some overrideable functions will be called.\n * If the bearer only cares about very simple start/stopNetwork callbacks, those\n * functions can be overridden.  If the bearer needs more interaction, it can\n * override addNetworkRequest and removeNetworkRequest which will give it each\n * request that passes their current filters.\n *\n * This class is mostly a shim which delegates to one of two implementations depending\n * on the SDK level of the device it's running on.\n *\n * @hide\n *",
  "links" : [ "#register" ],
  "variables" : [ {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImpl",
    "type" : "NetworkFactoryShim",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CMD_REQUEST_NETWORK",
    "type" : "int",
    "comment" : " the tests and remove them and the associated code.",
    "links" : [ ]
  }, {
    "name" : "CMD_CANCEL_REQUEST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefCount",
    "type" : "int",
    "comment" : " Refcount for simple mode requests",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Message obtainMessage(final int what, final int arg1, final int arg2, @Nullable final Object obj)",
    "returnType" : "Message",
    "comment" : " Like Handler#obtainMessage ",
    "links" : [ ]
  }, {
    "name" : "public final Looper getLooper()",
    "returnType" : "Looper",
    "comment" : " Called by BluetoothNetworkFactory",
    "links" : [ ]
  }, {
    "name" : "public void register()",
    "returnType" : "void",
    "comment" : " Registers this NetworkFactory with the system. May only be called once per factory. ",
    "links" : [ ]
  }, {
    "name" : "public void registerIgnoringScore()",
    "returnType" : "void",
    "comment" : "\n     * Registers this NetworkFactory with the system ignoring the score filter. This will let\n     * the factory always see all network requests matching its capabilities filter.\n     * May only be called once per factory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void terminate()",
    "returnType" : "void",
    "comment" : " Unregisters this NetworkFactory. After this call, the object can no longer be used. ",
    "links" : [ ]
  }, {
    "name" : "protected final void reevaluateAllRequests()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean acceptRequest(@NonNull final NetworkRequest request)",
    "returnType" : "boolean",
    "comment" : "\n     * Overridable function to provide complex filtering.\n     * Called for every request every time a new NetworkRequest is seen\n     * and whenever the filterScore or filterNetworkCapabilities change.\n     *\n     * acceptRequest can be overridden to provide complex filter behavior\n     * for the incoming requests\n     *\n     * For output, this class will call {@link #needNetworkFor} and\n     * {@link #releaseNetworkFor} for every request that passes the filters.\n     * If you don't need to see every request, you can leave the base\n     * implementations of those two functions and instead override\n     * {@link #startNetwork} and {@link #stopNetwork}.\n     *\n     * If you want to see every score fluctuation on every request, set\n     * your score filter to a very high number and watch {@link #needNetworkFor}.\n     *\n     * @return {@code true} to accept the request.\n     ",
    "links" : [ "#startNetwork", "#releaseNetworkFor", "#needNetworkFor", "#stopNetwork" ]
  }, {
    "name" : "protected void releaseRequestAsUnfulfillableByAnyFactory(NetworkRequest r)",
    "returnType" : "void",
    "comment" : "\n     * Can be called by a factory to release a request as unfulfillable: the request will be\n     * removed, and the caller will get a\n     * {@link ConnectivityManager.NetworkCallback#onUnavailable()} callback after this function\n     * returns.\n     *\n     * Note: this should only be called by factory which KNOWS that it is the ONLY factory which\n     * is able to fulfill this request!\n     ",
    "links" : [ "ConnectivityManager.NetworkCallback#onUnavailable()" ]
  }, {
    "name" : "protected void startNetwork()",
    "returnType" : "void",
    "comment" : " override to do simple mode (request independent)",
    "links" : [ ]
  }, {
    "name" : "protected void stopNetwork()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void needNetworkFor(@NonNull final NetworkRequest networkRequest)",
    "returnType" : "void",
    "comment" : " override to do fancier stuff",
    "links" : [ ]
  }, {
    "name" : "protected void releaseNetworkFor(@NonNull final NetworkRequest networkRequest)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setScoreFilter(final int score)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated this method was never part of the API (system or public) and is only added\n     *   for migration of existing clients.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScoreFilter(@NonNull final NetworkScore score)",
    "returnType" : "void",
    "comment" : "\n     * Set a score filter for this factory.\n     *\n     * This should include the transports the factory knows its networks will have, and\n     * an optimistic view of the attributes it may have. This does not commit the factory\n     * to being able to bring up such a networkÂ ; it only lets it avoid hearing about\n     * requests that it has no chance of fulfilling.\n     *\n     * @param score the filter\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCapabilityFilter(NetworkCapabilities netCap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getRequestCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSerialNumber()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NetworkProvider getProvider()",
    "returnType" : "NetworkProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void log(String s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Message obtainMessage(final int what, final int arg1, final int arg2, @Nullable final Object obj)", "public final Looper getLooper()", "public void register()", "public void registerIgnoringScore()", "public void terminate()", "protected final void reevaluateAllRequests()", "public boolean acceptRequest(@NonNull final NetworkRequest request)", "protected void releaseRequestAsUnfulfillableByAnyFactory(NetworkRequest r)", "protected void startNetwork()", "protected void stopNetwork()", "protected void needNetworkFor(@NonNull final NetworkRequest networkRequest)", "protected void releaseNetworkFor(@NonNull final NetworkRequest networkRequest)", "public void setScoreFilter(final int score)", "public void setScoreFilter(@NonNull final NetworkScore score)", "public void setCapabilityFilter(NetworkCapabilities netCap)", "protected int getRequestCount()", "public int getSerialNumber()", "public NetworkProvider getProvider()", "protected void log(String s)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "public String toString()" ],
  "variableNames" : [ "DBG", "VDBG", "mImpl", "LOG_TAG", "CMD_REQUEST_NETWORK", "CMD_CANCEL_REQUEST", "mRefCount" ]
}