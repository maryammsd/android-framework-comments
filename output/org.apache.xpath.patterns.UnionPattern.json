{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/patterns/UnionPattern.java",
  "packageName" : "org.apache.xpath.patterns",
  "className" : "UnionPattern",
  "comment" : "\n * This class represents a union pattern, which can have multiple individual \n * StepPattern patterns.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_patterns",
    "type" : "StepPattern[]",
    "comment" : " Array of the contained step patterns to be tested.\n   *  @serial  ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * No arguments to process, so this does nothing.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean canTraverseOutsideSubtree()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this expression or it's subexpressions can traverse outside \n   * the current subtree.\n   * \n   * @return true if traversal outside the context node's subtree can occur.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPatterns(StepPattern[] patterns)",
    "returnType" : "void",
    "comment" : "\n   * Set the contained step patterns to be tested. \n   *\n   *\n   * @param patterns the contained step patterns to be tested. \n   ",
    "links" : [ ]
  }, {
    "name" : "public StepPattern[] getPatterns()",
    "returnType" : "StepPattern[]",
    "comment" : "\n   * Get the contained step patterns to be tested. \n   *\n   *\n   * @return an array of the contained step patterns to be tested. \n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Test a node to see if it matches any of the patterns in the union.\n   *\n   * @param xctxt XPath runtime context.\n   *\n   * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.patterns.NodeTest#SCORE_NONE", "org.apache.xpath.patterns.NodeTest#SCORE_QNAME", "org.apache.xpath.patterns.NodeTest#SCORE_OTHER", "org.apache.xpath.patterns.NodeTest#SCORE_NODETEST", "org.apache.xpath.patterns.NodeTest#SCORE_NSWILD" ]
  }, {
    "name" : "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * @see org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n   * @see Expression#deepEquals(Expression)\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public boolean canTraverseOutsideSubtree()", "public void setPatterns(StepPattern[] patterns)", "public StepPattern[] getPatterns()", "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)", "public boolean deepEquals(Expression expr)" ],
  "variableNames" : [ "serialVersionUID", "m_patterns" ]
}