{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Number.java",
  "packageName" : "java.lang",
  "className" : "Number",
  "comment" : "\n * The abstract class {@code Number} is the superclass of platform\n * classes representing numeric values that are convertible to the\n * primitive types {@code byte}, {@code double}, {@code float}, {@code\n * int}, {@code long}, and {@code short}.\n *\n * The specific semantics of the conversion from the numeric value of\n * a particular {@code Number} implementation to a given primitive\n * type is defined by the {@code Number} implementation in question.\n *\n * For platform classes, the conversion is often analogous to a\n * narrowing primitive conversion or a widening primitive conversion\n * as defined in <cite>The Java Language Specification</cite>\n * for converting between primitive types.  Therefore, conversions may\n * lose information about the overall magnitude of a numeric value, may\n * lose precision, and may even return a result of a different sign\n * than the input.\n *\n * See the documentation of a given {@code Number} implementation for\n * conversion details.\n *\n * @author      Lee Boynton\n * @author      Arthur van Hoff\n * @jls 5.1.2 Widening Primitive Conversion\n * @jls 5.1.3 Narrowing Primitive Conversion\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.0.2 for interoperability ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of the specified number as an {@code int}.\n     *\n     * @return  the numeric value represented by this object after conversion\n     *          to type {@code int}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the specified number as a {@code long}.\n     *\n     * @return  the numeric value represented by this object after conversion\n     *          to type {@code long}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the value of the specified number as a {@code float}.\n     *\n     * @return  the numeric value represented by this object after conversion\n     *          to type {@code float}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the value of the specified number as a {@code double}.\n     *\n     * @return  the numeric value represented by this object after conversion\n     *          to type {@code double}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte byteValue()",
    "returnType" : "byte",
    "comment" : "\n     * Returns the value of the specified number as a {@code byte}.\n     *\n     * @implSpec\n     * The default implementation returns the result of {@link #intValue} cast\n     * to a {@code byte}.\n     *\n     * @return  the numeric value represented by this object after conversion\n     *          to type {@code byte}.\n     * @since   1.1\n     ",
    "links" : [ "#intValue" ]
  }, {
    "name" : "public short shortValue()",
    "returnType" : "short",
    "comment" : "\n     * Returns the value of the specified number as a {@code short}.\n     *\n     * @implSpec\n     * The default implementation returns the result of {@link #intValue} cast\n     * to a {@code short}.\n     *\n     * @return  the numeric value represented by this object after conversion\n     *          to type {@code short}.\n     * @since   1.1\n     ",
    "links" : [ "#intValue" ]
  } ],
  "methodNames" : [ "public abstract int intValue()", "public abstract long longValue()", "public abstract float floatValue()", "public abstract double doubleValue()", "public byte byteValue()", "public short shortValue()" ],
  "variableNames" : [ "serialVersionUID" ]
}