{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/MulticastSocket.java",
  "packageName" : "java.net",
  "className" : "MulticastSocket",
  "comment" : "\n * The multicast datagram socket class is useful for sending\n * and receiving IP multicast packets.  A MulticastSocket is\n * a (UDP) DatagramSocket, with additional capabilities for\n * joining \"groups\" of other multicast hosts on the internet.\n * <P>\n * A multicast group is specified by a class D IP address\n * and by a standard UDP port number. Class D IP addresses\n * are in the range <CODE>224.0.0.0</CODE> to <CODE>239.255.255.255</CODE>,\n * inclusive. The address 224.0.0.0 is reserved and should not be used.\n * <P>\n * One would join a multicast group by first creating a MulticastSocket\n * with the desired port, then invoking the\n * <CODE>joinGroup(InetAddress groupAddr)</CODE>\n * method:\n * <PRE>\n * // join a Multicast group and send the group salutations\n * ...\n * String msg = \"Hello\";\n * InetAddress group = InetAddress.getByName(\"228.5.6.7\");\n * MulticastSocket s = new MulticastSocket(6789);\n * s.joinGroup(group);\n * byte[] bytes = msg.getBytes(StandardCharsets.UTF_8);\n * DatagramPacket hi = new DatagramPacket(bytes, bytes.length,\n *                             group, 6789);\n * s.send(hi);\n * // get their responses!\n * byte[] buf = new byte[1000];\n * DatagramPacket recv = new DatagramPacket(buf, buf.length);\n * s.receive(recv);\n * ...\n * // OK, I'm done talking - leave the group...\n * s.leaveGroup(group);\n * </PRE>\n *\n * When one sends a message to a multicast group, <B>all</B> subscribing\n * recipients to that host and port receive the message (within the\n * time-to-live range of the packet, see below).  The socket needn't\n * be a member of the multicast group to send messages to it.\n * <P>\n * When a socket subscribes to a multicast group/port, it receives\n * datagrams sent by other hosts to the group/port, as do all other\n * members of the group and port.  A socket relinquishes membership\n * in a group by the leaveGroup(InetAddress addr) method.  <B>\n * Multiple MulticastSocket's</B> may subscribe to a multicast group\n * and port concurrently, and they will all receive group datagrams.\n * <P>\n * Currently applets are not allowed to use multicast sockets.\n *\n * @author Pavani Diwanji\n * @since  1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "interfaceSet",
    "type" : "boolean",
    "comment" : "\n     * Used on some platforms to record if an outgoing interface\n     * has been set for this socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "ttlLock",
    "type" : "Object",
    "comment" : "\n     * The lock on the socket's TTL. This is for set/getTTL and\n     * send(packet,ttl).\n     ",
    "links" : [ ]
  }, {
    "name" : "infLock",
    "type" : "Object",
    "comment" : "\n     * The lock on the socket's interface - used by setInterface\n     * and getInterface\n     ",
    "links" : [ ]
  }, {
    "name" : "infAddress",
    "type" : "InetAddress",
    "comment" : "\n     * The \"last\" interface set by setInterface on this MulticastSocket\n     ",
    "links" : [ ]
  }, {
    "name" : "options",
    "type" : "Set<SocketOption<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "optionsSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTTL(byte ttl) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Set the default time-to-live for multicast packets sent out\n     * on this {@code MulticastSocket} in order to control the\n     * scope of the multicasts.\n     *\n     * <p>The ttl is an <b>unsigned</b> 8-bit quantity, and so <B>must</B> be\n     * in the range {@code 0 <= ttl <= 0xFF }.\n     *\n     * @param ttl the time-to-live\n     * @exception IOException if an I/O exception occurs\n     * while setting the default time-to-live value\n     * @deprecated use the setTimeToLive method instead, which uses\n     * <b>int</b> instead of <b>byte</b> as the type for ttl.\n     * @see #getTTL()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimeToLive(int ttl) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Set the default time-to-live for multicast packets sent out\n     * on this {@code MulticastSocket} in order to control the\n     * scope of the multicasts.\n     *\n     * <P> The ttl <B>must</B> be in the range {@code  0 <= ttl <=\n     * 255} or an {@code IllegalArgumentException} will be thrown.\n     * Multicast packets sent with a TTL of {@code 0} are not transmitted\n     * on the network but may be delivered locally.\n     *\n     * @param  ttl\n     *         the time-to-live\n     *\n     * @throws  IOException\n     *          if an I/O exception occurs while setting the\n     *          default time-to-live value\n     *\n     * @see #getTimeToLive()\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getTTL() throws IOException",
    "returnType" : "byte",
    "comment" : "\n     * Get the default time-to-live for multicast packets sent out on\n     * the socket.\n     *\n     * @exception IOException if an I/O exception occurs\n     * while getting the default time-to-live value\n     * @return the default time-to-live value\n     * @deprecated use the getTimeToLive method instead, which returns\n     * an <b>int</b> instead of a <b>byte</b>.\n     * @see #setTTL(byte)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTimeToLive() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Get the default time-to-live for multicast packets sent out on\n     * the socket.\n     * @exception IOException if an I/O exception occurs while\n     * getting the default time-to-live value\n     * @return the default time-to-live value\n     * @see #setTimeToLive(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void joinGroup(InetAddress mcastaddr) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Joins a multicast group. Its behavior may be affected by\n     * {@code setInterface} or {@code setNetworkInterface}.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkMulticast} method\n     * with the {@code mcastaddr} argument\n     * as its argument.\n     *\n     * @param mcastaddr is the multicast address to join\n     *\n     * @exception IOException if there is an error joining, or when the address\n     *            is not a multicast address, or the platform does not support\n     *            multicasting\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkMulticast} method doesn't allow the join.\n     *\n     * @see SecurityManager#checkMulticast(InetAddress)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void leaveGroup(InetAddress mcastaddr) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Leave a multicast group. Its behavior may be affected by\n     * {@code setInterface} or {@code setNetworkInterface}.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkMulticast} method\n     * with the {@code mcastaddr} argument\n     * as its argument.\n     *\n     * @param mcastaddr is the multicast address to leave\n     * @exception IOException if there is an error leaving\n     * or when the address is not a multicast address.\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkMulticast} method doesn't allow the operation.\n     *\n     * @see SecurityManager#checkMulticast(InetAddress)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Joins the specified multicast group at the specified interface.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkMulticast} method\n     * with the {@code mcastaddr} argument\n     * as its argument.\n     *\n     * @param mcastaddr is the multicast address to join\n     * @param netIf specifies the local interface to receive multicast\n     *        datagram packets, or <i>null</i> to defer to the interface set by\n     *       {@link MulticastSocket#setInterface(InetAddress)} or\n     *       {@link MulticastSocket#setNetworkInterface(NetworkInterface)}\n     *\n     * @exception IOException if there is an error joining, or when the address\n     *            is not a multicast address, or the platform does not support\n     *            multicasting\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkMulticast} method doesn't allow the join.\n     * @throws  IllegalArgumentException if mcastaddr is null or is a\n     *          SocketAddress subclass not supported by this socket\n     *\n     * @see SecurityManager#checkMulticast(InetAddress)\n     * @since 1.4\n     ",
    "links" : [ "java.net.MulticastSocket#setNetworkInterface(NetworkInterface)", "java.net.MulticastSocket#setInterface(InetAddress)" ]
  }, {
    "name" : "public void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Leave a multicast group on a specified local interface.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkMulticast} method\n     * with the {@code mcastaddr} argument\n     * as its argument.\n     *\n     * @param mcastaddr is the multicast address to leave\n     * @param netIf specifies the local interface or <i>null</i> to defer\n     *             to the interface set by\n     *             {@link MulticastSocket#setInterface(InetAddress)} or\n     *             {@link MulticastSocket#setNetworkInterface(NetworkInterface)}\n     * @exception IOException if there is an error leaving\n     * or when the address is not a multicast address.\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkMulticast} method doesn't allow the operation.\n     * @throws  IllegalArgumentException if mcastaddr is null or is a\n     *          SocketAddress subclass not supported by this socket\n     *\n     * @see SecurityManager#checkMulticast(InetAddress)\n     * @since 1.4\n     ",
    "links" : [ "java.net.MulticastSocket#setNetworkInterface(NetworkInterface)", "java.net.MulticastSocket#setInterface(InetAddress)" ]
  }, {
    "name" : "public void setInterface(InetAddress inf) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Set the multicast network interface used by methods\n     * whose behavior would be affected by the value of the\n     * network interface. Useful for multihomed hosts.\n     * @param inf the InetAddress\n     * @exception SocketException if there is an error in\n     * the underlying protocol, such as a TCP error.\n     * @see #getInterface()\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getInterface() throws SocketException",
    "returnType" : "InetAddress",
    "comment" : "\n     * Retrieve the address of the network interface used for\n     * multicast packets.\n     *\n     * @return An {@code InetAddress} representing\n     *  the address of the network interface used for\n     *  multicast packets.\n     *\n     * @exception SocketException if there is an error in\n     * the underlying protocol, such as a TCP error.\n     *\n     * @see #setInterface(java.net.InetAddress)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNetworkInterface(NetworkInterface netIf) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Specify the network interface for outgoing multicast datagrams\n     * sent on this socket.\n     *\n     * @param netIf the interface\n     * @exception SocketException if there is an error in\n     * the underlying protocol, such as a TCP error.\n     * @see #getNetworkInterface()\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkInterface getNetworkInterface() throws SocketException",
    "returnType" : "NetworkInterface",
    "comment" : "\n     * Get the multicast network interface set.\n     *\n     * @exception SocketException if there is an error in\n     * the underlying protocol, such as a TCP error.\n     * @return the multicast {@code NetworkInterface} currently\n     * set or {@code null} when no interface is set.\n     * @see #setNetworkInterface(NetworkInterface)\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLoopbackMode(boolean disable) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Disable/Enable local loopback of multicast datagrams\n     * The option is used by the platform's networking code as a hint\n     * for setting whether multicast data will be looped back to\n     * the local socket.\n     *\n     * <p>Because this option is a hint, applications that want to\n     * verify what loopback mode is set to should call\n     * {@link #getLoopbackMode()}\n     * @param disable {@code true} to disable the LoopbackMode\n     * @throws SocketException if an error occurs while setting the value\n     * @since 1.4\n     * @see #getLoopbackMode\n     ",
    "links" : [ "#getLoopbackMode()" ]
  }, {
    "name" : "public boolean getLoopbackMode() throws SocketException",
    "returnType" : "boolean",
    "comment" : "\n     * Get the setting for local loopback of multicast datagrams.\n     *\n     * @throws SocketException  if an error occurs while getting the value\n     * @return true if the LoopbackMode has been disabled\n     * @since 1.4\n     * @see #setLoopbackMode\n     ",
    "links" : [ ]
  }, {
    "name" : "public void send(DatagramPacket p, byte ttl) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sends a datagram packet to the destination, with a TTL (time-\n     * to-live) other than the default for the socket.  This method\n     * need only be used in instances where a particular TTL is desired;\n     * otherwise it is preferable to set a TTL once on the socket, and\n     * use that default TTL for all packets.  This method does <B>not\n     * </B> alter the default TTL for the socket. Its behavior may be\n     * affected by {@code setInterface}.\n     *\n     * <p>If there is a security manager, this method first performs some\n     * security checks. First, if {@code p.getAddress().isMulticastAddress()}\n     * is true, this method calls the\n     * security manager's {@code checkMulticast} method\n     * with {@code p.getAddress()} and {@code ttl} as its arguments.\n     * If the evaluation of that expression is false,\n     * this method instead calls the security manager's\n     * {@code checkConnect} method with arguments\n     * {@code p.getAddress().getHostAddress()} and\n     * {@code p.getPort()}. Each call to a security manager method\n     * could result in a SecurityException if the operation is not allowed.\n     *\n     * @param p is the packet to be sent. The packet should contain\n     * the destination multicast ip address and the data to be sent.\n     * One does not need to be the member of the group to send\n     * packets to a destination multicast address.\n     * @param ttl optional time to live for multicast packet.\n     * default ttl is 1.\n     *\n     * @exception IOException is raised if an error occurs i.e\n     * error while setting ttl.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkMulticast} or {@code checkConnect}\n     *             method doesn't allow the send.\n     *\n     * @deprecated Use the following code or its equivalent instead:\n     *  ......\n     *  int ttl = mcastSocket.getTimeToLive();\n     *  mcastSocket.setTimeToLive(newttl);\n     *  mcastSocket.send(p);\n     *  mcastSocket.setTimeToLive(ttl);\n     *  ......\n     *\n     * @see DatagramSocket#send\n     * @see DatagramSocket#receive\n     * @see SecurityManager#checkMulticast(java.net.InetAddress, byte)\n     * @see SecurityManager#checkConnect\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<SocketOption<?>> supportedOptions()",
    "returnType" : "Set<SocketOption<?>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setTTL(byte ttl) throws IOException", "public void setTimeToLive(int ttl) throws IOException", "public byte getTTL() throws IOException", "public int getTimeToLive() throws IOException", "public void joinGroup(InetAddress mcastaddr) throws IOException", "public void leaveGroup(InetAddress mcastaddr) throws IOException", "public void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException", "public void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException", "public void setInterface(InetAddress inf) throws SocketException", "public InetAddress getInterface() throws SocketException", "public void setNetworkInterface(NetworkInterface netIf) throws SocketException", "public NetworkInterface getNetworkInterface() throws SocketException", "public void setLoopbackMode(boolean disable) throws SocketException", "public boolean getLoopbackMode() throws SocketException", "public void send(DatagramPacket p, byte ttl) throws IOException", "public Set<SocketOption<?>> supportedOptions()" ],
  "variableNames" : [ "interfaceSet", "ttlLock", "infLock", "infAddress", "options", "optionsSet" ]
}