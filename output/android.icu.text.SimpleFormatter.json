{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/SimpleFormatter.java",
  "packageName" : "android.icu.text",
  "className" : "SimpleFormatter",
  "comment" : "\n * Formats simple patterns like \"{1} was born in {0}\".\n * Minimal subset of MessageFormat; fast, simple, minimal dependencies.\n * Supports only numbered arguments with no type nor style parameters,\n * and formats only string values.\n * Quoting via ASCII apostrophe compatible with ICU MessageFormat default behavior.\n *\n * <p>Factory methods throw exceptions for syntax errors\n * and for too few or too many arguments/placeholders.\n *\n * <p>SimpleFormatter objects are immutable and can be safely cached like strings.\n *\n * <p>Example:\n * <pre>\n * SimpleFormatter fmt = SimpleFormatter.compile(\"{1} '{born}' in {0}\");\n *\n * // Output: \"paul {born} in england\"\n * System.out.println(fmt.format(\"england\", \"paul\"));\n * </pre>\n *\n * @see MessageFormat\n * @see MessagePattern.ApostropheMode\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "compiledPattern",
    "type" : "String",
    "comment" : "\n     * Binary representation of the compiled pattern.\n     * @see SimpleFormatterImpl\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SimpleFormatter compile(CharSequence pattern)",
    "returnType" : "SimpleFormatter",
    "comment" : "\n     * Creates a formatter from the pattern string.\n     *\n     * @param pattern The pattern string.\n     * @return The new SimpleFormatter object.\n     * @throws IllegalArgumentException for bad argument syntax.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SimpleFormatter compileMinMaxArguments(CharSequence pattern, int min, int max)",
    "returnType" : "SimpleFormatter",
    "comment" : "\n     * Creates a formatter from the pattern string.\n     * The number of arguments checked against the given limits is the\n     * highest argument number plus one, not the number of occurrences of arguments.\n     *\n     * @param pattern The pattern string.\n     * @param min The pattern must have at least this many arguments.\n     * @param max The pattern must have at most this many arguments.\n     * @return The new SimpleFormatter object.\n     * @throws IllegalArgumentException for bad argument syntax and too few or too many arguments.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getArgumentLimit()",
    "returnType" : "int",
    "comment" : "\n     * @return The max argument number + 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String format(CharSequence... values)",
    "returnType" : "String",
    "comment" : "\n     * Formats the given values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder formatAndAppend(StringBuilder appendTo, int[] offsets, CharSequence... values)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Formats the given values, appending to the appendTo builder.\n     *\n     * @param appendTo Gets the formatted pattern and values appended.\n     * @param offsets offsets[i] receives the offset of where\n     *                values[i] replaced pattern argument {i}.\n     *                Can be null, or can be shorter or longer than values.\n     *                If there is no {i} in the pattern, then offsets[i] is set to -1.\n     * @param values The argument values.\n     *               An argument value must not be the same object as appendTo.\n     *               values.length must be at least getArgumentLimit().\n     *               Can be null if getArgumentLimit()==0.\n     * @return appendTo\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder formatAndReplace(StringBuilder result, int[] offsets, CharSequence... values)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Formats the given values, replacing the contents of the result builder.\n     * May optimize by actually appending to the result if it is the same object\n     * as the value corresponding to the initial argument in the pattern.\n     *\n     * @param result Gets its contents replaced by the formatted pattern and values.\n     * @param offsets offsets[i] receives the offset of where\n     *                values[i] replaced pattern argument {i}.\n     *                Can be null, or can be shorter or longer than values.\n     *                If there is no {i} in the pattern, then offsets[i] is set to -1.\n     * @param values The argument values.\n     *               An argument value may be the same object as result.\n     *               values.length must be at least getArgumentLimit().\n     * @return result\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string similar to the original pattern, only for debugging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTextWithNoArguments()",
    "returnType" : "String",
    "comment" : "\n     * Returns the pattern text with none of the arguments.\n     * Like formatting with all-empty string values.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static SimpleFormatter compile(CharSequence pattern)", "public static SimpleFormatter compileMinMaxArguments(CharSequence pattern, int min, int max)", "public int getArgumentLimit()", "public String format(CharSequence... values)", "public StringBuilder formatAndAppend(StringBuilder appendTo, int[] offsets, CharSequence... values)", "public StringBuilder formatAndReplace(StringBuilder result, int[] offsets, CharSequence... values)", "public String toString()", "public String getTextWithNoArguments()" ],
  "variableNames" : [ "compiledPattern" ]
}