{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/WallpaperManager.java",
  "packageName" : "android.app",
  "className" : "Globals",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mService",
    "type" : "IWallpaperManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorCallbackRegistered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorListeners",
    "type" : "ArrayList<Pair<OnColorsChangedListener, Handler>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedWallpaper",
    "type" : "CachedWallpaper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultWallpaper",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMainLooperHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalColorCallbackAreas",
    "type" : "ArrayMap<LocalWallpaperColorConsumer, ArraySet<RectF>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalColorCallback",
    "type" : "ILocalWallpaperColorConsumer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onWallpaperChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnColorsChangedListener(@NonNull OnColorsChangedListener callback, @Nullable Handler handler, int userId, int displayId)",
    "returnType" : "void",
    "comment" : "\n         * Start listening to wallpaper color events.\n         * Will be called whenever someone changes their wallpaper or if a live wallpaper\n         * changes its colors.\n         * @param callback Listener\n         * @param handler Thread to call it from. Main thread if null.\n         * @param userId Owner of the wallpaper or UserHandle.USER_ALL\n         * @param displayId Caller comes from which display\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addOnColorsChangedListener(@NonNull LocalWallpaperColorConsumer callback, @NonNull List<RectF> regions, int which, int userId, int displayId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnColorsChangedListener(@NonNull LocalWallpaperColorConsumer callback, int which, int userId, int displayId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnColorsChangedListener(@NonNull OnColorsChangedListener callback, int userId, int displayId)",
    "returnType" : "void",
    "comment" : "\n         * Stop listening to wallpaper color events.\n         *\n         * @param callback listener\n         * @param userId Owner of the wallpaper or UserHandle.USER_ALL\n         * @param displayId Which display is interested\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onWallpaperColorsChanged(WallpaperColors colors, int which, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " WallpaperColors getWallpaperColors(int which, int userId, int displayId)",
    "returnType" : "WallpaperColors",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bitmap peekWallpaperBitmap(Context context, boolean returnDefault, @SetWallpaperFlags int which, ColorManagementProxy cmProxy)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bitmap peekWallpaperBitmap(Context context, boolean returnDefault, @SetWallpaperFlags int which, int userId, boolean hardware, ColorManagementProxy cmProxy)",
    "returnType" : "Bitmap",
    "comment" : "\n         * Retrieves the current wallpaper Bitmap, caching the result. If this fails and\n         * `returnDefault` is set, returns the Bitmap for the default wallpaper; otherwise returns\n         * null.\n         *\n         * More sophisticated caching might a) store and compare the wallpaper ID so that\n         * consecutive calls for FLAG_SYSTEM and FLAG_LOCK could return the cached wallpaper if\n         * no lock screen wallpaper is set, or b) separately cache home and lock screen wallpaper.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Rect peekWallpaperDimensions(Context context, boolean returnDefault, @SetWallpaperFlags int which, int userId)",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void forgetLoadedWallpaper()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bitmap getCurrentWallpaperLocked(Context context, @SetWallpaperFlags int which, int userId, boolean hardware, ColorManagementProxy cmProxy)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bitmap getDefaultWallpaper(Context context, @SetWallpaperFlags int which)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isStaticWallpaper(@SetWallpaperFlags int which)",
    "returnType" : "boolean",
    "comment" : "\n         * Return true if there is a static wallpaper on the specified screen.\n         * With {@code which=}{@link #FLAG_LOCK}, always return false if the lockscreen doesn't run\n         * its own wallpaper engine.\n         ",
    "links" : [ "#FLAG_LOCK" ]
  } ],
  "methodNames" : [ "public void onWallpaperChanged()", "public void addOnColorsChangedListener(@NonNull OnColorsChangedListener callback, @Nullable Handler handler, int userId, int displayId)", "public void addOnColorsChangedListener(@NonNull LocalWallpaperColorConsumer callback, @NonNull List<RectF> regions, int which, int userId, int displayId)", "public void removeOnColorsChangedListener(@NonNull LocalWallpaperColorConsumer callback, int which, int userId, int displayId)", "public void removeOnColorsChangedListener(@NonNull OnColorsChangedListener callback, int userId, int displayId)", "public void onWallpaperColorsChanged(WallpaperColors colors, int which, int userId)", " WallpaperColors getWallpaperColors(int which, int userId, int displayId)", "public Bitmap peekWallpaperBitmap(Context context, boolean returnDefault, @SetWallpaperFlags int which, ColorManagementProxy cmProxy)", "public Bitmap peekWallpaperBitmap(Context context, boolean returnDefault, @SetWallpaperFlags int which, int userId, boolean hardware, ColorManagementProxy cmProxy)", "public Rect peekWallpaperDimensions(Context context, boolean returnDefault, @SetWallpaperFlags int which, int userId)", " void forgetLoadedWallpaper()", "private Bitmap getCurrentWallpaperLocked(Context context, @SetWallpaperFlags int which, int userId, boolean hardware, ColorManagementProxy cmProxy)", "private Bitmap getDefaultWallpaper(Context context, @SetWallpaperFlags int which)", "private boolean isStaticWallpaper(@SetWallpaperFlags int which)" ],
  "variableNames" : [ "mService", "mColorCallbackRegistered", "mColorListeners", "mCachedWallpaper", "mDefaultWallpaper", "mMainLooperHandler", "mLocalColorCallbackAreas", "mLocalColorCallback" ]
}