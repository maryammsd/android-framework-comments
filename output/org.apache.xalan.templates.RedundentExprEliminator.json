{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/RedundentExprEliminator.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "RedundentExprEliminator",
  "comment" : "\n * This class eleminates redundent XPaths from a given subtree, \n * and also collects all absolute paths within the subtree.  First \n * it must be called as a visitor to the subtree, and then \n * eleminateRedundent must be called.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_paths",
    "type" : "Vector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_absPaths",
    "type" : "Vector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_isSameContext",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_absPathChecker",
    "type" : "AbsPathChecker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_uniquePseudoVarID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PSUEDOVARNAMESPACE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIAGNOSE_NUM_PATHS_REDUCED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIAGNOSE_MULTISTEPLIST",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_varNameCollector",
    "type" : "VarNameCollector",
    "comment" : "\n   * So we can reuse it over and over again.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void eleminateRedundentLocals(ElemTemplateElement psuedoVarRecipient)",
    "returnType" : "void",
    "comment" : "\n   * Method to be called after the all expressions within an  \n   * node context have been visited.  It eliminates redundent \n   * expressions by creating a variable in the psuedoVarRecipient \n   * for each redundent expression, and then rewriting the redundent \n   * expression to be a variable reference.\n   * \n   * @param psuedoVarRecipient The recipient of the psuedo vars.  The \n   * variables will be inserted as first children of the element, before \n   * any existing variables.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void eleminateRedundentGlobals(StylesheetRoot stylesheet)",
    "returnType" : "void",
    "comment" : "\n   * Method to be called after the all global expressions within a stylesheet \n   * have been collected.  It eliminates redundent \n   * expressions by creating a variable in the psuedoVarRecipient \n   * for each redundent expression, and then rewriting the redundent \n   * expression to be a variable reference.\n   * \n   ",
    "links" : [ ]
  }, {
    "name" : "protected void eleminateRedundent(ElemTemplateElement psuedoVarRecipient, Vector paths)",
    "returnType" : "void",
    "comment" : "\n   * Method to be called after the all expressions within an  \n   * node context have been visited.  It eliminates redundent \n   * expressions by creating a variable in the psuedoVarRecipient \n   * for each redundent expression, and then rewriting the redundent \n   * expression to be a variable reference.\n   * \n   * @param psuedoVarRecipient The owner of the subtree from where the \n   *                           paths were collected.\n   * @param paths A vector of paths that hold ExpressionOwner objects, \n   *              which must yield LocationPathIterators.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void eleminateSharedPartialPaths(ElemTemplateElement psuedoVarRecipient, Vector paths)",
    "returnType" : "void",
    "comment" : "\n   * Eliminate the shared partial paths in the expression list.\n   * \n   * @param psuedoVarRecipient The recipient of the psuedo vars.\n   * \n   * @param paths A vector of paths that hold ExpressionOwner objects, \n   *              which must yield LocationPathIterators.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected MultistepExprHolder matchAndEliminatePartialPaths(MultistepExprHolder testee, MultistepExprHolder head, boolean isGlobal, int lengthToTest, ElemTemplateElement varScope)",
    "returnType" : "MultistepExprHolder",
    "comment" : "\n   * For a given path, see if there are any partitial matches in the list, \n   * and, if there are, replace those partial paths with psuedo variable refs,\n   * and create the psuedo variable decl.\n   * \n   * @return The head of the list, which may have changed.\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean partialIsVariable(MultistepExprHolder testee, int lengthToTest)",
    "returnType" : "boolean",
    "comment" : "\n   * Check if results of partial reduction will just be a variable, in \n   * which case, skip it.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void diagnoseLineNumber(Expression expr)",
    "returnType" : "void",
    "comment" : "\n   * Tell what line number belongs to a given expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected ElemTemplateElement findCommonAncestor(MultistepExprHolder head)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Given a linked list of expressions, find the common ancestor that is \n   * suitable for holding a psuedo variable for shared access.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isNotSameAsOwner(MultistepExprHolder head, ElemTemplateElement ete)",
    "returnType" : "boolean",
    "comment" : "\n   * Find out if the given ElemTemplateElement is not the same as one of \n   * the ElemTemplateElement owners of the expressions.\n   * \n   * @param head Head of linked list of expression owners.\n   * @param ete The ElemTemplateElement that is a candidate for a psuedo \n   * variable parent.\n   * @return true if the given ElemTemplateElement is not the same as one of \n   * the ElemTemplateElement owners of the expressions.  This is to make sure \n   * we find an ElemTemplateElement that is in a viable position to hold \n   * psuedo variables that are visible to the references.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int countAncestors(ElemTemplateElement elem)",
    "returnType" : "int",
    "comment" : "\n   * Count the number of ancestors that a ElemTemplateElement has.\n   * \n   * @param elem An representation of an element in an XSLT stylesheet.\n   * @return The number of ancestors of elem (including the element itself).\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void diagnoseMultistepList(int matchCount, int lengthToTest, boolean isGlobal)",
    "returnType" : "void",
    "comment" : "\n   * Print out diagnostics about partial multistep evaluation.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected LocPathIterator changePartToRef(final QName uniquePseudoVarName, WalkingIterator wi, final int numSteps, final boolean isGlobal)",
    "returnType" : "LocPathIterator",
    "comment" : "\n   * Change a given number of steps to a single variable reference.\n   * \n   * @param uniquePseudoVarName The name of the variable reference.\n   * @param wi The walking iterator that is to be changed.\n   * @param numSteps The number of steps to be changed.\n   * @param isGlobal true if this will be a global reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected WalkingIterator createIteratorFromSteps(final WalkingIterator wi, int numSteps)",
    "returnType" : "WalkingIterator",
    "comment" : "\n   * Create a new WalkingIterator from the steps in another WalkingIterator.\n   * \n   * @param wi The iterator from where the steps will be taken.\n   * @param numSteps The number of steps from the first to copy into the new \n   *                 iterator.\n   * @return The new iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean stepsEqual(WalkingIterator iter1, WalkingIterator iter2, int numSteps)",
    "returnType" : "boolean",
    "comment" : "\n   * Compare a given number of steps between two iterators, to see if they are equal.\n   * \n   * @param iter1 The first iterator to compare.\n   * @param iter2 The second iterator to compare.\n   * @param numSteps The number of steps to compare.\n   * @return true If the given number of steps are equal.\n   * \n   ",
    "links" : [ ]
  }, {
    "name" : "protected MultistepExprHolder createMultistepExprList(Vector paths)",
    "returnType" : "MultistepExprHolder",
    "comment" : "\n   * For the reduction of location path parts, create a list of all \n   * the multistep paths with more than one step, sorted by the \n   * number of steps, with the most steps occuring earlier in the list.\n   * If the list is only one member, don't bother returning it.\n   * \n   * @param paths Vector of ExpressionOwner objects, which may contain null entries. \n   *              The ExpressionOwner objects must own LocPathIterator objects.\n   * @return null if no multipart paths are found or the list is only of length 1, \n   * otherwise the first MultistepExprHolder in a linked list of these objects.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int findAndEliminateRedundant(int start, int firstOccuranceIndex, ExpressionOwner firstOccuranceOwner, ElemTemplateElement psuedoVarRecipient, Vector paths) throws org.w3c.dom.DOMException",
    "returnType" : "int",
    "comment" : "\n   * Look through the vector from start point, looking for redundant occurances.\n   * When one or more are found, create a psuedo variable declaration, insert \n   * it into the stylesheet, and replace the occurance with a reference to \n   * the psuedo variable.  When a redundent variable is found, it's slot in \n   * the vector will be replaced by null.\n   * \n   * @param start The position to start looking in the vector.\n   * @param firstOccuranceIndex The position of firstOccuranceOwner.\n   * @param firstOccuranceOwner The owner of the expression we are looking for.\n   * @param psuedoVarRecipient Where to put the psuedo variables.\n   * \n   * @return The number of expression occurances that were modified.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int oldFindAndEliminateRedundant(int start, int firstOccuranceIndex, ExpressionOwner firstOccuranceOwner, ElemTemplateElement psuedoVarRecipient, Vector paths) throws org.w3c.dom.DOMException",
    "returnType" : "int",
    "comment" : "\n   * To be removed.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int countSteps(LocPathIterator lpi)",
    "returnType" : "int",
    "comment" : "\n   * Count the steps in a given location path.\n   * \n   * @param lpi The location path iterator that owns the steps.\n   * @return The number of steps in the given location path.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void changeToVarRef(QName varName, ExpressionOwner owner, Vector paths, ElemTemplateElement psuedoVarRecipient)",
    "returnType" : "void",
    "comment" : "\n   * Change the expression owned by the owner argument to a variable reference \n   * of the given name.\n   * \n   * Warning: For global vars, this function relies on the variable declaration \n   * to which it refers having been added just prior to this function being called,\n   * so that the reference index can be determined from the size of the global variables \n   * list minus one.\n   * \n   * @param varName The name of the variable which will be referenced.\n   * @param owner The owner of the expression which will be replaced by a variable ref.\n   * @param paths The paths list that the iterator came from, mainly to determine\n   *              if this is a local or global reduction.\n   * @param psuedoVarRecipient The element within whose scope the variable is \n   *                           being inserted, possibly a StylesheetRoot.\n   ",
    "links" : [ ]
  }, {
    "name" : "private static synchronized int getPseudoVarID()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ElemVariable createPseudoVarDecl(ElemTemplateElement psuedoVarRecipient, LocPathIterator lpi, boolean isGlobal) throws org.w3c.dom.DOMException",
    "returnType" : "ElemVariable",
    "comment" : "\n   * Create a psuedo variable reference that will represent the \n   * shared redundent XPath, and add it to the stylesheet.\n   * \n   * @param psuedoVarRecipient The broadest scope of where the variable \n   * should be inserted, usually an xsl:template or xsl:for-each.\n   * @param lpi The LocationPathIterator that the variable should represent.\n   * @param isGlobal true if the paths are global.\n   * @return The new psuedo var element.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected ElemVariable createGlobalPseudoVarDecl(QName uniquePseudoVarName, StylesheetRoot stylesheetRoot, LocPathIterator lpi) throws org.w3c.dom.DOMException",
    "returnType" : "ElemVariable",
    "comment" : "\n   * Create a psuedo variable reference that will represent the \n   * shared redundent XPath, for a local reduction.\n   * \n   * @param uniquePseudoVarName The name of the new variable.\n   * @param stylesheetRoot The broadest scope of where the variable \n   *        should be inserted, which must be a StylesheetRoot element in this case.\n   * @param lpi The LocationPathIterator that the variable should represent.\n   * @return null if the decl was not created, otherwise the new Pseudo var  \n   *              element.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected ElemVariable createLocalPseudoVarDecl(QName uniquePseudoVarName, ElemTemplateElement psuedoVarRecipient, LocPathIterator lpi) throws org.w3c.dom.DOMException",
    "returnType" : "ElemVariable",
    "comment" : "\n   * Create a psuedo variable reference that will represent the \n   * shared redundent XPath, for a local reduction.\n   * \n   * @param uniquePseudoVarName The name of the new variable.\n   * @param psuedoVarRecipient The broadest scope of where the variable \n   * should be inserted, usually an xsl:template or xsl:for-each.\n   * @param lpi The LocationPathIterator that the variable should represent.\n   * @return null if the decl was not created, otherwise the new Pseudo var  \n   *              element.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected ElemVariable addVarDeclToElem(ElemTemplateElement psuedoVarRecipient, LocPathIterator lpi, ElemVariable psuedoVar) throws org.w3c.dom.DOMException",
    "returnType" : "ElemVariable",
    "comment" : "\n   * Add the given variable to the psuedoVarRecipient.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isParam(ExpressionNode expr)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the expr param is contained within an xsl:param.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected ElemVariable getPrevVariableElem(ElemTemplateElement elem)",
    "returnType" : "ElemVariable",
    "comment" : "\n   * Find the previous occurance of a xsl:variable.  Stop \n   * the search when a xsl:for-each, xsl:template, or xsl:stylesheet is \n   * encountered.\n   * \n   * @param elem Should be non-null template element.\n   * @return The first previous occurance of an xsl:variable or xsl:param, \n   * or null if none is found.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected ElemTemplateElement getPrevElementWithinContext(ElemTemplateElement elem)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Get the previous sibling or parent of the given template, stopping at \n   * xsl:for-each, xsl:template, or xsl:stylesheet.\n   * \n   * @param elem Should be non-null template element.\n   * @return previous sibling or parent, or null if previous is xsl:for-each, \n   * xsl:template, or xsl:stylesheet.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected ElemTemplateElement getElemFromExpression(Expression expr)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * From an XPath expression component, get the ElemTemplateElement \n   * owner.\n   * \n   * @param expr Should be static expression with proper parentage.\n   * @return Valid ElemTemplateElement, or throw a runtime exception \n   * if it is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAbsolute(LocPathIterator path)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the given LocPathIterator is relative to an absolute path, i.e. \n   * in not dependent on the context.\n   * \n   * @return true if the LocPathIterator is not dependent on the context node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitLocationPath(ExpressionOwner owner, LocPathIterator path)",
    "returnType" : "boolean",
    "comment" : "\n   * Visit a LocationPath.\n   * @param owner The owner of the expression, to which the expression can \n   *              be reset if rewriting takes place.\n   * @param path The LocationPath object.\n   * @return true if the sub expressions should be traversed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitPredicate(ExpressionOwner owner, Expression pred)",
    "returnType" : "boolean",
    "comment" : "\n   * Visit a predicate within a location path.  Note that there isn't a \n   * proper unique component for predicates, and that the expression will \n   * be called also for whatever type Expression is.\n   * \n   * @param owner The owner of the expression, to which the expression can \n   *              be reset if rewriting takes place.\n   * @param pred The predicate object.\n   * @return true if the sub expressions should be traversed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitTopLevelInstruction(ElemTemplateElement elem)",
    "returnType" : "boolean",
    "comment" : "\n   * Visit an XSLT top-level instruction.\n   * \n   * @param elem The xsl instruction element object.\n   * @return true if the sub expressions should be traversed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitInstruction(ElemTemplateElement elem)",
    "returnType" : "boolean",
    "comment" : "\n   * Visit an XSLT instruction.  Any element that isn't called by one \n   * of the other visit methods, will be called by this method.\n   * \n   * @param elem The xsl instruction element object.\n   * @return true if the sub expressions should be traversed.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void diagnoseNumPaths(Vector paths, int numPathsEliminated, int numUniquePathsEliminated)",
    "returnType" : "void",
    "comment" : "\n   * Print out to std err the number of paths reduced.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void assertIsLocPathIterator(Expression expr1, ExpressionOwner eo) throws RuntimeException",
    "returnType" : "void",
    "comment" : "\n   * Assert that the expression is a LocPathIterator, and, if \n   * not, try to give some diagnostic info.\n   ",
    "links" : [ ]
  }, {
    "name" : "private static void validateNewAddition(Vector paths, ExpressionOwner owner, LocPathIterator path) throws RuntimeException",
    "returnType" : "void",
    "comment" : "\n   * Validate some assumptions about the new LocPathIterator and it's \n   * owner and the state of the list.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected static void assertion(boolean b, String msg)",
    "returnType" : "void",
    "comment" : "\n   * Simple assertion.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void eleminateRedundentLocals(ElemTemplateElement psuedoVarRecipient)", "public void eleminateRedundentGlobals(StylesheetRoot stylesheet)", "protected void eleminateRedundent(ElemTemplateElement psuedoVarRecipient, Vector paths)", "protected void eleminateSharedPartialPaths(ElemTemplateElement psuedoVarRecipient, Vector paths)", "protected MultistepExprHolder matchAndEliminatePartialPaths(MultistepExprHolder testee, MultistepExprHolder head, boolean isGlobal, int lengthToTest, ElemTemplateElement varScope)", " boolean partialIsVariable(MultistepExprHolder testee, int lengthToTest)", "protected void diagnoseLineNumber(Expression expr)", "protected ElemTemplateElement findCommonAncestor(MultistepExprHolder head)", "protected boolean isNotSameAsOwner(MultistepExprHolder head, ElemTemplateElement ete)", "protected int countAncestors(ElemTemplateElement elem)", "protected void diagnoseMultistepList(int matchCount, int lengthToTest, boolean isGlobal)", "protected LocPathIterator changePartToRef(final QName uniquePseudoVarName, WalkingIterator wi, final int numSteps, final boolean isGlobal)", "protected WalkingIterator createIteratorFromSteps(final WalkingIterator wi, int numSteps)", "protected boolean stepsEqual(WalkingIterator iter1, WalkingIterator iter2, int numSteps)", "protected MultistepExprHolder createMultistepExprList(Vector paths)", "protected int findAndEliminateRedundant(int start, int firstOccuranceIndex, ExpressionOwner firstOccuranceOwner, ElemTemplateElement psuedoVarRecipient, Vector paths) throws org.w3c.dom.DOMException", "protected int oldFindAndEliminateRedundant(int start, int firstOccuranceIndex, ExpressionOwner firstOccuranceOwner, ElemTemplateElement psuedoVarRecipient, Vector paths) throws org.w3c.dom.DOMException", "protected int countSteps(LocPathIterator lpi)", "protected void changeToVarRef(QName varName, ExpressionOwner owner, Vector paths, ElemTemplateElement psuedoVarRecipient)", "private static synchronized int getPseudoVarID()", "protected ElemVariable createPseudoVarDecl(ElemTemplateElement psuedoVarRecipient, LocPathIterator lpi, boolean isGlobal) throws org.w3c.dom.DOMException", "protected ElemVariable createGlobalPseudoVarDecl(QName uniquePseudoVarName, StylesheetRoot stylesheetRoot, LocPathIterator lpi) throws org.w3c.dom.DOMException", "protected ElemVariable createLocalPseudoVarDecl(QName uniquePseudoVarName, ElemTemplateElement psuedoVarRecipient, LocPathIterator lpi) throws org.w3c.dom.DOMException", "protected ElemVariable addVarDeclToElem(ElemTemplateElement psuedoVarRecipient, LocPathIterator lpi, ElemVariable psuedoVar) throws org.w3c.dom.DOMException", "protected boolean isParam(ExpressionNode expr)", "protected ElemVariable getPrevVariableElem(ElemTemplateElement elem)", "protected ElemTemplateElement getPrevElementWithinContext(ElemTemplateElement elem)", "protected ElemTemplateElement getElemFromExpression(Expression expr)", "public boolean isAbsolute(LocPathIterator path)", "public boolean visitLocationPath(ExpressionOwner owner, LocPathIterator path)", "public boolean visitPredicate(ExpressionOwner owner, Expression pred)", "public boolean visitTopLevelInstruction(ElemTemplateElement elem)", "public boolean visitInstruction(ElemTemplateElement elem)", "protected void diagnoseNumPaths(Vector paths, int numPathsEliminated, int numUniquePathsEliminated)", "private final void assertIsLocPathIterator(Expression expr1, ExpressionOwner eo) throws RuntimeException", "private static void validateNewAddition(Vector paths, ExpressionOwner owner, LocPathIterator path) throws RuntimeException", "protected static void assertion(boolean b, String msg)" ],
  "variableNames" : [ "m_paths", "m_absPaths", "m_isSameContext", "m_absPathChecker", "m_uniquePseudoVarID", "PSUEDOVARNAMESPACE", "DEBUG", "DIAGNOSE_NUM_PATHS_REDUCED", "DIAGNOSE_MULTISTEPLIST", "m_varNameCollector" ]
}