{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ViewGroup.java",
  "packageName" : "android.view",
  "className" : "ViewLocationHolder",
  "comment" : "\n     * Pooled class that holds a View and its location with respect to\n     * a specified root. This enables sorting of views based on their\n     * coordinates without recomputing the position relative to the root\n     * on every comparison.\n     ",
  "variables" : [ {
    "name" : "MAX_POOL_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPool",
    "type" : "SynchronizedPool<ViewLocationHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMPARISON_STRATEGY_STRIPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMPARISON_STRATEGY_LOCATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sComparisonStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocation",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoot",
    "type" : "ViewGroup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayoutDirection",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ViewLocationHolder obtain(ViewGroup root, View view)",
    "returnType" : "ViewLocationHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setComparisonStrategy(int strategy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(ViewLocationHolder another)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int compareBoundsOfTree(ViewLocationHolder holder1, ViewLocationHolder holder2)",
    "returnType" : "int",
    "comment" : "\n         * Compare two views based on their bounds. Use the bounds of their children to break ties.\n         *\n         * @param holder1 Holder of first view to compare\n         * @param holder2 Holder of second view to compare. Must have the same root as holder1.\n         * @return The compare result, with equality if no good comparison was found.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void init(ViewGroup root, View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MAX_POOL_SIZE", "sPool", "COMPARISON_STRATEGY_STRIPE", "COMPARISON_STRATEGY_LOCATION", "sComparisonStrategy", "mLocation", "mRoot", "mView", "mLayoutDirection" ],
  "methodNames" : [ "public static ViewLocationHolder obtain(ViewGroup root, View view)", "public static void setComparisonStrategy(int strategy)", "public void recycle()", "public int compareTo(ViewLocationHolder another)", "private static int compareBoundsOfTree(ViewLocationHolder holder1, ViewLocationHolder holder2)", "private void init(ViewGroup root, View view)", "private void clear()" ]
}