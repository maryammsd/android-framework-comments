{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothQualityReport.java",
  "packageName" : "android.bluetooth",
  "className" : "BqrCommon",
  "comment" : "\n     * This class provides the System APIs to access the common part of BQR event.\n     *\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BQR_COMMON_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQualityReportId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPacketType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionHandle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionRole",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTxPowerLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRssi",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnr",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnusedAfhChannelCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAfhSelectUnidealChannelCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLsto",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPiconetClock",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetransmissionCount",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNoRxCount",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNakCount",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastTxAckTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlowOffCount",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastFlowOnTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverflowCount",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnderflowCount",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddr",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCalFailedItemCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_ROLE_CENTRAL",
    "type" : "int",
    "comment" : "\n         * Connection role: central.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_ROLE_PERIPHERAL",
    "type" : "int",
    "comment" : "\n         * Connection role: peripheral.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<BqrCommon>",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int getQualityReportId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String qualityReportIdToString(@QualityReportId int id)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPacketType()",
    "returnType" : "int",
    "comment" : "\n         * Get the packet type of the connection.\n         *\n         * @return the packet type\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static String packetTypeToString(int packetType)",
    "returnType" : "String",
    "comment" : "\n         * Get the string of packet type.\n         *\n         * @param packetType packet type of the connection\n         * @return the string of packet type\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionHandle()",
    "returnType" : "int",
    "comment" : "\n         * Get the connection handle of the connection.\n         *\n         * @return the connection handle\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionRole()",
    "returnType" : "int",
    "comment" : "\n         * Get the connection Role of the connection.\n         *\n         * @return the connection Role\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static String connectionRoleToString(int connectionRole)",
    "returnType" : "String",
    "comment" : "\n         * Get the connection Role of the connection, \"Central\" or \"Peripheral\".\n         *\n         * @param connectionRole connection Role of the connection\n         * @return the connection Role String\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTxPowerLevel()",
    "returnType" : "int",
    "comment" : "\n         * Get the current transmit power level for the connection.\n         *\n         * @return the TX power level\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getRssi()",
    "returnType" : "int",
    "comment" : "\n         * Get the Received Signal Strength Indication (RSSI) value for the connection.\n         *\n         * @return the RSSI\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSnr()",
    "returnType" : "int",
    "comment" : "\n         * Get the Signal-to-Noise Ratio (SNR) value for the connection.\n         *\n         * @return the SNR\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getUnusedAfhChannelCount()",
    "returnType" : "int",
    "comment" : "\n         * Get the number of unused channels in AFH_channel_map.\n         *\n         * @return the number of unused channels\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getAfhSelectUnidealChannelCount()",
    "returnType" : "int",
    "comment" : "\n         * Get the number of the channels which are interfered and quality is bad but are still\n         * selected for AFH.\n         *\n         * @return the number of the selected unideal channels\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getLsto()",
    "returnType" : "int",
    "comment" : "\n         * Get the current link supervision timeout setting. time_ms: N * 0.625 ms (1 slot).\n         *\n         * @return link supervision timeout value\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getPiconetClock()",
    "returnType" : "long",
    "comment" : "\n         * Get the piconet clock for the specified Connection_Handle. time_ms: N * 0.3125 ms (1\n         * Bluetooth Clock).\n         *\n         * @return the piconet clock\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getRetransmissionCount()",
    "returnType" : "long",
    "comment" : "\n         * Get the count of retransmission.\n         *\n         * @return the count of retransmission\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getNoRxCount()",
    "returnType" : "long",
    "comment" : "\n         * Get the count of no RX.\n         *\n         * @return the count of no RX\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getNakCount()",
    "returnType" : "long",
    "comment" : "\n         * Get the count of NAK(Negative Acknowledge).\n         *\n         * @return the count of NAK\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastTxAckTimestamp()",
    "returnType" : "long",
    "comment" : "\n         * Get the timestamp of last TX ACK. time_ms: N * 0.3125 ms (1 Bluetooth Clock).\n         *\n         * @return the timestamp of last TX ACK\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getFlowOffCount()",
    "returnType" : "long",
    "comment" : "\n         * Get the count of flow-off.\n         *\n         * @return the count of flow-off\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastFlowOnTimestamp()",
    "returnType" : "long",
    "comment" : "\n         * Get the timestamp of last flow-on.\n         *\n         * @return the timestamp of last flow-on\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getOverflowCount()",
    "returnType" : "long",
    "comment" : "\n         * Get the buffer overflow count (how many bytes of TX data are dropped) since the last\n         * event.\n         *\n         * @return the buffer overflow count\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getUnderflowCount()",
    "returnType" : "long",
    "comment" : "\n         * Get the buffer underflow count (in byte).\n         *\n         * @return the buffer underflow count\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getCalFailedItemCount()",
    "returnType" : "int",
    "comment" : "\n         * Get the count of calibration failed items.\n         *\n         * @return the count of calibration failure\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n         * Describe contents.\n         *\n         * @return 0\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n         * Write BqrCommon to parcel.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " BqrCommon to String. ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int getQualityReportId()", " static String qualityReportIdToString(@QualityReportId int id)", "public int getPacketType()", "public static String packetTypeToString(int packetType)", "public int getConnectionHandle()", "public int getConnectionRole()", "public static String connectionRoleToString(int connectionRole)", "public int getTxPowerLevel()", "public int getRssi()", "public int getSnr()", "public int getUnusedAfhChannelCount()", "public int getAfhSelectUnidealChannelCount()", "public int getLsto()", "public long getPiconetClock()", "public long getRetransmissionCount()", "public long getNoRxCount()", "public long getNakCount()", "public long getLastTxAckTimestamp()", "public long getFlowOffCount()", "public long getLastFlowOnTimestamp()", "public long getOverflowCount()", "public long getUnderflowCount()", "public int getCalFailedItemCount()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public String toString()" ],
  "variableNames" : [ "TAG", "BQR_COMMON_LEN", "mQualityReportId", "mPacketType", "mConnectionHandle", "mConnectionRole", "mTxPowerLevel", "mRssi", "mSnr", "mUnusedAfhChannelCount", "mAfhSelectUnidealChannelCount", "mLsto", "mPiconetClock", "mRetransmissionCount", "mNoRxCount", "mNakCount", "mLastTxAckTimestamp", "mFlowOffCount", "mLastFlowOnTimestamp", "mOverflowCount", "mUnderflowCount", "mAddr", "mCalFailedItemCount", "CONNECTION_ROLE_CENTRAL", "CONNECTION_ROLE_PERIPHERAL", "CREATOR" ]
}