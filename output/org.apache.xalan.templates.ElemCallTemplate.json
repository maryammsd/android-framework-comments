{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemCallTemplate.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemCallTemplate",
  "comment" : "\n * Implement xsl:call-template.\n * <pre>\n * &amp;!ELEMENT xsl:call-template (xsl:with-param)*>\n * &amp;!ATTLIST xsl:call-template\n *   name %qname; #REQUIRED\n * &amp;\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#named-templates\">named-templates in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_templateName",
    "type" : "QName",
    "comment" : "\n   * An xsl:call-template element invokes a template by name;\n   * it has a required name attribute that identifies the template to be invoked.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_template",
    "type" : "ElemTemplate",
    "comment" : "\n   * The template which is named by QName.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_paramElems",
    "type" : "ElemWithParam[]",
    "comment" : " Vector of xsl:param elements associated with this element. \n   *  @serial ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setName(QName name)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"name\" attribute.\n   * An xsl:call-template element invokes a template by name;\n   * it has a required name attribute that identifies the template to be invoked.\n   *\n   * @param name Name attribute to set\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getName()",
    "returnType" : "QName",
    "comment" : "\n   * Get the \"name\" attribute.\n   * An xsl:call-template element invokes a template by name;\n   * it has a required name attribute that identifies the template to be invoked.\n   *\n   * @return Name attribute of this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element \n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The name of this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endCompose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This after the template's children have been composed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Invoke a named template.\n   * @see <a href=\"http://www.w3.org/TR/xslt#named-templates\">named-templates in XSLT Specification</a>\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getParamElemCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the count xsl:param elements associated with this element.\n   * @return The number of xsl:param elements.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemWithParam getParamElem(int i)",
    "returnType" : "ElemWithParam",
    "comment" : "\n   * Get a xsl:param element associated with this element.\n   *\n   * @param i Index of element to find\n   *\n   * @return xsl:param element at given index\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setParamElem(ElemWithParam ParamElem)",
    "returnType" : "void",
    "comment" : "\n   * Set a xsl:param element associated with this element.\n   *\n   * @param ParamElem xsl:param element to set. \n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement newChild)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list.\n   * <!ELEMENT xsl:apply-templates (xsl:sort|xsl:with-param)*>\n   * <!ATTLIST xsl:apply-templates\n   *   select %expr; \"node()\"\n   *   mode %qname; #IMPLIED\n   * >\n   *\n   * @param newChild Child to add to this node's children list\n   *\n   * @return The child that was just added the children list \n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)",
    "returnType" : "void",
    "comment" : "\n     * Call the children visitors.\n     * @param visitor The visitor whose appropriate method will be called.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setName(QName name)", "public QName getName()", "public int getXSLToken()", "public String getNodeName()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public void endCompose(StylesheetRoot sroot) throws TransformerException", "public void execute(TransformerImpl transformer) throws TransformerException", "public int getParamElemCount()", "public ElemWithParam getParamElem(int i)", "public void setParamElem(ElemWithParam ParamElem)", "public ElemTemplateElement appendChild(ElemTemplateElement newChild)", "public void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)" ],
  "variableNames" : [ "serialVersionUID", "m_templateName", "m_template", "m_paramElems" ]
}