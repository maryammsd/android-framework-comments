{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/RemoteInput.java",
  "packageName" : "android.app",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link RemoteInput} objects.\n     ",
  "links" : [ "android.app.RemoteInput" ],
  "variables" : [ {
    "name" : "mResultKey",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedDataTypes",
    "type" : "ArraySet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChoices",
    "type" : "CharSequence[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEditChoicesBeforeSending",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setLabel(@Nullable CharSequence label)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a label to be displayed to the user when collecting this input.\n         *\n         * @param label The label to show to users when they input a response\n         * @return this object for method chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setChoices(@Nullable CharSequence[] choices)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies choices available to the user to satisfy this input.\n         *\n         * <p>Note: Starting in Android P, these choices will always be shown on phones if the app's\n         * target SDK is >= P. However, these choices may also be rendered on other types of devices\n         * regardless of target SDK.\n         *\n         * @param choices an array of pre-defined choices for users input.\n         *        You must provide a non-null and non-empty array if\n         *        you disabled free form input using {@link #setAllowFreeFormInput}\n         * @return this object for method chaining\n         ",
    "links" : [ "#setAllowFreeFormInput" ]
  }, {
    "name" : "public Builder setAllowDataType(@NonNull String mimeType, boolean doAllow)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the user can provide arbitrary values. This allows an input\n         * to accept non-textual values. Examples of usage are an input that wants audio\n         * or an image.\n         *\n         * @param mimeType A mime type that results are allowed to come in.\n         *         Be aware that text results (see {@link #setAllowFreeFormInput}\n         *         are allowed by default. If you do not want text results you will have to\n         *         pass false to {@code setAllowFreeFormInput}\n         * @param doAllow Whether the mime type should be allowed or not\n         * @return this object for method chaining\n         ",
    "links" : [ "#setAllowFreeFormInput" ]
  }, {
    "name" : "public Builder setAllowFreeFormInput(boolean allowFreeFormTextInput)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the user can provide arbitrary text values.\n         *\n         * @param allowFreeFormTextInput The default is {@code true}.\n         *         If you specify {@code false}, you must either provide a non-null\n         *         and non-empty array to {@link #setChoices}, or enable a data result\n         *         in {@code setAllowDataType}. Otherwise an\n         *         {@link IllegalArgumentException} is thrown\n         * @return this object for method chaining\n         ",
    "links" : [ "#setChoices", "IllegalArgumentException" ]
  }, {
    "name" : "public Builder setEditChoicesBeforeSending(@EditChoicesBeforeSending int editChoicesBeforeSending)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether tapping on a choice should let the user edit the input before it is\n         * sent to the app. The default is {@link #EDIT_CHOICES_BEFORE_SENDING_AUTO}.\n         *\n         * It cannot be used if {@link #setAllowFreeFormInput} has been set to false.\n         ",
    "links" : [ "#setAllowFreeFormInput", "#EDIT_CHOICES_BEFORE_SENDING_AUTO" ]
  }, {
    "name" : "public Builder addExtras(@NonNull Bundle extras)",
    "returnType" : "Builder",
    "comment" : "\n         * Merge additional metadata into this builder.\n         *\n         * <p>Values within the Bundle will replace existing extras values in this Builder.\n         *\n         * @see RemoteInput#getExtras\n         ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n         * Get the metadata Bundle used by this Builder.\n         *\n         * <p>The returned Bundle is shared with this Builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setFlag(int mask, boolean value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RemoteInput build()",
    "returnType" : "RemoteInput",
    "comment" : "\n         * Combine all of the options that have been set and return a new {@link RemoteInput}\n         * object.\n         ",
    "links" : [ "android.app.RemoteInput" ]
  } ],
  "methodNames" : [ "public Builder setLabel(@Nullable CharSequence label)", "public Builder setChoices(@Nullable CharSequence[] choices)", "public Builder setAllowDataType(@NonNull String mimeType, boolean doAllow)", "public Builder setAllowFreeFormInput(boolean allowFreeFormTextInput)", "public Builder setEditChoicesBeforeSending(@EditChoicesBeforeSending int editChoicesBeforeSending)", "public Builder addExtras(@NonNull Bundle extras)", "public Bundle getExtras()", "private void setFlag(int mask, boolean value)", "public RemoteInput build()" ],
  "variableNames" : [ "mResultKey", "mAllowedDataTypes", "mExtras", "mLabel", "mChoices", "mFlags", "mEditChoicesBeforeSending" ]
}