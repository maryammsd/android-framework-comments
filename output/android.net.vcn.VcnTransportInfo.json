{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/vcn/VcnTransportInfo.java",
  "packageName" : "android.net.vcn",
  "className" : "VcnTransportInfo",
  "comment" : "\n * VcnTransportInfo contains information about the VCN's underlying transports for SysUi.\n *\n * <p>Presence of this class in the NetworkCapabilities.TransportInfo implies that the network is a\n * VCN.\n *\n * <p>VcnTransportInfo must exist on top of either an underlying Wifi or Cellular Network. If the\n * underlying Network is WiFi, the subId will be {@link\n * SubscriptionManager#INVALID_SUBSCRIPTION_ID}. If the underlying Network is Cellular, the WifiInfo\n * will be {@code null}.\n *\n * <p>Receipt of a VcnTransportInfo requires the NETWORK_SETTINGS permission; else the entire\n * VcnTransportInfo instance will be redacted.\n *\n * @hide\n ",
  "links" : [ "android.telephony.SubscriptionManager#INVALID_SUBSCRIPTION_ID" ],
  "variables" : [ {
    "name" : "mWifiInfo",
    "type" : "WifiInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinUdpPort4500NatTimeoutSeconds",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<VcnTransportInfo>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public WifiInfo getWifiInfo()",
    "returnType" : "WifiInfo",
    "comment" : "\n     * Get the {@link WifiInfo} for this VcnTransportInfo.\n     *\n     * <p>If the underlying Network for the associated VCN is Cellular, returns null.\n     *\n     * @return the WifiInfo if there is an underlying WiFi connection, else null.\n     ",
    "links" : [ "android.net.wifi.WifiInfo" ]
  }, {
    "name" : "public int getSubId()",
    "returnType" : "int",
    "comment" : "\n     * Get the subId for the VCN Network associated with this VcnTransportInfo.\n     *\n     * <p>If the underlying Network for the associated VCN is WiFi, returns {@link\n     * SubscriptionManager#INVALID_SUBSCRIPTION_ID}.\n     *\n     * @return the Subscription ID if a cellular underlying Network is present, else {@link\n     *     android.telephony.SubscriptionManager#INVALID_SUBSCRIPTION_ID}.\n     ",
    "links" : [ "android.telephony.SubscriptionManager#INVALID_SUBSCRIPTION_ID" ]
  }, {
    "name" : "public int getMinUdpPort4500NatTimeoutSeconds()",
    "returnType" : "int",
    "comment" : "\n     * Get the VCN provided UDP port 4500 NAT timeout\n     *\n     * @return the UDP 4500 NAT timeout, or\n     *     VcnGatewayConnectionConfig.MIN_UDP_PORT_4500_NAT_TIMEOUT_UNSET if not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public TransportInfo makeCopy(long redactions)",
    "returnType" : "TransportInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getApplicableRedactions()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public WifiInfo getWifiInfo()", "public int getSubId()", "public int getMinUdpPort4500NatTimeoutSeconds()", "public int hashCode()", "public boolean equals(Object o)", "public int describeContents()", "public TransportInfo makeCopy(long redactions)", "public long getApplicableRedactions()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public String toString()" ],
  "variableNames" : [ "mWifiInfo", "mSubId", "mMinUdpPort4500NatTimeoutSeconds", "CREATOR" ]
}