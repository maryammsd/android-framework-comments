{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/supplier/LazyOneshotSupplierImpl.java",
  "packageName" : "org.chromium.base.supplier",
  "className" : "LazyOneshotSupplierImpl",
  "comment" : "\n * Abstract implementation of {@link LazySupplier} to be used by classes providing it as a\n * dependency to others. A call to {@link LazyOneshotSupplier#get()} will attempt to set the\n * supplied object via {@link LazyOneshotSupplier#doSet()}. Additionally, {@link\n * LazyOneshotSupplier#onAvailable(Callback<T>)} will not call {@link LazyOneshotSupplier#get()}\n * unless it already has a value to prevent eager initialization. The supplied value can be null,\n * {@link LazyOneshotSupplier#hasValue} should be used to differentiate between un/set states.\n *\n * <p>If eager initialization in response to {@link LazyOneshotSupplier#onAvailable(Callback<T>)} is\n * required then a call to {@link LazyOneshotSupplier#get()} can be made just before attaching the\n * callback.\n *\n * <p>Instances of this class must only be accessed from the thread they were created on.\n *\n * <p>To use:\n *\n * <ol>\n *   <li>Create a new {@code LazyOneshotSupplier<T>} to pass as a dependency.\n *   <li>Override {@link #doSet()} to invoke {@link #set(T)}. This will be invoked when {@link\n *       #get()} is invoked if {@link #hasValue()} returns false. Note that invoking {@link\n *       #doSet()} does not have to invoke {@link #set(T)} if there is reason not to such as\n *       awaiting an async dependency. However, if this is the case clients of the supplier need to\n *       be careful to properly understand the initialization lifecycle.\n * </ol>\n *\n * @param <T> The type of the wrapped object.\n ",
  "links" : [ "#get()", "#set(T)", "LazySupplier", "#doSet()", "org.chromium.base.supplier.LazyOneshotSupplier#get()", "org.chromium.base.supplier.LazyOneshotSupplier#onAvailable(Callback", "org.chromium.base.supplier.LazyOneshotSupplier#hasValue", "#hasValue()", "org.chromium.base.supplier.LazyOneshotSupplier#doSet()" ],
  "variables" : [ {
    "name" : "mPromise",
    "type" : "Promise<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThreadChecker",
    "type" : "ThreadUtils.ThreadChecker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDoSetCalled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onAvailable(Callback<T> callback)",
    "returnType" : "void",
    "comment" : "\n     * Lazily invokes the callback the first time {@link #set(T)} is invoked or immediately if\n     * already available.\n     ",
    "links" : [ "#set(T)" ]
  }, {
    "name" : "public T get()",
    "returnType" : "T",
    "comment" : "\n     * Return the value of the supplier. Calling this the first time will initialize the value in\n     * the supplier via {@link #doSet()}.\n     *\n     * @return the value that was provided in {@link #set(T)} or null.\n     ",
    "links" : [ "#set(T)", "#doSet()" ]
  }, {
    "name" : "public boolean hasValue()",
    "returnType" : "boolean",
    "comment" : " Returns whether a value is set in the supplier. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void doSet()",
    "returnType" : "void",
    "comment" : "\n     * Sets the value upon first {@link #get()}. Implementers should override this to invoke {@link\n     * #set(T)}.\n     ",
    "links" : [ "#get()", "#set(T)" ]
  }, {
    "name" : "public void set(@Nullable T object)",
    "returnType" : "void",
    "comment" : "\n     * Set the object supplied by this supplier. This will notify registered callbacks that the\n     * dependency is available. If set() has already been called, this method will assert.\n     *\n     * @param object The object to supply.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void tryDoSet()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onAvailable(Callback<T> callback)", "public T get()", "public boolean hasValue()", "public abstract void doSet()", "public void set(@Nullable T object)", "private void tryDoSet()" ],
  "variableNames" : [ "mPromise", "mThreadChecker", "mDoSetCalled" ]
}