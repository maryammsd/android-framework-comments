{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/zip/InflaterOutputStream.java",
  "packageName" : "java.util.zip",
  "className" : "InflaterOutputStream",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "inf",
    "type" : "Inflater",
    "comment" : " Decompressor for this stream. ",
    "links" : [ ]
  }, {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : " Output buffer for writing uncompressed data. ",
    "links" : [ ]
  }, {
    "name" : "wbuf",
    "type" : "byte[]",
    "comment" : " Temporary write buffer. ",
    "links" : [ ]
  }, {
    "name" : "usesDefaultInflater",
    "type" : "boolean",
    "comment" : " Default decompressor is used. ",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : " true iff {@link #close()} has been called. ",
    "links" : [ "#close()" ]
  } ],
  "methods" : [ {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Checks to make sure that this stream has not been closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes any remaining uncompressed data to the output stream and closes\n     * the underlying output stream.\n     *\n     * @throws IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes this output stream, forcing any pending buffered output bytes to be\n     * written.\n     *\n     * @throws IOException if an I/O error occurs or this stream is already\n     * closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void finish() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Finishes writing uncompressed data to the output stream without closing\n     * the underlying stream.  Use this method when applying multiple filters in\n     * succession to the same output stream.\n     *\n     * @throws IOException if an I/O error occurs or this stream is already\n     * closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a byte to the uncompressed output stream.\n     *\n     * @param b a single byte of compressed data to decompress and write to\n     * the output stream\n     * @throws IOException if an I/O error occurs or this stream is already\n     * closed\n     * @throws ZipException if a compression (ZIP) format error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of bytes to the uncompressed output stream.\n     *\n     * @param b buffer containing compressed data to decompress and write to\n     * the output stream\n     * @param off starting offset of the compressed data within {@code b}\n     * @param len number of bytes to decompress from {@code b}\n     * @throws IndexOutOfBoundsException if {@code off < 0}, or if\n     * {@code len < 0}, or if {@code len > b.length - off}\n     * @throws IOException if an I/O error occurs or this stream is already\n     * closed\n     * @throws NullPointerException if {@code b} is null\n     * @throws ZipException if a compression (ZIP) format error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureOpen() throws IOException", "public void close() throws IOException", "public void flush() throws IOException", "public void finish() throws IOException", "public void write(int b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException" ],
  "variableNames" : [ "inf", "buf", "wbuf", "usesDefaultInflater", "closed" ]
}