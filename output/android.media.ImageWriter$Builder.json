{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/ImageWriter.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link ImageWriter} objects.\n     ",
  "links" : [ "android.media.ImageWriter" ],
  "variables" : [ {
    "name" : "mSurface",
    "type" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxImages",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImageFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsage",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardwareBufferFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataSpace",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseSurfaceImageFormatInfo",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseLegacyImageFormat",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setWidthAndHeight(@IntRange(from = 1) int width, @IntRange(from = 1) int height)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the width and height of images. Default size is dependent on the Surface that is\n         * provided by the downstream end-point.\n         *\n         * @param width The width in pixels that will be passed to the producer.\n         * @param height The height in pixels that will be passed to the producer.\n         * @return the Builder instance with customized width and height.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMaxImages(@IntRange(from = 1) int maxImages)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the maximum number of images. Default value is 1.\n         *\n         * @param maxImages The maximum number of Images the user will want to access simultaneously\n         *                  for producing Image data.\n         * @return the Builder instance with customized usage value.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setImageFormat(@Format int imageFormat)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the image format of this ImageWriter.\n         * Default format depends on the Surface provided.\n         *\n         * @param imageFormat The format of the {@link ImageWriter}. It can be any valid specified\n         *                    by {@link ImageFormat} or {@link PixelFormat}.\n         * @return the Builder instance with customized image format.\n         *\n         * @throws IllegalArgumentException if {@code imageFormat} is invalid.\n         ",
    "links" : [ "android.graphics.ImageFormat", "android.media.ImageWriter", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public Builder setHardwareBufferFormat(@HardwareBuffer.Format int hardwareBufferFormat)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the hardwareBuffer format of this ImageWriter. The default value is\n         * {@link HardwareBuffer#RGBA_8888 HardwareBuffer.RGBA_8888}.\n         *\n         * <p>This function works together with {@link #setDataSpace} for an\n         * {@link ImageWriter} instance. Setting at least one of these two replaces\n         * {@link #setImageFormat} function.</p>\n         *\n         * @param hardwareBufferFormat The HardwareBuffer format of the image that this writer\n         *                             will produce.\n         * @return the Builder instance with customized buffer format.\n         *\n         * @see #setDataSpace\n         * @see #setImageFormat\n         ",
    "links" : [ "android.hardware.HardwareBuffer#RGBA_8888", "android.media.ImageWriter", "#setDataSpace", "#setImageFormat" ]
  }, {
    "name" : "public Builder setDataSpace(@NamedDataSpace int dataSpace)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the dataspace of this ImageWriter.\n         * The default value is {@link DataSpace#DATASPACE_UNKNOWN}.\n         *\n         * @param dataSpace The dataspace of the image that this writer will produce.\n         * @return the builder instance with customized dataspace value.\n         *\n         * @see #setHardwareBufferFormat\n         ",
    "links" : [ "android.hardware.DataSpace#DATASPACE_UNKNOWN" ]
  }, {
    "name" : "public Builder setUsage(@Usage long usage)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the usage flag of this ImageWriter.\n         *\n         * <p>If this function is not called, usage bit will be set\n         * to {@link HardwareBuffer#USAGE_CPU_WRITE_OFTEN} if the image format is not\n         * {@link ImageFormat#PRIVATE PRIVATE}.</p>\n         *\n         * @param usage The intended usage of the images produced by this ImageWriter.\n         * @return the Builder instance with customized usage flag.\n         *\n         * @see HardwareBuffer\n         * @see #getUsage\n         ",
    "links" : [ "android.hardware.HardwareBuffer#USAGE_CPU_WRITE_OFTEN", "android.graphics.ImageFormat#PRIVATE" ]
  }, {
    "name" : "public ImageWriter build()",
    "returnType" : "ImageWriter",
    "comment" : "\n         * Builds a new ImageWriter object.\n         *\n         * @return The new ImageWriter object.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setWidthAndHeight(@IntRange(from = 1) int width, @IntRange(from = 1) int height)", "public Builder setMaxImages(@IntRange(from = 1) int maxImages)", "public Builder setImageFormat(@Format int imageFormat)", "public Builder setHardwareBufferFormat(@HardwareBuffer.Format int hardwareBufferFormat)", "public Builder setDataSpace(@NamedDataSpace int dataSpace)", "public Builder setUsage(@Usage long usage)", "public ImageWriter build()" ],
  "variableNames" : [ "mSurface", "mWidth", "mHeight", "mMaxImages", "mImageFormat", "mUsage", "mHardwareBufferFormat", "mDataSpace", "mUseSurfaceImageFormatInfo", "mUseLegacyImageFormat" ]
}