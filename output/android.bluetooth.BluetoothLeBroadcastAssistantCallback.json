{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothLeBroadcastAssistantCallback.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothLeBroadcastAssistantCallback",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRegistered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackMap",
    "type" : "Map<BluetoothLeBroadcastAssistant.Callback, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "IBluetoothLeBroadcastAssistant",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void register(@NonNull Executor executor, @NonNull BluetoothLeBroadcastAssistant.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback user implementation of the {@link BluetoothLeBroadcastAssistant#Callback}\n     * @throws IllegalArgumentException if the same <var>callback<var> is already registered.\n     ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastAssistant#Callback", "java.util.concurrent.Executor" ]
  }, {
    "name" : "public void unregister(@NonNull BluetoothLeBroadcastAssistant.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * @param callback user implementation of the {@link BluetoothLeBroadcastAssistant#Callback}\n     * @throws IllegalArgumentException if <var>callback</var> was not registered before\n     ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastAssistant#Callback" ]
  }, {
    "name" : "public boolean isAtLeastOneCallbackRegistered()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if at least one callback is registered from this App\n     *\n     * @return true if at least one callback is registered\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onSearchStarted(int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSearchStartFailed(int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSearchStopped(int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSearchStopFailed(int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSourceFound(BluetoothLeBroadcastMetadata source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSourceAdded(BluetoothDevice sink, int sourceId, int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSourceAddFailed(BluetoothDevice sink, BluetoothLeBroadcastMetadata source, int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSourceModified(BluetoothDevice sink, int sourceId, int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSourceModifyFailed(BluetoothDevice sink, int sourceId, int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSourceRemoved(BluetoothDevice sink, int sourceId, int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSourceRemoveFailed(BluetoothDevice sink, int sourceId, int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onReceiveStateChanged(BluetoothDevice sink, int sourceId, BluetoothLeBroadcastReceiveState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSourceLost(int broadcastId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void register(@NonNull Executor executor, @NonNull BluetoothLeBroadcastAssistant.Callback callback)", "public void unregister(@NonNull BluetoothLeBroadcastAssistant.Callback callback)", "public boolean isAtLeastOneCallbackRegistered()", "public void onSearchStarted(int reason)", "public void onSearchStartFailed(int reason)", "public void onSearchStopped(int reason)", "public void onSearchStopFailed(int reason)", "public void onSourceFound(BluetoothLeBroadcastMetadata source)", "public void onSourceAdded(BluetoothDevice sink, int sourceId, int reason)", "public void onSourceAddFailed(BluetoothDevice sink, BluetoothLeBroadcastMetadata source, int reason)", "public void onSourceModified(BluetoothDevice sink, int sourceId, int reason)", "public void onSourceModifyFailed(BluetoothDevice sink, int sourceId, int reason)", "public void onSourceRemoved(BluetoothDevice sink, int sourceId, int reason)", "public void onSourceRemoveFailed(BluetoothDevice sink, int sourceId, int reason)", "public void onReceiveStateChanged(BluetoothDevice sink, int sourceId, BluetoothLeBroadcastReceiveState state)", "public void onSourceLost(int broadcastId)" ],
  "variableNames" : [ "TAG", "mIsRegistered", "mCallbackMap", "mAdapter" ]
}