{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/XPath.java",
  "packageName" : "org.apache.xpath",
  "className" : "XPath",
  "comment" : "\n * The XPath class wraps an expression object and provides general services \n * for execution of that expression.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_mainExp",
    "type" : "Expression",
    "comment" : " The top of the expression tree. \n   *  @serial ",
    "links" : [ ]
  }, {
    "name" : "m_funcTable",
    "type" : "FunctionTable",
    "comment" : "\n   * The function table for xpath build-in functions\n   ",
    "links" : [ ]
  }, {
    "name" : "m_patternString",
    "type" : "String",
    "comment" : " The pattern string, mainly kept around for diagnostic purposes.\n   *  @serial  ",
    "links" : [ ]
  }, {
    "name" : "SELECT",
    "type" : "int",
    "comment" : " Represents a select type expression. ",
    "links" : [ ]
  }, {
    "name" : "MATCH",
    "type" : "int",
    "comment" : " Represents a match type expression.  ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_MATCHES",
    "type" : "boolean",
    "comment" : " Set to true to get diagnostic messages about the result of \n   *  match pattern testing.  ",
    "links" : [ ]
  }, {
    "name" : "MATCH_SCORE_NONE",
    "type" : "double",
    "comment" : "\n   * The match score if no match is made.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "MATCH_SCORE_QNAME",
    "type" : "double",
    "comment" : "\n   * The match score if the pattern has the form\n   * of a QName optionally preceded by an @ character.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "MATCH_SCORE_NSWILD",
    "type" : "double",
    "comment" : "\n   * The match score if the pattern pattern has the form NCName:*.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "MATCH_SCORE_NODETEST",
    "type" : "double",
    "comment" : "\n   * The match score if the pattern consists of just a NodeTest.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "MATCH_SCORE_OTHER",
    "type" : "double",
    "comment" : "\n   * The match score if the pattern consists of something\n   * other than just a NodeTest or just a qname.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initFunctionTable()",
    "returnType" : "void",
    "comment" : "\n   * initial the function table\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getExpression()",
    "returnType" : "Expression",
    "comment" : "\n   * Get the raw Expression object that this class wraps.\n   *\n   *\n   * @return the raw Expression object, which should not normally be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame \n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list \n   * should be searched backwards for the first qualified name that \n   * corresponds to the variable reference qname.  The position of the \n   * QName in the vector from the start of the vector will be its position \n   * in the stack frame (but variables above the globalsTop value will need \n   * to be offset to the current stack frame).\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setExpression(Expression exp)",
    "returnType" : "void",
    "comment" : "\n   * Set the raw expression object for this object.\n   *\n   *\n   * @param exp the raw Expression object, which should not normally be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public SourceLocator getLocator()",
    "returnType" : "SourceLocator",
    "comment" : "\n   * Get the SourceLocator on the expression object.\n   *\n   *\n   * @return the SourceLocator on the expression object, which may be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getPatternString()",
    "returnType" : "String",
    "comment" : "\n   * Return the XPath string associated with this object.\n   *\n   *\n   * @return the XPath string associated with this object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt, org.w3c.dom.Node contextNode, PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Given an expression and a context, evaluate the XPath\n   * and return the result.\n   * \n   * @param xctxt The execution context.\n   * @param contextNode The node that \".\" expresses.\n   * @param namespaceContext The context in which namespaces in the\n   * XPath are supposed to be expanded.\n   *\n   * @return The result of the XPath or null if callbacks are used.\n   * @throws TransformerException thrown if\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws javax.xml.transform.TransformerException\n   * @xsl.usage experimental\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt, int contextNode, PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Given an expression and a context, evaluate the XPath\n   * and return the result.\n   * \n   * @param xctxt The execution context.\n   * @param contextNode The node that \".\" expresses.\n   * @param namespaceContext The context in which namespaces in the\n   * XPath are supposed to be expanded.\n   * \n   * @throws TransformerException thrown if the active ProblemListener decides\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws javax.xml.transform.TransformerException\n   * @xsl.usage experimental\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean bool(XPathContext xctxt, int contextNode, PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Given an expression and a context, evaluate the XPath\n   * and return the result.\n   * \n   * @param xctxt The execution context.\n   * @param contextNode The node that \".\" expresses.\n   * @param namespaceContext The context in which namespaces in the\n   * XPath are supposed to be expanded.\n   * \n   * @throws TransformerException thrown if the active ProblemListener decides\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws javax.xml.transform.TransformerException\n   * @xsl.usage experimental\n   ",
    "links" : [ ]
  }, {
    "name" : "public double getMatchScore(XPathContext xctxt, int context) throws javax.xml.transform.TransformerException",
    "returnType" : "double",
    "comment" : "\n   * Get the match score of the given node.\n   *\n   * @param xctxt XPath runtime context.\n   * @param context The current source tree context node.\n   * \n   * @return score, one of {@link #MATCH_SCORE_NODETEST},\n   * {@link #MATCH_SCORE_NONE}, {@link #MATCH_SCORE_OTHER}, \n   * or {@link #MATCH_SCORE_QNAME}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "#MATCH_SCORE_NODETEST", "#MATCH_SCORE_NONE", "#MATCH_SCORE_QNAME", "#MATCH_SCORE_OTHER" ]
  }, {
    "name" : "public void warn(XPathContext xctxt, int sourceNode, String msg, Object[] args) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Warn the user of an problem.\n   *\n   * @param xctxt The XPath runtime context.\n   * @param sourceNode Not used.\n   * @param msg An error msgkey that corresponds to one of the constants found \n   *            in {@link org.apache.xpath.res.XPATHErrorResources}, which is \n   *            a key for a format string.\n   * @param args An array of arguments represented in the format string, which \n   *             may be null.\n   *\n   * @throws TransformerException if the current ErrorListoner determines to \n   *                              throw an exception.\n   ",
    "links" : [ "org.apache.xpath.res.XPATHErrorResources" ]
  }, {
    "name" : "public void assertion(boolean b, String msg)",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an assertion error, and probably throw an\n   * exception.\n   *\n   * @param b  If false, a runtime exception will be thrown.\n   * @param msg The assertion message, which should be informative.\n   * \n   * @throws RuntimeException if the b argument is false.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(XPathContext xctxt, int sourceNode, String msg, Object[] args) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an error, and probably throw an\n   * exception.\n   *\n   * @param xctxt The XPath runtime context.\n   * @param sourceNode Not used.\n   * @param msg An error msgkey that corresponds to one of the constants found \n   *            in {@link org.apache.xpath.res.XPATHErrorResources}, which is \n   *            a key for a format string.\n   * @param args An array of arguments represented in the format string, which \n   *             may be null.\n   *\n   * @throws TransformerException if the current ErrorListoner determines to \n   *                              throw an exception.\n   ",
    "links" : [ "org.apache.xpath.res.XPATHErrorResources" ]
  }, {
    "name" : "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * This will traverse the heararchy, calling the visitor for \n   * each member.  If the called visitor method returns \n   * false, the subtree should not be called.\n   * \n   * @param owner The owner of the visitor, where that path may be \n   *              rewritten if needed.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initFunctionTable()", "public Expression getExpression()", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public void setExpression(Expression exp)", "public SourceLocator getLocator()", "public String getPatternString()", "public XObject execute(XPathContext xctxt, org.w3c.dom.Node contextNode, PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException", "public XObject execute(XPathContext xctxt, int contextNode, PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException", "public boolean bool(XPathContext xctxt, int contextNode, PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException", "public double getMatchScore(XPathContext xctxt, int context) throws javax.xml.transform.TransformerException", "public void warn(XPathContext xctxt, int sourceNode, String msg, Object[] args) throws javax.xml.transform.TransformerException", "public void assertion(boolean b, String msg)", "public void error(XPathContext xctxt, int sourceNode, String msg, Object[] args) throws javax.xml.transform.TransformerException", "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)" ],
  "variableNames" : [ "serialVersionUID", "m_mainExp", "m_funcTable", "m_patternString", "SELECT", "MATCH", "DEBUG_MATCHES", "MATCH_SCORE_NONE", "MATCH_SCORE_QNAME", "MATCH_SCORE_NSWILD", "MATCH_SCORE_NODETEST", "MATCH_SCORE_OTHER" ]
}