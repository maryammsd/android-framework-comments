{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/biometrics/BiometricManager.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "BiometricManager",
  "comment" : "\n * A class that contains biometric utilities. For authentication, see {@link BiometricPrompt}.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_SUCCESS",
    "type" : "int",
    "comment" : "\n     * No error detected.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_HW_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The hardware is unavailable. Try again later.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_NONE_ENROLLED",
    "type" : "int",
    "comment" : "\n     * The user does not have any biometrics enrolled.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_NO_HARDWARE",
    "type" : "int",
    "comment" : "\n     * There is no biometric hardware.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED",
    "type" : "int",
    "comment" : "\n     * A security vulnerability has been discovered and the sensor is unavailable until a\n     * security update has addressed this issue. This error can be received if for example,\n     * authentication was requested with {@link Authenticators#BIOMETRIC_STRONG}, but the\n     * sensor's strength can currently only meet {@link Authenticators#BIOMETRIC_WEAK}.\n     ",
    "links" : [ "#BIOMETRIC_WEAK", "#BIOMETRIC_STRONG" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAuthService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int canAuthenticate()",
    "returnType" : "int",
    "comment" : "\n     * Determine if biometrics can be used. In other words, determine if\n     * {@link BiometricPrompt} can be expected to be shown (hardware available, templates enrolled,\n     * user-enabled). This is the equivalent of {@link #canAuthenticate(int)} with\n     * {@link Authenticators#BIOMETRIC_WEAK}\n     *\n     * @return {@link #BIOMETRIC_ERROR_NONE_ENROLLED} if the user does not have any strong\n     *     biometrics enrolled, or {@link #BIOMETRIC_ERROR_HW_UNAVAILABLE} if none are currently\n     *     supported/enabled. Returns {@link #BIOMETRIC_SUCCESS} if a strong biometric can currently\n     *     be used (enrolled and available).\n     *\n     * @deprecated See {@link #canAuthenticate(int)}.\n     ",
    "links" : [ "#canAuthenticate(int)", "android.hardware.biometrics.BiometricPrompt", "#BIOMETRIC_ERROR_HW_UNAVAILABLE", "#BIOMETRIC_ERROR_NONE_ENROLLED", "#BIOMETRIC_WEAK", "#BIOMETRIC_SUCCESS" ]
  }, {
    "name" : "public int canAuthenticate(@Authenticators.Types int authenticators)",
    "returnType" : "int",
    "comment" : "\n     * Determine if any of the provided authenticators can be used. In other words, determine if\n     * {@link BiometricPrompt} can be expected to be shown (hardware available, templates enrolled,\n     * user-enabled).\n     *\n     * For biometric authenticators, determine if the device can currently authenticate with at\n     * least the requested strength. For example, invoking this API with\n     * {@link Authenticators#BIOMETRIC_WEAK} on a device that currently only has\n     * {@link Authenticators#BIOMETRIC_STRONG} enrolled will return {@link #BIOMETRIC_SUCCESS}.\n     *\n     * Invoking this API with {@link Authenticators#DEVICE_CREDENTIAL} can be used to determine\n     * if the user has a PIN/Pattern/Password set up.\n     *\n     * @param authenticators bit field consisting of constants defined in {@link Authenticators}.\n     *                       If multiple authenticators are queried, a logical OR will be applied.\n     *                       For example, if {@link Authenticators#DEVICE_CREDENTIAL} |\n     *                       {@link Authenticators#BIOMETRIC_STRONG} is queried and only\n     *                       {@link Authenticators#DEVICE_CREDENTIAL} is set up, this API will\n     *                       return {@link #BIOMETRIC_SUCCESS}\n     *\n     * @return {@link #BIOMETRIC_ERROR_NONE_ENROLLED} if the user does not have any of the\n     *     requested authenticators enrolled, or {@link #BIOMETRIC_ERROR_HW_UNAVAILABLE} if none are\n     *     currently supported/enabled. Returns {@link #BIOMETRIC_SUCCESS} if one of the requested\n     *     authenticators can currently be used (enrolled and available).\n     ",
    "links" : [ "android.hardware.biometrics.BiometricPrompt", "#DEVICE_CREDENTIAL", "#BIOMETRIC_ERROR_HW_UNAVAILABLE", "#BIOMETRIC_ERROR_NONE_ENROLLED", "#BIOMETRIC_WEAK", "#BIOMETRIC_STRONG", "#BIOMETRIC_SUCCESS", "Authenticators" ]
  }, {
    "name" : "public int canAuthenticate(int userId, @Authenticators.Types int authenticators)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledBiometrics(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @param userId\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerEnabledOnKeyguardCallback(IBiometricEnabledOnKeyguardCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Listens for changes to biometric eligibility on keyguard from user settings.\n     * @param callback\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setActiveUser(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the active user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetLockout(byte[] token)",
    "returnType" : "void",
    "comment" : "\n     * Reset the lockout when user authenticates with strong auth (e.g. PIN, pattern or password)\n     *\n     * @param token an opaque token returned by password confirmation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long[] getAuthenticatorIds()",
    "returnType" : "long[]",
    "comment" : "\n     * Get a list of AuthenticatorIDs for biometric authenticators which have 1) enrolled templates,\n     * and 2) meet the requirements for integrating with Keystore. The AuthenticatorIDs are known\n     * in Keystore land as SIDs, and are used during key generation.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "BIOMETRIC_SUCCESS", "BIOMETRIC_ERROR_HW_UNAVAILABLE", "BIOMETRIC_ERROR_NONE_ENROLLED", "BIOMETRIC_ERROR_NO_HARDWARE", "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED", "mContext", "mService" ],
  "methodNames" : [ "public int canAuthenticate()", "public int canAuthenticate(@Authenticators.Types int authenticators)", "public int canAuthenticate(int userId, @Authenticators.Types int authenticators)", "public boolean hasEnrolledBiometrics(int userId)", "public void registerEnabledOnKeyguardCallback(IBiometricEnabledOnKeyguardCallback callback)", "public void setActiveUser(int userId)", "public void resetLockout(byte[] token)", "public long[] getAuthenticatorIds()" ]
}