{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/BiometricManager.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "BiometricManager",
  "comment" : "\n * A class that contains biometric utilities. For authentication, see {@link BiometricPrompt}.\n ",
  "links" : [ "android.hardware.biometrics.BiometricPrompt" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_SUCCESS",
    "type" : "int",
    "comment" : "\n     * No error detected.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_HW_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The hardware is unavailable. Try again later.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_NONE_ENROLLED",
    "type" : "int",
    "comment" : "\n     * The user does not have any biometrics enrolled.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_NO_HARDWARE",
    "type" : "int",
    "comment" : "\n     * There is no biometric hardware.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED",
    "type" : "int",
    "comment" : "\n     * A security vulnerability has been discovered and the sensor is unavailable until a\n     * security update has addressed this issue. This error can be received if for example,\n     * authentication was requested with {@link Authenticators#BIOMETRIC_STRONG}, but the\n     * sensor's strength can currently only meet {@link Authenticators#BIOMETRIC_WEAK}.\n     ",
    "links" : [ "#BIOMETRIC_WEAK", "#BIOMETRIC_STRONG" ]
  }, {
    "name" : "BIOMETRIC_NO_AUTHENTICATION",
    "type" : "long",
    "comment" : "\n     * Returned from {@link BiometricManager#getLastAuthenticationTime(int)} when no matching\n     * successful authentication has been performed since boot.\n     ",
    "links" : [ "android.hardware.biometrics.BiometricManager#getLastAuthenticationTime(int)" ]
  }, {
    "name" : "GET_LAST_AUTH_TIME_ALLOWED_AUTHENTICATORS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ENROLL_REASON",
    "type" : "String",
    "comment" : "\n     * Enroll reason extra that can be used by settings to understand where this request came\n     * from.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAuthService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String authenticatorToStr(@Authenticators.Types int authenticatorType)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     * returns a string representation of an authenticator type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<SensorProperties> getSensorProperties()",
    "returnType" : "List<SensorProperties>",
    "comment" : "\n     * @return A list of {@link SensorProperties}\n     * @hide\n     ",
    "links" : [ "android.hardware.biometrics.SensorProperties" ]
  }, {
    "name" : "public BiometricTestSession createTestSession(int sensorId)",
    "returnType" : "BiometricTestSession",
    "comment" : "\n     * Retrieves a test session for BiometricManager/BiometricPrompt.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getUiPackage()",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the package where BiometricPrompt's UI is implemented.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int canAuthenticate()",
    "returnType" : "int",
    "comment" : "\n     * Determine if biometrics can be used. In other words, determine if\n     * {@link BiometricPrompt} can be expected to be shown (hardware available, templates enrolled,\n     * user-enabled). This is the equivalent of {@link #canAuthenticate(int)} with\n     * {@link Authenticators#BIOMETRIC_WEAK}\n     *\n     * @return {@link #BIOMETRIC_ERROR_NONE_ENROLLED} if the user does not have any strong\n     *     biometrics enrolled, or {@link #BIOMETRIC_ERROR_HW_UNAVAILABLE} if none are currently\n     *     supported/enabled. Returns {@link #BIOMETRIC_SUCCESS} if a strong biometric can currently\n     *     be used (enrolled and available).\n     *\n     * @deprecated See {@link #canAuthenticate(int)}.\n     ",
    "links" : [ "#canAuthenticate(int)", "android.hardware.biometrics.BiometricPrompt", "#BIOMETRIC_ERROR_HW_UNAVAILABLE", "#BIOMETRIC_ERROR_NONE_ENROLLED", "#BIOMETRIC_WEAK", "#BIOMETRIC_SUCCESS" ]
  }, {
    "name" : "public int canAuthenticate(@Authenticators.Types int authenticators)",
    "returnType" : "int",
    "comment" : "\n     * Determine if any of the provided authenticators can be used. In other words, determine if\n     * {@link BiometricPrompt} can be expected to be shown (hardware available, templates enrolled,\n     * user-enabled).\n     *\n     * For biometric authenticators, determine if the device can currently authenticate with at\n     * least the requested strength. For example, invoking this API with\n     * {@link Authenticators#BIOMETRIC_WEAK} on a device that currently only has\n     * {@link Authenticators#BIOMETRIC_STRONG} enrolled will return {@link #BIOMETRIC_SUCCESS}.\n     *\n     * Invoking this API with {@link Authenticators#DEVICE_CREDENTIAL} can be used to determine\n     * if the user has a PIN/Pattern/Password set up.\n     *\n     * @param authenticators bit field consisting of constants defined in {@link Authenticators}.\n     *                       If multiple authenticators are queried, a logical OR will be applied.\n     *                       For example, if {@link Authenticators#DEVICE_CREDENTIAL} |\n     *                       {@link Authenticators#BIOMETRIC_STRONG} is queried and only\n     *                       {@link Authenticators#DEVICE_CREDENTIAL} is set up, this API will\n     *                       return {@link #BIOMETRIC_SUCCESS}\n     *\n     * @return {@link #BIOMETRIC_ERROR_NONE_ENROLLED} if the user does not have any of the\n     *     requested authenticators enrolled, or {@link #BIOMETRIC_ERROR_HW_UNAVAILABLE} if none are\n     *     currently supported/enabled. Returns {@link #BIOMETRIC_SUCCESS} if one of the requested\n     *     authenticators can currently be used (enrolled and available).\n     ",
    "links" : [ "android.hardware.biometrics.BiometricPrompt", "#DEVICE_CREDENTIAL", "#BIOMETRIC_ERROR_HW_UNAVAILABLE", "#BIOMETRIC_ERROR_NONE_ENROLLED", "#BIOMETRIC_WEAK", "#BIOMETRIC_STRONG", "#BIOMETRIC_SUCCESS", "Authenticators" ]
  }, {
    "name" : "public int canAuthenticate(int userId, @Authenticators.Types int authenticators)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Strings getStrings(@Authenticators.Types int authenticators)",
    "returnType" : "Strings",
    "comment" : "\n     * Produces an instance of the {@link Strings} class, which provides localized strings for an\n     * application, given a set of allowed authenticator types.\n     *\n     * @param authenticators A bit field representing the types of {@link Authenticators} that may\n     *                       be used for authentication.\n     * @return A {@link Strings} collection for the given allowed authenticator types.\n     ",
    "links" : [ "Strings", "Authenticators" ]
  }, {
    "name" : "public boolean hasEnrolledBiometrics(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @param userId\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerEnabledOnKeyguardCallback(IBiometricEnabledOnKeyguardCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Listens for changes to biometric eligibility on keyguard from user settings.\n     * @param callback\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerAuthenticationStateListener(AuthenticationStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers listener for changes to biometric authentication state.\n     * Only sends callbacks for events that occur after the callback has been registered.\n     * @param listener Listener for changes to biometric authentication state\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterAuthenticationStateListener(AuthenticationStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters listener for changes to biometric authentication state.\n     * @param listener Listener for changes to biometric authentication state\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateAuthenticatorIds(int userId, int fromSensorId, @NonNull IInvalidationCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests all {@link Authenticators.Types#BIOMETRIC_STRONG} sensors to have their\n     * authenticatorId invalidated for the specified user. This happens when enrollments have been\n     * added on devices with multiple biometric sensors.\n     *\n     * @param userId userId that the authenticatorId should be invalidated for\n     * @param fromSensorId sensor that triggered the invalidation request\n     * @hide\n     ",
    "links" : [ "Authenticators.Types#BIOMETRIC_STRONG" ]
  }, {
    "name" : "public long[] getAuthenticatorIds()",
    "returnType" : "long[]",
    "comment" : "\n     * Get a list of AuthenticatorIDs for biometric authenticators which have 1) enrolled templates,\n     * and 2) meet the requirements for integrating with Keystore. The AuthenticatorIDs are known\n     * in Keystore land as SIDs, and are used during key generation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long[] getAuthenticatorIds(int userId)",
    "returnType" : "long[]",
    "comment" : "\n     * Get a list of AuthenticatorIDs for biometric authenticators which have 1) enrolled templates,\n     * and 2) meet the requirements for integrating with Keystore. The AuthenticatorIDs are known\n     * in Keystore land as SIDs, and are used during key generation.\n     *\n     * @param userId Android user ID for user to look up.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetLockoutTimeBound(IBinder token, String opPackageName, int fromSensorId, int userId, byte[] hardwareAuthToken)",
    "returnType" : "void",
    "comment" : "\n     * Requests all other biometric sensors to resetLockout. Note that this is a \"time bound\"\n     * See the {@link android.hardware.biometrics.fingerprint.ISession#resetLockout(int,\n     * HardwareAuthToken)} and {@link android.hardware.biometrics.face.ISession#resetLockout(int,\n     * HardwareAuthToken)} documentation for complete details.\n     *\n     * @param token A binder from the caller, for the service to linkToDeath\n     * @param opPackageName Caller's package name\n     * @param fromSensorId The originating sensor that just authenticated. Note that this MUST\n     *                     be a sensor that meets {@link Authenticators#BIOMETRIC_STRONG} strength.\n     *                     The strength will also be enforced on the BiometricService side.\n     * @param userId The user that authentication succeeded for, and also the user that resetLockout\n     *               should be applied to.\n     * @param hardwareAuthToken A valid HAT generated upon successful biometric authentication. Note\n     *                          that it is not necessary for the HAT to contain a challenge.\n     * @hide\n     ",
    "links" : [ "android.hardware.biometrics.fingerprint.ISession#resetLockout(int", "android.hardware.biometrics.face.ISession#resetLockout(int", "#BIOMETRIC_STRONG" ]
  }, {
    "name" : "public void resetLockout(int userId, byte[] hardwareAuthToken)",
    "returnType" : "void",
    "comment" : "\n     * Notifies AuthService that keyguard has been dismissed for the given userId.\n     *\n     * @param userId\n     * @param hardwareAuthToken\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAuthenticationTime(@BiometricManager.Authenticators.Types int authenticators)",
    "returnType" : "long",
    "comment" : "\n     * Gets the last time the user successfully authenticated using one of the given authenticators.\n     * The returned value is time in\n     * {@link android.os.SystemClock#elapsedRealtime SystemClock.elapsedRealtime()} (time since\n     * boot, including sleep).\n     * <p>\n     * {@link BiometricManager#BIOMETRIC_NO_AUTHENTICATION} is returned in the case where there\n     * has been no successful authentication using any of the given authenticators since boot.\n     * <p>\n     * Currently, only {@link Authenticators#DEVICE_CREDENTIAL} and\n     * {@link Authenticators#BIOMETRIC_STRONG} are accepted. {@link IllegalArgumentException} will\n     * be thrown if {@code authenticators} contains other authenticator types.\n     * <p>\n     * Note that this may return successful authentication times even if the device is currently\n     * locked. You may use {@link KeyguardManager#isDeviceLocked()} to determine if the device\n     * is unlocked or not. Additionally, this method may return valid times for an authentication\n     * method that is no longer available. For instance, if the user unlocked the device with a\n     * {@link Authenticators#BIOMETRIC_STRONG} authenticator but then deleted that authenticator\n     * (e.g., fingerprint data), this method will still return the time of that unlock for\n     * {@link Authenticators#BIOMETRIC_STRONG} if it is the most recent successful event. The caveat\n     * is that {@link BiometricManager#BIOMETRIC_NO_AUTHENTICATION} will be returned if the device\n     * no longer has a secure lock screen at all, even if there were successful authentications\n     * performed before the lock screen was made insecure.\n     *\n     * @param authenticators bit field consisting of constants defined in {@link Authenticators}.\n     * @return the time of last authentication or\n     * {@link BiometricManager#BIOMETRIC_NO_AUTHENTICATION}\n     * @throws IllegalArgumentException if {@code authenticators} contains values other than\n     * {@link Authenticators#DEVICE_CREDENTIAL} and {@link Authenticators#BIOMETRIC_STRONG} or is\n     * 0.\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime", "#DEVICE_CREDENTIAL", "android.hardware.biometrics.BiometricManager#BIOMETRIC_NO_AUTHENTICATION", "android.app.KeyguardManager#isDeviceLocked()", "#BIOMETRIC_STRONG", "IllegalArgumentException", "Authenticators" ]
  } ],
  "methodNames" : [ "public static String authenticatorToStr(@Authenticators.Types int authenticatorType)", "public List<SensorProperties> getSensorProperties()", "public BiometricTestSession createTestSession(int sensorId)", "public String getUiPackage()", "public int canAuthenticate()", "public int canAuthenticate(@Authenticators.Types int authenticators)", "public int canAuthenticate(int userId, @Authenticators.Types int authenticators)", "public Strings getStrings(@Authenticators.Types int authenticators)", "public boolean hasEnrolledBiometrics(int userId)", "public void registerEnabledOnKeyguardCallback(IBiometricEnabledOnKeyguardCallback callback)", "public void registerAuthenticationStateListener(AuthenticationStateListener listener)", "public void unregisterAuthenticationStateListener(AuthenticationStateListener listener)", "public void invalidateAuthenticatorIds(int userId, int fromSensorId, @NonNull IInvalidationCallback callback)", "public long[] getAuthenticatorIds()", "public long[] getAuthenticatorIds(int userId)", "public void resetLockoutTimeBound(IBinder token, String opPackageName, int fromSensorId, int userId, byte[] hardwareAuthToken)", "public void resetLockout(int userId, byte[] hardwareAuthToken)", "public long getLastAuthenticationTime(@BiometricManager.Authenticators.Types int authenticators)" ],
  "variableNames" : [ "TAG", "BIOMETRIC_SUCCESS", "BIOMETRIC_ERROR_HW_UNAVAILABLE", "BIOMETRIC_ERROR_NONE_ENROLLED", "BIOMETRIC_ERROR_NO_HARDWARE", "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED", "BIOMETRIC_NO_AUTHENTICATION", "GET_LAST_AUTH_TIME_ALLOWED_AUTHENTICATORS", "EXTRA_ENROLL_REASON", "mContext", "mService" ]
}