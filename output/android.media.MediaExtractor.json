{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaExtractor.java",
  "packageName" : "android.media",
  "className" : "MediaExtractor",
  "comment" : "\n * MediaExtractor facilitates extraction of demuxed, typically encoded,  media data\n * from a data source.\n * <p>It is generally used like this:\n * <pre>\n * MediaExtractor extractor = new MediaExtractor();\n * extractor.setDataSource(...);\n * int numTracks = extractor.getTrackCount();\n * for (int i = 0; i &lt; numTracks; ++i) {\n *   MediaFormat format = extractor.getTrackFormat(i);\n *   String mime = format.getString(MediaFormat.KEY_MIME);\n *   if (weAreInterestedInThisTrack) {\n *     extractor.selectTrack(i);\n *   }\n * }\n * ByteBuffer inputBuffer = ByteBuffer.allocate(...)\n * while (extractor.readSampleData(inputBuffer, ...) &gt;= 0) {\n *   int trackIndex = extractor.getSampleTrackIndex();\n *   long presentationTimeUs = extractor.getSampleTime();\n *   ...\n *   extractor.advance();\n * }\n *\n * extractor.release();\n * extractor = null;\n * </pre>\n *\n * <p>This class requires the {@link android.Manifest.permission#INTERNET} permission\n * when used with network-based content.\n ",
  "variables" : [ {
    "name" : "SEEK_TO_PREVIOUS_SYNC",
    "type" : "int",
    "comment" : "\n     * If possible, seek to a sync sample at or before the specified time\n     ",
    "links" : [ ]
  }, {
    "name" : "SEEK_TO_NEXT_SYNC",
    "type" : "int",
    "comment" : "\n     * If possible, seek to a sync sample at or after the specified time\n     ",
    "links" : [ ]
  }, {
    "name" : "SEEK_TO_CLOSEST_SYNC",
    "type" : "int",
    "comment" : "\n     * If possible, seek to the sync sample closest to the specified time\n     ",
    "links" : [ ]
  }, {
    "name" : "SAMPLE_FLAG_SYNC",
    "type" : "int",
    "comment" : "\n     * The sample is a sync sample (or in {@link MediaCodec}'s terminology\n     * it is a key frame.)\n     *\n     * @see MediaCodec#BUFFER_FLAG_KEY_FRAME\n     ",
    "links" : [ "android.media.MediaCodec" ]
  }, {
    "name" : "SAMPLE_FLAG_ENCRYPTED",
    "type" : "int",
    "comment" : "\n     * The sample is (at least partially) encrypted, see also the documentation\n     * for {@link android.media.MediaCodec#queueSecureInputBuffer}\n     ",
    "links" : [ "android.media.MediaCodec#queueSecureInputBuffer" ]
  }, {
    "name" : "SAMPLE_FLAG_PARTIAL_FRAME",
    "type" : "int",
    "comment" : "\n     * This indicates that the buffer only contains part of a frame,\n     * and the decoder should batch the data until a buffer without\n     * this flag appears before decoding the frame.\n     *\n     * @see MediaCodec#BUFFER_FLAG_PARTIAL_FRAME\n     ",
    "links" : [ ]
  }, {
    "name" : "mMediaCas",
    "type" : "MediaCas",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final native void setDataSource(@NonNull MediaDataSource dataSource) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the data source (MediaDataSource) to use.\n     *\n     * @param dataSource the MediaDataSource for the media you want to extract from\n     *\n     * @throws IllegalArgumentException if dataSource is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setDataSource(@NonNull Context context, @NonNull Uri uri, @Nullable Map<String, String> headers) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the data source as a content Uri.\n     *\n     * @param context the Context to use when resolving the Uri\n     * @param uri the Content URI of the data you want to extract from.\n     *\n     * <p>When <code>uri</code> refers to a network file the\n     * {@link android.Manifest.permission#INTERNET} permission is required.\n     *\n     * @param headers the headers to be sent together with the request for the data.\n     *        This can be {@code null} if no specific headers are to be sent with the\n     *        request.\n     ",
    "links" : [ "android.Manifest.permission#INTERNET" ]
  }, {
    "name" : "public final void setDataSource(@NonNull String path, @Nullable Map<String, String> headers) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the data source (file-path or http URL) to use.\n     *\n     * @param path the path of the file, or the http URL\n     *\n     * <p>When <code>path</code> refers to a network file the\n     * {@link android.Manifest.permission#INTERNET} permission is required.\n     *\n     * @param headers the headers associated with the http request for the stream you want to play.\n     *        This can be {@code null} if no specific headers are to be sent with the\n     *        request.\n     ",
    "links" : [ "android.Manifest.permission#INTERNET" ]
  }, {
    "name" : "private final native void nativeSetDataSource(@NonNull IBinder httpServiceBinder, @NonNull String path, @Nullable String[] keys, @Nullable String[] values) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setDataSource(@NonNull String path) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the data source (file-path or http URL) to use.\n     *\n     * @param path the path of the file, or the http URL of the stream\n     *\n     * <p>When <code>path</code> refers to a local file, the file may actually be opened by a\n     * process other than the calling application.  This implies that the pathname\n     * should be an absolute path (as any other process runs with unspecified current working\n     * directory), and that the pathname should reference a world-readable file.\n     * As an alternative, the application could first open the file for reading,\n     * and then use the file descriptor form {@link #setDataSource(FileDescriptor)}.\n     *\n     * <p>When <code>path</code> refers to a network file the\n     * {@link android.Manifest.permission#INTERNET} permission is required.\n     ",
    "links" : [ "#setDataSource(FileDescriptor)", "android.Manifest.permission#INTERNET" ]
  }, {
    "name" : "public final void setDataSource(@NonNull AssetFileDescriptor afd) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Sets the data source (AssetFileDescriptor) to use. It is the caller's\n     * responsibility to close the file descriptor. It is safe to do so as soon\n     * as this call returns.\n     *\n     * @param afd the AssetFileDescriptor for the file you want to extract from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setDataSource(@NonNull FileDescriptor fd) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the data source (FileDescriptor) to use. It is the caller's responsibility\n     * to close the file descriptor. It is safe to do so as soon as this call returns.\n     *\n     * @param fd the FileDescriptor for the file you want to extract from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void setDataSource(@NonNull FileDescriptor fd, long offset, long length) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the data source (FileDescriptor) to use.  The FileDescriptor must be\n     * seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility\n     * to close the file descriptor. It is safe to do so as soon as this call returns.\n     *\n     * @param fd the FileDescriptor for the file you want to extract from.\n     * @param offset the offset into the file where the data to be extracted starts, in bytes\n     * @param length the length in bytes of the data to be extracted\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setMediaCas(@NonNull MediaCas mediaCas)",
    "returnType" : "void",
    "comment" : "\n     * Sets the MediaCas instance to use. This should be called after a\n     * successful setDataSource() if at least one track reports mime type\n     * of {@link android.media.MediaFormat#MIMETYPE_AUDIO_SCRAMBLED}\n     * or {@link android.media.MediaFormat#MIMETYPE_VIDEO_SCRAMBLED}.\n     * Stream parsing will not proceed until a valid MediaCas object\n     * is provided.\n     *\n     * @param mediaCas the MediaCas object to use.\n     ",
    "links" : [ "android.media.MediaFormat#MIMETYPE_VIDEO_SCRAMBLED", "android.media.MediaFormat#MIMETYPE_AUDIO_SCRAMBLED" ]
  }, {
    "name" : "private final native void nativeSetMediaCas(@NonNull IHwBinder casBinder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ArrayList<Byte> toByteArray(@NonNull byte[] data)",
    "returnType" : "ArrayList<Byte>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CasInfo getCasInfo(int index)",
    "returnType" : "CasInfo",
    "comment" : "\n     * Retrieves the information about the conditional access system used to scramble\n     * a track.\n     *\n     * @param index of the track.\n     * @return an {@link CasInfo} object describing the conditional access system.\n     ",
    "links" : [ "CasInfo" ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final native void release()",
    "returnType" : "void",
    "comment" : "\n     * Make sure you call this when you're done to free up any resources\n     * instead of relying on the garbage collector to do this for you at\n     * some point in the future.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native int getTrackCount()",
    "returnType" : "int",
    "comment" : "\n     * Count the number of tracks found in the data source.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DrmInitData getDrmInitData()",
    "returnType" : "DrmInitData",
    "comment" : "\n     * Extract DRM initialization data if it exists\n     *\n     * @return DRM initialization data in the content, or {@code null}\n     * if no recognizable DRM format is found;\n     * @see DrmInitData\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AudioPresentation> getAudioPresentations(int trackIndex)",
    "returnType" : "List<AudioPresentation>",
    "comment" : "\n     * Get the list of available audio presentations for the track.\n     * @param trackIndex index of the track.\n     * @return a list of available audio presentations for a given valid audio track index.\n     * The list will be empty if the source does not contain any audio presentations.\n     ",
    "links" : [ ]
  }, {
    "name" : "private native List<AudioPresentation> native_getAudioPresentations(int trackIndex)",
    "returnType" : "List<AudioPresentation>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<UUID, byte[]> getPsshInfo()",
    "returnType" : "Map<UUID, byte[]>",
    "comment" : "\n     * Get the PSSH info if present.\n     * @return a map of uuid-to-bytes, with the uuid specifying\n     * the crypto scheme, and the bytes being the data specific to that scheme.\n     * This can be {@code null} if the source does not contain PSSH info.\n     ",
    "links" : [ ]
  }, {
    "name" : "private native Map<String, Object> getFileFormatNative()",
    "returnType" : "Map<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MediaFormat getTrackFormat(int index)",
    "returnType" : "MediaFormat",
    "comment" : "\n     * Get the track format at the specified index.\n     *\n     * More detail on the representation can be found at {@link android.media.MediaCodec}\n     * <p>\n     * The following table summarizes support for format keys across android releases:\n     *\n     * <table style=\"width: 0%\">\n     *  <thead>\n     *   <tr>\n     *    <th rowspan=2>OS Version(s)</th>\n     *    <td colspan=3>{@code MediaFormat} keys used for</th>\n     *   </tr><tr>\n     *    <th>All Tracks</th>\n     *    <th>Audio Tracks</th>\n     *    <th>Video Tracks</th>\n     *   </tr>\n     *  </thead>\n     *  <tbody>\n     *   <tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#JELLY_BEAN}</td>\n     *    <td rowspan=8>{@link MediaFormat#KEY_MIME},<br>\n     *        {@link MediaFormat#KEY_DURATION},<br>\n     *        {@link MediaFormat#KEY_MAX_INPUT_SIZE}</td>\n     *    <td rowspan=5>{@link MediaFormat#KEY_SAMPLE_RATE},<br>\n     *        {@link MediaFormat#KEY_CHANNEL_COUNT},<br>\n     *        {@link MediaFormat#KEY_CHANNEL_MASK},<br>\n     *        gapless playback information<sup>.mp3, .mp4</sup>,<br>\n     *        {@link MediaFormat#KEY_IS_ADTS}<sup>AAC if streaming</sup>,<br>\n     *        codec-specific data<sup>AAC, Vorbis</sup></td>\n     *    <td rowspan=2>{@link MediaFormat#KEY_WIDTH},<br>\n     *        {@link MediaFormat#KEY_HEIGHT},<br>\n     *        codec-specific data<sup>AVC, MPEG4</sup></td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}</td>\n     *    <td rowspan=3>as above, plus<br>\n     *        Pixel aspect ratio information<sup>AVC, *</sup></td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#KITKAT}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#KITKAT_WATCH}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP}</td>\n     *    <td rowspan=2>as above, plus<br>\n     *        {@link MediaFormat#KEY_BIT_RATE}<sup>AAC</sup>,<br>\n     *        codec-specific data<sup>Opus</sup></td>\n     *    <td rowspan=2>as above, plus<br>\n     *        {@link MediaFormat#KEY_ROTATION}<sup>.mp4</sup>,<br>\n     *        {@link MediaFormat#KEY_BIT_RATE}<sup>MPEG4</sup>,<br>\n     *        codec-specific data<sup>HEVC</sup></td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#M}</td>\n     *    <td>as above, plus<br>\n     *        gapless playback information<sup>Opus</sup></td>\n     *    <td>as above, plus<br>\n     *        {@link MediaFormat#KEY_FRAME_RATE} (integer)</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#N}</td>\n     *    <td>as above, plus<br>\n     *        {@link MediaFormat#KEY_TRACK_ID},<br>\n     *        <!-- {link MediaFormat#KEY_MAX_BIT_RATE}<sup>#, .mp4</sup>,<br> -->\n     *        {@link MediaFormat#KEY_BIT_RATE}<sup>#, .mp4</sup></td>\n     *    <td>as above, plus<br>\n     *        {@link MediaFormat#KEY_PCM_ENCODING},<br>\n     *        {@link MediaFormat#KEY_PROFILE}<sup>AAC</sup></td>\n     *    <td>as above, plus<br>\n     *        {@link MediaFormat#KEY_HDR_STATIC_INFO}<sup>#, .webm</sup>,<br>\n     *        {@link MediaFormat#KEY_COLOR_STANDARD}<sup>#</sup>,<br>\n     *        {@link MediaFormat#KEY_COLOR_TRANSFER}<sup>#</sup>,<br>\n     *        {@link MediaFormat#KEY_COLOR_RANGE}<sup>#</sup>,<br>\n     *        {@link MediaFormat#KEY_PROFILE}<sup>MPEG2, H.263, MPEG4, AVC, HEVC, VP9</sup>,<br>\n     *        {@link MediaFormat#KEY_LEVEL}<sup>H.263, MPEG4, AVC, HEVC, VP9</sup>,<br>\n     *        codec-specific data<sup>VP9</sup></td>\n     *   </tr>\n     *   <tr>\n     *    <td colspan=4>\n     *     <p class=note><strong>Notes:</strong><br>\n     *      #: container-specified value only.<br>\n     *      .mp4, .webm&hellip;: for listed containers<br>\n     *      MPEG4, AAC&hellip;: for listed codecs\n     *    </td>\n     *   </tr><tr>\n     *    <td colspan=4>\n     *     <p class=note>Note that that level information contained in the container many times\n     *     does not match the level of the actual bitstream. You may want to clear the level using\n     *     {@code MediaFormat.setString(KEY_LEVEL, null)} before using the track format to find a\n     *     decoder that can play back a particular track.\n     *    </td>\n     *   </tr><tr>\n     *    <td colspan=4>\n     *     <p class=note><strong>*Pixel (sample) aspect ratio</strong> is returned in the following\n     *     keys. The display width can be calculated for example as:\n     *     <p align=center>\n     *     display-width = display-height * crop-width / crop-height * sar-width / sar-height\n     *    </td>\n     *   </tr><tr>\n     *    <th>Format Key</th><th>Value Type</th><th colspan=2>Description</th>\n     *   </tr><tr>\n     *    <td>{@code \"sar-width\"}</td><td>Integer</td><td colspan=2>Pixel aspect ratio width</td>\n     *   </tr><tr>\n     *    <td>{@code \"sar-height\"}</td><td>Integer</td><td colspan=2>Pixel aspect ratio height</td>\n     *   </tr>\n     *  </tbody>\n     * </table>\n     *\n     ",
    "links" : [ "android.media.MediaFormat#KEY_MAX_INPUT_SIZE", "android.media.MediaFormat#KEY_PCM_ENCODING", "android.media.MediaFormat#KEY_SAMPLE_RATE", "android.media.MediaFormat#KEY_CHANNEL_COUNT", "android.media.MediaFormat#KEY_BIT_RATE", "android.media.MediaFormat#KEY_CHANNEL_MASK", "android.media.MediaFormat#KEY_COLOR_RANGE", "android.os.Build.VERSION_CODES#KITKAT_WATCH", "android.os.Build.VERSION_CODES#N", "android.os.Build.VERSION_CODES#M", "android.media.MediaFormat#KEY_ROTATION", "android.media.MediaFormat#KEY_WIDTH", "android.media.MediaFormat#KEY_MIME", "android.media.MediaFormat#KEY_IS_ADTS", "android.os.Build.VERSION_CODES#LOLLIPOP_MR1", "android.media.MediaFormat#KEY_HEIGHT", "android.os.Build.VERSION_CODES#LOLLIPOP", "android.media.MediaFormat#KEY_COLOR_TRANSFER", "android.media.MediaFormat#KEY_DURATION", "android.os.Build.VERSION_CODES#KITKAT", "android.media.MediaFormat#KEY_PROFILE", "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "android.media.MediaFormat#KEY_FRAME_RATE", "android.media.MediaFormat#KEY_HDR_STATIC_INFO", "android.media.MediaFormat#KEY_LEVEL", "android.media.MediaCodec", "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "android.media.MediaFormat#KEY_COLOR_STANDARD", "android.os.Build.VERSION_CODES#JELLY_BEAN", "android.media.MediaFormat#KEY_TRACK_ID" ]
  }, {
    "name" : "private native Map<String, Object> getTrackFormatNative(int index)",
    "returnType" : "Map<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public native void selectTrack(int index)",
    "returnType" : "void",
    "comment" : "\n     * Subsequent calls to {@link #readSampleData}, {@link #getSampleTrackIndex} and\n     * {@link #getSampleTime} only retrieve information for the subset of tracks\n     * selected.\n     * Selecting the same track multiple times has no effect, the track is\n     * only selected once.\n     ",
    "links" : [ "#readSampleData", "#getSampleTime", "#getSampleTrackIndex" ]
  }, {
    "name" : "public native void unselectTrack(int index)",
    "returnType" : "void",
    "comment" : "\n     * Subsequent calls to {@link #readSampleData}, {@link #getSampleTrackIndex} and\n     * {@link #getSampleTime} only retrieve information for the subset of tracks\n     * selected.\n     ",
    "links" : [ "#readSampleData", "#getSampleTime", "#getSampleTrackIndex" ]
  }, {
    "name" : "public native void seekTo(long timeUs, @SeekMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * All selected tracks seek near the requested time according to the\n     * specified mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean advance()",
    "returnType" : "boolean",
    "comment" : "\n     * Advance to the next sample. Returns false if no more sample data\n     * is available (end of stream).\n     *\n     * When extracting a local file, the behaviors of {@link #advance} and\n     * {@link #readSampleData} are undefined in presence of concurrent\n     * writes to the same local file; more specifically, end of stream\n     * could be signalled earlier than expected.\n     ",
    "links" : [ "#readSampleData", "#advance" ]
  }, {
    "name" : "public native int readSampleData(@NonNull ByteBuffer byteBuf, int offset)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the current encoded sample and store it in the byte buffer\n     * starting at the given offset.\n     * <p>\n     * <b>Note:</b>As of API 21, on success the position and limit of\n     * {@code byteBuf} is updated to point to the data just read.\n     * @param byteBuf the destination byte buffer\n     * @return the sample size (or -1 if no more samples are available).\n     ",
    "links" : [ ]
  }, {
    "name" : "public native int getSampleTrackIndex()",
    "returnType" : "int",
    "comment" : "\n     * Returns the track index the current sample originates from (or -1\n     * if no more samples are available)\n     ",
    "links" : [ ]
  }, {
    "name" : "public native long getSampleTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current sample's presentation time in microseconds.\n     * or -1 if no more samples are available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native long getSampleSize()",
    "returnType" : "long",
    "comment" : "\n     * @return size of the current sample in bytes or -1 if no more\n     * samples are available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native int getSampleFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current sample's flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean getSampleCryptoInfo(@NonNull MediaCodec.CryptoInfo info)",
    "returnType" : "boolean",
    "comment" : "\n     * If the sample flags indicate that the current sample is at least\n     * partially encrypted, this call returns relevant information about\n     * the structure of the sample data required for decryption.\n     * @param info The android.media.MediaCodec.CryptoInfo structure\n     *             to be filled in.\n     * @return true iff the sample flags contain {@link #SAMPLE_FLAG_ENCRYPTED}\n     ",
    "links" : [ "#SAMPLE_FLAG_ENCRYPTED" ]
  }, {
    "name" : "public native long getCachedDuration()",
    "returnType" : "long",
    "comment" : "\n     * Returns an estimate of how much data is presently cached in memory\n     * expressed in microseconds. Returns -1 if that information is unavailable\n     * or not applicable (no cache).\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean hasCacheReachedEndOfStream()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff we are caching data and the cache has reached the\n     * end of the data stream (for now, a future seek may of course restart\n     * the fetching of data).\n     * This API only returns a meaningful result if {@link #getCachedDuration}\n     * indicates the presence of a cache, i.e. does NOT return -1.\n     ",
    "links" : [ "#getCachedDuration" ]
  }, {
    "name" : "public PersistableBundle getMetrics()",
    "returnType" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native PersistableBundle native_getMetrics()",
    "returnType" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final native void native_init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_setup()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "SEEK_TO_PREVIOUS_SYNC", "SEEK_TO_NEXT_SYNC", "SEEK_TO_CLOSEST_SYNC", "SAMPLE_FLAG_SYNC", "SAMPLE_FLAG_ENCRYPTED", "SAMPLE_FLAG_PARTIAL_FRAME", "mMediaCas", "mNativeContext" ],
  "methodNames" : [ "public final native void setDataSource(@NonNull MediaDataSource dataSource) throws IOException", "public final void setDataSource(@NonNull Context context, @NonNull Uri uri, @Nullable Map<String, String> headers) throws IOException", "public final void setDataSource(@NonNull String path, @Nullable Map<String, String> headers) throws IOException", "private final native void nativeSetDataSource(@NonNull IBinder httpServiceBinder, @NonNull String path, @Nullable String[] keys, @Nullable String[] values) throws IOException", "public final void setDataSource(@NonNull String path) throws IOException", "public final void setDataSource(@NonNull AssetFileDescriptor afd) throws IOException, IllegalArgumentException, IllegalStateException", "public final void setDataSource(@NonNull FileDescriptor fd) throws IOException", "public final native void setDataSource(@NonNull FileDescriptor fd, long offset, long length) throws IOException", "public final void setMediaCas(@NonNull MediaCas mediaCas)", "private final native void nativeSetMediaCas(@NonNull IHwBinder casBinder)", "private ArrayList<Byte> toByteArray(@NonNull byte[] data)", "public CasInfo getCasInfo(int index)", "protected void finalize()", "public final native void release()", "public final native int getTrackCount()", "public DrmInitData getDrmInitData()", "public List<AudioPresentation> getAudioPresentations(int trackIndex)", "private native List<AudioPresentation> native_getAudioPresentations(int trackIndex)", "public Map<UUID, byte[]> getPsshInfo()", "private native Map<String, Object> getFileFormatNative()", "public MediaFormat getTrackFormat(int index)", "private native Map<String, Object> getTrackFormatNative(int index)", "public native void selectTrack(int index)", "public native void unselectTrack(int index)", "public native void seekTo(long timeUs, @SeekMode int mode)", "public native boolean advance()", "public native int readSampleData(@NonNull ByteBuffer byteBuf, int offset)", "public native int getSampleTrackIndex()", "public native long getSampleTime()", "public native long getSampleSize()", "public native int getSampleFlags()", "public native boolean getSampleCryptoInfo(@NonNull MediaCodec.CryptoInfo info)", "public native long getCachedDuration()", "public native boolean hasCacheReachedEndOfStream()", "public PersistableBundle getMetrics()", "private native PersistableBundle native_getMetrics()", "private static final native void native_init()", "private final native void native_setup()", "private final native void native_finalize()" ]
}