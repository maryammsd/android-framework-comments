{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/Driver.java",
  "packageName" : "java.sql",
  "className" : "Driver",
  "comment" : "\n * The interface that every driver class must implement.\n * <P>The Java SQL framework allows for multiple database drivers.\n *\n * <P>Each driver should supply a class that implements\n * the Driver interface.\n *\n * <P>The DriverManager will try to load as many drivers as it can\n * find and then for any given connection request, it will ask each\n * driver in turn to try to connect to the target URL.\n *\n * <P>It is strongly recommended that each Driver class should be\n * small and standalone so that the Driver class can be loaded and\n * queried without bringing in vast quantities of supporting code.\n *\n * <P>When a Driver class is loaded, it should create an instance of\n * itself and register it with the DriverManager. This means that a\n * user can load and register a driver by calling\n * <pre>\n *   <code>Class.forName(\"foo.bah.Driver\")</code>\n * </pre>\n *\n * @see DriverManager\n * @see Connection\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Connection connect(String url, java.util.Properties info) throws SQLException",
    "returnType" : "Connection",
    "comment" : "\n     * Attempts to make a database connection to the given URL.\n     * The driver should return \"null\" if it realizes it is the wrong kind\n     * of driver to connect to the given URL.  This will be common, as when\n     * the JDBC driver manager is asked to connect to a given URL it passes\n     * the URL to each loaded driver in turn.\n     *\n     * <P>The driver should throw an <code>SQLException</code> if it is the right\n     * driver to connect to the given URL but has trouble connecting to\n     * the database.\n     *\n     * <P>The <code>java.util.Properties</code> argument can be used to pass\n     * arbitrary string tag/value pairs as connection arguments.\n     * Normally at least \"user\" and \"password\" properties should be\n     * included in the <code>Properties</code> object.\n     *\n     * @param url the URL of the database to which to connect\n     * @param info a list of arbitrary string tag/value pairs as\n     * connection arguments. Normally at least a \"user\" and\n     * \"password\" property should be included.\n     * @return a <code>Connection</code> object that represents a\n     *         connection to the URL\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean acceptsURL(String url) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the driver thinks that it can open a connection\n     * to the given URL.  Typically drivers will return <code>true</code> if they\n     * understand the subprotocol specified in the URL and <code>false</code> if\n     * they do not.\n     *\n     * @param url the URL of the database\n     * @return <code>true</code> if this driver understands the given URL;\n     *         <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " DriverPropertyInfo[] getPropertyInfo(String url, java.util.Properties info) throws SQLException",
    "returnType" : "DriverPropertyInfo[]",
    "comment" : "\n     * Gets information about the possible properties for this driver.\n     * <P>\n     * The <code>getPropertyInfo</code> method is intended to allow a generic\n     * GUI tool to discover what properties it should prompt\n     * a human for in order to get\n     * enough information to connect to a database.  Note that depending on\n     * the values the human has supplied so far, additional values may become\n     * necessary, so it may be necessary to iterate though several calls\n     * to the <code>getPropertyInfo</code> method.\n     *\n     * @param url the URL of the database to which to connect\n     * @param info a proposed list of tag/value pairs that will be sent on\n     *          connect open\n     * @return an array of <code>DriverPropertyInfo</code> objects describing\n     *          possible properties.  This array may be an empty array if\n     *          no properties are required.\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMajorVersion()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the driver's major version number. Initially this should be 1.\n     *\n     * @return this driver's major version number\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMinorVersion()",
    "returnType" : "int",
    "comment" : "\n     * Gets the driver's minor version number. Initially this should be 0.\n     * @return this driver's minor version number\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean jdbcCompliant()",
    "returnType" : "boolean",
    "comment" : "\n     * Reports whether this driver is a genuine JDBC\n     * Compliant<sup><font size=-2>TM</font></sup> driver.\n     * A driver may only report <code>true</code> here if it passes the JDBC\n     * compliance tests; otherwise it is required to return <code>false</code>.\n     * <P>\n     * JDBC compliance requires full support for the JDBC API and full support\n     * for SQL 92 Entry Level.  It is expected that JDBC compliant drivers will\n     * be available for all the major commercial databases.\n     * <P>\n     * This method is not intended to encourage the development of non-JDBC\n     * compliant drivers, but is a recognition of the fact that some vendors\n     * are interested in using the JDBC API and framework for lightweight\n     * databases that do not support full database functionality, or for\n     * special databases such as document information retrieval where a SQL\n     * implementation may not be feasible.\n     * @return <code>true</code> if this driver is JDBC Compliant; <code>false</code>\n     *         otherwise\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Connection connect(String url, java.util.Properties info) throws SQLException", " boolean acceptsURL(String url) throws SQLException", " DriverPropertyInfo[] getPropertyInfo(String url, java.util.Properties info) throws SQLException", " int getMajorVersion()", " int getMinorVersion()", " boolean jdbcCompliant()" ],
  "variableNames" : [ ]
}