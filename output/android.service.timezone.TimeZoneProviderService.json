{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/timezone/TimeZoneProviderService.java",
  "packageName" : "android.service.timezone",
  "className" : "TimeZoneProviderService",
  "comment" : "\n * A service to generate time zone callbacks to the platform. Developers must extend this class.\n *\n * <p>Provider implementations are started via a call to {@link #onStartUpdates(long)} and stopped\n * via a call to {@link #onStopUpdates()}.\n *\n * <p>Once started, providers are expected to detect the time zone if possible, and report the\n * result via {@link #reportSuggestion(TimeZoneProviderSuggestion)} or {@link\n * #reportUncertain(TimeZoneProviderStatus)}. Providers may also report that they have permanently\n * failed by calling {@link #reportPermanentFailure(Throwable)}. See the javadocs for each\n * method for details.\n *\n * <p>After starting, providers are expected to issue their first callback within the timeout\n * duration specified in {@link #onStartUpdates(long)}, or they will be implicitly considered to be\n * uncertain.\n *\n * <p>Once stopped or failed, providers are required to stop generating callbacks.\n *\n * <p>Provider types:\n *\n * <p>Android supports up to two <em>location-derived</em> time zone providers. These are called the\n * \"primary\" and \"secondary\" location time zone providers. When a location-derived time zone is\n * required, the primary location time zone provider is started first and used until it becomes\n * uncertain or fails, at which point the secondary provider will be started. The secondary will be\n * started and stopped as needed.\n *\n * <p>Provider discovery:\n *\n * <p>Each provider is optional and can be disabled. When enabled, a provider's package name must\n * be explicitly configured in the system server, see {@code\n * config_primaryLocationTimeZoneProviderPackageName} and {@code\n * config_secondaryLocationTimeZoneProviderPackageName} for details.\n *\n * <p>You must declare the service in the AndroidManifest of the app hosting the provider with the\n * {@link android.Manifest.permission#BIND_TIME_ZONE_PROVIDER_SERVICE} permission,\n * and include an intent filter with the necessary action indicating that it is the primary\n * provider ({@link #PRIMARY_LOCATION_TIME_ZONE_PROVIDER_SERVICE_INTERFACE}) or the secondary\n * provider ({@link #SECONDARY_LOCATION_TIME_ZONE_PROVIDER_SERVICE_INTERFACE}).\n *\n * <p>Besides declaring the android:permission attribute mentioned above, the application supplying\n * a location provider must be granted the {@link\n * android.Manifest.permission#INSTALL_LOCATION_TIME_ZONE_PROVIDER_SERVICE} permission to be\n * accepted by the system server.\n *\n * <p>{@link TimeZoneProviderService}s may be deployed into processes that run once-per-user\n * or once-per-device (i.e. they service multiple users). See serviceIsMultiuser metadata below for\n * configuration details.\n *\n * <p>The service may specify metadata on its capabilities:\n *\n * <ul>\n *     <li>\n *         \"serviceIsMultiuser\": A boolean property, indicating if the service wishes to take\n *         responsibility for handling changes to the current user on the device. If true, the\n *         service will always be bound from the system user. If false, the service will always be\n *         bound from the current user. If the current user changes, the old binding will be\n *         released, and a new binding established under the new user. Assumed to be false if not\n *         specified.\n *     </li>\n * </ul>\n *\n * <p>For example:\n * <pre>\n *   &lt;uses-permission\n *       android:name=\"android.permission.INSTALL_LOCATION_TIME_ZONE_PROVIDER_SERVICE\"/&gt;\n *\n * ...\n *\n *     &lt;service android:name=\".ExampleTimeZoneProviderService\"\n *             android:exported=\"true\"\n *             android:permission=\"android.permission.BIND_TIME_ZONE_PROVIDER_SERVICE\"&gt;\n *         &lt;intent-filter&gt;\n *             &lt;action\n *             android:name=\"android.service.timezone.SecondaryLocationTimeZoneProviderService\"\n *             /&gt;\n *         &lt;/intent-filter&gt;\n *         &lt;meta-data android:name=\"serviceIsMultiuser\" android:value=\"true\" /&gt;\n *     &lt;/service&gt;\n * </pre>\n *\n * <p>Threading:\n *\n * <p>Outgoing calls to {@code report} methods can be made on any thread and will be delivered\n * asynchronously to the system server. Incoming calls to {@link TimeZoneProviderService}-defined\n * service methods like {@link #onStartUpdates(long)} and {@link #onStopUpdates()} are also\n * asynchronous with respect to the system server caller and will be delivered to this service using\n * a single thread. {@link Service} lifecycle method calls like {@link #onCreate()} and {@link\n * #onDestroy()} can occur on a different thread from those made to {@link\n * TimeZoneProviderService}-defined service methods, so implementations must be defensive and not\n * assume an ordering between them, e.g. a call to {@link #onStopUpdates()} can occur after {@link\n * #onDestroy()} and should be handled safely. {@link #mLock} is used to ensure that synchronous\n * calls like {@link #dump(FileDescriptor, PrintWriter, String[])} are safe with respect to\n * asynchronous behavior.\n *\n * @hide\n ",
  "links" : [ "#onCreate()", "android.service.timezone.TimeZoneProviderService", "#onDestroy()", "android.app.Service", "#reportUncertain(TimeZoneProviderStatus)", "#mLock", "#reportSuggestion(TimeZoneProviderSuggestion)", "#onStopUpdates()", "#reportPermanentFailure(Throwable)", "#dump(FileDescriptor", "#onStartUpdates(long)", "#PRIMARY_LOCATION_TIME_ZONE_PROVIDER_SERVICE_INTERFACE", "android.Manifest.permission#BIND_TIME_ZONE_PROVIDER_SERVICE", "android.Manifest.permission#INSTALL_LOCATION_TIME_ZONE_PROVIDER_SERVICE", "#SECONDARY_LOCATION_TIME_ZONE_PROVIDER_SERVICE_INTERFACE" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEST_COMMAND_RESULT_SUCCESS_KEY",
    "type" : "String",
    "comment" : "\n     * The test command result key indicating whether a command succeeded. Value type: boolean\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TEST_COMMAND_RESULT_ERROR_KEY",
    "type" : "String",
    "comment" : "\n     * The test command result key for the error message present when {@link\n     * #TEST_COMMAND_RESULT_SUCCESS_KEY} is false. Value type: string\n     * @hide\n     ",
    "links" : [ "#TEST_COMMAND_RESULT_SUCCESS_KEY" ]
  }, {
    "name" : "PRIMARY_LOCATION_TIME_ZONE_PROVIDER_SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The Intent action that the primary location-derived time zone provider service must respond\n     * to. Add it to the intent filter of the service in its manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECONDARY_LOCATION_TIME_ZONE_PROVIDER_SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The Intent action that the secondary location-based time zone provider service must respond\n     * to. Add it to the intent filter of the service in its manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWrapper",
    "type" : "TimeZoneProviderServiceWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " The object used for operations that occur between the main / handler thread. ",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : " The handler used for most operations. ",
    "links" : [ ]
  }, {
    "name" : "mManager",
    "type" : "ITimeZoneProviderManager",
    "comment" : " Set by {@link #mHandler} thread. ",
    "links" : [ "#mHandler" ]
  }, {
    "name" : "mEventFilteringAgeThresholdMillis",
    "type" : "long",
    "comment" : " Set by {@link #mHandler} thread. ",
    "links" : [ "#mHandler" ]
  }, {
    "name" : "mLastEventSent",
    "type" : "TimeZoneProviderEvent",
    "comment" : "\n     * The type of the last suggestion sent to the system server. Used to de-dupe suggestions client\n     * side and avoid calling into the system server unnecessarily. {@code null} means no previous\n     * event has been sent this cycle; this field is cleared when the service is started.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void reportSuggestion(@NonNull TimeZoneProviderSuggestion suggestion)",
    "returnType" : "void",
    "comment" : "\n     * Indicates a successful time zone detection. See {@link TimeZoneProviderSuggestion} for\n     * details.\n     ",
    "links" : [ "android.service.timezone.TimeZoneProviderSuggestion" ]
  }, {
    "name" : "public final void reportSuggestion(@NonNull TimeZoneProviderSuggestion suggestion, @NonNull TimeZoneProviderStatus providerStatus)",
    "returnType" : "void",
    "comment" : "\n     * Indicates a successful time zone detection. See {@link TimeZoneProviderSuggestion} for\n     * details.\n     *\n     * @param providerStatus provider status information that can influence detector service\n     *   behavior and/or be reported via the device UI\n     ",
    "links" : [ "android.service.timezone.TimeZoneProviderSuggestion" ]
  }, {
    "name" : "private void reportSuggestionInternal(@NonNull TimeZoneProviderSuggestion suggestion, @Nullable TimeZoneProviderStatus providerStatus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void reportUncertain()",
    "returnType" : "void",
    "comment" : "\n     * Indicates the time zone is not known because of an expected runtime state or error, e.g. when\n     * the provider is unable to detect location, or there was connectivity issue.\n     *\n     * <p>See {@link #reportUncertain(TimeZoneProviderStatus)} for a more expressive version\n     ",
    "links" : [ "#reportUncertain(TimeZoneProviderStatus)" ]
  }, {
    "name" : "public final void reportUncertain(@NonNull TimeZoneProviderStatus providerStatus)",
    "returnType" : "void",
    "comment" : "\n     * Indicates the time zone is not known because of an expected runtime state or error.\n     *\n     * <p>When the status changes then a certain or uncertain report must be made to move the\n     * detector service to the new status.\n     *\n     * @param providerStatus provider status information that can influence detector service\n     *   behavior and/or be reported via the device UI\n     ",
    "links" : [ ]
  }, {
    "name" : "private void reportUncertainInternal(@Nullable TimeZoneProviderStatus providerStatus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void reportPermanentFailure(@NonNull Throwable cause)",
    "returnType" : "void",
    "comment" : "\n     * Indicates there was a permanent failure. This is not generally expected, and probably means a\n     * required backend service has been turned down, or the client is unreasonably old.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldSendEvent(TimeZoneProviderEvent newEvent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onStartUpdatesInternal(@NonNull ITimeZoneProviderManager manager, @DurationMillisLong long initializationTimeoutMillis, @DurationMillisLong long eventFilteringAgeThresholdMillis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onStartUpdates(@DurationMillisLong long initializationTimeoutMillis)",
    "returnType" : "void",
    "comment" : "\n     * Informs the provider that it should start detecting and reporting the detected time zone\n     * state via the various {@code report} methods. Implementations of {@link\n     * #onStartUpdates(long)} should return immediately, and will typically be used to start\n     * worker threads or begin asynchronous location listening.\n     *\n     * <p>Between {@link #onStartUpdates(long)} and {@link #onStopUpdates()} calls, the Android\n     * system server holds the latest report from the provider in memory. After an initial report,\n     * provider implementations are only required to send a report via {@link\n     * #reportSuggestion(TimeZoneProviderSuggestion, TimeZoneProviderStatus)} or via {@link\n     * #reportUncertain(TimeZoneProviderStatus)} when it differs from the previous report.\n     *\n     * <p>{@link #reportPermanentFailure(Throwable)} can also be called by provider implementations\n     * in rare cases, after which the provider should consider itself stopped and not make any\n     * further reports. {@link #onStopUpdates()} will not be called in this case.\n     *\n     * <p>The {@code initializationTimeoutMillis} parameter indicates how long the provider has been\n     * granted to call one of the {@code report} methods for the first time. If the provider does\n     * not call one of the {@code report} methods in this time, it may be judged uncertain and the\n     * Android system server may move on to use other providers or detection methods. Providers\n     * should therefore make best efforts during this time to generate a report, which could involve\n     * increased power usage. Providers should preferably report an explicit {@link\n     * #reportUncertain(TimeZoneProviderStatus)} if the time zone(s) cannot be detected within the\n     * initialization timeout.\n     *\n     * @see #onStopUpdates() for the signal from the system server to stop sending reports\n     ",
    "links" : [ "#reportSuggestion(TimeZoneProviderSuggestion", "#reportPermanentFailure(Throwable)", "#onStartUpdates(long)", "#reportUncertain(TimeZoneProviderStatus)", "#onStopUpdates()" ]
  }, {
    "name" : "private void onStopUpdatesInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onStopUpdates()",
    "returnType" : "void",
    "comment" : "\n     * Stops the provider sending further updates. This will be called after {@link\n     * #onStartUpdates(long)}.\n     ",
    "links" : [ "#onStartUpdates(long)" ]
  }, {
    "name" : "protected void dump(FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final IBinder onBind(@NonNull Intent intent)", "public final void reportSuggestion(@NonNull TimeZoneProviderSuggestion suggestion)", "public final void reportSuggestion(@NonNull TimeZoneProviderSuggestion suggestion, @NonNull TimeZoneProviderStatus providerStatus)", "private void reportSuggestionInternal(@NonNull TimeZoneProviderSuggestion suggestion, @Nullable TimeZoneProviderStatus providerStatus)", "public final void reportUncertain()", "public final void reportUncertain(@NonNull TimeZoneProviderStatus providerStatus)", "private void reportUncertainInternal(@Nullable TimeZoneProviderStatus providerStatus)", "public final void reportPermanentFailure(@NonNull Throwable cause)", "private boolean shouldSendEvent(TimeZoneProviderEvent newEvent)", "private void onStartUpdatesInternal(@NonNull ITimeZoneProviderManager manager, @DurationMillisLong long initializationTimeoutMillis, @DurationMillisLong long eventFilteringAgeThresholdMillis)", "public abstract void onStartUpdates(@DurationMillisLong long initializationTimeoutMillis)", "private void onStopUpdatesInternal()", "public abstract void onStopUpdates()", "protected void dump(FileDescriptor fd, PrintWriter writer, String[] args)" ],
  "variableNames" : [ "TAG", "TEST_COMMAND_RESULT_SUCCESS_KEY", "TEST_COMMAND_RESULT_ERROR_KEY", "PRIMARY_LOCATION_TIME_ZONE_PROVIDER_SERVICE_INTERFACE", "SECONDARY_LOCATION_TIME_ZONE_PROVIDER_SERVICE_INTERFACE", "mWrapper", "mLock", "mHandler", "mManager", "mEventFilteringAgeThresholdMillis", "mLastEventSent" ]
}