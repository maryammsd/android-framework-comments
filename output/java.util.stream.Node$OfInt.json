{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/Node.java",
  "packageName" : "java.util.stream",
  "className" : "OfInt",
  "comment" : "\n     * Specialized {@code Node} for int elements\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void forEach(Consumer<? super Integer> consumer)",
    "returnType" : "void",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @param consumer a {@code Consumer} that is to be invoked with each\n         *        element in this {@code Node}.  If this is an\n         *        {@code IntConsumer}, it is cast to {@code IntConsumer} so the\n         *        elements may be processed without boxing.\n         ",
    "links" : [ ]
  }, {
    "name" : " void copyInto(Integer[] boxed, int offset)",
    "returnType" : "void",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @implSpec the default implementation invokes {@link #asPrimitiveArray()} to\n         * obtain an int[] array then and copies the elements from that int[]\n         * array into the boxed Integer[] array.  This is not efficient and it\n         * is recommended to invoke {@link #copyInto(Object, int)}.\n         ",
    "links" : [ "#asPrimitiveArray()", "#copyInto(Object" ]
  }, {
    "name" : " Node.OfInt truncate(long from, long to, IntFunction<Integer[]> generator)",
    "returnType" : "Node.OfInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int[] newArray(int count)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " StreamShape getShape()",
    "returnType" : "StreamShape",
    "comment" : "\n         * {@inheritDoc}\n         * @implSpec The default in {@code Node.OfInt} returns\n         * {@code StreamShape.INT_VALUE}\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void forEach(Consumer<? super Integer> consumer)", " void copyInto(Integer[] boxed, int offset)", " Node.OfInt truncate(long from, long to, IntFunction<Integer[]> generator)", " int[] newArray(int count)", " StreamShape getShape()" ],
  "variableNames" : [ ]
}