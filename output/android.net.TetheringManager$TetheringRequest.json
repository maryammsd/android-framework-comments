{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/TetheringManager.java",
  "packageName" : "android.net",
  "className" : "TetheringRequest",
  "comment" : "\n     *  Use with {@link #startTethering} to specify additional parameters when starting tethering.\n     ",
  "links" : [ "#startTethering" ],
  "variables" : [ {
    "name" : "mRequestParcel",
    "type" : "TetheringRequestParcel",
    "comment" : " A configuration set for TetheringRequest. ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<TetheringRequest>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LinkAddress getLocalIpv4Address()",
    "returnType" : "LinkAddress",
    "comment" : "\n         * Get the local IPv4 address, if one was configured with\n         * {@link Builder#setStaticIpv4Addresses}.\n         ",
    "links" : [ "#setStaticIpv4Addresses" ]
  }, {
    "name" : "public LinkAddress getClientStaticIpv4Address()",
    "returnType" : "LinkAddress",
    "comment" : "\n         * Get the static IPv4 address of the client, if one was configured with\n         * {@link Builder#setStaticIpv4Addresses}.\n         ",
    "links" : [ "#setStaticIpv4Addresses" ]
  }, {
    "name" : "public int getTetheringType()",
    "returnType" : "int",
    "comment" : " Get tethering type. ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectivityScope()",
    "returnType" : "int",
    "comment" : " Get connectivity type ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExemptFromEntitlementCheck()",
    "returnType" : "boolean",
    "comment" : " Check if exempt from entitlement check. ",
    "links" : [ ]
  }, {
    "name" : "public boolean getShouldShowEntitlementUi()",
    "returnType" : "boolean",
    "comment" : " Check if show entitlement ui.  ",
    "links" : [ ]
  }, {
    "name" : "public static boolean checkStaticAddressConfiguration(@NonNull final LinkAddress localIPv4Address, @NonNull final LinkAddress clientAddress)",
    "returnType" : "boolean",
    "comment" : "\n         * Check whether the two addresses are ipv4 and in the same prefix.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static int getDefaultConnectivityScope(int tetheringType)",
    "returnType" : "int",
    "comment" : "\n         * Returns the default connectivity scope for the given tethering type. Usually this is\n         * CONNECTIVITY_SCOPE_GLOBAL, except for NCM which for historical reasons defaults to local.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private static boolean checkConnectivityScope(int type, int scope)",
    "returnType" : "boolean",
    "comment" : "\n         * Checks whether the requested connectivity scope is allowed.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public TetheringRequestParcel getParcel()",
    "returnType" : "TetheringRequestParcel",
    "comment" : "\n         * Get a TetheringRequestParcel from the configuration\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " String of TetheringRequest detail. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public LinkAddress getLocalIpv4Address()", "public LinkAddress getClientStaticIpv4Address()", "public int getTetheringType()", "public int getConnectivityScope()", "public boolean isExemptFromEntitlementCheck()", "public boolean getShouldShowEntitlementUi()", "public static boolean checkStaticAddressConfiguration(@NonNull final LinkAddress localIPv4Address, @NonNull final LinkAddress clientAddress)", "public static int getDefaultConnectivityScope(int tetheringType)", "private static boolean checkConnectivityScope(int type, int scope)", "public TetheringRequestParcel getParcel()", "public String toString()" ],
  "variableNames" : [ "mRequestParcel", "CREATOR" ]
}