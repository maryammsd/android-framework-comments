{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/SurfaceControl.java",
  "packageName" : "android.view",
  "className" : "Transaction",
  "comment" : "\n     * An atomic set of changes to a set of SurfaceControl.\n     ",
  "variables" : [ {
    "name" : "sRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mNativeObject",
    "type" : "long",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mResizedSurfaces",
    "type" : "ArrayMap<SurfaceControl, Point>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReparentedSurfaces",
    "type" : "ArrayMap<SurfaceControl, SurfaceControl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFreeNativeResources",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_COLOR",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<Transaction>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void checkPreconditions(SurfaceControl sc)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void apply()",
    "returnType" : "void",
    "comment" : "\n         * Apply the transaction, clearing it's state, and making it usable\n         * as a new transaction.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n         * Release the native transaction object, without applying it.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void apply(boolean sync)",
    "returnType" : "void",
    "comment" : "\n         * Jankier version of apply. Avoid use (b/28068298).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private void applyResizedSurfaces()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyReparentedSurfaces()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Transaction setVisibility(@NonNull SurfaceControl sc, boolean visible)",
    "returnType" : "Transaction",
    "comment" : "\n         * Toggle the visibility of a given Layer and it's sub-tree.\n         *\n         * @param sc The SurfaceControl for which to set the visibility\n         * @param visible The new visibility\n         * @return This transaction object.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setFrameRateSelectionPriority(@NonNull SurfaceControl sc, int priority)",
    "returnType" : "Transaction",
    "comment" : "\n         * This information is passed to SurfaceFlinger to decide which window should have a\n         * priority when deciding about the refresh rate of the display. All windows have the\n         * lowest priority by default.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction show(SurfaceControl sc)",
    "returnType" : "Transaction",
    "comment" : "\n         * Request that a given surface and it's sub-tree be shown.\n         *\n         * @param sc The surface to show.\n         * @return This transaction.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction hide(SurfaceControl sc)",
    "returnType" : "Transaction",
    "comment" : "\n         * Request that a given surface and it's sub-tree be hidden.\n         *\n         * @param sc The surface to hidden.\n         * @return This transaction.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setPosition(SurfaceControl sc, float x, float y)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setBufferSize(@NonNull SurfaceControl sc, @IntRange(from = 0) int w, @IntRange(from = 0) int h)",
    "returnType" : "Transaction",
    "comment" : "\n         * Set the default buffer size for the SurfaceControl, if there is a\n         * {@link Surface} associated with the control, then\n         * this will be the default size for buffers dequeued from it.\n         * @param sc The surface to set the buffer size for.\n         * @param w The default width\n         * @param h The default height\n         * @return This Transaction\n         ",
    "links" : [ "android.view.Surface" ]
  }, {
    "name" : "public Transaction setFixedTransformHint(@NonNull SurfaceControl sc, @Surface.Rotation int transformHint)",
    "returnType" : "Transaction",
    "comment" : "\n         * Provide the graphic producer a transform hint if the layer and its children are\n         * in an orientation different from the display's orientation. The caller is responsible\n         * for clearing this transform hint if the layer is no longer in a fixed orientation.\n         *\n         * The transform hint is used to prevent allocating a buffer of different size when a\n         * layer is rotated. The producer can choose to consume the hint and allocate the buffer\n         * with the same size.\n         *\n         * @return This Transaction.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction unsetFixedTransformHint(@NonNull SurfaceControl sc)",
    "returnType" : "Transaction",
    "comment" : "\n         * Clearing any transform hint if set on this layer.\n         *\n         * @return This Transaction.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setLayer(@NonNull SurfaceControl sc, @IntRange(from = Integer.MIN_VALUE, to = Integer.MAX_VALUE) int z)",
    "returnType" : "Transaction",
    "comment" : "\n         * Set the Z-order for a given SurfaceControl, relative to it's siblings.\n         * If two siblings share the same Z order the ordering is undefined. Surfaces\n         * with a negative Z will be placed below the parent surface.\n         *\n         * @param sc The SurfaceControl to set the Z order on\n         * @param z The Z-order\n         * @return This Transaction.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setRelativeLayer(SurfaceControl sc, SurfaceControl relativeTo, int z)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setTransparentRegionHint(SurfaceControl sc, Region transparentRegion)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setAlpha(@NonNull SurfaceControl sc, @FloatRange(from = 0.0, to = 1.0) float alpha)",
    "returnType" : "Transaction",
    "comment" : "\n         * Set the alpha for a given surface. If the alpha is non-zero the SurfaceControl\n         * will be blended with the Surfaces under it according to the specified ratio.\n         *\n         * @param sc The given SurfaceControl.\n         * @param alpha The alpha to set.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setInputWindowInfo(SurfaceControl sc, InputWindowHandle handle)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction syncInputWindows()",
    "returnType" : "Transaction",
    "comment" : "\n         * Waits until any changes to input windows have been sent from SurfaceFlinger to\n         * InputFlinger before returning.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setGeometry(@NonNull SurfaceControl sc, @Nullable Rect sourceCrop, @Nullable Rect destFrame, @Surface.Rotation int orientation)",
    "returnType" : "Transaction",
    "comment" : "\n         * Specify how the buffer assosciated with this Surface is mapped in to the\n         * parent coordinate space. The source frame will be scaled to fit the destination\n         * frame, after being rotated according to the orientation parameter.\n         *\n         * @param sc The SurfaceControl to specify the geometry of\n         * @param sourceCrop The source rectangle in buffer space. Or null for the entire buffer.\n         * @param destFrame The destination rectangle in parent space. Or null for the source frame.\n         * @param orientation The buffer rotation\n         * @return This transaction object.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setMatrix(SurfaceControl sc, float dsdx, float dtdx, float dtdy, float dsdy)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setMatrix(SurfaceControl sc, Matrix matrix, float[] float9)",
    "returnType" : "Transaction",
    "comment" : "\n         * Sets the transform and position of a {@link SurfaceControl} from a 3x3 transformation\n         * matrix.\n         *\n         * @param sc     SurfaceControl to set matrix of\n         * @param matrix The matrix to apply.\n         * @param float9 An array of 9 floats to be used to extract the values from the matrix.\n         * @hide\n         ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "public Transaction setColorTransform(SurfaceControl sc, @Size(9) float[] matrix, @Size(3) float[] translation)",
    "returnType" : "Transaction",
    "comment" : "\n         * Sets the color transform for the Surface.\n         *\n         * @param sc          SurfaceControl to set color transform of\n         * @param matrix      A float array with 9 values represents a 3x3 transform matrix\n         * @param translation A float array with 3 values represents a translation vector\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setColorSpaceAgnostic(SurfaceControl sc, boolean agnostic)",
    "returnType" : "Transaction",
    "comment" : "\n         * Sets the Surface to be color space agnostic. If a surface is color space agnostic,\n         * the color can be interpreted in any color space.\n         * @param agnostic A boolean to indicate whether the surface is color space agnostic\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setWindowCrop(SurfaceControl sc, Rect crop)",
    "returnType" : "Transaction",
    "comment" : "\n         * Bounds the surface and its children to the bounds specified. Size of the surface will be\n         * ignored and only the crop and buffer size will be used to determine the bounds of the\n         * surface. If no crop is specified and the surface has no buffer, the surface bounds is\n         * only constrained by the size of its parent bounds.\n         *\n         * @param sc   SurfaceControl to set crop of.\n         * @param crop Bounds of the crop to apply.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setWindowCrop(SurfaceControl sc, int width, int height)",
    "returnType" : "Transaction",
    "comment" : "\n         * Same as {@link Transaction#setWindowCrop(SurfaceControl, Rect)} but sets the crop rect\n         * top left at 0, 0.\n         *\n         * @param sc     SurfaceControl to set crop of.\n         * @param width  width of crop rect\n         * @param height height of crop rect\n         * @hide\n         ",
    "links" : [ "#setWindowCrop(SurfaceControl" ]
  }, {
    "name" : "public Transaction setCornerRadius(SurfaceControl sc, float cornerRadius)",
    "returnType" : "Transaction",
    "comment" : "\n         * Sets the corner radius of a {@link SurfaceControl}.\n         * @param sc SurfaceControl\n         * @param cornerRadius Corner radius in pixels.\n         * @return Itself.\n         * @hide\n         ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "public Transaction setBackgroundBlurRadius(SurfaceControl sc, int radius)",
    "returnType" : "Transaction",
    "comment" : "\n         * Sets the background blur radius of the {@link SurfaceControl}.\n         *\n         * @param sc SurfaceControl.\n         * @param radius Blur radius in pixels.\n         * @return itself.\n         * @hide\n         ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "public Transaction setLayerStack(SurfaceControl sc, int layerStack)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction deferTransactionUntil(SurfaceControl sc, SurfaceControl barrier, long frameNumber)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction deferTransactionUntilSurface(SurfaceControl sc, Surface barrierSurface, long frameNumber)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction reparentChildren(SurfaceControl sc, SurfaceControl newParent)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction reparent(@NonNull SurfaceControl sc, @Nullable SurfaceControl newParent)",
    "returnType" : "Transaction",
    "comment" : "\n         * Re-parents a given layer to a new parent. Children inherit transform (position, scaling)\n         * crop, visibility, and Z-ordering from their parents, as if the children were pixels within the\n         * parent Surface.\n         *\n         * @param sc The SurfaceControl to reparent\n         * @param newParent The new parent for the given control.\n         * @return This Transaction\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction detachChildren(SurfaceControl sc)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setOverrideScalingMode(SurfaceControl sc, int overrideScalingMode)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setColor(SurfaceControl sc, @Size(3) float[] color)",
    "returnType" : "Transaction",
    "comment" : "\n         * Fills the surface with the specified color.\n         * @param color A float array with three values to represent r, g, b in range [0..1]. An\n         * invalid color will remove the color fill.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction unsetColor(SurfaceControl sc)",
    "returnType" : "Transaction",
    "comment" : "\n         * Removes color fill.\n        * @hide\n        ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setSecure(SurfaceControl sc, boolean isSecure)",
    "returnType" : "Transaction",
    "comment" : "\n         * Sets the security of the surface.  Setting the flag is equivalent to creating the\n         * Surface with the {@link #SECURE} flag.\n         * @hide\n         ",
    "links" : [ "#SECURE" ]
  }, {
    "name" : "public Transaction setOpaque(SurfaceControl sc, boolean isOpaque)",
    "returnType" : "Transaction",
    "comment" : "\n         * Sets the opacity of the surface.  Setting the flag is equivalent to creating the\n         * Surface with the {@link #OPAQUE} flag.\n         * @hide\n         ",
    "links" : [ "#OPAQUE" ]
  }, {
    "name" : "public Transaction setDisplaySurface(IBinder displayToken, Surface surface)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setDisplayLayerStack(IBinder displayToken, int layerStack)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setDisplayProjection(IBinder displayToken, int orientation, Rect layerStackRect, Rect displayRect)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setDisplaySize(IBinder displayToken, int width, int height)",
    "returnType" : "Transaction",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setAnimationTransaction()",
    "returnType" : "Transaction",
    "comment" : " flag the transaction as an animation\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setEarlyWakeup()",
    "returnType" : "Transaction",
    "comment" : "\n         * @deprecated use {@link Transaction#setEarlyWakeupStart()}\n         *\n         * Indicate that SurfaceFlinger should wake up earlier than usual as a result of this\n         * transaction. This should be used when the caller thinks that the scene is complex enough\n         * that it's likely to hit GL composition, and thus, SurfaceFlinger needs to more time in\n         * order not to miss frame deadlines.\n         * <p>\n         * Corresponds to setting ISurfaceComposer::eEarlyWakeup\n         * @hide\n         ",
    "links" : [ "#setEarlyWakeupStart()" ]
  }, {
    "name" : "public Transaction setEarlyWakeupStart()",
    "returnType" : "Transaction",
    "comment" : "\n          * Provides a hint to SurfaceFlinger to change its offset so that SurfaceFlinger wakes up\n          * earlier to compose surfaces. The caller should use this as a hint to SurfaceFlinger\n          * when the scene is complex enough to use GPU composition. The hint will remain active\n          * until until the client calls {@link Transaction#setEarlyWakeupEnd}.\n          *\n          * @hide\n          ",
    "links" : [ "#setEarlyWakeupEnd" ]
  }, {
    "name" : "public Transaction setEarlyWakeupEnd()",
    "returnType" : "Transaction",
    "comment" : "\n         * Removes the early wake up hint set by {@link Transaction#setEarlyWakeupStart}.\n         *\n         * @hide\n         ",
    "links" : [ "#setEarlyWakeupStart" ]
  }, {
    "name" : "public Transaction setMetadata(SurfaceControl sc, int key, int data)",
    "returnType" : "Transaction",
    "comment" : "\n         * Sets an arbitrary piece of metadata on the surface. This is a helper for int data.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setMetadata(SurfaceControl sc, int key, Parcel data)",
    "returnType" : "Transaction",
    "comment" : "\n         * Sets an arbitrary piece of metadata on the surface.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction setShadowRadius(SurfaceControl sc, float shadowRadius)",
    "returnType" : "Transaction",
    "comment" : "\n          * Draws shadows of length {@code shadowRadius} around the surface {@link SurfaceControl}.\n          * If the length is 0.0f then the shadows will not be drawn.\n          *\n          * Shadows are drawn around the screen bounds, these are the post transformed cropped\n          * bounds. They can draw over their parent bounds and will be occluded by layers with a\n          * higher z-order. The shadows will respect the surface's corner radius if the\n          * rounded corner bounds (transformed source bounds) are within the screen bounds.\n          *\n          * A shadow will only be drawn on buffer and color layers. If the radius is applied on a\n          * container layer, it will be passed down the hierarchy to be applied on buffer and color\n          * layers but not its children. A scenario where this is useful is when SystemUI animates\n          * a task by controlling a leash to it, can draw a shadow around the app surface by\n          * setting a shadow on the leash. This is similar to how rounded corners are set.\n          *\n          * @hide\n          ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "public Transaction setFrameRate(@NonNull SurfaceControl sc, @FloatRange(from = 0.0) float frameRate, @Surface.FrameRateCompatibility int compatibility)",
    "returnType" : "Transaction",
    "comment" : "\n         * Sets the intended frame rate for the surface {@link SurfaceControl}.\n         * <p>\n         * On devices that are capable of running the display at different refresh rates, the system\n         * may choose a display refresh rate to better match this surface's frame rate. Usage of\n         * this API won't directly affect the application's frame production pipeline. However,\n         * because the system may change the display refresh rate, calls to this function may result\n         * in changes to Choreographer callback timings, and changes to the time interval at which\n         * the system releases buffers back to the application.\n         *\n         * @param sc The SurfaceControl to specify the frame rate of.\n         * @param frameRate The intended frame rate for this surface, in frames per second. 0 is a\n         *                  special value that indicates the app will accept the system's choice for\n         *                  the display frame rate, which is the default behavior if this function\n         *                  isn't called. The frameRate param does <em>not</em> need to be a valid\n         *                  refresh rate for this device's display - e.g., it's fine to pass 30fps\n         *                  to a device that can only run the display at 60fps.\n         * @param compatibility The frame rate compatibility of this surface. The compatibility\n         *                      value may influence the system's choice of display frame rate. See\n         *                      the Surface.FRAME_RATE_COMPATIBILITY_* values for more info.\n         * @return This transaction object.\n         ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "public Transaction merge(@NonNull Transaction other)",
    "returnType" : "Transaction",
    "comment" : "\n         * Merge the other transaction into this transaction, clearing the\n         * other transaction as if it had been applied.\n         *\n         * @param other The transaction to merge in to this one.\n         * @return This transaction.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Transaction remove(@NonNull SurfaceControl sc)",
    "returnType" : "Transaction",
    "comment" : "\n         * Equivalent to reparent with a null parent, in that it removes\n         * the SurfaceControl from the scene, but it also releases\n         * the local resources (by calling {@link SurfaceControl#release})\n         * after this method returns, {@link SurfaceControl#isValid} will return\n         * false for the argument.\n         *\n         * @param sc The surface to remove and release.\n         * @return This transaction\n         * @hide\n         ",
    "links" : [ "android.view.SurfaceControl#isValid", "android.view.SurfaceControl#release" ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, @WriteFlags int flags)",
    "returnType" : "void",
    "comment" : "\n         * Writes the transaction to parcel, clearing the transaction as if it had been applied so\n         * it can be used to store future transactions. It's the responsibility of the parcel\n         * reader to apply the original transaction.\n         *\n         * @param dest parcel to write the transaction to\n         * @param flags\n         ",
    "links" : [ ]
  }, {
    "name" : "private void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "sRegistry", "mNativeObject", "mResizedSurfaces", "mReparentedSurfaces", "mFreeNativeResources", "INVALID_COLOR", "CREATOR" ],
  "methodNames" : [ "protected void checkPreconditions(SurfaceControl sc)", "public void apply()", "public void close()", "public void apply(boolean sync)", "private void applyResizedSurfaces()", "private void notifyReparentedSurfaces()", "public Transaction setVisibility(@NonNull SurfaceControl sc, boolean visible)", "public Transaction setFrameRateSelectionPriority(@NonNull SurfaceControl sc, int priority)", "public Transaction show(SurfaceControl sc)", "public Transaction hide(SurfaceControl sc)", "public Transaction setPosition(SurfaceControl sc, float x, float y)", "public Transaction setBufferSize(@NonNull SurfaceControl sc, @IntRange(from = 0) int w, @IntRange(from = 0) int h)", "public Transaction setFixedTransformHint(@NonNull SurfaceControl sc, @Surface.Rotation int transformHint)", "public Transaction unsetFixedTransformHint(@NonNull SurfaceControl sc)", "public Transaction setLayer(@NonNull SurfaceControl sc, @IntRange(from = Integer.MIN_VALUE, to = Integer.MAX_VALUE) int z)", "public Transaction setRelativeLayer(SurfaceControl sc, SurfaceControl relativeTo, int z)", "public Transaction setTransparentRegionHint(SurfaceControl sc, Region transparentRegion)", "public Transaction setAlpha(@NonNull SurfaceControl sc, @FloatRange(from = 0.0, to = 1.0) float alpha)", "public Transaction setInputWindowInfo(SurfaceControl sc, InputWindowHandle handle)", "public Transaction syncInputWindows()", "public Transaction setGeometry(@NonNull SurfaceControl sc, @Nullable Rect sourceCrop, @Nullable Rect destFrame, @Surface.Rotation int orientation)", "public Transaction setMatrix(SurfaceControl sc, float dsdx, float dtdx, float dtdy, float dsdy)", "public Transaction setMatrix(SurfaceControl sc, Matrix matrix, float[] float9)", "public Transaction setColorTransform(SurfaceControl sc, @Size(9) float[] matrix, @Size(3) float[] translation)", "public Transaction setColorSpaceAgnostic(SurfaceControl sc, boolean agnostic)", "public Transaction setWindowCrop(SurfaceControl sc, Rect crop)", "public Transaction setWindowCrop(SurfaceControl sc, int width, int height)", "public Transaction setCornerRadius(SurfaceControl sc, float cornerRadius)", "public Transaction setBackgroundBlurRadius(SurfaceControl sc, int radius)", "public Transaction setLayerStack(SurfaceControl sc, int layerStack)", "public Transaction deferTransactionUntil(SurfaceControl sc, SurfaceControl barrier, long frameNumber)", "public Transaction deferTransactionUntilSurface(SurfaceControl sc, Surface barrierSurface, long frameNumber)", "public Transaction reparentChildren(SurfaceControl sc, SurfaceControl newParent)", "public Transaction reparent(@NonNull SurfaceControl sc, @Nullable SurfaceControl newParent)", "public Transaction detachChildren(SurfaceControl sc)", "public Transaction setOverrideScalingMode(SurfaceControl sc, int overrideScalingMode)", "public Transaction setColor(SurfaceControl sc, @Size(3) float[] color)", "public Transaction unsetColor(SurfaceControl sc)", "public Transaction setSecure(SurfaceControl sc, boolean isSecure)", "public Transaction setOpaque(SurfaceControl sc, boolean isOpaque)", "public Transaction setDisplaySurface(IBinder displayToken, Surface surface)", "public Transaction setDisplayLayerStack(IBinder displayToken, int layerStack)", "public Transaction setDisplayProjection(IBinder displayToken, int orientation, Rect layerStackRect, Rect displayRect)", "public Transaction setDisplaySize(IBinder displayToken, int width, int height)", "public Transaction setAnimationTransaction()", "public Transaction setEarlyWakeup()", "public Transaction setEarlyWakeupStart()", "public Transaction setEarlyWakeupEnd()", "public Transaction setMetadata(SurfaceControl sc, int key, int data)", "public Transaction setMetadata(SurfaceControl sc, int key, Parcel data)", "public Transaction setShadowRadius(SurfaceControl sc, float shadowRadius)", "public Transaction setFrameRate(@NonNull SurfaceControl sc, @FloatRange(from = 0.0) float frameRate, @Surface.FrameRateCompatibility int compatibility)", "public Transaction merge(@NonNull Transaction other)", "public Transaction remove(@NonNull SurfaceControl sc)", "public void writeToParcel(@NonNull Parcel dest, @WriteFlags int flags)", "private void readFromParcel(Parcel in)", "public int describeContents()" ]
}