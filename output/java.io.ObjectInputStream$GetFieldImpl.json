{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/ObjectInputStream.java",
  "packageName" : "java.io",
  "className" : "GetFieldImpl",
  "comment" : "\n     * Default GetField implementation.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "desc",
    "type" : "ObjectStreamClass",
    "comment" : " class descriptor describing serializable fields ",
    "links" : [ ]
  }, {
    "name" : "primVals",
    "type" : "byte[]",
    "comment" : " primitive field values ",
    "links" : [ ]
  }, {
    "name" : "objVals",
    "type" : "Object[]",
    "comment" : " object field values ",
    "links" : [ ]
  }, {
    "name" : "objHandles",
    "type" : "int[]",
    "comment" : " object field value handles ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ObjectStreamClass getObjectStreamClass()",
    "returnType" : "ObjectStreamClass",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean defaulted(String name) throws IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean get(String name, boolean val) throws IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte get(String name, byte val) throws IOException",
    "returnType" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public char get(String name, char val) throws IOException",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public short get(String name, short val) throws IOException",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int get(String name, int val) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float get(String name, float val) throws IOException",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long get(String name, long val) throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public double get(String name, double val) throws IOException",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object get(String name, Object val) throws IOException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void readFields() throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Reads primitive and object field values from stream.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int getFieldOffset(String name, Class<?> type)",
    "returnType" : "int",
    "comment" : "\n         * Returns offset of field with given name and type.  A specified type\n         * of null matches all types, Object.class matches all non-primitive\n         * types, and any other non-null type matches assignable types only.\n         * If no matching field is found in the (incoming) class\n         * descriptor but a matching field is present in the associated local\n         * class descriptor, returns -1.  Throws IllegalArgumentException if\n         * neither incoming nor local class descriptor contains a match.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ObjectStreamClass getObjectStreamClass()", "public boolean defaulted(String name) throws IOException", "public boolean get(String name, boolean val) throws IOException", "public byte get(String name, byte val) throws IOException", "public char get(String name, char val) throws IOException", "public short get(String name, short val) throws IOException", "public int get(String name, int val) throws IOException", "public float get(String name, float val) throws IOException", "public long get(String name, long val) throws IOException", "public double get(String name, double val) throws IOException", "public Object get(String name, Object val) throws IOException", " void readFields() throws IOException", "private int getFieldOffset(String name, Class<?> type)" ],
  "variableNames" : [ "desc", "primVals", "objVals", "objHandles" ]
}