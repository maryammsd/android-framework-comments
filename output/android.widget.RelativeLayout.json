{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/RelativeLayout.java",
  "packageName" : "android.widget",
  "className" : "RelativeLayout",
  "comment" : "\n * A Layout where the positions of the children can be described in relation to each other or to the\n * parent.\n *\n * <p>\n * Note that you cannot have a circular dependency between the size of the RelativeLayout and the\n * position of its children. For example, you cannot have a RelativeLayout whose height is set to\n * {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT WRAP_CONTENT} and a child set to\n * {@link #ALIGN_PARENT_BOTTOM}.\n * </p>\n *\n * <p><strong>Note:</strong> In platform version 17 and lower, RelativeLayout was affected by\n * a measurement bug that could cause child views to be measured with incorrect\n * {@link android.view.View.MeasureSpec MeasureSpec} values. (See\n * {@link android.view.View.MeasureSpec#makeMeasureSpec(int, int) MeasureSpec.makeMeasureSpec}\n * for more details.) This was triggered when a RelativeLayout container was placed in\n * a scrolling container, such as a ScrollView or HorizontalScrollView. If a custom view\n * not equipped to properly measure with the MeasureSpec mode\n * {@link android.view.View.MeasureSpec#UNSPECIFIED UNSPECIFIED} was placed in a RelativeLayout,\n * this would silently work anyway as RelativeLayout would pass a very large\n * {@link android.view.View.MeasureSpec#AT_MOST AT_MOST} MeasureSpec instead.</p>\n *\n * <p>This behavior has been preserved for apps that set <code>android:targetSdkVersion=\"17\"</code>\n * or older in their manifest's <code>uses-sdk</code> tag for compatibility. Apps targeting SDK\n * version 18 or newer will receive the correct behavior.</p>\n *\n * <p>See the <a href=\"{@docRoot}guide/topics/ui/layout/relative.html\">Relative\n * Layout</a> guide.</p>\n *\n * <p>\n * Also see {@link android.widget.RelativeLayout.LayoutParams RelativeLayout.LayoutParams} for\n * layout attributes\n * </p>\n *\n * @attr ref android.R.styleable#RelativeLayout_gravity\n * @attr ref android.R.styleable#RelativeLayout_ignoreGravity\n ",
  "links" : [ "android.view.View.MeasureSpec", "android.view.View.MeasureSpec#AT_MOST", "#ALIGN_PARENT_BOTTOM", "android.view.ViewGroup.LayoutParams#WRAP_CONTENT", "android.view.View.MeasureSpec#makeMeasureSpec(int", "android.view.View.MeasureSpec#UNSPECIFIED", "android.widget.RelativeLayout.LayoutParams" ],
  "variables" : [ {
    "name" : "TRUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEFT_OF",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's right edge with another child's left edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "RIGHT_OF",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's left edge with another child's right edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ABOVE",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's bottom edge with another child's top edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "BELOW",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's top edge with another child's bottom edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_BASELINE",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's baseline with another child's baseline.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_LEFT",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's left edge with another child's left edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_TOP",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's top edge with another child's top edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_RIGHT",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's right edge with another child's right edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_BOTTOM",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's bottom edge with another child's bottom edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_PARENT_LEFT",
    "type" : "int",
    "comment" : "\n     * Rule that aligns the child's left edge with its RelativeLayout\n     * parent's left edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_PARENT_TOP",
    "type" : "int",
    "comment" : "\n     * Rule that aligns the child's top edge with its RelativeLayout\n     * parent's top edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_PARENT_RIGHT",
    "type" : "int",
    "comment" : "\n     * Rule that aligns the child's right edge with its RelativeLayout\n     * parent's right edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_PARENT_BOTTOM",
    "type" : "int",
    "comment" : "\n     * Rule that aligns the child's bottom edge with its RelativeLayout\n     * parent's bottom edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "CENTER_IN_PARENT",
    "type" : "int",
    "comment" : "\n     * Rule that centers the child with respect to the bounds of its\n     * RelativeLayout parent.\n     ",
    "links" : [ ]
  }, {
    "name" : "CENTER_HORIZONTAL",
    "type" : "int",
    "comment" : "\n     * Rule that centers the child horizontally with respect to the\n     * bounds of its RelativeLayout parent.\n     ",
    "links" : [ ]
  }, {
    "name" : "CENTER_VERTICAL",
    "type" : "int",
    "comment" : "\n     * Rule that centers the child vertically with respect to the\n     * bounds of its RelativeLayout parent.\n     ",
    "links" : [ ]
  }, {
    "name" : "START_OF",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's end edge with another child's start edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "END_OF",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's start edge with another child's end edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_START",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's start edge with another child's start edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_END",
    "type" : "int",
    "comment" : "\n     * Rule that aligns a child's end edge with another child's end edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_PARENT_START",
    "type" : "int",
    "comment" : "\n     * Rule that aligns the child's start edge with its RelativeLayout\n     * parent's start edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_PARENT_END",
    "type" : "int",
    "comment" : "\n     * Rule that aligns the child's end edge with its RelativeLayout\n     * parent's end edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "VERB_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULES_VERTICAL",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULES_HORIZONTAL",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALUE_NOT_SET",
    "type" : "int",
    "comment" : "\n     * Used to indicate left/right/top/bottom should be inferred from constraints\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaselineView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelfBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIgnoreGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTopToBottomLeftToRightSet",
    "type" : "SortedSet<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDirtyHierarchy",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSortedHorizontalChildren",
    "type" : "View[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSortedVerticalChildren",
    "type" : "View[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGraph",
    "type" : "DependencyGraph",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowBrokenMeasureSpecs",
    "type" : "boolean",
    "comment" : " Some apps came to rely on them. :(",
    "links" : [ ]
  }, {
    "name" : "mMeasureVerticalWithPaddingMargin",
    "type" : "boolean",
    "comment" : " for children during the horizontal measure pass.",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_WIDTH",
    "type" : "int",
    "comment" : "\n     * Value reduced so as not to interfere with View's measurement spec. flags. See:\n     * {@link View#MEASURED_SIZE_MASK}.\n     * {@link View#MEASURED_STATE_TOO_SMALL}.\n     *",
    "links" : [ "android.view.View#MEASURED_SIZE_MASK", "android.view.View#MEASURED_STATE_TOO_SMALL" ]
  } ],
  "methods" : [ {
    "name" : "private void initFromAttributes(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void queryCompatibilityModes(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldDelayChildPressedState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIgnoreGravity(int viewId)",
    "returnType" : "void",
    "comment" : "\n     * Defines which View is ignored when the gravity is applied. This setting has no\n     * effect if the gravity is <code>Gravity.START | Gravity.TOP</code>.\n     *\n     * @param viewId The id of the View to be ignored by gravity, or 0 if no View\n     *        should be ignored.\n     *\n     * @see #setGravity(int)\n     *\n     * @attr ref android.R.styleable#RelativeLayout_ignoreGravity\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIgnoreGravity()",
    "returnType" : "int",
    "comment" : "\n     * Get the id of the View to be ignored by gravity\n     *\n     * @attr ref android.R.styleable#RelativeLayout_ignoreGravity\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGravity()",
    "returnType" : "int",
    "comment" : "\n     * Describes how the child views are positioned.\n     *\n     * @return the gravity.\n     *\n     * @see #setGravity(int)\n     * @see android.view.Gravity\n     *\n     * @attr ref android.R.styleable#RelativeLayout_gravity\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGravity(int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Describes how the child views are positioned. Defaults to\n     * <code>Gravity.START | Gravity.TOP</code>.\n     *\n     * <p>Note that since RelativeLayout considers the positioning of each child\n     * relative to one another to be significant, setting gravity will affect\n     * the positioning of all children as a single unit within the parent.\n     * This happens after children have been relatively positioned.</p>\n     *\n     * @param gravity See {@link android.view.Gravity}\n     *\n     * @see #setHorizontalGravity(int)\n     * @see #setVerticalGravity(int)\n     *\n     * @attr ref android.R.styleable#RelativeLayout_gravity\n     ",
    "links" : [ "android.view.Gravity" ]
  }, {
    "name" : "public void setHorizontalGravity(int horizontalGravity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalGravity(int verticalGravity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBaseline()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestLayout()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sortChildren()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int compareLayoutPosition(LayoutParams p1, LayoutParams p2)",
    "returnType" : "int",
    "comment" : "\n     * @return a negative number if the top of {@code p1} is above the top of\n     *         {@code p2} or if they have identical top values and the left of\n     *         {@code p1} is to the left of {@code p2}, or a positive number\n     *         otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private void measureChild(View child, LayoutParams params, int myWidth, int myHeight)",
    "returnType" : "void",
    "comment" : "\n     * Measure a child. The child should have left, top, right and bottom information\n     * stored in its LayoutParams. If any of these values is VALUE_NOT_SET it means\n     * that the view can extend up to the corresponding edge.\n     *\n     * @param child Child to measure\n     * @param params LayoutParams associated with child\n     * @param myWidth Width of the the RelativeLayout\n     * @param myHeight Height of the RelativeLayout\n     ",
    "links" : [ ]
  }, {
    "name" : "private void measureChildHorizontal(View child, LayoutParams params, int myWidth, int myHeight)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getChildMeasureSpec(int childStart, int childEnd, int childSize, int startMargin, int endMargin, int startPadding, int endPadding, int mySize)",
    "returnType" : "int",
    "comment" : "\n     * Get a measure spec that accounts for all of the constraints on this view.\n     * This includes size constraints imposed by the RelativeLayout as well as\n     * the View's desired dimension.\n     *\n     * @param childStart The left or top field of the child's layout params\n     * @param childEnd The right or bottom field of the child's layout params\n     * @param childSize The child's desired size (the width or height field of\n     *        the child's layout params)\n     * @param startMargin The left or top margin\n     * @param endMargin The right or bottom margin\n     * @param startPadding mPaddingLeft or mPaddingTop\n     * @param endPadding mPaddingRight or mPaddingBottom\n     * @param mySize The width or height of this view (the RelativeLayout)\n     * @return MeasureSpec for the child\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean positionChildHorizontal(View child, LayoutParams params, int myWidth, boolean wrapContent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void positionAtEdge(View child, LayoutParams params, int myWidth)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean positionChildVertical(View child, LayoutParams params, int myHeight, boolean wrapContent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyHorizontalSizeRules(LayoutParams childParams, int myWidth, int[] rules)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyVerticalSizeRules(LayoutParams childParams, int myHeight, int myBaseline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View getRelatedView(int[] rules, int relation)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LayoutParams getRelatedViewParams(int[] rules, int relation)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getRelatedViewBaselineOffset(int[] rules)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void centerHorizontal(View child, LayoutParams params, int myWidth)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void centerVertical(View child, LayoutParams params, int myHeight)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams generateLayoutParams(AttributeSet attrs)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ViewGroup.LayoutParams generateDefaultLayoutParams()",
    "returnType" : "ViewGroup.LayoutParams",
    "comment" : "\n     * Returns a set of layout parameters with a width of\n     * {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT},\n     * a height of {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT} and no spanning.\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "boolean",
    "comment" : " Override to allow type-checking of LayoutParams.",
    "links" : [ ]
  }, {
    "name" : "protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams lp)",
    "returnType" : "ViewGroup.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initFromAttributes(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)", "private void queryCompatibilityModes(Context context)", "public boolean shouldDelayChildPressedState()", "public void setIgnoreGravity(int viewId)", "public int getIgnoreGravity()", "public int getGravity()", "public void setGravity(int gravity)", "public void setHorizontalGravity(int horizontalGravity)", "public void setVerticalGravity(int verticalGravity)", "public int getBaseline()", "public void requestLayout()", "private void sortChildren()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "private int compareLayoutPosition(LayoutParams p1, LayoutParams p2)", "private void measureChild(View child, LayoutParams params, int myWidth, int myHeight)", "private void measureChildHorizontal(View child, LayoutParams params, int myWidth, int myHeight)", "private int getChildMeasureSpec(int childStart, int childEnd, int childSize, int startMargin, int endMargin, int startPadding, int endPadding, int mySize)", "private boolean positionChildHorizontal(View child, LayoutParams params, int myWidth, boolean wrapContent)", "private void positionAtEdge(View child, LayoutParams params, int myWidth)", "private boolean positionChildVertical(View child, LayoutParams params, int myHeight, boolean wrapContent)", "private void applyHorizontalSizeRules(LayoutParams childParams, int myWidth, int[] rules)", "private void applyVerticalSizeRules(LayoutParams childParams, int myHeight, int myBaseline)", "private View getRelatedView(int[] rules, int relation)", "private LayoutParams getRelatedViewParams(int[] rules, int relation)", "private int getRelatedViewBaselineOffset(int[] rules)", "private static void centerHorizontal(View child, LayoutParams params, int myWidth)", "private static void centerVertical(View child, LayoutParams params, int myHeight)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "protected ViewGroup.LayoutParams generateDefaultLayoutParams()", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams lp)", "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)", "public CharSequence getAccessibilityClassName()" ],
  "variableNames" : [ "TRUE", "LEFT_OF", "RIGHT_OF", "ABOVE", "BELOW", "ALIGN_BASELINE", "ALIGN_LEFT", "ALIGN_TOP", "ALIGN_RIGHT", "ALIGN_BOTTOM", "ALIGN_PARENT_LEFT", "ALIGN_PARENT_TOP", "ALIGN_PARENT_RIGHT", "ALIGN_PARENT_BOTTOM", "CENTER_IN_PARENT", "CENTER_HORIZONTAL", "CENTER_VERTICAL", "START_OF", "END_OF", "ALIGN_START", "ALIGN_END", "ALIGN_PARENT_START", "ALIGN_PARENT_END", "VERB_COUNT", "RULES_VERTICAL", "RULES_HORIZONTAL", "VALUE_NOT_SET", "mBaselineView", "mGravity", "mContentBounds", "mSelfBounds", "mIgnoreGravity", "mTopToBottomLeftToRightSet", "mDirtyHierarchy", "mSortedHorizontalChildren", "mSortedVerticalChildren", "mGraph", "mAllowBrokenMeasureSpecs", "mMeasureVerticalWithPaddingMargin", "DEFAULT_WIDTH" ]
}