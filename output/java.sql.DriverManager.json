{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/DriverManager.java",
  "packageName" : "java.sql",
  "className" : "DriverManager",
  "comment" : "\n * <P>The basic service for managing a set of JDBC drivers.<br>\n * <B>NOTE:</B> The {@code DataSource} interface, new in the\n * JDBC 2.0 API, provides another way to connect to a data source.\n * The use of a <code>DataSource</code> object is the preferred means of\n * connecting to a data source.\n *\n * <P>As part of its initialization, the <code>DriverManager</code> class will\n * attempt to load the driver classes referenced in the \"jdbc.drivers\"\n * system property. This allows a user to customize the JDBC Drivers\n * used by their applications. For example in your\n * ~/.hotjava/properties file you might specify:\n * <pre>\n * <CODE>jdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver</CODE>\n * </pre>\n *<P> The <code>DriverManager</code> methods <code>getConnection</code> and\n * <code>getDrivers</code> have been enhanced to support the Java Standard Edition\n * <a href=\"../../../technotes/guides/jar/jar.html#Service%20Provider\">Service Provider</a> mechanism. JDBC 4.0 Drivers must\n * include the file <code>META-INF/services/java.sql.Driver</code>. This file contains the name of the JDBC drivers\n * implementation of <code>java.sql.Driver</code>.  For example, to load the <code>my.sql.Driver</code> class,\n * the <code>META-INF/services/java.sql.Driver</code> file would contain the entry:\n * <pre>\n * <code>my.sql.Driver</code>\n * </pre>\n *\n * <P>Applications no longer need to explictly load JDBC drivers using <code>Class.forName()</code>. Existing programs\n * which currently load JDBC drivers using <code>Class.forName()</code> will continue to work without\n * modification.\n *\n * <P>When the method <code>getConnection</code> is called,\n * the <code>DriverManager</code> will attempt to\n * locate a suitable driver from amongst those loaded at\n * initialization and those loaded explicitly using the same classloader\n * as the current applet or application.\n *\n * <P>\n * Starting with the Java 2 SDK, Standard Edition, version 1.3, a\n * logging stream can be set only if the proper\n * permission has been granted.  Normally this will be done with\n * the tool PolicyTool, which can be used to grant <code>permission\n * java.sql.SQLPermission \"setLog\"</code>.\n * @see Driver\n * @see Connection\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "registeredDrivers",
    "type" : "CopyOnWriteArrayList<DriverInfo>",
    "comment" : " List of registered JDBC drivers",
    "links" : [ ]
  }, {
    "name" : "loginTimeout",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "logWriter",
    "type" : "java.io.PrintWriter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "logStream",
    "type" : "java.io.PrintStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "logSync",
    "type" : "Object",
    "comment" : " Used in println() to synchronize logWriter",
    "links" : [ ]
  }, {
    "name" : "SET_LOG_PERMISSION",
    "type" : "SQLPermission",
    "comment" : "\n     * The <code>SQLPermission</code> constant that allows the\n     * setting of the logging stream.\n     * @since 1.3\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static java.io.PrintWriter getLogWriter()",
    "returnType" : "java.io.PrintWriter",
    "comment" : "\n     * Retrieves the log writer.\n     *\n     * The <code>getLogWriter</code> and <code>setLogWriter</code>\n     * methods should be used instead\n     * of the <code>get/setlogStream</code> methods, which are deprecated.\n     * @return a <code>java.io.PrintWriter</code> object\n     * @see #setLogWriter\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setLogWriter(java.io.PrintWriter out)",
    "returnType" : "void",
    "comment" : "\n     * Sets the logging/tracing <code>PrintWriter</code> object\n     * that is used by the <code>DriverManager</code> and all drivers.\n     * <P>\n     * There is a minor versioning problem created by the introduction\n     * of the method <code>setLogWriter</code>.  The\n     * method <code>setLogWriter</code> cannot create a <code>PrintStream</code> object\n     * that will be returned by <code>getLogStream</code>---the Java platform does\n     * not provide a backward conversion.  As a result, a new application\n     * that uses <code>setLogWriter</code> and also uses a JDBC 1.0 driver that uses\n     * <code>getLogStream</code> will likely not see debugging information written\n     * by that driver.\n     *<P>\n     * Starting with the Java 2 SDK, Standard Edition, version 1.3 release, this method checks\n     * to see that there is an <code>SQLPermission</code> object before setting\n     * the logging stream.  If a <code>SecurityManager</code> exists and its\n     * <code>checkPermission</code> method denies setting the log writer, this\n     * method throws a <code>java.lang.SecurityException</code>.\n     *\n     * @param out the new logging/tracing <code>PrintStream</code> object;\n     *      <code>null</code> to disable logging and tracing\n     * @throws SecurityException\n     *    if a security manager exists and its\n     *    <code>checkPermission</code> method denies\n     *    setting the log writer\n     *\n     * @see SecurityManager#checkPermission\n     * @see #getLogWriter\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Connection getConnection(String url, java.util.Properties info) throws SQLException",
    "returnType" : "Connection",
    "comment" : "\n     * Attempts to establish a connection to the given database URL.\n     * The <code>DriverManager</code> attempts to select an appropriate driver from\n     * the set of registered JDBC drivers.\n     *\n     * @param url a database url of the form\n     * <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>\n     * @param info a list of arbitrary string tag/value pairs as\n     * connection arguments; normally at least a \"user\" and\n     * \"password\" property should be included\n     * @return a Connection to the URL\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Connection getConnection(String url, String user, String password) throws SQLException",
    "returnType" : "Connection",
    "comment" : "\n     * Attempts to establish a connection to the given database URL.\n     * The <code>DriverManager</code> attempts to select an appropriate driver from\n     * the set of registered JDBC drivers.\n     *\n     * @param url a database url of the form\n     * <code>jdbc:<em>subprotocol</em>:<em>subname</em></code>\n     * @param user the database user on whose behalf the connection is being\n     *   made\n     * @param password the user's password\n     * @return a connection to the URL\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Connection getConnection(String url) throws SQLException",
    "returnType" : "Connection",
    "comment" : "\n     * Attempts to establish a connection to the given database URL.\n     * The <code>DriverManager</code> attempts to select an appropriate driver from\n     * the set of registered JDBC drivers.\n     *\n     * @param url a database url of the form\n     *  <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>\n     * @return a connection to the URL\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Driver getDriver(String url) throws SQLException",
    "returnType" : "Driver",
    "comment" : "\n     * Attempts to locate a driver that understands the given URL.\n     * The <code>DriverManager</code> attempts to select an appropriate driver from\n     * the set of registered JDBC drivers.\n     *\n     * @param url a database URL of the form\n     *     <code>jdbc:<em>subprotocol</em>:<em>subname</em></code>\n     * @return a <code>Driver</code> object representing a driver\n     * that can connect to the given URL\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized void registerDriver(java.sql.Driver driver) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Registers the given driver with the <code>DriverManager</code>.\n     * A newly-loaded driver class should call\n     * the method <code>registerDriver</code> to make itself\n     * known to the <code>DriverManager</code>.\n     *\n     * @param driver the new JDBC Driver that is to be registered with the\n     *               <code>DriverManager</code>\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized void deregisterDriver(Driver driver) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Drops a driver from the <code>DriverManager</code>'s list.\n     *  Applets can only deregister drivers from their own classloaders.\n     *\n     * @param driver the JDBC Driver to drop\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public static java.util.Enumeration<Driver> getDrivers()",
    "returnType" : "java.util.Enumeration<Driver>",
    "comment" : "\n     * Retrieves an Enumeration with all of the currently loaded JDBC drivers\n     * to which the current caller has access.\n     *\n     * <P><B>Note:</B> The classname of a driver can be found using\n     * <CODE>d.getClass().getName()</CODE>\n     *\n     * @return the list of JDBC Drivers loaded by the caller's class loader\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setLoginTimeout(int seconds)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum time in seconds that a driver will wait\n     * while attempting to connect to a database.\n     *\n     * @param seconds the login time limit in seconds; zero means there is no limit\n     * @see #getLoginTimeout\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getLoginTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Gets the maximum time in seconds that a driver can wait\n     * when attempting to log in to a database.\n     *\n     * @return the driver login time limit in seconds\n     * @see #setLoginTimeout\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setLogStream(java.io.PrintStream out)",
    "returnType" : "void",
    "comment" : " Android-added: @Deprecated annotation from OpenJDK8u121-b13 to fix build warnings.",
    "links" : [ ]
  }, {
    "name" : "public static java.io.PrintStream getLogStream()",
    "returnType" : "java.io.PrintStream",
    "comment" : " Android-added: @Deprecated annotation from OpenJDK8u121-b13 to fix build warnings.",
    "links" : [ ]
  }, {
    "name" : "public static void println(String message)",
    "returnType" : "void",
    "comment" : "\n     * Prints a message to the current JDBC log stream.\n     *\n     * @param message a log or tracing message\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDriverAllowed(Driver driver, Class<?> caller)",
    "returnType" : "boolean",
    "comment" : " DriverManager is accessible.",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDriverAllowed(Driver driver, ClassLoader classLoader)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void loadInitialDrivers()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Connection getConnection(String url, java.util.Properties info, Class<?> caller) throws SQLException",
    "returnType" : "Connection",
    "comment" : "  Worker method called by the public getConnection() methods.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static java.io.PrintWriter getLogWriter()", "public static void setLogWriter(java.io.PrintWriter out)", "public static Connection getConnection(String url, java.util.Properties info) throws SQLException", "public static Connection getConnection(String url, String user, String password) throws SQLException", "public static Connection getConnection(String url) throws SQLException", "public static Driver getDriver(String url) throws SQLException", "public static synchronized void registerDriver(java.sql.Driver driver) throws SQLException", "public static synchronized void deregisterDriver(Driver driver) throws SQLException", "public static java.util.Enumeration<Driver> getDrivers()", "public static void setLoginTimeout(int seconds)", "public static int getLoginTimeout()", "public static void setLogStream(java.io.PrintStream out)", "public static java.io.PrintStream getLogStream()", "public static void println(String message)", "private static boolean isDriverAllowed(Driver driver, Class<?> caller)", "private static boolean isDriverAllowed(Driver driver, ClassLoader classLoader)", "private static void loadInitialDrivers()", "private static Connection getConnection(String url, java.util.Properties info, Class<?> caller) throws SQLException" ],
  "variableNames" : [ "registeredDrivers", "loginTimeout", "logWriter", "logStream", "logSync", "SET_LOG_PERMISSION" ]
}