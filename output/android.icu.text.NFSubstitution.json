{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/NFSubstitution.java",
  "packageName" : "android.icu.text",
  "className" : "NFSubstitution",
  "comment" : "\n * An abstract class defining protocol for substitutions.  A substitution\n * is a section of a rule that inserts text into the rule's rule text\n * based on some part of the number being formatted.\n * @author Richard Gillam\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "pos",
    "type" : "int",
    "comment" : "\n     * The substitution's position in the rule text of the rule that owns it\n     ",
    "links" : [ ]
  }, {
    "name" : "ruleSet",
    "type" : "NFRuleSet",
    "comment" : "\n     * The rule set this substitution uses to format its result, or null.\n     * (Either this or numberFormat has to be non-null.)\n     ",
    "links" : [ ]
  }, {
    "name" : "numberFormat",
    "type" : "DecimalFormat",
    "comment" : "\n     * The DecimalFormat this substitution uses to format its result,\n     * or null.  (Either this or ruleSet has to be non-null.)\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_INT64_IN_DOUBLE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NFSubstitution makeSubstitution(int pos, NFRule rule, NFRule rulePredecessor, NFRuleSet ruleSet, RuleBasedNumberFormat formatter, String description)",
    "returnType" : "NFSubstitution",
    "comment" : "\n     * Parses the description, creates the right kind of substitution,\n     * and initializes it based on the description.\n     * @param pos The substitution's position in the rule text of the\n     * rule that owns it.\n     * @param rule The rule containing this substitution\n     * @param rulePredecessor The rule preceding the one that contains\n     * this substitution in the rule set's rule list (this is used\n     * only for >>> substitutions).\n     * @param ruleSet The rule set containing the rule containing this\n     * substitution\n     * @param formatter The RuleBasedNumberFormat that ultimately owns\n     * this substitution\n     * @param description The description to parse to build the substitution\n     * (this is just the substring of the rule's description containing\n     * the substitution token itself)\n     * @return A new substitution constructed according to the description\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDivisor(int radix, short exponent)",
    "returnType" : "void",
    "comment" : "\n     * Set's the substitution's divisor.  Used by NFRule.setBaseValue().\n     * A no-op for all substitutions except multiplier and modulus\n     * substitutions.\n     * @param radix The radix of the divisor\n     * @param exponent The exponent of the divisor\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares two substitutions for equality\n     * @param that The substitution to compare this one to\n     * @return true if the two substitutions are functionally equivalent\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a textual description of the substitution\n     * @return A textual description of the substitution.  This might\n     * not be identical to the description it was created from, but\n     * it'll produce the same result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doSubstitution(long number, StringBuilder toInsertInto, int position, int recursionCount)",
    "returnType" : "void",
    "comment" : "\n     * Performs a mathematical operation on the number, formats it using\n     * either ruleSet or decimalFormat, and inserts the result into\n     * toInsertInto.\n     * @param number The number being formatted.\n     * @param toInsertInto The string we insert the result into\n     * @param position The position in toInsertInto where the owning rule's\n     * rule text begins (this value is added to this substitution's\n     * position to determine exactly where to insert the new text)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doSubstitution(double number, StringBuilder toInsertInto, int position, int recursionCount)",
    "returnType" : "void",
    "comment" : "\n     * Performs a mathematical operation on the number, formats it using\n     * either ruleSet or decimalFormat, and inserts the result into\n     * toInsertInto.\n     * @param number The number being formatted.\n     * @param toInsertInto The string we insert the result into\n     * @param position The position in toInsertInto where the owning rule's\n     * rule text begins (this value is added to this substitution's\n     * position to determine exactly where to insert the new text)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long transformNumber(long number)",
    "returnType" : "long",
    "comment" : "\n     * Subclasses override this function to perform some kind of\n     * mathematical operation on the number.  The result of this operation\n     * is formatted using the rule set or DecimalFormat that this\n     * substitution refers to, and the result is inserted into the result\n     * string.\n     * @param number The number being formatted\n     * @return The result of performing the opreration on the number\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract double transformNumber(double number)",
    "returnType" : "double",
    "comment" : "\n     * Subclasses override this function to perform some kind of\n     * mathematical operation on the number.  The result of this operation\n     * is formatted using the rule set or DecimalFormat that this\n     * substitution refers to, and the result is inserted into the result\n     * string.\n     * @param number The number being formatted\n     * @return The result of performing the opreration on the number\n     ",
    "links" : [ ]
  }, {
    "name" : "public Number doParse(String text, ParsePosition parsePosition, double baseValue, double upperBound, boolean lenientParse, int nonNumericalExecutedRuleMask)",
    "returnType" : "Number",
    "comment" : "\n     * Parses a string using the rule set or DecimalFormat belonging\n     * to this substitution.  If there's a match, a mathematical\n     * operation (the inverse of the one used in formatting) is\n     * performed on the result of the parse and the value passed in\n     * and returned as the result.  The parse position is updated to\n     * point to the first unmatched character in the string.\n     * @param text The string to parse\n     * @param parsePosition On entry, ignored, but assumed to be 0.\n     * On exit, this is updated to point to the first unmatched\n     * character (or 0 if the substitution didn't match)\n     * @param baseValue A partial parse result that should be\n     * combined with the result of this parse\n     * @param upperBound When searching the rule set for a rule\n     * matching the string passed in, only rules with base values\n     * lower than this are considered\n     * @param lenientParse If true and matching against rules fails,\n     * the substitution will also try matching the text against\n     * numerals using a default-constructed NumberFormat.  If false,\n     * no extra work is done.  (This value is false whenever the\n     * formatter isn't in lenient-parse mode, but is also false\n     * under some conditions even when the formatter _is_ in\n     * lenient-parse mode.)\n     * @return If there's a match, this is the result of composing\n     * baseValue with whatever was returned from matching the\n     * characters.  This will be either a Long or a Double.  If there's\n     * no match this is Long.valueOf(0) (not null), and parsePosition\n     * is left unchanged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract double composeRuleValue(double newRuleValue, double oldRuleValue)",
    "returnType" : "double",
    "comment" : "\n     * Derives a new value from the two values passed in.  The two values\n     * are typically either the base values of two rules (the one containing\n     * the substitution and the one matching the substitution) or partial\n     * parse results derived in some other way.  The operation is generally\n     * the inverse of the operation performed by transformNumber().\n     * @param newRuleValue The value produced by matching this substitution\n     * @param oldRuleValue The value that was passed to the substitution\n     * by the rule that owns it\n     * @return A third value derived from the other two, representing a\n     * partial parse result\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract double calcUpperBound(double oldUpperBound)",
    "returnType" : "double",
    "comment" : "\n     * Calculates an upper bound when searching for a rule that matches\n     * this substitution.  Rules with base values greater than or equal\n     * to upperBound are not considered.\n     * @param oldUpperBound The current upper-bound setting.  The new\n     * upper bound can't be any higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getPos()",
    "returnType" : "int",
    "comment" : "\n     * Returns the substitution's position in the rule that owns it.\n     * @return The substitution's position in the rule that owns it.\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract char tokenChar()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used in the textual representation of\n     * substitutions of this type.  Used by toString().\n     * @return This substitution's token character.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isModulusSubstitution()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this is a modulus substitution.  (We didn't do this\n     * with instanceof partially because it causes source files to\n     * proliferate and partially because we have to port this to C++.)\n     * @return true if this object is an instance of ModulusSubstitution\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDecimalFormatSymbols(DecimalFormatSymbols newSymbols)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static NFSubstitution makeSubstitution(int pos, NFRule rule, NFRule rulePredecessor, NFRuleSet ruleSet, RuleBasedNumberFormat formatter, String description)", "public void setDivisor(int radix, short exponent)", "public boolean equals(Object that)", "public int hashCode()", "public String toString()", "public void doSubstitution(long number, StringBuilder toInsertInto, int position, int recursionCount)", "public void doSubstitution(double number, StringBuilder toInsertInto, int position, int recursionCount)", "public abstract long transformNumber(long number)", "public abstract double transformNumber(double number)", "public Number doParse(String text, ParsePosition parsePosition, double baseValue, double upperBound, boolean lenientParse, int nonNumericalExecutedRuleMask)", "public abstract double composeRuleValue(double newRuleValue, double oldRuleValue)", "public abstract double calcUpperBound(double oldUpperBound)", "public final int getPos()", " abstract char tokenChar()", "public boolean isModulusSubstitution()", "public void setDecimalFormatSymbols(DecimalFormatSymbols newSymbols)" ],
  "variableNames" : [ "pos", "ruleSet", "numberFormat", "MAX_INT64_IN_DOUBLE" ]
}