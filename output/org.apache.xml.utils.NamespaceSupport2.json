{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/NamespaceSupport2.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "NamespaceSupport2",
  "comment" : "\n * Encapsulate Namespace tracking logic for use by SAX drivers.\n *\n * <p>This class is an attempt to rewrite the SAX NamespaceSupport\n * \"helper\" class for improved efficiency. It can be used to track the\n * namespace declarations currently in scope, providing lookup\n * routines to map prefixes to URIs and vice versa.</p>\n *\n * <p>ISSUE: For testing purposes, I've extended NamespaceSupport even\n * though I'm completely reasserting all behaviors and fields.\n * Wasteful.... But SAX did not put an interface under that object and\n * we seem to have written that SAX class into our APIs... and I don't\n * want to argue with it right now. </p>\n *\n * @see org.xml.sax.helpers.NamespaceSupport\n * ",
  "links" : [ ],
  "variables" : [ {
    "name" : "currentContext",
    "type" : "Context2",
    "comment" : " Current point on the double-linked stack",
    "links" : [ ]
  }, {
    "name" : "XMLNS",
    "type" : "String",
    "comment" : "\n     * The XML Namespace as a constant.\n     *\n     * <p>This is the Namespace URI that is automatically mapped\n     * to the \"xml\" prefix.</p>\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Reset this Namespace support object for reuse.\n     *\n     * <p>It is necessary to invoke this method before reusing the\n     * Namespace support object for a new session.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void pushContext()",
    "returnType" : "void",
    "comment" : "\n     * Start a new Namespace context.\n     *\n     * <p>Normally, you should push a new context at the beginning\n     * of each XML element: the new context will automatically inherit\n     * the declarations of its parent context, but it will also keep\n     * track of which declarations were made within this context.</p>\n     *\n     * <p>The Namespace support object always starts with a base context\n     * already in force: in this context, only the \"xml\" prefix is\n     * declared.</p>\n     *\n     * @see #popContext\n     ",
    "links" : [ ]
  }, {
    "name" : "public void popContext()",
    "returnType" : "void",
    "comment" : "\n     * Revert to the previous Namespace context.\n     *\n     * <p>Normally, you should pop the context at the end of each\n     * XML element.  After popping the context, all Namespace prefix\n     * mappings that were previously in force are restored.</p>\n     *\n     * <p>You must not attempt to declare additional Namespace\n     * prefixes after popping a context, unless you push another\n     * context first.</p>\n     *\n     * @see #pushContext\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean declarePrefix(String prefix, String uri)",
    "returnType" : "boolean",
    "comment" : "\n     * Declare a Namespace prefix.\n     *\n     * <p>This method declares a prefix in the current Namespace\n     * context; the prefix will remain in force until this context\n     * is popped, unless it is shadowed in a descendant context.</p>\n     *\n     * <p>To declare a default Namespace, use the empty string.  The\n     * prefix must not be \"xml\" or \"xmlns\".</p>\n     *\n     * <p>Note that you must <em>not</em> declare a prefix after\n     * you've pushed and popped another Namespace.</p>\n     *\n     * <p>Note that there is an asymmetry in this library: while {@link\n     * #getPrefix getPrefix} will not return the default \"\" prefix,\n     * even if you have declared one; to check for a default prefix,\n     * you have to look it up explicitly using {@link #getURI getURI}.\n     * This asymmetry exists to make it easier to look up prefixes\n     * for attribute names, where the default prefix is not allowed.</p>\n     *\n     * @param prefix The prefix to declare, or null for the empty\n     *        string.\n     * @param uri The Namespace URI to associate with the prefix.\n     * @return true if the prefix was legal, false otherwise\n     * @see #processName\n     * @see #getURI\n     * @see #getPrefix\n     ",
    "links" : [ "#getPrefix", "#getURI" ]
  }, {
    "name" : "public String[] processName(String qName, String[] parts, boolean isAttribute)",
    "returnType" : "String[]",
    "comment" : "\n     * Process a raw XML 1.0 name.\n     *\n     * <p>This method processes a raw XML 1.0 name in the current\n     * context by removing the prefix and looking it up among the\n     * prefixes currently declared.  The return value will be the\n     * array supplied by the caller, filled in as follows:</p>\n     *\n     * <dl>\n     * <dt>parts[0]</dt>\n     * <dd>The Namespace URI, or an empty string if none is\n     *  in use.</dd>\n     * <dt>parts[1]</dt>\n     * <dd>The local name (without prefix).</dd>\n     * <dt>parts[2]</dt>\n     * <dd>The original raw name.</dd>\n     * </dl>\n     *\n     * <p>All of the strings in the array will be internalized.  If\n     * the raw name has a prefix that has not been declared, then\n     * the return value will be null.</p>\n     *\n     * <p>Note that attribute names are processed differently than\n     * element names: an unprefixed element name will received the\n     * default Namespace (if any), while an unprefixed element name\n     * will not.</p>\n     *\n     * @param qName The raw XML 1.0 name to be processed.\n     * @param parts A string array supplied by the caller, capable of\n     *        holding at least three members.\n     * @param isAttribute A flag indicating whether this is an\n     *        attribute name (true) or an element name (false).\n     * @return The supplied array holding three internalized strings \n     *        representing the Namespace URI (or empty string), the\n     *        local name, and the raw XML 1.0 name; or null if there\n     *        is an undeclared prefix.\n     * @see #declarePrefix\n     * @see java.lang.String#intern ",
    "links" : [ ]
  }, {
    "name" : "public String getURI(String prefix)",
    "returnType" : "String",
    "comment" : "\n     * Look up a prefix and get the currently-mapped Namespace URI.\n     *\n     * <p>This method looks up the prefix in the current context.\n     * Use the empty string (\"\") for the default Namespace.</p>\n     *\n     * @param prefix The prefix to look up.\n     * @return The associated Namespace URI, or null if the prefix\n     *         is undeclared in this context.\n     * @see #getPrefix\n     * @see #getPrefixes\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration getPrefixes()",
    "returnType" : "Enumeration",
    "comment" : "\n     * Return an enumeration of all prefixes currently declared.\n     *\n     * <p><strong>Note:</strong> if there is a default prefix, it will not be\n     * returned in this enumeration; check for the default prefix\n     * using the {@link #getURI getURI} with an argument of \"\".</p>\n     *\n     * @return An enumeration of all prefixes declared in the\n     *         current context except for the empty (default)\n     *         prefix.\n     * @see #getDeclaredPrefixes\n     * @see #getURI\n     ",
    "links" : [ "#getURI" ]
  }, {
    "name" : "public String getPrefix(String uri)",
    "returnType" : "String",
    "comment" : "\n     * Return one of the prefixes mapped to a Namespace URI.\n     *\n     * <p>If more than one prefix is currently mapped to the same\n     * URI, this method will make an arbitrary selection; if you\n     * want all of the prefixes, use the {@link #getPrefixes}\n     * method instead.</p>\n     *\n     * <p><strong>Note:</strong> this will never return the empty\n     * (default) prefix; to check for a default prefix, use the {@link\n     * #getURI getURI} method with an argument of \"\".</p>\n     *\n     * @param uri The Namespace URI.\n     * @return One of the prefixes currently mapped to the URI supplied,\n     *         or null if none is mapped or if the URI is assigned to\n     *         the default Namespace.\n     * @see #getPrefixes(java.lang.String)\n     * @see #getURI ",
    "links" : [ "#getPrefixes", "#getURI" ]
  }, {
    "name" : "public Enumeration getPrefixes(String uri)",
    "returnType" : "Enumeration",
    "comment" : "\n     * Return an enumeration of all prefixes currently declared for a URI.\n     *\n     * <p>This method returns prefixes mapped to a specific Namespace\n     * URI.  The xml: prefix will be included.  If you want only one\n     * prefix that's mapped to the Namespace URI, and you don't care \n     * which one you get, use the {@link #getPrefix getPrefix}\n     *  method instead.</p>\n     *\n     * <p><strong>Note:</strong> the empty (default) prefix is\n     * <em>never</em> included in this enumeration; to check for the\n     * presence of a default Namespace, use the {@link #getURI getURI}\n     * method with an argument of \"\".</p>\n     *\n     * @param uri The Namespace URI.\n     * @return An enumeration of all prefixes declared in the\n     *         current context.\n     * @see #getPrefix\n     * @see #getDeclaredPrefixes\n     * @see #getURI ",
    "links" : [ "#getPrefix", "#getURI" ]
  }, {
    "name" : "public Enumeration getDeclaredPrefixes()",
    "returnType" : "Enumeration",
    "comment" : "\n     * Return an enumeration of all prefixes declared in this context.\n     *\n     * <p>The empty (default) prefix will be included in this \n     * enumeration; note that this behaviour differs from that of\n     * {@link #getPrefix} and {@link #getPrefixes}.</p>\n     *\n     * @return An enumeration of all prefixes declared in this\n     *         context.\n     * @see #getPrefixes\n     * @see #getURI\n     ",
    "links" : [ "#getPrefix", "#getPrefixes" ]
  } ],
  "methodNames" : [ "public void reset()", "public void pushContext()", "public void popContext()", "public boolean declarePrefix(String prefix, String uri)", "public String[] processName(String qName, String[] parts, boolean isAttribute)", "public String getURI(String prefix)", "public Enumeration getPrefixes()", "public String getPrefix(String uri)", "public Enumeration getPrefixes(String uri)", "public Enumeration getDeclaredPrefixes()" ],
  "variableNames" : [ "currentContext", "XMLNS" ]
}