{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/EncodingInfo.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "EncodingInfo",
  "comment" : "\n * Holds information about a given encoding, which is the Java name for the\n * encoding, the equivalent ISO name.\n * <p>\n * An object of this type has two useful methods\n * <pre>\n * isInEncoding(char ch);\n * </pre>\n * which can be called if the character is not the high one in\n * a surrogate pair and:\n * <pre>\n * isInEncoding(char high, char low);\n * </pre>\n * which can be called if the two characters from a high/low surrogate pair.\n * <p>\n * An EncodingInfo object is a node in a binary search tree. Such a node\n * will answer if a character is in the encoding, and do so for a given\n * range of unicode values (<code>m_first</code> to\n * <code>m_last</code>). It will handle a certain range of values\n * explicitly (<code>m_explFirst</code> to <code>m_explLast</code>).\n * If the unicode point is before that explicit range, that is it\n * is in the range <code>m_first <= value < m_explFirst</code>, then it will delegate to another EncodingInfo object for The root\n * of such a tree, m_before.  Likewise for values in the range \n * <code>m_explLast < value <= m_last</code>, but delgating to <code>m_after</code>\n * <p>\n * Actually figuring out if a code point is in the encoding is expensive. So the\n * purpose of this tree is to cache such determinations, and not to build the\n * entire tree of information at the start, but only build up as much of the \n * tree as is used during the transformation.\n * <p>\n * This Class is not a public API, and should only be used internally within\n * the serializer.\n * <p>\n * This class is not a public API.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_highCharInContiguousGroup",
    "type" : "char",
    "comment" : "\n     * Not all characters in an encoding are in on contiguous group,\n     * however there is a lowest contiguous group starting at '\\u0001'\n     * and working up to m_highCharInContiguousGroup.\n     * <p>\n     * This is the char for which chars at or below this value are \n     * definately in the encoding, although for chars\n     * above this point they might be in the encoding.\n     * This exists for performance, especially for ASCII characters\n     * because for ASCII all chars in the range '\\u0001' to '\\u007F' \n     * are in the encoding.\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "\n     * The ISO encoding name.\n     ",
    "links" : [ ]
  }, {
    "name" : "javaName",
    "type" : "String",
    "comment" : "\n     * The name used by the Java convertor.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_encoding",
    "type" : "InEncoding",
    "comment" : "\n     * A helper object that we can ask if a\n     * single char, or a surrogate UTF-16 pair\n     * of chars that form a single character,\n     * is in this encoding.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isInEncoding(char ch)",
    "returnType" : "boolean",
    "comment" : "\n     * This is not a public API. It returns true if the\n     * char in question is in the encoding.\n     * @param ch the char in question.\n     * <p>\n     * This method is not a public API.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInEncoding(char high, char low)",
    "returnType" : "boolean",
    "comment" : "\n     * This is not a public API. It returns true if the\n     * character formed by the high/low pair is in the encoding.\n     * @param high a char that the a high char of a high/low surrogate pair.\n     * @param low a char that is the low char of a high/low surrogate pair.\n     * <p>\n     * This method is not a public API.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean inEncoding(char ch, String encoding)",
    "returnType" : "boolean",
    "comment" : "\n     * This is heart of the code that determines if a given character\n     * is in the given encoding. This method is probably expensive,\n     * and the answer should be cached.\n     * <p>\n     * This method is not a public API,\n     * and should only be used internally within the serializer.\n     * @param ch the char in question, that is not a high char of\n     * a high/low surrogate pair.\n     * @param encoding the Java name of the enocding.\n     * \n     * @xsl.usage internal\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean inEncoding(char high, char low, String encoding)",
    "returnType" : "boolean",
    "comment" : "\n     * This is heart of the code that determines if a given high/low\n     * surrogate pair forms a character that is in the given encoding.\n     * This method is probably expensive, and the answer should be cached. \n     * <p>\n     * This method is not a public API,\n     * and should only be used internally within the serializer.\n     * @param high the high char of\n     * a high/low surrogate pair.\n     * @param low the low char of a high/low surrogate pair.\n     * @param encoding the Java name of the encoding.\n     * \n     * @xsl.usage internal\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean inEncoding(char ch, byte[] data)",
    "returnType" : "boolean",
    "comment" : "\n     * This method is the core of determining if character\n     * is in the encoding. The method is not foolproof, because\n     * s.getBytes(encoding) has specified behavior only if the\n     * characters are in the specified encoding. However this\n     * method tries it's best.\n     * @param ch the char that was converted using getBytes, or\n     * the first char of a high/low pair that was converted.\n     * @param data the bytes written out by the call to s.getBytes(encoding);\n     * @return true if the character is in the encoding.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final char getHighChar()",
    "returnType" : "char",
    "comment" : "\n     * This method exists for performance reasons.\n     * <p>\n     * Except for '\\u0000', if a char is less than or equal to the value\n     * returned by this method then it in the encoding.\n     * <p>\n     * The characters in an encoding are not contiguous, however\n     * there is a lowest group of chars starting at '\\u0001' upto and\n     * including the char returned by this method that are all in the encoding.\n     * So the char returned by this method essentially defines the lowest\n     * contiguous group.\n     * <p>\n     * chars above the value returned might be in the encoding, but \n     * chars at or below the value returned are definately in the encoding.\n     * <p>\n     * In any case however, the isInEncoding(char) method can be used\n     * regardless of the value of the char returned by this method.\n     * <p>\n     * If the value returned is '\\u0000' it means that every character must be tested\n     * with an isInEncoding method {@link #isInEncoding(char)} or {@link #isInEncoding(char, char)} \n     * for surrogate pairs.\n     * <p>\n     * This method is not a public API.\n     * @xsl.usage internal\n     ",
    "links" : [ "#isInEncoding(char", "#isInEncoding(char)" ]
  } ],
  "methodNames" : [ "public boolean isInEncoding(char ch)", "public boolean isInEncoding(char high, char low)", "private static boolean inEncoding(char ch, String encoding)", "private static boolean inEncoding(char high, char low, String encoding)", "private static boolean inEncoding(char ch, byte[] data)", "public final char getHighChar()" ],
  "variableNames" : [ "m_highCharInContiguousGroup", "name", "javaName", "m_encoding" ]
}