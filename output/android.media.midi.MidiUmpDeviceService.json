{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/midi/MidiUmpDeviceService.java",
  "packageName" : "android.media.midi",
  "className" : "MidiUmpDeviceService",
  "comment" : "\n * A service that implements a virtual MIDI device for Universal MIDI Packets (UMP).\n * Subclasses must implement the {@link #onGetInputPortReceivers} method to provide a\n * list of {@link MidiReceiver}s to receive data sent to the device's input ports.\n * Similarly, subclasses can call {@link #getOutputPortReceivers} to fetch a list\n * of {@link MidiReceiver}s for sending data out the output ports.\n *\n * Unlike traditional MIDI byte streams, only complete UMPs should be sent.\n * Unlike with {@link MidiDeviceService}, the number of input and output ports must be equal.\n *\n * <p>To extend this class, you must declare the service in your manifest file with\n * an intent filter with the {@link #SERVICE_INTERFACE} action\n * and meta-data to describe the virtual device.\n * For example:</p>\n * <pre>\n * &lt;service android:name=\".VirtualDeviceService\"\n *         android:label=\"&#64;string/service_name\">\n *     &lt;intent-filter>\n *             &lt;action android:name=\"android.media.midi.MidiUmpDeviceService\" />\n *     &lt;/intent-filter>\n *     &lt;property android:name=\"android.media.midi.MidiUmpDeviceService\"\n *             android:resource=\"@xml/device_info\" />\n * &lt;/service></pre>\n ",
  "links" : [ "#SERVICE_INTERFACE", "android.media.midi.MidiDeviceService", "android.media.midi.MidiReceiver", "#onGetInputPortReceivers", "#getOutputPortReceivers" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMidiManager",
    "type" : "IMidiManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServer",
    "type" : "MidiDeviceServer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceInfo",
    "type" : "MidiDeviceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "MidiDeviceServer.Callback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract List<MidiReceiver> onGetInputPortReceivers()",
    "returnType" : "List<MidiReceiver>",
    "comment" : "\n     * Returns a list of {@link MidiReceiver} for the device's input ports.\n     * Subclasses must override this to provide the receivers which will receive\n     * data sent to the device's input ports.\n     * The number of input and output ports must be equal and non-zero.\n     * @return list of MidiReceivers\n     ",
    "links" : [ "android.media.midi.MidiReceiver" ]
  }, {
    "name" : "public final List<MidiReceiver> getOutputPortReceivers()",
    "returnType" : "List<MidiReceiver>",
    "comment" : "\n     * Returns a list of {@link MidiReceiver} for the device's output ports.\n     * These can be used to send data out the device's output ports.\n     * The number of input and output ports must be equal and non-zero.\n     * @return the list of MidiReceivers\n     ",
    "links" : [ "android.media.midi.MidiReceiver" ]
  }, {
    "name" : "public final MidiDeviceInfo getDeviceInfo()",
    "returnType" : "MidiDeviceInfo",
    "comment" : "\n     * Returns the {@link MidiDeviceInfo} instance for this service\n     * @return the MidiDeviceInfo of the virtual MIDI device if it was successfully created\n     ",
    "links" : [ "android.media.midi.MidiDeviceInfo" ]
  }, {
    "name" : "public void onDeviceStatusChanged(@NonNull MidiDeviceStatus status)",
    "returnType" : "void",
    "comment" : "\n     * Called to notify when the {@link MidiDeviceStatus} has changed\n     * @param status the current status of the MIDI device\n     ",
    "links" : [ "android.media.midi.MidiDeviceStatus" ]
  }, {
    "name" : "public void onClose()",
    "returnType" : "void",
    "comment" : "\n     * Called to notify when the virtual MIDI device running in this service has been closed by\n     * all its clients\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public abstract List<MidiReceiver> onGetInputPortReceivers()", "public final List<MidiReceiver> getOutputPortReceivers()", "public final MidiDeviceInfo getDeviceInfo()", "public void onDeviceStatusChanged(@NonNull MidiDeviceStatus status)", "public void onClose()", "public IBinder onBind(@NonNull Intent intent)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "mMidiManager", "mServer", "mDeviceInfo", "mCallback" ]
}