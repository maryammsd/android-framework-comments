{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/Range.java",
  "packageName" : "android.util",
  "className" : "Range",
  "comment" : "\n * Immutable class for describing the range of two numeric values.\n * <p>\n * A range (or \"interval\") defines the inclusive boundaries around a contiguous span of\n * values of some {@link Comparable} type; for example,\n * \"integers from 1 to 100 inclusive.\"\n * </p>\n * <p>\n * All ranges are bounded, and the left side of the range is always {@code <=}\n * the right side of the range.\n * </p>\n *\n * <p>Although the implementation itself is immutable, there is no restriction that objects\n * stored must also be immutable. If mutable objects are stored here, then the range\n * effectively becomes mutable. </p>\n ",
  "variables" : [ {
    "name" : "mLower",
    "type" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpper",
    "type" : "T",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Range<T> create(final T lower, final T upper)",
    "returnType" : "Range<T>",
    "comment" : "\n     * Create a new immutable range, with the argument types inferred.\n     *\n     * <p>\n     * The endpoints are {@code [lower, upper]}; that\n     * is the range is bounded. {@code lower} must be {@link Comparable#compareTo lesser or equal}\n     * to {@code upper}.\n     * </p>\n     *\n     * @param lower The lower endpoint (inclusive)\n     * @param upper The upper endpoint (inclusive)\n     *\n     * @throws NullPointerException if {@code lower} or {@code upper} is {@code null}\n     ",
    "links" : [ "#compareTo" ]
  }, {
    "name" : "public T getLower()",
    "returnType" : "T",
    "comment" : "\n     * Get the lower endpoint.\n     *\n     * @return a non-{@code null} {@code T} reference\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getUpper()",
    "returnType" : "T",
    "comment" : "\n     * Get the upper endpoint.\n     *\n     * @return a non-{@code null} {@code T} reference\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(T value)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the {@code value} is within the bounds of this range.\n     *\n     * <p>A value is considered to be within this range if it's {@code >=}\n     * the lower endpoint <i>and</i> {@code <=} the upper endpoint (using the {@link Comparable}\n     * interface.)</p>\n     *\n     * @param value a non-{@code null} {@code T} reference\n     * @return {@code true} if the value is within this inclusive range, {@code false} otherwise\n     *\n     * @throws NullPointerException if {@code value} was {@code null}\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : "public boolean contains(Range<T> range)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if another {@code range} is within the bounds of this range.\n     *\n     * <p>A range is considered to be within this range if both of its endpoints\n     * are within this range.</p>\n     *\n     * @param range a non-{@code null} {@code T} reference\n     * @return {@code true} if the range is within this inclusive range, {@code false} otherwise\n     *\n     * @throws NullPointerException if {@code range} was {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare two ranges for equality.\n     *\n     * <p>A range is considered equal if and only if both the lower and upper endpoints\n     * are also equal.</p>\n     *\n     * @return {@code true} if the ranges are equal, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public T clamp(T value)",
    "returnType" : "T",
    "comment" : "\n     * Clamps {@code value} to this range.\n     *\n     * <p>If the value is within this range, it is returned.  Otherwise, if it\n     * is {@code <} than the lower endpoint, the lower endpoint is returned,\n     * else the upper endpoint is returned. Comparisons are performed using the\n     * {@link Comparable} interface.</p>\n     *\n     * @param value a non-{@code null} {@code T} reference\n     * @return {@code value} clamped to this range.\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : "public Range<T> intersect(Range<T> range)",
    "returnType" : "Range<T>",
    "comment" : "\n     * Returns the intersection of this range and another {@code range}.\n     * <p>\n     * E.g. if a {@code <} b {@code <} c {@code <} d, the\n     * intersection of [a, c] and [b, d] ranges is [b, c].\n     * As the endpoints are object references, there is no guarantee\n     * which specific endpoint reference is used from the input ranges:</p>\n     * <p>\n     * E.g. if a {@code ==} a' {@code <} b {@code <} c, the\n     * intersection of [a, b] and [a', c] ranges could be either\n     * [a, b] or ['a, b], where [a, b] could be either the exact\n     * input range, or a newly created range with the same endpoints.</p>\n     *\n     * @param range a non-{@code null} {@code Range<T>} reference\n     * @return the intersection of this range and the other range.\n     *\n     * @throws NullPointerException if {@code range} was {@code null}\n     * @throws IllegalArgumentException if the ranges are disjoint.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Range<T> intersect(T lower, T upper)",
    "returnType" : "Range<T>",
    "comment" : "\n     * Returns the intersection of this range and the inclusive range\n     * specified by {@code [lower, upper]}.\n     * <p>\n     * See {@link #intersect(Range)} for more details.</p>\n     *\n     * @param lower a non-{@code null} {@code T} reference\n     * @param upper a non-{@code null} {@code T} reference\n     * @return the intersection of this range and the other range\n     *\n     * @throws NullPointerException if {@code lower} or {@code upper} was {@code null}\n     * @throws IllegalArgumentException if the ranges are disjoint.\n     ",
    "links" : [ "#intersect(Range)" ]
  }, {
    "name" : "public Range<T> extend(Range<T> range)",
    "returnType" : "Range<T>",
    "comment" : "\n     * Returns the smallest range that includes this range and\n     * another {@code range}.\n     * <p>\n     * E.g. if a {@code <} b {@code <} c {@code <} d, the\n     * extension of [a, c] and [b, d] ranges is [a, d].\n     * As the endpoints are object references, there is no guarantee\n     * which specific endpoint reference is used from the input ranges:</p>\n     * <p>\n     * E.g. if a {@code ==} a' {@code <} b {@code <} c, the\n     * extension of [a, b] and [a', c] ranges could be either\n     * [a, c] or ['a, c], where ['a, c] could be either the exact\n     * input range, or a newly created range with the same endpoints.</p>\n     *\n     * @param range a non-{@code null} {@code Range<T>} reference\n     * @return the extension of this range and the other range.\n     *\n     * @throws NullPointerException if {@code range} was {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Range<T> extend(T lower, T upper)",
    "returnType" : "Range<T>",
    "comment" : "\n     * Returns the smallest range that includes this range and\n     * the inclusive range specified by {@code [lower, upper]}.\n     * <p>\n     * See {@link #extend(Range)} for more details.</p>\n     *\n     * @param lower a non-{@code null} {@code T} reference\n     * @param upper a non-{@code null} {@code T} reference\n     * @return the extension of this range and the other range.\n     *\n     * @throws NullPointerException if {@code lower} or {@code\n     *                              upper} was {@code null}\n     ",
    "links" : [ "#extend(Range)" ]
  }, {
    "name" : "public Range<T> extend(T value)",
    "returnType" : "Range<T>",
    "comment" : "\n     * Returns the smallest range that includes this range and\n     * the {@code value}.\n     * <p>\n     * See {@link #extend(Range)} for more details, as this method is\n     * equivalent to {@code extend(Range.create(value, value))}.</p>\n     *\n     * @param value a non-{@code null} {@code T} reference\n     * @return the extension of this range and the value.\n     *\n     * @throws NullPointerException if {@code value} was {@code null}\n     ",
    "links" : [ "#extend(Range)" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the range as a string representation {@code \"[lower, upper]\"}.\n     *\n     * @return string representation of the range\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mLower", "mUpper" ],
  "methodNames" : [ "public static Range<T> create(final T lower, final T upper)", "public T getLower()", "public T getUpper()", "public boolean contains(T value)", "public boolean contains(Range<T> range)", "public boolean equals(Object obj)", "public T clamp(T value)", "public Range<T> intersect(Range<T> range)", "public Range<T> intersect(T lower, T upper)", "public Range<T> extend(Range<T> range)", "public Range<T> extend(T lower, T upper)", "public Range<T> extend(T value)", "public String toString()", "public int hashCode()" ]
}