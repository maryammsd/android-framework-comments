{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/AsynchronousServerSocketChannel.java",
  "packageName" : "java.nio.channels",
  "className" : "AsynchronousServerSocketChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "AsynchronousChannelProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final AsynchronousChannelProvider provider()",
    "returnType" : "AsynchronousChannelProvider",
    "comment" : "\n     * Returns the provider that created this channel.\n     *\n     * @return  The provider that created this channel\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AsynchronousServerSocketChannel open(AsynchronousChannelGroup group) throws IOException",
    "returnType" : "AsynchronousServerSocketChannel",
    "comment" : "\n     * Opens an asynchronous server-socket channel.\n     *\n     * <p> The new channel is created by invoking the {@link\n     * java.nio.channels.spi.AsynchronousChannelProvider#openAsynchronousServerSocketChannel\n     * openAsynchronousServerSocketChannel} method on the {@link\n     * java.nio.channels.spi.AsynchronousChannelProvider} object that created\n     * the given group. If the group parameter is {@code null} then the\n     * resulting channel is created by the system-wide default provider, and\n     * bound to the <em>default group</em>.\n     *\n     * @param   group\n     *          The group to which the newly constructed channel should be bound,\n     *          or {@code null} for the default group\n     *\n     * @return  A new asynchronous server socket channel\n     *\n     * @throws  ShutdownChannelGroupException\n     *          If the channel group is shutdown\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "java.nio.channels.spi.AsynchronousChannelProvider#openAsynchronousServerSocketChannelopenAsynchronousServerSocketChannel", "java.nio.channels.spi.AsynchronousChannelProvider" ]
  }, {
    "name" : "public static AsynchronousServerSocketChannel open() throws IOException",
    "returnType" : "AsynchronousServerSocketChannel",
    "comment" : "\n     * Opens an asynchronous server-socket channel.\n     *\n     * <p> This method returns an asynchronous server socket channel that is\n     * bound to the <em>default group</em>. This method is equivalent to evaluating\n     * the expression:\n     * <blockquote><pre>\n     * open((AsynchronousChannelGroup)null);\n     * </pre></blockquote>\n     *\n     * @return  A new asynchronous server socket channel\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public final AsynchronousServerSocketChannel bind(SocketAddress local) throws IOException",
    "returnType" : "AsynchronousServerSocketChannel",
    "comment" : "\n     * Binds the channel's socket to a local address and configures the socket to\n     * listen for connections.\n     *\n     * <p> An invocation of this method is equivalent to the following:\n     * <blockquote><pre>\n     * bind(local, 0);\n     * </pre></blockquote>\n     *\n     * @param   local\n     *          The local address to bind the socket, or {@code null} to bind\n     *          to an automatically assigned socket address\n     *\n     * @return  This channel\n     *\n     * @throws  AlreadyBoundException               {@inheritDoc}\n     * @throws  UnsupportedAddressTypeException     {@inheritDoc}\n     * @throws  SecurityException                   {@inheritDoc}\n     * @throws  ClosedChannelException              {@inheritDoc}\n     * @throws  IOException                         {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract AsynchronousServerSocketChannel bind(SocketAddress local, int backlog) throws IOException",
    "returnType" : "AsynchronousServerSocketChannel",
    "comment" : "\n     * Binds the channel's socket to a local address and configures the socket to\n     * listen for connections.\n     *\n     * <p> This method is used to establish an association between the socket and\n     * a local address. Once an association is established then the socket remains\n     * bound until the associated channel is closed.\n     *\n     * <p> The {@code backlog} parameter is the maximum number of pending\n     * connections on the socket. Its exact semantics are implementation specific.\n     * In particular, an implementation may impose a maximum length or may choose\n     * to ignore the parameter altogther. If the {@code backlog} parameter has\n     * the value {@code 0}, or a negative value, then an implementation specific\n     * default is used.\n     *\n     * @param   local\n     *          The local address to bind the socket, or {@code null} to bind\n     *          to an automatically assigned socket address\n     * @param   backlog\n     *          The maximum number of pending connections\n     *\n     * @return  This channel\n     *\n     * @throws  AlreadyBoundException\n     *          If the socket is already bound\n     * @throws  UnsupportedAddressTypeException\n     *          If the type of the given address is not supported\n     * @throws  SecurityException\n     *          If a security manager has been installed and its {@link\n     *          SecurityManager#checkListen checkListen} method denies the operation\n     * @throws  ClosedChannelException\n     *          If the channel is closed\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ "#checkListen" ]
  }, {
    "name" : "public abstract AsynchronousServerSocketChannel setOption(SocketOption<T> name, T value) throws IOException",
    "returnType" : "AsynchronousServerSocketChannel",
    "comment" : "\n     * @throws  IllegalArgumentException                {@inheritDoc}\n     * @throws  ClosedChannelException                  {@inheritDoc}\n     * @throws  IOException                             {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void accept(A attachment, CompletionHandler<AsynchronousSocketChannel, ? super A> handler)",
    "returnType" : "void",
    "comment" : "\n     * Accepts a connection.\n     *\n     * <p> This method initiates an asynchronous operation to accept a\n     * connection made to this channel's socket. The {@code handler} parameter is\n     * a completion handler that is invoked when a connection is accepted (or\n     * the operation fails). The result passed to the completion handler is\n     * the {@link AsynchronousSocketChannel} to the new connection.\n     *\n     * <p> When a new connection is accepted then the resulting {@code\n     * AsynchronousSocketChannel} will be bound to the same {@link\n     * AsynchronousChannelGroup} as this channel. If the group is {@link\n     * AsynchronousChannelGroup#isShutdown shutdown} and a connection is accepted,\n     * then the connection is closed, and the operation completes with an {@code\n     * IOException} and cause {@link ShutdownChannelGroupException}.\n     *\n     * <p> To allow for concurrent handling of new connections, the completion\n     * handler is not invoked directly by the initiating thread when a new\n     * connection is accepted immediately (see <a\n     * href=\"AsynchronousChannelGroup.html#threading\">Threading</a>).\n     *\n     * <p> If a security manager has been installed then it verifies that the\n     * address and port number of the connection's remote endpoint are permitted\n     * by the security manager's {@link SecurityManager#checkAccept checkAccept}\n     * method. The permission check is performed with privileges that are restricted\n     * by the calling context of this method. If the permission check fails then\n     * the connection is closed and the operation completes with a {@link\n     * SecurityException}.\n     *\n     * @param   <A>\n     *          The type of the attachment\n     * @param   attachment\n     *          The object to attach to the I/O operation; can be {@code null}\n     * @param   handler\n     *          The handler for consuming the result\n     *\n     * @throws  AcceptPendingException\n     *          If an accept operation is already in progress on this channel\n     * @throws  NotYetBoundException\n     *          If this channel's socket has not yet been bound\n     * @throws  ShutdownChannelGroupException\n     *          If the channel group has terminated\n     ",
    "links" : [ "#checkAccept", "java.nio.channels.AsynchronousChannelGroup#isShutdown", "java.nio.channels.AsynchronousChannelGroup", "SecurityException", "java.nio.channels.ShutdownChannelGroupException", "java.nio.channels.AsynchronousSocketChannel" ]
  }, {
    "name" : "public abstract Future<AsynchronousSocketChannel> accept()",
    "returnType" : "Future<AsynchronousSocketChannel>",
    "comment" : "\n     * Accepts a connection.\n     *\n     * <p> This method initiates an asynchronous operation to accept a\n     * connection made to this channel's socket. The method behaves in exactly\n     * the same manner as the {@link #accept(Object, CompletionHandler)} method\n     * except that instead of specifying a completion handler, this method\n     * returns a {@code Future} representing the pending result. The {@code\n     * Future}'s {@link Future#get() get} method returns the {@link\n     * AsynchronousSocketChannel} to the new connection on successful completion.\n     *\n     * @return  a {@code Future} object representing the pending result\n     *\n     * @throws  AcceptPendingException\n     *          If an accept operation is already in progress on this channel\n     * @throws  NotYetBoundException\n     *          If this channel's socket has not yet been bound\n     ",
    "links" : [ "#accept(Object", "java.util.concurrent.Future#get()", "java.nio.channels.AsynchronousSocketChannel" ]
  }, {
    "name" : "public abstract SocketAddress getLocalAddress() throws IOException",
    "returnType" : "SocketAddress",
    "comment" : "\n     * {@inheritDoc}\n     * <p>\n     * If there is a security manager set, its {@code checkConnect} method is\n     * called with the local address and {@code -1} as its arguments to see\n     * if the operation is allowed. If the operation is not allowed,\n     * a {@code SocketAddress} representing the\n     * {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n     * local port of the channel's socket is returned.\n     *\n     * @return  The {@code SocketAddress} that the socket is bound to, or the\n     *          {@code SocketAddress} representing the loopback address if\n     *          denied by the security manager, or {@code null} if the\n     *          channel's socket is not bound\n     *\n     * @throws  ClosedChannelException     {@inheritDoc}\n     * @throws  IOException                {@inheritDoc}\n     ",
    "links" : [ "java.net.InetAddress#getLoopbackAddress" ]
  } ],
  "methodNames" : [ "public final AsynchronousChannelProvider provider()", "public static AsynchronousServerSocketChannel open(AsynchronousChannelGroup group) throws IOException", "public static AsynchronousServerSocketChannel open() throws IOException", "public final AsynchronousServerSocketChannel bind(SocketAddress local) throws IOException", "public abstract AsynchronousServerSocketChannel bind(SocketAddress local, int backlog) throws IOException", "public abstract AsynchronousServerSocketChannel setOption(SocketOption<T> name, T value) throws IOException", "public abstract void accept(A attachment, CompletionHandler<AsynchronousSocketChannel, ? super A> handler)", "public abstract Future<AsynchronousSocketChannel> accept()", "public abstract SocketAddress getLocalAddress() throws IOException" ],
  "variableNames" : [ "provider" ]
}