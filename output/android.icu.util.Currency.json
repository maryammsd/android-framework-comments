{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/Currency.java",
  "packageName" : "android.icu.util",
  "className" : "Currency",
  "comment" : "\n * A class encapsulating a currency, as defined by ISO 4217.  A\n * <tt>Currency</tt> object can be created given a <tt>Locale</tt> or\n * given an ISO 4217 code.  Once created, the <tt>Currency</tt> object\n * can return various data necessary to its proper display:\n *\n * <ul><li>A display symbol, for a specific locale\n * <li>The number of fraction digits to display\n * <li>A rounding increment\n * </ul>\n *\n * The <tt>DecimalFormat</tt> class uses these data to display\n * currencies.\n *\n * <p>Note: This class deliberately resembles\n * <tt>java.util.Currency</tt> but it has a completely independent\n * implementation, and adds features not present in the JDK.\n * @author Alan Liu\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CURRENCY_NAME_CACHE",
    "type" : "ICUCache<ULocale, List<TextTrieMap<CurrencyStringInfo>>>",
    "comment" : " Cache to save currency name trie",
    "links" : [ ]
  }, {
    "name" : "SYMBOL_NAME",
    "type" : "int",
    "comment" : "\n     * Selector for getName() indicating a symbolic name for a\n     * currency, such as \"$\" for USD.\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG_NAME",
    "type" : "int",
    "comment" : "\n     * Selector for getName() indicating the long name for a\n     * currency, such as \"US Dollar\" for USD.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLURAL_LONG_NAME",
    "type" : "int",
    "comment" : "\n     * Selector for getName() indicating the plural long name for a\n     * currency, such as \"US dollar\" for USD in \"1 US dollar\",\n     * and \"US dollars\" for USD in \"2 US dollars\".\n     ",
    "links" : [ ]
  }, {
    "name" : "NARROW_SYMBOL_NAME",
    "type" : "int",
    "comment" : "\n     * Selector for getName() indicating the narrow currency symbol.\n     * <p>\n     * The narrow currency symbol is similar to the regular currency symbol,\n     * but it always takes the shortest form;\n     * for example, \"$\" instead of \"US$\" for USD in en-CA.\n     ",
    "links" : [ ]
  }, {
    "name" : "FORMAL_SYMBOL_NAME",
    "type" : "int",
    "comment" : "\n     * Selector for getName() indicating the formal currency symbol.\n     * <p>\n     * The formal currency symbol is similar to the regular currency symbol,\n     * but it always takes the form used in formal settings such as banking;\n     * for example, \"NT$\" instead of \"$\" for TWD in zh-TW.\n     ",
    "links" : [ ]
  }, {
    "name" : "VARIANT_SYMBOL_NAME",
    "type" : "int",
    "comment" : "\n     * Selector for getName() indicating the variant currency symbol.\n     * <p>\n     * The variant symbol for a currency is an alternative symbol that is not\n     * necessarily as widely used as the regular symbol.\n     ",
    "links" : [ ]
  }, {
    "name" : "shim",
    "type" : "ServiceShim",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "regionCurrencyCache",
    "type" : "CacheBase<String, Currency, Void>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UND",
    "type" : "ULocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_STRING_ARRAY",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POW10",
    "type" : "int[]",
    "comment" : " POW10[i] = 10^i",
    "links" : [ ]
  }, {
    "name" : "ALL_TENDER_CODES",
    "type" : "SoftReference<List<String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALL_CODES_AS_SET",
    "type" : "SoftReference<Set<String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isoCode",
    "type" : "String",
    "comment" : "\n     * ISO 4217 3-letter code.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static ServiceShim getShim()",
    "returnType" : "ServiceShim",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Currency getInstance(Locale locale)",
    "returnType" : "Currency",
    "comment" : "\n     * Returns a currency object for the default currency in the given\n     * locale.\n     * @param locale the locale\n     * @return the currency object for this locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Currency getInstance(ULocale locale)",
    "returnType" : "Currency",
    "comment" : "\n     * Returns a currency object for the default currency in the given\n     * locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getAvailableCurrencyCodes(ULocale loc, Date d)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns an array of Strings which contain the currency\n     * identifiers that are valid for the given locale on the\n     * given date.  If there are no such identifiers, returns null.\n     * Returned identifiers are in preference order.\n     * @param loc the locale for which to retrieve currency codes.\n     * @param d the date for which to retrieve currency codes for the given locale.\n     * @return The array of ISO currency codes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getAvailableCurrencyCodes(Locale loc, Date d)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns an array of Strings which contain the currency\n     * identifiers that are valid for the given {@link java.util.Locale} on the\n     * given date.  If there are no such identifiers, returns null.\n     * Returned identifiers are in preference order.\n     * @param loc the {@link java.util.Locale} for which to retrieve currency codes.\n     * @param d the date for which to retrieve currency codes for the given locale.\n     * @return The array of ISO currency codes.\n     ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public static Set<Currency> getAvailableCurrencies()",
    "returnType" : "Set<Currency>",
    "comment" : "\n     * Returns the set of available currencies. The returned set of currencies contains all of the\n     * available currencies, including obsolete ones. The result set can be modified without\n     * affecting the available currencies in the runtime.\n     *\n     * @return The set of available currencies. The returned set could be empty if there is no\n     * currency data available.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Currency createCurrency(ULocale loc)",
    "returnType" : "Currency",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "private static Currency loadCurrency(String key)",
    "returnType" : "Currency",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Currency getInstance(String theISOCode)",
    "returnType" : "Currency",
    "comment" : "\n     * Returns a currency object given an ISO 4217 3-letter code.\n     * @param theISOCode the iso code\n     * @return the currency for this iso code\n     * @throws NullPointerException if <code>theISOCode</code> is null.\n     * @throws IllegalArgumentException if <code>theISOCode</code> is not a\n     *         3-letter alpha code.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isAlpha3Code(String code)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Currency fromJavaCurrency(java.util.Currency currency)",
    "returnType" : "Currency",
    "comment" : "\n     * Returns a Currency object based on the currency represented by the given java.util.Currency.\n     *\n     * @param currency The Java currency object to convert.\n     * @return An equivalent ICU currency object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.util.Currency toJavaCurrency()",
    "returnType" : "java.util.Currency",
    "comment" : "\n     * Returns a java.util.Currency object based on the currency represented by this Currency.\n     *\n     * @return An equivalent Java currency object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Object registerInstance(Currency currency, ULocale locale)",
    "returnType" : "Object",
    "comment" : "\n     * Registers a new currency for the provided locale.  The returned object\n     * is a key that can be used to unregister this currency object.\n     *\n     * <p>Because ICU may choose to cache Currency objects internally, this must\n     * be called at application startup, prior to any calls to\n     * Currency.getInstance to avoid undefined behavior.\n     *\n     * @param currency the currency to register\n     * @param locale the ulocale under which to register the currency\n     * @return a registry key that can be used to unregister this currency\n     * @see #unregister\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean unregister(Object registryKey)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregister the currency associated with this key (obtained from\n     * registerInstance).\n     * @param registryKey the registry key returned from registerInstance\n     * @see #registerInstance\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Return an array of the locales for which a currency\n     * is defined.\n     * @return an array of the available locales\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale[] getAvailableULocales()",
    "returnType" : "ULocale[]",
    "comment" : "\n     * Return an array of the ulocales for which a currency\n     * is defined.\n     * @return an array of the available ulocales\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String[] getKeywordValuesForLocale(String key, ULocale locale, boolean commonlyUsed)",
    "returnType" : "String[]",
    "comment" : "\n     * Given a key and a locale, returns an array of values for the key for which data\n     * exists.  If commonlyUsed is true, these are the values that typically are used\n     * with this locale, otherwise these are all values for which data exists.\n     * This is a common service API.\n     * <p>\n     * The only supported key is \"currency\", other values return an empty array.\n     * <p>\n     * Currency information is based on the region of the locale.  If the locale does not\n     * indicate a region, {@link ULocale#addLikelySubtags(ULocale)} is used to infer a region,\n     * except for the 'und' locale.\n     * <p>\n     * If commonlyUsed is true, only the currencies known to be in use as of the current date\n     * are returned.  When there are more than one, these are returned in preference order\n     * (typically, this occurs when a country is transitioning to a new currency, and the\n     * newer currency is preferred), see\n     * <a href=\"http://unicode.org/reports/tr35/#Supplemental_Currency_Data\">Unicode TR#35 Sec. C1</a>.\n     * If commonlyUsed is false, all currencies ever used in any locale are returned, in no\n     * particular order.\n     *\n     * @param key           key whose values to look up.  the only recognized key is \"currency\"\n     * @param locale        the locale\n     * @param commonlyUsed  if true, return only values that are currently used in the locale.\n     *                      Otherwise returns all values.\n     * @return an array of values for the given key and the locale.  If there is no data, the\n     *   array will be empty.\n     ",
    "links" : [ "android.icu.util.ULocale#addLikelySubtags(ULocale)" ]
  }, {
    "name" : "public String getCurrencyCode()",
    "returnType" : "String",
    "comment" : "\n     * Returns the ISO 4217 3-letter code for this currency object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNumericCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ISO 4217 numeric code for this currency object.\n     * <p>Note: If the ISO 4217 numeric code is not assigned for the currency or\n     * the currency is unknown, this method returns 0.</p>\n     * @return The ISO 4217 numeric code of this currency.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSymbol()",
    "returnType" : "String",
    "comment" : "\n     * Convenience and compatibility override of getName that\n     * requests the symbol name for the default <code>DISPLAY</code> locale.\n     * @see #getName\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSymbol(Locale loc)",
    "returnType" : "String",
    "comment" : "\n     * Convenience and compatibility override of getName that\n     * requests the symbol name.\n     * @param loc the Locale for the symbol\n     * @see #getName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSymbol(ULocale uloc)",
    "returnType" : "String",
    "comment" : "\n     * Convenience and compatibility override of getName that\n     * requests the symbol name.\n     * @param uloc the ULocale for the symbol\n     * @see #getName\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName(Locale locale, int nameStyle, boolean[] isChoiceFormat)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name for the given currency in the\n     * given locale.\n     * This is a convenient method for\n     * getName(ULocale, int, boolean[]);\n     *\n     * @param locale locale in which to display currency\n     * @param nameStyle selector for which kind of name to return.\n     *                  The nameStyle should be SYMBOL_NAME, NARROW_SYMBOL_NAME,\n     *                  or LONG_NAME. Otherwise, throw IllegalArgumentException.\n     * @param isChoiceFormat isChoiceFormat[0] is always set to false, or isChoiceFormat can be null;\n     *     display names are static strings;\n     *     since ICU 4.4, ChoiceFormat patterns are no longer supported\n     * @return display string for this currency.  If the resource data\n     * contains no entry for this currency, then the ISO 4217 code is\n     * returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName(ULocale locale, int nameStyle, boolean[] isChoiceFormat)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name for the given currency in the\n     * given locale.  For example, the display name for the USD\n     * currency object in the en_US locale is \"$\".\n     *\n     * @param locale locale in which to display currency\n     * @param nameStyle selector for which kind of name to return.\n     *                  The nameStyle should be SYMBOL_NAME, NARROW_SYMBOL_NAME,\n     *                  or LONG_NAME. Otherwise, throw IllegalArgumentException.\n     * @param isChoiceFormat isChoiceFormat[0] is always set to false, or isChoiceFormat can be null;\n     *     display names are static strings;\n     *     since ICU 4.4, ChoiceFormat patterns are no longer supported\n     * @return display string for this currency.  If the resource data\n     * contains no entry for this currency, then the ISO 4217 code is\n     * returned.\n     * <p>\n     * @throws  IllegalArgumentException  if the nameStyle is not SYMBOL_NAME\n     *                                    or LONG_NAME.\n     * @see #getName(ULocale, int, String, boolean[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName(Locale locale, int nameStyle, String pluralCount, boolean[] isChoiceFormat)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name for the given currency in the given locale.\n     * This is a convenience overload of getName(ULocale, int, String, boolean[]);\n     *\n     * @param locale locale in which to display currency\n     * @param nameStyle selector for which kind of name to return\n     * @param pluralCount plural count string for this locale\n     * @param isChoiceFormat isChoiceFormat[0] is always set to false, or isChoiceFormat can be null;\n     *     display names are static strings;\n     *     since ICU 4.4, ChoiceFormat patterns are no longer supported\n     * @return display string for this currency.  If the resource data\n     * contains no entry for this currency, then the ISO 4217 code is\n     * returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName(ULocale locale, int nameStyle, String pluralCount, boolean[] isChoiceFormat)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name for the given currency in the\n     * given locale.  For example, the SYMBOL_NAME for the USD\n     * currency object in the en_US locale is \"$\".\n     * The PLURAL_LONG_NAME for the USD currency object when the currency\n     * amount is plural is \"US dollars\", such as in \"3.00 US dollars\";\n     * while the PLURAL_LONG_NAME for the USD currency object when the currency\n     * amount is singular is \"US dollar\", such as in \"1.00 US dollar\".\n     *\n     * @param locale locale in which to display currency\n     * @param nameStyle selector for which kind of name to return\n     * @param pluralCount plural count string for this locale\n     * @param isChoiceFormat isChoiceFormat[0] is always set to false, or isChoiceFormat can be null;\n     *     display names are static strings;\n     *     since ICU 4.4, ChoiceFormat patterns are no longer supported\n     * @return display string for this currency.  If the resource data\n     * contains no entry for this currency, then the ISO 4217 code is\n     * returned.\n     * @throws  IllegalArgumentException  if the nameStyle is not SYMBOL_NAME,\n     *                                    LONG_NAME, or PLURAL_LONG_NAME.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name for this currency in the default locale.\n     * If the resource data for the default locale contains no entry for this currency,\n     * then the ISO 4217 code is returned.\n     * <p>\n     * Note: This method is a convenience equivalent for\n     * {@link java.util.Currency#getDisplayName()} and is equivalent to\n     * <code>getName(Locale.getDefault(), LONG_NAME, null)</code>.\n     *\n     * @return The display name of this currency\n     * @see #getDisplayName(Locale)\n     * @see #getName(Locale, int, boolean[])\n     ",
    "links" : [ "java.util.Currency#getDisplayName()" ]
  }, {
    "name" : "public String getDisplayName(Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name for this currency in the given locale.\n     * If the resource data for the given locale contains no entry for this currency,\n     * then the ISO 4217 code is returned.\n     * <p>\n     * Note: This method is a convenience equivalent for\n     * {@link java.util.Currency#getDisplayName(java.util.Locale)} and is equivalent\n     * to <code>getName(locale, LONG_NAME, null)</code>.\n     *\n     * @param locale locale in which to display currency\n     * @return The display name of this currency for the specified locale\n     * @see #getDisplayName(Locale)\n     * @see #getName(Locale, int, boolean[])\n     ",
    "links" : [ "java.util.Currency#getDisplayName(java.util.Locale)" ]
  }, {
    "name" : "public static String parse(ULocale locale, String text, int type, ParsePosition pos)",
    "returnType" : "String",
    "comment" : "\n     * Attempt to parse the given string as a currency, either as a\n     * display name in the given locale, or as a 3-letter ISO 4217\n     * code.  If multiple display names match, then the longest one is\n     * selected.  If both a display name and a 3-letter ISO code\n     * match, then the display name is preferred, unless it's length\n     * is less than 3.\n     *\n     * @param locale the locale of the display names to match\n     * @param text the text to parse\n     * @param type parse against currency type: LONG_NAME only or not\n     * @param pos input-output position; on input, the position within\n     * text to match; must have 0 &lt;= pos.getIndex() &lt; text.length();\n     * on output, the position after the last matched character. If\n     * the parse fails, the position in unchanged upon output.\n     * @return the ISO 4217 code, as a string, of the best match, or\n     * null if there is no match\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TextTrieMap<CurrencyStringInfo> getParsingTrie(ULocale locale, int type)",
    "returnType" : "TextTrieMap<CurrencyStringInfo>",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static List<TextTrieMap<CurrencyStringInfo>> getCurrencyTrieVec(ULocale locale)",
    "returnType" : "List<TextTrieMap<CurrencyStringInfo>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setupCurrencyTrieVec(ULocale locale, List<TextTrieMap<CurrencyStringInfo>> trieVec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultFractionDigits()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of the number of fraction digits that should\n     * be displayed for this currency.\n     * This is equivalent to getDefaultFractionDigits(CurrencyUsage.STANDARD);\n     *\n     * Important: The number of fraction digits for a given currency is NOT\n     * guaranteed to be constant across versions of ICU or CLDR. For example,\n     * do NOT use this value as a mechanism for deciding the magnitude used\n     * to store currency values in a database. You should use this value for\n     * display purposes only.\n     *\n     * @return a non-negative number of fraction digits to be\n     * displayed\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultFractionDigits(CurrencyUsage Usage)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of the number of fraction digits that should\n     * be displayed for this currency with Usage.\n     *\n     * Important: The number of fraction digits for a given currency is NOT\n     * guaranteed to be constant across versions of ICU or CLDR. For example,\n     * do NOT use this value as a mechanism for deciding the magnitude used\n     * to store currency values in a database. You should use this value for\n     * display purposes only.\n     *\n     * @param Usage the usage of currency(Standard or Cash)\n     * @return a non-negative number of fraction digits to be\n     * displayed\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getRoundingIncrement()",
    "returnType" : "double",
    "comment" : "\n     * Returns the rounding increment for this currency, or 0.0 if no\n     * rounding is done by this currency.\n     * This is equivalent to getRoundingIncrement(CurrencyUsage.STANDARD);\n     * @return the non-negative rounding increment, or 0.0 if none\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getRoundingIncrement(CurrencyUsage Usage)",
    "returnType" : "double",
    "comment" : "\n     * Returns the rounding increment for this currency, or 0.0 if no\n     * rounding is done by this currency with the Usage.\n     * @param Usage the usage of currency(Standard or Cash)\n     * @return the non-negative rounding increment, or 0.0 if none\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the ISO 4217 code for this currency.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static synchronized List<String> getAllTenderCurrencies()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns an unmodifiable String list including all known tender currency codes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static synchronized Set<String> getAllCurrenciesAsSet()",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAvailable(String code, Date from, Date to)",
    "returnType" : "boolean",
    "comment" : "\n     * Queries if the given ISO 4217 3-letter code is available on the specified date range.\n     * <p>\n     * Note: For checking availability of a currency on a specific date, specify the date on both <code>from</code> and\n     * <code>to</code>. When both <code>from</code> and <code>to</code> are null, this method checks if the specified\n     * currency is available all time.\n     *\n     * @param code\n     *            The ISO 4217 3-letter code.\n     * @param from\n     *            The lower bound of the date range, inclusive. When <code>from</code> is null, check the availability\n     *            of the currency any date before <code>to</code>\n     * @param to\n     *            The upper bound of the date range, inclusive. When <code>to</code> is null, check the availability of\n     *            the currency any date after <code>from</code>\n     * @return true if the given ISO 4217 3-letter code is supported on the specified date range.\n     * @throws IllegalArgumentException when <code>to</code> is before <code>from</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static List<String> getTenderCurrencies(CurrencyFilter filter)",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the list of remaining tender currencies after a filter is applied.\n     * @param filter the filter to apply to the tender currencies\n     * @return a list of tender currencies\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object writeReplace() throws ObjectStreamException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object readResolve() throws ObjectStreamException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static ServiceShim getShim()", "public static Currency getInstance(Locale locale)", "public static Currency getInstance(ULocale locale)", "public static String[] getAvailableCurrencyCodes(ULocale loc, Date d)", "public static String[] getAvailableCurrencyCodes(Locale loc, Date d)", "public static Set<Currency> getAvailableCurrencies()", " static Currency createCurrency(ULocale loc)", "private static Currency loadCurrency(String key)", "public static Currency getInstance(String theISOCode)", "private static boolean isAlpha3Code(String code)", "public static Currency fromJavaCurrency(java.util.Currency currency)", "public java.util.Currency toJavaCurrency()", "public static Object registerInstance(Currency currency, ULocale locale)", "public static boolean unregister(Object registryKey)", "public static Locale[] getAvailableLocales()", "public static ULocale[] getAvailableULocales()", "public static final String[] getKeywordValuesForLocale(String key, ULocale locale, boolean commonlyUsed)", "public String getCurrencyCode()", "public int getNumericCode()", "public String getSymbol()", "public String getSymbol(Locale loc)", "public String getSymbol(ULocale uloc)", "public String getName(Locale locale, int nameStyle, boolean[] isChoiceFormat)", "public String getName(ULocale locale, int nameStyle, boolean[] isChoiceFormat)", "public String getName(Locale locale, int nameStyle, String pluralCount, boolean[] isChoiceFormat)", "public String getName(ULocale locale, int nameStyle, String pluralCount, boolean[] isChoiceFormat)", "public String getDisplayName()", "public String getDisplayName(Locale locale)", "public static String parse(ULocale locale, String text, int type, ParsePosition pos)", "public static TextTrieMap<CurrencyStringInfo> getParsingTrie(ULocale locale, int type)", "private static List<TextTrieMap<CurrencyStringInfo>> getCurrencyTrieVec(ULocale locale)", "private static void setupCurrencyTrieVec(ULocale locale, List<TextTrieMap<CurrencyStringInfo>> trieVec)", "public int getDefaultFractionDigits()", "public int getDefaultFractionDigits(CurrencyUsage Usage)", "public double getRoundingIncrement()", "public double getRoundingIncrement(CurrencyUsage Usage)", "public String toString()", "private static synchronized List<String> getAllTenderCurrencies()", "private static synchronized Set<String> getAllCurrenciesAsSet()", "public static boolean isAvailable(String code, Date from, Date to)", "private static List<String> getTenderCurrencies(CurrencyFilter filter)", "private Object writeReplace() throws ObjectStreamException", "private Object readResolve() throws ObjectStreamException" ],
  "variableNames" : [ "serialVersionUID", "DEBUG", "CURRENCY_NAME_CACHE", "SYMBOL_NAME", "LONG_NAME", "PLURAL_LONG_NAME", "NARROW_SYMBOL_NAME", "FORMAL_SYMBOL_NAME", "VARIANT_SYMBOL_NAME", "shim", "regionCurrencyCache", "UND", "EMPTY_STRING_ARRAY", "POW10", "ALL_TENDER_CODES", "ALL_CODES_AS_SET", "isoCode" ]
}