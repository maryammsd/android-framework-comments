{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/timezone/RulesManager.java",
  "packageName" : "android.app.timezone",
  "className" : "RulesManager",
  "comment" : "\n * The interface through which a time zone update application interacts with the Android system\n * to handle time zone rule updates.\n *\n * <p>This interface is intended for use with the default APK-based time zone rules update\n * application but it can also be used by OEMs if that mechanism is turned off using configuration.\n * All callers must possess the {@link android.Manifest.permission#UPDATE_TIME_ZONE_RULES} system\n * permission unless otherwise stated.\n *\n * <p>When using the default mechanism, when properly configured the Android system will send a\n * {@link RulesUpdaterContract#ACTION_TRIGGER_RULES_UPDATE_CHECK} intent with a\n * {@link RulesUpdaterContract#EXTRA_CHECK_TOKEN} extra to the time zone rules updater application\n * when it detects that it or the OEM's APK containing time zone rules data has been modified. The\n * updater application is then responsible for calling one of\n * {@link #requestInstall(ParcelFileDescriptor, byte[], Callback)},\n * {@link #requestUninstall(byte[], Callback)} or\n * {@link #requestNothing(byte[], boolean)}, indicating, respectively, whether a new time zone rules\n * distro should be installed, the current distro should be uninstalled, or there is nothing to do\n * (or that the correct operation could not be determined due to an error). In each case the updater\n * must pass the {@link RulesUpdaterContract#EXTRA_CHECK_TOKEN} value it received from the intent\n * back so the system in the {@code checkToken} parameter.\n *\n * <p>If OEMs want to handle their own time zone rules updates, perhaps via a server-side component\n * rather than an APK, then they should disable the default triggering mechanism in config and are\n * responsible for triggering their own update checks / installs / uninstalls. In this case the\n * \"check token\" parameter can be left null and there is never any need to call\n * {@link #requestNothing(byte[], boolean)}.\n *\n * <p>OEMs should not mix the default mechanism and their own as this could lead to conflicts and\n * unnecessary checks being triggered.\n *\n * <p>Applications obtain this using {@link android.app.Activity#getSystemService(String)} with\n * {@link Context#TIME_ZONE_RULES_MANAGER_SERVICE}.\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_RULES_UPDATE_OPERATION",
    "type" : "String",
    "comment" : "\n     * The action of the intent that the Android system will broadcast when a time zone rules update\n     * operation has been successfully staged  (i.e. to be applied next reboot) or unstaged.\n     *\n     * <p>See {@link #EXTRA_OPERATION_STAGED}\n     *\n     * <p>This is a protected intent that can only be sent by the system.\n     ",
    "links" : [ "#EXTRA_OPERATION_STAGED" ]
  }, {
    "name" : "EXTRA_OPERATION_STAGED",
    "type" : "String",
    "comment" : "\n     * The key for a boolean extra for the {@link #ACTION_RULES_UPDATE_OPERATION} intent used to\n     * indicate whether the operation was a \"stage\" or an \"unstage\".\n     ",
    "links" : [ "#ACTION_RULES_UPDATE_OPERATION" ]
  }, {
    "name" : "SUCCESS",
    "type" : "int",
    "comment" : "\n     * Indicates that an operation succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_OPERATION_IN_PROGRESS",
    "type" : "int",
    "comment" : "\n     * Indicates that an install/uninstall cannot be initiated because there is one already in\n     * progress.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNKNOWN_FAILURE",
    "type" : "int",
    "comment" : "\n     * Indicates an install / uninstall did not fully succeed for an unknown reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIRulesManager",
    "type" : "IRulesManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public RulesState getRulesState()",
    "returnType" : "RulesState",
    "comment" : "\n     * Returns information about the current time zone rules state such as the IANA version of\n     * the system and any currently installed distro. This method allows clients to determine the\n     * current device state, perhaps to see if it can be improved; for example by passing the\n     * information to a server that may provide a new distro for download.\n     *\n     * <p>Callers must possess the {@link android.Manifest.permission#QUERY_TIME_ZONE_RULES} system\n     * permission.\n     ",
    "links" : [ "android.Manifest.permission#QUERY_TIME_ZONE_RULES" ]
  }, {
    "name" : "public int requestInstall(ParcelFileDescriptor distroFileDescriptor, byte[] checkToken, Callback callback) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Requests installation of the supplied distro. The distro must have been checked for integrity\n     * by the caller or have been received via a trusted mechanism.\n     *\n     * @param distroFileDescriptor the file descriptor for the distro\n     * @param checkToken an optional token provided if the install was triggered in response to a\n     *     {@link RulesUpdaterContract#ACTION_TRIGGER_RULES_UPDATE_CHECK} intent\n     * @param callback the {@link Callback} to receive callbacks related to the installation\n     * @return {@link #SUCCESS} if the installation will be attempted\n     ",
    "links" : [ "android.app.timezone.Callback", "android.app.timezone.RulesUpdaterContract#ACTION_TRIGGER_RULES_UPDATE_CHECK", "#SUCCESS" ]
  }, {
    "name" : "public int requestUninstall(byte[] checkToken, Callback callback)",
    "returnType" : "int",
    "comment" : "\n     * Requests uninstallation of the currently installed distro (leaving the device with no\n     * distro installed).\n     *\n     * @param checkToken an optional token provided if the uninstall was triggered in response to a\n     *     {@link RulesUpdaterContract#ACTION_TRIGGER_RULES_UPDATE_CHECK} intent\n     * @param callback the {@link Callback} to receive callbacks related to the uninstall\n     * @return {@link #SUCCESS} if the uninstallation will be attempted\n     ",
    "links" : [ "android.app.timezone.Callback", "android.app.timezone.RulesUpdaterContract#ACTION_TRIGGER_RULES_UPDATE_CHECK", "#SUCCESS" ]
  }, {
    "name" : "public void requestNothing(byte[] checkToken, boolean succeeded)",
    "returnType" : "void",
    "comment" : "\n     * Requests the system does not modify the currently installed time zone distro, if any. This\n     * method records the fact that a time zone check operation triggered by the system is now\n     * complete and there was nothing to do. The token passed should be the one presented when the\n     * check was triggered.\n     *\n     * <p>Note: Passing {@code success == false} may result in more checks being triggered. Clients\n     * should be careful not to pass false if the failure is unlikely to resolve by itself.\n     *\n     * @param checkToken an optional token provided if the install was triggered in response to a\n     *     {@link RulesUpdaterContract#ACTION_TRIGGER_RULES_UPDATE_CHECK} intent\n     * @param succeeded true if the check was successful, false if it was not successful but may\n     *     succeed if it is retried\n     ",
    "links" : [ "android.app.timezone.RulesUpdaterContract#ACTION_TRIGGER_RULES_UPDATE_CHECK" ]
  }, {
    "name" : " static void logDebug(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "ACTION_RULES_UPDATE_OPERATION", "EXTRA_OPERATION_STAGED", "SUCCESS", "ERROR_OPERATION_IN_PROGRESS", "ERROR_UNKNOWN_FAILURE", "mContext", "mIRulesManager" ],
  "methodNames" : [ "public RulesState getRulesState()", "public int requestInstall(ParcelFileDescriptor distroFileDescriptor, byte[] checkToken, Callback callback) throws IOException", "public int requestUninstall(byte[] checkToken, Callback callback)", "public void requestNothing(byte[] checkToken, boolean succeeded)", " static void logDebug(String msg)" ]
}