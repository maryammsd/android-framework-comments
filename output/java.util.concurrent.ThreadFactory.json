{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ThreadFactory.java",
  "packageName" : "java.util.concurrent",
  "className" : "ThreadFactory",
  "comment" : "\n * An object that creates new threads on demand.  Using thread factories\n * removes hardwiring of calls to {@link Thread#Thread(Runnable) new Thread},\n * enabling applications to use special thread subclasses, priorities, etc.\n *\n * <p>\n * The simplest implementation of this interface is just:\n * <pre> {@code\n * class SimpleThreadFactory implements ThreadFactory {\n *   public Thread newThread(Runnable r) {\n *     return new Thread(r);\n *   }\n * }}</pre>\n *\n * The {@link Executors#defaultThreadFactory} method provides a more\n * useful simple implementation, that sets the created thread context\n * to known values before returning it.\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.util.concurrent.Executors#defaultThreadFactory", "#Thread(Runnable)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Thread newThread(Runnable r)",
    "returnType" : "Thread",
    "comment" : "\n     * Constructs a new {@code Thread}.  Implementations may also initialize\n     * priority, name, daemon status, {@code ThreadGroup}, etc.\n     *\n     * @param r a runnable to be executed by new thread instance\n     * @return constructed thread, or {@code null} if the request to\n     *         create a thread is rejected\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Thread newThread(Runnable r)" ],
  "variableNames" : [ ]
}