{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/ConnectivitySettingsManager.java",
  "packageName" : "android.net",
  "className" : "ConnectivitySettingsManager",
  "comment" : "\n * A manager class for connectivity module settings.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_ACTIVITY_TIMEOUT_MOBILE",
    "type" : "String",
    "comment" : "\n     * Inactivity timeout to track mobile data activity.\n     *\n     * If set to a positive integer, it indicates the inactivity timeout value in seconds to\n     * infer the data activity of mobile network. After a period of no activity on mobile\n     * networks with length specified by the timeout, an {@code ACTION_DATA_ACTIVITY_CHANGE}\n     * intent is fired to indicate a transition of network status from \"active\" to \"idle\". Any\n     * subsequent activity on mobile networks triggers the firing of {@code\n     * ACTION_DATA_ACTIVITY_CHANGE} intent indicating transition from \"idle\" to \"active\".\n     *\n     * Network activity refers to transmitting or receiving data on the network interfaces.\n     *\n     * Tracking is disabled if set to zero or negative value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_ACTIVITY_TIMEOUT_WIFI",
    "type" : "String",
    "comment" : "\n     * Timeout to tracking Wifi data activity. Same as {@code DATA_ACTIVITY_TIMEOUT_MOBILE}\n     * but for Wifi network.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DNS_RESOLVER_SAMPLE_VALIDITY_SECONDS",
    "type" : "String",
    "comment" : "\n     * Sample validity in seconds to configure for the system DNS resolver.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DNS_RESOLVER_SUCCESS_THRESHOLD_PERCENT",
    "type" : "String",
    "comment" : "\n     * Success threshold in percent for use with the system DNS resolver.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DNS_RESOLVER_MIN_SAMPLES",
    "type" : "String",
    "comment" : "\n     * Minimum number of samples needed for statistics to be considered meaningful in the\n     * system DNS resolver.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DNS_RESOLVER_MAX_SAMPLES",
    "type" : "String",
    "comment" : "\n     * Maximum number taken into account for statistics purposes in the system DNS resolver.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DNS_RESOLVER_DEFAULT_MIN_SAMPLES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DNS_RESOLVER_DEFAULT_MAX_SAMPLES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_SWITCH_NOTIFICATION_DAILY_LIMIT",
    "type" : "String",
    "comment" : "\n     * The maximum number of notifications shown in 24 hours when switching networks.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_SWITCH_NOTIFICATION_RATE_LIMIT_MILLIS",
    "type" : "String",
    "comment" : "\n     * The minimum time in milliseconds between notifications when switching networks.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPTIVE_PORTAL_HTTP_URL",
    "type" : "String",
    "comment" : "\n     * The URL used for HTTP captive portal detection upon a new connection.\n     * A 204 response code from the server is used for validation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPTIVE_PORTAL_MODE",
    "type" : "String",
    "comment" : "\n     * What to do when connecting a network that presents a captive portal.\n     * Must be one of the CAPTIVE_PORTAL_MODE_* constants below.\n     *\n     * The default for this setting is CAPTIVE_PORTAL_MODE_PROMPT.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPTIVE_PORTAL_MODE_IGNORE",
    "type" : "int",
    "comment" : "\n     * Don't attempt to detect captive portals.\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPTIVE_PORTAL_MODE_PROMPT",
    "type" : "int",
    "comment" : "\n     * When detecting a captive portal, display a notification that\n     * prompts the user to sign in.\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPTIVE_PORTAL_MODE_AVOID",
    "type" : "int",
    "comment" : "\n     * When detecting a captive portal, immediately disconnect from the\n     * network and do not reconnect to that network in the future; except\n     * on Wear platform companion proxy networks (transport BLUETOOTH)\n     * will stay behind captive portal.\n     ",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_HTTP_PROXY_HOST",
    "type" : "String",
    "comment" : "\n     * Host name for global http proxy. Set via ConnectivityManager.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_HTTP_PROXY_PORT",
    "type" : "String",
    "comment" : "\n     * Integer host port for global http proxy. Set via ConnectivityManager.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_HTTP_PROXY_EXCLUSION_LIST",
    "type" : "String",
    "comment" : "\n     * Exclusion list for global proxy. This string contains a list of\n     * comma-separated domains where the global proxy does not apply.\n     * Domains should be listed in a comma- separated list. Example of\n     * acceptable formats: \".domain1.com,my.domain2.com\" Use\n     * ConnectivityManager to set/get.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_HTTP_PROXY_PAC",
    "type" : "String",
    "comment" : "\n     * The location PAC File for the proxy.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_DNS_MODE",
    "type" : "String",
    "comment" : "\n     * The requested Private DNS mode (string), and an accompanying specifier (string).\n     *\n     * Currently, the specifier holds the chosen provider name when the mode requests\n     * a specific provider. It may be used to store the provider name even when the\n     * mode changes so that temporarily disabling and re-enabling the specific\n     * provider mode does not necessitate retyping the provider hostname.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_DNS_SPECIFIER",
    "type" : "String",
    "comment" : "\n     * The specific Private DNS provider name.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_DNS_DEFAULT_MODE",
    "type" : "String",
    "comment" : "\n     * Forced override of the default mode (hardcoded as \"automatic\", nee \"opportunistic\").\n     * This allows changing the default mode without effectively disabling other modes,\n     * all of which require explicit user action to enable/configure. See also b/79719289.\n     *\n     * Value is a string, suitable for assignment to PRIVATE_DNS_MODE above.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONNECTIVITY_RELEASE_PENDING_INTENT_DELAY_MS",
    "type" : "String",
    "comment" : "\n     * The number of milliseconds to hold on to a PendingIntent based request. This delay gives\n     * the receivers of the PendingIntent an opportunity to make a new network request before\n     * the Network satisfying the request is potentially removed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MOBILE_DATA_ALWAYS_ON",
    "type" : "String",
    "comment" : "\n     * Whether the mobile data connection should remain active even when higher\n     * priority networks like WiFi are active, to help make network switching faster.\n     *\n     * See ConnectivityService for more info.\n     *\n     * (0 = disabled, 1 = enabled)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_ALWAYS_REQUESTED",
    "type" : "String",
    "comment" : "\n     * Whether the wifi data connection should remain active even when higher\n     * priority networks like Ethernet are active, to keep both networks.\n     * In the case where higher priority networks are connected, wifi will be\n     * unused unless an application explicitly requests to use it.\n     *\n     * See ConnectivityService for more info.\n     *\n     * (0 = disabled, 1 = enabled)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_AVOID_BAD_WIFI",
    "type" : "String",
    "comment" : "\n     * Whether to automatically switch away from wifi networks that lose Internet access.\n     * Only meaningful if config_networkAvoidBadWifi is set to 0, otherwise the system always\n     * avoids such networks. Valid values are:\n     *\n     * 0: Don't avoid bad wifi, don't prompt the user. Get stuck on bad wifi like it's 2013.\n     * null: Ask the user whether to switch away from bad wifi.\n     * 1: Avoid bad wifi.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_AVOID_BAD_WIFI_IGNORE",
    "type" : "int",
    "comment" : "\n     * Don't avoid bad wifi, don't prompt the user. Get stuck on bad wifi like it's 2013.\n     ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_AVOID_BAD_WIFI_PROMPT",
    "type" : "int",
    "comment" : "\n     * Ask the user whether to switch away from bad wifi.\n     ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_AVOID_BAD_WIFI_AVOID",
    "type" : "int",
    "comment" : "\n     * Avoid bad wifi.\n     ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_METERED_MULTIPATH_PREFERENCE",
    "type" : "String",
    "comment" : "\n     * User setting for ConnectivityManager.getMeteredMultipathPreference(). This value may be\n     * overridden by the system based on device or application state. If null, the value\n     * specified by config_networkMeteredMultipathPreference is used.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MOBILE_DATA_PREFERRED_UIDS",
    "type" : "String",
    "comment" : "\n     * A list of uids that should go on cellular networks in preference even when higher-priority\n     * networks are connected.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_DNS_MODE_OFF",
    "type" : "int",
    "comment" : "\n     * One of the private DNS modes that indicates the private DNS mode is off.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_DNS_MODE_OPPORTUNISTIC",
    "type" : "int",
    "comment" : "\n     * One of the private DNS modes that indicates the private DNS mode is automatic, which\n     * will try to use the current DNS as private DNS.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_DNS_MODE_PROVIDER_HOSTNAME",
    "type" : "int",
    "comment" : "\n     * One of the private DNS modes that indicates the private DNS mode is strict and the\n     * {@link #PRIVATE_DNS_SPECIFIER} is required, which will try to use the value of\n     * {@link #PRIVATE_DNS_SPECIFIER} as private DNS.\n     ",
    "links" : [ "#PRIVATE_DNS_SPECIFIER" ]
  }, {
    "name" : "UIDS_ALLOWED_ON_RESTRICTED_NETWORKS",
    "type" : "String",
    "comment" : "\n     * A list of uids that is allowed to use restricted networks.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INGRESS_RATE_LIMIT_BYTES_PER_SECOND",
    "type" : "String",
    "comment" : "\n     * A global rate limit that applies to all networks with NET_CAPABILITY_INTERNET when enabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Duration getMobileDataActivityTimeout(@NonNull Context context, @NonNull Duration def)",
    "returnType" : "Duration",
    "comment" : "\n     * Get mobile data activity timeout from {@link Settings}.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @param def The default timeout if no setting value.\n     * @return The {@link Duration} of timeout to track mobile data activity.\n     ",
    "links" : [ "android.content.Context", "java.time.Duration", "android.provider.Settings" ]
  }, {
    "name" : "public static void setMobileDataActivityTimeout(@NonNull Context context, @NonNull Duration timeout)",
    "returnType" : "void",
    "comment" : "\n     * Set mobile data activity timeout to {@link Settings}.\n     * Tracking is disabled if set to zero or negative value.\n     *\n     * Note: Only use the number of seconds in this duration, lower second(nanoseconds) will be\n     * ignored.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param timeout The mobile data activity timeout.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static Duration getWifiDataActivityTimeout(@NonNull Context context, @NonNull Duration def)",
    "returnType" : "Duration",
    "comment" : "\n     * Get wifi data activity timeout from {@link Settings}.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @param def The default timeout if no setting value.\n     * @return The {@link Duration} of timeout to track wifi data activity.\n     ",
    "links" : [ "android.content.Context", "java.time.Duration", "android.provider.Settings" ]
  }, {
    "name" : "public static void setWifiDataActivityTimeout(@NonNull Context context, @NonNull Duration timeout)",
    "returnType" : "void",
    "comment" : "\n     * Set wifi data activity timeout to {@link Settings}.\n     * Tracking is disabled if set to zero or negative value.\n     *\n     * Note: Only use the number of seconds in this duration, lower second(nanoseconds) will be\n     * ignored.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param timeout The wifi data activity timeout.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static Duration getDnsResolverSampleValidityDuration(@NonNull Context context, @NonNull Duration def)",
    "returnType" : "Duration",
    "comment" : "\n     * Get dns resolver sample validity duration from {@link Settings}.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @param def The default duration if no setting value.\n     * @return The {@link Duration} of sample validity duration to configure for the system DNS\n     *         resolver.\n     ",
    "links" : [ "android.content.Context", "java.time.Duration", "android.provider.Settings" ]
  }, {
    "name" : "public static void setDnsResolverSampleValidityDuration(@NonNull Context context, @NonNull Duration duration)",
    "returnType" : "void",
    "comment" : "\n     * Set dns resolver sample validity duration to {@link Settings}. The duration must be a\n     * positive number of seconds.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param duration The sample validity duration.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static int getDnsResolverSuccessThresholdPercent(@NonNull Context context, int def)",
    "returnType" : "int",
    "comment" : "\n     * Get dns resolver success threshold percent from {@link Settings}.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @param def The default value if no setting value.\n     * @return The success threshold in percent for use with the system DNS resolver.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setDnsResolverSuccessThresholdPercent(@NonNull Context context, @IntRange(from = 0, to = 100) int percent)",
    "returnType" : "void",
    "comment" : "\n     * Set dns resolver success threshold percent to {@link Settings}. The threshold percent must\n     * be 0~100.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param percent The success threshold percent.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static Range<Integer> getDnsResolverSampleRanges(@NonNull Context context)",
    "returnType" : "Range<Integer>",
    "comment" : "\n     * Get dns resolver samples range from {@link Settings}.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @return The {@link Range<Integer>} of samples needed for statistics to be considered\n     *         meaningful in the system DNS resolver.\n     ",
    "links" : [ "android.content.Context", "android.annotation.IntRange", "android.provider.Settings" ]
  }, {
    "name" : "public static void setDnsResolverSampleRanges(@NonNull Context context, @NonNull Range<Integer> range)",
    "returnType" : "void",
    "comment" : "\n     * Set dns resolver samples range to {@link Settings}.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param range The samples range. The minimum number should be more than 0 and the maximum\n     *              number should be less that 64.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static int getNetworkSwitchNotificationMaximumDailyCount(@NonNull Context context, int def)",
    "returnType" : "int",
    "comment" : "\n     * Get maximum count (from {@link Settings}) of switching network notifications shown in 24\n     * hours.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @param def The default value if no setting value.\n     * @return The maximum count of notifications shown in 24 hours when switching networks.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setNetworkSwitchNotificationMaximumDailyCount(@NonNull Context context, @IntRange(from = 0) int count)",
    "returnType" : "void",
    "comment" : "\n     * Set maximum count (to {@link Settings}) of switching network notifications shown in 24 hours.\n     * The count must be at least 0.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param count The maximum count of switching network notifications shown in 24 hours.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static Duration getNetworkSwitchNotificationRateDuration(@NonNull Context context, @NonNull Duration def)",
    "returnType" : "Duration",
    "comment" : "\n     * Get minimum duration (from {@link Settings}) between each switching network notifications.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @param def The default time if no setting value.\n     * @return The minimum duration between notifications when switching networks.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setNetworkSwitchNotificationRateDuration(@NonNull Context context, @NonNull Duration duration)",
    "returnType" : "void",
    "comment" : "\n     * Set minimum duration (to {@link Settings}) between each switching network notifications.\n     * The duration will be rounded down to the next millisecond, and must be positive.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param duration The minimum duration between notifications when switching networks.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static String getCaptivePortalHttpUrl(@NonNull Context context)",
    "returnType" : "String",
    "comment" : "\n     * Get URL (from {@link Settings}) used for HTTP captive portal detection upon a new connection.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @return The URL used for HTTP captive portal detection upon a new connection.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setCaptivePortalHttpUrl(@NonNull Context context, @Nullable String url)",
    "returnType" : "void",
    "comment" : "\n     * Set URL (to {@link Settings}) used for HTTP captive portal detection upon a new connection.\n     * The URL is accessed to check for connectivity and presence of a captive portal on a network.\n     * The URL should respond with HTTP status 204 to a GET request, and the stack will use\n     * redirection status as a signal for captive portal detection.\n     * If the URL is set to null or is otherwise incorrect or inaccessible, the stack will fail to\n     * detect connectivity and portals. This will often result in loss of connectivity.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param url The URL used for HTTP captive portal detection upon a new connection.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static int getCaptivePortalMode(@NonNull Context context, @CaptivePortalMode int def)",
    "returnType" : "int",
    "comment" : "\n     * Get mode (from {@link Settings}) when connecting a network that presents a captive portal.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @param def The default mode if no setting value.\n     * @return The mode when connecting a network that presents a captive portal.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setCaptivePortalMode(@NonNull Context context, @CaptivePortalMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Set mode (to {@link Settings}) when connecting a network that presents a captive portal.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param mode The mode when connecting a network that presents a captive portal.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static ProxyInfo getGlobalProxy(@NonNull Context context)",
    "returnType" : "ProxyInfo",
    "comment" : "\n     * Get the global HTTP proxy applied to the device, or null if none.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @return The {@link ProxyInfo} which build from global http proxy settings.\n     ",
    "links" : [ "android.content.Context", "android.net.ProxyInfo" ]
  }, {
    "name" : "public static void setGlobalProxy(@NonNull Context context, @NonNull ProxyInfo proxyInfo)",
    "returnType" : "void",
    "comment" : "\n     * Set global http proxy settings from given {@link ProxyInfo}.\n     *\n     * <p class=\"note\">\n     * While a {@link ProxyInfo} for a PAC proxy can be specified, not all devices support\n     * PAC proxies. In particular, smaller devices like watches often do not have the capabilities\n     * necessary to interpret the PAC file. In such cases, calling this API with a PAC proxy\n     * results in undefined behavior, including possibly breaking networking for applications.\n     * You can test for this by checking for the presence of {@link PackageManager.FEATURE_WEBVIEW}.\n     * </p>\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param proxyInfo The {@link ProxyInfo} for global http proxy settings which build from\n     *                    {@link ProxyInfo#buildPacProxy(Uri)} or\n     *                    {@link ProxyInfo#buildDirectProxy(String, int, List)}\n     * @throws UnsupportedOperationException if |proxyInfo| codes for a PAC proxy but the system\n     *                                       does not support PAC proxies.\n     ",
    "links" : [ "android.content.Context", "PackageManager.FEATURE_WEBVIEW", "android.net.ProxyInfo#buildDirectProxy(String", "android.net.ProxyInfo", "android.net.ProxyInfo#buildPacProxy(Uri)" ]
  }, {
    "name" : "public static void clearGlobalProxy(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "\n     * Clear all global http proxy settings.\n     *\n     * @param context The {@link Context} to set the setting.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public static int getPrivateDnsMode(@NonNull Context context)",
    "returnType" : "int",
    "comment" : "\n     * Get private DNS mode from settings.\n     *\n     * @param context The Context to query the private DNS mode from settings.\n     * @return A string of private DNS mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setPrivateDnsMode(@NonNull Context context, @PrivateDnsMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Set private DNS mode to settings.\n     *\n     * @param context The {@link Context} to set the private DNS mode.\n     * @param mode The private dns mode. This should be one of the PRIVATE_DNS_MODE_* constants.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public static String getPrivateDnsHostname(@NonNull Context context)",
    "returnType" : "String",
    "comment" : "\n     * Get specific private dns provider name from {@link Settings}.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @return The specific private dns provider name, or null if no setting value.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setPrivateDnsHostname(@NonNull Context context, @Nullable String specifier)",
    "returnType" : "void",
    "comment" : "\n     * Set specific private dns provider name to {@link Settings}.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param specifier The specific private dns provider name.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static String getPrivateDnsDefaultMode(@NonNull Context context)",
    "returnType" : "String",
    "comment" : "\n     * Get default private dns mode from {@link Settings}.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @return The default private dns mode.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setPrivateDnsDefaultMode(@NonNull Context context, @NonNull @PrivateDnsMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Set default private dns mode to {@link Settings}.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param mode The default private dns mode. This should be one of the PRIVATE_DNS_MODE_*\n     *             constants.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static Duration getConnectivityKeepPendingIntentDuration(@NonNull Context context, @NonNull Duration def)",
    "returnType" : "Duration",
    "comment" : "\n     * Get duration (from {@link Settings}) to keep a PendingIntent-based request.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @param def The default duration if no setting value.\n     * @return The duration to keep a PendingIntent-based request.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setConnectivityKeepPendingIntentDuration(@NonNull Context context, @NonNull Duration duration)",
    "returnType" : "void",
    "comment" : "\n     * Set duration (to {@link Settings}) to keep a PendingIntent-based request.\n     * The duration will be rounded down to the next millisecond, and must be positive.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param duration The duration to keep a PendingIntent-based request.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static boolean getMobileDataAlwaysOn(@NonNull Context context, boolean def)",
    "returnType" : "boolean",
    "comment" : "\n     * Read from {@link Settings} whether the mobile data connection should remain active\n     * even when higher priority networks are active.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @param def The default value if no setting value.\n     * @return Whether the mobile data connection should remain active even when higher\n     *         priority networks are active.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setMobileDataAlwaysOn(@NonNull Context context, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Write into {@link Settings} whether the mobile data connection should remain active\n     * even when higher priority networks are active.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param enable Whether the mobile data connection should remain active even when higher\n     *               priority networks are active.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static boolean getWifiAlwaysRequested(@NonNull Context context, boolean def)",
    "returnType" : "boolean",
    "comment" : "\n     * Read from {@link Settings} whether the wifi data connection should remain active\n     * even when higher priority networks are active.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @param def The default value if no setting value.\n     * @return Whether the wifi data connection should remain active even when higher\n     *         priority networks are active.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setWifiAlwaysRequested(@NonNull Context context, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Write into {@link Settings} whether the wifi data connection should remain active\n     * even when higher priority networks are active.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param enable Whether the wifi data connection should remain active even when higher\n     *               priority networks are active\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static int getNetworkAvoidBadWifi(@NonNull Context context)",
    "returnType" : "int",
    "comment" : "\n     * Get avoid bad wifi setting from {@link Settings}.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @return The setting whether to automatically switch away from wifi networks that lose\n     *         internet access.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setNetworkAvoidBadWifi(@NonNull Context context, @NetworkAvoidBadWifi int value)",
    "returnType" : "void",
    "comment" : "\n     * Set avoid bad wifi setting to {@link Settings}.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param value Whether to automatically switch away from wifi networks that lose internet\n     *              access.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static String getNetworkMeteredMultipathPreference(@NonNull Context context)",
    "returnType" : "String",
    "comment" : "\n     * Get network metered multipath preference from {@link Settings}.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @return The network metered multipath preference which should be one of\n     *         ConnectivityManager#MULTIPATH_PREFERENCE_* value or null if the value specified\n     *         by config_networkMeteredMultipathPreference is used.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setNetworkMeteredMultipathPreference(@NonNull Context context, @NonNull @MultipathPreference String preference)",
    "returnType" : "void",
    "comment" : "\n     * Set network metered multipath preference to {@link Settings}.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param preference The network metered multipath preference which should be one of\n     *                   ConnectivityManager#MULTIPATH_PREFERENCE_* value or null if the value\n     *                   specified by config_networkMeteredMultipathPreference is used.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "private static Set<Integer> getUidSetFromString(@Nullable String uidList)",
    "returnType" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getUidStringFromSet(@NonNull Set<Integer> uidList)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Set<Integer> getMobileDataPreferredUids(@NonNull Context context)",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Get the list of uids(from {@link Settings}) that should go on cellular networks in preference\n     * even when higher-priority networks are connected.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @return A list of uids that should go on cellular networks in preference even when\n     *         higher-priority networks are connected or null if no setting value.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setMobileDataPreferredUids(@NonNull Context context, @NonNull Set<Integer> uidList)",
    "returnType" : "void",
    "comment" : "\n     * Set the list of uids(to {@link Settings}) that should go on cellular networks in preference\n     * even when higher-priority networks are connected.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param uidList A list of uids that should go on cellular networks in preference even when\n     *             higher-priority networks are connected.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static Set<Integer> getUidsAllowedOnRestrictedNetworks(@NonNull Context context)",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Get the list of uids (from {@link Settings}) allowed to use restricted networks.\n     *\n     * Access to restricted networks is controlled by the (preinstalled-only)\n     * CONNECTIVITY_USE_RESTRICTED_NETWORKS permission, but highly privileged\n     * callers can also set a list of uids that can access restricted networks.\n     *\n     * This is useful for example in some jurisdictions where government apps,\n     * that can't be preinstalled, must still have access to emergency services.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @return A list of uids that is allowed to use restricted networks or null if no setting\n     *         value.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "private static boolean isCallingFromSystem()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setUidsAllowedOnRestrictedNetworks(@NonNull Context context, @NonNull Set<Integer> uidList)",
    "returnType" : "void",
    "comment" : "\n     * Set the list of uids(from {@link Settings}) that is allowed to use restricted networks.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param uidList A list of uids that is allowed to use restricted networks.\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static long getIngressRateLimitInBytesPerSecond(@NonNull Context context)",
    "returnType" : "long",
    "comment" : "\n     * Get the network bandwidth ingress rate limit.\n     *\n     * The limit is only applicable to networks that provide internet connectivity. -1 codes for no\n     * bandwidth limitation.\n     *\n     * @param context The {@link Context} to query the setting.\n     * @return The rate limit in number of bytes per second or -1 if disabled.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public static void setIngressRateLimitInBytesPerSecond(@NonNull Context context, @IntRange(from = -1L, to = 0xFFFFFFFFL) long rateLimitInBytesPerSec)",
    "returnType" : "void",
    "comment" : "\n     * Set the network bandwidth ingress rate limit.\n     *\n     * The limit is applied to all networks that provide internet connectivity. It is applied on a\n     * per-network basis, meaning that global ingress rate could exceed the limit when communicating\n     * on multiple networks simultaneously.\n     *\n     * @param context The {@link Context} to set the setting.\n     * @param rateLimitInBytesPerSec The rate limit in number of bytes per second or -1 to disable.\n     ",
    "links" : [ "android.content.Context" ]
  } ],
  "methodNames" : [ "public static Duration getMobileDataActivityTimeout(@NonNull Context context, @NonNull Duration def)", "public static void setMobileDataActivityTimeout(@NonNull Context context, @NonNull Duration timeout)", "public static Duration getWifiDataActivityTimeout(@NonNull Context context, @NonNull Duration def)", "public static void setWifiDataActivityTimeout(@NonNull Context context, @NonNull Duration timeout)", "public static Duration getDnsResolverSampleValidityDuration(@NonNull Context context, @NonNull Duration def)", "public static void setDnsResolverSampleValidityDuration(@NonNull Context context, @NonNull Duration duration)", "public static int getDnsResolverSuccessThresholdPercent(@NonNull Context context, int def)", "public static void setDnsResolverSuccessThresholdPercent(@NonNull Context context, @IntRange(from = 0, to = 100) int percent)", "public static Range<Integer> getDnsResolverSampleRanges(@NonNull Context context)", "public static void setDnsResolverSampleRanges(@NonNull Context context, @NonNull Range<Integer> range)", "public static int getNetworkSwitchNotificationMaximumDailyCount(@NonNull Context context, int def)", "public static void setNetworkSwitchNotificationMaximumDailyCount(@NonNull Context context, @IntRange(from = 0) int count)", "public static Duration getNetworkSwitchNotificationRateDuration(@NonNull Context context, @NonNull Duration def)", "public static void setNetworkSwitchNotificationRateDuration(@NonNull Context context, @NonNull Duration duration)", "public static String getCaptivePortalHttpUrl(@NonNull Context context)", "public static void setCaptivePortalHttpUrl(@NonNull Context context, @Nullable String url)", "public static int getCaptivePortalMode(@NonNull Context context, @CaptivePortalMode int def)", "public static void setCaptivePortalMode(@NonNull Context context, @CaptivePortalMode int mode)", "public static ProxyInfo getGlobalProxy(@NonNull Context context)", "public static void setGlobalProxy(@NonNull Context context, @NonNull ProxyInfo proxyInfo)", "public static void clearGlobalProxy(@NonNull Context context)", "public static int getPrivateDnsMode(@NonNull Context context)", "public static void setPrivateDnsMode(@NonNull Context context, @PrivateDnsMode int mode)", "public static String getPrivateDnsHostname(@NonNull Context context)", "public static void setPrivateDnsHostname(@NonNull Context context, @Nullable String specifier)", "public static String getPrivateDnsDefaultMode(@NonNull Context context)", "public static void setPrivateDnsDefaultMode(@NonNull Context context, @NonNull @PrivateDnsMode int mode)", "public static Duration getConnectivityKeepPendingIntentDuration(@NonNull Context context, @NonNull Duration def)", "public static void setConnectivityKeepPendingIntentDuration(@NonNull Context context, @NonNull Duration duration)", "public static boolean getMobileDataAlwaysOn(@NonNull Context context, boolean def)", "public static void setMobileDataAlwaysOn(@NonNull Context context, boolean enable)", "public static boolean getWifiAlwaysRequested(@NonNull Context context, boolean def)", "public static void setWifiAlwaysRequested(@NonNull Context context, boolean enable)", "public static int getNetworkAvoidBadWifi(@NonNull Context context)", "public static void setNetworkAvoidBadWifi(@NonNull Context context, @NetworkAvoidBadWifi int value)", "public static String getNetworkMeteredMultipathPreference(@NonNull Context context)", "public static void setNetworkMeteredMultipathPreference(@NonNull Context context, @NonNull @MultipathPreference String preference)", "private static Set<Integer> getUidSetFromString(@Nullable String uidList)", "private static String getUidStringFromSet(@NonNull Set<Integer> uidList)", "public static Set<Integer> getMobileDataPreferredUids(@NonNull Context context)", "public static void setMobileDataPreferredUids(@NonNull Context context, @NonNull Set<Integer> uidList)", "public static Set<Integer> getUidsAllowedOnRestrictedNetworks(@NonNull Context context)", "private static boolean isCallingFromSystem()", "public static void setUidsAllowedOnRestrictedNetworks(@NonNull Context context, @NonNull Set<Integer> uidList)", "public static long getIngressRateLimitInBytesPerSecond(@NonNull Context context)", "public static void setIngressRateLimitInBytesPerSecond(@NonNull Context context, @IntRange(from = -1L, to = 0xFFFFFFFFL) long rateLimitInBytesPerSec)" ],
  "variableNames" : [ "TAG", "DATA_ACTIVITY_TIMEOUT_MOBILE", "DATA_ACTIVITY_TIMEOUT_WIFI", "DNS_RESOLVER_SAMPLE_VALIDITY_SECONDS", "DNS_RESOLVER_SUCCESS_THRESHOLD_PERCENT", "DNS_RESOLVER_MIN_SAMPLES", "DNS_RESOLVER_MAX_SAMPLES", "DNS_RESOLVER_DEFAULT_MIN_SAMPLES", "DNS_RESOLVER_DEFAULT_MAX_SAMPLES", "NETWORK_SWITCH_NOTIFICATION_DAILY_LIMIT", "NETWORK_SWITCH_NOTIFICATION_RATE_LIMIT_MILLIS", "CAPTIVE_PORTAL_HTTP_URL", "CAPTIVE_PORTAL_MODE", "CAPTIVE_PORTAL_MODE_IGNORE", "CAPTIVE_PORTAL_MODE_PROMPT", "CAPTIVE_PORTAL_MODE_AVOID", "GLOBAL_HTTP_PROXY_HOST", "GLOBAL_HTTP_PROXY_PORT", "GLOBAL_HTTP_PROXY_EXCLUSION_LIST", "GLOBAL_HTTP_PROXY_PAC", "PRIVATE_DNS_MODE", "PRIVATE_DNS_SPECIFIER", "PRIVATE_DNS_DEFAULT_MODE", "CONNECTIVITY_RELEASE_PENDING_INTENT_DELAY_MS", "MOBILE_DATA_ALWAYS_ON", "WIFI_ALWAYS_REQUESTED", "NETWORK_AVOID_BAD_WIFI", "NETWORK_AVOID_BAD_WIFI_IGNORE", "NETWORK_AVOID_BAD_WIFI_PROMPT", "NETWORK_AVOID_BAD_WIFI_AVOID", "NETWORK_METERED_MULTIPATH_PREFERENCE", "MOBILE_DATA_PREFERRED_UIDS", "PRIVATE_DNS_MODE_OFF", "PRIVATE_DNS_MODE_OPPORTUNISTIC", "PRIVATE_DNS_MODE_PROVIDER_HOSTNAME", "UIDS_ALLOWED_ON_RESTRICTED_NETWORKS", "INGRESS_RATE_LIMIT_BYTES_PER_SECOND" ]
}