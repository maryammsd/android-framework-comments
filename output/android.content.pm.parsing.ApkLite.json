{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/parsing/ApkLite.java",
  "packageName" : "android.content.pm.parsing",
  "className" : "ApkLite",
  "comment" : "\n * Lightweight parsed details about a single APK file.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : " Name of the package as used to identify it in the system ",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "String",
    "comment" : " Path where this APK file was found on disk ",
    "links" : [ ]
  }, {
    "name" : "mSplitName",
    "type" : "String",
    "comment" : " Split name of this APK ",
    "links" : [ ]
  }, {
    "name" : "mUsesSplitName",
    "type" : "String",
    "comment" : " Name of the split APK that this APK depends on ",
    "links" : [ ]
  }, {
    "name" : "mConfigForSplit",
    "type" : "String",
    "comment" : " Name of the split APK that this APK is a configuration for ",
    "links" : [ ]
  }, {
    "name" : "mRequiredSplitTypes",
    "type" : "Set<String>",
    "comment" : " Indicate the types of the required split are necessary for this package to run ",
    "links" : [ ]
  }, {
    "name" : "mSplitTypes",
    "type" : "Set<String>",
    "comment" : " Split types of this APK ",
    "links" : [ ]
  }, {
    "name" : "mVersionCodeMajor",
    "type" : "int",
    "comment" : " Major version number of this package ",
    "links" : [ ]
  }, {
    "name" : "mVersionCode",
    "type" : "int",
    "comment" : " Minor version number of this package ",
    "links" : [ ]
  }, {
    "name" : "mRevisionCode",
    "type" : "int",
    "comment" : " Revision code of this APK ",
    "links" : [ ]
  }, {
    "name" : "mInstallLocation",
    "type" : "int",
    "comment" : "\n     * Indicate the install location of this package\n     *\n     * @see {@link PackageInfo#INSTALL_LOCATION_AUTO}\n     * @see {@link PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY}\n     * @see {@link PackageInfo#INSTALL_LOCATION_PREFER_EXTERNAL}\n     ",
    "links" : [ "android.content.pm.PackageInfo#INSTALL_LOCATION_PREFER_EXTERNAL", "android.content.pm.PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY", "android.content.pm.PackageInfo#INSTALL_LOCATION_AUTO" ]
  }, {
    "name" : "mMinSdkVersion",
    "type" : "int",
    "comment" : " Indicate the minimum SDK version number that the app requires ",
    "links" : [ ]
  }, {
    "name" : "mTargetSdkVersion",
    "type" : "int",
    "comment" : " Indicate the SDK version number that the application is targeting ",
    "links" : [ ]
  }, {
    "name" : "mVerifiers",
    "type" : "VerifierInfo[]",
    "comment" : " Information about a package verifiers as used during package verification ",
    "links" : [ ]
  }, {
    "name" : "mSigningDetails",
    "type" : "SigningDetails",
    "comment" : " Signing-related data of an application package ",
    "links" : [ ]
  }, {
    "name" : "mFeatureSplit",
    "type" : "boolean",
    "comment" : " Indicate whether this APK is a 'feature' split ",
    "links" : [ ]
  }, {
    "name" : "mIsolatedSplits",
    "type" : "boolean",
    "comment" : " Indicate whether each split should be load into their own Context objects ",
    "links" : [ ]
  }, {
    "name" : "mSplitRequired",
    "type" : "boolean",
    "comment" : "\n     * Indicate whether this package requires at least one split (either feature or resource)\n     * to be present in order to function\n     ",
    "links" : [ ]
  }, {
    "name" : "mCoreApp",
    "type" : "boolean",
    "comment" : " Indicate whether this app is coreApp ",
    "links" : [ ]
  }, {
    "name" : "mDebuggable",
    "type" : "boolean",
    "comment" : " Indicate whether this app can be debugged ",
    "links" : [ ]
  }, {
    "name" : "mProfileableByShell",
    "type" : "boolean",
    "comment" : " Indicate whether this app is profileable by Shell ",
    "links" : [ ]
  }, {
    "name" : "mMultiArch",
    "type" : "boolean",
    "comment" : " Indicate whether this app needs to be loaded into other applications' processes ",
    "links" : [ ]
  }, {
    "name" : "mUse32bitAbi",
    "type" : "boolean",
    "comment" : " Indicate whether the 32 bit version of the ABI should be used ",
    "links" : [ ]
  }, {
    "name" : "mExtractNativeLibs",
    "type" : "boolean",
    "comment" : " Indicate whether installer extracts native libraries ",
    "links" : [ ]
  }, {
    "name" : "mUseEmbeddedDex",
    "type" : "boolean",
    "comment" : "\n     * Indicate whether this package wants to run the dex within its APK but not extracted\n     * or locally compiled variants.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTargetPackageName",
    "type" : "String",
    "comment" : " Name of the overlay-able set of elements package ",
    "links" : [ ]
  }, {
    "name" : "mOverlayIsStatic",
    "type" : "boolean",
    "comment" : " Indicate whether the overlay is static ",
    "links" : [ ]
  }, {
    "name" : "mOverlayPriority",
    "type" : "int",
    "comment" : " Indicate the priority of this overlay package ",
    "links" : [ ]
  }, {
    "name" : "mRequiredSystemPropertyName",
    "type" : "String",
    "comment" : "\n     * A comma separated list of system property names to control whether the overlay should be\n     * excluded based on the system property condition.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRequiredSystemPropertyValue",
    "type" : "String",
    "comment" : "\n     * A comma separated list of system property values to control whether the overlay should be\n     * excluded based on the system property condition.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRollbackDataPolicy",
    "type" : "int",
    "comment" : "\n     * Indicate the policy to deal with user data when rollback is committed\n     *\n     * @see {@link PackageManager#ROLLBACK_DATA_POLICY_RESTORE}\n     * @see {@link PackageManager#ROLLBACK_DATA_POLICY_WIPE}\n     * @see {@link PackageManager#ROLLBACK_DATA_POLICY_RETAIN}\n     ",
    "links" : [ "android.content.pm.PackageManager#ROLLBACK_DATA_POLICY_RESTORE", "android.content.pm.PackageManager#ROLLBACK_DATA_POLICY_RETAIN", "android.content.pm.PackageManager#ROLLBACK_DATA_POLICY_WIPE" ]
  }, {
    "name" : "mHasDeviceAdminReceiver",
    "type" : "boolean",
    "comment" : "\n     * Indicates if this app contains a {@link android.app.admin.DeviceAdminReceiver}.\n     ",
    "links" : [ "android.app.admin.DeviceAdminReceiver" ]
  }, {
    "name" : "mIsSdkLibrary",
    "type" : "boolean",
    "comment" : "\n     * Indicates if this apk is a sdk.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUpdatableSystem",
    "type" : "boolean",
    "comment" : "\n     * Indicates if this system app can be updated.\n     ",
    "links" : [ ]
  }, {
    "name" : "mEmergencyInstaller",
    "type" : "String",
    "comment" : "\n     * Name of the emergency installer for the designated system app.\n     ",
    "links" : [ ]
  }, {
    "name" : "mArchivedPackage",
    "type" : "ArchivedPackageParcel",
    "comment" : "\n     * Archival install info.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getLongVersionCode()",
    "returnType" : "long",
    "comment" : "\n     * Return {@link #mVersionCode} and {@link #mVersionCodeMajor} combined together as a\n     * single long value. The {@link #mVersionCodeMajor} is placed in the upper 32 bits.\n     ",
    "links" : [ "#mVersionCodeMajor", "#mVersionCode" ]
  }, {
    "name" : "private boolean hasAnyRequiredSplitTypes()",
    "returnType" : "boolean",
    "comment" : "\n     * Return if requiredSplitTypes presents.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Name of the package as used to identify it in the system\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPath()",
    "returnType" : "String",
    "comment" : "\n     * Path where this APK file was found on disk\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSplitName()",
    "returnType" : "String",
    "comment" : "\n     * Split name of this APK\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getUsesSplitName()",
    "returnType" : "String",
    "comment" : "\n     * Name of the split APK that this APK depends on\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getConfigForSplit()",
    "returnType" : "String",
    "comment" : "\n     * Name of the split APK that this APK is a configuration for\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getRequiredSplitTypes()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Indicate the types of the required split are necessary for this package to run\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getSplitTypes()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Split types of this APK\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVersionCodeMajor()",
    "returnType" : "int",
    "comment" : "\n     * Major version number of this package\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVersionCode()",
    "returnType" : "int",
    "comment" : "\n     * Minor version number of this package\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRevisionCode()",
    "returnType" : "int",
    "comment" : "\n     * Revision code of this APK\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInstallLocation()",
    "returnType" : "int",
    "comment" : "\n     * Indicate the install location of this package\n     *\n     * @see {@link PackageInfo#INSTALL_LOCATION_AUTO}\n     * @see {@link PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY}\n     * @see {@link PackageInfo#INSTALL_LOCATION_PREFER_EXTERNAL}\n     ",
    "links" : [ "android.content.pm.PackageInfo#INSTALL_LOCATION_PREFER_EXTERNAL", "android.content.pm.PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY", "android.content.pm.PackageInfo#INSTALL_LOCATION_AUTO" ]
  }, {
    "name" : "public int getMinSdkVersion()",
    "returnType" : "int",
    "comment" : "\n     * Indicate the minimum SDK version number that the app requires\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTargetSdkVersion()",
    "returnType" : "int",
    "comment" : "\n     * Indicate the SDK version number that the application is targeting\n     ",
    "links" : [ ]
  }, {
    "name" : "public VerifierInfo[] getVerifiers()",
    "returnType" : "VerifierInfo[]",
    "comment" : "\n     * Information about a package verifiers as used during package verification\n     ",
    "links" : [ ]
  }, {
    "name" : "public SigningDetails getSigningDetails()",
    "returnType" : "SigningDetails",
    "comment" : "\n     * Signing-related data of an application package\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFeatureSplit()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this APK is a 'feature' split\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIsolatedSplits()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether each split should be load into their own Context objects\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSplitRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this package requires at least one split (either feature or resource)\n     * to be present in order to function\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCoreApp()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this app is coreApp\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDebuggable()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this app can be debugged\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProfileableByShell()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this app is profileable by Shell\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMultiArch()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this app needs to be loaded into other applications' processes\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUse32bitAbi()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether the 32 bit version of the ABI should be used\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExtractNativeLibs()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether installer extracts native libraries\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUseEmbeddedDex()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this package wants to run the dex within its APK but not extracted\n     * or locally compiled variants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTargetPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Name of the overlay-able set of elements package\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverlayIsStatic()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether the overlay is static\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOverlayPriority()",
    "returnType" : "int",
    "comment" : "\n     * Indicate the priority of this overlay package\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRequiredSystemPropertyName()",
    "returnType" : "String",
    "comment" : "\n     * A comma separated list of system property names to control whether the overlay should be\n     * excluded based on the system property condition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRequiredSystemPropertyValue()",
    "returnType" : "String",
    "comment" : "\n     * A comma separated list of system property values to control whether the overlay should be\n     * excluded based on the system property condition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRollbackDataPolicy()",
    "returnType" : "int",
    "comment" : "\n     * Indicate the policy to deal with user data when rollback is committed\n     *\n     * @see {@link PackageManager#ROLLBACK_DATA_POLICY_RESTORE}\n     * @see {@link PackageManager#ROLLBACK_DATA_POLICY_WIPE}\n     * @see {@link PackageManager#ROLLBACK_DATA_POLICY_RETAIN}\n     ",
    "links" : [ "android.content.pm.PackageManager#ROLLBACK_DATA_POLICY_RESTORE", "android.content.pm.PackageManager#ROLLBACK_DATA_POLICY_RETAIN", "android.content.pm.PackageManager#ROLLBACK_DATA_POLICY_WIPE" ]
  }, {
    "name" : "public boolean isHasDeviceAdminReceiver()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this app contains a {@link android.app.admin.DeviceAdminReceiver}.\n     ",
    "links" : [ "android.app.admin.DeviceAdminReceiver" ]
  }, {
    "name" : "public boolean isIsSdkLibrary()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this apk is a sdk.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUpdatableSystem()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if this system app can be updated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEmergencyInstaller()",
    "returnType" : "String",
    "comment" : "\n     * Name of the emergency installer for the designated system app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArchivedPackageParcel getArchivedPackage()",
    "returnType" : "ArchivedPackageParcel",
    "comment" : "\n     * Archival install info.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getLongVersionCode()", "private boolean hasAnyRequiredSplitTypes()", "public String getPackageName()", "public String getPath()", "public String getSplitName()", "public String getUsesSplitName()", "public String getConfigForSplit()", "public Set<String> getRequiredSplitTypes()", "public Set<String> getSplitTypes()", "public int getVersionCodeMajor()", "public int getVersionCode()", "public int getRevisionCode()", "public int getInstallLocation()", "public int getMinSdkVersion()", "public int getTargetSdkVersion()", "public VerifierInfo[] getVerifiers()", "public SigningDetails getSigningDetails()", "public boolean isFeatureSplit()", "public boolean isIsolatedSplits()", "public boolean isSplitRequired()", "public boolean isCoreApp()", "public boolean isDebuggable()", "public boolean isProfileableByShell()", "public boolean isMultiArch()", "public boolean isUse32bitAbi()", "public boolean isExtractNativeLibs()", "public boolean isUseEmbeddedDex()", "public String getTargetPackageName()", "public boolean isOverlayIsStatic()", "public int getOverlayPriority()", "public String getRequiredSystemPropertyName()", "public String getRequiredSystemPropertyValue()", "public int getRollbackDataPolicy()", "public boolean isHasDeviceAdminReceiver()", "public boolean isIsSdkLibrary()", "public boolean isUpdatableSystem()", "public String getEmergencyInstaller()", "public ArchivedPackageParcel getArchivedPackage()", "private void __metadata()" ],
  "variableNames" : [ "mPackageName", "mPath", "mSplitName", "mUsesSplitName", "mConfigForSplit", "mRequiredSplitTypes", "mSplitTypes", "mVersionCodeMajor", "mVersionCode", "mRevisionCode", "mInstallLocation", "mMinSdkVersion", "mTargetSdkVersion", "mVerifiers", "mSigningDetails", "mFeatureSplit", "mIsolatedSplits", "mSplitRequired", "mCoreApp", "mDebuggable", "mProfileableByShell", "mMultiArch", "mUse32bitAbi", "mExtractNativeLibs", "mUseEmbeddedDex", "mTargetPackageName", "mOverlayIsStatic", "mOverlayPriority", "mRequiredSystemPropertyName", "mRequiredSystemPropertyValue", "mRollbackDataPolicy", "mHasDeviceAdminReceiver", "mIsSdkLibrary", "mUpdatableSystem", "mEmergencyInstaller", "mArchivedPackage" ]
}