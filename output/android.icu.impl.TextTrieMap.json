{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/TextTrieMap.java",
  "packageName" : "android.icu.impl",
  "className" : "TextTrieMap",
  "comment" : "\n * TextTrieMap is a trie implementation for supporting\n * fast prefix match for the key.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "_root",
    "type" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_ignoreCase",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public TextTrieMap<V> put(CharSequence text, V val)",
    "returnType" : "TextTrieMap<V>",
    "comment" : "\n     * Adds the text key and its associated object in this object.\n     *\n     * @param text The text.\n     * @param val The value object associated with the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<V> get(String text)",
    "returnType" : "Iterator<V>",
    "comment" : "\n     * Gets an iterator of the objects associated with the\n     * longest prefix matching string key.\n     *\n     * @param text The text to be matched with prefixes.\n     * @return An iterator of the objects associated with\n     * the longest prefix matching matching key, or null\n     * if no matching entry is found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<V> get(CharSequence text, int start)",
    "returnType" : "Iterator<V>",
    "comment" : "\n     * Gets an iterator of the objects associated with the\n     * longest prefix matching string key starting at the\n     * specified position.\n     *\n     * @param text The text to be matched with prefixes.\n     * @param start The start index of of the text\n     * @return An iterator of the objects associated with the\n     * longest prefix matching matching key, or null if no\n     * matching entry is found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<V> get(CharSequence text, int start, Output output)",
    "returnType" : "Iterator<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void find(CharSequence text, ResultHandler<V> handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void find(CharSequence text, int offset, ResultHandler<V> handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void find(CharSequence text, int offset, ResultHandler<V> handler, Output output)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void find(Node node, CharIterator chitr, ResultHandler<V> handler, Output output)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void putLeadCodePoints(UnicodeSet output)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static char[] toCharArray(CharSequence text)",
    "returnType" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static char[] subArray(char[] array, int start)",
    "returnType" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static char[] subArray(char[] array, int start, int limit)",
    "returnType" : "char[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public TextTrieMap<V> put(CharSequence text, V val)", "public Iterator<V> get(String text)", "public Iterator<V> get(CharSequence text, int start)", "public Iterator<V> get(CharSequence text, int start, Output output)", "public void find(CharSequence text, ResultHandler<V> handler)", "public void find(CharSequence text, int offset, ResultHandler<V> handler)", "private void find(CharSequence text, int offset, ResultHandler<V> handler, Output output)", "private synchronized void find(Node node, CharIterator chitr, ResultHandler<V> handler, Output output)", "public void putLeadCodePoints(UnicodeSet output)", "private static char[] toCharArray(CharSequence text)", "private static char[] subArray(char[] array, int start)", "private static char[] subArray(char[] array, int start, int limit)" ],
  "variableNames" : [ "_root", "_ignoreCase" ]
}