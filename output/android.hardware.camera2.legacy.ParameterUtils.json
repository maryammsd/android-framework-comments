{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/legacy/ParameterUtils.java",
  "packageName" : "android.hardware.camera2.legacy",
  "className" : "ParameterUtils",
  "comment" : "\n * Various utilities for dealing with camera API1 parameters.\n ",
  "variables" : [ {
    "name" : "NORMALIZED_RECTANGLE_MIN",
    "type" : "int",
    "comment" : " Upper/left minimal point of a normalized rectangle ",
    "links" : [ ]
  }, {
    "name" : "NORMALIZED_RECTANGLE_MAX",
    "type" : "int",
    "comment" : " Lower/right maximal point of a normalized rectangle ",
    "links" : [ ]
  }, {
    "name" : "NORMALIZED_RECTANGLE_DEFAULT",
    "type" : "Rect",
    "comment" : " The default normalized rectangle spans the entire size of the preview viewport ",
    "links" : [ ]
  }, {
    "name" : "CAMERA_AREA_DEFAULT",
    "type" : "Camera.Area",
    "comment" : " The default normalized area uses the default normalized rectangle with a weight=1 ",
    "links" : [ ]
  }, {
    "name" : "RECTANGLE_EMPTY",
    "type" : "Rect",
    "comment" : " Empty rectangle {@code 0x0+0,0} ",
    "links" : [ ]
  }, {
    "name" : "ASPECT_RATIO_TOLERANCE",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZOOM_RATIO_MULTIPLIER",
    "type" : "int",
    "comment" : " getZoomRatios stores zoom ratios in 1/100 increments, e.x. a zoom of 3.2 is 320 ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Size convertSize(Camera.Size size)",
    "returnType" : "Size",
    "comment" : "\n     * Convert a camera API1 size into a util size\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<Size> convertSizeList(List<Camera.Size> sizeList)",
    "returnType" : "List<Size>",
    "comment" : "\n     * Convert a camera API1 list of sizes into a util list of sizes\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Size[] convertSizeListToArray(List<Camera.Size> sizeList)",
    "returnType" : "Size[]",
    "comment" : "\n     * Convert a camera API1 list of sizes into an array of sizes\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean containsSize(List<Camera.Size> sizeList, int width, int height)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the camera API1 list of sizes contains a size with the given dimens.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Size getLargestSupportedJpegSizeByArea(Camera.Parameters params)",
    "returnType" : "Size",
    "comment" : "\n     * Returns the largest supported picture size, as compared by its area.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String stringFromArea(Camera.Area area)",
    "returnType" : "String",
    "comment" : "\n     * Convert a camera area into a human-readable string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String stringFromAreaList(List<Camera.Area> areaList)",
    "returnType" : "String",
    "comment" : "\n     * Convert a camera area list into a human-readable string\n     * @param areaList a list of areas (null is ok)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getClosestAvailableZoomCrop(Camera.Parameters params, Rect activeArray, Size streamSize, Rect cropRegion, Rect reportedCropRegion, Rect previewCropRegion)",
    "returnType" : "int",
    "comment" : "\n     * Calculate the closest zoom index for the user-requested crop region by rounding\n     * up to the closest (largest or equal) possible zoom crop.\n     *\n     * <p>If the requested crop region exceeds the size of the active array, it is\n     * shrunk to fit inside of the active array first.</p>\n     *\n     * <p>Since all api1 camera devices only support a discrete set of zooms, we have\n     * to translate the per-pixel-granularity requested crop region into a per-zoom-index\n     * granularity.</p>\n     *\n     * <p>Furthermore, since the zoom index and zoom levels also depends on the field-of-view\n     * of the preview, the current preview {@code streamSize} is also used.</p>\n     *\n     * <p>The calculated crop regions are then written to in-place to {@code reportedCropRegion}\n     * and {@code previewCropRegion}, in coordinates relative to the active array.</p>\n     *\n     * @param params non-{@code null} camera api1 parameters\n     * @param activeArray active array dimensions, in sensor space\n     * @param streamSize stream size dimensions, in pixels\n     * @param cropRegion user-specified crop region, in active array coordinates\n     * @param reportedCropRegion (out parameter) what the result for {@code cropRegion} looks like\n     * @param previewCropRegion (out parameter) what the visual preview crop is\n     * @return\n     *          the zoom index inclusively between 0 and {@code Parameters#getMaxZoom},\n     *          where 0 means the camera is not zoomed\n     *\n     * @throws NullPointerException if any of the args were {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Rect getPreviewCropRectangleUnzoomed(Rect activeArray, Size previewSize)",
    "returnType" : "Rect",
    "comment" : "\n     * Calculate the effective crop rectangle for this preview viewport;\n     * assumes the preview is centered to the sensor and scaled to fit across one of the dimensions\n     * without skewing.\n     *\n     * <p>The preview size must be a subset of the active array size; the resulting\n     * rectangle will also be a subset of the active array rectangle.</p>\n     *\n     * <p>The unzoomed crop rectangle is calculated only.</p>\n     *\n     * @param activeArray active array dimensions, in sensor space\n     * @param previewSize size of the preview buffer render target, in pixels (not in sensor space)\n     * @return a rectangle which serves as the preview stream's effective crop region (unzoomed),\n     *         in sensor space\n     *\n     * @throws NullPointerException\n     *          if any of the args were {@code null}\n     * @throws IllegalArgumentException\n     *          if {@code previewSize} is wider or taller than {@code activeArray}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Rect shrinkToSameAspectRatioCentered(Rect reference, Rect shrinkTarget)",
    "returnType" : "Rect",
    "comment" : "\n     * Shrink the {@code shrinkTarget} rectangle to snugly fit inside of {@code reference};\n     * the aspect ratio of {@code shrinkTarget} will change to be the same aspect ratio as\n     * {@code reference}.\n     *\n     * <p>At most a single dimension will scale (down). Both dimensions will never be scaled.</p>\n     *\n     * @param reference the rectangle whose aspect ratio will be used as the new aspect ratio\n     * @param shrinkTarget the rectangle which will be scaled down to have a new aspect ratio\n     *\n     * @return a new rectangle, a subset of {@code shrinkTarget},\n     *          whose aspect ratio will match that of {@code reference}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<Rect> getAvailableZoomCropRectangles(Camera.Parameters params, Rect activeArray)",
    "returnType" : "List<Rect>",
    "comment" : "\n     * Get the available 'crop' (zoom) rectangles for this camera that will be reported\n     * via a {@code CaptureResult} when a zoom is requested.\n     *\n     * <p>These crops ignores the underlying preview buffer size, and will always be reported\n     * the same values regardless of what configuration of outputs is used.</p>\n     *\n     * <p>When zoom is supported, this will return a list of {@code 1 + #getMaxZoom} size,\n     * where each crop rectangle corresponds to a zoom ratio (and is centered at the middle).</p>\n     *\n     * <p>Each crop rectangle is changed to have the same aspect ratio as {@code streamSize},\n     * by shrinking the rectangle if necessary.</p>\n     *\n     * <p>To get the reported crop region when applying a zoom to the sensor, use {@code streamSize}\n     * = {@code activeArray size}.</p>\n     *\n     * @param params non-{@code null} camera api1 parameters\n     * @param activeArray active array dimensions, in sensor space\n     * @param streamSize stream size dimensions, in pixels\n     *\n     * @return a list of available zoom rectangles, sorted from least zoomed to most zoomed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<Rect> getAvailablePreviewZoomCropRectangles(Camera.Parameters params, Rect activeArray, Size previewSize)",
    "returnType" : "List<Rect>",
    "comment" : "\n     * Get the available 'crop' (zoom) rectangles for this camera.\n     *\n     * <p>This is the effective (real) crop that is applied by the camera api1 device\n     * when projecting the zoom onto the intermediate preview buffer. Use this when\n     * deciding which zoom ratio to apply.</p>\n     *\n     * <p>When zoom is supported, this will return a list of {@code 1 + #getMaxZoom} size,\n     * where each crop rectangle corresponds to a zoom ratio (and is centered at the middle).</p>\n     *\n     * <p>Each crop rectangle is changed to have the same aspect ratio as {@code streamSize},\n     * by shrinking the rectangle if necessary.</p>\n     *\n     * <p>To get the reported crop region when applying a zoom to the sensor, use {@code streamSize}\n     * = {@code activeArray size}.</p>\n     *\n     * @param params non-{@code null} camera api1 parameters\n     * @param activeArray active array dimensions, in sensor space\n     * @param streamSize stream size dimensions, in pixels\n     *\n     * @return a list of available zoom rectangles, sorted from least zoomed to most zoomed\n     ",
    "links" : [ ]
  }, {
    "name" : "private static List<Rect> getAvailableCropRectangles(Camera.Parameters params, Rect activeArray, Size streamSize)",
    "returnType" : "List<Rect>",
    "comment" : "\n     * Get the available 'crop' (zoom) rectangles for this camera.\n     *\n     * <p>When zoom is supported, this will return a list of {@code 1 + #getMaxZoom} size,\n     * where each crop rectangle corresponds to a zoom ratio (and is centered at the middle).</p>\n     *\n     * <p>Each crop rectangle is changed to have the same aspect ratio as {@code streamSize},\n     * by shrinking the rectangle if necessary.</p>\n     *\n     * <p>To get the reported crop region when applying a zoom to the sensor, use {@code streamSize}\n     * = {@code activeArray size}.</p>\n     *\n     * @param params non-{@code null} camera api1 parameters\n     * @param activeArray active array dimensions, in sensor space\n     * @param streamSize stream size dimensions, in pixels\n     *\n     * @return a list of available zoom rectangles, sorted from least zoomed to most zoomed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float getMaxZoomRatio(Camera.Parameters params)",
    "returnType" : "float",
    "comment" : "\n     * Get the largest possible zoom ratio (normalized to {@code 1.0f} and higher)\n     * that the camera can support.\n     *\n     * <p>If the camera does not support zoom, it always returns {@code 1.0f}.</p>\n     *\n     * @param params non-{@code null} camera api1 parameters\n     * @return normalized max zoom ratio, at least {@code 1.0f}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SizeF getZoomRatio(Size activeArraySize, Size cropSize)",
    "returnType" : "SizeF",
    "comment" : "\n     * Returns the component-wise zoom ratio (each greater or equal than {@code 1.0});\n     * largest values means more zoom.\n     *\n     * @param activeArraySize active array size of the sensor (e.g. max jpeg size)\n     * @param cropSize size of the crop/zoom\n     *\n     * @return {@link SizeF} with width/height being the component-wise zoom ratio\n     *\n     * @throws NullPointerException if any of the args were {@code null}\n     * @throws IllegalArgumentException if any component of {@code cropSize} was {@code 0}\n     ",
    "links" : [ "android.util.SizeF" ]
  }, {
    "name" : "public static ZoomData convertToLegacyZoom(Rect activeArraySize, Rect cropRegion, Float zoomRatio, Size previewSize, Camera.Parameters params)",
    "returnType" : "ZoomData",
    "comment" : "\n     * Convert the user-specified crop region/zoom into zoom data; which can be used\n     * to set the parameters to a specific zoom index, or to report back to the user what\n     * the actual zoom was, or for other calculations requiring the current preview crop region.\n     *\n     * <p>None of the parameters are mutated.<p>\n     *\n     * @param activeArraySize active array size of the sensor (e.g. max jpeg size)\n     * @param cropRegion the user-specified crop region\n     * @param zoomRatio the user-specified zoom ratio\n     * @param previewSize the current preview size (in pixels)\n     * @param params the current camera parameters (not mutated)\n     *\n     * @return the zoom index, and the effective/reported crop regions (relative to active array)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ZoomData convertZoomRatio(Rect activeArraySize, float zoomRatio, Size previewSize, Camera.Parameters params)",
    "returnType" : "ZoomData",
    "comment" : "\n     * Convert the user-specified zoom ratio into zoom data; which can be used\n     * to set the parameters to a specific zoom index, or to report back to the user what the\n     * actual zoom was, or for other calculations requiring the current preview crop region.\n     *\n     * <p>None of the parameters are mutated.</p>\n     *\n     * @param activeArraySize active array size of the sensor (e.g. max jpeg size)\n     * @param zoomRatio the current zoom ratio\n     * @param previewSize the current preview size (in pixels)\n     * @param params the current camera parameters (not mutated)\n     *\n     * @return the zoom index, and the effective/reported crop regions (relative to active array)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ZoomData convertScalerCropRegion(Rect activeArraySize, Rect cropRegion, Size previewSize, Camera.Parameters params)",
    "returnType" : "ZoomData",
    "comment" : "\n     * Convert the user-specified crop region into zoom data; which can be used\n     * to set the parameters to a specific zoom index, or to report back to the user what the\n     * actual zoom was, or for other calculations requiring the current preview crop region.\n     *\n     * <p>None of the parameters are mutated.</p>\n     *\n     * @param activeArraySize active array size of the sensor (e.g. max jpeg size)\n     * @param cropRegion the user-specified crop region\n     * @param previewSize the current preview size (in pixels)\n     * @param params the current camera parameters (not mutated)\n     *\n     * @return the zoom index, and the effective/reported crop regions (relative to active array)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeteringData convertMeteringRectangleToLegacy(Rect activeArray, MeteringRectangle meteringRect, ZoomData zoomData)",
    "returnType" : "MeteringData",
    "comment" : "\n     * Calculate the actual/effective/reported normalized rectangle data from a metering\n     * rectangle.\n     *\n     * <p>If any of the rectangles are out-of-range of their intended bounding box,\n     * the {@link #RECTANGLE_EMPTY empty rectangle} is substituted instead\n     * (with a weight of {@code 0}).</p>\n     *\n     * <p>The metering rectangle is bound by the crop region (effective/reported respectively).\n     * The metering {@link Camera.Area area} is bound by {@code [-1000, 1000]}.</p>\n     *\n     * <p>No parameters are mutated; returns the new metering data.</p>\n     *\n     * @param activeArraySize active array size of the sensor (e.g. max jpeg size)\n     * @param meteringRect the user-specified metering rectangle\n     * @param zoomData the calculated zoom data corresponding to this request\n     *\n     * @return the metering area, the reported/effective metering rectangles\n     ",
    "links" : [ "Camera.Area", "#RECTANGLE_EMPTY" ]
  }, {
    "name" : "public static WeightedRectangle convertCameraAreaToActiveArrayRectangle(Rect activeArray, ZoomData zoomData, Camera.Area area)",
    "returnType" : "WeightedRectangle",
    "comment" : "\n     * Convert the normalized camera area from [-1000, 1000] coordinate space\n     * into the active array-based coordinate space.\n     *\n     * <p>Values out of range are clipped to be within the resulting (reported) crop\n     * region. It is possible to have values larger than the preview crop.</p>\n     *\n     * <p>Weights out of range of [0, 1000] are clipped to be within the range.</p>\n     *\n     * @param activeArraySize active array size of the sensor (e.g. max jpeg size)\n     * @param zoomData the calculated zoom data corresponding to this request\n     * @param area the normalized camera area\n     *\n     * @return the weighed rectangle in active array coordinate space, with the weight\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Face convertFaceFromLegacy(Camera.Face face, Rect activeArray, ZoomData zoomData)",
    "returnType" : "Face",
    "comment" : "\n     * Convert an api1 face into an active-array based api2 face.\n     *\n     * <p>Out-of-ranges scores and ids will be clipped to be within range (with a warning).</p>\n     *\n     * @param face a non-{@code null} api1 face\n     * @param activeArraySize active array size of the sensor (e.g. max jpeg size)\n     * @param zoomData the calculated zoom data corresponding to this request\n     *\n     * @return a non-{@code null} api2 face\n     *\n     * @throws NullPointerException if the {@code face} was {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Point convertCameraPointToActiveArrayPoint(Rect activeArray, ZoomData zoomData, Point point, boolean usePreviewCrop)",
    "returnType" : "Point",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static WeightedRectangle convertCameraAreaToActiveArrayRectangle(Rect activeArray, ZoomData zoomData, Camera.Area area, boolean usePreviewCrop)",
    "returnType" : "WeightedRectangle",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "NORMALIZED_RECTANGLE_MIN", "NORMALIZED_RECTANGLE_MAX", "NORMALIZED_RECTANGLE_DEFAULT", "CAMERA_AREA_DEFAULT", "RECTANGLE_EMPTY", "ASPECT_RATIO_TOLERANCE", "TAG", "DEBUG", "ZOOM_RATIO_MULTIPLIER" ],
  "methodNames" : [ "public static Size convertSize(Camera.Size size)", "public static List<Size> convertSizeList(List<Camera.Size> sizeList)", "public static Size[] convertSizeListToArray(List<Camera.Size> sizeList)", "public static boolean containsSize(List<Camera.Size> sizeList, int width, int height)", "public static Size getLargestSupportedJpegSizeByArea(Camera.Parameters params)", "public static String stringFromArea(Camera.Area area)", "public static String stringFromAreaList(List<Camera.Area> areaList)", "public static int getClosestAvailableZoomCrop(Camera.Parameters params, Rect activeArray, Size streamSize, Rect cropRegion, Rect reportedCropRegion, Rect previewCropRegion)", "private static Rect getPreviewCropRectangleUnzoomed(Rect activeArray, Size previewSize)", "private static Rect shrinkToSameAspectRatioCentered(Rect reference, Rect shrinkTarget)", "public static List<Rect> getAvailableZoomCropRectangles(Camera.Parameters params, Rect activeArray)", "public static List<Rect> getAvailablePreviewZoomCropRectangles(Camera.Parameters params, Rect activeArray, Size previewSize)", "private static List<Rect> getAvailableCropRectangles(Camera.Parameters params, Rect activeArray, Size streamSize)", "public static float getMaxZoomRatio(Camera.Parameters params)", "private static SizeF getZoomRatio(Size activeArraySize, Size cropSize)", "public static ZoomData convertToLegacyZoom(Rect activeArraySize, Rect cropRegion, Float zoomRatio, Size previewSize, Camera.Parameters params)", "public static ZoomData convertZoomRatio(Rect activeArraySize, float zoomRatio, Size previewSize, Camera.Parameters params)", "public static ZoomData convertScalerCropRegion(Rect activeArraySize, Rect cropRegion, Size previewSize, Camera.Parameters params)", "public static MeteringData convertMeteringRectangleToLegacy(Rect activeArray, MeteringRectangle meteringRect, ZoomData zoomData)", "public static WeightedRectangle convertCameraAreaToActiveArrayRectangle(Rect activeArray, ZoomData zoomData, Camera.Area area)", "public static Face convertFaceFromLegacy(Camera.Face face, Rect activeArray, ZoomData zoomData)", "private static Point convertCameraPointToActiveArrayPoint(Rect activeArray, ZoomData zoomData, Point point, boolean usePreviewCrop)", "private static WeightedRectangle convertCameraAreaToActiveArrayRectangle(Rect activeArray, ZoomData zoomData, Camera.Area area, boolean usePreviewCrop)" ]
}