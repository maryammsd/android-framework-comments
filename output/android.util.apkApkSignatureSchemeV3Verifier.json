{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/apk/ApkSignatureSchemeV3Verifier.java",
  "packageName" : "android.util.apk",
  "className" : "ApkSignatureSchemeV3Verifier",
  "comment" : "\n * APK Signature Scheme v3 verifier.\n *\n * @hide for internal use only.\n ",
  "variables" : [ {
    "name" : "SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID",
    "type" : "int",
    "comment" : "\n     * ID of this signature scheme as used in X-Android-APK-Signed header used in JAR signing.\n     ",
    "links" : [ ]
  }, {
    "name" : "APK_SIGNATURE_SCHEME_V3_BLOCK_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROOF_OF_ROTATION_ATTR_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean hasSignature(String apkFile) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the provided APK contains an APK Signature Scheme V3 signature.\n     *\n     * <p><b>NOTE: This method does not verify the signature.</b>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VerifiedSigner verify(String apkFile) throws SignatureNotFoundException, SecurityException, IOException",
    "returnType" : "VerifiedSigner",
    "comment" : "\n     * Verifies APK Signature Scheme v3 signatures of the provided APK and returns the certificates\n     * associated with each signer.\n     *\n     * @throws SignatureNotFoundException if the APK is not signed using APK Signature Scheme v3.\n     * @throws SecurityException if the APK Signature Scheme v3 signature of this APK does not\n     * verify.\n     * @throws IOException if an I/O error occurs while reading the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VerifiedSigner unsafeGetCertsWithoutVerification(String apkFile) throws SignatureNotFoundException, SecurityException, IOException",
    "returnType" : "VerifiedSigner",
    "comment" : "\n     * Returns the certificates associated with each signer for the given APK without verification.\n     * This method is dangerous and should not be used, unless the caller is absolutely certain the\n     * APK is trusted.  Specifically, verification is only done for the APK Signature Scheme v3\n     * Block while gathering signer information.  The APK contents are not verified.\n     *\n     * @throws SignatureNotFoundException if the APK is not signed using APK Signature Scheme v3.\n     * @throws IOException if an I/O error occurs while reading the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static VerifiedSigner verify(String apkFile, boolean verifyIntegrity) throws SignatureNotFoundException, SecurityException, IOException",
    "returnType" : "VerifiedSigner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static VerifiedSigner verify(RandomAccessFile apk, boolean verifyIntegrity) throws SignatureNotFoundException, SecurityException, IOException",
    "returnType" : "VerifiedSigner",
    "comment" : "\n     * Verifies APK Signature Scheme v3 signatures of the provided APK and returns the certificates\n     * associated with each signer.\n     *\n     * @throws SignatureNotFoundException if the APK is not signed using APK Signature Scheme v3.\n     * @throws SecurityException if an APK Signature Scheme v3 signature of this APK does not\n     *         verify.\n     * @throws IOException if an I/O error occurs while reading the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SignatureInfo findSignature(RandomAccessFile apk) throws IOException, SignatureNotFoundException",
    "returnType" : "SignatureInfo",
    "comment" : "\n     * Returns the APK Signature Scheme v3 block contained in the provided APK file and the\n     * additional information relevant for verifying the block against the file.\n     *\n     * @throws SignatureNotFoundException if the APK is not signed using APK Signature Scheme v3.\n     * @throws IOException if an I/O error occurs while reading the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static VerifiedSigner verify(RandomAccessFile apk, SignatureInfo signatureInfo, boolean doVerifyIntegrity) throws SecurityException, IOException",
    "returnType" : "VerifiedSigner",
    "comment" : "\n     * Verifies the contents of the provided APK file against the provided APK Signature Scheme v3\n     * Block.\n     *\n     * @param signatureInfo APK Signature Scheme v3 Block and information relevant for verifying it\n     *        against the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static VerifiedSigner verifySigner(ByteBuffer signerBlock, Map<Integer, byte[]> contentDigests, CertificateFactory certFactory) throws SecurityException, IOException, PlatformNotSupportedException",
    "returnType" : "VerifiedSigner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static VerifiedSigner verifyAdditionalAttributes(ByteBuffer attrs, List<X509Certificate> certs, CertificateFactory certFactory) throws IOException",
    "returnType" : "VerifiedSigner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static VerifiedProofOfRotation verifyProofOfRotationStruct(ByteBuffer porBuf, CertificateFactory certFactory) throws SecurityException, IOException",
    "returnType" : "VerifiedProofOfRotation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte[] getVerityRootHash(String apkPath) throws IOException, SignatureNotFoundException, SecurityException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte[] generateApkVerity(String apkPath, ByteBufferFactory bufferFactory) throws IOException, SignatureNotFoundException, SecurityException, DigestException, NoSuchAlgorithmException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte[] generateApkVerityRootHash(String apkPath) throws NoSuchAlgorithmException, DigestException, IOException, SignatureNotFoundException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID", "APK_SIGNATURE_SCHEME_V3_BLOCK_ID", "PROOF_OF_ROTATION_ATTR_ID" ],
  "methodNames" : [ "public static boolean hasSignature(String apkFile) throws IOException", "public static VerifiedSigner verify(String apkFile) throws SignatureNotFoundException, SecurityException, IOException", "public static VerifiedSigner unsafeGetCertsWithoutVerification(String apkFile) throws SignatureNotFoundException, SecurityException, IOException", "private static VerifiedSigner verify(String apkFile, boolean verifyIntegrity) throws SignatureNotFoundException, SecurityException, IOException", "private static VerifiedSigner verify(RandomAccessFile apk, boolean verifyIntegrity) throws SignatureNotFoundException, SecurityException, IOException", "private static SignatureInfo findSignature(RandomAccessFile apk) throws IOException, SignatureNotFoundException", "private static VerifiedSigner verify(RandomAccessFile apk, SignatureInfo signatureInfo, boolean doVerifyIntegrity) throws SecurityException, IOException", "private static VerifiedSigner verifySigner(ByteBuffer signerBlock, Map<Integer, byte[]> contentDigests, CertificateFactory certFactory) throws SecurityException, IOException, PlatformNotSupportedException", "private static VerifiedSigner verifyAdditionalAttributes(ByteBuffer attrs, List<X509Certificate> certs, CertificateFactory certFactory) throws IOException", "private static VerifiedProofOfRotation verifyProofOfRotationStruct(ByteBuffer porBuf, CertificateFactory certFactory) throws SecurityException, IOException", " static byte[] getVerityRootHash(String apkPath) throws IOException, SignatureNotFoundException, SecurityException", " static byte[] generateApkVerity(String apkPath, ByteBufferFactory bufferFactory) throws IOException, SignatureNotFoundException, SecurityException, DigestException, NoSuchAlgorithmException", " static byte[] generateApkVerityRootHash(String apkPath) throws NoSuchAlgorithmException, DigestException, IOException, SignatureNotFoundException" ]
}