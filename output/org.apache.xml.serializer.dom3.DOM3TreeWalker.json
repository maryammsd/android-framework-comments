{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/dom3/DOM3TreeWalker.java",
  "packageName" : "org.apache.xml.serializer.dom3",
  "className" : "DOM3TreeWalker",
  "comment" : "\r\n * Built on org.apache.xml.serializer.TreeWalker and adds functionality to\r\n * traverse and serialize a DOM Node (Level 2 or Level 3) as specified in \r\n * the DOM Level 3 LS Recommedation by evaluating and applying DOMConfiguration \r\n * parameters and filters if any during serialization.\r\n *   \r\n * @xsl.usage internal\r\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "fSerializer",
    "type" : "SerializationHandler",
    "comment" : "\r\n     * The SerializationHandler, it extends ContentHandler and when\r\n     * this class is instantiated via the constructor provided, a\r\n     * SerializationHandler object is passed to it.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "fLocator",
    "type" : "LocatorImpl",
    "comment" : " Locator object for this TreeWalker          ",
    "links" : [ ]
  }, {
    "name" : "fErrorHandler",
    "type" : "DOMErrorHandler",
    "comment" : " ErrorHandler ",
    "links" : [ ]
  }, {
    "name" : "fFilter",
    "type" : "LSSerializerFilter",
    "comment" : " LSSerializerFilter ",
    "links" : [ ]
  }, {
    "name" : "fLexicalHandler",
    "type" : "LexicalHandler",
    "comment" : " If the serializer is an instance of a LexicalHandler ",
    "links" : [ ]
  }, {
    "name" : "fWhatToShowFilter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fNewLine",
    "type" : "String",
    "comment" : " New Line character to use in serialization ",
    "links" : [ ]
  }, {
    "name" : "fDOMConfigProperties",
    "type" : "Properties",
    "comment" : " DOMConfiguration Properties ",
    "links" : [ ]
  }, {
    "name" : "fInEntityRef",
    "type" : "boolean",
    "comment" : " Keeps track if we are in an entity reference when entities=true ",
    "links" : [ ]
  }, {
    "name" : "fXMLVersion",
    "type" : "String",
    "comment" : " Stores the version of the XML document to be serialize ",
    "links" : [ ]
  }, {
    "name" : "fIsXMLVersion11",
    "type" : "boolean",
    "comment" : " XML Version, default 1.0 ",
    "links" : [ ]
  }, {
    "name" : "fIsLevel3DOM",
    "type" : "boolean",
    "comment" : " Is the Node a Level 3 DOM node ",
    "links" : [ ]
  }, {
    "name" : "fFeatures",
    "type" : "int",
    "comment" : " DOM Configuration Parameters ",
    "links" : [ ]
  }, {
    "name" : "fNextIsRaw",
    "type" : "boolean",
    "comment" : " Flag indicating whether following text to be processed is raw text          ",
    "links" : [ ]
  }, {
    "name" : "XMLNS_URI",
    "type" : "String",
    "comment" : " ",
    "links" : [ ]
  }, {
    "name" : "XMLNS_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_URI",
    "type" : "String",
    "comment" : " ",
    "links" : [ ]
  }, {
    "name" : "XML_PREFIX",
    "type" : "String",
    "comment" : " ",
    "links" : [ ]
  }, {
    "name" : "fNSBinder",
    "type" : "NamespaceSupport",
    "comment" : " stores namespaces in scope ",
    "links" : [ ]
  }, {
    "name" : "fLocalNSBinder",
    "type" : "NamespaceSupport",
    "comment" : " stores all namespace bindings on the current element ",
    "links" : [ ]
  }, {
    "name" : "fElementDepth",
    "type" : "int",
    "comment" : " stores the current element depth ",
    "links" : [ ]
  }, {
    "name" : "CANONICAL",
    "type" : "int",
    "comment" : " Parameter canonical-form, true [optional] - NOT SUPPORTED ",
    "links" : [ ]
  }, {
    "name" : "CDATA",
    "type" : "int",
    "comment" : " Parameter cdata-sections, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "CHARNORMALIZE",
    "type" : "int",
    "comment" : " Parameter check-character-normalization, true [optional] - NOT SUPPORTED ",
    "links" : [ ]
  }, {
    "name" : "COMMENTS",
    "type" : "int",
    "comment" : " Parameter comments, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "DTNORMALIZE",
    "type" : "int",
    "comment" : " Parameter datatype-normalization, true [optional] - NOT SUPPORTED",
    "links" : [ ]
  }, {
    "name" : "ELEM_CONTENT_WHITESPACE",
    "type" : "int",
    "comment" : " Parameter element-content-whitespace, true [required] (default) - value - false [optional] NOT SUPPORTED",
    "links" : [ ]
  }, {
    "name" : "ENTITIES",
    "type" : "int",
    "comment" : " Parameter entities, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "INFOSET",
    "type" : "int",
    "comment" : " Parameter infoset, true [required] (default), false has no effect --> True has no effect for the serializer",
    "links" : [ ]
  }, {
    "name" : "NAMESPACES",
    "type" : "int",
    "comment" : " Parameter namespaces, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "NAMESPACEDECLS",
    "type" : "int",
    "comment" : " Parameter namespace-declarations, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "NORMALIZECHARS",
    "type" : "int",
    "comment" : " Parameter normalize-characters, true [optional] - NOT SUPPORTED",
    "links" : [ ]
  }, {
    "name" : "SPLITCDATA",
    "type" : "int",
    "comment" : " Parameter split-cdata-sections, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "VALIDATE",
    "type" : "int",
    "comment" : " Parameter validate, true [optional] - NOT SUPPORTED",
    "links" : [ ]
  }, {
    "name" : "SCHEMAVALIDATE",
    "type" : "int",
    "comment" : " Parameter validate-if-schema, true [optional] - NOT SUPPORTED",
    "links" : [ ]
  }, {
    "name" : "WELLFORMED",
    "type" : "int",
    "comment" : " Parameter split-cdata-sections, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "DISCARDDEFAULT",
    "type" : "int",
    "comment" : " Not sure how this will be used in level 2 Documents",
    "links" : [ ]
  }, {
    "name" : "PRETTY_PRINT",
    "type" : "int",
    "comment" : " Parameter format-pretty-print, true [optional] ",
    "links" : [ ]
  }, {
    "name" : "IGNORE_CHAR_DENORMALIZE",
    "type" : "int",
    "comment" : " We currently do not support XML 1.1 character normalization",
    "links" : [ ]
  }, {
    "name" : "XMLDECL",
    "type" : "int",
    "comment" : " Parameter discard-default-content, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "s_propKeys",
    "type" : "Hashtable",
    "comment" : " \r\n     * This table is a quick lookup of a property key (String) to the integer that\r\n     * is the bit to flip in the fFeatures field, so the integers should have\r\n     * values 1,2,4,8,16...\r\n     * \r\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void traverse(Node pos) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Perform a pre-order traversal non-recursive style.  \r\n     *\r\n     * Note that TreeWalker assumes that the subtree is intended to represent \r\n     * a complete (though not necessarily well-formed) document and, during a \r\n     * traversal, startDocument and endDocument will always be issued to the \r\n     * SAX listener.\r\n     *  \r\n     * @param pos Node in the tree where to start traversal\r\n     *\r\n     * @throws TransformerException\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public void traverse(Node pos, Node top) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Perform a pre-order traversal non-recursive style.\r\n     \r\n     * Note that TreeWalker assumes that the subtree is intended to represent \r\n     * a complete (though not necessarily well-formed) document and, during a \r\n     * traversal, startDocument and endDocument will always be issued to the \r\n     * SAX listener.\r\n     *\r\n     * @param pos Node in the tree where to start traversal\r\n     * @param top Node in the tree where to end traversal\r\n     *\r\n     * @throws TransformerException\r\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void dispatachChars(Node node) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Optimized dispatch of characters.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void startNode(Node node) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Start processing given node\r\n     *\r\n     * @param node Node to process\r\n     *\r\n     * @throws org.xml.sax.SAXException\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void endNode(Node node) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * End processing of given node \r\n     *\r\n     *\r\n     * @param node Node we just finished processing\r\n     *\r\n     * @throws org.xml.sax.SAXException\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean applyFilter(Node node, int nodeType)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Applies a filter on the node to serialize\r\n     * \r\n     * @param node The Node to serialize\r\n     * @return True if the node is to be serialized else false if the node \r\n     *         is to be rejected or skipped. \r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void serializeDocType(DocumentType node, boolean bStart) throws SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Serializes a Document Type Node.\r\n     * \r\n     * @param node The Docuemnt Type Node to serialize\r\n     * @param bStart Invoked at the start or end of node.  Default true. \r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void serializeComment(Comment node) throws SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Serializes a Comment Node.\r\n     * \r\n     * @param node The Comment Node to serialize\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void serializeElement(Element node, boolean bStart) throws SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Serializes an Element Node.\r\n     * \r\n     * @param node The Element Node to serialize\r\n     * @param bStart Invoked at the start or end of node.   \r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void serializeAttList(Element node) throws SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Serializes the Attr Nodes of an Element.\r\n     * \r\n     * @param node The OwnerElement whose Attr Nodes are to be serialized.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void serializePI(ProcessingInstruction node) throws SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Serializes an ProcessingInstruction Node.\r\n     * \r\n     * @param node The ProcessingInstruction Node to serialize\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void serializeCDATASection(CDATASection node) throws SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Serializes an CDATASection Node.\r\n     * \r\n     * @param node The CDATASection Node to serialize\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void serializeText(Text node) throws SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Serializes an Text Node.\r\n     * \r\n     * @param node The Text Node to serialize\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void serializeEntityReference(EntityReference node, boolean bStart) throws SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Serializes an EntityReference Node.\r\n     * \r\n     * @param node The EntityReference Node to serialize\r\n     * @param bStart Inicates if called from start or endNode \r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isXMLName(String s, boolean xml11Version)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Taken from org.apache.xerces.dom.CoreDocumentImpl\r\n     * \r\n     * Check the string against XML's definition of acceptable names for\r\n     * elements and attributes and so on using the XMLCharacterProperties\r\n     * utility class\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isValidQName(String prefix, String local, boolean xml11Version)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Taken from org.apache.xerces.dom.CoreDocumentImpl\r\n     *  \r\n     * Checks if the given qualified name is legal with respect\r\n     * to the version of XML to which this document must conform.\r\n     *\r\n     * @param prefix prefix of qualified name\r\n     * @param local local part of qualified name\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isWFXMLChar(String chardata, Character refInvalidChar)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Checks if a XML character is well-formed\r\n     * \r\n     * @param characters A String of characters to be checked for Well-Formedness\r\n     * @param refInvalidChar A reference to the character to be returned that was determined invalid. \r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Character isWFXMLChar(String chardata)",
    "returnType" : "Character",
    "comment" : "\r\n     * Checks if a XML character is well-formed.  If there is a problem with\r\n     * the character a non-null Character is returned else null is returned.\r\n     * \r\n     * @param characters A String of characters to be checked for Well-Formedness\r\n     * @return Character A reference to the character to be returned that was determined invalid. \r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void isCommentWellFormed(String data)",
    "returnType" : "void",
    "comment" : "\r\n     * Checks if a comment node is well-formed\r\n     * \r\n     * @param data The contents of the comment node\r\n     * @return a boolean indiacating if the comment is well-formed or not.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void isElementWellFormed(Node node)",
    "returnType" : "void",
    "comment" : "\r\n     * Checks if an element node is well-formed, by checking its Name for well-formedness.\r\n     * \r\n     * @param data The contents of the comment node\r\n     * @return a boolean indiacating if the comment is well-formed or not.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void isAttributeWellFormed(Node node)",
    "returnType" : "void",
    "comment" : "\r\n     * Checks if an attr node is well-formed, by checking it's Name and value\r\n     * for well-formedness.\r\n     * \r\n     * @param data The contents of the comment node\r\n     * @return a boolean indiacating if the comment is well-formed or not.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void isPIWellFormed(ProcessingInstruction node)",
    "returnType" : "void",
    "comment" : "\r\n     * Checks if a PI node is well-formed, by checking it's Name and data\r\n     * for well-formedness.\r\n     * \r\n     * @param data The contents of the comment node\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void isCDATASectionWellFormed(CDATASection node)",
    "returnType" : "void",
    "comment" : "\r\n     * Checks if an CDATASection node is well-formed, by checking it's data\r\n     * for well-formedness.  Note that the presence of a CDATA termination mark\r\n     * in the contents of a CDATASection is handled by the parameter \r\n     * spli-cdata-sections\r\n     * \r\n     * @param data The contents of the comment node\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void isTextWellFormed(Text node)",
    "returnType" : "void",
    "comment" : "\r\n     * Checks if an Text node is well-formed, by checking if it contains invalid\r\n     * XML characters.\r\n     * \r\n     * @param data The contents of the comment node\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void isEntityReferneceWellFormed(EntityReference node)",
    "returnType" : "void",
    "comment" : "\r\n     * Checks if an EntityRefernece node is well-formed, by checking it's node name.  Then depending\r\n     * on whether it is referenced in Element content or in an Attr Node, checks if the EntityReference\r\n     * references an unparsed entity or a external entity and if so throws raises the \r\n     * appropriate well-formedness error.  \r\n     * \r\n     * @param data The contents of the comment node\r\n     * @parent The parent of the EntityReference Node\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void checkUnboundPrefixInEntRef(Node node)",
    "returnType" : "void",
    "comment" : "\r\n     * If the configuration parameter \"namespaces\" is set to true, this methods\r\n     * checks if an entity whose replacement text contains unbound namespace \r\n     * prefixes is referenced in a location where there are no bindings for \r\n     * the namespace prefixes and if so raises a LSException with the error-type\r\n     * \"unbound-prefix-in-entity-reference\"   \r\n     * \r\n     * @param Node, The EntityReference nodes whose children are to be checked\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void recordLocalNSDecl(Node node)",
    "returnType" : "void",
    "comment" : "\r\n     * Records local namespace declarations, to be used for normalization later\r\n     * \r\n     * @param Node, The element node, whose namespace declarations are to be recorded\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fixupElementNS(Node node) throws SAXException",
    "returnType" : "void",
    "comment" : "\r\n     * Fixes an element's namespace\r\n     * \r\n     * @param Node, The element node, whose namespace is to be fixed\r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void initProperties(Properties properties)",
    "returnType" : "void",
    "comment" : "\r\n     * Initializes fFeatures based on the DOMConfiguration Parameters set.\r\n     *\r\n     * @param properties DOMConfiguraiton properties that were set and which are\r\n     * to be used while serializing the DOM. \r\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void traverse(Node pos) throws org.xml.sax.SAXException", "public void traverse(Node pos, Node top) throws org.xml.sax.SAXException", "private final void dispatachChars(Node node) throws org.xml.sax.SAXException", "protected void startNode(Node node) throws org.xml.sax.SAXException", "protected void endNode(Node node) throws org.xml.sax.SAXException", "protected boolean applyFilter(Node node, int nodeType)", "protected void serializeDocType(DocumentType node, boolean bStart) throws SAXException", "protected void serializeComment(Comment node) throws SAXException", "protected void serializeElement(Element node, boolean bStart) throws SAXException", "protected void serializeAttList(Element node) throws SAXException", "protected void serializePI(ProcessingInstruction node) throws SAXException", "protected void serializeCDATASection(CDATASection node) throws SAXException", "protected void serializeText(Text node) throws SAXException", "protected void serializeEntityReference(EntityReference node, boolean bStart) throws SAXException", "protected boolean isXMLName(String s, boolean xml11Version)", "protected boolean isValidQName(String prefix, String local, boolean xml11Version)", "protected boolean isWFXMLChar(String chardata, Character refInvalidChar)", "protected Character isWFXMLChar(String chardata)", "protected void isCommentWellFormed(String data)", "protected void isElementWellFormed(Node node)", "protected void isAttributeWellFormed(Node node)", "protected void isPIWellFormed(ProcessingInstruction node)", "protected void isCDATASectionWellFormed(CDATASection node)", "protected void isTextWellFormed(Text node)", "protected void isEntityReferneceWellFormed(EntityReference node)", "protected void checkUnboundPrefixInEntRef(Node node)", "protected void recordLocalNSDecl(Node node)", "protected void fixupElementNS(Node node) throws SAXException", "protected void initProperties(Properties properties)" ],
  "variableNames" : [ "fSerializer", "fLocator", "fErrorHandler", "fFilter", "fLexicalHandler", "fWhatToShowFilter", "fNewLine", "fDOMConfigProperties", "fInEntityRef", "fXMLVersion", "fIsXMLVersion11", "fIsLevel3DOM", "fFeatures", "fNextIsRaw", "XMLNS_URI", "XMLNS_PREFIX", "XML_URI", "XML_PREFIX", "fNSBinder", "fLocalNSBinder", "fElementDepth", "CANONICAL", "CDATA", "CHARNORMALIZE", "COMMENTS", "DTNORMALIZE", "ELEM_CONTENT_WHITESPACE", "ENTITIES", "INFOSET", "NAMESPACES", "NAMESPACEDECLS", "NORMALIZECHARS", "SPLITCDATA", "VALIDATE", "SCHEMAVALIDATE", "WELLFORMED", "DISCARDDEFAULT", "PRETTY_PRINT", "IGNORE_CHAR_DENORMALIZE", "XMLDECL", "s_propKeys" ]
}