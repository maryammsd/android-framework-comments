{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/animation/StateListAnimator.java",
  "packageName" : "android.animation",
  "className" : "StateListAnimator",
  "comment" : "\n * Lets you define a number of Animators that will run on the attached View depending on the View's\n * drawable state.\n * <p>\n * It can be defined in an XML file with the <code>&lt;selector></code> element.\n * Each State Animator is defined in a nested <code>&lt;item></code> element.\n *\n * @attr ref android.R.styleable#DrawableStates_state_focused\n * @attr ref android.R.styleable#DrawableStates_state_window_focused\n * @attr ref android.R.styleable#DrawableStates_state_enabled\n * @attr ref android.R.styleable#DrawableStates_state_checkable\n * @attr ref android.R.styleable#DrawableStates_state_checked\n * @attr ref android.R.styleable#DrawableStates_state_selected\n * @attr ref android.R.styleable#DrawableStates_state_activated\n * @attr ref android.R.styleable#DrawableStates_state_active\n * @attr ref android.R.styleable#DrawableStates_state_single\n * @attr ref android.R.styleable#DrawableStates_state_first\n * @attr ref android.R.styleable#DrawableStates_state_middle\n * @attr ref android.R.styleable#DrawableStates_state_last\n * @attr ref android.R.styleable#DrawableStates_state_pressed\n * @attr ref android.R.styleable#StateListAnimatorItem_animation\n ",
  "variables" : [ {
    "name" : "mTuples",
    "type" : "ArrayList<Tuple>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastMatch",
    "type" : "Tuple",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunningAnimator",
    "type" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewRef",
    "type" : "WeakReference<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConstantState",
    "type" : "StateListAnimatorConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatorListener",
    "type" : "AnimatorListenerAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingConfigurations",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initAnimatorListener()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addState(int[] specs, Animator animator)",
    "returnType" : "void",
    "comment" : "\n     * Associates the given animator with the provided drawable state specs so that it will be run\n     * when the View's drawable state matches the specs.\n     *\n     * @param specs The drawable state specs to match against\n     * @param animator The animator to run when the specs match\n     ",
    "links" : [ ]
  }, {
    "name" : "public Animator getRunningAnimator()",
    "returnType" : "Animator",
    "comment" : "\n     * Returns the current {@link android.animation.Animator} which is started because of a state\n     * change.\n     *\n     * @return The currently running Animator or null if no Animator is running\n     * @hide\n     ",
    "links" : [ "android.animation.Animator" ]
  }, {
    "name" : "public View getTarget()",
    "returnType" : "View",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTarget(View view)",
    "returnType" : "void",
    "comment" : "\n     * Called by View\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearTarget()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StateListAnimator clone()",
    "returnType" : "StateListAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setState(int[] state)",
    "returnType" : "void",
    "comment" : "\n     * Called by View\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void start(Tuple match)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<Tuple> getTuples()",
    "returnType" : "ArrayList<Tuple>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void jumpToCurrentState()",
    "returnType" : "void",
    "comment" : "\n     * If there is an animation running for a recent state change, ends it.\n     * <p>\n     * This causes the animation to assign the end value(s) to the View.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "\n     * Return a mask of the configuration parameters for which this animator may change, requiring\n     * that it be re-created.  The default implementation returns whatever was provided through\n     * {@link #setChangingConfigurations(int)} or 0 by default.\n     *\n     * @return Returns a mask of the changing configuration parameters, as defined by\n     * {@link android.content.pm.ActivityInfo}.\n     *\n     * @see android.content.pm.ActivityInfo\n     * @hide\n     ",
    "links" : [ "#setChangingConfigurations", "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "public void setChangingConfigurations(@Config int configs)",
    "returnType" : "void",
    "comment" : "\n     * Set a mask of the configuration parameters for which this animator may change, requiring\n     * that it should be recreated from resources instead of being cloned.\n     *\n     * @param configs A mask of the changing configuration parameters, as\n     * defined by {@link android.content.pm.ActivityInfo}.\n     *\n     * @see android.content.pm.ActivityInfo\n     * @hide\n     ",
    "links" : [ "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "public void appendChangingConfigurations(@Config int configs)",
    "returnType" : "void",
    "comment" : "\n     * Sets the changing configurations value to the union of the current changing configurations\n     * and the provided configs.\n     * This method is called while loading the animator.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ConstantState<StateListAnimator> createConstantState()",
    "returnType" : "ConstantState<StateListAnimator>",
    "comment" : "\n     * Return a {@link android.content.res.ConstantState} instance that holds the shared state of\n     * this Animator.\n     * <p>\n     * This constant state is used to create new instances of this animator when needed. Default\n     * implementation creates a new {@link StateListAnimatorConstantState}. You can override this\n     * method to provide your custom logic or return null if you don't want this animator to be\n     * cached.\n     *\n     * @return The {@link android.content.res.ConstantState} associated to this Animator.\n     * @see android.content.res.ConstantState\n     * @see #clone()\n     * @hide\n     ",
    "links" : [ "android.content.res.ConstantState", "StateListAnimatorConstantState", "android.content.res.ConstantState" ]
  } ],
  "variableNames" : [ "mTuples", "mLastMatch", "mRunningAnimator", "mViewRef", "mConstantState", "mAnimatorListener", "mChangingConfigurations" ],
  "methodNames" : [ "private void initAnimatorListener()", "public void addState(int[] specs, Animator animator)", "public Animator getRunningAnimator()", "public View getTarget()", "public void setTarget(View view)", "private void clearTarget()", "public StateListAnimator clone()", "public void setState(int[] state)", "private void start(Tuple match)", "private void cancel()", "public ArrayList<Tuple> getTuples()", "public void jumpToCurrentState()", "public int getChangingConfigurations()", "public void setChangingConfigurations(@Config int configs)", "public void appendChangingConfigurations(@Config int configs)", "public ConstantState<StateListAnimator> createConstantState()" ]
}