{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/BrailleDisplayControllerImpl.java",
  "packageName" : "android.accessibilityservice",
  "className" : "BrailleDisplayControllerImpl",
  "comment" : " callers.",
  "links" : [ ],
  "variables" : [ {
    "name" : "mAccessibilityService",
    "type" : "AccessibilityService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsHidrawSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBrailleDisplayConnection",
    "type" : "IBrailleDisplayConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "BrailleDisplayCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IS_HIDRAW_SUPPORTED",
    "type" : "boolean",
    "comment" : "\n     * Read-only property that returns whether HIDRAW access is supported on this device.\n     *\n     * <p>Defaults to true.\n     *\n     * <p>Device manufacturers without HIDRAW kernel support can set this to false in\n     * the device's product makefile.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void connect(@NonNull BluetoothDevice bluetoothDevice, @NonNull BrailleDisplayCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void connect(@NonNull BluetoothDevice bluetoothDevice, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull BrailleDisplayCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void connect(@NonNull UsbDevice usbDevice, @NonNull BrailleDisplayCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void connect(@NonNull UsbDevice usbDevice, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull BrailleDisplayCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void connect(FunctionalUtils.RemoteExceptionIgnoringConsumer<IAccessibilityServiceConnection> createConnection, @NonNull Executor callbackExecutor, @NonNull BrailleDisplayCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Shared implementation for the {@code connect()} API methods.\n     *\n     * <p>Performs a blocking call to system_server to create the connection. Success is\n     * returned through {@link BrailleDisplayCallback#onConnected} while normal connection\n     * errors are returned through {@link BrailleDisplayCallback#onConnectionFailed}. This\n     * connection is implemented using cached data from the HIDRAW driver so it returns\n     * quickly without needing to perform any I/O with the Braille display.\n     *\n     * <p>The AIDL call to system_server is blocking (not posted to a handler thread) so\n     * that runtime exceptions signaling abnormal connection errors from API misuse\n     * (e.g. lacking permissions, providing an invalid BluetoothDevice, calling connect\n     * while already connected) are propagated to the API caller.\n     ",
    "links" : [ "#onConnectionFailed", "#onConnected" ]
  }, {
    "name" : "public boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void write(@NonNull byte[] buffer) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clearConnectionLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void connect(@NonNull BluetoothDevice bluetoothDevice, @NonNull BrailleDisplayCallback callback)", "public void connect(@NonNull BluetoothDevice bluetoothDevice, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull BrailleDisplayCallback callback)", "public void connect(@NonNull UsbDevice usbDevice, @NonNull BrailleDisplayCallback callback)", "public void connect(@NonNull UsbDevice usbDevice, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull BrailleDisplayCallback callback)", "private void connect(FunctionalUtils.RemoteExceptionIgnoringConsumer<IAccessibilityServiceConnection> createConnection, @NonNull Executor callbackExecutor, @NonNull BrailleDisplayCallback callback)", "public boolean isConnected()", "public void write(@NonNull byte[] buffer) throws IOException", "public void disconnect()", "private void clearConnectionLocked()" ],
  "variableNames" : [ "mAccessibilityService", "mLock", "mIsHidrawSupported", "mBrailleDisplayConnection", "mCallbackExecutor", "mCallback", "IS_HIDRAW_SUPPORTED" ]
}