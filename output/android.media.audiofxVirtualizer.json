{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiofx/Virtualizer.java",
  "packageName" : "android.media.audiofx",
  "className" : "Virtualizer",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_STRENGTH_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * Is strength parameter supported by virtualizer engine. Parameter ID for getParameter().\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_STRENGTH",
    "type" : "int",
    "comment" : "\n     * Virtualizer effect strength. Parameter ID for\n     * {@link android.media.audiofx.Virtualizer.OnParameterChangeListener}\n     ",
    "links" : [ "android.media.audiofx.Virtualizer.OnParameterChangeListener" ]
  }, {
    "name" : "PARAM_VIRTUAL_SPEAKER_ANGLES",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Parameter ID to query the virtual speaker angles for a channel mask / device configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_FORCE_VIRTUALIZATION_MODE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Parameter ID to force the virtualization mode to be that of a specific device\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_VIRTUALIZATION_MODE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Parameter ID to query the current virtualization mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStrengthSupported",
    "type" : "boolean",
    "comment" : "\n     * Indicates if strength parameter is supported by the virtualizer engine\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListener",
    "type" : "OnParameterChangeListener",
    "comment" : "\n     * Registered listener for parameter changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaseParamListener",
    "type" : "BaseParameterListener",
    "comment" : "\n     * Listener used internally to to receive raw parameter change event from AudioEffect super class\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListenerLock",
    "type" : "Object",
    "comment" : "\n     * Lock for access to mParamListener\n     ",
    "links" : [ ]
  }, {
    "name" : "VIRTUALIZATION_MODE_OFF",
    "type" : "int",
    "comment" : "\n     * A virtualization mode indicating virtualization processing is not active.\n     * See {@link #getVirtualizationMode()} as one of the possible return value.\n     ",
    "links" : [ "#getVirtualizationMode" ]
  }, {
    "name" : "VIRTUALIZATION_MODE_AUTO",
    "type" : "int",
    "comment" : "\n     * A virtualization mode used to indicate the virtualizer effect must stop forcing the\n     * processing to a particular mode in {@link #forceVirtualizationMode(int)}.\n     ",
    "links" : [ "#forceVirtualizationMode" ]
  }, {
    "name" : "VIRTUALIZATION_MODE_BINAURAL",
    "type" : "int",
    "comment" : "\n     * A virtualization mode typically used over headphones.\n     * Binaural virtualization describes an audio processing configuration for virtualization\n     * where the left and right channels are respectively reaching the left and right ear of the\n     * user, without also feeding the opposite ear (as is the case when listening over speakers).\n     * <p>Such a mode is therefore meant to be used when audio is playing over stereo wired\n     * headphones or headsets, but also stereo headphones through a wireless A2DP Bluetooth link.\n     * <p>See {@link #canVirtualize(int, int)} to verify this mode is supported by this Virtualizer.\n     ",
    "links" : [ "#canVirtualize" ]
  }, {
    "name" : "VIRTUALIZATION_MODE_TRANSAURAL",
    "type" : "int",
    "comment" : "\n     * A virtualization mode typically used over speakers.\n     * Transaural virtualization describes an audio processing configuration that differs from\n     * binaural (as described in {@link #VIRTUALIZATION_MODE_BINAURAL} in that cross-talk is\n     * present, i.e. audio played from the left channel also reaches the right ear of the user,\n     * and vice-versa.\n     * <p>When supported, such a mode is therefore meant to be used when audio is playing over the\n     * built-in stereo speakers of a device, if they are featured.\n     * <p>See {@link #canVirtualize(int, int)} to verify this mode is supported by this Virtualizer.\n     ",
    "links" : [ "#VIRTUALIZATION_MODE_BINAURAL", "#canVirtualize" ]
  } ],
  "methods" : [ {
    "name" : "public boolean getStrengthSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether setting strength is supported. If this method returns false, only one\n     * strength is supported and the setStrength() method always rounds to that value.\n     * @return true is strength parameter is supported, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStrength(short strength) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the strength of the virtualizer effect. If the implementation does not support per mille\n     * accuracy for setting the strength, it is allowed to round the given strength to the nearest\n     * supported value. You can use the {@link #getRoundedStrength()} method to query the\n     * (possibly rounded) value that was actually set.\n     * @param strength strength of the effect. The valid range for strength strength is [0, 1000],\n     * where 0 per mille designates the mildest effect and 1000 per mille designates the strongest.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#getRoundedStrength" ]
  }, {
    "name" : "public short getRoundedStrength() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the current strength of the effect.\n     * @return the strength of the effect. The valid range for strength is [0, 1000], where 0 per\n     * mille designates the mildest effect and 1000 per mille the strongest\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean getAnglesInt(int inputChannelMask, int deviceType, int[] angles) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a configuration is supported, and query the virtual speaker angles.\n     * @param inputChannelMask\n     * @param deviceType\n     * @param angles if non-null: array in which the angles will be written. If null, no angles\n     *    are returned\n     * @return true if the combination of channel mask and output device type is supported, false\n     *    otherwise\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getDeviceForModeQuery(@VirtualizationMode int virtualizationMode) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getDeviceForModeForce(@ForceVirtualizationMode int virtualizationMode) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int deviceToMode(int deviceType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canVirtualize(int inputChannelMask, @VirtualizationMode int virtualizationMode) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the combination of a channel mask and virtualization mode is supported by this\n     * virtualizer.\n     * Some virtualizer implementations may only support binaural processing (i.e. only support\n     * headphone output, see {@link #VIRTUALIZATION_MODE_BINAURAL}), some may support transaural\n     * processing (i.e. for speaker output, see {@link #VIRTUALIZATION_MODE_TRANSAURAL}) for the\n     * built-in speakers. Use this method to query the virtualizer implementation capabilities.\n     * @param inputChannelMask the channel mask of the content to virtualize.\n     * @param virtualizationMode the mode for which virtualization processing is to be performed,\n     *    one of {@link #VIRTUALIZATION_MODE_BINAURAL}, {@link #VIRTUALIZATION_MODE_TRANSAURAL}.\n     * @return true if the combination of channel mask and virtualization mode is supported, false\n     *    otherwise.\n     *    <br>An indication that a certain channel mask is not supported doesn't necessarily mean\n     *    you cannot play content with that channel mask, it more likely implies the content will\n     *    be downmixed before being virtualized. For instance a virtualizer that only supports a\n     *    mask such as {@link AudioFormat#CHANNEL_OUT_STEREO}\n     *    will still be able to process content with a mask of\n     *    {@link AudioFormat#CHANNEL_OUT_5POINT1}, but will downmix the content to stereo first, and\n     *    then will virtualize, as opposed to virtualizing each channel individually.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#VIRTUALIZATION_MODE_BINAURAL", "#VIRTUALIZATION_MODE_TRANSAURAL", "#VIRTUALIZATION_MODE_BINAURAL", "#VIRTUALIZATION_MODE_TRANSAURAL", "AudioFormat#CHANNEL_OUT_STEREO", "AudioFormat#CHANNEL_OUT_5POINT1" ]
  }, {
    "name" : "public boolean getSpeakerAngles(int inputChannelMask, @VirtualizationMode int virtualizationMode, int[] angles) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "boolean",
    "comment" : "\n     * Queries the virtual speaker angles (azimuth and elevation) for a combination of a channel\n     * mask and virtualization mode.\n     * If the virtualization configuration (mask and mode) is supported (see\n     * {@link #canVirtualize(int, int)}, the array angles will contain upon return the\n     * definition of each virtual speaker and its azimuth and elevation angles relative to the\n     * listener.\n     * <br>Note that in some virtualizer implementations, the angles may be strength-dependent.\n     * @param inputChannelMask the channel mask of the content to virtualize.\n     * @param virtualizationMode the mode for which virtualization processing is to be performed,\n     *    one of {@link #VIRTUALIZATION_MODE_BINAURAL}, {@link #VIRTUALIZATION_MODE_TRANSAURAL}.\n     * @param angles a non-null array whose length is 3 times the number of channels in the channel\n     *    mask.\n     *    If the method indicates the configuration is supported, the array will contain upon return\n     *    triplets of values: for each channel <code>i</code> among the channels of the mask:\n     *    <ul>\n     *      <li>the element at index <code>3*i</code> in the array contains the speaker\n     *          identification (e.g. {@link AudioFormat#CHANNEL_OUT_FRONT_LEFT}),</li>\n     *      <li>the element at index <code>3*i+1</code> contains its corresponding azimuth angle\n     *          expressed in degrees, where 0 is the direction the listener faces, 180 is behind\n     *          the listener, and -90 is to her/his left,</li>\n     *      <li>the element at index <code>3*i+2</code> contains its corresponding elevation angle\n     *          where +90 is directly above the listener, 0 is the horizontal plane, and -90 is\n     *          directly below the listener.</li>\n     * @return true if the combination of channel mask and virtualization mode is supported, false\n     *    otherwise.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#canVirtualize", "#VIRTUALIZATION_MODE_BINAURAL", "#VIRTUALIZATION_MODE_TRANSAURAL", "AudioFormat#CHANNEL_OUT_FRONT_LEFT" ]
  }, {
    "name" : "public boolean forceVirtualizationMode(@ForceVirtualizationMode int virtualizationMode) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "boolean",
    "comment" : "\n     * Forces the virtualizer effect to use the given processing mode.\n     * The effect must be enabled for the forced mode to be applied.\n     * @param virtualizationMode one of {@link #VIRTUALIZATION_MODE_BINAURAL},\n     *     {@link #VIRTUALIZATION_MODE_TRANSAURAL} to force a particular processing mode, or\n     *     {@value #VIRTUALIZATION_MODE_AUTO} to stop forcing a mode.\n     * @return true if the processing mode is supported, and it is successfully set, or\n     *     forcing was successfully disabled, false otherwise.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#VIRTUALIZATION_MODE_BINAURAL", "#VIRTUALIZATION_MODE_TRANSAURAL" ]
  }, {
    "name" : "public int getVirtualizationMode() throws IllegalStateException, UnsupportedOperationException",
    "returnType" : "int",
    "comment" : "\n     * Return the virtualization mode being used, if any.\n     * @return the virtualization mode being used.\n     *     If virtualization is not active, the virtualization mode will be\n     *     {@link #VIRTUALIZATION_MODE_OFF}. Otherwise the value will be\n     *     {@link #VIRTUALIZATION_MODE_BINAURAL} or {@link #VIRTUALIZATION_MODE_TRANSAURAL}.\n     *     Virtualization may not be active either because the effect is not enabled or\n     *     because the current output device is not compatible with this virtualization\n     *     implementation.\n     * @throws IllegalStateException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#VIRTUALIZATION_MODE_OFF", "#VIRTUALIZATION_MODE_BINAURAL", "#VIRTUALIZATION_MODE_TRANSAURAL" ]
  }, {
    "name" : "public void setParameterListener(OnParameterChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers an OnParameterChangeListener interface.\n     * @param listener OnParameterChangeListener interface registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public Virtualizer.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "Virtualizer.Settings",
    "comment" : "\n     * Gets the virtualizer properties. This method is useful when a snapshot of current\n     * virtualizer settings must be saved by the application.\n     * @return a Virtualizer.Settings object containing all current parameters values\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperties(Virtualizer.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the virtualizer properties. This method is useful when virtualizer settings have to\n     * be applied from a previous backup.\n     * @param settings a Virtualizer.Settings object containing the properties to apply\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "PARAM_STRENGTH_SUPPORTED", "PARAM_STRENGTH", "PARAM_VIRTUAL_SPEAKER_ANGLES", "PARAM_FORCE_VIRTUALIZATION_MODE", "PARAM_VIRTUALIZATION_MODE", "mStrengthSupported", "mParamListener", "mBaseParamListener", "mParamListenerLock", "VIRTUALIZATION_MODE_OFF", "VIRTUALIZATION_MODE_AUTO", "VIRTUALIZATION_MODE_BINAURAL", "VIRTUALIZATION_MODE_TRANSAURAL" ],
  "methodNames" : [ "public boolean getStrengthSupported()", "public void setStrength(short strength) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getRoundedStrength() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "private boolean getAnglesInt(int inputChannelMask, int deviceType, int[] angles) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "private static int getDeviceForModeQuery(@VirtualizationMode int virtualizationMode) throws IllegalArgumentException", "private static int getDeviceForModeForce(@ForceVirtualizationMode int virtualizationMode) throws IllegalArgumentException", "private static int deviceToMode(int deviceType)", "public boolean canVirtualize(int inputChannelMask, @VirtualizationMode int virtualizationMode) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public boolean getSpeakerAngles(int inputChannelMask, @VirtualizationMode int virtualizationMode, int[] angles) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public boolean forceVirtualizationMode(@ForceVirtualizationMode int virtualizationMode) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public int getVirtualizationMode() throws IllegalStateException, UnsupportedOperationException", "public void setParameterListener(OnParameterChangeListener listener)", "public Virtualizer.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setProperties(Virtualizer.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException" ]
}