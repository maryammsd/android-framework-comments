{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/format/DateTimeTextProvider.java",
  "packageName" : "java.time.format",
  "className" : "LocaleStore",
  "comment" : "\n     * Stores the text for a single locale.\n     * <p>\n     * Some fields have a textual representation, such as day-of-week or month-of-year.\n     * These textual representations can be captured in this class for printing\n     * and parsing.\n     * <p>\n     * This class is immutable and thread-safe.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "valueTextMap",
    "type" : "Map<TextStyle, Map<Long, String>>",
    "comment" : "\n         * Map of value to text.\n         ",
    "links" : [ ]
  }, {
    "name" : "parsable",
    "type" : "Map<TextStyle, List<Entry<String, Long>>>",
    "comment" : "\n         * Parsable data.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " String getText(long value, TextStyle style)",
    "returnType" : "String",
    "comment" : "\n         * Gets the text for the specified field value, locale and style\n         * for the purpose of printing.\n         *\n         * @param value  the value to get text for, not null\n         * @param style  the style to get text for, not null\n         * @return the text for the field value, null if no text found\n         ",
    "links" : [ ]
  }, {
    "name" : " Iterator<Entry<String, Long>> getTextIterator(TextStyle style)",
    "returnType" : "Iterator<Entry<String, Long>>",
    "comment" : "\n         * Gets an iterator of text to field for the specified style for the purpose of parsing.\n         * <p>\n         * The iterator must be returned in order from the longest text to the shortest.\n         *\n         * @param style  the style to get text for, null for all parsable text\n         * @return the iterator of text to field pairs, in order from longest text to shortest text,\n         *  null if the style is not parsable\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " String getText(long value, TextStyle style)", " Iterator<Entry<String, Long>> getTextIterator(TextStyle style)" ],
  "variableNames" : [ "valueTextMap", "parsable" ]
}