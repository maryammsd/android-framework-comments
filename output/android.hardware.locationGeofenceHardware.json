{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/location/GeofenceHardware.java",
  "packageName" : "android.hardware.location",
  "className" : "GeofenceHardware",
  "comment" : "\n * This class handles geofences managed by various hardware subsystems. It contains\n * the public APIs that is needed to accomplish the task.\n *\n * <p>The APIs should not be called directly by the app developers. A higher level api\n * which abstracts the hardware should be used instead. All the checks are done by the higher\n * level public API. Any needed locking should be handled by the higher level API.\n *\n * <p> There are 3 states associated with a Geofence: Inside, Outside, Unknown.\n * There are 3 transitions: {@link #GEOFENCE_ENTERED}, {@link #GEOFENCE_EXITED},\n * {@link #GEOFENCE_UNCERTAIN}. The APIs only expose the transitions.\n *\n * <p> Inside state: The hardware subsystem is reasonably confident that the user is inside\n * the geofence. Outside state: The hardware subsystem is reasonably confident that the user\n * is outside the geofence Unknown state: Unknown state can be interpreted as a state in which the\n * monitoring subsystem isn't confident enough that the user is either inside or\n * outside the Geofence. If the accuracy does not improve for a sufficient period of time,\n * the {@link #GEOFENCE_UNCERTAIN} transition would be triggered. If the accuracy improves later,\n * an appropriate transition would be triggered. The \"reasonably confident\" parameter\n * depends on the hardware system and the positioning algorithms used.\n * For instance, {@link #MONITORING_TYPE_GPS_HARDWARE} uses 95% as a confidence level.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mService",
    "type" : "IGeofenceHardware",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_MONITORS",
    "type" : "int",
    "comment" : " Hardware systems that do geofence monitoring.",
    "links" : [ ]
  }, {
    "name" : "MONITORING_TYPE_GPS_HARDWARE",
    "type" : "int",
    "comment" : "\n     * Constant for geofence monitoring done by the GPS hardware.\n     ",
    "links" : [ ]
  }, {
    "name" : "MONITORING_TYPE_FUSED_HARDWARE",
    "type" : "int",
    "comment" : "\n     * Constant for geofence monitoring done by the Fused hardware.\n     ",
    "links" : [ ]
  }, {
    "name" : "MONITOR_CURRENTLY_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * Constant to indicate that the monitoring system is currently\n     * available for monitoring geofences.\n     ",
    "links" : [ ]
  }, {
    "name" : "MONITOR_CURRENTLY_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * Constant to indicate that the monitoring system is currently\n     * unavailable for monitoring geofences.\n     ",
    "links" : [ ]
  }, {
    "name" : "MONITOR_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n     * Constant to indicate that the monitoring system is unsupported\n     * for hardware geofence monitoring.\n     ",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_ENTERED",
    "type" : "int",
    "comment" : "\n     * The constant to indicate that the user has entered the geofence.\n     ",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_EXITED",
    "type" : "int",
    "comment" : "\n     * The constant to indicate that the user has exited the geofence.\n     ",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_UNCERTAIN",
    "type" : "int",
    "comment" : "\n     * The constant to indicate that the user is uncertain with respect to a\n     * geofence.\n     ",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_SUCCESS",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate success of the particular geofence call\n     ",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_ERROR_TOO_MANY_GEOFENCES",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that too many geofences have been registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_ERROR_ID_EXISTS",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that the geofence id already exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_ERROR_ID_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that the geofence id is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_ERROR_INVALID_TRANSITION",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that the transition requested for the geofence is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_FAILURE",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that the geofence operation has failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_ERROR_INSUFFICIENT_MEMORY",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that the operation failed due to insufficient memory.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_TECHNOLOGY_GNSS",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that the monitoring system supports GNSS.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_TECHNOLOGY_WIFI",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that the monitoring system supports WiFi.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_TECHNOLOGY_SENSORS",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that the monitoring system supports Sensors.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_TECHNOLOGY_CELL",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that the monitoring system supports Cell.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_TECHNOLOGY_BLUETOOTH",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that the monitoring system supports Bluetooth.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "HashMap<GeofenceHardwareCallback, GeofenceHardwareCallbackWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMonitorCallbacks",
    "type" : "HashMap<GeofenceHardwareMonitorCallback, GeofenceHardwareMonitorCallbackWrapper>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int[] getMonitoringTypes()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns all the hardware geofence monitoring systems which are supported\n     *\n     * <p> Call {@link #getStatusOfMonitoringType(int)} to know the current state\n     * of a monitoring system.\n     *\n     * <p> Requires {@link android.Manifest.permission#LOCATION_HARDWARE} permission to access\n     * geofencing in hardware.\n     *\n     * @return An array of all the monitoring types.\n     *         An array of length 0 is returned in case of errors.\n     ",
    "links" : [ "#getStatusOfMonitoringType", "android.Manifest.permission#LOCATION_HARDWARE" ]
  }, {
    "name" : "public int getStatusOfMonitoringType(int monitoringType)",
    "returnType" : "int",
    "comment" : "\n     * Returns current status of a hardware geofence monitoring system.\n     *\n     * <p>Status can be one of {@link #MONITOR_CURRENTLY_AVAILABLE},\n     * {@link #MONITOR_CURRENTLY_UNAVAILABLE} or {@link #MONITOR_UNSUPPORTED}\n     *\n     * <p> Some supported hardware monitoring systems might not be available\n     * for monitoring geofences in certain scenarios. For example, when a user\n     * enters a building, the GPS hardware subsystem might not be able monitor\n     * geofences and will change from {@link #MONITOR_CURRENTLY_AVAILABLE} to\n     * {@link #MONITOR_CURRENTLY_UNAVAILABLE}.\n     *\n     * @param monitoringType\n     * @return Current status of the monitoring type.\n     ",
    "links" : [ "#MONITOR_CURRENTLY_AVAILABLE", "#MONITOR_CURRENTLY_UNAVAILABLE", "#MONITOR_UNSUPPORTED", "#MONITOR_CURRENTLY_AVAILABLE", "#MONITOR_CURRENTLY_UNAVAILABLE" ]
  }, {
    "name" : "public boolean addGeofence(int geofenceId, int monitoringType, GeofenceHardwareRequest geofenceRequest, GeofenceHardwareCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Creates a circular geofence which is monitored by subsystems in the hardware.\n     *\n     * <p> When the device detects that is has entered, exited or is uncertain\n     * about the area specified by the geofence, the given callback will be called.\n     *\n     * <p> If this call returns true, it means that the geofence has been sent to the hardware.\n     * {@link GeofenceHardwareCallback#onGeofenceAdd} will be called with the result of the\n     * add call from the hardware. The {@link GeofenceHardwareCallback#onGeofenceAdd} will be\n     * called with the following parameters when a transition event occurs.\n     * <ul>\n     * <li> The geofence Id\n     * <li> The location object indicating the last known location.\n     * <li> The transition associated with the geofence. One of\n     *      {@link #GEOFENCE_ENTERED}, {@link #GEOFENCE_EXITED}, {@link #GEOFENCE_UNCERTAIN}\n     * <li> The timestamp when the geofence transition occured.\n     * <li> The monitoring type ({@link #MONITORING_TYPE_GPS_HARDWARE} is one such example)\n     *      that was used.\n     * </ul>\n     *\n     * <p> The geofence will be monitored by the subsystem specified by monitoring_type parameter.\n     * The application does not need to hold a wakelock when the monitoring\n     * is being done by the underlying hardware subsystem. If the same geofence Id is being\n     * monitored by two different monitoring systems, the same id can be used for both calls, as\n     * long as the same callback object is used.\n     *\n     * <p> Requires {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission when\n     * {@link #MONITORING_TYPE_GPS_HARDWARE} is used.\n     *\n     * <p> Requires {@link android.Manifest.permission#LOCATION_HARDWARE} permission to access\n     * geofencing in hardware.\n     *\n     * <p>This API should not be called directly by the app developers. A higher level api\n     * which abstracts the hardware should be used instead. All the checks are done by the higher\n     * level public API. Any needed locking should be handled by the higher level API.\n     *\n     * <p> Create a geofence request object using the methods in {@link GeofenceHardwareRequest} to\n     * set all the characteristics of the geofence. Use the created GeofenceHardwareRequest object\n     * in this call.\n     *\n     * @param geofenceId The id associated with the geofence.\n     * @param monitoringType The type of the hardware subsystem that should be used\n     *        to monitor the geofence.\n     * @param geofenceRequest The {@link GeofenceHardwareRequest} object associated with the\n     *        geofence.\n     * @param callback {@link GeofenceHardwareCallback} that will be use to notify the\n     *        transition.\n     * @return true when the geofence is successfully sent to the hardware for addition.\n     * @throws IllegalArgumentException when the geofence request type is not supported.\n     ",
    "links" : [ "GeofenceHardwareCallback#onGeofenceAdd", "GeofenceHardwareCallback#onGeofenceAdd", "#GEOFENCE_ENTERED", "#GEOFENCE_EXITED", "#GEOFENCE_UNCERTAIN", "#MONITORING_TYPE_GPS_HARDWARE", "android.Manifest.permission#ACCESS_FINE_LOCATION", "#MONITORING_TYPE_GPS_HARDWARE", "android.Manifest.permission#LOCATION_HARDWARE", "GeofenceHardwareRequest", "GeofenceHardwareRequest", "GeofenceHardwareCallback" ]
  }, {
    "name" : "public boolean removeGeofence(int geofenceId, int monitoringType)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a geofence added by {@link #addGeofence} call.\n     *\n     * <p> If this call returns true, it means that the geofence has been sent to the hardware.\n     * {@link GeofenceHardwareCallback#onGeofenceRemove} will be called with the result of the\n     * remove call from the hardware.\n     *\n     * <p> Requires {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission when\n     * {@link #MONITORING_TYPE_GPS_HARDWARE} is used.\n     *\n     * <p> Requires {@link android.Manifest.permission#LOCATION_HARDWARE} permission to access\n     * geofencing in hardware.\n     *\n     * <p>This API should not be called directly by the app developers. A higher level api\n     * which abstracts the hardware should be used instead. All the checks are done by the higher\n     * level public API. Any needed locking should be handled by the higher level API.\n     *\n     * @param geofenceId The id of the geofence.\n     * @param monitoringType The type of the hardware subsystem that should be used\n     *        to monitor the geofence.\n     * @return true when the geofence is successfully sent to the hardware for removal.                     .\n     ",
    "links" : [ "#addGeofence", "GeofenceHardwareCallback#onGeofenceRemove", "android.Manifest.permission#ACCESS_FINE_LOCATION", "#MONITORING_TYPE_GPS_HARDWARE", "android.Manifest.permission#LOCATION_HARDWARE" ]
  }, {
    "name" : "public boolean pauseGeofence(int geofenceId, int monitoringType)",
    "returnType" : "boolean",
    "comment" : "\n     * Pauses the monitoring of a geofence added by {@link #addGeofence} call.\n     *\n     * <p> If this call returns true, it means that the geofence has been sent to the hardware.\n     * {@link GeofenceHardwareCallback#onGeofencePause} will be called with the result of the\n     * pause call from the hardware.\n     *\n     * <p> Requires {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission when\n     * {@link #MONITORING_TYPE_GPS_HARDWARE} is used.\n     *\n     * <p> Requires {@link android.Manifest.permission#LOCATION_HARDWARE} permission to access\n     * geofencing in hardware.\n     *\n     * <p>This API should not be called directly by the app developers. A higher level api\n     * which abstracts the hardware should be used instead. All the checks are done by the higher\n     * level public API. Any needed locking should be handled by the higher level API.\n     *\n     * @param geofenceId The id of the geofence.\n     * @param monitoringType The type of the hardware subsystem that should be used\n     *        to monitor the geofence.\n     * @return true when the geofence is successfully sent to the hardware for pausing.\n     ",
    "links" : [ "#addGeofence", "GeofenceHardwareCallback#onGeofencePause", "android.Manifest.permission#ACCESS_FINE_LOCATION", "#MONITORING_TYPE_GPS_HARDWARE", "android.Manifest.permission#LOCATION_HARDWARE" ]
  }, {
    "name" : "public boolean resumeGeofence(int geofenceId, int monitoringType, int monitorTransition)",
    "returnType" : "boolean",
    "comment" : "\n     * Resumes the monitoring of a geofence added by {@link #pauseGeofence} call.\n     *\n     * <p> If this call returns true, it means that the geofence has been sent to the hardware.\n     * {@link GeofenceHardwareCallback#onGeofenceResume} will be called with the result of the\n     * resume call from the hardware.\n     *\n     * <p> Requires {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission when\n     * {@link #MONITORING_TYPE_GPS_HARDWARE} is used.\n     *\n     * <p> Requires {@link android.Manifest.permission#LOCATION_HARDWARE} permission to access\n     * geofencing in hardware.\n     *\n     * <p>This API should not be called directly by the app developers. A higher level api\n     * which abstracts the hardware should be used instead. All the checks are done by the higher\n     * level public API. Any needed locking should be handled by the higher level API.\n     *\n     * @param geofenceId The id of the geofence.\n     * @param monitoringType The type of the hardware subsystem that should be used\n     *        to monitor the geofence.\n     * @param monitorTransition Bitwise OR of {@link #GEOFENCE_ENTERED},\n     *        {@link #GEOFENCE_EXITED}, {@link #GEOFENCE_UNCERTAIN}\n     * @return true when the geofence is successfully sent to the hardware for resumption.\n     ",
    "links" : [ "#pauseGeofence", "GeofenceHardwareCallback#onGeofenceResume", "android.Manifest.permission#ACCESS_FINE_LOCATION", "#MONITORING_TYPE_GPS_HARDWARE", "android.Manifest.permission#LOCATION_HARDWARE", "#GEOFENCE_ENTERED", "#GEOFENCE_EXITED", "#GEOFENCE_UNCERTAIN" ]
  }, {
    "name" : "public boolean registerForMonitorStateChangeCallback(int monitoringType, GeofenceHardwareMonitorCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Register the callback to be notified when the state of a hardware geofence\n     * monitoring system changes. For instance, it can change from\n     * {@link #MONITOR_CURRENTLY_AVAILABLE} to {@link #MONITOR_CURRENTLY_UNAVAILABLE}\n     *\n     * <p> Requires {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission when\n     * {@link #MONITORING_TYPE_GPS_HARDWARE} is used.\n     *\n     * <p> Requires {@link android.Manifest.permission#LOCATION_HARDWARE} permission to access\n     * geofencing in hardware.\n     *\n     * <p>This API should not be called directly by the app developers. A higher level api\n     * which abstracts the hardware should be used instead. All the checks are done by the higher\n     * level public API. Any needed locking should be handled by the higher level API.\n     *\n     * <p> The same callback object can be used to be informed of geofence transitions\n     * and state changes of the underlying hardware subsystem.\n     *\n     * @param monitoringType Type of the monitor\n     * @param callback Callback that will be called.\n     * @return true on success\n     ",
    "links" : [ "#MONITOR_CURRENTLY_AVAILABLE", "#MONITOR_CURRENTLY_UNAVAILABLE", "android.Manifest.permission#ACCESS_FINE_LOCATION", "#MONITORING_TYPE_GPS_HARDWARE", "android.Manifest.permission#LOCATION_HARDWARE" ]
  }, {
    "name" : "public boolean unregisterForMonitorStateChangeCallback(int monitoringType, GeofenceHardwareMonitorCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregister the callback that was used with {@link #registerForMonitorStateChangeCallback}\n     * to notify when the state of the hardware geofence monitoring system changes.\n     *\n     * <p> Requires {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission when\n     * {@link #MONITORING_TYPE_GPS_HARDWARE} is used.\n     *\n     * <p> Requires {@link android.Manifest.permission#LOCATION_HARDWARE} permission to access\n     * geofencing in hardware.\n     *\n     * <p>This API should not be called directly by the app developers. A higher level api\n     * which abstracts the hardware should be used instead. All the checks are done by the higher\n     * level public API. Any needed locking should be handled by the higher level API.\n     *\n     * @param monitoringType Type of the monitor\n     * @param callback Callback that will be called.\n     * @return true on success\n     ",
    "links" : [ "#registerForMonitorStateChangeCallback", "android.Manifest.permission#ACCESS_FINE_LOCATION", "#MONITORING_TYPE_GPS_HARDWARE", "android.Manifest.permission#LOCATION_HARDWARE" ]
  }, {
    "name" : "private void removeCallback(GeofenceHardwareCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private GeofenceHardwareCallbackWrapper getCallbackWrapper(GeofenceHardwareCallback callback)",
    "returnType" : "GeofenceHardwareCallbackWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeMonitorCallback(GeofenceHardwareMonitorCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private GeofenceHardwareMonitorCallbackWrapper getMonitorCallbackWrapper(GeofenceHardwareMonitorCallback callback)",
    "returnType" : "GeofenceHardwareMonitorCallbackWrapper",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mService", "NUM_MONITORS", "MONITORING_TYPE_GPS_HARDWARE", "MONITORING_TYPE_FUSED_HARDWARE", "MONITOR_CURRENTLY_AVAILABLE", "MONITOR_CURRENTLY_UNAVAILABLE", "MONITOR_UNSUPPORTED", "GEOFENCE_ENTERED", "GEOFENCE_EXITED", "GEOFENCE_UNCERTAIN", "GEOFENCE_SUCCESS", "GEOFENCE_ERROR_TOO_MANY_GEOFENCES", "GEOFENCE_ERROR_ID_EXISTS", "GEOFENCE_ERROR_ID_UNKNOWN", "GEOFENCE_ERROR_INVALID_TRANSITION", "GEOFENCE_FAILURE", "GEOFENCE_ERROR_INSUFFICIENT_MEMORY", "SOURCE_TECHNOLOGY_GNSS", "SOURCE_TECHNOLOGY_WIFI", "SOURCE_TECHNOLOGY_SENSORS", "SOURCE_TECHNOLOGY_CELL", "SOURCE_TECHNOLOGY_BLUETOOTH", "mCallbacks", "mMonitorCallbacks" ],
  "methodNames" : [ "public int[] getMonitoringTypes()", "public int getStatusOfMonitoringType(int monitoringType)", "public boolean addGeofence(int geofenceId, int monitoringType, GeofenceHardwareRequest geofenceRequest, GeofenceHardwareCallback callback)", "public boolean removeGeofence(int geofenceId, int monitoringType)", "public boolean pauseGeofence(int geofenceId, int monitoringType)", "public boolean resumeGeofence(int geofenceId, int monitoringType, int monitorTransition)", "public boolean registerForMonitorStateChangeCallback(int monitoringType, GeofenceHardwareMonitorCallback callback)", "public boolean unregisterForMonitorStateChangeCallback(int monitoringType, GeofenceHardwareMonitorCallback callback)", "private void removeCallback(GeofenceHardwareCallback callback)", "private GeofenceHardwareCallbackWrapper getCallbackWrapper(GeofenceHardwareCallback callback)", "private void removeMonitorCallback(GeofenceHardwareMonitorCallback callback)", "private GeofenceHardwareMonitorCallbackWrapper getMonitorCallbackWrapper(GeofenceHardwareMonitorCallback callback)" ]
}