{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/search/SearchSession.java",
  "packageName" : "android.app.search",
  "className" : "SearchSession",
  "comment" : "\n * Client needs to create {@link SearchSession} object from in order to execute\n * {@link #query(Query, Executor, Consumer)} method and share client side signals\n * back to the service using {@link #notifyEvent(Query, SearchTargetEvent)}.\n *\n * <p>\n * Usage: <pre> {@code\n *\n * class MyActivity {\n *\n *    void onCreate() {\n *         mSearchSession.createSearchSession(searchContext)\n *    }\n *\n *    void afterTextChanged(...) {\n *        mSearchSession.query(...);\n *    }\n *\n *    void onTouch(...) OR\n *    void onStateTransitionStarted(...) OR\n *    void onResume(...) OR\n *    void onStop(...) {\n *        mSearchSession.notifyEvent(event);\n *    }\n *\n *    void onDestroy() {\n *        mSearchSession.close();\n *    }\n *\n * }</pre>\n *\n * @hide\n ",
  "links" : [ "#notifyEvent(Query", "android.app.search.SearchSession", "#query(Query" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "android.app.search.ISearchUiManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "SearchSessionId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegisteredCallbacks",
    "type" : "ArrayMap<Callback, CallbackWrapper>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void notifyEvent(@NonNull Query query, @NonNull SearchTargetEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the search service of an search target event (e.g., user interaction\n     * and lifecycle event of the search surface).\n     *\n     * {@see SearchTargetEvent}\n     *\n     * @param query input object associated with the event.\n     * @param event The {@link SearchTargetEvent} that represents the search target event.\n     ",
    "links" : [ "android.app.search.SearchTargetEvent" ]
  }, {
    "name" : "public void query(@NonNull Query input, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull Consumer<List<SearchTarget>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Calls consumer with list of {@link SearchTarget}s based on the input query.\n     *\n     * @param input query object to be used for the request.\n     * @param callbackExecutor The callback executor to use when calling the callback.\n     * @param callback The callback to return the list of search targets.\n     ",
    "links" : [ "android.app.search.SearchTarget" ]
  }, {
    "name" : "public void registerEmptyQueryResultUpdateCallback(@NonNull @CallbackExecutor Executor callbackExecutor, @NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Request the search ui service provide continuous updates of {@link SearchTarget} list\n     * via the provided callback to render for zero state, until the given callback is\n     * unregistered. Zero state means when user entered search ui but not issued any query yet.\n     *\n     * @see SearchSession.Callback#onTargetsAvailable(List).\n     *\n     * @param callbackExecutor The callback executor to use when calling the callback.\n     * @param callback The Callback to be called when updates of search targets for zero state\n     *                 are available.\n     ",
    "links" : [ "android.app.search.SearchTarget" ]
  }, {
    "name" : "public void unregisterEmptyQueryResultUpdateCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests the search ui service to stop providing continuous updates of {@link SearchTarget}\n     * to the provided callback for zero state until the callback is re-registered. Zero state\n     * means when user entered search ui but not issued any query yet.\n     *\n     * @see {@link SearchSession#registerEmptyQueryResultUpdateCallback(Executor, Callback)}\n     * @param callback The callback to be unregistered.\n     ",
    "links" : [ "android.app.search.SearchTarget", "android.app.search.SearchSession#registerEmptyQueryResultUpdateCallback(Executor" ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroys the client and unregisters the callback. Any method on this class after this call\n     * will throw {@link IllegalStateException}.\n     *\n     * @deprecated\n     * @removed\n     ",
    "links" : [ "IllegalStateException" ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Destroys the client and unregisters the callback. Any method on this class after this call\n     * will throw {@link IllegalStateException}.\n     *\n     ",
    "links" : [ "IllegalStateException" ]
  } ],
  "methodNames" : [ "public void notifyEvent(@NonNull Query query, @NonNull SearchTargetEvent event)", "public void query(@NonNull Query input, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull Consumer<List<SearchTarget>> callback)", "public void registerEmptyQueryResultUpdateCallback(@NonNull @CallbackExecutor Executor callbackExecutor, @NonNull Callback callback)", "public void unregisterEmptyQueryResultUpdateCallback(@NonNull Callback callback)", "public void destroy()", "protected void finalize()", "public void close()" ],
  "variableNames" : [ "TAG", "DEBUG", "mInterface", "mCloseGuard", "mIsClosed", "mSessionId", "mToken", "mRegisteredCallbacks" ]
}