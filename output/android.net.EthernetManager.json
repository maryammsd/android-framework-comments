{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/EthernetManager.java",
  "packageName" : "android.net",
  "className" : "EthernetManager",
  "comment" : "\n * A class representing the IP configuration of the Ethernet network.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_AVAILABILITY_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IEthernetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayList<Listener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceListener",
    "type" : "IEthernetServiceListener.Stub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IpConfiguration getConfiguration(String iface)",
    "returnType" : "IpConfiguration",
    "comment" : "\n     * Get Ethernet configuration.\n     * @return the Ethernet Configuration, contained in {@link IpConfiguration}.\n     * @hide\n     ",
    "links" : [ "android.net.IpConfiguration" ]
  }, {
    "name" : "public void setConfiguration(String iface, IpConfiguration config)",
    "returnType" : "void",
    "comment" : "\n     * Set Ethernet configuration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the system currently has one or more Ethernet interfaces.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAvailable(String iface)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the system has given interface.\n     *\n     * @param iface Ethernet interface name\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addListener(Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener.\n     * @param listener A {@link Listener} to add.\n     * @throws IllegalArgumentException If the listener is null.\n     * @hide\n     ",
    "links" : [ "Listener" ]
  }, {
    "name" : "public String[] getAvailableInterfaces()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns an array of available Ethernet interface names.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeListener(Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener.\n     * @param listener A {@link Listener} to remove.\n     * @throws IllegalArgumentException If the listener is null.\n     * @hide\n     ",
    "links" : [ "Listener" ]
  }, {
    "name" : "public void setIncludeTestInterfaces(boolean include)",
    "returnType" : "void",
    "comment" : "\n     * Whether to treat interfaces created by {@link TestNetworkManager#createTapInterface}\n     * as Ethernet interfaces. The effects of this method apply to any test interfaces that are\n     * already present on the system.\n     * @hide\n     ",
    "links" : [ "android.net.TestNetworkManager#createTapInterface" ]
  }, {
    "name" : "public TetheredInterfaceRequest requestTetheredInterface(@NonNull final Executor executor, @NonNull final TetheredInterfaceCallback callback)",
    "returnType" : "TetheredInterfaceRequest",
    "comment" : "\n     * Request a tethered interface in tethering mode.\n     *\n     * <p>When this method is called and there is at least one ethernet interface available, the\n     * system will designate one to act as a tethered interface. If there is already a tethered\n     * interface, the existing interface will be used.\n     * @param callback A callback to be called once the request has been fulfilled.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "MSG_AVAILABILITY_CHANGED", "mContext", "mService", "mHandler", "mListeners", "mServiceListener" ],
  "methodNames" : [ "public IpConfiguration getConfiguration(String iface)", "public void setConfiguration(String iface, IpConfiguration config)", "public boolean isAvailable()", "public boolean isAvailable(String iface)", "public void addListener(Listener listener)", "public String[] getAvailableInterfaces()", "public void removeListener(Listener listener)", "public void setIncludeTestInterfaces(boolean include)", "public TetheredInterfaceRequest requestTetheredInterface(@NonNull final Executor executor, @NonNull final TetheredInterfaceCallback callback)" ]
}