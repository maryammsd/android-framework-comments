{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/Surface.java",
  "packageName" : "android.view",
  "className" : "Surface",
  "comment" : "\n * Handle onto a raw buffer that is being managed by the screen compositor.\n *\n * <p>A Surface is generally created by or from a consumer of image buffers (such as a\n * {@link android.graphics.SurfaceTexture}, {@link android.media.MediaRecorder}, or\n * {@link android.renderscript.Allocation}), and is handed to some kind of producer (such as\n * {@link android.opengl.EGL14#eglCreateWindowSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.lang.Object,int[],int) OpenGL},\n * {@link android.media.MediaPlayer#setSurface MediaPlayer}, or\n * {@link android.hardware.camera2.CameraDevice#createCaptureSession CameraDevice}) to draw\n * into.</p>\n *\n * <p><strong>Note:</strong> A Surface acts like a\n * {@link java.lang.ref.WeakReference weak reference} to the consumer it is associated with. By\n * itself it will not keep its parent consumer from being reclaimed.</p>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Surface>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " Guarded state.",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeObject",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLockedObject",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGenerationId",
    "type" : "int",
    "comment" : " incremented each time mNativeObject changes",
    "links" : [ ]
  }, {
    "name" : "mCanvas",
    "type" : "Canvas",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompatibleMatrix",
    "type" : "Matrix",
    "comment" : " non compatibility mode.",
    "links" : [ ]
  }, {
    "name" : "mHwuiContext",
    "type" : "HwuiContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSingleBuffered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSharedBufferModeEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAutoRefreshEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCALING_MODE_FREEZE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SCALING_MODE_SCALE_TO_WINDOW",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SCALING_MODE_SCALE_CROP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SCALING_MODE_NO_SCALE_CROP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_0",
    "type" : "int",
    "comment" : "\n     * Rotation constant: 0 degree rotation (natural orientation)\n     ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_90",
    "type" : "int",
    "comment" : "\n     * Rotation constant: 90 degree rotation.\n     ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_180",
    "type" : "int",
    "comment" : "\n     * Rotation constant: 180 degree rotation.\n     ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_270",
    "type" : "int",
    "comment" : "\n     * Rotation constant: 270 degree rotation.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRAME_RATE_COMPATIBILITY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * There are no inherent restrictions on the frame rate of this surface. When the\n     * system selects a frame rate other than what the app requested, the app will be able\n     * to run at the system frame rate without requiring pull down. This value should be\n     * used when displaying game content, UIs, and anything that isn't video.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRAME_RATE_COMPATIBILITY_FIXED_SOURCE",
    "type" : "int",
    "comment" : "\n     * This surface is being used to display content with an inherently fixed frame rate,\n     * e.g. a video that has a specific frame rate. When the system selects a frame rate\n     * other than what the app requested, the app will need to do pull down or use some\n     * other technique to adapt to the system's frame rate. The user experience is likely\n     * to be worse (e.g. more frame stuttering) than it would be if the system had chosen\n     * the app's requested frame rate. This value should be used for video content.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeCreateFromSurfaceTexture(SurfaceTexture surfaceTexture) throws OutOfResourcesException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateFromSurfaceControl(long surfaceControlNativeObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetFromSurfaceControl(long surfaceObject, long surfaceControlNativeObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeLockCanvas(long nativeObject, Canvas canvas, Rect dirty) throws OutOfResourcesException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUnlockCanvasAndPost(long nativeObject, Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRelease(long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsValid(long nativeObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsConsumerRunningBehind(long nativeObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeReadFromParcel(long nativeObject, Parcel source)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWriteToParcel(long nativeObject, Parcel dest)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAllocateBuffers(long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetWidth(long nativeObject)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetHeight(long nativeObject)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetNextFrameNumber(long nativeObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetScalingMode(long nativeObject, int scalingMode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeForceScopedDisconnect(long nativeObject)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeAttachAndQueueBufferWithColorSpace(long nativeObject, GraphicBuffer buffer, int colorSpaceId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetSharedBufferModeEnabled(long nativeObject, boolean enabled)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetAutoRefreshEnabled(long nativeObject, boolean enabled)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetFrameRate(long nativeObject, float frameRate, int compatibility)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Release the local reference to the server-side surface.\n     * Always call release() when you're done with a Surface.\n     * This will make the surface invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Free all server-side state associated with this surface and\n     * release this object's reference.  This method can only be\n     * called from the process that created the service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void hwuiDestroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroys the HwuiContext without completely\n     * releasing the Surface.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this object holds a valid surface.\n     *\n     * @return True if it holds a physical surface, so lockCanvas() will succeed.\n     * Otherwise returns false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGenerationId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the generation number of this surface, incremented each time\n     * the native surface contained within this object changes.\n     *\n     * @return The current generation number.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getNextFrameNumber()",
    "returnType" : "long",
    "comment" : "\n     * Returns the next frame number which will be dequeued for rendering.\n     * Intended for use with SurfaceFlinger's deferred transactions API.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConsumerRunningBehind()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the consumer of this Surface is running behind the producer.\n     *\n     * @return True if the consumer is more than one buffer ahead of the producer.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Canvas lockCanvas(Rect inOutDirty) throws Surface.OutOfResourcesException, IllegalArgumentException",
    "returnType" : "Canvas",
    "comment" : "\n     * Gets a {@link Canvas} for drawing into this surface.\n     *\n     * After drawing into the provided {@link Canvas}, the caller must\n     * invoke {@link #unlockCanvasAndPost} to post the new contents to the surface.\n     *\n     * @param inOutDirty A rectangle that represents the dirty region that the caller wants\n     * to redraw.  This function may choose to expand the dirty rectangle if for example\n     * the surface has been resized or if the previous contents of the surface were\n     * not available.  The caller must redraw the entire dirty region as represented\n     * by the contents of the inOutDirty rectangle upon return from this function.\n     * The caller may also pass <code>null</code> instead, in the case where the\n     * entire surface should be redrawn.\n     * @return A canvas for drawing into the surface.\n     *\n     * @throws IllegalArgumentException If the inOutDirty rectangle is not valid.\n     * @throws OutOfResourcesException If the canvas cannot be locked.\n     ",
    "links" : [ "Canvas", "Canvas", "#unlockCanvasAndPost" ]
  }, {
    "name" : "public void unlockCanvasAndPost(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Posts the new contents of the {@link Canvas} to the surface and\n     * releases the {@link Canvas}.\n     *\n     * @param canvas The canvas previously obtained from {@link #lockCanvas}.\n     ",
    "links" : [ "Canvas", "Canvas", "#lockCanvas" ]
  }, {
    "name" : "private void unlockSwCanvasAndPost(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Canvas lockHardwareCanvas()",
    "returnType" : "Canvas",
    "comment" : "\n     * Gets a {@link Canvas} for drawing into this surface.\n     *\n     * After drawing into the provided {@link Canvas}, the caller must\n     * invoke {@link #unlockCanvasAndPost} to post the new contents to the surface.\n     *\n     * Unlike {@link #lockCanvas(Rect)} this will return a hardware-accelerated\n     * canvas. See the <a href=\"{@docRoot}guide/topics/graphics/hardware-accel.html#unsupported\">\n     * unsupported drawing operations</a> for a list of what is and isn't\n     * supported in a hardware-accelerated canvas. It is also required to\n     * fully cover the surface every time {@link #lockHardwareCanvas()} is\n     * called as the buffer is not preserved between frames. Partial updates\n     * are not supported.\n     *\n     * @return A canvas for drawing into the surface.\n     *\n     * @throws IllegalStateException If the canvas cannot be locked.\n     ",
    "links" : [ "Canvas", "Canvas", "#unlockCanvasAndPost", "#lockCanvas", "#lockHardwareCanvas" ]
  }, {
    "name" : "public Canvas lockHardwareWideColorGamutCanvas()",
    "returnType" : "Canvas",
    "comment" : "\n     * Gets a {@link Canvas} for drawing into this surface that supports wide color gamut.\n     *\n     * After drawing into the provided {@link Canvas}, the caller must\n     * invoke {@link #unlockCanvasAndPost} to post the new contents to the surface.\n     *\n     * Unlike {@link #lockCanvas(Rect)} and {@link #lockHardwareCanvas()},\n     * this will return a hardware-accelerated canvas that supports wide color gamut.\n     * See the <a href=\"{@docRoot}guide/topics/graphics/hardware-accel.html#unsupported\">\n     * unsupported drawing operations</a> for a list of what is and isn't\n     * supported in a hardware-accelerated canvas. It is also required to\n     * fully cover the surface every time {@link #lockHardwareCanvas()} is\n     * called as the buffer is not preserved between frames. Partial updates\n     * are not supported.\n     *\n     * @return A canvas for drawing into the surface.\n     *\n     * @throws IllegalStateException If the canvas cannot be locked.\n     *\n     * @hide\n     ",
    "links" : [ "Canvas", "Canvas", "#unlockCanvasAndPost", "#lockCanvas", "#lockHardwareCanvas", "#lockHardwareCanvas" ]
  }, {
    "name" : "public void unlockCanvas(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This API has been removed and is not supported.  Do not use.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCompatibilityTranslator(Translator translator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the translator used to scale canvas's width/height in compatibility\n     * mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(SurfaceControl other)",
    "returnType" : "void",
    "comment" : "\n     * Copy another surface to this one.  This surface now holds a reference\n     * to the same data as the original surface, and is -not- the owner.\n     * This is for use by the window manager when returning a window surface\n     * back from a client, converting it from the representation being managed\n     * by the window manager to the representation the client uses to draw\n     * in to it.\n     *\n     * @param other {@link SurfaceControl} to copy from.\n     * @hide\n     ",
    "links" : [ "SurfaceControl" ]
  }, {
    "name" : "public void createFrom(SurfaceControl other)",
    "returnType" : "void",
    "comment" : "\n     * Gets a reference a surface created from this one.  This surface now holds a reference\n     * to the same data as the original surface, and is -not- the owner.\n     * This is for use by the window manager when returning a window surface\n     * back from a client, converting it from the representation being managed\n     * by the window manager to the representation the client uses to draw\n     * in to it.\n     *\n     * @param other {@link SurfaceControl} to create surface from.\n     *\n     * @hide\n     ",
    "links" : [ "SurfaceControl" ]
  }, {
    "name" : "public void transferFrom(Surface other)",
    "returnType" : "void",
    "comment" : "\n     * This is intended to be used by {@link SurfaceView#updateWindow} only.\n     * @param other access is not thread safe\n     * @hide\n     * @deprecated\n     ",
    "links" : [ "SurfaceView#updateWindow" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setNativeObjectLocked(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkNotReleasedLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void allocateBuffers()",
    "returnType" : "void",
    "comment" : "\n     * Allocate buffers ahead of time to avoid allocation delays during rendering\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setScalingMode(@ScalingMode int scalingMode)",
    "returnType" : "void",
    "comment" : "\n     * Set the scaling mode to be used for this surfaces buffers\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void forceScopedDisconnect()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void attachAndQueueBufferWithColorSpace(GraphicBuffer buffer, ColorSpace colorSpace)",
    "returnType" : "void",
    "comment" : "\n     * Transfer ownership of buffer with a color space and present it on the Surface.\n     * The supported color spaces are SRGB and Display P3, other color spaces will be\n     * treated as SRGB.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attachAndQueueBuffer(GraphicBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n     * Deprecated, use attachAndQueueBufferWithColorSpace instead.\n     * Transfer ownership of buffer and present it on the Surface.\n     * The color space of the buffer is treated as SRGB.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSingleBuffered()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this Surface is backed by a single-buffered SurfaceTexture\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSharedBufferModeEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>The shared buffer mode allows both the application and the surface compositor\n     * (SurfaceFlinger) to concurrently access this surface's buffer. While the\n     * application is still required to issue a present request\n     * (see {@link #unlockCanvasAndPost(Canvas)}) to the compositor when an update is required,\n     * the compositor may trigger an update at any time. Since the surface's buffer is shared\n     * between the application and the compositor, updates triggered by the compositor may\n     * cause visible tearing.</p>\n     *\n     * <p>The shared buffer mode can be used with\n     * {@link #setAutoRefreshEnabled(boolean) auto-refresh} to avoid the overhead of\n     * issuing present requests.</p>\n     *\n     * <p>If the application uses the shared buffer mode to reduce latency, it is\n     * recommended to use software rendering (see {@link #lockCanvas(Rect)} to ensure\n     * the graphics workloads are not affected by other applications and/or the system\n     * using the GPU. When using software rendering, the application should update the\n     * smallest possible region of the surface required.</p>\n     *\n     * <p class=\"note\">The shared buffer mode might not be supported by the underlying\n     * hardware. Enabling shared buffer mode on hardware that does not support it will\n     * not yield an error but the application will not benefit from lower latency (and\n     * tearing will not be visible).</p>\n     *\n     * <p class=\"note\">Depending on how many and what kind of surfaces are visible, the\n     * surface compositor may need to copy the shared buffer before it is displayed. When\n     * this happens, the latency benefits of shared buffer mode will be reduced.</p>\n     *\n     * @param enabled True to enable the shared buffer mode on this surface, false otherwise\n     *\n     * @see #isSharedBufferModeEnabled()\n     * @see #setAutoRefreshEnabled(boolean)\n     *\n     * @hide\n     ",
    "links" : [ "#unlockCanvasAndPost", "#setAutoRefreshEnabled", "#lockCanvas" ]
  }, {
    "name" : "public boolean isSharedBufferModeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return True if shared buffer mode is enabled on this surface, false otherwise\n     *\n     * @see #setSharedBufferModeEnabled(boolean)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAutoRefreshEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * <p>When auto-refresh is enabled, the surface compositor (SurfaceFlinger)\n     * automatically updates the display on a regular refresh cycle. The application\n     * can continue to issue present requests but it is not required. Enabling\n     * auto-refresh may result in visible tearing.</p>\n     *\n     * <p>Auto-refresh has no effect if the {@link #setSharedBufferModeEnabled(boolean)\n     * shared buffer mode} is not enabled.</p>\n     *\n     * <p>Because auto-refresh will trigger continuous updates of the display, it is\n     * recommended to turn it on only when necessary. For example, in a drawing/painting\n     * application auto-refresh should be enabled on finger/pen down and disabled on\n     * finger/pen up.</p>\n     *\n     * @param enabled True to enable auto-refresh on this surface, false otherwise\n     *\n     * @see #isAutoRefreshEnabled()\n     * @see #setSharedBufferModeEnabled(boolean)\n     *\n     * @hide\n     ",
    "links" : [ "#setSharedBufferModeEnabled" ]
  }, {
    "name" : "public boolean isAutoRefreshEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return True if auto-refresh is enabled on this surface, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFrameRate(@FloatRange(from = 0.0) float frameRate, @FrameRateCompatibility int compatibility)",
    "returnType" : "void",
    "comment" : "\n     * Sets the intended frame rate for this surface.\n     *\n     * <p>On devices that are capable of running the display at different refresh rates,\n     * the system may choose a display refresh rate to better match this surface's frame\n     * rate. Usage of this API won't introduce frame rate throttling, or affect other\n     * aspects of the application's frame production pipeline. However, because the system\n     * may change the display refresh rate, calls to this function may result in changes\n     * to Choreographer callback timings, and changes to the time interval at which the\n     * system releases buffers back to the application.</p>\n     *\n     * <p>Note that this only has an effect for surfaces presented on the display. If this\n     * surface is consumed by something other than the system compositor, e.g. a media\n     * codec, this call has no effect.</p>\n     *\n     * @param frameRate The intended frame rate of this surface, in frames per second. 0\n     * is a special value that indicates the app will accept the system's choice for the\n     * display frame rate, which is the default behavior if this function isn't\n     * called. The frameRate param does <em>not</em> need to be a valid refresh rate for\n     * this device's display - e.g., it's fine to pass 30fps to a device that can only run\n     * the display at 60fps.\n     *\n     * @param compatibility The frame rate compatibility of this surface. The\n     * compatibility value may influence the system's choice of display frame rate. See\n     * the FRAME_RATE_COMPATIBILITY_* values for more info.\n     *\n     * @throws IllegalArgumentException If frameRate or compatibility are invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String rotationToString(int rotation)",
    "returnType" : "String",
    "comment" : "\n     * Returns a human readable representation of a rotation.\n     *\n     * @param rotation The rotation.\n     * @return The rotation symbolic name.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "CREATOR", "mCloseGuard", "mLock", "mName", "mNativeObject", "mLockedObject", "mGenerationId", "mCanvas", "mCompatibleMatrix", "mHwuiContext", "mIsSingleBuffered", "mIsSharedBufferModeEnabled", "mIsAutoRefreshEnabled", "SCALING_MODE_FREEZE", "SCALING_MODE_SCALE_TO_WINDOW", "SCALING_MODE_SCALE_CROP", "SCALING_MODE_NO_SCALE_CROP", "ROTATION_0", "ROTATION_90", "ROTATION_180", "ROTATION_270", "FRAME_RATE_COMPATIBILITY_DEFAULT", "FRAME_RATE_COMPATIBILITY_FIXED_SOURCE" ],
  "methodNames" : [ "private static native long nativeCreateFromSurfaceTexture(SurfaceTexture surfaceTexture) throws OutOfResourcesException", "private static native long nativeCreateFromSurfaceControl(long surfaceControlNativeObject)", "private static native long nativeGetFromSurfaceControl(long surfaceObject, long surfaceControlNativeObject)", "private static native long nativeLockCanvas(long nativeObject, Canvas canvas, Rect dirty) throws OutOfResourcesException", "private static native void nativeUnlockCanvasAndPost(long nativeObject, Canvas canvas)", "private static native void nativeRelease(long nativeObject)", "private static native boolean nativeIsValid(long nativeObject)", "private static native boolean nativeIsConsumerRunningBehind(long nativeObject)", "private static native long nativeReadFromParcel(long nativeObject, Parcel source)", "private static native void nativeWriteToParcel(long nativeObject, Parcel dest)", "private static native void nativeAllocateBuffers(long nativeObject)", "private static native int nativeGetWidth(long nativeObject)", "private static native int nativeGetHeight(long nativeObject)", "private static native long nativeGetNextFrameNumber(long nativeObject)", "private static native int nativeSetScalingMode(long nativeObject, int scalingMode)", "private static native int nativeForceScopedDisconnect(long nativeObject)", "private static native int nativeAttachAndQueueBufferWithColorSpace(long nativeObject, GraphicBuffer buffer, int colorSpaceId)", "private static native int nativeSetSharedBufferModeEnabled(long nativeObject, boolean enabled)", "private static native int nativeSetAutoRefreshEnabled(long nativeObject, boolean enabled)", "private static native int nativeSetFrameRate(long nativeObject, float frameRate, int compatibility)", "protected void finalize() throws Throwable", "public void release()", "public void destroy()", "public void hwuiDestroy()", "public boolean isValid()", "public int getGenerationId()", "public long getNextFrameNumber()", "public boolean isConsumerRunningBehind()", "public Canvas lockCanvas(Rect inOutDirty) throws Surface.OutOfResourcesException, IllegalArgumentException", "public void unlockCanvasAndPost(Canvas canvas)", "private void unlockSwCanvasAndPost(Canvas canvas)", "public Canvas lockHardwareCanvas()", "public Canvas lockHardwareWideColorGamutCanvas()", "public void unlockCanvas(Canvas canvas)", " void setCompatibilityTranslator(Translator translator)", "public void copyFrom(SurfaceControl other)", "public void createFrom(SurfaceControl other)", "public void transferFrom(Surface other)", "public int describeContents()", "public void readFromParcel(Parcel source)", "public void writeToParcel(Parcel dest, int flags)", "public String toString()", "private void setNativeObjectLocked(long ptr)", "private void checkNotReleasedLocked()", "public void allocateBuffers()", " void setScalingMode(@ScalingMode int scalingMode)", " void forceScopedDisconnect()", "public void attachAndQueueBufferWithColorSpace(GraphicBuffer buffer, ColorSpace colorSpace)", "public void attachAndQueueBuffer(GraphicBuffer buffer)", "public boolean isSingleBuffered()", "public void setSharedBufferModeEnabled(boolean enabled)", "public boolean isSharedBufferModeEnabled()", "public void setAutoRefreshEnabled(boolean enabled)", "public boolean isAutoRefreshEnabled()", "public void setFrameRate(@FloatRange(from = 0.0) float frameRate, @FrameRateCompatibility int compatibility)", "public static String rotationToString(int rotation)" ]
}