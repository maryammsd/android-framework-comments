{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/Constructor.java",
  "packageName" : "java.lang.reflect",
  "className" : "Constructor",
  "comment" : "\n * {@code Constructor} provides information about, and access to, a single\n * constructor for a class.\n *\n * <p>{@code Constructor} permits widening conversions to occur when matching the\n * actual parameters to newInstance() with the underlying\n * constructor's formal parameters, but throws an\n * {@code IllegalArgumentException} if a narrowing conversion would occur.\n *\n * @param <T> the class in which the constructor is declared\n *\n * @see Member\n * @see java.lang.Class\n * @see java.lang.Class#getConstructors()\n * @see java.lang.Class#getConstructor(Class[])\n * @see java.lang.Class#getDeclaredConstructors()\n *\n * @author      Kenneth Russell\n * @author      Nakul Saraiya\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ORDER_BY_SIGNATURE",
    "type" : "Comparator<Method>",
    "comment" : " Unused; must match Method.",
    "links" : [ ]
  }, {
    "name" : "serializationClass",
    "type" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serializationCtor",
    "type" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Constructor<T> serializationCopy(Class<?> ctor, Class<?> cl)",
    "returnType" : "Constructor<T>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean hasGenericInformation()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Class<T> getDeclaringClass()",
    "returnType" : "Class<T>",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this constructor, as a string.  This is\n     * the binary name of the constructor's declaring class.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getModifiers()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TypeVariable<Constructor<T>>[] getTypeParameters()",
    "returnType" : "TypeVariable<Constructor<T>>[]",
    "comment" : "\n     * {@inheritDoc}\n     * @throws GenericSignatureFormatError {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<?>[] getParameterTypes()",
    "returnType" : "Class<?>[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParameterCount()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public Type[] getGenericParameterTypes()",
    "returnType" : "Type[]",
    "comment" : "\n     * {@inheritDoc}\n     * @throws GenericSignatureFormatError {@inheritDoc}\n     * @throws TypeNotPresentException {@inheritDoc}\n     * @throws MalformedParameterizedTypeException {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public native Class<?>[] getExceptionTypes()",
    "returnType" : "Class<?>[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Type[] getGenericExceptionTypes()",
    "returnType" : "Type[]",
    "comment" : "\n     * {@inheritDoc}\n     * @throws GenericSignatureFormatError {@inheritDoc}\n     * @throws TypeNotPresentException {@inheritDoc}\n     * @throws MalformedParameterizedTypeException {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code Constructor} against the specified object.\n     * Returns true if the objects are the same.  Two {@code Constructor} objects are\n     * the same if they were declared by the same class and have the\n     * same formal parameter types.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this {@code Constructor}. The hashcode is\n     * the same as the hashcode for the underlying constructor's\n     * declaring class name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string describing this {@code Constructor}.  The string is\n     * formatted as the constructor access modifiers, if any,\n     * followed by the fully-qualified name of the declaring class,\n     * followed by a parenthesized, comma-separated list of the\n     * constructor's formal parameter types.  For example:\n     * <pre>\n     *    public java.util.Hashtable(int,float)\n     * </pre>\n     *\n     * <p>The only possible modifiers for constructors are the access\n     * modifiers {@code public}, {@code protected} or\n     * {@code private}.  Only one of these may appear, or none if the\n     * constructor has default (package) access.\n     *\n     * @return a string describing this {@code Constructor}\n     * @jls 8.8.3. Constructor Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : " void specificToStringHeader(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toGenericString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string describing this {@code Constructor},\n     * including type parameters.  The string is formatted as the\n     * constructor access modifiers, if any, followed by an\n     * angle-bracketed comma separated list of the constructor's type\n     * parameters, if any, followed by the fully-qualified name of the\n     * declaring class, followed by a parenthesized, comma-separated\n     * list of the constructor's generic formal parameter types.\n     *\n     * If this constructor was declared to take a variable number of\n     * arguments, instead of denoting the last parameter as\n     * \"<tt><i>Type</i>[]</tt>\", it is denoted as\n     * \"<tt><i>Type</i>...</tt>\".\n     *\n     * A space is used to separate access modifiers from one another\n     * and from the type parameters or return type.  If there are no\n     * type parameters, the type parameter list is elided; if the type\n     * parameter list is present, a space separates the list from the\n     * class name.  If the constructor is declared to throw\n     * exceptions, the parameter list is followed by a space, followed\n     * by the word \"{@code throws}\" followed by a\n     * comma-separated list of the thrown exception types.\n     *\n     * <p>The only possible modifiers for constructors are the access\n     * modifiers {@code public}, {@code protected} or\n     * {@code private}.  Only one of these may appear, or none if the\n     * constructor has default (package) access.\n     *\n     * @return a string describing this {@code Constructor},\n     * include type parameters\n     *\n     * @since 1.5\n     * @jls 8.8.3. Constructor Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : " void specificToGenericStringHeader(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T newInstance(Object... initargs) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException",
    "returnType" : "T",
    "comment" : " BEGIN Android-changed: newInstance(Object...) implemented differently.",
    "links" : [ ]
  }, {
    "name" : "private static native Object newInstanceFromSerialization(Class<?> ctorClass, Class<?> allocClass) throws InstantiationException, IllegalArgumentException, InvocationTargetException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native T newInstance0(Object... args) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isVarArgs()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSynthetic()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @jls 13.1 The Form of a Binary\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getAnnotation(Class<T> annotationClass)",
    "returnType" : "T",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException  {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[] getDeclaredAnnotations()",
    "returnType" : "Annotation[]",
    "comment" : "\n     * {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[][] getParameterAnnotations()",
    "returnType" : "Annotation[][]",
    "comment" : "\n     * {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Constructor<T> serializationCopy(Class<?> ctor, Class<?> cl)", " boolean hasGenericInformation()", "public Class<T> getDeclaringClass()", "public String getName()", "public int getModifiers()", "public TypeVariable<Constructor<T>>[] getTypeParameters()", "public Class<?>[] getParameterTypes()", "public int getParameterCount()", "public Type[] getGenericParameterTypes()", "public native Class<?>[] getExceptionTypes()", "public Type[] getGenericExceptionTypes()", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()", " void specificToStringHeader(StringBuilder sb)", "public String toGenericString()", " void specificToGenericStringHeader(StringBuilder sb)", "public T newInstance(Object... initargs) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException", "private static native Object newInstanceFromSerialization(Class<?> ctorClass, Class<?> allocClass) throws InstantiationException, IllegalArgumentException, InvocationTargetException", "private native T newInstance0(Object... args) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException", "public boolean isVarArgs()", "public boolean isSynthetic()", "public T getAnnotation(Class<T> annotationClass)", "public Annotation[] getDeclaredAnnotations()", "public Annotation[][] getParameterAnnotations()" ],
  "variableNames" : [ "ORDER_BY_SIGNATURE", "serializationClass", "serializationCtor" ]
}