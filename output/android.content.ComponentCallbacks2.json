{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/ComponentCallbacks2.java",
  "packageName" : "android.content",
  "className" : "ComponentCallbacks2",
  "comment" : "\n * Extended {@link ComponentCallbacks} interface with a new callback for\n * finer-grained memory management. This interface is available in all application components\n * ({@link android.app.Activity}, {@link android.app.Service},\n * {@link ContentProvider}, and {@link android.app.Application}).\n *\n * <p>You should implement {@link #onTrimMemory} to incrementally release memory based on current\n * system constraints. Using this callback to release your resources helps provide a more\n * responsive system overall, but also directly benefits the user experience for\n * your app by allowing the system to keep your process alive longer. That is,\n * if you <em>don't</em> trim your resources based on memory levels defined by this callback,\n * the system is more likely to kill your process while it is cached in the least-recently used\n * (LRU) list, thus requiring your app to restart and restore all state when the user returns to it.\n *\n * <p>The values provided by {@link #onTrimMemory} do not represent a single linear progression of\n * memory limits, but provide you different types of clues about memory availability:</p>\n * <ul>\n * <li>When your app is running:\n *  <ol>\n *  <li>{@link #TRIM_MEMORY_RUNNING_MODERATE} <br>The device is beginning to run low on memory.\n * Your app is running and not killable.\n *  <li>{@link #TRIM_MEMORY_RUNNING_LOW} <br>The device is running much lower on memory.\n * Your app is running and not killable, but please release unused resources to improve system\n * performance (which directly impacts your app's performance).\n *  <li>{@link #TRIM_MEMORY_RUNNING_CRITICAL} <br>The device is running extremely low on memory.\n * Your app is not yet considered a killable process, but the system will begin killing\n * background processes if apps do not release resources, so you should release non-critical\n * resources now to prevent performance degradation.\n *  </ol>\n * </li>\n * <li>When your app's visibility changes:\n *  <ol>\n *  <li>{@link #TRIM_MEMORY_UI_HIDDEN} <br>Your app's UI is no longer visible, so this is a good\n * time to release large resources that are used only by your UI.\n *  </ol>\n * </li>\n * <li>When your app's process resides in the background LRU list:\n *  <ol>\n *  <li>{@link #TRIM_MEMORY_BACKGROUND} <br>The system is running low on memory and your process is\n * near the beginning of the LRU list. Although your app process is not at a high risk of being\n * killed, the system may already be killing processes in the LRU list, so you should release\n * resources that are easy to recover so your process will remain in the list and resume\n * quickly when the user returns to your app.\n *  <li>{@link #TRIM_MEMORY_MODERATE} <br>The system is running low on memory and your process is\n * near the middle of the LRU list. If the system becomes further constrained for memory, there's a\n * chance your process will be killed.\n *  <li>{@link #TRIM_MEMORY_COMPLETE} <br>The system is running low on memory and your process is\n * one of the first to be killed if the system does not recover memory now. You should release\n * absolutely everything that's not critical to resuming your app state.\n *   <p>To support API levels lower than 14, you can use the {@link #onLowMemory} method as a\n * fallback that's roughly equivalent to the {@link ComponentCallbacks2#TRIM_MEMORY_COMPLETE} level.\n *  </li>\n *  </ol>\n * <p class=\"note\"><strong>Note:</strong> When the system begins\n * killing processes in the LRU list, although it primarily works bottom-up, it does give some\n * consideration to which processes are consuming more memory and will thus provide more gains in\n * memory if killed. So the less memory you consume while in the LRU list overall, the better\n * your chances are to remain in the list and be able to quickly resume.</p>\n * </li>\n * </ul>\n * <p>More information about the different stages of a process lifecycle (such as what it means\n * to be placed in the background LRU list) is provided in the <a\n * href=\"{@docRoot}guide/components/processes-and-threads.html#Lifecycle\">Processes and Threads</a>\n * document.\n ",
  "links" : [ "android.app.Service", "android.content.ComponentCallbacks2#TRIM_MEMORY_COMPLETE", "android.content.ComponentCallbacks", "android.content.ContentProvider", "#onLowMemory", "#TRIM_MEMORY_UI_HIDDEN", "android.app.Application", "#TRIM_MEMORY_BACKGROUND", "#onTrimMemory", "#TRIM_MEMORY_COMPLETE", "#TRIM_MEMORY_RUNNING_CRITICAL", "#TRIM_MEMORY_RUNNING_LOW", "#TRIM_MEMORY_MODERATE", "#TRIM_MEMORY_RUNNING_MODERATE", "android.app.Activity" ],
  "variables" : [ {
    "name" : "TRIM_MEMORY_COMPLETE",
    "type" : "int",
    "comment" : "\n     * Level for {@link #onTrimMemory(int)}: the process is nearing the end\n     * of the background LRU list, and if more memory isn't found soon it will\n     * be killed.\n     *\n     * @deprecated Apps are not notified of this level since API level 34\n     ",
    "links" : [ "#onTrimMemory(int)" ]
  }, {
    "name" : "TRIM_MEMORY_MODERATE",
    "type" : "int",
    "comment" : "\n     * Level for {@link #onTrimMemory(int)}: the process is around the middle\n     * of the background LRU list; freeing memory can help the system keep\n     * other processes running later in the list for better overall performance.\n     *\n     * @deprecated Apps are not notified of this level since API level 34\n     ",
    "links" : [ "#onTrimMemory(int)" ]
  }, {
    "name" : "TRIM_MEMORY_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Level for {@link #onTrimMemory(int)}: the process has gone on to the\n     * LRU list.  This is a good opportunity to clean up resources that can\n     * efficiently and quickly be re-built if the user returns to the app.\n     ",
    "links" : [ "#onTrimMemory(int)" ]
  }, {
    "name" : "TRIM_MEMORY_UI_HIDDEN",
    "type" : "int",
    "comment" : "\n     * Level for {@link #onTrimMemory(int)}: the process had been showing\n     * a user interface, and is no longer doing so.  Large allocations with\n     * the UI should be released at this point to allow memory to be better\n     * managed.\n     ",
    "links" : [ "#onTrimMemory(int)" ]
  }, {
    "name" : "TRIM_MEMORY_RUNNING_CRITICAL",
    "type" : "int",
    "comment" : "\n     * Level for {@link #onTrimMemory(int)}: the process is not an expendable\n     * background process, but the device is running extremely low on memory\n     * and is about to not be able to keep any background processes running.\n     * Your running process should free up as many non-critical resources as it\n     * can to allow that memory to be used elsewhere.  The next thing that\n     * will happen after this is {@link #onLowMemory()} called to report that\n     * nothing at all can be kept in the background, a situation that can start\n     * to notably impact the user.\n     *\n     * @deprecated Apps are not notified of this level since API level 34\n     ",
    "links" : [ "#onLowMemory()", "#onTrimMemory(int)" ]
  }, {
    "name" : "TRIM_MEMORY_RUNNING_LOW",
    "type" : "int",
    "comment" : "\n     * Level for {@link #onTrimMemory(int)}: the process is not an expendable\n     * background process, but the device is running low on memory.\n     * Your running process should free up unneeded resources to allow that\n     * memory to be used elsewhere.\n     *\n     * @deprecated Apps are not notified of this level since API level 34\n     ",
    "links" : [ "#onTrimMemory(int)" ]
  }, {
    "name" : "TRIM_MEMORY_RUNNING_MODERATE",
    "type" : "int",
    "comment" : "\n     * Level for {@link #onTrimMemory(int)}: the process is not an expendable\n     * background process, but the device is running moderately low on memory.\n     * Your running process may want to release some unneeded resources for\n     * use elsewhere.\n     *\n     * @deprecated Apps are not notified of this level since API level 34\n     ",
    "links" : [ "#onTrimMemory(int)" ]
  } ],
  "methods" : [ {
    "name" : " void onTrimMemory(@TrimMemoryLevel int level)",
    "returnType" : "void",
    "comment" : "\n     * Called when the operating system has determined that it is a good\n     * time for a process to trim unneeded memory from its process.\n     *\n     * You should never compare to exact values of the level, since new\n     * intermediate values may be added -- you will typically want to compare if\n     * the value is greater or equal to a level you are interested in.\n     *\n     * <p>To retrieve the processes current trim level at any point, you can\n     * use {@link android.app.ActivityManager#getMyMemoryState\n     * ActivityManager.getMyMemoryState(RunningAppProcessInfo)}.\n     *\n     * @param level The context of the trim, giving a hint of the amount of\n     * trimming the application may like to perform.\n     ",
    "links" : [ "android.app.ActivityManager#getMyMemoryStateActivityManager.getMyMemoryState(RunningAppProcessInfo)" ]
  } ],
  "methodNames" : [ " void onTrimMemory(@TrimMemoryLevel int level)" ],
  "variableNames" : [ "TRIM_MEMORY_COMPLETE", "TRIM_MEMORY_MODERATE", "TRIM_MEMORY_BACKGROUND", "TRIM_MEMORY_UI_HIDDEN", "TRIM_MEMORY_RUNNING_CRITICAL", "TRIM_MEMORY_RUNNING_LOW", "TRIM_MEMORY_RUNNING_MODERATE" ]
}