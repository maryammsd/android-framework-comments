{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/IpSecManager.java",
  "packageName" : "android.net",
  "className" : "IpSecManager",
  "comment" : "\n * This class contains methods for managing IPsec sessions. Once configured, the kernel will apply\n * confidentiality (encryption) and integrity (authentication) to IP traffic.\n *\n * <p>Note that not all aspects of IPsec are permitted by this API. Applications may create\n * transport mode security associations and apply them to individual sockets. Applications looking\n * to create an IPsec VPN should use {@link VpnManager} and {@link Ikev2VpnProfile}.\n *\n * @see <a href=\"https://tools.ietf.org/html/rfc4301\">RFC 4301, Security Architecture for the\n *     Internet Protocol</a>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_IN",
    "type" : "int",
    "comment" : "\n     * Used when applying a transform to direct traffic through an {@link IpSecTransform}\n     * towards the host.\n     *\n     * <p>See {@link #applyTransportModeTransform(Socket, int, IpSecTransform)}.\n     ",
    "links" : [ "#applyTransportModeTransform(Socket", "android.net.IpSecTransform" ]
  }, {
    "name" : "DIRECTION_OUT",
    "type" : "int",
    "comment" : "\n     * Used when applying a transform to direct traffic through an {@link IpSecTransform}\n     * away from the host.\n     *\n     * <p>See {@link #applyTransportModeTransform(Socket, int, IpSecTransform)}.\n     ",
    "links" : [ "#applyTransportModeTransform(Socket", "android.net.IpSecTransform" ]
  }, {
    "name" : "INVALID_SECURITY_PARAMETER_INDEX",
    "type" : "int",
    "comment" : "\n     * The Security Parameter Index (SPI) 0 indicates an unknown or invalid index.\n     *\n     * <p>No IPsec packet may contain an SPI of 0.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_RESOURCE_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IIpSecService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SecurityParameterIndex allocateSecurityParameterIndex(@NonNull InetAddress destinationAddress) throws ResourceUnavailableException",
    "returnType" : "SecurityParameterIndex",
    "comment" : "\n     * Reserve a random SPI for traffic bound to or from the specified destination address.\n     *\n     * <p>If successful, this SPI is guaranteed available until released by a call to {@link\n     * SecurityParameterIndex#close()}.\n     *\n     * @param destinationAddress the destination address for traffic bearing the requested SPI.\n     *     For inbound traffic, the destination should be an address currently assigned on-device.\n     * @return the reserved SecurityParameterIndex\n     * @throws {@link #ResourceUnavailableException} indicating that too many SPIs are\n     *     currently allocated for this user\n     ",
    "links" : [ "#ResourceUnavailableException", "#close()" ]
  }, {
    "name" : "public SecurityParameterIndex allocateSecurityParameterIndex(@NonNull InetAddress destinationAddress, int requestedSpi) throws SpiUnavailableException, ResourceUnavailableException",
    "returnType" : "SecurityParameterIndex",
    "comment" : "\n     * Reserve the requested SPI for traffic bound to or from the specified destination address.\n     *\n     * <p>If successful, this SPI is guaranteed available until released by a call to {@link\n     * SecurityParameterIndex#close()}.\n     *\n     * @param destinationAddress the destination address for traffic bearing the requested SPI.\n     *     For inbound traffic, the destination should be an address currently assigned on-device.\n     * @param requestedSpi the requested SPI. The range 1-255 is reserved and may not be used. See\n     *     RFC 4303 Section 2.1.\n     * @return the reserved SecurityParameterIndex\n     * @throws {@link #ResourceUnavailableException} indicating that too many SPIs are\n     *     currently allocated for this user\n     * @throws {@link #SpiUnavailableException} indicating that the requested SPI could not be\n     *     reserved\n     ",
    "links" : [ "#ResourceUnavailableException", "#close()", "#SpiUnavailableException" ]
  }, {
    "name" : "public void applyTransportModeTransform(@NonNull Socket socket, @PolicyDirection int direction, @NonNull IpSecTransform transform) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Apply an IPsec transform to a stream socket.\n     *\n     * <p>This applies transport mode encapsulation to the given socket. Once applied, I/O on the\n     * socket will be encapsulated according to the parameters of the {@code IpSecTransform}. When\n     * the transform is removed from the socket by calling {@link #removeTransportModeTransforms},\n     * unprotected traffic can resume on that socket.\n     *\n     * <p>For security reasons, the destination address of any traffic on the socket must match the\n     * remote {@code InetAddress} of the {@code IpSecTransform}. Attempts to send traffic to any\n     * other IP address will result in an IOException. In addition, reads and writes on the socket\n     * will throw IOException if the user deactivates the transform (by calling {@link\n     * IpSecTransform#close()}) without calling {@link #removeTransportModeTransforms}.\n     *\n     * <p>Note that when applied to TCP sockets, calling {@link IpSecTransform#close()} on an\n     * applied transform before completion of graceful shutdown may result in the shutdown sequence\n     * failing to complete. As such, applications requiring graceful shutdown MUST close the socket\n     * prior to deactivating the applied transform. Socket closure may be performed asynchronously\n     * (in batches), so the returning of a close function does not guarantee shutdown of a socket.\n     * Setting an SO_LINGER timeout results in socket closure being performed synchronously, and is\n     * sufficient to ensure shutdown.\n     *\n     * Specifically, if the transform is deactivated (by calling {@link IpSecTransform#close()}),\n     * prior to the socket being closed, the standard [FIN - FIN/ACK - ACK], or the reset [RST]\n     * packets are dropped due to the lack of a valid Transform. Similarly, if a socket without the\n     * SO_LINGER option set is closed, the delayed/batched FIN packets may be dropped.\n     *\n     * <h4>Rekey Procedure</h4>\n     *\n     * <p>When applying a new tranform to a socket in the outbound direction, the previous transform\n     * will be removed and the new transform will take effect immediately, sending all traffic on\n     * the new transform; however, when applying a transform in the inbound direction, traffic\n     * on the old transform will continue to be decrypted and delivered until that transform is\n     * deallocated by calling {@link IpSecTransform#close()}. This overlap allows lossless rekey\n     * procedures where both transforms are valid until both endpoints are using the new transform\n     * and all in-flight packets have been received.\n     *\n     * @param socket a stream socket\n     * @param direction the direction in which the transform should be applied\n     * @param transform a transport mode {@code IpSecTransform}\n     * @throws IOException indicating that the transform could not be applied\n     ",
    "links" : [ "#removeTransportModeTransforms", "android.net.IpSecTransform#close()" ]
  }, {
    "name" : "public void applyTransportModeTransform(@NonNull DatagramSocket socket, @PolicyDirection int direction, @NonNull IpSecTransform transform) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Apply an IPsec transform to a datagram socket.\n     *\n     * <p>This applies transport mode encapsulation to the given socket. Once applied, I/O on the\n     * socket will be encapsulated according to the parameters of the {@code IpSecTransform}. When\n     * the transform is removed from the socket by calling {@link #removeTransportModeTransforms},\n     * unprotected traffic can resume on that socket.\n     *\n     * <p>For security reasons, the destination address of any traffic on the socket must match the\n     * remote {@code InetAddress} of the {@code IpSecTransform}. Attempts to send traffic to any\n     * other IP address will result in an IOException. In addition, reads and writes on the socket\n     * will throw IOException if the user deactivates the transform (by calling {@link\n     * IpSecTransform#close()}) without calling {@link #removeTransportModeTransforms}.\n     *\n     * <h4>Rekey Procedure</h4>\n     *\n     * <p>When applying a new tranform to a socket in the outbound direction, the previous transform\n     * will be removed and the new transform will take effect immediately, sending all traffic on\n     * the new transform; however, when applying a transform in the inbound direction, traffic\n     * on the old transform will continue to be decrypted and delivered until that transform is\n     * deallocated by calling {@link IpSecTransform#close()}. This overlap allows lossless rekey\n     * procedures where both transforms are valid until both endpoints are using the new transform\n     * and all in-flight packets have been received.\n     *\n     * @param socket a datagram socket\n     * @param direction the direction in which the transform should be applied\n     * @param transform a transport mode {@code IpSecTransform}\n     * @throws IOException indicating that the transform could not be applied\n     ",
    "links" : [ "#removeTransportModeTransforms", "android.net.IpSecTransform#close()" ]
  }, {
    "name" : "public void applyTransportModeTransform(@NonNull FileDescriptor socket, @PolicyDirection int direction, @NonNull IpSecTransform transform) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Apply an IPsec transform to a socket.\n     *\n     * <p>This applies transport mode encapsulation to the given socket. Once applied, I/O on the\n     * socket will be encapsulated according to the parameters of the {@code IpSecTransform}. When\n     * the transform is removed from the socket by calling {@link #removeTransportModeTransforms},\n     * unprotected traffic can resume on that socket.\n     *\n     * <p>For security reasons, the destination address of any traffic on the socket must match the\n     * remote {@code InetAddress} of the {@code IpSecTransform}. Attempts to send traffic to any\n     * other IP address will result in an IOException. In addition, reads and writes on the socket\n     * will throw IOException if the user deactivates the transform (by calling {@link\n     * IpSecTransform#close()}) without calling {@link #removeTransportModeTransforms}.\n     *\n     * <p>Note that when applied to TCP sockets, calling {@link IpSecTransform#close()} on an\n     * applied transform before completion of graceful shutdown may result in the shutdown sequence\n     * failing to complete. As such, applications requiring graceful shutdown MUST close the socket\n     * prior to deactivating the applied transform. Socket closure may be performed asynchronously\n     * (in batches), so the returning of a close function does not guarantee shutdown of a socket.\n     * Setting an SO_LINGER timeout results in socket closure being performed synchronously, and is\n     * sufficient to ensure shutdown.\n     *\n     * Specifically, if the transform is deactivated (by calling {@link IpSecTransform#close()}),\n     * prior to the socket being closed, the standard [FIN - FIN/ACK - ACK], or the reset [RST]\n     * packets are dropped due to the lack of a valid Transform. Similarly, if a socket without the\n     * SO_LINGER option set is closed, the delayed/batched FIN packets may be dropped.\n     *\n     * <h4>Rekey Procedure</h4>\n     *\n     * <p>When applying a new tranform to a socket in the outbound direction, the previous transform\n     * will be removed and the new transform will take effect immediately, sending all traffic on\n     * the new transform; however, when applying a transform in the inbound direction, traffic\n     * on the old transform will continue to be decrypted and delivered until that transform is\n     * deallocated by calling {@link IpSecTransform#close()}. This overlap allows lossless rekey\n     * procedures where both transforms are valid until both endpoints are using the new transform\n     * and all in-flight packets have been received.\n     *\n     * @param socket a socket file descriptor\n     * @param direction the direction in which the transform should be applied\n     * @param transform a transport mode {@code IpSecTransform}\n     * @throws IOException indicating that the transform could not be applied\n     ",
    "links" : [ "#removeTransportModeTransforms", "android.net.IpSecTransform#close()" ]
  }, {
    "name" : "public void removeTransportModeTransforms(@NonNull Socket socket) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Remove an IPsec transform from a stream socket.\n     *\n     * <p>Once removed, traffic on the socket will not be encrypted. Removing transforms from a\n     * socket allows the socket to be reused for communication in the clear.\n     *\n     * <p>If an {@code IpSecTransform} object applied to this socket was deallocated by calling\n     * {@link IpSecTransform#close()}, then communication on the socket will fail until this method\n     * is called.\n     *\n     * @param socket a socket that previously had a transform applied to it\n     * @throws IOException indicating that the transform could not be removed from the socket\n     ",
    "links" : [ "android.net.IpSecTransform#close()" ]
  }, {
    "name" : "public void removeTransportModeTransforms(@NonNull DatagramSocket socket) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Remove an IPsec transform from a datagram socket.\n     *\n     * <p>Once removed, traffic on the socket will not be encrypted. Removing transforms from a\n     * socket allows the socket to be reused for communication in the clear.\n     *\n     * <p>If an {@code IpSecTransform} object applied to this socket was deallocated by calling\n     * {@link IpSecTransform#close()}, then communication on the socket will fail until this method\n     * is called.\n     *\n     * @param socket a socket that previously had a transform applied to it\n     * @throws IOException indicating that the transform could not be removed from the socket\n     ",
    "links" : [ "android.net.IpSecTransform#close()" ]
  }, {
    "name" : "public void removeTransportModeTransforms(@NonNull FileDescriptor socket) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Remove an IPsec transform from a socket.\n     *\n     * <p>Once removed, traffic on the socket will not be encrypted. Removing transforms from a\n     * socket allows the socket to be reused for communication in the clear.\n     *\n     * <p>If an {@code IpSecTransform} object applied to this socket was deallocated by calling\n     * {@link IpSecTransform#close()}, then communication on the socket will fail until this method\n     * is called.\n     *\n     * @param socket a socket that previously had a transform applied to it\n     * @throws IOException indicating that the transform could not be removed from the socket\n     ",
    "links" : [ "android.net.IpSecTransform#close()" ]
  }, {
    "name" : "public void removeTunnelModeTransform(Network net, IpSecTransform transform)",
    "returnType" : "void",
    "comment" : "\n     * Remove a Tunnel Mode IPsec Transform from a {@link Network}. This must be used as part of\n     * cleanup if a tunneled Network experiences a change in default route. The Network will drop\n     * all traffic that cannot be routed to the Tunnel's outbound interface. If that interface is\n     * lost, all traffic will drop.\n     *\n     * <p>TODO: Update javadoc for tunnel mode APIs at the same time the APIs are re-worked.\n     *\n     * @param net a network that currently has transform applied to it.\n     * @param transform a Tunnel Mode IPsec Transform that has been previously applied to the given\n     *     network\n     * @hide\n     ",
    "links" : [ "android.net.Network" ]
  }, {
    "name" : "public UdpEncapsulationSocket openUdpEncapsulationSocket(int port) throws IOException, ResourceUnavailableException",
    "returnType" : "UdpEncapsulationSocket",
    "comment" : " socket.",
    "links" : [ ]
  }, {
    "name" : "public UdpEncapsulationSocket openUdpEncapsulationSocket() throws IOException, ResourceUnavailableException",
    "returnType" : "UdpEncapsulationSocket",
    "comment" : " socket.",
    "links" : [ ]
  }, {
    "name" : "public IpSecTunnelInterface createIpSecTunnelInterface(@NonNull InetAddress localAddress, @NonNull InetAddress remoteAddress, @NonNull Network underlyingNetwork) throws ResourceUnavailableException, IOException",
    "returnType" : "IpSecTunnelInterface",
    "comment" : "\n     * Create a new IpSecTunnelInterface as a local endpoint for tunneled IPsec traffic.\n     *\n     * <p>An application that creates tunnels is responsible for cleaning up the tunnel when the\n     * underlying network goes away, and the onLost() callback is received.\n     *\n     * @param localAddress The local addres of the tunnel\n     * @param remoteAddress The local addres of the tunnel\n     * @param underlyingNetwork the {@link Network} that will carry traffic for this tunnel.\n     *        This network should almost certainly be a network such as WiFi with an L2 address.\n     * @return a new {@link IpSecManager#IpSecTunnelInterface} with the specified properties\n     * @throws IOException indicating that the socket could not be opened or bound\n     * @throws ResourceUnavailableException indicating that too many encapsulation sockets are open\n     * @hide\n     ",
    "links" : [ "android.net.IpSecManager#IpSecTunnelInterface", "android.net.Network" ]
  }, {
    "name" : "public void applyTunnelModeTransform(@NonNull IpSecTunnelInterface tunnel, @PolicyDirection int direction, @NonNull IpSecTransform transform) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Apply an active Tunnel Mode IPsec Transform to a {@link IpSecTunnelInterface}, which will\n     * tunnel all traffic for the given direction through the underlying network's interface with\n     * IPsec (applies an outer IP header and IPsec Header to all traffic, and expects an additional\n     * IP header and IPsec Header on all inbound traffic).\n     * <p>Applications should probably not use this API directly.\n     *\n     *\n     * @param tunnel The {@link IpSecManager#IpSecTunnelInterface} that will use the supplied\n     *        transform.\n     * @param direction the direction, {@link DIRECTION_OUT} or {@link #DIRECTION_IN} in which\n     *        the transform will be used.\n     * @param transform an {@link IpSecTransform} created in tunnel mode\n     * @throws IOException indicating that the transform could not be applied due to a lower\n     *         layer failure.\n     * @hide\n     ",
    "links" : [ "IpSecTunnelInterface", "DIRECTION_OUT", "android.net.IpSecManager#IpSecTunnelInterface", "#DIRECTION_IN", "android.net.IpSecTransform" ]
  }, {
    "name" : "private static void maybeHandleServiceSpecificException(ServiceSpecificException sse)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static RuntimeException rethrowUncheckedExceptionFromServiceSpecificException(ServiceSpecificException sse)",
    "returnType" : "RuntimeException",
    "comment" : " package",
    "links" : [ ]
  }, {
    "name" : " static IOException rethrowCheckedExceptionFromServiceSpecificException(ServiceSpecificException sse) throws IOException",
    "returnType" : "IOException",
    "comment" : " package",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DIRECTION_IN", "DIRECTION_OUT", "INVALID_SECURITY_PARAMETER_INDEX", "INVALID_RESOURCE_ID", "mContext", "mService" ],
  "methodNames" : [ "public SecurityParameterIndex allocateSecurityParameterIndex(@NonNull InetAddress destinationAddress) throws ResourceUnavailableException", "public SecurityParameterIndex allocateSecurityParameterIndex(@NonNull InetAddress destinationAddress, int requestedSpi) throws SpiUnavailableException, ResourceUnavailableException", "public void applyTransportModeTransform(@NonNull Socket socket, @PolicyDirection int direction, @NonNull IpSecTransform transform) throws IOException", "public void applyTransportModeTransform(@NonNull DatagramSocket socket, @PolicyDirection int direction, @NonNull IpSecTransform transform) throws IOException", "public void applyTransportModeTransform(@NonNull FileDescriptor socket, @PolicyDirection int direction, @NonNull IpSecTransform transform) throws IOException", "public void removeTransportModeTransforms(@NonNull Socket socket) throws IOException", "public void removeTransportModeTransforms(@NonNull DatagramSocket socket) throws IOException", "public void removeTransportModeTransforms(@NonNull FileDescriptor socket) throws IOException", "public void removeTunnelModeTransform(Network net, IpSecTransform transform)", "public UdpEncapsulationSocket openUdpEncapsulationSocket(int port) throws IOException, ResourceUnavailableException", "public UdpEncapsulationSocket openUdpEncapsulationSocket() throws IOException, ResourceUnavailableException", "public IpSecTunnelInterface createIpSecTunnelInterface(@NonNull InetAddress localAddress, @NonNull InetAddress remoteAddress, @NonNull Network underlyingNetwork) throws ResourceUnavailableException, IOException", "public void applyTunnelModeTransform(@NonNull IpSecTunnelInterface tunnel, @PolicyDirection int direction, @NonNull IpSecTransform transform) throws IOException", "private static void maybeHandleServiceSpecificException(ServiceSpecificException sse)", " static RuntimeException rethrowUncheckedExceptionFromServiceSpecificException(ServiceSpecificException sse)", " static IOException rethrowCheckedExceptionFromServiceSpecificException(ServiceSpecificException sse) throws IOException" ]
}