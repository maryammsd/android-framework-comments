{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/CallerInfo.java",
  "packageName" : "android.telecom",
  "className" : "CallerInfo",
  "comment" : "\n * Looks up caller information for the given phone number.\n *\n * {@hide}\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_TYPE_CURRENT",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "USER_TYPE_WORK",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "\n     * Please note that, any one of these member variables can be null,\n     * and any accesses to them should be prepared to handle such a case.\n     *\n     * Also, it is implied that phoneNumber is more often populated than\n     * name is, (think of calls being dialed/received using numbers where\n     * names are not known to the device), so phoneNumber should serve as\n     * a dependable fallback when name is unavailable.\n     *\n     * One other detail here is that this CallerInfo object reflects\n     * information found on a connection, it is an OUTPUT that serves\n     * mainly to display information to the user.  In no way is this object\n     * used as input to make a connection, so we can choose to display\n     * whatever human-readable text makes sense to the user for a\n     * connection.  This is especially relevant for the phone number field,\n     * since it is the one field that is most likely exposed to the user.\n     *\n     * As an example:\n     *   1. User dials \"911\"\n     *   2. Device recognizes that this is an emergency number\n     *   3. We use the \"Emergency Number\" string instead of \"911\" in the\n     *     phoneNumber field.\n     *\n     * What we're really doing here is treating phoneNumber as an essential\n     * field here, NOT name.  We're NOT always guaranteed to have a name\n     * for a connection, but the number should be displayable.\n     ",
    "links" : [ ]
  }, {
    "name" : "phoneNumber",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "normalizedNumber",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "geoDescription",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "cnapName",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "numberPresentation",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "namePresentation",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "contactExists",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "phoneLabel",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "numberType",
    "type" : "int",
    "comment" : "\n     * Split up the phoneLabel into number type and label name.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "numberLabel",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "photoResource",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "contactIdOrZero",
    "type" : "long",
    "comment" : " Contact ID, which will be 0 if a contact comes from the corp CP2.",
    "links" : [ ]
  }, {
    "name" : "needUpdate",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "contactRefUri",
    "type" : "Uri",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "lookupKey",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "preferredPhoneAccountComponent",
    "type" : "ComponentName",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "preferredPhoneAccountId",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "userType",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "contactDisplayPhotoUri",
    "type" : "Uri",
    "comment" : "\n     * Contact display photo URI.  If a contact has no display photo but a thumbnail, it'll be\n     * the thumbnail URI instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "contactRingtoneUri",
    "type" : "Uri",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "shouldSendToVoicemail",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "cachedPhoto",
    "type" : "Drawable",
    "comment" : "\n     * Drawable representing the caller image.  This is essentially\n     * a cache for the image data tied into the connection /\n     * callerinfo object.\n     *\n     * This might be a high resolution picture which is more suitable\n     * for full-screen image view than for smaller icons used in some\n     * kinds of notifications.\n     *\n     * The {@link #isCachedPhotoCurrent} flag indicates if the image\n     * data needs to be reloaded.\n     *\n     * @hide\n     ",
    "links" : [ "#isCachedPhotoCurrent" ]
  }, {
    "name" : "cachedPhotoIcon",
    "type" : "Bitmap",
    "comment" : "\n     * Bitmap representing the caller image which has possibly lower\n     * resolution than {@link #cachedPhoto} and thus more suitable for\n     * icons (like notification icons).\n     *\n     * In usual cases this is just down-scaled image of {@link #cachedPhoto}.\n     * If the down-scaling fails, this will just become null.\n     *\n     * The {@link #isCachedPhotoCurrent} flag indicates if the image\n     * data needs to be reloaded.\n     *\n     * @hide\n     ",
    "links" : [ "#cachedPhoto", "#cachedPhoto", "#isCachedPhotoCurrent" ]
  }, {
    "name" : "isCachedPhotoCurrent",
    "type" : "boolean",
    "comment" : "\n     * Boolean which indicates if {@link #cachedPhoto} and\n     * {@link #cachedPhotoIcon} is fresh enough. If it is false,\n     * those images aren't pointing to valid objects.\n     *\n     * @hide\n     ",
    "links" : [ "#cachedPhoto", "#cachedPhotoIcon" ]
  }, {
    "name" : "mIsEmergency",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsVoiceMail",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CallerInfo getCallerInfo(Context context, Uri contactRef, Cursor cursor)",
    "returnType" : "CallerInfo",
    "comment" : "\n     * getCallerInfo given a Cursor.\n     * @param context the context used to retrieve string constants\n     * @param contactRef the URI to attach to this CallerInfo object\n     * @param cursor the first object in the cursor is used to build the CallerInfo object.\n     * @return the CallerInfo which contains the caller id for the given\n     * number. The returned CallerInfo is null if no number is supplied.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CallerInfo getCallerInfo(Context context, Uri contactRef)",
    "returnType" : "CallerInfo",
    "comment" : "\n     * getCallerInfo given a URI, look up in the call-log database\n     * for the uri unique key.\n     * @param context the context used to get the ContentResolver\n     * @param contactRef the URI used to lookup caller id\n     * @return the CallerInfo which contains the caller id for the given\n     * number. The returned CallerInfo is null if no number is supplied.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CallerInfo getCallerInfo(Context context, String number)",
    "returnType" : "CallerInfo",
    "comment" : "\n     * getCallerInfo given a phone number, look up in the call-log database\n     * for the matching caller id info.\n     * @param context the context used to get the ContentResolver\n     * @param number the phone number used to lookup caller id\n     * @return the CallerInfo which contains the caller id for the given\n     * number. The returned CallerInfo is null if no number is supplied. If\n     * a matching number is not found, then a generic caller info is returned,\n     * with all relevant fields empty or null.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CallerInfo getCallerInfo(Context context, String number, int subId)",
    "returnType" : "CallerInfo",
    "comment" : "\n     * getCallerInfo given a phone number and subscription, look up in the call-log database\n     * for the matching caller id info.\n     * @param context the context used to get the ContentResolver\n     * @param number the phone number used to lookup caller id\n     * @param subId the subscription for checking for if voice mail number or not\n     * @return the CallerInfo which contains the caller id for the given\n     * number. The returned CallerInfo is null if no number is supplied. If\n     * a matching number is not found, then a generic caller info is returned,\n     * with all relevant fields empty or null.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * @return Name assocaited with this caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setName(@Nullable String name)",
    "returnType" : "void",
    "comment" : "\n     * Set caller Info Name.\n     * @param name caller Info Name\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPhoneNumber()",
    "returnType" : "String",
    "comment" : "\n     * @return Phone number assocaited with this caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPhoneNumber(String number)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getContactId()",
    "returnType" : "long",
    "comment" : "\n     * @return Contact ID, which will be 0 if a contact comes from the corp Contacts Provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri getContactDisplayPhotoUri()",
    "returnType" : "Uri",
    "comment" : "\n     * @return Contact display photo URI. If a contact has no display photo but a thumbnail,\n     * it'll the thumbnail URI instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void SetContactDisplayPhotoUri(Uri photoUri)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " static CallerInfo doSecondaryLookupIfNecessary(Context context, String number, CallerInfo previousResult)",
    "returnType" : "CallerInfo",
    "comment" : "\n     * Performs another lookup if previous lookup fails and it's a SIP call\n     * and the peer's username is all numeric. Look up the username as it\n     * could be a PSTN number in the contact database.\n     *\n     * @param context the query context\n     * @param number the original phone number, could be a SIP URI\n     * @param previousResult the result of previous lookup\n     * @return previousResult if it's not the case\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmergencyNumber()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the caller info is an emergency number.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVoiceMailNumber()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the caller info is a voicemail number.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " CallerInfo markAsEmergency(Context context)",
    "returnType" : "CallerInfo",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : " CallerInfo markAsVoiceMail(Context context, int subId)",
    "returnType" : "CallerInfo",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "private static String normalize(String s)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getColumnIndexForPersonId(Uri contactRef, Cursor cursor)",
    "returnType" : "int",
    "comment" : "\n     * Returns the column index to use to find the \"person_id\" field in\n     * the specified cursor, based on the contact URI that was originally\n     * queried.\n     *\n     * This is a helper function for the getCallerInfo() method that takes\n     * a Cursor.  Looking up the person_id is nontrivial (compared to all\n     * the other CallerInfo fields) since the column we need to use\n     * depends on what query we originally ran.\n     *\n     * Watch out: be sure to not do any database access in this method, since\n     * it's run from the UI thread (see comments below for more info.)\n     *\n     * @return the columnIndex to use (with cursor.getLong()) to get the\n     * person_id, or -1 if we couldn't figure out what colum to use.\n     *\n     * TODO: Add a unittest for this method.  (This is a little tricky to\n     * test, since we'll need a live contacts database to test against,\n     * preloaded with at least some phone numbers and SIP addresses.  And\n     * we'll probably have to hardcode the column indexes we expect, so\n     * the test might break whenever the contacts schema changes.  But we\n     * can at least make sure we handle all the URI patterns we claim to,\n     * and that the mime types match what we expect...)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateGeoDescription(Context context, String fallbackNumber)",
    "returnType" : "void",
    "comment" : "\n     * Updates this CallerInfo's geoDescription field, based on the raw\n     * phone number in the phoneNumber field.\n     *\n     * (Note that the various getCallerInfo() methods do *not* set the\n     * geoDescription automatically; you need to call this method\n     * explicitly to get it.)\n     *\n     * @param context the context used to look up the current locale / country\n     * @param fallbackNumber if this CallerInfo's phoneNumber field is empty,\n     *        this specifies a fallback number to use instead.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getGeoDescription(Context context, String number)",
    "returnType" : "String",
    "comment" : "\n     * @return a geographical description string for the specified number.\n     * @see com.android.i18n.phonenumbers.PhoneNumberOfflineGeocoder\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getCurrentCountryIso(Context context, Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * @return The ISO 3166-1 two letters country code of the country the user\n     *         is in.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static String getCurrentCountryIso(Context context)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * @return a string debug representation of this instance.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "VDBG", "USER_TYPE_CURRENT", "USER_TYPE_WORK", "name", "phoneNumber", "normalizedNumber", "geoDescription", "cnapName", "numberPresentation", "namePresentation", "contactExists", "phoneLabel", "numberType", "numberLabel", "photoResource", "contactIdOrZero", "needUpdate", "contactRefUri", "lookupKey", "preferredPhoneAccountComponent", "preferredPhoneAccountId", "userType", "contactDisplayPhotoUri", "contactRingtoneUri", "shouldSendToVoicemail", "cachedPhoto", "cachedPhotoIcon", "isCachedPhotoCurrent", "mIsEmergency", "mIsVoiceMail" ],
  "methodNames" : [ "public static CallerInfo getCallerInfo(Context context, Uri contactRef, Cursor cursor)", "public static CallerInfo getCallerInfo(Context context, Uri contactRef)", "public static CallerInfo getCallerInfo(Context context, String number)", "public static CallerInfo getCallerInfo(Context context, String number, int subId)", "public String getName()", "public void setName(@Nullable String name)", "public String getPhoneNumber()", "public void setPhoneNumber(String number)", "public long getContactId()", "public Uri getContactDisplayPhotoUri()", "public void SetContactDisplayPhotoUri(Uri photoUri)", " static CallerInfo doSecondaryLookupIfNecessary(Context context, String number, CallerInfo previousResult)", "public boolean isEmergencyNumber()", "public boolean isVoiceMailNumber()", " CallerInfo markAsEmergency(Context context)", " CallerInfo markAsVoiceMail(Context context, int subId)", "private static String normalize(String s)", "private static int getColumnIndexForPersonId(Uri contactRef, Cursor cursor)", "public void updateGeoDescription(Context context, String fallbackNumber)", "public static String getGeoDescription(Context context, String number)", "private static String getCurrentCountryIso(Context context, Locale locale)", "protected static String getCurrentCountryIso(Context context)", "public String toString()" ]
}