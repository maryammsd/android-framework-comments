{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/AnalogClock.java",
  "packageName" : "android.widget",
  "className" : "AnalogClock",
  "comment" : "\n * This widget displays an analogic clock with two hands for hours and minutes.\n *\n * @attr ref android.R.styleable#AnalogClock_dial\n * @attr ref android.R.styleable#AnalogClock_hand_hour\n * @attr ref android.R.styleable#AnalogClock_hand_minute\n * @attr ref android.R.styleable#AnalogClock_hand_second\n * @attr ref android.R.styleable#AnalogClock_timeZone\n * @deprecated This widget is no longer supported; except for\n * {@link android.widget.RemoteViews} use cases like\n * <a href=\"https://developer.android.com/develop/ui/views/appwidgets/overview\">\n * app widgets</a>.\n *\n ",
  "links" : [ "android.widget.RemoteViews" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondsHandFps",
    "type" : "int",
    "comment" : " How many times per second that the seconds hand advances. ",
    "links" : [ ]
  }, {
    "name" : "mClock",
    "type" : "Clock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeZone",
    "type" : "ZoneId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHourHand",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHourHandTintInfo",
    "type" : "TintInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinuteHand",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinuteHandTintInfo",
    "type" : "TintInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondHand",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondHandTintInfo",
    "type" : "TintInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDial",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialTintInfo",
    "type" : "TintInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeconds",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinutes",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHour",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntentReceiver",
    "type" : "BroadcastReceiver",
    "comment" : " Intent receiver for the time or time zone changing. ",
    "links" : [ ]
  }, {
    "name" : "mReceiverAttached",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClockEventDelegate",
    "type" : "ClockEventDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTick",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDial(@NonNull Icon icon)",
    "returnType" : "void",
    "comment" : " Sets the dial of the clock to the specified Icon. ",
    "links" : [ ]
  }, {
    "name" : "public void setDialTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the dial drawable.\n     * <p>\n     * Subsequent calls to {@link #setDial(Icon)} will\n     * automatically mutate the drawable and apply the specified tint and tint\n     * mode using {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#AnalogClock_dialTint\n     * @see #getDialTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "#setDial(Icon)", "android.graphics.drawable.Drawable#setTintList(ColorStateList)" ]
  }, {
    "name" : "public ColorStateList getDialTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @return the tint applied to the dial drawable\n     * @attr ref android.R.styleable#AnalogClock_dialTint\n     * @see #setDialTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDialTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setDialTintList(ColorStateList)}} to the dial drawable.\n     * The default mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#AnalogClock_dialTintMode\n     * @see #getDialTintBlendMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "android.graphics.BlendMode#SRC_IN", "#setDialTintList(ColorStateList)" ]
  }, {
    "name" : "public BlendMode getDialTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the dial drawable\n     * @attr ref android.R.styleable#AnalogClock_dialTintMode\n     * @see #setDialTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHourHand(@NonNull Icon icon)",
    "returnType" : "void",
    "comment" : " Sets the hour hand of the clock to the specified Icon. ",
    "links" : [ ]
  }, {
    "name" : "public void setHourHandTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the hour hand drawable.\n     * <p>\n     * Subsequent calls to {@link #setHourHand(Icon)} will\n     * automatically mutate the drawable and apply the specified tint and tint\n     * mode using {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#AnalogClock_hand_hourTint\n     * @see #getHourHandTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "#setHourHand(Icon)", "android.graphics.drawable.Drawable#setTintList(ColorStateList)" ]
  }, {
    "name" : "public ColorStateList getHourHandTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @return the tint applied to the hour hand drawable\n     * @attr ref android.R.styleable#AnalogClock_hand_hourTint\n     * @see #setHourHandTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHourHandTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setHourHandTintList(ColorStateList)}} to the hour hand drawable.\n     * The default mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#AnalogClock_hand_hourTintMode\n     * @see #getHourHandTintBlendMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setHourHandTintList(ColorStateList)", "android.graphics.BlendMode#SRC_IN" ]
  }, {
    "name" : "public BlendMode getHourHandTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the hour hand drawable\n     * @attr ref android.R.styleable#AnalogClock_hand_hourTintMode\n     * @see #setHourHandTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinuteHand(@NonNull Icon icon)",
    "returnType" : "void",
    "comment" : " Sets the minute hand of the clock to the specified Icon. ",
    "links" : [ ]
  }, {
    "name" : "public void setMinuteHandTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the minute hand drawable.\n     * <p>\n     * Subsequent calls to {@link #setMinuteHand(Icon)} will\n     * automatically mutate the drawable and apply the specified tint and tint\n     * mode using {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#AnalogClock_hand_minuteTint\n     * @see #getMinuteHandTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "android.graphics.drawable.Drawable#setTintList(ColorStateList)", "#setMinuteHand(Icon)" ]
  }, {
    "name" : "public ColorStateList getMinuteHandTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @return the tint applied to the minute hand drawable\n     * @attr ref android.R.styleable#AnalogClock_hand_minuteTint\n     * @see #setMinuteHandTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinuteHandTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setMinuteHandTintList(ColorStateList)}} to the minute hand drawable.\n     * The default mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#AnalogClock_hand_minuteTintMode\n     * @see #getMinuteHandTintBlendMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "android.graphics.BlendMode#SRC_IN", "#setMinuteHandTintList(ColorStateList)" ]
  }, {
    "name" : "public BlendMode getMinuteHandTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the minute hand drawable\n     * @attr ref android.R.styleable#AnalogClock_hand_minuteTintMode\n     * @see #setMinuteHandTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSecondHand(@Nullable Icon icon)",
    "returnType" : "void",
    "comment" : "\n     * Sets the second hand of the clock to the specified Icon, or hides the second hand if it is\n     * null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSecondHandTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the second hand drawable.\n     * <p>\n     * Subsequent calls to {@link #setSecondHand(Icon)} will\n     * automatically mutate the drawable and apply the specified tint and tint\n     * mode using {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#AnalogClock_hand_secondTint\n     * @see #getSecondHandTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "#setSecondHand(Icon)", "android.graphics.drawable.Drawable#setTintList(ColorStateList)" ]
  }, {
    "name" : "public ColorStateList getSecondHandTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @return the tint applied to the second hand drawable\n     * @attr ref android.R.styleable#AnalogClock_hand_secondTint\n     * @see #setSecondHandTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSecondHandTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setSecondHandTintList(ColorStateList)}} to the second hand drawable.\n     * The default mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#AnalogClock_hand_secondTintMode\n     * @see #getSecondHandTintBlendMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setSecondHandTintList(ColorStateList)", "android.graphics.BlendMode#SRC_IN" ]
  }, {
    "name" : "public BlendMode getSecondHandTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the second hand drawable\n     * @attr ref android.R.styleable#AnalogClock_hand_secondTintMode\n     * @see #setSecondHandTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTimeZone()",
    "returnType" : "String",
    "comment" : "\n     * Indicates which time zone is currently used by this view.\n     *\n     * @return The ID of the current time zone or null if the default time zone,\n     *         as set by the user, must be used\n     *\n     * @see java.util.TimeZone\n     * @see java.util.TimeZone#getAvailableIDs()\n     * @see #setTimeZone(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimeZone(@Nullable String timeZone)",
    "returnType" : "void",
    "comment" : "\n     * Sets the specified time zone to use in this clock. When the time zone\n     * is set through this method, system time zone changes (when the user\n     * sets the time zone in settings for instance) will be ignored.\n     *\n     * @param timeZone The desired time zone's ID as specified in {@link java.util.TimeZone}\n     *                 or null to user the time zone specified by the user\n     *                 (system time zone)\n     *\n     * @see #getTimeZone()\n     * @see java.util.TimeZone#getAvailableIDs()\n     * @see java.util.TimeZone#getTimeZone(String)\n     *\n     * @attr ref android.R.styleable#AnalogClock_timeZone\n     ",
    "links" : [ "java.util.TimeZone" ]
  }, {
    "name" : "public void onVisibilityAggregated(boolean isVisible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setClockEventDelegate(ClockEventDelegate delegate)",
    "returnType" : "void",
    "comment" : "\n     * Sets a delegate to handle clock event registration. This must be called before the view is\n     * attached to the window\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onVisible()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onInvisible()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Instant now()",
    "returnType" : "Instant",
    "comment" : "\n     * Return the current Instant to be used for drawing the clockface. Protected to allow\n     * subclasses to override this to show a different time from the system clock.\n     *\n     * @return the Instant to be shown on the clockface\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onTimeChanged()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onTimeChanged(LocalTime localTime, long nowMillis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createClock()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateContentDescription(long timeMillis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ZoneId toZoneId(@Nullable String timeZone)",
    "returnType" : "ZoneId",
    "comment" : "\n     * Tries to parse a {@link ZoneId} from {@code timeZone}, returning null if it is null or there\n     * is an error parsing.\n     ",
    "links" : [ "java.time.ZoneId" ]
  } ],
  "methodNames" : [ "public void setDial(@NonNull Icon icon)", "public void setDialTintList(@Nullable ColorStateList tint)", "public ColorStateList getDialTintList()", "public void setDialTintBlendMode(@Nullable BlendMode blendMode)", "public BlendMode getDialTintBlendMode()", "public void setHourHand(@NonNull Icon icon)", "public void setHourHandTintList(@Nullable ColorStateList tint)", "public ColorStateList getHourHandTintList()", "public void setHourHandTintBlendMode(@Nullable BlendMode blendMode)", "public BlendMode getHourHandTintBlendMode()", "public void setMinuteHand(@NonNull Icon icon)", "public void setMinuteHandTintList(@Nullable ColorStateList tint)", "public ColorStateList getMinuteHandTintList()", "public void setMinuteHandTintBlendMode(@Nullable BlendMode blendMode)", "public BlendMode getMinuteHandTintBlendMode()", "public void setSecondHand(@Nullable Icon icon)", "public void setSecondHandTintList(@Nullable ColorStateList tint)", "public ColorStateList getSecondHandTintList()", "public void setSecondHandTintBlendMode(@Nullable BlendMode blendMode)", "public BlendMode getSecondHandTintBlendMode()", "public String getTimeZone()", "public void setTimeZone(@Nullable String timeZone)", "public void onVisibilityAggregated(boolean isVisible)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "public void setClockEventDelegate(ClockEventDelegate delegate)", "private void onVisible()", "private void onInvisible()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "protected void onDraw(Canvas canvas)", "protected Instant now()", "protected void onTimeChanged()", "private void onTimeChanged(LocalTime localTime, long nowMillis)", "private void createClock()", "private void updateContentDescription(long timeMillis)", "private static ZoneId toZoneId(@Nullable String timeZone)" ],
  "variableNames" : [ "LOG_TAG", "mSecondsHandFps", "mClock", "mTimeZone", "mHourHand", "mHourHandTintInfo", "mMinuteHand", "mMinuteHandTintInfo", "mSecondHand", "mSecondHandTintInfo", "mDial", "mDialTintInfo", "mDialWidth", "mDialHeight", "mVisible", "mSeconds", "mMinutes", "mHour", "mChanged", "mIntentReceiver", "mReceiverAttached", "mClockEventDelegate", "mTick" ]
}