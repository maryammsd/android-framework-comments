{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/BitmapRegionDecoder.java",
  "packageName" : "android.graphics",
  "className" : "BitmapRegionDecoder",
  "comment" : "\n * BitmapRegionDecoder can be used to decode a rectangle region from an image.\n * BitmapRegionDecoder is particularly useful when an original image is large and\n * you only need parts of the image.\n *\n * <p>To create a BitmapRegionDecoder, call newInstance(...).\n * Given a BitmapRegionDecoder, users can call decodeRegion() repeatedly\n * to get a decoded Bitmap of the specified region.\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mNativeBitmapRegionDecoder",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeLock",
    "type" : "Object",
    "comment" : " occur at a time.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static BitmapRegionDecoder newInstance(@NonNull byte[] data, int offset, int length, boolean isShareable) throws IOException",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "\n     * Create a BitmapRegionDecoder from the specified byte array.\n     * Currently only the JPEG, PNG, WebP and HEIF formats are supported.\n     *\n     * @param data byte array of compressed image data.\n     * @param offset offset into data for where the decoder should begin\n     *               parsing.\n     * @param length the number of bytes, beginning at offset, to parse\n     * @param isShareable This field has been ignored since\n     *                    {@link Build.VERSION_CODES#GINGERBREAD}.\n     * @throws IOException if the image format is not supported or can not be decoded.\n     * @deprecated In favor of {@link #newInstance(byte[], int, int)}\n     ",
    "links" : [ "#newInstance(byte", "Build.VERSION_CODES#GINGERBREAD" ]
  }, {
    "name" : "public static BitmapRegionDecoder newInstance(@NonNull byte[] data, int offset, int length) throws IOException",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "\n     * Create a BitmapRegionDecoder from the specified byte array.\n     * Currently only the JPEG, PNG, WebP and HEIF formats are supported.\n     *\n     * @param data byte array of compressed image data.\n     * @param offset offset into data for where the decoder should begin\n     *               parsing.\n     * @param length the number of bytes, beginning at offset, to parse\n     * @throws IOException if the image format is not supported or can not be decoded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BitmapRegionDecoder newInstance(@NonNull FileDescriptor fd, boolean isShareable) throws IOException",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "\n     * Create a BitmapRegionDecoder from the file descriptor.\n     * The position within the descriptor will not be changed when\n     * this returns, so the descriptor can be used again as is.\n     * Currently only the JPEG, PNG, WebP and HEIF formats are supported.\n     *\n     * @param fd The file descriptor containing the data to decode\n     * @param isShareable This field has been ignored since\n     *                    {@link Build.VERSION_CODES#KITKAT}.\n     * @throws IOException if the image format is not supported or can not be decoded.\n     * @deprecated In favor of {@link #newInstance(ParcelFileDescriptor)}\n     ",
    "links" : [ "Build.VERSION_CODES#KITKAT", "#newInstance(ParcelFileDescriptor)" ]
  }, {
    "name" : "public static BitmapRegionDecoder newInstance(@NonNull ParcelFileDescriptor pfd) throws IOException",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "\n     * Create a BitmapRegionDecoder from the file descriptor.\n     * The position within the descriptor will not be changed when\n     * this returns, so the descriptor can be used again as is.\n     * Currently only the JPEG, PNG, WebP and HEIF formats are supported.\n     *\n     * @param pfd The parcel file descriptor containing the data to decode\n     * @throws IOException if the image format is not supported or can not be decoded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BitmapRegionDecoder newInstance(@NonNull InputStream is, boolean isShareable) throws IOException",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "\n     * Create a BitmapRegionDecoder from an input stream.\n     * The stream's position will be where ever it was after the encoded data\n     * was read.\n     * Currently only the JPEG, PNG, WebP and HEIF formats are supported.\n     *\n     * @param is The input stream that holds the raw data to be decoded into a\n     *           BitmapRegionDecoder.\n     * @param isShareable This field has always been ignored.\n     * @return A new BitmapRegionDecoder, or {@code null} if {@code is} is {@code null}.\n     * @throws IOException if the image format is not supported or can not be decoded.\n     * @deprecated In favor of {@link #newInstance(InputStream)}\n     *\n     * <p class=\"note\">Prior to {@link Build.VERSION_CODES#KITKAT},\n     * if {@link InputStream#markSupported is.markSupported()} returns true,\n     * <code>is.mark(1024)</code> would be called. As of\n     * {@link Build.VERSION_CODES#KITKAT}, this is no longer the case.</p>\n     ",
    "links" : [ "java.io.FileInputStream#markSupported", "#newInstance(InputStream)", "Build.VERSION_CODES#KITKAT" ]
  }, {
    "name" : "public static BitmapRegionDecoder newInstance(@NonNull InputStream is) throws IOException",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "\n     * Create a BitmapRegionDecoder from an input stream.\n     * The stream's position will be where ever it was after the encoded data\n     * was read.\n     * Currently only the JPEG, PNG, WebP and HEIF formats are supported.\n     *\n     * @param is The input stream that holds the raw data to be decoded into a\n     *           BitmapRegionDecoder.\n     * @return A new BitmapRegionDecoder, or {@code null} if {@code is} is {@code null}.\n     * @throws IOException if the image format is not supported or can not be decoded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BitmapRegionDecoder newInstance(@NonNull String pathName, boolean isShareable) throws IOException",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "\n     * Create a BitmapRegionDecoder from a file path.\n     * Currently only the JPEG, PNG, WebP and HEIF formats are supported.\n     *\n     * @param pathName complete path name for the file to be decoded.\n     * @param isShareable This field has always been ignored.\n     * @throws IOException if the image format is not supported or can not be decoded.\n     * @deprecated In favor of {@link #newInstance(String)}\n     ",
    "links" : [ "#newInstance(String)" ]
  }, {
    "name" : "public static BitmapRegionDecoder newInstance(@NonNull String pathName) throws IOException",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "\n     * Create a BitmapRegionDecoder from a file path.\n     * Currently only the JPEG, PNG, WebP and HEIF formats are supported.\n     *\n     * @param pathName complete path name for the file to be decoded.\n     * @throws IOException if the image format is not supported or can not be decoded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap decodeRegion(Rect rect, BitmapFactory.Options options)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decodes a rectangle region in the image specified by rect.\n     *\n     * @param rect The rectangle that specified the region to be decode.\n     * @param options null-ok; Options that control downsampling.\n     *             inPurgeable is not supported.\n     * @return The decoded bitmap, or null if the image data could not be\n     *         decoded.\n     * @throws IllegalArgumentException if {@link BitmapFactory.Options#inPreferredConfig}\n     *         is {@link android.graphics.Bitmap.Config#HARDWARE}\n     *         and {@link BitmapFactory.Options#inMutable} is set, if the specified color space\n     *         is not {@link ColorSpace.Model#RGB RGB}, or if the specified color space's transfer\n     *         function is not an {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}\n     ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE", "ColorSpace.Rgb.TransferParameters", "BitmapFactory.Options#inMutable", "BitmapFactory.Options#inPreferredConfig", "ColorSpace.Model#RGB" ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : " Returns the original image's width ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : " Returns the original image's height ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Frees up the memory associated with this region decoder, and mark the\n     * region decoder as \"dead\", meaning it will throw an exception if decodeRegion(),\n     * getWidth() or getHeight() is called.\n     *\n     * <p>This operation cannot be reversed, so it should only be called if you are\n     * sure there are no further uses for the region decoder. This is an advanced call,\n     * and normally need not be called, since the normal GC process will free up this\n     * memory when there are no more references to this region decoder.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isRecycled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this region decoder has been recycled.\n     * If so, then it is an error to try use its method.\n     *\n     * @return true if the region decoder has been recycled\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkRecycled(String errorMessage)",
    "returnType" : "void",
    "comment" : "\n     * Called by methods that want to throw an exception if the region decoder\n     * has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeDecodeRegion(long lbm, int start_x, int start_y, int width, int height, BitmapFactory.Options options, long inBitmapHandle, long colorSpaceHandle)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetWidth(long lbm)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetHeight(long lbm)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClean(long lbm)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native BitmapRegionDecoder nativeNewInstance(byte[] data, int offset, int length)",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native BitmapRegionDecoder nativeNewInstance(FileDescriptor fd)",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native BitmapRegionDecoder nativeNewInstance(InputStream is, byte[] storage)",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native BitmapRegionDecoder nativeNewInstance(long asset)",
    "returnType" : "BitmapRegionDecoder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static BitmapRegionDecoder newInstance(@NonNull byte[] data, int offset, int length, boolean isShareable) throws IOException", "public static BitmapRegionDecoder newInstance(@NonNull byte[] data, int offset, int length) throws IOException", "public static BitmapRegionDecoder newInstance(@NonNull FileDescriptor fd, boolean isShareable) throws IOException", "public static BitmapRegionDecoder newInstance(@NonNull ParcelFileDescriptor pfd) throws IOException", "public static BitmapRegionDecoder newInstance(@NonNull InputStream is, boolean isShareable) throws IOException", "public static BitmapRegionDecoder newInstance(@NonNull InputStream is) throws IOException", "public static BitmapRegionDecoder newInstance(@NonNull String pathName, boolean isShareable) throws IOException", "public static BitmapRegionDecoder newInstance(@NonNull String pathName) throws IOException", "public Bitmap decodeRegion(Rect rect, BitmapFactory.Options options)", "public int getWidth()", "public int getHeight()", "public void recycle()", "public final boolean isRecycled()", "private void checkRecycled(String errorMessage)", "protected void finalize() throws Throwable", "private static native Bitmap nativeDecodeRegion(long lbm, int start_x, int start_y, int width, int height, BitmapFactory.Options options, long inBitmapHandle, long colorSpaceHandle)", "private static native int nativeGetWidth(long lbm)", "private static native int nativeGetHeight(long lbm)", "private static native void nativeClean(long lbm)", "private static native BitmapRegionDecoder nativeNewInstance(byte[] data, int offset, int length)", "private static native BitmapRegionDecoder nativeNewInstance(FileDescriptor fd)", "private static native BitmapRegionDecoder nativeNewInstance(InputStream is, byte[] storage)", "private static native BitmapRegionDecoder nativeNewInstance(long asset)" ],
  "variableNames" : [ "mNativeBitmapRegionDecoder", "mRecycled", "mNativeLock" ]
}