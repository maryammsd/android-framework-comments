{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/InsetsState.java",
  "packageName" : "android.view",
  "className" : "InsetsState",
  "comment" : "\n * Holder for state of system windows that cause window insets for all other windows in the system.\n * @hide\n ",
  "variables" : [ {
    "name" : "ITYPE_INVALID",
    "type" : "int",
    "comment" : "\n     * Special value to be used to by methods returning an {@link InternalInsetsType} to indicate\n     * that the objects/parameters aren't associated with an {@link InternalInsetsType}\n     ",
    "links" : [ "InternalInsetsType", "InternalInsetsType" ]
  }, {
    "name" : "FIRST_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_STATUS_BAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_NAVIGATION_BAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_CAPTION_BAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_TOP_GESTURES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_BOTTOM_GESTURES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_LEFT_GESTURES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_RIGHT_GESTURES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_TOP_TAPPABLE_ELEMENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_BOTTOM_TAPPABLE_ELEMENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_LEFT_DISPLAY_CUTOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_TOP_DISPLAY_CUTOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_RIGHT_DISPLAY_CUTOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_BOTTOM_DISPLAY_CUTOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_IME",
    "type" : "int",
    "comment" : " Input method window. ",
    "links" : [ ]
  }, {
    "name" : "ITYPE_CLIMATE_BAR",
    "type" : "int",
    "comment" : " Additional system decorations inset type. ",
    "links" : [ ]
  }, {
    "name" : "ITYPE_EXTRA_NAVIGATION_BAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LAST_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITYPE_SHELF",
    "type" : "int",
    "comment" : " A shelf is the same as the navigation bar. ",
    "links" : [ ]
  }, {
    "name" : "ISIDE_LEFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ISIDE_TOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ISIDE_RIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ISIDE_BOTTOM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ISIDE_FLOATING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ISIDE_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSources",
    "type" : "InsetsSource[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayFrame",
    "type" : "Rect",
    "comment" : "\n     * The frame of the display these sources are relative to.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<InsetsState>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public WindowInsets calculateInsets(Rect frame, @Nullable InsetsState ignoringVisibilityState, boolean isScreenRound, boolean alwaysConsumeSystemBars, DisplayCutout cutout, int legacySoftInputMode, int legacyWindowFlags, int legacySystemUiFlags, @Nullable @InternalInsetsSide SparseIntArray typeSideMap)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Calculates {@link WindowInsets} based on the current source configuration.\n     *\n     * @param frame The frame to calculate the insets relative to.\n     * @param ignoringVisibilityState {@link InsetsState} used to calculate\n     *        {@link WindowInsets#getInsetsIgnoringVisibility(int)} information, or pass\n     *        {@code null} to use this state to calculate that information.\n     * @return The calculated insets.\n     ",
    "links" : [ "WindowInsets", "InsetsState", "WindowInsets#getInsetsIgnoringVisibility" ]
  }, {
    "name" : "public Rect calculateVisibleInsets(Rect frame, @SoftInputModeFlags int softInputMode)",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int calculateUncontrollableInsetsFromFrame(Rect frame)",
    "returnType" : "int",
    "comment" : "\n     * Calculate which insets *cannot* be controlled, because the frame does not cover the\n     * respective side of the inset.\n     *\n     * If the frame of our window doesn't cover the entire inset, the control API makes very\n     * little sense, as we don't deal with negative insets.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean canControlSide(Rect frame, int side)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void processSource(InsetsSource source, Rect relativeFrame, boolean ignoreVisibility, Insets[] typeInsetsMap, @Nullable @InternalInsetsSide SparseIntArray typeSideMap, @Nullable boolean[] typeVisibilityMap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void processSourceAsPublicType(InsetsSource source, Insets[] typeInsetsMap, @InternalInsetsSide @Nullable SparseIntArray typeSideMap, @Nullable boolean[] typeVisibilityMap, Insets insets, int type)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getInsetSide(Insets insets)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the side for a certain {@code insets}. It is required that only one field l/t/r/b\n     * is set in order that this method returns a meaningful result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource getSource(@InternalInsetsType int type)",
    "returnType" : "InsetsSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource peekSource(@InternalInsetsType int type)",
    "returnType" : "InsetsSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSources()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getSourceOrDefaultVisibility(@InternalInsetsType int type)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the source visibility or the default visibility if the source doesn't exist. This is\n     * useful if when treating this object as a request.\n     *\n     * @param type The {@link InternalInsetsType} to query.\n     * @return {@code true} if the source is visible or the type is default visible and the source\n     *         doesn't exist.\n     ",
    "links" : [ "InternalInsetsType" ]
  }, {
    "name" : "public void setDisplayFrame(Rect frame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getDisplayFrame()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeSource(@InternalInsetsType int type)",
    "returnType" : "void",
    "comment" : "\n     * Modifies the state of this class to exclude a certain type to make it ready for dispatching\n     * to the client.\n     *\n     * @param type The {@link InternalInsetsType} of the source to remove\n     ",
    "links" : [ "InternalInsetsType" ]
  }, {
    "name" : "public void setSourceVisible(@InternalInsetsType int type, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * A shortcut for setting the visibility of the source.\n     *\n     * @param type The {@link InternalInsetsType} of the source to set the visibility\n     * @param visible {@code true} for visible\n     ",
    "links" : [ "InternalInsetsType" ]
  }, {
    "name" : "public void set(InsetsState other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void set(InsetsState other, boolean copySources)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addSource(InsetsSource source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ArraySet<Integer> toInternalType(@InsetsType int types)",
    "returnType" : "ArraySet<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int toPublicType(@InternalInsetsType int type)",
    "returnType" : "int",
    "comment" : "\n     * Converting a internal type to the public type.\n     * @param type internal insets type, {@code InternalInsetsType}.\n     * @return public insets type, {@code Type.InsetsType}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getDefaultVisibility(@InternalInsetsType int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean containsType(@InternalInsetsType int[] types, @InternalInsetsType int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String typeToString(@InternalInsetsType int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o, boolean excludingCaptionInsets, boolean excludeInvisibleImeFrames)",
    "returnType" : "boolean",
    "comment" : "\n     * An equals method can exclude the caption insets. This is useful because we assemble the\n     * caption insets information on the client side, and when we communicate with server, it's\n     * excluded.\n     * @param excludingCaptionInsets {@code true} if we want to compare two InsetsState objects but\n     *                                           ignore the caption insets source value.\n     * @param excludeInvisibleImeFrames If {@link #ITYPE_IME} frames should be ignored when IME is\n     *                                  not visible.\n     * @return {@code true} if the two InsetsState objects are equal, {@code false} otherwise.\n     ",
    "links" : [ "#ITYPE_IME" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "ITYPE_INVALID", "FIRST_TYPE", "ITYPE_STATUS_BAR", "ITYPE_NAVIGATION_BAR", "ITYPE_CAPTION_BAR", "ITYPE_TOP_GESTURES", "ITYPE_BOTTOM_GESTURES", "ITYPE_LEFT_GESTURES", "ITYPE_RIGHT_GESTURES", "ITYPE_TOP_TAPPABLE_ELEMENT", "ITYPE_BOTTOM_TAPPABLE_ELEMENT", "ITYPE_LEFT_DISPLAY_CUTOUT", "ITYPE_TOP_DISPLAY_CUTOUT", "ITYPE_RIGHT_DISPLAY_CUTOUT", "ITYPE_BOTTOM_DISPLAY_CUTOUT", "ITYPE_IME", "ITYPE_CLIMATE_BAR", "ITYPE_EXTRA_NAVIGATION_BAR", "LAST_TYPE", "SIZE", "ITYPE_SHELF", "ISIDE_LEFT", "ISIDE_TOP", "ISIDE_RIGHT", "ISIDE_BOTTOM", "ISIDE_FLOATING", "ISIDE_UNKNOWN", "mSources", "mDisplayFrame", "CREATOR" ],
  "methodNames" : [ "public WindowInsets calculateInsets(Rect frame, @Nullable InsetsState ignoringVisibilityState, boolean isScreenRound, boolean alwaysConsumeSystemBars, DisplayCutout cutout, int legacySoftInputMode, int legacyWindowFlags, int legacySystemUiFlags, @Nullable @InternalInsetsSide SparseIntArray typeSideMap)", "public Rect calculateVisibleInsets(Rect frame, @SoftInputModeFlags int softInputMode)", "public int calculateUncontrollableInsetsFromFrame(Rect frame)", "private boolean canControlSide(Rect frame, int side)", "private void processSource(InsetsSource source, Rect relativeFrame, boolean ignoreVisibility, Insets[] typeInsetsMap, @Nullable @InternalInsetsSide SparseIntArray typeSideMap, @Nullable boolean[] typeVisibilityMap)", "private void processSourceAsPublicType(InsetsSource source, Insets[] typeInsetsMap, @InternalInsetsSide @Nullable SparseIntArray typeSideMap, @Nullable boolean[] typeVisibilityMap, Insets insets, int type)", "private int getInsetSide(Insets insets)", "public InsetsSource getSource(@InternalInsetsType int type)", "public InsetsSource peekSource(@InternalInsetsType int type)", "public boolean hasSources()", "public boolean getSourceOrDefaultVisibility(@InternalInsetsType int type)", "public void setDisplayFrame(Rect frame)", "public Rect getDisplayFrame()", "public void removeSource(@InternalInsetsType int type)", "public void setSourceVisible(@InternalInsetsType int type, boolean visible)", "public void set(InsetsState other)", "public void set(InsetsState other, boolean copySources)", "public void addSource(InsetsSource source)", "public static ArraySet<Integer> toInternalType(@InsetsType int types)", "public static int toPublicType(@InternalInsetsType int type)", "public static boolean getDefaultVisibility(@InternalInsetsType int type)", "public static boolean containsType(@InternalInsetsType int[] types, @InternalInsetsType int type)", "public void dump(String prefix, PrintWriter pw)", "public static String typeToString(@InternalInsetsType int type)", "public boolean equals(Object o)", "public boolean equals(Object o, boolean excludingCaptionInsets, boolean excludeInvisibleImeFrames)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public void readFromParcel(Parcel in)", "public String toString()" ]
}