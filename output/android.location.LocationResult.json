{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/LocationResult.java",
  "packageName" : "android.location",
  "className" : "LocationResult",
  "comment" : "\n * A location result representing a list of locations, ordered from earliest to latest.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_ACCURACY_M",
    "type" : "float",
    "comment" : " could likely be lower, but we only want to throw out really absurd values.",
    "links" : [ ]
  }, {
    "name" : "MAX_SPEED_MPS",
    "type" : "float",
    "comment" : " than a correct reading.",
    "links" : [ ]
  }, {
    "name" : "mLocations",
    "type" : "ArrayList<Location>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<LocationResult>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static LocationResult create(@NonNull List<Location> locations)",
    "returnType" : "LocationResult",
    "comment" : "\n     * Creates a new LocationResult from the given locations, making a copy of each location.\n     * Locations must be ordered in the same order they were derived (earliest to latest).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static LocationResult create(@NonNull Location... locations)",
    "returnType" : "LocationResult",
    "comment" : "\n     * Creates a new LocationResult from the given locations, making a copy of each location.\n     * Locations must be ordered in the same order they were derived (earliest to latest).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static LocationResult wrap(@NonNull List<Location> locations)",
    "returnType" : "LocationResult",
    "comment" : "\n     * Creates a new LocationResult that takes ownership of the given locations without copying\n     * them. Callers must ensure the given locations are never mutated after this method is called.\n     * Locations must be ordered in the same order they were derived (earliest to latest).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static LocationResult wrap(@NonNull Location... locations)",
    "returnType" : "LocationResult",
    "comment" : "\n     * Creates a new LocationResult that takes ownership of the given locations without copying\n     * them. Callers must ensure the given locations are never mutated after this method is called.\n     * Locations must be ordered in the same order they were derived (earliest to latest).\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationResult validate() throws BadLocationException",
    "returnType" : "LocationResult",
    "comment" : "\n     * Throws an IllegalArgumentException if the ordering of locations does not appear to generally\n     * be from earliest to latest, or if any individual location is incomplete.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Location getLastLocation()",
    "returnType" : "Location",
    "comment" : "\n     * Returns the latest location in this location result, ie, the location at the highest index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of locations in this location result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Location get(@IntRange(from = 0) int i)",
    "returnType" : "Location",
    "comment" : "\n     * Returns the location at the given index, from 0 to {@link #size()} - 1. Locations at lower\n     * indices are from earlier in time than location at higher indices.\n     ",
    "links" : [ "#size()" ]
  }, {
    "name" : "public List<Location> asList()",
    "returnType" : "List<Location>",
    "comment" : "\n     * Returns an unmodifiable list of locations in this location result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationResult deepCopy()",
    "returnType" : "LocationResult",
    "comment" : "\n     * Returns a deep copy of this LocationResult.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationResult asLastLocationResult()",
    "returnType" : "LocationResult",
    "comment" : "\n     * Returns a LocationResult with only the last location from this location result.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationResult filter(Predicate<Location> predicate)",
    "returnType" : "LocationResult",
    "comment" : "\n     * Returns a LocationResult with only locations that pass the given predicate. This\n     * implementation will avoid allocations when no locations are filtered out. The predicate is\n     * guaranteed to be invoked once per location, in order from earliest to latest. If all\n     * locations are filtered out a null value is returned.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationResult map(Function<Location, Location> function)",
    "returnType" : "LocationResult",
    "comment" : "\n     * Returns a LocationResult with locations mapped to other locations. This implementation will\n     * avoid allocations when all locations are mapped to the same location. The function is\n     * guaranteed to be invoked once per location, in order from earliest to latest.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static LocationResult create(@NonNull List<Location> locations)", "public static LocationResult create(@NonNull Location... locations)", "public static LocationResult wrap(@NonNull List<Location> locations)", "public static LocationResult wrap(@NonNull Location... locations)", "public LocationResult validate() throws BadLocationException", "public Location getLastLocation()", "public int size()", "public Location get(@IntRange(from = 0) int i)", "public List<Location> asList()", "public LocationResult deepCopy()", "public LocationResult asLastLocationResult()", "public LocationResult filter(Predicate<Location> predicate)", "public LocationResult map(Function<Location, Location> function)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel parcel, int flags)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "TAG", "MAX_ACCURACY_M", "MAX_SPEED_MPS", "mLocations", "CREATOR" ]
}