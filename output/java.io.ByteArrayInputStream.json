{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/ByteArrayInputStream.java",
  "packageName" : "java.io",
  "className" : "ByteArrayInputStream",
  "comment" : "\n * A {@code ByteArrayInputStream} contains\n * an internal buffer that contains bytes that\n * may be read from the stream. An internal\n * counter keeps track of the next byte to\n * be supplied by the {@code read} method.\n * <p>\n * Closing a {@code ByteArrayInputStream} has no effect. The methods in\n * this class can be called after the stream has been closed without\n * generating an {@code IOException}.\n *\n * @author  Arthur van Hoff\n * @see     java.io.StringBufferInputStream\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : "\n     * An array of bytes that was provided\n     * by the creator of the stream. Elements {@code buf[0]}\n     * through {@code buf[count-1]} are the\n     * only bytes that can ever be read from the\n     * stream;  element {@code buf[pos]} is\n     * the next byte to be read.\n     ",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : "\n     * The index of the next character to read from the input stream buffer.\n     * This value should always be nonnegative\n     * and not larger than the value of {@code count}.\n     * The next byte to be read from the input stream buffer\n     * will be {@code buf[pos]}.\n     ",
    "links" : [ ]
  }, {
    "name" : "mark",
    "type" : "int",
    "comment" : "\n     * The currently marked position in the stream.\n     * ByteArrayInputStream objects are marked at position zero by\n     * default when constructed.  They may be marked at another\n     * position within the buffer by the {@code mark()} method.\n     * The current buffer position is set to this point by the\n     * {@code reset()} method.\n     * <p>\n     * If no mark has been set, then the value of mark is the offset\n     * passed to the constructor (or 0 if the offset was not supplied).\n     *\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "\n     * The index one greater than the last valid character in the input\n     * stream buffer.\n     * This value should always be nonnegative\n     * and not larger than the length of {@code buf}.\n     * It  is one greater than the position of\n     * the last byte within {@code buf} that\n     * can ever be read  from the input stream buffer.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized int read()",
    "returnType" : "int",
    "comment" : "\n     * Reads the next byte of data from this input stream. The value\n     * byte is returned as an {@code int} in the range\n     * {@code 0} to {@code 255}. If no byte is available\n     * because the end of the stream has been reached, the value\n     * {@code -1} is returned.\n     * <p>\n     * This {@code read} method\n     * cannot block.\n     *\n     * @return  the next byte of data, or {@code -1} if the end of the\n     *          stream has been reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int read(byte[] b, int off, int len)",
    "returnType" : "int",
    "comment" : "\n     * Reads up to {@code len} bytes of data into an array of bytes from this\n     * input stream.  If {@code pos} equals {@code count}, then {@code -1} is\n     * returned to indicate end of file.  Otherwise, the  number {@code k} of\n     * bytes read is equal to the smaller of {@code len} and {@code count-pos}.\n     * If {@code k} is positive, then bytes {@code buf[pos]} through\n     * {@code buf[pos+k-1]} are copied into {@code b[off]} through\n     * {@code b[off+k-1]} in the manner performed by {@code System.arraycopy}.\n     * The value {@code k} is added into {@code pos} and {@code k} is returned.\n     * <p>\n     * This {@code read} method cannot block.\n     *\n     * @param   b     the buffer into which the data is read.\n     * @param   off   the start offset in the destination array {@code b}\n     * @param   len   the maximum number of bytes read.\n     * @return  the total number of bytes read into the buffer, or\n     *          {@code -1} if there is no more data because the end of\n     *          the stream has been reached.\n     * @throws  NullPointerException If {@code b} is {@code null}.\n     * @throws  IndexOutOfBoundsException If {@code off} is negative,\n     * {@code len} is negative, or {@code len} is greater than\n     * {@code b.length - off}\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized byte[] readAllBytes()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int readNBytes(byte[] b, int off, int len)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized long transferTo(OutputStream out) throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized long skip(long n)",
    "returnType" : "long",
    "comment" : "\n     * Skips {@code n} bytes of input from this input stream. Fewer\n     * bytes might be skipped if the end of the input stream is reached.\n     * The actual number {@code k}\n     * of bytes to be skipped is equal to the smaller\n     * of {@code n} and  {@code count-pos}.\n     * The value {@code k} is added into {@code pos}\n     * and {@code k} is returned.\n     *\n     * @param   n   the number of bytes to be skipped.\n     * @return  the actual number of bytes skipped.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int available()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of remaining bytes that can be read (or skipped over)\n     * from this input stream.\n     * <p>\n     * The value returned is {@code count - pos},\n     * which is the number of bytes remaining to be read from the input buffer.\n     *\n     * @return  the number of remaining bytes that can be read (or skipped\n     *          over) from this input stream without blocking.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this {@code InputStream} supports mark/reset. The\n     * {@code markSupported} method of {@code ByteArrayInputStream}\n     * always returns {@code true}.\n     *\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mark(int readAheadLimit)",
    "returnType" : "void",
    "comment" : "\n     * Set the current marked position in the stream.\n     * ByteArrayInputStream objects are marked at position zero by\n     * default when constructed.  They may be marked at another\n     * position within the buffer by this method.\n     * <p>\n     * If no mark has been set, then the value of the mark is the\n     * offset passed to the constructor (or 0 if the offset was not\n     * supplied).\n     *\n     * <p> Note: The {@code readAheadLimit} for this class\n     *  has no meaning.\n     *\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the buffer to the marked position.  The marked position\n     * is 0 unless another position was marked or an offset was specified\n     * in the constructor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closing a {@code ByteArrayInputStream} has no effect. The methods in\n     * this class can be called after the stream has been closed without\n     * generating an {@code IOException}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized int read()", "public synchronized int read(byte[] b, int off, int len)", "public synchronized byte[] readAllBytes()", "public int readNBytes(byte[] b, int off, int len)", "public synchronized long transferTo(OutputStream out) throws IOException", "public synchronized long skip(long n)", "public synchronized int available()", "public boolean markSupported()", "public void mark(int readAheadLimit)", "public synchronized void reset()", "public void close() throws IOException" ],
  "variableNames" : [ "buf", "pos", "mark", "count" ]
}