{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothProfile.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothProfile",
  "comment" : "\n * Public APIs for the Bluetooth Profiles.\n *\n * <p>Clients should call {@link BluetoothAdapter#getProfileProxy}, to get the Profile Proxy. Each\n * public profile implements this interface.\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "EXTRA_STATE",
    "type" : "String",
    "comment" : "\n     * Extra for the connection state intents of the individual profiles.\n     *\n     * <p>This extra represents the current connection state of the profile of the Bluetooth device.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PREVIOUS_STATE",
    "type" : "String",
    "comment" : "\n     * Extra for the connection state intents of the individual profiles.\n     *\n     * <p>This extra represents the previous connection state of the profile of the Bluetooth\n     * device.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_DISCONNECTED",
    "type" : "int",
    "comment" : " The profile is in disconnected state ",
    "links" : [ ]
  }, {
    "name" : "STATE_CONNECTING",
    "type" : "int",
    "comment" : " The profile is in connecting state ",
    "links" : [ ]
  }, {
    "name" : "STATE_CONNECTED",
    "type" : "int",
    "comment" : " The profile is in connected state ",
    "links" : [ ]
  }, {
    "name" : "STATE_DISCONNECTING",
    "type" : "int",
    "comment" : " The profile is in disconnecting state ",
    "links" : [ ]
  }, {
    "name" : "HEADSET",
    "type" : "int",
    "comment" : " Headset and Handsfree profile ",
    "links" : [ ]
  }, {
    "name" : "A2DP",
    "type" : "int",
    "comment" : " A2DP profile. ",
    "links" : [ ]
  }, {
    "name" : "HEALTH",
    "type" : "int",
    "comment" : "\n     * Health Profile\n     *\n     * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New apps should\n     *     use Bluetooth Low Energy based solutions such as {@link BluetoothGatt}, {@link\n     *     BluetoothAdapter#listenUsingL2capChannel()}, or {@link\n     *     BluetoothDevice#createL2capChannel(int)}\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt", "android.bluetooth.BluetoothDevice#createL2capChannel(int)", "android.bluetooth.BluetoothAdapter#listenUsingL2capChannel()" ]
  }, {
    "name" : "HID_HOST",
    "type" : "int",
    "comment" : "\n     * HID Host\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PAN",
    "type" : "int",
    "comment" : "\n     * PAN Profile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PBAP",
    "type" : "int",
    "comment" : "\n     * PBAP\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GATT",
    "type" : "int",
    "comment" : " GATT ",
    "links" : [ ]
  }, {
    "name" : "GATT_SERVER",
    "type" : "int",
    "comment" : " GATT_SERVER ",
    "links" : [ ]
  }, {
    "name" : "MAP",
    "type" : "int",
    "comment" : "\n     * MAP Profile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SAP",
    "type" : "int",
    "comment" : "\n     * SAP Profile\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "A2DP_SINK",
    "type" : "int",
    "comment" : "\n     * A2DP Sink Profile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AVRCP_CONTROLLER",
    "type" : "int",
    "comment" : "\n     * AVRCP Controller Profile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AVRCP",
    "type" : "int",
    "comment" : "\n     * AVRCP Target Profile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HEADSET_CLIENT",
    "type" : "int",
    "comment" : "\n     * Headset Client - HFP HF Role\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PBAP_CLIENT",
    "type" : "int",
    "comment" : "\n     * PBAP Client\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAP_CLIENT",
    "type" : "int",
    "comment" : "\n     * MAP Messaging Client Equipment (MCE)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HID_DEVICE",
    "type" : "int",
    "comment" : " HID Device ",
    "links" : [ ]
  }, {
    "name" : "OPP",
    "type" : "int",
    "comment" : "\n     * Object Push Profile (OPP)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HEARING_AID",
    "type" : "int",
    "comment" : " Hearing Aid Device ",
    "links" : [ ]
  }, {
    "name" : "LE_AUDIO",
    "type" : "int",
    "comment" : " LE Audio Device ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_CONTROL",
    "type" : "int",
    "comment" : "\n     * Volume Control profile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MCP_SERVER",
    "type" : "int",
    "comment" : "\n     * @hide Media Control Profile server\n     ",
    "links" : [ ]
  }, {
    "name" : "CSIP_SET_COORDINATOR",
    "type" : "int",
    "comment" : " Coordinated Set Identification Profile set coordinator ",
    "links" : [ ]
  }, {
    "name" : "LE_AUDIO_BROADCAST",
    "type" : "int",
    "comment" : "\n     * LE Audio Broadcast Source\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LE_CALL_CONTROL",
    "type" : "int",
    "comment" : "\n     * @hide Telephone Bearer Service from Call Control Profile\n     ",
    "links" : [ ]
  }, {
    "name" : "HAP_CLIENT",
    "type" : "int",
    "comment" : "\n     * Hearing Access Profile Client\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "LE_AUDIO_BROADCAST_ASSISTANT",
    "type" : "int",
    "comment" : "\n     * LE Audio Broadcast Assistant\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BATTERY",
    "type" : "int",
    "comment" : "\n     * Battery Service\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_PROFILE_ID",
    "type" : "int",
    "comment" : "\n     * Max profile ID. This value should be updated whenever a new profile is added to match the\n     * largest value assigned to a profile.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_AUTO_CONNECT",
    "type" : "int",
    "comment" : "\n     * Default priority for devices that we try to auto-connect to and allow incoming connections\n     * for the profile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_ON",
    "type" : "int",
    "comment" : "\n     * Default priority for devices that allow incoming and outgoing connections for the profile\n     *\n     * @hide\n     * @deprecated Replaced with {@link #CONNECTION_POLICY_ALLOWED}\n     ",
    "links" : [ "#CONNECTION_POLICY_ALLOWED" ]
  }, {
    "name" : "PRIORITY_OFF",
    "type" : "int",
    "comment" : "\n     * Default priority for devices that does not allow incoming connections and outgoing\n     * connections for the profile.\n     *\n     * @hide\n     * @deprecated Replaced with {@link #CONNECTION_POLICY_FORBIDDEN}\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN" ]
  }, {
    "name" : "PRIORITY_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Default priority when not set or when the device is unpaired\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_POLICY_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Default connection policy for devices that allow incoming and outgoing connections for the\n     * profile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_POLICY_FORBIDDEN",
    "type" : "int",
    "comment" : "\n     * Default connection policy for devices that do not allow incoming or outgoing connections for\n     * the profile.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_POLICY_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Default connection policy when not set or when the device is unpaired\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get connected devices for this specific profile.\n     *\n     * <p>Return the set of devices which are in state {@link #STATE_CONNECTED}\n     *\n     * @return List of devices. The list will be empty on error.\n     ",
    "links" : [ "#STATE_CONNECTED" ]
  }, {
    "name" : " List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get a list of devices that match any of the given connection states.\n     *\n     * <p>If none of the devices match any of the given states, an empty list will be returned.\n     *\n     * @param states Array of states. States can be one of {@link #STATE_CONNECTED}, {@link\n     *     #STATE_CONNECTING}, {@link #STATE_DISCONNECTED}, {@link #STATE_DISCONNECTING},\n     * @return List of devices. The list will be empty on error.\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : " int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the current connection state of the profile\n     *\n     * @param device Remote bluetooth device.\n     * @return State of the profile connection. One of {@link #STATE_CONNECTED}, {@link\n     *     #STATE_CONNECTING}, {@link #STATE_DISCONNECTED}, {@link #STATE_DISCONNECTING}\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : " void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : "\n     * Called by the BluetoothAdapter when the Bluetooth service is connected with a Binder instance\n     * corresponding to the service associated with the profile\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * Called by the BluetoothAdapter when the Bluetooth service connection has been lost\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : "\n     * Get the BluetoothAdapter that created this proxy\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static String getConnectionStateName(int connectionState)",
    "returnType" : "String",
    "comment" : "\n     * Convert an integer value of connection state into human readable string\n     *\n     * @param connectionState - One of {@link #STATE_DISCONNECTED}, {@link #STATE_CONNECTING},\n     *     {@link #STATE_CONNECTED}, or {@link #STATE_DISCONNECTED}\n     * @return a string representation of the connection state, STATE_UNKNOWN if the state is not\n     *     defined\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_CONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : " static String getProfileName(int profile)",
    "returnType" : "String",
    "comment" : "\n     * Convert an integer value of profile ID into human readable string\n     *\n     * @param profile profile ID\n     * @return profile name as String, UNKNOWN_PROFILE if the profile ID is not defined.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " List<BluetoothDevice> getConnectedDevices()", " List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", " int getConnectionState(BluetoothDevice device)", " void onServiceConnected(IBinder service)", " void onServiceDisconnected()", " BluetoothAdapter getAdapter()", " static String getConnectionStateName(int connectionState)", " static String getProfileName(int profile)" ],
  "variableNames" : [ "EXTRA_STATE", "EXTRA_PREVIOUS_STATE", "STATE_DISCONNECTED", "STATE_CONNECTING", "STATE_CONNECTED", "STATE_DISCONNECTING", "HEADSET", "A2DP", "HEALTH", "HID_HOST", "PAN", "PBAP", "GATT", "GATT_SERVER", "MAP", "SAP", "A2DP_SINK", "AVRCP_CONTROLLER", "AVRCP", "HEADSET_CLIENT", "PBAP_CLIENT", "MAP_CLIENT", "HID_DEVICE", "OPP", "HEARING_AID", "LE_AUDIO", "VOLUME_CONTROL", "MCP_SERVER", "CSIP_SET_COORDINATOR", "LE_AUDIO_BROADCAST", "LE_CALL_CONTROL", "HAP_CLIENT", "LE_AUDIO_BROADCAST_ASSISTANT", "BATTERY", "MAX_PROFILE_ID", "PRIORITY_AUTO_CONNECT", "PRIORITY_ON", "PRIORITY_OFF", "PRIORITY_UNDEFINED", "CONNECTION_POLICY_ALLOWED", "CONNECTION_POLICY_FORBIDDEN", "CONNECTION_POLICY_UNKNOWN" ]
}