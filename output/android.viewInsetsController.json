{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/InsetsController.java",
  "packageName" : "android.view",
  "className" : "InsetsController",
  "comment" : "\n * Implements {@link WindowInsetsController} on the client.\n * @hide\n ",
  "variables" : [ {
    "name" : "mTypesBeingCancelled",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_DURATION_SHOW_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_DURATION_HIDE_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_DURATION_SYNC_IME_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_DURATION_UNSYNC_IME_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PENDING_CONTROL_TIMEOUT_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_BARS_INTERPOLATOR",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYNC_IME_INTERPOLATOR",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LINEAR_OUT_SLOW_IN_INTERPOLATOR",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FAST_OUT_LINEAR_IN_INTERPOLATOR",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WARN",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_INSETS_DURING_ANIMATION_SHOWN",
    "type" : "int",
    "comment" : "\n     * Layout mode during insets animation: The views should be laid out as if the changing inset\n     * types are fully shown. Before starting the animation, {@link View#onApplyWindowInsets} will\n     * be called as if the changing insets types are shown, which will result in the views being\n     * laid out as if the insets are fully shown.\n     ",
    "links" : [ "View#onApplyWindowInsets" ]
  }, {
    "name" : "LAYOUT_INSETS_DURING_ANIMATION_HIDDEN",
    "type" : "int",
    "comment" : "\n     * Layout mode during insets animation: The views should be laid out as if the changing inset\n     * types are fully hidden. Before starting the animation, {@link View#onApplyWindowInsets} will\n     * be called as if the changing insets types are hidden, which will result in the views being\n     * laid out as if the insets are fully hidden.\n     ",
    "links" : [ "View#onApplyWindowInsets" ]
  }, {
    "name" : "ANIMATION_TYPE_NONE",
    "type" : "int",
    "comment" : " Not running an animation. ",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_TYPE_SHOW",
    "type" : "int",
    "comment" : " Running animation will show insets ",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_TYPE_HIDE",
    "type" : "int",
    "comment" : " Running animation will hide insets ",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_TYPE_USER",
    "type" : "int",
    "comment" : " Running animation is controlled by user via {@link #controlWindowInsetsAnimation} ",
    "links" : [ "#controlWindowInsetsAnimation" ]
  }, {
    "name" : "sEvaluator",
    "type" : "TypeEvaluator<Insets>",
    "comment" : "\n     * Translation animation evaluator.\n     ",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "InsetsState",
    "comment" : " The local state ",
    "links" : [ ]
  }, {
    "name" : "mLastDispatchedState",
    "type" : "InsetsState",
    "comment" : " The state dispatched from server ",
    "links" : [ ]
  }, {
    "name" : "mRequestedState",
    "type" : "InsetsState",
    "comment" : " The state sent to server ",
    "links" : [ ]
  }, {
    "name" : "mFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConsumerCreator",
    "type" : "BiFunction<InsetsController, Integer, InsetsSourceConsumer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceConsumers",
    "type" : "SparseArray<InsetsSourceConsumer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHost",
    "type" : "Host",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpControlArray",
    "type" : "SparseArray<InsetsSourceControl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunningAnimations",
    "type" : "ArrayList<RunningAnimation>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpRunningAnims",
    "type" : "ArrayList<WindowInsetsAnimation>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnmodifiableTmpRunningAnims",
    "type" : "List<WindowInsetsAnimation>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpFinishedControls",
    "type" : "ArrayList<InsetsAnimationControlImpl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastInsets",
    "type" : "WindowInsets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimCallbackScheduled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimCallback",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingImeControlRequest",
    "type" : "PendingControlRequest",
    "comment" : " Pending control request that is waiting on IME to be ready to be shown ",
    "links" : [ ]
  }, {
    "name" : "mLastLegacySoftInputMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastLegacyWindowFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastLegacySystemUiFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastDisplayCutout",
    "type" : "DisplayCutout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartingAnimation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptionInsetsHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationsDisabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingControlTimeout",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mControllableInsetsChangedListeners",
    "type" : "ArrayList<OnControllableInsetsChangedListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastStartedAnimTypes",
    "type" : "int",
    "comment" : " Set of inset types for which an animation was started since last resetting this field ",
    "links" : [ ]
  }, {
    "name" : "mDisabledUserAnimationInsetsTypes",
    "type" : "int",
    "comment" : " Set of inset types which cannot be controlled by the user animation ",
    "links" : [ ]
  }, {
    "name" : "mInvokeControllableInsetsChangedListeners",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onFrameChanged(Rect frame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsState getState()",
    "returnType" : "InsetsState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequestedVisible(int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsState getLastDispatchedState()",
    "returnType" : "InsetsState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onStateChanged(InsetsState state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateState(InsetsState newState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDisabledUserAnimationTypes(@InsetsType int disabledUserAnimationTypes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean captionInsetsUnchanged()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowInsets calculateInsets(boolean isScreenRound, boolean alwaysConsumeSystemBars, DisplayCutout cutout, int legacySoftInputMode, int legacyWindowFlags, int legacySystemUiFlags)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * @see InsetsState#calculateInsets\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect calculateVisibleInsets(@SoftInputModeFlags int softInputMode)",
    "returnType" : "Rect",
    "comment" : "\n     * @see InsetsState#calculateVisibleInsets(Rect, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onControlsChanged(InsetsSourceControl[] activeControls)",
    "returnType" : "void",
    "comment" : "\n     * Called when the server has dispatched us a new set of inset controls.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void show(@InsetsType int types)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void show(@InsetsType int types, boolean fromIme)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void hide(@InsetsType int types)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void hide(@InsetsType int types, boolean fromIme)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void controlWindowInsetsAnimation(@InsetsType int types, long durationMillis, @Nullable Interpolator interpolator, @Nullable CancellationSignal cancellationSignal, @NonNull WindowInsetsAnimationControlListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void controlWindowInsetsAnimation(@InsetsType int types, @Nullable CancellationSignal cancellationSignal, WindowInsetsAnimationControlListener listener, boolean fromIme, long durationMs, @Nullable Interpolator interpolator, @AnimationType int animationType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void controlAnimationUnchecked(@InsetsType int types, @Nullable CancellationSignal cancellationSignal, WindowInsetsAnimationControlListener listener, Rect frame, boolean fromIme, long durationMs, Interpolator interpolator, @AnimationType int animationType, @LayoutInsetsDuringAnimation int layoutInsetsDuringAnimation, boolean useInsetsAnimationThread)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Pair<Integer, Boolean> collectSourceControls(boolean fromIme, ArraySet<Integer> internalTypes, SparseArray<InsetsSourceControl> controls, @AnimationType int animationType)",
    "returnType" : "Pair<Integer, Boolean>",
    "comment" : "\n     * @return Pair of (types ready to animate, IME ready to animate).\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getLayoutInsetsDuringAnimationMode(@InsetsType int types)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelExistingControllers(@InsetsType int types)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void abortPendingImeControlRequest()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyFinished(InsetsAnimationControlRunner runner, boolean shown)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applySurfaceParams(final SyncRtSurfaceTransactionApplier.SurfaceParams... params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyControlRevoked(InsetsSourceConsumer consumer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelAnimation(InsetsAnimationControlRunner control, boolean invokeCallback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyLocalVisibilityOverride()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSourceConsumer getSourceConsumer(@InternalInsetsType int type)",
    "returnType" : "InsetsSourceConsumer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyVisibilityChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateCompatSysUiVisibility(@InternalInsetsType int type, boolean visible, boolean hasControl)",
    "returnType" : "void",
    "comment" : "\n     * @see ViewRootImpl#updateCompatSysUiVisibility(int, boolean, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusGained()",
    "returnType" : "void",
    "comment" : "\n     * Called when current window gains focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusLost()",
    "returnType" : "void",
    "comment" : "\n     * Called when current window loses focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyImeVisibility(boolean setVisible)",
    "returnType" : "void",
    "comment" : "\n     * Used by {@link ImeInsetsSourceConsumer} when IME decides to be shown/hidden.\n     * @hide\n     ",
    "links" : [ "ImeInsetsSourceConsumer" ]
  }, {
    "name" : "public int getAnimationType(@InternalInsetsType int type)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateRequestedState()",
    "returnType" : "void",
    "comment" : "\n     * Sends the local visibility state back to window manager if it is changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyAnimation(@InsetsType final int types, boolean show, boolean fromIme)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void hideDirectly(@InsetsType int types, boolean animationFinished, @AnimationType int animationType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void showDirectly(@InsetsType int types)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancelExistingAnimations()",
    "returnType" : "void",
    "comment" : "\n     * Cancel on-going animation to show/hide {@link InsetsType}.\n     ",
    "links" : [ "InsetsType" ]
  }, {
    "name" : " void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startAnimation(InsetsAnimationControlImpl controller, WindowInsetsAnimationControlListener listener, int types, WindowInsetsAnimation animation, Bounds bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchAnimationEnd(WindowInsetsAnimation animation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void scheduleApplyChangeInsets(InsetsAnimationControlRunner runner)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSystemBarsAppearance(@Appearance int appearance, @Appearance int mask)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSystemBarsAppearance()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCaptionInsetsHeight(int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSystemBarsBehavior(@Behavior int behavior)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSystemBarsBehavior()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAnimationsDisabled(boolean disable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int calculateControllableTypes()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int invokeControllableInsetsChangedListeners()",
    "returnType" : "int",
    "comment" : "\n     * @return The types that are now animating due to a listener invoking control/show/hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnControllableInsetsChangedListener(OnControllableInsetsChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnControllableInsetsChangedListener(OnControllableInsetsChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void releaseSurfaceControlFromRt(SurfaceControl sc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportPerceptible(int types, boolean perceptible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Host getHost()",
    "returnType" : "Host",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mTypesBeingCancelled", "TAG", "ANIMATION_DURATION_SHOW_MS", "ANIMATION_DURATION_HIDE_MS", "ANIMATION_DURATION_SYNC_IME_MS", "ANIMATION_DURATION_UNSYNC_IME_MS", "PENDING_CONTROL_TIMEOUT_MS", "SYSTEM_BARS_INTERPOLATOR", "SYNC_IME_INTERPOLATOR", "LINEAR_OUT_SLOW_IN_INTERPOLATOR", "FAST_OUT_LINEAR_IN_INTERPOLATOR", "DEBUG", "WARN", "LAYOUT_INSETS_DURING_ANIMATION_SHOWN", "LAYOUT_INSETS_DURING_ANIMATION_HIDDEN", "ANIMATION_TYPE_NONE", "ANIMATION_TYPE_SHOW", "ANIMATION_TYPE_HIDE", "ANIMATION_TYPE_USER", "sEvaluator", "mState", "mLastDispatchedState", "mRequestedState", "mFrame", "mConsumerCreator", "mSourceConsumers", "mHost", "mHandler", "mTmpControlArray", "mRunningAnimations", "mTmpRunningAnims", "mUnmodifiableTmpRunningAnims", "mTmpFinishedControls", "mLastInsets", "mAnimCallbackScheduled", "mAnimCallback", "mPendingImeControlRequest", "mLastLegacySoftInputMode", "mLastLegacyWindowFlags", "mLastLegacySystemUiFlags", "mLastDisplayCutout", "mStartingAnimation", "mCaptionInsetsHeight", "mAnimationsDisabled", "mPendingControlTimeout", "mControllableInsetsChangedListeners", "mLastStartedAnimTypes", "mDisabledUserAnimationInsetsTypes", "mInvokeControllableInsetsChangedListeners" ],
  "methodNames" : [ "public void onFrameChanged(Rect frame)", "public InsetsState getState()", "public boolean isRequestedVisible(int type)", "public InsetsState getLastDispatchedState()", "public boolean onStateChanged(InsetsState state)", "private void updateState(InsetsState newState)", "private void updateDisabledUserAnimationTypes(@InsetsType int disabledUserAnimationTypes)", "private boolean captionInsetsUnchanged()", "public WindowInsets calculateInsets(boolean isScreenRound, boolean alwaysConsumeSystemBars, DisplayCutout cutout, int legacySoftInputMode, int legacyWindowFlags, int legacySystemUiFlags)", "public Rect calculateVisibleInsets(@SoftInputModeFlags int softInputMode)", "public void onControlsChanged(InsetsSourceControl[] activeControls)", "public void show(@InsetsType int types)", "public void show(@InsetsType int types, boolean fromIme)", "public void hide(@InsetsType int types)", " void hide(@InsetsType int types, boolean fromIme)", "public void controlWindowInsetsAnimation(@InsetsType int types, long durationMillis, @Nullable Interpolator interpolator, @Nullable CancellationSignal cancellationSignal, @NonNull WindowInsetsAnimationControlListener listener)", "private void controlWindowInsetsAnimation(@InsetsType int types, @Nullable CancellationSignal cancellationSignal, WindowInsetsAnimationControlListener listener, boolean fromIme, long durationMs, @Nullable Interpolator interpolator, @AnimationType int animationType)", "private void controlAnimationUnchecked(@InsetsType int types, @Nullable CancellationSignal cancellationSignal, WindowInsetsAnimationControlListener listener, Rect frame, boolean fromIme, long durationMs, Interpolator interpolator, @AnimationType int animationType, @LayoutInsetsDuringAnimation int layoutInsetsDuringAnimation, boolean useInsetsAnimationThread)", "private Pair<Integer, Boolean> collectSourceControls(boolean fromIme, ArraySet<Integer> internalTypes, SparseArray<InsetsSourceControl> controls, @AnimationType int animationType)", "private int getLayoutInsetsDuringAnimationMode(@InsetsType int types)", "private void cancelExistingControllers(@InsetsType int types)", "private void abortPendingImeControlRequest()", "public void notifyFinished(InsetsAnimationControlRunner runner, boolean shown)", "public void applySurfaceParams(final SyncRtSurfaceTransactionApplier.SurfaceParams... params)", " void notifyControlRevoked(InsetsSourceConsumer consumer)", "private void cancelAnimation(InsetsAnimationControlRunner control, boolean invokeCallback)", "private void applyLocalVisibilityOverride()", "public InsetsSourceConsumer getSourceConsumer(@InternalInsetsType int type)", "public void notifyVisibilityChanged()", "public void updateCompatSysUiVisibility(@InternalInsetsType int type, boolean visible, boolean hasControl)", "public void onWindowFocusGained()", "public void onWindowFocusLost()", "public void applyImeVisibility(boolean setVisible)", "public int getAnimationType(@InternalInsetsType int type)", "private void updateRequestedState()", "public void applyAnimation(@InsetsType final int types, boolean show, boolean fromIme)", "private void hideDirectly(@InsetsType int types, boolean animationFinished, @AnimationType int animationType)", "private void showDirectly(@InsetsType int types)", "public void cancelExistingAnimations()", " void dump(String prefix, PrintWriter pw)", "public void startAnimation(InsetsAnimationControlImpl controller, WindowInsetsAnimationControlListener listener, int types, WindowInsetsAnimation animation, Bounds bounds)", "public void dispatchAnimationEnd(WindowInsetsAnimation animation)", "public void scheduleApplyChangeInsets(InsetsAnimationControlRunner runner)", "public void setSystemBarsAppearance(@Appearance int appearance, @Appearance int mask)", "public int getSystemBarsAppearance()", "public void setCaptionInsetsHeight(int height)", "public void setSystemBarsBehavior(@Behavior int behavior)", "public int getSystemBarsBehavior()", "public void setAnimationsDisabled(boolean disable)", "private int calculateControllableTypes()", "private int invokeControllableInsetsChangedListeners()", "public void addOnControllableInsetsChangedListener(OnControllableInsetsChangedListener listener)", "public void removeOnControllableInsetsChangedListener(OnControllableInsetsChangedListener listener)", "public void releaseSurfaceControlFromRt(SurfaceControl sc)", "public void reportPerceptible(int types, boolean perceptible)", " Host getHost()" ]
}