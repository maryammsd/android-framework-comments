{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/http/conn/ssl/X509HostnameVerifier.java",
  "packageName" : "org.apache.http.conn.ssl",
  "className" : "X509HostnameVerifier",
  "comment" : "\n * Interface for checking if a hostname matches the names stored inside the\n * server's X.509 certificate.  Implements javax.net.ssl.HostnameVerifier, but\n * we don't actually use that interface.  Instead we added some methods that\n * take String parameters (instead of javax.net.ssl.HostnameVerifier's\n * SSLSession).  JUnit is a lot easier this way!  :-)\n * <p/>\n * We provide the HostnameVerifier.DEFAULT, HostnameVerifier.STRICT, and\n * HostnameVerifier.ALLOW_ALL implementations.  But feel free to define\n * your own implementation!\n * <p/>\n * Inspired by Sebastian Hauer's original StrictSSLProtocolSocketFactory in the\n * HttpClient \"contrib\" repository.\n *\n * @author Julius Davies\n * @author <a href=\"mailto:hauer@psicode.com\">Sebastian Hauer</a>\n *\n * @since 4.0 (8-Dec-2006)\n *\n * @deprecated Please use {@link java.net.URL#openConnection} instead.\n *     Please visit <a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\">this webpage</a>\n *     for further details.\n ",
  "links" : [ "java.net.URL#openConnection" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean verify(String host, SSLSession session)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void verify(String host, SSLSocket ssl) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void verify(String host, X509Certificate cert) throws SSLException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void verify(String host, String[] cns, String[] subjectAlts) throws SSLException",
    "returnType" : "void",
    "comment" : "\n     * Checks to see if the supplied hostname matches any of the supplied CNs\n     * or \"DNS\" Subject-Alts.  Most implementations only look at the first CN,\n     * and ignore any additional CNs.  Most implementations do look at all of\n     * the \"DNS\" Subject-Alts. The CNs or Subject-Alts may contain wildcards\n     * according to RFC 2818.\n     *\n     * @param cns         CN fields, in order, as extracted from the X.509\n     *                    certificate.\n     * @param subjectAlts Subject-Alt fields of type 2 (\"DNS\"), as extracted\n     *                    from the X.509 certificate.\n     * @param host        The hostname to verify.\n     * @throws SSLException If verification failed.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean verify(String host, SSLSession session)", " void verify(String host, SSLSocket ssl) throws IOException", " void verify(String host, X509Certificate cert) throws SSLException", " void verify(String host, String[] cns, String[] subjectAlts) throws SSLException" ],
  "variableNames" : [ ]
}