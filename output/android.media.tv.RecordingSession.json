{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/TvInputService.java",
  "packageName" : "android.media.tv",
  "className" : "RecordingSession",
  "comment" : "\n     * Base class for derived classes to implement to provide a TV input recording session.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallback",
    "type" : "ITvInputSessionCallback",
    "comment" : " @GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mPendingActions",
    "type" : "List<Runnable>",
    "comment" : " @GuardedBy(\"mLock\")",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void notifyTuned(Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that this recording session has been tuned to the given channel\n         * and is ready to start recording.\n         *\n         * <p>Upon receiving a call to {@link #onTune(Uri)}, the session is expected to tune to the\n         * passed channel and call this method to indicate that it is now available for immediate\n         * recording. When {@link #onStartRecording(Uri)} is called, recording must start with\n         * minimal delay.\n         *\n         * @param channelUri The URI of a channel.\n         ",
    "links" : [ "#onTune(Uri)", "#onStartRecording(Uri)" ]
  }, {
    "name" : "public void notifyRecordingStopped(final Uri recordedProgramUri)",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that this recording session has stopped recording and created a\n         * new data entry in the {@link TvContract.RecordedPrograms} table that describes the newly\n         * recorded program.\n         *\n         * <p>The recording session must call this method in response to {@link #onStopRecording()}.\n         * The session may call it even before receiving a call to {@link #onStopRecording()} if a\n         * partially recorded program is available when there is an error.\n         *\n         * @param recordedProgramUri The URI of the newly recorded program.\n         ",
    "links" : [ "#onStopRecording()", "TvContract.RecordedPrograms" ]
  }, {
    "name" : "public void notifyError(@TvInputManager.RecordingError int error)",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that there is an error and this recording session is no longer\n         * able to start or continue recording. It may be called at any time after the recording\n         * session is created until {@link #onRelease()} is called.\n         *\n         * <p>The application may release the current session upon receiving the error code through\n         * {@link TvRecordingClient.RecordingCallback#onError(int)}. The session may call\n         * {@link #notifyRecordingStopped(Uri)} if a partially recorded but still playable program\n         * is available, before calling this method.\n         *\n         * @param error The error code. Should be one of the followings.\n         * <ul>\n         * <li>{@link TvInputManager#RECORDING_ERROR_UNKNOWN}\n         * <li>{@link TvInputManager#RECORDING_ERROR_INSUFFICIENT_SPACE}\n         * <li>{@link TvInputManager#RECORDING_ERROR_RESOURCE_BUSY}\n         * </ul>\n         ",
    "links" : [ "#notifyRecordingStopped(Uri)", "android.media.tv.TvInputManager#RECORDING_ERROR_RESOURCE_BUSY", "android.media.tv.TvInputManager#RECORDING_ERROR_UNKNOWN", "TvRecordingClient.RecordingCallback#onError(int)", "android.media.tv.TvInputManager#RECORDING_ERROR_INSUFFICIENT_SPACE", "#onRelease()" ]
  }, {
    "name" : "public void notifySessionEvent(@NonNull final String eventType, final Bundle eventArgs)",
    "returnType" : "void",
    "comment" : "\n         * Dispatches an event to the application using this recording session.\n         *\n         * @param eventType The type of the event.\n         * @param eventArgs Optional arguments of the event.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onTune(Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to tune to a given channel for TV program recording.\n         *\n         * <p>The application may call this method before starting or after stopping recording, but\n         * not during recording.\n         *\n         * <p>The session must call {@link #notifyTuned(Uri)} if the tune request was fulfilled, or\n         * {@link #notifyError(int)} otherwise.\n         *\n         * @param channelUri The URI of a channel.\n         ",
    "links" : [ "#notifyError(int)", "#notifyTuned(Uri)" ]
  }, {
    "name" : "public void onTune(Uri channelUri, Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to tune to a given channel for TV program recording.\n         * Override this method in order to handle domain-specific features that are only known\n         * between certain TV inputs and their clients.\n         *\n         * <p>The application may call this method before starting or after stopping recording, but\n         * not during recording. The default implementation calls {@link #onTune(Uri)}.\n         *\n         * <p>The session must call {@link #notifyTuned(Uri)} if the tune request was fulfilled, or\n         * {@link #notifyError(int)} otherwise.\n         *\n         * @param channelUri The URI of a channel.\n         * @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped\n         *            name, i.e. prefixed with a package name you own, so that different developers\n         *            will not create conflicting keys.\n         ",
    "links" : [ "#notifyError(int)", "#onTune(Uri)", "#notifyTuned(Uri)" ]
  }, {
    "name" : "public abstract void onStartRecording(@Nullable Uri programUri)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to start TV program recording. Recording must start\n         * immediately when this method is called.\n         *\n         * <p>The application may supply the URI for a TV program for filling in program specific\n         * data fields in the {@link android.media.tv.TvContract.RecordedPrograms} table.\n         * A non-null {@code programUri} implies the started recording should be of that specific\n         * program, whereas null {@code programUri} does not impose such a requirement and the\n         * recording can span across multiple TV programs. In either case, the application must call\n         * {@link TvRecordingClient#stopRecording()} to stop the recording.\n         *\n         * <p>The session must call {@link #notifyError(int)} if the start request cannot be\n         * fulfilled.\n         *\n         * @param programUri The URI for the TV program to record, built by\n         *            {@link TvContract#buildProgramUri(long)}. Can be {@code null}.\n         ",
    "links" : [ "android.media.tv.TvRecordingClient#stopRecording()", "android.media.tv.TvContract.RecordedPrograms", "#notifyError(int)", "android.media.tv.TvContract#buildProgramUri(long)" ]
  }, {
    "name" : "public void onStartRecording(@Nullable Uri programUri, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to start TV program recording. Recording must start\n         * immediately when this method is called.\n         *\n         * <p>The application may supply the URI for a TV program for filling in program specific\n         * data fields in the {@link android.media.tv.TvContract.RecordedPrograms} table.\n         * A non-null {@code programUri} implies the started recording should be of that specific\n         * program, whereas null {@code programUri} does not impose such a requirement and the\n         * recording can span across multiple TV programs. In either case, the application must call\n         * {@link TvRecordingClient#stopRecording()} to stop the recording.\n         *\n         * <p>The session must call {@link #notifyError(int)} if the start request cannot be\n         * fulfilled.\n         *\n         * @param programUri The URI for the TV program to record, built by\n         *            {@link TvContract#buildProgramUri(long)}. Can be {@code null}.\n         * @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped\n         *            name, i.e. prefixed with a package name you own, so that different developers\n         *            will not create conflicting keys.\n         ",
    "links" : [ "android.media.tv.TvRecordingClient#stopRecording()", "android.media.tv.TvContract.RecordedPrograms", "#notifyError(int)", "android.media.tv.TvContract#buildProgramUri(long)" ]
  }, {
    "name" : "public abstract void onStopRecording()",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to stop TV program recording. Recording must stop\n         * immediately when this method is called.\n         *\n         * <p>The session must create a new data entry in the\n         * {@link android.media.tv.TvContract.RecordedPrograms} table that describes the newly\n         * recorded program and call {@link #notifyRecordingStopped(Uri)} with the URI to that\n         * entry.\n         * If the stop request cannot be fulfilled, the session must call {@link #notifyError(int)}.\n         *\n         ",
    "links" : [ "#notifyRecordingStopped(Uri)", "android.media.tv.TvContract.RecordedPrograms", "#notifyError(int)" ]
  }, {
    "name" : "public void onPauseRecording(@NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to pause TV program recording. Recording must pause\n         * immediately when this method is called.\n         *\n         * If the pause request cannot be fulfilled, the session must call\n         * {@link #notifyError(int)}.\n         *\n         * @param params Domain-specific data for recording request.\n         ",
    "links" : [ "#notifyError(int)" ]
  }, {
    "name" : "public void onResumeRecording(@NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to resume TV program recording. Recording must\n         * resume immediately when this method is called.\n         *\n         * If the resume request cannot be fulfilled, the session must call\n         * {@link #notifyError(int)}.\n         *\n         * @param params Domain-specific data for recording request.\n         ",
    "links" : [ "#notifyError(int)" ]
  }, {
    "name" : "public abstract void onRelease()",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to release all the resources held by this recording\n         * session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onAppPrivateCommand(@NonNull String action, Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Processes a private command sent from the application to the TV input. This can be used\n         * to provide domain-specific features that are only known between certain TV inputs and\n         * their clients.\n         *\n         * @param action Name of the command to be performed. This <em>must</em> be a scoped name,\n         *            i.e. prefixed with a package name you own, so that different developers will\n         *            not create conflicting commands.\n         * @param data Any data to include with the command.\n         ",
    "links" : [ ]
  }, {
    "name" : " void tune(Uri channelUri, Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTune(Uri, Bundle)}.\n         *\n         ",
    "links" : [ "#onTune(Uri" ]
  }, {
    "name" : " void release()",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onRelease()}.\n         *\n         ",
    "links" : [ "#onRelease()" ]
  }, {
    "name" : " void startRecording(@Nullable Uri programUri, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onStartRecording(Uri, Bundle)}.\n         *\n         ",
    "links" : [ "#onStartRecording(Uri" ]
  }, {
    "name" : " void stopRecording()",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onStopRecording()}.\n         *\n         ",
    "links" : [ "#onStopRecording()" ]
  }, {
    "name" : " void pauseRecording(@NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onPauseRecording(Bundle)}.\n         *\n         ",
    "links" : [ "#onPauseRecording(Bundle)" ]
  }, {
    "name" : " void resumeRecording(@NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onResumeRecording(Bundle)}.\n         *\n         ",
    "links" : [ "#onResumeRecording(Bundle)" ]
  }, {
    "name" : " void appPrivateCommand(String action, Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onAppPrivateCommand(String, Bundle)}.\n         ",
    "links" : [ "#onAppPrivateCommand(String" ]
  }, {
    "name" : "private void initialize(ITvInputSessionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void executeOrPostRunnableOnMainThread(Runnable action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void notifyTuned(Uri channelUri)", "public void notifyRecordingStopped(final Uri recordedProgramUri)", "public void notifyError(@TvInputManager.RecordingError int error)", "public void notifySessionEvent(@NonNull final String eventType, final Bundle eventArgs)", "public abstract void onTune(Uri channelUri)", "public void onTune(Uri channelUri, Bundle params)", "public abstract void onStartRecording(@Nullable Uri programUri)", "public void onStartRecording(@Nullable Uri programUri, @NonNull Bundle params)", "public abstract void onStopRecording()", "public void onPauseRecording(@NonNull Bundle params)", "public void onResumeRecording(@NonNull Bundle params)", "public abstract void onRelease()", "public void onAppPrivateCommand(@NonNull String action, Bundle data)", " void tune(Uri channelUri, Bundle params)", " void release()", " void startRecording(@Nullable Uri programUri, @NonNull Bundle params)", " void stopRecording()", " void pauseRecording(@NonNull Bundle params)", " void resumeRecording(@NonNull Bundle params)", " void appPrivateCommand(String action, Bundle data)", "private void initialize(ITvInputSessionCallback callback)", "private void executeOrPostRunnableOnMainThread(Runnable action)" ],
  "variableNames" : [ "mHandler", "mLock", "mSessionCallback", "mPendingActions" ]
}