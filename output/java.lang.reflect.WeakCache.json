{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/WeakCache.java",
  "packageName" : "java.lang.reflect",
  "className" : "WeakCache",
  "comment" : "\n * Cache mapping pairs of {@code (key, sub-key) -> value}. Keys and values are\n * weakly but sub-keys are strongly referenced.  Keys are passed directly to\n * {@link #get} method which also takes a {@code parameter}. Sub-keys are\n * calculated from keys and parameters using the {@code subKeyFactory} function\n * passed to the constructor. Values are calculated from keys and parameters\n * using the {@code valueFactory} function passed to the constructor.\n * Keys can be {@code null} and are compared by identity while sub-keys returned by\n * {@code subKeyFactory} or values returned by {@code valueFactory}\n * can not be null. Sub-keys are compared using their {@link #equals} method.\n * Entries are expunged from cache lazily on each invocation to {@link #get},\n * {@link #containsValue} or {@link #size} methods when the WeakReferences to\n * keys are cleared. Cleared WeakReferences to individual values don't cause\n * expunging, but such entries are logically treated as non-existent and\n * trigger re-evaluation of {@code valueFactory} on request for their\n * key/subKey.\n *\n * @author Peter Levart\n * @param <K> type of keys\n * @param <P> type of parameters\n * @param <V> type of values\n ",
  "links" : [ "#equals", "#containsValue", "#get", "#size" ],
  "variables" : [ {
    "name" : "refQueue",
    "type" : "ReferenceQueue<K>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "map",
    "type" : "ConcurrentMap<Object, ConcurrentMap<Object, Supplier<V>>>",
    "comment" : " the key type is Object for supporting null key",
    "links" : [ ]
  }, {
    "name" : "reverseMap",
    "type" : "ConcurrentMap<Supplier<V>, Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "subKeyFactory",
    "type" : "BiFunction<K, P, ?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "valueFactory",
    "type" : "BiFunction<K, P, V>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public V get(K key, P parameter)",
    "returnType" : "V",
    "comment" : "\n     * Look-up the value through the cache. This always evaluates the\n     * {@code subKeyFactory} function and optionally evaluates\n     * {@code valueFactory} function if there is no entry in the cache for given\n     * pair of (key, subKey) or the entry has already been cleared.\n     *\n     * @param key       possibly null key\n     * @param parameter parameter used together with key to create sub-key and\n     *                  value (should not be null)\n     * @return the cached value (never null)\n     * @throws NullPointerException if {@code parameter} passed in or\n     *                              {@code sub-key} calculated by\n     *                              {@code subKeyFactory} or {@code value}\n     *                              calculated by {@code valueFactory} is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsValue(V value)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the specified non-null value is already present in this\n     * {@code WeakCache}. The check is made using identity comparison regardless\n     * of whether value's class overrides {@link Object#equals} or not.\n     *\n     * @param value the non-null value to check\n     * @return true if given {@code value} is already cached\n     * @throws NullPointerException if value is null\n     ",
    "links" : [ "#equals" ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current number of cached entries that\n     * can decrease over time when keys/values are GC-ed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void expungeStaleEntries()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public V get(K key, P parameter)", "public boolean containsValue(V value)", "public int size()", "private void expungeStaleEntries()" ],
  "variableNames" : [ "refQueue", "map", "reverseMap", "subKeyFactory", "valueFactory" ]
}