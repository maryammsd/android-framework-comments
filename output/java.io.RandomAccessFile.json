{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/RandomAccessFile.java",
  "packageName" : "java.io",
  "className" : "RandomAccessFile",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "guard",
    "type" : "CloseGuard",
    "comment" : " BEGIN Android-added: CloseGuard and some helper fields for Android changes in this file.",
    "links" : [ ]
  }, {
    "name" : "scratch",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLUSH_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLUSH_FSYNC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLUSH_FDATASYNC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "flushAfterWrite",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fd",
    "type" : "FileDescriptor",
    "comment" : " Android-added: @ReachabilitySensitive",
    "links" : [ ]
  }, {
    "name" : "channel",
    "type" : "FileChannel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rw",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "path",
    "type" : "String",
    "comment" : "\n     * The path of the referenced file\n     * (null if the stream is created with a file descriptor)\n     ",
    "links" : [ ]
  }, {
    "name" : "closeLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ioTracker",
    "type" : "IoTracker",
    "comment" : "\n     * A single tracker to track both read and write. The tracker resets when the operation\n     * performed is different from the operation last performed.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void maybeSync()",
    "returnType" : "void",
    "comment" : " BEGIN Android-added: Sync after rws/rwd write",
    "links" : [ ]
  }, {
    "name" : "public final FileDescriptor getFD() throws IOException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Returns the opaque file descriptor object associated with this\n     * stream.\n     *\n     * @return     the file descriptor object associated with this stream.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FileDescriptor\n     ",
    "links" : [ ]
  }, {
    "name" : "public final FileChannel getChannel()",
    "returnType" : "FileChannel",
    "comment" : "\n     * Returns the unique {@link java.nio.channels.FileChannel FileChannel}\n     * object associated with this file.\n     *\n     * <p> The {@link java.nio.channels.FileChannel#position()\n     * position} of the returned channel will always be equal to\n     * this object's file-pointer offset as returned by the {@link\n     * #getFilePointer getFilePointer} method.  Changing this object's\n     * file-pointer offset, whether explicitly or by reading or writing bytes,\n     * will change the position of the channel, and vice versa.  Changing the\n     * file's length via this object will change the length seen via the file\n     * channel, and vice versa.\n     *\n     * @return  the file channel associated with this file\n     *\n     * @since 1.4\n     * @spec JSR-51\n     ",
    "links" : [ "java.nio.channels.FileChannel#position()", "java.nio.channels.FileChannel", "#getFilePointer" ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a byte of data from this file. The byte is returned as an\n     * integer in the range 0 to 255 ({@code 0x00-0x0ff}). This\n     * method blocks if no input is yet available.\n     * <p>\n     * Although {@code RandomAccessFile} is not a subclass of\n     * {@code InputStream}, this method behaves in exactly the same\n     * way as the {@link InputStream#read()} method of\n     * {@code InputStream}.\n     *\n     * @return     the next byte of data, or {@code -1} if the end of the\n     *             file has been reached.\n     * @exception  IOException  if an I/O error occurs. Not thrown if\n     *                          end-of-file has been reached.\n     ",
    "links" : [ "java.io.InputStream#read()" ]
  }, {
    "name" : "private int readBytes(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a sub array as a sequence of bytes.\n     * @param b the buffer into which the data is read.\n     * @param off the start offset of the data.\n     * @param len the number of bytes to read.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to {@code len} bytes of data from this file into an\n     * array of bytes. This method blocks until at least one byte of input\n     * is available.\n     * <p>\n     * Although {@code RandomAccessFile} is not a subclass of\n     * {@code InputStream}, this method behaves in exactly the\n     * same way as the {@link InputStream#read(byte[], int, int)} method of\n     * {@code InputStream}.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in array {@code b}\n     *                   at which the data is written.\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             {@code -1} if there is no more data because the end of\n     *             the file has been reached.\n     * @exception  IOException If the first byte cannot be read for any reason\n     * other than end of file, or if the random access file has been closed, or if\n     * some other I/O error occurs.\n     * @exception  NullPointerException If {@code b} is {@code null}.\n     * @exception  IndexOutOfBoundsException If {@code off} is negative,\n     * {@code len} is negative, or {@code len} is greater than\n     * {@code b.length - off}\n     ",
    "links" : [ "java.io.InputStream#read(byte" ]
  }, {
    "name" : "public int read(byte[] b) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to {@code b.length} bytes of data from this file\n     * into an array of bytes. This method blocks until at least one byte\n     * of input is available.\n     * <p>\n     * Although {@code RandomAccessFile} is not a subclass of\n     * {@code InputStream}, this method behaves in exactly the\n     * same way as the {@link InputStream#read(byte[])} method of\n     * {@code InputStream}.\n     *\n     * @param      b   the buffer into which the data is read.\n     * @return     the total number of bytes read into the buffer, or\n     *             {@code -1} if there is no more data because the end of\n     *             this file has been reached.\n     * @exception  IOException If the first byte cannot be read for any reason\n     * other than end of file, or if the random access file has been closed, or if\n     * some other I/O error occurs.\n     * @exception  NullPointerException If {@code b} is {@code null}.\n     ",
    "links" : [ "java.io.InputStream#read(byte" ]
  }, {
    "name" : "public final void readFully(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Reads {@code b.length} bytes from this file into the byte\n     * array, starting at the current file pointer. This method reads\n     * repeatedly from the file until the requested number of bytes are\n     * read. This method blocks until the requested number of bytes are\n     * read, the end of the stream is detected, or an exception is thrown.\n     *\n     * @param      b   the buffer into which the data is read.\n     * @exception  EOFException  if this file reaches the end before reading\n     *               all the bytes.\n     * @exception  IOException   if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void readFully(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Reads exactly {@code len} bytes from this file into the byte\n     * array, starting at the current file pointer. This method reads\n     * repeatedly from the file until the requested number of bytes are\n     * read. This method blocks until the requested number of bytes are\n     * read, the end of the stream is detected, or an exception is thrown.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset of the data.\n     * @param      len   the number of bytes to read.\n     * @exception  EOFException  if this file reaches the end before reading\n     *               all the bytes.\n     * @exception  IOException   if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int skipBytes(int n) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Attempts to skip over {@code n} bytes of input discarding the\n     * skipped bytes.\n     * <p>\n     *\n     * This method may skip over some smaller number of bytes, possibly zero.\n     * This may result from any of a number of conditions; reaching end of\n     * file before {@code n} bytes have been skipped is only one\n     * possibility. This method never throws an {@code EOFException}.\n     * The actual number of bytes skipped is returned.  If {@code n}\n     * is negative, no bytes are skipped.\n     *\n     * @param      n   the number of bytes to be skipped.\n     * @return     the actual number of bytes skipped.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified byte to this file. The write starts at\n     * the current file pointer.\n     *\n     * @param      b   the {@code byte} to be written.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeBytes(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a sub array as a sequence of bytes.\n     * @param b the data to be written\n\n     * @param off the start offset in the data\n     * @param len the number of bytes that are written\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes {@code b.length} bytes from the specified byte array\n     * to this file, starting at the current file pointer.\n     *\n     * @param      b   the data.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes {@code len} bytes from the specified byte array\n     * starting at offset {@code off} to this file.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getFilePointer() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns the current offset in this file.\n     *\n     * @return     the offset from the beginning of the file, in bytes,\n     *             at which the next read or write occurs.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void seek(long pos) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the file-pointer offset, measured from the beginning of this\n     * file, at which the next read or write occurs.  The offset may be\n     * set beyond the end of the file. Setting the offset beyond the end\n     * of the file does not change the file length.  The file length will\n     * change only by writing after the offset has been set beyond the end\n     * of the file.\n     *\n     * @param      pos   the offset position, measured in bytes from the\n     *                   beginning of the file, at which to set the file\n     *                   pointer.\n     * @exception  IOException  if {@code pos} is less than\n     *                          {@code 0} or if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long length() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns the length of this file.\n     *\n     * @return     the length of this file, measured in bytes.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLength(long newLength) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the length of this file.\n     *\n     * <p> If the present length of the file as returned by the\n     * {@code length} method is greater than the {@code newLength}\n     * argument then the file will be truncated.  In this case, if the file\n     * offset as returned by the {@code getFilePointer} method is greater\n     * than {@code newLength} then after this method returns the offset\n     * will be equal to {@code newLength}.\n     *\n     * <p> If the present length of the file as returned by the\n     * {@code length} method is smaller than the {@code newLength}\n     * argument then the file will be extended.  In this case, the contents of\n     * the extended portion of the file are not defined.\n     *\n     * @param      newLength    The desired length of the file\n     * @exception  IOException  If an I/O error occurs\n     * @since      1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this random access file stream and releases any system\n     * resources associated with the stream. A closed random access\n     * file cannot perform input or output operations and cannot be\n     * reopened.\n     *\n     * <p> If this file has an associated channel then the channel is closed\n     * as well.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     *\n     * @revised 1.4\n     * @spec JSR-51\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean readBoolean() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Reads a {@code boolean} from this file. This method reads a\n     * single byte from the file, starting at the current file pointer.\n     * A value of {@code 0} represents\n     * {@code false}. Any other value represents {@code true}.\n     * This method blocks until the byte is read, the end of the stream\n     * is detected, or an exception is thrown.\n     *\n     * @return     the {@code boolean} value read.\n     * @exception  EOFException  if this file has reached the end.\n     * @exception  IOException   if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte readByte() throws IOException",
    "returnType" : "byte",
    "comment" : "\n     * Reads a signed eight-bit value from this file. This method reads a\n     * byte from the file, starting from the current file pointer.\n     * If the byte read is {@code b}, where\n     * <code>0&nbsp;&lt;=&nbsp;b&nbsp;&lt;=&nbsp;255</code>,\n     * then the result is:\n     * <blockquote><pre>\n     *     (byte)(b)\n     * </pre></blockquote>\n     * <p>\n     * This method blocks until the byte is read, the end of the stream\n     * is detected, or an exception is thrown.\n     *\n     * @return     the next byte of this file as a signed eight-bit\n     *             {@code byte}.\n     * @exception  EOFException  if this file has reached the end.\n     * @exception  IOException   if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int readUnsignedByte() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads an unsigned eight-bit number from this file. This method reads\n     * a byte from this file, starting at the current file pointer,\n     * and returns that byte.\n     * <p>\n     * This method blocks until the byte is read, the end of the stream\n     * is detected, or an exception is thrown.\n     *\n     * @return     the next byte of this file, interpreted as an unsigned\n     *             eight-bit number.\n     * @exception  EOFException  if this file has reached the end.\n     * @exception  IOException   if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final short readShort() throws IOException",
    "returnType" : "short",
    "comment" : "\n     * Reads a signed 16-bit number from this file. The method reads two\n     * bytes from this file, starting at the current file pointer.\n     * If the two bytes read, in order, are\n     * {@code b1} and {@code b2}, where each of the two values is\n     * between {@code 0} and {@code 255}, inclusive, then the\n     * result is equal to:\n     * <blockquote><pre>\n     *     (short)((b1 &lt;&lt; 8) | b2)\n     * </pre></blockquote>\n     * <p>\n     * This method blocks until the two bytes are read, the end of the\n     * stream is detected, or an exception is thrown.\n     *\n     * @return     the next two bytes of this file, interpreted as a signed\n     *             16-bit number.\n     * @exception  EOFException  if this file reaches the end before reading\n     *               two bytes.\n     * @exception  IOException   if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int readUnsignedShort() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads an unsigned 16-bit number from this file. This method reads\n     * two bytes from the file, starting at the current file pointer.\n     * If the bytes read, in order, are\n     * {@code b1} and {@code b2}, where\n     * <code>0&nbsp;&lt;=&nbsp;b1, b2&nbsp;&lt;=&nbsp;255</code>,\n     * then the result is equal to:\n     * <blockquote><pre>\n     *     (b1 &lt;&lt; 8) | b2\n     * </pre></blockquote>\n     * <p>\n     * This method blocks until the two bytes are read, the end of the\n     * stream is detected, or an exception is thrown.\n     *\n     * @return     the next two bytes of this file, interpreted as an unsigned\n     *             16-bit integer.\n     * @exception  EOFException  if this file reaches the end before reading\n     *               two bytes.\n     * @exception  IOException   if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final char readChar() throws IOException",
    "returnType" : "char",
    "comment" : "\n     * Reads a character from this file. This method reads two\n     * bytes from the file, starting at the current file pointer.\n     * If the bytes read, in order, are\n     * {@code b1} and {@code b2}, where\n     * <code>0&nbsp;&lt;=&nbsp;b1,&nbsp;b2&nbsp;&lt;=&nbsp;255</code>,\n     * then the result is equal to:\n     * <blockquote><pre>\n     *     (char)((b1 &lt;&lt; 8) | b2)\n     * </pre></blockquote>\n     * <p>\n     * This method blocks until the two bytes are read, the end of the\n     * stream is detected, or an exception is thrown.\n     *\n     * @return     the next two bytes of this file, interpreted as a\n     *                  {@code char}.\n     * @exception  EOFException  if this file reaches the end before reading\n     *               two bytes.\n     * @exception  IOException   if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int readInt() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a signed 32-bit integer from this file. This method reads 4\n     * bytes from the file, starting at the current file pointer.\n     * If the bytes read, in order, are {@code b1},\n     * {@code b2}, {@code b3}, and {@code b4}, where\n     * <code>0&nbsp;&lt;=&nbsp;b1, b2, b3, b4&nbsp;&lt;=&nbsp;255</code>,\n     * then the result is equal to:\n     * <blockquote><pre>\n     *     (b1 &lt;&lt; 24) | (b2 &lt;&lt; 16) + (b3 &lt;&lt; 8) + b4\n     * </pre></blockquote>\n     * <p>\n     * This method blocks until the four bytes are read, the end of the\n     * stream is detected, or an exception is thrown.\n     *\n     * @return     the next four bytes of this file, interpreted as an\n     *             {@code int}.\n     * @exception  EOFException  if this file reaches the end before reading\n     *               four bytes.\n     * @exception  IOException   if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long readLong() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Reads a signed 64-bit integer from this file. This method reads eight\n     * bytes from the file, starting at the current file pointer.\n     * If the bytes read, in order, are\n     * {@code b1}, {@code b2}, {@code b3},\n     * {@code b4}, {@code b5}, {@code b6},\n     * {@code b7}, and {@code b8,} where:\n     * <blockquote><pre>\n     *     0 &lt;= b1, b2, b3, b4, b5, b6, b7, b8 &lt;=255,\n     * </pre></blockquote>\n     * <p>\n     * then the result is equal to:\n     * <blockquote><pre>\n     *     ((long)b1 &lt;&lt; 56) + ((long)b2 &lt;&lt; 48)\n     *     + ((long)b3 &lt;&lt; 40) + ((long)b4 &lt;&lt; 32)\n     *     + ((long)b5 &lt;&lt; 24) + ((long)b6 &lt;&lt; 16)\n     *     + ((long)b7 &lt;&lt; 8) + b8\n     * </pre></blockquote>\n     * <p>\n     * This method blocks until the eight bytes are read, the end of the\n     * stream is detected, or an exception is thrown.\n     *\n     * @return     the next eight bytes of this file, interpreted as a\n     *             {@code long}.\n     * @exception  EOFException  if this file reaches the end before reading\n     *               eight bytes.\n     * @exception  IOException   if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float readFloat() throws IOException",
    "returnType" : "float",
    "comment" : "\n     * Reads a {@code float} from this file. This method reads an\n     * {@code int} value, starting at the current file pointer,\n     * as if by the {@code readInt} method\n     * and then converts that {@code int} to a {@code float}\n     * using the {@code intBitsToFloat} method in class\n     * {@code Float}.\n     * <p>\n     * This method blocks until the four bytes are read, the end of the\n     * stream is detected, or an exception is thrown.\n     *\n     * @return     the next four bytes of this file, interpreted as a\n     *             {@code float}.\n     * @exception  EOFException  if this file reaches the end before reading\n     *             four bytes.\n     * @exception  IOException   if an I/O error occurs.\n     * @see        java.io.RandomAccessFile#readInt()\n     * @see        java.lang.Float#intBitsToFloat(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final double readDouble() throws IOException",
    "returnType" : "double",
    "comment" : "\n     * Reads a {@code double} from this file. This method reads a\n     * {@code long} value, starting at the current file pointer,\n     * as if by the {@code readLong} method\n     * and then converts that {@code long} to a {@code double}\n     * using the {@code longBitsToDouble} method in\n     * class {@code Double}.\n     * <p>\n     * This method blocks until the eight bytes are read, the end of the\n     * stream is detected, or an exception is thrown.\n     *\n     * @return     the next eight bytes of this file, interpreted as a\n     *             {@code double}.\n     * @exception  EOFException  if this file reaches the end before reading\n     *             eight bytes.\n     * @exception  IOException   if an I/O error occurs.\n     * @see        java.io.RandomAccessFile#readLong()\n     * @see        java.lang.Double#longBitsToDouble(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String readLine() throws IOException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String readUTF() throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Reads in a string from this file. The string has been encoded\n     * using a\n     * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n     * format.\n     * <p>\n     * The first two bytes are read, starting from the current file\n     * pointer, as if by\n     * {@code readUnsignedShort}. This value gives the number of\n     * following bytes that are in the encoded string, not\n     * the length of the resulting string. The following bytes are then\n     * interpreted as bytes encoding characters in the modified UTF-8 format\n     * and are converted into characters.\n     * <p>\n     * This method blocks until all the bytes are read, the end of the\n     * stream is detected, or an exception is thrown.\n     *\n     * @return     a Unicode string.\n     * @exception  EOFException            if this file reaches the end before\n     *               reading all the bytes.\n     * @exception  IOException             if an I/O error occurs.\n     * @exception  UTFDataFormatException  if the bytes do not represent\n     *               valid modified UTF-8 encoding of a Unicode string.\n     * @see        java.io.RandomAccessFile#readUnsignedShort()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeBoolean(boolean v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a {@code boolean} to the file as a one-byte value. The\n     * value {@code true} is written out as the value\n     * {@code (byte)1}; the value {@code false} is written out\n     * as the value {@code (byte)0}. The write starts at\n     * the current position of the file pointer.\n     *\n     * @param      v   a {@code boolean} value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeByte(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a {@code byte} to the file as a one-byte value. The\n     * write starts at the current position of the file pointer.\n     *\n     * @param      v   a {@code byte} value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeShort(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a {@code short} to the file as two bytes, high byte first.\n     * The write starts at the current position of the file pointer.\n     *\n     * @param      v   a {@code short} to be written.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeChar(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a {@code char} to the file as a two-byte value, high\n     * byte first. The write starts at the current position of the\n     * file pointer.\n     *\n     * @param      v   a {@code char} value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeInt(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes an {@code int} to the file as four bytes, high byte first.\n     * The write starts at the current position of the file pointer.\n     *\n     * @param      v   an {@code int} to be written.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeLong(long v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a {@code long} to the file as eight bytes, high byte first.\n     * The write starts at the current position of the file pointer.\n     *\n     * @param      v   a {@code long} to be written.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeFloat(float v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Converts the float argument to an {@code int} using the\n     * {@code floatToIntBits} method in class {@code Float},\n     * and then writes that {@code int} value to the file as a\n     * four-byte quantity, high byte first. The write starts at the\n     * current position of the file pointer.\n     *\n     * @param      v   a {@code float} value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.lang.Float#floatToIntBits(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeDouble(double v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Converts the double argument to a {@code long} using the\n     * {@code doubleToLongBits} method in class {@code Double},\n     * and then writes that {@code long} value to the file as an\n     * eight-byte quantity, high byte first. The write starts at the current\n     * position of the file pointer.\n     *\n     * @param      v   a {@code double} value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.lang.Double#doubleToLongBits(double)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeBytes(String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the string to the file as a sequence of bytes. Each\n     * character in the string is written out, in sequence, by discarding\n     * its high eight bits. The write starts at the current position of\n     * the file pointer.\n     *\n     * @param      s   a string of bytes to be written.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeChars(String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a string to the file as a sequence of characters. Each\n     * character is written to the data output stream as if by the\n     * {@code writeChar} method. The write starts at the current\n     * position of the file pointer.\n     *\n     * @param      s   a {@code String} value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.RandomAccessFile#writeChar(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeUTF(String str) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a string to the file using\n     * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n     * encoding in a machine-independent manner.\n     * <p>\n     * First, two bytes are written to the file, starting at the\n     * current file pointer, as if by the\n     * {@code writeShort} method giving the number of bytes to\n     * follow. This value is the number of bytes actually written out,\n     * not the length of the string. Following the length, each character\n     * of the string is output, in sequence, using the modified UTF-8 encoding\n     * for each character.\n     *\n     * @param      str   a string to be written.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " Android-added: use finalize() to detect if not close()d.",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void maybeSync()", "public final FileDescriptor getFD() throws IOException", "public final FileChannel getChannel()", "public int read() throws IOException", "private int readBytes(byte[] b, int off, int len) throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public int read(byte[] b) throws IOException", "public final void readFully(byte[] b) throws IOException", "public final void readFully(byte[] b, int off, int len) throws IOException", "public int skipBytes(int n) throws IOException", "public void write(int b) throws IOException", "private void writeBytes(byte[] b, int off, int len) throws IOException", "public void write(byte[] b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException", "public long getFilePointer() throws IOException", "public void seek(long pos) throws IOException", "public long length() throws IOException", "public void setLength(long newLength) throws IOException", "public void close() throws IOException", "public final boolean readBoolean() throws IOException", "public final byte readByte() throws IOException", "public final int readUnsignedByte() throws IOException", "public final short readShort() throws IOException", "public final int readUnsignedShort() throws IOException", "public final char readChar() throws IOException", "public final int readInt() throws IOException", "public final long readLong() throws IOException", "public final float readFloat() throws IOException", "public final double readDouble() throws IOException", "public final String readLine() throws IOException", "public final String readUTF() throws IOException", "public final void writeBoolean(boolean v) throws IOException", "public final void writeByte(int v) throws IOException", "public final void writeShort(int v) throws IOException", "public final void writeChar(int v) throws IOException", "public final void writeInt(int v) throws IOException", "public final void writeLong(long v) throws IOException", "public final void writeFloat(float v) throws IOException", "public final void writeDouble(double v) throws IOException", "public final void writeBytes(String s) throws IOException", "public final void writeChars(String s) throws IOException", "public final void writeUTF(String str) throws IOException", "protected void finalize() throws Throwable" ],
  "variableNames" : [ "guard", "scratch", "FLUSH_NONE", "FLUSH_FSYNC", "FLUSH_FDATASYNC", "flushAfterWrite", "mode", "fd", "channel", "rw", "path", "closeLock", "closed", "ioTracker" ]
}