{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/OobData.java",
  "packageName" : "android.bluetooth",
  "className" : "ClassicBuilder",
  "comment" : "\n     * Builds an {@link OobData} object and validates that the required combination of values are\n     * present to create the Classic specific OobData type.\n     *\n     * @hide\n     ",
  "links" : [ "android.bluetooth.OobData" ],
  "variables" : [ {
    "name" : "mConfirmationHash",
    "type" : "byte[]",
    "comment" : "\n         * It is recommended that this Hash C is generated anew for each pairing.\n         *\n         * <p>It should be noted that on passive NFC this isn't possible as the data is static and\n         * immutable.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mRandomizerHash",
    "type" : "byte[]",
    "comment" : "\n         * Optional, but adds more validity to the pairing.\n         *\n         * <p>If not present a value of 0 is assumed.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mDeviceName",
    "type" : "byte[]",
    "comment" : "\n         * The Bluetooth Device user-friendly name presented over Bluetooth Technology.\n         *\n         * <p>This is the name that may be displayed to the device user as part of the UI.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mClassicLength",
    "type" : "byte[]",
    "comment" : "\n         * This length value provides the absolute length of total OOB data block used for Bluetooth\n         * BR/EDR\n         *\n         * <p>OOB communication, which includes the length field itself and the Bluetooth Device\n         * Address.\n         *\n         * <p>The minimum length that may be represented in this field is 8.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mDeviceAddressWithType",
    "type" : "byte[]",
    "comment" : "\n         * The Bluetooth Device Address is the address to which the OOB data belongs.\n         *\n         * <p>The length MUST be {@link OobData#DEVICE_ADDRESS_OCTETS} octets.\n         *\n         * <p>Address is encoded in Little Endian order.\n         *\n         * <p>e.g. 00:01:02:03:04:05 would be x05x04x03x02x01x00\n         *\n         * @hide\n         ",
    "links" : [ "android.bluetooth.OobData#DEVICE_ADDRESS_OCTETS" ]
  }, {
    "name" : "mClassOfDevice",
    "type" : "byte[]",
    "comment" : "\n         * Class of Device information is to be used to provide a graphical representation to the\n         * user as part of UI involving operations.\n         *\n         * <p>This is not to be used to determine a particular service can be used.\n         *\n         * <p>The length MUST be {@link OobData#CLASS_OF_DEVICE_OCTETS} octets.\n         *\n         * @hide\n         ",
    "links" : [ "android.bluetooth.OobData#CLASS_OF_DEVICE_OCTETS" ]
  } ],
  "methods" : [ {
    "name" : "public ClassicBuilder setRandomizerHash(@NonNull byte[] randomizerHash)",
    "returnType" : "ClassicBuilder",
    "comment" : "\n         * @param randomizerHash byte array consisting of {@link OobData#RANDOMIZER_OCTETS} octets\n         *     of data. Data is derived from controller/host stack and is required for pairing OOB.\n         *     Also, randomizerHash may be all 0s or null in which case it becomes all 0s.\n         * @throws IllegalArgumentException if null or incorrect length randomizerHash was passed.\n         * @throws NullPointerException if randomizerHash is null.\n         * @hide\n         ",
    "links" : [ "android.bluetooth.OobData#RANDOMIZER_OCTETS" ]
  }, {
    "name" : "public ClassicBuilder setDeviceName(@NonNull byte[] deviceName)",
    "returnType" : "ClassicBuilder",
    "comment" : "\n         * Sets the Bluetooth Device name to be used for UI purposes.\n         *\n         * <p>Optional attribute.\n         *\n         * @param deviceName byte array representing the name, may be 0 in length, not null.\n         * @return {@link OobData#ClassicBuilder}\n         * @throws NullPointerException if deviceName is null\n         * @hide\n         ",
    "links" : [ "android.bluetooth.OobData#ClassicBuilder" ]
  }, {
    "name" : "public ClassicBuilder setClassOfDevice(@NonNull byte[] classOfDevice)",
    "returnType" : "ClassicBuilder",
    "comment" : "\n         * Sets the Bluetooth Class of Device; used for UI purposes only.\n         *\n         * <p>Not an indicator of available services!\n         *\n         * <p>Optional attribute.\n         *\n         * @param classOfDevice byte array of {@link OobData#CLASS_OF_DEVICE_OCTETS} octets.\n         * @return {@link OobData#ClassicBuilder}\n         * @throws IllegalArgumentException if length is not equal to {@link\n         *     OobData#CLASS_OF_DEVICE_OCTETS} octets.\n         * @throws NullPointerException if classOfDevice is null.\n         * @hide\n         ",
    "links" : [ "android.bluetooth.OobData#CLASS_OF_DEVICE_OCTETS", "android.bluetooth.OobData#ClassicBuilder" ]
  }, {
    "name" : "public OobData build()",
    "returnType" : "OobData",
    "comment" : "\n         * Validates and builds the {@link OobData} object for Classic Security.\n         *\n         * @return {@link OobData} with previously given builder values.\n         * @hide\n         ",
    "links" : [ "android.bluetooth.OobData" ]
  } ],
  "methodNames" : [ "public ClassicBuilder setRandomizerHash(@NonNull byte[] randomizerHash)", "public ClassicBuilder setDeviceName(@NonNull byte[] deviceName)", "public ClassicBuilder setClassOfDevice(@NonNull byte[] classOfDevice)", "public OobData build()" ],
  "variableNames" : [ "mConfirmationHash", "mRandomizerHash", "mDeviceName", "mClassicLength", "mDeviceAddressWithType", "mClassOfDevice" ]
}