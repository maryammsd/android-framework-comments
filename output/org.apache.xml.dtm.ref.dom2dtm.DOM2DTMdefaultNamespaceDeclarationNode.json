{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/dom2dtm/DOM2DTMdefaultNamespaceDeclarationNode.java",
  "packageName" : "org.apache.xml.dtm.ref.dom2dtm",
  "className" : "DOM2DTMdefaultNamespaceDeclarationNode",
  "comment" : " This is a kluge to let us shove a declaration for xml: into the\n * DOM2DTM model.  Basically, it creates a proxy node in DOM space to\n * carry the additional information. This is _NOT_ a full DOM\n * implementation, and shouldn't be one since it sits alongside the\n * DOM rather than becoming part of the DOM model.\n * \n * (This used to be an internal class within DOM2DTM. Moved out because\n * I need to perform an instanceof operation on it to support a temporary\n * workaround in DTMManagerDefault.)\n * \n * %REVIEW% What if the DOM2DTM was built around a DocumentFragment and\n * there isn't a single root element? I think this fails that case...\n * \n * %REVIEW% An alternative solution would be to create the node _only_\n * in DTM space, but given how DOM2DTM is currently written I think\n * this is simplest.\n * ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NOT_SUPPORTED_ERR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pseudoparent",
    "type" : "Element",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "prefix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "uri",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nodename",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "handle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURI()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNodeValue()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getValue()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Element getOwnerElement()",
    "returnType" : "Element",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSupported(String feature, String version)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChildNodes()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttributes()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getParentNode()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getFirstChild()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getLastChild()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getPreviousSibling()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getNextSibling()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getSpecified()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void normalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NodeList getChildNodes()",
    "returnType" : "NodeList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NamedNodeMap getAttributes()",
    "returnType" : "NamedNodeMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public short getNodeType()",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setNodeValue(String value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setValue(String value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPrefix(String value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node insertBefore(Node a, Node b)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node replaceChild(Node a, Node b)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node appendChild(Node a)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node removeChild(Node a)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Document getOwnerDocument()",
    "returnType" : "Document",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node cloneNode(boolean deep)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHandleOfNode()",
    "returnType" : "int",
    "comment" : " Non-DOM method, part of the temporary kluge\n     * %REVIEW% This would be a pruning problem, but since it will always be\n     * added to the root element and we prune on elements, we shouldn't have \n     * to worry.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTypeName()",
    "returnType" : "String",
    "comment" : "\n     * @see org.w3c.dom.TypeInfo#getTypeName()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTypeNamespace()",
    "returnType" : "String",
    "comment" : "\n     * @see org.w3c.dom.TypeInfo#getTypeNamespace()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDerivedFrom(String ns, String localName, int derivationMethod)",
    "returnType" : "boolean",
    "comment" : "\n     * @see or.gw3c.dom.TypeInfo#isDerivedFrom(String,String,int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TypeInfo getSchemaTypeInfo()",
    "returnType" : "TypeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isId()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object setUserData(String key, Object data, UserDataHandler handler)",
    "returnType" : "Object",
    "comment" : "\n     * Associate an object to a key on this node. The object can later be\n     * retrieved from this node by calling <code>getUserData</code> with the\n     * same key.\n     * @param key The key to associate the object to.\n     * @param data The object to associate to the given key, or\n     *   <code>null</code> to remove any existing association to that key.\n     * @param handler The handler to associate to that key, or\n     *   <code>null</code>.\n     * @return Returns the <code>DOMObject</code> previously associated to\n     *   the given key on this node, or <code>null</code> if there was none.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getUserData(String key)",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the object associated to a key on a this node. The object\n     * must first have been set to this node by calling\n     * <code>setUserData</code> with the same key.\n     * @param key The key the object is associated to.\n     * @return Returns the <code>DOMObject</code> associated to the given key\n     *   on this node, or <code>null</code> if there was none.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getFeature(String feature, String version)",
    "returnType" : "Object",
    "comment" : "\n     *  This method returns a specialized object which implements the\n     * specialized APIs of the specified feature and version. The\n     * specialized object may also be obtained by using binding-specific\n     * casting methods but is not necessarily expected to, as discussed in Mixed DOM implementations.\n     * @param feature The name of the feature requested (case-insensitive).\n     * @param version  This is the version number of the feature to test. If\n     *   the version is <code>null</code> or the empty string, supporting\n     *   any version of the feature will cause the method to return an\n     *   object that supports at least one version of the feature.\n     * @return  Returns an object which implements the specialized APIs of\n     *   the specified feature and version, if any, or <code>null</code> if\n     *   there is no object which implements interfaces associated with that\n     *   feature. If the <code>DOMObject</code> returned by this method\n     *   implements the <code>Node</code> interface, it must delegate to the\n     *   primary core <code>Node</code> and not return results inconsistent\n     *   with the primary core <code>Node</code> such as attributes,\n     *   childNodes, etc.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEqualNode(Node arg)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether two nodes are equal.\n     * <br>This method tests for equality of nodes, not sameness (i.e.,\n     * whether the two nodes are references to the same object) which can be\n     * tested with <code>Node.isSameNode</code>. All nodes that are the same\n     * will also be equal, though the reverse may not be true.\n     * <br>Two nodes are equal if and only if the following conditions are\n     * satisfied: The two nodes are of the same type.The following string\n     * attributes are equal: <code>nodeName</code>, <code>localName</code>,\n     * <code>namespaceURI</code>, <code>prefix</code>, <code>nodeValue</code>\n     * , <code>baseURI</code>. This is: they are both <code>null</code>, or\n     * they have the same length and are character for character identical.\n     * The <code>attributes</code> <code>NamedNodeMaps</code> are equal.\n     * This is: they are both <code>null</code>, or they have the same\n     * length and for each node that exists in one map there is a node that\n     * exists in the other map and is equal, although not necessarily at the\n     * same index.The <code>childNodes</code> <code>NodeLists</code> are\n     * equal. This is: they are both <code>null</code>, or they have the\n     * same length and contain equal nodes at the same index. This is true\n     * for <code>Attr</code> nodes as for any other type of node. Note that\n     * normalization can affect equality; to avoid this, nodes should be\n     * normalized before being compared.\n     * <br>For two <code>DocumentType</code> nodes to be equal, the following\n     * conditions must also be satisfied: The following string attributes\n     * are equal: <code>publicId</code>, <code>systemId</code>,\n     * <code>internalSubset</code>.The <code>entities</code>\n     * <code>NamedNodeMaps</code> are equal.The <code>notations</code>\n     * <code>NamedNodeMaps</code> are equal.\n     * <br>On the other hand, the following do not affect equality: the\n     * <code>ownerDocument</code> attribute, the <code>specified</code>\n     * attribute for <code>Attr</code> nodes, the\n     * <code>isWhitespaceInElementContent</code> attribute for\n     * <code>Text</code> nodes, as well as any user data or event listeners\n     * registered on the nodes.\n     * @param arg The node to compare equality with.\n     * @param deep If <code>true</code>, recursively compare the subtrees; if\n     *   <code>false</code>, compare only the nodes themselves (and its\n     *   attributes, if it is an <code>Element</code>).\n     * @return If the nodes, and possibly subtrees are equal,\n     *   <code>true</code> otherwise <code>false</code>.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String lookupNamespaceURI(String specifiedPrefix)",
    "returnType" : "String",
    "comment" : "\n     * DOM Level 3 - Experimental:\n     * Look up the namespace URI associated to the given prefix, starting from this node.\n     * Use lookupNamespaceURI(null) to lookup the default namespace\n     *\n     * @param namespaceURI\n     * @return th URI for the namespace\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultNamespace(String namespaceURI)",
    "returnType" : "boolean",
    "comment" : "\n     *  DOM Level 3: Experimental\n     *  This method checks if the specified <code>namespaceURI</code> is the\n     *  default namespace or not.\n     *  @param namespaceURI The namespace URI to look for.\n     *  @return  <code>true</code> if the specified <code>namespaceURI</code>\n     *   is the default namespace, <code>false</code> otherwise.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String lookupPrefix(String namespaceURI)",
    "returnType" : "String",
    "comment" : "\n     *\n     * DOM Level 3 - Experimental:\n     * Look up the prefix associated to the given namespace URI, starting from this node.\n     *\n     * @param namespaceURI\n     * @return the prefix for the namespace\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameNode(Node other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this node is the same node as the given one.\n     * <br>This method provides a way to determine whether two\n     * <code>Node</code> references returned by the implementation reference\n     * the same object. When two <code>Node</code> references are references\n     * to the same object, even if through a proxy, the references may be\n     * used completely interchangably, such that all attributes have the\n     * same values and calling the same DOM method on either reference\n     * always has exactly the same effect.\n     * @param other The node to test against.\n     * @return Returns <code>true</code> if the nodes are the same,\n     *   <code>false</code> otherwise.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTextContent(String textContent) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * This attribute returns the text content of this node and its\n     * descendants. When it is defined to be null, setting it has no effect.\n     * When set, any possible children this node may have are removed and\n     * replaced by a single <code>Text</code> node containing the string\n     * this attribute is set to. On getting, no serialization is performed,\n     * the returned string does not contain any markup. No whitespace\n     * normalization is performed, the returned string does not contain the\n     * element content whitespaces . Similarly, on setting, no parsing is\n     * performed either, the input string is taken as pure textual content.\n     * <br>The string returned is made of the text content of this node\n     * depending on its type, as defined below:\n     * <table border='1'>\n     * <tr>\n     * <th>Node type</th>\n     * <th>Content</th>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,\n     * DOCUMENT_FRAGMENT_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>\n     * attribute value of every child node, excluding COMMENT_NODE and\n     * PROCESSING_INSTRUCTION_NODE nodes</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,\n     * CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * <code>nodeValue</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * null</td>\n     * </tr>\n     * </table>\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.\n     * @exception DOMException\n     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than\n     *   fit in a <code>DOMString</code> variable on the implementation\n     *   platform.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTextContent() throws DOMException",
    "returnType" : "String",
    "comment" : "\n     * This attribute returns the text content of this node and its\n     * descendants. When it is defined to be null, setting it has no effect.\n     * When set, any possible children this node may have are removed and\n     * replaced by a single <code>Text</code> node containing the string\n     * this attribute is set to. On getting, no serialization is performed,\n     * the returned string does not contain any markup. No whitespace\n     * normalization is performed, the returned string does not contain the\n     * element content whitespaces . Similarly, on setting, no parsing is\n     * performed either, the input string is taken as pure textual content.\n     * <br>The string returned is made of the text content of this node\n     * depending on its type, as defined below:\n     * <table border='1'>\n     * <tr>\n     * <th>Node type</th>\n     * <th>Content</th>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,\n     * DOCUMENT_FRAGMENT_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>\n     * attribute value of every child node, excluding COMMENT_NODE and\n     * PROCESSING_INSTRUCTION_NODE nodes</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,\n     * CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * <code>nodeValue</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * null</td>\n     * </tr>\n     * </table>\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.\n     * @exception DOMException\n     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than\n     *   fit in a <code>DOMString</code> variable on the implementation\n     *   platform.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public short compareDocumentPosition(Node other) throws DOMException",
    "returnType" : "short",
    "comment" : "\n     * Compares a node with this node with regard to their position in the\n     * document.\n     * @param other The node to compare against this node.\n     * @return Returns how the given node is positioned relatively to this\n     *   node.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseURI()",
    "returnType" : "String",
    "comment" : "\n     * The absolute base URI of this node or <code>null</code> if undefined.\n     * This value is computed according to . However, when the\n     * <code>Document</code> supports the feature \"HTML\" , the base URI is\n     * computed using first the value of the href attribute of the HTML BASE\n     * element if any, and the value of the <code>documentURI</code>\n     * attribute from the <code>Document</code> interface otherwise.\n     * <br> When the node is an <code>Element</code>, a <code>Document</code>\n     * or a a <code>ProcessingInstruction</code>, this attribute represents\n     * the properties [base URI] defined in . When the node is a\n     * <code>Notation</code>, an <code>Entity</code>, or an\n     * <code>EntityReference</code>, this attribute represents the\n     * properties [declaration base URI] in the . How will this be affected\n     * by resolution of relative namespace URIs issue?It's not.Should this\n     * only be on Document, Element, ProcessingInstruction, Entity, and\n     * Notation nodes, according to the infoset? If not, what is it equal to\n     * on other nodes? Null? An empty string? I think it should be the\n     * parent's.No.Should this be read-only and computed or and actual\n     * read-write attribute?Read-only and computed (F2F 19 Jun 2000 and\n     * teleconference 30 May 2001).If the base HTML element is not yet\n     * attached to a document, does the insert change the Document.baseURI?\n     * Yes. (F2F 26 Sep 2001)\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getNodeName()", "public String getName()", "public String getNamespaceURI()", "public String getPrefix()", "public String getLocalName()", "public String getNodeValue()", "public String getValue()", "public Element getOwnerElement()", "public boolean isSupported(String feature, String version)", "public boolean hasChildNodes()", "public boolean hasAttributes()", "public Node getParentNode()", "public Node getFirstChild()", "public Node getLastChild()", "public Node getPreviousSibling()", "public Node getNextSibling()", "public boolean getSpecified()", "public void normalize()", "public NodeList getChildNodes()", "public NamedNodeMap getAttributes()", "public short getNodeType()", "public void setNodeValue(String value)", "public void setValue(String value)", "public void setPrefix(String value)", "public Node insertBefore(Node a, Node b)", "public Node replaceChild(Node a, Node b)", "public Node appendChild(Node a)", "public Node removeChild(Node a)", "public Document getOwnerDocument()", "public Node cloneNode(boolean deep)", "public int getHandleOfNode()", "public String getTypeName()", "public String getTypeNamespace()", "public boolean isDerivedFrom(String ns, String localName, int derivationMethod)", "public TypeInfo getSchemaTypeInfo()", "public boolean isId()", "public Object setUserData(String key, Object data, UserDataHandler handler)", "public Object getUserData(String key)", "public Object getFeature(String feature, String version)", "public boolean isEqualNode(Node arg)", "public String lookupNamespaceURI(String specifiedPrefix)", "public boolean isDefaultNamespace(String namespaceURI)", "public String lookupPrefix(String namespaceURI)", "public boolean isSameNode(Node other)", "public void setTextContent(String textContent) throws DOMException", "public String getTextContent() throws DOMException", "public short compareDocumentPosition(Node other) throws DOMException", "public String getBaseURI()" ],
  "variableNames" : [ "NOT_SUPPORTED_ERR", "pseudoparent", "prefix", "uri", "nodename", "handle" ]
}