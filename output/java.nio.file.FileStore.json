{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/FileStore.java",
  "packageName" : "java.nio.file",
  "className" : "FileStore",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract String name()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this file store. The format of the name is highly\n     * implementation specific. It will typically be the name of the storage\n     * pool or volume.\n     *\n     * <p> The string returned by this method may differ from the string\n     * returned by the {@link Object#toString() toString} method.\n     *\n     * @return  the name of this file store\n     ",
    "links" : [ "#toString()" ]
  }, {
    "name" : "public abstract String type()",
    "returnType" : "String",
    "comment" : "\n     * Returns the <em>type</em> of this file store. The format of the string\n     * returned by this method is highly implementation specific. It may\n     * indicate, for example, the format used or if the file store is local\n     * or remote.\n     *\n     * @return  a string representing the type of this file store\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isReadOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this file store is read-only. A file store is read-only if\n     * it does not support write operations or other changes to files. Any\n     * attempt to create a file, open an existing file for writing etc. causes\n     * an {@code IOException} to be thrown.\n     *\n     * @return  {@code true} if, and only if, this file store is read-only\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getTotalSpace() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns the size, in bytes, of the file store.\n     *\n     * @return  the size of the file store, in bytes\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getUsableSpace() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns the number of bytes available to this Java virtual machine on the\n     * file store.\n     *\n     * <p> The returned number of available bytes is a hint, but not a\n     * guarantee, that it is possible to use most or any of these bytes.  The\n     * number of usable bytes is most likely to be accurate immediately\n     * after the space attributes are obtained. It is likely to be made inaccurate\n     * by any external I/O operations including those made on the system outside\n     * of this Java virtual machine.\n     *\n     * @return  the number of bytes available\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getBlockSize() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns the number of bytes per block in this file store.\n     *\n     * <p> File storage is typically organized into discrete sequences of bytes\n     * called <i>blocks</i>. A block is the smallest storage unit of a file store.\n     * Every read and write operation is performed on a multiple of blocks.\n     *\n     * @implSpec The implementation in this class throws an\n     *         {@code UnsupportedOperationException}.\n     *\n     * @return  a positive value representing the block size of this file store,\n     *          in bytes\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     *\n     * @throws  UnsupportedOperationException\n     *          if the operation is not supported\n     *\n     * @since 10\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getUnallocatedSpace() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns the number of unallocated bytes in the file store.\n     *\n     * <p> The returned number of unallocated bytes is a hint, but not a\n     * guarantee, that it is possible to use most or any of these bytes.  The\n     * number of unallocated bytes is most likely to be accurate immediately\n     * after the space attributes are obtained. It is likely to be\n     * made inaccurate by any external I/O operations including those made on\n     * the system outside of this virtual machine.\n     *\n     * @return  the number of unallocated bytes\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean supportsFileAttributeView(Class<? extends FileAttributeView> type)",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this file store supports the file attributes\n     * identified by the given file attribute view.\n     *\n     * <p> Invoking this method to test if the file store supports {@link\n     * BasicFileAttributeView} will always return {@code true}. In the case of\n     * the default provider, this method cannot guarantee to give the correct\n     * result when the file store is not a local storage device. The reasons for\n     * this are implementation specific and therefore unspecified.\n     *\n     * @param   type\n     *          the file attribute view type\n     *\n     * @return  {@code true} if, and only if, the file attribute view is\n     *          supported\n     ",
    "links" : [ "java.nio.file.BasicFileAttributeView" ]
  }, {
    "name" : "public abstract boolean supportsFileAttributeView(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this file store supports the file attributes\n     * identified by the given file attribute view.\n     *\n     * <p> Invoking this method to test if the file store supports {@link\n     * BasicFileAttributeView}, identified by the name \"{@code basic}\" will\n     * always return {@code true}. In the case of the default provider, this\n     * method cannot guarantee to give the correct result when the file store is\n     * not a local storage device. The reasons for this are implementation\n     * specific and therefore unspecified.\n     *\n     * @param   name\n     *          the {@link FileAttributeView#name name} of file attribute view\n     *\n     * @return  {@code true} if, and only if, the file attribute view is\n     *          supported\n     ",
    "links" : [ "java.nio.file.FileAttributeView#name", "java.nio.file.BasicFileAttributeView" ]
  }, {
    "name" : "public abstract V getFileStoreAttributeView(Class<V> type)",
    "returnType" : "V",
    "comment" : "\n     * Returns a {@code FileStoreAttributeView} of the given type.\n     *\n     * <p> This method is intended to be used where the file store attribute\n     * view defines type-safe methods to read or update the file store attributes.\n     * The {@code type} parameter is the type of the attribute view required and\n     * the method returns an instance of that type if supported.\n     *\n     * @param   <V>\n     *          The {@code FileStoreAttributeView} type\n     * @param   type\n     *          the {@code Class} object corresponding to the attribute view\n     *\n     * @return  a file store attribute view of the specified type or\n     *          {@code null} if the attribute view is not available\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Object getAttribute(String attribute) throws IOException",
    "returnType" : "Object",
    "comment" : "\n     * Reads the value of a file store attribute.\n     *\n     * <p> The {@code attribute} parameter identifies the attribute to be read\n     * and takes the form:\n     * <blockquote>\n     * <i>view-name</i><b>:</b><i>attribute-name</i>\n     * </blockquote>\n     * where the character {@code ':'} stands for itself.\n     *\n     * <p> <i>view-name</i> is the {@link FileStoreAttributeView#name name} of\n     * a {@link FileStore AttributeView} that identifies a set of file attributes.\n     * <i>attribute-name</i> is the name of the attribute.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want to know if ZFS compression is enabled (assuming the \"zfs\"\n     * view is supported):\n     * <pre>\n     *    boolean compression = (Boolean)fs.getAttribute(\"zfs:compression\");\n     * </pre>\n     *\n     * @param   attribute\n     *          the attribute to read\n\n     * @return  the attribute value; {@code null} may be valid for some\n     *          attributes\n     *\n     * @throws  UnsupportedOperationException\n     *          if the attribute view is not available or it does not support\n     *          reading the attribute\n     * @throws  IOException\n     *          if an I/O error occurs\n     ",
    "links" : [ "java.nio.file.FileStore", "java.nio.file.FileStoreAttributeView#name" ]
  } ],
  "methodNames" : [ "public abstract String name()", "public abstract String type()", "public abstract boolean isReadOnly()", "public abstract long getTotalSpace() throws IOException", "public abstract long getUsableSpace() throws IOException", "public long getBlockSize() throws IOException", "public abstract long getUnallocatedSpace() throws IOException", "public abstract boolean supportsFileAttributeView(Class<? extends FileAttributeView> type)", "public abstract boolean supportsFileAttributeView(String name)", "public abstract V getFileStoreAttributeView(Class<V> type)", "public abstract Object getAttribute(String attribute) throws IOException" ],
  "variableNames" : [ ]
}