{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/backup/BackupTransport.java",
  "packageName" : "android.app.backup",
  "className" : "BackupTransport",
  "comment" : "\n * Concrete class that provides a stable-API bridge between IBackupTransport\n * and its implementations.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TRANSPORT_OK",
    "type" : "int",
    "comment" : " retry.",
    "links" : [ ]
  }, {
    "name" : "NO_MORE_DATA",
    "type" : "int",
    "comment" : " we've delivered the entire data stream for the current restore target.",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_ERROR",
    "type" : "int",
    "comment" : " Result codes that indicate real errors are negative and not -1",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_NOT_INITIALIZED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_PACKAGE_REJECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AGENT_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AGENT_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_QUOTA_EXCEEDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_NON_INCREMENTAL_BACKUP_REQUIRED",
    "type" : "int",
    "comment" : "\n     * Indicates that the transport cannot accept a diff backup for this package.\n     *\n     * <p>Backup manager should clear its state for this package and immediately retry a\n     * non-incremental backup. This might be used if the transport no longer has data for this\n     * package in its backing store.\n     *\n     * <p>This is only valid when backup manager called {@link\n     * #performBackup(PackageInfo, ParcelFileDescriptor, int)} with {@link #FLAG_INCREMENTAL}.\n     ",
    "links" : [ "#FLAG_INCREMENTAL" ]
  }, {
    "name" : "FLAG_USER_INITIATED",
    "type" : "int",
    "comment" : " Transport should ignore its own moratoriums for call with this flag set.",
    "links" : [ ]
  }, {
    "name" : "FLAG_INCREMENTAL",
    "type" : "int",
    "comment" : "\n     * For key value backup, indicates that the backup data is a diff from a previous backup. The\n     * transport must apply this diff to an existing backup to build the new backup set.\n     *\n     * @see #performBackup(PackageInfo, ParcelFileDescriptor, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_NON_INCREMENTAL",
    "type" : "int",
    "comment" : "\n     * For key value backup, indicates that the backup data is a complete set, not a diff from a\n     * previous backup. The transport should clear any previous backup when storing this backup.\n     *\n     * @see #performBackup(PackageInfo, ParcelFileDescriptor, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_DATA_NOT_CHANGED",
    "type" : "int",
    "comment" : "\n     * For key value backup, indicates that the backup contains no new data since the last backup\n     * attempt completed without any errors. The transport should use this to record that\n     * a successful backup attempt has been completed but no backup data has been changed.\n     *\n     * @see #performBackup(PackageInfo, ParcelFileDescriptor, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TRANSPORT_REGISTRATION",
    "type" : "String",
    "comment" : "\n     * Used as a boolean extra in the binding intent of transports. We pass {@code true} to\n     * notify transports that the current connection is used for registering the transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBinderImpl",
    "type" : "IBackupTransport",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IBinder getBinder()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String name()",
    "returnType" : "String",
    "comment" : "\n     * Ask the transport for the name under which it should be registered.  This will\n     * typically be its host service's component name, but need not be.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent configurationIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Ask the transport for an Intent that can be used to launch any internal\n     * configuration Activity that it wishes to present.  For example, the transport\n     * may offer a UI for allowing the user to supply login credentials for the\n     * transport's off-device backend.\n     *\n     * <p>If the transport does not supply any user-facing configuration UI, it should\n     * return {@code null} from this method.\n     *\n     * @return An Intent that can be passed to Context.startActivity() in order to\n     *         launch the transport's configuration UI.  This method will return {@code null}\n     *         if the transport does not offer any user-facing configuration UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String currentDestinationString()",
    "returnType" : "String",
    "comment" : "\n     * On demand, supply a one-line string that can be shown to the user that\n     * describes the current backend destination.  For example, a transport that\n     * can potentially associate backup data with arbitrary user accounts should\n     * include the name of the currently-active account here.\n     *\n     * @return A string describing the destination to which the transport is currently\n     *         sending data.  This method should not return null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent dataManagementIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Ask the transport for an Intent that can be used to launch a more detailed\n     * secondary data management activity.  For example, the configuration intent might\n     * be one for allowing the user to select which account they wish to associate\n     * their backups with, and the management intent might be one which presents a\n     * UI for managing the data on the backend.\n     *\n     * <p>In the Settings UI, the configuration intent will typically be invoked\n     * when the user taps on the preferences item labeled with the current\n     * destination string, and the management intent will be placed in an overflow\n     * menu labelled with the management label string.\n     *\n     * <p>If the transport does not supply any user-facing data management\n     * UI, then it should return {@code null} from this method.\n     *\n     * @return An intent that can be passed to Context.startActivity() in order to\n     *         launch the transport's data-management UI.  This method will return\n     *         {@code null} if the transport does not offer any user-facing data\n     *         management UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String dataManagementLabel()",
    "returnType" : "String",
    "comment" : "\n     * On demand, supply a short string that can be shown to the user as the label on an overflow\n     * menu item used to invoke the data management UI.\n     *\n     * @return A string to be used as the label for the transport's data management affordance. If\n     *     the transport supplies a data management intent, this method must not return {@code\n     *     null}.\n     * @deprecated Since Android Q, please use the variant {@link #dataManagementIntentLabel()}\n     *     instead.\n     ",
    "links" : [ "#dataManagementIntentLabel" ]
  }, {
    "name" : "public CharSequence dataManagementIntentLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * On demand, supply a short CharSequence that can be shown to the user as the label on an\n     * overflow menu item used to invoke the data management UI.\n     *\n     * @return A CharSequence to be used as the label for the transport's data management\n     *     affordance. If the transport supplies a data management intent, this method must not\n     *     return {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String transportDirName()",
    "returnType" : "String",
    "comment" : "\n     * Ask the transport where, on local device storage, to keep backup state blobs.\n     * This is per-transport so that mock transports used for testing can coexist with\n     * \"live\" backup services without interfering with the live bookkeeping.  The\n     * returned string should be a name that is expected to be unambiguous among all\n     * available backup transports; the name of the class implementing the transport\n     * is a good choice.\n     *\n     * @return A unique name, suitable for use as a file or directory name, that the\n     *         Backup Manager could use to disambiguate state files associated with\n     *         different backup transports.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int initializeDevice()",
    "returnType" : "int",
    "comment" : "\n     * Initialize the server side storage for this device, erasing all stored data.\n     * The transport may send the request immediately, or may buffer it.  After\n     * this is called, {@link #finishBackup} will be called to ensure the request\n     * is sent and received successfully.\n     *\n     * <p>If the transport returns anything other than TRANSPORT_OK from this method,\n     * the OS will halt the current initialize operation and schedule a retry in the\n     * near future.  Even if the transport is in a state such that attempting to\n     * \"initialize\" the backend storage is meaningless -- for example, if there is\n     * no current live dataset at all, or there is no authenticated account under which\n     * to store the data remotely -- the transport should return TRANSPORT_OK here\n     * and treat the initializeDevice() / finishBackup() pair as a graceful no-op.\n     *\n     * @return One of {@link BackupTransport#TRANSPORT_OK} (OK so far) or\n     *   {@link BackupTransport#TRANSPORT_ERROR} (to retry following network error\n     *   or other failure).\n     ",
    "links" : [ "#finishBackup", "BackupTransport#TRANSPORT_OK", "BackupTransport#TRANSPORT_ERROR" ]
  }, {
    "name" : "public int clearBackupData(PackageInfo packageInfo)",
    "returnType" : "int",
    "comment" : "\n     * Erase the given application's data from the backup destination.  This clears\n     * out the given package's data from the current backup set, making it as though\n     * the app had never yet been backed up.  After this is called, {@link finishBackup}\n     * must be called to ensure that the operation is recorded successfully.\n     *\n     * @return the same error codes as {@link #performBackup}.\n     ",
    "links" : [ "finishBackup", "#performBackup" ]
  }, {
    "name" : "public int finishBackup()",
    "returnType" : "int",
    "comment" : "\n     * Finish sending application data to the backup destination.  This must be\n     * called after {@link #performBackup}, {@link #performFullBackup}, or {@link clearBackupData}\n     * to ensure that all data is sent and the operation properly finalized.  Only when this\n     * method returns true can a backup be assumed to have succeeded.\n     *\n     * @return the same error codes as {@link #performBackup} or {@link #performFullBackup}.\n     ",
    "links" : [ "#performBackup", "#performFullBackup", "clearBackupData", "#performBackup", "#performFullBackup" ]
  }, {
    "name" : "public long requestBackupTime()",
    "returnType" : "long",
    "comment" : "\n     * Verify that this is a suitable time for a key/value backup pass.  This should return zero\n     * if a backup is reasonable right now, some positive value otherwise.  This method\n     * will be called outside of the {@link #performBackup}/{@link #finishBackup} pair.\n     *\n     * <p>If this is not a suitable time for a backup, the transport should return a\n     * backoff delay, in milliseconds, after which the Backup Manager should try again.\n     *\n     * @return Zero if this is a suitable time for a backup pass, or a positive time delay\n     *   in milliseconds to suggest deferring the backup pass for a while.\n     ",
    "links" : [ "#performBackup", "#finishBackup" ]
  }, {
    "name" : "public int performBackup(PackageInfo packageInfo, ParcelFileDescriptor inFd, int flags)",
    "returnType" : "int",
    "comment" : "\n     * Send one application's key/value data update to the backup destination.  The\n     * transport may send the data immediately, or may buffer it.  If this method returns\n     * {@link #TRANSPORT_OK}, {@link #finishBackup} will then be called to ensure the data\n     * is sent and recorded successfully.\n     *\n     * If the backup data is a diff against the previous backup then the flag {@link\n     * BackupTransport#FLAG_INCREMENTAL} will be set. Otherwise, if the data is a complete backup\n     * set then {@link BackupTransport#FLAG_NON_INCREMENTAL} will be set. Before P neither flag will\n     * be set regardless of whether the backup is incremental or not.\n     *\n     * <p>If {@link BackupTransport#FLAG_INCREMENTAL} is set and the transport does not have data\n     * for this package in its storage backend then it cannot apply the incremental diff. Thus it\n     * should return {@link BackupTransport#TRANSPORT_NON_INCREMENTAL_BACKUP_REQUIRED} to indicate\n     * that backup manager should delete its state and retry the package as a non-incremental\n     * backup. Before P, or if this is a non-incremental backup, then this return code is equivalent\n     * to {@link BackupTransport#TRANSPORT_ERROR}.\n     *\n     * @param packageInfo The identity of the application whose data is being backed up.\n     *   This specifically includes the signature list for the package.\n     * @param inFd Descriptor of file with data that resulted from invoking the application's\n     *   BackupService.doBackup() method.  This may be a pipe rather than a file on\n     *   persistent media, so it may not be seekable.\n     * @param flags a combination of {@link BackupTransport#FLAG_USER_INITIATED}, {@link\n     *   BackupTransport#FLAG_NON_INCREMENTAL}, {@link BackupTransport#FLAG_INCREMENTAL},\n     *   {@link BackupTransport#FLAG_DATA_NOT_CHANGED},or 0.\n     * @return one of {@link BackupTransport#TRANSPORT_OK} (OK so far),\n     *  {@link BackupTransport#TRANSPORT_PACKAGE_REJECTED} (to suppress backup of this\n     *  specific package, but allow others to proceed),\n     *  {@link BackupTransport#TRANSPORT_ERROR} (on network error or other failure), {@link\n     *  BackupTransport#TRANSPORT_NON_INCREMENTAL_BACKUP_REQUIRED} (if the transport cannot accept\n     *  an incremental backup for this package), or {@link\n     *  BackupTransport#TRANSPORT_NOT_INITIALIZED} (if the backend dataset has become lost due to\n     *  inactivity purge or some other reason and needs re-initializing)\n     ",
    "links" : [ "#TRANSPORT_OK", "#finishBackup", "BackupTransport#FLAG_NON_INCREMENTAL", "BackupTransport#FLAG_INCREMENTAL", "BackupTransport#TRANSPORT_NON_INCREMENTAL_BACKUP_REQUIRED", "BackupTransport#TRANSPORT_ERROR", "BackupTransport#FLAG_USER_INITIATED", "BackupTransport#FLAG_INCREMENTAL", "BackupTransport#FLAG_DATA_NOT_CHANGED", "BackupTransport#TRANSPORT_OK", "BackupTransport#TRANSPORT_PACKAGE_REJECTED", "BackupTransport#TRANSPORT_ERROR" ]
  }, {
    "name" : "public int performBackup(PackageInfo packageInfo, ParcelFileDescriptor inFd)",
    "returnType" : "int",
    "comment" : "\n     * Legacy version of {@link #performBackup(PackageInfo, ParcelFileDescriptor, int)} that\n     * doesn't use flags parameter.\n     ",
    "links" : [ "#performBackup" ]
  }, {
    "name" : "public RestoreSet[] getAvailableRestoreSets()",
    "returnType" : "RestoreSet[]",
    "comment" : "\n     * Get the set of all backups currently available over this transport.\n     *\n     * @return Descriptions of the set of restore images available for this device,\n     *   or null if an error occurred (the attempt should be rescheduled).\n     *",
    "links" : [ ]
  }, {
    "name" : "public long getCurrentRestoreSet()",
    "returnType" : "long",
    "comment" : "\n     * Get the identifying token of the backup set currently being stored from\n     * this device.  This is used in the case of applications wishing to restore\n     * their last-known-good data.\n     *\n     * @return A token that can be passed to {@link #startRestore}, or 0 if there\n     *   is no backup set available corresponding to the current device state.\n     ",
    "links" : [ "#startRestore" ]
  }, {
    "name" : "public int startRestore(long token, PackageInfo[] packages)",
    "returnType" : "int",
    "comment" : "\n     * Start restoring application data from backup.  After calling this function,\n     * alternate calls to {@link #nextRestorePackage} and {@link #nextRestoreData}\n     * to walk through the actual application data.\n     *\n     * @param token A backup token as returned by {@link #getAvailableRestoreSets}\n     *   or {@link #getCurrentRestoreSet}.\n     * @param packages List of applications to restore (if data is available).\n     *   Application data will be restored in the order given.\n     * @return One of {@link BackupTransport#TRANSPORT_OK} (OK so far, call\n     *   {@link #nextRestorePackage}) or {@link BackupTransport#TRANSPORT_ERROR}\n     *   (an error occurred, the restore should be aborted and rescheduled).\n     ",
    "links" : [ "#nextRestorePackage", "#nextRestoreData", "#getAvailableRestoreSets", "#getCurrentRestoreSet", "BackupTransport#TRANSPORT_OK", "#nextRestorePackage", "BackupTransport#TRANSPORT_ERROR" ]
  }, {
    "name" : "public RestoreDescription nextRestorePackage()",
    "returnType" : "RestoreDescription",
    "comment" : "\n     * Get the package name of the next application with data in the backup store, plus\n     * a description of the structure of the restored archive: either TYPE_KEY_VALUE for\n     * an original-API key/value dataset, or TYPE_FULL_STREAM for a tarball-type archive stream.\n     *\n     * <p>If the package name in the returned RestoreDescription object is the singleton\n     * {@link RestoreDescription#NO_MORE_PACKAGES}, it indicates that no further data is available\n     * in the current restore session: all packages described in startRestore() have been\n     * processed.\n     *\n     * <p>If this method returns {@code null}, it means that a transport-level error has\n     * occurred and the entire restore operation should be abandoned.\n     *\n     * <p class=\"note\">The OS may call {@link #nextRestorePackage()} multiple times\n     * before calling either {@link #getRestoreData(ParcelFileDescriptor) getRestoreData()}\n     * or {@link #getNextFullRestoreDataChunk(ParcelFileDescriptor) getNextFullRestoreDataChunk()}.\n     * It does this when it has determined that it needs to skip restore of one or more\n     * packages.  The transport should not actually transfer any restore data for\n     * the given package in response to {@link #nextRestorePackage()}, but rather wait\n     * for an explicit request before doing so.\n     *\n     * @return A RestoreDescription object containing the name of one of the packages\n     *   supplied to {@link #startRestore} plus an indicator of the data type of that\n     *   restore data; or {@link RestoreDescription#NO_MORE_PACKAGES} to indicate that\n     *   no more packages can be restored in this session; or {@code null} to indicate\n     *   a transport-level error.\n     ",
    "links" : [ "RestoreDescription#NO_MORE_PACKAGES", "#nextRestorePackage", "#getRestoreData", "#getNextFullRestoreDataChunk", "#nextRestorePackage", "#startRestore", "RestoreDescription#NO_MORE_PACKAGES" ]
  }, {
    "name" : "public int getRestoreData(ParcelFileDescriptor outFd)",
    "returnType" : "int",
    "comment" : "\n     * Get the data for the application returned by {@link #nextRestorePackage}, if that\n     * method reported {@link RestoreDescription#TYPE_KEY_VALUE} as its delivery type.\n     * If the package has only TYPE_FULL_STREAM data, then this method will return an\n     * error.\n     *\n     * @param data An open, writable file into which the key/value backup data should be stored.\n     * @return the same error codes as {@link #startRestore}.\n     ",
    "links" : [ "#nextRestorePackage", "RestoreDescription#TYPE_KEY_VALUE", "#startRestore" ]
  }, {
    "name" : "public void finishRestore()",
    "returnType" : "void",
    "comment" : "\n     * End a restore session (aborting any in-process data transfer as necessary),\n     * freeing any resources and connections used during the restore process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long requestFullBackupTime()",
    "returnType" : "long",
    "comment" : "\n     * Verify that this is a suitable time for a full-data backup pass.  This should return zero\n     * if a backup is reasonable right now, some positive value otherwise.  This method\n     * will be called outside of the {@link #performFullBackup}/{@link #finishBackup} pair.\n     *\n     * <p>If this is not a suitable time for a backup, the transport should return a\n     * backoff delay, in milliseconds, after which the Backup Manager should try again.\n     *\n     * @return Zero if this is a suitable time for a backup pass, or a positive time delay\n     *   in milliseconds to suggest deferring the backup pass for a while.\n     *\n     * @see #requestBackupTime()\n     ",
    "links" : [ "#performFullBackup", "#finishBackup" ]
  }, {
    "name" : "public int performFullBackup(PackageInfo targetPackage, ParcelFileDescriptor socket, int flags)",
    "returnType" : "int",
    "comment" : "\n     * Begin the process of sending an application's full-data archive to the backend.\n     * The description of the package whose data will be delivered is provided, as well as\n     * the socket file descriptor on which the transport will receive the data itself.\n     *\n     * <p>If the package is not eligible for backup, the transport should return\n     * {@link BackupTransport#TRANSPORT_PACKAGE_REJECTED}.  In this case the system will\n     * simply proceed with the next candidate if any, or finish the full backup operation\n     * if all apps have been processed.\n     *\n     * <p>After the transport returns {@link BackupTransport#TRANSPORT_OK} from this\n     * method, the OS will proceed to call {@link #sendBackupData()} one or more times\n     * to deliver the application's data as a streamed tarball.  The transport should not\n     * read() from the socket except as instructed to via the {@link #sendBackupData(int)}\n     * method.\n     *\n     * <p>After all data has been delivered to the transport, the system will call\n     * {@link #finishBackup()}.  At this point the transport should commit the data to\n     * its datastore, if appropriate, and close the socket that had been provided in\n     * {@link #performFullBackup(PackageInfo, ParcelFileDescriptor)}.\n     *\n     * <p class=\"note\">If the transport returns TRANSPORT_OK from this method, then the\n     * OS will always provide a matching call to {@link #finishBackup()} even if sending\n     * data via {@link #sendBackupData(int)} failed at some point.\n     *\n     * @param targetPackage The package whose data is to follow.\n     * @param socket The socket file descriptor through which the data will be provided.\n     *    If the transport returns {@link #TRANSPORT_PACKAGE_REJECTED} here, it must still\n     *    close this file descriptor now; otherwise it should be cached for use during\n     *    succeeding calls to {@link #sendBackupData(int)}, and closed in response to\n     *    {@link #finishBackup()}.\n     * @param flags {@link BackupTransport#FLAG_USER_INITIATED} or 0.\n     * @return TRANSPORT_PACKAGE_REJECTED to indicate that the stated application is not\n     *    to be backed up; TRANSPORT_OK to indicate that the OS may proceed with delivering\n     *    backup data; TRANSPORT_ERROR to indicate a fatal error condition that precludes\n     *    performing a backup at this time.\n     ",
    "links" : [ "BackupTransport#TRANSPORT_PACKAGE_REJECTED", "BackupTransport#TRANSPORT_OK", "#sendBackupData", "#sendBackupData", "#finishBackup", "#performFullBackup", "#finishBackup", "#sendBackupData", "#TRANSPORT_PACKAGE_REJECTED", "#sendBackupData", "#finishBackup", "BackupTransport#FLAG_USER_INITIATED" ]
  }, {
    "name" : "public int performFullBackup(PackageInfo targetPackage, ParcelFileDescriptor socket)",
    "returnType" : "int",
    "comment" : "\n     * Legacy version of {@link #performFullBackup(PackageInfo, ParcelFileDescriptor, int)} that\n     * doesn't use flags parameter.\n     ",
    "links" : [ "#performFullBackup" ]
  }, {
    "name" : "public int checkFullBackupSize(long size)",
    "returnType" : "int",
    "comment" : "\n     * Called after {@link #performFullBackup} to make sure that the transport is willing to\n     * handle a full-data backup operation of the specified size on the current package.\n     * If the transport returns anything other than TRANSPORT_OK, the package's backup\n     * operation will be skipped (and {@link #finishBackup() invoked} with no data for that\n     * package being passed to {@link #sendBackupData}.\n     *\n     * <p class=\"note\">The platform does no size-based rejection of full backup attempts on\n     * its own: it is always the responsibility of the transport to implement its own policy.\n     * In particular, even if the preflighted payload size is zero, the platform will still call\n     * this method and will proceed to back up an archive metadata header with no file content\n     * if this method returns TRANSPORT_OK.  To avoid storing such payloads the transport\n     * must recognize this case and return TRANSPORT_PACKAGE_REJECTED.\n     *\n     * Added in {@link android.os.Build.VERSION_CODES#M}.\n     *\n     * @param size The estimated size of the full-data payload for this app.  This includes\n     *         manifest and archive format overhead, but is not guaranteed to be precise.\n     * @return TRANSPORT_OK if the platform is to proceed with the full-data backup,\n     *         TRANSPORT_PACKAGE_REJECTED if the proposed payload size is too large for\n     *         the transport to handle, or TRANSPORT_ERROR to indicate a fatal error\n     *         condition that means the platform cannot perform a backup at this time.\n     ",
    "links" : [ "#performFullBackup", "#finishBackup", "#sendBackupData", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : "public int sendBackupData(int numBytes)",
    "returnType" : "int",
    "comment" : "\n     * Tells the transport to read {@code numBytes} bytes of data from the socket file\n     * descriptor provided in the {@link #performFullBackup(PackageInfo, ParcelFileDescriptor)}\n     * call, and deliver those bytes to the datastore.\n     *\n     * @param numBytes The number of bytes of tarball data available to be read from the\n     *    socket.\n     * @return TRANSPORT_OK on successful processing of the data; TRANSPORT_ERROR to\n     *    indicate a fatal error situation.  If an error is returned, the system will\n     *    call finishBackup() and stop attempting backups until after a backoff and retry\n     *    interval.\n     ",
    "links" : [ "#performFullBackup" ]
  }, {
    "name" : "public void cancelFullBackup()",
    "returnType" : "void",
    "comment" : "\n     * Tells the transport to cancel the currently-ongoing full backup operation.  This\n     * will happen between {@link #performFullBackup()} and {@link #finishBackup()}\n     * if the OS needs to abort the backup operation for any reason, such as a crash in\n     * the application undergoing backup.\n     *\n     * <p>When it receives this call, the transport should discard any partial archive\n     * that it has stored so far.  If possible it should also roll back to the previous\n     * known-good archive in its datastore.\n     *\n     * <p>If the transport receives this callback, it will <em>not</em> receive a\n     * call to {@link #finishBackup()}.  It needs to tear down any ongoing backup state\n     * here.\n     ",
    "links" : [ "#performFullBackup", "#finishBackup", "#finishBackup" ]
  }, {
    "name" : "public boolean isAppEligibleForBackup(PackageInfo targetPackage, boolean isFullBackup)",
    "returnType" : "boolean",
    "comment" : "\n     * Ask the transport whether this app is eligible for backup.\n     *\n     * @param targetPackage The identity of the application.\n     * @param isFullBackup If set, transport should check if app is eligible for full data backup,\n     *   otherwise to check if eligible for key-value backup.\n     * @return Whether this app is eligible for backup.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getBackupQuota(String packageName, boolean isFullBackup)",
    "returnType" : "long",
    "comment" : "\n     * Ask the transport about current quota for backup size of the package.\n     *\n     * @param packageName ID of package to provide the quota.\n     * @param isFullBackup If set, transport should return limit for full data backup, otherwise\n     *                     for key-value backup.\n     * @return Current limit on backup size in bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNextFullRestoreDataChunk(ParcelFileDescriptor socket)",
    "returnType" : "int",
    "comment" : "\n     * Ask the transport to provide data for the \"current\" package being restored.  This\n     * is the package that was just reported by {@link #nextRestorePackage()} as having\n     * {@link RestoreDescription#TYPE_FULL_STREAM} data.\n     *\n     * The transport writes some data to the socket supplied to this call, and returns\n     * the number of bytes written.  The system will then read that many bytes and\n     * stream them to the application's agent for restore, then will call this method again\n     * to receive the next chunk of the archive.  This sequence will be repeated until the\n     * transport returns zero indicating that all of the package's data has been delivered\n     * (or returns a negative value indicating some sort of hard error condition at the\n     * transport level).\n     *\n     * <p>After this method returns zero, the system will then call\n     * {@link #nextRestorePackage()} to begin the restore process for the next\n     * application, and the sequence begins again.\n     *\n     * <p>The transport should always close this socket when returning from this method.\n     * Do not cache this socket across multiple calls or you may leak file descriptors.\n     *\n     * @param socket The file descriptor that the transport will use for delivering the\n     *    streamed archive.  The transport must close this socket in all cases when returning\n     *    from this method.\n     * @return {@link #NO_MORE_DATA} when no more data for the current package is available.\n     *    A positive value indicates the presence of that many bytes to be delivered to the app.\n     *    A value of zero indicates that no data was deliverable at this time, but the restore\n     *    is still running and the caller should retry.  {@link #TRANSPORT_PACKAGE_REJECTED}\n     *    means that the current package's restore operation should be aborted, but that\n     *    the transport itself is still in a good state and so a multiple-package restore\n     *    sequence can still be continued.  Any other negative return value is treated as a\n     *    fatal error condition that aborts all further restore operations on the current dataset.\n     ",
    "links" : [ "#nextRestorePackage", "RestoreDescription#TYPE_FULL_STREAM", "#nextRestorePackage", "#NO_MORE_DATA", "#TRANSPORT_PACKAGE_REJECTED" ]
  }, {
    "name" : "public int abortFullRestore()",
    "returnType" : "int",
    "comment" : "\n     * If the OS encounters an error while processing {@link RestoreDescription#TYPE_FULL_STREAM}\n     * data for restore, it will invoke this method to tell the transport that it should\n     * abandon the data download for the current package.  The OS will then either call\n     * {@link #nextRestorePackage()} again to move on to restoring the next package in the\n     * set being iterated over, or will call {@link #finishRestore()} to shut down the restore\n     * operation.\n     *\n     * @return {@link #TRANSPORT_OK} if the transport was successful in shutting down the\n     *    current stream cleanly, or {@link #TRANSPORT_ERROR} to indicate a serious\n     *    transport-level failure.  If the transport reports an error here, the entire restore\n     *    operation will immediately be finished with no further attempts to restore app data.\n     ",
    "links" : [ "RestoreDescription#TYPE_FULL_STREAM", "#nextRestorePackage", "#finishRestore", "#TRANSPORT_OK", "#TRANSPORT_ERROR" ]
  }, {
    "name" : "public int getTransportFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns flags with additional information about the transport, which is accessible to the\n     * {@link android.app.backup.BackupAgent}. This allows the agent to decide what to do based on\n     * properties of the transport.\n     ",
    "links" : [ "android.app.backup.BackupAgent" ]
  } ],
  "variableNames" : [ "TRANSPORT_OK", "NO_MORE_DATA", "TRANSPORT_ERROR", "TRANSPORT_NOT_INITIALIZED", "TRANSPORT_PACKAGE_REJECTED", "AGENT_ERROR", "AGENT_UNKNOWN", "TRANSPORT_QUOTA_EXCEEDED", "TRANSPORT_NON_INCREMENTAL_BACKUP_REQUIRED", "FLAG_USER_INITIATED", "FLAG_INCREMENTAL", "FLAG_NON_INCREMENTAL", "FLAG_DATA_NOT_CHANGED", "EXTRA_TRANSPORT_REGISTRATION", "mBinderImpl" ],
  "methodNames" : [ "public IBinder getBinder()", "public String name()", "public Intent configurationIntent()", "public String currentDestinationString()", "public Intent dataManagementIntent()", "public String dataManagementLabel()", "public CharSequence dataManagementIntentLabel()", "public String transportDirName()", "public int initializeDevice()", "public int clearBackupData(PackageInfo packageInfo)", "public int finishBackup()", "public long requestBackupTime()", "public int performBackup(PackageInfo packageInfo, ParcelFileDescriptor inFd, int flags)", "public int performBackup(PackageInfo packageInfo, ParcelFileDescriptor inFd)", "public RestoreSet[] getAvailableRestoreSets()", "public long getCurrentRestoreSet()", "public int startRestore(long token, PackageInfo[] packages)", "public RestoreDescription nextRestorePackage()", "public int getRestoreData(ParcelFileDescriptor outFd)", "public void finishRestore()", "public long requestFullBackupTime()", "public int performFullBackup(PackageInfo targetPackage, ParcelFileDescriptor socket, int flags)", "public int performFullBackup(PackageInfo targetPackage, ParcelFileDescriptor socket)", "public int checkFullBackupSize(long size)", "public int sendBackupData(int numBytes)", "public void cancelFullBackup()", "public boolean isAppEligibleForBackup(PackageInfo targetPackage, boolean isFullBackup)", "public long getBackupQuota(String packageName, boolean isFullBackup)", "public int getNextFullRestoreDataChunk(ParcelFileDescriptor socket)", "public int abortFullRestore()", "public int getTransportFlags()" ]
}