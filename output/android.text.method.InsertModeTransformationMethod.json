{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/method/InsertModeTransformationMethod.java",
  "packageName" : "android.text.method",
  "className" : "InsertModeTransformationMethod",
  "comment" : "\n * The transformation method used by handwriting insert mode.\n * This transformation will insert a placeholder string to the original text at the given\n * offset. And it also provides a highlight range for the newly inserted text and the placeholder\n * text.\n *\n * For example,\n *   original text: \"Hello world\"\n *   insert mode is started at index:  5,\n *   placeholder text: \"\\n\\n\"\n * The transformed text will be: \"Hello\\n\\n world\", and the highlight range will be [5, 7)\n * including the inserted placeholder text.\n *\n * If \" abc\" is inserted to the original text at index 5,\n *   the new original text: \"Hello abc world\"\n *   the new transformed text: \"hello abc\\n\\n world\", and the highlight range will be [5, 11).\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mStart",
    "type" : "int",
    "comment" : " The start offset of the highlight range in the original text, inclusive. ",
    "links" : [ ]
  }, {
    "name" : "mEnd",
    "type" : "int",
    "comment" : "\n     * The end offset of the highlight range in the original text, exclusive. The placeholder text\n     * is also inserted at this index.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOldTransformationMethod",
    "type" : "TransformationMethod",
    "comment" : " The transformation method that's already set on the {@link android.widget.TextView}. ",
    "links" : [ "android.widget.TextView" ]
  }, {
    "name" : "mSingleLine",
    "type" : "boolean",
    "comment" : " Whether the {@link android.widget.TextView} is single-lined. ",
    "links" : [ "android.widget.TextView" ]
  } ],
  "methods" : [ {
    "name" : "public InsertModeTransformationMethod update(TransformationMethod oldTransformationMethod, boolean singleLine)",
    "returnType" : "InsertModeTransformationMethod",
    "comment" : "\n     * Create a new {@code InsertModeTransformation} with the given new inner\n     * {@code oldTransformationMethod} and the {@code singleLine} value. The returned\n     * {@link InsertModeTransformationMethod} will keep the highlight range.\n     *\n     * @param oldTransformationMethod the updated inner transformation method at the\n     * {@link android.widget.TextView}.\n     * @param singleLine the updated singleLine value.\n     * @return the new {@link InsertModeTransformationMethod} with the updated\n     * {@code oldTransformationMethod} and {@code singleLine} value.\n     ",
    "links" : [ "android.widget.TextView", "android.text.method.InsertModeTransformationMethod" ]
  }, {
    "name" : "public TransformationMethod getOldTransformationMethod()",
    "returnType" : "TransformationMethod",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CharSequence getPlaceholderText(View view)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTransformation(CharSequence source, View view)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onFocusChanged(View view, CharSequence sourceText, boolean focused, int direction, Rect previouslyFocusedRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void beforeTextChanged(CharSequence s, int start, int count, int after)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTextChanged(CharSequence s, int start, int before, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void afterTextChanged(Editable s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean intersect(int s1, int e1, int s2, int e2)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the given two ranges intersects. This logic is the same one used in\n     * {@link Spanned} to determine whether a span range intersect with the query range.\n     ",
    "links" : [ "android.text.Spanned" ]
  } ],
  "methodNames" : [ "public InsertModeTransformationMethod update(TransformationMethod oldTransformationMethod, boolean singleLine)", "public TransformationMethod getOldTransformationMethod()", "private CharSequence getPlaceholderText(View view)", "public CharSequence getTransformation(CharSequence source, View view)", "public void onFocusChanged(View view, CharSequence sourceText, boolean focused, int direction, Rect previouslyFocusedRect)", "public void beforeTextChanged(CharSequence s, int start, int count, int after)", "public void onTextChanged(CharSequence s, int start, int before, int count)", "public void afterTextChanged(Editable s)", "private static boolean intersect(int s1, int e1, int s2, int e2)" ],
  "variableNames" : [ "mStart", "mEnd", "mOldTransformationMethod", "mSingleLine" ]
}