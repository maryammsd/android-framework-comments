{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/FontScaleConverterFactory.java",
  "packageName" : "android.content.res",
  "className" : "FontScaleConverterFactory",
  "comment" : "\n * Creates {@link FontScaleConverter}s at various scales.\n *\n * Generally you shouldn't need this; you can use {@link\n * android.util.TypedValue#applyDimension(int, float, DisplayMetrics)} directly and it will do the\n * scaling conversion for you. But for UI frameworks or other situations where you need to do the\n * conversion without an Android Context, you can use this class.\n *\n * @hide\n ",
  "links" : [ "android.util.TypedValue#applyDimension(int", "android.content.res.FontScaleConverter" ],
  "variables" : [ {
    "name" : "SCALE_KEY_MULTIPLIER",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLookupTables",
    "type" : "SparseArray<FontScaleConverter>",
    "comment" : " GuardedBy(\"LOOKUP_TABLES_WRITE_LOCK\") but only for writes!",
    "links" : [ ]
  }, {
    "name" : "LOOKUP_TABLES_WRITE_LOCK",
    "type" : "Object",
    "comment" : "\n     * This is a write lock only! We don't care about synchronization on reads; they can be a bit\n     * out of date. But all writes have to be atomic, so we use this similar to a\n     * CopyOnWriteArrayList.\n     ",
    "links" : [ ]
  }, {
    "name" : "sMinScaleBeforeCurvesApplied",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isNonLinearFontScalingActive(float fontScale)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if non-linear font scaling curves would be in effect for the given scale, false\n     * if the scaling would follow a linear curve or for no scaling.\n     *\n     * <p>Example usage:\n     * <code>isNonLinearFontScalingActive(getResources().getConfiguration().fontScale)</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FontScaleConverter forScale(float fontScale)",
    "returnType" : "FontScaleConverter",
    "comment" : "\n     * Finds a matching FontScaleConverter for the given fontScale factor.\n     *\n     * @param fontScale the scale factor, usually from {@link Configuration#fontScale}.\n     *\n     * @return a converter for the given scale, or null if non-linear scaling should not be used.\n     ",
    "links" : [ "android.content.res.Configuration#fontScale" ]
  }, {
    "name" : "private static FontScaleConverter createInterpolatedTableBetween(FontScaleConverter start, FontScaleConverter end, float interpolationPoint)",
    "returnType" : "FontScaleConverter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getKey(float fontScale)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float getScaleFromKey(int key)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void put(float scaleKey, @NonNull FontScaleConverter fontScaleConverter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void putInto(SparseArray<FontScaleConverter> table, float scaleKey, @NonNull FontScaleConverter fontScaleConverter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static FontScaleConverter get(float scaleKey)",
    "returnType" : "FontScaleConverter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isNonLinearFontScalingActive(float fontScale)", "public static FontScaleConverter forScale(float fontScale)", "private static FontScaleConverter createInterpolatedTableBetween(FontScaleConverter start, FontScaleConverter end, float interpolationPoint)", "private static int getKey(float fontScale)", "private static float getScaleFromKey(int key)", "private static void put(float scaleKey, @NonNull FontScaleConverter fontScaleConverter)", "private static void putInto(SparseArray<FontScaleConverter> table, float scaleKey, @NonNull FontScaleConverter fontScaleConverter)", "private static FontScaleConverter get(float scaleKey)" ],
  "variableNames" : [ "SCALE_KEY_MULTIPLIER", "sLookupTables", "LOOKUP_TABLES_WRITE_LOCK", "sMinScaleBeforeCurvesApplied" ]
}