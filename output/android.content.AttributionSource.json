{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/AttributionSource.java",
  "packageName" : "android.content",
  "className" : "AttributionSource",
  "comment" : "\n * This class represents a source to which access to permission protected data should be\n * attributed. Attribution sources can be chained to represent cases where the protected\n * data would flow through several applications. For example, app A may ask app B for\n * contacts and in turn app B may ask app C for contacts. In this case, the attribution\n * chain would be A -> B -> C and the data flow would be C -> B -> A. There are two\n * main benefits of using the attribution source mechanism: avoid doing explicit permission\n * checks on behalf of the calling app if you are accessing private data on their behalf\n * to send back; avoid double data access blaming which happens as you check the calling\n * app's permissions and when you access the data behind these permissions (for runtime\n * permissions). Also if not explicitly blaming the caller the data access would be\n * counted towards your app vs to the previous app where yours was just a proxy.\n * <p>\n * Every {@link Context} has an attribution source and you can get it via {@link\n * Context#getAttributionSource()} representing itself, which is a chain of one. You\n * can attribute work to another app, or more precisely to a chain of apps, through\n * which the data you would be accessing would flow, via {@link Context#createContext(\n * ContextParams)} plus specifying an attribution source for the next app to receive\n * the protected data you are accessing via {@link AttributionSource.Builder#setNext(\n * AttributionSource)}. Creating this attribution chain ensures that the datasource would\n * check whether every app in the attribution chain has permission to access the data\n * before releasing it. The datasource will also record appropriately that this data was\n * accessed by the apps in the sequence if the data is behind a sensitive permission\n * (e.g. dangerous). Again, this is useful if you are accessing the data on behalf of another\n * app, for example a speech recognizer using the mic so it can provide recognition to\n * a calling app.\n * <p>\n * You can create an attribution chain of you and any other app without any verification\n * as this is something already available via the {@link android.app.AppOpsManager} APIs.\n * This is supported to handle cases where you don't have access to the caller's attribution\n * source and you can directly use the {@link AttributionSource.Builder} APIs. However,\n * if the data flows through more than two apps (more than you access the data for the\n * caller) you need to have a handle to the {@link AttributionSource} for the calling app's\n * context in order to create an attribution context. This means you either need to have an\n * API for the other app to send you its attribution source or use a platform API that pipes\n * the callers attribution source.\n * <p>\n * You cannot forge an attribution chain without the participation of every app in the\n * attribution chain (aside of the special case mentioned above). To create an attribution\n * source that is trusted you need to create an attribution context that points to an\n * attribution source that was explicitly created by the app that it refers to, recursively.\n * <p>\n * Since creating an attribution context leads to all permissions for apps in the attribution\n * chain being checked, you need to expect getting a security exception when accessing\n * permission protected APIs since some app in the chain may not have the permission.\n ",
  "links" : [ "AttributionSource.Builder#setNext(", "android.content.Context", "android.content.Context#getAttributionSource()", "AttributionSource.Builder", "android.app.AppOpsManager", "android.content.Context#createContext(", "android.content.AttributionSource" ],
  "variables" : [ {
    "name" : "DESCRIPTOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDefaultToken",
    "type" : "Binder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSourceState",
    "type" : "AttributionSourceState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextCached",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenouncedPermissionsCached",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AttributionSource>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public AttributionSource withNextAttributionSource(@Nullable AttributionSource next)",
    "returnType" : "AttributionSource",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AttributionSource withPackageName(@Nullable String packageName)",
    "returnType" : "AttributionSource",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AttributionSource withToken(@NonNull IBinder token)",
    "returnType" : "AttributionSource",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AttributionSource withDefaultToken()",
    "returnType" : "AttributionSource",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AttributionSource withPid(int pid)",
    "returnType" : "AttributionSource",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AttributionSource withDeviceId(int deviceId)",
    "returnType" : "AttributionSource",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AttributionSourceState asState()",
    "returnType" : "AttributionSourceState",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ScopedParcelState asScopedParcelState()",
    "returnType" : "ScopedParcelState",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static AttributionSource myAttributionSource()",
    "returnType" : "AttributionSource",
    "comment" : "\n     * Returns a generic {@link AttributionSource} that represents the entire\n     * calling process.\n     *\n     * <p>Callers are <em>strongly</em> encouraged to use a more specific\n     * attribution source whenever possible, such as from\n     * {@link Context#getAttributionSource()}, since that enables developers to\n     * have more detailed and scoped control over attribution within\n     * sub-components of their app.\n     *\n     * @see Context#createAttributionContext(String)\n     * @see Context#getAttributionTag()\n     * @return a generic {@link AttributionSource} representing the entire\n     *         calling process\n     * @throws IllegalStateException when no accurate {@link AttributionSource}\n     *         can be determined\n     ",
    "links" : [ "android.content.Context#getAttributionSource()", "android.content.AttributionSource" ]
  }, {
    "name" : "public void enforceCallingUid()",
    "returnType" : "void",
    "comment" : "\n     * If you are handling an IPC and you don't trust the caller you need to validate\n     * whether the attribution source is one for the calling app to prevent the caller\n     * to pass you a source from another app without including themselves in the\n     * attribution chain.\n     *\n     * @throws SecurityException if the attribution source cannot be trusted to be from the caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean checkCallingUid()",
    "returnType" : "boolean",
    "comment" : "\n     * If you are handling an IPC and you don't trust the caller you need to validate\n     * whether the attribution source is one for the calling app to prevent the caller\n     * to pass you a source from another app without including themselves in the\n     * attribution chain.\n     *\n     * @return if the attribution source cannot be trusted to be from the caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingPid()",
    "returnType" : "void",
    "comment" : "\n     * Validate that the pid being claimed for the calling app is not spoofed.\n     *\n     * Note that the PID may be unavailable, for example if we're in a oneway Binder call. In this\n     * case, calling enforceCallingPid is guaranteed to fail. The caller should anticipate this.\n     *\n     * @throws SecurityException if the attribution source cannot be trusted to be from the caller.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean checkCallingPid()",
    "returnType" : "boolean",
    "comment" : "\n     * Validate that the pid being claimed for the calling app is not spoofed\n     *\n     * @return if the attribution source cannot be trusted to be from the caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getNextUid()",
    "returnType" : "int",
    "comment" : "\n     * @return The next UID that would receive the permission protected data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNextPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return The next package that would receive the permission protected data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNextAttributionTag()",
    "returnType" : "String",
    "comment" : "\n     * @return The next package's attribution tag that would receive\n     * the permission protected data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getNextToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * @return The next package's token that would receive\n     * the permission protected data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNextDeviceId()",
    "returnType" : "int",
    "comment" : "\n     * @return The next package's device Id from its context.\n     * This device ID is used for permissions checking during attribution source validation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTrusted(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this attribution source can be trusted. That is whether\n     * the app it refers to created it and provided to the attribution chain.\n     *\n     * @param context Context handle.\n     * @return Whether this is a trusted source.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getRenouncedPermissions()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Permissions that should be considered revoked regardless if granted.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUid()",
    "returnType" : "int",
    "comment" : "\n     * The UID that is accessing the permission protected data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPid()",
    "returnType" : "int",
    "comment" : "\n     * The PID that is accessing the permission protected data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * The package that is accessing the permission protected data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAttributionTag()",
    "returnType" : "String",
    "comment" : "\n     * The attribution tag of the app accessing the permission protected data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the device ID for this attribution source. Attribution source can set the device ID\n     * using {@link Builder#setDeviceId(int)}, the default device ID is\n     * {@link Context#DEVICE_ID_DEFAULT}.\n     * <p>\n     * This device ID is used for permissions checking during attribution source validation.\n     ",
    "links" : [ "android.content.Context#DEVICE_ID_DEFAULT", "#setDeviceId(int)" ]
  }, {
    "name" : "public IBinder getToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * Unique token for that source.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AttributionSource getNext()",
    "returnType" : "AttributionSource",
    "comment" : "\n     * The next app to receive the permission protected data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equalsExceptToken(@Nullable AttributionSource o)",
    "returnType" : "boolean",
    "comment" : "\n     * We store trusted attribution sources without their token (the token is the key to the map)\n     * to avoid having a strong reference to the token. This means, when checking the equality of a\n     * supplied AttributionSource in PermissionManagerService.isTrustedAttributionSource, we want to\n     * compare everything except the token.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public AttributionSource withNextAttributionSource(@Nullable AttributionSource next)", "public AttributionSource withPackageName(@Nullable String packageName)", "public AttributionSource withToken(@NonNull IBinder token)", "public AttributionSource withDefaultToken()", "public AttributionSource withPid(int pid)", "public AttributionSource withDeviceId(int deviceId)", "public AttributionSourceState asState()", "public ScopedParcelState asScopedParcelState()", "public static AttributionSource myAttributionSource()", "public void enforceCallingUid()", "public boolean checkCallingUid()", "public void enforceCallingPid()", "private boolean checkCallingPid()", "public String toString()", "public int getNextUid()", "public String getNextPackageName()", "public String getNextAttributionTag()", "public IBinder getNextToken()", "public int getNextDeviceId()", "public boolean isTrusted(@NonNull Context context)", "public Set<String> getRenouncedPermissions()", "public int getUid()", "public int getPid()", "public String getPackageName()", "public String getAttributionTag()", "public int getDeviceId()", "public IBinder getToken()", "public AttributionSource getNext()", "public boolean equals(@Nullable Object o)", "public boolean equalsExceptToken(@Nullable AttributionSource o)", "public int hashCode()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()" ],
  "variableNames" : [ "DESCRIPTOR", "sDefaultToken", "mAttributionSourceState", "mNextCached", "mRenouncedPermissionsCached", "CREATOR" ]
}