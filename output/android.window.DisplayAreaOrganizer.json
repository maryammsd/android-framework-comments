{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/DisplayAreaOrganizer.java",
  "packageName" : "android.window",
  "className" : "DisplayAreaOrganizer",
  "comment" : "\n * Interface for WindowManager to delegate control of display areas.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "KEY_ROOT_DISPLAY_AREA_ID",
    "type" : "String",
    "comment" : "\n     * Key to specify the {@link com.android.server.wm.RootDisplayArea} to attach a window to.\n     * It will be used by the function passed in from\n     * {@link com.android.server.wm.DisplayAreaPolicyBuilder#setSelectRootForWindowFunc(BiFunction)}\n     * to find the Root DA to attach the window.\n     * @hide\n     ",
    "links" : [ "com.android.server.wm.DisplayAreaPolicyBuilder#setSelectRootForWindowFunc(BiFunction)", "com.android.server.wm.RootDisplayArea" ]
  }, {
    "name" : "FEATURE_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * The value in display area indicating that no value has been set.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_SYSTEM_FIRST",
    "type" : "int",
    "comment" : "\n     * The Root display area on a display\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_ROOT",
    "type" : "int",
    "comment" : "\n     * The Root display area on a display\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_DEFAULT_TASK_CONTAINER",
    "type" : "int",
    "comment" : "\n     * Display area hosting the default task container.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_WINDOW_TOKENS",
    "type" : "int",
    "comment" : "\n     * Display area hosting non-activity window tokens.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_ONE_HANDED",
    "type" : "int",
    "comment" : "\n     * Display area for one handed feature\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_WINDOWED_MAGNIFICATION",
    "type" : "int",
    "comment" : "\n     * Display area that can be magnified in\n     * {@link Settings.Secure.ACCESSIBILITY_MAGNIFICATION_MODE_WINDOW}. It contains all windows\n     * below {@link WindowManager.LayoutParams#TYPE_ACCESSIBILITY_MAGNIFICATION_OVERLAY}.\n     ",
    "links" : [ "WindowManager.LayoutParams#TYPE_ACCESSIBILITY_MAGNIFICATION_OVERLAY", "Settings.Secure.ACCESSIBILITY_MAGNIFICATION_MODE_WINDOW" ]
  }, {
    "name" : "FEATURE_FULLSCREEN_MAGNIFICATION",
    "type" : "int",
    "comment" : "\n     * Display area that can be magnified in\n     * {@link Settings.Secure.ACCESSIBILITY_MAGNIFICATION_MODE_FULLSCREEN}. This is different from\n     * {@link #FEATURE_WINDOWED_MAGNIFICATION} that the whole display will be magnified.\n     * @hide\n     ",
    "links" : [ "#FEATURE_WINDOWED_MAGNIFICATION", "Settings.Secure.ACCESSIBILITY_MAGNIFICATION_MODE_FULLSCREEN" ]
  }, {
    "name" : "FEATURE_HIDE_DISPLAY_CUTOUT",
    "type" : "int",
    "comment" : "\n     * Display area for hiding display cutout feature\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_IME_PLACEHOLDER",
    "type" : "int",
    "comment" : "\n     * Display area that the IME container can be placed in. Should be enabled on every root\n     * hierarchy if IME container may be reparented to that hierarchy when the IME target changed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_IME",
    "type" : "int",
    "comment" : "\n     * Display area hosting IME window tokens (@see ImeContainer). By default, IMEs are parented\n     * to FEATURE_IME_PLACEHOLDER but can be reparented under other RootDisplayArea.\n     *\n     * This feature can register organizers in order to disable the reparenting logic and manage\n     * the position and settings of the container manually. This is useful for foldable devices\n     * which require custom UX rules for the IME position (e.g. IME on one screen and the focused\n     * app on another screen).\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_WINDOWING_LAYER",
    "type" : "int",
    "comment" : "\n     * Display area that includes all areas which can have windows. It is used to separate the\n     * window content to provide the ability of display level animation and display recording.\n     * It is usually only a placeholder that organizer should not control it. This only exists\n     * if {@link #FEATURE_WINDOWED_MAGNIFICATION} is not available to be the windowing layer.\n     * @hide\n     ",
    "links" : [ "#FEATURE_WINDOWED_MAGNIFICATION" ]
  }, {
    "name" : "FEATURE_SYSTEM_LAST",
    "type" : "int",
    "comment" : "\n     * The last boundary of display area for system features\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_VENDOR_FIRST",
    "type" : "int",
    "comment" : "\n     * Vendor specific display area definition can start with this value.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_VENDOR_LAST",
    "type" : "int",
    "comment" : "\n     * Last possible vendor specific display area id.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_RUNTIME_TASK_CONTAINER_FIRST",
    "type" : "int",
    "comment" : "\n     * Task display areas that can be created at runtime start with this value.\n     * @see #createTaskDisplayArea(int, int, String)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : " made on the incoming binder call.",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "IDisplayAreaOrganizer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Executor getExecutor()",
    "returnType" : "Executor",
    "comment" : "\n     * Gets the executor to run callbacks on.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<DisplayAreaAppearedInfo> registerOrganizer(int displayAreaFeature)",
    "returnType" : "List<DisplayAreaAppearedInfo>",
    "comment" : "\n     * Registers a DisplayAreaOrganizer to manage display areas for a given feature. A feature can\n     * not be registered by multiple organizers at the same time.\n     *\n     * @return a list of display areas that should be managed by the organizer.\n     * @throws IllegalStateException if the feature has already been registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOrganizer()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayAreaAppearedInfo createTaskDisplayArea(int displayId, int parentFeatureId, @NonNull String name)",
    "returnType" : "DisplayAreaAppearedInfo",
    "comment" : "\n     * Creates a persistent {@link com.android.server.wm.TaskDisplayArea}.\n     *\n     * The new created TDA is organized by the organizer, and will be deleted on calling\n     * {@link #deleteTaskDisplayArea(WindowContainerToken)} or {@link #unregisterOrganizer()}.\n     *\n     * @param displayId the display to create the new TDA in.\n     * @param parentFeatureId the parent to create the new TDA in. If it is a\n     *                        {@link com.android.server.wm.RootDisplayArea}, the new TDA will be\n     *                        placed as the topmost TDA. If it is another TDA, the new TDA will be\n     *                        placed as the topmost child.\n     *                        Caller can use {@link #FEATURE_ROOT} as the root of the logical\n     *                        display, or {@link #FEATURE_DEFAULT_TASK_CONTAINER} as the default\n     *                        TDA.\n     * @param name the name for the new task display area.\n     * @return the new created task display area.\n     * @throws IllegalArgumentException if failed to create a new task display area.\n     * @hide\n     ",
    "links" : [ "com.android.server.wm.TaskDisplayArea", "#FEATURE_ROOT", "#unregisterOrganizer()", "com.android.server.wm.RootDisplayArea", "#deleteTaskDisplayArea(WindowContainerToken)", "#FEATURE_DEFAULT_TASK_CONTAINER" ]
  }, {
    "name" : "public void deleteTaskDisplayArea(@NonNull WindowContainerToken taskDisplayArea)",
    "returnType" : "void",
    "comment" : "\n     * Deletes a persistent task display area. It can only be one that created by an organizer.\n     *\n     * @throws IllegalArgumentException if failed to delete the task display area.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDisplayAreaAppeared(@NonNull DisplayAreaInfo displayAreaInfo, @NonNull SurfaceControl leash)",
    "returnType" : "void",
    "comment" : "\n     * Called when a DisplayArea of the registered window type can be controlled by this organizer.\n     * It will not be called for the DisplayAreas that exist when {@link #registerOrganizer(int)} is\n     * called.\n     ",
    "links" : [ "#registerOrganizer(int)" ]
  }, {
    "name" : "public void onDisplayAreaVanished(@NonNull DisplayAreaInfo displayAreaInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDisplayAreaInfoChanged(@NonNull DisplayAreaInfo displayAreaInfo)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private IDisplayAreaOrganizerController getController()",
    "returnType" : "IDisplayAreaOrganizerController",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Executor getExecutor()", "public List<DisplayAreaAppearedInfo> registerOrganizer(int displayAreaFeature)", "public void unregisterOrganizer()", "public DisplayAreaAppearedInfo createTaskDisplayArea(int displayId, int parentFeatureId, @NonNull String name)", "public void deleteTaskDisplayArea(@NonNull WindowContainerToken taskDisplayArea)", "public void onDisplayAreaAppeared(@NonNull DisplayAreaInfo displayAreaInfo, @NonNull SurfaceControl leash)", "public void onDisplayAreaVanished(@NonNull DisplayAreaInfo displayAreaInfo)", "public void onDisplayAreaInfoChanged(@NonNull DisplayAreaInfo displayAreaInfo)", "private IDisplayAreaOrganizerController getController()" ],
  "variableNames" : [ "KEY_ROOT_DISPLAY_AREA_ID", "FEATURE_UNDEFINED", "FEATURE_SYSTEM_FIRST", "FEATURE_ROOT", "FEATURE_DEFAULT_TASK_CONTAINER", "FEATURE_WINDOW_TOKENS", "FEATURE_ONE_HANDED", "FEATURE_WINDOWED_MAGNIFICATION", "FEATURE_FULLSCREEN_MAGNIFICATION", "FEATURE_HIDE_DISPLAY_CUTOUT", "FEATURE_IME_PLACEHOLDER", "FEATURE_IME", "FEATURE_WINDOWING_LAYER", "FEATURE_SYSTEM_LAST", "FEATURE_VENDOR_FIRST", "FEATURE_VENDOR_LAST", "FEATURE_RUNTIME_TASK_CONTAINER_FIRST", "mExecutor", "mInterface" ]
}