{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/usage/EventList.java",
  "packageName" : "android.app.usage",
  "className" : "EventList",
  "comment" : "\n * A container to keep {@link UsageEvents.Event usage events} in non-descending order of their\n * {@link UsageEvents.Event#mTimeStamp timestamps}.\n *\n * @hide\n ",
  "links" : [ "UsageEvents.Event", "UsageEvents.Event#mTimeStamp" ],
  "variables" : [ {
    "name" : "mEvents",
    "type" : "ArrayList<UsageEvents.Event>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the size of the list\n     * @return the number of events in the list\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all events from the list\n     ",
    "links" : [ ]
  }, {
    "name" : "public UsageEvents.Event get(int index)",
    "returnType" : "UsageEvents.Event",
    "comment" : "\n     * Returns the {@link UsageEvents.Event event} at the specified position in this list.\n     * @param index the index of the event to return, such that {@code 0 <= index < size()}\n     * @return The {@link UsageEvents.Event event} at position {@code index}\n     ",
    "links" : [ "UsageEvents.Event" ]
  }, {
    "name" : "public void insert(UsageEvents.Event event)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the given {@link UsageEvents.Event event} into the list while keeping the list sorted\n     * based on the event {@link UsageEvents.Event#mTimeStamp timestamps}.\n     *\n     * @param event The event to insert\n     ",
    "links" : [ "UsageEvents.Event", "UsageEvents.Event#mTimeStamp" ]
  }, {
    "name" : "public UsageEvents.Event remove(int index)",
    "returnType" : "UsageEvents.Event",
    "comment" : "\n     * Removes the event at the given index.\n     *\n     * @param index the index of the event to remove\n     * @return the event removed, or {@code null} if the index was out of bounds\n     ",
    "links" : [ ]
  }, {
    "name" : "public int firstIndexOnOrAfter(long timeStamp)",
    "returnType" : "int",
    "comment" : "\n     * Finds the index of the first event whose timestamp is greater than or equal to the given\n     * timestamp.\n     *\n     * @param timeStamp The timestamp for which to search the list.\n     * @return The smallest {@code index} for which {@code (get(index).mTimeStamp >= timeStamp)} is\n     * {@code true}, or {@link #size() size} if no such {@code index} exists.\n     ",
    "links" : [ "#size()" ]
  }, {
    "name" : "public void merge(EventList events)",
    "returnType" : "void",
    "comment" : "\n     * Merge the {@link UsageEvents.Event events} in the given {@link EventList list} into this\n     * list while keeping the list sorted based on the event {@link\n     * UsageEvents.Event#mTimeStamp timestamps}.\n     *\n     * @param events The event list to merge\n     ",
    "links" : [ "UsageEvents.Event", "UsageEvents.Event#mTimeStamp", "android.app.usage.EventList" ]
  } ],
  "methodNames" : [ "public int size()", "public void clear()", "public UsageEvents.Event get(int index)", "public void insert(UsageEvents.Event event)", "public UsageEvents.Event remove(int index)", "public int firstIndexOnOrAfter(long timeStamp)", "public void merge(EventList events)" ],
  "variableNames" : [ "mEvents" ]
}