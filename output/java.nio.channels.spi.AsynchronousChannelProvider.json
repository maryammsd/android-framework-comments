{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/spi/AsynchronousChannelProvider.java",
  "packageName" : "java.nio.channels.spi",
  "className" : "AsynchronousChannelProvider",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "private static Void checkPermission()",
    "returnType" : "Void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AsynchronousChannelProvider provider()",
    "returnType" : "AsynchronousChannelProvider",
    "comment" : "\n     * Returns the system-wide default asynchronous channel provider for this\n     * invocation of the Java virtual machine.\n     *\n     * <p> The first invocation of this method locates the default provider\n     * object as follows: </p>\n     *\n     * <ol>\n     *\n     *   <li><p> If the system property\n     *   {@code java.nio.channels.spi.AsynchronousChannelProvider} is defined\n     *   then it is taken to be the fully-qualified name of a concrete provider class.\n     *   The class is loaded and instantiated; if this process fails then an\n     *   unspecified error is thrown.  </p></li>\n     *\n     *   <li><p> If a provider class has been installed in a jar file that is\n     *   visible to the system class loader, and that jar file contains a\n     *   provider-configuration file named\n     *   {@code java.nio.channels.spi.AsynchronousChannelProvider} in the resource\n     *   directory {@code META-INF/services}, then the first class name\n     *   specified in that file is taken.  The class is loaded and\n     *   instantiated; if this process fails then an unspecified error is\n     *   thrown.  </p></li>\n     *\n     *   <li><p> Finally, if no provider has been specified by any of the above\n     *   means then the system-default provider class is instantiated and the\n     *   result is returned.  </p></li>\n     *\n     * </ol>\n     *\n     * <p> Subsequent invocations of this method return the provider that was\n     * returned by the first invocation.  </p>\n     *\n     * @return  The system-wide default AsynchronousChannel provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract AsynchronousChannelGroup openAsynchronousChannelGroup(int nThreads, ThreadFactory threadFactory) throws IOException",
    "returnType" : "AsynchronousChannelGroup",
    "comment" : "\n     * Constructs a new asynchronous channel group with a fixed thread pool.\n     *\n     * @param   nThreads\n     *          The number of threads in the pool\n     * @param   threadFactory\n     *          The factory to use when creating new threads\n     *\n     * @return  A new asynchronous channel group\n     *\n     * @throws  IllegalArgumentException\n     *          If {@code nThreads <= 0}\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @see AsynchronousChannelGroup#withFixedThreadPool\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract AsynchronousChannelGroup openAsynchronousChannelGroup(ExecutorService executor, int initialSize) throws IOException",
    "returnType" : "AsynchronousChannelGroup",
    "comment" : "\n     * Constructs a new asynchronous channel group with the given thread pool.\n     *\n     * @param   executor\n     *          The thread pool\n     * @param   initialSize\n     *          A value {@code >=0} or a negative value for implementation\n     *          specific default\n     *\n     * @return  A new asynchronous channel group\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @see AsynchronousChannelGroup#withCachedThreadPool\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(AsynchronousChannelGroup group) throws IOException",
    "returnType" : "AsynchronousServerSocketChannel",
    "comment" : "\n     * Opens an asynchronous server-socket channel.\n     *\n     * @param   group\n     *          The group to which the channel is bound, or {@code null} to\n     *          bind to the default group\n     *\n     * @return  The new channel\n     *\n     * @throws  IllegalChannelGroupException\n     *          If the provider that created the group differs from this provider\n     * @throws  ShutdownChannelGroupException\n     *          The group is shutdown\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract AsynchronousSocketChannel openAsynchronousSocketChannel(AsynchronousChannelGroup group) throws IOException",
    "returnType" : "AsynchronousSocketChannel",
    "comment" : "\n     * Opens an asynchronous socket channel.\n     *\n     * @param   group\n     *          The group to which the channel is bound, or {@code null} to\n     *          bind to the default group\n     *\n     * @return  The new channel\n     *\n     * @throws  IllegalChannelGroupException\n     *          If the provider that created the group differs from this provider\n     * @throws  ShutdownChannelGroupException\n     *          The group is shutdown\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Void checkPermission()", "public static AsynchronousChannelProvider provider()", "public abstract AsynchronousChannelGroup openAsynchronousChannelGroup(int nThreads, ThreadFactory threadFactory) throws IOException", "public abstract AsynchronousChannelGroup openAsynchronousChannelGroup(ExecutorService executor, int initialSize) throws IOException", "public abstract AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(AsynchronousChannelGroup group) throws IOException", "public abstract AsynchronousSocketChannel openAsynchronousSocketChannel(AsynchronousChannelGroup group) throws IOException" ],
  "variableNames" : [ ]
}