{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/adservices/adselection/ReportEventRequest.java",
  "packageName" : "android.adservices.adselection",
  "className" : "ReportEventRequest",
  "comment" : "\n * Request object wrapping the required arguments needed to report an ad event.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FLAG_REPORTING_DESTINATION_SELLER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_REPORTING_DESTINATION_BUYER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSET_REPORTING_DESTINATIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSET_REPORTING_DESTINATIONS_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_REPORTING_DESTINATIONS_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REPORT_EVENT_MAX_INTERACTION_DATA_SIZE_B",
    "type" : "long",
    "comment" : " 64 KB",
    "links" : [ ]
  }, {
    "name" : "EVENT_DATA_SIZE_MAX_EXCEEDED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdSelectionId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventKey",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputEvent",
    "type" : "InputEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventData",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReportingDestinations",
    "type" : "int",
    "comment" : " buyer, seller, or both",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getAdSelectionId()",
    "returnType" : "long",
    "comment" : "\n     * Returns the adSelectionId, the primary identifier of an ad selection process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getKey()",
    "returnType" : "String",
    "comment" : "\n     * Returns the event key, the type of ad event to be reported.\n     *\n     * <p>This field will be used to fetch the {@code reportingUri} associated with the {@code\n     * eventKey} registered in {@code registerAdBeacon} after ad selection.\n     *\n     * <p>This field should be an exact match to the {@code eventKey} registered in {@code\n     * registerAdBeacon}. Specific details about {@code registerAdBeacon} can be found at the\n     * documentation of {@link AdSelectionManager#reportImpression}\n     *\n     * <p>The event key (when inspecting its byte array with {@link String#getBytes()}) in {@code\n     * UTF-8} format should not exceed 40 bytes. Any key exceeding this limit will not be registered\n     * during the {@code registerAdBeacon} call.\n     ",
    "links" : [ "android.adservices.adselection.AdSelectionManager#reportImpression", "#getBytes()" ]
  }, {
    "name" : "public InputEvent getInputEvent()",
    "returnType" : "InputEvent",
    "comment" : "\n     * Returns the input event associated with the user interaction.\n     *\n     * <p>This field is either {@code null}, representing a <em>view</em> event, or has an {@link\n     * InputEvent} object, representing a <em>click</em> event.\n     ",
    "links" : [ "android.view.InputEvent" ]
  }, {
    "name" : "public String getData()",
    "returnType" : "String",
    "comment" : "\n     * Returns the ad event data.\n     *\n     * <p>After ad selection, this data is generated by the caller. The caller can then call {@link\n     * AdSelectionManager#reportEvent}. This data will be attached in a POST request to the {@code\n     * reportingUri} registered in {@code registerAdBeacon}.\n     *\n     * <p>The size of {@link String#getBytes()} in {@code UTF-8} format should be below 64KB.\n     ",
    "links" : [ "#getBytes()", "android.adservices.adselection.AdSelectionManager#reportEvent" ]
  }, {
    "name" : "public int getReportingDestinations()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bitfield of reporting destinations to report to (buyer, seller, or both).\n     *\n     * <p>To create this bitfield, place an {@code |} bitwise operator between each {@code\n     * reportingDestination} to be reported to. For example to only report to buyer, set the\n     * reportingDestinations field to {@link #FLAG_REPORTING_DESTINATION_BUYER} To only report to\n     * seller, set the reportingDestinations field to {@link #FLAG_REPORTING_DESTINATION_SELLER} To\n     * report to both buyers and sellers, set the reportingDestinations field to {@link\n     * #FLAG_REPORTING_DESTINATION_BUYER} | {@link #FLAG_REPORTING_DESTINATION_SELLER}\n     ",
    "links" : [ "#FLAG_REPORTING_DESTINATION_SELLER", "#FLAG_REPORTING_DESTINATION_BUYER" ]
  }, {
    "name" : "private static boolean isValidDestination(@ReportingDestination int reportingDestinations)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getAdSelectionId()", "public String getKey()", "public InputEvent getInputEvent()", "public String getData()", "public int getReportingDestinations()", "private static boolean isValidDestination(@ReportingDestination int reportingDestinations)" ],
  "variableNames" : [ "FLAG_REPORTING_DESTINATION_SELLER", "FLAG_REPORTING_DESTINATION_BUYER", "UNSET_REPORTING_DESTINATIONS", "UNSET_REPORTING_DESTINATIONS_MESSAGE", "INVALID_REPORTING_DESTINATIONS_MESSAGE", "REPORT_EVENT_MAX_INTERACTION_DATA_SIZE_B", "EVENT_DATA_SIZE_MAX_EXCEEDED", "mAdSelectionId", "mEventKey", "mInputEvent", "mEventData", "mReportingDestinations" ]
}