{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/BidiTransform.java",
  "packageName" : "android.icu.text",
  "className" : "BidiTransform",
  "comment" : "\n * Bidi Layout Transformation Engine.\n *\n * @author Lina Kemmel\n *\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "bidi",
    "type" : "Bidi",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "text",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "reorderingOptions",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "shapingOptions",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String transform(CharSequence text, byte inParaLevel, Order inOrder, byte outParaLevel, Order outOrder, Mirroring doMirroring, int shapingOptions)",
    "returnType" : "String",
    "comment" : "\n     * Performs transformation of text from the bidi layout defined by the\n     * input ordering scheme to the bidi layout defined by the output ordering\n     * scheme, and applies character mirroring and Arabic shaping operations.\n     * <p>\n     * In terms of <code>{@link Bidi}</code> class, such a transformation\n     * implies:\n     * <ul>\n     * <li>calling <code>{@link Bidi#setReorderingMode}</code> as needed (when\n     * the reordering mode is other than normal),</li>\n     * <li>calling <code>{@link Bidi#setInverse}</code> as needed (when text\n     * should be transformed from a visual to a logical form),</li>\n     * <li>resolving embedding levels of each character in the input text by\n     * calling <code>{@link Bidi#setPara}</code>,</li>\n     * <li>reordering the characters based on the computed embedding levels,\n     * also performing character mirroring as needed, and streaming the result\n     * to the output, by calling <code>{@link Bidi#writeReordered}</code>,</li>\n     * <li>performing Arabic digit and letter shaping on the output text by\n     * calling <code>{@link ArabicShaping#shape}</code>.</li>\n     * </ul><p>\n     * An \"ordering scheme\" encompasses the base direction and the order of\n     * text, and these characteristics must be defined by the caller for both\n     * input and output explicitly .<p>\n     * There are 36 possible combinations of {input, output} ordering schemes,\n     * which are partially supported by <code>{@link Bidi}</code> already.\n     * Examples of the currently supported combinations:\n     * <ul>\n     * <li>{Logical LTR, Visual LTR}: this is equivalent to calling\n     * <code>{@link Bidi#setPara}</code> with\n     * <code>paraLevel == {@link Bidi#LTR}</code>,</li>\n     * <li>{Logical RTL, Visual LTR}: this is equivalent to calling\n     * <code>{@link Bidi#setPara}</code> with\n     * <code>paraLevel == {@link Bidi#RTL}</code>,</li>\n     * <li>{Logical Default (\"Auto\") LTR, Visual LTR}: this is equivalent to\n     * calling <code>{@link Bidi#setPara}</code> with\n     * <code>paraLevel == {@link Bidi#LEVEL_DEFAULT_LTR}</code>,</li>\n     * <li>{Logical Default (\"Auto\") RTL, Visual LTR}: this is equivalent to\n     * calling <code>{@link Bidi#setPara}</code> with\n     * <code>paraLevel == {@link Bidi#LEVEL_DEFAULT_RTL}</code>,</li>\n     * <li>{Visual LTR, Logical LTR}: this is equivalent to\n     * calling <code>{@link Bidi#setInverse}(true)</code> and then\n     * <code>{@link Bidi#setPara}</code> with\n     * <code>paraLevel == {@link Bidi#LTR}</code>,</li>\n     * <li>{Visual LTR, Logical RTL}: this is equivalent to calling\n     * <code>{@link Bidi#setInverse}(true)</code> and then\n     * <code>{@link Bidi#setPara}</code> with\n     * <code>paraLevel == {@link Bidi#RTL}</code>.</li>\n     * </ul><p>\n     * All combinations that involve the Visual RTL scheme are unsupported by\n     * <code>{@link Bidi}</code>, for instance:\n     * <ul>\n     * <li>{Logical LTR, Visual RTL},</li>\n     * <li>{Visual RTL, Logical RTL}.</li>\n     * </ul>\n     * <p>Example of usage of the transformation engine:</p>\n     * <pre>\n     * BidiTransform bidiTransform = new BidiTransform();\n     * String in = \"abc \\u06f0123\"; // \"abc \\\\u06f0123\"\n     * // Run a transformation.\n     * String out = bidiTransform.transform(in,\n     *          Bidi.LTR, Order.VISUAL,\n     *          Bidi.RTL, Order.LOGICAL,\n     *          Mirroring.OFF,\n     *          ArabicShaping.DIGITS_AN2EN | ArabicShaping.DIGIT_TYPE_AN_EXTENDED);\n     * // Result: \"0123 abc\".\n     * // Do something with out.\n     * out = out.replace('0', '4');\n     * // Result: \"4123 abc\".\n     * // Run a reverse transformation.\n     * String inNew = bidiTransform.transform(out,\n     *          Bidi.RTL, Order.LOGICAL,\n     *          Bidi.LTR, Order.VISUAL,\n     *          Mirroring.OFF,\n     *          ArabicShaping.DIGITS_EN2AN | ArabicShaping.DIGIT_TYPE_AN_EXTENDED);\n     * // Result: \"abc \\\\u06f4\\\\u06f1\\\\u06f2\\\\u06f3\"\n     * </pre>\n     *\n     * @param text An input character sequence that the Bidi layout\n     *        transformations will be performed on.\n     * @param inParaLevel A base embedding level of the input as defined in\n     *        <code>{@link Bidi#setPara(String, byte, byte[])}</code>\n     *        documentation for the <code>paraLevel</code> parameter.\n     * @param inOrder An order of the input, which can be one of the\n     *        <code>{@link Order}</code> values.\n     * @param outParaLevel A base embedding level of the output as defined in\n     *        <code>{@link Bidi#setPara(String, byte, byte[])}</code>\n     *        documentation for the <code>paraLevel</code> parameter.\n     * @param outOrder An order of the output, which can be one of the\n     *        <code>{@link Order}</code> values.\n     * @param doMirroring Indicates whether or not to perform character\n     *        mirroring, and can accept one of the\n     *        <code>{@link Mirroring}</code> values.\n     * @param shapingOptions Arabic digit and letter shaping options defined in\n     *        the <code>{@link ArabicShaping}</code> documentation.\n     *        <p><strong>Note:</strong> Direction indicator options are\n     *        computed by the transformation engine based on the effective\n     *        ordering schemes, so user-defined direction indicators will be\n     *        ignored.\n     * @return The output string, which is the result of the layout\n     *        transformation.\n     * @throws IllegalArgumentException if <code>text</code>,\n     *        <code>inOrder</code>, <code>outOrder</code>, or\n     *        <code>doMirroring</code> parameter is <code>null</code>.\n     ",
    "links" : [ "Order", "android.icu.text.Bidi#setReorderingMode", "android.icu.text.Bidi#LEVEL_DEFAULT_LTR", "android.icu.text.Bidi#LEVEL_DEFAULT_RTL", "android.icu.text.ArabicShaping#shape", "android.icu.text.Bidi#setInverse", "android.icu.text.Bidi#LTR", "android.icu.text.Bidi#RTL", "android.icu.text.Bidi", "Mirroring", "android.icu.text.Bidi#setPara", "android.icu.text.ArabicShaping", "android.icu.text.Bidi#writeReordered", "android.icu.text.Bidi#setPara(String" ]
  }, {
    "name" : "private void resolveBaseDirection(byte[] levels)",
    "returnType" : "void",
    "comment" : "\n     * When the direction option is\n     * <code>{@link Bidi#LEVEL_DEFAULT_LTR}</code> or\n     * <code>{@link Bidi#LEVEL_DEFAULT_RTL}</code>, resolves the base\n     * direction according to that of the first strong directional character in\n     * the text.\n     *\n     * @param levels Byte array, where levels[0] is an input level levels[1] is\n     *        an output level. Resolved levels override these.\n     ",
    "links" : [ "android.icu.text.Bidi#LEVEL_DEFAULT_LTR", "android.icu.text.Bidi#LEVEL_DEFAULT_RTL" ]
  }, {
    "name" : "private ReorderingScheme findMatchingScheme(byte inLevel, Order inOrder, byte outLevel, Order outOrder)",
    "returnType" : "ReorderingScheme",
    "comment" : "\n     * Finds a valid <code>{@link ReorderingScheme}</code> matching the\n     * caller-defined scheme.\n     *\n     * @return A valid <code>ReorderingScheme</code> object or null\n     ",
    "links" : [ "ReorderingScheme" ]
  }, {
    "name" : "private void resolve(byte level, int options)",
    "returnType" : "void",
    "comment" : "\n     * Performs bidi resolution of text.\n     *\n     * @param level Base embedding level\n     * @param options Reordering options\n     ",
    "links" : [ ]
  }, {
    "name" : "private void reorder()",
    "returnType" : "void",
    "comment" : "\n     * Performs basic reordering of text (Logical LTR or RTL to Visual LTR).\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private void reverse()",
    "returnType" : "void",
    "comment" : "\n     * Performs string reverse.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void mirror()",
    "returnType" : "void",
    "comment" : "\n     * Performs character mirroring without reordering. When this method is\n     * called, <code>{@link #text}</code> should be in a Logical form.\n     ",
    "links" : [ "#text" ]
  }, {
    "name" : "private void shapeArabic(int digitsDir, int lettersDir)",
    "returnType" : "void",
    "comment" : "\n     * Performs digit and letter shaping\n     *\n     * @param digitsDir Digit shaping option that indicates whether the text\n     *      should be treated as logical or visual.\n     * @param lettersDir Letter shaping option that indicates whether the text\n     *      should be treated as logical or visual form (can mismatch the digit\n     *      option).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void shapeArabic(int options)",
    "returnType" : "void",
    "comment" : "\n     * Performs digit and letter shaping\n     *\n     * @param options Shaping options covering both letters and digits\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean IsLTR(byte level)",
    "returnType" : "boolean",
    "comment" : "\n     * Is level LTR? convenience method\n\n     * @param level Embedding level\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean IsRTL(byte level)",
    "returnType" : "boolean",
    "comment" : "\n     * Is level RTL? convenience method\n\n     * @param level Embedding level\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean IsLogical(Order order)",
    "returnType" : "boolean",
    "comment" : "\n     * Is order logical? convenience method\n\n     * @param level Order value\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean IsVisual(Order order)",
    "returnType" : "boolean",
    "comment" : "\n     * Is order visual? convenience method\n\n     * @param level Order value\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String transform(CharSequence text, byte inParaLevel, Order inOrder, byte outParaLevel, Order outOrder, Mirroring doMirroring, int shapingOptions)", "private void resolveBaseDirection(byte[] levels)", "private ReorderingScheme findMatchingScheme(byte inLevel, Order inOrder, byte outLevel, Order outOrder)", "private void resolve(byte level, int options)", "private void reorder()", "private void reverse()", "private void mirror()", "private void shapeArabic(int digitsDir, int lettersDir)", "private void shapeArabic(int options)", "private static boolean IsLTR(byte level)", "private static boolean IsRTL(byte level)", "private static boolean IsLogical(Order order)", "private static boolean IsVisual(Order order)" ],
  "variableNames" : [ "bidi", "text", "reorderingOptions", "shapingOptions" ]
}