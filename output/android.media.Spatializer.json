{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/Spatializer.java",
  "packageName" : "android.media",
  "className" : "Spatializer",
  "comment" : "\n * Spatializer provides access to querying capabilities and behavior of sound spatialization\n * on the device.\n * Sound spatialization simulates sounds originating around the listener as if they were coming\n * from virtual speakers placed around the listener.<br>\n * Support for spatialization is optional, use {@link AudioManager#getSpatializer()} to obtain an\n * instance of this class if the feature is supported.\n *\n ",
  "links" : [ "android.media.AudioManager#getSpatializer()" ],
  "variables" : [ {
    "name" : "mAm",
    "type" : "AudioManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPATIALIZER_IMMERSIVE_LEVEL_OTHER",
    "type" : "int",
    "comment" : "\n     * Constant indicating the {@code Spatializer} on this device supports a spatialization\n     * mode that differs from the ones available at this SDK level.\n     * @see #getImmersiveAudioLevel()\n     ",
    "links" : [ ]
  }, {
    "name" : "SPATIALIZER_IMMERSIVE_LEVEL_NONE",
    "type" : "int",
    "comment" : "\n     * Constant indicating there are no spatialization capabilities supported on this device.\n     * @see #getImmersiveAudioLevel()\n     ",
    "links" : [ ]
  }, {
    "name" : "SPATIALIZER_IMMERSIVE_LEVEL_MULTICHANNEL",
    "type" : "int",
    "comment" : "\n     * Constant indicating the {@code Spatializer} on this device supports multichannel\n     * spatialization.\n     * @see #getImmersiveAudioLevel()\n     ",
    "links" : [ ]
  }, {
    "name" : "SPATIALIZER_IMMERSIVE_LEVEL_MCHAN_BED_PLUS_OBJECTS",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Constant indicating the {@code Spatializer} on this device supports the spatialization of\n     * multichannel bed plus objects.\n     * @see #getImmersiveAudioLevel()\n     ",
    "links" : [ ]
  }, {
    "name" : "HEAD_TRACKING_MODE_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Constant indicating head tracking is not supported by this {@code Spatializer}\n     * @see #getHeadTrackingMode()\n     ",
    "links" : [ ]
  }, {
    "name" : "HEAD_TRACKING_MODE_DISABLED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Constant indicating head tracking is disabled on this {@code Spatializer}\n     * @see #getHeadTrackingMode()\n     ",
    "links" : [ ]
  }, {
    "name" : "HEAD_TRACKING_MODE_OTHER",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Constant indicating head tracking is in a mode whose behavior is unknown. This is not an\n     * error state but represents a customized behavior not defined by this API.\n     * @see #getHeadTrackingMode()\n     ",
    "links" : [ ]
  }, {
    "name" : "HEAD_TRACKING_MODE_RELATIVE_WORLD",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Constant indicating head tracking is tracking the user's position / orientation relative to\n     * the world around them\n     * @see #getHeadTrackingMode()\n     ",
    "links" : [ ]
  }, {
    "name" : "HEAD_TRACKING_MODE_RELATIVE_DEVICE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Constant indicating head tracking is tracking the user's position / orientation relative to\n     * the device\n     * @see #getHeadTrackingMode()\n     ",
    "links" : [ ]
  }, {
    "name" : "mStateListenerMgr",
    "type" : "CallbackUtil.LazyListenerManager<OnSpatializerStateChangedListener>",
    "comment" : "\n     * manages the OnSpatializerStateChangedListener listeners and the\n     * SpatializerInfoDispatcherStub\n     ",
    "links" : [ ]
  }, {
    "name" : "mHeadTrackingListenerMgr",
    "type" : "CallbackUtil.LazyListenerManager<OnHeadTrackingModeChangedListener>",
    "comment" : "\n     * manages the OnHeadTrackingModeChangedListener listeners and the\n     * SpatializerHeadTrackingDispatcherStub\n     ",
    "links" : [ ]
  }, {
    "name" : "mHeadTrackerListenerMgr",
    "type" : "CallbackUtil.LazyListenerManager<OnHeadTrackerAvailableListener>",
    "comment" : "\n     * manages the OnHeadTrackerAvailableListener listeners and the\n     * SpatializerHeadTrackerAvailableDispatcherStub\n     ",
    "links" : [ ]
  }, {
    "name" : "mPoseListenerLock",
    "type" : "Object",
    "comment" : " head pose callback management and stub",
    "links" : [ ]
  }, {
    "name" : "mPoseListener",
    "type" : "ListenerInfo<OnHeadToSoundstagePoseUpdatedListener>",
    "comment" : "\n     * Listener for head to soundstage updates\n     ",
    "links" : [ ]
  }, {
    "name" : "mPoseDispatcher",
    "type" : "SpatializerPoseDispatcherStub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputListenerLock",
    "type" : "Object",
    "comment" : " output callback management and stub",
    "links" : [ ]
  }, {
    "name" : "mOutputListener",
    "type" : "ListenerInfo<OnSpatializerOutputChangedListener>",
    "comment" : "\n     * Listener for output updates\n     ",
    "links" : [ ]
  }, {
    "name" : "mOutputDispatcher",
    "type" : "SpatializerOutputDispatcherStub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether spatialization is enabled or not.\n     * A false value can originate for instance from the user electing to\n     * disable the feature, or when the feature is not supported on the device (indicated\n     * by {@link #getImmersiveAudioLevel()} returning {@link #SPATIALIZER_IMMERSIVE_LEVEL_NONE}).\n     * <br>\n     * Note that this state reflects a platform-wide state of the \"desire\" to use spatialization,\n     * but availability of the audio processing is still dictated by the compatibility between\n     * the effect and the hardware configuration, as indicated by {@link #isAvailable()}.\n     * @return {@code true} if spatialization is enabled\n     * @see #isAvailable()\n     ",
    "links" : [ "#getImmersiveAudioLevel()", "#SPATIALIZER_IMMERSIVE_LEVEL_NONE", "#isAvailable()" ]
  }, {
    "name" : "public boolean isAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether spatialization is available.\n     * Reasons for spatialization being unavailable include situations where audio output is\n     * incompatible with sound spatialization, such as playback on a monophonic speaker.<br>\n     * Note that spatialization can be available, but disabled by the user, in which case this\n     * method would still return {@code true}, whereas {@link #isEnabled()}\n     * would return {@code false}.<br>\n     * Also when the feature is not supported on the device (indicated\n     * by {@link #getImmersiveAudioLevel()} returning {@link #SPATIALIZER_IMMERSIVE_LEVEL_NONE}),\n     * the return value will be false.\n     * @return {@code true} if the spatializer effect is available and capable\n     *         of processing the audio for the current configuration of the device,\n     *         {@code false} otherwise.\n     * @see #isEnabled()\n     ",
    "links" : [ "#isEnabled()", "#getImmersiveAudioLevel()", "#SPATIALIZER_IMMERSIVE_LEVEL_NONE" ]
  }, {
    "name" : "public boolean isAvailableForDevice(@NonNull AudioDeviceAttributes device)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Returns whether spatialization is available for a given audio device\n     * Reasons for spatialization being unavailable include situations where audio output is\n     * incompatible with sound spatialization, such as the device being a monophonic speaker, or\n     * the spatializer effect not supporting transaural processing when querying for speaker.\n     * @param device the audio device for which spatializer availability is queried\n     * @return {@code true} if the spatializer effect is available and capable\n     *         of processing the audio over the given audio device,\n     *         {@code false} otherwise.\n     * @see #isEnabled()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasHeadTracker(@NonNull AudioDeviceAttributes device)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Returns whether the given device has an associated headtracker\n     * @param device the audio device to query\n     * @return true if the device has a head tracker, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHeadTrackerEnabled(boolean enabled, @NonNull AudioDeviceAttributes device)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Enables or disables the head tracker of the given device\n     * @param enabled true to enable, false to disable\n     * @param device the device whose head tracker state is changed\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHeadTrackerEnabled(@NonNull AudioDeviceAttributes device)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Returns whether the head tracker of the device is enabled\n     * @param device the device to query\n     * @return true if the head tracker is enabled, false if disabled or if there isn't one\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHeadTrackerAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a head tracker is currently available for the audio device used by the\n     * spatializer effect.\n     * @return true if a head tracker is available and the effect is enabled, false otherwise.\n     * @see OnHeadTrackerAvailableListener\n     * @see #addOnHeadTrackerAvailableListener(Executor, OnHeadTrackerAvailableListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnHeadTrackerAvailableListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnHeadTrackerAvailableListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener to be notified of changes to the availability of a head tracker.\n     * @param executor the {@code Executor} handling the callback\n     * @param listener the listener to receive availability updates\n     * @see #removeOnHeadTrackerAvailableListener(OnHeadTrackerAvailableListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnHeadTrackerAvailableListener(@NonNull OnHeadTrackerAvailableListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a previously registered listener for the availability of a head tracker.\n     * @param listener the listener previously registered with\n     *      {@link #addOnHeadTrackerAvailableListener(Executor, OnHeadTrackerAvailableListener)}\n     ",
    "links" : [ "#addOnHeadTrackerAvailableListener(Executor" ]
  }, {
    "name" : "public static final String headtrackingModeToString(int mode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     * Head tracking mode to string conversion\n     * @param mode a valid head tracking mode\n     * @return a string containing the matching constant name\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getImmersiveAudioLevel()",
    "returnType" : "int",
    "comment" : "\n     * Return the level of support for the spatialization feature on this device.\n     * This level of support is independent of whether the {@code Spatializer} is currently\n     * enabled or available and will not change over time.\n     * @return the level of spatialization support\n     * @see #isEnabled()\n     * @see #isAvailable()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Enables / disables the spatializer effect.\n     * Changing the enabled state will trigger the public\n     * {@link OnSpatializerStateChangedListener#onSpatializerEnabledChanged(Spatializer, boolean)}\n     * registered listeners.\n     * @param enabled {@code true} for enabling the effect\n     ",
    "links" : [ "#onSpatializerEnabledChanged(Spatializer" ]
  }, {
    "name" : "public boolean canBeSpatialized(@NonNull AudioAttributes attributes, @NonNull AudioFormat format)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether audio of the given {@link AudioFormat}, played with the given\n     * {@link AudioAttributes} can be spatialized.\n     * Note that the result reflects the capabilities of the device and may change when\n     * audio accessories are connected/disconnected (e.g. wired headphones plugged in or not).\n     * The result is independent from whether spatialization processing is enabled or not.\n     * @param attributes the {@code AudioAttributes} of the content as used for playback\n     * @param format the {@code AudioFormat} of the content as used for playback\n     * @return {@code true} if the device is capable of spatializing the combination of audio format\n     *     and attributes, {@code false} otherwise.\n     ",
    "links" : [ "android.media.AudioFormat", "android.media.AudioAttributes" ]
  }, {
    "name" : "public void addOnSpatializerStateChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnSpatializerStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener to be notified of changes to the enabled state of the\n     * {@code Spatializer}.\n     * @param executor the {@code Executor} handling the callback\n     * @param listener the listener to receive enabled state updates\n     * @see #isEnabled()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnSpatializerStateChangedListener(@NonNull OnSpatializerStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a previously added listener for changes to the enabled state of the\n     * {@code Spatializer}.\n     * @param listener the listener to receive enabled state updates\n     * @see #isEnabled()\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AudioDeviceAttributes> getCompatibleAudioDevices()",
    "returnType" : "List<AudioDeviceAttributes>",
    "comment" : "\n     * @hide\n     * Returns the list of playback devices that are compatible with the playback of multichannel\n     * audio through virtualization\n     * @return a list of devices. An empty list indicates virtualization is not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addCompatibleAudioDevice(@NonNull AudioDeviceAttributes ada)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Adds a playback device to the list of devices compatible with the playback of multichannel\n     * audio through spatialization.\n     * @see #getCompatibleAudioDevices()\n     * @param ada the audio device compatible with spatialization\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeCompatibleAudioDevice(@NonNull AudioDeviceAttributes ada)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Remove a playback device from the list of devices compatible with the playback of\n     * multichannel audio through spatialization.\n     * @see #getCompatibleAudioDevices()\n     * @param ada the audio device incompatible with spatialization\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeadTrackingMode()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the current head tracking mode as used by the system.\n     * Note this may differ from the desired head tracking mode. Reasons for the two to differ\n     * include: a head tracking device is not available for the current audio output device,\n     * the transmission conditions between the tracker and device have deteriorated and tracking\n     * has been disabled.\n     * @see #getDesiredHeadTrackingMode()\n     * @return the current head tracking mode\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDesiredHeadTrackingMode()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the desired head tracking mode.\n     * Note this may differ from the actual head tracking mode, reflected by\n     * {@link #getHeadTrackingMode()}.\n     * @return the desired head tring mode\n     ",
    "links" : [ "#getHeadTrackingMode()" ]
  }, {
    "name" : "public List<Integer> getSupportedHeadTrackingModes()",
    "returnType" : "List<Integer>",
    "comment" : "\n     * @hide\n     * Returns the list of supported head tracking modes.\n     * @return the list of modes that can be used in {@link #setDesiredHeadTrackingMode(int)} to\n     *         enable head tracking. The list will be empty if {@link #getHeadTrackingMode()}\n     *         is {@link #HEAD_TRACKING_MODE_UNSUPPORTED}. Values can be\n     *         {@link #HEAD_TRACKING_MODE_OTHER},\n     *         {@link #HEAD_TRACKING_MODE_RELATIVE_WORLD} or\n     *         {@link #HEAD_TRACKING_MODE_RELATIVE_DEVICE}\n     ",
    "links" : [ "#getHeadTrackingMode()", "#HEAD_TRACKING_MODE_OTHER", "#HEAD_TRACKING_MODE_RELATIVE_WORLD", "#HEAD_TRACKING_MODE_UNSUPPORTED", "#setDesiredHeadTrackingMode(int)", "#HEAD_TRACKING_MODE_RELATIVE_DEVICE" ]
  }, {
    "name" : "public void setDesiredHeadTrackingMode(@HeadTrackingModeSet int mode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Sets the desired head tracking mode.\n     * Note a set desired mode may differ from the actual head tracking mode.\n     * @see #getHeadTrackingMode()\n     * @param mode the desired head tracking mode, one of the values returned by\n     *             {@link #getSupportedHeadTrackModes()}, or {@link #HEAD_TRACKING_MODE_DISABLED} to\n     *             disable head tracking.\n     ",
    "links" : [ "#getSupportedHeadTrackModes()", "#HEAD_TRACKING_MODE_DISABLED" ]
  }, {
    "name" : "public void recenterHeadTracker()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Recenters the head tracking at the current position / orientation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnHeadTrackingModeChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnHeadTrackingModeChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Adds a listener to be notified of changes to the head tracking mode of the\n     * {@code Spatializer}\n     * @param executor the {@code Executor} handling the callbacks\n     * @param listener the listener to register\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnHeadTrackingModeChangedListener(@NonNull OnHeadTrackingModeChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Removes a previously added listener for changes to the head tracking mode of the\n     * {@code Spatializer}.\n     * @param listener the listener to unregister\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnHeadToSoundstagePoseUpdatedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnHeadToSoundstagePoseUpdatedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Set the listener to receive head to soundstage pose updates.\n     * @param executor the {@code Executor} handling the callbacks\n     * @param listener the listener to register\n     * @see #clearOnHeadToSoundstagePoseUpdatedListener()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearOnHeadToSoundstagePoseUpdatedListener()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Clears the listener for head to soundstage pose updates\n     * @see #setOnHeadToSoundstagePoseUpdatedListener(Executor, OnHeadToSoundstagePoseUpdatedListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGlobalTransform(@NonNull float[] transform)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Sets an additional transform over the soundstage.\n     * The transform represents the pose of the soundstage, relative\n     * to either the device (in {@link #HEAD_TRACKING_MODE_RELATIVE_DEVICE} mode), the world (in\n     * {@link #HEAD_TRACKING_MODE_RELATIVE_WORLD}) or the listener’s head (in\n     * {@link #HEAD_TRACKING_MODE_DISABLED} mode).\n     * @param transform an array of 6 float values, the first 3 are the translation vector, the\n     *                  other 3 are the rotation vector.\n     ",
    "links" : [ "#HEAD_TRACKING_MODE_RELATIVE_WORLD", "#HEAD_TRACKING_MODE_DISABLED", "#HEAD_TRACKING_MODE_RELATIVE_DEVICE" ]
  }, {
    "name" : "public void setEffectParameter(int key, @NonNull byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Sets a parameter on the platform spatializer effect implementation.\n     * This is to be used for vendor-specific configurations of their effect, keys and values are\n     * not reuseable across implementations.\n     * @param key the parameter to change\n     * @param value an array for the value of the parameter to change\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getEffectParameter(int key, @NonNull byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Retrieves a parameter value from the platform spatializer effect implementation.\n     * This is to be used for vendor-specific configurations of their effect, keys and values are\n     * not reuseable across implementations.\n     * @param key the parameter for which the value is queried\n     * @param value a non-empty array to contain the return value. The caller is responsible for\n     *              passing an array of size matching the parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOutput()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Returns the id of the output stream used for the spatializer effect playback.\n     * This getter or associated listener {@link OnSpatializerOutputChangedListener} can be used for\n     * handling spatializer output-specific configurations (e.g. disabling speaker post-processing\n     * to avoid double-processing of the spatialized path).\n     * @return id of the output stream, or 0 if no spatializer playback is active\n     * @see #setOnSpatializerOutputChangedListener(Executor, OnSpatializerOutputChangedListener)\n     ",
    "links" : [ "OnSpatializerOutputChangedListener" ]
  }, {
    "name" : "public void setOnSpatializerOutputChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnSpatializerOutputChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Sets the listener to receive spatializer effect output updates\n     * @param executor the {@code Executor} handling the callbacks\n     * @param listener the listener to register\n     * @see #clearOnSpatializerOutputChangedListener()\n     * @see #getOutput()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearOnSpatializerOutputChangedListener()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Clears the listener for spatializer effect output updates\n     * @see #setOnSpatializerOutputChangedListener(Executor, OnSpatializerOutputChangedListener)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isEnabled()", "public boolean isAvailable()", "public boolean isAvailableForDevice(@NonNull AudioDeviceAttributes device)", "public boolean hasHeadTracker(@NonNull AudioDeviceAttributes device)", "public void setHeadTrackerEnabled(boolean enabled, @NonNull AudioDeviceAttributes device)", "public boolean isHeadTrackerEnabled(@NonNull AudioDeviceAttributes device)", "public boolean isHeadTrackerAvailable()", "public void addOnHeadTrackerAvailableListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnHeadTrackerAvailableListener listener)", "public void removeOnHeadTrackerAvailableListener(@NonNull OnHeadTrackerAvailableListener listener)", "public static final String headtrackingModeToString(int mode)", "public int getImmersiveAudioLevel()", "public void setEnabled(boolean enabled)", "public boolean canBeSpatialized(@NonNull AudioAttributes attributes, @NonNull AudioFormat format)", "public void addOnSpatializerStateChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnSpatializerStateChangedListener listener)", "public void removeOnSpatializerStateChangedListener(@NonNull OnSpatializerStateChangedListener listener)", "public List<AudioDeviceAttributes> getCompatibleAudioDevices()", "public void addCompatibleAudioDevice(@NonNull AudioDeviceAttributes ada)", "public void removeCompatibleAudioDevice(@NonNull AudioDeviceAttributes ada)", "public int getHeadTrackingMode()", "public int getDesiredHeadTrackingMode()", "public List<Integer> getSupportedHeadTrackingModes()", "public void setDesiredHeadTrackingMode(@HeadTrackingModeSet int mode)", "public void recenterHeadTracker()", "public void addOnHeadTrackingModeChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnHeadTrackingModeChangedListener listener)", "public void removeOnHeadTrackingModeChangedListener(@NonNull OnHeadTrackingModeChangedListener listener)", "public void setOnHeadToSoundstagePoseUpdatedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnHeadToSoundstagePoseUpdatedListener listener)", "public void clearOnHeadToSoundstagePoseUpdatedListener()", "public void setGlobalTransform(@NonNull float[] transform)", "public void setEffectParameter(int key, @NonNull byte[] value)", "public void getEffectParameter(int key, @NonNull byte[] value)", "public int getOutput()", "public void setOnSpatializerOutputChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnSpatializerOutputChangedListener listener)", "public void clearOnSpatializerOutputChangedListener()" ],
  "variableNames" : [ "mAm", "TAG", "SPATIALIZER_IMMERSIVE_LEVEL_OTHER", "SPATIALIZER_IMMERSIVE_LEVEL_NONE", "SPATIALIZER_IMMERSIVE_LEVEL_MULTICHANNEL", "SPATIALIZER_IMMERSIVE_LEVEL_MCHAN_BED_PLUS_OBJECTS", "HEAD_TRACKING_MODE_UNSUPPORTED", "HEAD_TRACKING_MODE_DISABLED", "HEAD_TRACKING_MODE_OTHER", "HEAD_TRACKING_MODE_RELATIVE_WORLD", "HEAD_TRACKING_MODE_RELATIVE_DEVICE", "mStateListenerMgr", "mHeadTrackingListenerMgr", "mHeadTrackerListenerMgr", "mPoseListenerLock", "mPoseListener", "mPoseDispatcher", "mOutputListenerLock", "mOutputListener", "mOutputDispatcher" ]
}