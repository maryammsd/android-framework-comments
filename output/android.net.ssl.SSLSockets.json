{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/ssl/SSLSockets.java",
  "packageName" : "android.net.ssl",
  "className" : "SSLSockets",
  "comment" : "\n * Static utility methods for accessing additional functionality of supported instances of\n * {@link SSLSocket}.  Sockets from the platform TLS provider will be compatible with all\n * methods in this class.\n ",
  "links" : [ "javax.net.ssl.SSLSocket" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static boolean isSupportedSocket(@NonNull SSLSocket socket)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given socket can be used with the methods in this class.  In general,\n     * only sockets from the platform TLS provider are supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkSupported(@NonNull SSLSocket s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setUseSessionTickets(@NonNull SSLSocket socket, boolean useSessionTickets)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables the use of session tickets.\n     *\n     * <p>This function must be called before the handshake is started or it will have no effect.\n     *\n     * @param socket the socket\n     * @param useSessionTickets whether to enable or disable the use of session tickets\n     * @throws IllegalArgumentException if the given socket is not a platform socket\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] exportKeyingMaterial(@NonNull SSLSocket socket, @NonNull String label, @Nullable byte[] context, int length) throws SSLException",
    "returnType" : "byte[]",
    "comment" : "\n     * Exports a value derived from the TLS master secret as described in RFC 5705.\n     *\n     * A number of protocols leverage Transport Layer Security (TLS) to perform key\n     * establishment but then use some of the keying material for their own purposes.\n     *\n     * This method allows an application to export keying material from a TLS connection.\n     * The exported material will be the same on the client and server if they pass in\n     * the same values for {@code label} and {@code context}.  See RFC 5705 for further\n     * details.\n     *\n     * @param socket the socket to use for exporting keying material\n     * @param label the label to use in calculating the exported value.  This must be\n     * an ASCII-only string.\n     * @param context the application-specific context value to use in calculating the\n     * exported value.  This may be {@code null} to use no application context, which is\n     * treated differently than an empty byte array.\n     * @param length the number of bytes of keying material to return.\n     * @return a value of the specified length, or {@code null} if the handshake has not yet\n     * completed or the connection has been closed.\n     * @throws SSLException if the value could not be exported.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isSupportedSocket(@NonNull SSLSocket socket)", "private static void checkSupported(@NonNull SSLSocket s)", "public static void setUseSessionTickets(@NonNull SSLSocket socket, boolean useSessionTickets)", "public static byte[] exportKeyingMaterial(@NonNull SSLSocket socket, @NonNull String label, @Nullable byte[] context, int length) throws SSLException" ],
  "variableNames" : [ ]
}