{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/NetworkPolicy.java",
  "packageName" : "android.net",
  "className" : "NetworkPolicy",
  "comment" : "\n * Policy for networks matching a {@link NetworkTemplate}, including usage cycle\n * and limits to be enforced.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "VERSION_INIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_RULE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_RAPID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CYCLE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WARNING_DISABLED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LIMIT_DISABLED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SNOOZE_NEVER",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "template",
    "type" : "NetworkTemplate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cycleRule",
    "type" : "RecurrenceRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "warningBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "limitBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastWarningSnooze",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastLimitSnooze",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastRapidSnooze",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "metered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "inferred",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MTU",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NetworkPolicy>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static RecurrenceRule buildRule(int cycleDay, ZoneId cycleTimezone)",
    "returnType" : "RecurrenceRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Range<ZonedDateTime>> cycleIterator()",
    "returnType" : "Iterator<Range<ZonedDateTime>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverWarning(long totalBytes)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given measurement is over {@link #warningBytes}.\n     ",
    "links" : [ "#warningBytes" ]
  }, {
    "name" : "public boolean isOverLimit(long totalBytes)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given measurement is near enough to {@link #limitBytes} to be\n     * considered over-limit.\n     ",
    "links" : [ "#limitBytes" ]
  }, {
    "name" : "public void clearSnooze()",
    "returnType" : "void",
    "comment" : "\n     * Clear any existing snooze values, setting to {@link #SNOOZE_NEVER}.\n     ",
    "links" : [ "#SNOOZE_NEVER" ]
  }, {
    "name" : "public boolean hasCycle()",
    "returnType" : "boolean",
    "comment" : "\n     * Test if this policy has a cycle defined, after which usage should reset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(NetworkPolicy another)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBytesForBackup() throws IOException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static NetworkPolicy getNetworkPolicyFromBackup(DataInputStream in) throws IOException, BackupUtils.BadVersionException",
    "returnType" : "NetworkPolicy",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "VERSION_INIT", "VERSION_RULE", "VERSION_RAPID", "CYCLE_NONE", "WARNING_DISABLED", "LIMIT_DISABLED", "SNOOZE_NEVER", "template", "cycleRule", "warningBytes", "limitBytes", "lastWarningSnooze", "lastLimitSnooze", "lastRapidSnooze", "metered", "inferred", "DEFAULT_MTU", "CREATOR" ],
  "methodNames" : [ "public static RecurrenceRule buildRule(int cycleDay, ZoneId cycleTimezone)", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public Iterator<Range<ZonedDateTime>> cycleIterator()", "public boolean isOverWarning(long totalBytes)", "public boolean isOverLimit(long totalBytes)", "public void clearSnooze()", "public boolean hasCycle()", "public int compareTo(NetworkPolicy another)", "public int hashCode()", "public boolean equals(Object obj)", "public String toString()", "public byte[] getBytesForBackup() throws IOException", "public static NetworkPolicy getNetworkPolicyFromBackup(DataInputStream in) throws IOException, BackupUtils.BadVersionException" ]
}