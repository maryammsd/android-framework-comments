{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/inputmethod/InputConnectionWrapper.java",
  "packageName" : "android.view.inputmethod",
  "className" : "InputConnectionWrapper",
  "comment" : "\n * <p>Wrapper class for proxying calls to another InputConnection.  Subclass and have fun!\n ",
  "variables" : [ {
    "name" : "mTarget",
    "type" : "InputConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMissingMethodFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTarget(InputConnection target)",
    "returnType" : "void",
    "comment" : "\n     * Change the target of the input connection.\n     *\n     * <p><b>Caveat:</b> Although the system can accept {@code (InputConnection) null} in some\n     * places, you cannot emulate such a behavior by non-null {@link InputConnectionWrapper} that\n     * has {@code null} in {@code target}.</p>\n     * @param target the {@link InputConnection} to be proxied.\n     * @throws SecurityException when this wrapper has non-null target and is immutable.\n     ",
    "links" : [ "android.view.inputmethod.InputConnectionWrapper", "android.view.inputmethod.InputConnection" ]
  }, {
    "name" : "public int getMissingMethodFlags()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTextBeforeCursor(int n, int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTextAfterCursor(int n, int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getSelectedText(int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCursorCapsMode(int reqModes)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ExtractedText getExtractedText(ExtractedTextRequest request, int flags)",
    "returnType" : "ExtractedText",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteSurroundingText(int beforeLength, int afterLength)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setComposingText(CharSequence text, int newCursorPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setComposingRegion(int start, int end)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean finishComposingText()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitText(CharSequence text, int newCursorPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitCompletion(CompletionInfo text)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitCorrection(CorrectionInfo correctionInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setSelection(int start, int end)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performEditorAction(int editorAction)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performContextMenuAction(int id)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean beginBatchEdit()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean endBatchEdit()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sendKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean clearMetaKeyStates(int states)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reportFullscreenMode(boolean enabled)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performPrivateCommand(String action, Bundle data)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestCursorUpdates(int cursorUpdateMode)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeConnection()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mTarget", "mMutable", "mMissingMethodFlags" ],
  "methodNames" : [ "public void setTarget(InputConnection target)", "public int getMissingMethodFlags()", "public CharSequence getTextBeforeCursor(int n, int flags)", "public CharSequence getTextAfterCursor(int n, int flags)", "public CharSequence getSelectedText(int flags)", "public int getCursorCapsMode(int reqModes)", "public ExtractedText getExtractedText(ExtractedTextRequest request, int flags)", "public boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)", "public boolean deleteSurroundingText(int beforeLength, int afterLength)", "public boolean setComposingText(CharSequence text, int newCursorPosition)", "public boolean setComposingRegion(int start, int end)", "public boolean finishComposingText()", "public boolean commitText(CharSequence text, int newCursorPosition)", "public boolean commitCompletion(CompletionInfo text)", "public boolean commitCorrection(CorrectionInfo correctionInfo)", "public boolean setSelection(int start, int end)", "public boolean performEditorAction(int editorAction)", "public boolean performContextMenuAction(int id)", "public boolean beginBatchEdit()", "public boolean endBatchEdit()", "public boolean sendKeyEvent(KeyEvent event)", "public boolean clearMetaKeyStates(int states)", "public boolean reportFullscreenMode(boolean enabled)", "public boolean performPrivateCommand(String action, Bundle data)", "public boolean requestCursorUpdates(int cursorUpdateMode)", "public Handler getHandler()", "public void closeConnection()", "public boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)" ]
}