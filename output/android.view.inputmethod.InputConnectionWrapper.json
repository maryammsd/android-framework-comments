{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/InputConnectionWrapper.java",
  "packageName" : "android.view.inputmethod",
  "className" : "InputConnectionWrapper",
  "comment" : "\n * <p>Wrapper class for proxying calls to another InputConnection.  Subclass and have fun!\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mTarget",
    "type" : "InputConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTarget(InputConnection target)",
    "returnType" : "void",
    "comment" : "\n     * Change the target of the input connection.\n     *\n     * <p><b>Caveat:</b> Although the system can accept {@code (InputConnection) null} in some\n     * places, you cannot emulate such a behavior by non-null {@link InputConnectionWrapper} that\n     * has {@code null} in {@code target}.</p>\n     * @param target the {@link InputConnection} to be proxied.\n     * @throws SecurityException when this wrapper has non-null target and is immutable.\n     ",
    "links" : [ "android.view.inputmethod.InputConnectionWrapper", "android.view.inputmethod.InputConnection" ]
  }, {
    "name" : "public CharSequence getTextBeforeCursor(@IntRange(from = 0) int n, int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     * @throws IllegalArgumentException if {@code length} is negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTextAfterCursor(@IntRange(from = 0) int n, int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     * @throws IllegalArgumentException if {@code length} is negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getSelectedText(int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SurroundingText getSurroundingText(int beforeLength, int afterLength, int flags)",
    "returnType" : "SurroundingText",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     * @throws IllegalArgumentException if {@code beforeLength} or {@code afterLength} is negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCursorCapsMode(int reqModes)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ExtractedText getExtractedText(ExtractedTextRequest request, int flags)",
    "returnType" : "ExtractedText",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteSurroundingText(int beforeLength, int afterLength)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setComposingText(CharSequence text, int newCursorPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setComposingText(@NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setComposingRegion(int start, int end)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setComposingRegion(int start, int end, @Nullable TextAttribute textAttribute)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean finishComposingText()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitText(CharSequence text, int newCursorPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitText(@NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitCompletion(CompletionInfo text)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitCorrection(CorrectionInfo correctionInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setSelection(int start, int end)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performEditorAction(int editorAction)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performContextMenuAction(int id)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean beginBatchEdit()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean endBatchEdit()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sendKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean clearMetaKeyStates(int states)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reportFullscreenMode(boolean enabled)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performSpellCheck()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performPrivateCommand(String action, Bundle data)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void performHandwritingGesture(@NonNull HandwritingGesture gesture, @Nullable @CallbackExecutor Executor executor, @Nullable IntConsumer consumer)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean previewHandwritingGesture(@NonNull PreviewableHandwritingGesture gesture, @Nullable CancellationSignal cancellationSignal)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestCursorUpdates(int cursorUpdateMode)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestCursorUpdates(@CursorUpdateMode int cursorUpdateMode, @CursorUpdateFilter int cursorUpdateFilter)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestTextBoundsInfo(@NonNull RectF bounds, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<TextBoundsInfoResult> consumer)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeConnection()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setImeConsumesInput(boolean imeConsumesInput)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TextSnapshot takeSnapshot()",
    "returnType" : "TextSnapshot",
    "comment" : "\n     * Called by the system when it needs to take a snapshot of multiple text-related data in an\n     * atomic manner.\n     *\n     * <p><strong>Editor authors</strong>: Supporting this method is strongly encouraged. Atomically\n     * taken {@link TextSnapshot} is going to be really helpful for the system when optimizing IPCs\n     * in a safe and deterministic manner.  Return {@code null} if an atomically taken\n     * {@link TextSnapshot} is unavailable.  The system continues supporting such a scenario\n     * gracefully.</p>\n     *\n     * <p><strong>IME authors</strong>: Currently IMEs cannot call this method directly and always\n     * receive {@code null} as the result.</p>\n     *\n     * <p>Beware that there is a bug that this method was not overridden in\n     * {@link InputConnectionWrapper}, which ended up always returning {@code null} when gets\n     * called even if the wrapped {@link InputConnection} implements this method.  The bug was\n     * fixed in {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}.</p>\n     *\n     * @return {@code null} if {@link TextSnapshot} is unavailable and/or this API is called from\n     *         IMEs. Beware the bug in older devices mentioned above.\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.view.inputmethod.TextSnapshot", "android.view.inputmethod.InputConnectionWrapper", "android.view.inputmethod.InputConnection" ]
  }, {
    "name" : "public boolean replaceText(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException if the target is {@code null}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setTarget(InputConnection target)", "public CharSequence getTextBeforeCursor(@IntRange(from = 0) int n, int flags)", "public CharSequence getTextAfterCursor(@IntRange(from = 0) int n, int flags)", "public CharSequence getSelectedText(int flags)", "public SurroundingText getSurroundingText(int beforeLength, int afterLength, int flags)", "public int getCursorCapsMode(int reqModes)", "public ExtractedText getExtractedText(ExtractedTextRequest request, int flags)", "public boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)", "public boolean deleteSurroundingText(int beforeLength, int afterLength)", "public boolean setComposingText(CharSequence text, int newCursorPosition)", "public boolean setComposingText(@NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)", "public boolean setComposingRegion(int start, int end)", "public boolean setComposingRegion(int start, int end, @Nullable TextAttribute textAttribute)", "public boolean finishComposingText()", "public boolean commitText(CharSequence text, int newCursorPosition)", "public boolean commitText(@NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)", "public boolean commitCompletion(CompletionInfo text)", "public boolean commitCorrection(CorrectionInfo correctionInfo)", "public boolean setSelection(int start, int end)", "public boolean performEditorAction(int editorAction)", "public boolean performContextMenuAction(int id)", "public boolean beginBatchEdit()", "public boolean endBatchEdit()", "public boolean sendKeyEvent(KeyEvent event)", "public boolean clearMetaKeyStates(int states)", "public boolean reportFullscreenMode(boolean enabled)", "public boolean performSpellCheck()", "public boolean performPrivateCommand(String action, Bundle data)", "public void performHandwritingGesture(@NonNull HandwritingGesture gesture, @Nullable @CallbackExecutor Executor executor, @Nullable IntConsumer consumer)", "public boolean previewHandwritingGesture(@NonNull PreviewableHandwritingGesture gesture, @Nullable CancellationSignal cancellationSignal)", "public boolean requestCursorUpdates(int cursorUpdateMode)", "public boolean requestCursorUpdates(@CursorUpdateMode int cursorUpdateMode, @CursorUpdateFilter int cursorUpdateFilter)", "public void requestTextBoundsInfo(@NonNull RectF bounds, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<TextBoundsInfoResult> consumer)", "public Handler getHandler()", "public void closeConnection()", "public boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)", "public boolean setImeConsumesInput(boolean imeConsumesInput)", "public TextSnapshot takeSnapshot()", "public boolean replaceText(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)" ],
  "variableNames" : [ "mTarget", "mMutable" ]
}