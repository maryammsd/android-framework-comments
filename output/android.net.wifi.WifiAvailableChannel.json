{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiAvailableChannel.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiAvailableChannel",
  "comment" : "\n * Contains information about a Wifi channel and bitmask of Wifi operational modes allowed on that\n * channel. Use {@link WifiManager#getAllowedChannels(int, int)} to retrieve the list of channels\n * filtered by regulatory constraints. Use {@link WifiManager#getUsableChannels(int, int)} to\n * retrieve the list of channels filtered by regulatory and dynamic constraints like concurrency and\n * interference due to other radios.\n ",
  "links" : [ "android.net.wifi.WifiManager#getUsableChannels(int", "android.net.wifi.WifiManager#getAllowedChannels(int" ],
  "variables" : [ {
    "name" : "OP_MODE_STA",
    "type" : "int",
    "comment" : "\n     * Wifi Infrastructure client (STA) operational mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_MODE_SAP",
    "type" : "int",
    "comment" : "\n     * Wifi SoftAp (Mobile Hotspot) operational mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_MODE_WIFI_DIRECT_CLI",
    "type" : "int",
    "comment" : "\n     * Wifi Direct client (CLI) operational mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_MODE_WIFI_DIRECT_GO",
    "type" : "int",
    "comment" : "\n     * Wifi Direct Group Owner (GO) operational mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_MODE_WIFI_AWARE",
    "type" : "int",
    "comment" : "\n     * Wifi Aware (NAN) operational mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_MODE_TDLS",
    "type" : "int",
    "comment" : "\n     * Wifi Tunneled Direct Link Setup (TDLS) operational mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTER_REGULATORY",
    "type" : "int",
    "comment" : "\n     * Filter channel based on regulatory constraints.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTER_CELLULAR_COEXISTENCE",
    "type" : "int",
    "comment" : "\n     * Filter channel based on interference from cellular radio.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTER_CONCURRENCY",
    "type" : "int",
    "comment" : "\n     * Filter channel based on current concurrency state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTER_NAN_INSTANT_MODE",
    "type" : "int",
    "comment" : "\n     * Filter channel for the Wi-Fi Aware instant communication mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mFrequency",
    "type" : "int",
    "comment" : "\n     * Wifi channel frequency in MHz.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOpModes",
    "type" : "int",
    "comment" : "\n     * Bitwise OR of modes (OP_MODE_*) allowed on this channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiAvailableChannel>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void readFromParcel(@NonNull Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFrequencyMhz()",
    "returnType" : "int",
    "comment" : "\n     * Get the channel frequency in MHz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOperationalModes()",
    "returnType" : "int",
    "comment" : "\n     * Get the operational modes allowed on a channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getUsableFilter()",
    "returnType" : "int",
    "comment" : "\n     * Usable filter implies filter channels by regulatory constraints and\n     * other dynamic constraints like concurrency state and interference due\n     * to other radios like cellular.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void readFromParcel(@NonNull Parcel in)", "public int getFrequencyMhz()", "public int getOperationalModes()", "public static int getUsableFilter()", "public int describeContents()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public String toString()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "OP_MODE_STA", "OP_MODE_SAP", "OP_MODE_WIFI_DIRECT_CLI", "OP_MODE_WIFI_DIRECT_GO", "OP_MODE_WIFI_AWARE", "OP_MODE_TDLS", "FILTER_REGULATORY", "FILTER_CELLULAR_COEXISTENCE", "FILTER_CONCURRENCY", "FILTER_NAN_INSTANT_MODE", "mFrequency", "mOpModes", "CREATOR" ]
}