{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/health/connect/HealthConnectManager.java",
  "packageName" : "android.health.connect",
  "className" : "HealthConnectManager",
  "comment" : "\n * This class provides APIs to interact with the centralized HealthConnect storage maintained by the\n * system.\n *\n * <p>HealthConnect is an offline, on-device storage that unifies data from multiple devices and\n * apps into an ecosystem featuring.\n *\n * <ul>\n *   <li>APIs to insert data of various types into the system.\n * </ul>\n *\n * <p>The basic unit of data in HealthConnect is represented as a {@link Record} object, which is\n * the base class for all the other data types such as {@link\n * android.health.connect.datatypes.StepsRecord}.\n ",
  "links" : [ "android.health.connect.datatypes.Record", "android.health.connect.datatypes.StepsRecord" ],
  "variables" : [ {
    "name" : "CATEGORY_HEALTH_PERMISSIONS",
    "type" : "String",
    "comment" : " We use intent.category prefix to be compatible with HealthPermissions strings definitions.",
    "links" : [ ]
  }, {
    "name" : "ACTION_MANAGE_HEALTH_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to manage (e.g. grant/revoke) health permissions.\n     *\n     * <p>Shows a list of apps which request at least one permission of the Health permission group.\n     *\n     * <p>Input: {@link android.content.Intent#EXTRA_PACKAGE_NAME} string extra with the name of the\n     * app requesting the action. Optional: Adding package name extras launches a UI to manager\n     * (e.g. grant/revoke) for this app.\n     ",
    "links" : [ "android.content.Intent#EXTRA_PACKAGE_NAME" ]
  }, {
    "name" : "ACTION_REQUEST_EXERCISE_ROUTE",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to share the route associated with an exercise session.\n     *\n     * <p>Input: caller must provide `String` extra EXTRA_SESSION_ID\n     *\n     * <p>Result will be delivered via [Activity.onActivityResult] with `ExerciseRoute`\n     * EXTRA_EXERCISE_ROUTE.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SESSION_ID",
    "type" : "String",
    "comment" : "\n     * A string ID of a session to be used with {@link #ACTION_REQUEST_EXERCISE_ROUTE}.\n     *\n     * <p>This is used to specify route of which exercise session we want to request.\n     ",
    "links" : [ "#ACTION_REQUEST_EXERCISE_ROUTE" ]
  }, {
    "name" : "EXTRA_EXERCISE_ROUTE",
    "type" : "String",
    "comment" : "\n     * An exercise route requested via {@link #ACTION_REQUEST_EXERCISE_ROUTE}.\n     *\n     * <p>This is returned for a successful request to access a route associated with an exercise\n     * session.\n     ",
    "links" : [ "#ACTION_REQUEST_EXERCISE_ROUTE" ]
  }, {
    "name" : "ACTION_REQUEST_HEALTH_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to show and manage (e.g. grant/revoke) health permissions.\n     *\n     * <p>Input: {@link android.content.Intent#EXTRA_PACKAGE_NAME} string extra with the name of the\n     * app requesting the action must be present. An app can open only its own page.\n     *\n     * <p>Input: caller must provide `String[]` extra [EXTRA_PERMISSIONS]\n     *\n     * <p>Result will be delivered via [Activity.onActivityResult] with `String[]`\n     * [EXTRA_PERMISSIONS] and `int[]` [EXTRA_PERMISSION_GRANT_RESULTS], similar to\n     * [Activity.onRequestPermissionsResult]\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Intent#EXTRA_PACKAGE_NAME" ]
  }, {
    "name" : "ACTION_HEALTH_HOME_SETTINGS",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to health connect home settings screen.\n     *\n     * <p>shows a list of recent apps that accessed (e.g. read/write) health data and allows the\n     * user to access health permissions and health data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MANAGE_HEALTH_DATA",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to show and manage (e.g. delete/export) health data.\n     *\n     * <p>shows a list of health data categories and actions to manage (e.g. delete/export) health\n     * data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SHOW_MIGRATION_INFO",
    "type" : "String",
    "comment" : "\n     * Activity action: Display information regarding migration - e.g. asking the user to take some\n     * action (e.g. update the system) so that migration can take place.\n     *\n     * <p><b>Note:</b> Callers of the migration APIs must handle this intent.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_HEALTH_CONNECT_MIGRATION_READY",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Health Connect is ready to accept migrated data.\n     *\n     * <p class=\"note\">This broadcast is explicitly sent to Health Connect migration aware\n     * applications to prompt them to start/continue HC data migration. Migration aware applications\n     * are those that both hold {@code android.permission.MIGRATE_HEALTH_CONNECT_DATA} and handle\n     * {@code android.health.connect.action.SHOW_MIGRATION_INFO}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_DOWNLOAD_STATE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown download state considered to be the default download state.\n     *\n     * <p>See also {@link #updateDataDownloadState}\n     *\n     * @hide\n     ",
    "links" : [ "#updateDataDownloadState" ]
  }, {
    "name" : "DATA_DOWNLOAD_STARTED",
    "type" : "int",
    "comment" : "\n     * Indicates that the download has started.\n     *\n     * <p>See also {@link #updateDataDownloadState}\n     *\n     * @hide\n     ",
    "links" : [ "#updateDataDownloadState" ]
  }, {
    "name" : "DATA_DOWNLOAD_RETRY",
    "type" : "int",
    "comment" : "\n     * Indicates that the download is being retried.\n     *\n     * <p>See also {@link #updateDataDownloadState}\n     *\n     * @hide\n     ",
    "links" : [ "#updateDataDownloadState" ]
  }, {
    "name" : "DATA_DOWNLOAD_FAILED",
    "type" : "int",
    "comment" : "\n     * Indicates that the download has failed.\n     *\n     * <p>See also {@link #updateDataDownloadState}\n     *\n     * @hide\n     ",
    "links" : [ "#updateDataDownloadState" ]
  }, {
    "name" : "DATA_DOWNLOAD_COMPLETE",
    "type" : "int",
    "comment" : "\n     * Indicates that the download has completed.\n     *\n     * <p>See also {@link HealthConnectManager#updateDataDownloadState}\n     *\n     * @hide\n     ",
    "links" : [ "android.health.connect.HealthConnectManager#updateDataDownloadState" ]
  }, {
    "name" : "DATA_EXPORT_ERROR_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown error during the last data export.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_EXPORT_ERROR_NONE",
    "type" : "int",
    "comment" : "\n     * No error during the last data export.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_EXPORT_LOST_FILE_ACCESS",
    "type" : "int",
    "comment" : "\n     * Indicates that the last export failed because we lost access to the export file location.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SHOW_ONBOARDING",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch activity exported by client application that handles onboarding to\n     * Health Connect.\n     *\n     * <p>Health Connect will invoke this intent whenever the user attempts to connect an app that\n     * has exported an activity that responds to this intent. The launched activity is responsible\n     * for making permission requests and any other prerequisites for connecting to Health Connect.\n     *\n     * <p class=\"note\">Applications exporting an activity that is launched by this intent must also\n     * guard it with {@link HealthPermissions#START_ONBOARDING} so that only the system can launch\n     * it.\n     *\n     * @hide\n     ",
    "links" : [ "android.health.connect.HealthPermissions#START_ONBOARDING" ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEALTH_PERMISSION_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sHealthPermissions",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IHealthConnectService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternalExternalRecordConverter",
    "type" : "InternalExternalRecordConverter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void grantHealthPermission(@NonNull String packageName, @NonNull String permissionName)",
    "returnType" : "void",
    "comment" : "\n     * Grant a runtime permission to an application which the application does not already have. The\n     * permission must have been requested by the application. If the application is not allowed to\n     * hold the permission, a {@link java.lang.SecurityException} is thrown. If the package or\n     * permission is invalid, a {@link java.lang.IllegalArgumentException} is thrown.\n     *\n     * <p><b>Note:</b> This API sets {@code PackageManager.FLAG_PERMISSION_USER_SET}.\n     *\n     * @hide\n     ",
    "links" : [ "java.lang.SecurityException", "java.lang.IllegalArgumentException" ]
  }, {
    "name" : "public void revokeHealthPermission(@NonNull String packageName, @NonNull String permissionName, @Nullable String reason)",
    "returnType" : "void",
    "comment" : "\n     * Revoke a health permission that was previously granted by {@link\n     * #grantHealthPermission(String, String)} The permission must have been requested by the\n     * application. If the application is not allowed to hold the permission, a {@link\n     * java.lang.SecurityException} is thrown. If the package or permission is invalid, a {@link\n     * java.lang.IllegalArgumentException} is thrown.\n     *\n     * <p><b>Note:</b> This API sets {@code PackageManager.FLAG_PERMISSION_USER_SET} or {@code\n     * PackageManager.FLAG_PERMISSION_USER_FIXED} based on the number of revocations of a particular\n     * permission for a package.\n     *\n     * @hide\n     ",
    "links" : [ "#grantHealthPermission(String", "java.lang.SecurityException", "java.lang.IllegalArgumentException" ]
  }, {
    "name" : "public void revokeAllHealthPermissions(@NonNull String packageName, @Nullable String reason)",
    "returnType" : "void",
    "comment" : "\n     * Revokes all health permissions that were previously granted by {@link\n     * #grantHealthPermission(String, String)} If the package is invalid, a {@link\n     * java.lang.IllegalArgumentException} is thrown.\n     *\n     * @hide\n     ",
    "links" : [ "#grantHealthPermission(String", "java.lang.IllegalArgumentException" ]
  }, {
    "name" : "public List<String> getGrantedHealthPermissions(@NonNull String packageName)",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a list of health permissions that were previously granted by {@link\n     * #grantHealthPermission(String, String)}.\n     *\n     * @hide\n     ",
    "links" : [ "#grantHealthPermission(String" ]
  }, {
    "name" : "public Map<String, Integer> getHealthPermissionsFlags(@NonNull String packageName, @NonNull List<String> permissions)",
    "returnType" : "Map<String, Integer>",
    "comment" : "\n     * Returns permission flags for the given package name and Health permissions.\n     *\n     * <p>This is equivalent to calling {@link PackageManager#getPermissionFlags(String, String,\n     * UserHandle)} for each provided permission except it throws an exception for non-Health or\n     * undeclared permissions. Flag masks listed in {@link PackageManager#MASK_PERMISSION_FLAGS_ALL}\n     * can be used to check the flag values.\n     *\n     * <p>Returned flags for invalid, non-Health or undeclared permissions are equal to zero.\n     *\n     * @return a map which contains all requested permissions as keys and corresponding flags as\n     *     values.\n     * @throws IllegalArgumentException if the package doesn't exist, any of the permissions are not\n     *     Health permissions or not declared by the app.\n     * @throws NullPointerException if any of the arguments is {@code null}.\n     * @throws SecurityException if the caller doesn't possess {@code\n     *     android.permission.MANAGE_HEALTH_PERMISSIONS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#getPermissionFlags(String", "android.content.pm.PackageManager#MASK_PERMISSION_FLAGS_ALL" ]
  }, {
    "name" : "public void setHealthPermissionsUserFixedFlagValue(@NonNull String packageName, @NonNull List<String> permissions, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Sets/clears {@link PackageManager#FLAG_PERMISSION_USER_FIXED} for given health permissions.\n     *\n     * @param value whether to set or clear the flag, {@code true} means set, {@code false} - clear.\n     * @throws IllegalArgumentException if the package doesn't exist, any of the permissions are not\n     *     Health permissions or not declared by the app.\n     * @throws NullPointerException if any of the arguments is {@code null}.\n     * @throws SecurityException if the caller doesn't possess {@code\n     *     android.permission.MANAGE_HEALTH_PERMISSIONS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FLAG_PERMISSION_USER_FIXED" ]
  }, {
    "name" : "public Instant getHealthDataHistoricalAccessStartDate(@NonNull String packageName)",
    "returnType" : "Instant",
    "comment" : "\n     * Returns the date from which an app have access to the historical health data. Returns null if\n     * the package doesn't have historical access date.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void insertRecords(@NonNull List<Record> records, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<InsertRecordsResponse, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Inserts {@code records} into the HealthConnect database. The records returned in {@link\n     * InsertRecordsResponse} contains the unique IDs of the input records. The values are in same\n     * order as {@code records}. In case of an error or a permission failure the HealthConnect\n     * service, {@link OutcomeReceiver#onError} will be invoked with a {@link\n     * HealthConnectException}.\n     *\n     * @param records list of records to be inserted.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @throws RuntimeException for internal errors\n     ",
    "links" : [ "android.health.connect.InsertRecordsResponse", "android.health.connect.HealthConnectException", "android.os.OutcomeReceiver#onError" ]
  }, {
    "name" : "public void aggregate(@NonNull AggregateRecordsRequest<T> request, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<AggregateRecordsResponse<T>, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get aggregations corresponding to {@code request}.\n     *\n     * @param <T> Result type of the aggregation.\n     *     <p>Note:\n     *     <p>This type is embedded in the {@link AggregationType} as {@link AggregationType} are\n     *     typed in nature.\n     *     <p>Only {@link AggregationType}s that are of same type T can be queried together\n     * @param request request for different aggregation.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @see AggregateRecordsResponse#get\n     ",
    "links" : [ "android.health.connect.datatypes.AggregationType" ]
  }, {
    "name" : "public void aggregateGroupByDuration(@NonNull AggregateRecordsRequest<T> request, @NonNull Duration duration, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<List<AggregateRecordsGroupedByDurationResponse<T>>, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get aggregations corresponding to {@code request}. Use this API if results are to be grouped\n     * by concrete intervals of time, for example 5 Hrs, 10 Hrs etc.\n     *\n     * @param <T> Result type of the aggregation.\n     *     <p>Note:\n     *     <p>This type is embedded in the {@link AggregationType} as {@link AggregationType} are\n     *     typed in nature.\n     *     <p>Only {@link AggregationType}s that are of same type T can be queried together\n     * @param request request for different aggregation.\n     * @param duration Duration on which to group by results\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @see HealthConnectManager#aggregateGroupByPeriod\n     ",
    "links" : [ "android.health.connect.datatypes.AggregationType" ]
  }, {
    "name" : "public void aggregateGroupByPeriod(@NonNull AggregateRecordsRequest<T> request, @NonNull Period period, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<List<AggregateRecordsGroupedByPeriodResponse<T>>, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get aggregations corresponding to {@code request}. Use this API if results are to be grouped\n     * by number of days. This API handles changes in {@link ZoneOffset} when computing the data on\n     * a per-day basis.\n     *\n     * @param <T> Result type of the aggregation.\n     *     <p>Note:\n     *     <p>This type is embedded in the {@link AggregationType} as {@link AggregationType} are\n     *     typed in nature.\n     *     <p>Only {@link AggregationType}s that are of same type T can be queried together\n     * @param request Request for different aggregation.\n     * @param period Period on which to group by results\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @see AggregateRecordsGroupedByPeriodResponse#get\n     * @see HealthConnectManager#aggregateGroupByDuration\n     ",
    "links" : [ "android.health.connect.datatypes.AggregationType", "java.time.ZoneOffset" ]
  }, {
    "name" : "public void deleteRecords(@NonNull DeleteUsingFiltersRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Deletes records based on the {@link DeleteUsingFiltersRequest}. This is only to be used by\n     * health connect controller APK(s). Ids that don't exist will be ignored.\n     *\n     * <p>Deletions are performed in a transaction i.e. either all will be deleted or none\n     *\n     * @param request Request based on which to perform delete operation\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @hide\n     ",
    "links" : [ "android.health.connect.DeleteUsingFiltersRequest" ]
  }, {
    "name" : "public void deleteRecords(@NonNull List<RecordIdFilter> recordIds, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Deletes records based on {@link RecordIdFilter}.\n     *\n     * <p>Deletions are performed in a transaction i.e. either all will be deleted or none\n     *\n     * @param recordIds recordIds on which to perform delete operation.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @throws IllegalArgumentException if {@code recordIds is empty}\n     ",
    "links" : [ "android.health.connect.RecordIdFilter" ]
  }, {
    "name" : "public void deleteRecords(@NonNull Class<? extends Record> recordType, @NonNull TimeRangeFilter timeRangeFilter, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Deletes records based on the {@link TimeRangeFilter}.\n     *\n     * <p>Deletions are performed in a transaction i.e. either all will be deleted or none\n     *\n     * @param recordType recordType to perform delete operation on.\n     * @param timeRangeFilter time filter based on which to delete the records.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     ",
    "links" : [ "android.health.connect.TimeRangeFilter" ]
  }, {
    "name" : "public void getChangeLogs(@NonNull ChangeLogsRequest changeLogsRequest, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<ChangeLogsResponse, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get change logs post the time when {@code token} was generated.\n     *\n     * @param changeLogsRequest The token from {@link HealthConnectManager#getChangeLogToken}.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @see HealthConnectManager#getChangeLogToken\n     ",
    "links" : [ "android.health.connect.HealthConnectManager#getChangeLogToken" ]
  }, {
    "name" : "public void getChangeLogToken(@NonNull ChangeLogTokenRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<ChangeLogTokenResponse, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get token for {HealthConnectManager#getChangeLogs}. Changelogs requested corresponding to\n     * this token will be post the time this token was generated by the system all items that match\n     * the given filters.\n     *\n     * <p>Tokens from this request are to be passed to {HealthConnectManager#getChangeLogs}\n     *\n     * @param request A request to get changelog token\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fetchDataOriginsPriorityOrder(@HealthDataCategory.Type int dataCategory, @NonNull Executor executor, @NonNull OutcomeReceiver<FetchDataOriginsPriorityOrderResponse, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Fetch the data priority order of the contributing {@link DataOrigin} for {@code\n     * dataCategory}.\n     *\n     * @param dataCategory {@link HealthDataCategory} for which to get the priority order\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @hide\n     ",
    "links" : [ "android.health.connect.datatypes.DataOrigin", "android.health.connect.HealthDataCategory" ]
  }, {
    "name" : "public void updateDataOriginPriorityOrder(@NonNull UpdateDataOriginPriorityOrderRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Updates the priority order of the apps as per {@code request}\n     *\n     * @param request new priority order update request\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void queryAllRecordTypesInfo(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Map<Class<? extends Record>, RecordTypeInfoResponse>, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves {@link RecordTypeInfoResponse} for each RecordType.\n     *\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @hide\n     ",
    "links" : [ "android.health.connect.RecordTypeInfoResponse" ]
  }, {
    "name" : "public int getRecordRetentionPeriodInDays()",
    "returnType" : "int",
    "comment" : "\n     * Returns currently set auto delete period for this user.\n     *\n     * <p>If you are calling this function for the first time after a user unlock, this might take\n     * some time so consider calling this on a thread.\n     *\n     * @return Auto delete period in days, 0 is returned if auto delete period is not set.\n     * @throws RuntimeException for internal errors\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRecordRetentionPeriodInDays(@IntRange(from = 0, to = 7300) int days, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets auto delete period (for all the records to be automatically deleted) for this user.\n     *\n     * <p>Note: The max value of auto delete period can be 7300 i.e. ~20 years\n     *\n     * @param days Auto period to be set in days. Use 0 to unset this value.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @throws RuntimeException for internal errors\n     * @throws IllegalArgumentException if {@code days} is not between 0 and 7300\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void queryAccessLogs(@NonNull Executor executor, @NonNull OutcomeReceiver<List<AccessLog>, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Returns a list of access logs with package name and its access time for each record type.\n     *\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void readRecords(@NonNull ReadRecordsRequest<T> request, @NonNull Executor executor, @NonNull OutcomeReceiver<ReadRecordsResponse<T>, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * API to read records based on {@link ReadRecordsRequestUsingFilters} or {@link\n     * ReadRecordsRequestUsingIds}\n     *\n     * <p>Number of records returned by this API will depend based on below factors:\n     *\n     * <p>When an app with read permission allowed calls the API from background then it will be\n     * able to read only its own inserted records and will not get records inserted by other apps.\n     * This may be less than the total records present for the record type.\n     *\n     * <p>When an app with read permission allowed calls the API from foreground then it will be\n     * able to read all records for the record type.\n     *\n     * <p>App with only write permission but no read permission allowed will be able to read only\n     * its own inserted records both when in foreground or background.\n     *\n     * <p>An app without both read and write permissions will not be able to read any record and the\n     * API will throw Security Exception.\n     *\n     * @param request Read request based on {@link ReadRecordsRequestUsingFilters} or {@link\n     *     ReadRecordsRequestUsingIds}\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @throws IllegalArgumentException if request page size set is more than 5000 in {@link\n     *     ReadRecordsRequestUsingFilters}\n     * @throws SecurityException if app without read or write permission tries to read.\n     ",
    "links" : [ "android.health.connect.ReadRecordsRequestUsingFilters", "android.health.connect.ReadRecordsRequestUsingIds" ]
  }, {
    "name" : "public void updateRecords(@NonNull List<Record> records, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Updates {@code records} into the HealthConnect database. In case of an error or a permission\n     * failure the HealthConnect service, {@link OutcomeReceiver#onError} will be invoked with a\n     * {@link HealthConnectException}.\n     *\n     * <p>In case the input record to be updated does not exist in the database or the caller is not\n     * the owner of the record then {@link HealthConnectException#ERROR_INVALID_ARGUMENT} will be\n     * thrown.\n     *\n     * @param records list of records to be updated.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @throws IllegalArgumentException if at least one of the records is missing both\n     *     ClientRecordID and UUID.\n     ",
    "links" : [ "android.health.connect.HealthConnectException#ERROR_INVALID_ARGUMENT", "android.health.connect.HealthConnectException", "android.os.OutcomeReceiver#onError" ]
  }, {
    "name" : "public void getContributorApplicationsInfo(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<ApplicationInfoResponse, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Returns information, represented by {@code ApplicationInfoResponse}, for all the packages\n     * that have contributed to the health connect DB. If the application is does not have\n     * permissions to query other packages, a {@link java.lang.SecurityException} is thrown.\n     *\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @hide\n     ",
    "links" : [ "java.lang.SecurityException" ]
  }, {
    "name" : "public void stageAllHealthConnectRemoteData(@NonNull Map<String, ParcelFileDescriptor> pfdsByFileName, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, StageRemoteDataException> callback) throws NullPointerException",
    "returnType" : "void",
    "comment" : "\n     * Stages all HealthConnect remote data and returns any errors in a callback. Errors encountered\n     * for all the files are shared in the provided callback. Any authorization / permissions\n     * related error is reported to the callback with an empty file name.\n     *\n     * <p>The staged data will later be restored (integrated) into the existing Health Connect data.\n     * Any existing data will not be affected by the staged data.\n     *\n     * <p>The file names passed should be the same as the ones on the original device that were\n     * backed up or are being transferred directly.\n     *\n     * <p>If a file already exists in the staged data then it will be replaced. However, note that\n     * staging data is a one time process. And if the staged data has already been processed then\n     * any attempt to stage data again will be silently ignored.\n     *\n     * <p>The caller is responsible for closing the original file descriptors. The file descriptors\n     * are duplicated and the originals may be closed by the application at any time after this API\n     * returns.\n     *\n     * <p>The caller should update the data download states using {@link #updateDataDownloadState}\n     * before calling this API.\n     *\n     * @param pfdsByFileName The map of file names and their {@link ParcelFileDescriptor}s.\n     * @param executor The {@link Executor} on which to invoke the callback.\n     * @param callback The callback which will receive the outcome of this call.\n     * @hide\n     ",
    "links" : [ "android.os.ParcelFileDescriptor", "android.annotation.CallbackExecutor", "#updateDataDownloadState" ]
  }, {
    "name" : "public void getAllDataForBackup(@NonNull Map<String, ParcelFileDescriptor> pfdsByFileName)",
    "returnType" : "void",
    "comment" : "\n     * Copies all HealthConnect backup data in the passed FDs.\n     *\n     * <p>The shared data must later be sent for Backup to cloud or another device.\n     *\n     * <p>We are responsible for closing the original file descriptors. The caller must not close\n     * the FD before that.\n     *\n     * @param pfdsByFileName The map of file names and their {@link ParcelFileDescriptor}s.\n     * @hide\n     ",
    "links" : [ "android.os.ParcelFileDescriptor" ]
  }, {
    "name" : "public Set<String> getAllBackupFileNames(boolean forDeviceToDevice)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns the names of all HealthConnect Backup files\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteAllStagedRemoteData() throws NullPointerException",
    "returnType" : "void",
    "comment" : "\n     * Deletes all previously staged HealthConnect data from the disk. For testing purposes only.\n     *\n     * <p>This deletes only the staged data leaving any other Health Connect data untouched.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateDataDownloadState(@DataDownloadState int downloadState)",
    "returnType" : "void",
    "comment" : "\n     * Updates the download state of the Health Connect data.\n     *\n     * <p>The data should've been downloaded and the corresponding download states updated before\n     * the app calls {@link #stageAllHealthConnectRemoteData}. Once {@link\n     * #stageAllHealthConnectRemoteData} has been called the downloaded state becomes {@link\n     * #DATA_DOWNLOAD_COMPLETE} and future attempts to update the download state are ignored.\n     *\n     * <p>The only valid order of state transition are:\n     *\n     * <ul>\n     *   <li>{@link #DATA_DOWNLOAD_STARTED} to {@link #DATA_DOWNLOAD_COMPLETE}\n     *   <li>{@link #DATA_DOWNLOAD_STARTED} to {@link #DATA_DOWNLOAD_RETRY} to {@link\n     *       #DATA_DOWNLOAD_COMPLETE}\n     *   <li>{@link #DATA_DOWNLOAD_STARTED} to {@link #DATA_DOWNLOAD_FAILED}\n     *   <li>{@link #DATA_DOWNLOAD_STARTED} to {@link #DATA_DOWNLOAD_RETRY} to {@link\n     *       #DATA_DOWNLOAD_FAILED}\n     * </ul>\n     *\n     * <p>Note that it's okay if some states are missing in of the sequences above but the order has\n     * to be one of the above.\n     *\n     * <p>Only one app will have the permission to call this API so it is assured that no one else\n     * will be able to update this state.\n     *\n     * @param downloadState The download state which needs to be purely from {@link\n     *     DataDownloadState}\n     * @hide\n     ",
    "links" : [ "#DATA_DOWNLOAD_FAILED", "#stageAllHealthConnectRemoteData", "#DATA_DOWNLOAD_RETRY", "#DATA_DOWNLOAD_COMPLETE", "DataDownloadState", "#DATA_DOWNLOAD_STARTED" ]
  }, {
    "name" : "public void getHealthConnectMigrationUiState(@NonNull Executor executor, @NonNull OutcomeReceiver<HealthConnectMigrationUiState, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously returns the current UI state of Health Connect as it goes through the\n     * Data-Migration process. In case there was an error reading the data on the disk the error\n     * will be returned in the callback.\n     *\n     * <p>See also {@link HealthConnectMigrationUiState} object describing the HealthConnect UI\n     * state.\n     *\n     * @param executor The {@link Executor} on which to invoke the callback.\n     * @param callback The callback which will receive the current {@link\n     *     HealthConnectMigrationUiState} or the {@link HealthConnectException}.\n     * @hide\n     ",
    "links" : [ "android.health.connect.migration.HealthConnectMigrationUiState", "android.annotation.CallbackExecutor", "android.health.connect.HealthConnectException" ]
  }, {
    "name" : "public void getHealthConnectDataState(@NonNull Executor executor, @NonNull OutcomeReceiver<HealthConnectDataState, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously returns the current state of the Health Connect data as it goes through the\n     * Data-Restore and/or the Data-Migration process. In case there was an error reading the data\n     * on the disk the error will be returned in the callback.\n     *\n     * <p>See also {@link HealthConnectDataState} object describing the HealthConnect state.\n     *\n     * @param executor The {@link Executor} on which to invoke the callback.\n     * @param callback The callback which will receive the current {@link HealthConnectDataState} or\n     *     the {@link HealthConnectException}.\n     * @hide\n     ",
    "links" : [ "android.health.connect.HealthConnectDataState", "android.annotation.CallbackExecutor", "android.health.connect.HealthConnectException" ]
  }, {
    "name" : "public void queryActivityDates(@NonNull List<Class<? extends Record>> recordTypes, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<List<LocalDate>, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Returns a list of unique dates for which the DB has at least one entry.\n     *\n     * @param recordTypes List of record types classes for which to get the activity dates.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @throws java.lang.IllegalArgumentException If the record types list is empty.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startMigration(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, MigrationException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Marks the start of the migration and block API calls.\n     *\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void finishMigration(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, MigrationException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Marks the end of the migration.\n     *\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeMigrationData(@NonNull List<MigrationEntity> entities, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, MigrationException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Writes data to the module database.\n     *\n     * @param entities List of {@link MigrationEntity} to migrate.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @hide\n     ",
    "links" : [ "android.health.connect.migration.MigrationEntity" ]
  }, {
    "name" : "public void insertMinDataMigrationSdkExtensionVersion(int requiredSdkExtension, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, MigrationException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum version on which the module will inform the migrator package of its\n     * migration readiness.\n     *\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void configureScheduledExport(@Nullable ScheduledExportSettings settings)",
    "returnType" : "void",
    "comment" : "\n     * Configures the settings for the scheduled export of Health Connect data.\n     *\n     * @param settings Settings to use for the scheduled export. Use null to clear the settings.\n     * @throws RuntimeException for internal errors\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getScheduledExportStatus(@NonNull Executor executor, @NonNull OutcomeReceiver<ScheduledExportStatus, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Queries the document providers available to be used for export/import.\n     *\n     * @throws RuntimeException for internal errors\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScheduledExportPeriodInDays()",
    "returnType" : "int",
    "comment" : "\n     * Returns currently set period between scheduled exports for this user.\n     *\n     * <p>If you are calling this function for the first time after a user unlock, this might take\n     * some time so consider calling this on a thread.\n     *\n     * @return Period between scheduled exports in days, 0 is returned if period between scheduled\n     *     exports is not set.\n     * @throws RuntimeException for internal errors\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void queryDocumentProviders(@NonNull Executor executor, @NonNull OutcomeReceiver<List<ExportImportDocumentProvider>, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Queries the document providers available to be used for export/import.\n     *\n     * @throws RuntimeException for internal errors\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private IReadRecordsResponseCallback.Stub getReadCallback(@NonNull Executor executor, @NonNull OutcomeReceiver<ReadRecordsResponse<T>, HealthConnectException> callback)",
    "returnType" : "IReadRecordsResponseCallback.Stub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<Record> toExternalRecordsWithUuids(List<RecordInternal<?>> recordInternals, List<String> uuids)",
    "returnType" : "List<Record>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void returnError(Executor executor, HealthConnectExceptionParcel exception, OutcomeReceiver<?, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isHealthPermission(@NonNull Context context, @NonNull final String permission)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the given permission protects access to health connect data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<String> getHealthPermissions(@NonNull Context context)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns an <b>immutable</b> set of health permissions defined within the module and belonging\n     * to {@link android.health.connect.HealthPermissions#HEALTH_PERMISSION_GROUP}.\n     *\n     * <p><b>Note:</b> If we, for some reason, fail to retrieve these, we return an empty set rather\n     * than crashing the device. This means the health permissions infra will be inactive.\n     *\n     * @hide\n     ",
    "links" : [ "android.health.connect.HealthPermissions#HEALTH_PERMISSION_GROUP" ]
  }, {
    "name" : "private static IMigrationCallback wrapMigrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, MigrationException> callback)",
    "returnType" : "IMigrationCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readMedicalResources(@NonNull List<MedicalIdFilter> ids, @NonNull Executor executor, @NonNull OutcomeReceiver<List<MedicalResource>, HealthConnectException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Reads {@link MedicalResource}s based on a list of {@link MedicalIdFilter}s.\n     *\n     * <p>Number of resources returned by this API will depend based on below factors:\n     *\n     * <ul>\n     *   <li>When an app with read permissions allowed for the requested IDs calls the API from\n     *       background then it will be able to read only its own inserted medical resources and\n     *       will not get medical resources inserted by other apps. This may be less than the\n     *       requested size.\n     *   <li>When an app with all read permissions allowed for the requested IDs calls the API from\n     *       foreground then it will be able to read all the corresponding medical resources.\n     *   <li>When an app with less read permissions allowed to cover all the requested IDs calls the\n     *       API from foreground then it will be able to read only the medical resources it has read\n     *       permissions for. This may be less than the requested size.\n     *   <li>App with only write permission but no read permission allowed will be able to read only\n     *       its own inserted medical resources both when in foreground or background. This may be\n     *       less than the requested size.\n     *   <li>An app without both read and write permissions will not be able to read any medical\n     *       resources and the API will throw Security Exception.\n     * </ul>\n     *\n     * @param ids Identifiers on which to perform read operation.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive result of performing this operation.\n     * @throws IllegalArgumentException if {@code ids} is empty or its size is more than 5000.\n     ",
    "links" : [ "android.health.connect.datatypes.MedicalResource", "android.health.connect.MedicalIdFilter" ]
  } ],
  "methodNames" : [ "public void grantHealthPermission(@NonNull String packageName, @NonNull String permissionName)", "public void revokeHealthPermission(@NonNull String packageName, @NonNull String permissionName, @Nullable String reason)", "public void revokeAllHealthPermissions(@NonNull String packageName, @Nullable String reason)", "public List<String> getGrantedHealthPermissions(@NonNull String packageName)", "public Map<String, Integer> getHealthPermissionsFlags(@NonNull String packageName, @NonNull List<String> permissions)", "public void setHealthPermissionsUserFixedFlagValue(@NonNull String packageName, @NonNull List<String> permissions, boolean value)", "public Instant getHealthDataHistoricalAccessStartDate(@NonNull String packageName)", "public void insertRecords(@NonNull List<Record> records, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<InsertRecordsResponse, HealthConnectException> callback)", "public void aggregate(@NonNull AggregateRecordsRequest<T> request, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<AggregateRecordsResponse<T>, HealthConnectException> callback)", "public void aggregateGroupByDuration(@NonNull AggregateRecordsRequest<T> request, @NonNull Duration duration, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<List<AggregateRecordsGroupedByDurationResponse<T>>, HealthConnectException> callback)", "public void aggregateGroupByPeriod(@NonNull AggregateRecordsRequest<T> request, @NonNull Period period, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<List<AggregateRecordsGroupedByPeriodResponse<T>>, HealthConnectException> callback)", "public void deleteRecords(@NonNull DeleteUsingFiltersRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)", "public void deleteRecords(@NonNull List<RecordIdFilter> recordIds, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)", "public void deleteRecords(@NonNull Class<? extends Record> recordType, @NonNull TimeRangeFilter timeRangeFilter, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)", "public void getChangeLogs(@NonNull ChangeLogsRequest changeLogsRequest, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<ChangeLogsResponse, HealthConnectException> callback)", "public void getChangeLogToken(@NonNull ChangeLogTokenRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<ChangeLogTokenResponse, HealthConnectException> callback)", "public void fetchDataOriginsPriorityOrder(@HealthDataCategory.Type int dataCategory, @NonNull Executor executor, @NonNull OutcomeReceiver<FetchDataOriginsPriorityOrderResponse, HealthConnectException> callback)", "public void updateDataOriginPriorityOrder(@NonNull UpdateDataOriginPriorityOrderRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)", "public void queryAllRecordTypesInfo(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Map<Class<? extends Record>, RecordTypeInfoResponse>, HealthConnectException> callback)", "public int getRecordRetentionPeriodInDays()", "public void setRecordRetentionPeriodInDays(@IntRange(from = 0, to = 7300) int days, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)", "public void queryAccessLogs(@NonNull Executor executor, @NonNull OutcomeReceiver<List<AccessLog>, HealthConnectException> callback)", "public void readRecords(@NonNull ReadRecordsRequest<T> request, @NonNull Executor executor, @NonNull OutcomeReceiver<ReadRecordsResponse<T>, HealthConnectException> callback)", "public void updateRecords(@NonNull List<Record> records, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, HealthConnectException> callback)", "public void getContributorApplicationsInfo(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<ApplicationInfoResponse, HealthConnectException> callback)", "public void stageAllHealthConnectRemoteData(@NonNull Map<String, ParcelFileDescriptor> pfdsByFileName, @NonNull Executor executor, @NonNull OutcomeReceiver<Void, StageRemoteDataException> callback) throws NullPointerException", "public void getAllDataForBackup(@NonNull Map<String, ParcelFileDescriptor> pfdsByFileName)", "public Set<String> getAllBackupFileNames(boolean forDeviceToDevice)", "public void deleteAllStagedRemoteData() throws NullPointerException", "public void updateDataDownloadState(@DataDownloadState int downloadState)", "public void getHealthConnectMigrationUiState(@NonNull Executor executor, @NonNull OutcomeReceiver<HealthConnectMigrationUiState, HealthConnectException> callback)", "public void getHealthConnectDataState(@NonNull Executor executor, @NonNull OutcomeReceiver<HealthConnectDataState, HealthConnectException> callback)", "public void queryActivityDates(@NonNull List<Class<? extends Record>> recordTypes, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<List<LocalDate>, HealthConnectException> callback)", "public void startMigration(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, MigrationException> callback)", "public void finishMigration(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, MigrationException> callback)", "public void writeMigrationData(@NonNull List<MigrationEntity> entities, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, MigrationException> callback)", "public void insertMinDataMigrationSdkExtensionVersion(int requiredSdkExtension, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, MigrationException> callback)", "public void configureScheduledExport(@Nullable ScheduledExportSettings settings)", "public void getScheduledExportStatus(@NonNull Executor executor, @NonNull OutcomeReceiver<ScheduledExportStatus, HealthConnectException> callback)", "public int getScheduledExportPeriodInDays()", "public void queryDocumentProviders(@NonNull Executor executor, @NonNull OutcomeReceiver<List<ExportImportDocumentProvider>, HealthConnectException> callback)", "private IReadRecordsResponseCallback.Stub getReadCallback(@NonNull Executor executor, @NonNull OutcomeReceiver<ReadRecordsResponse<T>, HealthConnectException> callback)", "private List<Record> toExternalRecordsWithUuids(List<RecordInternal<?>> recordInternals, List<String> uuids)", "private void returnError(Executor executor, HealthConnectExceptionParcel exception, OutcomeReceiver<?, HealthConnectException> callback)", "public static boolean isHealthPermission(@NonNull Context context, @NonNull final String permission)", "public static Set<String> getHealthPermissions(@NonNull Context context)", "private static IMigrationCallback wrapMigrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, MigrationException> callback)", "public void readMedicalResources(@NonNull List<MedicalIdFilter> ids, @NonNull Executor executor, @NonNull OutcomeReceiver<List<MedicalResource>, HealthConnectException> callback)" ],
  "variableNames" : [ "CATEGORY_HEALTH_PERMISSIONS", "ACTION_MANAGE_HEALTH_PERMISSIONS", "ACTION_REQUEST_EXERCISE_ROUTE", "EXTRA_SESSION_ID", "EXTRA_EXERCISE_ROUTE", "ACTION_REQUEST_HEALTH_PERMISSIONS", "ACTION_HEALTH_HOME_SETTINGS", "ACTION_MANAGE_HEALTH_DATA", "ACTION_SHOW_MIGRATION_INFO", "ACTION_HEALTH_CONNECT_MIGRATION_READY", "DATA_DOWNLOAD_STATE_UNKNOWN", "DATA_DOWNLOAD_STARTED", "DATA_DOWNLOAD_RETRY", "DATA_DOWNLOAD_FAILED", "DATA_DOWNLOAD_COMPLETE", "DATA_EXPORT_ERROR_UNKNOWN", "DATA_EXPORT_ERROR_NONE", "DATA_EXPORT_LOST_FILE_ACCESS", "ACTION_SHOW_ONBOARDING", "TAG", "HEALTH_PERMISSION_PREFIX", "sHealthPermissions", "mContext", "mService", "mInternalExternalRecordConverter" ]
}