{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/verify/domain/DomainVerificationInfo.java",
  "packageName" : "android.content.pm.verify.domain",
  "className" : "DomainVerificationInfo",
  "comment" : "\n * Contains the state of all domains for a given package on device. Used by the domain verification\n * agent to determine the domains declared by a package that need to be verified by comparing\n * against the digital asset links response from the server hosting that domain.\n * <p>\n * These values for each domain can be modified through\n * {@link DomainVerificationManager#setDomainVerificationStatus(UUID,\n * Set, int)}.\n *\n * @hide\n ",
  "links" : [ "android.content.pm.verify.domain.DomainVerificationManager#setDomainVerificationStatus(UUID" ],
  "variables" : [ {
    "name" : "STATE_NO_RESPONSE",
    "type" : "int",
    "comment" : "\n     * No response has been recorded by either the system or any verification agent.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_SUCCESS",
    "type" : "int",
    "comment" : "\n     * The domain has been explicitly verified.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_UNMODIFIABLE",
    "type" : "int",
    "comment" : "\n     * Indicates the host cannot be modified by the verification agent.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_MODIFIABLE_UNVERIFIED",
    "type" : "int",
    "comment" : "\n     * Indicates the host can be modified by the verification agent and is not considered verified.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_MODIFIABLE_VERIFIED",
    "type" : "int",
    "comment" : "\n     * Indicates the host can be modified by the verification agent and is considered verified.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_FIRST_VERIFIER_DEFINED",
    "type" : "int",
    "comment" : "\n     * The first available custom response code. This and any greater integer, along with {@link\n     * #STATE_SUCCESS} are the only values settable by the verification agent. All custom values\n     * will be treated as if the domain is unverified.\n     ",
    "links" : [ "#STATE_SUCCESS" ]
  }, {
    "name" : "mIdentifier",
    "type" : "UUID",
    "comment" : "\n     * A domain verification ID for use in later API calls. This represents the snapshot of the\n     * domains for a package on device, and will be invalidated whenever the package changes.\n     * <p>\n     * An exception will be thrown at the next API call that receives the ID if it is no longer\n     * valid.\n     * <p>\n     * The caller may also be notified with a broadcast whenever a package and ID is invalidated, at\n     * which point it can use the package name to evict existing requests with an invalid set ID. If\n     * the caller wants to manually check if any IDs have been invalidate, the {@link\n     * PackageManager#getChangedPackages(int)} API will allow tracking the packages changed since\n     * the last query of this method, prompting the caller to re-query.\n     * <p>\n     * This allows the caller to arbitrarily grant or revoke domain verification status, through\n     * {@link DomainVerificationManager#setDomainVerificationStatus(UUID, Set, int)}.\n     ",
    "links" : [ "android.content.pm.PackageManager#getChangedPackages(int)", "android.content.pm.verify.domain.DomainVerificationManager#setDomainVerificationStatus(UUID" ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "\n     * The package name that this data corresponds to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHostToStateMap",
    "type" : "Map<String, Integer>",
    "comment" : "\n     * Map of host names to their current state. State is an integer, which defaults to {@link\n     * #STATE_NO_RESPONSE}. State can be modified by the domain verification agent (the intended\n     * consumer of this API), which can be equal to {@link #STATE_SUCCESS} when verified, or equal\n     * to or greater than {@link #STATE_FIRST_VERIFIER_DEFINED} for any unsuccessful response.\n     * <p>\n     * Hosts which cannot be edited will be assigned {@link #STATE_UNMODIFIABLE}. It is expected\n     * that the agent attempt to verify all domains that it can modify the state of.\n     ",
    "links" : [ "#STATE_FIRST_VERIFIER_DEFINED", "#STATE_SUCCESS", "#STATE_NO_RESPONSE", "#STATE_UNMODIFIABLE" ]
  }, {
    "name" : "sParcellingForIdentifier",
    "type" : "Parcelling<UUID>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<DomainVerificationInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void parcelHostToStateMap(Parcel dest, @SuppressWarnings(\"unused\") int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Map<String, Integer> unparcelHostToStateMap(Parcel in)",
    "returnType" : "Map<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String stateToString(@State int value)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public UUID getIdentifier()",
    "returnType" : "UUID",
    "comment" : "\n     * A domain verification ID for use in later API calls. This represents the snapshot of the\n     * domains for a package on device, and will be invalidated whenever the package changes.\n     * <p>\n     * An exception will be thrown at the next API call that receives the ID if it is no longer\n     * valid.\n     * <p>\n     * The caller may also be notified with a broadcast whenever a package and ID is invalidated, at\n     * which point it can use the package name to evict existing requests with an invalid set ID. If\n     * the caller wants to manually check if any IDs have been invalidate, the {@link\n     * PackageManager#getChangedPackages(int)} API will allow tracking the packages changed since\n     * the last query of this method, prompting the caller to re-query.\n     * <p>\n     * This allows the caller to arbitrarily grant or revoke domain verification status, through\n     * {@link DomainVerificationManager#setDomainVerificationStatus(UUID, Set, int)}.\n     ",
    "links" : [ "android.content.pm.PackageManager#getChangedPackages(int)", "android.content.pm.verify.domain.DomainVerificationManager#setDomainVerificationStatus(UUID" ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * The package name that this data corresponds to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Integer> getHostToStateMap()",
    "returnType" : "Map<String, Integer>",
    "comment" : "\n     * Map of host names to their current state. State is an integer, which defaults to {@link\n     * #STATE_NO_RESPONSE}. State can be modified by the domain verification agent (the intended\n     * consumer of this API), which can be equal to {@link #STATE_SUCCESS} when verified, or equal\n     * to or greater than {@link #STATE_FIRST_VERIFIER_DEFINED} for any unsuccessful response.\n     * <p>\n     * Hosts which cannot be edited will be assigned {@link #STATE_UNMODIFIABLE}. It is expected\n     * that the agent attempt to verify all domains that it can modify the state of.\n     ",
    "links" : [ "#STATE_FIRST_VERIFIER_DEFINED", "#STATE_SUCCESS", "#STATE_NO_RESPONSE", "#STATE_UNMODIFIABLE" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@android.annotation.Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void parcelHostToStateMap(Parcel dest, @SuppressWarnings(\"unused\") int flags)", "private Map<String, Integer> unparcelHostToStateMap(Parcel in)", "public static String stateToString(@State int value)", "public UUID getIdentifier()", "public String getPackageName()", "public Map<String, Integer> getHostToStateMap()", "public String toString()", "public boolean equals(@android.annotation.Nullable Object o)", "public int hashCode()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ],
  "variableNames" : [ "STATE_NO_RESPONSE", "STATE_SUCCESS", "STATE_UNMODIFIABLE", "STATE_MODIFIABLE_UNVERIFIED", "STATE_MODIFIABLE_VERIFIED", "STATE_FIRST_VERIFIER_DEFINED", "mIdentifier", "mPackageName", "mHostToStateMap", "sParcellingForIdentifier", "CREATOR" ]
}