{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/TaskFragmentOperation.java",
  "packageName" : "android.window",
  "className" : "TaskFragmentOperation",
  "comment" : "\n * Data object of params for TaskFragment related {@link WindowContainerTransaction} operation.\n *\n * @see WindowContainerTransaction#addTaskFragmentOperation(IBinder, TaskFragmentOperation).\n * @hide\n ",
  "links" : [ "android.window.WindowContainerTransaction" ],
  "variables" : [ {
    "name" : "OP_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Type for tracking other unknown TaskFragment operation that is not set through\n     * {@link TaskFragmentOperation}, such as invalid request.\n     ",
    "links" : [ "android.window.TaskFragmentOperation" ]
  }, {
    "name" : "OP_TYPE_CREATE_TASK_FRAGMENT",
    "type" : "int",
    "comment" : " Creates a new TaskFragment. ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_DELETE_TASK_FRAGMENT",
    "type" : "int",
    "comment" : " Deletes the given TaskFragment. ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_START_ACTIVITY_IN_TASK_FRAGMENT",
    "type" : "int",
    "comment" : " Starts an Activity in the given TaskFragment. ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_REPARENT_ACTIVITY_TO_TASK_FRAGMENT",
    "type" : "int",
    "comment" : " Reparents the given Activity to the given TaskFragment. ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_SET_ADJACENT_TASK_FRAGMENTS",
    "type" : "int",
    "comment" : " Sets two TaskFragments adjacent to each other. ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_CLEAR_ADJACENT_TASK_FRAGMENTS",
    "type" : "int",
    "comment" : " Clears the adjacent TaskFragments relationship. ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_REQUEST_FOCUS_ON_TASK_FRAGMENT",
    "type" : "int",
    "comment" : " Requests focus on the top running Activity in the given TaskFragment. ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_SET_COMPANION_TASK_FRAGMENT",
    "type" : "int",
    "comment" : " Sets a given TaskFragment to have a companion TaskFragment. ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_SET_ANIMATION_PARAMS",
    "type" : "int",
    "comment" : " Sets the {@link TaskFragmentAnimationParams} for the given TaskFragment. ",
    "links" : [ "android.window.TaskFragmentAnimationParams" ]
  }, {
    "name" : "OP_TYPE_SET_RELATIVE_BOUNDS",
    "type" : "int",
    "comment" : " Sets the relative bounds with {@link WindowContainerTransaction#setRelativeBounds}. ",
    "links" : [ "android.window.WindowContainerTransaction#setRelativeBounds" ]
  }, {
    "name" : "OP_TYPE_REORDER_TO_FRONT",
    "type" : "int",
    "comment" : "\n     * Reorders the TaskFragment to be the front-most TaskFragment in the Task.\n     * Note that there could still have other WindowContainer on top of the front-most\n     * TaskFragment, such as a non-embedded Activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_SET_ISOLATED_NAVIGATION",
    "type" : "int",
    "comment" : "\n     * Sets the activity navigation to be isolated, where the activity navigation on the\n     * TaskFragment is separated from the rest activities in the Task. Activities cannot be\n     * started on an isolated TaskFragment unless explicitly requested to. That said, new launched\n     * activities should be positioned as a sibling to the TaskFragment with higher z-ordering.\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_REORDER_TO_BOTTOM_OF_TASK",
    "type" : "int",
    "comment" : "\n     * Reorders the TaskFragment to be the bottom-most in the Task. Note that this op will bring the\n     * TaskFragment to the bottom of the Task below all the other Activities and TaskFragments.\n     *\n     * This is only allowed for system organizers. See\n     * {@link com.android.server.wm.TaskFragmentOrganizerController#registerOrganizer(\n     * ITaskFragmentOrganizer, boolean)}\n     ",
    "links" : [ "com.android.server.wm.TaskFragmentOrganizerController#registerOrganizer(" ]
  }, {
    "name" : "OP_TYPE_REORDER_TO_TOP_OF_TASK",
    "type" : "int",
    "comment" : "\n     * Reorders the TaskFragment to be the top-most in the Task. Note that this op will bring the\n     * TaskFragment to the top of the Task above all the other Activities and TaskFragments.\n     *\n     * This is only allowed for system organizers. See\n     * {@link com.android.server.wm.TaskFragmentOrganizerController#registerOrganizer(\n     * ITaskFragmentOrganizer, boolean)}\n     ",
    "links" : [ "com.android.server.wm.TaskFragmentOrganizerController#registerOrganizer(" ]
  }, {
    "name" : "OP_TYPE_CREATE_OR_MOVE_TASK_FRAGMENT_DECOR_SURFACE",
    "type" : "int",
    "comment" : "\n     * Creates a decor surface in the parent Task of the TaskFragment. The created decor surface\n     * will be provided in {@link TaskFragmentTransaction#TYPE_TASK_FRAGMENT_PARENT_INFO_CHANGED}\n     * event callback. If a decor surface already exists in the parent Task, the current\n     * TaskFragment will become the new owner of the decor surface and the decor surface will be\n     * moved above the TaskFragment.\n     *\n     * The decor surface can be used to draw the divider between TaskFragments or other decorations.\n     ",
    "links" : [ "android.window.TaskFragmentTransaction#TYPE_TASK_FRAGMENT_PARENT_INFO_CHANGED" ]
  }, {
    "name" : "OP_TYPE_REMOVE_TASK_FRAGMENT_DECOR_SURFACE",
    "type" : "int",
    "comment" : "\n     * Removes the decor surface in the parent Task of the TaskFragment.\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_SET_DIM_ON_TASK",
    "type" : "int",
    "comment" : "\n     * Applies dimming on the parent Task which could cross two TaskFragments.\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_SET_MOVE_TO_BOTTOM_IF_CLEAR_WHEN_LAUNCH",
    "type" : "int",
    "comment" : "\n     * Sets this TaskFragment to move to bottom of the Task if any of the activities below it is\n     * launched in a mode requiring clear top.\n     *\n     * This is only allowed for system organizers. See\n     * {@link com.android.server.wm.TaskFragmentOrganizerController#registerOrganizer(\n     * ITaskFragmentOrganizer, boolean)}\n     ",
    "links" : [ "com.android.server.wm.TaskFragmentOrganizerController#registerOrganizer(" ]
  }, {
    "name" : "OP_TYPE_SET_DECOR_SURFACE_BOOSTED",
    "type" : "int",
    "comment" : "\n     * Sets whether the decor surface will be boosted. When not boosted, the decor surface is placed\n     * below any TaskFragments in untrusted mode or any activities with uid different from the\n     * TaskFragmentOrganizer uid and just above its owner TaskFragment; when boosted, the decor\n     * surface is placed above all the non-boosted windows in the Task, the content of these\n     * non-boosted windows will be hidden and inputs are disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_TYPE_SET_PINNED",
    "type" : "int",
    "comment" : "\n     * Sets the TaskFragment to be pinned.\n     * <p>\n     * If a TaskFragment is pinned, the TaskFragment should be the top-most TaskFragment among other\n     * sibling TaskFragments. Any newly launched and embeddable activity should not be placed in the\n     * pinned TaskFragment, unless the activity is launched from the pinned TaskFragment or\n     * explicitly requested to. Non-embeddable activities are not restricted to.\n     * <p>\n     * See {@link #OP_TYPE_REORDER_TO_FRONT} on how to reorder a pinned TaskFragment to the top.\n     ",
    "links" : [ "#OP_TYPE_REORDER_TO_FRONT" ]
  }, {
    "name" : "mOpType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTaskFragmentCreationParams",
    "type" : "TaskFragmentCreationParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityIntent",
    "type" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBundle",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondaryFragmentToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationParams",
    "type" : "TaskFragmentAnimationParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBooleanValue",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceTransaction",
    "type" : "SurfaceControl.Transaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<TaskFragmentOperation>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the {@link OperationType} of this {@link TaskFragmentOperation}.\n     ",
    "links" : [ "android.window.TaskFragmentOperation", "OperationType" ]
  }, {
    "name" : "public TaskFragmentCreationParams getTaskFragmentCreationParams()",
    "returnType" : "TaskFragmentCreationParams",
    "comment" : "\n     * Gets the options to create a new TaskFragment.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getActivityToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * Gets the Activity token set in this operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent getActivityIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Gets the Intent to start a new Activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getBundle()",
    "returnType" : "Bundle",
    "comment" : "\n     * Gets the Bundle set in this operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getSecondaryFragmentToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * Gets the fragment token of the secondary TaskFragment set in this operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TaskFragmentAnimationParams getAnimationParams()",
    "returnType" : "TaskFragmentAnimationParams",
    "comment" : "\n     * Gets the animation related override of TaskFragment.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBooleanValue()",
    "returnType" : "boolean",
    "comment" : " Returns the boolean value for this operation. ",
    "links" : [ ]
  }, {
    "name" : "public SurfaceControl.Transaction getSurfaceTransaction()",
    "returnType" : "SurfaceControl.Transaction",
    "comment" : "\n     * Returns {@link SurfaceControl.Transaction} associated with this operation. Currently, this is\n     * only used by {@link TaskFragmentOperation#OP_TYPE_SET_DECOR_SURFACE_BOOSTED} to specify a\n     * {@link SurfaceControl.Transaction} that should be applied together with the transaction to\n     * change the decor surface layers.\n     ",
    "links" : [ "SurfaceControl.Transaction", "android.window.TaskFragmentOperation#OP_TYPE_SET_DECOR_SURFACE_BOOSTED" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int getOpType()", "public TaskFragmentCreationParams getTaskFragmentCreationParams()", "public IBinder getActivityToken()", "public Intent getActivityIntent()", "public Bundle getBundle()", "public IBinder getSecondaryFragmentToken()", "public TaskFragmentAnimationParams getAnimationParams()", "public boolean getBooleanValue()", "public SurfaceControl.Transaction getSurfaceTransaction()", "public String toString()", "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public int describeContents()" ],
  "variableNames" : [ "OP_TYPE_UNKNOWN", "OP_TYPE_CREATE_TASK_FRAGMENT", "OP_TYPE_DELETE_TASK_FRAGMENT", "OP_TYPE_START_ACTIVITY_IN_TASK_FRAGMENT", "OP_TYPE_REPARENT_ACTIVITY_TO_TASK_FRAGMENT", "OP_TYPE_SET_ADJACENT_TASK_FRAGMENTS", "OP_TYPE_CLEAR_ADJACENT_TASK_FRAGMENTS", "OP_TYPE_REQUEST_FOCUS_ON_TASK_FRAGMENT", "OP_TYPE_SET_COMPANION_TASK_FRAGMENT", "OP_TYPE_SET_ANIMATION_PARAMS", "OP_TYPE_SET_RELATIVE_BOUNDS", "OP_TYPE_REORDER_TO_FRONT", "OP_TYPE_SET_ISOLATED_NAVIGATION", "OP_TYPE_REORDER_TO_BOTTOM_OF_TASK", "OP_TYPE_REORDER_TO_TOP_OF_TASK", "OP_TYPE_CREATE_OR_MOVE_TASK_FRAGMENT_DECOR_SURFACE", "OP_TYPE_REMOVE_TASK_FRAGMENT_DECOR_SURFACE", "OP_TYPE_SET_DIM_ON_TASK", "OP_TYPE_SET_MOVE_TO_BOTTOM_IF_CLEAR_WHEN_LAUNCH", "OP_TYPE_SET_DECOR_SURFACE_BOOSTED", "OP_TYPE_SET_PINNED", "mOpType", "mTaskFragmentCreationParams", "mActivityToken", "mActivityIntent", "mBundle", "mSecondaryFragmentToken", "mAnimationParams", "mBooleanValue", "mSurfaceTransaction", "CREATOR" ]
}