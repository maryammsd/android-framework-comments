{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/input/StickyModifierState.java",
  "packageName" : "android.hardware.input",
  "className" : "StickyModifierState",
  "comment" : "\n * The StickyModifierState class is a representation of a modifier state when A11y Sticky keys\n * feature is enabled\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract boolean isShiftModifierOn()",
    "returnType" : "boolean",
    "comment" : "\n     * Represents whether current sticky modifier state includes 'Shift' modifier.\n     * <p> If {@code true} the next {@link android.view.KeyEvent} will contain 'Shift' modifier in\n     * its metaState.\n     *\n     * @return whether Shift modifier key is on.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public abstract boolean isShiftModifierLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Represents whether current sticky modifier state includes 'Shift' modifier, and it is\n     * locked.\n     * <p> If {@code true} any subsequent {@link android.view.KeyEvent} will contain 'Shift'\n     * modifier in its metaState and this state will remain sticky (will not be cleared), until\n     * user presses 'Shift' key again to clear the locked state.\n     *\n     * @return whether Shift modifier key is locked.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public abstract boolean isCtrlModifierOn()",
    "returnType" : "boolean",
    "comment" : "\n     * Represents whether current sticky modifier state includes 'Ctrl' modifier.\n     * <p> If {@code true} the next {@link android.view.KeyEvent} will contain 'Ctrl' modifier in\n     * its metaState.\n     *\n     * @return whether Ctrl modifier key is on.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public abstract boolean isCtrlModifierLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Represents whether current sticky modifier state includes 'Ctrl' modifier, and it is\n     * locked.\n     * <p> If {@code true} any subsequent {@link android.view.KeyEvent} will contain 'Ctrl'\n     * modifier in its metaState and this state will remain sticky (will not be cleared), until\n     * user presses 'Ctrl' key again to clear the locked state.\n     *\n     * @return whether Ctrl modifier key is locked.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public abstract boolean isMetaModifierOn()",
    "returnType" : "boolean",
    "comment" : "\n     * Represents whether current sticky modifier state includes 'Meta' modifier.\n     * <p> If {@code true} the next {@link android.view.KeyEvent} will contain 'Meta' modifier in\n     * its metaState.\n     *\n     * @return whether Meta modifier key is on.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public abstract boolean isMetaModifierLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Represents whether current sticky modifier state includes 'Meta' modifier, and it is\n     * locked.\n     * <p> If {@code true} any subsequent {@link android.view.KeyEvent} will contain 'Meta'\n     * modifier in its metaState and this state will remain sticky (will not be cleared), until\n     * user presses 'Meta' key again to clear the locked state.\n     *\n     * @return whether Meta modifier key is locked.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public abstract boolean isAltModifierOn()",
    "returnType" : "boolean",
    "comment" : "\n     * Represents whether current sticky modifier state includes 'Alt' modifier.\n     * <p> If {@code true} the next {@link android.view.KeyEvent} will contain 'Alt' modifier in\n     * its metaState.\n     *\n     * @return whether Alt modifier key is on.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public abstract boolean isAltModifierLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Represents whether current sticky modifier state includes 'Alt' modifier, and it is\n     * locked.\n     * <p> If {@code true} any subsequent {@link android.view.KeyEvent} will contain 'Alt'\n     * modifier in its metaState and this state will remain sticky (will not be cleared), until\n     * user presses 'Alt' key again to clear the locked state.\n     *\n     * @return whether Alt modifier key is locked.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public abstract boolean isAltGrModifierOn()",
    "returnType" : "boolean",
    "comment" : "\n     * Represents whether current sticky modifier state includes 'AltGr' modifier.\n     * <p> If {@code true} the next {@link android.view.KeyEvent} will contain 'AltGr' modifier in\n     * its metaState.\n     *\n     * @return whether AltGr modifier key is on.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public abstract boolean isAltGrModifierLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Represents whether current sticky modifier state includes 'AltGr' modifier, and it is\n     * locked.\n     * <p> If {@code true} any subsequent {@link android.view.KeyEvent} will contain 'AltGr'\n     * modifier in its metaState and this state will remain sticky (will not be cleared), until\n     * user presses 'AltGr' key again to clear the locked state.\n     *\n     * @return whether AltGr modifier key is locked.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  } ],
  "methodNames" : [ "public abstract boolean isShiftModifierOn()", "public abstract boolean isShiftModifierLocked()", "public abstract boolean isCtrlModifierOn()", "public abstract boolean isCtrlModifierLocked()", "public abstract boolean isMetaModifierOn()", "public abstract boolean isMetaModifierLocked()", "public abstract boolean isAltModifierOn()", "public abstract boolean isAltModifierLocked()", "public abstract boolean isAltGrModifierOn()", "public abstract boolean isAltGrModifierLocked()" ],
  "variableNames" : [ ]
}