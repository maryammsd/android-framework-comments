{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/tracing/perfetto/DataSource.java",
  "packageName" : "android.tracing.perfetto",
  "className" : "DataSource",
  "comment" : "\n * Templated base class meant to be derived by embedders to create a custom data\n * source.\n *\n * @param <DataSourceInstanceType> The type for the DataSource instances that will be created from\n *                                 this DataSource type.\n * @param <TlsStateType> The type of the custom TLS state, if any is used.\n * @param <IncrementalStateType> The type of the custom incremental state, if any is used.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mNativeObj",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract DataSourceInstanceType createInstance(ProtoInputStream configStream, int instanceIndex)",
    "returnType" : "DataSourceInstanceType",
    "comment" : "\n     * A function implemented by each datasource to create a new data source instance.\n     *\n     * @param configStream A ProtoInputStream to read the tracing instance's config.\n     * @return A new data source instance setup with the provided config.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void trace(TraceFunction<DataSourceInstanceType, TlsStateType, IncrementalStateType> fun)",
    "returnType" : "void",
    "comment" : "\n     * The main tracing method. Tracing code should call this passing a lambda as\n     * argument, with the following signature: void(TraceContext).\n     * <p>\n     * The lambda will be called synchronously (i.e., always before trace()\n     * returns) only if tracing is enabled and the data source has been enabled in\n     * the tracing config.\n     * <p>\n     * The lambda can be called more than once per trace() call, in the case of\n     * concurrent tracing sessions (or even if the data source is instantiated\n     * twice within the same trace config).\n     *\n     * @param fun The tracing lambda that will be called with the tracing contexts of each active\n     *            tracing instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void flush()",
    "returnType" : "void",
    "comment" : "\n     * Flush any trace data from this datasource that has not yet been flushed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TlsStateType createTlsState(CreateTlsStateArgs<DataSourceInstanceType> args)",
    "returnType" : "TlsStateType",
    "comment" : "\n     * Override this method to create a custom TlsState object for your DataSource. A new instance\n     * will be created per trace instance per thread.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public IncrementalStateType createIncrementalState(CreateIncrementalStateArgs<DataSourceInstanceType> args)",
    "returnType" : "IncrementalStateType",
    "comment" : "\n     * Override this method to create and use a custom IncrementalState object for your DataSource.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void register(DataSourceParams params)",
    "returnType" : "void",
    "comment" : "\n     * Registers the data source on all tracing backends, including ones that\n     * connect after the registration. Doing so enables the data source to receive\n     * Setup/Start/Stop notifications and makes the trace() method work when\n     * tracing is enabled and the data source is selected.\n     * <p>\n     * NOTE: Once registered, we cannot unregister the data source. Therefore, we should avoid\n     * creating and registering data source where not strictly required. This is a fundamental\n     * limitation of Perfetto itself.\n     *\n     * @param params Params to initialize the datasource with.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DataSourceInstanceType getDataSourceInstanceLocked(int instanceIndex)",
    "returnType" : "DataSourceInstanceType",
    "comment" : "\n     * Gets the datasource instance with a specified index.\n     * IMPORTANT: releaseDataSourceInstance must be called after using the datasource instance.\n     * @param instanceIndex The index of the datasource to lock and get.\n     * @return The DataSourceInstance at index instanceIndex.\n     *         Null if the datasource instance at the requested index doesn't exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void releaseDataSourceInstance(int instanceIndex)",
    "returnType" : "void",
    "comment" : "\n     * Unlock the datasource at the specified index.\n     * @param instanceIndex The index of the datasource to unlock.\n     ",
    "links" : [ ]
  }, {
    "name" : "private DataSourceInstanceType createInstance(byte[] rawConfig, int instanceIndex)",
    "returnType" : "DataSourceInstanceType",
    "comment" : "\n     * Called from native side when a new tracing instance starts.\n     *\n     * @param rawConfig byte array of the PerfettoConfig encoded proto.\n     * @return A new Java DataSourceInstance object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRegisterDataSource(long dataSourcePtr, int bufferExhaustedPolicy, boolean willNotifyOnStop, boolean noFlush)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreate(DataSource thiz, String name)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeFlushAll(long nativeDataSourcePointer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native DataSourceInstance nativeGetPerfettoInstanceLocked(long dataSourcePtr, int dsInstanceIdx)",
    "returnType" : "DataSourceInstance",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeReleasePerfettoInstanceLocked(long dataSourcePtr, int dsInstanceIdx)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativePerfettoDsTraceIterateBegin(long dataSourcePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativePerfettoDsTraceIterateNext(long dataSourcePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativePerfettoDsTraceIterateBreak(long dataSourcePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetPerfettoDsInstanceIndex(long dataSourcePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWritePackets(long dataSourcePtr, byte[][] packetData)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract DataSourceInstanceType createInstance(ProtoInputStream configStream, int instanceIndex)", "public final void trace(TraceFunction<DataSourceInstanceType, TlsStateType, IncrementalStateType> fun)", "public final void flush()", "public TlsStateType createTlsState(CreateTlsStateArgs<DataSourceInstanceType> args)", "public IncrementalStateType createIncrementalState(CreateIncrementalStateArgs<DataSourceInstanceType> args)", "public void register(DataSourceParams params)", "public DataSourceInstanceType getDataSourceInstanceLocked(int instanceIndex)", "protected void releaseDataSourceInstance(int instanceIndex)", "private DataSourceInstanceType createInstance(byte[] rawConfig, int instanceIndex)", "private static native void nativeRegisterDataSource(long dataSourcePtr, int bufferExhaustedPolicy, boolean willNotifyOnStop, boolean noFlush)", "private static native long nativeCreate(DataSource thiz, String name)", "private static native void nativeFlushAll(long nativeDataSourcePointer)", "private static native long nativeGetFinalizer()", "private static native DataSourceInstance nativeGetPerfettoInstanceLocked(long dataSourcePtr, int dsInstanceIdx)", "private static native void nativeReleasePerfettoInstanceLocked(long dataSourcePtr, int dsInstanceIdx)", "private static native boolean nativePerfettoDsTraceIterateBegin(long dataSourcePtr)", "private static native boolean nativePerfettoDsTraceIterateNext(long dataSourcePtr)", "private static native void nativePerfettoDsTraceIterateBreak(long dataSourcePtr)", "private static native int nativeGetPerfettoDsInstanceIndex(long dataSourcePtr)", "private static native void nativeWritePackets(long dataSourcePtr, byte[][] packetData)" ],
  "variableNames" : [ "mNativeObj", "name" ]
}