{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/SpinedBuffer.java",
  "packageName" : "java.util.stream",
  "className" : "SpinedBuffer",
  "comment" : " Android-changed: Made public for CTS tests only.",
  "links" : [ ],
  "variables" : [ {
    "name" : "curChunk",
    "type" : "E[]",
    "comment" : "\n     * Chunk that we're currently writing into; may or may not be aliased with\n     * the first element of the spine.\n     ",
    "links" : [ ]
  }, {
    "name" : "spine",
    "type" : "E[][]",
    "comment" : "\n     * All chunks, or null if there is only one chunk.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPLITERATOR_CHARACTERISTICS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected long capacity()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current capacity of the buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "private void inflateSpine()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void ensureCapacity(long targetSize)",
    "returnType" : "void",
    "comment" : "\n     * Ensure that the buffer has at least capacity to hold the target size\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void increaseCapacity()",
    "returnType" : "void",
    "comment" : "\n     * Force the buffer to increase its capacity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public E get(long index)",
    "returnType" : "E",
    "comment" : "\n     * Retrieve the element at the specified index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyInto(E[] array, int offset)",
    "returnType" : "void",
    "comment" : "\n     * Copy the elements, starting at the specified offset, into the specified\n     * array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public E[] asArray(IntFunction<E[]> arrayFactory)",
    "returnType" : "E[]",
    "comment" : "\n     * Create a new array using the specified array factory, and copy the\n     * elements into it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Consumer<? super E> consumer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void accept(E e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Return a {@link Spliterator} describing the contents of the buffer.\n     ",
    "links" : [ "java.util.Spliterator" ]
  } ],
  "methodNames" : [ "protected long capacity()", "private void inflateSpine()", "protected final void ensureCapacity(long targetSize)", "protected void increaseCapacity()", "public E get(long index)", "public void copyInto(E[] array, int offset)", "public E[] asArray(IntFunction<E[]> arrayFactory)", "public void clear()", "public Iterator<E> iterator()", "public void forEach(Consumer<? super E> consumer)", "public void accept(E e)", "public String toString()", "public Spliterator<E> spliterator()" ],
  "variableNames" : [ "curChunk", "spine", "SPLITERATOR_CHARACTERISTICS" ]
}