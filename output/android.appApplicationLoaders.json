{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/ApplicationLoaders.java",
  "packageName" : "android.app",
  "className" : "ApplicationLoaders",
  "comment" : " @hide ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoaders",
    "type" : "ArrayMap<String, ClassLoader>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gApplicationLoaders",
    "type" : "ApplicationLoaders",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemLibsCacheMap",
    "type" : "Map<String, CachedClassLoader>",
    "comment" : "\n     * This is a map of zip to associated class loader.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ApplicationLoaders getDefault()",
    "returnType" : "ApplicationLoaders",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ClassLoader getClassLoader(String zip, int targetSdkVersion, boolean isBundled, String librarySearchPath, String libraryPermittedPath, ClassLoader parent, String classLoaderName)",
    "returnType" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ClassLoader getClassLoaderWithSharedLibraries(String zip, int targetSdkVersion, boolean isBundled, String librarySearchPath, String libraryPermittedPath, ClassLoader parent, String classLoaderName, List<ClassLoader> sharedLibraries)",
    "returnType" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ClassLoader getSharedLibraryClassLoaderWithSharedLibraries(String zip, int targetSdkVersion, boolean isBundled, String librarySearchPath, String libraryPermittedPath, ClassLoader parent, String classLoaderName, List<ClassLoader> sharedLibraries)",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Gets a class loader for a shared library. Additional dependent shared libraries are allowed\n     * to be specified (sharedLibraries).\n     *\n     * Additionally, as an optimization, this will return a pre-created ClassLoader if one has\n     * been cached by createAndCacheNonBootclasspathSystemClassLoaders.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ClassLoader getClassLoader(String zip, int targetSdkVersion, boolean isBundled, String librarySearchPath, String libraryPermittedPath, ClassLoader parent, String cacheKey, String classLoaderName, List<ClassLoader> sharedLibraries)",
    "returnType" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void createAndCacheNonBootclasspathSystemClassLoaders(SharedLibraryInfo[] libs)",
    "returnType" : "void",
    "comment" : "\n     * Caches system library class loaders which are not on the bootclasspath but are still used\n     * by many system apps.\n     *\n     * All libraries in the closure of libraries to be loaded must be in libs. A library can\n     * only depend on libraries that come before it in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void createAndCacheNonBootclasspathSystemClassLoader(SharedLibraryInfo lib)",
    "returnType" : "void",
    "comment" : "\n     * Caches a single non-bootclasspath class loader.\n     *\n     * All of this library's dependencies must have previously been cached. Otherwise, an exception\n     * is thrown.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean sharedLibrariesEquals(List<ClassLoader> lhs, List<ClassLoader> rhs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ClassLoader getCachedNonBootclasspathSystemLib(String zip, ClassLoader parent, String classLoaderName, List<ClassLoader> sharedLibraries)",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Returns lib cached with createAndCacheNonBootclasspathSystemClassLoader. This is called by\n     * the zygote during caching.\n     *\n     * If there is an error or the cache is not available, this returns null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClassLoader createAndCacheWebViewClassLoader(String packagePath, String libsPath, String cacheKey)",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Creates a classloader for the WebView APK and places it in the cache of loaders maintained\n     * by this class. This is used in the WebView zygote, where its presence in the cache speeds up\n     * startup and enables memory sharing.\n     ",
    "links" : [ ]
  }, {
    "name" : " void addPath(ClassLoader classLoader, String dexPath)",
    "returnType" : "void",
    "comment" : "\n     * Adds a new path the classpath of the given loader.\n     * @throws IllegalStateException if the provided class loader is not a {@link PathClassLoader}.\n     ",
    "links" : [ "PathClassLoader" ]
  }, {
    "name" : " void addNative(ClassLoader classLoader, Collection<String> libPaths)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mLoaders", "gApplicationLoaders", "mSystemLibsCacheMap" ],
  "methodNames" : [ "public static ApplicationLoaders getDefault()", " ClassLoader getClassLoader(String zip, int targetSdkVersion, boolean isBundled, String librarySearchPath, String libraryPermittedPath, ClassLoader parent, String classLoaderName)", " ClassLoader getClassLoaderWithSharedLibraries(String zip, int targetSdkVersion, boolean isBundled, String librarySearchPath, String libraryPermittedPath, ClassLoader parent, String classLoaderName, List<ClassLoader> sharedLibraries)", " ClassLoader getSharedLibraryClassLoaderWithSharedLibraries(String zip, int targetSdkVersion, boolean isBundled, String librarySearchPath, String libraryPermittedPath, ClassLoader parent, String classLoaderName, List<ClassLoader> sharedLibraries)", "private ClassLoader getClassLoader(String zip, int targetSdkVersion, boolean isBundled, String librarySearchPath, String libraryPermittedPath, ClassLoader parent, String cacheKey, String classLoaderName, List<ClassLoader> sharedLibraries)", "public void createAndCacheNonBootclasspathSystemClassLoaders(SharedLibraryInfo[] libs)", "private void createAndCacheNonBootclasspathSystemClassLoader(SharedLibraryInfo lib)", "private static boolean sharedLibrariesEquals(List<ClassLoader> lhs, List<ClassLoader> rhs)", "public ClassLoader getCachedNonBootclasspathSystemLib(String zip, ClassLoader parent, String classLoaderName, List<ClassLoader> sharedLibraries)", "public ClassLoader createAndCacheWebViewClassLoader(String packagePath, String libsPath, String cacheKey)", " void addPath(ClassLoader classLoader, String dexPath)", " void addNative(ClassLoader classLoader, Collection<String> libPaths)" ]
}