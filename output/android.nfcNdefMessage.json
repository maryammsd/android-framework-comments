{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/nfc/NdefMessage.java",
  "packageName" : "android.nfc",
  "className" : "NdefMessage",
  "comment" : "\n * Represents an immutable NDEF Message.\n * <p>\n * NDEF (NFC Data Exchange Format) is a light-weight binary format,\n * used to encapsulate typed data. It is specified by the NFC Forum,\n * for transmission and storage with NFC, however it is transport agnostic.\n * <p>\n * NDEF defines messages and records. An NDEF Record contains\n * typed data, such as MIME-type media, a URI, or a custom\n * application payload. An NDEF Message is a container for\n * one or more NDEF Records.\n * <p>\n * When an Android device receives an NDEF Message\n * (for example by reading an NFC tag) it processes it through\n * a dispatch mechanism to determine an activity to launch.\n * The type of the <em>first</em> record in the message has\n * special importance for message dispatch, so design this record\n * carefully.\n * <p>\n * Use {@link #NdefMessage(byte[])} to construct an NDEF Message from\n * binary data, or {@link #NdefMessage(NdefRecord[])} to\n * construct from one or more {@link NdefRecord}s.\n * <p class=\"note\">\n * {@link NdefMessage} and {@link NdefRecord} implementations are\n * always available, even on Android devices that do not have NFC hardware.\n * <p class=\"note\">\n * {@link NdefRecord}s are intended to be immutable (and thread-safe),\n * however they may contain mutable fields. So take care not to modify\n * mutable fields passed into constructors, or modify mutable fields\n * obtained by getter methods, unless such modification is explicitly\n * marked as safe.\n *\n * @see NfcAdapter#ACTION_NDEF_DISCOVERED\n * @see NdefRecord\n ",
  "variables" : [ {
    "name" : "mRecords",
    "type" : "NdefRecord[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<NdefMessage>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public NdefRecord[] getRecords()",
    "returnType" : "NdefRecord[]",
    "comment" : "\n     * Get the NDEF Records inside this NDEF Message.<p>\n     * An {@link NdefMessage} always has one or more NDEF Records: so the\n     * following code to retrieve the first record is always safe\n     * (no need to check for null or array length >= 1):\n     * <pre>\n     * NdefRecord firstRecord = ndefMessage.getRecords()[0];\n     * </pre>\n     *\n     * @return array of one or more NDEF records.\n     ",
    "links" : [ "NdefMessage" ]
  }, {
    "name" : "public int getByteArrayLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the length of this NDEF Message if it is written to a byte array\n     * with {@link #toByteArray}.<p>\n     * An NDEF Message can be formatted to bytes in different ways\n     * depending on chunking, SR, and ID flags, so the length returned\n     * by this method may not be equal to the length of the original\n     * byte array used to construct this NDEF Message. However it will\n     * always be equal to the length of the byte array produced by\n     * {@link #toByteArray}.\n     *\n     * @return length of this NDEF Message when written to bytes with {@link #toByteArray}\n     * @see #toByteArray\n     ",
    "links" : [ "#toByteArray", "#toByteArray", "#toByteArray" ]
  }, {
    "name" : "public byte[] toByteArray()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return this NDEF Message as raw bytes.<p>\n     * The NDEF Message is formatted as per the NDEF 1.0 specification,\n     * and the byte array is suitable for network transmission or storage\n     * in an NFC Forum NDEF compatible tag.<p>\n     * This method will not chunk any records, and will always use the\n     * short record (SR) format and omit the identifier field when possible.\n     *\n     * @return NDEF Message in binary format\n     * @see #getByteArrayLength()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified NDEF Message contains\n     * identical NDEF Records.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto)",
    "returnType" : "void",
    "comment" : "\n     * Dump debugging information as a NdefMessageProto\n     * @hide\n     *\n     * Note:\n     * See proto definition in frameworks/base/core/proto/android/nfc/ndef.proto\n     * When writing a nested message, must call {@link ProtoOutputStream#start(long)} before and\n     * {@link ProtoOutputStream#end(long)} after.\n     * Never reuse a proto field number. When removing a field, mark it as reserved.\n     ",
    "links" : [ "ProtoOutputStream#start", "ProtoOutputStream#end" ]
  } ],
  "variableNames" : [ "mRecords", "CREATOR" ],
  "methodNames" : [ "public NdefRecord[] getRecords()", "public int getByteArrayLength()", "public byte[] toByteArray()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public int hashCode()", "public boolean equals(Object obj)", "public String toString()", "public void dumpDebug(ProtoOutputStream proto)" ]
}