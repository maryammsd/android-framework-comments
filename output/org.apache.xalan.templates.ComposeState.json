{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/StylesheetRoot.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ComposeState",
  "comment" : "\n     * Class to track state global state during the compose() operation.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_ent",
    "type" : "ExpandedNameTable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_variableNames",
    "type" : "java.util.Vector",
    "comment" : "\n       * A Vector of the current params and QNames within the current template.\n       * Set by ElemTemplate and used by ProcessorVariable.\n       ",
    "links" : [ ]
  }, {
    "name" : "m_marks",
    "type" : "IntStack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_maxStackFrameSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getQNameID(QName qname)",
    "returnType" : "int",
    "comment" : "\n       * Given a qualified name, return an integer ID that can be \n       * quickly compared.\n       *\n       * @param qname a qualified name object, must not be null.\n       *\n       * @return the expanded-name id of the qualified name.\n       ",
    "links" : [ ]
  }, {
    "name" : " int addVariableName(final org.apache.xml.utils.QName qname)",
    "returnType" : "int",
    "comment" : "\n       * Add the name of a qualified name within the template.  The position in \n       * the vector is its ID.\n       * @param qname A qualified name of a param or variable, should be non-null.\n       * @return the index where the variable was added.\n       ",
    "links" : [ ]
  }, {
    "name" : " void resetStackFrameSize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getFrameSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getCurrentStackFrameSize()",
    "returnType" : "int",
    "comment" : "\n       * Get the current size of the stack frame.  Use this to record the position \n       * in a template element at startElement, so that it can be popped \n       * at endElement.\n       ",
    "links" : [ ]
  }, {
    "name" : " void setCurrentStackFrameSize(int sz)",
    "returnType" : "void",
    "comment" : "\n       * Set the current size of the stack frame.\n       ",
    "links" : [ ]
  }, {
    "name" : " int getGlobalsSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void pushStackMark()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void popStackMark()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " java.util.Vector getVariableNames()",
    "returnType" : "java.util.Vector",
    "comment" : "\n       * Get the Vector of the current params and QNames to be collected \n       * within the current template.\n       * @return A reference to the vector of variable names.  The reference \n       * returned is owned by this class, and so should not really be mutated, or \n       * stored anywhere.\n       ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getQNameID(QName qname)", " int addVariableName(final org.apache.xml.utils.QName qname)", " void resetStackFrameSize()", " int getFrameSize()", " int getCurrentStackFrameSize()", " void setCurrentStackFrameSize(int sz)", " int getGlobalsSize()", " void pushStackMark()", " void popStackMark()", " java.util.Vector getVariableNames()" ],
  "variableNames" : [ "m_ent", "m_variableNames", "m_marks", "m_maxStackFrameSize" ]
}