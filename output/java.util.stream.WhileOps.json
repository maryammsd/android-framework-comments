{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/WhileOps.java",
  "packageName" : "java.util.stream",
  "className" : "WhileOps",
  "comment" : "\n * Factory for instances of a takeWhile and dropWhile operations\n * that produce subsequences of their input stream.\n *\n * @since 9\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAKE_FLAGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DROP_FLAGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static Stream<T> makeTakeWhileRef(AbstractPipeline<?, T, ?> upstream, Predicate<? super T> predicate)",
    "returnType" : "Stream<T>",
    "comment" : "\n     * Appends a \"takeWhile\" operation to the provided Stream.\n     *\n     * @param <T> the type of both input and output elements\n     * @param upstream a reference stream with element type T\n     * @param predicate the predicate that returns false to halt taking.\n     ",
    "links" : [ ]
  }, {
    "name" : " static IntStream makeTakeWhileInt(AbstractPipeline<?, Integer, ?> upstream, IntPredicate predicate)",
    "returnType" : "IntStream",
    "comment" : "\n     * Appends a \"takeWhile\" operation to the provided IntStream.\n     *\n     * @param upstream a reference stream with element type T\n     * @param predicate the predicate that returns false to halt taking.\n     ",
    "links" : [ ]
  }, {
    "name" : " static LongStream makeTakeWhileLong(AbstractPipeline<?, Long, ?> upstream, LongPredicate predicate)",
    "returnType" : "LongStream",
    "comment" : "\n     * Appends a \"takeWhile\" operation to the provided LongStream.\n     *\n     * @param upstream a reference stream with element type T\n     * @param predicate the predicate that returns false to halt taking.\n     ",
    "links" : [ ]
  }, {
    "name" : " static DoubleStream makeTakeWhileDouble(AbstractPipeline<?, Double, ?> upstream, DoublePredicate predicate)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Appends a \"takeWhile\" operation to the provided DoubleStream.\n     *\n     * @param upstream a reference stream with element type T\n     * @param predicate the predicate that returns false to halt taking.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Stream<T> makeDropWhileRef(AbstractPipeline<?, T, ?> upstream, Predicate<? super T> predicate)",
    "returnType" : "Stream<T>",
    "comment" : "\n     * Appends a \"dropWhile\" operation to the provided Stream.\n     *\n     * @param <T> the type of both input and output elements\n     * @param upstream a reference stream with element type T\n     * @param predicate the predicate that returns false to halt dropping.\n     ",
    "links" : [ ]
  }, {
    "name" : " static IntStream makeDropWhileInt(AbstractPipeline<?, Integer, ?> upstream, IntPredicate predicate)",
    "returnType" : "IntStream",
    "comment" : "\n     * Appends a \"dropWhile\" operation to the provided IntStream.\n     *\n     * @param upstream a reference stream with element type T\n     * @param predicate the predicate that returns false to halt dropping.\n     ",
    "links" : [ ]
  }, {
    "name" : " static LongStream makeDropWhileLong(AbstractPipeline<?, Long, ?> upstream, LongPredicate predicate)",
    "returnType" : "LongStream",
    "comment" : "\n     * Appends a \"dropWhile\" operation to the provided LongStream.\n     *\n     * @param upstream a reference stream with element type T\n     * @param predicate the predicate that returns false to halt dropping.\n     ",
    "links" : [ ]
  }, {
    "name" : " static DoubleStream makeDropWhileDouble(AbstractPipeline<?, Double, ?> upstream, DoublePredicate predicate)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Appends a \"dropWhile\" operation to the provided DoubleStream.\n     *\n     * @param upstream a reference stream with element type T\n     * @param predicate the predicate that returns false to halt dropping.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static Stream<T> makeTakeWhileRef(AbstractPipeline<?, T, ?> upstream, Predicate<? super T> predicate)", " static IntStream makeTakeWhileInt(AbstractPipeline<?, Integer, ?> upstream, IntPredicate predicate)", " static LongStream makeTakeWhileLong(AbstractPipeline<?, Long, ?> upstream, LongPredicate predicate)", " static DoubleStream makeTakeWhileDouble(AbstractPipeline<?, Double, ?> upstream, DoublePredicate predicate)", " static Stream<T> makeDropWhileRef(AbstractPipeline<?, T, ?> upstream, Predicate<? super T> predicate)", " static IntStream makeDropWhileInt(AbstractPipeline<?, Integer, ?> upstream, IntPredicate predicate)", " static LongStream makeDropWhileLong(AbstractPipeline<?, Long, ?> upstream, LongPredicate predicate)", " static DoubleStream makeDropWhileDouble(AbstractPipeline<?, Double, ?> upstream, DoublePredicate predicate)" ],
  "variableNames" : [ "TAKE_FLAGS", "DROP_FLAGS" ]
}