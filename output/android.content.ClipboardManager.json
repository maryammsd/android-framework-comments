{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/ClipboardManager.java",
  "packageName" : "android.content",
  "className" : "ClipboardManager",
  "comment" : "\n * Interface to the clipboard service, for placing and retrieving text in\n * the global clipboard.\n *\n * <p>\n * The ClipboardManager API itself is very simple: it consists of methods\n * to atomically get and set the current primary clipboard data.  That data\n * is expressed as a {@link ClipData} object, which defines the protocol\n * for data exchange between applications.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using the clipboard framework, read the\n * <a href=\"{@docRoot}guide/topics/clipboard/copy-paste.html\">Copy and Paste</a>\n * developer guide.</p>\n * </div>\n ",
  "links" : [ "android.content.ClipData" ],
  "variables" : [ {
    "name" : "DEVICE_CONFIG_SHOW_ACCESS_NOTIFICATIONS",
    "type" : "String",
    "comment" : "\n     * DeviceConfig property, within the clipboard namespace, that determines whether notifications\n     * are shown when an app accesses clipboard. This may be overridden by a user-controlled\n     * setting.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_DEFAULT_SHOW_ACCESS_NOTIFICATIONS",
    "type" : "boolean",
    "comment" : "\n     * Default value for the DeviceConfig property that determines whether notifications are shown\n     * when an app accesses clipboard.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_ALLOW_VIRTUALDEVICE_SILOS",
    "type" : "String",
    "comment" : "\n     * DeviceConfig property, within the clipboard namespace, that determines whether VirtualDevices\n     * are allowed to have siloed Clipboards for the apps running on them. If false, then clipboard\n     * access is blocked entirely for apps running on VirtualDevices.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_DEFAULT_ALLOW_VIRTUALDEVICE_SILOS",
    "type" : "boolean",
    "comment" : "\n     * Default value for the DEVICE_CONFIG_ALLOW_VIRTUALDEVICE_SILOS property.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IClipboard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimaryClipChangedListeners",
    "type" : "ArrayList<OnPrimaryClipChangedListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimaryClipChangedServiceListener",
    "type" : "IOnPrimaryClipChangedListener.Stub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean areClipboardAccessNotificationsEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if the Clipboard Access Notifications are enabled\n     *\n     * @return true if notifications are enabled, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClipboardAccessNotificationsEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     *\n     * Set the enable state of the Clipboard Access Notifications\n     * @param enable Whether to enable notifications\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPrimaryClip(@NonNull ClipData clip)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current primary clip on the clipboard.  This is the clip that\n     * is involved in normal cut and paste operations.\n     *\n     * @param clip The clipped data item to set.\n     * @see #getPrimaryClip()\n     * @see #clearPrimaryClip()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPrimaryClipAsPackage(@NonNull ClipData clip, @NonNull String sourcePackage)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current primary clip on the clipboard, attributed to the specified {@code\n     * sourcePackage}. The primary clip is the clip that is involved in normal cut and paste\n     * operations.\n     *\n     * @param clip The clipped data item to set.\n     * @param sourcePackage The package name of the app that is the source of the clip data.\n     * @throws IllegalArgumentException if the clip is null or contains no items.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearPrimaryClip()",
    "returnType" : "void",
    "comment" : "\n     * Clears any current primary clip on the clipboard.\n     *\n     * @see #setPrimaryClip(ClipData)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClipData getPrimaryClip()",
    "returnType" : "ClipData",
    "comment" : "\n     * Returns the current primary clip on the clipboard.\n     *\n     * <em>If the application is not the default IME or does not have input focus this return\n     * {@code null}.</em>\n     *\n     * @see #setPrimaryClip(ClipData)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClipDescription getPrimaryClipDescription()",
    "returnType" : "ClipDescription",
    "comment" : "\n     * Returns a description of the current primary clip on the clipboard but not a copy of its\n     * data.\n     *\n     * <p><em>If the application is not the default IME or does not have input focus this return\n     * {@code null}.</em>\n     *\n     * @see #setPrimaryClip(ClipData)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPrimaryClip()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there is currently a primary clip on the clipboard.\n     *\n     * <em>If the application is not the default IME or the does not have input focus this will\n     * return {@code false}.</em>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addPrimaryClipChangedListener(OnPrimaryClipChangedListener what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removePrimaryClipChangedListener(OnPrimaryClipChangedListener what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @deprecated Use {@link #getPrimaryClip()} instead.  This retrieves\n     * the primary clip and tries to coerce it to a string.\n     ",
    "links" : [ "#getPrimaryClip()" ]
  }, {
    "name" : "public void setText(CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link #setPrimaryClip(ClipData)} instead.  This\n     * creates a ClippedItem holding the given text and sets it as the\n     * primary clip.  It has no label or icon.\n     ",
    "links" : [ "#setPrimaryClip(ClipData)" ]
  }, {
    "name" : "public boolean hasText()",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #hasPrimaryClip()} instead.\n     ",
    "links" : [ "#hasPrimaryClip()" ]
  }, {
    "name" : "public String getPrimaryClipSource()",
    "returnType" : "String",
    "comment" : "\n     * Returns the package name of the source of the current primary clip, or null if there is no\n     * primary clip or if a source is not available.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void reportPrimaryClipChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean areClipboardAccessNotificationsEnabled()", "public void setClipboardAccessNotificationsEnabled(boolean enable)", "public void setPrimaryClip(@NonNull ClipData clip)", "public void setPrimaryClipAsPackage(@NonNull ClipData clip, @NonNull String sourcePackage)", "public void clearPrimaryClip()", "public ClipData getPrimaryClip()", "public ClipDescription getPrimaryClipDescription()", "public boolean hasPrimaryClip()", "public void addPrimaryClipChangedListener(OnPrimaryClipChangedListener what)", "public void removePrimaryClipChangedListener(OnPrimaryClipChangedListener what)", "public CharSequence getText()", "public void setText(CharSequence text)", "public boolean hasText()", "public String getPrimaryClipSource()", " void reportPrimaryClipChanged()" ],
  "variableNames" : [ "DEVICE_CONFIG_SHOW_ACCESS_NOTIFICATIONS", "DEVICE_CONFIG_DEFAULT_SHOW_ACCESS_NOTIFICATIONS", "DEVICE_CONFIG_ALLOW_VIRTUALDEVICE_SILOS", "DEVICE_CONFIG_DEFAULT_ALLOW_VIRTUALDEVICE_SILOS", "mContext", "mHandler", "mService", "mPrimaryClipChangedListeners", "mPrimaryClipChangedServiceListener" ]
}