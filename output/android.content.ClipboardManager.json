{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/ClipboardManager.java",
  "packageName" : "android.content",
  "className" : "ClipboardManager",
  "comment" : "",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void setPrimaryClip(@NonNull ClipData clip)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current primary clip on the clipboard.  This is the clip that\n     * is involved in normal cut and paste operations.\n     *\n     * @param clip The clipped data item to set.\n     * @see #getPrimaryClip()\n     * @see #clearPrimaryClip()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearPrimaryClip()",
    "returnType" : "void",
    "comment" : "\n     * Clears any current primary clip on the clipboard.\n     *\n     * @see #setPrimaryClip(ClipData)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClipData getPrimaryClip()",
    "returnType" : "ClipData",
    "comment" : "\n     * Returns the current primary clip on the clipboard.\n     *\n     * <em>If the application is not the default IME or does not have input focus this return\n     * {@code null}.</em>\n     *\n     * @see #setPrimaryClip(ClipData)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClipDescription getPrimaryClipDescription()",
    "returnType" : "ClipDescription",
    "comment" : "\n     * Returns a description of the current primary clip on the clipboard\n     * but not a copy of its data.\n     *\n     * <em>If the application is not the default IME or does not have input focus this return\n     * {@code null}.</em>\n     *\n     * @see #setPrimaryClip(ClipData)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPrimaryClip()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there is currently a primary clip on the clipboard.\n     *\n     * <em>If the application is not the default IME or the does not have input focus this will\n     * return {@code false}.</em>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addPrimaryClipChangedListener(OnPrimaryClipChangedListener what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removePrimaryClipChangedListener(OnPrimaryClipChangedListener what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @deprecated Use {@link #getPrimaryClip()} instead.  This retrieves\n     * the primary clip and tries to coerce it to a string.\n     ",
    "links" : [ "#getPrimaryClip()" ]
  }, {
    "name" : "public void setText(CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link #setPrimaryClip(ClipData)} instead.  This\n     * creates a ClippedItem holding the given text and sets it as the\n     * primary clip.  It has no label or icon.\n     ",
    "links" : [ "#setPrimaryClip(ClipData)" ]
  }, {
    "name" : "public boolean hasText()",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #hasPrimaryClip()} instead.\n     ",
    "links" : [ "#hasPrimaryClip()" ]
  }, {
    "name" : " void reportPrimaryClipChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public void setPrimaryClip(@NonNull ClipData clip)", "public void clearPrimaryClip()", "public ClipData getPrimaryClip()", "public ClipDescription getPrimaryClipDescription()", "public boolean hasPrimaryClip()", "public void addPrimaryClipChangedListener(OnPrimaryClipChangedListener what)", "public void removePrimaryClipChangedListener(OnPrimaryClipChangedListener what)", "public CharSequence getText()", "public void setText(CharSequence text)", "public boolean hasText()", " void reportPrimaryClipChanged()" ]
}