{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/PatternMatcher.java",
  "packageName" : "android.os",
  "className" : "PatternMatcher",
  "comment" : "\n * A simple pattern matcher, which is safe to use on untrusted data: it does\n * not provide full reg-exp support, only simple globbing that can not be\n * used maliciously.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PATTERN_LITERAL",
    "type" : "int",
    "comment" : "\n     * Pattern type: the given pattern must exactly match the string it is\n     * tested against.\n     ",
    "links" : [ ]
  }, {
    "name" : "PATTERN_PREFIX",
    "type" : "int",
    "comment" : "\n     * Pattern type: the given pattern must match the\n     * beginning of the string it is tested against.\n     ",
    "links" : [ ]
  }, {
    "name" : "PATTERN_SIMPLE_GLOB",
    "type" : "int",
    "comment" : "\n     * Pattern type: the given pattern is interpreted with a\n     * simple glob syntax for matching against the string it is tested against.\n     * In this syntax, you can use the '*' character to match against zero or\n     * more occurrences of the character immediately before.  If the\n     * character before it is '.' it will match any character.  The character\n     * '\\' can be used as an escape.  This essentially provides only the '*'\n     * wildcard part of a normal regexp. \n     ",
    "links" : [ ]
  }, {
    "name" : "PATTERN_ADVANCED_GLOB",
    "type" : "int",
    "comment" : "\n     * Pattern type: the given pattern is interpreted with a regular\n     * expression-like syntax for matching against the string it is tested\n     * against. Supported tokens include dot ({@code .}) and sets ({@code [...]})\n     * with full support for character ranges and the not ({@code ^}) modifier.\n     * Supported modifiers include star ({@code *}) for zero-or-more, plus ({@code +})\n     * for one-or-more and full range ({@code {...}}) support. This is a simple\n     * evaluation implementation in which matching is done against the pattern in\n     * real time with no backtracking support.\n     ",
    "links" : [ ]
  }, {
    "name" : "PATTERN_SUFFIX",
    "type" : "int",
    "comment" : "\n     * Pattern type: the given pattern must match the\n     * end of the string it is tested against.\n     ",
    "links" : [ ]
  }, {
    "name" : "TOKEN_TYPE_LITERAL",
    "type" : "int",
    "comment" : " token types for advanced matching",
    "links" : [ ]
  }, {
    "name" : "TOKEN_TYPE_ANY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOKEN_TYPE_SET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOKEN_TYPE_INVERSE_SET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_MATCH",
    "type" : "int",
    "comment" : " Return for no match",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSED_TOKEN_CHAR_SET_START",
    "type" : "int",
    "comment" : " Parsed placeholders for advanced patterns",
    "links" : [ ]
  }, {
    "name" : "PARSED_TOKEN_CHAR_SET_INVERSE_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSED_TOKEN_CHAR_SET_STOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSED_TOKEN_CHAR_ANY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSED_MODIFIER_RANGE_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSED_MODIFIER_RANGE_STOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSED_MODIFIER_ZERO_OR_MORE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSED_MODIFIER_ONE_OR_MORE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParsedPattern",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_PATTERN_STORAGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sParsedPatternScratch",
    "type" : "int[]",
    "comment" : " workspace to use for building a parsed advanced pattern;",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<PatternMatcher>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getPath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean match(String str)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean check()",
    "returnType" : "boolean",
    "comment" : "\n     * Perform a check on the matcher for the pattern type of {@link #PATTERN_ADVANCED_GLOB}.\n     * Return true if it passed.\n     * @hide\n     ",
    "links" : [ "#PATTERN_ADVANCED_GLOB" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean matchPattern(String match, String pattern, int[] parsedPattern, int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean matchGlobPattern(String pattern, String match)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static synchronized int[] parseAndVerifyAdvancedPattern(String pattern)",
    "returnType" : "int[]",
    "comment" : "\n     * Parses the advanced pattern and returns an integer array representation of it. The integer\n     * array treats each field as a character if positive and a unique token placeholder if\n     * negative. This method will throw on any pattern structure violations.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isParsedModifier(int parsedChar)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean matchAdvancedPattern(int[] parsedPattern, String match)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int matchChars(String match, int im, final int lm, int tokenType, int minRepetition, int maxRepetition, int[] parsedPattern, int tokenStart, int tokenEnd)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean matchChar(String match, int im, final int lm, int tokenType, int[] parsedPattern, int tokenStart, int tokenEnd)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String getPath()", "public final int getType()", "public boolean match(String str)", "public String toString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public boolean check()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", " static boolean matchPattern(String match, String pattern, int[] parsedPattern, int type)", " static boolean matchGlobPattern(String pattern, String match)", " static synchronized int[] parseAndVerifyAdvancedPattern(String pattern)", "private static boolean isParsedModifier(int parsedChar)", " static boolean matchAdvancedPattern(int[] parsedPattern, String match)", "private static int matchChars(String match, int im, final int lm, int tokenType, int minRepetition, int maxRepetition, int[] parsedPattern, int tokenStart, int tokenEnd)", "private static boolean matchChar(String match, int im, final int lm, int tokenType, int[] parsedPattern, int tokenStart, int tokenEnd)" ],
  "variableNames" : [ "PATTERN_LITERAL", "PATTERN_PREFIX", "PATTERN_SIMPLE_GLOB", "PATTERN_ADVANCED_GLOB", "PATTERN_SUFFIX", "TOKEN_TYPE_LITERAL", "TOKEN_TYPE_ANY", "TOKEN_TYPE_SET", "TOKEN_TYPE_INVERSE_SET", "NO_MATCH", "TAG", "PARSED_TOKEN_CHAR_SET_START", "PARSED_TOKEN_CHAR_SET_INVERSE_START", "PARSED_TOKEN_CHAR_SET_STOP", "PARSED_TOKEN_CHAR_ANY", "PARSED_MODIFIER_RANGE_START", "PARSED_MODIFIER_RANGE_STOP", "PARSED_MODIFIER_ZERO_OR_MORE", "PARSED_MODIFIER_ONE_OR_MORE", "mPattern", "mType", "mParsedPattern", "MAX_PATTERN_STORAGE", "sParsedPatternScratch", "CREATOR" ]
}