{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Random.java",
  "packageName" : "java.util",
  "className" : "Random",
  "comment" : "\n * An instance of this class is used to generate a stream of\n * pseudorandom numbers; its period is only 2<sup>48</sup>.\n * The class uses a 48-bit seed, which is\n * modified using a linear congruential formula. (See Donald E. Knuth,\n * <cite>The Art of Computer Programming, Volume 2, Third\n * edition: Seminumerical Algorithms</cite>, Section 3.2.1.)\n * <p>\n * If two instances of {@code Random} are created with the same\n * seed, and the same sequence of method calls is made for each, they\n * will generate and return identical sequences of numbers. In order to\n * guarantee this property, particular algorithms are specified for the\n * class {@code Random}. Java implementations must use all the algorithms\n * shown here for the class {@code Random}, for the sake of absolute\n * portability of Java code. However, subclasses of class {@code Random}\n * are permitted to use other algorithms, so long as they adhere to the\n * general contracts for all the methods.\n * <p>\n * The algorithms implemented by class {@code Random} use a\n * {@code protected} utility method that on each invocation can supply\n * up to 32 pseudorandomly generated bits.\n * <p>\n * Many applications will find the method {@link Math#random} simpler to use.\n *\n * <p>Instances of {@code java.util.Random} are threadsafe.\n * However, the concurrent use of the same {@code java.util.Random}\n * instance across threads may encounter contention and consequent\n * poor performance. Consider instead using\n * {@link java.util.concurrent.ThreadLocalRandom} in multithreaded\n * designs.\n *\n * <p>Instances of {@code java.util.Random} are not cryptographically\n * secure.  Consider instead using {@link java.security.SecureRandom} to\n * get a cryptographically secure pseudo-random number generator for use\n * by security-sensitive applications.\n *\n * @author  Frank Yellin\n * @since   1.0\n ",
  "links" : [ "java.security.SecureRandom", "java.util.concurrent.ThreadLocalRandom", "#random" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.1 for interoperability ",
    "links" : [ ]
  }, {
    "name" : "seed",
    "type" : "AtomicLong",
    "comment" : "\n     * The internal state associated with this pseudorandom number generator.\n     * (The specs for the methods in this class describe the ongoing\n     * computation of this value.)\n     ",
    "links" : [ ]
  }, {
    "name" : "multiplier",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "addend",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mask",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOUBLE_UNIT",
    "type" : "double",
    "comment" : " 1.0 / (1L << 53)",
    "links" : [ ]
  }, {
    "name" : "STREAM_INT_DIFFERS_FROM_NEXT_INT",
    "type" : "long",
    "comment" : "\n     * After https://bugs.openjdk.org/browse/JDK-8301574 ints()\n     * and long() methods generate different sequence of number\n     * than nextInt() and nextLong() calls would.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "seedUniquifier",
    "type" : "AtomicLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nextNextGaussian",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "haveNextNextGaussian",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : "\n     * Serializable fields for Random.\n     *\n     * @serialField    seed long\n     *              seed for random computations\n     * @serialField    nextNextGaussian double\n     *              next Gaussian to be returned\n     * @serialField      haveNextNextGaussian boolean\n     *              nextNextGaussian is valid\n     ",
    "links" : [ ]
  }, {
    "name" : "unsafe",
    "type" : "Unsafe",
    "comment" : " Support for resetting seed while deserializing",
    "links" : [ ]
  }, {
    "name" : "seedOffset",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static long seedUniquifier()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long initialScramble(long seed)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setSeed(long seed)",
    "returnType" : "void",
    "comment" : "\n     * Sets the seed of this random number generator using a single\n     * {@code long} seed. The general contract of {@code setSeed} is\n     * that it alters the state of this random number generator object\n     * so as to be in exactly the same state as if it had just been\n     * created with the argument {@code seed} as a seed. The method\n     * {@code setSeed} is implemented by class {@code Random} by\n     * atomically updating the seed to\n     *  <pre>{@code (seed ^ 0x5DEECE66DL) & ((1L << 48) - 1)}</pre>\n     * and clearing the {@code haveNextNextGaussian} flag used by {@link\n     * #nextGaussian}.\n     *\n     * <p>The implementation of {@code setSeed} by class {@code Random}\n     * happens to use only 48 bits of the given seed. In general, however,\n     * an overriding method may use all 64 bits of the {@code long}\n     * argument as a seed value.\n     *\n     * @param seed the initial seed\n     ",
    "links" : [ "#nextGaussian" ]
  }, {
    "name" : "protected int next(int bits)",
    "returnType" : "int",
    "comment" : "\n     * Generates the next pseudorandom number. Subclasses should\n     * override this, as this is used by all other methods.\n     *\n     * <p>The general contract of {@code next} is that it returns an\n     * {@code int} value and if the argument {@code bits} is between\n     * {@code 1} and {@code 32} (inclusive), then that many low-order\n     * bits of the returned value will be (approximately) independently\n     * chosen bit values, each of which is (approximately) equally\n     * likely to be {@code 0} or {@code 1}. The method {@code next} is\n     * implemented by class {@code Random} by atomically updating the seed to\n     *  <pre>{@code (seed * 0x5DEECE66DL + 0xBL) & ((1L << 48) - 1)}</pre>\n     * and returning\n     *  <pre>{@code (int)(seed >>> (48 - bits))}.</pre>\n     *\n     * This is a linear congruential pseudorandom number generator, as\n     * defined by D. H. Lehmer and described by Donald E. Knuth in\n     * <cite>The Art of Computer Programming, Volume 2, Third edition:\n     * Seminumerical Algorithms</cite>, section 3.2.1.\n     *\n     * @param  bits random bits\n     * @return the next pseudorandom value from this random number\n     *         generator's sequence\n     * @since  1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public void nextBytes(byte[] bytes)",
    "returnType" : "void",
    "comment" : "\n     * Generates random bytes and places them into a user-supplied\n     * byte array.  The number of random bytes produced is equal to\n     * the length of the byte array.\n     *\n     * @implSpec The method {@code nextBytes} is\n     * implemented by class {@code Random} as if by:\n     * <pre>{@code\n     * public void nextBytes(byte[] bytes) {\n     *   for (int i = 0; i < bytes.length; )\n     *     for (int rnd = nextInt(), n = Math.min(bytes.length - i, 4);\n     *          n-- > 0; rnd >>= 8)\n     *       bytes[i++] = (byte)rnd;\n     * }}</pre>\n     *\n     * @param  bytes the byte array to fill with random bytes\n     * @throws NullPointerException if the byte array is null\n     * @since  1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public int nextInt()",
    "returnType" : "int",
    "comment" : "\n     * Returns the next pseudorandom, uniformly distributed {@code int}\n     * value from this random number generator's sequence. The general\n     * contract of {@code nextInt} is that one {@code int} value is\n     * pseudorandomly generated and returned. All 2<sup>32</sup> possible\n     * {@code int} values are produced with (approximately) equal probability.\n     *\n     * @implSpec The method {@code nextInt} is\n     * implemented by class {@code Random} as if by:\n     * <pre>{@code\n     * public int nextInt() {\n     *   return next(32);\n     * }}</pre>\n     *\n     * @return the next pseudorandom, uniformly distributed {@code int}\n     *         value from this random number generator's sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public int nextInt(int bound)",
    "returnType" : "int",
    "comment" : "\n     * Returns a pseudorandom, uniformly distributed {@code int} value\n     * between 0 (inclusive) and the specified value (exclusive), drawn from\n     * this random number generator's sequence.  The general contract of\n     * {@code nextInt} is that one {@code int} value in the specified range\n     * is pseudorandomly generated and returned.  All {@code bound} possible\n     * {@code int} values are produced with (approximately) equal\n     * probability.\n     *\n     * @implSpec The method {@code nextInt(int bound)} is implemented by\n     * class {@code Random} as if by:\n     * <pre>{@code\n     * public int nextInt(int bound) {\n     *   if (bound <= 0)\n     *     throw new IllegalArgumentException(\"bound must be positive\");\n     *\n     *   if ((bound & -bound) == bound)  // i.e., bound is a power of 2\n     *     return (int)((bound * (long)next(31)) >> 31);\n     *\n     *   int bits, val;\n     *   do {\n     *       bits = next(31);\n     *       val = bits % bound;\n     *   } while (bits - val + (bound-1) < 0);\n     *   return val;\n     * }}</pre>\n     *\n     * <p>The hedge \"approximately\" is used in the foregoing description only\n     * because the next method is only approximately an unbiased source of\n     * independently chosen bits.  If it were a perfect source of randomly\n     * chosen bits, then the algorithm shown would choose {@code int}\n     * values from the stated range with perfect uniformity.\n     * <p>\n     * The algorithm is slightly tricky.  It rejects values that would result\n     * in an uneven distribution (due to the fact that 2^31 is not divisible\n     * by n). The probability of a value being rejected depends on n.  The\n     * worst case is n=2^30+1, for which the probability of a reject is 1/2,\n     * and the expected number of iterations before the loop terminates is 2.\n     * <p>\n     * The algorithm treats the case where n is a power of two specially: it\n     * returns the correct number of high-order bits from the underlying\n     * pseudo-random number generator.  In the absence of special treatment,\n     * the correct number of <i>low-order</i> bits would be returned.  Linear\n     * congruential pseudo-random number generators such as the one\n     * implemented by this class are known to have short periods in the\n     * sequence of values of their low-order bits.  Thus, this special case\n     * greatly increases the length of the sequence of values returned by\n     * successive calls to this method if n is a small power of two.\n     *\n     * @param bound the upper bound (exclusive).  Must be positive.\n     * @return the next pseudorandom, uniformly distributed {@code int}\n     *         value between zero (inclusive) and {@code bound} (exclusive)\n     *         from this random number generator's sequence\n     * @throws IllegalArgumentException if bound is not positive\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public long nextLong()",
    "returnType" : "long",
    "comment" : "\n     * Returns the next pseudorandom, uniformly distributed {@code long}\n     * value from this random number generator's sequence. The general\n     * contract of {@code nextLong} is that one {@code long} value is\n     * pseudorandomly generated and returned.\n     *\n     * @implSpec The method {@code nextLong} is implemented by class {@code Random}\n     * as if by:\n     * <pre>{@code\n     * public long nextLong() {\n     *   return ((long)next(32) << 32) + next(32);\n     * }}</pre>\n     *\n     * Because class {@code Random} uses a seed with only 48 bits,\n     * this algorithm will not return all possible {@code long} values.\n     *\n     * @return the next pseudorandom, uniformly distributed {@code long}\n     *         value from this random number generator's sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean nextBoolean()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the next pseudorandom, uniformly distributed\n     * {@code boolean} value from this random number generator's\n     * sequence. The general contract of {@code nextBoolean} is that one\n     * {@code boolean} value is pseudorandomly generated and returned.  The\n     * values {@code true} and {@code false} are produced with\n     * (approximately) equal probability.\n     *\n     * @implSpec The method {@code nextBoolean} is implemented by class\n     * {@code Random} as if by:\n     * <pre>{@code\n     * public boolean nextBoolean() {\n     *   return next(1) != 0;\n     * }}</pre>\n     *\n     * @return the next pseudorandom, uniformly distributed\n     *         {@code boolean} value from this random number generator's\n     *         sequence\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public float nextFloat()",
    "returnType" : "float",
    "comment" : "\n     * Returns the next pseudorandom, uniformly distributed {@code float}\n     * value between {@code 0.0} and {@code 1.0} from this random\n     * number generator's sequence.\n     *\n     * <p>The general contract of {@code nextFloat} is that one\n     * {@code float} value, chosen (approximately) uniformly from the\n     * range {@code 0.0f} (inclusive) to {@code 1.0f} (exclusive), is\n     * pseudorandomly generated and returned. All 2<sup>24</sup> possible\n     * {@code float} values of the form <i>m&nbsp;x&nbsp;</i>2<sup>-24</sup>,\n     * where <i>m</i> is a positive integer less than 2<sup>24</sup>, are\n     * produced with (approximately) equal probability.\n     *\n     * @implSpec The method {@code nextFloat} is implemented by class\n     * {@code Random} as if by:\n     * <pre>{@code\n     * public float nextFloat() {\n     *   return next(24) / ((float)(1 << 24));\n     * }}</pre>\n     * <p>The hedge \"approximately\" is used in the foregoing description only\n     * because the next method is only approximately an unbiased source of\n     * independently chosen bits. If it were a perfect source of randomly\n     * chosen bits, then the algorithm shown would choose {@code float}\n     * values from the stated range with perfect uniformity.<p>\n     * [In early versions of Java, the result was incorrectly calculated as:\n     *  <pre> {@code return next(30) / ((float)(1 << 30));}</pre>\n     * This might seem to be equivalent, if not better, but in fact it\n     * introduced a slight nonuniformity because of the bias in the rounding\n     * of floating-point numbers: it was slightly more likely that the\n     * low-order bit of the significand would be 0 than that it would be 1.]\n     *\n     * @return the next pseudorandom, uniformly distributed {@code float}\n     *         value between {@code 0.0} and {@code 1.0} from this\n     *         random number generator's sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public double nextDouble()",
    "returnType" : "double",
    "comment" : "\n     * Returns the next pseudorandom, uniformly distributed\n     * {@code double} value between {@code 0.0} and\n     * {@code 1.0} from this random number generator's sequence.\n     *\n     * <p>The general contract of {@code nextDouble} is that one\n     * {@code double} value, chosen (approximately) uniformly from the\n     * range {@code 0.0d} (inclusive) to {@code 1.0d} (exclusive), is\n     * pseudorandomly generated and returned.\n     *\n     * @implSpec The method {@code nextDouble} is implemented by class\n     * {@code Random} as if by:\n     * <pre>{@code\n     * public double nextDouble() {\n     *   return (((long)next(26) << 27) + next(27))\n     *     / (double)(1L << 53);\n     * }}</pre>\n     * <p>The hedge \"approximately\" is used in the foregoing description only\n     * because the {@code next} method is only approximately an unbiased source\n     * of independently chosen bits. If it were a perfect source of randomly\n     * chosen bits, then the algorithm shown would choose {@code double} values\n     * from the stated range with perfect uniformity.\n     * <p>[In early versions of Java, the result was incorrectly calculated as:\n     * <pre> {@code return (((long)next(27) << 27) + next(27)) / (double)(1L << 54);}</pre>\n     * This might seem to be equivalent, if not better, but in fact it\n     * introduced a large nonuniformity because of the bias in the rounding of\n     * floating-point numbers: it was three times as likely that the low-order\n     * bit of the significand would be 0 than that it would be 1! This\n     * nonuniformity probably doesn't matter much in practice, but we strive\n     * for perfection.]\n     *\n     * @return the next pseudorandom, uniformly distributed {@code double}\n     *         value between {@code 0.0} and {@code 1.0} from this\n     *         random number generator's sequence\n     * @see Math#random\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized double nextGaussian()",
    "returnType" : "double",
    "comment" : "\n     * Returns the next pseudorandom, Gaussian (\"normally\") distributed\n     * {@code double} value with mean {@code 0.0} and standard\n     * deviation {@code 1.0} from this random number generator's sequence.\n     * <p>\n     * The general contract of {@code nextGaussian} is that one\n     * {@code double} value, chosen from (approximately) the usual\n     * normal distribution with mean {@code 0.0} and standard deviation\n     * {@code 1.0}, is pseudorandomly generated and returned.\n     *\n     * @implSpec The method {@code nextGaussian} is implemented by class\n     * {@code Random} as if by a threadsafe version of the following:\n     * <pre>{@code\n     * private double nextNextGaussian;\n     * private boolean haveNextNextGaussian = false;\n     *\n     * public double nextGaussian() {\n     *   if (haveNextNextGaussian) {\n     *     haveNextNextGaussian = false;\n     *     return nextNextGaussian;\n     *   } else {\n     *     double v1, v2, s;\n     *     do {\n     *       v1 = 2 * nextDouble() - 1;   // between -1.0 and 1.0\n     *       v2 = 2 * nextDouble() - 1;   // between -1.0 and 1.0\n     *       s = v1 * v1 + v2 * v2;\n     *     } while (s >= 1 || s == 0);\n     *     double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);\n     *     nextNextGaussian = v2 * multiplier;\n     *     haveNextNextGaussian = true;\n     *     return v1 * multiplier;\n     *   }\n     * }}</pre>\n     *\n     * This uses the <i>polar method</i> of G. E. P. Box, M. E. Muller, and\n     * G. Marsaglia, as described by Donald E. Knuth in <cite>The Art of\n     * Computer Programming, Volume 2, third edition: Seminumerical Algorithms</cite>,\n     * section 3.4.1, subsection C, algorithm P. Note that it generates two\n     * independent values at the cost of only one call to {@code StrictMath.log}\n     * and one call to {@code StrictMath.sqrt}.\n     *\n     * @return the next pseudorandom, Gaussian (\"normally\") distributed\n     *         {@code double} value with mean {@code 0.0} and\n     *         standard deviation {@code 1.0} from this random number\n     *         generator's sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitute the {@code Random} instance from a stream (that is,\n     * deserialize it).\n     *\n     * @param  s the {@code ObjectInputStream} from which data is read\n     *\n     * @throws IOException if an I/O error occurs\n     * @throws ClassNotFoundException if a serialized class cannot be loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void writeObject(ObjectOutputStream s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Save the {@code Random} instance to a stream.\n     *\n     * @param  s the {@code ObjectOutputStream} to which data is written\n     *\n     * @throws IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetSeed(long seedVal)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints(long streamSize)",
    "returnType" : "IntStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number of\n     * pseudorandom {@code int} values.\n     *\n     * <p>A pseudorandom {@code int} value is generated as if it's the result of\n     * calling the method {@link #nextInt()}.\n     *\n     * @param streamSize the number of values to generate\n     * @return a stream of pseudorandom {@code int} values\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero\n     * @since 1.8\n     ",
    "links" : [ "#nextInt()" ]
  }, {
    "name" : "public IntStream ints()",
    "returnType" : "IntStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code int}\n     * values.\n     *\n     * <p>A pseudorandom {@code int} value is generated as if it's the result of\n     * calling the method {@link #nextInt()}.\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * ints(Long.MAX_VALUE)}.\n     *\n     * @return a stream of pseudorandom {@code int} values\n     * @since 1.8\n     ",
    "links" : [ "#nextInt()" ]
  }, {
    "name" : "private int boundedNextInt(int origin, int bound)",
    "returnType" : "int",
    "comment" : " Android-added: implementation specified in ints(long, int, int) javadoc.",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",
    "returnType" : "IntStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number\n     * of pseudorandom {@code int} values, each conforming to the given\n     * origin (inclusive) and bound (exclusive).\n     *\n     * <p>A pseudorandom {@code int} value is generated as if it's the result of\n     * calling the following method with the origin and bound:\n     * <pre> {@code\n     * int nextInt(int origin, int bound) {\n     *   int n = bound - origin;\n     *   if (n > 0) {\n     *     return nextInt(n) + origin;\n     *   }\n     *   else {  // range not representable as int\n     *     int r;\n     *     do {\n     *       r = nextInt();\n     *     } while (r < origin || r >= bound);\n     *     return r;\n     *   }\n     * }}</pre>\n     *\n     * @param streamSize the number of values to generate\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code int} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero, or {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream ints(int randomNumberOrigin, int randomNumberBound)",
    "returnType" : "IntStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code\n     * int} values, each conforming to the given origin (inclusive) and bound\n     * (exclusive).\n     *\n     * <p>A pseudorandom {@code int} value is generated as if it's the result of\n     * calling the following method with the origin and bound:\n     * <pre> {@code\n     * int nextInt(int origin, int bound) {\n     *   int n = bound - origin;\n     *   if (n > 0) {\n     *     return nextInt(n) + origin;\n     *   }\n     *   else {  // range not representable as int\n     *     int r;\n     *     do {\n     *       r = nextInt();\n     *     } while (r < origin || r >= bound);\n     *     return r;\n     *   }\n     * }}</pre>\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * ints(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n     *\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code int} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongStream longs(long streamSize)",
    "returnType" : "LongStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number of\n     * pseudorandom {@code long} values.\n     *\n     * <p>A pseudorandom {@code long} value is generated as if it's the result\n     * of calling the method {@link #nextLong()}.\n     *\n     * @param streamSize the number of values to generate\n     * @return a stream of pseudorandom {@code long} values\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero\n     * @since 1.8\n     ",
    "links" : [ "#nextLong()" ]
  }, {
    "name" : "public LongStream longs()",
    "returnType" : "LongStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code long}\n     * values.\n     *\n     * <p>A pseudorandom {@code long} value is generated as if it's the result\n     * of calling the method {@link #nextLong()}.\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * longs(Long.MAX_VALUE)}.\n     *\n     * @return a stream of pseudorandom {@code long} values\n     * @since 1.8\n     ",
    "links" : [ "#nextLong()" ]
  }, {
    "name" : "public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound)",
    "returnType" : "LongStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number of\n     * pseudorandom {@code long}, each conforming to the given origin\n     * (inclusive) and bound (exclusive).\n     *\n     * <p>A pseudorandom {@code long} value is generated as if it's the result\n     * of calling the following method with the origin and bound:\n     * <pre> {@code\n     * long nextLong(long origin, long bound) {\n     *   long r = nextLong();\n     *   long n = bound - origin, m = n - 1;\n     *   if ((n & m) == 0L)  // power of two\n     *     r = (r & m) + origin;\n     *   else if (n > 0L) {  // reject over-represented candidates\n     *     for (long u = r >>> 1;            // ensure nonnegative\n     *          u + m - (r = u % n) < 0L;    // rejection check\n     *          u = nextLong() >>> 1) // retry\n     *         ;\n     *     r += origin;\n     *   }\n     *   else {              // range not representable as long\n     *     while (r < origin || r >= bound)\n     *       r = nextLong();\n     *   }\n     *   return r;\n     * }}</pre>\n     *\n     * @param streamSize the number of values to generate\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code long} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero, or {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public LongStream longs(long randomNumberOrigin, long randomNumberBound)",
    "returnType" : "LongStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code\n     * long} values, each conforming to the given origin (inclusive) and bound\n     * (exclusive).\n     *\n     * <p>A pseudorandom {@code long} value is generated as if it's the result\n     * of calling the following method with the origin and bound:\n     * <pre> {@code\n     * long nextLong(long origin, long bound) {\n     *   long r = nextLong();\n     *   long n = bound - origin, m = n - 1;\n     *   if ((n & m) == 0L)  // power of two\n     *     r = (r & m) + origin;\n     *   else if (n > 0L) {  // reject over-represented candidates\n     *     for (long u = r >>> 1;            // ensure nonnegative\n     *          u + m - (r = u % n) < 0L;    // rejection check\n     *          u = nextLong() >>> 1) // retry\n     *         ;\n     *     r += origin;\n     *   }\n     *   else {              // range not representable as long\n     *     while (r < origin || r >= bound)\n     *       r = nextLong();\n     *   }\n     *   return r;\n     * }}</pre>\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n     *\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code long} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream doubles(long streamSize)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number of\n     * pseudorandom {@code double} values, each between zero\n     * (inclusive) and one (exclusive).\n     *\n     * <p>A pseudorandom {@code double} value is generated as if it's the result\n     * of calling the method {@link #nextDouble()}.\n     *\n     * @param streamSize the number of values to generate\n     * @return a stream of {@code double} values\n     * @throws IllegalArgumentException if {@code streamSize} is\n     *         less than zero\n     * @since 1.8\n     ",
    "links" : [ "#nextDouble()" ]
  }, {
    "name" : "public DoubleStream doubles()",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code\n     * double} values, each between zero (inclusive) and one\n     * (exclusive).\n     *\n     * <p>A pseudorandom {@code double} value is generated as if it's the result\n     * of calling the method {@link #nextDouble()}.\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * doubles(Long.MAX_VALUE)}.\n     *\n     * @return a stream of pseudorandom {@code double} values\n     * @since 1.8\n     ",
    "links" : [ "#nextDouble()" ]
  }, {
    "name" : "public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Returns a stream producing the given {@code streamSize} number of\n     * pseudorandom {@code double} values, each conforming to the given origin\n     * (inclusive) and bound (exclusive).\n     *\n     * <p>A pseudorandom {@code double} value is generated as if it's the result\n     * of calling the following method with the origin and bound:\n     * <pre> {@code\n     * double nextDouble(double origin, double bound) {\n     *   double r = nextDouble();\n     *   r = r * (bound - origin) + origin;\n     *   if (r >= bound) // correct for rounding\n     *     r = Math.nextDown(bound);\n     *   return r;\n     * }}</pre>\n     *\n     * @param streamSize the number of values to generate\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code double} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code streamSize} is less than zero,\n     *         or {@code randomNumberOrigin} is not finite,\n     *         or {@code randomNumberBound} is not finite, or {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound)",
    "returnType" : "DoubleStream",
    "comment" : "\n     * Returns an effectively unlimited stream of pseudorandom {@code\n     * double} values, each conforming to the given origin (inclusive) and bound\n     * (exclusive).\n     *\n     * <p>A pseudorandom {@code double} value is generated as if it's the result\n     * of calling the following method with the origin and bound:\n     * <pre> {@code\n     * double nextDouble(double origin, double bound) {\n     *   double r = nextDouble();\n     *   r = r * (bound - origin) + origin;\n     *   if (r >= bound) // correct for rounding\n     *     r = Math.nextDown(bound);\n     *   return r;\n     * }}</pre>\n     *\n     * @implNote This method is implemented to be equivalent to {@code\n     * doubles(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)}.\n     *\n     * @param randomNumberOrigin the origin (inclusive) of each random value\n     * @param randomNumberBound the bound (exclusive) of each random value\n     * @return a stream of pseudorandom {@code double} values,\n     *         each with the given origin (inclusive) and bound (exclusive)\n     * @throws IllegalArgumentException if {@code randomNumberOrigin}\n     *         is greater than or equal to {@code randomNumberBound}\n     * @since 1.8\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static long seedUniquifier()", "private static long initialScramble(long seed)", "public synchronized void setSeed(long seed)", "protected int next(int bits)", "public void nextBytes(byte[] bytes)", "public int nextInt()", "public int nextInt(int bound)", "public long nextLong()", "public boolean nextBoolean()", "public float nextFloat()", "public double nextDouble()", "public synchronized double nextGaussian()", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", "private synchronized void writeObject(ObjectOutputStream s) throws IOException", "private void resetSeed(long seedVal)", "public IntStream ints(long streamSize)", "public IntStream ints()", "private int boundedNextInt(int origin, int bound)", "public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound)", "public IntStream ints(int randomNumberOrigin, int randomNumberBound)", "public LongStream longs(long streamSize)", "public LongStream longs()", "public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound)", "public LongStream longs(long randomNumberOrigin, long randomNumberBound)", "public DoubleStream doubles(long streamSize)", "public DoubleStream doubles()", "public DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)", "public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound)" ],
  "variableNames" : [ "serialVersionUID", "seed", "multiplier", "addend", "mask", "DOUBLE_UNIT", "STREAM_INT_DIFFERS_FROM_NEXT_INT", "seedUniquifier", "nextNextGaussian", "haveNextNextGaussian", "serialPersistentFields", "unsafe", "seedOffset" ]
}