{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/aware/WifiAwareManager.java",
  "packageName" : "android.net.wifi.aware",
  "className" : "WifiAwareManager",
  "comment" : "\n * This class provides the primary API for managing Wi-Fi Aware operations:\n * discovery and peer-to-peer data connections.\n * <p>\n * The class provides access to:\n * <ul>\n * <li>Initialize a Aware cluster (peer-to-peer synchronization). Refer to\n * {@link #attach(AttachCallback, Handler)}.\n * <li>Create discovery sessions (publish or subscribe sessions). Refer to\n * {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, Handler)} and\n * {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback, Handler)}.\n * <li>Create a Aware network specifier to be used with\n * {@link ConnectivityManager#requestNetwork(NetworkRequest, ConnectivityManager.NetworkCallback)}\n * to set-up a Aware connection with a peer. Refer to {@link WifiAwareNetworkSpecifier.Builder}.\n * </ul>\n * <p>\n *     Aware may not be usable when Wi-Fi is disabled (and other conditions). To validate that\n *     the functionality is available use the {@link #isAvailable()} function. To track\n *     changes in Aware usability register for the {@link #ACTION_WIFI_AWARE_STATE_CHANGED}\n *     broadcast. Note that this broadcast is not sticky - you should register for it and then\n *     check the above API to avoid a race condition.\n * <p>\n *     An application must use {@link #attach(AttachCallback, Handler)} to initialize a\n *     Aware cluster - before making any other Aware operation. Aware cluster membership is a\n *     device-wide operation - the API guarantees that the device is in a cluster or joins a\n *     Aware cluster (or starts one if none can be found). Information about attach success (or\n *     failure) are returned in callbacks of {@link AttachCallback}. Proceed with Aware\n *     discovery or connection setup only after receiving confirmation that Aware attach\n *     succeeded - {@link AttachCallback#onAttached(WifiAwareSession)}. When an\n *     application is finished using Aware it <b>must</b> use the\n *     {@link WifiAwareSession#close()} API to indicate to the Aware service that the device\n *     may detach from the Aware cluster. The device will actually disable Aware once the last\n *     application detaches.\n * <p>\n *     Once a Aware attach is confirmed use the\n *     {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, Handler)}\n *     or\n *     {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback,\n *     Handler)} to create publish or subscribe Aware discovery sessions. Events are called on the\n *     provided callback object {@link DiscoverySessionCallback}. Specifically, the\n *     {@link DiscoverySessionCallback#onPublishStarted(PublishDiscoverySession)}\n *     and\n *     {@link DiscoverySessionCallback#onSubscribeStarted(\n *SubscribeDiscoverySession)}\n *     return {@link PublishDiscoverySession} and\n *     {@link SubscribeDiscoverySession}\n *     objects respectively on which additional session operations can be performed, e.g. updating\n *     the session {@link PublishDiscoverySession#updatePublish(PublishConfig)} and\n *     {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}. Sessions can\n *     also be used to send messages using the\n *     {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])} APIs. When an\n *     application is finished with a discovery session it <b>must</b> terminate it using the\n *     {@link DiscoverySession#close()} API.\n * <p>\n *    Creating connections between Aware devices is managed by the standard\n *    {@link ConnectivityManager#requestNetwork(NetworkRequest,\n *    ConnectivityManager.NetworkCallback)}.\n *    The {@link NetworkRequest} object should be constructed with:\n *    <ul>\n *        <li>{@link NetworkRequest.Builder#addTransportType(int)} of\n *        {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}.\n *        <li>{@link NetworkRequest.Builder#setNetworkSpecifier(String)} using\n *        {@link WifiAwareNetworkSpecifier.Builder}.\n *    </ul>\n ",
  "links" : [ "android.net.wifi.aware.PublishDiscoverySession#updatePublish(PublishConfig)", "#attach(AttachCallback", "android.net.wifi.aware.DiscoverySessionCallback#onPublishStarted(PublishDiscoverySession)", "WifiAwareNetworkSpecifier.Builder", "android.net.wifi.aware.DiscoverySessionCallback", "android.net.wifi.aware.AttachCallback", "android.net.wifi.aware.DiscoverySession#close()", "android.net.wifi.aware.DiscoverySessionCallback#onSubscribeStarted(", "#isAvailable()", "android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE", "android.net.NetworkRequest", "android.net.wifi.aware.WifiAwareSession#subscribe(SubscribeConfig", "#ACTION_WIFI_AWARE_STATE_CHANGED", "android.net.wifi.aware.WifiAwareSession#close()", "android.net.wifi.aware.SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)", "android.net.wifi.aware.DiscoverySession#sendMessage(PeerHandle", "NetworkRequest.Builder#setNetworkSpecifier(String)", "NetworkRequest.Builder#addTransportType(int)", "android.net.ConnectivityManager#requestNetwork(NetworkRequest", "android.net.wifi.aware.AttachCallback#onAttached(WifiAwareSession)", "android.net.wifi.aware.SubscribeDiscoverySession", "android.net.wifi.aware.WifiAwareSession#publish(PublishConfig", "android.net.wifi.aware.PublishDiscoverySession" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : " STOPSHIP if true",
    "links" : [ ]
  }, {
    "name" : "ACTION_WIFI_AWARE_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast intent action to indicate that the state of Wi-Fi Aware availability has changed\n     * and all active Aware sessions are no longer usable. Use the {@link #isAvailable()} to query\n     * the current status.\n     * This broadcast is <b>not</b> sticky, use the {@link #isAvailable()} API after registering\n     * the broadcast to check the current state of Wi-Fi Aware.\n     * <p>Note: The broadcast is only delivered to registered receivers - no manifest registered\n     * components will be launched.\n     ",
    "links" : [ "#isAvailable()" ]
  }, {
    "name" : "ACTION_WIFI_AWARE_RESOURCE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent broadcast sent whenever Wi-Fi Aware resource availability has changed. The resources\n     * are attached with the {@link #EXTRA_AWARE_RESOURCES} extra. The resources can also be\n     * obtained using the {@link #getAvailableAwareResources()} method. To receive this broadcast,\n     * apps must hold {@link android.Manifest.permission#ACCESS_WIFI_STATE}.\n     * <p>Note: The broadcast is only delivered to registered receivers - no manifest registered\n     * components will be launched.\n     ",
    "links" : [ "#getAvailableAwareResources()", "#EXTRA_AWARE_RESOURCES", "android.Manifest.permission#ACCESS_WIFI_STATE" ]
  }, {
    "name" : "EXTRA_AWARE_RESOURCES",
    "type" : "String",
    "comment" : "\n     * Sent as a part of {@link #ACTION_WIFI_AWARE_RESOURCE_CHANGED} that contains an instance of\n     * {@link AwareResources} representing the current Wi-Fi Aware resources.\n     ",
    "links" : [ "android.net.wifi.aware.AwareResources", "#ACTION_WIFI_AWARE_RESOURCE_CHANGED" ]
  }, {
    "name" : "WIFI_AWARE_DATA_PATH_ROLE_INITIATOR",
    "type" : "int",
    "comment" : "\n     * Connection creation role is that of INITIATOR. Used to create a network specifier string\n     * when requesting a Aware network.\n     *\n     * @see WifiAwareSession#createNetworkSpecifierOpen(int, byte[])\n     * @see WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_AWARE_DATA_PATH_ROLE_RESPONDER",
    "type" : "int",
    "comment" : "\n     * Connection creation role is that of RESPONDER. Used to create a network specifier string\n     * when requesting a Aware network.\n     *\n     * @see WifiAwareSession#createNetworkSpecifierOpen(int, byte[])\n     * @see WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_AWARE_DISCOVERY_LOST_REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Reason code provided in {@link DiscoverySessionCallback#onServiceLost(PeerHandle, int)}\n     * indicating that the service was lost for unknown reason.\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onServiceLost(PeerHandle" ]
  }, {
    "name" : "WIFI_AWARE_DISCOVERY_LOST_REASON_PEER_NOT_VISIBLE",
    "type" : "int",
    "comment" : "\n     * Reason code provided in {@link DiscoverySessionCallback#onServiceLost(PeerHandle, int)}\n     * indicating that the service advertised by the peer is no longer visible. This may be because\n     * the peer is out of range or because the peer stopped advertising this service.\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onServiceLost(PeerHandle" ]
  }, {
    "name" : "WIFI_AWARE_SUSPEND_REDUNDANT_REQUEST",
    "type" : "int",
    "comment" : "\n     * Reason code provided in {@link DiscoverySessionCallback#onSessionSuspendFailed(int)} when the\n     * session is already suspended.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onSessionSuspendFailed(int)" ]
  }, {
    "name" : "WIFI_AWARE_SUSPEND_INVALID_SESSION",
    "type" : "int",
    "comment" : "\n     * Reason code provided in {@link DiscoverySessionCallback#onSessionSuspendFailed(int)} when the\n     * specified session does not support suspension.\n      @hide\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onSessionSuspendFailed(int)" ]
  }, {
    "name" : "WIFI_AWARE_SUSPEND_CANNOT_SUSPEND",
    "type" : "int",
    "comment" : "\n     * Reason code provided in {@link DiscoverySessionCallback#onSessionSuspendFailed(int)} when the\n     * session could not be suspended due to more than one app using it.\n      @hide\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onSessionSuspendFailed(int)" ]
  }, {
    "name" : "WIFI_AWARE_SUSPEND_INTERNAL_ERROR",
    "type" : "int",
    "comment" : "\n     * Reason code provided in {@link DiscoverySessionCallback#onSessionSuspendFailed(int)} when an\n     * error is encountered with the request.\n      @hide\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onSessionSuspendFailed(int)" ]
  }, {
    "name" : "WIFI_AWARE_RESUME_REDUNDANT_REQUEST",
    "type" : "int",
    "comment" : "\n     * Reason code provided in {@link DiscoverySessionCallback#onSessionResumeFailed(int)} when the\n     * session is not suspended.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onSessionResumeFailed(int)" ]
  }, {
    "name" : "WIFI_AWARE_RESUME_INVALID_SESSION",
    "type" : "int",
    "comment" : "\n     * Reason code provided in {@link DiscoverySessionCallback#onSessionResumeFailed(int)} when the\n     * specified session does not support suspension.\n      @hide\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onSessionResumeFailed(int)" ]
  }, {
    "name" : "WIFI_AWARE_RESUME_INTERNAL_ERROR",
    "type" : "int",
    "comment" : "\n     * Reason code provided in {@link DiscoverySessionCallback#onSessionResumeFailed(int)} when an\n     * error is encountered with the request.\n      @hide\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onSessionResumeFailed(int)" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IWifiAwareManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " lock access to the following vars",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current status of Aware API: whether or not Aware is available. To track\n     * changes in the state of Aware API register for the\n     * {@link #ACTION_WIFI_AWARE_STATE_CHANGED} broadcast.\n     *\n     * @return A boolean indicating whether the app can use the Aware API at this time (true) or\n     * not (false).\n     ",
    "links" : [ "#ACTION_WIFI_AWARE_STATE_CHANGED" ]
  }, {
    "name" : "public boolean isDeviceAttached()",
    "returnType" : "boolean",
    "comment" : "\n     * Return the current status of the Aware service: whether or not the device is already attached\n     * to an Aware cluster. To attach to an Aware cluster, please use\n     * {@link #attach(AttachCallback, Handler)} or\n     * {@link #attach(AttachCallback, IdentityChangedListener, Handler)}.\n     * @return A boolean indicating whether the device is attached to a cluster at this time (true)\n     *         or not (false).\n     ",
    "links" : [ "#attach(AttachCallback" ]
  }, {
    "name" : "public boolean isSetChannelOnDataPathSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Return the device support for setting a channel requirement in a data-path request. If true\n     * the channel set by\n     * {@link WifiAwareNetworkSpecifier.Builder#setChannelFrequencyMhz(int, boolean)} will be\n     * honored, otherwise it will be ignored.\n     * @return True is the device support set channel on data-path request, false otherwise.\n     ",
    "links" : [ "WifiAwareNetworkSpecifier.Builder#setChannelFrequencyMhz(int" ]
  }, {
    "name" : "public void enableInstantCommunicationMode(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Enable the Wifi Aware Instant communication mode. If the device doesn't support this feature\n     * calling this API will result no action.\n     * <p>\n     * Note: before {@link android.os.Build.VERSION_CODES#TIRAMISU}, only system app can use this\n     * API. Start with {@link android.os.Build.VERSION_CODES#TIRAMISU} apps hold\n     * {@link android.Manifest.permission#OVERRIDE_WIFI_CONFIG} are allowed to use it.\n     *\n     * @see Characteristics#isInstantCommunicationModeSupported()\n     * @param enable true for enable, false otherwise.\n     * @hide\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "android.Manifest.permission#OVERRIDE_WIFI_CONFIG" ]
  }, {
    "name" : "public boolean isInstantCommunicationModeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Return the current status of the Wifi Aware instant communication mode.\n     * If the device doesn't support this feature, return will always be false.\n     * @see Characteristics#isInstantCommunicationModeSupported()\n     * @return true if it is enabled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Characteristics getCharacteristics()",
    "returnType" : "Characteristics",
    "comment" : "\n     * Returns the characteristics of the Wi-Fi Aware interface: a set of parameters which specify\n     * limitations on configurations, e.g. the maximum service name length.\n     * <p>\n     * May return {@code null} if the Wi-Fi Aware service is not initialized. Use\n     * {@link #attach(AttachCallback, Handler)} or\n     * {@link #attach(AttachCallback, IdentityChangedListener, Handler)} to initialize the Wi-Fi\n     * Aware service.\n     *\n     * @return An object specifying configuration limitations of Aware.\n     ",
    "links" : [ "#attach(AttachCallback" ]
  }, {
    "name" : "public AwareResources getAvailableAwareResources()",
    "returnType" : "AwareResources",
    "comment" : "\n     * Return the available resources of the Wi-Fi aware service: a set of parameters which specify\n     * limitations on service usage, e.g the number of data-paths which could be created.\n     * <p>\n     * May return {@code null} if the Wi-Fi Aware service is not initialized. Use\n     * {@link #attach(AttachCallback, Handler)} or\n     * {@link #attach(AttachCallback, IdentityChangedListener, Handler)} to initialize the Wi-Fi\n     * Aware service.\n     *\n     * @return An object specifying the currently available resource of the Wi-Fi Aware service.\n     ",
    "links" : [ "#attach(AttachCallback" ]
  }, {
    "name" : "public void attach(@NonNull AttachCallback attachCallback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or\n     * create connections to peers. The device will attach to an existing cluster if it can find\n     * one or create a new cluster (if it is the first to enable Aware in its vicinity). Results\n     * (e.g. successful attach to a cluster) are provided to the {@code attachCallback} object.\n     * An application <b>must</b> call {@link WifiAwareSession#close()} when done with the\n     * Wi-Fi Aware object.\n     * <p>\n     * Note: a Aware cluster is a shared resource - if the device is already attached to a cluster\n     * then this function will simply indicate success immediately using the same {@code\n     * attachCallback}.\n     *\n     * @param attachCallback A callback for attach events, extended from\n     * {@link AttachCallback}.\n     * @param handler The Handler on whose thread to execute the callbacks of the {@code\n     * attachCallback} object. If a null is provided then the application's main thread will be\n     *                used.\n     ",
    "links" : [ "android.net.wifi.aware.WifiAwareSession#close()", "android.net.wifi.aware.AttachCallback" ]
  }, {
    "name" : "public void attach(@NonNull AttachCallback attachCallback, @NonNull IdentityChangedListener identityChangedListener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or\n     * create connections to peers. The device will attach to an existing cluster if it can find\n     * one or create a new cluster (if it is the first to enable Aware in its vicinity). Results\n     * (e.g. successful attach to a cluster) are provided to the {@code attachCallback} object.\n     * An application <b>must</b> call {@link WifiAwareSession#close()} when done with the\n     * Wi-Fi Aware object.\n     * <p>\n     * Note: a Aware cluster is a shared resource - if the device is already attached to a cluster\n     * then this function will simply indicate success immediately using the same {@code\n     * attachCallback}.\n     * <p>\n     * This version of the API attaches a listener to receive the MAC address of the Aware interface\n     * on startup and whenever it is updated (it is randomized at regular intervals for privacy).\n     *\n     * If targeting {@link android.os.Build.VERSION_CODES#TIRAMISU} or later, the application must\n     * have {@link android.Manifest.permission#NEARBY_WIFI_DEVICES} with\n     * android:usesPermissionFlags=\"neverForLocation\". If the application does not declare\n     * android:usesPermissionFlags=\"neverForLocation\", then it must also have\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION}.\n     *\n     * If targeting an earlier release than {@link android.os.Build.VERSION_CODES#TIRAMISU}, the\n     * application must have {@link android.Manifest.permission#ACCESS_FINE_LOCATION}.\n     *\n     * Apps without {@link android.Manifest.permission#NEARBY_WIFI_DEVICES} or\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION} can use the\n     * {@link #attach(AttachCallback, Handler)} version.\n     * Note that aside from permission requirements the {@link IdentityChangedListener} will wake up\n     * the host at regular intervals causing higher power consumption, do not use it unless the\n     * information is necessary (e.g. for out-of-band discovery).\n     *\n     * @param attachCallback A callback for attach events, extended from\n     * {@link AttachCallback}.\n     * @param identityChangedListener A callback for changed identity or cluster ID, extended from\n     * {@link IdentityChangedListener}.\n     * @param handler The Handler on whose thread to execute the callbacks of the {@code\n     * attachCallback} and {@code identityChangedListener} objects. If a null is provided then the\n     *                application's main thread will be used.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "android.net.wifi.aware.WifiAwareSession#close()", "#attach(AttachCallback", "android.Manifest.permission#ACCESS_FINE_LOCATION", "android.net.wifi.aware.IdentityChangedListener", "android.net.wifi.aware.AttachCallback", "android.Manifest.permission#NEARBY_WIFI_DEVICES" ]
  }, {
    "name" : "public void attach(@NonNull ConfigRequest configRequest, @NonNull @CallbackExecutor Executor executor, @NonNull AttachCallback attachCallback, @NonNull IdentityChangedListener identityChangedListener)",
    "returnType" : "void",
    "comment" : "\n     * Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or\n     * create connections to peers. See {@link #attach(AttachCallback, IdentityChangedListener,\n     * Handler)} for more information.\n     *\n     * This version allows callers to provide an instance of {@link ConfigRequest}.\n     *\n     * @param configRequest Parameters for this request.\n     * @param executor The executor to execute the listener of the {@code attachCallback} object.\n     * @param attachCallback A callback for attach events, extended from {@link AttachCallback}.\n     * @param identityChangedListener A callback for changed identity or cluster ID, extended from\n     * {@link IdentityChangedListener}.\n     * @hide\n     ",
    "links" : [ "#attach(AttachCallback", "android.net.wifi.aware.IdentityChangedListener", "android.net.wifi.aware.AttachCallback", "android.net.wifi.aware.ConfigRequest" ]
  }, {
    "name" : "public void attach(Handler handler, ConfigRequest configRequest, AttachCallback attachCallback, IdentityChangedListener identityChangedListener, boolean forOffloading, Executor executor)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void disconnect(int clientId, Binder binder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setMasterPreference(int clientId, Binder binder, int mp)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void getMasterPreference(int clientId, Binder binder, @NonNull Executor executor, @NonNull Consumer<Integer> resultsCallback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void publish(int clientId, Looper looper, PublishConfig publishConfig, DiscoverySessionCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updatePublish(int clientId, int sessionId, PublishConfig publishConfig)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void subscribe(int clientId, Looper looper, SubscribeConfig subscribeConfig, DiscoverySessionCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updateSubscribe(int clientId, int sessionId, SubscribeConfig subscribeConfig)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void terminateSession(int clientId, int sessionId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendMessage(int clientId, int sessionId, PeerHandle peerHandle, byte[] message, int messageId, int retryCount)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void initiateNanPairingSetupRequest(int clientId, int sessionId, PeerHandle peerHandle, String password, String pairingDeviceAlias, int cipherSuite)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void responseNanPairingSetupRequest(int clientId, int sessionId, PeerHandle peerHandle, int requestId, String password, String pairingDeviceAlias, boolean accept, int cipherSuite)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void initiateBootStrappingSetupRequest(int clientId, int sessionId, PeerHandle peerHandle, int method)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestMacAddresses(int uid, int[] peerIds, IWifiAwareMacAddressProvider callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkSpecifier createNetworkSpecifier(int clientId, int role, int sessionId, @NonNull PeerHandle peerHandle, @Nullable byte[] pmk, @Nullable String passphrase)",
    "returnType" : "NetworkSpecifier",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkSpecifier createNetworkSpecifier(int clientId, @DataPathRole int role, @NonNull byte[] peer, @Nullable byte[] pmk, @Nullable String passphrase)",
    "returnType" : "NetworkSpecifier",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAwareParams(@Nullable AwareParams params)",
    "returnType" : "void",
    "comment" : "\n     * Set Wi-Fi Aware protocol parameters.\n     * @hide\n     * @param params An object contain specified parameters. Use {@code null} to remove previously\n     *               set configuration and restore default behavior.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOpportunisticModeEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     *  Set all Wi-Fi Aware sessions created by the calling app to be opportunistic. Opportunistic\n     *  Wi-Fi Aware sessions are considered low priority and may be torn down (the sessions or the\n     *  Aware interface) if there are resource conflicts.\n     *\n     * @param enabled True to configure all Wi-Fi Aware sessions by the calling app as\n     *                Opportunistic. False by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void isOpportunisticModeEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> resultsCallback)",
    "returnType" : "void",
    "comment" : "\n     * Indicate whether all Wi-Fi Aware sessions created by the calling app are opportunistic as\n     * defined and configured by {@link #setOpportunisticModeEnabled(boolean)}\n     *\n     * @param executor The executor on which callback will be invoked.\n     * @param resultsCallback An asynchronous callback that will return boolean\n     ",
    "links" : [ "#setOpportunisticModeEnabled(boolean)" ]
  }, {
    "name" : "public void resetPairedDevices()",
    "returnType" : "void",
    "comment" : "\n     * Reset all paired devices setup by the caller by\n     * {@link DiscoverySession#initiatePairingRequest(PeerHandle, String, int, String)} and\n     * {@link DiscoverySession#acceptPairingRequest(int, PeerHandle, String, int, String)}\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySession#acceptPairingRequest(int", "android.net.wifi.aware.DiscoverySession#initiatePairingRequest(PeerHandle" ]
  }, {
    "name" : "public void removePairedDevice(@NonNull String alias)",
    "returnType" : "void",
    "comment" : "\n     * Remove the target paired device setup by the caller by\n     * {@link DiscoverySession#initiatePairingRequest(PeerHandle, String, int, String)} and\n     * {@link DiscoverySession#acceptPairingRequest(int, PeerHandle, String, int, String)}\n     * @param alias The alias set by the caller\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySession#acceptPairingRequest(int", "android.net.wifi.aware.DiscoverySession#initiatePairingRequest(PeerHandle" ]
  }, {
    "name" : "public void getPairedDevices(@NonNull Executor executor, @NonNull Consumer<List<String>> resultsCallback)",
    "returnType" : "void",
    "comment" : "\n     * Get all the paired devices configured by the calling app.\n     * @param executor The executor on which callback will be invoked.\n     * @param resultsCallback An asynchronous callback that will return a list of paired devices'\n     *                        alias\n     ",
    "links" : [ ]
  }, {
    "name" : "public void suspend(int clientId, int sessionId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resume(int clientId, int sessionId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attachOffload(@NonNull @CallbackExecutor Executor executor, @NonNull AttachCallback attachCallback)",
    "returnType" : "void",
    "comment" : "\n     * Attach to the Wi-Fi Aware service as an offload session. All discovery sessions and\n     * connections will be handled via out-of-band connections.\n     * The Aware session created by this attach method will have the lowest priority when resource\n     * conflicts arise (e.g. Aware has to be torn down to create other WiFi interfaces).\n     *\n     * @param executor       The executor to execute the listener of the {@code attachCallback}\n     *                       object.\n     * @param attachCallback A callback for attach events, extended from\n     *                       {@link AttachCallback}.\n     * @hide\n     * @see #attach(AttachCallback, Handler)\n     ",
    "links" : [ "android.net.wifi.aware.AttachCallback" ]
  } ],
  "methodNames" : [ "public boolean isAvailable()", "public boolean isDeviceAttached()", "public boolean isSetChannelOnDataPathSupported()", "public void enableInstantCommunicationMode(boolean enable)", "public boolean isInstantCommunicationModeEnabled()", "public Characteristics getCharacteristics()", "public AwareResources getAvailableAwareResources()", "public void attach(@NonNull AttachCallback attachCallback, @Nullable Handler handler)", "public void attach(@NonNull AttachCallback attachCallback, @NonNull IdentityChangedListener identityChangedListener, @Nullable Handler handler)", "public void attach(@NonNull ConfigRequest configRequest, @NonNull @CallbackExecutor Executor executor, @NonNull AttachCallback attachCallback, @NonNull IdentityChangedListener identityChangedListener)", "public void attach(Handler handler, ConfigRequest configRequest, AttachCallback attachCallback, IdentityChangedListener identityChangedListener, boolean forOffloading, Executor executor)", "public void disconnect(int clientId, Binder binder)", "public void setMasterPreference(int clientId, Binder binder, int mp)", "public void getMasterPreference(int clientId, Binder binder, @NonNull Executor executor, @NonNull Consumer<Integer> resultsCallback)", "public void publish(int clientId, Looper looper, PublishConfig publishConfig, DiscoverySessionCallback callback)", "public void updatePublish(int clientId, int sessionId, PublishConfig publishConfig)", "public void subscribe(int clientId, Looper looper, SubscribeConfig subscribeConfig, DiscoverySessionCallback callback)", "public void updateSubscribe(int clientId, int sessionId, SubscribeConfig subscribeConfig)", "public void terminateSession(int clientId, int sessionId)", "public void sendMessage(int clientId, int sessionId, PeerHandle peerHandle, byte[] message, int messageId, int retryCount)", "public void initiateNanPairingSetupRequest(int clientId, int sessionId, PeerHandle peerHandle, String password, String pairingDeviceAlias, int cipherSuite)", "public void responseNanPairingSetupRequest(int clientId, int sessionId, PeerHandle peerHandle, int requestId, String password, String pairingDeviceAlias, boolean accept, int cipherSuite)", "public void initiateBootStrappingSetupRequest(int clientId, int sessionId, PeerHandle peerHandle, int method)", "public void requestMacAddresses(int uid, int[] peerIds, IWifiAwareMacAddressProvider callback)", "public NetworkSpecifier createNetworkSpecifier(int clientId, int role, int sessionId, @NonNull PeerHandle peerHandle, @Nullable byte[] pmk, @Nullable String passphrase)", "public NetworkSpecifier createNetworkSpecifier(int clientId, @DataPathRole int role, @NonNull byte[] peer, @Nullable byte[] pmk, @Nullable String passphrase)", "public void setAwareParams(@Nullable AwareParams params)", "public void setOpportunisticModeEnabled(boolean enabled)", "public void isOpportunisticModeEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> resultsCallback)", "public void resetPairedDevices()", "public void removePairedDevice(@NonNull String alias)", "public void getPairedDevices(@NonNull Executor executor, @NonNull Consumer<List<String>> resultsCallback)", "public void suspend(int clientId, int sessionId)", "public void resume(int clientId, int sessionId)", "public void attachOffload(@NonNull @CallbackExecutor Executor executor, @NonNull AttachCallback attachCallback)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_WIFI_AWARE_STATE_CHANGED", "ACTION_WIFI_AWARE_RESOURCE_CHANGED", "EXTRA_AWARE_RESOURCES", "WIFI_AWARE_DATA_PATH_ROLE_INITIATOR", "WIFI_AWARE_DATA_PATH_ROLE_RESPONDER", "WIFI_AWARE_DISCOVERY_LOST_REASON_UNKNOWN", "WIFI_AWARE_DISCOVERY_LOST_REASON_PEER_NOT_VISIBLE", "WIFI_AWARE_SUSPEND_REDUNDANT_REQUEST", "WIFI_AWARE_SUSPEND_INVALID_SESSION", "WIFI_AWARE_SUSPEND_CANNOT_SUSPEND", "WIFI_AWARE_SUSPEND_INTERNAL_ERROR", "WIFI_AWARE_RESUME_REDUNDANT_REQUEST", "WIFI_AWARE_RESUME_INVALID_SESSION", "WIFI_AWARE_RESUME_INTERNAL_ERROR", "mContext", "mService", "mLock" ]
}