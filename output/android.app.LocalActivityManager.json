{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/LocalActivityManager.java",
  "packageName" : "android.app",
  "className" : "LocalActivityManager",
  "comment" : "\n * <p>Helper class for managing multiple running embedded activities in the same\n * process. This class is not normally used directly, but rather created for\n * you as part of the {@link android.app.ActivityGroup} implementation.\n *\n * @see ActivityGroup\n *\n * @deprecated Use the new {@link Fragment} and {@link FragmentManager} APIs\n * instead; these are also\n * available on older platforms through the Android compatibility package.\n ",
  "links" : [ "android.app.Fragment", "android.app.ActivityGroup", "android.app.FragmentManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "localLOGV",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESTORED",
    "type" : "int",
    "comment" : " State restored, but no startActivity().",
    "links" : [ ]
  }, {
    "name" : "INITIALIZING",
    "type" : "int",
    "comment" : " Ready to launch (after startActivity()).",
    "links" : [ ]
  }, {
    "name" : "CREATED",
    "type" : "int",
    "comment" : " Created, not started or resumed.",
    "links" : [ ]
  }, {
    "name" : "STARTED",
    "type" : "int",
    "comment" : " Created and started, not resumed.",
    "links" : [ ]
  }, {
    "name" : "RESUMED",
    "type" : "int",
    "comment" : " Created started and resumed.",
    "links" : [ ]
  }, {
    "name" : "DESTROYED",
    "type" : "int",
    "comment" : " No longer with us.",
    "links" : [ ]
  }, {
    "name" : "mActivityThread",
    "type" : "ActivityThread",
    "comment" : " Thread our activities are running in. ",
    "links" : [ ]
  }, {
    "name" : "mParent",
    "type" : "Activity",
    "comment" : " The containing activity that owns the activities we create. ",
    "links" : [ ]
  }, {
    "name" : "mResumed",
    "type" : "LocalActivityRecord",
    "comment" : " The activity that is currently resumed. ",
    "links" : [ ]
  }, {
    "name" : "mActivities",
    "type" : "Map<String, LocalActivityRecord>",
    "comment" : " id -> record of all known activities. ",
    "links" : [ ]
  }, {
    "name" : "mActivityArray",
    "type" : "ArrayList<LocalActivityRecord>",
    "comment" : " array of all known activities for easy iterating. ",
    "links" : [ ]
  }, {
    "name" : "mSingleMode",
    "type" : "boolean",
    "comment" : " True if only one activity can be resumed at a time ",
    "links" : [ ]
  }, {
    "name" : "mFinishing",
    "type" : "boolean",
    "comment" : " Set to true once we find out the container is finishing. ",
    "links" : [ ]
  }, {
    "name" : "mCurState",
    "type" : "int",
    "comment" : " Current state the owner (ActivityGroup) is in ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void moveToState(LocalActivityRecord r, int desiredState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void performPause(LocalActivityRecord r, boolean finishing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Window startActivity(String id, Intent intent)",
    "returnType" : "Window",
    "comment" : "\n     * Start a new activity running in the group.  Every activity you start\n     * must have a unique string ID associated with it -- this is used to keep\n     * track of the activity, so that if you later call startActivity() again\n     * on it the same activity object will be retained.\n     * \n     * <p>When there had previously been an activity started under this id,\n     * it may either be destroyed and a new one started, or the current\n     * one re-used, based on these conditions, in order:</p>\n     * \n     * <ul>\n     * <li> If the Intent maps to a different activity component than is\n     * currently running, the current activity is finished and a new one\n     * started.\n     * <li> If the current activity uses a non-multiple launch mode (such\n     * as singleTop), or the Intent has the\n     * {@link Intent#FLAG_ACTIVITY_SINGLE_TOP} flag set, then the current\n     * activity will remain running and its\n     * {@link Activity#onNewIntent(Intent) Activity.onNewIntent()} method\n     * called.\n     * <li> If the new Intent is the same (excluding extras) as the previous\n     * one, and the new Intent does not have the\n     * {@link Intent#FLAG_ACTIVITY_CLEAR_TOP} set, then the current activity\n     * will remain running as-is.\n     * <li> Otherwise, the current activity will be finished and a new\n     * one started.\n     * </ul>\n     * \n     * <p>If the given Intent can not be resolved to an available Activity,\n     * this method throws {@link android.content.ActivityNotFoundException}.\n     * \n     * <p>Warning: There is an issue where, if the Intent does not\n     * include an explicit component, we can restore the state for a different\n     * activity class than was previously running when the state was saved (if\n     * the set of available activities changes between those points).\n     * \n     * @param id Unique identifier of the activity to be started\n     * @param intent The Intent describing the activity to be started\n     * \n     * @return Returns the window of the activity.  The caller needs to take\n     * care of adding this window to a view hierarchy, and likewise dealing\n     * with removing the old window if the activity has changed.\n     * \n     * @throws android.content.ActivityNotFoundException\n     ",
    "links" : [ "android.app.Activity#onNewIntent(Intent)", "android.content.ActivityNotFoundException", "android.content.Intent#FLAG_ACTIVITY_CLEAR_TOP", "android.content.Intent#FLAG_ACTIVITY_SINGLE_TOP" ]
  }, {
    "name" : "private Window performDestroy(LocalActivityRecord r, boolean finish)",
    "returnType" : "Window",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Window destroyActivity(String id, boolean finish)",
    "returnType" : "Window",
    "comment" : "\n     * Destroy the activity associated with a particular id.  This activity\n     * will go through the normal lifecycle events and fine onDestroy(), and\n     * then the id removed from the group.\n     * \n     * @param id Unique identifier of the activity to be destroyed\n     * @param finish If true, this activity will be finished, so its id and\n     * all state are removed from the group.\n     * \n     * @return Returns the window that was used to display the activity, or\n     * null if there was none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Activity getCurrentActivity()",
    "returnType" : "Activity",
    "comment" : "\n     * Retrieve the Activity that is currently running.\n     * \n     * @return the currently running (resumed) Activity, or null if there is\n     *         not one\n     * \n     * @see #startActivity\n     * @see #getCurrentId\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCurrentId()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the ID of the activity that is currently running.\n     * \n     * @return the ID of the currently running (resumed) Activity, or null if\n     *         there is not one\n     * \n     * @see #startActivity\n     * @see #getCurrentActivity\n     ",
    "links" : [ ]
  }, {
    "name" : "public Activity getActivity(String id)",
    "returnType" : "Activity",
    "comment" : "\n     * Return the Activity object associated with a string ID.\n     * \n     * @see #startActivity\n     * \n     * @return the associated Activity object, or null if the id is unknown or\n     *         its activity is not currently instantiated\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchCreate(Bundle state)",
    "returnType" : "void",
    "comment" : "\n     * Restore a state that was previously returned by {@link #saveInstanceState}.  This\n     * adds to the activity group information about all activity IDs that had\n     * previously been saved, even if they have not been started yet, so if the\n     * user later navigates to them the correct state will be restored.\n     * \n     * <p>Note: This does <b>not</b> change the current running activity, or\n     * start whatever activity was previously running when the state was saved.\n     * That is up to the client to do, in whatever way it thinks is best.\n     * \n     * @param state a previously saved state; does nothing if this is null\n     * \n     * @see #saveInstanceState\n     ",
    "links" : [ "#saveInstanceState" ]
  }, {
    "name" : "public Bundle saveInstanceState()",
    "returnType" : "Bundle",
    "comment" : "\n     * Retrieve the state of all activities known by the group.  For\n     * activities that have previously run and are now stopped or finished, the\n     * last saved state is used.  For the current running activity, its\n     * {@link Activity#onSaveInstanceState} is called to retrieve its current state.\n     * \n     * @return a Bundle holding the newly created state of all known activities\n     * \n     * @see #dispatchCreate\n     ",
    "links" : [ "android.app.Activity#onSaveInstanceState" ]
  }, {
    "name" : "public void dispatchResume()",
    "returnType" : "void",
    "comment" : "\n     * Called by the container activity in its {@link Activity#onResume} so\n     * that LocalActivityManager can perform the corresponding action on the\n     * activities it holds.\n     * \n     * @see Activity#onResume\n     ",
    "links" : [ "android.app.Activity#onResume" ]
  }, {
    "name" : "public void dispatchPause(boolean finishing)",
    "returnType" : "void",
    "comment" : "\n     * Called by the container activity in its {@link Activity#onPause} so\n     * that LocalActivityManager can perform the corresponding action on the\n     * activities it holds.\n     * \n     * @param finishing set to true if the parent activity has been finished;\n     *                  this can be determined by calling\n     *                  Activity.isFinishing()\n     * \n     * @see Activity#onPause\n     * @see Activity#isFinishing\n     ",
    "links" : [ "android.app.Activity#onPause" ]
  }, {
    "name" : "public void dispatchStop()",
    "returnType" : "void",
    "comment" : "\n     * Called by the container activity in its {@link Activity#onStop} so\n     * that LocalActivityManager can perform the corresponding action on the\n     * activities it holds.\n     * \n     * @see Activity#onStop\n     ",
    "links" : [ "android.app.Activity#onStop" ]
  }, {
    "name" : "public HashMap<String, Object> dispatchRetainNonConfigurationInstance()",
    "returnType" : "HashMap<String, Object>",
    "comment" : "\n     * Call onRetainNonConfigurationInstance on each child activity and store the\n     * results in a HashMap by id.  Only construct the HashMap if there is a non-null\n     * object to store.  Note that this does not support nested ActivityGroups.\n     * \n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAllActivities()",
    "returnType" : "void",
    "comment" : "\n     * Remove all activities from this LocalActivityManager, performing an\n     * {@link Activity#onDestroy} on any that are currently instantiated.\n     ",
    "links" : [ "android.app.Activity#onDestroy" ]
  }, {
    "name" : "public void dispatchDestroy(boolean finishing)",
    "returnType" : "void",
    "comment" : "\n     * Called by the container activity in its {@link Activity#onDestroy} so\n     * that LocalActivityManager can perform the corresponding action on the\n     * activities it holds.\n     * \n     * @see Activity#onDestroy\n     ",
    "links" : [ "android.app.Activity#onDestroy" ]
  } ],
  "methodNames" : [ "private void moveToState(LocalActivityRecord r, int desiredState)", "private void performPause(LocalActivityRecord r, boolean finishing)", "public Window startActivity(String id, Intent intent)", "private Window performDestroy(LocalActivityRecord r, boolean finish)", "public Window destroyActivity(String id, boolean finish)", "public Activity getCurrentActivity()", "public String getCurrentId()", "public Activity getActivity(String id)", "public void dispatchCreate(Bundle state)", "public Bundle saveInstanceState()", "public void dispatchResume()", "public void dispatchPause(boolean finishing)", "public void dispatchStop()", "public HashMap<String, Object> dispatchRetainNonConfigurationInstance()", "public void removeAllActivities()", "public void dispatchDestroy(boolean finishing)" ],
  "variableNames" : [ "TAG", "localLOGV", "RESTORED", "INITIALIZING", "CREATED", "STARTED", "RESUMED", "DESTROYED", "mActivityThread", "mParent", "mResumed", "mActivities", "mActivityArray", "mSingleMode", "mFinishing", "mCurState" ]
}