{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/ReadableByteChannel.java",
  "packageName" : "java.nio.channels",
  "className" : "ReadableByteChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int read(ByteBuffer dst) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a sequence of bytes from this channel into the given buffer.\n     *\n     * <p> An attempt is made to read up to <i>r</i> bytes from the channel,\n     * where <i>r</i> is the number of bytes remaining in the buffer, that is,\n     * {@code dst.remaining()}, at the moment this method is invoked.\n     *\n     * <p> Suppose that a byte sequence of length <i>n</i> is read, where\n     * {@code 0}&nbsp;{@code <=}&nbsp;<i>n</i>&nbsp;{@code <=}&nbsp;<i>r</i>.\n     * This byte sequence will be transferred into the buffer so that the first\n     * byte in the sequence is at index <i>p</i> and the last byte is at index\n     * <i>p</i>&nbsp;{@code +}&nbsp;<i>n</i>&nbsp;{@code -}&nbsp;{@code 1},\n     * where <i>p</i> is the buffer's position at the moment this method is\n     * invoked.  Upon return the buffer's position will be equal to\n     * <i>p</i>&nbsp;{@code +}&nbsp;<i>n</i>; its limit will not have changed.\n     *\n     * <p> A read operation might not fill the buffer, and in fact it might not\n     * read any bytes at all.  Whether or not it does so depends upon the\n     * nature and state of the channel.  A socket channel in non-blocking mode,\n     * for example, cannot read any more bytes than are immediately available\n     * from the socket's input buffer; similarly, a file channel cannot read\n     * any more bytes than remain in the file.  It is guaranteed, however, that\n     * if a channel is in blocking mode and there is at least one byte\n     * remaining in the buffer then this method will block until at least one\n     * byte is read.\n     *\n     * <p> This method may be invoked at any time.  If another thread has\n     * already initiated a read operation upon this channel, however, then an\n     * invocation of this method will block until the first operation is\n     * complete. </p>\n     *\n     * @param  dst\n     *         The buffer into which bytes are to be transferred\n     *\n     * @return  The number of bytes read, possibly zero, or {@code -1} if the\n     *          channel has reached end-of-stream\n     *\n     * @throws  NonReadableChannelException\n     *          If this channel was not opened for reading\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes this channel\n     *          while the read operation is in progress\n     *\n     * @throws  ClosedByInterruptException\n     *          If another thread interrupts the current thread\n     *          while the read operation is in progress, thereby\n     *          closing the channel and setting the current thread's\n     *          interrupt status\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int read(ByteBuffer dst) throws IOException" ],
  "variableNames" : [ ]
}