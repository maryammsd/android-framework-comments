{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/PriorityBlockingQueue.java",
  "packageName" : "java.util.concurrent",
  "className" : "PriorityBlockingQueue",
  "comment" : "\n * An unbounded {@linkplain BlockingQueue blocking queue} that uses\n * the same ordering rules as class {@link PriorityQueue} and supplies\n * blocking retrieval operations.  While this queue is logically\n * unbounded, attempted additions may fail due to resource exhaustion\n * (causing {@code OutOfMemoryError}). This class does not permit\n * {@code null} elements.  A priority queue relying on {@linkplain\n * Comparable natural ordering} also does not permit insertion of\n * non-comparable objects (doing so results in\n * {@code ClassCastException}).\n *\n * <p>This class and its iterator implement all of the <em>optional</em>\n * methods of the {@link Collection} and {@link Iterator} interfaces.\n * The Iterator provided in method {@link #iterator()} and the\n * Spliterator provided in method {@link #spliterator()} are <em>not</em>\n * guaranteed to traverse the elements of the PriorityBlockingQueue in\n * any particular order. If you need ordered traversal, consider using\n * {@code Arrays.sort(pq.toArray())}.  Also, method {@code drainTo} can\n * be used to <em>remove</em> some or all elements in priority order and\n * place them in another collection.\n *\n * <p>Operations on this class make no guarantees about the ordering\n * of elements with equal priority. If you need to enforce an\n * ordering, you can define custom classes or comparators that use a\n * secondary key to break ties in primary priority values.  For\n * example, here is a class that applies first-in-first-out\n * tie-breaking to comparable elements. To use it, you would insert a\n * {@code new FIFOEntry(anEntry)} instead of a plain entry object.\n *\n * <pre> {@code\n * class FIFOEntry<E extends Comparable<? super E>>\n *     implements Comparable<FIFOEntry<E>> {\n *   static final AtomicLong seq = new AtomicLong();\n *   final long seqNum;\n *   final E entry;\n *   public FIFOEntry(E entry) {\n *     seqNum = seq.getAndIncrement();\n *     this.entry = entry;\n *   }\n *   public E getEntry() { return entry; }\n *   public int compareTo(FIFOEntry<E> other) {\n *     int res = entry.compareTo(other.entry);\n *     if (res == 0 && other.entry != this.entry)\n *       res = (seqNum < other.seqNum ? -1 : 1);\n *     return res;\n *   }\n * }}</pre>\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <E> the type of elements held in this queue\n ",
  "links" : [ "#iterator()", "java.util.Iterator", "java.util.PriorityQueue", "#spliterator()", "java.util.Collection" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_INITIAL_CAPACITY",
    "type" : "int",
    "comment" : "\n     * Default array capacity.\n     ",
    "links" : [ ]
  }, {
    "name" : "queue",
    "type" : "Object[]",
    "comment" : "\n     * Priority queue represented as a balanced binary heap: the two\n     * children of queue[n] are queue[2*n+1] and queue[2*(n+1)].  The\n     * priority queue is ordered by comparator, or by the elements'\n     * natural ordering, if comparator is null: For each node n in the\n     * heap and each descendant d of n, n <= d.  The element with the\n     * lowest value is in queue[0], assuming the queue is nonempty.\n     ",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : "\n     * The number of elements in the priority queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "comparator",
    "type" : "Comparator<? super E>",
    "comment" : "\n     * The comparator, or null if priority queue uses elements'\n     * natural ordering.\n     ",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "ReentrantLock",
    "comment" : "\n     * Lock used for all public operations.\n     ",
    "links" : [ ]
  }, {
    "name" : "notEmpty",
    "type" : "Condition",
    "comment" : "\n     * Condition for blocking when empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "allocationSpinLock",
    "type" : "int",
    "comment" : "\n     * Spinlock for allocation, acquired via CAS.\n     ",
    "links" : [ ]
  }, {
    "name" : "q",
    "type" : "PriorityQueue<E>",
    "comment" : "\n     * A plain PriorityQueue used only for serialization,\n     * to maintain compatibility with previous versions\n     * of this class. Non-null only during serialization/deserialization.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOCATIONSPINLOCK",
    "type" : "VarHandle",
    "comment" : " VarHandle mechanics",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Object[] ensureNonEmpty(Object[] es)",
    "returnType" : "Object[]",
    "comment" : " Ensures that queue[0] exists, helping peek() and poll(). ",
    "links" : [ ]
  }, {
    "name" : "private void tryGrow(Object[] array, int oldCap)",
    "returnType" : "void",
    "comment" : "\n     * Tries to grow array to accommodate at least one more element\n     * (but normally expand by about 50%), giving up (allowing retry)\n     * on contention (which we expect to be rare). Call only while\n     * holding lock.\n     *\n     * @param array the heap array\n     * @param oldCap the length of the array\n     ",
    "links" : [ ]
  }, {
    "name" : "private E dequeue()",
    "returnType" : "E",
    "comment" : "\n     * Mechanics for poll().  Call only while holding lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void siftUpComparable(int k, T x, Object[] es)",
    "returnType" : "void",
    "comment" : "\n     * Inserts item x at position k, maintaining heap invariant by\n     * promoting x up the tree until it is greater than or equal to\n     * its parent, or is the root.\n     *\n     * To simplify and speed up coercions and comparisons, the\n     * Comparable and Comparator versions are separated into different\n     * methods that are otherwise identical. (Similarly for siftDown.)\n     *\n     * @param k the position to fill\n     * @param x the item to insert\n     * @param es the heap array\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void siftUpUsingComparator(int k, T x, Object[] es, Comparator<? super T> cmp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void siftDownComparable(int k, T x, Object[] es, int n)",
    "returnType" : "void",
    "comment" : "\n     * Inserts item x at position k, maintaining heap invariant by\n     * demoting x down the tree repeatedly until it is less than or\n     * equal to its children or is a leaf.\n     *\n     * @param k the position to fill\n     * @param x the item to insert\n     * @param es the heap array\n     * @param n heap size\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void siftDownUsingComparator(int k, T x, Object[] es, int n, Comparator<? super T> cmp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void heapify()",
    "returnType" : "void",
    "comment" : "\n     * Establishes the heap invariant (described above) in the entire tree,\n     * assuming nothing about the order of the elements prior to the call.\n     * This classic algorithm due to Floyd (1964) is known to be O(size).\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this priority queue.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws ClassCastException if the specified element cannot be compared\n     *         with elements currently in the priority queue according to the\n     *         priority queue's ordering\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.Collection#add" ]
  }, {
    "name" : "public boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this priority queue.\n     * As the queue is unbounded, this method will never return {@code false}.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Queue#offer})\n     * @throws ClassCastException if the specified element cannot be compared\n     *         with elements currently in the priority queue according to the\n     *         priority queue's ordering\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.AbstractQueue#offer" ]
  }, {
    "name" : "public void put(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element into this priority queue.\n     * As the queue is unbounded, this method will never block.\n     *\n     * @param e the element to add\n     * @throws ClassCastException if the specified element cannot be compared\n     *         with elements currently in the priority queue according to the\n     *         priority queue's ordering\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(E e, long timeout, TimeUnit unit)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this priority queue.\n     * As the queue is unbounded, this method will never block or\n     * return {@code false}.\n     *\n     * @param e the element to add\n     * @param timeout This parameter is ignored as the method never blocks\n     * @param unit This parameter is ignored as the method never blocks\n     * @return {@code true} (as specified by\n     *  {@link BlockingQueue#offer(Object,long,TimeUnit) BlockingQueue.offer})\n     * @throws ClassCastException if the specified element cannot be compared\n     *         with elements currently in the priority queue according to the\n     *         priority queue's ordering\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.concurrent.BlockingQueue#offer(Object" ]
  }, {
    "name" : "public E poll()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E take() throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E peek()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Comparator<? super E> comparator()",
    "returnType" : "Comparator<? super E>",
    "comment" : "\n     * Returns the comparator used to order the elements in this queue,\n     * or {@code null} if this queue uses the {@linkplain Comparable\n     * natural ordering} of its elements.\n     *\n     * @return the comparator used to order the elements in this queue,\n     *         or {@code null} if this queue uses the natural\n     *         ordering of its elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int remainingCapacity()",
    "returnType" : "int",
    "comment" : "\n     * Always returns {@code Integer.MAX_VALUE} because\n     * a {@code PriorityBlockingQueue} is not capacity constrained.\n     * @return {@code Integer.MAX_VALUE} always\n     ",
    "links" : [ ]
  }, {
    "name" : "private int indexOf(Object o)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeAt(int i)",
    "returnType" : "void",
    "comment" : "\n     * Removes the ith element from queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a single instance of the specified element from this queue,\n     * if it is present.  More formally, removes an element {@code e} such\n     * that {@code o.equals(e)}, if this queue contains one or more such\n     * elements.  Returns {@code true} if and only if this queue contained\n     * the specified element (or equivalently, if this queue changed as a\n     * result of the call).\n     *\n     * @param o element to be removed from this queue, if present\n     * @return {@code true} if this queue changed as a result of the call\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeEq(Object o)",
    "returnType" : "void",
    "comment" : "\n     * Identity-based version for use in Itr.remove.\n     *\n     * @param o element to be removed from this queue, if present\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this queue contains the specified element.\n     * More formally, returns {@code true} if and only if this queue contains\n     * at least one element {@code e} such that {@code o.equals(e)}.\n     *\n     * @param o object to be checked for containment in this queue\n     * @return {@code true} if this queue contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c, int maxElements)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Atomically removes all of the elements from this queue.\n     * The queue will be empty after this call returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this queue.\n     * The returned array elements are in no particular order.\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this queue.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this queue\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this queue; the\n     * runtime type of the returned array is that of the specified array.\n     * The returned array elements are in no particular order.\n     * If the queue fits in the specified array, it is returned therein.\n     * Otherwise, a new array is allocated with the runtime type of the\n     * specified array and the size of this queue.\n     *\n     * <p>If this queue fits in the specified array with room to spare\n     * (i.e., the array has more elements than this queue), the element in\n     * the array immediately following the end of the queue is set to\n     * {@code null}.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a queue known to contain only strings.\n     * The following code can be used to dump the queue into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of the queue are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose\n     * @return an array containing all of the elements in this queue\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this queue\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this queue. The\n     * iterator does not return the elements in any particular order.\n     *\n     * <p>The returned iterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * @return an iterator over the elements in this queue\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves this queue to a stream (that is, serializes it).\n     *\n     * For compatibility with previous version of this class, elements\n     * are first copied to a java.util.PriorityQueue, which is then\n     * serialized.\n     *\n     * @param s the stream\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes this queue from a stream (that is, deserializes it).\n     * @param s the stream\n     * @throws ClassNotFoundException if the class of a serialized object\n     *         could not be found\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Returns a {@link Spliterator} over the elements in this queue.\n     * The spliterator does not traverse elements in any particular order\n     * (the {@link Spliterator#ORDERED ORDERED} characteristic is not reported).\n     *\n     * <p>The returned spliterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#SIZED} and\n     * {@link Spliterator#NONNULL}.\n     *\n     * @implNote\n     * The {@code Spliterator} additionally reports {@link Spliterator#SUBSIZED}.\n     *\n     * @return a {@code Spliterator} over the elements in this queue\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#NONNULL", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long[] nBits(int n)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setBit(long[] bits, int i)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isClear(long[] bits, int i)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean bulkRemove(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : " Implementation of bulk remove methods. ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Object[] ensureNonEmpty(Object[] es)", "private void tryGrow(Object[] array, int oldCap)", "private E dequeue()", "private static void siftUpComparable(int k, T x, Object[] es)", "private static void siftUpUsingComparator(int k, T x, Object[] es, Comparator<? super T> cmp)", "private static void siftDownComparable(int k, T x, Object[] es, int n)", "private static void siftDownUsingComparator(int k, T x, Object[] es, int n, Comparator<? super T> cmp)", "private void heapify()", "public boolean add(E e)", "public boolean offer(E e)", "public void put(E e)", "public boolean offer(E e, long timeout, TimeUnit unit)", "public E poll()", "public E take() throws InterruptedException", "public E poll(long timeout, TimeUnit unit) throws InterruptedException", "public E peek()", "public Comparator<? super E> comparator()", "public int size()", "public int remainingCapacity()", "private int indexOf(Object o)", "private void removeAt(int i)", "public boolean remove(Object o)", " void removeEq(Object o)", "public boolean contains(Object o)", "public String toString()", "public int drainTo(Collection<? super E> c)", "public int drainTo(Collection<? super E> c, int maxElements)", "public void clear()", "public Object[] toArray()", "public T[] toArray(T[] a)", "public Iterator<E> iterator()", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", "public Spliterator<E> spliterator()", "public boolean removeIf(Predicate<? super E> filter)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "private static long[] nBits(int n)", "private static void setBit(long[] bits, int i)", "private static boolean isClear(long[] bits, int i)", "private boolean bulkRemove(Predicate<? super E> filter)", "public void forEach(Consumer<? super E> action)" ],
  "variableNames" : [ "serialVersionUID", "DEFAULT_INITIAL_CAPACITY", "queue", "size", "comparator", "lock", "notEmpty", "allocationSpinLock", "q", "ALLOCATIONSPINLOCK" ]
}