{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/StringTrieBuilder.java",
  "packageName" : "android.icu.util",
  "className" : "Node",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "offset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract int hashCode()",
    "returnType" : "int",
    "comment" : " hashCode() and equals() for use with registerNode() and the nodes hash.",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : " Base class equals() compares the actual class types.",
    "links" : [ ]
  }, {
    "name" : "public Node add(StringTrieBuilder builder, CharSequence s, int start, int sValue)",
    "returnType" : "Node",
    "comment" : "\n         * Recursive method for adding a new (string, value) pair.\n         * Matches the remaining part of s from start,\n         * and adds a new node where there is a mismatch.\n         * @return this or a replacement Node\n         ",
    "links" : [ ]
  }, {
    "name" : "public Node register(StringTrieBuilder builder)",
    "returnType" : "Node",
    "comment" : "\n         * Recursive method for registering unique nodes,\n         * after all (string, value) pairs have been added.\n         * Final-value nodes are pre-registered while add()ing (string, value) pairs.\n         * Other nodes created while add()ing registerNode() themselves later\n         * and might replace themselves with new types of nodes for write()ing.\n         * @return The registered version of this node which implements write().\n         ",
    "links" : [ ]
  }, {
    "name" : "public int markRightEdgesFirst(int edgeNumber)",
    "returnType" : "int",
    "comment" : "\n         * Traverses the Node graph and numbers branch edges, with rightmost edges first.\n         * This is to avoid writing a duplicate node twice.\n         *\n         * Branch nodes in this trie data structure are not symmetric.\n         * Most branch edges \"jump\" to other nodes but the rightmost branch edges\n         * just continue without a jump.\n         * Therefore, write() must write the rightmost branch edge last\n         * (trie units are written backwards), and must write it at that point even if\n         * it is a duplicate of a node previously written elsewhere.\n         *\n         * This function visits and marks right branch edges first.\n         * Edges are numbered with increasingly negative values because we share the\n         * offset field which gets positive values when nodes are written.\n         * A branch edge also remembers the first number for any of its edges.\n         *\n         * When a further-left branch edge has a number in the range of the rightmost\n         * edge's numbers, then it will be written as part of the required right edge\n         * and we can avoid writing it first.\n         *\n         * After root.markRightEdgesFirst(-1) the offsets of all nodes are negative\n         * edge numbers.\n         *\n         * @param edgeNumber The first edge number for this node and its sub-nodes.\n         * @return An edge number that is at least the maximum-negative\n         *         of the input edge number and the numbers of this node and all of its sub-nodes.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void write(StringTrieBuilder builder)",
    "returnType" : "void",
    "comment" : " write() must set the offset to a positive value.",
    "links" : [ ]
  }, {
    "name" : "public final void writeUnlessInsideRightEdge(int firstRight, int lastRight, StringTrieBuilder builder)",
    "returnType" : "void",
    "comment" : " See markRightEdgesFirst.",
    "links" : [ ]
  }, {
    "name" : "public final int getOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int hashCode()", "public boolean equals(Object other)", "public Node add(StringTrieBuilder builder, CharSequence s, int start, int sValue)", "public Node register(StringTrieBuilder builder)", "public int markRightEdgesFirst(int edgeNumber)", "public abstract void write(StringTrieBuilder builder)", "public final void writeUnlessInsideRightEdge(int firstRight, int lastRight, StringTrieBuilder builder)", "public final int getOffset()" ],
  "variableNames" : [ "offset" ]
}