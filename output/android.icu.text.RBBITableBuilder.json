{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/RBBITableBuilder.java",
  "packageName" : "android.icu.text",
  "className" : "RBBITableBuilder",
  "comment" : "\n *  This class is part of the RBBI rule compiler.\n *  It builds the state transition table used by the RBBI runtime\n *  from the expression syntax tree generated by the rule scanner.\n *\n *  This class is part of the RBBI implementation only.\n *  There is no user-visible public API here.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "fRB",
    "type" : "RBBIRuleBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fRootIx",
    "type" : "int",
    "comment" : " The array index into RBBIRuleBuilder.fTreeRoots for the parse tree to operate on. ",
    "links" : [ ]
  }, {
    "name" : "fDStates",
    "type" : "List<RBBIStateDescriptor>",
    "comment" : " D states (Aho's terminology). Index is state number. ",
    "links" : [ ]
  }, {
    "name" : "fSafeTable",
    "type" : "List<short[]>",
    "comment" : " Synthesized safe table, a List of row arrays.  ",
    "links" : [ ]
  }, {
    "name" : "MAX_STATE_FOR_8BITS_TABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fLookAheadRuleMap",
    "type" : "int[]",
    "comment" : " Map from rule number (fVal in look ahead nodes) to sequential lookahead index. ",
    "links" : [ ]
  }, {
    "name" : "fLASlotsInUse",
    "type" : "int",
    "comment" : " Counter used when assigning lookahead rule numbers.\n     * Contains the last look-ahead number already in use.\n     * The first look-ahead number is 2; Number 1 (ACCEPTING_UNCONDITIONAL) is reserved\n     * for non-lookahead accepting states. See the declarations of RBBIStateTableRowT.   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void buildForwardTable()",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void calcNullable(RBBINode n)",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void calcFirstPos(RBBINode n)",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void calcLastPos(RBBINode n)",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void calcFollowPos(RBBINode n)",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void addRuleRootNodes(List<RBBINode> dest, RBBINode node)",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void calcChainedFollowPos(RBBINode tree, RBBINode endMarkNode)",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void bofFixup()",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void buildStateTable()",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void mapLookAheadRules()",
    "returnType" : "void",
    "comment" : "\n       * mapLookAheadRules\n       *\n       ",
    "links" : [ ]
  }, {
    "name" : " void flagAcceptingStates()",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void flagLookAheadStates()",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void flagTaggedStates()",
    "returnType" : "void",
    "comment" : "-----------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void mergeRuleStatusVals()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void printPosSets(RBBINode n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean findDuplCharClassFrom(RBBIRuleBuilder.IntPair categories)",
    "returnType" : "boolean",
    "comment" : "\n        *  Find duplicate (redundant) character classes. Begin looking with categories.first.\n        *  Duplicates, if found are returned in the categories parameter.\n        *  This is an iterator-like function, used to identify character classes\n        *  (state table columns) that can be eliminated.\n        *  @param categories in/out parameter, specifies where to start looking for duplicates,\n        *                and returns the first pair of duplicates found, if any.\n        *  @return true if duplicate char classes were found, false otherwise.\n        *  @hide draft / provisional / internal are hidden on Android\n        ",
    "links" : [ ]
  }, {
    "name" : " void removeColumn(int column)",
    "returnType" : "void",
    "comment" : "\n        * Remove a column from the state table. Used when two character categories\n        * have been found equivalent, and merged together, to eliminate the unneeded table column.\n        ",
    "links" : [ ]
  }, {
    "name" : " boolean findDuplicateState(RBBIRuleBuilder.IntPair states)",
    "returnType" : "boolean",
    "comment" : "\n        *  Find duplicate (redundant) states, beginning at the specified pair,\n        *  within this state table. This is an iterator-like function, used to\n        *  identify states (state table rows) that can be eliminated.\n        *  @param states in/out parameter, specifies where to start looking for duplicates,\n        *                and returns the first pair of duplicates found, if any.\n        *  @return true if duplicate states were found, false otherwise.\n        *  @hide draft / provisional / internal are hidden on Android\n        ",
    "links" : [ ]
  }, {
    "name" : " boolean findDuplicateSafeState(RBBIRuleBuilder.IntPair states)",
    "returnType" : "boolean",
    "comment" : "\n        *  Find the next duplicate state in the safe reverse table. An iterator function.\n        *  @param states in/out parameter, specifies where to start looking for duplicates,\n        *                and returns the first pair of duplicates found, if any.\n        *  @return true if duplicate states were found, false otherwise.\n        *  @hide draft / provisional / internal are hidden on Android\n        ",
    "links" : [ ]
  }, {
    "name" : " void removeState(IntPair duplStates)",
    "returnType" : "void",
    "comment" : "\n        * Remove a duplicate state (row) from the state table. All references to the deleted (second) state\n        * are redirected to first state.\n        * @param duplStates The duplicate pair of states.\n        * @hide draft / provisional / internal are hidden on Android\n        ",
    "links" : [ ]
  }, {
    "name" : " void removeSafeState(IntPair duplStates)",
    "returnType" : "void",
    "comment" : "\n        * Remove a duplicate state from the safe table.\n        * @param duplStates The duplicate pair of states.  The first is kept, the second is removed.\n        *                   All references to the second in the state table are retargeted\n        *                   to the first.\n        * @hide draft / provisional / internal are hidden on Android\n        ",
    "links" : [ ]
  }, {
    "name" : " int removeDuplicateStates()",
    "returnType" : "int",
    "comment" : "\n        *  Check for, and remove duplicate states (table rows).\n        *  @return the number of states removed.\n        *  @hide draft / provisional / internal are hidden on Android\n        ",
    "links" : [ ]
  }, {
    "name" : " int getTableSize()",
    "returnType" : "int",
    "comment" : "\n        *  Calculate the size in bytes of the serialized form of this state transition table,\n        *  which is identical to the ICU4C runtime form.\n        *  Refer to common/rbbidata.h from ICU4C for the declarations of the structures\n        *  being matched by this calculation.\n        ",
    "links" : [ ]
  }, {
    "name" : " RBBIDataWrapper.RBBIStateTable exportTable()",
    "returnType" : "RBBIDataWrapper.RBBIStateTable",
    "comment" : "\n        * Create a RBBIDataWrapper.RBBIStateTable for a newly compiled table.\n        * RBBIDataWrapper.RBBIStateTable is similar to struct RBBIStateTable in ICU4C,\n        * in common/rbbidata.h\n        ",
    "links" : [ ]
  }, {
    "name" : " void buildSafeReverseTable()",
    "returnType" : "void",
    "comment" : "\n        *   Synthesize a safe state table from the main state table.\n        ",
    "links" : [ ]
  }, {
    "name" : " int getSafeTableSize()",
    "returnType" : "int",
    "comment" : "\n        *  Calculate the size of the runtime form of this safe state table.\n        ",
    "links" : [ ]
  }, {
    "name" : " RBBIDataWrapper.RBBIStateTable exportSafeTable()",
    "returnType" : "RBBIDataWrapper.RBBIStateTable",
    "comment" : "\n        *  Create a RBBIDataWrapper.RBBIStateTable for the safe reverse table.\n        *  RBBIDataWrapper.RBBIStateTable is similar to struct RBBIStateTable in ICU4C,\n        *  in common/rbbidata.h\n        ",
    "links" : [ ]
  }, {
    "name" : " void printSet(Collection<RBBINode> s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void printStates()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void printReverseTable()",
    "returnType" : "void",
    "comment" : "\n        * Debug Function.  Dump the fully constructed safe reverse table.\n        ",
    "links" : [ ]
  }, {
    "name" : " void printRuleStatusTable()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void buildForwardTable()", " void calcNullable(RBBINode n)", " void calcFirstPos(RBBINode n)", " void calcLastPos(RBBINode n)", " void calcFollowPos(RBBINode n)", " void addRuleRootNodes(List<RBBINode> dest, RBBINode node)", " void calcChainedFollowPos(RBBINode tree, RBBINode endMarkNode)", " void bofFixup()", " void buildStateTable()", " void mapLookAheadRules()", " void flagAcceptingStates()", " void flagLookAheadStates()", " void flagTaggedStates()", " void mergeRuleStatusVals()", " void printPosSets(RBBINode n)", " boolean findDuplCharClassFrom(RBBIRuleBuilder.IntPair categories)", " void removeColumn(int column)", " boolean findDuplicateState(RBBIRuleBuilder.IntPair states)", " boolean findDuplicateSafeState(RBBIRuleBuilder.IntPair states)", " void removeState(IntPair duplStates)", " void removeSafeState(IntPair duplStates)", " int removeDuplicateStates()", " int getTableSize()", " RBBIDataWrapper.RBBIStateTable exportTable()", " void buildSafeReverseTable()", " int getSafeTableSize()", " RBBIDataWrapper.RBBIStateTable exportSafeTable()", " void printSet(Collection<RBBINode> s)", " void printStates()", " void printReverseTable()", " void printRuleStatusTable()" ],
  "variableNames" : [ "fRB", "fRootIx", "fDStates", "fSafeTable", "MAX_STATE_FOR_8BITS_TABLE", "fLookAheadRuleMap", "fLASlotsInUse" ]
}