{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/NFSubstitution.java",
  "packageName" : "android.icu.text",
  "className" : "IntegralPartSubstitution",
  "comment" : "\n * A substitution that formats the number's integral part.  This is\n * represented by &lt;&lt; in a fraction rule.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public long transformNumber(long number)",
    "returnType" : "long",
    "comment" : "\n     * Returns the number's integral part. (For a long, that's just the\n     * number unchanged.)\n     * @param number The number being formatted\n     * @return \"number\" unchanged\n     ",
    "links" : [ ]
  }, {
    "name" : "public double transformNumber(double number)",
    "returnType" : "double",
    "comment" : "\n     * Returns the number's integral part.\n     * @param number The integral part of the number being formatted\n     * @return floor(number)\n     ",
    "links" : [ ]
  }, {
    "name" : "public double composeRuleValue(double newRuleValue, double oldRuleValue)",
    "returnType" : "double",
    "comment" : "\n     * Returns the sum of the result of parsing the substitution and the\n     * owning rule's base value.  (The owning rule, at best, has an\n     * integral-part substitution and a fractional-part substitution,\n     * so we can safely just add them.)\n     * @param newRuleValue The result of matching the substitution\n     * @param oldRuleValue The partial result of the parse prior to\n     * calling this function\n     * @return oldRuleValue + newRuleValue\n     ",
    "links" : [ ]
  }, {
    "name" : "public double calcUpperBound(double oldUpperBound)",
    "returnType" : "double",
    "comment" : "\n     * An IntegralPartSubstitution sets the upper bound back up so all\n     * potentially matching rules are considered.\n     * @param oldUpperBound Ignored\n     * @return Double.MAX_VALUE\n     ",
    "links" : [ ]
  }, {
    "name" : " char tokenChar()",
    "returnType" : "char",
    "comment" : "\n     * An IntegralPartSubstitution's token character is &lt;\n     * @return '&lt;'\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long transformNumber(long number)", "public double transformNumber(double number)", "public double composeRuleValue(double newRuleValue, double oldRuleValue)", "public double calcUpperBound(double oldUpperBound)", " char tokenChar()" ],
  "variableNames" : [ ]
}