{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/chrono/ChronoLocalDateTime.java",
  "packageName" : "java.time.chrono",
  "className" : "ChronoLocalDateTime",
  "comment" : "\n * A date-time without a time-zone in an arbitrary chronology, intended\n * for advanced globalization use cases.\n * <p>\n * <b>Most applications should declare method signatures, fields and variables\n * as {@link LocalDateTime}, not this interface.</b>\n * <p>\n * A {@code ChronoLocalDateTime} is the abstract representation of a local date-time\n * where the {@code Chronology chronology}, or calendar system, is pluggable.\n * The date-time is defined in terms of fields expressed by {@link TemporalField},\n * where most common implementations are defined in {@link ChronoField}.\n * The chronology defines how the calendar system operates and the meaning of\n * the standard fields.\n *\n * <h2>When to use this interface</h2>\n * The design of the API encourages the use of {@code LocalDateTime} rather than this\n * interface, even in the case where the application needs to deal with multiple\n * calendar systems. The rationale for this is explored in detail in {@link ChronoLocalDate}.\n * <p>\n * Ensure that the discussion in {@code ChronoLocalDate} has been read and understood\n * before using this interface.\n *\n * @implSpec\n * This interface must be implemented with care to ensure other classes operate correctly.\n * All implementations that can be instantiated must be final, immutable and thread-safe.\n * Subclasses should be Serializable wherever possible.\n *\n * @param <D> the concrete type for the date of this date-time\n * @since 1.8\n ",
  "links" : [ "java.time.temporal.ChronoField", "java.time.chrono.ChronoLocalDate", "java.time.temporal.TemporalField", "java.time.LocalDateTime" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static Comparator<ChronoLocalDateTime<?>> timeLineOrder()",
    "returnType" : "Comparator<ChronoLocalDateTime<?>>",
    "comment" : "\n     * Gets a comparator that compares {@code ChronoLocalDateTime} in\n     * time-line order ignoring the chronology.\n     * <p>\n     * This comparator differs from the comparison in {@link #compareTo} in that it\n     * only compares the underlying date-time and not the chronology.\n     * This allows dates in different calendar systems to be compared based\n     * on the position of the date-time on the local time-line.\n     * The underlying comparison is equivalent to comparing the epoch-day and nano-of-day.\n     *\n     * @return a comparator that compares in time-line order ignoring the chronology\n     * @see #isAfter\n     * @see #isBefore\n     * @see #isEqual\n     ",
    "links" : [ "#compareTo" ]
  }, {
    "name" : " static ChronoLocalDateTime<?> from(TemporalAccessor temporal)",
    "returnType" : "ChronoLocalDateTime<?>",
    "comment" : "\n     * Obtains an instance of {@code ChronoLocalDateTime} from a temporal object.\n     * <p>\n     * This obtains a local date-time based on the specified temporal.\n     * A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n     * which this factory converts to an instance of {@code ChronoLocalDateTime}.\n     * <p>\n     * The conversion extracts and combines the chronology and the date-time\n     * from the temporal object. The behavior is equivalent to using\n     * {@link Chronology#localDateTime(TemporalAccessor)} with the extracted chronology.\n     * Implementations are permitted to perform optimizations such as accessing\n     * those fields that are equivalent to the relevant objects.\n     * <p>\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used as a query via method reference, {@code ChronoLocalDateTime::from}.\n     *\n     * @param temporal  the temporal object to convert, not null\n     * @return the date-time, not null\n     * @throws DateTimeException if unable to convert to a {@code ChronoLocalDateTime}\n     * @see Chronology#localDateTime(TemporalAccessor)\n     ",
    "links" : [ "java.time.temporal.TemporalQuery", "java.time.chrono.Chronology#localDateTime(TemporalAccessor)" ]
  }, {
    "name" : " Chronology getChronology()",
    "returnType" : "Chronology",
    "comment" : "\n     * Gets the chronology of this date-time.\n     * <p>\n     * The {@code Chronology} represents the calendar system in use.\n     * The era and other fields in {@link ChronoField} are defined by the chronology.\n     *\n     * @return the chronology, not null\n     ",
    "links" : [ "java.time.temporal.ChronoField" ]
  }, {
    "name" : " D toLocalDate()",
    "returnType" : "D",
    "comment" : "\n     * Gets the local date part of this date-time.\n     * <p>\n     * This returns a local date with the same year, month and day\n     * as this date-time.\n     *\n     * @return the date part of this date-time, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " LocalTime toLocalTime()",
    "returnType" : "LocalTime",
    "comment" : "\n     * Gets the local time part of this date-time.\n     * <p>\n     * This returns a local time with the same hour, minute, second and\n     * nanosecond as this date-time.\n     *\n     * @return the time part of this date-time, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isSupported(TemporalField field)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the specified field is supported.\n     * <p>\n     * This checks if the specified field can be queried on this date-time.\n     * If false, then calling the {@link #range(TemporalField) range},\n     * {@link #get(TemporalField) get} and {@link #with(TemporalField, long)}\n     * methods will throw an exception.\n     * <p>\n     * The set of supported fields is defined by the chronology and normally includes\n     * all {@code ChronoField} date and time fields.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n     * passing {@code this} as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param field  the field to check, null returns false\n     * @return true if the field can be queried, false if not\n     ",
    "links" : [ "#range(TemporalField)", "#get(TemporalField)", "#with(TemporalField" ]
  }, {
    "name" : " boolean isSupported(TemporalUnit unit)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the specified unit is supported.\n     * <p>\n     * This checks if the specified unit can be added to or subtracted from this date-time.\n     * If false, then calling the {@link #plus(long, TemporalUnit)} and\n     * {@link #minus(long, TemporalUnit) minus} methods will throw an exception.\n     * <p>\n     * The set of supported units is defined by the chronology and normally includes\n     * all {@code ChronoUnit} units except {@code FOREVER}.\n     * <p>\n     * If the unit is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n     * passing {@code this} as the argument.\n     * Whether the unit is supported is determined by the unit.\n     *\n     * @param unit  the unit to check, null returns false\n     * @return true if the unit can be added/subtracted, false if not\n     ",
    "links" : [ "#plus(long", "#minus(long" ]
  }, {
    "name" : " ChronoLocalDateTime<D> with(TemporalAdjuster adjuster)",
    "returnType" : "ChronoLocalDateTime<D>",
    "comment" : "\n     * {@inheritDoc}\n     * @throws DateTimeException {@inheritDoc}\n     * @throws ArithmeticException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDateTime<D> with(TemporalField field, long newValue)",
    "returnType" : "ChronoLocalDateTime<D>",
    "comment" : "\n     * {@inheritDoc}\n     * @throws DateTimeException {@inheritDoc}\n     * @throws ArithmeticException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDateTime<D> plus(TemporalAmount amount)",
    "returnType" : "ChronoLocalDateTime<D>",
    "comment" : "\n     * {@inheritDoc}\n     * @throws DateTimeException {@inheritDoc}\n     * @throws ArithmeticException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDateTime<D> plus(long amountToAdd, TemporalUnit unit)",
    "returnType" : "ChronoLocalDateTime<D>",
    "comment" : "\n     * {@inheritDoc}\n     * @throws DateTimeException {@inheritDoc}\n     * @throws ArithmeticException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDateTime<D> minus(TemporalAmount amount)",
    "returnType" : "ChronoLocalDateTime<D>",
    "comment" : "\n     * {@inheritDoc}\n     * @throws DateTimeException {@inheritDoc}\n     * @throws ArithmeticException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDateTime<D> minus(long amountToSubtract, TemporalUnit unit)",
    "returnType" : "ChronoLocalDateTime<D>",
    "comment" : "\n     * {@inheritDoc}\n     * @throws DateTimeException {@inheritDoc}\n     * @throws ArithmeticException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " R query(TemporalQuery<R> query)",
    "returnType" : "R",
    "comment" : "\n     * Queries this date-time using the specified query.\n     * <p>\n     * This queries this date-time using the specified query strategy object.\n     * The {@code TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     * <p>\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n     * specified query passing {@code this} as the argument.\n     *\n     * @param <R> the type of the result\n     * @param query  the query to invoke, not null\n     * @return the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query (defined by the query)\n     * @throws ArithmeticException if numeric overflow occurs (defined by the query)\n     ",
    "links" : [ "java.time.temporal.TemporalQuery#queryFrom(TemporalAccessor)" ]
  }, {
    "name" : " Temporal adjustInto(Temporal temporal)",
    "returnType" : "Temporal",
    "comment" : "\n     * Adjusts the specified temporal object to have the same date and time as this object.\n     * <p>\n     * This returns a temporal object of the same observable type as the input\n     * with the date and time changed to be the same as this.\n     * <p>\n     * The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}\n     * twice, passing {@link ChronoField#EPOCH_DAY} and\n     * {@link ChronoField#NANO_OF_DAY} as the fields.\n     * <p>\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#with(TemporalAdjuster)}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisLocalDateTime.adjustInto(temporal);\n     *   temporal = temporal.with(thisLocalDateTime);\n     * </pre>\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param temporal  the target object to be adjusted, not null\n     * @return the adjusted object, not null\n     * @throws DateTimeException if unable to make the adjustment\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ "java.time.temporal.Temporal#with(TemporalField", "java.time.temporal.ChronoField#EPOCH_DAY", "java.time.temporal.ChronoField#NANO_OF_DAY", "java.time.temporal.Temporal#with(TemporalAdjuster)" ]
  }, {
    "name" : " String format(DateTimeFormatter formatter)",
    "returnType" : "String",
    "comment" : "\n     * Formats this date-time using the specified formatter.\n     * <p>\n     * This date-time will be passed to the formatter to produce a string.\n     * <p>\n     * The default implementation must behave as follows:\n     * <pre>\n     *  return formatter.format(this);\n     * </pre>\n     *\n     * @param formatter  the formatter to use, not null\n     * @return the formatted date-time string, not null\n     * @throws DateTimeException if an error occurs during printing\n     ",
    "links" : [ ]
  }, {
    "name" : " ChronoZonedDateTime<D> atZone(ZoneId zone)",
    "returnType" : "ChronoZonedDateTime<D>",
    "comment" : "\n     * Combines this time with a time-zone to create a {@code ChronoZonedDateTime}.\n     * <p>\n     * This returns a {@code ChronoZonedDateTime} formed from this date-time at the\n     * specified time-zone. The result will match this date-time as closely as possible.\n     * Time-zone rules, such as daylight savings, mean that not every local date-time\n     * is valid for the specified zone, thus the local date-time may be adjusted.\n     * <p>\n     * The local date-time is resolved to a single instant on the time-line.\n     * This is achieved by finding a valid offset from UTC/Greenwich for the local\n     * date-time as defined by the {@link ZoneRules rules} of the zone ID.\n     *<p>\n     * In most cases, there is only one valid offset for a local date-time.\n     * In the case of an overlap, where clocks are set back, there are two valid offsets.\n     * This method uses the earlier offset typically corresponding to \"summer\".\n     * <p>\n     * In the case of a gap, where clocks jump forward, there is no valid offset.\n     * Instead, the local date-time is adjusted to be later by the length of the gap.\n     * For a typical one hour daylight savings change, the local date-time will be\n     * moved one hour later into the offset typically corresponding to \"summer\".\n     * <p>\n     * To obtain the later offset during an overlap, call\n     * {@link ChronoZonedDateTime#withLaterOffsetAtOverlap()} on the result of this method.\n     *\n     * @param zone  the time-zone to use, not null\n     * @return the zoned date-time formed from this date-time, not null\n     ",
    "links" : [ "java.time.chrono.ChronoZonedDateTime#withLaterOffsetAtOverlap()", "java.time.zone.ZoneRules" ]
  }, {
    "name" : " Instant toInstant(ZoneOffset offset)",
    "returnType" : "Instant",
    "comment" : "\n     * Converts this date-time to an {@code Instant}.\n     * <p>\n     * This combines this local date-time and the specified offset to form\n     * an {@code Instant}.\n     * <p>\n     * This default implementation calculates from the epoch-day of the date and the\n     * second-of-day of the time.\n     *\n     * @param offset  the offset to use for the conversion, not null\n     * @return an {@code Instant} representing the same instant, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " long toEpochSecond(ZoneOffset offset)",
    "returnType" : "long",
    "comment" : "\n     * Converts this date-time to the number of seconds from the epoch\n     * of 1970-01-01T00:00:00Z.\n     * <p>\n     * This combines this local date-time and the specified offset to calculate the\n     * epoch-second value, which is the number of elapsed seconds from 1970-01-01T00:00:00Z.\n     * Instants on the time-line after the epoch are positive, earlier are negative.\n     * <p>\n     * This default implementation calculates from the epoch-day of the date and the\n     * second-of-day of the time.\n     *\n     * @param offset  the offset to use for the conversion, not null\n     * @return the number of seconds from the epoch of 1970-01-01T00:00:00Z\n     ",
    "links" : [ ]
  }, {
    "name" : " int compareTo(ChronoLocalDateTime<?> other)",
    "returnType" : "int",
    "comment" : "\n     * Compares this date-time to another date-time, including the chronology.\n     * <p>\n     * The comparison is based first on the underlying time-line date-time, then\n     * on the chronology.\n     * It is \"consistent with equals\", as defined by {@link Comparable}.\n     * <p>\n     * For example, the following is the comparator order:\n     * <ol>\n     * <li>{@code 2012-12-03T12:00 (ISO)}</li>\n     * <li>{@code 2012-12-04T12:00 (ISO)}</li>\n     * <li>{@code 2555-12-04T12:00 (ThaiBuddhist)}</li>\n     * <li>{@code 2012-12-05T12:00 (ISO)}</li>\n     * </ol>\n     * Values #2 and #3 represent the same date-time on the time-line.\n     * When two values represent the same date-time, the chronology ID is compared to distinguish them.\n     * This step is needed to make the ordering \"consistent with equals\".\n     * <p>\n     * If all the date-time objects being compared are in the same chronology, then the\n     * additional chronology stage is not required and only the local date-time is used.\n     * <p>\n     * This default implementation performs the comparison defined above.\n     *\n     * @param other  the other date-time to compare to, not null\n     * @return the comparator value, negative if less, positive if greater\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : " boolean isAfter(ChronoLocalDateTime<?> other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this date-time is after the specified date-time ignoring the chronology.\n     * <p>\n     * This method differs from the comparison in {@link #compareTo} in that it\n     * only compares the underlying date-time and not the chronology.\n     * This allows dates in different calendar systems to be compared based\n     * on the time-line position.\n     * <p>\n     * This default implementation performs the comparison based on the epoch-day\n     * and nano-of-day.\n     *\n     * @param other  the other date-time to compare to, not null\n     * @return true if this is after the specified date-time\n     ",
    "links" : [ "#compareTo" ]
  }, {
    "name" : " boolean isBefore(ChronoLocalDateTime<?> other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this date-time is before the specified date-time ignoring the chronology.\n     * <p>\n     * This method differs from the comparison in {@link #compareTo} in that it\n     * only compares the underlying date-time and not the chronology.\n     * This allows dates in different calendar systems to be compared based\n     * on the time-line position.\n     * <p>\n     * This default implementation performs the comparison based on the epoch-day\n     * and nano-of-day.\n     *\n     * @param other  the other date-time to compare to, not null\n     * @return true if this is before the specified date-time\n     ",
    "links" : [ "#compareTo" ]
  }, {
    "name" : " boolean isEqual(ChronoLocalDateTime<?> other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this date-time is equal to the specified date-time ignoring the chronology.\n     * <p>\n     * This method differs from the comparison in {@link #compareTo} in that it\n     * only compares the underlying date and time and not the chronology.\n     * This allows date-times in different calendar systems to be compared based\n     * on the time-line position.\n     * <p>\n     * This default implementation performs the comparison based on the epoch-day\n     * and nano-of-day.\n     *\n     * @param other  the other date-time to compare to, not null\n     * @return true if the underlying date-time is equal to the specified date-time on the timeline\n     ",
    "links" : [ "#compareTo" ]
  }, {
    "name" : " boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this date-time is equal to another date-time, including the chronology.\n     * <p>\n     * Compares this date-time with another ensuring that the date-time and chronology are the same.\n     *\n     * @param obj  the object to check, null returns false\n     * @return true if this is equal to the other date\n     ",
    "links" : [ ]
  }, {
    "name" : " int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * A hash code for this date-time.\n     *\n     * @return a suitable hash code\n     ",
    "links" : [ ]
  }, {
    "name" : " String toString()",
    "returnType" : "String",
    "comment" : "\n     * Outputs this date-time as a {@code String}.\n     * <p>\n     * The output will include the full local date-time.\n     *\n     * @return a string representation of this date-time, not null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static Comparator<ChronoLocalDateTime<?>> timeLineOrder()", " static ChronoLocalDateTime<?> from(TemporalAccessor temporal)", " Chronology getChronology()", " D toLocalDate()", " LocalTime toLocalTime()", " boolean isSupported(TemporalField field)", " boolean isSupported(TemporalUnit unit)", " ChronoLocalDateTime<D> with(TemporalAdjuster adjuster)", " ChronoLocalDateTime<D> with(TemporalField field, long newValue)", " ChronoLocalDateTime<D> plus(TemporalAmount amount)", " ChronoLocalDateTime<D> plus(long amountToAdd, TemporalUnit unit)", " ChronoLocalDateTime<D> minus(TemporalAmount amount)", " ChronoLocalDateTime<D> minus(long amountToSubtract, TemporalUnit unit)", " R query(TemporalQuery<R> query)", " Temporal adjustInto(Temporal temporal)", " String format(DateTimeFormatter formatter)", " ChronoZonedDateTime<D> atZone(ZoneId zone)", " Instant toInstant(ZoneOffset offset)", " long toEpochSecond(ZoneOffset offset)", " int compareTo(ChronoLocalDateTime<?> other)", " boolean isAfter(ChronoLocalDateTime<?> other)", " boolean isBefore(ChronoLocalDateTime<?> other)", " boolean isEqual(ChronoLocalDateTime<?> other)", " boolean equals(Object obj)", " int hashCode()", " String toString()" ],
  "variableNames" : [ ]
}