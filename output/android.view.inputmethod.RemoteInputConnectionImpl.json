{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/RemoteInputConnectionImpl.java",
  "packageName" : "android.view.inputmethod",
  "className" : "RemoteInputConnectionImpl",
  "comment" : "\n * Takes care of remote method invocations of {@link InputConnection} in the IME client side.\n *\n * <p>{@link android.inputmethodservice.RemoteInputConnection} code is executed in the IME process.\n * It makes {@link IRemoteInputConnection} binder calls under the hood.\n * {@link RemoteInputConnectionImpl} receives {@link IRemoteInputConnection} binder calls in the IME\n * client (editor app) process, and forwards them to {@link InputConnection} that the IME client\n * provided, on the {@link Looper} associated to the {@link InputConnection}.</p>\n *\n * <p>{@link com.android.internal.inputmethod.RemoteAccessibilityInputConnection} code is executed\n * in the {@link android.accessibilityservice.AccessibilityService} process. It makes\n * {@link com.android.internal.inputmethod.IRemoteAccessibilityInputConnection} binder calls under\n * the hood. {@link #mAccessibilityInputConnection} receives the binder calls in the IME client\n * (editor app) process, and forwards them to {@link InputConnection} that the IME client provided,\n * on the {@link Looper} associated to the {@link InputConnection}.</p>\n ",
  "links" : [ "com.android.internal.inputmethod.RemoteAccessibilityInputConnection", "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection", "android.accessibilityservice.AccessibilityService", "android.inputmethodservice.RemoteInputConnection", "android.os.Looper", "#mAccessibilityInputConnection", "android.view.inputmethod.RemoteInputConnectionImpl", "com.android.internal.inputmethod.IRemoteInputConnection" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_END_BATCH_EDIT_RETRY",
    "type" : "int",
    "comment" : "\n     * An upper limit of calling {@link InputConnection#endBatchEdit()}.\n     *\n     * <p>This is a safeguard against broken {@link InputConnection#endBatchEdit()} implementations,\n     * which are real as we've seen in Bug 208941904.  If the retry count reaches to the number\n     * defined here, we fall back into {@link InputMethodManager#restartInput(View)} as a\n     * workaround.</p>\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager#restartInput(View)", "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection#endBatchEdit()" ]
  }, {
    "name" : "mInputConnectionRef",
    "type" : "AtomicReference<InputConnection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeactivateRequested",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mH",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentInputMethodManager",
    "type" : "InputMethodManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServedView",
    "type" : "WeakReference<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentSessionId",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasPendingInvalidation",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsCursorAnchorInfoMonitoring",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasPendingImmediateCursorAnchorInfoUpdate",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBeamer",
    "type" : "CancellationSignalBeamer.Receiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityInputConnection",
    "type" : "IRemoteAccessibilityInputConnection",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public InputConnection getInputConnection()",
    "returnType" : "InputConnection",
    "comment" : "\n     * @return {@link InputConnection} to which incoming IPCs will be dispatched.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection" ]
  }, {
    "name" : "public boolean hasPendingInvalidation()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if there is a pending {@link InputMethodManager#invalidateInput(View)}\n     * call.\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager#invalidateInput(View)" ]
  }, {
    "name" : "private boolean isFinished()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} until the target {@link InputConnection} receives\n     * {@link InputConnection#closeConnection()} as a result of {@link #deactivate()}.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection", "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection#closeConnection()", "#deactivate()" ]
  }, {
    "name" : "private View getServedView()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAssociatedWith(@Nullable View view)",
    "returnType" : "boolean",
    "comment" : "\n     * Queries if the given {@link View} is associated with this {@link RemoteInputConnectionImpl}\n     * or not.\n     *\n     * @param view {@link View}.\n     * @return {@code true} if the given {@link View} is not null and is associated with this\n     *         {@link RemoteInputConnectionImpl}.\n     ",
    "links" : [ "android.view.View", "android.view.inputmethod.RemoteInputConnectionImpl" ]
  }, {
    "name" : "public boolean resetHasPendingImmediateCursorAnchorInfoUpdate()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets and resets {@link #mHasPendingImmediateCursorAnchorInfoUpdate}.\n     *\n     * <p>Calling this method resets {@link #mHasPendingImmediateCursorAnchorInfoUpdate}. This\n     * means that the second call of this method returns {@code false} unless the IME requests\n     * {@link android.view.inputmethod.CursorAnchorInfo} again with\n     * {@link InputConnection#CURSOR_UPDATE_IMMEDIATE} flag.</p>\n     *\n     * @return {@code true} if there is any pending request for\n     *         {@link android.view.inputmethod.CursorAnchorInfo} with\n     *         {@link InputConnection#CURSOR_UPDATE_IMMEDIATE} flag.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection#CURSOR_UPDATE_IMMEDIATE", "android.view.inputmethod.CursorAnchorInfo", "#mHasPendingImmediateCursorAnchorInfoUpdate" ]
  }, {
    "name" : "public boolean isCursorAnchorInfoMonitoring()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if there is any active request for\n     *         {@link android.view.inputmethod.CursorAnchorInfo} with\n     *         {@link InputConnection#CURSOR_UPDATE_MONITOR} flag.\n     ",
    "links" : [ "android.view.inputmethod.CursorAnchorInfo", "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection#CURSOR_UPDATE_MONITOR" ]
  }, {
    "name" : "public void scheduleInvalidateInput()",
    "returnType" : "void",
    "comment" : "\n     * Schedule a task to execute\n     * {@link InputMethodManager#doInvalidateInput(RemoteInputConnectionImpl, TextSnapshot, int)}\n     * on the associated Handler if not yet scheduled.\n     *\n     * <p>By calling {@link InputConnection#takeSnapshot()} directly from the message loop, we can\n     * make sure that application code is not modifying text context in a reentrant manner.</p>\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager#doInvalidateInput(RemoteInputConnectionImpl", "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection#takeSnapshot()" ]
  }, {
    "name" : "public void deactivate()",
    "returnType" : "void",
    "comment" : "\n     * Called when this object needs to be permanently deactivated.\n     *\n     * <p>Multiple invocations will be simply ignored.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancelCancellationSignal(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forgetCancellationSignal(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link InputMethodManager} to dump the editor state.\n     *\n     * @param proto {@link ProtoOutputStream} to which the editor state should be dumped.\n     * @param fieldId the ID to be passed to\n     *                {@link DumpableInputConnection#dumpDebug(ProtoOutputStream, long)}.\n     ",
    "links" : [ "android.util.proto.ProtoOutputStream", "android.view.inputmethod.DumpableInputConnection#dumpDebug(ProtoOutputStream", "android.view.inputmethod.InputMethodManager" ]
  }, {
    "name" : "public void dispatchReportFullscreenMode(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Invoke {@link InputConnection#reportFullscreenMode(boolean)} or schedule it on the target\n     * thread associated with {@link InputConnection#getHandler()}.\n     *\n     * @param enabled the parameter to be passed to\n     *                {@link InputConnection#reportFullscreenMode(boolean)}.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection#reportFullscreenMode(boolean)", "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection#getHandler()" ]
  }, {
    "name" : "public void getTextAfterCursor(InputConnectionCommandHeader header, int length, int flags, AndroidFuture future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getTextBeforeCursor(InputConnectionCommandHeader header, int length, int flags, AndroidFuture future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getSelectedText(InputConnectionCommandHeader header, int flags, AndroidFuture future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getSurroundingText(InputConnectionCommandHeader header, int beforeLength, int afterLength, int flags, AndroidFuture future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getCursorCapsMode(InputConnectionCommandHeader header, int reqModes, AndroidFuture future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getExtractedText(InputConnectionCommandHeader header, ExtractedTextRequest request, int flags, AndroidFuture future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void commitText(InputConnectionCommandHeader header, CharSequence text, int newCursorPosition)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void commitTextWithTextAttribute(InputConnectionCommandHeader header, CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void commitCompletion(InputConnectionCommandHeader header, CompletionInfo text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void commitCorrection(InputConnectionCommandHeader header, CorrectionInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSelection(InputConnectionCommandHeader header, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performEditorAction(InputConnectionCommandHeader header, int id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performContextMenuAction(InputConnectionCommandHeader header, int id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setComposingRegion(InputConnectionCommandHeader header, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setComposingRegionWithTextAttribute(InputConnectionCommandHeader header, int start, int end, @Nullable TextAttribute textAttribute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setComposingText(InputConnectionCommandHeader header, CharSequence text, int newCursorPosition)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setComposingTextWithTextAttribute(InputConnectionCommandHeader header, CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void finishComposingTextFromImm()",
    "returnType" : "void",
    "comment" : "\n     * Dispatches {@link InputConnection#finishComposingText()}.\n     *\n     * <p>This method is intended to be called only from {@link InputMethodManager}.</p>\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection#finishComposingText()", "android.view.inputmethod.InputMethodManager" ]
  }, {
    "name" : "public void finishComposingText(InputConnectionCommandHeader header)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendKeyEvent(InputConnectionCommandHeader header, KeyEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMetaKeyStates(InputConnectionCommandHeader header, int states)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deleteSurroundingText(InputConnectionCommandHeader header, int beforeLength, int afterLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deleteSurroundingTextInCodePoints(InputConnectionCommandHeader header, int beforeLength, int afterLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void beginBatchEdit(InputConnectionCommandHeader header)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endBatchEdit(InputConnectionCommandHeader header)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performSpellCheck(InputConnectionCommandHeader header)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performPrivateCommand(InputConnectionCommandHeader header, String action, Bundle data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performHandwritingGesture(InputConnectionCommandHeader header, ParcelableHandwritingGesture gestureContainer, ResultReceiver resultReceiver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void previewHandwritingGesture(InputConnectionCommandHeader header, ParcelableHandwritingGesture gestureContainer, IBinder cancellationSignalToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CancellationSignalBeamer.Receiver getCancellationSignalBeamer()",
    "returnType" : "CancellationSignalBeamer.Receiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestCursorUpdates(InputConnectionCommandHeader header, int cursorUpdateMode, int imeDisplayId, AndroidFuture future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestCursorUpdatesWithFilter(InputConnectionCommandHeader header, int cursorUpdateMode, int cursorUpdateFilter, int imeDisplayId, AndroidFuture future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean requestCursorUpdatesInternal(@InputConnection.CursorUpdateMode int cursorUpdateMode, @InputConnection.CursorUpdateFilter int cursorUpdateFilter, int imeDisplayId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestTextBoundsInfo(InputConnectionCommandHeader header, RectF bounds, @NonNull ResultReceiver resultReceiver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void commitContent(InputConnectionCommandHeader header, InputContentInfo inputContentInfo, int flags, Bundle opts, AndroidFuture future)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setImeConsumesInput(InputConnectionCommandHeader header, boolean imeConsumesInput)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replaceText(InputConnectionCommandHeader header, int start, int end, @NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IRemoteAccessibilityInputConnection asIRemoteAccessibilityInputConnection()",
    "returnType" : "IRemoteAccessibilityInputConnection",
    "comment" : "\n     * @return {@link IRemoteAccessibilityInputConnection} associated with this object.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection" ]
  }, {
    "name" : "private void dispatch(@NonNull Runnable runnable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchWithTracing(@NonNull String methodName, @NonNull Runnable runnable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchWithTracing(@NonNull String methodName, @NonNull AndroidFuture untypedFuture, @NonNull Supplier<T> supplier)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchWithTracing(@NonNull String methodName, @NonNull AndroidFuture untypedFuture, @NonNull Supplier<T> supplier, @Nullable Function<T, byte[]> dumpProtoProvider)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean useImeTracing()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public InputConnection getInputConnection()", "public boolean hasPendingInvalidation()", "private boolean isFinished()", "private View getServedView()", "public boolean isAssociatedWith(@Nullable View view)", "public boolean resetHasPendingImmediateCursorAnchorInfoUpdate()", "public boolean isCursorAnchorInfoMonitoring()", "public void scheduleInvalidateInput()", "public void deactivate()", "public void cancelCancellationSignal(IBinder token)", "public void forgetCancellationSignal(IBinder token)", "public String toString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public void dispatchReportFullscreenMode(boolean enabled)", "public void getTextAfterCursor(InputConnectionCommandHeader header, int length, int flags, AndroidFuture future)", "public void getTextBeforeCursor(InputConnectionCommandHeader header, int length, int flags, AndroidFuture future)", "public void getSelectedText(InputConnectionCommandHeader header, int flags, AndroidFuture future)", "public void getSurroundingText(InputConnectionCommandHeader header, int beforeLength, int afterLength, int flags, AndroidFuture future)", "public void getCursorCapsMode(InputConnectionCommandHeader header, int reqModes, AndroidFuture future)", "public void getExtractedText(InputConnectionCommandHeader header, ExtractedTextRequest request, int flags, AndroidFuture future)", "public void commitText(InputConnectionCommandHeader header, CharSequence text, int newCursorPosition)", "public void commitTextWithTextAttribute(InputConnectionCommandHeader header, CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)", "public void commitCompletion(InputConnectionCommandHeader header, CompletionInfo text)", "public void commitCorrection(InputConnectionCommandHeader header, CorrectionInfo info)", "public void setSelection(InputConnectionCommandHeader header, int start, int end)", "public void performEditorAction(InputConnectionCommandHeader header, int id)", "public void performContextMenuAction(InputConnectionCommandHeader header, int id)", "public void setComposingRegion(InputConnectionCommandHeader header, int start, int end)", "public void setComposingRegionWithTextAttribute(InputConnectionCommandHeader header, int start, int end, @Nullable TextAttribute textAttribute)", "public void setComposingText(InputConnectionCommandHeader header, CharSequence text, int newCursorPosition)", "public void setComposingTextWithTextAttribute(InputConnectionCommandHeader header, CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)", "public void finishComposingTextFromImm()", "public void finishComposingText(InputConnectionCommandHeader header)", "public void sendKeyEvent(InputConnectionCommandHeader header, KeyEvent event)", "public void clearMetaKeyStates(InputConnectionCommandHeader header, int states)", "public void deleteSurroundingText(InputConnectionCommandHeader header, int beforeLength, int afterLength)", "public void deleteSurroundingTextInCodePoints(InputConnectionCommandHeader header, int beforeLength, int afterLength)", "public void beginBatchEdit(InputConnectionCommandHeader header)", "public void endBatchEdit(InputConnectionCommandHeader header)", "public void performSpellCheck(InputConnectionCommandHeader header)", "public void performPrivateCommand(InputConnectionCommandHeader header, String action, Bundle data)", "public void performHandwritingGesture(InputConnectionCommandHeader header, ParcelableHandwritingGesture gestureContainer, ResultReceiver resultReceiver)", "public void previewHandwritingGesture(InputConnectionCommandHeader header, ParcelableHandwritingGesture gestureContainer, IBinder cancellationSignalToken)", "private CancellationSignalBeamer.Receiver getCancellationSignalBeamer()", "public void requestCursorUpdates(InputConnectionCommandHeader header, int cursorUpdateMode, int imeDisplayId, AndroidFuture future)", "public void requestCursorUpdatesWithFilter(InputConnectionCommandHeader header, int cursorUpdateMode, int cursorUpdateFilter, int imeDisplayId, AndroidFuture future)", "private boolean requestCursorUpdatesInternal(@InputConnection.CursorUpdateMode int cursorUpdateMode, @InputConnection.CursorUpdateFilter int cursorUpdateFilter, int imeDisplayId)", "public void requestTextBoundsInfo(InputConnectionCommandHeader header, RectF bounds, @NonNull ResultReceiver resultReceiver)", "public void commitContent(InputConnectionCommandHeader header, InputContentInfo inputContentInfo, int flags, Bundle opts, AndroidFuture future)", "public void setImeConsumesInput(InputConnectionCommandHeader header, boolean imeConsumesInput)", "public void replaceText(InputConnectionCommandHeader header, int start, int end, @NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)", "public IRemoteAccessibilityInputConnection asIRemoteAccessibilityInputConnection()", "private void dispatch(@NonNull Runnable runnable)", "private void dispatchWithTracing(@NonNull String methodName, @NonNull Runnable runnable)", "private void dispatchWithTracing(@NonNull String methodName, @NonNull AndroidFuture untypedFuture, @NonNull Supplier<T> supplier)", "private void dispatchWithTracing(@NonNull String methodName, @NonNull AndroidFuture untypedFuture, @NonNull Supplier<T> supplier, @Nullable Function<T, byte[]> dumpProtoProvider)", "private static boolean useImeTracing()" ],
  "variableNames" : [ "TAG", "DEBUG", "MAX_END_BATCH_EDIT_RETRY", "mInputConnectionRef", "mDeactivateRequested", "mLooper", "mH", "mParentInputMethodManager", "mServedView", "mCurrentSessionId", "mHasPendingInvalidation", "mIsCursorAnchorInfoMonitoring", "mHasPendingImmediateCursorAnchorInfoUpdate", "mBeamer", "mAccessibilityInputConnection" ]
}