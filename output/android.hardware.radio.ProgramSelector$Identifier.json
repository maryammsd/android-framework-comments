{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/radio/ProgramSelector.java",
  "packageName" : "android.hardware.radio",
  "className" : "Identifier",
  "comment" : "\n     * A single program identifier component, e.g. frequency or channel ID.\n     *\n     * <p>The long value field holds the value in format described in comments for\n     * IdentifierType constants.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValue",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Identifier>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n         * Type of an identifier.\n         *\n         * @return type of an identifier.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCategoryType()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether this identifier's type is considered a category when filtering\n         * ProgramLists for category entries.\n         *\n         * @see ProgramList.Filter#areCategoriesIncluded\n         * @return False if this identifier's type is not tunable (e.g. DAB ensemble or\n         *         vendor-specified type). True otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getValue()",
    "returnType" : "long",
    "comment" : "\n         * Value of an identifier.\n         *\n         * <p>Its meaning depends on identifier type, ie. for\n         * {@link #IDENTIFIER_TYPE_AMFM_FREQUENCY} type, the value is a frequency in kHz.\n         *\n         * <p>The range of a value depends on its type; it does not always require the whole long\n         * range. Casting to necessary type (ie. int) without range checking is correct in front-end\n         * code - any range violations are either errors in the framework or in the\n         * HAL implementation. For example, {@link #IDENTIFIER_TYPE_AMFM_FREQUENCY} always fits in\n         * int, as {@link Integer#MAX_VALUE} would mean 2.1THz.\n         *\n         * @return value of an identifier.\n         ",
    "links" : [ "#MAX_VALUE", "#IDENTIFIER_TYPE_AMFM_FREQUENCY" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getType()", "public boolean isCategoryType()", "public long getValue()", "public String toString()", "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ],
  "variableNames" : [ "mType", "mValue", "CREATOR" ]
}