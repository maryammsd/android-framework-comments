{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/SearchIterator.java",
  "packageName" : "android.icu.text",
  "className" : "SearchIterator",
  "comment" : "\n * <tt>SearchIterator</tt> is an abstract base class that provides \n * methods to search for a pattern within a text string. Instances of\n * <tt>SearchIterator</tt> maintain a current position and scan over the \n * target text, returning the indices the pattern is matched and the length \n * of each match.\n * <p>\n * <tt>SearchIterator</tt> defines a protocol for text searching. \n * Subclasses provide concrete implementations of various search algorithms. \n * For example, <tt>StringSearch</tt> implements language-sensitive pattern \n * matching based on the comparison rules defined in a \n * <tt>RuleBasedCollator</tt> object. \n * <p> \n * Other options for searching include using a BreakIterator to restrict \n * the points at which matches are detected.\n * <p>\n * <tt>SearchIterator</tt> provides an API that is similar to that of\n * other text iteration classes such as <tt>BreakIterator</tt>. Using \n * this class, it is easy to scan through text looking for all occurrences of \n * a given pattern. The following example uses a <tt>StringSearch</tt> \n * object to find all instances of \"fox\" in the target string. Any other \n * subclass of <tt>SearchIterator</tt> can be used in an identical \n * manner.\n * <pre><code>\n * String target = \"The quick brown fox jumped over the lazy fox\";\n * String pattern = \"fox\";\n * SearchIterator iter = new StringSearch(pattern, target);\n * for (int pos = iter.first(); pos != SearchIterator.DONE;\n *         pos = iter.next()) {\n *     System.out.println(\"Found match at \" + pos +\n *             \", length is \" + iter.getMatchLength());\n * }\n * </code></pre>\n * \n * @author Laura Werner, synwee\n * @see BreakIterator\n * @see RuleBasedCollator\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "breakIterator",
    "type" : "BreakIterator",
    "comment" : "\n     * The BreakIterator to define the boundaries of a logical match.\n     * This value can be a null.\n     * See class documentation for more information.\n     * @see #setBreakIterator(BreakIterator)\n     * @see #getBreakIterator\n     * @see BreakIterator\n     ",
    "links" : [ ]
  }, {
    "name" : "targetText",
    "type" : "CharacterIterator",
    "comment" : "\n     * Target text for searching.\n     * @see #setTarget(CharacterIterator)\n     * @see #getTarget\n     ",
    "links" : [ ]
  }, {
    "name" : "matchLength",
    "type" : "int",
    "comment" : "\n     * Length of the most current match in target text. \n     * Value 0 is the default value.\n     * @see #setMatchLength\n     * @see #getMatchLength\n     ",
    "links" : [ ]
  }, {
    "name" : "search_",
    "type" : "Search",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DONE",
    "type" : "int",
    "comment" : "\n     * DONE is returned by previous() and next() after all valid matches have \n     * been returned, and by first() and last() if there are no matches at all.\n     * @see #previous\n     * @see #next\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setIndex(int position)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Sets the position in the target text at which the next search will start.\n     * This method clears any previous match.\n     * </p>\n     * @param position position from which to start the next search\n     * @exception IndexOutOfBoundsException thrown if argument position is out\n     *            of the target text range.\n     * @see #getIndex\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOverlapping(boolean allowOverlap)",
    "returnType" : "void",
    "comment" : "\n     * Determines whether overlapping matches are returned. See the class \n     * documentation for more information about overlapping matches.\n     * <p>\n     * The default setting of this property is false\n     * \n     * @param allowOverlap flag indicator if overlapping matches are allowed\n     * @see #isOverlapping\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBreakIterator(BreakIterator breakiter)",
    "returnType" : "void",
    "comment" : "\n     * Set the BreakIterator that will be used to restrict the points\n     * at which matches are detected.\n     * \n     * @param breakiter A BreakIterator that will be used to restrict the \n     *                points at which matches are detected. If a match is \n     *                found, but the match's start or end index is not a \n     *                boundary as determined by the {@link BreakIterator}, \n     *                the match will be rejected and another will be searched \n     *                for. If this parameter is <tt>null</tt>, no break\n     *                detection is attempted.\n     * @see BreakIterator\n     ",
    "links" : [ "android.icu.text.BreakIterator" ]
  }, {
    "name" : "public void setTarget(CharacterIterator text)",
    "returnType" : "void",
    "comment" : "\n     * Set the target text to be searched. Text iteration will then begin at \n     * the start of the text string. This method is useful if you want to \n     * reuse an iterator to search within a different body of text.\n     * \n     * @param text new text iterator to look for match, \n     * @exception IllegalArgumentException thrown when text is null or has\n     *               0 length\n     * @see #getTarget\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMatchStart()",
    "returnType" : "int",
    "comment" : "\n    * Returns the index to the match in the text string that was searched.\n    * This call returns a valid result only after a successful call to \n    * {@link #first}, {@link #next}, {@link #previous}, or {@link #last}.\n    * Just after construction, or after a searching method returns \n    * {@link #DONE}, this method will return {@link #DONE}.\n    * <p>\n    * Use {@link #getMatchLength} to get the matched string length.\n    * \n    * @return index of a substring within the text string that is being \n    *         searched.\n    * @see #first\n    * @see #next\n    * @see #previous\n    * @see #last\n    ",
    "links" : [ "#getMatchLength", "#previous", "#first", "#next", "#last", "#DONE" ]
  }, {
    "name" : "public abstract int getIndex()",
    "returnType" : "int",
    "comment" : "\n     * Return the current index in the text being searched.\n     * If the iteration has gone past the end of the text\n     * (or past the beginning for a backwards search), {@link #DONE}\n     * is returned.\n     * \n     * @return current index in the text being searched.\n     ",
    "links" : [ "#DONE" ]
  }, {
    "name" : "public int getMatchLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of text in the string which matches the search \n     * pattern. This call returns a valid result only after a successful call \n     * to {@link #first}, {@link #next}, {@link #previous}, or {@link #last}.\n     * Just after construction, or after a searching method returns \n     * {@link #DONE}, this method will return 0.\n     * \n     * @return The length of the match in the target text, or 0 if there\n     *         is no match currently.\n     * @see #first\n     * @see #next\n     * @see #previous\n     * @see #last\n     ",
    "links" : [ "#previous", "#first", "#next", "#last", "#DONE" ]
  }, {
    "name" : "public BreakIterator getBreakIterator()",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns the BreakIterator that is used to restrict the indexes at which \n     * matches are detected. This will be the same object that was passed to \n     * the constructor or to {@link #setBreakIterator}.\n     * If the {@link BreakIterator} has not been set, <tt>null</tt> will be returned.\n     * See {@link #setBreakIterator} for more information.\n     * \n     * @return the BreakIterator set to restrict logic matches\n     * @see #setBreakIterator\n     * @see BreakIterator\n     ",
    "links" : [ "android.icu.text.BreakIterator", "#setBreakIterator" ]
  }, {
    "name" : "public CharacterIterator getTarget()",
    "returnType" : "CharacterIterator",
    "comment" : "\n     * Return the string text to be searched.\n     * @return text string to be searched.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMatchedText()",
    "returnType" : "String",
    "comment" : "\n     * Returns the text that was matched by the most recent call to \n     * {@link #first}, {@link #next}, {@link #previous}, or {@link #last}.\n     * If the iterator is not pointing at a valid match (e.g. just after \n     * construction or after {@link #DONE} has been returned, \n     * returns an empty string. \n     * \n     * @return  the substring in the target test of the most recent match,\n     *          or null if there is no match currently.\n     * @see #first\n     * @see #next\n     * @see #previous\n     * @see #last\n     ",
    "links" : [ "#previous", "#first", "#next", "#last", "#DONE" ]
  }, {
    "name" : "public int next()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the next point at which the text matches the\n     * search pattern, starting from the current position\n     * The iterator is adjusted so that its current index (as returned by \n     * {@link #getIndex}) is the match position if one was found.\n     * If a match is not found, {@link #DONE} will be returned and\n     * the iterator will be adjusted to a position after the end of the text \n     * string.\n     * \n     * @return The index of the next match after the current position,\n     *          or {@link #DONE} if there are no more matches.\n     * @see #getIndex\n     ",
    "links" : [ "#DONE", "#getIndex" ]
  }, {
    "name" : "public int previous()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the previous point at which the string text \n     * matches the search pattern, starting at the current position.\n     * The iterator is adjusted so that its current index (as returned by \n     * {@link #getIndex}) is the match position if one was found.\n     * If a match is not found, {@link #DONE} will be returned and\n     * the iterator will be adjusted to the index {@link #DONE}.\n     * \n     * @return The index of the previous match before the current position,\n     *          or {@link #DONE} if there are no more matches.\n     * @see #getIndex\n     ",
    "links" : [ "#DONE", "#getIndex" ]
  }, {
    "name" : "public boolean isOverlapping()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the overlapping property has been set.\n     * See {@link #setOverlapping(boolean)} for more information.\n     * \n     * @see #setOverlapping\n     * @return true if the overlapping property has been set, false otherwise\n     ",
    "links" : [ "#setOverlapping(boolean)" ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : " \n    * Resets the iteration.\n    * Search will begin at the start of the text string if a forward\n    * iteration is initiated before a backwards iteration. Otherwise if a\n    * backwards iteration is initiated before a forwards iteration, the\n    * search will begin at the end of the text string.\n    ",
    "links" : [ ]
  }, {
    "name" : "public final int first()",
    "returnType" : "int",
    "comment" : "\n     * Returns the first index at which the string text matches the search \n     * pattern. The iterator is adjusted so that its current index (as \n     * returned by {@link #getIndex()}) is the match position if one \n     * \n     * was found.\n     * If a match is not found, {@link #DONE} will be returned and\n     * the iterator will be adjusted to the index {@link #DONE}.\n     * @return The character index of the first match, or \n     *         {@link #DONE} if there are no matches.\n     * \n     * @see #getIndex\n     ",
    "links" : [ "#getIndex()", "#DONE" ]
  }, {
    "name" : "public final int following(int position)",
    "returnType" : "int",
    "comment" : "\n     * Returns the first index equal or greater than <tt>position</tt> at which the \n     * string text matches the search pattern. The iterator is adjusted so \n     * that its current index (as returned by {@link #getIndex()}) is the \n     * match position if one was found.\n     * If a match is not found, {@link #DONE} will be returned and the\n     * iterator will be adjusted to the index {@link #DONE}.\n     * \n     * @param  position where search if to start from.\n     * @return The character index of the first match following \n     *         <tt>position</tt>, or {@link #DONE} if there are no matches.\n     * @throws IndexOutOfBoundsException    If position is less than or greater\n     *      than the text range for searching.\n     * @see #getIndex\n     ",
    "links" : [ "#getIndex()", "#DONE" ]
  }, {
    "name" : "public final int last()",
    "returnType" : "int",
    "comment" : "\n     * Returns the last index in the target text at which it matches the\n     * search pattern. The iterator is adjusted so that its current index\n     * (as returned by {@link #getIndex}) is the match position if one was\n     * found.\n     * If a match is not found, {@link #DONE} will be returned and\n     * the iterator will be adjusted to the index {@link #DONE}.\n     * \n     * @return The index of the first match, or {@link #DONE} if \n     *         there are no matches.\n     * @see #getIndex\n     ",
    "links" : [ "#DONE", "#getIndex" ]
  }, {
    "name" : "public final int preceding(int position)",
    "returnType" : "int",
    "comment" : "\n     * Returns the first index less than <tt>position</tt> at which the string \n     * text matches the search pattern. The iterator is adjusted so that its \n     * current index (as returned by {@link #getIndex}) is the match \n     * position if one was found. If a match is not found, \n     * {@link #DONE} will be returned and the iterator will be \n     * adjusted to the index {@link #DONE}\n     * <p>\n     * When the overlapping option ({@link #isOverlapping}) is off, the last index of the\n     * result match is always less than <tt>position</tt>.\n     * When the overlapping option is on, the result match may span across\n     * <tt>position</tt>.\n     *\n     * @param  position where search is to start from.\n     * @return The character index of the first match preceding \n     *         <tt>position</tt>, or {@link #DONE} if there are \n     *         no matches.\n     * @throws IndexOutOfBoundsException If position is less than or greater than\n     *                                   the text range for searching\n     * @see #getIndex\n     ",
    "links" : [ "#DONE", "#isOverlapping", "#getIndex" ]
  }, {
    "name" : "protected void setMatchLength(int length)",
    "returnType" : "void",
    "comment" : "\n     * Sets the length of the most recent match in the target text. \n     * Subclasses' handleNext() and handlePrevious() methods should call this \n     * after they find a match in the target text.\n     * \n     * @param length new length to set\n     * @see #handleNext\n     * @see #handlePrevious\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int handleNext(int start)",
    "returnType" : "int",
    "comment" : "\n     * Abstract method which subclasses override to provide the mechanism\n     * for finding the next match in the target text. This allows different\n     * subclasses to provide different search algorithms.\n     * <p>\n     * If a match is found, the implementation should return the index at\n     * which the match starts and should call \n     * {@link #setMatchLength} with the number of characters \n     * in the target text that make up the match. If no match is found, the \n     * method should return {@link #DONE}.\n     * \n     * @param start The index in the target text at which the search \n     *              should start.\n     * @return index at which the match starts, else if match is not found \n     *         {@link #DONE} is returned\n     * @see #setMatchLength\n     ",
    "links" : [ "#DONE", "#setMatchLength" ]
  }, {
    "name" : "protected abstract int handlePrevious(int startAt)",
    "returnType" : "int",
    "comment" : "\n     * Abstract method which subclasses override to provide the mechanism for\n     * finding the previous match in the target text. This allows different\n     * subclasses to provide different search algorithms.\n     * <p>\n     * If a match is found, the implementation should return the index at\n     * which the match starts and should call \n     * {@link #setMatchLength} with the number of characters \n     * in the target text that make up the match. If no match is found, the \n     * method should return {@link #DONE}.\n     * \n     * @param startAt   The index in the target text at which the search \n     *                  should start.\n     * @return index at which the match starts, else if match is not found \n     *         {@link #DONE} is returned\n     * @see #setMatchLength\n     ",
    "links" : [ "#DONE", "#setMatchLength" ]
  }, {
    "name" : "protected void setMatchNotFound()",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setElementComparisonType(ElementComparisonType type)",
    "returnType" : "void",
    "comment" : "\n     * Sets the collation element comparison type.\n     * <p>\n     * The default comparison type is {@link ElementComparisonType#STANDARD_ELEMENT_COMPARISON}.\n     * \n     * @see ElementComparisonType\n     * @see #getElementComparisonType()\n     ",
    "links" : [ "#STANDARD_ELEMENT_COMPARISON" ]
  }, {
    "name" : "public ElementComparisonType getElementComparisonType()",
    "returnType" : "ElementComparisonType",
    "comment" : "\n     * Returns the collation element comparison type.\n     * \n     * @see ElementComparisonType\n     * @see #setElementComparisonType(ElementComparisonType)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setIndex(int position)", "public void setOverlapping(boolean allowOverlap)", "public void setBreakIterator(BreakIterator breakiter)", "public void setTarget(CharacterIterator text)", "public int getMatchStart()", "public abstract int getIndex()", "public int getMatchLength()", "public BreakIterator getBreakIterator()", "public CharacterIterator getTarget()", "public String getMatchedText()", "public int next()", "public int previous()", "public boolean isOverlapping()", "public void reset()", "public final int first()", "public final int following(int position)", "public final int last()", "public final int preceding(int position)", "protected void setMatchLength(int length)", "protected abstract int handleNext(int start)", "protected abstract int handlePrevious(int startAt)", "protected void setMatchNotFound()", "public void setElementComparisonType(ElementComparisonType type)", "public ElementComparisonType getElementComparisonType()" ],
  "variableNames" : [ "breakIterator", "targetText", "matchLength", "search_", "DONE" ]
}