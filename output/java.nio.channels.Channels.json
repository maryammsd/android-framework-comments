{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/Channels.java",
  "packageName" : "java.nio.channels",
  "className" : "Channels",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "private static void writeFullyImpl(WritableByteChannel ch, ByteBuffer bb) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write all remaining bytes in buffer to the given channel.\n     * If the channel is selectable then it must be configured blocking.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeFully(WritableByteChannel ch, ByteBuffer bb) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write all remaining bytes in buffer to the given channel.\n     *\n     * @throws  IllegalBlockingModeException\n     *          If the channel is selectable and configured non-blocking.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InputStream newInputStream(ReadableByteChannel ch)",
    "returnType" : "InputStream",
    "comment" : "\n     * Constructs a stream that reads bytes from the given channel.\n     *\n     * <p> The {@code read} methods of the resulting stream will throw an\n     * {@link IllegalBlockingModeException} if invoked while the underlying\n     * channel is in non-blocking mode.  The stream will not be buffered, and\n     * it will not support the {@link InputStream#mark mark} or {@link\n     * InputStream#reset reset} methods.  The stream will be safe for access by\n     * multiple concurrent threads.  Closing the stream will in turn cause the\n     * channel to be closed.  </p>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @return  A new input stream\n     ",
    "links" : [ "java.io.FileInputStream#mark", "java.io.FileInputStream#reset", "java.nio.channels.IllegalBlockingModeException" ]
  }, {
    "name" : "public static OutputStream newOutputStream(WritableByteChannel ch)",
    "returnType" : "OutputStream",
    "comment" : "\n     * Constructs a stream that writes bytes to the given channel.\n     *\n     * <p> The {@code write} methods of the resulting stream will throw an\n     * {@link IllegalBlockingModeException} if invoked while the underlying\n     * channel is in non-blocking mode.  The stream will not be buffered.  The\n     * stream will be safe for access by multiple concurrent threads.  Closing\n     * the stream will in turn cause the channel to be closed.  </p>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @return  A new output stream\n     ",
    "links" : [ "java.nio.channels.IllegalBlockingModeException" ]
  }, {
    "name" : "public static InputStream newInputStream(AsynchronousByteChannel ch)",
    "returnType" : "InputStream",
    "comment" : "\n     * Constructs a stream that reads bytes from the given channel.\n     *\n     * <p> The stream will not be buffered, and it will not support the {@link\n     * InputStream#mark mark} or {@link InputStream#reset reset} methods.  The\n     * stream will be safe for access by multiple concurrent threads.  Closing\n     * the stream will in turn cause the channel to be closed.  </p>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @return  A new input stream\n     *\n     * @since 1.7\n     ",
    "links" : [ "java.io.FileInputStream#mark", "java.io.FileInputStream#reset" ]
  }, {
    "name" : "public static OutputStream newOutputStream(AsynchronousByteChannel ch)",
    "returnType" : "OutputStream",
    "comment" : "\n     * Constructs a stream that writes bytes to the given channel.\n     *\n     * <p> The stream will not be buffered. The stream will be safe for access\n     * by multiple concurrent threads.  Closing the stream will in turn cause\n     * the channel to be closed.  </p>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @return  A new output stream\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ReadableByteChannel newChannel(InputStream in)",
    "returnType" : "ReadableByteChannel",
    "comment" : "\n     * Constructs a channel that reads bytes from the given stream.\n     *\n     * <p> The resulting channel will not be buffered; it will simply redirect\n     * its I/O operations to the given stream.  Closing the channel will in\n     * turn cause the stream to be closed.  </p>\n     *\n     * @param  in\n     *         The stream from which bytes are to be read\n     *\n     * @return  A new readable byte channel\n     ",
    "links" : [ ]
  }, {
    "name" : "public static WritableByteChannel newChannel(OutputStream out)",
    "returnType" : "WritableByteChannel",
    "comment" : "\n     * Constructs a channel that writes bytes to the given stream.\n     *\n     * <p> The resulting channel will not be buffered; it will simply redirect\n     * its I/O operations to the given stream.  Closing the channel will in\n     * turn cause the stream to be closed.  </p>\n     *\n     * @param  out\n     *         The stream to which bytes are to be written\n     *\n     * @return  A new writable byte channel\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Reader newReader(ReadableByteChannel ch, CharsetDecoder dec, int minBufferCap)",
    "returnType" : "Reader",
    "comment" : "\n     * Constructs a reader that decodes bytes from the given channel using the\n     * given decoder.\n     *\n     * <p> The resulting stream will contain an internal input buffer of at\n     * least {@code minBufferCap} bytes.  The stream's {@code read} methods\n     * will, as needed, fill the buffer by reading bytes from the underlying\n     * channel; if the channel is in non-blocking mode when bytes are to be\n     * read then an {@link IllegalBlockingModeException} will be thrown.  The\n     * resulting stream will not otherwise be buffered, and it will not support\n     * the {@link Reader#mark mark} or {@link Reader#reset reset} methods.\n     * Closing the stream will in turn cause the channel to be closed.  </p>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @param  dec\n     *         The charset decoder to be used\n     *\n     * @param  minBufferCap\n     *         The minimum capacity of the internal byte buffer,\n     *         or {@code -1} if an implementation-dependent\n     *         default capacity is to be used\n     *\n     * @return  A new reader\n     ",
    "links" : [ "java.io.Reader#mark", "java.nio.channels.IllegalBlockingModeException", "java.io.Reader#reset" ]
  }, {
    "name" : "public static Reader newReader(ReadableByteChannel ch, String csName)",
    "returnType" : "Reader",
    "comment" : "\n     * Constructs a reader that decodes bytes from the given channel according\n     * to the named charset.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <pre> {@code\n     *     Channels.newReader(ch, csname)\n     * } </pre>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <pre> {@code\n     *     Channels.newReader(ch, Charset.forName(csName))\n     * } </pre>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @param  csName\n     *         The name of the charset to be used\n     *\n     * @return  A new reader\n     *\n     * @throws  UnsupportedCharsetException\n     *          If no support for the named charset is available\n     *          in this instance of the Java virtual machine\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Reader newReader(ReadableByteChannel ch, Charset charset)",
    "returnType" : "Reader",
    "comment" : "\n     * Constructs a reader that decodes bytes from the given channel according\n     * to the given charset.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <pre> {@code\n     *     Channels.newReader(ch, charset)\n     * } </pre>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <pre> {@code\n     *     Channels.newReader(ch, Charset.forName(csName).newDecoder(), -1)\n     * } </pre>\n     *\n     * <p> The reader's default action for malformed-input and unmappable-character\n     * errors is to {@linkplain java.nio.charset.CodingErrorAction#REPORT report}\n     * them. When more control over the error handling is required, the constructor\n     * that takes a {@linkplain java.nio.charset.CharsetDecoder} should be used.\n     *\n     * @param  ch The channel from which bytes will be read\n     *\n     * @param  charset The charset to be used\n     *\n     * @return  A new reader\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Writer newWriter(WritableByteChannel ch, CharsetEncoder enc, int minBufferCap)",
    "returnType" : "Writer",
    "comment" : "\n     * Constructs a writer that encodes characters using the given encoder and\n     * writes the resulting bytes to the given channel.\n     *\n     * <p> The resulting stream will contain an internal output buffer of at\n     * least {@code minBufferCap} bytes.  The stream's {@code write} methods\n     * will, as needed, flush the buffer by writing bytes to the underlying\n     * channel; if the channel is in non-blocking mode when bytes are to be\n     * written then an {@link IllegalBlockingModeException} will be thrown.\n     * The resulting stream will not otherwise be buffered.  Closing the stream\n     * will in turn cause the channel to be closed.  </p>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @param  enc\n     *         The charset encoder to be used\n     *\n     * @param  minBufferCap\n     *         The minimum capacity of the internal byte buffer,\n     *         or {@code -1} if an implementation-dependent\n     *         default capacity is to be used\n     *\n     * @return  A new writer\n     ",
    "links" : [ "java.nio.channels.IllegalBlockingModeException" ]
  }, {
    "name" : "public static Writer newWriter(WritableByteChannel ch, String csName)",
    "returnType" : "Writer",
    "comment" : "\n     * Constructs a writer that encodes characters according to the named\n     * charset and writes the resulting bytes to the given channel.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <pre> {@code\n     *     Channels.newWriter(ch, csname)\n     * } </pre>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <pre> {@code\n     *     Channels.newWriter(ch, Charset.forName(csName))\n     * } </pre>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @param  csName\n     *         The name of the charset to be used\n     *\n     * @return  A new writer\n     *\n     * @throws  UnsupportedCharsetException\n     *          If no support for the named charset is available\n     *          in this instance of the Java virtual machine\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Writer newWriter(WritableByteChannel ch, Charset charset)",
    "returnType" : "Writer",
    "comment" : "\n     * Constructs a writer that encodes characters according to the given\n     * charset and writes the resulting bytes to the given channel.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <pre> {@code\n     *     Channels.newWriter(ch, charset)\n     * } </pre>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <pre> {@code\n     *     Channels.newWriter(ch, Charset.forName(csName).newEncoder(), -1)\n     * } </pre>\n     *\n     * <p> The writer's default action for malformed-input and unmappable-character\n     * errors is to {@linkplain java.nio.charset.CodingErrorAction#REPORT report}\n     * them. When more control over the error handling is required, the constructor\n     * that takes a {@linkplain java.nio.charset.CharsetEncoder} should be used.\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @param  charset\n     *         The charset to be used\n     *\n     * @return  A new writer\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void writeFullyImpl(WritableByteChannel ch, ByteBuffer bb) throws IOException", "private static void writeFully(WritableByteChannel ch, ByteBuffer bb) throws IOException", "public static InputStream newInputStream(ReadableByteChannel ch)", "public static OutputStream newOutputStream(WritableByteChannel ch)", "public static InputStream newInputStream(AsynchronousByteChannel ch)", "public static OutputStream newOutputStream(AsynchronousByteChannel ch)", "public static ReadableByteChannel newChannel(InputStream in)", "public static WritableByteChannel newChannel(OutputStream out)", "public static Reader newReader(ReadableByteChannel ch, CharsetDecoder dec, int minBufferCap)", "public static Reader newReader(ReadableByteChannel ch, String csName)", "public static Reader newReader(ReadableByteChannel ch, Charset charset)", "public static Writer newWriter(WritableByteChannel ch, CharsetEncoder enc, int minBufferCap)", "public static Writer newWriter(WritableByteChannel ch, String csName)", "public static Writer newWriter(WritableByteChannel ch, Charset charset)" ],
  "variableNames" : [ ]
}