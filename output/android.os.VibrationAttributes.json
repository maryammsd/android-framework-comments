{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/VibrationAttributes.java",
  "packageName" : "android.os",
  "className" : "VibrationAttributes",
  "comment" : "\n * Encapsulates a collection of attributes describing information about a vibration.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_FILTER_MATCH_ALL",
    "type" : "int",
    "comment" : "\n     * Vibration usage filter value to match all usages.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_CLASS_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Vibration usage class value to use when the vibration usage class is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_CLASS_ALARM",
    "type" : "int",
    "comment" : "\n     * Vibration usage class value to use when the vibration is initiated to catch user's\n     * attention, such as alarm, ringtone, and notification vibrations.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_CLASS_FEEDBACK",
    "type" : "int",
    "comment" : "\n     * Vibration usage class value to use when the vibration is initiated as a response to user's\n     * actions, such as emulation of physical effects, and texting feedback vibration.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_CLASS_MEDIA",
    "type" : "int",
    "comment" : "\n     * Vibration usage class value to use when the vibration is part of media, such as music, movie,\n     * soundtrack, game or animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_CLASS_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for vibration usage class value.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Usage value to use when usage is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_ALARM",
    "type" : "int",
    "comment" : "\n     * Usage value to use for alarm vibrations.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_RINGTONE",
    "type" : "int",
    "comment" : "\n     * Usage value to use for ringtone vibrations.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_NOTIFICATION",
    "type" : "int",
    "comment" : "\n     * Usage value to use for notification vibrations.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_COMMUNICATION_REQUEST",
    "type" : "int",
    "comment" : "\n     * Usage value to use for vibrations which mean a request to enter/end a\n     * communication with the user, such as a voice prompt.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_TOUCH",
    "type" : "int",
    "comment" : "\n     * Usage value to use for touch vibrations.\n     *\n     * <p>Most typical haptic feedback should be classed as <em>touch</em> feedback. Examples\n     * include vibrations for tap, long press, drag and scroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_PHYSICAL_EMULATION",
    "type" : "int",
    "comment" : "\n     * Usage value to use for vibrations which emulate physical hardware reactions,\n     * such as edge squeeze.\n     *\n     * <p>Note that normal screen-touch feedback \"click\" effects would typically be\n     * classed as {@link #USAGE_TOUCH}, and that on-screen \"physical\" animations\n     * like bouncing would be {@link #USAGE_MEDIA}.\n     ",
    "links" : [ "#USAGE_TOUCH", "#USAGE_MEDIA" ]
  }, {
    "name" : "USAGE_HARDWARE_FEEDBACK",
    "type" : "int",
    "comment" : "\n     * Usage value to use for vibrations which provide a feedback for hardware\n     * component interaction, such as a fingerprint sensor.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_ACCESSIBILITY",
    "type" : "int",
    "comment" : "\n     * Usage value to use for accessibility vibrations, such as with a screen reader.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_MEDIA",
    "type" : "int",
    "comment" : "\n     * Usage value to use for media vibrations, such as music, movie, soundtrack, animations, games,\n     * or any interactive media that isn't for touch feedback specifically.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Category value when the vibration category is unknown.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_KEYBOARD",
    "type" : "int",
    "comment" : "\n     * Category value for keyboard vibrations.\n     *\n     * <p>Most typical keyboard vibrations are haptic feedback for virtual keyboard key\n     * press/release, for example.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_BYPASS_INTERRUPTION_POLICY",
    "type" : "int",
    "comment" : "\n     * Flag requesting vibration effect to be played even under limited interruptions.\n     *\n     * <p>Only privileged apps can ignore user settings that limit interruptions, and this\n     * flag will be ignored otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_BYPASS_USER_VIBRATION_INTENSITY_OFF",
    "type" : "int",
    "comment" : "\n     * Flag requesting vibration effect to be played even when user settings are disabling it.\n     *\n     * <p>Flag introduced to represent\n     * {@link android.view.HapticFeedbackConstants#FLAG_IGNORE_GLOBAL_SETTING} and\n     * {@link AudioAttributes#FLAG_BYPASS_MUTE}.\n     *\n     * <p>Only privileged apps can ignore user settings, and this flag will be ignored otherwise.\n     *\n     * @hide\n     ",
    "links" : [ "android.media.AudioAttributes#FLAG_BYPASS_MUTE", "android.view.HapticFeedbackConstants#FLAG_IGNORE_GLOBAL_SETTING" ]
  }, {
    "name" : "FLAG_INVALIDATE_SETTINGS_CACHE",
    "type" : "int",
    "comment" : "\n     * Flag requesting vibration effect to be played with fresh user settings values.\n     *\n     * <p>This flag is not protected by any permission, but vibrations that use it require an extra\n     * query of user vibration intensity settings, ringer mode and other controls that affect the\n     * vibration effect playback, which can increase the latency for the overall request.\n     *\n     * <p>This is intended to be used on scenarios where the user settings might have changed\n     * recently, and needs to be applied to this vibration, like settings controllers that preview\n     * newly set intensities to the user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PIPELINED_EFFECT",
    "type" : "int",
    "comment" : "\n     * Flag requesting that this vibration effect be pipelined with other vibration effects from the\n     * same package that also carry this flag.\n     *\n     * <p>Pipelined effects won't cancel a running pipelined effect, but will instead play after\n     * it completes. However, only one pipelined effect can be waiting at a time - so if an effect\n     * is already waiting (but not running), it will be cancelled in favor of a newer one.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_BYPASS_USER_VIBRATION_INTENSITY_SCALE",
    "type" : "int",
    "comment" : "\n     * Flag requesting that this vibration effect to be played without applying the user\n     * intensity setting to scale the vibration.\n     *\n     * <p>The user setting is still applied to enable/disable the vibration, but the vibration\n     * effect strength will not be scaled based on the enabled setting value.\n     *\n     * <p>This is intended to be used on scenarios where the system needs to enforce a specific\n     * strength for the vibration effect, regardless of the user preference. Only privileged apps\n     * can ignore user settings, and this flag will be ignored otherwise.\n     *\n     * <p>If you need to bypass the user setting when it's disabling vibrations then this also\n     * needs the flag {@link #FLAG_BYPASS_USER_VIBRATION_INTENSITY_OFF} to be set.\n     *\n     * @hide\n     ",
    "links" : [ "#FLAG_BYPASS_USER_VIBRATION_INTENSITY_OFF" ]
  }, {
    "name" : "FLAG_ALL_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * All flags supported by vibrator service, update it when adding new flag.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mUsage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOriginalAudioUsage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCategory",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<VibrationAttributes>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static VibrationAttributes createForUsage(@Usage int usage)",
    "returnType" : "VibrationAttributes",
    "comment" : " Creates a new {@link VibrationAttributes} instance with given usage. ",
    "links" : [ "android.os.VibrationAttributes" ]
  }, {
    "name" : "public int getUsageClass()",
    "returnType" : "int",
    "comment" : "\n     * Return the vibration usage class.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUsage()",
    "returnType" : "int",
    "comment" : "\n     * Return the vibration usage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOriginalAudioUsage()",
    "returnType" : "int",
    "comment" : "\n     * Return the original {@link AudioAttributes} used to create the vibration attributes.\n     * @hide\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Return the flags.\n     * @return a combined mask of all flags\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCategory()",
    "returnType" : "int",
    "comment" : "\n     * Return the vibration category.\n     *\n     * <p>Vibration categories describe the source of the vibration, and it can be combined with\n     * the vibration usage to best match to a user setting, e.g. a vibration with usage touch and\n     * category keyboard can be used to control keyboard haptic feedback independently.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFlagSet(@Flag int flag)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether a flag is set\n     * @return true if a flag is set and false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAudioUsage()",
    "returnType" : "int",
    "comment" : "\n     * Return {@link AudioAttributes} usage equivalent to {@link #getUsage()}.\n     * @return one of {@link AudioAttributes#SDK_USAGES} that represents {@link #getUsage()}\n     * @hide\n     ",
    "links" : [ "#getUsage()", "android.media.AudioAttributes#SDK_USAGES", "android.media.AudioAttributes" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String usageToString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String usageToString(@Usage int usage)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String categoryToString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String categoryToString(@Category int category)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static VibrationAttributes createForUsage(@Usage int usage)", "public int getUsageClass()", "public int getUsage()", "public int getOriginalAudioUsage()", "public int getFlags()", "public int getCategory()", "public boolean isFlagSet(@Flag int flag)", "public int getAudioUsage()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public String toString()", "public String usageToString()", "public static String usageToString(@Usage int usage)", "public String categoryToString()", "public static String categoryToString(@Category int category)" ],
  "variableNames" : [ "TAG", "USAGE_FILTER_MATCH_ALL", "USAGE_CLASS_UNKNOWN", "USAGE_CLASS_ALARM", "USAGE_CLASS_FEEDBACK", "USAGE_CLASS_MEDIA", "USAGE_CLASS_MASK", "USAGE_UNKNOWN", "USAGE_ALARM", "USAGE_RINGTONE", "USAGE_NOTIFICATION", "USAGE_COMMUNICATION_REQUEST", "USAGE_TOUCH", "USAGE_PHYSICAL_EMULATION", "USAGE_HARDWARE_FEEDBACK", "USAGE_ACCESSIBILITY", "USAGE_MEDIA", "CATEGORY_UNKNOWN", "CATEGORY_KEYBOARD", "FLAG_BYPASS_INTERRUPTION_POLICY", "FLAG_BYPASS_USER_VIBRATION_INTENSITY_OFF", "FLAG_INVALIDATE_SETTINGS_CACHE", "FLAG_PIPELINED_EFFECT", "FLAG_BYPASS_USER_VIBRATION_INTENSITY_SCALE", "FLAG_ALL_SUPPORTED", "mUsage", "mFlags", "mOriginalAudioUsage", "mCategory", "CREATOR" ]
}