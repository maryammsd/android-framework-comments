{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/VibrationEffect.java",
  "packageName" : "android.os",
  "className" : "Composition",
  "comment" : "\n     * A composition of haptic elements that are combined to be playable as a single\n     * {@link VibrationEffect}.\n     *\n     * <p>The haptic primitives are available as {@code Composition.PRIMITIVE_*} constants and\n     * can be added to a composition to create a custom vibration effect. Here is an example of an\n     * effect that grows in intensity and then dies off, with a longer rising portion for emphasis\n     * and an extra tick 100ms after:\n     *\n     * <pre>\n     * {@code VibrationEffect effect = VibrationEffect.startComposition()\n     *     .addPrimitive(VibrationEffect.Composition.PRIMITIVE_SLOW_RISE, 0.5f)\n     *     .addPrimitive(VibrationEffect.Composition.PRIMITIVE_QUICK_FALL, 0.5f)\n     *     .addPrimitive(VibrationEffect.Composition.PRIMITIVE_TICK, 1.0f, 100)\n     *     .compose();}</pre>\n     *\n     * <p>When choosing to play a composed effect, you should check that individual components are\n     * supported by the device by using {@link Vibrator#arePrimitivesSupported}.\n     *\n     * @see VibrationEffect#startComposition()\n     ",
  "links" : [ "android.os.VibrationEffect", "android.os.Vibrator#arePrimitivesSupported" ],
  "variables" : [ {
    "name" : "PRIMITIVE_NOOP",
    "type" : "int",
    "comment" : "\n         * No haptic effect. Used to generate extended delays between primitives.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIMITIVE_CLICK",
    "type" : "int",
    "comment" : "\n         * This effect should produce a sharp, crisp click sensation.\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIMITIVE_THUD",
    "type" : "int",
    "comment" : "\n         * A haptic effect that simulates downwards movement with gravity. Often\n         * followed by extra energy of hitting and reverberation to augment\n         * physicality.\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIMITIVE_SPIN",
    "type" : "int",
    "comment" : "\n         * A haptic effect that simulates spinning momentum.\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIMITIVE_QUICK_RISE",
    "type" : "int",
    "comment" : "\n         * A haptic effect that simulates quick upward movement against gravity.\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIMITIVE_SLOW_RISE",
    "type" : "int",
    "comment" : "\n         * A haptic effect that simulates slow upward movement against gravity.\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIMITIVE_QUICK_FALL",
    "type" : "int",
    "comment" : "\n         * A haptic effect that simulates quick downwards movement with gravity.\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIMITIVE_TICK",
    "type" : "int",
    "comment" : " Internally this maps to the HAL constant CompositePrimitive::LIGHT_TICK",
    "links" : [ ]
  }, {
    "name" : "PRIMITIVE_LOW_TICK",
    "type" : "int",
    "comment" : " Internally this maps to the HAL constant CompositePrimitive::LOW_TICK",
    "links" : [ ]
  }, {
    "name" : "mSegments",
    "type" : "ArrayList<VibrationEffectSegment>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRepeatIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Composition addOffDuration(@NonNull Duration duration)",
    "returnType" : "Composition",
    "comment" : "\n         * Adds a time duration to the current composition, during which the vibrator will be\n         * turned off.\n         *\n         * @param duration The length of time the vibrator should be off. Value must be non-negative\n         *                 and will be truncated to milliseconds.\n         * @return This {@link Composition} object to enable adding multiple elements in one chain.\n         *\n         * @throws UnreachableAfterRepeatingIndefinitelyException if the composition is currently\n         * ending with a repeating effect.\n         * @hide\n         ",
    "links" : [ "Composition" ]
  }, {
    "name" : "public Composition addEffect(@NonNull VibrationEffect effect)",
    "returnType" : "Composition",
    "comment" : "\n         * Add a haptic effect to the end of the current composition.\n         *\n         * <p>If this effect is repeating (e.g. created by {@link VibrationEffect#createWaveform}\n         * with a non-negative repeat index, or created by another composition that has effects\n         * repeating indefinitely), then no more effects or primitives will be accepted by this\n         * composition after this method. Such effects should be cancelled via\n         * {@link Vibrator#cancel()}.\n         *\n         * @param effect The effect to add to the end of this composition.\n         * @return This {@link Composition} object to enable adding multiple elements in one chain.\n         *\n         * @throws UnreachableAfterRepeatingIndefinitelyException if the composition is currently\n         * ending with a repeating effect.\n         * @hide\n         ",
    "links" : [ "Composition", "android.os.VibrationEffect#createWaveform", "android.os.Vibrator#cancel()" ]
  }, {
    "name" : "public Composition repeatEffectIndefinitely(@NonNull VibrationEffect effect)",
    "returnType" : "Composition",
    "comment" : "\n         * Add a haptic effect to the end of the current composition and play it on repeat,\n         * indefinitely.\n         *\n         * <p>The entire effect will be played on repeat, indefinitely, after all other elements\n         * already added to this composition are played. No more effects or primitives will be\n         * accepted by this composition after this method. Such effects should be cancelled via\n         * {@link Vibrator#cancel()}.\n         *\n         * @param effect The effect to add to the end of this composition, must be finite.\n         * @return This {@link Composition} object to enable adding multiple elements in one chain,\n         * although only {@link #compose()} can follow this call.\n         *\n         * @throws IllegalArgumentException if the given effect is already repeating indefinitely.\n         * @throws UnreachableAfterRepeatingIndefinitelyException if the composition is currently\n         * ending with a repeating effect.\n         * @hide\n         ",
    "links" : [ "Composition", "#compose()", "android.os.Vibrator#cancel()" ]
  }, {
    "name" : "public Composition addPrimitive(@PrimitiveType int primitiveId)",
    "returnType" : "Composition",
    "comment" : "\n         * Add a haptic primitive to the end of the current composition.\n         *\n         * <p>Similar to {@link #addPrimitive(int, float, int)}, but with no delay and a\n         * default scale applied.\n         *\n         * @param primitiveId The primitive to add\n         * @return This {@link Composition} object to enable adding multiple elements in one chain.\n         ",
    "links" : [ "Composition", "#addPrimitive(int" ]
  }, {
    "name" : "public Composition addPrimitive(@PrimitiveType int primitiveId, @FloatRange(from = 0f, to = 1f) float scale)",
    "returnType" : "Composition",
    "comment" : "\n         * Add a haptic primitive to the end of the current composition.\n         *\n         * <p>Similar to {@link #addPrimitive(int, float, int)}, but with no delay.\n         *\n         * @param primitiveId The primitive to add\n         * @param scale The scale to apply to the intensity of the primitive.\n         * @return This {@link Composition} object to enable adding multiple elements in one chain.\n         ",
    "links" : [ "Composition", "#addPrimitive(int" ]
  }, {
    "name" : "public Composition addPrimitive(@PrimitiveType int primitiveId, @FloatRange(from = 0f, to = 1f) float scale, @IntRange(from = 0) int delay)",
    "returnType" : "Composition",
    "comment" : "\n         * Add a haptic primitive to the end of the current composition.\n         *\n         * @param primitiveId The primitive to add\n         * @param scale The scale to apply to the intensity of the primitive.\n         * @param delay The amount of time in milliseconds to wait before playing this primitive,\n         *              starting at the time the previous element in this composition is finished.\n         * @return This {@link Composition} object to enable adding multiple elements in one chain.\n         ",
    "links" : [ "Composition" ]
  }, {
    "name" : "private Composition addSegment(VibrationEffectSegment segment)",
    "returnType" : "Composition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Composition addSegments(VibrationEffect effect)",
    "returnType" : "Composition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VibrationEffect compose()",
    "returnType" : "VibrationEffect",
    "comment" : "\n         * Compose all of the added primitives together into a single {@link VibrationEffect}.\n         *\n         * <p>The {@link Composition} object is still valid after this call, so you can continue\n         * adding more primitives to it and generating more {@link VibrationEffect}s by calling this\n         * method again.\n         *\n         * @return The {@link VibrationEffect} resulting from the composition of the primitives.\n         ",
    "links" : [ "Composition", "android.os.VibrationEffect" ]
  }, {
    "name" : "public static String primitiveToString(@PrimitiveType int id)",
    "returnType" : "String",
    "comment" : "\n         * Convert the primitive ID to a human readable string for debugging.\n         * @param id The ID to convert\n         * @return The ID in a human readable format.\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Composition addOffDuration(@NonNull Duration duration)", "public Composition addEffect(@NonNull VibrationEffect effect)", "public Composition repeatEffectIndefinitely(@NonNull VibrationEffect effect)", "public Composition addPrimitive(@PrimitiveType int primitiveId)", "public Composition addPrimitive(@PrimitiveType int primitiveId, @FloatRange(from = 0f, to = 1f) float scale)", "public Composition addPrimitive(@PrimitiveType int primitiveId, @FloatRange(from = 0f, to = 1f) float scale, @IntRange(from = 0) int delay)", "private Composition addSegment(VibrationEffectSegment segment)", "private Composition addSegments(VibrationEffect effect)", "public VibrationEffect compose()", "public static String primitiveToString(@PrimitiveType int id)" ],
  "variableNames" : [ "PRIMITIVE_NOOP", "PRIMITIVE_CLICK", "PRIMITIVE_THUD", "PRIMITIVE_SPIN", "PRIMITIVE_QUICK_RISE", "PRIMITIVE_SLOW_RISE", "PRIMITIVE_QUICK_FALL", "PRIMITIVE_TICK", "PRIMITIVE_LOW_TICK", "mSegments", "mRepeatIndex" ]
}