{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/FocusFinder.java",
  "packageName" : "android.view",
  "className" : "FocusFinder",
  "comment" : "\n * The algorithm used for finding the next focusable view in a given direction\n * from a view that currently has focus.\n ",
  "variables" : [ {
    "name" : "tlFocusFinder",
    "type" : "ThreadLocal<FocusFinder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusedRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOtherRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBestCandidateRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserSpecifiedFocusComparator",
    "type" : "UserSpecifiedFocusComparator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserSpecifiedClusterComparator",
    "type" : "UserSpecifiedFocusComparator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusSorter",
    "type" : "FocusSorter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempList",
    "type" : "ArrayList<View>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static FocusFinder getInstance()",
    "returnType" : "FocusFinder",
    "comment" : "\n     * Get the focus finder for this thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final View findNextFocus(ViewGroup root, View focused, int direction)",
    "returnType" : "View",
    "comment" : "\n     * Find the next view to take focus in root's descendants, starting from the view\n     * that currently is focused.\n     * @param root Contains focused. Cannot be null.\n     * @param focused Has focus now.\n     * @param direction Direction to look.\n     * @return The next focusable view, or null if none exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View findNextFocusFromRect(ViewGroup root, Rect focusedRect, int direction)",
    "returnType" : "View",
    "comment" : "\n     * Find the next view to take focus in root's descendants, searching from\n     * a particular rectangle in root's coordinates.\n     * @param root Contains focusedRect. Cannot be null.\n     * @param focusedRect The starting point of the search.\n     * @param direction Direction to look.\n     * @return The next focusable view, or null if none exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "private View findNextFocus(ViewGroup root, View focused, Rect focusedRect, int direction)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ViewGroup getEffectiveRoot(ViewGroup root, View focused)",
    "returnType" : "ViewGroup",
    "comment" : "\n     * Returns the \"effective\" root of a view. The \"effective\" root is the closest ancestor\n     * within-which focus should cycle.\n     * <p>\n     * For example: normal focus navigation would stay within a ViewGroup marked as\n     * touchscreenBlocksFocus and keyboardNavigationCluster until a cluster-jump out.\n     * @return the \"effective\" root of {@param focused}\n     ",
    "links" : [ ]
  }, {
    "name" : "public View findNextKeyboardNavigationCluster(@NonNull View root, @Nullable View currentCluster, @View.FocusDirection int direction)",
    "returnType" : "View",
    "comment" : "\n     * Find the root of the next keyboard navigation cluster after the current one.\n     * @param root The view tree to look inside. Cannot be null\n     * @param currentCluster The starting point of the search. Null means the default cluster\n     * @param direction Direction to look\n     * @return The next cluster, or null if none exists\n     ",
    "links" : [ ]
  }, {
    "name" : "private View findNextUserSpecifiedKeyboardNavigationCluster(View root, View currentCluster, int direction)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findNextUserSpecifiedFocus(ViewGroup root, View focused, int direction)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findNextFocus(ViewGroup root, View focused, Rect focusedRect, int direction, ArrayList<View> focusables)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findNextKeyboardNavigationCluster(View root, View currentCluster, List<View> clusters, @View.FocusDirection int direction)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findNextFocusInRelativeDirection(ArrayList<View> focusables, ViewGroup root, View focused, Rect focusedRect, int direction)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setFocusBottomRight(ViewGroup root, Rect focusedRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setFocusTopLeft(ViewGroup root, Rect focusedRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " View findNextFocusInAbsoluteDirection(ArrayList<View> focusables, ViewGroup root, View focused, Rect focusedRect, int direction)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static View getNextFocusable(View focused, ArrayList<View> focusables, int count)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static View getPreviousFocusable(View focused, ArrayList<View> focusables, int count)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static View getNextKeyboardNavigationCluster(View root, View currentCluster, List<View> clusters, int count)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static View getPreviousKeyboardNavigationCluster(View root, View currentCluster, List<View> clusters, int count)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isBetterCandidate(int direction, Rect source, Rect rect1, Rect rect2)",
    "returnType" : "boolean",
    "comment" : "\n     * Is rect1 a better candidate than rect2 for a focus search in a particular\n     * direction from a source rect?  This is the core routine that determines\n     * the order of focus searching.\n     * @param direction the direction (up, down, left, right)\n     * @param source The source we are searching from\n     * @param rect1 The candidate rectangle\n     * @param rect2 The current best candidate.\n     * @return Whether the candidate is the new best.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean beamBeats(int direction, Rect source, Rect rect1, Rect rect2)",
    "returnType" : "boolean",
    "comment" : "\n     * One rectangle may be another candidate than another by virtue of being\n     * exclusively in the beam of the source rect.\n     * @return Whether rect1 is a better candidate than rect2 by virtue of it being in src's\n     *      beam\n     ",
    "links" : [ ]
  }, {
    "name" : " long getWeightedDistanceFor(long majorAxisDistance, long minorAxisDistance)",
    "returnType" : "long",
    "comment" : "\n     * Fudge-factor opportunity: how to calculate distance given major and minor\n     * axis distances.  Warning: this fudge factor is finely tuned, be sure to\n     * run all focus tests if you dare tweak it.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isCandidate(Rect srcRect, Rect destRect, int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Is destRect a candidate for the next focus given the direction?  This\n     * checks whether the dest is at least partially to the direction of (e.g left of)\n     * from source.\n     *\n     * Includes an edge case for an empty rect (which is used in some cases when\n     * searching from a point on the screen).\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean beamsOverlap(int direction, Rect rect1, Rect rect2)",
    "returnType" : "boolean",
    "comment" : "\n     * Do the \"beams\" w.r.t the given direction's axis of rect1 and rect2 overlap?\n     * @param direction the direction (up, down, left, right)\n     * @param rect1 The first rectangle\n     * @param rect2 The second rectangle\n     * @return whether the beams overlap\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isToDirectionOf(int direction, Rect src, Rect dest)",
    "returnType" : "boolean",
    "comment" : "\n     * e.g for left, is 'to left of'\n     ",
    "links" : [ ]
  }, {
    "name" : " static int majorAxisDistance(int direction, Rect source, Rect dest)",
    "returnType" : "int",
    "comment" : "\n     * @return The distance from the edge furthest in the given direction\n     *   of source to the edge nearest in the given direction of dest.  If the\n     *   dest is not in the direction from source, return 0.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int majorAxisDistanceRaw(int direction, Rect source, Rect dest)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int majorAxisDistanceToFarEdge(int direction, Rect source, Rect dest)",
    "returnType" : "int",
    "comment" : "\n     * @return The distance along the major axis w.r.t the direction from the\n     *   edge of source to the far edge of dest. If the\n     *   dest is not in the direction from source, return 1 (to break ties with\n     *   {@link #majorAxisDistance}).\n     ",
    "links" : [ "#majorAxisDistance" ]
  }, {
    "name" : " static int majorAxisDistanceToFarEdgeRaw(int direction, Rect source, Rect dest)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int minorAxisDistance(int direction, Rect source, Rect dest)",
    "returnType" : "int",
    "comment" : "\n     * Find the distance on the minor axis w.r.t the direction to the nearest\n     * edge of the destination rectangle.\n     * @param direction the direction (up, down, left, right)\n     * @param source The source rect.\n     * @param dest The destination rect.\n     * @return The distance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View findNearestTouchable(ViewGroup root, int x, int y, int direction, int[] deltas)",
    "returnType" : "View",
    "comment" : "\n     * Find the nearest touchable view to the specified view.\n     * \n     * @param root The root of the tree in which to search\n     * @param x X coordinate from which to start the search\n     * @param y Y coordinate from which to start the search\n     * @param direction Direction to look\n     * @param deltas Offset from the <x, y> to the edge of the nearest view. Note that this array\n     *        may already be populated with values.\n     * @return The nearest touchable view, or null if none exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isTouchCandidate(int x, int y, Rect destRect, int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Is destRect a candidate for the next touch given the direction?\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final boolean isValidId(final int id)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void sort(View[] views, int start, int end, ViewGroup root, boolean isRtl)",
    "returnType" : "void",
    "comment" : "\n     * Public for testing.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "tlFocusFinder", "mFocusedRect", "mOtherRect", "mBestCandidateRect", "mUserSpecifiedFocusComparator", "mUserSpecifiedClusterComparator", "mFocusSorter", "mTempList" ],
  "methodNames" : [ "public static FocusFinder getInstance()", "public final View findNextFocus(ViewGroup root, View focused, int direction)", "public View findNextFocusFromRect(ViewGroup root, Rect focusedRect, int direction)", "private View findNextFocus(ViewGroup root, View focused, Rect focusedRect, int direction)", "private ViewGroup getEffectiveRoot(ViewGroup root, View focused)", "public View findNextKeyboardNavigationCluster(@NonNull View root, @Nullable View currentCluster, @View.FocusDirection int direction)", "private View findNextUserSpecifiedKeyboardNavigationCluster(View root, View currentCluster, int direction)", "private View findNextUserSpecifiedFocus(ViewGroup root, View focused, int direction)", "private View findNextFocus(ViewGroup root, View focused, Rect focusedRect, int direction, ArrayList<View> focusables)", "private View findNextKeyboardNavigationCluster(View root, View currentCluster, List<View> clusters, @View.FocusDirection int direction)", "private View findNextFocusInRelativeDirection(ArrayList<View> focusables, ViewGroup root, View focused, Rect focusedRect, int direction)", "private void setFocusBottomRight(ViewGroup root, Rect focusedRect)", "private void setFocusTopLeft(ViewGroup root, Rect focusedRect)", " View findNextFocusInAbsoluteDirection(ArrayList<View> focusables, ViewGroup root, View focused, Rect focusedRect, int direction)", "private static View getNextFocusable(View focused, ArrayList<View> focusables, int count)", "private static View getPreviousFocusable(View focused, ArrayList<View> focusables, int count)", "private static View getNextKeyboardNavigationCluster(View root, View currentCluster, List<View> clusters, int count)", "private static View getPreviousKeyboardNavigationCluster(View root, View currentCluster, List<View> clusters, int count)", " boolean isBetterCandidate(int direction, Rect source, Rect rect1, Rect rect2)", " boolean beamBeats(int direction, Rect source, Rect rect1, Rect rect2)", " long getWeightedDistanceFor(long majorAxisDistance, long minorAxisDistance)", " boolean isCandidate(Rect srcRect, Rect destRect, int direction)", " boolean beamsOverlap(int direction, Rect rect1, Rect rect2)", " boolean isToDirectionOf(int direction, Rect src, Rect dest)", " static int majorAxisDistance(int direction, Rect source, Rect dest)", " static int majorAxisDistanceRaw(int direction, Rect source, Rect dest)", " static int majorAxisDistanceToFarEdge(int direction, Rect source, Rect dest)", " static int majorAxisDistanceToFarEdgeRaw(int direction, Rect source, Rect dest)", " static int minorAxisDistance(int direction, Rect source, Rect dest)", "public View findNearestTouchable(ViewGroup root, int x, int y, int direction, int[] deltas)", "private boolean isTouchCandidate(int x, int y, Rect destRect, int direction)", "private static final boolean isValidId(final int id)", "public static void sort(View[] views, int start, int end, ViewGroup root, boolean isRtl)" ]
}