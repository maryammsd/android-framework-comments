{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/HardwareRenderer.java",
  "packageName" : "android.graphics",
  "className" : "FrameRenderRequest",
  "comment" : "\n     * Sets the parameters that can be used to control a render request for a\n     * {@link HardwareRenderer}. This is not thread-safe and must not be held on to for longer\n     * than a single frame request.\n     ",
  "variables" : [ {
    "name" : "mFrameInfo",
    "type" : "FrameInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWaitForPresent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFrameInfo(FrameInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public FrameRenderRequest setVsyncTime(long vsyncTime)",
    "returnType" : "FrameRenderRequest",
    "comment" : "\n         * Sets the vsync time that represents the start point of this frame. Typically this\n         * comes from {@link android.view.Choreographer.FrameCallback}. Other compatible time\n         * sources include {@link System#nanoTime()}, however if the result is being displayed\n         * on-screen then using {@link android.view.Choreographer} is strongly recommended to\n         * ensure smooth animations.\n         *\n         * <p>If the clock source is not from a CLOCK_MONOTONIC source then any animations driven\n         * directly by RenderThread will not be synchronized properly with the current frame.\n         *\n         * @param vsyncTime The vsync timestamp for this frame. The timestamp is in nanoseconds\n         *                  and should come from a CLOCK_MONOTONIC source.\n         *\n         * @return this instance\n         ",
    "links" : [ "#nanoTime()", "android.view.Choreographer.FrameCallback", "android.view.Choreographer" ]
  }, {
    "name" : "public FrameRenderRequest setFrameCommitCallback(@NonNull Executor executor, @NonNull Runnable frameCommitCallback)",
    "returnType" : "FrameRenderRequest",
    "comment" : "\n         * Adds a frame commit callback. This callback will be invoked when the current rendering\n         * content has been rendered into a frame and submitted to the swap chain. The frame may\n         * not currently be visible on the display when this is invoked, but it has been submitted.\n         * This callback is useful in combination with {@link PixelCopy} to capture the current\n         * rendered content of the UI reliably.\n         *\n         * @param executor The executor to run the callback on. It is strongly recommended that\n         *                 this executor post to a different thread, as the calling thread is\n         *                 highly sensitive to being blocked.\n         * @param frameCommitCallback The callback to invoke when the frame content has been drawn.\n         *                            Will be invoked on the given {@link Executor}.\n         *\n         * @return this instance\n         ",
    "links" : [ "java.util.concurrent.Executor", "android.view.PixelCopy" ]
  }, {
    "name" : "public FrameRenderRequest setWaitForPresent(boolean shouldWait)",
    "returnType" : "FrameRenderRequest",
    "comment" : "\n         * Sets whether or not {@link #syncAndDraw()} should block until the frame has been\n         * presented. If this is true and {@link #syncAndDraw()} does not return\n         * {@link #SYNC_FRAME_DROPPED} or an error then when {@link #syncAndDraw()} has returned\n         * the frame has been submitted to the {@link Surface}. The default and typically\n         * recommended value is false, as blocking for present will prevent pipelining from\n         * happening, reducing overall throughput. This is useful for situations such as\n         * {@link SurfaceHolder.Callback2#surfaceRedrawNeeded(SurfaceHolder)} where it is desired\n         * to block until a frame has been presented to ensure first-frame consistency with\n         * other Surfaces.\n         *\n         * @param shouldWait If true the next call to {@link #syncAndDraw()} will block until\n         *                   completion.\n         * @return this instance\n         ",
    "links" : [ "#syncAndDraw()", "android.view.Surface", "#SYNC_FRAME_DROPPED", "SurfaceHolder.Callback2#surfaceRedrawNeeded(SurfaceHolder)" ]
  }, {
    "name" : "public int syncAndDraw()",
    "returnType" : "int",
    "comment" : "\n         * Syncs the RenderNode tree to the render thread and requests a frame to be drawn. This\n         * {@link FrameRenderRequest} instance should no longer be used after calling this method.\n         * The system internally may reuse instances of {@link FrameRenderRequest} to reduce\n         * allocation churn.\n         *\n         * @return The result of the sync operation.\n         ",
    "links" : [ "FrameRenderRequest" ]
  } ],
  "variableNames" : [ "mFrameInfo", "mWaitForPresent" ],
  "methodNames" : [ "private void reset()", "public void setFrameInfo(FrameInfo info)", "public FrameRenderRequest setVsyncTime(long vsyncTime)", "public FrameRenderRequest setFrameCommitCallback(@NonNull Executor executor, @NonNull Runnable frameCommitCallback)", "public FrameRenderRequest setWaitForPresent(boolean shouldWait)", "public int syncAndDraw()" ]
}