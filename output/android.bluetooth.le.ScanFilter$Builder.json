{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/ScanFilter.java",
  "packageName" : "android.bluetooth.le",
  "className" : "Builder",
  "comment" : " Builder class for {@link ScanFilter}. ",
  "links" : [ "android.bluetooth.le.ScanFilter" ],
  "variables" : [ {
    "name" : "LEN_IRK_OCTETS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mDeviceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceAddress",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddressType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIrk",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceUuid",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUuidMask",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceSolicitationUuid",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceSolicitationUuidMask",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceDataUuid",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceDataMask",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManufacturerId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManufacturerData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManufacturerDataMask",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdvertisingDataType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdvertisingData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdvertisingDataMask",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransportBlockFilter",
    "type" : "TransportBlockFilter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setDeviceName(String deviceName)",
    "returnType" : "Builder",
    "comment" : " Set filter on device name. ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDeviceAddress(String deviceAddress)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a scan filter on the remote device address.\n         *\n         * <p>The address passed to this API must be in big endian byte order. It needs to be in the\n         * format of \"01:02:03:AB:CD:EF\". The device address can be validated using {@link\n         * BluetoothAdapter#checkBluetoothAddress}. The @AddressType is defaulted to {@link\n         * BluetoothDevice#ADDRESS_TYPE_PUBLIC}.\n         *\n         * @param deviceAddress the remote device Bluetooth address for the filter\n         * @throws IllegalArgumentException if the {@code deviceAddress} is invalid\n         ",
    "links" : [ "android.bluetooth.BluetoothAdapter#checkBluetoothAddress", "android.bluetooth.BluetoothDevice#ADDRESS_TYPE_PUBLIC" ]
  }, {
    "name" : "public Builder setDeviceAddress(@NonNull String deviceAddress, @AddressType int addressType)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a scan filter on the remote device address with an address type.\n         *\n         * <p>The address passed to this API must be in big endian byte order. It needs to be in the\n         * format of \"01:02:03:AB:CD:EF\". The device address can be validated using {@link\n         * BluetoothAdapter#checkBluetoothAddress}.\n         *\n         * @param deviceAddress the remote device Bluetooth address for the filter\n         * @param addressType indication of the type of address\n         * @throws IllegalArgumentException If the {@code deviceAddress} is invalid\n         * @throws IllegalArgumentException If the {@code addressType} is invalid length or is not\n         *     either {@link BluetoothDevice#ADDRESS_TYPE_PUBLIC} or {@link\n         *     BluetoothDevice#ADDRESS_TYPE_RANDOM}\n         * @throws NullPointerException if {@code deviceAddress} is null\n         * @hide\n         ",
    "links" : [ "android.bluetooth.BluetoothAdapter#checkBluetoothAddress", "android.bluetooth.BluetoothDevice#ADDRESS_TYPE_PUBLIC", "android.bluetooth.BluetoothDevice#ADDRESS_TYPE_RANDOM" ]
  }, {
    "name" : "public Builder setDeviceAddress(@NonNull String deviceAddress, @AddressType int addressType, @NonNull byte[] irk)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a scan filter on the remote device address with an address type and the Identity\n         * Resolving Key (IRK).\n         *\n         * <p>The address passed to this API must be either a public or random static address in big\n         * endian byte order. It needs to be in the format of \"01:02:03:AB:CD:EF\". The device\n         * address can be validated using {@link BluetoothAdapter#checkBluetoothAddress}.\n         *\n         * <p>The IRK is used to resolve a static address from a private address. The IRK must be\n         * provided in little endian byte order.\n         *\n         * <p>When using this API, it is recommended to continue scanning until the device is\n         * bonded.\n         *\n         * <p>The resulting {@link ScanResult} that matches this filter will contain an {@link\n         * BluetoothDevice} object for which the {@link BluetoothDevice#getAddress} method will\n         * return the device address passed as a parameter in this method.\n         *\n         * <p>It is not recommended to use this API for discovering devices that are already bonded,\n         * but note if the device with this IRK is already bonded, calling {@link\n         * BluetoothDevice#getAddress} on the {@link ScanResult} using this filter will return the\n         * device address that was used to initiate bonding, and may not match the address passed\n         * into this method in that scenario.\n         *\n         * @param deviceAddress the remote device Bluetooth address for the filter in big endian\n         *     order\n         * @param addressType indication of the type of address\n         * @param irk non-null little endian byte array representing the Identity Resolving Key\n         * @throws IllegalArgumentException If the {@code deviceAddress} is invalid\n         * @throws IllegalArgumentException if the {@code irk} is invalid length\n         * @throws IllegalArgumentException If the {@code addressType} is an invalid length or is\n         *     not PUBLIC or RANDOM STATIC\n         * @throws NullPointerException if {@code deviceAddress} or {@code irk} is null\n         * @hide\n         ",
    "links" : [ "android.bluetooth.BluetoothDevice", "android.bluetooth.BluetoothAdapter#checkBluetoothAddress", "android.bluetooth.BluetoothDevice#getAddress", "android.bluetooth.le.ScanResult" ]
  }, {
    "name" : "private Builder setDeviceAddressInternal(@NonNull String deviceAddress, @AddressType int addressType, @Nullable byte[] irk)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on Address with AddressType and the Identity Resolving Key (IRK).\n         *\n         * <p>Internal setter for the device address\n         *\n         * @param deviceAddress The device Bluetooth address for the filter. It needs to be in the\n         *     format of \"01:02:03:AB:CD:EF\". The device address can be validated using {@link\n         *     BluetoothAdapter#checkBluetoothAddress}.\n         * @param addressType indication of the type of address\n         * @param irk non-null little endian byte array representing the Identity Resolving Key;\n         *     nullable internally.\n         * @throws IllegalArgumentException if the {@code deviceAddress} is invalid\n         * @throws IllegalArgumentException if the {@code addressType} is not PUBLIC or RANDOM\n         *     STATIC when an IRK is present\n         * @throws NullPointerException if {@code deviceAddress} is null\n         * @hide\n         ",
    "links" : [ "android.bluetooth.BluetoothAdapter#checkBluetoothAddress" ]
  }, {
    "name" : "public Builder setServiceUuid(ParcelUuid serviceUuid)",
    "returnType" : "Builder",
    "comment" : " Set filter on service uuid. ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceUuid(ParcelUuid serviceUuid, ParcelUuid uuidMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on partial service uuid. The {@code uuidMask} is the bit mask for the {@code\n         * serviceUuid}. Set any bit in the mask to 1 to indicate a match is needed for the bit in\n         * {@code serviceUuid}, and 0 to ignore that bit.\n         *\n         * @throws IllegalArgumentException If {@code serviceUuid} is {@code null} but {@code\n         *     uuidMask} is not {@code null}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceSolicitationUuid(@Nullable ParcelUuid serviceSolicitationUuid)",
    "returnType" : "Builder",
    "comment" : " Set filter on service solicitation uuid. ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceSolicitationUuid(@Nullable ParcelUuid serviceSolicitationUuid, @Nullable ParcelUuid solicitationUuidMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on partial service Solicitation uuid. The {@code SolicitationUuidMask} is the\n         * bit mask for the {@code serviceSolicitationUuid}. Set any bit in the mask to 1 to\n         * indicate a match is needed for the bit in {@code serviceSolicitationUuid}, and 0 to\n         * ignore that bit.\n         *\n         * @param serviceSolicitationUuid can only be null if solicitationUuidMask is null.\n         * @param solicitationUuidMask can be null or a mask with no restriction.\n         * @throws IllegalArgumentException If {@code serviceSolicitationUuid} is {@code null} but\n         *     {@code solicitationUuidMask} is not {@code null}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceData(ParcelUuid serviceDataUuid, byte[] serviceData)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filtering on service data.\n         *\n         * @throws IllegalArgumentException If {@code serviceDataUuid} is null.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceData(ParcelUuid serviceDataUuid, byte[] serviceData, byte[] serviceDataMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set partial filter on service data. For any bit in the mask, set it to 1 if it needs to\n         * match the one in service data, otherwise set it to 0 to ignore that bit.\n         *\n         * <p>The {@code serviceDataMask} must have the same length of the {@code serviceData}.\n         *\n         * @throws IllegalArgumentException If {@code serviceDataUuid} is null or {@code\n         *     serviceDataMask} is {@code null} while {@code serviceData} is not or {@code\n         *     serviceDataMask} and {@code serviceData} has different length.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setManufacturerData(int manufacturerId, byte[] manufacturerData)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on on manufacturerData. A negative manufacturerId is considered as invalid id.\n         *\n         * @throws IllegalArgumentException If the {@code manufacturerId} is invalid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setManufacturerData(int manufacturerId, byte[] manufacturerData, byte[] manufacturerDataMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on partial manufacture data. For any bit in the mask, set it the 1 if it needs\n         * to match the one in manufacturer data, otherwise set it to 0.\n         *\n         * <p>The {@code manufacturerDataMask} must have the same length of {@code\n         * manufacturerData}.\n         *\n         * @throws IllegalArgumentException If the {@code manufacturerId} is invalid, or {@code\n         *     manufacturerData} is null while {@code manufacturerDataMask} is not, or {@code\n         *     manufacturerData} and {@code manufacturerDataMask} have different length.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTransportBlockFilter(@NonNull TransportBlockFilter transportBlockFilter)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter information for a transport block in Transport Discovery Service advertisement\n         *\n         * <p>Use {@link BluetoothAdapter#getOffloadedTransportDiscoveryDataScanSupported()} to\n         * check whether transport discovery data filtering is supported on this device before\n         * calling this method.\n         *\n         * @param transportBlockFilter filter data for a transport block in Transport Discovery\n         *     Service advertisement\n         * @throws IllegalArgumentException if Transport Discovery Data filter is not supported.\n         * @return this builder\n         * @hide\n         ",
    "links" : [ "android.bluetooth.BluetoothAdapter#getOffloadedTransportDiscoveryDataScanSupported()" ]
  }, {
    "name" : "public Builder setAdvertisingDataTypeWithData(@AdvertisingDataType int advertisingDataType, @NonNull byte[] advertisingData, @NonNull byte[] advertisingDataMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on advertising data with specific advertising data type. For any bit in the\n         * mask, set it the 1 if it needs to match the one in advertising data, otherwise set it to\n         * 0.\n         *\n         * <p>The values of {@code advertisingDataType} are assigned by Bluetooth SIG. For more\n         * details refer to Bluetooth Generic Access Profile.\n         * (https://www.bluetooth.com/specifications/assigned-numbers/) The {@code\n         * advertisingDataMask} must have the same length of {@code advertisingData}.\n         *\n         * @throws IllegalArgumentException If the {@code advertisingDataType} is invalid, {@code\n         *     advertisingData} or {@code advertisingDataMask} is null or {@code advertisingData}\n         *     and {@code advertisingDataMask} have different length.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAdvertisingDataType(@AdvertisingDataType int advertisingDataType)",
    "returnType" : "Builder",
    "comment" : "\n         * Set filter on advertising data with specific advertising data type.\n         *\n         * <p>The values of {@code advertisingDataType} are assigned by Bluetooth SIG. For more\n         * details refer to Bluetooth Generic Access Profile.\n         * (https://www.bluetooth.com/specifications/assigned-numbers/)\n         *\n         * @throws IllegalArgumentException If the {@code advertisingDataType} is invalid\n         ",
    "links" : [ ]
  }, {
    "name" : "public ScanFilter build()",
    "returnType" : "ScanFilter",
    "comment" : "\n         * Build {@link ScanFilter}.\n         *\n         * @throws IllegalArgumentException If the filter cannot be built.\n         ",
    "links" : [ "android.bluetooth.le.ScanFilter" ]
  } ],
  "methodNames" : [ "public Builder setDeviceName(String deviceName)", "public Builder setDeviceAddress(String deviceAddress)", "public Builder setDeviceAddress(@NonNull String deviceAddress, @AddressType int addressType)", "public Builder setDeviceAddress(@NonNull String deviceAddress, @AddressType int addressType, @NonNull byte[] irk)", "private Builder setDeviceAddressInternal(@NonNull String deviceAddress, @AddressType int addressType, @Nullable byte[] irk)", "public Builder setServiceUuid(ParcelUuid serviceUuid)", "public Builder setServiceUuid(ParcelUuid serviceUuid, ParcelUuid uuidMask)", "public Builder setServiceSolicitationUuid(@Nullable ParcelUuid serviceSolicitationUuid)", "public Builder setServiceSolicitationUuid(@Nullable ParcelUuid serviceSolicitationUuid, @Nullable ParcelUuid solicitationUuidMask)", "public Builder setServiceData(ParcelUuid serviceDataUuid, byte[] serviceData)", "public Builder setServiceData(ParcelUuid serviceDataUuid, byte[] serviceData, byte[] serviceDataMask)", "public Builder setManufacturerData(int manufacturerId, byte[] manufacturerData)", "public Builder setManufacturerData(int manufacturerId, byte[] manufacturerData, byte[] manufacturerDataMask)", "public Builder setTransportBlockFilter(@NonNull TransportBlockFilter transportBlockFilter)", "public Builder setAdvertisingDataTypeWithData(@AdvertisingDataType int advertisingDataType, @NonNull byte[] advertisingData, @NonNull byte[] advertisingDataMask)", "public Builder setAdvertisingDataType(@AdvertisingDataType int advertisingDataType)", "public ScanFilter build()" ],
  "variableNames" : [ "LEN_IRK_OCTETS", "mDeviceName", "mDeviceAddress", "mAddressType", "mIrk", "mServiceUuid", "mUuidMask", "mServiceSolicitationUuid", "mServiceSolicitationUuidMask", "mServiceDataUuid", "mServiceData", "mServiceDataMask", "mManufacturerId", "mManufacturerData", "mManufacturerDataMask", "mAdvertisingDataType", "mAdvertisingData", "mAdvertisingDataMask", "mTransportBlockFilter" ]
}