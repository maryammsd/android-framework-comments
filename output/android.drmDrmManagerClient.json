{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/drm/DrmManagerClient.java",
  "packageName" : "android.drm",
  "className" : "DrmManagerClient",
  "comment" : "\n * The main programming interface for the DRM framework. An application must instantiate this class\n * to access DRM agents through the DRM framework.\n *\n * @deprecated Please use {@link android.media.MediaDrm}\n ",
  "variables" : [ {
    "name" : "ERROR_NONE",
    "type" : "int",
    "comment" : "\n     * Indicates that a request was successful or that no error occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that an error occurred and the reason is not known.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_SESSION",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "mInfoThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClosed",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_REMOVE_ALL_RIGHTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_PROCESS_DRM_INFO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUniqueId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInfoHandler",
    "type" : "InfoHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventHandler",
    "type" : "EventHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnInfoListener",
    "type" : "OnInfoListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnEventListener",
    "type" : "OnEventListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnErrorListener",
    "type" : "OnErrorListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void notify(Object thisReference, int uniqueId, int infoType, String message)",
    "returnType" : "void",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Releases resources associated with the current session of\n     * DrmManagerClient. It is considered good practice to call this method when\n     * the {@link DrmManagerClient} object is no longer needed in your\n     * application. After this method is called, {@link DrmManagerClient} is no\n     * longer usable since it has lost all of its required resource.\n     *\n     * This method was added in API 24. In API versions 16 through 23, release()\n     * should be called instead. There is no need to do anything for API\n     * versions prior to 16.\n     ",
    "links" : [ "DrmManagerClient", "DrmManagerClient" ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * @deprecated replaced by {@link #close()}.\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public synchronized void setOnInfoListener(OnInfoListener infoListener)",
    "returnType" : "void",
    "comment" : "\n     * Registers an {@link DrmManagerClient.OnInfoListener} callback, which is invoked when the \n     * DRM framework sends status or warning information during registration or rights acquisition.\n     *\n     * @param infoListener Interface definition for the callback.\n     ",
    "links" : [ "DrmManagerClient.OnInfoListener" ]
  }, {
    "name" : "public synchronized void setOnEventListener(OnEventListener eventListener)",
    "returnType" : "void",
    "comment" : "\n     * Registers an {@link DrmManagerClient.OnEventListener} callback, which is invoked when the \n     * DRM framework sends information about DRM processing.\n     *\n     * @param eventListener Interface definition for the callback.\n     ",
    "links" : [ "DrmManagerClient.OnEventListener" ]
  }, {
    "name" : "public synchronized void setOnErrorListener(OnErrorListener errorListener)",
    "returnType" : "void",
    "comment" : "\n     * Registers an {@link DrmManagerClient.OnErrorListener} callback, which is invoked when \n     * the DRM framework sends error information.\n     *\n     * @param errorListener Interface definition for the callback.\n     ",
    "links" : [ "DrmManagerClient.OnErrorListener" ]
  }, {
    "name" : "public String[] getAvailableDrmEngines()",
    "returnType" : "String[]",
    "comment" : "\n     * Retrieves information about all the DRM plug-ins (agents) that are registered with\n     * the DRM framework.\n     *\n     * @return A <code>String</code> array of DRM plug-in descriptions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collection<DrmSupportInfo> getAvailableDrmSupportInfo()",
    "returnType" : "Collection<DrmSupportInfo>",
    "comment" : "\n     * Retrieves information about all the DRM plug-ins (agents) that are\n     * registered with the DRM framework.\n     *\n     * @return List of all the DRM plug-ins (agents) that are registered with\n     *         the DRM framework.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentValues getConstraints(String path, int action)",
    "returnType" : "ContentValues",
    "comment" : "\n     * Retrieves constraint information for rights-protected content.\n     *\n     * @param path Path to the content from which you are retrieving DRM constraints.\n     * @param action Action defined in {@link DrmStore.Action}.\n     *\n     * @return A {@link android.content.ContentValues} instance that contains\n     * key-value pairs representing the constraints. Null in case of failure.\n     * The keys are defined in {@link DrmStore.ConstraintsColumns}.\n     ",
    "links" : [ "DrmStore.Action", "android.content.ContentValues", "DrmStore.ConstraintsColumns" ]
  }, {
    "name" : "public ContentValues getMetadata(String path)",
    "returnType" : "ContentValues",
    "comment" : "\n    * Retrieves metadata information for rights-protected content.\n    *\n    * @param path Path to the content from which you are retrieving metadata information.\n    *\n    * @return A {@link android.content.ContentValues} instance that contains\n    * key-value pairs representing the metadata. Null in case of failure.\n    ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public ContentValues getConstraints(Uri uri, int action)",
    "returnType" : "ContentValues",
    "comment" : "\n     * Retrieves constraint information for rights-protected content.\n     *\n     * @param uri URI for the content from which you are retrieving DRM constraints.\n     * @param action Action defined in {@link DrmStore.Action}.\n     *\n     * @return A {@link android.content.ContentValues} instance that contains\n     * key-value pairs representing the constraints. Null in case of failure.\n     ",
    "links" : [ "DrmStore.Action", "android.content.ContentValues" ]
  }, {
    "name" : "public ContentValues getMetadata(Uri uri)",
    "returnType" : "ContentValues",
    "comment" : "\n    * Retrieves metadata information for rights-protected content.\n    *\n    * @param uri URI for the content from which you are retrieving metadata information.\n    *\n    * @return A {@link android.content.ContentValues} instance that contains\n    * key-value pairs representing the constraints. Null in case of failure.\n    ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public int saveRights(DrmRights drmRights, String rightsPath, String contentPath) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Saves rights to a specified path and associates that path with the content path.\n     * \n     * <p class=\"note\"><strong>Note:</strong> For OMA or WM-DRM, <code>rightsPath</code> and\n     * <code>contentPath</code> can be null.</p>\n     *\n     * @param drmRights The {@link DrmRights} to be saved.\n     * @param rightsPath File path where rights will be saved.\n     * @param contentPath File path where content is saved.\n     *\n     * @return ERROR_NONE for success; ERROR_UNKNOWN for failure.\n     *\n     * @throws IOException If the call failed to save rights information at the given\n     * <code>rightsPath</code>.\n     ",
    "links" : [ "DrmRights" ]
  }, {
    "name" : "public void installDrmEngine(String engineFilePath)",
    "returnType" : "void",
    "comment" : "\n     * Installs a new DRM plug-in (agent) at runtime.\n     *\n     * @param engineFilePath File path to the plug-in file to be installed.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canHandle(String path, String mimeType)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the given MIME type or path can be handled.\n     *\n     * @param path Path of the content to be handled.\n     * @param mimeType MIME type of the object to be handled.\n     *\n     * @return True if the given MIME type or path can be handled; false if they cannot be handled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canHandle(Uri uri, String mimeType)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the given MIME type or URI can be handled.\n     *\n     * @param uri URI for the content to be handled.\n     * @param mimeType MIME type of the object to be handled\n     *\n     * @return True if the given MIME type or URI can be handled; false if they cannot be handled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int processDrmInfo(DrmInfo drmInfo)",
    "returnType" : "int",
    "comment" : "\n     * Processes the given DRM information based on the information type.\n     *\n     * @param drmInfo The {@link DrmInfo} to be processed.\n     * @return ERROR_NONE for success; ERROR_UNKNOWN for failure.\n     ",
    "links" : [ "DrmInfo" ]
  }, {
    "name" : "public DrmInfo acquireDrmInfo(DrmInfoRequest drmInfoRequest)",
    "returnType" : "DrmInfo",
    "comment" : "\n     * Retrieves information for registering, unregistering, or acquiring rights.\n     *\n     * @param drmInfoRequest The {@link DrmInfoRequest} that specifies the type of DRM\n     * information being retrieved.\n     *\n     * @return A {@link DrmInfo} instance.\n     ",
    "links" : [ "DrmInfoRequest", "DrmInfo" ]
  }, {
    "name" : "public int acquireRights(DrmInfoRequest drmInfoRequest)",
    "returnType" : "int",
    "comment" : "\n     * Processes a given {@link DrmInfoRequest} and returns the rights information asynchronously.\n     *<p>\n     * This is a utility method that consists of an\n     * {@link #acquireDrmInfo(DrmInfoRequest) acquireDrmInfo()} and a\n     * {@link #processDrmInfo(DrmInfo) processDrmInfo()} method call. This utility method can be \n     * used only if the selected DRM plug-in (agent) supports this sequence of calls. Some DRM\n     * agents, such as OMA, do not support this utility method, in which case an application must\n     * invoke {@link #acquireDrmInfo(DrmInfoRequest) acquireDrmInfo()} and\n     * {@link #processDrmInfo(DrmInfo) processDrmInfo()} separately.\n     *\n     * @param drmInfoRequest The {@link DrmInfoRequest} used to acquire the rights.\n     * @return ERROR_NONE for success; ERROR_UNKNOWN for failure.\n     ",
    "links" : [ "DrmInfoRequest", "#acquireDrmInfo", "#processDrmInfo", "#acquireDrmInfo", "#processDrmInfo", "DrmInfoRequest" ]
  }, {
    "name" : "public int getDrmObjectType(String path, String mimeType)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the type of rights-protected object (for example, content object, rights\n     * object, and so on) using the specified path or MIME type. At least one parameter must\n     * be specified to retrieve the DRM object type.\n     *\n     * @param path Path to the content or null.\n     * @param mimeType MIME type of the content or null.\n     * \n     * @return An <code>int</code> that corresponds to a {@link DrmStore.DrmObjectType}.\n     ",
    "links" : [ "DrmStore.DrmObjectType" ]
  }, {
    "name" : "public int getDrmObjectType(Uri uri, String mimeType)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the type of rights-protected object (for example, content object, rights\n     * object, and so on) using the specified URI or MIME type. At least one parameter must\n     * be specified to retrieve the DRM object type.\n     *\n     * @param uri URI for the content or null.\n     * @param mimeType MIME type of the content or null.\n     * \n     * @return An <code>int</code> that corresponds to a {@link DrmStore.DrmObjectType}.\n     ",
    "links" : [ "DrmStore.DrmObjectType" ]
  }, {
    "name" : "public String getOriginalMimeType(String path)",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the MIME type embedded in the original content.\n     *\n     * @param path Path to the rights-protected content.\n     *\n     * @return The MIME type of the original content, such as <code>video/mpeg</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOriginalMimeType(Uri uri)",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the MIME type embedded in the original content.\n     *\n     * @param uri URI of the rights-protected content.\n     *\n     * @return MIME type of the original content, such as <code>video/mpeg</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int checkRightsStatus(String path)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether the given content has valid rights.\n     *\n     * @param path Path to the rights-protected content.\n     *\n     * @return An <code>int</code> representing the {@link DrmStore.RightsStatus} of the content.\n     ",
    "links" : [ "DrmStore.RightsStatus" ]
  }, {
    "name" : "public int checkRightsStatus(Uri uri)",
    "returnType" : "int",
    "comment" : "\n     * Check whether the given content has valid rights.\n     *\n     * @param uri URI of the rights-protected content.\n     *\n     * @return An <code>int</code> representing the {@link DrmStore.RightsStatus} of the content.\n     ",
    "links" : [ "DrmStore.RightsStatus" ]
  }, {
    "name" : "public int checkRightsStatus(String path, int action)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether the given rights-protected content has valid rights for the specified\n     * {@link DrmStore.Action}.\n     *\n     * @param path Path to the rights-protected content.\n     * @param action The {@link DrmStore.Action} to perform.\n     *\n     * @return An <code>int</code> representing the {@link DrmStore.RightsStatus} of the content.\n     ",
    "links" : [ "DrmStore.Action", "DrmStore.Action", "DrmStore.RightsStatus" ]
  }, {
    "name" : "public int checkRightsStatus(Uri uri, int action)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether the given rights-protected content has valid rights for the specified\n     * {@link DrmStore.Action}.\n     *\n     * @param uri URI for the rights-protected content.\n     * @param action The {@link DrmStore.Action} to perform.\n     *\n     * @return An <code>int</code> representing the {@link DrmStore.RightsStatus} of the content.\n     ",
    "links" : [ "DrmStore.Action", "DrmStore.Action", "DrmStore.RightsStatus" ]
  }, {
    "name" : "public int removeRights(String path)",
    "returnType" : "int",
    "comment" : "\n     * Removes the rights associated with the given rights-protected content.\n     *\n     * @param path Path to the rights-protected content.\n     *\n     * @return ERROR_NONE for success; ERROR_UNKNOWN for failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int removeRights(Uri uri)",
    "returnType" : "int",
    "comment" : "\n     * Removes the rights associated with the given rights-protected content.\n     *\n     * @param uri URI for the rights-protected content.\n     *\n     * @return ERROR_NONE for success; ERROR_UNKNOWN for failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int removeAllRights()",
    "returnType" : "int",
    "comment" : "\n     * Removes all the rights information of every DRM plug-in (agent) associated with\n     * the DRM framework. Will be used during a master reset.\n     *\n     * @return ERROR_NONE for success; ERROR_UNKNOWN for failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int openConvertSession(String mimeType)",
    "returnType" : "int",
    "comment" : "\n     * Initiates a new conversion session. An application must initiate a conversion session\n     * with this method each time it downloads a rights-protected file that needs to be converted.\n     *<p>\n     * This method applies only to forward-locking (copy protection) DRM schemes.\n     *\n     * @param mimeType MIME type of the input data packet.\n     *\n     * @return A convert ID that is used used to maintain the conversion session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DrmConvertedStatus convertData(int convertId, byte[] inputData)",
    "returnType" : "DrmConvertedStatus",
    "comment" : "\n     * Converts the input data (content) that is part of a rights-protected file. The converted\n     * data and status is returned in a {@link DrmConvertedStatus} object. This method should be\n     * called each time there is a new block of data received by the application.\n     *\n     * @param convertId Handle for the conversion session.\n     * @param inputData Input data that needs to be converted.\n     *\n     * @return A {@link DrmConvertedStatus} object that contains the status of the data conversion,\n     * the converted data, and offset for the header and body signature. An application can \n     * ignore the offset because it is only relevant to the\n     * {@link #closeConvertSession closeConvertSession()} method.\n     ",
    "links" : [ "DrmConvertedStatus", "DrmConvertedStatus", "#closeConvertSession" ]
  }, {
    "name" : "public DrmConvertedStatus closeConvertSession(int convertId)",
    "returnType" : "DrmConvertedStatus",
    "comment" : "\n     * Informs the DRM plug-in (agent) that there is no more data to convert or that an error \n     * has occurred. Upon successful conversion of the data, the DRM agent will provide an offset\n     * value indicating where the header and body signature should be added. Appending the \n     * signature is necessary to protect the integrity of the converted file.\n     *\n     * @param convertId Handle for the conversion session.\n     *\n     * @return A {@link DrmConvertedStatus} object that contains the status of the data conversion,\n     * the converted data, and the offset for the header and body signature.\n     ",
    "links" : [ "DrmConvertedStatus" ]
  }, {
    "name" : "private int getEventType(int infoType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getErrorType(int infoType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String convertUriToPath(Uri uri)",
    "returnType" : "String",
    "comment" : "\n     * This method expects uri in the following format\n     *     content://media/<table_name>/<row_index> (or)\n     *     file://sdcard/test.mp4\n     *     http://test.com/test.mp4\n     *     https://test.com/test.mp4\n     *\n     * Here <table_name> shall be \"video\" or \"audio\" or \"images\"\n     * <row_index> the index of the content in given table\n     ",
    "links" : [ ]
  }, {
    "name" : "private native int _initialize()",
    "returnType" : "int",
    "comment" : " private native interfaces",
    "links" : [ ]
  }, {
    "name" : "private native void _setListeners(int uniqueId, Object weak_this)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void _release(int uniqueId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void _installDrmEngine(int uniqueId, String engineFilepath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native ContentValues _getConstraints(int uniqueId, String path, int usage)",
    "returnType" : "ContentValues",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native ContentValues _getMetadata(int uniqueId, String path)",
    "returnType" : "ContentValues",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean _canHandle(int uniqueId, String path, String mimeType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native DrmInfoStatus _processDrmInfo(int uniqueId, DrmInfo drmInfo)",
    "returnType" : "DrmInfoStatus",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native DrmInfo _acquireDrmInfo(int uniqueId, DrmInfoRequest drmInfoRequest)",
    "returnType" : "DrmInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int _saveRights(int uniqueId, DrmRights drmRights, String rightsPath, String contentPath)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int _getDrmObjectType(int uniqueId, String path, String mimeType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native String _getOriginalMimeType(int uniqueId, String path, FileDescriptor fd)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int _checkRightsStatus(int uniqueId, String path, int action)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int _removeRights(int uniqueId, String path)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int _removeAllRights(int uniqueId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int _openConvertSession(int uniqueId, String mimeType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native DrmConvertedStatus _convertData(int uniqueId, int convertId, byte[] inputData)",
    "returnType" : "DrmConvertedStatus",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native DrmConvertedStatus _closeConvertSession(int uniqueId, int convertId)",
    "returnType" : "DrmConvertedStatus",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native DrmSupportInfo[] _getAllSupportInfo(int uniqueId)",
    "returnType" : "DrmSupportInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createEventThreads()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createListeners()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "ERROR_NONE", "ERROR_UNKNOWN", "INVALID_SESSION", "mInfoThread", "mEventThread", "TAG", "mClosed", "mCloseGuard", "ACTION_REMOVE_ALL_RIGHTS", "ACTION_PROCESS_DRM_INFO", "mUniqueId", "mNativeContext", "mContext", "mInfoHandler", "mEventHandler", "mOnInfoListener", "mOnEventListener", "mOnErrorListener" ],
  "methodNames" : [ "public static void notify(Object thisReference, int uniqueId, int infoType, String message)", "protected void finalize() throws Throwable", "public void close()", "public void release()", "public synchronized void setOnInfoListener(OnInfoListener infoListener)", "public synchronized void setOnEventListener(OnEventListener eventListener)", "public synchronized void setOnErrorListener(OnErrorListener errorListener)", "public String[] getAvailableDrmEngines()", "public Collection<DrmSupportInfo> getAvailableDrmSupportInfo()", "public ContentValues getConstraints(String path, int action)", "public ContentValues getMetadata(String path)", "public ContentValues getConstraints(Uri uri, int action)", "public ContentValues getMetadata(Uri uri)", "public int saveRights(DrmRights drmRights, String rightsPath, String contentPath) throws IOException", "public void installDrmEngine(String engineFilePath)", "public boolean canHandle(String path, String mimeType)", "public boolean canHandle(Uri uri, String mimeType)", "public int processDrmInfo(DrmInfo drmInfo)", "public DrmInfo acquireDrmInfo(DrmInfoRequest drmInfoRequest)", "public int acquireRights(DrmInfoRequest drmInfoRequest)", "public int getDrmObjectType(String path, String mimeType)", "public int getDrmObjectType(Uri uri, String mimeType)", "public String getOriginalMimeType(String path)", "public String getOriginalMimeType(Uri uri)", "public int checkRightsStatus(String path)", "public int checkRightsStatus(Uri uri)", "public int checkRightsStatus(String path, int action)", "public int checkRightsStatus(Uri uri, int action)", "public int removeRights(String path)", "public int removeRights(Uri uri)", "public int removeAllRights()", "public int openConvertSession(String mimeType)", "public DrmConvertedStatus convertData(int convertId, byte[] inputData)", "public DrmConvertedStatus closeConvertSession(int convertId)", "private int getEventType(int infoType)", "private int getErrorType(int infoType)", "private String convertUriToPath(Uri uri)", "private native int _initialize()", "private native void _setListeners(int uniqueId, Object weak_this)", "private native void _release(int uniqueId)", "private native void _installDrmEngine(int uniqueId, String engineFilepath)", "private native ContentValues _getConstraints(int uniqueId, String path, int usage)", "private native ContentValues _getMetadata(int uniqueId, String path)", "private native boolean _canHandle(int uniqueId, String path, String mimeType)", "private native DrmInfoStatus _processDrmInfo(int uniqueId, DrmInfo drmInfo)", "private native DrmInfo _acquireDrmInfo(int uniqueId, DrmInfoRequest drmInfoRequest)", "private native int _saveRights(int uniqueId, DrmRights drmRights, String rightsPath, String contentPath)", "private native int _getDrmObjectType(int uniqueId, String path, String mimeType)", "private native String _getOriginalMimeType(int uniqueId, String path, FileDescriptor fd)", "private native int _checkRightsStatus(int uniqueId, String path, int action)", "private native int _removeRights(int uniqueId, String path)", "private native int _removeAllRights(int uniqueId)", "private native int _openConvertSession(int uniqueId, String mimeType)", "private native DrmConvertedStatus _convertData(int uniqueId, int convertId, byte[] inputData)", "private native DrmConvertedStatus _closeConvertSession(int uniqueId, int convertId)", "private native DrmSupportInfo[] _getAllSupportInfo(int uniqueId)", "private void createEventThreads()", "private void createListeners()" ]
}