{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/VideoView.java",
  "packageName" : "android.widget",
  "className" : "VideoView",
  "comment" : "\n * Displays a video file.  The VideoView class\n * can load images from various sources (such as resources or content\n * providers), takes care of computing its measurement from the video so that\n * it can be used in any layout manager, and provides various display options\n * such as scaling and tinting.<p>\n *\n * <em>Note: VideoView does not retain its full state when going into the\n * background.</em>  In particular, it does not restore the current play state,\n * play position, selected tracks, or any subtitle tracks added via\n * {@link #addSubtitleSource addSubtitleSource()}.  Applications should\n * save and restore these on their own in\n * {@link android.app.Activity#onSaveInstanceState} and\n * {@link android.app.Activity#onRestoreInstanceState}.<p>\n * Also note that the audio session id (from {@link #getAudioSessionId}) may\n * change from its previously returned value when the VideoView is restored.\n * <p>\n * By default, VideoView requests audio focus with {@link AudioManager#AUDIOFOCUS_GAIN}. Use\n * {@link #setAudioFocusRequest(int)} to change this behavior.\n * <p>\n * The default {@link AudioAttributes} used during playback have a usage of\n * {@link AudioAttributes#USAGE_MEDIA} and a content type of\n * {@link AudioAttributes#CONTENT_TYPE_MOVIE}, use {@link #setAudioAttributes(AudioAttributes)} to\n * modify them.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_ERROR",
    "type" : "int",
    "comment" : " all possible internal states",
    "links" : [ ]
  }, {
    "name" : "STATE_IDLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_PREPARING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_PREPARED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_PLAYING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_PAUSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_PLAYBACK_COMPLETED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingSubtitleTracks",
    "type" : "Vector<Pair<InputStream, MediaFormat>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUri",
    "type" : "Uri",
    "comment" : " settable by the client",
    "links" : [ ]
  }, {
    "name" : "mHeaders",
    "type" : "Map<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentState",
    "type" : "int",
    "comment" : " of STATE_PAUSED.",
    "links" : [ ]
  }, {
    "name" : "mTargetState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceHolder",
    "type" : "SurfaceHolder",
    "comment" : " All the stuff we need for playing and showing a video",
    "links" : [ ]
  }, {
    "name" : "mMediaPlayer",
    "type" : "MediaPlayer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioSession",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaController",
    "type" : "MediaController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnCompletionListener",
    "type" : "OnCompletionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnPreparedListener",
    "type" : "MediaPlayer.OnPreparedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentBufferPercentage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnErrorListener",
    "type" : "OnErrorListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnInfoListener",
    "type" : "OnInfoListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeekWhenPrepared",
    "type" : "int",
    "comment" : " recording the seek position while preparing",
    "links" : [ ]
  }, {
    "name" : "mCanPause",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanSeekBack",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanSeekForward",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioManager",
    "type" : "AudioManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioFocusType",
    "type" : "int",
    "comment" : " legacy focus gain",
    "links" : [ ]
  }, {
    "name" : "mAudioAttributes",
    "type" : "AudioAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtitleWidget",
    "type" : "RenderingWidget",
    "comment" : " Subtitle rendering widget overlaid on top of the video. ",
    "links" : [ ]
  }, {
    "name" : "mSubtitlesChangedListener",
    "type" : "RenderingWidget.OnChangedListener",
    "comment" : " Listener for changes to subtitle data, used to redraw when needed. ",
    "links" : [ ]
  }, {
    "name" : "mSizeChangedListener",
    "type" : "MediaPlayer.OnVideoSizeChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreparedListener",
    "type" : "MediaPlayer.OnPreparedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompletionListener",
    "type" : "MediaPlayer.OnCompletionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInfoListener",
    "type" : "MediaPlayer.OnInfoListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorListener",
    "type" : "MediaPlayer.OnErrorListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBufferingUpdateListener",
    "type" : "MediaPlayer.OnBufferingUpdateListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSHCallback",
    "type" : "SurfaceHolder.Callback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int resolveAdjustedSize(int desiredSize, int measureSpec)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVideoPath(String path)",
    "returnType" : "void",
    "comment" : "\n     * Sets video path.\n     *\n     * @param path the path of the video.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVideoURI(Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Sets video URI.\n     *\n     * @param uri the URI of the video.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVideoURI(Uri uri, Map<String, String> headers)",
    "returnType" : "void",
    "comment" : "\n     * Sets video URI using specific headers.\n     *\n     * @param uri     the URI of the video.\n     * @param headers the headers for the URI request.\n     *                Note that the cross domain redirection is allowed by default, but that can be\n     *                changed with key/value pairs through the headers parameter with\n     *                \"android-allow-cross-domain-redirect\" as the key and \"0\" or \"1\" as the value\n     *                to disallow or allow cross domain redirection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAudioFocusRequest(int focusGain)",
    "returnType" : "void",
    "comment" : "\n     * Sets which type of audio focus will be requested during the playback, or configures playback\n     * to not request audio focus. Valid values for focus requests are\n     * {@link AudioManager#AUDIOFOCUS_GAIN}, {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT},\n     * {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK}, and\n     * {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE}. Or use\n     * {@link AudioManager#AUDIOFOCUS_NONE} to express that audio focus should not be\n     * requested when playback starts. You can for instance use this when playing a silent animation\n     * through this class, and you don't want to affect other audio applications playing in the\n     * background.\n     * @param focusGain the type of audio focus gain that will be requested, or\n     *    {@link AudioManager#AUDIOFOCUS_NONE} to disable the use audio focus during playback.\n     ",
    "links" : [ "AudioManager#AUDIOFOCUS_GAIN", "AudioManager#AUDIOFOCUS_GAIN_TRANSIENT", "AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK", "AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE", "AudioManager#AUDIOFOCUS_NONE", "AudioManager#AUDIOFOCUS_NONE" ]
  }, {
    "name" : "public void setAudioAttributes(@NonNull AudioAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AudioAttributes} to be used during the playback of the video.\n     * @param attributes non-null <code>AudioAttributes</code>.\n     ",
    "links" : [ "AudioAttributes" ]
  }, {
    "name" : "public void addSubtitleSource(InputStream is, MediaFormat format)",
    "returnType" : "void",
    "comment" : "\n     * Adds an external subtitle source file (from the provided input stream.)\n     *\n     * Note that a single external subtitle source may contain multiple or no\n     * supported tracks in it. If the source contained at least one track in\n     * it, one will receive an {@link MediaPlayer#MEDIA_INFO_METADATA_UPDATE}\n     * info message. Otherwise, if reading the source takes excessive time,\n     * one will receive a {@link MediaPlayer#MEDIA_INFO_SUBTITLE_TIMED_OUT}\n     * message. If the source contained no supported track (including an empty\n     * source file or null input stream), one will receive a {@link\n     * MediaPlayer#MEDIA_INFO_UNSUPPORTED_SUBTITLE} message. One can find the\n     * total number of available tracks using {@link MediaPlayer#getTrackInfo()}\n     * to see what additional tracks become available after this method call.\n     *\n     * @param is     input stream containing the subtitle data.  It will be\n     *               closed by the media framework.\n     * @param format the format of the subtitle track(s).  Must contain at least\n     *               the mime type ({@link MediaFormat#KEY_MIME}) and the\n     *               language ({@link MediaFormat#KEY_LANGUAGE}) of the file.\n     *               If the file itself contains the language information,\n     *               specify \"und\" for the language.\n     ",
    "links" : [ "MediaPlayer#MEDIA_INFO_METADATA_UPDATE", "MediaPlayer#MEDIA_INFO_SUBTITLE_TIMED_OUT", "MediaPlayer#getTrackInfo", "MediaFormat#KEY_MIME", "MediaFormat#KEY_LANGUAGE" ]
  }, {
    "name" : "public void stopPlayback()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void openVideo()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMediaController(MediaController controller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void attachMediaController()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnPreparedListener(MediaPlayer.OnPreparedListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the media file\n     * is loaded and ready to go.\n     *\n     * @param l The callback that will be run\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnCompletionListener(OnCompletionListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the end of a media file\n     * has been reached during playback.\n     *\n     * @param l The callback that will be run\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnErrorListener(OnErrorListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when an error occurs\n     * during playback or setup.  If no listener is specified,\n     * or if the listener returned false, VideoView will inform\n     * the user of any errors.\n     *\n     * @param l The callback that will be run\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnInfoListener(OnInfoListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when an informational event\n     * occurs during playback or setup.\n     *\n     * @param l The callback that will be run\n     ",
    "links" : [ ]
  }, {
    "name" : "private void release(boolean cleartargetstate)",
    "returnType" : "void",
    "comment" : "\n     * release the media player in any state\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTrackballEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void toggleMediaControlsVisiblity()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pause()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void suspend()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resume()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDuration()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentPosition()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void seekTo(int msec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPlaying()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBufferPercentage()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isInPlaybackState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canPause()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canSeekBackward()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canSeekForward()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAudioSessionId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void measureAndLayoutSubtitleWidget()",
    "returnType" : "void",
    "comment" : "\n     * Forces a measurement and layout pass for all overlaid views.\n     *\n     * @see #setSubtitleWidget(RenderingWidget)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubtitleWidget(RenderingWidget subtitleWidget)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Looper getSubtitleLooper()",
    "returnType" : "Looper",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "STATE_ERROR", "STATE_IDLE", "STATE_PREPARING", "STATE_PREPARED", "STATE_PLAYING", "STATE_PAUSED", "STATE_PLAYBACK_COMPLETED", "mPendingSubtitleTracks", "mUri", "mHeaders", "mCurrentState", "mTargetState", "mSurfaceHolder", "mMediaPlayer", "mAudioSession", "mVideoWidth", "mVideoHeight", "mSurfaceWidth", "mSurfaceHeight", "mMediaController", "mOnCompletionListener", "mOnPreparedListener", "mCurrentBufferPercentage", "mOnErrorListener", "mOnInfoListener", "mSeekWhenPrepared", "mCanPause", "mCanSeekBack", "mCanSeekForward", "mAudioManager", "mAudioFocusType", "mAudioAttributes", "mSubtitleWidget", "mSubtitlesChangedListener", "mSizeChangedListener", "mPreparedListener", "mCompletionListener", "mInfoListener", "mErrorListener", "mBufferingUpdateListener", "mSHCallback" ],
  "methodNames" : [ "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public CharSequence getAccessibilityClassName()", "public int resolveAdjustedSize(int desiredSize, int measureSpec)", "public void setVideoPath(String path)", "public void setVideoURI(Uri uri)", "public void setVideoURI(Uri uri, Map<String, String> headers)", "public void setAudioFocusRequest(int focusGain)", "public void setAudioAttributes(@NonNull AudioAttributes attributes)", "public void addSubtitleSource(InputStream is, MediaFormat format)", "public void stopPlayback()", "private void openVideo()", "public void setMediaController(MediaController controller)", "private void attachMediaController()", "public void setOnPreparedListener(MediaPlayer.OnPreparedListener l)", "public void setOnCompletionListener(OnCompletionListener l)", "public void setOnErrorListener(OnErrorListener l)", "public void setOnInfoListener(OnInfoListener l)", "private void release(boolean cleartargetstate)", "public boolean onTouchEvent(MotionEvent ev)", "public boolean onTrackballEvent(MotionEvent ev)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "private void toggleMediaControlsVisiblity()", "public void start()", "public void pause()", "public void suspend()", "public void resume()", "public int getDuration()", "public int getCurrentPosition()", "public void seekTo(int msec)", "public boolean isPlaying()", "public int getBufferPercentage()", "private boolean isInPlaybackState()", "public boolean canPause()", "public boolean canSeekBackward()", "public boolean canSeekForward()", "public int getAudioSessionId()", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "public void draw(Canvas canvas)", "private void measureAndLayoutSubtitleWidget()", "public void setSubtitleWidget(RenderingWidget subtitleWidget)", "public Looper getSubtitleLooper()" ]
}