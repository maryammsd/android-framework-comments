{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/fingerprint/FingerprintManager.java",
  "packageName" : "android.hardware.fingerprint",
  "className" : "FingerprintManager",
  "comment" : "\n * A class that coordinates access to the fingerprint hardware.\n * @deprecated See {@link BiometricPrompt} which shows a system-provided dialog upon starting\n * authentication. In a world where devices may have different types of biometric authentication,\n * it's much more realistic to have a system-provided authentication dialog since the method may\n * vary by vendor/device.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ENROLL_RESULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ACQUIRED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_AUTHENTICATION_SUCCEEDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_AUTHENTICATION_FAILED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_REMOVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ENUMERATED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IFingerprintService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthenticationCallback",
    "type" : "AuthenticationCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnrollmentCallback",
    "type" : "EnrollmentCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemovalCallback",
    "type" : "RemovalCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnumerateCallback",
    "type" : "EnumerateCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCryptoObject",
    "type" : "CryptoObject",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemovalFingerprint",
    "type" : "Fingerprint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceReceiver",
    "type" : "IFingerprintServiceReceiver",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, int flags, @NonNull AuthenticationCallback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Request authentication of a crypto object. This call warms up the fingerprint hardware\n     * and starts scanning for a fingerprint. It terminates when\n     * {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)} or\n     * {@link AuthenticationCallback#onAuthenticationSucceeded(AuthenticationResult)} is called, at\n     * which point the object is no longer valid. The operation can be canceled by using the\n     * provided cancel object.\n     *\n     * @param crypto object associated with the call or null if none required.\n     * @param cancel an object that can be used to cancel authentication\n     * @param flags optional flags; should be 0\n     * @param callback an object to receive authentication events\n     * @param handler an optional handler to handle callback events\n     *\n     * @throws IllegalArgumentException if the crypto operation is not supported or is not backed\n     *         by <a href=\"{@docRoot}training/articles/keystore.html\">Android Keystore\n     *         facility</a>.\n     * @throws IllegalStateException if the crypto primitive is not initialized.\n     * @deprecated See {@link BiometricPrompt#authenticate(CancellationSignal, Executor,\n     * BiometricPrompt.AuthenticationCallback)} and {@link BiometricPrompt#authenticate(\n     * BiometricPrompt.CryptoObject, CancellationSignal, Executor,\n     * BiometricPrompt.AuthenticationCallback)}\n     ",
    "links" : [ "AuthenticationCallback#onAuthenticationError", "AuthenticationCallback#onAuthenticationSucceeded", "BiometricPrompt#authenticate", "BiometricPrompt#authenticate" ]
  }, {
    "name" : "private void useHandler(Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Use the provided handler thread for events.\n     * @param handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, int flags, @NonNull AuthenticationCallback callback, Handler handler, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Per-user version, see {@link FingerprintManager#authenticate(CryptoObject,\n     * CancellationSignal, int, AuthenticationCallback, Handler)}. This version does not\n     * display the BiometricPrompt.\n     * @param userId the user ID that the fingerprint hardware will authenticate for.\n     * @hide\n     ",
    "links" : [ "FingerprintManager#authenticate" ]
  }, {
    "name" : "public void enroll(byte[] token, CancellationSignal cancel, int flags, int userId, EnrollmentCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Request fingerprint enrollment. This call warms up the fingerprint hardware\n     * and starts scanning for fingerprints. Progress will be indicated by callbacks to the\n     * {@link EnrollmentCallback} object. It terminates when\n     * {@link EnrollmentCallback#onEnrollmentError(int, CharSequence)} or\n     * {@link EnrollmentCallback#onEnrollmentProgress(int) is called with remaining == 0, at\n     * which point the object is no longer valid. The operation can be canceled by using the\n     * provided cancel object.\n     * @param token a unique token provided by a recent creation or verification of device\n     * credentials (e.g. pin, pattern or password).\n     * @param cancel an object that can be used to cancel enrollment\n     * @param flags optional flags\n     * @param userId the user to whom this fingerprint will belong to\n     * @param callback an object to receive enrollment events\n     * @hide\n     ",
    "links" : [ "EnrollmentCallback", "EnrollmentCallback#onEnrollmentError", "EnrollmentCallback#onEnrollmentProgress" ]
  }, {
    "name" : "public long preEnroll()",
    "returnType" : "long",
    "comment" : "\n     * Requests a pre-enrollment auth token to tie enrollment to the confirmation of\n     * existing device credentials (e.g. pin/pattern/password).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int postEnroll()",
    "returnType" : "int",
    "comment" : "\n     * Finishes enrollment and cancels the current auth token.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setActiveUser(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the active user. This is meant to be used to select the current profile for enrollment\n     * to allow separate enrolled fingers for a work profile\n     * @param userId\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(Fingerprint fp, int userId, RemovalCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove given fingerprint template from fingerprint hardware and/or protected storage.\n     * @param fp the fingerprint item to remove\n     * @param userId the user who this fingerprint belongs to\n     * @param callback an optional callback to verify that fingerprint templates have been\n     * successfully removed. May be null of no callback is required.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enumerate(int userId, @NonNull EnumerateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Enumerate all fingerprint templates stored in hardware and/or protected storage.\n     * @param userId the user who this fingerprint belongs to\n     * @param callback an optional callback to verify that fingerprint templates have been\n     * successfully removed. May be null of no callback is required.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rename(int fpId, int userId, String newName)",
    "returnType" : "void",
    "comment" : "\n     * Renames the given fingerprint template\n     * @param fpId the fingerprint id\n     * @param userId the user who this fingerprint belongs to\n     * @param newName the new name\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Fingerprint> getEnrolledFingerprints(int userId)",
    "returnType" : "List<Fingerprint>",
    "comment" : "\n     * Obtain the list of enrolled fingerprints templates.\n     * @return list of current fingerprint items\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Fingerprint> getEnrolledFingerprints()",
    "returnType" : "List<Fingerprint>",
    "comment" : "\n     * Obtain the list of enrolled fingerprints templates.\n     * @return list of current fingerprint items\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledTemplates()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledTemplates(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledFingerprints()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if there is at least one fingerprint enrolled.\n     *\n     * @return true if at least one fingerprint is enrolled, false otherwise\n     * @deprecated See {@link BiometricPrompt} and\n     * {@link FingerprintManager#FINGERPRINT_ERROR_NO_FINGERPRINTS}\n     ",
    "links" : [ "BiometricPrompt", "FingerprintManager#FINGERPRINT_ERROR_NO_FINGERPRINTS" ]
  }, {
    "name" : "public boolean hasEnrolledFingerprints(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardwareDetected()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if fingerprint hardware is present and functional.\n     *\n     * @return true if hardware is present and functional, false otherwise.\n     * @deprecated See {@link BiometricPrompt} and\n     * {@link FingerprintManager#FINGERPRINT_ERROR_HW_UNAVAILABLE}\n     ",
    "links" : [ "BiometricPrompt", "FingerprintManager#FINGERPRINT_ERROR_HW_UNAVAILABLE" ]
  }, {
    "name" : "public void addLockoutResetCallback(final LockoutResetCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sendRemovedResult(Fingerprint fingerprint, int remaining)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendEnumeratedResult(long deviceId, int fingerId, int groupId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendEnrollResult(Fingerprint fp, int remaining)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendAuthenticatedSucceeded(Fingerprint fp, int userId, boolean isStrongBiometric)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendAuthenticatedFailed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendAcquiredResult(long deviceId, int acquireInfo, int vendorCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendErrorResult(long deviceId, int errMsgId, int vendorCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getCurrentUserId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelEnrollment()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelAuthentication(android.hardware.biometrics.CryptoObject cryptoObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getErrorString(Context context, int errMsg, int vendorCode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getAcquiredString(Context context, int acquireInfo, int vendorCode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "MSG_ENROLL_RESULT", "MSG_ACQUIRED", "MSG_AUTHENTICATION_SUCCEEDED", "MSG_AUTHENTICATION_FAILED", "MSG_ERROR", "MSG_REMOVED", "MSG_ENUMERATED", "mService", "mContext", "mToken", "mAuthenticationCallback", "mEnrollmentCallback", "mRemovalCallback", "mEnumerateCallback", "mCryptoObject", "mRemovalFingerprint", "mHandler", "mServiceReceiver" ],
  "methodNames" : [ "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, int flags, @NonNull AuthenticationCallback callback, @Nullable Handler handler)", "private void useHandler(Handler handler)", "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, int flags, @NonNull AuthenticationCallback callback, Handler handler, int userId)", "public void enroll(byte[] token, CancellationSignal cancel, int flags, int userId, EnrollmentCallback callback)", "public long preEnroll()", "public int postEnroll()", "public void setActiveUser(int userId)", "public void remove(Fingerprint fp, int userId, RemovalCallback callback)", "public void enumerate(int userId, @NonNull EnumerateCallback callback)", "public void rename(int fpId, int userId, String newName)", "public List<Fingerprint> getEnrolledFingerprints(int userId)", "public List<Fingerprint> getEnrolledFingerprints()", "public boolean hasEnrolledTemplates()", "public boolean hasEnrolledTemplates(int userId)", "public boolean hasEnrolledFingerprints()", "public boolean hasEnrolledFingerprints(int userId)", "public boolean isHardwareDetected()", "public void addLockoutResetCallback(final LockoutResetCallback callback)", "private void sendRemovedResult(Fingerprint fingerprint, int remaining)", "private void sendEnumeratedResult(long deviceId, int fingerId, int groupId)", "private void sendEnrollResult(Fingerprint fp, int remaining)", "private void sendAuthenticatedSucceeded(Fingerprint fp, int userId, boolean isStrongBiometric)", "private void sendAuthenticatedFailed()", "private void sendAcquiredResult(long deviceId, int acquireInfo, int vendorCode)", "private void sendErrorResult(long deviceId, int errMsgId, int vendorCode)", "private int getCurrentUserId()", "private void cancelEnrollment()", "private void cancelAuthentication(android.hardware.biometrics.CryptoObject cryptoObject)", "public static String getErrorString(Context context, int errMsg, int vendorCode)", "public static String getAcquiredString(Context context, int acquireInfo, int vendorCode)" ]
}