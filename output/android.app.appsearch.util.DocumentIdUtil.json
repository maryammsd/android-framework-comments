{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/util/DocumentIdUtil.java",
  "packageName" : "android.app.appsearch.util",
  "className" : "DocumentIdUtil",
  "comment" : " A util class with methods for working with document ids. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NAMESPACE_DELIMITER",
    "type" : "String",
    "comment" : " A delimiter between the namespace and the document id. ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_DELIMITER_REPLACEMENT_REGEX",
    "type" : "String",
    "comment" : "\n     * In regex, 4 backslashes in Java represent a single backslash in Regex. This will escape the\n     * namespace delimiter.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String createQualifiedId(@NonNull String packageName, @NonNull String databaseName, @NonNull GenericDocument document)",
    "returnType" : "String",
    "comment" : "\n     * Generates a qualified id based on package, database, and a {@link GenericDocument}.\n     *\n     * @param packageName The package the document belongs to.\n     * @param databaseName The database containing the document.\n     * @param document The document to generate a qualified id for.\n     * @return the qualified id of a document.\n     * @see #createQualifiedId(String, String, String, String)\n     ",
    "links" : [ "android.app.appsearch.GenericDocument" ]
  }, {
    "name" : "public static String createQualifiedId(@NonNull String packageName, @NonNull String databaseName, @NonNull String namespace, @NonNull String id)",
    "returnType" : "String",
    "comment" : " TODO(b/256022027): Add @link to QUALIFIED_ID and JoinSpec",
    "links" : [ "to" ]
  }, {
    "name" : "private static String escapeNsDelimiters(@NonNull String original)",
    "returnType" : "String",
    "comment" : "\n     * Escapes both the namespace delimiter and backslashes.\n     *\n     * <p>For example, say the raw namespace contains ...\\#... . if we only escape the namespace\n     * delimiter, we would get ...\\\\#..., which would appear to be a delimiter, and split the\n     * namespace in two. We need to escape the backslash as well, resulting in ...\\\\\\#..., which is\n     * not a delimiter, keeping the namespace together.\n     *\n     * @param original The String to escape\n     * @return An escaped string\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String createQualifiedId(@NonNull String packageName, @NonNull String databaseName, @NonNull GenericDocument document)", "public static String createQualifiedId(@NonNull String packageName, @NonNull String databaseName, @NonNull String namespace, @NonNull String id)", "private static String escapeNsDelimiters(@NonNull String original)" ],
  "variableNames" : [ "NAMESPACE_DELIMITER", "NAMESPACE_DELIMITER_REPLACEMENT_REGEX" ]
}