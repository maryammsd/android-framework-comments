{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/AlertDialog.java",
  "packageName" : "android.app",
  "className" : "Builder",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "P",
    "type" : "AlertController.AlertParams",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Context getContext()",
    "returnType" : "Context",
    "comment" : "\n         * Returns a {@link Context} with the appropriate theme for dialogs created by this Builder.\n         * Applications should use this Context for obtaining LayoutInflaters for inflating views\n         * that will be used in the resulting dialogs, as it will cause views to be inflated with\n         * the correct theme.\n         *\n         * @return A Context for built Dialogs.\n         ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public Builder setTitle(@StringRes int titleId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the title using the given resource id.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTitle(CharSequence title)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the title displayed in the {@link Dialog}.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "android.app.Dialog" ]
  }, {
    "name" : "public Builder setCustomTitle(View customTitleView)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the title using the custom view {@code customTitleView}.\n         * <p>\n         * The methods {@link #setTitle(int)} and {@link #setIcon(int)} should\n         * be sufficient for most titles, but this is provided if the title\n         * needs more customization. Using this will replace the title and icon\n         * set via the other methods.\n         * <p>\n         * <strong>Note:</strong> To ensure consistent styling, the custom view\n         * should be inflated or constructed using the alert dialog's themed\n         * context obtained via {@link #getContext()}.\n         *\n         * @param customTitleView the custom view to use as the title\n         * @return this Builder object to allow for chaining of calls to set\n         *         methods\n         ",
    "links" : [ "#setTitle(int)", "#setIcon(int)", "#getContext()" ]
  }, {
    "name" : "public Builder setMessage(@StringRes int messageId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the message to display using the given resource id.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMessage(CharSequence message)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the message to display.\n          *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIcon(@DrawableRes int iconId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the resource id of the {@link Drawable} to be used in the title.\n         * <p>\n         * Takes precedence over values set using {@link #setIcon(Drawable)}.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "#setIcon(Drawable)", "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public Builder setIcon(Drawable icon)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link Drawable} to be used in the title.\n         * <p>\n         * <strong>Note:</strong> To ensure consistent styling, the drawable\n         * should be inflated or constructed using the alert dialog's themed\n         * context obtained via {@link #getContext()}.\n         *\n         * @return this Builder object to allow for chaining of calls to set\n         *         methods\n         ",
    "links" : [ "#getContext()", "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public Builder setIconAttribute(@AttrRes int attrId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set an icon as supplied by a theme attribute. e.g.\n         * {@link android.R.attr#alertDialogIcon}.\n         * <p>\n         * Takes precedence over values set using {@link #setIcon(int)} or\n         * {@link #setIcon(Drawable)}.\n         *\n         * @param attrId ID of a theme attribute that points to a drawable resource.\n         ",
    "links" : [ "#setIcon(int)", "#setIcon(Drawable)", "android.R.attr#alertDialogIcon" ]
  }, {
    "name" : "public Builder setPositiveButton(@StringRes int textId, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a listener to be invoked when the positive button of the dialog is pressed.\n         * @param textId The resource id of the text to display in the positive button\n         * @param listener The {@link DialogInterface.OnClickListener} to use.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "DialogInterface.OnClickListener" ]
  }, {
    "name" : "public Builder setPositiveButton(CharSequence text, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a listener to be invoked when the positive button of the dialog is pressed.\n         * @param text The text to display in the positive button\n         * @param listener The {@link DialogInterface.OnClickListener} to use.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "DialogInterface.OnClickListener" ]
  }, {
    "name" : "public Builder setNegativeButton(@StringRes int textId, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a listener to be invoked when the negative button of the dialog is pressed.\n         * @param textId The resource id of the text to display in the negative button\n         * @param listener The {@link DialogInterface.OnClickListener} to use.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "DialogInterface.OnClickListener" ]
  }, {
    "name" : "public Builder setNegativeButton(CharSequence text, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a listener to be invoked when the negative button of the dialog is pressed.\n         * @param text The text to display in the negative button\n         * @param listener The {@link DialogInterface.OnClickListener} to use.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "DialogInterface.OnClickListener" ]
  }, {
    "name" : "public Builder setNeutralButton(@StringRes int textId, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a listener to be invoked when the neutral button of the dialog is pressed.\n         * @param textId The resource id of the text to display in the neutral button\n         * @param listener The {@link DialogInterface.OnClickListener} to use.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "DialogInterface.OnClickListener" ]
  }, {
    "name" : "public Builder setNeutralButton(CharSequence text, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a listener to be invoked when the neutral button of the dialog is pressed.\n         * @param text The text to display in the neutral button\n         * @param listener The {@link DialogInterface.OnClickListener} to use.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "DialogInterface.OnClickListener" ]
  }, {
    "name" : "public Builder setCancelable(boolean cancelable)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether the dialog is cancelable or not.  Default is true.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setOnCancelListener(OnCancelListener onCancelListener)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the callback that will be called if the dialog is canceled.\n         *\n         * <p>Even in a cancelable dialog, the dialog may be dismissed for reasons other than\n         * being canceled or one of the supplied choices being selected.\n         * If you are interested in listening for all cases where the dialog is dismissed\n         * and not just when it is canceled, see\n         * {@link #setOnDismissListener(android.content.DialogInterface.OnDismissListener) setOnDismissListener}.</p>\n         * @see #setCancelable(boolean)\n         * @see #setOnDismissListener(android.content.DialogInterface.OnDismissListener)\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "#setOnDismissListener(android.content.DialogInterface.OnDismissListener)" ]
  }, {
    "name" : "public Builder setOnDismissListener(OnDismissListener onDismissListener)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the callback that will be called when the dialog is dismissed for any reason.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setOnKeyListener(OnKeyListener onKeyListener)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the callback that will be called if a key is dispatched to the dialog.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setItems(@ArrayRes int itemsId, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items to be displayed in the dialog as the content, you will be notified of the\n         * selected item via the supplied listener. This should be an array type i.e. R.array.foo\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setItems(CharSequence[] items, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items to be displayed in the dialog as the content, you will be notified of the\n         * selected item via the supplied listener.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAdapter(final ListAdapter adapter, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items, which are supplied by the given {@link ListAdapter}, to be\n         * displayed in the dialog as the content, you will be notified of the\n         * selected item via the supplied listener.\n         *\n         * @param adapter The {@link ListAdapter} to supply the list of items\n         * @param listener The listener that will be called when an item is clicked.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "android.widget.ListAdapter" ]
  }, {
    "name" : "public Builder setCursor(final Cursor cursor, final OnClickListener listener, String labelColumn)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items, which are supplied by the given {@link Cursor}, to be\n         * displayed in the dialog as the content, you will be notified of the\n         * selected item via the supplied listener.\n         *\n         * @param cursor The {@link Cursor} to supply the list of items\n         * @param listener The listener that will be called when an item is clicked.\n         * @param labelColumn The column name on the cursor containing the string to display\n         *          in the label.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "android.database.Cursor" ]
  }, {
    "name" : "public Builder setMultiChoiceItems(@ArrayRes int itemsId, boolean[] checkedItems, final OnMultiChoiceClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items to be displayed in the dialog as the content,\n         * you will be notified of the selected item via the supplied listener.\n         * This should be an array type, e.g. R.array.foo. The list will have\n         * a check mark displayed to the right of the text for each checked\n         * item. Clicking on an item in the list will not dismiss the dialog.\n         * Clicking on a button will dismiss the dialog.\n         *\n         * @param itemsId the resource id of an array i.e. R.array.foo\n         * @param checkedItems specifies which items are checked. It should be null in which case no\n         *        items are checked. If non null it must be exactly the same length as the array of\n         *        items.\n         * @param listener notified when an item on the list is clicked. The dialog will not be\n         *        dismissed when an item is clicked. It will only be dismissed if clicked on a\n         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMultiChoiceItems(CharSequence[] items, boolean[] checkedItems, final OnMultiChoiceClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items to be displayed in the dialog as the content,\n         * you will be notified of the selected item via the supplied listener.\n         * The list will have a check mark displayed to the right of the text\n         * for each checked item. Clicking on an item in the list will not\n         * dismiss the dialog. Clicking on a button will dismiss the dialog.\n         *\n         * @param items the text of the items to be displayed in the list.\n         * @param checkedItems specifies which items are checked. It should be null in which case no\n         *        items are checked. If non null it must be exactly the same length as the array of\n         *        items.\n         * @param listener notified when an item on the list is clicked. The dialog will not be\n         *        dismissed when an item is clicked. It will only be dismissed if clicked on a\n         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMultiChoiceItems(Cursor cursor, String isCheckedColumn, String labelColumn, final OnMultiChoiceClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items to be displayed in the dialog as the content,\n         * you will be notified of the selected item via the supplied listener.\n         * The list will have a check mark displayed to the right of the text\n         * for each checked item. Clicking on an item in the list will not\n         * dismiss the dialog. Clicking on a button will dismiss the dialog.\n         *\n         * @param cursor the cursor used to provide the items.\n         * @param isCheckedColumn specifies the column name on the cursor to use to determine\n         *        whether a checkbox is checked or not. It must return an integer value where 1\n         *        means checked and 0 means unchecked.\n         * @param labelColumn The column name on the cursor containing the string to display in the\n         *        label.\n         * @param listener notified when an item on the list is clicked. The dialog will not be\n         *        dismissed when an item is clicked. It will only be dismissed if clicked on a\n         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSingleChoiceItems(@ArrayRes int itemsId, int checkedItem, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items to be displayed in the dialog as the content, you will be notified of\n         * the selected item via the supplied listener. This should be an array type i.e.\n         * R.array.foo The list will have a check mark displayed to the right of the text for the\n         * checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a\n         * button will dismiss the dialog.\n         *\n         * @param itemsId the resource id of an array i.e. R.array.foo\n         * @param checkedItem specifies which item is checked. If -1 no items are checked.\n         * @param listener notified when an item on the list is clicked. The dialog will not be\n         *        dismissed when an item is clicked. It will only be dismissed if clicked on a\n         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSingleChoiceItems(Cursor cursor, int checkedItem, String labelColumn, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items to be displayed in the dialog as the content, you will be notified of\n         * the selected item via the supplied listener. The list will have a check mark displayed to\n         * the right of the text for the checked item. Clicking on an item in the list will not\n         * dismiss the dialog. Clicking on a button will dismiss the dialog.\n         *\n         * @param cursor the cursor to retrieve the items from.\n         * @param checkedItem specifies which item is checked. If -1 no items are checked.\n         * @param labelColumn The column name on the cursor containing the string to display in the\n         *        label.\n         * @param listener notified when an item on the list is clicked. The dialog will not be\n         *        dismissed when an item is clicked. It will only be dismissed if clicked on a\n         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSingleChoiceItems(CharSequence[] items, int checkedItem, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items to be displayed in the dialog as the content, you will be notified of\n         * the selected item via the supplied listener. The list will have a check mark displayed to\n         * the right of the text for the checked item. Clicking on an item in the list will not\n         * dismiss the dialog. Clicking on a button will dismiss the dialog.\n         *\n         * @param items the items to be displayed.\n         * @param checkedItem specifies which item is checked. If -1 no items are checked.\n         * @param listener notified when an item on the list is clicked. The dialog will not be\n         *        dismissed when an item is clicked. It will only be dismissed if clicked on a\n         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSingleChoiceItems(ListAdapter adapter, int checkedItem, final OnClickListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of items to be displayed in the dialog as the content, you will be notified of\n         * the selected item via the supplied listener. The list will have a check mark displayed to\n         * the right of the text for the checked item. Clicking on an item in the list will not\n         * dismiss the dialog. Clicking on a button will dismiss the dialog.\n         *\n         * @param adapter The {@link ListAdapter} to supply the list of items\n         * @param checkedItem specifies which item is checked. If -1 no items are checked.\n         * @param listener notified when an item on the list is clicked. The dialog will not be\n         *        dismissed when an item is clicked. It will only be dismissed if clicked on a\n         *        button, if no buttons are supplied it's up to the user to dismiss the dialog.\n         *\n         * @return This Builder object to allow for chaining of calls to set methods\n         ",
    "links" : [ "android.widget.ListAdapter" ]
  }, {
    "name" : "public Builder setOnItemSelectedListener(final AdapterView.OnItemSelectedListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a listener to be invoked when an item in the list is selected.\n         *\n         * @param listener the listener to be invoked\n         * @return this Builder object to allow for chaining of calls to set methods\n         * @see AdapterView#setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setView(int layoutResId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a custom view resource to be the contents of the Dialog. The\n         * resource will be inflated, adding all top-level views to the screen.\n         *\n         * @param layoutResId Resource ID to be inflated.\n         * @return this Builder object to allow for chaining of calls to set\n         *         methods\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setView(View view)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a custom view to be the contents of the alert dialog.\n         * <p>\n         * When using a pre-Holo theme, if the supplied view is an instance of\n         * a {@link ListView} then the light background will be used.\n         * <p>\n         * <strong>Note:</strong> To ensure consistent styling, the custom view\n         * should be inflated or constructed using the alert dialog's themed\n         * context obtained via {@link #getContext()}.\n         *\n         * @param view the view to use as the contents of the alert dialog\n         * @return this Builder object to allow for chaining of calls to set\n         *         methods\n         ",
    "links" : [ "#getContext()", "android.widget.ListView" ]
  }, {
    "name" : "public Builder setView(View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a custom view to be the contents of the alert dialog and\n         * specifies additional padding around that view.\n         * <p>\n         * When using a pre-Holo theme, if the supplied view is an instance of\n         * a {@link ListView} then the light background will be used.\n         * <p>\n         * <strong>Note:</strong> To ensure consistent styling, the custom view\n         * should be inflated or constructed using the alert dialog's themed\n         * context obtained via {@link #getContext()}.\n         *\n         * @param view the view to use as the contents of the alert dialog\n         * @param viewSpacingLeft spacing between the left edge of the view and\n         *                        the dialog frame\n         * @param viewSpacingTop spacing between the top edge of the view and\n         *                       the dialog frame\n         * @param viewSpacingRight spacing between the right edge of the view\n         *                         and the dialog frame\n         * @param viewSpacingBottom spacing between the bottom edge of the view\n         *                          and the dialog frame\n         * @return this Builder object to allow for chaining of calls to set\n         *         methods\n         *\n         * @hide Remove once the framework usages have been replaced.\n         * @deprecated Set the padding on the view itself.\n         ",
    "links" : [ "#getContext()", "android.widget.ListView" ]
  }, {
    "name" : "public Builder setInverseBackgroundForced(boolean useInverseBackground)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the alert dialog to use the inverse background, regardless of\n         * what the contents is.\n         *\n         * @param useInverseBackground whether to use the inverse background\n         * @return this Builder object to allow for chaining of calls to set methods\n         * @deprecated This flag is only used for pre-Material themes. Instead,\n         *             specify the window background using on the alert dialog\n         *             theme.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRecycleOnMeasureEnabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public AlertDialog create()",
    "returnType" : "AlertDialog",
    "comment" : "\n         * Creates an {@link AlertDialog} with the arguments supplied to this\n         * builder.\n         * <p>\n         * Calling this method does not display the dialog. If no additional\n         * processing is needed, {@link #show()} may be called instead to both\n         * create and display the dialog.\n         ",
    "links" : [ "android.app.AlertDialog", "#show()" ]
  }, {
    "name" : "public AlertDialog show()",
    "returnType" : "AlertDialog",
    "comment" : "\n         * Creates an {@link AlertDialog} with the arguments supplied to this\n         * builder and immediately displays the dialog.\n         * <p>\n         * Calling this method is functionally identical to:\n         * <pre>\n         *     AlertDialog dialog = builder.create();\n         *     dialog.show();\n         * </pre>\n         ",
    "links" : [ "android.app.AlertDialog" ]
  } ],
  "methodNames" : [ "public Context getContext()", "public Builder setTitle(@StringRes int titleId)", "public Builder setTitle(CharSequence title)", "public Builder setCustomTitle(View customTitleView)", "public Builder setMessage(@StringRes int messageId)", "public Builder setMessage(CharSequence message)", "public Builder setIcon(@DrawableRes int iconId)", "public Builder setIcon(Drawable icon)", "public Builder setIconAttribute(@AttrRes int attrId)", "public Builder setPositiveButton(@StringRes int textId, final OnClickListener listener)", "public Builder setPositiveButton(CharSequence text, final OnClickListener listener)", "public Builder setNegativeButton(@StringRes int textId, final OnClickListener listener)", "public Builder setNegativeButton(CharSequence text, final OnClickListener listener)", "public Builder setNeutralButton(@StringRes int textId, final OnClickListener listener)", "public Builder setNeutralButton(CharSequence text, final OnClickListener listener)", "public Builder setCancelable(boolean cancelable)", "public Builder setOnCancelListener(OnCancelListener onCancelListener)", "public Builder setOnDismissListener(OnDismissListener onDismissListener)", "public Builder setOnKeyListener(OnKeyListener onKeyListener)", "public Builder setItems(@ArrayRes int itemsId, final OnClickListener listener)", "public Builder setItems(CharSequence[] items, final OnClickListener listener)", "public Builder setAdapter(final ListAdapter adapter, final OnClickListener listener)", "public Builder setCursor(final Cursor cursor, final OnClickListener listener, String labelColumn)", "public Builder setMultiChoiceItems(@ArrayRes int itemsId, boolean[] checkedItems, final OnMultiChoiceClickListener listener)", "public Builder setMultiChoiceItems(CharSequence[] items, boolean[] checkedItems, final OnMultiChoiceClickListener listener)", "public Builder setMultiChoiceItems(Cursor cursor, String isCheckedColumn, String labelColumn, final OnMultiChoiceClickListener listener)", "public Builder setSingleChoiceItems(@ArrayRes int itemsId, int checkedItem, final OnClickListener listener)", "public Builder setSingleChoiceItems(Cursor cursor, int checkedItem, String labelColumn, final OnClickListener listener)", "public Builder setSingleChoiceItems(CharSequence[] items, int checkedItem, final OnClickListener listener)", "public Builder setSingleChoiceItems(ListAdapter adapter, int checkedItem, final OnClickListener listener)", "public Builder setOnItemSelectedListener(final AdapterView.OnItemSelectedListener listener)", "public Builder setView(int layoutResId)", "public Builder setView(View view)", "public Builder setView(View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom)", "public Builder setInverseBackgroundForced(boolean useInverseBackground)", "public Builder setRecycleOnMeasureEnabled(boolean enabled)", "public AlertDialog create()", "public AlertDialog show()" ],
  "variableNames" : [ "P" ]
}