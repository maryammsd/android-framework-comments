{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/midi/MidiDeviceInfo.java",
  "packageName" : "android.media.midi",
  "className" : "MidiDeviceInfo",
  "comment" : "\n * This class contains information to describe a MIDI device.\n * For now we only have information that can be retrieved easily for USB devices,\n * but we will probably expand this in the future.\n *\n * This class is just an immutable object to encapsulate the MIDI device description.\n * Use the MidiDevice class to actually communicate with devices.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_USB",
    "type" : "int",
    "comment" : "\n     * Constant representing USB MIDI devices for {@link #getType}\n     ",
    "links" : [ "#getType" ]
  }, {
    "name" : "TYPE_VIRTUAL",
    "type" : "int",
    "comment" : "\n     * Constant representing virtual (software based) MIDI devices for {@link #getType}\n     ",
    "links" : [ "#getType" ]
  }, {
    "name" : "TYPE_BLUETOOTH",
    "type" : "int",
    "comment" : "\n     * Constant representing Bluetooth MIDI devices for {@link #getType}\n     ",
    "links" : [ "#getType" ]
  }, {
    "name" : "PROTOCOL_UMP_USE_MIDI_CI",
    "type" : "int",
    "comment" : "\n     * Constant representing a default protocol with Universal MIDI Packets (UMP).\n     * UMP is defined in \"Universal MIDI Packet (UMP) Format and MIDI 2.0 Protocol\" spec.\n     * All UMP data should be a multiple of 4 bytes.\n     * Use UMP to negotiate with the device with MIDI-CI.\n     * MIDI-CI is defined in \"MIDI Capability Inquiry (MIDI-CI)\" spec.\n     * Call {@link MidiManager#getDevicesForTransport} with parameter\n     * {@link MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS} to get devices with this transport.\n     * @see MidiDeviceInfo#getDefaultProtocol\n     ",
    "links" : [ "android.media.midi.MidiManager#getDevicesForTransport", "android.media.midi.MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS" ]
  }, {
    "name" : "PROTOCOL_UMP_MIDI_1_0_UP_TO_64_BITS",
    "type" : "int",
    "comment" : "\n     * Constant representing a default protocol with Universal MIDI Packets (UMP).\n     * UMP is defined in \"Universal MIDI Packet (UMP) Format and MIDI 2.0 Protocol\" spec.\n     * All UMP data should be a multiple of 4 bytes.\n     * Use MIDI 1.0 through UMP with packet sizes up to 64 bits.\n     * Call {@link MidiManager#getDevicesForTransport} with parameter\n     * {@link MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS} to get devices with this transport.\n     * @see MidiDeviceInfo#getDefaultProtocol\n     ",
    "links" : [ "android.media.midi.MidiManager#getDevicesForTransport", "android.media.midi.MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS" ]
  }, {
    "name" : "PROTOCOL_UMP_MIDI_1_0_UP_TO_64_BITS_AND_JRTS",
    "type" : "int",
    "comment" : "\n     * Constant representing a default protocol with Universal MIDI Packets (UMP).\n     * UMP is defined in \"Universal MIDI Packet (UMP) Format and MIDI 2.0 Protocol\" spec.\n     * All UMP data should be a multiple of 4 bytes.\n     * Use MIDI 1.0 through UMP with packet sizes up to 64 bits and jitter reduction timestamps.\n     * Call {@link MidiManager#getDevicesForTransport} with parameter\n     * {@link MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS} to get devices with this transport.\n     * @see MidiDeviceInfo#getDefaultProtocol\n     ",
    "links" : [ "android.media.midi.MidiManager#getDevicesForTransport", "android.media.midi.MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS" ]
  }, {
    "name" : "PROTOCOL_UMP_MIDI_1_0_UP_TO_128_BITS",
    "type" : "int",
    "comment" : "\n     * Constant representing a default protocol with Universal MIDI Packets (UMP).\n     * UMP is defined in \"Universal MIDI Packet (UMP) Format and MIDI 2.0 Protocol\" spec.\n     * All UMP data should be a multiple of 4 bytes.\n     * Use MIDI 1.0 through UMP with packet sizes up to 128 bits.\n     * Call {@link MidiManager#getDevicesForTransport} with parameter\n     * {@link MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS} to get devices with this transport.\n     * @see MidiDeviceInfo#getDefaultProtocol\n     ",
    "links" : [ "android.media.midi.MidiManager#getDevicesForTransport", "android.media.midi.MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS" ]
  }, {
    "name" : "PROTOCOL_UMP_MIDI_1_0_UP_TO_128_BITS_AND_JRTS",
    "type" : "int",
    "comment" : "\n     * Constant representing a default protocol with Universal MIDI Packets (UMP).\n     * UMP is defined in \"Universal MIDI Packet (UMP) Format and MIDI 2.0 Protocol\" spec.\n     * All UMP data should be a multiple of 4 bytes.\n     * Use MIDI 1.0 through UMP with packet sizes up to 128 bits and jitter reduction timestamps.\n     * Call {@link MidiManager#getDevicesForTransport} with parameter\n     * {@link MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS} to get devices with this transport.\n     * @see MidiDeviceInfo#getDefaultProtocol\n     ",
    "links" : [ "android.media.midi.MidiManager#getDevicesForTransport", "android.media.midi.MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS" ]
  }, {
    "name" : "PROTOCOL_UMP_MIDI_2_0",
    "type" : "int",
    "comment" : "\n     * Constant representing a default protocol with Universal MIDI Packets (UMP).\n     * UMP is defined in \"Universal MIDI Packet (UMP) Format and MIDI 2.0 Protocol\" spec.\n     * All UMP data should be a multiple of 4 bytes.\n     * Use MIDI 2.0 through UMP.\n     * Call {@link MidiManager#getDevicesForTransport} with parameter\n     * {@link MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS} to get devices with this transport.\n     * @see MidiDeviceInfo#getDefaultProtocol\n     ",
    "links" : [ "android.media.midi.MidiManager#getDevicesForTransport", "android.media.midi.MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS" ]
  }, {
    "name" : "PROTOCOL_UMP_MIDI_2_0_AND_JRTS",
    "type" : "int",
    "comment" : "\n     * Constant representing a default protocol with Universal MIDI Packets (UMP).\n     * UMP is defined in \"Universal MIDI Packet (UMP) Format and MIDI 2.0 Protocol\" spec.\n     * All UMP data should be a multiple of 4 bytes.\n     * Use MIDI 2.0 through UMP and jitter reduction timestamps.\n     * Call {@link MidiManager#getDevicesForTransport} with parameter\n     * {@link MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS} to get devices with this transport.\n     * @see MidiDeviceInfo#getDefaultProtocol\n     ",
    "links" : [ "android.media.midi.MidiManager#getDevicesForTransport", "android.media.midi.MidiManager#TRANSPORT_UNIVERSAL_MIDI_PACKETS" ]
  }, {
    "name" : "PROTOCOL_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Constant representing a device with an unknown default protocol.\n     * If Universal MIDI Packets (UMP) are needed, use MIDI-CI through MIDI 1.0.\n     * UMP is defined in \"Universal MIDI Packet (UMP) Format and MIDI 2.0 Protocol\" spec.\n     * MIDI-CI is defined in \"MIDI Capability Inquiry (MIDI-CI)\" spec.\n     * @see MidiDeviceInfo#getDefaultProtocol\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_NAME",
    "type" : "String",
    "comment" : "\n     * Bundle key for the device's user visible name property.\n     * The value for this property is of type {@link java.lang.String}.\n     * Used with the {@link android.os.Bundle} returned by {@link #getProperties}.\n     * For USB devices, this is a concatenation of the manufacturer and product names.\n     ",
    "links" : [ "android.os.Bundle", "#getProperties", "java.lang.String" ]
  }, {
    "name" : "PROPERTY_MANUFACTURER",
    "type" : "String",
    "comment" : "\n     * Bundle key for the device's manufacturer name property.\n     * The value for this property is of type {@link java.lang.String}.\n     * Used with the {@link android.os.Bundle} returned by {@link #getProperties}.\n     * Matches the USB device manufacturer name string for USB MIDI devices.\n     ",
    "links" : [ "android.os.Bundle", "#getProperties", "java.lang.String" ]
  }, {
    "name" : "PROPERTY_PRODUCT",
    "type" : "String",
    "comment" : "\n     * Bundle key for the device's product name property.\n     * The value for this property is of type {@link java.lang.String}.\n     * Used with the {@link android.os.Bundle} returned by {@link #getProperties}\n     * Matches the USB device product name string for USB MIDI devices.\n     ",
    "links" : [ "android.os.Bundle", "#getProperties", "java.lang.String" ]
  }, {
    "name" : "PROPERTY_VERSION",
    "type" : "String",
    "comment" : "\n     * Bundle key for the device's version property.\n     * The value for this property is of type {@link java.lang.String}.\n     * Used with the {@link android.os.Bundle} returned by {@link #getProperties}\n     * Matches the USB device version number for USB MIDI devices.\n     ",
    "links" : [ "android.os.Bundle", "#getProperties", "java.lang.String" ]
  }, {
    "name" : "PROPERTY_SERIAL_NUMBER",
    "type" : "String",
    "comment" : "\n     * Bundle key for the device's serial number property.\n     * The value for this property is of type {@link java.lang.String}.\n     * Used with the {@link android.os.Bundle} returned by {@link #getProperties}\n     * Matches the USB device serial number for USB MIDI devices.\n     ",
    "links" : [ "android.os.Bundle", "#getProperties", "java.lang.String" ]
  }, {
    "name" : "PROPERTY_USB_DEVICE",
    "type" : "String",
    "comment" : "\n     * Bundle key for the device's corresponding USB device.\n     * The value for this property is of type {@link android.hardware.usb.UsbDevice}.\n     * Only set for USB MIDI devices.\n     * Used with the {@link android.os.Bundle} returned by {@link #getProperties}\n     ",
    "links" : [ "android.os.Bundle", "#getProperties", "android.hardware.usb.UsbDevice" ]
  }, {
    "name" : "PROPERTY_BLUETOOTH_DEVICE",
    "type" : "String",
    "comment" : "\n     * Bundle key for the device's corresponding Bluetooth device.\n     * The value for this property is of type {@link android.bluetooth.BluetoothDevice}.\n     * Only set for Bluetooth MIDI devices.\n     * Used with the {@link android.os.Bundle} returned by {@link #getProperties}\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice", "android.os.Bundle", "#getProperties" ]
  }, {
    "name" : "PROPERTY_ALSA_CARD",
    "type" : "String",
    "comment" : "\n     * Bundle key for the device's ALSA card number.\n     * The value for this property is an integer.\n     * Only set for USB MIDI devices.\n     * Used with the {@link android.os.Bundle} returned by {@link #getProperties}\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "#getProperties" ]
  }, {
    "name" : "PROPERTY_ALSA_DEVICE",
    "type" : "String",
    "comment" : "\n     * Bundle key for the device's ALSA device number.\n     * The value for this property is an integer.\n     * Only set for USB MIDI devices.\n     * Used with the {@link android.os.Bundle} returned by {@link #getProperties}\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "#getProperties" ]
  }, {
    "name" : "PROPERTY_SERVICE_INFO",
    "type" : "String",
    "comment" : "\n     * ServiceInfo for the service hosting the device implementation.\n     * The value for this property is of type {@link android.content.pm.ServiceInfo}.\n     * Only set for Virtual MIDI devices.\n     * Used with the {@link android.os.Bundle} returned by {@link #getProperties}\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "#getProperties", "android.content.pm.ServiceInfo" ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : " USB or virtual",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : " unique ID generated by MidiService. Accessed from native code.",
    "links" : [ ]
  }, {
    "name" : "mInputPortCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputPortCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputPortNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputPortNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProperties",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPrivate",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultProtocol",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<MidiDeviceInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of the device.\n     *\n     * @return the device's type\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ID of the device.\n     * This ID is generated by the MIDI service and is not persistent across device unplugs.\n     *\n     * @return the device's ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInputPortCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the device's number of input ports.\n     *\n     * @return the number of input ports\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOutputPortCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the device's number of output ports.\n     *\n     * @return the number of output ports\n     ",
    "links" : [ ]
  }, {
    "name" : "public PortInfo[] getPorts()",
    "returnType" : "PortInfo[]",
    "comment" : "\n     * Returns information about the device's ports.\n     * The ports are in unspecified order.\n     *\n     * @return array of {@link PortInfo}\n     ",
    "links" : [ "PortInfo" ]
  }, {
    "name" : "public Bundle getProperties()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the {@link android.os.Bundle} containing the device's properties.\n     *\n     * @return the device's properties\n     ",
    "links" : [ "android.os.Bundle" ]
  }, {
    "name" : "public boolean isPrivate()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the device is private.  Private devices are only visible and accessible\n     * to clients with the same UID as the application that is hosting the device.\n     *\n     * @return true if the device is private\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultProtocol()",
    "returnType" : "int",
    "comment" : "\n     * Returns the default protocol. For most devices, this will be {@link #PROTOCOL_UNKNOWN}.\n     * Returning {@link #PROTOCOL_UNKNOWN} is not an error; the device just doesn't support\n     * Universal MIDI Packets by default.\n     *\n     * @return the device's default protocol.\n     ",
    "links" : [ "#PROTOCOL_UNKNOWN" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bundle getBasicProperties(String[] keys)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getType()", "public int getId()", "public int getInputPortCount()", "public int getOutputPortCount()", "public PortInfo[] getPorts()", "public Bundle getProperties()", "public boolean isPrivate()", "public int getDefaultProtocol()", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public int describeContents()", "private Bundle getBasicProperties(String[] keys)", "public void writeToParcel(Parcel parcel, int flags)" ],
  "variableNames" : [ "TAG", "TYPE_USB", "TYPE_VIRTUAL", "TYPE_BLUETOOTH", "PROTOCOL_UMP_USE_MIDI_CI", "PROTOCOL_UMP_MIDI_1_0_UP_TO_64_BITS", "PROTOCOL_UMP_MIDI_1_0_UP_TO_64_BITS_AND_JRTS", "PROTOCOL_UMP_MIDI_1_0_UP_TO_128_BITS", "PROTOCOL_UMP_MIDI_1_0_UP_TO_128_BITS_AND_JRTS", "PROTOCOL_UMP_MIDI_2_0", "PROTOCOL_UMP_MIDI_2_0_AND_JRTS", "PROTOCOL_UNKNOWN", "PROPERTY_NAME", "PROPERTY_MANUFACTURER", "PROPERTY_PRODUCT", "PROPERTY_VERSION", "PROPERTY_SERIAL_NUMBER", "PROPERTY_USB_DEVICE", "PROPERTY_BLUETOOTH_DEVICE", "PROPERTY_ALSA_CARD", "PROPERTY_ALSA_DEVICE", "PROPERTY_SERVICE_INFO", "mType", "mId", "mInputPortCount", "mOutputPortCount", "mInputPortNames", "mOutputPortNames", "mProperties", "mIsPrivate", "mDefaultProtocol", "CREATOR" ]
}