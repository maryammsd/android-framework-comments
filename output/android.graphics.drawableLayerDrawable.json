{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/LayerDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "LayerDrawable",
  "comment" : "\n * A Drawable that manages an array of other Drawables. These are drawn in array\n * order, so the element with the largest index will be drawn on top.\n * <p>\n * It can be defined in an XML file with the <code>&lt;layer-list></code> element.\n * Each Drawable in the layer is defined in a nested <code>&lt;item></code>.\n * <p>\n * For more information, see the guide to\n * <a href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.\n *\n * @attr ref android.R.styleable#LayerDrawable_paddingMode\n * @attr ref android.R.styleable#LayerDrawableItem_left\n * @attr ref android.R.styleable#LayerDrawableItem_top\n * @attr ref android.R.styleable#LayerDrawableItem_right\n * @attr ref android.R.styleable#LayerDrawableItem_bottom\n * @attr ref android.R.styleable#LayerDrawableItem_start\n * @attr ref android.R.styleable#LayerDrawableItem_end\n * @attr ref android.R.styleable#LayerDrawableItem_width\n * @attr ref android.R.styleable#LayerDrawableItem_height\n * @attr ref android.R.styleable#LayerDrawableItem_gravity\n * @attr ref android.R.styleable#LayerDrawableItem_drawable\n * @attr ref android.R.styleable#LayerDrawableItem_id\n",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PADDING_MODE_NEST",
    "type" : "int",
    "comment" : "\n     * Padding mode used to nest each layer inside the padding of the previous\n     * layer.\n     *\n     * @see #setPaddingMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PADDING_MODE_STACK",
    "type" : "int",
    "comment" : "\n     * Padding mode used to stack each layer directly atop the previous layer.\n     *\n     * @see #setPaddingMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "INSET_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Value used for undefined start and end insets.\n     *\n     * @see #getLayerInsetStart(int)\n     * @see #getLayerInsetEnd(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "mLayerState",
    "type" : "LayerState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaddingL",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaddingT",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaddingR",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaddingB",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpOutRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpContainer",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHotspotBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuspendChildInvalidation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildRequestedInvalidation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " LayerState createConstantState(@Nullable LayerState state, @Nullable Resources res)",
    "returnType" : "LayerState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@NonNull Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void inflateLayers(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Inflates child layers using the specified parser.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(@NonNull TypedArray a)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the constant state from the values in the typed array.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateLayerFromTypedArray(@NonNull ChildDrawable layer, @NonNull TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isProjected()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " int addLayer(@NonNull ChildDrawable layer)",
    "returnType" : "int",
    "comment" : "\n     * Adds a new layer at the end of list of layers and returns its index.\n     *\n     * @param layer The layer to add.\n     * @return The index of the layer.\n     ",
    "links" : [ ]
  }, {
    "name" : " ChildDrawable addLayer(Drawable dr, int[] themeAttrs, int id, int left, int top, int right, int bottom)",
    "returnType" : "ChildDrawable",
    "comment" : "\n     * Add a new layer to this drawable. The new layer is identified by an id.\n     *\n     * @param dr The drawable to add as a layer.\n     * @param themeAttrs Theme attributes extracted from the layer.\n     * @param id The id of the new layer.\n     * @param left The left padding of the new layer.\n     * @param top The top padding of the new layer.\n     * @param right The right padding of the new layer.\n     * @param bottom The bottom padding of the new layer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ChildDrawable createLayer(Drawable dr)",
    "returnType" : "ChildDrawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int addLayer(Drawable dr)",
    "returnType" : "int",
    "comment" : "\n     * Adds a new layer containing the specified {@code drawable} to the end of\n     * the layer list and returns its index.\n     *\n     * @param dr The drawable to add as a new layer.\n     * @return The index of the new layer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable findDrawableByLayerId(int id)",
    "returnType" : "Drawable",
    "comment" : "\n     * Looks for a layer with the given ID and returns its {@link Drawable}.\n     * <p>\n     * If multiple layers are found for the given ID, returns the\n     * {@link Drawable} for the matching layer at the highest index.\n     *\n     * @param id The layer ID to search for.\n     * @return The {@link Drawable} for the highest-indexed layer that has the\n     *         given ID, or null if not found.\n     ",
    "links" : [ "Drawable", "Drawable", "Drawable" ]
  }, {
    "name" : "public void setId(int index, int id)",
    "returnType" : "void",
    "comment" : "\n     * Sets the ID of a layer.\n     *\n     * @param index The index of the layer to modify, must be in the range\n     *              {@code 0...getNumberOfLayers()-1}.\n     * @param id The id to assign to the layer.\n     *\n     * @see #getId(int)\n     * @attr ref android.R.styleable#LayerDrawableItem_id\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId(int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the ID of the specified layer.\n     *\n     * @param index The index of the layer, must be in the range\n     *              {@code 0...getNumberOfLayers()-1}.\n     * @return The id of the layer or {@link android.view.View#NO_ID} if the\n     *         layer has no id.\n     *\n     * @see #setId(int, int)\n     * @attr ref android.R.styleable#LayerDrawableItem_id\n     ",
    "links" : [ "android.view.View#NO_ID" ]
  }, {
    "name" : "public int getNumberOfLayers()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of layers contained within this layer drawable.\n     *\n     * @return The number of layers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setDrawableByLayerId(int id, Drawable drawable)",
    "returnType" : "boolean",
    "comment" : "\n     * Replaces the {@link Drawable} for the layer with the given id.\n     *\n     * @param id The layer ID to search for.\n     * @param drawable The replacement {@link Drawable}.\n     * @return Whether the {@link Drawable} was replaced (could return false if\n     *         the id was not found).\n     ",
    "links" : [ "Drawable", "Drawable", "Drawable" ]
  }, {
    "name" : "public int findIndexByLayerId(int id)",
    "returnType" : "int",
    "comment" : "\n     * Returns the layer with the specified {@code id}.\n     * <p>\n     * If multiple layers have the same ID, returns the layer with the lowest\n     * index.\n     *\n     * @param id The ID of the layer to return.\n     * @return The index of the layer with the specified ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDrawable(int index, Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable for the layer at the specified index.\n     *\n     * @param index The index of the layer to modify, must be in the range\n     *              {@code 0...getNumberOfLayers()-1}.\n     * @param drawable The drawable to set for the layer.\n     *\n     * @see #getDrawable(int)\n     * @attr ref android.R.styleable#LayerDrawableItem_drawable\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawable(int index)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the drawable for the layer at the specified index.\n     *\n     * @param index The index of the layer, must be in the range\n     *              {@code 0...getNumberOfLayers()-1}.\n     * @return The {@link Drawable} at the specified layer index.\n     *\n     * @see #setDrawable(int, Drawable)\n     * @attr ref android.R.styleable#LayerDrawableItem_drawable\n     ",
    "links" : [ "Drawable" ]
  }, {
    "name" : "public void setLayerSize(int index, int w, int h)",
    "returnType" : "void",
    "comment" : "\n     * Sets an explicit size for the specified layer.\n     * <p>\n     * <strong>Note:</strong> Setting an explicit layer size changes the\n     * default layer gravity behavior. See {@link #setLayerGravity(int, int)}\n     * for more information.\n     *\n     * @param index the index of the layer to adjust\n     * @param w width in pixels, or -1 to use the intrinsic width\n     * @param h height in pixels, or -1 to use the intrinsic height\n     * @see #getLayerWidth(int)\n     * @see #getLayerHeight(int)\n     * @attr ref android.R.styleable#LayerDrawableItem_width\n     * @attr ref android.R.styleable#LayerDrawableItem_height\n     ",
    "links" : [ "#setLayerGravity" ]
  }, {
    "name" : "public void setLayerWidth(int index, int w)",
    "returnType" : "void",
    "comment" : "\n     * @param index the index of the layer to adjust\n     * @param w width in pixels, or -1 to use the intrinsic width\n     * @attr ref android.R.styleable#LayerDrawableItem_width\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLayerWidth(int index)",
    "returnType" : "int",
    "comment" : "\n     * @param index the index of the drawable to adjust\n     * @return the explicit width of the layer, or -1 if not specified\n     * @see #setLayerSize(int, int, int)\n     * @attr ref android.R.styleable#LayerDrawableItem_width\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerHeight(int index, int h)",
    "returnType" : "void",
    "comment" : "\n     * @param index the index of the layer to adjust\n     * @param h height in pixels, or -1 to use the intrinsic height\n     * @attr ref android.R.styleable#LayerDrawableItem_height\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLayerHeight(int index)",
    "returnType" : "int",
    "comment" : "\n     * @param index the index of the drawable to adjust\n     * @return the explicit height of the layer, or -1 if not specified\n     * @see #setLayerSize(int, int, int)\n     * @attr ref android.R.styleable#LayerDrawableItem_height\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerGravity(int index, int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Sets the gravity used to position or stretch the specified layer within\n     * its container. Gravity is applied after any layer insets (see\n     * {@link #setLayerInset(int, int, int, int, int)}) or padding (see\n     * {@link #setPaddingMode(int)}).\n     * <p>\n     * If gravity is specified as {@link Gravity#NO_GRAVITY}, the default\n     * behavior depends on whether an explicit width or height has been set\n     * (see {@link #setLayerSize(int, int, int)}), If a dimension is not set,\n     * gravity in that direction defaults to {@link Gravity#FILL_HORIZONTAL} or\n     * {@link Gravity#FILL_VERTICAL}; otherwise, gravity in that direction\n     * defaults to {@link Gravity#LEFT} or {@link Gravity#TOP}.\n     *\n     * @param index the index of the drawable to adjust\n     * @param gravity the gravity to set for the layer\n     *\n     * @see #getLayerGravity(int)\n     * @attr ref android.R.styleable#LayerDrawableItem_gravity\n     ",
    "links" : [ "#setLayerInset", "#setPaddingMode", "Gravity#NO_GRAVITY", "#setLayerSize", "Gravity#FILL_HORIZONTAL", "Gravity#FILL_VERTICAL", "Gravity#LEFT", "Gravity#TOP" ]
  }, {
    "name" : "public int getLayerGravity(int index)",
    "returnType" : "int",
    "comment" : "\n     * @param index the index of the layer\n     * @return the gravity used to position or stretch the specified layer\n     *         within its container\n     *\n     * @see #setLayerGravity(int, int)\n     * @attr ref android.R.styleable#LayerDrawableItem_gravity\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerInset(int index, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the insets in pixels for the drawable at the specified index.\n     *\n     * @param index the index of the drawable to adjust\n     * @param l number of pixels to add to the left bound\n     * @param t number of pixels to add to the top bound\n     * @param r number of pixels to subtract from the right bound\n     * @param b number of pixels to subtract from the bottom bound\n     *\n     * @attr ref android.R.styleable#LayerDrawableItem_left\n     * @attr ref android.R.styleable#LayerDrawableItem_top\n     * @attr ref android.R.styleable#LayerDrawableItem_right\n     * @attr ref android.R.styleable#LayerDrawableItem_bottom\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerInsetRelative(int index, int s, int t, int e, int b)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the relative insets in pixels for the drawable at the\n     * specified index.\n     *\n     * @param index the index of the layer to adjust\n     * @param s number of pixels to inset from the start bound\n     * @param t number of pixels to inset from the top bound\n     * @param e number of pixels to inset from the end bound\n     * @param b number of pixels to inset from the bottom bound\n     *\n     * @attr ref android.R.styleable#LayerDrawableItem_start\n     * @attr ref android.R.styleable#LayerDrawableItem_top\n     * @attr ref android.R.styleable#LayerDrawableItem_end\n     * @attr ref android.R.styleable#LayerDrawableItem_bottom\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerInsetLeft(int index, int l)",
    "returnType" : "void",
    "comment" : "\n     * @param index the index of the layer to adjust\n     * @param l number of pixels to inset from the left bound\n     * @attr ref android.R.styleable#LayerDrawableItem_left\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLayerInsetLeft(int index)",
    "returnType" : "int",
    "comment" : "\n     * @param index the index of the layer\n     * @return number of pixels to inset from the left bound\n     * @attr ref android.R.styleable#LayerDrawableItem_left\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerInsetRight(int index, int r)",
    "returnType" : "void",
    "comment" : "\n     * @param index the index of the layer to adjust\n     * @param r number of pixels to inset from the right bound\n     * @attr ref android.R.styleable#LayerDrawableItem_right\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLayerInsetRight(int index)",
    "returnType" : "int",
    "comment" : "\n     * @param index the index of the layer\n     * @return number of pixels to inset from the right bound\n     * @attr ref android.R.styleable#LayerDrawableItem_right\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerInsetTop(int index, int t)",
    "returnType" : "void",
    "comment" : "\n     * @param index the index of the layer to adjust\n     * @param t number of pixels to inset from the top bound\n     * @attr ref android.R.styleable#LayerDrawableItem_top\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLayerInsetTop(int index)",
    "returnType" : "int",
    "comment" : "\n     * @param index the index of the layer\n     * @return number of pixels to inset from the top bound\n     * @attr ref android.R.styleable#LayerDrawableItem_top\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerInsetBottom(int index, int b)",
    "returnType" : "void",
    "comment" : "\n     * @param index the index of the layer to adjust\n     * @param b number of pixels to inset from the bottom bound\n     * @attr ref android.R.styleable#LayerDrawableItem_bottom\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLayerInsetBottom(int index)",
    "returnType" : "int",
    "comment" : "\n     * @param index the index of the layer\n     * @return number of pixels to inset from the bottom bound\n     * @attr ref android.R.styleable#LayerDrawableItem_bottom\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerInsetStart(int index, int s)",
    "returnType" : "void",
    "comment" : "\n     * @param index the index of the layer to adjust\n     * @param s number of pixels to inset from the start bound\n     * @attr ref android.R.styleable#LayerDrawableItem_start\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLayerInsetStart(int index)",
    "returnType" : "int",
    "comment" : "\n     * @param index the index of the layer\n     * @return the number of pixels to inset from the start bound, or\n     *         {@link #INSET_UNDEFINED} if not specified\n     * @attr ref android.R.styleable#LayerDrawableItem_start\n     ",
    "links" : [ "#INSET_UNDEFINED" ]
  }, {
    "name" : "public void setLayerInsetEnd(int index, int e)",
    "returnType" : "void",
    "comment" : "\n     * @param index the index of the layer to adjust\n     * @param e number of pixels to inset from the end bound, or\n     *         {@link #INSET_UNDEFINED} if not specified\n     * @attr ref android.R.styleable#LayerDrawableItem_end\n     ",
    "links" : [ "#INSET_UNDEFINED" ]
  }, {
    "name" : "public int getLayerInsetEnd(int index)",
    "returnType" : "int",
    "comment" : "\n     * @param index the index of the layer\n     * @return number of pixels to inset from the end bound\n     * @attr ref android.R.styleable#LayerDrawableItem_end\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setLayerInsetInternal(int index, int l, int t, int r, int b, int s, int e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPaddingMode(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies how layer padding should affect the bounds of subsequent\n     * layers. The default value is {@link #PADDING_MODE_NEST}.\n     *\n     * @param mode padding mode, one of:\n     *            <ul>\n     *            <li>{@link #PADDING_MODE_NEST} to nest each layer inside the\n     *            padding of the previous layer\n     *            <li>{@link #PADDING_MODE_STACK} to stack each layer directly\n     *            atop the previous layer\n     *            </ul>\n     *\n     * @see #getPaddingMode()\n     * @attr ref android.R.styleable#LayerDrawable_paddingMode\n     ",
    "links" : [ "#PADDING_MODE_NEST", "#PADDING_MODE_NEST", "#PADDING_MODE_STACK" ]
  }, {
    "name" : "public int getPaddingMode()",
    "returnType" : "int",
    "comment" : "\n     * @return the current padding mode\n     *\n     * @see #setPaddingMode(int)\n     * @attr ref android.R.styleable#LayerDrawable_paddingMode\n     ",
    "links" : [ ]
  }, {
    "name" : "private void suspendChildInvalidation()",
    "returnType" : "void",
    "comment" : "\n     * Temporarily suspends child invalidation.\n     *\n     * @see #resumeChildInvalidation()\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resumeChildInvalidation()",
    "returnType" : "void",
    "comment" : "\n     * Resumes child invalidation after suspension, immediately performing an\n     * invalidation if one was requested by a child during suspension.\n     *\n     * @see #suspendChildInvalidation()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateDrawable(@NonNull Drawable who)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getPadding(Rect padding)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPadding(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the absolute padding.\n     * <p>\n     * If padding in a dimension is specified as {@code -1}, the resolved\n     * padding will use the value computed according to the padding mode (see\n     * {@link #setPaddingMode(int)}).\n     * <p>\n     * Calling this method clears any relative padding values previously set\n     * using {@link #setPaddingRelative(int, int, int, int)}.\n     *\n     * @param left the left padding in pixels, or -1 to use computed padding\n     * @param top the top padding in pixels, or -1 to use computed padding\n     * @param right the right padding in pixels, or -1 to use computed padding\n     * @param bottom the bottom padding in pixels, or -1 to use computed\n     *               padding\n     * @attr ref android.R.styleable#LayerDrawable_paddingLeft\n     * @attr ref android.R.styleable#LayerDrawable_paddingTop\n     * @attr ref android.R.styleable#LayerDrawable_paddingRight\n     * @attr ref android.R.styleable#LayerDrawable_paddingBottom\n     * @see #setPaddingRelative(int, int, int, int)\n     ",
    "links" : [ "#setPaddingMode", "#setPaddingRelative" ]
  }, {
    "name" : "public void setPaddingRelative(int start, int top, int end, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the relative padding.\n     * <p>\n     * If padding in a dimension is specified as {@code -1}, the resolved\n     * padding will use the value computed according to the padding mode (see\n     * {@link #setPaddingMode(int)}).\n     * <p>\n     * Calling this method clears any absolute padding values previously set\n     * using {@link #setPadding(int, int, int, int)}.\n     *\n     * @param start the start padding in pixels, or -1 to use computed padding\n     * @param top the top padding in pixels, or -1 to use computed padding\n     * @param end the end padding in pixels, or -1 to use computed padding\n     * @param bottom the bottom padding in pixels, or -1 to use computed\n     *               padding\n     * @attr ref android.R.styleable#LayerDrawable_paddingStart\n     * @attr ref android.R.styleable#LayerDrawable_paddingTop\n     * @attr ref android.R.styleable#LayerDrawable_paddingEnd\n     * @attr ref android.R.styleable#LayerDrawable_paddingBottom\n     * @see #setPadding(int, int, int, int)\n     ",
    "links" : [ "#setPaddingMode", "#setPadding" ]
  }, {
    "name" : "public int getLeftPadding()",
    "returnType" : "int",
    "comment" : "\n     * Returns the left padding in pixels.\n     * <p>\n     * A return value of {@code -1} means there is no explicit padding set for\n     * this dimension. As a result, the value for this dimension returned by\n     * {@link #getPadding(Rect)} will be computed from the child layers\n     * according to the padding mode (see {@link #getPaddingMode()}.\n     *\n     * @return the left padding in pixels, or -1 if not explicitly specified\n     * @see #setPadding(int, int, int, int)\n     * @see #getPadding(Rect)\n     ",
    "links" : [ "#getPadding", "#getPaddingMode" ]
  }, {
    "name" : "public int getRightPadding()",
    "returnType" : "int",
    "comment" : "\n     * Returns the right padding in pixels.\n     * <p>\n     * A return value of {@code -1} means there is no explicit padding set for\n     * this dimension. As a result, the value for this dimension returned by\n     * {@link #getPadding(Rect)} will be computed from the child layers\n     * according to the padding mode (see {@link #getPaddingMode()}.\n     *\n     * @return the right padding in pixels, or -1 if not explicitly specified\n     * @see #setPadding(int, int, int, int)\n     * @see #getPadding(Rect)\n     ",
    "links" : [ "#getPadding", "#getPaddingMode" ]
  }, {
    "name" : "public int getStartPadding()",
    "returnType" : "int",
    "comment" : "\n     * Returns the start padding in pixels.\n     * <p>\n     * A return value of {@code -1} means there is no explicit padding set for\n     * this dimension. As a result, the value for this dimension returned by\n     * {@link #getPadding(Rect)} will be computed from the child layers\n     * according to the padding mode (see {@link #getPaddingMode()}.\n     *\n     * @return the start padding in pixels, or -1 if not explicitly specified\n     * @see #setPaddingRelative(int, int, int, int)\n     * @see #getPadding(Rect)\n     ",
    "links" : [ "#getPadding", "#getPaddingMode" ]
  }, {
    "name" : "public int getEndPadding()",
    "returnType" : "int",
    "comment" : "\n     * Returns the end padding in pixels.\n     * <p>\n     * A return value of {@code -1} means there is no explicit padding set for\n     * this dimension. As a result, the value for this dimension returned by\n     * {@link #getPadding(Rect)} will be computed from the child layers\n     * according to the padding mode (see {@link #getPaddingMode()}.\n     *\n     * @return the end padding in pixels, or -1 if not explicitly specified\n     * @see #setPaddingRelative(int, int, int, int)\n     * @see #getPadding(Rect)\n     ",
    "links" : [ "#getPadding", "#getPaddingMode" ]
  }, {
    "name" : "public int getTopPadding()",
    "returnType" : "int",
    "comment" : "\n     * Returns the top padding in pixels.\n     * <p>\n     * A return value of {@code -1} means there is no explicit padding set for\n     * this dimension. As a result, the value for this dimension returned by\n     * {@link #getPadding(Rect)} will be computed from the child layers\n     * according to the padding mode (see {@link #getPaddingMode()}.\n     *\n     * @return the top padding in pixels, or -1 if not explicitly specified\n     * @see #setPadding(int, int, int, int)\n     * @see #setPaddingRelative(int, int, int, int)\n     * @see #getPadding(Rect)\n     ",
    "links" : [ "#getPadding", "#getPaddingMode" ]
  }, {
    "name" : "public int getBottomPadding()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bottom padding in pixels.\n     * <p>\n     * A return value of {@code -1} means there is no explicit padding set for\n     * this dimension. As a result, the value for this dimension returned by\n     * {@link #getPadding(Rect)} will be computed from the child layers\n     * according to the padding mode (see {@link #getPaddingMode()}.\n     *\n     * @return the bottom padding in pixels, or -1 if not explicitly specified\n     * @see #setPadding(int, int, int, int)\n     * @see #setPaddingRelative(int, int, int, int)\n     * @see #getPadding(Rect)\n     ",
    "links" : [ "#getPadding", "#getPaddingMode" ]
  }, {
    "name" : "private void computeNestedPadding(Rect padding)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void computeStackedPadding(Rect padding)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "\n     * Populates <code>outline</code> with the first available (non-empty) layer outline.\n     *\n     * @param outline Outline in which to place the first available layer outline\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHotspot(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHotspotBounds(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getHotspotBounds(Rect outRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDither(boolean dither)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintList(ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@NonNull BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getFirstNonNullDrawable()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOpacity(int opacity)",
    "returnType" : "void",
    "comment" : "\n     * Sets the opacity of this drawable directly instead of collecting the\n     * states from the layers.\n     *\n     * @param opacity The opacity to use, or {@link PixelFormat#UNKNOWN\n     *            PixelFormat.UNKNOWN} for the default behavior\n     * @see PixelFormat#UNKNOWN\n     * @see PixelFormat#TRANSLUCENT\n     * @see PixelFormat#TRANSPARENT\n     * @see PixelFormat#OPAQUE\n     ",
    "links" : [ "PixelFormat#UNKNOWN" ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAutoMirrored(boolean mirrored)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoMirrored()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLevelChange(int level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLayerBounds(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLayerBoundsInternal(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int resolveGravity(int gravity, int width, int height, int intrinsicWidth, int intrinsicHeight)",
    "returnType" : "int",
    "comment" : "\n     * Resolves layer gravity given explicit gravity and dimensions.\n     * <p>\n     * If the client hasn't specified a gravity but has specified an explicit\n     * dimension, defaults to START or TOP. Otherwise, defaults to FILL to\n     * preserve legacy behavior.\n     *\n     * @param gravity layer gravity\n     * @param width width of the layer if set, -1 otherwise\n     * @param height height of the layer if set, -1 otherwise\n     * @return the default gravity for the layer\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean refreshChildPadding(int i, ChildDrawable r)",
    "returnType" : "boolean",
    "comment" : "\n     * Refreshes the cached padding values for the specified child.\n     *\n     * @return true if the child's padding has changed\n     ",
    "links" : [ ]
  }, {
    "name" : " void ensurePadding()",
    "returnType" : "void",
    "comment" : "\n     * Ensures the child padding caches are large enough.\n     ",
    "links" : [ ]
  }, {
    "name" : " void refreshPadding()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onLayoutDirectionChanged(@View.ResolvedLayoutDir int layoutDirection)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "PADDING_MODE_NEST", "PADDING_MODE_STACK", "INSET_UNDEFINED", "mLayerState", "mPaddingL", "mPaddingT", "mPaddingR", "mPaddingB", "mTmpRect", "mTmpOutRect", "mTmpContainer", "mHotspotBounds", "mMutated", "mSuspendChildInvalidation", "mChildRequestedInvalidation" ],
  "methodNames" : [ " LayerState createConstantState(@Nullable LayerState state, @Nullable Resources res)", "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public void applyTheme(@NonNull Theme t)", "private void inflateLayers(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "private void updateStateFromTypedArray(@NonNull TypedArray a)", "private void updateLayerFromTypedArray(@NonNull ChildDrawable layer, @NonNull TypedArray a)", "public boolean canApplyTheme()", "public boolean isProjected()", " int addLayer(@NonNull ChildDrawable layer)", " ChildDrawable addLayer(Drawable dr, int[] themeAttrs, int id, int left, int top, int right, int bottom)", "private ChildDrawable createLayer(Drawable dr)", "public int addLayer(Drawable dr)", "public Drawable findDrawableByLayerId(int id)", "public void setId(int index, int id)", "public int getId(int index)", "public int getNumberOfLayers()", "public boolean setDrawableByLayerId(int id, Drawable drawable)", "public int findIndexByLayerId(int id)", "public void setDrawable(int index, Drawable drawable)", "public Drawable getDrawable(int index)", "public void setLayerSize(int index, int w, int h)", "public void setLayerWidth(int index, int w)", "public int getLayerWidth(int index)", "public void setLayerHeight(int index, int h)", "public int getLayerHeight(int index)", "public void setLayerGravity(int index, int gravity)", "public int getLayerGravity(int index)", "public void setLayerInset(int index, int l, int t, int r, int b)", "public void setLayerInsetRelative(int index, int s, int t, int e, int b)", "public void setLayerInsetLeft(int index, int l)", "public int getLayerInsetLeft(int index)", "public void setLayerInsetRight(int index, int r)", "public int getLayerInsetRight(int index)", "public void setLayerInsetTop(int index, int t)", "public int getLayerInsetTop(int index)", "public void setLayerInsetBottom(int index, int b)", "public int getLayerInsetBottom(int index)", "public void setLayerInsetStart(int index, int s)", "public int getLayerInsetStart(int index)", "public void setLayerInsetEnd(int index, int e)", "public int getLayerInsetEnd(int index)", "private void setLayerInsetInternal(int index, int l, int t, int r, int b, int s, int e)", "public void setPaddingMode(int mode)", "public int getPaddingMode()", "private void suspendChildInvalidation()", "private void resumeChildInvalidation()", "public void invalidateDrawable(@NonNull Drawable who)", "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)", "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)", "public void draw(Canvas canvas)", "public int getChangingConfigurations()", "public boolean getPadding(Rect padding)", "public void setPadding(int left, int top, int right, int bottom)", "public void setPaddingRelative(int start, int top, int end, int bottom)", "public int getLeftPadding()", "public int getRightPadding()", "public int getStartPadding()", "public int getEndPadding()", "public int getTopPadding()", "public int getBottomPadding()", "private void computeNestedPadding(Rect padding)", "private void computeStackedPadding(Rect padding)", "public void getOutline(@NonNull Outline outline)", "public void setHotspot(float x, float y)", "public void setHotspotBounds(int left, int top, int right, int bottom)", "public void getHotspotBounds(Rect outRect)", "public boolean setVisible(boolean visible, boolean restart)", "public void setDither(boolean dither)", "public void setAlpha(int alpha)", "public int getAlpha()", "public void setColorFilter(ColorFilter colorFilter)", "public void setTintList(ColorStateList tint)", "public void setTintBlendMode(@NonNull BlendMode blendMode)", "private Drawable getFirstNonNullDrawable()", "public void setOpacity(int opacity)", "public int getOpacity()", "public void setAutoMirrored(boolean mirrored)", "public boolean isAutoMirrored()", "public void jumpToCurrentState()", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "protected boolean onStateChange(int[] state)", "protected boolean onLevelChange(int level)", "protected void onBoundsChange(Rect bounds)", "private void updateLayerBounds(Rect bounds)", "private void updateLayerBoundsInternal(Rect bounds)", "private static int resolveGravity(int gravity, int width, int height, int intrinsicWidth, int intrinsicHeight)", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "private boolean refreshChildPadding(int i, ChildDrawable r)", " void ensurePadding()", " void refreshPadding()", "public ConstantState getConstantState()", "public Drawable mutate()", "public void clearMutated()", "public boolean onLayoutDirectionChanged(@View.ResolvedLayoutDir int layoutDirection)" ]
}