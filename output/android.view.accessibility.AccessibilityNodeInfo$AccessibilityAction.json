{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/accessibility/AccessibilityNodeInfo.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityAction",
  "comment" : "\n     * A class defining an action that can be performed on an {@link AccessibilityNodeInfo}.\n     * Each action has a unique id that is mandatory and optional data.\n     * <p>\n     * There are three categories of actions:\n     * <ul>\n     * <li><strong>Standard actions</strong> - These are actions that are reported and\n     * handled by the standard UI widgets in the platform. For each standard action\n     * there is a static constant defined in this class, e.g. {@link #ACTION_FOCUS}.\n     * These actions will have {@code null} labels.\n     * </li>\n     * <li><strong>Custom actions action</strong> - These are actions that are reported\n     * and handled by custom widgets. i.e. ones that are not part of the UI toolkit. For\n     * example, an application may define a custom action for clearing the user history.\n     * </li>\n     * <li><strong>Overridden standard actions</strong> - These are actions that override\n     * standard actions to customize them. For example, an app may add a label to the\n     * standard {@link #ACTION_CLICK} action to indicate to the user that this action clears\n     * browsing history.\n     * </ul>\n     * </p>\n     * <p>\n     * Actions are typically added to an {@link AccessibilityNodeInfo} by using\n     * {@link AccessibilityNodeInfo#addAction(AccessibilityAction)} within\n     * {@link View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} and are performed\n     * within {@link View#performAccessibilityAction(int, Bundle)}.\n     * </p>\n     * <p>\n     * <aside class=\"note\">\n     * <b>Note:</b> Views which support these actions should invoke\n     * {@link View#setImportantForAccessibility(int)} with\n     * {@link View#IMPORTANT_FOR_ACCESSIBILITY_YES} to ensure an {@link AccessibilityService}\n     * can discover the set of supported actions. </aside>\n     * </p>\n     * <p>\n     * <aside class=\"note\">\n     * <b>Note:</b> Use {@link androidx.core.view.ViewCompat#addAccessibilityAction(View,\n     * CharSequence, AccessibilityViewCommand)} to register an action directly on the view. </aside>\n     * </p>\n     ",
  "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.accessibilityservice.AccessibilityService", "androidx.core.view.ViewCompat#addAccessibilityAction(View", "android.view.SurfaceView#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)", "android.view.accessibility.AccessibilityNodeInfo#addAction(AccessibilityAction)", "android.view.SurfaceView#setImportantForAccessibility(int)", "#ACTION_FOCUS", "android.view.SurfaceView#IMPORTANT_FOR_ACCESSIBILITY_YES", "#ACTION_CLICK", "android.view.SurfaceView#performAccessibilityAction(int" ],
  "variables" : [ {
    "name" : "sStandardActions",
    "type" : "ArraySet<AccessibilityAction>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_FOCUS",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that gives input focus to the node.\n         * <p>The focus request send an event of {@link AccessibilityEvent#TYPE_VIEW_FOCUSED}\n         * if successful. In the View system, this is handled by {@link View#requestFocus}.\n         *\n         * <p>The node that is focused should return {@code true} for\n         * {@link AccessibilityNodeInfo#isFocused()}.\n         *\n         * See {@link #ACTION_ACCESSIBILITY_FOCUS} for the difference between system and\n         * accessibility focus.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#isFocused()", "android.view.SurfaceView#requestFocus", "#ACTION_ACCESSIBILITY_FOCUS", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_FOCUSED" ]
  }, {
    "name" : "ACTION_CLEAR_FOCUS",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that clears input focus of the node.\n         * <p>The node that is cleared should return {@code false} for\n         * {@link AccessibilityNodeInfo#isFocused)}.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#isFocused)" ]
  }, {
    "name" : "ACTION_SELECT",
    "type" : "AccessibilityAction",
    "comment" : "\n         *  Action that selects the node.\n         *  The view the implements this should send a\n         *  {@link AccessibilityEvent#TYPE_VIEW_SELECTED} event.\n         * @see AccessibilityAction#ACTION_CLEAR_SELECTION\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SELECTED" ]
  }, {
    "name" : "ACTION_CLEAR_SELECTION",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that deselects the node.\n         * @see AccessibilityAction#ACTION_SELECT\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CLICK",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that clicks on the node info.\n         *\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_CLICKED} event. In the View system,\n         * the default handling of this action when performed by a service is to call\n         * {@link View#performClick()}, and setting a\n         * {@link View#setOnClickListener(View.OnClickListener)} automatically adds this action.\n         *\n         * <p>{@link #isClickable()} should return true if this action is available.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED", "#isClickable()", "android.view.SurfaceView#setOnClickListener(View.OnClickListener)", "android.view.SurfaceView#performClick()" ]
  }, {
    "name" : "ACTION_LONG_CLICK",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that long clicks on the node.\n         *\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_LONG_CLICKED} event. In the View system,\n         * the default handling of this action when performed by a service is to call\n         * {@link View#performLongClick()}, and setting a\n         * {@link View#setOnLongClickListener(View.OnLongClickListener)} automatically adds this\n         * action.\n         *\n         * <p>{@link #isLongClickable()} should return true if this action is available.\n         ",
    "links" : [ "android.view.SurfaceView#setOnLongClickListener(View.OnLongClickListener)", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_LONG_CLICKED", "#isLongClickable()", "android.view.SurfaceView#performLongClick()" ]
  }, {
    "name" : "ACTION_ACCESSIBILITY_FOCUS",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that gives accessibility focus to the node.\n         *\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED} event\n         * if successful. The node that is focused should return {@code true} for\n         * {@link AccessibilityNodeInfo#isAccessibilityFocused()}.\n         *\n         * <p>This is intended to be used by screen readers to assist with user navigation. Apps\n         * changing focus can confuse screen readers, so the resulting behavior can vary by device\n         * and screen reader version.\n         * <p>This is distinct from {@link #ACTION_FOCUS}, which refers to system focus. System\n         * focus is typically used to convey targets for keyboard navigation.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED", "#ACTION_FOCUS", "android.view.accessibility.AccessibilityNodeInfo#isAccessibilityFocused()" ]
  }, {
    "name" : "ACTION_CLEAR_ACCESSIBILITY_FOCUS",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that clears accessibility focus of the node.\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED} event if successful. The\n         * node that is cleared should return {@code false} for\n         * {@link AccessibilityNodeInfo#isAccessibilityFocused()}.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED", "android.view.accessibility.AccessibilityNodeInfo#isAccessibilityFocused()" ]
  }, {
    "name" : "ACTION_NEXT_AT_MOVEMENT_GRANULARITY",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that requests to go to the next entity in this node's text\n         * at a given movement granularity. For example, move to the next character,\n         * word, etc.\n         * <p>\n         * <strong>Arguments:</strong>\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT},\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN}<br>\n         * <strong>Example:</strong> Move to the previous character and do not extend selection.\n         * <code><pre><p>\n         *   Bundle arguments = new Bundle();\n         *   arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT,\n         *           AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER);\n         *   arguments.putBoolean(AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN,\n         *           false);\n         *   info.performAction(AccessibilityAction.ACTION_NEXT_AT_MOVEMENT_GRANULARITY.getId(),\n         *           arguments);\n         * </code></pre></p>\n         * </p>\n         *\n         * @see AccessibilityNodeInfo#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT\n         * @see AccessibilityNodeInfo#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN\n         *\n         * @see AccessibilityNodeInfo#setMovementGranularities(int)\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN\n         * @see AccessibilityNodeInfo#getMovementGranularities()\n         *  AccessibilityNodeInfo.getMovementGranularities()\n         *\n         * @see AccessibilityNodeInfo#MOVEMENT_GRANULARITY_CHARACTER\n         *  AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER\n         * @see AccessibilityNodeInfo#MOVEMENT_GRANULARITY_WORD\n         *  AccessibilityNodeInfo.MOVEMENT_GRANULARITY_WORD\n         * @see AccessibilityNodeInfo#MOVEMENT_GRANULARITY_LINE\n         *  AccessibilityNodeInfo.MOVEMENT_GRANULARITY_LINE\n         * @see AccessibilityNodeInfo#MOVEMENT_GRANULARITY_PARAGRAPH\n         *  AccessibilityNodeInfo.MOVEMENT_GRANULARITY_PARAGRAPH\n         * @see AccessibilityNodeInfo#MOVEMENT_GRANULARITY_PAGE\n         *  AccessibilityNodeInfo.MOVEMENT_GRANULARITY_PAGE\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INTAccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT", "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEANAccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN" ]
  }, {
    "name" : "ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that requests to go to the previous entity in this node's text\n         * at a given movement granularity. For example, move to the next character,\n         * word, etc.\n         * <p>\n         * <strong>Arguments:</strong>\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT},\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN}<br>\n         * <strong>Example:</strong> Move to the next character and do not extend selection.\n         * <code><pre><p>\n         *   Bundle arguments = new Bundle();\n         *   arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT,\n         *           AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER);\n         *   arguments.putBoolean(AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN,\n         *           false);\n         *   info.performAction(AccessibilityAction.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY.getId(),\n         *           arguments);\n         * </code></pre></p>\n         * </p>\n         *\n         * @see AccessibilityNodeInfo#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT\n         * @see AccessibilityNodeInfo#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN\n         *\n         * @see AccessibilityNodeInfo#setMovementGranularities(int)\n         *   AccessibilityNodeInfo.setMovementGranularities(int)\n         * @see AccessibilityNodeInfo#getMovementGranularities()\n         *  AccessibilityNodeInfo.getMovementGranularities()\n         *\n         * @see AccessibilityNodeInfo#MOVEMENT_GRANULARITY_CHARACTER\n         *  AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER\n         * @see AccessibilityNodeInfo#MOVEMENT_GRANULARITY_WORD\n         *  AccessibilityNodeInfo.MOVEMENT_GRANULARITY_WORD\n         * @see AccessibilityNodeInfo#MOVEMENT_GRANULARITY_LINE\n         *  AccessibilityNodeInfo.MOVEMENT_GRANULARITY_LINE\n         * @see AccessibilityNodeInfo#MOVEMENT_GRANULARITY_PARAGRAPH\n         *  AccessibilityNodeInfo.MOVEMENT_GRANULARITY_PARAGRAPH\n         * @see AccessibilityNodeInfo#MOVEMENT_GRANULARITY_PAGE\n         *  AccessibilityNodeInfo.MOVEMENT_GRANULARITY_PAGE\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INTAccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT", "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEANAccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN" ]
  }, {
    "name" : "ACTION_NEXT_HTML_ELEMENT",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to move to the next HTML element of a given type. For example, move\n         * to the BUTTON, INPUT, TABLE, etc.\n         * <p>\n         * <strong>Arguments:</strong>\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_HTML_ELEMENT_STRING\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING}<br>\n         * <strong>Example:</strong>\n         * <code><pre><p>\n         *   Bundle arguments = new Bundle();\n         *   arguments.putString(AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING, \"BUTTON\");\n         *   info.performAction(AccessibilityAction.ACTION_NEXT_HTML_ELEMENT.getId(), arguments);\n         * </code></pre></p>\n         * </p>\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_HTML_ELEMENT_STRINGAccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING" ]
  }, {
    "name" : "ACTION_PREVIOUS_HTML_ELEMENT",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to move to the previous HTML element of a given type. For example, move\n         * to the BUTTON, INPUT, TABLE, etc.\n         * <p>\n         * <strong>Arguments:</strong>\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_HTML_ELEMENT_STRING\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING}<br>\n         * <strong>Example:</strong>\n         * <code><pre><p>\n         *   Bundle arguments = new Bundle();\n         *   arguments.putString(AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING, \"BUTTON\");\n         *   info.performAction(AccessibilityAction.ACTION_PREVIOUS_HTML_ELEMENT.getId(), arguments);\n         * </code></pre></p>\n         * </p>\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_HTML_ELEMENT_STRINGAccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING" ]
  }, {
    "name" : "ACTION_SCROLL_FORWARD",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to scroll the node content forward.\n         *\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event. Depending on the orientation,\n         * this element should also add the relevant directional scroll actions of\n         * {@link #ACTION_SCROLL_LEFT}, {@link #ACTION_SCROLL_RIGHT},\n         * {@link #ACTION_SCROLL_UP}, and {@link #ACTION_SCROLL_DOWN}. If the scrolling brings\n         * the next or previous element into view as the center element, such as in a ViewPager2,\n         * use {@link #ACTION_PAGE_DOWN} and the other page actions instead of the directional\n         * actions.\n         * <p>Example: a scrolling UI of vertical orientation with a forward\n         * scroll action should also add the scroll down action:\n         * <pre class=\"prettyprint\"><code>\n         *     onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {\n         *          super.onInitializeAccessibilityNodeInfo(info);\n         *          if (canScrollForward) {\n         *              info.addAction(ACTION_SCROLL_FORWARD);\n         *              info.addAction(ACTION_SCROLL_DOWN);\n         *          }\n         *     }\n         *     performAccessibilityAction(int action, Bundle bundle) {\n         *          if (action == ACTION_SCROLL_FORWARD || action == ACTION_SCROLL_DOWN) {\n         *              scrollForward();\n         *          }\n         *     }\n         *     scrollForward() {\n         *         ...\n         *         if (mAccessibilityManager.isEnabled()) {\n         *             event = new AccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SCROLLED);\n         *             event.setScrollDeltaX(dx);\n         *             event.setScrollDeltaY(dy);\n         *             event.setMaxScrollX(maxDx);\n         *             event.setMaxScrollY(maxDY);\n         *             sendAccessibilityEventUnchecked(event);\n         *        }\n         *     }\n         *      </code>\n         * </pre></p>\n         ",
    "links" : [ "#ACTION_SCROLL_DOWN", "#ACTION_SCROLL_LEFT", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED", "#ACTION_SCROLL_UP", "#ACTION_PAGE_DOWN", "#ACTION_SCROLL_RIGHT" ]
  }, {
    "name" : "ACTION_SCROLL_BACKWARD",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to scroll the node content backward.\n         *\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event. Depending on the orientation,\n         * this element should also add the relevant directional scroll actions of\n         * {@link #ACTION_SCROLL_LEFT}, {@link #ACTION_SCROLL_RIGHT},\n         * {@link #ACTION_SCROLL_UP}, and {@link #ACTION_SCROLL_DOWN}. If the scrolling brings\n         * the next or previous element into view as the center element, such as in a ViewPager2,\n         * use {@link #ACTION_PAGE_DOWN} and the other page actions instead of the directional\n         * actions.\n         * <p> Example: a scrolling UI of horizontal orientation with a backward\n         * scroll action should also add the scroll left/right action (LTR/RTL):\n         * <pre class=\"prettyprint\"><code>\n         *     onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {\n         *          super.onInitializeAccessibilityNodeInfo(info);\n         *          if (canScrollBackward) {\n         *              info.addAction(ACTION_SCROLL_FORWARD);\n         *              if (leftToRight) {\n         *                  info.addAction(ACTION_SCROLL_LEFT);\n         *              } else {\n         *                  info.addAction(ACTION_SCROLL_RIGHT);\n         *              }\n         *          }\n         *     }\n         *     performAccessibilityAction(int action, Bundle bundle) {\n         *          if (action == ACTION_SCROLL_BACKWARD) {\n         *              scrollBackward();\n         *          } else if (action == ACTION_SCROLL_LEFT) {\n         *              if (!isRTL()){\n         *                  scrollBackward();\n         *              }\n         *          } else if (action == ACTION_SCROLL_RIGHT) {\n         *              if (isRTL()){\n         *                  scrollBackward();\n         *              }\n         *          }\n         *     }\n         *     scrollBackward() {\n         *         ...\n         *         if (mAccessibilityManager.isEnabled()) {\n         *             event = new AccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SCROLLED);\n         *             event.setScrollDeltaX(dx);\n         *             event.setScrollDeltaY(dy);\n         *             event.setMaxScrollX(maxDx);\n         *             event.setMaxScrollY(maxDY);\n         *             sendAccessibilityEventUnchecked(event);\n         *        }\n         *     }\n         *      </code>\n         * </pre></p>\n         ",
    "links" : [ "#ACTION_SCROLL_DOWN", "#ACTION_SCROLL_LEFT", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED", "#ACTION_SCROLL_UP", "#ACTION_PAGE_DOWN", "#ACTION_SCROLL_RIGHT" ]
  }, {
    "name" : "ACTION_COPY",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to copy the current selection to the clipboard.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PASTE",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to paste the current clipboard content.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CUT",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to cut the current selection and place it to the clipboard.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SET_SELECTION",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to set the selection. Performing this action with no arguments\n         * clears the selection.\n         * <p>\n         * <strong>Arguments:</strong>\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_SELECTION_START_INT\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT},\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_SELECTION_END_INT\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT}<br>\n         * <strong>Example:</strong>\n         * <code><pre><p>\n         *   Bundle arguments = new Bundle();\n         *   arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT, 1);\n         *   arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT, 2);\n         *   info.performAction(AccessibilityAction.ACTION_SET_SELECTION.getId(), arguments);\n         * </code></pre></p>\n         * </p>\n         * <p> If this is a text selection, the UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED} event if its selection is\n         * updated. This element should also return {@code true} for\n         * {@link AccessibilityNodeInfo#isTextSelectable()}.\n         * @see AccessibilityNodeInfo#ACTION_ARGUMENT_SELECTION_START_INT\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT\n         * @see AccessibilityNodeInfo#ACTION_ARGUMENT_SELECTION_END_INT\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED", "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_SELECTION_END_INTAccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT", "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_SELECTION_START_INTAccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT", "android.view.accessibility.AccessibilityNodeInfo#isTextSelectable()" ]
  }, {
    "name" : "ACTION_EXPAND",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to expand an expandable node.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_COLLAPSE",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to collapse an expandable node.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DISMISS",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to dismiss a dismissable node.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SET_TEXT",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that sets the text of the node. Performing the action without argument,\n         * using <code> null</code> or empty {@link CharSequence} will clear the text. This\n         * action will also put the cursor at the end of text.\n         * <p>\n         * <strong>Arguments:</strong>\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE\n         *  AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE}<br>\n         * <strong>Example:</strong>\n         * <code><pre><p>\n         *   Bundle arguments = new Bundle();\n         *   arguments.putCharSequence(AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE,\n         *       \"android\");\n         *   info.performAction(AccessibilityAction.ACTION_SET_TEXT.getId(), arguments);\n         * </code></pre></p>\n         * <p> The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED} event if its text is updated.\n         * This element should also return {@code true} for\n         * {@link AccessibilityNodeInfo#isEditable()}.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCEAccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED", "android.view.accessibility.AccessibilityNodeInfo#isEditable()", "CharSequence" ]
  }, {
    "name" : "ACTION_SHOW_ON_SCREEN",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that requests the node make its bounding rectangle visible\n         * on the screen, scrolling if necessary just enough.\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n         *\n         * @see View#requestRectangleOnScreen(Rect)\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED" ]
  }, {
    "name" : "ACTION_SCROLL_TO_POSITION",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that scrolls the node to make the specified collection\n         * position visible on screen.\n         * <p>\n         * <strong>Arguments:</strong>\n         * <ul>\n         *     <li>{@link AccessibilityNodeInfo#ACTION_ARGUMENT_ROW_INT}</li>\n         *     <li>{@link AccessibilityNodeInfo#ACTION_ARGUMENT_COLUMN_INT}</li>\n         * <ul>\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n         *\n         * @see AccessibilityNodeInfo#getCollectionInfo()\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED", "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_ROW_INT", "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_COLUMN_INT" ]
  }, {
    "name" : "ACTION_SCROLL_IN_DIRECTION",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that brings fully on screen the next node in the specified direction.\n         *\n         * <p>\n         *     This should include wrapping around to the next/previous row, column, etc. in a\n         *     collection if one is available. If there is no node in that direction, the action\n         *     should fail and return false.\n         * </p>\n         * <p>\n         *     This action should be used instead of\n         *     {@link AccessibilityAction#ACTION_SCROLL_TO_POSITION} when a widget does not have\n         *     clear row and column semantics or if a directional search is needed to find a node in\n         *     a complex ViewGroup where individual nodes may span multiple rows or columns. The\n         *     implementing widget must send a\n         *     {@link AccessibilityEvent#TYPE_VIEW_TARGETED_BY_SCROLL} accessibility event with the\n         *     scroll target as the source.  An accessibility service can listen for this event,\n         *     inspect its source, and use the result when determining where to place accessibility\n         *     focus.\n         * <p>\n         *     <strong>Arguments:</strong> {@link #ACTION_ARGUMENT_DIRECTION_INT}. This is a\n         *     required argument.<br>\n         * </p>\n         ",
    "links" : [ "#ACTION_ARGUMENT_DIRECTION_INT", "#ACTION_SCROLL_TO_POSITION", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TARGETED_BY_SCROLL" ]
  }, {
    "name" : "ACTION_SCROLL_UP",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to scroll the node content up.\n         *\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED" ]
  }, {
    "name" : "ACTION_SCROLL_LEFT",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to scroll the node content left.\n         *\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED" ]
  }, {
    "name" : "ACTION_SCROLL_DOWN",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to scroll the node content down.\n         *\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED" ]
  }, {
    "name" : "ACTION_SCROLL_RIGHT",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to scroll the node content right.\n         *\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED" ]
  }, {
    "name" : "ACTION_PAGE_UP",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to move to the page above.\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED" ]
  }, {
    "name" : "ACTION_PAGE_DOWN",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to move to the page below.\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED" ]
  }, {
    "name" : "ACTION_PAGE_LEFT",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to move to the page left.\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED" ]
  }, {
    "name" : "ACTION_PAGE_RIGHT",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to move to the page right.\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED" ]
  }, {
    "name" : "ACTION_CONTEXT_CLICK",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that context clicks the node.\n         *\n         * <p>The UI element that implements this should send a\n         * {@link AccessibilityEvent#TYPE_VIEW_CONTEXT_CLICKED} event. In the View system,\n         * the default handling of this action when performed by a service is to call\n         * {@link View#performContextClick()}, and setting a\n         * {@link View#setOnContextClickListener(View.OnContextClickListener)} automatically adds\n         * this action.\n         *\n         * <p>A context click usually occurs from a mouse pointer right-click or a stylus button\n         * press.\n         *\n         * <p>{@link #isContextClickable()} should return true if this action is available.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CONTEXT_CLICKED", "#isContextClickable()", "android.view.SurfaceView#setOnContextClickListener(View.OnContextClickListener)", "android.view.SurfaceView#performContextClick()" ]
  }, {
    "name" : "ACTION_SET_PROGRESS",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that sets progress between {@link  RangeInfo#getMin() RangeInfo.getMin()} and\n         * {@link  RangeInfo#getMax() RangeInfo.getMax()}. It should use the same value type as\n         * {@link RangeInfo#getType() RangeInfo.getType()}\n         * <p>\n         * <strong>Arguments:</strong>\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_PROGRESS_VALUE}\n         *\n         * @see RangeInfo\n         ",
    "links" : [ "#getMax()", "#getMin()", "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_PROGRESS_VALUE", "#getType()" ]
  }, {
    "name" : "ACTION_MOVE_WINDOW",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to move a window to a new location.\n         * <p>\n         * <strong>Arguments:</strong>\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_MOVE_WINDOW_X}\n         * {@link AccessibilityNodeInfo#ACTION_ARGUMENT_MOVE_WINDOW_Y}\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_MOVE_WINDOW_Y", "android.view.accessibility.AccessibilityNodeInfo#ACTION_ARGUMENT_MOVE_WINDOW_X" ]
  }, {
    "name" : "ACTION_SHOW_TOOLTIP",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to show a tooltip. A node should expose this action only for views with tooltip\n         * text that but are not currently showing a tooltip.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_HIDE_TOOLTIP",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to hide a tooltip. A node should expose this action only for views that are\n         * currently showing a tooltip.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PRESS_AND_HOLD",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action that presses and holds a node.\n         * <p>\n         * This action is for nodes that have distinct behavior that depends on how long a press is\n         * held. Nodes having a single action for long press should use {@link #ACTION_LONG_CLICK}\n         *  instead of this action, and nodes should not expose both actions.\n         * <p>\n         * When calling {@code performAction(ACTION_PRESS_AND_HOLD, bundle}, use\n         * {@link #ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT} to specify how long the\n         * node is pressed. The first time an accessibility service performs ACTION_PRES_AND_HOLD\n         * on a node, it must specify 0 as ACTION_ARGUMENT_PRESS_AND_HOLD, so the application is\n         * notified that the held state has started. To ensure reasonable behavior, the values\n         * must be increased incrementally and may not exceed 10,000. UIs requested\n         * to hold for times outside of this range should ignore the action.\n         * <p>\n         * The total time the element is held could be specified by an accessibility user up-front,\n         * or may depend on what happens on the UI as the user continues to request the hold.\n         * <p>\n         *   <strong>Note:</strong> The time between dispatching the action and it arriving in the\n         *     UI process is not guaranteed. It is possible on a busy system for the time to expire\n         *     unexpectedly. For the case of holding down a key for a repeating action, a delayed\n         *     arrival should be benign. Please do not use this sort of action in cases where such\n         *     delays will lead to unexpected UI behavior.\n         * <p>\n         ",
    "links" : [ "#ACTION_LONG_CLICK", "#ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT" ]
  }, {
    "name" : "ACTION_IME_ENTER",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to send an ime actionId which is from\n         * {@link android.view.inputmethod.EditorInfo#actionId}. This ime actionId sets by\n         * {@link TextView#setImeActionLabel(CharSequence, int)}, or it would be\n         * {@link android.view.inputmethod.EditorInfo#IME_ACTION_UNSPECIFIED} if no specific\n         * actionId has set. A node should expose this action only for views that are currently\n         * with input focus and editable.\n         ",
    "links" : [ "android.widget.TextView#setImeActionLabel(CharSequence", "android.view.inputmethod.EditorInfo#actionId", "android.view.inputmethod.EditorInfo#IME_ACTION_UNSPECIFIED" ]
  }, {
    "name" : "ACTION_DRAG_START",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to start a drag.\n         * <p>\n         * This action initiates a drag & drop within the system. The source's dragged content is\n         * prepared before the drag begins. In View, this action should prepare the arguments to\n         * {@link View#startDragAndDrop(ClipData, View.DragShadowBuilder, Object, int)} and then\n         * call {@link View#startDragAndDrop(ClipData, View.DragShadowBuilder, Object, int)} with\n         * {@link View#DRAG_FLAG_ACCESSIBILITY_ACTION}. The equivalent should be performed for other\n         * UI toolkits.\n         * </p>\n         *\n         * @see AccessibilityEvent#CONTENT_CHANGE_TYPE_DRAG_STARTED\n         ",
    "links" : [ "android.view.SurfaceView#startDragAndDrop(ClipData", "android.view.SurfaceView#DRAG_FLAG_ACCESSIBILITY_ACTION" ]
  }, {
    "name" : "ACTION_DRAG_DROP",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to trigger a drop of the content being dragged.\n         * <p>\n         * This action is added to potential drop targets if the source started a drag with\n         * {@link #ACTION_DRAG_START}. In View, these targets are Views that accepted\n         * {@link android.view.DragEvent#ACTION_DRAG_STARTED} and have an\n         * {@link View.OnDragListener}, and the drop occurs at the center location of the View's\n         * window bounds.\n         * </p>\n         *\n         * @see AccessibilityEvent#CONTENT_CHANGE_TYPE_DRAG_DROPPED\n         ",
    "links" : [ "android.view.DragEvent#ACTION_DRAG_STARTED", "#ACTION_DRAG_START", "View.OnDragListener" ]
  }, {
    "name" : "ACTION_DRAG_CANCEL",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to cancel a drag.\n         * <p>\n         * This action is added to the source that started a drag with {@link #ACTION_DRAG_START}.\n         * </p>\n         *\n         * @see AccessibilityEvent#CONTENT_CHANGE_TYPE_DRAG_CANCELLED\n         ",
    "links" : [ "#ACTION_DRAG_START" ]
  }, {
    "name" : "ACTION_SHOW_TEXT_SUGGESTIONS",
    "type" : "AccessibilityAction",
    "comment" : "\n         * Action to show suggestions for editable text.\n         ",
    "links" : [ ]
  }, {
    "name" : "mActionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSerializationFlag",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AccessibilityAction>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n         * Gets the id for this action.\n         *\n         * @return The action id.\n         ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Gets the label for this action. Its purpose is to describe the\n         * action to user.\n         *\n         * @return The label.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n         * {@inheritDoc}\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n         * Write data into a parcel.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getId()", "public CharSequence getLabel()", "public int hashCode()", "public boolean equals(@Nullable Object other)", "public String toString()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel out, int flags)" ],
  "variableNames" : [ "sStandardActions", "ACTION_FOCUS", "ACTION_CLEAR_FOCUS", "ACTION_SELECT", "ACTION_CLEAR_SELECTION", "ACTION_CLICK", "ACTION_LONG_CLICK", "ACTION_ACCESSIBILITY_FOCUS", "ACTION_CLEAR_ACCESSIBILITY_FOCUS", "ACTION_NEXT_AT_MOVEMENT_GRANULARITY", "ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY", "ACTION_NEXT_HTML_ELEMENT", "ACTION_PREVIOUS_HTML_ELEMENT", "ACTION_SCROLL_FORWARD", "ACTION_SCROLL_BACKWARD", "ACTION_COPY", "ACTION_PASTE", "ACTION_CUT", "ACTION_SET_SELECTION", "ACTION_EXPAND", "ACTION_COLLAPSE", "ACTION_DISMISS", "ACTION_SET_TEXT", "ACTION_SHOW_ON_SCREEN", "ACTION_SCROLL_TO_POSITION", "ACTION_SCROLL_IN_DIRECTION", "ACTION_SCROLL_UP", "ACTION_SCROLL_LEFT", "ACTION_SCROLL_DOWN", "ACTION_SCROLL_RIGHT", "ACTION_PAGE_UP", "ACTION_PAGE_DOWN", "ACTION_PAGE_LEFT", "ACTION_PAGE_RIGHT", "ACTION_CONTEXT_CLICK", "ACTION_SET_PROGRESS", "ACTION_MOVE_WINDOW", "ACTION_SHOW_TOOLTIP", "ACTION_HIDE_TOOLTIP", "ACTION_PRESS_AND_HOLD", "ACTION_IME_ENTER", "ACTION_DRAG_START", "ACTION_DRAG_DROP", "ACTION_DRAG_CANCEL", "ACTION_SHOW_TEXT_SUGGESTIONS", "mActionId", "mLabel", "mSerializationFlag", "CREATOR" ]
}