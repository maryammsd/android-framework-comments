{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/SocketChannel.java",
  "packageName" : "java.nio.channels",
  "className" : "SocketChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static SocketChannel open() throws IOException",
    "returnType" : "SocketChannel",
    "comment" : "\n     * Opens a socket channel.\n     *\n     * <p> The new channel is created by invoking the {@link\n     * java.nio.channels.spi.SelectorProvider#openSocketChannel\n     * openSocketChannel} method of the system-wide default {@link\n     * java.nio.channels.spi.SelectorProvider} object.  </p>\n     *\n     * @return  A new socket channel\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "java.nio.channels.spi.SelectorProvider", "java.nio.channels.spi.SelectorProvider#openSocketChannelopenSocketChannel" ]
  }, {
    "name" : "public static SocketChannel open(SocketAddress remote) throws IOException",
    "returnType" : "SocketChannel",
    "comment" : "\n     * Opens a socket channel and connects it to a remote address.\n     *\n     * <p> This convenience method works as if by invoking the {@link #open()}\n     * method, invoking the {@link #connect(SocketAddress) connect} method upon\n     * the resulting socket channel, passing it {@code remote}, and then\n     * returning that channel.  </p>\n     *\n     * @param  remote\n     *         The remote address to which the new channel is to be connected\n     *\n     * @return  A new, and connected, socket channel\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes this channel\n     *          while the connect operation is in progress\n     *\n     * @throws  ClosedByInterruptException\n     *          If another thread interrupts the current thread\n     *          while the connect operation is in progress, thereby\n     *          closing the channel and setting the current thread's\n     *          interrupt status\n     *\n     * @throws  UnresolvedAddressException\n     *          If the given remote address is not fully resolved\n     *\n     * @throws  UnsupportedAddressTypeException\n     *          If the type of the given remote address is not supported\n     *\n     * @throws  SecurityException\n     *          If a security manager has been installed\n     *          and it does not permit access to the given remote endpoint\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ "#open()", "#connect(SocketAddress)" ]
  }, {
    "name" : "public final int validOps()",
    "returnType" : "int",
    "comment" : "\n     * Returns an operation set identifying this channel's supported\n     * operations.\n     *\n     * <p> Socket channels support connecting, reading, and writing, so this\n     * method returns {@code (}{@link SelectionKey#OP_CONNECT}\n     * {@code |}&nbsp;{@link SelectionKey#OP_READ} {@code |}&nbsp;{@link\n     * SelectionKey#OP_WRITE}{@code )}.\n     *\n     * @return  The valid-operation set\n     ",
    "links" : [ "java.nio.channels.SelectionKey#OP_READ", "java.nio.channels.SelectionKey#OP_CONNECT", "java.nio.channels.SelectionKey#OP_WRITE" ]
  }, {
    "name" : "public abstract SocketChannel bind(SocketAddress local) throws IOException",
    "returnType" : "SocketChannel",
    "comment" : "\n     * @throws  ConnectionPendingException\n     *          If a non-blocking connect operation is already in progress on\n     *          this channel\n     * @throws  AlreadyBoundException               {@inheritDoc}\n     * @throws  UnsupportedAddressTypeException     {@inheritDoc}\n     * @throws  ClosedChannelException              {@inheritDoc}\n     * @throws  IOException                         {@inheritDoc}\n     * @throws  SecurityException\n     *          If a security manager has been installed and its\n     *          {@link SecurityManager#checkListen checkListen} method denies\n     *          the operation\n     *\n     * @since 1.7\n     ",
    "links" : [ "#checkListen" ]
  }, {
    "name" : "public abstract SocketChannel setOption(SocketOption<T> name, T value) throws IOException",
    "returnType" : "SocketChannel",
    "comment" : "\n     * @throws  UnsupportedOperationException           {@inheritDoc}\n     * @throws  IllegalArgumentException                {@inheritDoc}\n     * @throws  ClosedChannelException                  {@inheritDoc}\n     * @throws  IOException                             {@inheritDoc}\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract SocketChannel shutdownInput() throws IOException",
    "returnType" : "SocketChannel",
    "comment" : "\n     * Shutdown the connection for reading without closing the channel.\n     *\n     * <p> Once shutdown for reading then further reads on the channel will\n     * return {@code -1}, the end-of-stream indication. If the input side of the\n     * connection is already shutdown then invoking this method has no effect.\n     *\n     * @return  The channel\n     *\n     * @throws  NotYetConnectedException\n     *          If this channel is not yet connected\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  IOException\n     *          If some other I/O error occurs\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract SocketChannel shutdownOutput() throws IOException",
    "returnType" : "SocketChannel",
    "comment" : "\n     * Shutdown the connection for writing without closing the channel.\n     *\n     * <p> Once shutdown for writing then further attempts to write to the\n     * channel will throw {@link ClosedChannelException}. If the output side of\n     * the connection is already shutdown then invoking this method has no\n     * effect.\n     *\n     * @return  The channel\n     *\n     * @throws  NotYetConnectedException\n     *          If this channel is not yet connected\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  IOException\n     *          If some other I/O error occurs\n     *\n     * @since 1.7\n     ",
    "links" : [ "java.nio.channels.ClosedChannelException" ]
  }, {
    "name" : "public abstract Socket socket()",
    "returnType" : "Socket",
    "comment" : "\n     * Retrieves a socket associated with this channel.\n     *\n     * <p> The returned object will not declare any public methods that are not\n     * declared in the {@link java.net.Socket} class.  </p>\n     *\n     * @return  A socket associated with this channel\n     ",
    "links" : [ "java.net.Socket" ]
  }, {
    "name" : "public abstract boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this channel's network socket is connected.\n     *\n     * @return  {@code true} if, and only if, this channel's network socket\n     *          is {@link #isOpen open} and connected\n     ",
    "links" : [ "#isOpen" ]
  }, {
    "name" : "public abstract boolean isConnectionPending()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not a connection operation is in progress on this\n     * channel.\n     *\n     * @return  {@code true} if, and only if, a connection operation has been\n     *          initiated on this channel but not yet completed by invoking the\n     *          {@link #finishConnect finishConnect} method\n     ",
    "links" : [ "#finishConnect" ]
  }, {
    "name" : "public abstract boolean connect(SocketAddress remote) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Connects this channel's socket.\n     *\n     * <p> If this channel is in non-blocking mode then an invocation of this\n     * method initiates a non-blocking connection operation.  If the connection\n     * is established immediately, as can happen with a local connection, then\n     * this method returns {@code true}.  Otherwise this method returns\n     * {@code false} and the connection operation must later be completed by\n     * invoking the {@link #finishConnect finishConnect} method.\n     *\n     * <p> If this channel is in blocking mode then an invocation of this\n     * method will block until the connection is established or an I/O error\n     * occurs.\n     *\n     * <p> This method performs exactly the same security checks as the {@link\n     * java.net.Socket} class.  That is, if a security manager has been\n     * installed then this method verifies that its {@link\n     * java.lang.SecurityManager#checkConnect checkConnect} method permits\n     * connecting to the address and port number of the given remote endpoint.\n     *\n     * <p> This method may be invoked at any time.  If a read or write\n     * operation upon this channel is invoked while an invocation of this\n     * method is in progress then that operation will first block until this\n     * invocation is complete.  If a connection attempt is initiated but fails,\n     * that is, if an invocation of this method throws a checked exception,\n     * then the channel will be closed.  </p>\n     *\n     * @param  remote\n     *         The remote address to which this channel is to be connected\n     *\n     * @return  {@code true} if a connection was established,\n     *          {@code false} if this channel is in non-blocking mode\n     *          and the connection operation is in progress\n     *\n     * @throws  AlreadyConnectedException\n     *          If this channel is already connected\n     *\n     * @throws  ConnectionPendingException\n     *          If a non-blocking connection operation is already in progress\n     *          on this channel\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes this channel\n     *          while the connect operation is in progress\n     *\n     * @throws  ClosedByInterruptException\n     *          If another thread interrupts the current thread\n     *          while the connect operation is in progress, thereby\n     *          closing the channel and setting the current thread's\n     *          interrupt status\n     *\n     * @throws  UnresolvedAddressException\n     *          If the given remote address is not fully resolved\n     *\n     * @throws  UnsupportedAddressTypeException\n     *          If the type of the given remote address is not supported\n     *\n     * @throws  SecurityException\n     *          If a security manager has been installed\n     *          and it does not permit access to the given remote endpoint\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ "java.net.Socket", "#finishConnect", "java.lang.SecurityManager#checkConnect" ]
  }, {
    "name" : "public abstract boolean finishConnect() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Finishes the process of connecting a socket channel.\n     *\n     * <p> A non-blocking connection operation is initiated by placing a socket\n     * channel in non-blocking mode and then invoking its {@link #connect\n     * connect} method.  Once the connection is established, or the attempt has\n     * failed, the socket channel will become connectable and this method may\n     * be invoked to complete the connection sequence.  If the connection\n     * operation failed then invoking this method will cause an appropriate\n     * {@link java.io.IOException} to be thrown.\n     *\n     * <p> If this channel is already connected then this method will not block\n     * and will immediately return {@code true}.  If this channel is in\n     * non-blocking mode then this method will return {@code false} if the\n     * connection process is not yet complete.  If this channel is in blocking\n     * mode then this method will block until the connection either completes\n     * or fails, and will always either return {@code true} or throw a checked\n     * exception describing the failure.\n     *\n     * <p> This method may be invoked at any time.  If a read or write\n     * operation upon this channel is invoked while an invocation of this\n     * method is in progress then that operation will first block until this\n     * invocation is complete.  If a connection attempt fails, that is, if an\n     * invocation of this method throws a checked exception, then the channel\n     * will be closed.  </p>\n     *\n     * @return  {@code true} if, and only if, this channel's socket is now\n     *          connected\n     *\n     * @throws  NoConnectionPendingException\n     *          If this channel is not connected and a connection operation\n     *          has not been initiated\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes this channel\n     *          while the connect operation is in progress\n     *\n     * @throws  ClosedByInterruptException\n     *          If another thread interrupts the current thread\n     *          while the connect operation is in progress, thereby\n     *          closing the channel and setting the current thread's\n     *          interrupt status\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ "#connectconnect", "java.io.IOException" ]
  }, {
    "name" : "public abstract SocketAddress getRemoteAddress() throws IOException",
    "returnType" : "SocketAddress",
    "comment" : "\n     * Returns the remote address to which this channel's socket is connected.\n     *\n     * <p> Where the channel is bound and connected to an Internet Protocol\n     * socket address then the return value from this method is of type {@link\n     * java.net.InetSocketAddress}.\n     *\n     * @return  The remote address; {@code null} if the channel's socket is not\n     *          connected\n     *\n     * @throws  ClosedChannelException\n     *          If the channel is closed\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @since 1.7\n     ",
    "links" : [ "java.net.InetSocketAddress" ]
  }, {
    "name" : "public abstract int read(ByteBuffer dst) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * @throws  NotYetConnectedException\n     *          If this channel is not yet connected\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long read(ByteBuffer[] dsts, int offset, int length) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * @throws  NotYetConnectedException\n     *          If this channel is not yet connected\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long read(ByteBuffer[] dsts) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * @throws  NotYetConnectedException\n     *          If this channel is not yet connected\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int write(ByteBuffer src) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * @throws  NotYetConnectedException\n     *          If this channel is not yet connected\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long write(ByteBuffer[] srcs, int offset, int length) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * @throws  NotYetConnectedException\n     *          If this channel is not yet connected\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long write(ByteBuffer[] srcs) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * @throws  NotYetConnectedException\n     *          If this channel is not yet connected\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract SocketAddress getLocalAddress() throws IOException",
    "returnType" : "SocketAddress",
    "comment" : "\n     * {@inheritDoc}\n     * <p>\n     * If there is a security manager set, its {@code checkConnect} method is\n     * called with the local address and {@code -1} as its arguments to see\n     * if the operation is allowed. If the operation is not allowed,\n     * a {@code SocketAddress} representing the\n     * {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n     * local port of the channel's socket is returned.\n     *\n     * @return  The {@code SocketAddress} that the socket is bound to, or the\n     *          {@code SocketAddress} representing the loopback address if\n     *          denied by the security manager, or {@code null} if the\n     *          channel's socket is not bound\n     *\n     * @throws  ClosedChannelException     {@inheritDoc}\n     * @throws  IOException                {@inheritDoc}\n     ",
    "links" : [ "java.net.InetAddress#getLoopbackAddress" ]
  } ],
  "methodNames" : [ "public static SocketChannel open() throws IOException", "public static SocketChannel open(SocketAddress remote) throws IOException", "public final int validOps()", "public abstract SocketChannel bind(SocketAddress local) throws IOException", "public abstract SocketChannel setOption(SocketOption<T> name, T value) throws IOException", "public abstract SocketChannel shutdownInput() throws IOException", "public abstract SocketChannel shutdownOutput() throws IOException", "public abstract Socket socket()", "public abstract boolean isConnected()", "public abstract boolean isConnectionPending()", "public abstract boolean connect(SocketAddress remote) throws IOException", "public abstract boolean finishConnect() throws IOException", "public abstract SocketAddress getRemoteAddress() throws IOException", "public abstract int read(ByteBuffer dst) throws IOException", "public abstract long read(ByteBuffer[] dsts, int offset, int length) throws IOException", "public final long read(ByteBuffer[] dsts) throws IOException", "public abstract int write(ByteBuffer src) throws IOException", "public abstract long write(ByteBuffer[] srcs, int offset, int length) throws IOException", "public final long write(ByteBuffer[] srcs) throws IOException", "public abstract SocketAddress getLocalAddress() throws IOException" ],
  "variableNames" : [ ]
}