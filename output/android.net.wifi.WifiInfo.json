{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiInfo.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiInfo",
  "comment" : "\n * Describes the state of any Wi-Fi connection that is active or\n * is in the process of being set up.\n *\n * In the connected state, access to location sensitive fields requires\n * the same permissions as {@link WifiManager#getScanResults}. If such access is not allowed,\n * {@link #getSSID} will return {@link WifiManager#UNKNOWN_SSID} and\n * {@link #getBSSID} will return {@code \"02:00:00:00:00:00\"}.\n * {@link #getApMldMacAddress()} will return null.\n * {@link #getNetworkId()} will return {@code -1}.\n * {@link #getPasspointFqdn()} will return null.\n * {@link #getPasspointProviderFriendlyName()} will return null.\n * {@link #getInformationElements()} will return null.\n * {@link #getMacAddress()} will return {@code \"02:00:00:00:00:00\"}.\n ",
  "links" : [ "android.net.wifi.WifiManager#getScanResults", "#getSSID", "#getMacAddress()", "#getNetworkId()", "#getInformationElements()", "#getApMldMacAddress()", "android.net.wifi.WifiManager#UNKNOWN_SSID", "#getPasspointFqdn()", "#getPasspointProviderFriendlyName()", "#getBSSID" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "stateMap",
    "type" : "EnumMap<SupplicantState, DetailedState>",
    "comment" : "\n     * This is the map described in the Javadoc comment above. The positions\n     * of the elements of the array must correspond to the ordinal values\n     * of <code>DetailedState</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAC_ADDRESS",
    "type" : "String",
    "comment" : "\n     * Default MAC address reported to a client that does not have the\n     * android.permission.LOCAL_MAC_ADDRESS permission.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mSupplicantState",
    "type" : "SupplicantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBSSID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWifiSsid",
    "type" : "WifiSsid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsHiddenSsid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecurityType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApMldMacAddress",
    "type" : "MacAddress",
    "comment" : "\n     * The Multi-Link Device (MLD) MAC Address for the connected access point.\n     * Only applicable for Wi-Fi 7 access points, null otherwise.\n     * This will be set even if the STA is non-MLD\n     ",
    "links" : [ ]
  }, {
    "name" : "mApMloLinkId",
    "type" : "int",
    "comment" : "\n     * The Multi-Link Operation (MLO) link-id for the access point.\n     * Only applicable for Wi-Fi 7 access points.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAffiliatedMloLinksMap",
    "type" : "SparseArray<MloLink>",
    "comment" : " Maps link id to Affiliated MLO links. ",
    "links" : [ ]
  }, {
    "name" : "mAffiliatedMloLinks",
    "type" : "List<MloLink>",
    "comment" : "\n     * The Multi-Link Operation (MLO) affiliated Links.\n     * Only applicable for Wi-Fi 7 access points.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_RSSI",
    "type" : "int",
    "comment" : "\n     * Used to indicate that the RSSI is invalid, for example if no RSSI measurements are available\n     * yet.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_FREQUENCY",
    "type" : "int",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "MIN_RSSI",
    "type" : "int",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "MAX_RSSI",
    "type" : "int",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown security type. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_OPEN",
    "type" : "int",
    "comment" : " Security type for an open network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WEP",
    "type" : "int",
    "comment" : " Security type for a WEP network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_PSK",
    "type" : "int",
    "comment" : " Security type for a PSK network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_EAP",
    "type" : "int",
    "comment" : " Security type for an EAP network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_SAE",
    "type" : "int",
    "comment" : " Security type for an SAE network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT",
    "type" : "int",
    "comment" : " Security type for a WPA3-Enterprise in 192-bit security network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_OWE",
    "type" : "int",
    "comment" : " Security type for an OWE network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WAPI_PSK",
    "type" : "int",
    "comment" : " Security type for a WAPI PSK network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WAPI_CERT",
    "type" : "int",
    "comment" : " Security type for a WAPI Certificate network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_EAP_WPA3_ENTERPRISE",
    "type" : "int",
    "comment" : " Security type for a WPA3-Enterprise network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_OSEN",
    "type" : "int",
    "comment" : " Security type for an OSEN network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_PASSPOINT_R1_R2",
    "type" : "int",
    "comment" : " Security type for a Passpoint R1/R2 network, where TKIP and WEP are not allowed. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_PASSPOINT_R3",
    "type" : "int",
    "comment" : "\n     * Security type for a Passpoint R3 network, where TKIP and WEP are not allowed,\n     * and PMF must be set to Required.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_DPP",
    "type" : "int",
    "comment" : " Security type for Easy Connect (DPP) network ",
    "links" : [ ]
  }, {
    "name" : "DPM_SECURITY_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown security type that cannot be converted to\n     * DevicePolicyManager.WifiSecurity security type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IS_PRIMARY_NO_PERMISSION",
    "type" : "int",
    "comment" : " @see #isPrimary() - No permission to access the field.  ",
    "links" : [ ]
  }, {
    "name" : "IS_PRIMARY_FALSE",
    "type" : "int",
    "comment" : " @see #isPrimary() - false ",
    "links" : [ ]
  }, {
    "name" : "IS_PRIMARY_TRUE",
    "type" : "int",
    "comment" : " @see #isPrimary() - true ",
    "links" : [ ]
  }, {
    "name" : "mRssi",
    "type" : "int",
    "comment" : "\n     * Received Signal Strength Indicator\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastRssiUpdateMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWifiStandard",
    "type" : "int",
    "comment" : "\n     * Wi-Fi standard for the connection\n     ",
    "links" : [ ]
  }, {
    "name" : "LINK_SPEED_UNITS",
    "type" : "String",
    "comment" : "\n     * The unit in which links speeds are expressed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLinkSpeed",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LINK_SPEED_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Constant for unknown link speed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTxLinkSpeed",
    "type" : "int",
    "comment" : "\n     * Tx(transmit) Link speed in Mbps\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxSupportedTxLinkSpeed",
    "type" : "int",
    "comment" : "\n     * Max supported Tx(transmit) link speed in Mbps\n     ",
    "links" : [ ]
  }, {
    "name" : "mRxLinkSpeed",
    "type" : "int",
    "comment" : "\n     * Rx(receive) Link speed in Mbps\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxSupportedRxLinkSpeed",
    "type" : "int",
    "comment" : "\n     * Max supported Rx(receive) link speed in Mbps\n     ",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_UNITS",
    "type" : "String",
    "comment" : "\n     * Frequency in MHz\n     ",
    "links" : [ ]
  }, {
    "name" : "mFrequency",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIpAddress",
    "type" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMacAddress",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEphemeral",
    "type" : "boolean",
    "comment" : "\n     * Whether the network is ephemeral or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTrusted",
    "type" : "boolean",
    "comment" : "\n     * Whether the network is trusted or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRestricted",
    "type" : "boolean",
    "comment" : "\n     * Whether the network is restricted or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOemPaid",
    "type" : "boolean",
    "comment" : "\n     * Whether the network is oem paid or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOemPrivate",
    "type" : "boolean",
    "comment" : "\n     * Whether the network is oem private or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCarrierMerged",
    "type" : "boolean",
    "comment" : "\n     * Whether the network is a carrier merged network.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOsuAp",
    "type" : "boolean",
    "comment" : "\n     * OSU (Online Sign Up) AP for Passpoint R2.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFqdn",
    "type" : "String",
    "comment" : "\n     * Fully qualified domain name of a Passpoint configuration\n     ",
    "links" : [ ]
  }, {
    "name" : "mProviderFriendlyName",
    "type" : "String",
    "comment" : "\n     * Name of Passpoint credential provider\n     ",
    "links" : [ ]
  }, {
    "name" : "mRequestingPackageName",
    "type" : "String",
    "comment" : "\n     * If connected to a network suggestion or specifier, store the package name of the app,\n     * else null.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubscriptionId",
    "type" : "int",
    "comment" : "\n     * Identify which Telephony subscription provides this network.\n     ",
    "links" : [ ]
  }, {
    "name" : "txBad",
    "type" : "long",
    "comment" : "\n     * Running total count of lost (not ACKed) transmitted unicast data packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "txRetries",
    "type" : "long",
    "comment" : "\n     * Running total count of transmitted unicast data retry packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "txSuccess",
    "type" : "long",
    "comment" : "\n     * Running total count of successfully transmitted (ACKed) unicast data packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "rxSuccess",
    "type" : "long",
    "comment" : "\n     * Running total count of received unicast data packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLostTxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApTidToLinkMappingNegotiationSupported",
    "type" : "boolean",
    "comment" : "\n     * TID-to-link mapping negotiation support by the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTxRetriedTxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuccessfulTxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuccessfulRxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "score",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mIsUsable",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mMeteredHint",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating that AP has hinted that upstream connection is metered,\n     * and sensitive to heavy data transfers.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPasspointUniqueId",
    "type" : "String",
    "comment" : "\n     * Passpoint unique key\n     ",
    "links" : [ ]
  }, {
    "name" : "mInformationElements",
    "type" : "List<ScanResult.InformationElement>",
    "comment" : "\n     * information elements found in the beacon of the connected bssid.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsPrimary",
    "type" : "int",
    "comment" : "\n     * @see #isPrimary()\n     * The field is stored as an int since is a tristate internally -  true, false, no permission.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNetworkKey",
    "type" : "String",
    "comment" : "\n     * Key of the current network.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVendorData",
    "type" : "List<OuiKeyedData>",
    "comment" : " List of {@link OuiKeyedData} providing vendor-specific configuration data. ",
    "links" : [ "android.net.wifi.OuiKeyedData" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiInfo>",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public double getLostTxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of lost transmitted packets, in units of packets per second. In case of Multi\n     * Link Operation (MLO), returned value is the average rate of lost transmitted packets on all\n     * associated links.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLostTxPacketsPerSecond(double lostTxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public double getRetriedTxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of transmitted retry packets, in units of packets per second. In case Multi Link\n     * Operation (MLO), the returned value is the average rate of transmitted retry packets on all\n     * associated links.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRetriedTxPacketsRate(double txRetriedTxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public double getSuccessfulTxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of successfully transmitted unicast packets, in units of packets per second. In\n     * case Multi Link Operation (MLO), returned value is the average rate of successfully\n     * transmitted unicast packets on all associated links.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSuccessfulTxPacketsPerSecond(double successfulTxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public double getSuccessfulRxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of received unicast data packets, in units of packets per second. In case of\n     * Multi Link Operation (MLO), the returned value is the average rate of received unicast data\n     * packets on all associated links.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSuccessfulRxPacketsPerSecond(double successfulRxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getScore()",
    "returnType" : "int",
    "comment" : "\n     * The current Wifi score.\n     * NOTE: this value should only be used for debugging purposes. Do not rely on this value for\n     * any computations. The meaning of this value can and will change at any time without warning.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScore(int score)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUsable()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setUsable(boolean isUsable)",
    "returnType" : "void",
    "comment" : "\n     * This could be set to false by the external scorer when the network quality is bad.\n     * The wifi module could use this information in network selection.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void resetMultiLinkInfo()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setSSID(WifiSsid wifiSsid)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getSSID()",
    "returnType" : "String",
    "comment" : "\n     * Returns the service set identifier (SSID) of the current 802.11 network.\n     * <p>\n     * If the SSID can be decoded as UTF-8, it will be returned surrounded by double\n     * quotation marks. Otherwise, it is returned as a string of hex digits.\n     * The SSID may be {@link WifiManager#UNKNOWN_SSID}, if there is no network currently connected\n     * or if the caller has insufficient permissions to access the SSID.\n     * </p>\n     * <p>\n     * Prior to {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}, this method\n     * always returned the SSID with no quotes around it.\n     * </p>\n     *\n     * @return the SSID.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "android.net.wifi.WifiManager#UNKNOWN_SSID" ]
  }, {
    "name" : "public WifiSsid getWifiSsid()",
    "returnType" : "WifiSsid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setBSSID(String BSSID)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setApMldMacAddress(@Nullable MacAddress address)",
    "returnType" : "void",
    "comment" : "\n     * Set the access point Multi-Link Device (MLD) MAC Address.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setApMloLinkId(int linkId)",
    "returnType" : "void",
    "comment" : "\n     * Set the access point Multi-Link Operation (MLO) link-id\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void mapAffiliatedMloLinks()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAffiliatedMloLinks(@NonNull List<MloLink> links)",
    "returnType" : "void",
    "comment" : "\n     * Set the Multi-Link Operation (MLO) affiliated Links.\n     * Only applicable for Wi-Fi 7 access points.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean updateMloLinkStaAddress(int linkId, MacAddress macAddress)",
    "returnType" : "boolean",
    "comment" : "\n     * Update the MLO link STA MAC Address\n     *\n     * @param linkId for the link to be updated.\n     * @param macAddress value to be set in the link.\n     *\n     * @return true on success, false on failure\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean updateMloLinkState(int linkId, @MloLink.MloLinkState int state)",
    "returnType" : "boolean",
    "comment" : "\n     * Update the MLO link State\n     *\n     * @param linkId for the link to be updated.\n     * @param state value to be set in the link as one of {@link MloLink.MloLinkState}\n     *\n     * @return true on success, false on failure\n     *\n     * @hide\n     ",
    "links" : [ "MloLink.MloLinkState" ]
  }, {
    "name" : "public String getBSSID()",
    "returnType" : "String",
    "comment" : "\n     * Return the basic service set identifier (BSSID) of the current access point. In case of\n     * Multi Link Operation (MLO), the BSSID corresponds to the BSSID of the link used for\n     * association.\n     * <p>\n     * The BSSID may be\n     * <lt>{@code null}, if there is no network currently connected.</lt>\n     * <lt>{@code \"02:00:00:00:00:00\"}, if the caller has insufficient permissions to access the\n     * BSSID.<lt>\n     * </p>\n     *\n     * @return the BSSID, in the form of a six-byte MAC address: {@code XX:XX:XX:XX:XX:XX}\n     ",
    "links" : [ ]
  }, {
    "name" : "public MacAddress getApMldMacAddress()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Return the Multi-Link Device (MLD) MAC Address for the connected access point.\n     * <p>\n     * The returned MLD MAC Address will be {@code null} in the following cases:\n     * <lt>There is no network currently connected</lt>\n     * <lt>The connected access point is not an MLD access point,\n     * i.e. {@link #getWifiStandard()} returns {@link ScanResult#WIFI_STANDARD_11BE}.</lt>\n     * <lt>The caller has insufficient permissions to access the access point MLD MAC Address.<lt>\n     * </p>\n     *\n     * @return the MLD Mac address\n     ",
    "links" : [ "#getWifiStandard()", "android.net.wifi.ScanResult#WIFI_STANDARD_11BE" ]
  }, {
    "name" : "public int getApMloLinkId()",
    "returnType" : "int",
    "comment" : "\n     * Return the access point Multi-Link Operation (MLO) link-id for Wi-Fi 7 access points.\n     * i.e. {@link #getWifiStandard()} returns {@link ScanResult#WIFI_STANDARD_11BE},\n     * otherwise return {@link MloLink#INVALID_MLO_LINK_ID}.\n     *\n     * Valid values are 0-15 as described in IEEE 802.11be Specification, section 9.4.2.295b.2.\n     *\n     * @return {@link MloLink#INVALID_MLO_LINK_ID} or a valid value (0-15).\n     ",
    "links" : [ "#getWifiStandard()", "android.net.wifi.ScanResult#WIFI_STANDARD_11BE", "android.net.wifi.MloLink#INVALID_MLO_LINK_ID" ]
  }, {
    "name" : "public List<MloLink> getAffiliatedMloLinks()",
    "returnType" : "List<MloLink>",
    "comment" : "\n     * Return the Multi-Link Operation (MLO) affiliated Links for Wi-Fi 7 access points.\n     * i.e. when {@link #getWifiStandard()} returns {@link ScanResult#WIFI_STANDARD_11BE}.\n     *\n     * Affiliated links are the links supported by the Access Point Multi Link Device (AP MLD). The\n     * Station Multi Link Device (STA MLD) gathers affiliated link information from scan results.\n     * Depending on Station's capability, it associates to all or a subset of affiliated links.\n     * <p><b>Note:</b>{@link #getAssociatedMloLinks()} returns associated links.\n     *\n     * @return List of affiliated MLO links, or an empty list if access point is not Wi-Fi 7\n     ",
    "links" : [ "#getWifiStandard()", "android.net.wifi.ScanResult#WIFI_STANDARD_11BE", "#getAssociatedMloLinks()" ]
  }, {
    "name" : "public MloLink getAffiliatedMloLink(int linkId)",
    "returnType" : "MloLink",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<MloLink> getAssociatedMloLinks()",
    "returnType" : "List<MloLink>",
    "comment" : "\n     * Return the associated Multi-Link Operation (MLO) Links for Wi-Fi 7 access points.\n     * i.e. when {@link #getWifiStandard()} returns {@link ScanResult#WIFI_STANDARD_11BE}.\n     *\n     * Affiliated links are the links supported by the Access Point Multi Link Device (AP MLD). The\n     * Station Multi Link Device (STA MLD) gathers affiliated link information from scan results.\n     * Depending on Station's capability, it associates to all or a subset of affiliated links.\n     * <p><b>Note:</b>{@link #getAffiliatedMloLinks()} returns affiliated links.\n     *\n     * @return List of associated MLO links, or an empty list if access point is not a multi-link\n     * device.\n     ",
    "links" : [ "#getWifiStandard()", "android.net.wifi.ScanResult#WIFI_STANDARD_11BE", "#getAffiliatedMloLinks()" ]
  }, {
    "name" : "public int getRssi()",
    "returnType" : "int",
    "comment" : "\n     * Returns the received signal strength indicator of the current 802.11 network, in dBm. In\n     * case of Multi Link Operation (MLO), returned RSSI is the highest of all associated links.\n     * <p>\n     * Use {@link android.net.wifi.WifiManager#calculateSignalLevel} to convert this number into\n     * an absolute signal level which can be displayed to a user.\n     * </p>\n     *\n     * @return the RSSI.\n     ",
    "links" : [ "android.net.wifi.WifiManager#calculateSignalLevel" ]
  }, {
    "name" : "public void setRssi(int rssi)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getLastRssiUpdateMillis()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWifiStandard(@WifiAnnotations.WifiStandard int wifiStandard)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Wi-Fi standard\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWifiStandard()",
    "returnType" : "int",
    "comment" : "\n     * Get connection Wi-Fi standard\n     * @return the connection Wi-Fi standard\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLinkSpeed()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current link speed in {@link #LINK_SPEED_UNITS}. In case of Multi Link Operation\n     * (MLO), returned value is the current link speed of the associated link with the highest RSSI.\n     *\n     * @return the link speed or {@link #LINK_SPEED_UNKNOWN} if link speed is unknown.\n     * @see #LINK_SPEED_UNITS\n     * @see #LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "#LINK_SPEED_UNITS", "#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public void setLinkSpeed(int linkSpeed)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getTxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current transmit link speed in Mbps. In case of Multi Link Operation (MLO),\n     * returned value is the current transmit link speed of the associated link with the highest\n     * RSSI.\n     *\n     * @return the Tx link speed or {@link #LINK_SPEED_UNKNOWN} if link speed is unknown.\n     * @see #LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public int getMaxSupportedTxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum supported transmit link speed in Mbps\n     * @return the max supported tx link speed or {@link #LINK_SPEED_UNKNOWN} if link speed is\n     * unknown. @see #LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public void setTxLinkSpeedMbps(int txLinkSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Update the last transmitted packet bit rate in Mbps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxSupportedTxLinkSpeedMbps(int maxSupportedTxLinkSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Set the maximum supported transmit link speed in Mbps\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current receive link speed in Mbps. In case of Multi Link Operation (MLO),\n     * returned value is the receive link speed of the associated link with the highest RSSI.\n     *\n     * @return the Rx link speed or {@link #LINK_SPEED_UNKNOWN} if link speed is unknown.\n     * @see #LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public int getMaxSupportedRxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum supported receive link speed in Mbps\n     * @return the max supported Rx link speed or {@link #LINK_SPEED_UNKNOWN} if link speed is\n     * unknown. @see #LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public void setRxLinkSpeedMbps(int rxLinkSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Update the last received packet bit rate in Mbps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxSupportedRxLinkSpeedMbps(int maxSupportedRxLinkSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Set the maximum supported receive link speed in Mbps\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFrequency()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current frequency in {@link #FREQUENCY_UNITS}. In case of Multi Link Operation\n     * (MLO), returned value is the frequency of the associated link with the highest RSSI.\n     *\n     * @return the frequency.\n     * @see #FREQUENCY_UNITS\n     ",
    "links" : [ "#FREQUENCY_UNITS" ]
  }, {
    "name" : "public void setFrequency(int frequency)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean is24GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is5GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is6GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMacAddress(String macAddress)",
    "returnType" : "void",
    "comment" : "\n     * Record the MAC address of the WLAN interface\n     * @param macAddress the MAC address in {@code XX:XX:XX:XX:XX:XX} form\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMacAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the MAC address used for this connection. In case of Multi Link Operation (MLO),\n     * returned value is the Station MLD MAC address.\n     *\n     * @return MAC address of the connection or {@code \"02:00:00:00:00:00\"} if the caller has\n     * insufficient permission.\n     *\n     * Requires {@code android.Manifest.permission#LOCAL_MAC_ADDRESS} and\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION}.\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "public boolean hasRealMacAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if {@link #getMacAddress()} has a real MAC address.\n     *\n     * @hide\n     ",
    "links" : [ "#getMacAddress()" ]
  }, {
    "name" : "public void setMeteredHint(boolean meteredHint)",
    "returnType" : "void",
    "comment" : "\n     * Indicates if we've dynamically detected this active network connection as\n     * being metered.\n     *\n     * @see WifiConfiguration#isMetered(WifiConfiguration, WifiInfo)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getMeteredHint()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setEphemeral(boolean ephemeral)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEphemeral()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the current Wifi network is ephemeral, false otherwise.\n     * An ephemeral network is a network that is temporary and not persisted in the system.\n     * Ephemeral networks cannot be forgotten, only disabled with\n     * {@link WifiManager#disableEphemeralNetwork(String)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiManager#disableEphemeralNetwork(String)" ]
  }, {
    "name" : "public void setTrusted(boolean trusted)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTrusted()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the current Wifi network is a trusted network, false otherwise.\n     * @see WifiNetworkSuggestion.Builder#setUntrusted(boolean).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRestricted(boolean restricted)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRestricted()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the current Wifi network is a restricted network, false otherwise.\n     * A restricted network has its {@link NetworkCapabilities#NET_CAPABILITY_NOT_RESTRICTED}\n     * capability removed.\n     * @see WifiNetworkSuggestion.Builder#setRestricted(boolean).\n     ",
    "links" : [ "android.net.NetworkCapabilities#NET_CAPABILITY_NOT_RESTRICTED" ]
  }, {
    "name" : "public void setOemPaid(boolean oemPaid)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOemPaid()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the current Wifi network is an oem paid network, false otherwise.\n     * @see WifiNetworkSuggestion.Builder#setOemPaid(boolean).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOemPrivate(boolean oemPrivate)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOemPrivate()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the current Wifi network is an oem private network, false otherwise.\n     * @see WifiNetworkSuggestion.Builder#setOemPrivate(boolean).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCarrierMerged(boolean carrierMerged)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCarrierMerged()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the current Wifi network is a carrier merged network, false otherwise.\n     * @see WifiNetworkSuggestion.Builder#setCarrierMerged(boolean).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOsuAp(boolean osuAp)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOsuAp()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPasspointAp()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setFQDN(@Nullable String fqdn)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getPasspointFqdn()",
    "returnType" : "String",
    "comment" : "\n     * Returns the Fully Qualified Domain Name of the network if it is a Passpoint network.\n     * <p>\n     * The FQDN may be\n     * <lt>{@code null} if no network currently connected, currently connected network is not\n     * passpoint network or the caller has insufficient permissions to access the FQDN.</lt>\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProviderFriendlyName(@Nullable String providerFriendlyName)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getPasspointProviderFriendlyName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the Provider Friendly Name of the network if it is a Passpoint network.\n     * <p>\n     * The Provider Friendly Name may be\n     * <lt>{@code null} if no network currently connected, currently connected network is not\n     * passpoint network or the caller has insufficient permissions to access the Provider Friendly\n     * Name. </lt>\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRequestingPackageName(@Nullable String packageName)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getRequestingPackageName()",
    "returnType" : "String",
    "comment" : "\n     * If this network was created in response to an app request (e.g. through Network Suggestion\n     * or Network Specifier), return the package name of the app that made the request.\n     * Null otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubscriptionId(int subId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getSubscriptionId()",
    "returnType" : "int",
    "comment" : "\n     * If this network is provisioned by a carrier, returns subscription Id corresponding to the\n     * associated SIM on the device. If this network is not provisioned by a carrier, returns\n     * {@link android.telephony.SubscriptionManager#INVALID_SUBSCRIPTION_ID}\n     *\n     * @see WifiNetworkSuggestion.Builder#setSubscriptionId(int)\n     * @see android.telephony.SubscriptionInfo#getSubscriptionId()\n     ",
    "links" : [ "android.telephony.SubscriptionManager#INVALID_SUBSCRIPTION_ID" ]
  }, {
    "name" : "public void setNetworkId(int id)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkId()",
    "returnType" : "int",
    "comment" : "\n     * Each configured network has a unique small integer ID, used to identify\n     * the network. This method returns the ID for the currently connected network.\n     * <p>\n     * The networkId may be {@code -1} if there is no currently connected network or if the caller\n     * has insufficient permissions to access the network ID.\n     * </p>\n     *\n     * @return the network ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SupplicantState getSupplicantState()",
    "returnType" : "SupplicantState",
    "comment" : "\n     * Return the detailed state of the supplicant's negotiation with an\n     * access point, in the form of a {@link SupplicantState SupplicantState} object.\n     * @return the current {@link SupplicantState SupplicantState}\n     ",
    "links" : [ "android.net.wifi.SupplicantState" ]
  }, {
    "name" : "public void setSupplicantState(SupplicantState state)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setInetAddress(InetAddress address)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getIpAddress()",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Use the methods on {@link android.net.LinkProperties} which can be obtained\n     * either via {@link NetworkCallback#onLinkPropertiesChanged(Network, LinkProperties)} or\n     * {@link ConnectivityManager#getLinkProperties(Network)}.\n     ",
    "links" : [ "android.net.ConnectivityManager.NetworkCallback#onLinkPropertiesChanged(Network", "android.net.LinkProperties", "android.net.ConnectivityManager#getLinkProperties(Network)" ]
  }, {
    "name" : "public boolean getHiddenSSID()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if this network does not broadcast its SSID, so an\n     * SSID-specific probe request must be used for scans.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHiddenSSID(boolean isHiddenSsid)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not this network is using a hidden SSID. This value should be set from the\n     * corresponding {@link WifiConfiguration} of the network.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration" ]
  }, {
    "name" : "public static DetailedState getDetailedStateOf(SupplicantState suppState)",
    "returnType" : "DetailedState",
    "comment" : "\n     * Map a supplicant state into a fine-grained network connectivity state.\n     * @param suppState the supplicant state\n     * @return the corresponding {@link DetailedState}\n     ",
    "links" : [ "android.net.NetworkInfo.DetailedState" ]
  }, {
    "name" : " void setSupplicantState(String stateName)",
    "returnType" : "void",
    "comment" : "\n     * Set the <code>SupplicantState</code> from the string name\n     * of the state.\n     * @param stateName the name of the state, as a <code>String</code> returned\n     * in an event sent by {@code wpa_supplicant}.\n     ",
    "links" : [ ]
  }, {
    "name" : " static SupplicantState valueOf(String stateName)",
    "returnType" : "SupplicantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String sanitizeSsid(@Nullable String string)",
    "returnType" : "String",
    "comment" : "\n     * Remove double quotes (\") surrounding a SSID string, if present. Otherwise, return the\n     * string unmodified. Return null if the input string was null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String removeDoubleQuotes(@Nullable String string)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldRedactLocationSensitiveFields(long redactions)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldRedactLocalMacAddressFields(long redactions)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldRedactNetworkSettingsFields(long redactions)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setPasspointUniqueId(@Nullable String passpointUniqueId)",
    "returnType" : "void",
    "comment" : "\n     * Set the Passpoint unique identifier for the current connection\n     *\n     * @param passpointUniqueId Unique identifier\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPasspointUniqueId()",
    "returnType" : "String",
    "comment" : "\n     * Get the Passpoint unique identifier for the current connection\n     *\n     * @return Passpoint unique identifier, or null if this connection is not Passpoint.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInformationElements(@Nullable List<ScanResult.InformationElement> infoElements)",
    "returnType" : "void",
    "comment" : "\n     * Set the information elements found in the becaon of the connected bssid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ScanResult.InformationElement> getInformationElements()",
    "returnType" : "List<ScanResult.InformationElement>",
    "comment" : "\n     * Get all information elements found in the beacon of the connected bssid.\n     * <p>\n     * The information elements will be {@code null} if there is no network currently connected or\n     * if the caller has insufficient permissions to access the info elements.\n     * </p>\n     *\n     * @return List of information elements {@link ScanResult.InformationElement} or null.\n     ",
    "links" : [ "ScanResult.InformationElement" ]
  }, {
    "name" : "public void setIsPrimary(boolean isPrimary)",
    "returnType" : "void",
    "comment" : "\n     * @see #isPrimary()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPrimary()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this is the primary wifi connection or not.\n     *\n     * Wifi service considers this connection to be the best among all Wifi connections, and this\n     * connection should be the one surfaced to the user if only one can be displayed.\n     *\n     * Note that the default route (chosen by Connectivity Service) may not correspond to the\n     * primary Wifi connection e.g. when there exists a better cellular network, or if the\n     * primary Wifi connection doesn't have internet access.\n     *\n     * @return whether this is the primary connection or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private List<MloLink> getSortedMloLinkList(List<MloLink> list)",
    "returnType" : "List<MloLink>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WifiInfo makeCopy(long redactions)",
    "returnType" : "WifiInfo",
    "comment" : "\n     * Create a copy of a {@link WifiInfo} with some fields redacted based on the permissions\n     * held by the receiving app.\n     *\n     * @param redactions bitmask of redactions that needs to be performed on this instance.\n     * @return Copy of this instance with the necessary redactions.\n     ",
    "links" : [ "android.net.wifi.WifiInfo" ]
  }, {
    "name" : "public long getApplicableRedactions()",
    "returnType" : "long",
    "comment" : "\n     * Returns a bitmask of all the applicable redactions (based on the permissions held by the\n     * receiving app) to be performed on this TransportInfo.\n     *\n     * @return bitmask of redactions applicable on this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentSecurityType(@WifiConfiguration.SecurityType int securityType)",
    "returnType" : "void",
    "comment" : "\n     * Set the security type of the current connection\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearCurrentSecurityType()",
    "returnType" : "void",
    "comment" : "\n     * Clear the last set security type\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentSecurityType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the security type of the current 802.11 network connection.\n     *\n     * @return the security type, or {@link #SECURITY_TYPE_UNKNOWN} if not currently connected.\n     ",
    "links" : [ "#SECURITY_TYPE_UNKNOWN" ]
  }, {
    "name" : "public static int convertWifiConfigurationSecurityType(@WifiConfiguration.SecurityType int wifiConfigSecurity)",
    "returnType" : "int",
    "comment" : "\n     * Converts the WifiConfiguration.SecurityType to a WifiInfo.SecurityType\n     * @param wifiConfigSecurity WifiConfiguration.SecurityType to convert\n     * @return security type as a WifiInfo.SecurityType\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int convertSecurityTypeToDpmWifiSecurity(@WifiAnnotations.SecurityType int securityType)",
    "returnType" : "int",
    "comment" : "\n     * Utility method to convert WifiInfo.SecurityType to DevicePolicyManager.WifiSecurity\n     * @param securityType WifiInfo.SecurityType to convert\n     * @return DevicePolicyManager.WifiSecurity security level, or\n     * {@link #DPM_SECURITY_TYPE_UNKNOWN} for unknown security types\n     * @hide\n     ",
    "links" : [ "#DPM_SECURITY_TYPE_UNKNOWN" ]
  }, {
    "name" : "public void setNetworkKey(@NonNull String currentNetworkKey)",
    "returnType" : "void",
    "comment" : "\n     * Set the network key for the current Wi-Fi network.\n     *\n     * Now we are using this identity to be a key when storing Wi-Fi data usage data.\n     * See: {@link WifiConfiguration#getNetworkKeyFromSecurityType(int)}.\n     *\n     * @param currentNetworkKey the network key of the current Wi-Fi network.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration#getNetworkKeyFromSecurityType(int)" ]
  }, {
    "name" : "public String getNetworkKey()",
    "returnType" : "String",
    "comment" : "\n     * Returns the network key of the current Wi-Fi network.\n     *\n     * The network key may be {@code null}, if there is no network currently connected\n     * or if the caller has insufficient permissions to access the network key.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isApTidToLinkMappingNegotiationSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * TID-to-Link mapping negotiation is an optional feature. This API returns whether the feature\n     * is supported by the AP.\n     *\n     * @return Return true if TID-to-Link mapping negotiation is supported by the AP, otherwise\n     * false.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableApTidToLinkMappingNegotiationSupport(boolean enable)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<OuiKeyedData> getVendorData()",
    "returnType" : "List<OuiKeyedData>",
    "comment" : "\n     * Return the vendor-provided configuration data, if it exists. See also {@link\n     * #setVendorData(List)}\n     *\n     * @return Vendor configuration data, or empty list if it does not exist.\n     * @hide\n     ",
    "links" : [ "#setVendorData(List)" ]
  }, {
    "name" : "public void setVendorData(@NonNull List<OuiKeyedData> vendorData)",
    "returnType" : "void",
    "comment" : "\n     * Set additional vendor-provided configuration data.\n     *\n     * @param vendorData List of {@link OuiKeyedData} containing the vendor-provided\n     *     configuration data. Note that multiple elements with the same OUI are allowed.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.OuiKeyedData" ]
  } ],
  "methodNames" : [ "public double getLostTxPacketsPerSecond()", "public void setLostTxPacketsPerSecond(double lostTxPacketsPerSecond)", "public double getRetriedTxPacketsPerSecond()", "public void setRetriedTxPacketsRate(double txRetriedTxPacketsPerSecond)", "public double getSuccessfulTxPacketsPerSecond()", "public void setSuccessfulTxPacketsPerSecond(double successfulTxPacketsPerSecond)", "public double getSuccessfulRxPacketsPerSecond()", "public void setSuccessfulRxPacketsPerSecond(double successfulRxPacketsPerSecond)", "public int getScore()", "public void setScore(int score)", "public boolean isUsable()", "public void setUsable(boolean isUsable)", "public void reset()", "public void resetMultiLinkInfo()", "public void setSSID(WifiSsid wifiSsid)", "public String getSSID()", "public WifiSsid getWifiSsid()", "public void setBSSID(String BSSID)", "public void setApMldMacAddress(@Nullable MacAddress address)", "public void setApMloLinkId(int linkId)", "private void mapAffiliatedMloLinks()", "public void setAffiliatedMloLinks(@NonNull List<MloLink> links)", "public boolean updateMloLinkStaAddress(int linkId, MacAddress macAddress)", "public boolean updateMloLinkState(int linkId, @MloLink.MloLinkState int state)", "public String getBSSID()", "public MacAddress getApMldMacAddress()", "public int getApMloLinkId()", "public List<MloLink> getAffiliatedMloLinks()", "public MloLink getAffiliatedMloLink(int linkId)", "public List<MloLink> getAssociatedMloLinks()", "public int getRssi()", "public void setRssi(int rssi)", "public long getLastRssiUpdateMillis()", "public void setWifiStandard(@WifiAnnotations.WifiStandard int wifiStandard)", "public int getWifiStandard()", "public int getLinkSpeed()", "public void setLinkSpeed(int linkSpeed)", "public int getTxLinkSpeedMbps()", "public int getMaxSupportedTxLinkSpeedMbps()", "public void setTxLinkSpeedMbps(int txLinkSpeed)", "public void setMaxSupportedTxLinkSpeedMbps(int maxSupportedTxLinkSpeed)", "public int getRxLinkSpeedMbps()", "public int getMaxSupportedRxLinkSpeedMbps()", "public void setRxLinkSpeedMbps(int rxLinkSpeed)", "public void setMaxSupportedRxLinkSpeedMbps(int maxSupportedRxLinkSpeed)", "public int getFrequency()", "public void setFrequency(int frequency)", "public boolean is24GHz()", "public boolean is5GHz()", "public boolean is6GHz()", "public void setMacAddress(String macAddress)", "public String getMacAddress()", "public boolean hasRealMacAddress()", "public void setMeteredHint(boolean meteredHint)", "public boolean getMeteredHint()", "public void setEphemeral(boolean ephemeral)", "public boolean isEphemeral()", "public void setTrusted(boolean trusted)", "public boolean isTrusted()", "public void setRestricted(boolean restricted)", "public boolean isRestricted()", "public void setOemPaid(boolean oemPaid)", "public boolean isOemPaid()", "public void setOemPrivate(boolean oemPrivate)", "public boolean isOemPrivate()", "public void setCarrierMerged(boolean carrierMerged)", "public boolean isCarrierMerged()", "public void setOsuAp(boolean osuAp)", "public boolean isOsuAp()", "public boolean isPasspointAp()", "public void setFQDN(@Nullable String fqdn)", "public String getPasspointFqdn()", "public void setProviderFriendlyName(@Nullable String providerFriendlyName)", "public String getPasspointProviderFriendlyName()", "public void setRequestingPackageName(@Nullable String packageName)", "public String getRequestingPackageName()", "public void setSubscriptionId(int subId)", "public int getSubscriptionId()", "public void setNetworkId(int id)", "public int getNetworkId()", "public SupplicantState getSupplicantState()", "public void setSupplicantState(SupplicantState state)", "public void setInetAddress(InetAddress address)", "public int getIpAddress()", "public boolean getHiddenSSID()", "public void setHiddenSSID(boolean isHiddenSsid)", "public static DetailedState getDetailedStateOf(SupplicantState suppState)", " void setSupplicantState(String stateName)", " static SupplicantState valueOf(String stateName)", "public static String sanitizeSsid(@Nullable String string)", "public static String removeDoubleQuotes(@Nullable String string)", "public String toString()", "public int describeContents()", "private boolean shouldRedactLocationSensitiveFields(long redactions)", "private boolean shouldRedactLocalMacAddressFields(long redactions)", "private boolean shouldRedactNetworkSettingsFields(long redactions)", "public void writeToParcel(Parcel dest, int flags)", "public void setPasspointUniqueId(@Nullable String passpointUniqueId)", "public String getPasspointUniqueId()", "public void setInformationElements(@Nullable List<ScanResult.InformationElement> infoElements)", "public List<ScanResult.InformationElement> getInformationElements()", "public void setIsPrimary(boolean isPrimary)", "public boolean isPrimary()", "private List<MloLink> getSortedMloLinkList(List<MloLink> list)", "public boolean equals(Object that)", "public int hashCode()", "public WifiInfo makeCopy(long redactions)", "public long getApplicableRedactions()", "public void setCurrentSecurityType(@WifiConfiguration.SecurityType int securityType)", "public void clearCurrentSecurityType()", "public int getCurrentSecurityType()", "public static int convertWifiConfigurationSecurityType(@WifiConfiguration.SecurityType int wifiConfigSecurity)", "public static int convertSecurityTypeToDpmWifiSecurity(@WifiAnnotations.SecurityType int securityType)", "public void setNetworkKey(@NonNull String currentNetworkKey)", "public String getNetworkKey()", "public boolean isApTidToLinkMappingNegotiationSupported()", "public void enableApTidToLinkMappingNegotiationSupport(boolean enable)", "public List<OuiKeyedData> getVendorData()", "public void setVendorData(@NonNull List<OuiKeyedData> vendorData)" ],
  "variableNames" : [ "TAG", "stateMap", "DEFAULT_MAC_ADDRESS", "mSupplicantState", "mBSSID", "mWifiSsid", "mIsHiddenSsid", "mNetworkId", "mSecurityType", "mApMldMacAddress", "mApMloLinkId", "mAffiliatedMloLinksMap", "mAffiliatedMloLinks", "INVALID_RSSI", "UNKNOWN_FREQUENCY", "MIN_RSSI", "MAX_RSSI", "SECURITY_TYPE_UNKNOWN", "SECURITY_TYPE_OPEN", "SECURITY_TYPE_WEP", "SECURITY_TYPE_PSK", "SECURITY_TYPE_EAP", "SECURITY_TYPE_SAE", "SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT", "SECURITY_TYPE_OWE", "SECURITY_TYPE_WAPI_PSK", "SECURITY_TYPE_WAPI_CERT", "SECURITY_TYPE_EAP_WPA3_ENTERPRISE", "SECURITY_TYPE_OSEN", "SECURITY_TYPE_PASSPOINT_R1_R2", "SECURITY_TYPE_PASSPOINT_R3", "SECURITY_TYPE_DPP", "DPM_SECURITY_TYPE_UNKNOWN", "IS_PRIMARY_NO_PERMISSION", "IS_PRIMARY_FALSE", "IS_PRIMARY_TRUE", "mRssi", "mLastRssiUpdateMillis", "mWifiStandard", "LINK_SPEED_UNITS", "mLinkSpeed", "LINK_SPEED_UNKNOWN", "mTxLinkSpeed", "mMaxSupportedTxLinkSpeed", "mRxLinkSpeed", "mMaxSupportedRxLinkSpeed", "FREQUENCY_UNITS", "mFrequency", "mIpAddress", "mMacAddress", "mEphemeral", "mTrusted", "mRestricted", "mOemPaid", "mOemPrivate", "mCarrierMerged", "mOsuAp", "mFqdn", "mProviderFriendlyName", "mRequestingPackageName", "mSubscriptionId", "txBad", "txRetries", "txSuccess", "rxSuccess", "mLostTxPacketsPerSecond", "mApTidToLinkMappingNegotiationSupported", "mTxRetriedTxPacketsPerSecond", "mSuccessfulTxPacketsPerSecond", "mSuccessfulRxPacketsPerSecond", "score", "mIsUsable", "mMeteredHint", "mPasspointUniqueId", "mInformationElements", "mIsPrimary", "mNetworkKey", "mVendorData", "CREATOR" ]
}