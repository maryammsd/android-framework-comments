{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/WifiInfo.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiInfo",
  "comment" : "\n * Describes the state of any Wi-Fi connection that is active or\n * is in the process of being set up.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "stateMap",
    "type" : "EnumMap<SupplicantState, DetailedState>",
    "comment" : "\n     * This is the map described in the Javadoc comment above. The positions\n     * of the elements of the array must correspond to the ordinal values\n     * of <code>DetailedState</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAC_ADDRESS",
    "type" : "String",
    "comment" : "\n     * Default MAC address reported to a client that does not have the\n     * android.permission.LOCAL_MAC_ADDRESS permission.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mSupplicantState",
    "type" : "SupplicantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBSSID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWifiSsid",
    "type" : "WifiSsid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_RSSI",
    "type" : "int",
    "comment" : "\n     * Used to indicate that the RSSI is invalid, for example if no RSSI measurements are available\n     * yet.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_RSSI",
    "type" : "int",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "MAX_RSSI",
    "type" : "int",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "mRssi",
    "type" : "int",
    "comment" : "\n     * Received Signal Strength Indicator\n     ",
    "links" : [ ]
  }, {
    "name" : "mWifiStandard",
    "type" : "int",
    "comment" : "\n     * Wi-Fi standard for the connection\n     ",
    "links" : [ ]
  }, {
    "name" : "LINK_SPEED_UNITS",
    "type" : "String",
    "comment" : "\n     * The unit in which links speeds are expressed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLinkSpeed",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LINK_SPEED_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Constant for unknown link speed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTxLinkSpeed",
    "type" : "int",
    "comment" : "\n     * Tx(transmit) Link speed in Mbps\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxSupportedTxLinkSpeed",
    "type" : "int",
    "comment" : "\n     * Max supported Tx(transmit) link speed in Mbps\n     ",
    "links" : [ ]
  }, {
    "name" : "mRxLinkSpeed",
    "type" : "int",
    "comment" : "\n     * Rx(receive) Link speed in Mbps\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxSupportedRxLinkSpeed",
    "type" : "int",
    "comment" : "\n     * Max supported Rx(receive) link speed in Mbps\n     ",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_UNITS",
    "type" : "String",
    "comment" : "\n     * Frequency in MHz\n     ",
    "links" : [ ]
  }, {
    "name" : "mFrequency",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIpAddress",
    "type" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMacAddress",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEphemeral",
    "type" : "boolean",
    "comment" : "\n     * Whether the network is ephemeral or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTrusted",
    "type" : "boolean",
    "comment" : "\n     * Whether the network is trusted or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOsuAp",
    "type" : "boolean",
    "comment" : "\n     * OSU (Online Sign Up) AP for Passpoint R2.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFqdn",
    "type" : "String",
    "comment" : "\n     * Fully qualified domain name of a Passpoint configuration\n     ",
    "links" : [ ]
  }, {
    "name" : "mProviderFriendlyName",
    "type" : "String",
    "comment" : "\n     * Name of Passpoint credential provider\n     ",
    "links" : [ ]
  }, {
    "name" : "mRequestingPackageName",
    "type" : "String",
    "comment" : "\n     * If connected to a network suggestion or specifier, store the package name of the app,\n     * else null.\n     ",
    "links" : [ ]
  }, {
    "name" : "txBad",
    "type" : "long",
    "comment" : "\n     * Running total count of lost (not ACKed) transmitted unicast data packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "txRetries",
    "type" : "long",
    "comment" : "\n     * Running total count of transmitted unicast data retry packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "txSuccess",
    "type" : "long",
    "comment" : "\n     * Running total count of successfully transmitted (ACKed) unicast data packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "rxSuccess",
    "type" : "long",
    "comment" : "\n     * Running total count of received unicast data packets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLostTxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTxRetriedTxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuccessfulTxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuccessfulRxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "score",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mMeteredHint",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating that AP has hinted that upstream connection is metered,\n     * and sensitive to heavy data transfers.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPasspointUniqueId",
    "type" : "String",
    "comment" : "\n     * Passpoint unique key\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiInfo>",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public double getLostTxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of lost transmitted packets, in units of packets per second.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLostTxPacketsPerSecond(double lostTxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public double getRetriedTxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of transmitted retry packets, in units of packets per second.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRetriedTxPacketsRate(double txRetriedTxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public double getSuccessfulTxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of successfully transmitted unicast packets, in units of packets per second.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSuccessfulTxPacketsPerSecond(double successfulTxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public double getSuccessfulRxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of received unicast data packets, in units of packets per second.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSuccessfulRxPacketsPerSecond(double successfulRxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getScore()",
    "returnType" : "int",
    "comment" : "\n     * The current Wifi score.\n     * NOTE: this value should only be used for debugging purposes. Do not rely on this value for\n     * any computations. The meaning of this value can and will change at any time without warning.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScore(int score)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setSSID(WifiSsid wifiSsid)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getSSID()",
    "returnType" : "String",
    "comment" : "\n     * Returns the service set identifier (SSID) of the current 802.11 network.\n     * <p>\n     * If the SSID can be decoded as UTF-8, it will be returned surrounded by double\n     * quotation marks. Otherwise, it is returned as a string of hex digits.\n     * The SSID may be {@link WifiManager#UNKNOWN_SSID}, if there is no network currently connected\n     * or if the caller has insufficient permissions to access the SSID.\n     * </p>\n     * <p>\n     * Prior to {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}, this method\n     * always returned the SSID with no quotes around it.\n     * </p>\n     *\n     * @return the SSID.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "android.net.wifi.WifiManager#UNKNOWN_SSID" ]
  }, {
    "name" : "public WifiSsid getWifiSsid()",
    "returnType" : "WifiSsid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setBSSID(String BSSID)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getBSSID()",
    "returnType" : "String",
    "comment" : "\n     * Return the basic service set identifier (BSSID) of the current access point.\n     * <p>\n     * The BSSID may be\n     * <lt>{@code null}, if there is no network currently connected.</lt>\n     * <lt>{@code \"02:00:00:00:00:00\"}, if the caller has insufficient permissions to access the\n     * BSSID.<lt>\n     * </p>\n     *\n     * @return the BSSID, in the form of a six-byte MAC address: {@code XX:XX:XX:XX:XX:XX}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRssi()",
    "returnType" : "int",
    "comment" : "\n     * Returns the received signal strength indicator of the current 802.11\n     * network, in dBm.\n     *\n     * <p>Use {@link android.net.wifi.WifiManager#calculateSignalLevel} to convert this number into\n     * an absolute signal level which can be displayed to a user.\n     *\n     * @return the RSSI.\n     ",
    "links" : [ "android.net.wifi.WifiManager#calculateSignalLevel" ]
  }, {
    "name" : "public void setRssi(int rssi)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setWifiStandard(@WifiAnnotations.WifiStandard int wifiStandard)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Wi-Fi standard\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWifiStandard()",
    "returnType" : "int",
    "comment" : "\n     * Get connection Wi-Fi standard\n     * @return the connection Wi-Fi standard\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLinkSpeed()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current link speed in {@link #LINK_SPEED_UNITS}.\n     * @return the link speed or {@link #LINK_SPEED_UNKNOWN} if link speed is unknown.\n     * @see #LINK_SPEED_UNITS\n     * @see #LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "#LINK_SPEED_UNITS", "#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public void setLinkSpeed(int linkSpeed)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getTxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current transmit link speed in Mbps.\n     * @return the Tx link speed or {@link #LINK_SPEED_UNKNOWN} if link speed is unknown.\n     * @see #LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public int getMaxSupportedTxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum supported transmit link speed in Mbps\n     * @return the max supported tx link speed or {@link #LINK_SPEED_UNKNOWN} if link speed is\n     * unknown. @see #LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public void setTxLinkSpeedMbps(int txLinkSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Update the last transmitted packet bit rate in Mbps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxSupportedTxLinkSpeedMbps(int maxSupportedTxLinkSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Set the maximum supported transmit link speed in Mbps\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current receive link speed in Mbps.\n     * @return the Rx link speed or {@link #LINK_SPEED_UNKNOWN} if link speed is unknown.\n     * @see #LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public int getMaxSupportedRxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum supported receive link speed in Mbps\n     * @return the max supported Rx link speed or {@link #LINK_SPEED_UNKNOWN} if link speed is\n     * unknown. @see #LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public void setRxLinkSpeedMbps(int rxLinkSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Update the last received packet bit rate in Mbps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxSupportedRxLinkSpeedMbps(int maxSupportedRxLinkSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Set the maximum supported receive link speed in Mbps\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFrequency()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current frequency in {@link #FREQUENCY_UNITS}.\n     * @return the frequency.\n     * @see #FREQUENCY_UNITS\n     ",
    "links" : [ "#FREQUENCY_UNITS" ]
  }, {
    "name" : "public void setFrequency(int frequency)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean is24GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is5GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is6GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMacAddress(String macAddress)",
    "returnType" : "void",
    "comment" : "\n     * Record the MAC address of the WLAN interface\n     * @param macAddress the MAC address in {@code XX:XX:XX:XX:XX:XX} form\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMacAddress()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasRealMacAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if {@link #getMacAddress()} has a real MAC address.\n     *\n     * @hide\n     ",
    "links" : [ "#getMacAddress()" ]
  }, {
    "name" : "public void setMeteredHint(boolean meteredHint)",
    "returnType" : "void",
    "comment" : "\n     * Indicates if we've dynamically detected this active network connection as\n     * being metered.\n     *\n     * @see WifiConfiguration#isMetered(WifiConfiguration, WifiInfo)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getMeteredHint()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setEphemeral(boolean ephemeral)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEphemeral()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the current Wifi network is ephemeral, false otherwise.\n     * An ephemeral network is a network that is temporary and not persisted in the system.\n     * Ephemeral networks cannot be forgotten, only disabled with\n     * {@link WifiManager#disableEphemeralNetwork(String)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiManager#disableEphemeralNetwork(String)" ]
  }, {
    "name" : "public void setTrusted(boolean trusted)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTrusted()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setOsuAp(boolean osuAp)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOsuAp()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPasspointAp()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setFQDN(@Nullable String fqdn)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getPasspointFqdn()",
    "returnType" : "String",
    "comment" : "\n     * Returns the Fully Qualified Domain Name of the network if it is a Passpoint network.\n     * <p>\n     * The FQDN may be\n     * <lt>{@code null} if no network currently connected, currently connected network is not\n     * passpoint network or the caller has insufficient permissions to access the FQDN.</lt>\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProviderFriendlyName(@Nullable String providerFriendlyName)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getPasspointProviderFriendlyName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the Provider Friendly Name of the network if it is a Passpoint network.\n     * <p>\n     * The Provider Friendly Name may be\n     * <lt>{@code null} if no network currently connected, currently connected network is not\n     * passpoint network or the caller has insufficient permissions to access the Provider Friendly\n     * Name. </lt>\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRequestingPackageName(@Nullable String packageName)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getRequestingPackageName()",
    "returnType" : "String",
    "comment" : "\n     * If this network was created in response to an app request (e.g. through Network Suggestion\n     * or Network Specifier), return the package name of the app that made the request.\n     * Null otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNetworkId(int id)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkId()",
    "returnType" : "int",
    "comment" : "\n     * Each configured network has a unique small integer ID, used to identify\n     * the network. This method returns the ID for the currently connected network.\n     * <p>\n     * The networkId may be {@code -1} if there is no currently connected network or if the caller\n     * has insufficient permissions to access the network ID.\n     * </p>\n     *\n     * @return the network ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SupplicantState getSupplicantState()",
    "returnType" : "SupplicantState",
    "comment" : "\n     * Return the detailed state of the supplicant's negotiation with an\n     * access point, in the form of a {@link SupplicantState SupplicantState} object.\n     * @return the current {@link SupplicantState SupplicantState}\n     ",
    "links" : [ "android.net.wifi.SupplicantState" ]
  }, {
    "name" : "public void setSupplicantState(SupplicantState state)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setInetAddress(InetAddress address)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getIpAddress()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getHiddenSSID()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if this network does not broadcast its SSID, so an\n     * SSID-specific probe request must be used for scans.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DetailedState getDetailedStateOf(SupplicantState suppState)",
    "returnType" : "DetailedState",
    "comment" : "\n     * Map a supplicant state into a fine-grained network connectivity state.\n     * @param suppState the supplicant state\n     * @return the corresponding {@link DetailedState}\n     ",
    "links" : [ "android.net.NetworkInfo.DetailedState" ]
  }, {
    "name" : " void setSupplicantState(String stateName)",
    "returnType" : "void",
    "comment" : "\n     * Set the <code>SupplicantState</code> from the string name\n     * of the state.\n     * @param stateName the name of the state, as a <code>String</code> returned\n     * in an event sent by {@code wpa_supplicant}.\n     ",
    "links" : [ ]
  }, {
    "name" : " static SupplicantState valueOf(String stateName)",
    "returnType" : "SupplicantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String sanitizeSsid(@Nullable String string)",
    "returnType" : "String",
    "comment" : "\n     * Remove double quotes (\") surrounding a SSID string, if present. Otherwise, return the\n     * string unmodified. Return null if the input string was null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String removeDoubleQuotes(@Nullable String string)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setPasspointUniqueId(@Nullable String passpointUniqueId)",
    "returnType" : "void",
    "comment" : "\n     * Set the Passpoint unique identifier for the current connection\n     *\n     * @param passpointUniqueId Unique identifier\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPasspointUniqueId()",
    "returnType" : "String",
    "comment" : "\n     * Get the Passpoint unique identifier for the current connection\n     *\n     * @return Passpoint unique identifier\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "stateMap", "DEFAULT_MAC_ADDRESS", "mSupplicantState", "mBSSID", "mWifiSsid", "mNetworkId", "INVALID_RSSI", "MIN_RSSI", "MAX_RSSI", "mRssi", "mWifiStandard", "LINK_SPEED_UNITS", "mLinkSpeed", "LINK_SPEED_UNKNOWN", "mTxLinkSpeed", "mMaxSupportedTxLinkSpeed", "mRxLinkSpeed", "mMaxSupportedRxLinkSpeed", "FREQUENCY_UNITS", "mFrequency", "mIpAddress", "mMacAddress", "mEphemeral", "mTrusted", "mOsuAp", "mFqdn", "mProviderFriendlyName", "mRequestingPackageName", "txBad", "txRetries", "txSuccess", "rxSuccess", "mLostTxPacketsPerSecond", "mTxRetriedTxPacketsPerSecond", "mSuccessfulTxPacketsPerSecond", "mSuccessfulRxPacketsPerSecond", "score", "mMeteredHint", "mPasspointUniqueId", "CREATOR" ],
  "methodNames" : [ "public double getLostTxPacketsPerSecond()", "public void setLostTxPacketsPerSecond(double lostTxPacketsPerSecond)", "public double getRetriedTxPacketsPerSecond()", "public void setRetriedTxPacketsRate(double txRetriedTxPacketsPerSecond)", "public double getSuccessfulTxPacketsPerSecond()", "public void setSuccessfulTxPacketsPerSecond(double successfulTxPacketsPerSecond)", "public double getSuccessfulRxPacketsPerSecond()", "public void setSuccessfulRxPacketsPerSecond(double successfulRxPacketsPerSecond)", "public int getScore()", "public void setScore(int score)", "public void reset()", "public void setSSID(WifiSsid wifiSsid)", "public String getSSID()", "public WifiSsid getWifiSsid()", "public void setBSSID(String BSSID)", "public String getBSSID()", "public int getRssi()", "public void setRssi(int rssi)", "public void setWifiStandard(@WifiAnnotations.WifiStandard int wifiStandard)", "public int getWifiStandard()", "public int getLinkSpeed()", "public void setLinkSpeed(int linkSpeed)", "public int getTxLinkSpeedMbps()", "public int getMaxSupportedTxLinkSpeedMbps()", "public void setTxLinkSpeedMbps(int txLinkSpeed)", "public void setMaxSupportedTxLinkSpeedMbps(int maxSupportedTxLinkSpeed)", "public int getRxLinkSpeedMbps()", "public int getMaxSupportedRxLinkSpeedMbps()", "public void setRxLinkSpeedMbps(int rxLinkSpeed)", "public void setMaxSupportedRxLinkSpeedMbps(int maxSupportedRxLinkSpeed)", "public int getFrequency()", "public void setFrequency(int frequency)", "public boolean is24GHz()", "public boolean is5GHz()", "public boolean is6GHz()", "public void setMacAddress(String macAddress)", "public String getMacAddress()", "public boolean hasRealMacAddress()", "public void setMeteredHint(boolean meteredHint)", "public boolean getMeteredHint()", "public void setEphemeral(boolean ephemeral)", "public boolean isEphemeral()", "public void setTrusted(boolean trusted)", "public boolean isTrusted()", "public void setOsuAp(boolean osuAp)", "public boolean isOsuAp()", "public boolean isPasspointAp()", "public void setFQDN(@Nullable String fqdn)", "public String getPasspointFqdn()", "public void setProviderFriendlyName(@Nullable String providerFriendlyName)", "public String getPasspointProviderFriendlyName()", "public void setRequestingPackageName(@Nullable String packageName)", "public String getRequestingPackageName()", "public void setNetworkId(int id)", "public int getNetworkId()", "public SupplicantState getSupplicantState()", "public void setSupplicantState(SupplicantState state)", "public void setInetAddress(InetAddress address)", "public int getIpAddress()", "public boolean getHiddenSSID()", "public static DetailedState getDetailedStateOf(SupplicantState suppState)", " void setSupplicantState(String stateName)", " static SupplicantState valueOf(String stateName)", "public static String sanitizeSsid(@Nullable String string)", "public static String removeDoubleQuotes(@Nullable String string)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public void setPasspointUniqueId(@Nullable String passpointUniqueId)", "public String getPasspointUniqueId()" ]
}