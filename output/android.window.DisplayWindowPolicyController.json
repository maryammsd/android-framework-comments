{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/DisplayWindowPolicyController.java",
  "packageName" : "android.window",
  "className" : "DisplayWindowPolicyController",
  "comment" : "\n * Abstract class to control the policies of the windows that can be displayed on the virtual\n * display.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mWindowFlags",
    "type" : "int",
    "comment" : "\n     * The window flags that we are interested in.\n     * @see android.view.WindowManager.LayoutParams\n     * @see #keepActivityOnWindowFlagsChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "mSystemWindowFlags",
    "type" : "int",
    "comment" : "\n     * The system window flags that we are interested in.\n     * @see android.view.WindowManager.LayoutParams\n     * @see #keepActivityOnWindowFlagsChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "mSupportedWindowingModes",
    "type" : "Set<Integer>",
    "comment" : "\n     * The set of windowing mode that are supported in this display.\n     * @see android.app.WindowConfiguration.WindowingMode\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final boolean isInterestedWindowFlags(int windowFlags, int systemWindowFlags)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the given window flags contain the flags that we're interested in.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setInterestedWindowFlags(int windowFlags, int systemWindowFlags)",
    "returnType" : "void",
    "comment" : "\n     * Sets the window flags that we’re interested in and expected\n     * #keepActivityOnWindowFlagsChanged to be called if any changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isWindowingModeSupported(@WindowConfiguration.WindowingMode int windowingMode)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the given windowing mode is supported in this display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setSupportedWindowingModes(Set<Integer> supportedWindowingModes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the windowing modes are supported in this display.\n     *\n     * @param supportedWindowingModes The set of\n     * {@link android.app.WindowConfiguration.WindowingMode}.\n     ",
    "links" : [ "android.app.WindowConfiguration.WindowingMode" ]
  }, {
    "name" : "public abstract ComponentName getCustomHomeComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * @return the custom home component specified for the relevant display, if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canContainActivities(@NonNull List<ActivityInfo> activities, @WindowConfiguration.WindowingMode int windowingMode)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if all of the given activities can be launched on this virtual display\n     * in the configuration defined by the rest of the arguments.\n     *\n     * @see #canContainActivity\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean canActivityBeLaunched(@NonNull ActivityInfo activityInfo, @Nullable Intent intent, @WindowConfiguration.WindowingMode int windowingMode, int launchingFromDisplayId, boolean isNewTask)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the given activity can be launched on this virtual display in the\n     * configuration defined by the rest of the arguments. If the given intent would be intercepted\n     * by the display owner then this means that the activity cannot be launched.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract boolean canContainActivity(@NonNull ActivityInfo activityInfo, @WindowConfiguration.WindowingMode int windowingMode, int launchingFromDisplayId, boolean isNewTask)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the given activity can be launched on this virtual display in the\n     * configuration defined by the rest of the arguments.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean keepActivityOnWindowFlagsChanged(ActivityInfo activityInfo, int windowFlags, int systemWindowFlags)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when an Activity window is layouted with the new changes where contains the\n     * window flags that we’re interested in.\n     * Returns {@code false} if the Activity cannot remain on the display and the activity task will\n     * be moved back to default display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean canShowTasksInHostDeviceRecents()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the tasks which is on this virtual display can be showed in the\n     * host device of the recently launched activities list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTopActivityChanged(ComponentName topActivity, int uid, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * This is called when the top activity of the display is changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRunningAppsChanged(ArraySet<Integer> runningUids)",
    "returnType" : "void",
    "comment" : "\n     * This is called when the apps that contains running activities on the display has changed.\n     * The running activities refer to the non-finishing activities regardless of they are running\n     * in a process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnteringPipAllowed(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * This is called when an Activity is entering PIP.\n     * Returns {@code true} if the Activity is allowed to enter PIP.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, final PrintWriter pw)",
    "returnType" : "void",
    "comment" : " Dump debug data ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final boolean isInterestedWindowFlags(int windowFlags, int systemWindowFlags)", "public final void setInterestedWindowFlags(int windowFlags, int systemWindowFlags)", "public final boolean isWindowingModeSupported(@WindowConfiguration.WindowingMode int windowingMode)", "public final void setSupportedWindowingModes(Set<Integer> supportedWindowingModes)", "public abstract ComponentName getCustomHomeComponent()", "public boolean canContainActivities(@NonNull List<ActivityInfo> activities, @WindowConfiguration.WindowingMode int windowingMode)", "public abstract boolean canActivityBeLaunched(@NonNull ActivityInfo activityInfo, @Nullable Intent intent, @WindowConfiguration.WindowingMode int windowingMode, int launchingFromDisplayId, boolean isNewTask)", "protected abstract boolean canContainActivity(@NonNull ActivityInfo activityInfo, @WindowConfiguration.WindowingMode int windowingMode, int launchingFromDisplayId, boolean isNewTask)", "public abstract boolean keepActivityOnWindowFlagsChanged(ActivityInfo activityInfo, int windowFlags, int systemWindowFlags)", "public abstract boolean canShowTasksInHostDeviceRecents()", "public void onTopActivityChanged(ComponentName topActivity, int uid, @UserIdInt int userId)", "public void onRunningAppsChanged(ArraySet<Integer> runningUids)", "public boolean isEnteringPipAllowed(int uid)", "public void dump(String prefix, final PrintWriter pw)" ],
  "variableNames" : [ "mWindowFlags", "mSystemWindowFlags", "mSupportedWindowingModes" ]
}