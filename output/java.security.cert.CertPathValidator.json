{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/CertPathValidator.java",
  "packageName" : "java.security.cert",
  "className" : "CertPathValidator",
  "comment" : "\n * A class for validating certification paths (also known as certificate\n * chains).\n * <p>\n * This class uses a provider-based architecture.\n * To create a {@code CertPathValidator},\n * call one of the static {@code getInstance} methods, passing in the\n * algorithm name of the {@code CertPathValidator} desired and\n * optionally the name of the provider desired.\n *\n * <p>Once a {@code CertPathValidator} object has been created, it can\n * be used to validate certification paths by calling the {@link #validate\n * validate} method and passing it the {@code CertPath} to be validated\n * and an algorithm-specific set of parameters. If successful, the result is\n * returned in an object that implements the\n * {@code CertPathValidatorResult} interface.\n *\n * <p>The {@link #getRevocationChecker} method allows an application to specify\n * additional algorithm-specific parameters and options used by the\n * {@code CertPathValidator} when checking the revocation status of\n * certificates. Here is an example demonstrating how it is used with the PKIX\n * algorithm:\n *\n * <pre>\n * CertPathValidator cpv = CertPathValidator.getInstance(\"PKIX\");\n * PKIXRevocationChecker rc = (PKIXRevocationChecker)cpv.getRevocationChecker();\n * rc.setOptions(EnumSet.of(Option.SOFT_FAIL));\n * params.addCertPathChecker(rc);\n * CertPathValidatorResult cpvr = cpv.validate(path, params);\n * </pre>\n *\n * <p>Every implementation of the Java platform is required to support the\n * following standard {@code CertPathValidator} algorithm:\n * <ul>\n * <li>{@code PKIX}</li>\n * </ul>\n * This algorithm is described in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#certpathvalidator-algorithms\">\n * CertPathValidator section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other algorithms are supported.\n *\n * <p>\n * <b>Concurrent Access</b>\n * <p>\n * The static methods of this class are guaranteed to be thread-safe.\n * Multiple threads may concurrently invoke the static methods defined in\n * this class with no ill effects.\n * <p>\n * However, this is not true for the non-static methods defined by this class.\n * Unless otherwise documented by a specific provider, threads that need to\n * access a single {@code CertPathValidator} instance concurrently should\n * synchronize amongst themselves and provide the necessary locking. Multiple\n * threads each manipulating a different {@code CertPathValidator}\n * instance need not synchronize.\n *\n * @see CertPath\n *\n * @since       1.4\n * @author      Yassir Elley\n ",
  "links" : [ "#getRevocationChecker", "#validatevalidate" ],
  "variables" : [ {
    "name" : "CPV_TYPE",
    "type" : "String",
    "comment" : "\n     * Constant to lookup in the Security properties file to determine\n     * the default certpathvalidator type. In the Security properties file,\n     * the default certpathvalidator type is given as:\n     * <pre>\n     * certpathvalidator.type=PKIX\n     * </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "validatorSpi",
    "type" : "CertPathValidatorSpi",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "Provider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CertPathValidator getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "CertPathValidator",
    "comment" : "\n     * Returns a {@code CertPathValidator} object that implements the\n     * specified algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new CertPathValidator object encapsulating the\n     * CertPathValidatorSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @implNote\n     * The JDK Reference Implementation additionally uses the\n     * {@code jdk.security.provider.preferred}\n     * {@link Security#getProperty(String) Security} property to determine\n     * the preferred provider order for the specified algorithm. This\n     * may be different than the order of providers returned by\n     * {@link Security#getProviders() Security.getProviders()}.\n     *\n     * @param algorithm the name of the requested {@code CertPathValidator}\n     * algorithm. See the CertPathValidator section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#certpathvalidator-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @return a {@code CertPathValidator} object that implements the\n     *         specified algorithm\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n     *         {@code CertPathValidatorSpi} implementation for the\n     *         specified algorithm\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProperty(String)", "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static CertPathValidator getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "CertPathValidator",
    "comment" : "\n     * Returns a {@code CertPathValidator} object that implements the\n     * specified algorithm.\n     *\n     * <p> A new CertPathValidator object encapsulating the\n     * CertPathValidatorSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the requested {@code CertPathValidator}\n     * algorithm. See the CertPathValidator section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#certpathvalidator-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return a {@code CertPathValidator} object that implements the\n     *         specified algorithm\n     *\n     * @throws IllegalArgumentException if the {@code provider} is\n     *         {@code null} or empty\n     *\n     * @throws NoSuchAlgorithmException if a {@code CertPathValidatorSpi}\n     *         implementation for the specified algorithm is not\n     *         available from the specified provider\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static CertPathValidator getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "CertPathValidator",
    "comment" : "\n     * Returns a {@code CertPathValidator} object that implements the\n     * specified algorithm.\n     *\n     * <p> A new CertPathValidator object encapsulating the\n     * CertPathValidatorSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the name of the requested {@code CertPathValidator}\n     * algorithm. See the CertPathValidator section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#certpathvalidator-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return a {@code CertPathValidator} object that implements the\n     *          specified algorithm\n     *\n     * @throws IllegalArgumentException if the {@code provider} is\n     *         {@code null}\n     *\n     * @throws NoSuchAlgorithmException if a {@code CertPathValidatorSpi}\n     *         implementation for the specified algorithm is not available\n     *         from the specified Provider object\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the {@code Provider} of this\n     * {@code CertPathValidator}.\n     *\n     * @return the {@code Provider} of this {@code CertPathValidator}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the algorithm name of this {@code CertPathValidator}.\n     *\n     * @return the algorithm name of this {@code CertPathValidator}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CertPathValidatorResult validate(CertPath certPath, CertPathParameters params) throws CertPathValidatorException, InvalidAlgorithmParameterException",
    "returnType" : "CertPathValidatorResult",
    "comment" : "\n     * Validates the specified certification path using the specified\n     * algorithm parameter set.\n     * <p>\n     * The {@code CertPath} specified must be of a type that is\n     * supported by the validation algorithm, otherwise an\n     * {@code InvalidAlgorithmParameterException} will be thrown. For\n     * example, a {@code CertPathValidator} that implements the PKIX\n     * algorithm validates {@code CertPath} objects of type X.509.\n     *\n     * @param certPath the {@code CertPath} to be validated\n     * @param params the algorithm parameters\n     * @return the result of the validation algorithm\n     * @exception CertPathValidatorException if the {@code CertPath}\n     * does not validate\n     * @exception InvalidAlgorithmParameterException if the specified\n     * parameters or the type of the specified {@code CertPath} are\n     * inappropriate for this {@code CertPathValidator}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String getDefaultType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the default {@code CertPathValidator} type as specified by\n     * the {@code certpathvalidator.type} security property, or the string\n     * {@literal \"PKIX\"} if no such property exists.\n     *\n     * <p>The default {@code CertPathValidator} type can be used by\n     * applications that do not want to use a hard-coded type when calling one\n     * of the {@code getInstance} methods, and want to provide a default\n     * type in case a user does not specify its own.\n     *\n     * <p>The default {@code CertPathValidator} type can be changed by\n     * setting the value of the {@code certpathvalidator.type} security\n     * property to the desired type.\n     *\n     * @see java.security.Security security properties\n     * @return the default {@code CertPathValidator} type as specified\n     * by the {@code certpathvalidator.type} security property, or the string\n     * {@literal \"PKIX\"} if no such property exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CertPathChecker getRevocationChecker()",
    "returnType" : "CertPathChecker",
    "comment" : "\n     * Returns a {@code CertPathChecker} that the encapsulated\n     * {@code CertPathValidatorSpi} implementation uses to check the revocation\n     * status of certificates. A PKIX implementation returns objects of\n     * type {@code PKIXRevocationChecker}. Each invocation of this method\n     * returns a new instance of {@code CertPathChecker}.\n     *\n     * <p>The primary purpose of this method is to allow callers to specify\n     * additional input parameters and options specific to revocation checking.\n     * See the class description for an example.\n     *\n     * @return a {@code CertPathChecker}\n     * @throws UnsupportedOperationException if the service provider does not\n     *         support this method\n     * @since 1.8\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static CertPathValidator getInstance(String algorithm) throws NoSuchAlgorithmException", "public static CertPathValidator getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static CertPathValidator getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public final String getAlgorithm()", "public final CertPathValidatorResult validate(CertPath certPath, CertPathParameters params) throws CertPathValidatorException, InvalidAlgorithmParameterException", "public static final String getDefaultType()", "public final CertPathChecker getRevocationChecker()" ],
  "variableNames" : [ "CPV_TYPE", "validatorSpi", "provider", "algorithm" ]
}