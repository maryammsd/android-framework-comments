{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/devicestate/DeviceStateManagerGlobal.java",
  "packageName" : "android.hardware.devicestate",
  "className" : "DeviceStateManagerGlobal",
  "comment" : "\n * Provides communication with the device state system service on behalf of applications.\n *\n * @see DeviceStateManager\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sInstance",
    "type" : "DeviceStateManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceStateManager",
    "type" : "IDeviceStateManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "DeviceStateManagerCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "ArrayList<DeviceStateCallbackWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequests",
    "type" : "ArrayMap<IBinder, DeviceStateRequestWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastReceivedInfo",
    "type" : "DeviceStateInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DeviceStateManagerGlobal getInstance()",
    "returnType" : "DeviceStateManagerGlobal",
    "comment" : "\n     * Returns an instance of {@link DeviceStateManagerGlobal}. May return {@code null} if a\n     * connection with the device state service couldn't be established.\n     ",
    "links" : [ "android.hardware.devicestate.DeviceStateManagerGlobal" ]
  }, {
    "name" : "public List<DeviceState> getSupportedDeviceStates()",
    "returnType" : "List<DeviceState>",
    "comment" : "\n     * Returns {@link List} of supported {@link DeviceState}s.\n     *\n     * @see DeviceStateManager#getSupportedDeviceStates()\n     ",
    "links" : [ "java.util.ArrayList", "android.hardware.devicestate.DeviceState" ]
  }, {
    "name" : "public void requestState(@NonNull DeviceStateRequest request, @Nullable Executor executor, @Nullable DeviceStateRequest.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Submits a {@link DeviceStateRequest request} to modify the device state.\n     *\n     * @see DeviceStateManager#requestState(DeviceStateRequest, Executor,\n     * DeviceStateRequest.Callback)\n     * @see DeviceStateRequest\n     ",
    "links" : [ "android.hardware.devicestate.DeviceStateRequest" ]
  }, {
    "name" : "public void cancelStateRequest()",
    "returnType" : "void",
    "comment" : "\n     * Cancels a {@link DeviceStateRequest request} previously submitted with a call to\n     * {@link #requestState(DeviceStateRequest, Executor, DeviceStateRequest.Callback)}.\n     *\n     * @see DeviceStateManager#cancelStateRequest\n     ",
    "links" : [ "#requestState(DeviceStateRequest", "android.hardware.devicestate.DeviceStateRequest" ]
  }, {
    "name" : "public void requestBaseStateOverride(@NonNull DeviceStateRequest request, @Nullable Executor executor, @Nullable DeviceStateRequest.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Submits a {@link DeviceStateRequest request} to modify the base state of the device.\n     *\n     * @see DeviceStateManager#requestBaseStateOverride(DeviceStateRequest, Executor,\n     * DeviceStateRequest.Callback)\n     * @see DeviceStateRequest\n     ",
    "links" : [ "android.hardware.devicestate.DeviceStateRequest" ]
  }, {
    "name" : "public void cancelBaseStateOverride()",
    "returnType" : "void",
    "comment" : "\n     * Cancels a {@link DeviceStateRequest request} previously submitted with a call to\n     * {@link #requestBaseStateOverride(DeviceStateRequest, Executor, DeviceStateRequest.Callback)}.\n     *\n     * @see DeviceStateManager#cancelBaseStateOverride\n     ",
    "links" : [ "android.hardware.devicestate.DeviceStateRequest", "#requestBaseStateOverride(DeviceStateRequest" ]
  }, {
    "name" : "public void registerDeviceStateCallback(@NonNull DeviceStateCallback callback, @NonNull Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to receive notifications about changes in device state.\n     *\n     * @see DeviceStateManager#registerCallback(Executor, DeviceStateCallback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterDeviceStateCallback(@NonNull DeviceStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a callback previously registered with\n     * {@link #registerDeviceStateCallback(DeviceStateCallback, Executor)}}.\n     *\n     * @see DeviceStateManager#unregisterCallback(DeviceStateCallback)\n     ",
    "links" : [ "#registerDeviceStateCallback(DeviceStateCallback" ]
  }, {
    "name" : "public void onStateRequestOverlayDismissed(boolean shouldCancelRequest)",
    "returnType" : "void",
    "comment" : "\n     * Provides notification to the system server that a device state feature overlay\n     * was dismissed. This should only be called from the {@link android.app.Activity} that\n     * was showing the overlay corresponding to the feature.\n     *\n     * Validation of there being an overlay visible and pending state request is handled on the\n     * system server.\n     ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "private void registerCallbackIfNeededLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findCallbackLocked(DeviceStateCallback callback)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IBinder findRequestTokenLocked(@NonNull DeviceStateRequest request)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDeviceStateInfoChanged(@NonNull DeviceStateInfo info)",
    "returnType" : "void",
    "comment" : " Handles a call from the server that the device state info has changed. ",
    "links" : [ ]
  }, {
    "name" : "private void handleRequestActive(IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Handles a call from the server that a request for the supplied {@code token} has become\n     * active.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleRequestCanceled(IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Handles a call from the server that a request for the supplied {@code token} has become\n     * canceled.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static DeviceStateManagerGlobal getInstance()", "public List<DeviceState> getSupportedDeviceStates()", "public void requestState(@NonNull DeviceStateRequest request, @Nullable Executor executor, @Nullable DeviceStateRequest.Callback callback)", "public void cancelStateRequest()", "public void requestBaseStateOverride(@NonNull DeviceStateRequest request, @Nullable Executor executor, @Nullable DeviceStateRequest.Callback callback)", "public void cancelBaseStateOverride()", "public void registerDeviceStateCallback(@NonNull DeviceStateCallback callback, @NonNull Executor executor)", "public void unregisterDeviceStateCallback(@NonNull DeviceStateCallback callback)", "public void onStateRequestOverlayDismissed(boolean shouldCancelRequest)", "private void registerCallbackIfNeededLocked()", "private int findCallbackLocked(DeviceStateCallback callback)", "private IBinder findRequestTokenLocked(@NonNull DeviceStateRequest request)", "private void handleDeviceStateInfoChanged(@NonNull DeviceStateInfo info)", "private void handleRequestActive(IBinder token)", "private void handleRequestCanceled(IBinder token)" ],
  "variableNames" : [ "sInstance", "TAG", "DEBUG", "mLock", "mDeviceStateManager", "mCallback", "mCallbacks", "mRequests", "mLastReceivedInfo" ]
}