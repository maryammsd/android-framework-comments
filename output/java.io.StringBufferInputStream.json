{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/StringBufferInputStream.java",
  "packageName" : "java.io",
  "className" : "StringBufferInputStream",
  "comment" : "\n * This class allows an application to create an input stream in\n * which the bytes read are supplied by the contents of a string.\n * Applications can also read bytes from a byte array by using a\n * <code>ByteArrayInputStream</code>.\n * <p>\n * Only the low eight bits of each character in the string are used by\n * this class.\n *\n * @author     Arthur van Hoff\n * @see        java.io.ByteArrayInputStream\n * @see        java.io.StringReader\n * @since      1.0\n * @deprecated This class does not properly convert characters into bytes.  As\n *             of JDK&nbsp;1.1, the preferred way to create a stream from a\n *             string is via the <code>StringReader</code> class.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "buffer",
    "type" : "String",
    "comment" : "\n     * The string from which bytes are read.\n     ",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : "\n     * The index of the next character to read from the input stream buffer.\n     *\n     * @see        java.io.StringBufferInputStream#buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "\n     * The number of valid characters in the input stream buffer.\n     *\n     * @see        java.io.StringBufferInputStream#buffer\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized int read()",
    "returnType" : "int",
    "comment" : "\n     * Reads the next byte of data from this input stream. The value\n     * byte is returned as an <code>int</code> in the range\n     * <code>0</code> to <code>255</code>. If no byte is available\n     * because the end of the stream has been reached, the value\n     * <code>-1</code> is returned.\n     * <p>\n     * The <code>read</code> method of\n     * <code>StringBufferInputStream</code> cannot block. It returns the\n     * low eight bits of the next character in this input stream's buffer.\n     *\n     * @return     the next byte of data, or <code>-1</code> if the end of the\n     *             stream is reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int read(byte[] b, int off, int len)",
    "returnType" : "int",
    "comment" : "\n     * Reads up to <code>len</code> bytes of data from this input stream\n     * into an array of bytes.\n     * <p>\n     * The <code>read</code> method of\n     * <code>StringBufferInputStream</code> cannot block. It copies the\n     * low eight bits from the characters in this input stream's buffer into\n     * the byte array argument.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset of the data.\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1</code> if there is no more data because the end of\n     *             the stream has been reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized long skip(long n)",
    "returnType" : "long",
    "comment" : "\n     * Skips <code>n</code> bytes of input from this input stream. Fewer\n     * bytes might be skipped if the end of the input stream is reached.\n     *\n     * @param      n   the number of bytes to be skipped.\n     * @return     the actual number of bytes skipped.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int available()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of bytes that can be read from the input\n     * stream without blocking.\n     *\n     * @return     the value of <code>count&nbsp;-&nbsp;pos</code>, which is the\n     *             number of bytes remaining to be read from the input buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the input stream to begin reading from the first character\n     * of this input stream's underlying buffer.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized int read()", "public synchronized int read(byte[] b, int off, int len)", "public synchronized long skip(long n)", "public synchronized int available()", "public synchronized void reset()" ],
  "variableNames" : [ "buffer", "pos", "count" ]
}