{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/FileHandler.java",
  "packageName" : "java.util.logging",
  "className" : "FileHandler",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "meter",
    "type" : "MeteredStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "append",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "limit",
    "type" : "int",
    "comment" : " zero => no limit.",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lockFileName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lockFileChannel",
    "type" : "FileChannel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "files",
    "type" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_LOCKS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "locks",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void open(File fname, boolean append) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void configure()",
    "returnType" : "void",
    "comment" : "\n     * Configure a FileHandler from LogManager properties and/or default values\n     * as specified in the class javadoc.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isParentWritable(Path path)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void openFiles() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Open the set of output files, based on the configured\n     * instance variables.\n     ",
    "links" : [ ]
  }, {
    "name" : "private File generate(String pattern, int generation, int unique) throws IOException",
    "returnType" : "File",
    "comment" : "\n     * Generate a file based on a user-supplied pattern, generation number,\n     * and an integer uniqueness suffix\n     * @param pattern the pattern for naming the output file\n     * @param generation the generation number to distinguish rotated logs\n     * @param unique a unique number to resolve conflicts\n     * @return the generated File\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void rotate()",
    "returnType" : "void",
    "comment" : "\n     * Rotate the set of output files\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void publish(LogRecord record)",
    "returnType" : "void",
    "comment" : "\n     * Format and publish a <tt>LogRecord</tt>.\n     *\n     * @param  record  description of the log event. A null record is\n     *                 silently ignored and is not published\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void close() throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Close all the files.\n     *\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void open(File fname, boolean append) throws IOException", "private void configure()", "private boolean isParentWritable(Path path)", "private void openFiles() throws IOException", "private File generate(String pattern, int generation, int unique) throws IOException", "private synchronized void rotate()", "public synchronized void publish(LogRecord record)", "public synchronized void close() throws SecurityException" ],
  "variableNames" : [ "meter", "append", "limit", "count", "pattern", "lockFileName", "lockFileChannel", "files", "MAX_LOCKS", "locks" ]
}