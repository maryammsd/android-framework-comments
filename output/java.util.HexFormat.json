{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/HexFormat.java",
  "packageName" : "java.util",
  "className" : "HexFormat",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "UPPERCASE_DIGITS",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOWERCASE_DIGITS",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIGITS",
    "type" : "byte[]",
    "comment" : " better code compared to a slimmed down array, such as one cutting off after 'f'",
    "links" : [ ]
  }, {
    "name" : "HEX_FORMAT",
    "type" : "HexFormat",
    "comment" : "\n     * Format each byte of an array as a pair of hexadecimal digits.\n     * The hexadecimal characters are from lowercase alpha digits.\n     ",
    "links" : [ ]
  }, {
    "name" : "EMPTY_BYTES",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "delimiter",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "prefix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "suffix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "digits",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static HexFormat of()",
    "returnType" : "HexFormat",
    "comment" : "\n     * Returns a hexadecimal formatter with no delimiter and lowercase characters.\n     * The delimiter, prefix, and suffix are empty.\n     * The methods {@link #withDelimiter(String) withDelimiter},\n     * {@link #withUpperCase() withUpperCase}, {@link #withLowerCase() withLowerCase},\n     * {@link #withPrefix(String) withPrefix}, and {@link #withSuffix(String) withSuffix}\n     * return copies of formatters with new parameters.\n     *\n     * @return a hexadecimal formatter with no delimiter and lowercase characters\n     ",
    "links" : [ "#withLowerCase()", "#withDelimiter(String)", "#withPrefix(String)", "#withUpperCase()", "#withSuffix(String)" ]
  }, {
    "name" : "public static HexFormat ofDelimiter(String delimiter)",
    "returnType" : "HexFormat",
    "comment" : "\n     * Returns a hexadecimal formatter with the delimiter and lowercase characters.\n     * The prefix and suffix are empty.\n     * The methods {@link #withDelimiter(String) withDelimiter},\n     * {@link #withUpperCase() withUpperCase}, {@link #withLowerCase() withLowerCase},\n     * {@link #withPrefix(String) withPrefix}, and {@link #withSuffix(String) withSuffix}\n     * return copies of formatters with new parameters.\n     *\n     * @param delimiter a delimiter, non-null, may be empty\n     * @return a {@link HexFormat} with the delimiter and lowercase characters\n     ",
    "links" : [ "#withLowerCase()", "#withDelimiter(String)", "#withPrefix(String)", "#withUpperCase()", "#withSuffix(String)", "java.util.HexFormat" ]
  }, {
    "name" : "public HexFormat withDelimiter(String delimiter)",
    "returnType" : "HexFormat",
    "comment" : "\n     * Returns a copy of this {@code HexFormat} with the delimiter.\n     * @param delimiter the delimiter, non-null, may be empty\n     * @return a copy of this {@code HexFormat} with the delimiter\n     ",
    "links" : [ ]
  }, {
    "name" : "public HexFormat withPrefix(String prefix)",
    "returnType" : "HexFormat",
    "comment" : "\n     * Returns a copy of this {@code HexFormat} with the prefix.\n     *\n     * @param prefix a prefix, non-null, may be empty\n     * @return a copy of this {@code HexFormat} with the prefix\n     ",
    "links" : [ ]
  }, {
    "name" : "public HexFormat withSuffix(String suffix)",
    "returnType" : "HexFormat",
    "comment" : "\n     * Returns a copy of this {@code HexFormat} with the suffix.\n     *\n     * @param suffix a suffix, non-null, may be empty\n     * @return a copy of this {@code HexFormat} with the suffix\n     ",
    "links" : [ ]
  }, {
    "name" : "public HexFormat withUpperCase()",
    "returnType" : "HexFormat",
    "comment" : "\n     * Returns a copy of this {@code HexFormat} to use uppercase hexadecimal characters.\n     * The uppercase hexadecimal characters are {@code \"0-9\", \"A-F\"}.\n     *\n     * @return a copy of this {@code HexFormat} with uppercase hexadecimal characters\n     ",
    "links" : [ ]
  }, {
    "name" : "public HexFormat withLowerCase()",
    "returnType" : "HexFormat",
    "comment" : "\n     * Returns a copy of this {@code HexFormat} to use lowercase hexadecimal characters.\n     * The lowercase hexadecimal characters are {@code \"0-9\", \"a-f\"}.\n     *\n     * @return a copy of this {@code HexFormat} with lowercase hexadecimal characters\n     ",
    "links" : [ ]
  }, {
    "name" : "public String delimiter()",
    "returnType" : "String",
    "comment" : "\n     * Returns the delimiter between hexadecimal values in formatted hexadecimal strings.\n     *\n     * @return the delimiter, non-null, may be empty {@code \"\"}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String prefix()",
    "returnType" : "String",
    "comment" : "\n     * Returns the prefix used for each hexadecimal value in formatted hexadecimal strings.\n     *\n     * @return the prefix, non-null, may be empty {@code \"\"}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String suffix()",
    "returnType" : "String",
    "comment" : "\n     * Returns the suffix used for each hexadecimal value in formatted hexadecimal strings.\n     *\n     * @return the suffix, non-null, may be empty {@code \"\"}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUpperCase()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the hexadecimal digits are uppercase,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the hexadecimal digits are uppercase,\n     *          otherwise {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String formatHex(byte[] bytes)",
    "returnType" : "String",
    "comment" : "\n     * Returns a hexadecimal string formatted from a byte array.\n     * Each byte value is formatted as the prefix, two hexadecimal characters\n     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the suffix.\n     * A delimiter follows each formatted value, except the last.\n     *\n     * The behavior is equivalent to\n     * {@link #formatHex(byte[], int, int) formatHex(bytes, 0, bytes.length))}.\n     *\n     * @param bytes a non-null array of bytes\n     * @return a string hexadecimal formatting of the byte array\n     ",
    "links" : [ "#formatHex(byte" ]
  }, {
    "name" : "public String formatHex(byte[] bytes, int fromIndex, int toIndex)",
    "returnType" : "String",
    "comment" : "\n     * Returns a hexadecimal string formatted from a byte array range.\n     * Each byte value is formatted as the prefix, two hexadecimal characters\n     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the suffix.\n     * A delimiter follows each formatted value, except the last.\n     *\n     * @param bytes a non-null array of bytes\n     * @param fromIndex the initial index of the range, inclusive\n     * @param toIndex the final index of the range, exclusive\n     * @return a string hexadecimal formatting each byte of the array range\n     * @throws IndexOutOfBoundsException if the array range is out of bounds\n     ",
    "links" : [ ]
  }, {
    "name" : "public A formatHex(A out, byte[] bytes)",
    "returnType" : "A",
    "comment" : "\n     * Appends formatted hexadecimal strings from a byte array to the {@link Appendable}.\n     * Each byte value is formatted as the prefix, two hexadecimal characters\n     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the suffix.\n     * A delimiter follows each formatted value, except the last.\n     * The formatted hexadecimal strings are appended in zero or more calls to the {@link Appendable} methods.\n     *\n     * @param <A> The type of {@code Appendable}\n     * @param out an {@code Appendable}, non-null\n     * @param bytes a byte array\n     * @return the {@code Appendable}\n     * @throws UncheckedIOException if an I/O exception occurs appending to the output\n     ",
    "links" : [ "Appendable" ]
  }, {
    "name" : "public A formatHex(A out, byte[] bytes, int fromIndex, int toIndex)",
    "returnType" : "A",
    "comment" : "\n     * Appends formatted hexadecimal strings from a byte array range to the {@link Appendable}.\n     * Each byte value is formatted as the prefix, two hexadecimal characters\n     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the suffix.\n     * A delimiter follows each formatted value, except the last.\n     * The formatted hexadecimal strings are appended in zero or more calls to the {@link Appendable} methods.\n     *\n     * @param <A> The type of {@code Appendable}\n     * @param out an {@code Appendable}, non-null\n     * @param bytes a byte array, non-null\n     * @param fromIndex the initial index of the range, inclusive\n     * @param toIndex the final index of the range, exclusive.\n     * @return the {@code Appendable}\n     * @throws IndexOutOfBoundsException if the array range is out of bounds\n     * @throws UncheckedIOException if an I/O exception occurs appending to the output\n     ",
    "links" : [ "Appendable" ]
  }, {
    "name" : "private String formatOptDelimiter(byte[] bytes, int fromIndex, int toIndex)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string formatting of the range of bytes optimized\n     * for a single allocation.\n     * Prefix and suffix must be empty and the delimiter\n     * must be empty or a single byte character, otherwise null is returned.\n     *\n     * @param bytes the bytes, non-null\n     * @param fromIndex the initial index of the range, inclusive\n     * @param toIndex the final index of the range, exclusive.\n     * @return a String formatted or null for non-single byte delimiter\n     *         or non-empty prefix or suffix\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int checkMaxArraySize(long length)",
    "returnType" : "int",
    "comment" : "\n     * Checked that the requested size for the result string is\n     * less than or equal to the max array size.\n     *\n     * @param length the requested size of a byte array.\n     * @return the length\n     * @throws OutOfMemoryError if the size is larger than Integer.MAX_VALUE\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] parseHex(CharSequence string)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a byte array containing hexadecimal values parsed from the string.\n     *\n     * Each byte value is parsed from the prefix, two case insensitive hexadecimal characters,\n     * and the suffix. A delimiter follows each formatted value, except the last.\n     * The delimiters, prefixes, and suffixes strings must be present; they may be empty strings.\n     * A valid string consists only of the above format.\n     *\n     * @param string a string containing the byte values with prefix, hexadecimal digits, suffix,\n     *            and delimiters\n     * @return a byte array with the values parsed from the string\n     * @throws IllegalArgumentException if the prefix or suffix is not present for each byte value,\n     *          the byte values are not hexadecimal characters, or if the delimiter is not present\n     *          after all but the last byte value\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] parseHex(CharSequence string, int fromIndex, int toIndex)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a byte array containing hexadecimal values parsed from a range of the string.\n     *\n     * Each byte value is parsed from the prefix, two case insensitive hexadecimal characters,\n     * and the suffix. A delimiter follows each formatted value, except the last.\n     * The delimiters, prefixes, and suffixes strings must be present; they may be empty strings.\n     * A valid string consists only of the above format.\n     *\n     * @param string a string range containing hexadecimal digits,\n     *           delimiters, prefix, and suffix.\n     * @param fromIndex the initial index of the range, inclusive\n     * @param toIndex the final index of the range, exclusive.\n     * @return a byte array with the values parsed from the string range\n     * @throws IllegalArgumentException if the prefix or suffix is not present for each byte value,\n     *          the byte values are not hexadecimal characters, or if the delimiter is not present\n     *          after all but the last byte value\n     * @throws IndexOutOfBoundsException if the string range is out of bounds\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] parseHex(char[] chars, int fromIndex, int toIndex)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a byte array containing hexadecimal values parsed from\n     * a range of the character array.\n     *\n     * Each byte value is parsed from the prefix, two case insensitive hexadecimal characters,\n     * and the suffix. A delimiter follows each formatted value, except the last.\n     * The delimiters, prefixes, and suffixes strings must be present; they may be empty strings.\n     * A valid character array range consists only of the above format.\n     *\n     * @param chars a character array range containing an even number of hexadecimal digits,\n     *          delimiters, prefix, and suffix.\n     * @param fromIndex the initial index of the range, inclusive\n     * @param toIndex the final index of the range, exclusive.\n     * @return a byte array with the values parsed from the character array range\n     * @throws IllegalArgumentException if the prefix or suffix is not present for each byte value,\n     *          the byte values are not hexadecimal characters, or if the delimiter is not present\n     *          after all but the last byte value\n     * @throws IndexOutOfBoundsException if the character array range is out of bounds\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkLiteral(CharSequence string, int index, String literal)",
    "returnType" : "void",
    "comment" : "\n     * Compare the literal and throw an exception if it does not match.\n     * Pre-condition:  {@code index + literal.length() <= string.length()}.\n     *\n     * @param string a CharSequence\n     * @param index the index of the literal in the CharSequence\n     * @param literal the expected literal\n     * @throws IllegalArgumentException if the literal is not present\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String escapeNL(String string)",
    "returnType" : "String",
    "comment" : "\n     * Expands new line characters to escaped newlines for display.\n     *\n     * @param string a string\n     * @return a string with newline characters escaped\n     ",
    "links" : [ ]
  }, {
    "name" : "public char toLowHexDigit(int value)",
    "returnType" : "char",
    "comment" : "\n     * Returns the hexadecimal character for the low 4 bits of the value considering it to be a byte.\n     * If the parameter {@link #isUpperCase()} is {@code true} the\n     * character returned for values {@code 10-15} is uppercase {@code \"A-F\"},\n     * otherwise the character returned is lowercase {@code \"a-f\"}.\n     * The values in the range {@code 0-9} are returned as {@code \"0-9\"}.\n     *\n     * @param value a value, only the low 4 bits {@code 0-3} of the value are used\n     * @return the hexadecimal character for the low 4 bits {@code 0-3} of the value\n     ",
    "links" : [ "#isUpperCase()" ]
  }, {
    "name" : "public char toHighHexDigit(int value)",
    "returnType" : "char",
    "comment" : "\n     * Returns the hexadecimal character for the high 4 bits of the value considering it to be a byte.\n     * If the parameter {@link #isUpperCase()} is {@code true} the\n     * character returned for values {@code 10-15} is uppercase {@code \"A-F\"},\n     * otherwise the character returned is lowercase {@code \"a-f\"}.\n     * The values in the range {@code 0-9} are returned as {@code \"0-9\"}.\n     *\n     * @param value a value, only bits {@code 4-7} of the value are used\n     * @return the hexadecimal character for the bits {@code 4-7} of the value\n     ",
    "links" : [ "#isUpperCase()" ]
  }, {
    "name" : "public A toHexDigits(A out, byte value)",
    "returnType" : "A",
    "comment" : "\n     * Appends two hexadecimal characters for the byte value to the {@link Appendable}.\n     * Each nibble (4 bits) from most significant to least significant of the value\n     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n     * The hexadecimal characters are appended in one or more calls to the\n     * {@link Appendable} methods. The delimiter, prefix and suffix are not used.\n     *\n     * @param <A> The type of {@code Appendable}\n     * @param out an {@code Appendable}, non-null\n     * @param value a byte value\n     * @return the {@code Appendable}\n     * @throws UncheckedIOException if an I/O exception occurs appending to the output\n     ",
    "links" : [ "#toLowHexDigit(int)", "Appendable" ]
  }, {
    "name" : "public String toHexDigits(byte value)",
    "returnType" : "String",
    "comment" : "\n     * Returns the two hexadecimal characters for the {@code byte} value.\n     * Each nibble (4 bits) from most significant to least significant of the value\n     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n     * The delimiter, prefix and suffix are not used.\n     *\n     * @param value a byte value\n     * @return the two hexadecimal characters for the byte value\n     ",
    "links" : [ "#toLowHexDigit(int)" ]
  }, {
    "name" : "public String toHexDigits(char value)",
    "returnType" : "String",
    "comment" : "\n     * Returns the four hexadecimal characters for the {@code char} value.\n     * Each nibble (4 bits) from most significant to least significant of the value\n     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n     * The delimiter, prefix and suffix are not used.\n     *\n     * @param value a {@code char} value\n     * @return the four hexadecimal characters for the {@code char} value\n     ",
    "links" : [ "#toLowHexDigit(int)" ]
  }, {
    "name" : "public String toHexDigits(short value)",
    "returnType" : "String",
    "comment" : "\n     * Returns the four hexadecimal characters for the {@code short} value.\n     * Each nibble (4 bits) from most significant to least significant of the value\n     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n     * The delimiter, prefix and suffix are not used.\n     *\n     * @param value a {@code short} value\n     * @return the four hexadecimal characters for the {@code short} value\n     ",
    "links" : [ "#toLowHexDigit(int)" ]
  }, {
    "name" : "public String toHexDigits(int value)",
    "returnType" : "String",
    "comment" : "\n     * Returns the eight hexadecimal characters for the {@code int} value.\n     * Each nibble (4 bits) from most significant to least significant of the value\n     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n     * The delimiter, prefix and suffix are not used.\n     *\n     * @param value an {@code int} value\n     * @return the eight hexadecimal characters for the {@code int} value\n     * @see Integer#toHexString\n     ",
    "links" : [ "#toLowHexDigit(int)" ]
  }, {
    "name" : "public String toHexDigits(long value)",
    "returnType" : "String",
    "comment" : "\n     * Returns the sixteen hexadecimal characters for the {@code long} value.\n     * Each nibble (4 bits) from most significant to least significant of the value\n     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n     * The delimiter, prefix and suffix are not used.\n     *\n     * @param value a {@code long} value\n     * @return the sixteen hexadecimal characters for the {@code long} value\n     * @see Long#toHexString\n     ",
    "links" : [ "#toLowHexDigit(int)" ]
  }, {
    "name" : "public String toHexDigits(long value, int digits)",
    "returnType" : "String",
    "comment" : "\n     * Returns up to sixteen hexadecimal characters for the {@code long} value.\n     * Each nibble (4 bits) from most significant to least significant of the value\n     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n     * The delimiter, prefix and suffix are not used.\n     *\n     * @param value a {@code long} value\n     * @param digits the number of hexadecimal digits to return, 0 to 16\n     * @return the hexadecimal characters for the {@code long} value\n     * @throws  IllegalArgumentException if {@code digits} is negative or greater than 16\n     ",
    "links" : [ "#toLowHexDigit(int)" ]
  }, {
    "name" : "private static byte[] parseNoDelimiter(CharSequence string)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a byte array containing the parsed hex digits.\n     * A valid string consists only of an even number of hex digits.\n     *\n     * @param string a string containing an even number of only hex digits\n     * @return a byte array\n     * @throws IllegalArgumentException if the string length is not valid or\n     *          the string contains non-hexadecimal characters\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int checkDigitCount(int fromIndex, int toIndex, int limit)",
    "returnType" : "int",
    "comment" : "\n     * Check the number of requested digits against a limit.\n     *\n     * @param fromIndex the initial index of the range, inclusive\n     * @param toIndex the final index of the range, exclusive.\n     * @param limit the maximum allowed\n     * @return the length of the range\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isHexDigit(int ch)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the character is a valid hexadecimal character or codepoint.\n     * The valid hexadecimal characters are:\n     * <ul>\n     * <li>{@code '0' ('\\u005Cu0030')} through {@code '9' ('\\u005Cu0039')} inclusive,\n     * <li>{@code 'A' ('\\u005Cu0041')} through {@code 'F' ('\\u005Cu0046')} inclusive, and\n     * <li>{@code 'a' ('\\u005Cu0061')} through {@code 'f' ('\\u005Cu0066')} inclusive.\n     * </ul>\n     * @param ch a codepoint\n     * @return {@code true} if the character is valid a hexadecimal character,\n     *          otherwise {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int fromHexDigit(int ch)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value for the hexadecimal character or codepoint.\n     * The value is:\n     * <ul>\n     * <li>{@code (ch - '0')} for {@code '0'} through {@code '9'} inclusive,\n     * <li>{@code (ch - 'A' + 10)} for {@code 'A'} through {@code 'F'} inclusive, and\n     * <li>{@code (ch - 'a' + 10)} for {@code 'a'} through {@code 'f'} inclusive.\n     * </ul>\n     *\n     * @param ch a character or codepoint\n     * @return the value {@code 0-15}\n     * @throws  NumberFormatException if the codepoint is not a hexadecimal character\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int fromHexDigits(CharSequence string, int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns a value parsed from two hexadecimal characters in a string.\n     * The characters in the range from {@code index} to {@code index + 1},\n     * inclusive, must be valid hex digits according to {@link #fromHexDigit(int)}.\n     *\n     * @param string a CharSequence containing the characters\n     * @param index the index of the first character of the range\n     * @return the value parsed from the string range\n     * @throws  NumberFormatException if any of the characters in the range\n     *          is not a hexadecimal character\n     * @throws  IndexOutOfBoundsException if the range is out of bounds\n     *          for the {@code CharSequence}\n     ",
    "links" : [ "#fromHexDigit(int)" ]
  }, {
    "name" : "public static int fromHexDigits(CharSequence string)",
    "returnType" : "int",
    "comment" : "\n     * Returns the {@code int} value parsed from a string of up to eight hexadecimal characters.\n     * The hexadecimal characters are parsed from most significant to least significant\n     * using {@link #fromHexDigit(int)} to form an unsigned value.\n     * The value is zero extended to 32 bits and is returned as an {@code int}.\n     *\n     * @apiNote\n     * {@link Integer#parseInt(String, int) Integer.parseInt(s, 16)} and\n     * {@link Integer#parseUnsignedInt(String, int) Integer.parseUnsignedInt(s, 16)}\n     * are similar but allow all Unicode hexadecimal digits defined by\n     * {@link Character#digit(char, int) Character.digit(ch, 16)}.\n     * {@code HexFormat} uses only hexadecimal characters\n     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n     * Signed hexadecimal strings can be parsed with {@link Integer#parseInt(String, int)}.\n     *\n     * @param string a CharSequence containing up to eight hexadecimal characters\n     * @return the value parsed from the string\n     * @throws  IllegalArgumentException if the string length is greater than eight (8) or\n     *      if any of the characters is not a hexadecimal character\n     ",
    "links" : [ "#parseInt(String", "#parseUnsignedInt(String", "#digit(char", "#fromHexDigit(int)" ]
  }, {
    "name" : "public static int fromHexDigits(CharSequence string, int fromIndex, int toIndex)",
    "returnType" : "int",
    "comment" : "\n     * Returns the {@code int} value parsed from a string range of up to eight hexadecimal\n     * characters.\n     * The characters in the range {@code fromIndex} to {@code toIndex}, exclusive,\n     * are parsed from most significant to least significant\n     * using {@link #fromHexDigit(int)} to form an unsigned value.\n     * The value is zero extended to 32 bits and is returned as an {@code int}.\n     *\n     * @apiNote\n     * {@link Integer#parseInt(String, int) Integer.parseInt(s, 16)} and\n     * {@link Integer#parseUnsignedInt(String, int) Integer.parseUnsignedInt(s, 16)}\n     * are similar but allow all Unicode hexadecimal digits defined by\n     * {@link Character#digit(char, int) Character.digit(ch, 16)}.\n     * {@code HexFormat} uses only hexadecimal characters\n     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n     * Signed hexadecimal strings can be parsed with {@link Integer#parseInt(String, int)}.\n     *\n     * @param string a CharSequence containing the characters\n     * @param fromIndex the initial index of the range, inclusive\n     * @param toIndex the final index of the range, exclusive.\n     * @return the value parsed from the string range\n     * @throws  IndexOutOfBoundsException if the range is out of bounds\n     *          for the {@code CharSequence}\n     * @throws  IllegalArgumentException if length of the range is greater than eight (8) or\n     *          if any of the characters is not a hexadecimal character\n     ",
    "links" : [ "#parseInt(String", "#parseUnsignedInt(String", "#digit(char", "#fromHexDigit(int)" ]
  }, {
    "name" : "public static long fromHexDigitsToLong(CharSequence string)",
    "returnType" : "long",
    "comment" : "\n     * Returns the long value parsed from a string of up to sixteen hexadecimal characters.\n     * The hexadecimal characters are parsed from most significant to least significant\n     * using {@link #fromHexDigit(int)} to form an unsigned value.\n     * The value is zero extended to 64 bits and is returned as a {@code long}.\n     *\n     * @apiNote\n     * {@link Long#parseLong(String, int) Long.parseLong(s, 16)} and\n     * {@link Long#parseUnsignedLong(String, int) Long.parseUnsignedLong(s, 16)}\n     * are similar but allow all Unicode hexadecimal digits defined by\n     * {@link Character#digit(char, int) Character.digit(ch, 16)}.\n     * {@code HexFormat} uses only hexadecimal characters\n     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n     * Signed hexadecimal strings can be parsed with {@link Long#parseLong(String, int)}.\n     *\n     * @param string a CharSequence containing up to sixteen hexadecimal characters\n     * @return the value parsed from the string\n     * @throws  IllegalArgumentException if the string length is greater than sixteen (16) or\n     *         if any of the characters is not a hexadecimal character\n     ",
    "links" : [ "#digit(char", "#parseLong(String", "#parseUnsignedLong(String", "#fromHexDigit(int)" ]
  }, {
    "name" : "public static long fromHexDigitsToLong(CharSequence string, int fromIndex, int toIndex)",
    "returnType" : "long",
    "comment" : "\n     * Returns the long value parsed from a string range of up to sixteen hexadecimal\n     * characters.\n     * The characters in the range {@code fromIndex} to {@code toIndex}, exclusive,\n     * are parsed from most significant to least significant\n     * using {@link #fromHexDigit(int)} to form an unsigned value.\n     * The value is zero extended to 64 bits and is returned as a {@code long}.\n     *\n     * @apiNote\n     * {@link Long#parseLong(String, int) Long.parseLong(s, 16)} and\n     * {@link Long#parseUnsignedLong(String, int) Long.parseUnsignedLong(s, 16)}\n     * are similar but allow all Unicode hexadecimal digits defined by\n     * {@link Character#digit(char, int) Character.digit(ch, 16)}.\n     * {@code HexFormat} uses only hexadecimal characters\n     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n     * Signed hexadecimal strings can be parsed with {@link Long#parseLong(String, int)}.\n     *\n     * @param string a CharSequence containing the characters\n     * @param fromIndex the initial index of the range, inclusive\n     * @param toIndex the final index of the range, exclusive.\n     * @return the value parsed from the string range\n     * @throws  IndexOutOfBoundsException if the range is out of bounds\n     *          for the {@code CharSequence}\n     * @throws  IllegalArgumentException if the length of the range is greater than sixteen (16) or\n     *          if any of the characters is not a hexadecimal character\n     ",
    "links" : [ "#digit(char", "#parseLong(String", "#parseUnsignedLong(String", "#fromHexDigit(int)" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the other object is a {@code HexFormat}\n     * with the same parameters.\n     *\n     * @param o an object, may be null\n     * @return {@code true} if the other object is a {@code HexFormat} and the parameters\n     *         uppercase, delimiter, prefix, and suffix are equal;\n     *         otherwise {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this {@code HexFormat}.\n     *\n     * @return a hashcode for this {@code HexFormat}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a description of the formatter parameters for uppercase,\n     * delimiter, prefix, and suffix.\n     *\n     * @return a description of this {@code HexFormat}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static HexFormat of()", "public static HexFormat ofDelimiter(String delimiter)", "public HexFormat withDelimiter(String delimiter)", "public HexFormat withPrefix(String prefix)", "public HexFormat withSuffix(String suffix)", "public HexFormat withUpperCase()", "public HexFormat withLowerCase()", "public String delimiter()", "public String prefix()", "public String suffix()", "public boolean isUpperCase()", "public String formatHex(byte[] bytes)", "public String formatHex(byte[] bytes, int fromIndex, int toIndex)", "public A formatHex(A out, byte[] bytes)", "public A formatHex(A out, byte[] bytes, int fromIndex, int toIndex)", "private String formatOptDelimiter(byte[] bytes, int fromIndex, int toIndex)", "private static int checkMaxArraySize(long length)", "public byte[] parseHex(CharSequence string)", "public byte[] parseHex(CharSequence string, int fromIndex, int toIndex)", "public byte[] parseHex(char[] chars, int fromIndex, int toIndex)", "private static void checkLiteral(CharSequence string, int index, String literal)", "private static String escapeNL(String string)", "public char toLowHexDigit(int value)", "public char toHighHexDigit(int value)", "public A toHexDigits(A out, byte value)", "public String toHexDigits(byte value)", "public String toHexDigits(char value)", "public String toHexDigits(short value)", "public String toHexDigits(int value)", "public String toHexDigits(long value)", "public String toHexDigits(long value, int digits)", "private static byte[] parseNoDelimiter(CharSequence string)", "private static int checkDigitCount(int fromIndex, int toIndex, int limit)", "public static boolean isHexDigit(int ch)", "public static int fromHexDigit(int ch)", "private static int fromHexDigits(CharSequence string, int index)", "public static int fromHexDigits(CharSequence string)", "public static int fromHexDigits(CharSequence string, int fromIndex, int toIndex)", "public static long fromHexDigitsToLong(CharSequence string)", "public static long fromHexDigitsToLong(CharSequence string, int fromIndex, int toIndex)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "UPPERCASE_DIGITS", "LOWERCASE_DIGITS", "DIGITS", "HEX_FORMAT", "EMPTY_BYTES", "delimiter", "prefix", "suffix", "digits" ]
}