{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/blob/BlobStoreManager.java",
  "packageName" : "android.app.blob",
  "className" : "Session",
  "comment" : "\n     * Represents an ongoing session of a blob's contribution to the blob store managed by the\n     * system.\n     *\n     * <p> Clients that want to contribute a blob need to first create a {@link Session} using\n     * {@link #createSession(BlobHandle)} and once the session is created, clients can open and\n     * close this session multiple times using {@link #openSession(long)} and\n     * {@link Session#close()} before committing it using\n     * {@link Session#commit(Executor, Consumer)}, at which point system will take\n     * ownership of the blob and the client can no longer make any modifications to the blob's\n     * content.\n     ",
  "variables" : [ {
    "name" : "mSession",
    "type" : "IBlobStoreSession",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ParcelFileDescriptor openWrite(@BytesLong long offsetBytes, @BytesLong long lengthBytes) throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n         * Opens a file descriptor to write a blob into the session.\n         *\n         * <p> The returned file descriptor will start writing data at the requested offset\n         * in the underlying file, which can be used to resume a partially\n         * written file. If a valid file length is specified, the system will\n         * preallocate the underlying disk space to optimize placement on disk.\n         * It is strongly recommended to provide a valid file length when known.\n         *\n         * @param offsetBytes offset into the file to begin writing at, or 0 to\n         *                    start at the beginning of the file.\n         * @param lengthBytes total size of the file being written, used to\n         *                    preallocate the underlying disk space, or -1 if unknown.\n         *                    The system may clear various caches as needed to allocate\n         *                    this space.\n         *\n         * @return a {@link ParcelFileDescriptor} for writing to the blob file.\n         *\n         * @throws IOException when there is an I/O error while opening the file to write.\n         * @throws SecurityException when the caller is not the owner of the session.\n         * @throws IllegalStateException when the caller tries to write to the file after it is\n         *                               abandoned (using {@link #abandon()})\n         *                               or committed (using {@link #commit})\n         *                               or closed (using {@link #close()}).\n         ",
    "links" : [ "ParcelFileDescriptor", "#abandon", "#commit", "#close" ]
  }, {
    "name" : "public ParcelFileDescriptor openRead() throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n         * Opens a file descriptor to read the blob content already written into this session.\n         *\n         * @return a {@link ParcelFileDescriptor} for reading from the blob file.\n         *\n         * @throws IOException when there is an I/O error while opening the file to read.\n         * @throws SecurityException when the caller is not the owner of the session.\n         * @throws IllegalStateException when the caller tries to read the file after it is\n         *                               abandoned (using {@link #abandon()})\n         *                               or closed (using {@link #close()}).\n         ",
    "links" : [ "ParcelFileDescriptor", "#abandon", "#close" ]
  }, {
    "name" : "public long getSize() throws IOException",
    "returnType" : "long",
    "comment" : "\n         * Gets the size of the blob file that was written to the session so far.\n         *\n         * @return the size of the blob file so far.\n         *\n         * @throws IOException when there is an I/O error while opening the file to read.\n         * @throws SecurityException when the caller is not the owner of the session.\n         * @throws IllegalStateException when the caller tries to get the file size after it is\n         *                               abandoned (using {@link #abandon()})\n         *                               or closed (using {@link #close()}).\n         ",
    "links" : [ "#abandon", "#close" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Close this session. It can be re-opened for writing/reading if it has not been\n         * abandoned (using {@link #abandon}) or committed (using {@link #commit}).\n         *\n         * @throws IOException when there is an I/O error while closing the session.\n         * @throws SecurityException when the caller is not the owner of the session.\n         ",
    "links" : [ "#abandon", "#commit" ]
  }, {
    "name" : "public void abandon() throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Abandon this session and delete any data that was written to this session so far.\n         *\n         * @throws IOException when there is an I/O error while abandoning the session.\n         * @throws SecurityException when the caller is not the owner of the session.\n         * @throws IllegalStateException when the caller tries to abandon a session which was\n         *                               already finalized.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void allowPackageAccess(@NonNull String packageName, @NonNull byte[] certificate) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Allow {@code packageName} with a particular signing certificate to access this blob\n         * data once it is committed using a {@link BlobHandle} representing the blob.\n         *\n         * <p> This needs to be called before committing the blob using\n         * {@link #commit(Executor, Consumer)}.\n         *\n         * @param packageName the name of the package which should be allowed to access the blob.\n         * @param certificate the input bytes representing a certificate of type\n         *                    {@link android.content.pm.PackageManager#CERT_INPUT_SHA256}.\n         *\n         * @throws IOException when there is an I/O error while changing the access.\n         * @throws SecurityException when the caller is not the owner of the session.\n         * @throws IllegalStateException when the caller tries to change access for a blob which is\n         *                               already committed.\n         * @throws LimitExceededException when the caller tries to explicitly allow too\n         *                                many packages using this API.\n         ",
    "links" : [ "BlobHandle", "#commit", "android.content.pm.PackageManager#CERT_INPUT_SHA256" ]
  }, {
    "name" : "public boolean isPackageAccessAllowed(@NonNull String packageName, @NonNull byte[] certificate) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if access has been allowed for a {@code packageName} using either\n         * {@link #allowPackageAccess(String, byte[])}.\n         * Otherwise, {@code false}.\n         *\n         * @param packageName the name of the package to check the access for.\n         * @param certificate the input bytes representing a certificate of type\n         *                    {@link android.content.pm.PackageManager#CERT_INPUT_SHA256}.\n         *\n         * @throws IOException when there is an I/O error while getting the access type.\n         * @throws IllegalStateException when the caller tries to get access type from a session\n         *                               which is closed or abandoned.\n         ",
    "links" : [ "#allowPackageAccess", "android.content.pm.PackageManager#CERT_INPUT_SHA256" ]
  }, {
    "name" : "public void allowSameSignatureAccess() throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Allow packages which are signed with the same certificate as the caller to access this\n         * blob data once it is committed using a {@link BlobHandle} representing the blob.\n         *\n         * <p> This needs to be called before committing the blob using\n         * {@link #commit(Executor, Consumer)}.\n         *\n         * @throws IOException when there is an I/O error while changing the access.\n         * @throws SecurityException when the caller is not the owner of the session.\n         * @throws IllegalStateException when the caller tries to change access for a blob which is\n         *                               already committed.\n         ",
    "links" : [ "BlobHandle", "#commit" ]
  }, {
    "name" : "public boolean isSameSignatureAccessAllowed() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if access has been allowed for packages signed with the same\n         * certificate as the caller by using {@link #allowSameSignatureAccess()}.\n         * Otherwise, {@code false}.\n         *\n         * @throws IOException when there is an I/O error while getting the access type.\n         * @throws IllegalStateException when the caller tries to get access type from a session\n         *                               which is closed or abandoned.\n         ",
    "links" : [ "#allowSameSignatureAccess" ]
  }, {
    "name" : "public void allowPublicAccess() throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Allow any app on the device to access this blob data once it is committed using\n         * a {@link BlobHandle} representing the blob.\n         *\n         * <p><strong>Note:</strong> This is only meant to be used from libraries and SDKs where\n         * the apps which we want to allow access is not known ahead of time.\n         * If a blob is being committed to be shared with a particular set of apps, it is highly\n         * recommended to use {@link #allowPackageAccess(String, byte[])} instead.\n         *\n         * <p> This needs to be called before committing the blob using\n         * {@link #commit(Executor, Consumer)}.\n         *\n         * @throws IOException when there is an I/O error while changing the access.\n         * @throws SecurityException when the caller is not the owner of the session.\n         * @throws IllegalStateException when the caller tries to change access for a blob which is\n         *                               already committed.\n         ",
    "links" : [ "BlobHandle", "#allowPackageAccess", "#commit" ]
  }, {
    "name" : "public boolean isPublicAccessAllowed() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if public access has been allowed by using\n         * {@link #allowPublicAccess()}. Otherwise, {@code false}.\n         *\n         * @throws IOException when there is an I/O error while getting the access type.\n         * @throws IllegalStateException when the caller tries to get access type from a session\n         *                               which is closed or abandoned.\n         ",
    "links" : [ "#allowPublicAccess" ]
  }, {
    "name" : "public void commit(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Integer> resultCallback) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Commit the file that was written so far to this session to the blob store maintained by\n         * the system.\n         *\n         * <p> Once this method is called, the session is finalized and no additional\n         * mutations can be performed on the session. If the device reboots\n         * before the session has been finalized, you may commit the session again.\n         *\n         * <p> Note that this commit operation will fail if the hash of the data written so far\n         * to this session does not match with the one used for\n         * {@link BlobHandle#createWithSha256(byte[], CharSequence, long, String)}  BlobHandle}\n         * associated with this session.\n         *\n         * <p> Committing the same data more than once will result in replacing the corresponding\n         * access mode (via calling one of {@link #allowPackageAccess(String, byte[])},\n         * {@link #allowSameSignatureAccess()}, etc) with the latest one.\n         *\n         * @param executor the executor on which result callback will be invoked.\n         * @param resultCallback a callback to receive the commit result. when the result is\n         *                       {@code 0}, it indicates success. Otherwise, failure.\n         *\n         * @throws IOException when there is an I/O error while committing the session.\n         * @throws SecurityException when the caller is not the owner of the session.\n         * @throws IllegalArgumentException when the passed parameters are not valid.\n         * @throws IllegalStateException when the caller tries to commit a session which was\n         *                               already finalized.\n         ",
    "links" : [ "BlobHandle#createWithSha256", "#allowPackageAccess", "#allowSameSignatureAccess" ]
  } ],
  "variableNames" : [ "mSession" ],
  "methodNames" : [ "public ParcelFileDescriptor openWrite(@BytesLong long offsetBytes, @BytesLong long lengthBytes) throws IOException", "public ParcelFileDescriptor openRead() throws IOException", "public long getSize() throws IOException", "public void close() throws IOException", "public void abandon() throws IOException", "public void allowPackageAccess(@NonNull String packageName, @NonNull byte[] certificate) throws IOException", "public boolean isPackageAccessAllowed(@NonNull String packageName, @NonNull byte[] certificate) throws IOException", "public void allowSameSignatureAccess() throws IOException", "public boolean isSameSignatureAccessAllowed() throws IOException", "public void allowPublicAccess() throws IOException", "public boolean isPublicAccessAllowed() throws IOException", "public void commit(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Integer> resultCallback) throws IOException" ]
}