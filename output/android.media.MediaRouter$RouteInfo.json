{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaRouter.java",
  "packageName" : "android.media",
  "className" : "RouteInfo",
  "comment" : "\n     * Information about a media route.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mName",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNameResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatus",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedTypes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGroup",
    "type" : "RouteGroup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCategory",
    "type" : "RouteCategory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlaybackType",
    "type" : "int",
    "comment" : " playback information",
    "links" : [ ]
  }, {
    "name" : "mVolumeMax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolume",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolumeHandling",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlaybackStream",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVcb",
    "type" : "VolumeCallbackInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPresentationDisplay",
    "type" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPresentationDisplayId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceAddress",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlobalRouteId",
    "type" : "String",
    "comment" : " Null if this route only exists as an artifact within this process.",
    "links" : [ ]
  }, {
    "name" : "mRealStatusCode",
    "type" : "int",
    "comment" : " A predetermined connection status that can override mStatus",
    "links" : [ ]
  }, {
    "name" : "mResolvedStatusCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_NONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_SCANNING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_CONNECTING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_AVAILABLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NOT_AVAILABLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_IN_USE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_CONNECTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n         * The default receiver device type of the route indicating the type is unknown.\n         *\n         * @see #getDeviceType\n         ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_TV",
    "type" : "int",
    "comment" : "\n         * A receiver device type of the route indicating the presentation of the media is happening\n         * on a TV.\n         *\n         * @see #getDeviceType\n         ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_SPEAKER",
    "type" : "int",
    "comment" : "\n         * A receiver device type of the route indicating the presentation of the media is happening\n         * on a speaker.\n         *\n         * @see #getDeviceType\n         ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_BLUETOOTH",
    "type" : "int",
    "comment" : "\n         * A receiver device type of the route indicating the presentation of the media is happening\n         * on a bluetooth device such as a bluetooth speaker.\n         *\n         * @see #getDeviceType\n         ",
    "links" : [ ]
  }, {
    "name" : "mTag",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_TYPE_LOCAL",
    "type" : "int",
    "comment" : "\n         * The default playback type, \"local\", indicating the presentation of the media is happening\n         * on the same device (e&#46;g&#46; a phone, a tablet) as where it is controlled from.\n         * @see #getPlaybackType()\n         ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_TYPE_REMOTE",
    "type" : "int",
    "comment" : "\n         * A playback type indicating the presentation of the media is happening on\n         * a different device (i&#46;e&#46; the remote device) than where it is controlled from.\n         * @see #getPlaybackType()\n         ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_VOLUME_FIXED",
    "type" : "int",
    "comment" : "\n         * Playback information indicating the playback volume is fixed, i&#46;e&#46; it cannot be\n         * controlled from this object. An example of fixed playback volume is a remote player,\n         * playing over HDMI where the user prefers to control the volume on the HDMI sink, rather\n         * than attenuate at the source.\n         * @see #getVolumeHandling()\n         ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_VOLUME_VARIABLE",
    "type" : "int",
    "comment" : "\n         * Playback information indicating the playback volume is variable and can be controlled\n         * from this object.\n         * @see #getVolumeHandling()\n         ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_PLAYBACK_MAX_VOLUME",
    "type" : "int",
    "comment" : "\n         * Default playback max volume if not set.\n         * Hard-coded to the same number of steps as AudioService.MAX_STREAM_VOLUME[STREAM_MUSIC]\n         *\n         * @see #getVolumeMax()\n         ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_PLAYBACK_VOLUME",
    "type" : "int",
    "comment" : "\n         * Default playback volume if not set.\n         *\n         * @see #getVolume()\n         ",
    "links" : [ ]
  }, {
    "name" : "mRemoteVolObserver",
    "type" : "IRemoteVolumeObserver.Stub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence getName()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Gets the user-visible name of the route.\n         * <p>\n         * The route name identifies the destination represented by the route.\n         * It may be a user-supplied name, an alias, or device serial number.\n         * </p>\n         *\n         * @return The user-visible name of a media route.  This is the string presented\n         * to users who may select this as the active route.\n         ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getName(Context context)",
    "returnType" : "CharSequence",
    "comment" : "\n         * Return the properly localized/resource user-visible name of this route.\n         * <p>\n         * The route name identifies the destination represented by the route.\n         * It may be a user-supplied name, an alias, or device serial number.\n         * </p>\n         *\n         * @param context Context used to resolve the correct configuration to load\n         * @return The user-visible name of a media route.  This is the string presented\n         * to users who may select this as the active route.\n         ",
    "links" : [ ]
  }, {
    "name" : " CharSequence getName(Resources res)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Gets the user-visible description of the route.\n         * <p>\n         * The route description describes the kind of destination represented by the route.\n         * It may be a user-supplied string, a model number or brand of device.\n         * </p>\n         *\n         * @return The description of the route, or null if none.\n         ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getStatus()",
    "returnType" : "CharSequence",
    "comment" : "\n         * @return The user-visible status for a media route. This may include a description\n         * of the currently playing media, if available.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean setRealStatusCode(int statusCode)",
    "returnType" : "boolean",
    "comment" : "\n         * Set this route's status by predetermined status code. If the caller\n         * should dispatch a route changed event this call will return true;\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean resolveStatusCode()",
    "returnType" : "boolean",
    "comment" : "\n         * Resolves the status code whenever the real status code or selection state\n         * changes.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getStatusCode()",
    "returnType" : "int",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSupportedTypes()",
    "returnType" : "int",
    "comment" : "\n         * @return A media type flag set describing which types this route supports.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceType()",
    "returnType" : "int",
    "comment" : "\n         * Gets the type of the receiver device associated with this route.\n         *\n         * @return The type of the receiver device associated with this route:\n         * {@link #DEVICE_TYPE_BLUETOOTH}, {@link #DEVICE_TYPE_TV}, {@link #DEVICE_TYPE_SPEAKER},\n         * or {@link #DEVICE_TYPE_UNKNOWN}.\n         ",
    "links" : [ "#DEVICE_TYPE_SPEAKER", "#DEVICE_TYPE_UNKNOWN", "#DEVICE_TYPE_TV", "#DEVICE_TYPE_BLUETOOTH" ]
  }, {
    "name" : "public boolean matchesTypes(int types)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public RouteGroup getGroup()",
    "returnType" : "RouteGroup",
    "comment" : "\n         * @return The group that this route belongs to.\n         ",
    "links" : [ ]
  }, {
    "name" : "public RouteCategory getCategory()",
    "returnType" : "RouteCategory",
    "comment" : "\n         * @return the category this route belongs to.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getIconDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n         * Get the icon representing this route.\n         * This icon will be used in picker UIs if available.\n         *\n         * @return the icon representing this route or null if no icon is available\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setTag(Object tag)",
    "returnType" : "void",
    "comment" : "\n         * Set an application-specific tag object for this route.\n         * The application may use this to store arbitrary data associated with the\n         * route for internal tracking.\n         *\n         * <p>Note that the lifespan of a route may be well past the lifespan of\n         * an Activity or other Context; take care that objects you store here\n         * will not keep more data in memory alive than you intend.</p>\n         *\n         * @param tag Arbitrary, app-specific data for this route to hold for later use\n         ",
    "links" : [ ]
  }, {
    "name" : "public Object getTag()",
    "returnType" : "Object",
    "comment" : "\n         * @return The tag object previously set by the application\n         * @see #setTag(Object)\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getPlaybackType()",
    "returnType" : "int",
    "comment" : "\n         * @return the type of playback associated with this route\n         * @see UserRouteInfo#setPlaybackType(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getPlaybackStream()",
    "returnType" : "int",
    "comment" : "\n         * @return the stream over which the playback associated with this route is performed\n         * @see UserRouteInfo#setPlaybackStream(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getVolume()",
    "returnType" : "int",
    "comment" : "\n         * Return the current volume for this route. Depending on the route, this may only\n         * be valid if the route is currently selected.\n         *\n         * @return the volume at which the playback associated with this route is performed\n         * @see UserRouteInfo#setVolume(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestSetVolume(int volume)",
    "returnType" : "void",
    "comment" : "\n         * Request a volume change for this route.\n         * @param volume value between 0 and getVolumeMax\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestUpdateVolume(int direction)",
    "returnType" : "void",
    "comment" : "\n         * Request an incremental volume update for this route.\n         * @param direction Delta to apply to the current volume\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getVolumeMax()",
    "returnType" : "int",
    "comment" : "\n         * @return the maximum volume at which the playback associated with this route is performed\n         * @see UserRouteInfo#setVolumeMax(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getVolumeHandling()",
    "returnType" : "int",
    "comment" : "\n         * @return how volume is handling on the route\n         * @see UserRouteInfo#setVolumeHandling(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Display getPresentationDisplay()",
    "returnType" : "Display",
    "comment" : "\n         * Gets the {@link Display} that should be used by the application to show\n         * a {@link android.app.Presentation} on an external display when this route is selected.\n         * Depending on the route, this may only be valid if the route is currently\n         * selected.\n         * <p>\n         * The preferred presentation display may change independently of the route\n         * being selected or unselected.  For example, the presentation display\n         * of the default system route may change when an external HDMI display is connected\n         * or disconnected even though the route itself has not changed.\n         * </p><p>\n         * This method may return null if there is no external display associated with\n         * the route or if the display is not ready to show UI yet.\n         * </p><p>\n         * The application should listen for changes to the presentation display\n         * using the {@link Callback#onRoutePresentationDisplayChanged} callback and\n         * show or dismiss its {@link android.app.Presentation} accordingly when the display\n         * becomes available or is removed.\n         * </p><p>\n         * This method only makes sense for {@link #ROUTE_TYPE_LIVE_VIDEO live video} routes.\n         * </p>\n         *\n         * @return The preferred presentation display to use when this route is\n         * selected or null if none.\n         *\n         * @see #ROUTE_TYPE_LIVE_VIDEO\n         * @see android.app.Presentation\n         ",
    "links" : [ "android.hardware.display.WifiDisplay", "#onRoutePresentationDisplayChanged", "android.app.Presentation", "#ROUTE_TYPE_LIVE_VIDEO" ]
  }, {
    "name" : "public boolean updatePresentationDisplay()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private Display choosePresentationDisplay()",
    "returnType" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Display[] getAllPresentationDisplays()",
    "returnType" : "Display[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public RouteInfo getDefaultAudioVideo()",
    "returnType" : "RouteInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private boolean displayAddressEquals(Display display)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDeviceAddress()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this route is enabled and may be selected.\n         *\n         * @return True if this route is enabled.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConnecting()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the route is in the process of connecting and is not\n         * yet ready for use.\n         *\n         * @return True if this route is in the process of connecting.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSelected()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefault()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBluetooth()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void select()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setStatusInt(CharSequence status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void routeUpdated()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public CharSequence getName()", "public CharSequence getName(Context context)", " CharSequence getName(Resources res)", "public CharSequence getDescription()", "public CharSequence getStatus()", " boolean setRealStatusCode(int statusCode)", " boolean resolveStatusCode()", "public int getStatusCode()", "public int getSupportedTypes()", "public int getDeviceType()", "public boolean matchesTypes(int types)", "public RouteGroup getGroup()", "public RouteCategory getCategory()", "public Drawable getIconDrawable()", "public void setTag(Object tag)", "public Object getTag()", "public int getPlaybackType()", "public int getPlaybackStream()", "public int getVolume()", "public void requestSetVolume(int volume)", "public void requestUpdateVolume(int direction)", "public int getVolumeMax()", "public int getVolumeHandling()", "public Display getPresentationDisplay()", "public boolean updatePresentationDisplay()", "private Display choosePresentationDisplay()", "public Display[] getAllPresentationDisplays()", "public RouteInfo getDefaultAudioVideo()", "private boolean displayAddressEquals(Display display)", "public String getDeviceAddress()", "public boolean isEnabled()", "public boolean isConnecting()", "public boolean isSelected()", "public boolean isDefault()", "public boolean isBluetooth()", "public void select()", " void setStatusInt(CharSequence status)", " void routeUpdated()", "public String toString()" ],
  "variableNames" : [ "mName", "mNameResId", "mDescription", "mStatus", "mSupportedTypes", "mDeviceType", "mGroup", "mCategory", "mIcon", "mPlaybackType", "mVolumeMax", "mVolume", "mVolumeHandling", "mPlaybackStream", "mVcb", "mPresentationDisplay", "mPresentationDisplayId", "mDeviceAddress", "mEnabled", "mGlobalRouteId", "mRealStatusCode", "mResolvedStatusCode", "STATUS_NONE", "STATUS_SCANNING", "STATUS_CONNECTING", "STATUS_AVAILABLE", "STATUS_NOT_AVAILABLE", "STATUS_IN_USE", "STATUS_CONNECTED", "DEVICE_TYPE_UNKNOWN", "DEVICE_TYPE_TV", "DEVICE_TYPE_SPEAKER", "DEVICE_TYPE_BLUETOOTH", "mTag", "PLAYBACK_TYPE_LOCAL", "PLAYBACK_TYPE_REMOTE", "PLAYBACK_VOLUME_FIXED", "PLAYBACK_VOLUME_VARIABLE", "DEFAULT_PLAYBACK_MAX_VOLUME", "DEFAULT_PLAYBACK_VOLUME", "mRemoteVolObserver" ]
}