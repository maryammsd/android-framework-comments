{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/KeyEvent.java",
  "packageName" : "android.view",
  "className" : "Callback",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when a key down event has occurred.  If you return true,\n         * you can first call {@link KeyEvent#startTracking()\n         * KeyEvent.startTracking()} to have the framework track the event\n         * through its {@link #onKeyUp(int, KeyEvent)} and also call your\n         * {@link #onKeyLongPress(int, KeyEvent)} if it occurs.\n         *\n         * @param keyCode The value in event.getKeyCode().\n         * @param event Description of the key event.\n         *\n         * @return If you handled the event, return true.  If you want to allow\n         *         the event to be handled by the next receiver, return false.\n         ",
    "links" : [ "android.view.KeyEvent#startTracking()", "#onKeyLongPress(int", "#onKeyUp(int" ]
  }, {
    "name" : " boolean onKeyLongPress(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when a long press has occurred.  If you return true,\n         * the final key up will have {@link KeyEvent#FLAG_CANCELED} and\n         * {@link KeyEvent#FLAG_CANCELED_LONG_PRESS} set.  Note that in\n         * order to receive this callback, someone in the event change\n         * <em>must</em> return true from {@link #onKeyDown} <em>and</em>\n         * call {@link KeyEvent#startTracking()} on the event.\n         *\n         * @param keyCode The value in event.getKeyCode().\n         * @param event Description of the key event.\n         *\n         * @return If you handled the event, return true.  If you want to allow\n         *         the event to be handled by the next receiver, return false.\n         ",
    "links" : [ "android.view.KeyEvent#FLAG_CANCELED_LONG_PRESS", "#onKeyDown", "android.view.KeyEvent#startTracking()", "android.view.KeyEvent#FLAG_CANCELED" ]
  }, {
    "name" : " boolean onKeyUp(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when a key up event has occurred.\n         *\n         * @param keyCode The value in event.getKeyCode().\n         * @param event Description of the key event.\n         *\n         * @return If you handled the event, return true.  If you want to allow\n         *         the event to be handled by the next receiver, return false.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean onKeyMultiple(int keyCode, int count, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when a user's interaction with an analog control, such as\n         * flinging a trackball, generates simulated down/up events for the same\n         * key multiple times in quick succession.\n         *\n         * @param keyCode The value in event.getKeyCode().\n         * @param count Number of pairs as returned by event.getRepeatCount().\n         * @param event Description of the key event.\n         *\n         * @return If you handled the event, return true.  If you want to allow\n         *         the event to be handled by the next receiver, return false.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean onKeyDown(int keyCode, KeyEvent event)", " boolean onKeyLongPress(int keyCode, KeyEvent event)", " boolean onKeyUp(int keyCode, KeyEvent event)", " boolean onKeyMultiple(int keyCode, int count, KeyEvent event)" ],
  "variableNames" : [ ]
}