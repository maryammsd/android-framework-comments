{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/WindowMetricsController.java",
  "packageName" : "android.window",
  "className" : "WindowMetricsController",
  "comment" : "\n * A controller to handle {@link android.view.WindowMetrics} related APIs, which are\n * <ol>\n *     <li>{@link WindowManager#getCurrentWindowMetrics()}</li>\n *     <li>{@link WindowManager#getMaximumWindowMetrics()}</li>\n *     <li>{@link WindowManager#getPossibleMaximumWindowMetrics(int)}</li>\n * </ol>\n *\n * @hide\n ",
  "links" : [ "android.view.WindowManager#getPossibleMaximumWindowMetrics(int)", "android.view.WindowMetrics", "android.view.WindowManager#getCurrentWindowMetrics()", "android.view.WindowManager#getMaximumWindowMetrics()" ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public WindowMetrics getCurrentWindowMetrics()",
    "returnType" : "WindowMetrics",
    "comment" : " @see WindowManager#getCurrentWindowMetrics() ",
    "links" : [ ]
  }, {
    "name" : "public WindowMetrics getMaximumWindowMetrics()",
    "returnType" : "WindowMetrics",
    "comment" : " @see WindowManager#getMaximumWindowMetrics() ",
    "links" : [ ]
  }, {
    "name" : "private WindowMetrics getWindowMetricsInternal(boolean isMaximum)",
    "returnType" : "WindowMetrics",
    "comment" : "\n     * The core implementation to obtain {@link WindowMetrics}\n     *\n     * @param isMaximum {@code true} to obtain {@link WindowManager#getCurrentWindowMetrics()}.\n     *                  {@code false} to obtain {@link WindowManager#getMaximumWindowMetrics()}.\n     ",
    "links" : [ "android.view.WindowMetrics", "android.view.WindowManager#getCurrentWindowMetrics()", "android.view.WindowManager#getMaximumWindowMetrics()" ]
  }, {
    "name" : "private static WindowInsets getWindowInsetsFromServerForDisplay(int displayId, IBinder token, Rect bounds, boolean isScreenRound, int activityType)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Retrieves WindowInsets for the given context and display, given the window bounds.\n     *\n     * @param displayId the ID of the logical display to calculate insets for\n     * @param token the token of Activity or WindowContext\n     * @param bounds the window bounds to calculate insets for\n     * @param isScreenRound if the display identified by displayId is round\n     * @param activityType the activity type of the window to calculate insets for\n     * @return WindowInsets calculated for the given window bounds, on the given display\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<WindowMetrics> getPossibleMaximumWindowMetrics(int displayId)",
    "returnType" : "Set<WindowMetrics>",
    "comment" : " @see WindowManager#getPossibleMaximumWindowMetrics(int) ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public WindowMetrics getCurrentWindowMetrics()", "public WindowMetrics getMaximumWindowMetrics()", "private WindowMetrics getWindowMetricsInternal(boolean isMaximum)", "private static WindowInsets getWindowInsetsFromServerForDisplay(int displayId, IBinder token, Rect bounds, boolean isScreenRound, int activityType)", "public Set<WindowMetrics> getPossibleMaximumWindowMetrics(int displayId)" ],
  "variableNames" : [ "mContext" ]
}