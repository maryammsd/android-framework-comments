{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/AxesWalker.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "AxesWalker",
  "comment" : "\n * Serves as common interface for axes Walkers, and stores common\n * state variables.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_dtm",
    "type" : "DTM",
    "comment" : "\n   * The DTM for the root.  This can not be used, or must be changed, \n   * for the filter walker, or any walker that can have nodes \n   * from multiple documents.\n   * Never, ever, access this value without going through getDTM(int node).\n   ",
    "links" : [ ]
  }, {
    "name" : "m_root",
    "type" : "int",
    "comment" : "\n   *  The root node of the TreeWalker, as specified when it was created.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_currentNode",
    "type" : "int",
    "comment" : "\n   *  The node at which the TreeWalker is currently positioned.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_isFresh",
    "type" : "boolean",
    "comment" : " True if an itteration has not begun.  ",
    "links" : [ ]
  }, {
    "name" : "m_nextWalker",
    "type" : "AxesWalker",
    "comment" : " The next walker in the location step chain.\n   *  @serial  ",
    "links" : [ ]
  }, {
    "name" : "m_prevWalker",
    "type" : "AxesWalker",
    "comment" : " The previous walker in the location step chain, or null.\n   *  @serial   ",
    "links" : [ ]
  }, {
    "name" : "m_axis",
    "type" : "int",
    "comment" : " The traversal axis from where the nodes will be filtered. ",
    "links" : [ ]
  }, {
    "name" : "m_traverser",
    "type" : "DTMAxisTraverser",
    "comment" : " The DTM inner traversal class, that corresponds to the super axis. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final WalkingIterator wi()",
    "returnType" : "WalkingIterator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void init(Compiler compiler, int opPos, int stepType) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Initialize an AxesWalker during the parse of the XPath expression.\n   *\n   * @param compiler The Compiler object that has information about this \n   *                 walker in the op map.\n   * @param opPos The op code position of this location step.\n   * @param stepType  The type of location step.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Get a cloned AxesWalker.\n   *\n   * @return A new AxesWalker that can be used without mutating this one.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : " AxesWalker cloneDeep(WalkingIterator cloneOwner, Vector cloneList) throws CloneNotSupportedException",
    "returnType" : "AxesWalker",
    "comment" : "\n   * Do a deep clone of this walker, including next and previous walkers.\n   * If the this AxesWalker is on the clone list, don't clone but \n   * return the already cloned version.\n   * \n   * @param cloneOwner non-null reference to the cloned location path \n   *                   iterator to which this clone will be added.\n   * @param cloneList non-null vector of sources in odd elements, and the \n   *                  corresponding clones in even vectors.\n   * \n   * @return non-null clone, which may be a new clone, or may be a clone \n   *         contained on the cloneList.\n   ",
    "links" : [ ]
  }, {
    "name" : " static AxesWalker findClone(AxesWalker key, Vector cloneList)",
    "returnType" : "AxesWalker",
    "comment" : "\n   * Find a clone that corresponds to the key argument.\n   * \n   * @param key The original AxesWalker for which there may be a clone.\n   * @param cloneList vector of sources in odd elements, and the \n   *                  corresponding clones in even vectors, may be null.\n   * \n   * @return A clone that corresponds to the key, or null if key not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   * Detaches the walker from the set which it iterated over, releasing\n   * any computational resources and placing the iterator in the INVALID\n   * state.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getRoot()",
    "returnType" : "int",
    "comment" : "\n   * The root node of the TreeWalker, as specified in setRoot(int root).\n   * Note that this may actually be below the current node.\n   *\n   * @return The context node of the step.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAnalysisBits()",
    "returnType" : "int",
    "comment" : " \n   * Get the analysis bits for this walker, as defined in the WalkerFactory.\n   * @return One of WalkerFactory#BIT_DESCENDANT, etc.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRoot(int root)",
    "returnType" : "void",
    "comment" : "\n   * Set the root node of the TreeWalker.\n   * (Not part of the DOM2 TreeWalker interface).\n   *\n   * @param root The context node of this step.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getCurrentNode()",
    "returnType" : "int",
    "comment" : "\n   * The node at which the TreeWalker is currently positioned.\n   * <br> The value must not be null. Alterations to the DOM tree may cause\n   * the current node to no longer be accepted by the TreeWalker's\n   * associated filter. currentNode may also be explicitly set to any node,\n   * whether or not it is within the subtree specified by the root node or\n   * would be accepted by the filter and whatToShow flags. Further\n   * traversal occurs relative to currentNode even if it is not part of the\n   * current view by applying the filters in the requested direction (not\n   * changing currentNode where no traversal is possible).\n   *\n   * @return The node at which the TreeWalker is currently positioned, only null \n   * if setRoot has not yet been called.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setNextWalker(AxesWalker walker)",
    "returnType" : "void",
    "comment" : "\n   * Set the next walker in the location step chain.\n   *\n   *\n   * @param walker Reference to AxesWalker derivative, or may be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public AxesWalker getNextWalker()",
    "returnType" : "AxesWalker",
    "comment" : "\n   * Get the next walker in the location step chain.\n   *\n   *\n   * @return Reference to AxesWalker derivative, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPrevWalker(AxesWalker walker)",
    "returnType" : "void",
    "comment" : "\n   * Set or clear the previous walker reference in the location step chain.\n   *\n   *\n   * @param walker Reference to previous walker reference in the location \n   *               step chain, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public AxesWalker getPrevWalker()",
    "returnType" : "AxesWalker",
    "comment" : "\n   * Get the previous walker reference in the location step chain.\n   *\n   *\n   * @return Reference to previous walker reference in the location \n   *               step chain, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "private int returnNextNode(int n)",
    "returnType" : "int",
    "comment" : "\n   * This is simply a way to bottle-neck the return of the next node, for \n   * diagnostic purposes.\n   *\n   * @param n Node to return, or null.\n   *\n   * @return The argument.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getNextNode()",
    "returnType" : "int",
    "comment" : "\n   * Get the next node in document order on the axes.\n   *\n   * @return the next node in document order on the axes, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int nextNode()",
    "returnType" : "int",
    "comment" : "\n   *  Moves the <code>TreeWalker</code> to the next visible node in document\n   * order relative to the current node, and returns the new node. If the\n   * current node has no next node,  or if the search for nextNode attempts\n   * to step upward from the TreeWalker's root node, returns\n   * <code>null</code> , and retains the current node.\n   * @return  The new node, or <code>null</code> if the current node has no\n   *   next node  in the TreeWalker's logical view.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLastPos(XPathContext xctxt)",
    "returnType" : "int",
    "comment" : "\n   * Get the index of the last node that can be itterated to.\n   *\n   *\n   * @param xctxt XPath runtime context.\n   *\n   * @return the index of the last node that can be itterated to.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultDTM(DTM dtm)",
    "returnType" : "void",
    "comment" : "\n   * Set the DTM for this walker.\n   * \n   * @param dtm Non-null reference to a DTM.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTM getDTM(int node)",
    "returnType" : "DTM",
    "comment" : "\n   * Get the DTM for this walker.\n   * \n   * @return Non-null reference to a DTM.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDocOrdered()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if all the nodes in the iteration well be returned in document \n   * order.\n   * Warning: This can only be called after setRoot has been called!\n   * \n   * @return true as a default.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * Returns the axis being iterated, if it is known.\n   * \n   * @return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple \n   * types.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * This will traverse the heararchy, calling the visitor for \n   * each member.  If the called visitor method returns \n   * false, the subtree should not be called.\n   * \n   * @param owner The owner of the visitor, where that path may be \n   *              rewritten if needed.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getExpression()",
    "returnType" : "Expression",
    "comment" : "\n   * @see ExpressionOwner#getExpression()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setExpression(Expression exp)",
    "returnType" : "void",
    "comment" : "\n   * @see ExpressionOwner#setExpression(Expression)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Expression#deepEquals(Expression)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final WalkingIterator wi()", "public void init(Compiler compiler, int opPos, int stepType) throws javax.xml.transform.TransformerException", "public Object clone() throws CloneNotSupportedException", " AxesWalker cloneDeep(WalkingIterator cloneOwner, Vector cloneList) throws CloneNotSupportedException", " static AxesWalker findClone(AxesWalker key, Vector cloneList)", "public void detach()", "public int getRoot()", "public int getAnalysisBits()", "public void setRoot(int root)", "public final int getCurrentNode()", "public void setNextWalker(AxesWalker walker)", "public AxesWalker getNextWalker()", "public void setPrevWalker(AxesWalker walker)", "public AxesWalker getPrevWalker()", "private int returnNextNode(int n)", "protected int getNextNode()", "public int nextNode()", "public int getLastPos(XPathContext xctxt)", "public void setDefaultDTM(DTM dtm)", "public DTM getDTM(int node)", "public boolean isDocOrdered()", "public int getAxis()", "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)", "public Expression getExpression()", "public void setExpression(Expression exp)", "public boolean deepEquals(Expression expr)" ],
  "variableNames" : [ "serialVersionUID", "m_dtm", "m_root", "m_currentNode", "m_isFresh", "m_nextWalker", "m_prevWalker", "m_axis", "m_traverser" ]
}