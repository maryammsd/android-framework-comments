{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/http/SslCertificate.java",
  "packageName" : "android.net.http",
  "className" : "SslCertificate",
  "comment" : "\n * SSL certificate info (certificate details) class\n ",
  "variables" : [ {
    "name" : "ISO_8601_DATE_FORMAT",
    "type" : "String",
    "comment" : "\n     * SimpleDateFormat pattern for an ISO 8601 date\n     ",
    "links" : [ ]
  }, {
    "name" : "mIssuedTo",
    "type" : "DName",
    "comment" : "\n     * Name of the entity this certificate is issued to\n     ",
    "links" : [ ]
  }, {
    "name" : "mIssuedBy",
    "type" : "DName",
    "comment" : "\n     * Name of the entity this certificate is issued by\n     ",
    "links" : [ ]
  }, {
    "name" : "mValidNotBefore",
    "type" : "Date",
    "comment" : "\n     * Not-before date from the validity period\n     ",
    "links" : [ ]
  }, {
    "name" : "mValidNotAfter",
    "type" : "Date",
    "comment" : "\n     * Not-after date from the validity period\n     ",
    "links" : [ ]
  }, {
    "name" : "mX509Certificate",
    "type" : "X509Certificate",
    "comment" : "\n     * The original source certificate, if available.\n     *\n     * TODO If deprecated constructors are removed, this should always\n     * be available, and saveState and restoreState can be simplified\n     * to be unconditional.\n     ",
    "links" : [ ]
  }, {
    "name" : "ISSUED_TO",
    "type" : "String",
    "comment" : "\n     * Bundle key names\n     ",
    "links" : [ ]
  }, {
    "name" : "ISSUED_BY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALID_NOT_BEFORE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALID_NOT_AFTER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "X509_CERTIFICATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Bundle saveState(SslCertificate certificate)",
    "returnType" : "Bundle",
    "comment" : "\n     * Saves the certificate state to a bundle\n     * @param certificate The SSL certificate to store\n     * @return A bundle with the certificate stored in it or null if fails\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SslCertificate restoreState(Bundle bundle)",
    "returnType" : "SslCertificate",
    "comment" : "\n     * Restores the certificate stored in the bundle\n     * @param bundle The bundle with the certificate state stored in it\n     * @return The SSL certificate stored in the bundle or null if fails\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getValidNotBeforeDate()",
    "returnType" : "Date",
    "comment" : "\n     * @return Not-before date from the certificate validity period or\n     * \"\" if none has been set\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValidNotBefore()",
    "returnType" : "String",
    "comment" : "\n     * @return Not-before date from the certificate validity period in\n     * ISO 8601 format or \"\" if none has been set\n     *\n     * @deprecated Use {@link #getValidNotBeforeDate()}\n     ",
    "links" : [ "#getValidNotBeforeDate()" ]
  }, {
    "name" : "public Date getValidNotAfterDate()",
    "returnType" : "Date",
    "comment" : "\n     * @return Not-after date from the certificate validity period or\n     * \"\" if none has been set\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValidNotAfter()",
    "returnType" : "String",
    "comment" : "\n     * @return Not-after date from the certificate validity period in\n     * ISO 8601 format or \"\" if none has been set\n     *\n     * @deprecated Use {@link #getValidNotAfterDate()}\n     ",
    "links" : [ "#getValidNotAfterDate()" ]
  }, {
    "name" : "public DName getIssuedTo()",
    "returnType" : "DName",
    "comment" : "\n     * @return Issued-to distinguished name or null if none has been set\n     ",
    "links" : [ ]
  }, {
    "name" : "public DName getIssuedBy()",
    "returnType" : "DName",
    "comment" : "\n     * @return Issued-by distinguished name or null if none has been set\n     ",
    "links" : [ ]
  }, {
    "name" : "public X509Certificate getX509Certificate()",
    "returnType" : "X509Certificate",
    "comment" : "\n     * @return The {@code X509Certificate} used to create this {@code SslCertificate} or\n     * {@code null} if no certificate was provided.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getSerialNumber(X509Certificate x509Certificate)",
    "returnType" : "String",
    "comment" : "\n     * Convenience for UI presentation, not intended as public API.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDigest(X509Certificate x509Certificate, String algorithm)",
    "returnType" : "String",
    "comment" : "\n     * Convenience for UI presentation, not intended as public API.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final String fingerprint(byte[] bytes)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * @return A string representation of this certificate for debugging\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Date parseDate(String string)",
    "returnType" : "Date",
    "comment" : "\n     * Parse an ISO 8601 date converting ParseExceptions to a null result;\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String formatDate(Date date)",
    "returnType" : "String",
    "comment" : "\n     * Format a date as an ISO 8601 string, return \"\" for a null date\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Date cloneDate(Date date)",
    "returnType" : "Date",
    "comment" : "\n     * Clone a possibly null Date\n     ",
    "links" : [ ]
  }, {
    "name" : "public View inflateCertificateView(Context context)",
    "returnType" : "View",
    "comment" : "\n     * Inflates the SSL certificate view (helper method).\n     * @return The resultant certificate view with issued-to, issued-by,\n     * issued-on, expires-on, and possibly other fields set.\n     *\n     * @hide Used by Browser and Settings\n     ",
    "links" : [ ]
  }, {
    "name" : "private String formatCertificateDate(Context context, Date certificateDate)",
    "returnType" : "String",
    "comment" : "\n     * Formats the certificate date to a properly localized date string.\n     * @return Properly localized version of the certificate date string and\n     * the \"\" if it fails to localize.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "ISO_8601_DATE_FORMAT", "mIssuedTo", "mIssuedBy", "mValidNotBefore", "mValidNotAfter", "mX509Certificate", "ISSUED_TO", "ISSUED_BY", "VALID_NOT_BEFORE", "VALID_NOT_AFTER", "X509_CERTIFICATE" ],
  "methodNames" : [ "public static Bundle saveState(SslCertificate certificate)", "public static SslCertificate restoreState(Bundle bundle)", "public Date getValidNotBeforeDate()", "public String getValidNotBefore()", "public Date getValidNotAfterDate()", "public String getValidNotAfter()", "public DName getIssuedTo()", "public DName getIssuedBy()", "public X509Certificate getX509Certificate()", "private static String getSerialNumber(X509Certificate x509Certificate)", "private static String getDigest(X509Certificate x509Certificate, String algorithm)", "private static final String fingerprint(byte[] bytes)", "public String toString()", "private static Date parseDate(String string)", "private static String formatDate(Date date)", "private static Date cloneDate(Date date)", "public View inflateCertificateView(Context context)", "private String formatCertificateDate(Context context, Date certificateDate)" ]
}