{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ConcurrentHashMap.java",
  "packageName" : "java.util.concurrent",
  "className" : "TreeBin",
  "comment" : "\n     * TreeNodes used at the heads of bins. TreeBins do not hold user\n     * keys or values, but instead point to list of TreeNodes and\n     * their root. They also maintain a parasitic read-write lock\n     * forcing writers (who hold bin lock) to wait for readers (who do\n     * not) to complete before tree restructuring operations.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "root",
    "type" : "TreeNode<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "first",
    "type" : "TreeNode<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "waiter",
    "type" : "Thread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lockState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WRITER",
    "type" : "int",
    "comment" : " set while holding write lock",
    "links" : [ ]
  }, {
    "name" : "WAITER",
    "type" : "int",
    "comment" : " set when waiting for write lock",
    "links" : [ ]
  }, {
    "name" : "READER",
    "type" : "int",
    "comment" : " increment value for setting read lock",
    "links" : [ ]
  }, {
    "name" : "LOCKSTATE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static int tieBreakOrder(Object a, Object b)",
    "returnType" : "int",
    "comment" : "\n         * Tie-breaking utility for ordering insertions when equal\n         * hashCodes and non-comparable. We don't require a total\n         * order, just a consistent insertion rule to maintain\n         * equivalence across rebalancings. Tie-breaking further than\n         * necessary simplifies testing a bit.\n         ",
    "links" : [ ]
  }, {
    "name" : "private final void lockRoot()",
    "returnType" : "void",
    "comment" : "\n         * Acquires write lock for tree restructuring.\n         ",
    "links" : [ ]
  }, {
    "name" : "private final void unlockRoot()",
    "returnType" : "void",
    "comment" : "\n         * Releases write lock for tree restructuring.\n         ",
    "links" : [ ]
  }, {
    "name" : "private final void contendedLock()",
    "returnType" : "void",
    "comment" : "\n         * Possibly blocks awaiting root lock.\n         ",
    "links" : [ ]
  }, {
    "name" : " final Node<K, V> find(int h, Object k)",
    "returnType" : "Node<K, V>",
    "comment" : "\n         * Returns matching node or null if none. Tries to search\n         * using tree comparisons from root, but continues linear\n         * search when lock not available.\n         ",
    "links" : [ ]
  }, {
    "name" : " final TreeNode<K, V> putTreeVal(int h, K k, V v)",
    "returnType" : "TreeNode<K, V>",
    "comment" : "\n         * Finds or adds a node.\n         * @return null if added\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean removeTreeNode(TreeNode<K, V> p)",
    "returnType" : "boolean",
    "comment" : "\n         * Removes the given node, that must be present before this\n         * call.  This is messier than typical red-black deletion code\n         * because we cannot swap the contents of an interior node\n         * with a leaf successor that is pinned by \"next\" pointers\n         * that are accessible independently of lock. So instead we\n         * swap the tree linkages.\n         *\n         * @return true if now too small, so should be untreeified\n         ",
    "links" : [ ]
  }, {
    "name" : " static TreeNode<K, V> rotateLeft(TreeNode<K, V> root, TreeNode<K, V> p)",
    "returnType" : "TreeNode<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static TreeNode<K, V> rotateRight(TreeNode<K, V> root, TreeNode<K, V> p)",
    "returnType" : "TreeNode<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static TreeNode<K, V> balanceInsertion(TreeNode<K, V> root, TreeNode<K, V> x)",
    "returnType" : "TreeNode<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static TreeNode<K, V> balanceDeletion(TreeNode<K, V> root, TreeNode<K, V> x)",
    "returnType" : "TreeNode<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean checkInvariants(TreeNode<K, V> t)",
    "returnType" : "boolean",
    "comment" : "\n         * Checks invariants recursively for the tree of Nodes rooted at t.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static int tieBreakOrder(Object a, Object b)", "private final void lockRoot()", "private final void unlockRoot()", "private final void contendedLock()", " final Node<K, V> find(int h, Object k)", " final TreeNode<K, V> putTreeVal(int h, K k, V v)", " final boolean removeTreeNode(TreeNode<K, V> p)", " static TreeNode<K, V> rotateLeft(TreeNode<K, V> root, TreeNode<K, V> p)", " static TreeNode<K, V> rotateRight(TreeNode<K, V> root, TreeNode<K, V> p)", " static TreeNode<K, V> balanceInsertion(TreeNode<K, V> root, TreeNode<K, V> x)", " static TreeNode<K, V> balanceDeletion(TreeNode<K, V> root, TreeNode<K, V> x)", " static boolean checkInvariants(TreeNode<K, V> t)" ],
  "variableNames" : [ "root", "first", "waiter", "lockState", "WRITER", "WAITER", "READER", "LOCKSTATE" ]
}