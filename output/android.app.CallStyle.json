{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "CallStyle",
  "comment" : "\n     * Helper class for generating large-format notifications that include a large image attachment.\n     *\n     * Here's how you'd set the <code>CallStyle</code> on a notification:\n     * <pre class=\"prettyprint\">\n     * Notification notif = new Notification.Builder(mContext)\n     *     .setSmallIcon(R.drawable.new_post)\n     *     .setStyle(Notification.CallStyle.forIncomingCall(caller, declineIntent, answerIntent))\n     *     .build();\n     * </pre>\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEBUG_NEW_ACTION_LAYOUT",
    "type" : "boolean",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CALL_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n         * Unknown call type.\n         *\n         * See {@link #EXTRA_CALL_TYPE}.\n         ",
    "links" : [ "#EXTRA_CALL_TYPE" ]
  }, {
    "name" : "CALL_TYPE_INCOMING",
    "type" : "int",
    "comment" : "\n         *  Call type for incoming calls.\n         *\n         *  See {@link #EXTRA_CALL_TYPE}.\n         ",
    "links" : [ "#EXTRA_CALL_TYPE" ]
  }, {
    "name" : "CALL_TYPE_ONGOING",
    "type" : "int",
    "comment" : "\n         * Call type for ongoing calls.\n         *\n         * See {@link #EXTRA_CALL_TYPE}.\n         ",
    "links" : [ "#EXTRA_CALL_TYPE" ]
  }, {
    "name" : "CALL_TYPE_SCREENING",
    "type" : "int",
    "comment" : "\n         * Call type for calls that are being screened.\n         *\n         * See {@link #EXTRA_CALL_TYPE}.\n         ",
    "links" : [ "#EXTRA_CALL_TYPE" ]
  }, {
    "name" : "KEY_ACTION_PRIORITY",
    "type" : "String",
    "comment" : "\n         * This is a key used privately on the action.extras to give spacing priority\n         * to the required call actions\n         ",
    "links" : [ ]
  }, {
    "name" : "mCallType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerson",
    "type" : "Person",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnswerIntent",
    "type" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeclineIntent",
    "type" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHangUpIntent",
    "type" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsVideo",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnswerButtonColor",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeclineButtonColor",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerificationIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerificationText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CallStyle forIncomingCall(@NonNull Person person, @NonNull PendingIntent declineIntent, @NonNull PendingIntent answerIntent)",
    "returnType" : "CallStyle",
    "comment" : "\n         * Create a CallStyle for an incoming call.\n         * This notification will have a decline and an answer action, will allow a single\n         * custom {@link Builder#addAction(Action) action}, and will have a default\n         * {@link Builder#setContentText(CharSequence) content text} for an incoming call.\n         *\n         * @param person        The person displayed as the caller.\n         *                      The person also needs to have a non-empty name associated with it.\n         * @param declineIntent The intent to be sent when the user taps the decline action\n         * @param answerIntent  The intent to be sent when the user taps the answer action\n         ",
    "links" : [ "android.text.SpannableStringBuilder#setContentText(CharSequence)", "android.text.SpannableStringBuilder#addAction(Action)" ]
  }, {
    "name" : "public static CallStyle forOngoingCall(@NonNull Person person, @NonNull PendingIntent hangUpIntent)",
    "returnType" : "CallStyle",
    "comment" : "\n         * Create a CallStyle for an ongoing call.\n         * This notification will have a hang up action, will allow up to two\n         * custom {@link Builder#addAction(Action) actions}, and will have a default\n         * {@link Builder#setContentText(CharSequence) content text} for an ongoing call.\n         *\n         * @param person       The person displayed as being on the other end of the call.\n         *                     The person also needs to have a non-empty name associated with it.\n         * @param hangUpIntent The intent to be sent when the user taps the hang up action\n         ",
    "links" : [ "android.text.SpannableStringBuilder#setContentText(CharSequence)", "android.text.SpannableStringBuilder#addAction(Action)" ]
  }, {
    "name" : "public static CallStyle forScreeningCall(@NonNull Person person, @NonNull PendingIntent hangUpIntent, @NonNull PendingIntent answerIntent)",
    "returnType" : "CallStyle",
    "comment" : "\n         * Create a CallStyle for a call that is being screened.\n         * This notification will have a hang up and an answer action, will allow a single\n         * custom {@link Builder#addAction(Action) action}, and will have a default\n         * {@link Builder#setContentText(CharSequence) content text} for a call that is being\n         * screened.\n         *\n         * @param person       The person displayed as the caller.\n         *                     The person also needs to have a non-empty name associated with it.\n         * @param hangUpIntent The intent to be sent when the user taps the hang up action\n         * @param answerIntent The intent to be sent when the user taps the answer action\n         ",
    "links" : [ "android.text.SpannableStringBuilder#setContentText(CharSequence)", "android.text.SpannableStringBuilder#addAction(Action)" ]
  }, {
    "name" : "public CallStyle setIsVideo(boolean isVideo)",
    "returnType" : "CallStyle",
    "comment" : "\n         * Sets whether the call is a video call, which may affect the icons or text used on the\n         * required action buttons.\n         ",
    "links" : [ ]
  }, {
    "name" : "public CallStyle setVerificationIcon(@Nullable Icon verificationIcon)",
    "returnType" : "CallStyle",
    "comment" : "\n         * Optional icon to be displayed with {@link #setVerificationText(CharSequence) text}\n         * as a verification status of the caller.\n         ",
    "links" : [ "#setVerificationText(CharSequence)" ]
  }, {
    "name" : "public CallStyle setVerificationText(@Nullable CharSequence verificationText)",
    "returnType" : "CallStyle",
    "comment" : "\n         * Optional text to be displayed with an {@link #setVerificationIcon(Icon) icon}\n         * as a verification status of the caller.\n         ",
    "links" : [ "#setVerificationIcon(Icon)" ]
  }, {
    "name" : "public CallStyle setAnswerButtonColorHint(@ColorInt int color)",
    "returnType" : "CallStyle",
    "comment" : "\n         * Optional color to be used as a hint for the Answer action button's color.\n         * The system may change this color to ensure sufficient contrast with the background.\n         * The system may choose to disregard this hint if the notification is not colorized.\n         ",
    "links" : [ ]
  }, {
    "name" : "public CallStyle setDeclineButtonColorHint(@ColorInt int color)",
    "returnType" : "CallStyle",
    "comment" : "\n         * Optional color to be used as a hint for the Decline or Hang Up action button's color.\n         * The system may change this color to ensure sufficient contrast with the background.\n         * The system may choose to disregard this hint if the notification is not colorized.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Notification buildStyled(Notification wip)",
    "returnType" : "Notification",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean displayCustomViewInline()",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void purgeResources()",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void reduceImageSizes(Context context)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeContentView(boolean increasedHeight)",
    "returnType" : "RemoteViews",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeHeadsUpContentView(boolean increasedHeight)",
    "returnType" : "RemoteViews",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeCompactHeadsUpContentView()",
    "returnType" : "RemoteViews",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeBigContentView()",
    "returnType" : "RemoteViews",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private Action makeNegativeAction()",
    "returnType" : "Action",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Action makeAnswerAction()",
    "returnType" : "Action",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Action makeAction(@DrawableRes int icon, @StringRes int title, @ColorInt Integer colorInt, @ColorRes int defaultColorRes, PendingIntent intent)",
    "returnType" : "Action",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isActionAddedByCallStyle(Action action)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<Action> getActionsListWithSystemActions()",
    "returnType" : "ArrayList<Action>",
    "comment" : "\n         * Gets the actions list for the call with the answer/decline/hangUp actions inserted in\n         * the correct place.  This returns the correct result even if the system actions have\n         * already been added, and even if more actions were added since then.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private RemoteViews makeCallLayout(int viewType)",
    "returnType" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void bindCallerVerification(RemoteViews contentView, StandardTemplateParams p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getDefaultText()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private void fixTitleAndTextExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void restoreFromExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSummaryInHeader()",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean areNotificationsVisiblyDifferent(Style other)",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static CallStyle forIncomingCall(@NonNull Person person, @NonNull PendingIntent declineIntent, @NonNull PendingIntent answerIntent)", "public static CallStyle forOngoingCall(@NonNull Person person, @NonNull PendingIntent hangUpIntent)", "public static CallStyle forScreeningCall(@NonNull Person person, @NonNull PendingIntent hangUpIntent, @NonNull PendingIntent answerIntent)", "public CallStyle setIsVideo(boolean isVideo)", "public CallStyle setVerificationIcon(@Nullable Icon verificationIcon)", "public CallStyle setVerificationText(@Nullable CharSequence verificationText)", "public CallStyle setAnswerButtonColorHint(@ColorInt int color)", "public CallStyle setDeclineButtonColorHint(@ColorInt int color)", "public Notification buildStyled(Notification wip)", "public boolean displayCustomViewInline()", "public void purgeResources()", "public void reduceImageSizes(Context context)", "public RemoteViews makeContentView(boolean increasedHeight)", "public RemoteViews makeHeadsUpContentView(boolean increasedHeight)", "public RemoteViews makeCompactHeadsUpContentView()", "public RemoteViews makeBigContentView()", "private Action makeNegativeAction()", "private Action makeAnswerAction()", "private Action makeAction(@DrawableRes int icon, @StringRes int title, @ColorInt Integer colorInt, @ColorRes int defaultColorRes, PendingIntent intent)", "private boolean isActionAddedByCallStyle(Action action)", "public ArrayList<Action> getActionsListWithSystemActions()", "private RemoteViews makeCallLayout(int viewType)", "private void bindCallerVerification(RemoteViews contentView, StandardTemplateParams p)", "private String getDefaultText()", "public void addExtras(Bundle extras)", "private void fixTitleAndTextExtras(Bundle extras)", "protected void restoreFromExtras(Bundle extras)", "public boolean hasSummaryInHeader()", "public boolean areNotificationsVisiblyDifferent(Style other)" ],
  "variableNames" : [ "DEBUG_NEW_ACTION_LAYOUT", "CALL_TYPE_UNKNOWN", "CALL_TYPE_INCOMING", "CALL_TYPE_ONGOING", "CALL_TYPE_SCREENING", "KEY_ACTION_PRIORITY", "mCallType", "mPerson", "mAnswerIntent", "mDeclineIntent", "mHangUpIntent", "mIsVideo", "mAnswerButtonColor", "mDeclineButtonColor", "mVerificationIcon", "mVerificationText" ]
}