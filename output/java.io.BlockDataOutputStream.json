{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/ObjectOutputStream.java",
  "packageName" : "java.io",
  "className" : "BlockDataOutputStream",
  "comment" : "\n     * Buffered output stream with two modes: in default mode, outputs data in\n     * same format as DataOutputStream; in \"block data\" mode, outputs data\n     * bracketed by block data markers (see object serialization specification\n     * for details).\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MAX_BLOCK_SIZE",
    "type" : "int",
    "comment" : " maximum data block length ",
    "links" : [ ]
  }, {
    "name" : "MAX_HEADER_SIZE",
    "type" : "int",
    "comment" : " maximum data block header length ",
    "links" : [ ]
  }, {
    "name" : "CHAR_BUF_SIZE",
    "type" : "int",
    "comment" : " (tunable) length of char buffer (for writing strings) ",
    "links" : [ ]
  }, {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : " buffer for writing general/block data ",
    "links" : [ ]
  }, {
    "name" : "hbuf",
    "type" : "byte[]",
    "comment" : " buffer for writing block data headers ",
    "links" : [ ]
  }, {
    "name" : "cbuf",
    "type" : "char[]",
    "comment" : " char buffer for fast string writes ",
    "links" : [ ]
  }, {
    "name" : "blkmode",
    "type" : "boolean",
    "comment" : " block data mode ",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : " current offset into buf ",
    "links" : [ ]
  }, {
    "name" : "out",
    "type" : "OutputStream",
    "comment" : " underlying output stream ",
    "links" : [ ]
  }, {
    "name" : "dout",
    "type" : "DataOutputStream",
    "comment" : " loopback stream (for data writes that span data blocks) ",
    "links" : [ ]
  }, {
    "name" : "warnOnceWhenWriting",
    "type" : "boolean",
    "comment" : "\n         * Indicates that this stream was closed and that a warning must be logged once if an\n         * attempt is made to write to it and the underlying stream does not throw an exception.\n         *\n         * <p>This will be set back to false when a warning is logged to ensure that the log is not\n         * flooded with warnings.\n         *\n         * http://b/28159133\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean setBlockDataMode(boolean mode) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n         * Sets block data mode to the given mode (true == on, false == off)\n         * and returns the previous mode value.  If the new mode is the same as\n         * the old mode, no action is taken.  If the new mode differs from the\n         * old mode, any buffered data is flushed before switching to the new\n         * mode.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean getBlockDataMode()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the stream is currently in block data mode, false\n         * otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void warnIfClosed()",
    "returnType" : "void",
    "comment" : "\n         * Warns if the stream has been closed.\n         *\n         * <p>This is called after data has been written to the underlying stream in order to allow\n         * the underlying stream to detect and fail if an attempt is made to write to a closed\n         * stream. That ensures that this will only log a warning if the underlying stream does not\n         * so it will not log unnecessary warnings.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void write(byte[] b, int off, int len, boolean copy) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Writes specified span of byte values from given array.  If copy is\n         * true, copies the values to an intermediate buffer before writing\n         * them to underlying stream (to avoid exposing a reference to the\n         * original byte array).\n         ",
    "links" : [ ]
  }, {
    "name" : " void drain() throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Writes all buffered data from this stream to the underlying stream,\n         * but does not flush underlying stream.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void writeBlockHeader(int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Writes block data header.  Data blocks shorter than 256 bytes are\n         * prefixed with a 2-byte header; all others start with a 5-byte\n         * header.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeBoolean(boolean v) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeByte(int v) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeChar(int v) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeShort(int v) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeInt(int v) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeFloat(float v) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeLong(long v) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeDouble(double v) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeBytes(String s) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeChars(String s) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeUTF(String s) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void writeBooleans(boolean[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void writeChars(char[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void writeShorts(short[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void writeInts(int[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void writeFloats(float[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void writeLongs(long[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void writeDoubles(double[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long getUTFLength(String s)",
    "returnType" : "long",
    "comment" : "\n         * Returns the length in bytes of the UTF encoding of the given string.\n         ",
    "links" : [ ]
  }, {
    "name" : " void writeUTF(String s, long utflen) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Writes the given string in UTF format.  This method is used in\n         * situations where the UTF encoding length of the string is already\n         * known; specifying it explicitly avoids a prescan of the string to\n         * determine its UTF length.\n         ",
    "links" : [ ]
  }, {
    "name" : " void writeLongUTF(String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Writes given string in \"long\" UTF format.  \"Long\" UTF format is\n         * identical to standard UTF, except that it uses an 8 byte header\n         * (instead of the standard 2 bytes) to convey the UTF encoding length.\n         ",
    "links" : [ ]
  }, {
    "name" : " void writeLongUTF(String s, long utflen) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Writes given string in \"long\" UTF format, where the UTF encoding\n         * length of the string is already known.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void writeUTFBody(String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Writes the \"body\" (i.e., the UTF representation minus the 2-byte or\n         * 8-byte length header) of the UTF encoding for the given string.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean setBlockDataMode(boolean mode) throws IOException", " boolean getBlockDataMode()", "private void warnIfClosed()", "public void write(int b) throws IOException", "public void write(byte[] b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException", "public void flush() throws IOException", "public void close() throws IOException", " void write(byte[] b, int off, int len, boolean copy) throws IOException", " void drain() throws IOException", "private void writeBlockHeader(int len) throws IOException", "public void writeBoolean(boolean v) throws IOException", "public void writeByte(int v) throws IOException", "public void writeChar(int v) throws IOException", "public void writeShort(int v) throws IOException", "public void writeInt(int v) throws IOException", "public void writeFloat(float v) throws IOException", "public void writeLong(long v) throws IOException", "public void writeDouble(double v) throws IOException", "public void writeBytes(String s) throws IOException", "public void writeChars(String s) throws IOException", "public void writeUTF(String s) throws IOException", " void writeBooleans(boolean[] v, int off, int len) throws IOException", " void writeChars(char[] v, int off, int len) throws IOException", " void writeShorts(short[] v, int off, int len) throws IOException", " void writeInts(int[] v, int off, int len) throws IOException", " void writeFloats(float[] v, int off, int len) throws IOException", " void writeLongs(long[] v, int off, int len) throws IOException", " void writeDoubles(double[] v, int off, int len) throws IOException", " long getUTFLength(String s)", " void writeUTF(String s, long utflen) throws IOException", " void writeLongUTF(String s) throws IOException", " void writeLongUTF(String s, long utflen) throws IOException", "private void writeUTFBody(String s) throws IOException" ],
  "variableNames" : [ "MAX_BLOCK_SIZE", "MAX_HEADER_SIZE", "CHAR_BUF_SIZE", "buf", "hbuf", "cbuf", "blkmode", "pos", "out", "dout", "warnOnceWhenWriting" ]
}