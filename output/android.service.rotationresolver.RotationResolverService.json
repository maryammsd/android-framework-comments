{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/rotationresolver/RotationResolverService.java",
  "packageName" : "android.service.rotationresolver",
  "className" : "RotationResolverService",
  "comment" : "\n * Abstract base class for rotation resolver service.\n *\n * <p> A {@link RotationResolverService} is a service that help determine screen rotation for the\n * system. When the system wants to resolve rotations, it will send a request to this service\n * via {@link #onResolveRotation} interface. A {@link RotationResolverCallback} is\n * attached to the request so that the implementer of the rotation resolver service can send\n * back results to the system. The system may then decide to rotate the screen based on the\n * results.\n *\n * <p> If RotationResolverService provides the result in time, the system will respect that result\n * and rotate the screen if possible.\n *\n * <p> The system's default RotationResolverService implementation is configured at\n * the {@code config_defaultRotationResolverService} field in the config XML file.\n *\n * <p> The implementation of RotationResolverService must have the following service interface.\n * Also, it must have permission {@link android.Manifest.permission#BIND_ROTATION_RESOLVER_SERVICE}.\n *\n * <pre>\n * {@literal\n * <service android:name=\".RotationResolverService\"\n *          android:permission=\"android.permission.BIND_ROTATION_RESOLVER_SERVICE\">\n * </service>}\n * </pre>\n *\n * @hide\n ",
  "links" : [ "android.service.rotationresolver.RotationResolverService", "#onResolveRotation", "android.Manifest.permission#BIND_ROTATION_RESOLVER_SERVICE", "RotationResolverCallback" ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     * To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_ROTATION_RESOLVER_SERVICE} permission so\n     * that other applications can not abuse it.\n     ",
    "links" : [ "android.content.Intent", "android.Manifest.permission#BIND_ROTATION_RESOLVER_SERVICE" ]
  }, {
    "name" : "ROTATION_RESULT_FAILURE_CANCELLED",
    "type" : "int",
    "comment" : " Request has been cancelled. ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_RESULT_FAILURE_TIMED_OUT",
    "type" : "int",
    "comment" : " Request timed out. ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_RESULT_FAILURE_PREEMPTED",
    "type" : "int",
    "comment" : " Preempted by other requests. ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_RESULT_FAILURE_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown reasons for failing to fulfill the request. ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_RESULT_FAILURE_NOT_SUPPORTED",
    "type" : "int",
    "comment" : " Does not support rotation query at this moment. ",
    "links" : [ ]
  }, {
    "name" : "mMainThreadHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingCallback",
    "type" : "RotationResolverCallbackWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancellationSignal",
    "type" : "CancellationSignal",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resolveRotation(IRotationResolverCallback callback, RotationResolutionRequest request, ICancellationSignal transport)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendRotationResult(IRotationResolverCallback internalCallback, int result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendFailureResult(IRotationResolverCallback internalCallback, int error)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void reportFailures(IRotationResolverCallback callback, int error)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onResolveRotation(@NonNull RotationResolutionRequest request, @Nullable CancellationSignal cancellationSignal, @NonNull RotationResolverCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Gets called when the system requests to resolve the screen rotation. The implementer then\n     * should return the result via the provided callback.\n     *\n     * @param request A request instance that contains information from the system that may help\n     *                the implementer provide a better result.\n     * @param cancellationSignal The signal for observing the cancellation of the request. The\n     *                           system will use this to notify the implementer that the rotation\n     *                           result is no longer needed. Implementer should then stop handling\n     *                           the request in order to save resources.\n     * @param callback A callback that Receives the rotation results.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final IBinder onBind(@NonNull Intent intent)", "private void resolveRotation(IRotationResolverCallback callback, RotationResolutionRequest request, ICancellationSignal transport)", "private void sendRotationResult(IRotationResolverCallback internalCallback, int result)", "private void sendFailureResult(IRotationResolverCallback internalCallback, int error)", "private void reportFailures(IRotationResolverCallback callback, int error)", "public abstract void onResolveRotation(@NonNull RotationResolutionRequest request, @Nullable CancellationSignal cancellationSignal, @NonNull RotationResolverCallback callback)" ],
  "variableNames" : [ "SERVICE_INTERFACE", "ROTATION_RESULT_FAILURE_CANCELLED", "ROTATION_RESULT_FAILURE_TIMED_OUT", "ROTATION_RESULT_FAILURE_PREEMPTED", "ROTATION_RESULT_FAILURE_UNKNOWN", "ROTATION_RESULT_FAILURE_NOT_SUPPORTED", "mMainThreadHandler", "mPendingCallback", "mCancellationSignal" ]
}