{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/SubtitleController.java",
  "packageName" : "android.media",
  "className" : "SubtitleController",
  "comment" : "\n * The subtitle controller provides the architecture to display subtitles for a\n * media source.  It allows specifying which tracks to display, on which anchor\n * to display them, and also allows adding external, out-of-band subtitle tracks.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mTimeProvider",
    "type" : "MediaTimeProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenderers",
    "type" : "Vector<Renderer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTracks",
    "type" : "Vector<SubtitleTrack>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectedTrack",
    "type" : "SubtitleTrack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptioningManager",
    "type" : "CaptioningManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WHAT_SHOW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WHAT_HIDE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WHAT_SELECT_TRACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WHAT_SELECT_DEFAULT_TRACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Handler.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptioningChangeListener",
    "type" : "CaptioningManager.CaptioningChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrackIsExplicit",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisibilityIsExplicit",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchor",
    "type" : "Anchor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "Listener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SubtitleTrack[] getTracks()",
    "returnType" : "SubtitleTrack[]",
    "comment" : "\n     * @return the available subtitle tracks for this media. These include\n     * the tracks found by {@link MediaPlayer} as well as any tracks added\n     * manually via {@link #addTrack}.\n     ",
    "links" : [ "MediaPlayer", "#addTrack" ]
  }, {
    "name" : "public SubtitleTrack getSelectedTrack()",
    "returnType" : "SubtitleTrack",
    "comment" : "\n     * @return the currently selected subtitle track\n     ",
    "links" : [ ]
  }, {
    "name" : "private RenderingWidget getRenderingWidget()",
    "returnType" : "RenderingWidget",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean selectTrack(SubtitleTrack track)",
    "returnType" : "boolean",
    "comment" : "\n     * Selects a subtitle track.  As a result, this track will receive\n     * in-band data from the {@link MediaPlayer}.  However, this does\n     * not change the subtitle visibility.\n     *\n     * Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper}\n     *\n     * @param track The subtitle track to select.  This must be one of the\n     *              tracks in {@link #getTracks}.\n     * @return true if the track was successfully selected.\n     ",
    "links" : [ "MediaPlayer", "#getTracks" ]
  }, {
    "name" : "private void doSelectTrack(SubtitleTrack track)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SubtitleTrack getDefaultTrack()",
    "returnType" : "SubtitleTrack",
    "comment" : "\n     * @return the default subtitle track based on system preferences, or null,\n     * if no such track exists in this manager.\n     *\n     * Supports HLS-flags: AUTOSELECT, FORCED & DEFAULT.\n     *\n     * 1. If captioning is disabled, only consider FORCED tracks. Otherwise,\n     * consider all tracks, but prefer non-FORCED ones.\n     * 2. If user selected \"Default\" caption language:\n     *   a. If there is a considered track with DEFAULT=yes, returns that track\n     *      (favor the first one in the current language if there are more than\n     *      one default tracks, or the first in general if none of them are in\n     *      the current language).\n     *   b. Otherwise, if there is a track with AUTOSELECT=yes in the current\n     *      language, return that one.\n     *   c. If there are no default tracks, and no autoselectable tracks in the\n     *      current language, return null.\n     * 3. If there is a track with the caption language, select that one.  Prefer\n     * the one with AUTOSELECT=no.\n     *\n     * The default values for these flags are DEFAULT=no, AUTOSELECT=yes\n     * and FORCED=no.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void selectDefaultTrack()",
    "returnType" : "void",
    "comment" : " @hide - should be called from anchor thread ",
    "links" : [ ]
  }, {
    "name" : "private void doSelectDefaultTrack()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : " @hide - must be called from anchor thread ",
    "links" : [ ]
  }, {
    "name" : "public SubtitleTrack addTrack(MediaFormat format)",
    "returnType" : "SubtitleTrack",
    "comment" : "\n     * Adds a new, external subtitle track to the manager.\n     *\n     * @param format the format of the track that will include at least\n     *               the MIME type {@link MediaFormat@KEY_MIME}.\n     * @return the created {@link SubtitleTrack} object\n     ",
    "links" : [ "MediaFormat", "SubtitleTrack" ]
  }, {
    "name" : "public void show()",
    "returnType" : "void",
    "comment" : "\n     * Show the selected (or default) subtitle track.\n     *\n     * Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doShow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void hide()",
    "returnType" : "void",
    "comment" : "\n     * Hide the selected (or default) subtitle track.\n     *\n     * Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doHide()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerRenderer(Renderer renderer)",
    "returnType" : "void",
    "comment" : "\n     * Add support for a subtitle format in {@link MediaPlayer}.\n     *\n     * @param renderer a {@link SubtitleController.Renderer} object that adds\n     *                 support for a subtitle format.\n     ",
    "links" : [ "MediaPlayer", "SubtitleController.Renderer" ]
  }, {
    "name" : "public boolean hasRendererFor(MediaFormat format)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAnchor(Anchor anchor)",
    "returnType" : "void",
    "comment" : "\n     *  @hide - called from anchor's looper (if any, both when unsetting and\n     *  setting)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkAnchorLooper()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void processOnAnchor(Message m)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mTimeProvider", "mRenderers", "mTracks", "mSelectedTrack", "mShowing", "mCaptioningManager", "mHandler", "WHAT_SHOW", "WHAT_HIDE", "WHAT_SELECT_TRACK", "WHAT_SELECT_DEFAULT_TRACK", "mCallback", "mCaptioningChangeListener", "mTrackIsExplicit", "mVisibilityIsExplicit", "mAnchor", "mListener" ],
  "methodNames" : [ "protected void finalize() throws Throwable", "public SubtitleTrack[] getTracks()", "public SubtitleTrack getSelectedTrack()", "private RenderingWidget getRenderingWidget()", "public boolean selectTrack(SubtitleTrack track)", "private void doSelectTrack(SubtitleTrack track)", "public SubtitleTrack getDefaultTrack()", "public void selectDefaultTrack()", "private void doSelectDefaultTrack()", "public void reset()", "public SubtitleTrack addTrack(MediaFormat format)", "public void show()", "private void doShow()", "public void hide()", "private void doHide()", "public void registerRenderer(Renderer renderer)", "public boolean hasRendererFor(MediaFormat format)", "public void setAnchor(Anchor anchor)", "private void checkAnchorLooper()", "private void processOnAnchor(Message m)" ]
}