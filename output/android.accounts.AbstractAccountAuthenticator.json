{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accounts/AbstractAccountAuthenticator.java",
  "packageName" : "android.accounts",
  "className" : "AbstractAccountAuthenticator",
  "comment" : "\n * Abstract base class for creating AccountAuthenticators.\n * In order to be an authenticator one must extend this class, provide implementations for the\n * abstract methods, and write a service that returns the result of {@link #getIBinder()}\n * in the service's {@link android.app.Service#onBind(android.content.Intent)} when invoked\n * with an intent with action {@link AccountManager#ACTION_AUTHENTICATOR_INTENT}. This service\n * must specify the following intent filter and metadata tags in its AndroidManifest.xml file\n * <pre>\n *   &lt;intent-filter&gt;\n *     &lt;action android:name=\"android.accounts.AccountAuthenticator\" /&gt;\n *   &lt;/intent-filter&gt;\n *   &lt;meta-data android:name=\"android.accounts.AccountAuthenticator\"\n *             android:resource=\"@xml/authenticator\" /&gt;\n * </pre>\n * The <code>android:resource</code> attribute must point to a resource that looks like:\n * <pre>\n * &lt;account-authenticator xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *    android:accountType=\"typeOfAuthenticator\"\n *    android:icon=\"@drawable/icon\"\n *    android:smallIcon=\"@drawable/miniIcon\"\n *    android:label=\"@string/label\"\n *    android:accountPreferences=\"@xml/account_preferences\"\n * /&gt;\n * </pre>\n * Replace the icons and labels with your own resources. The <code>android:accountType</code>\n * attribute must be a string that uniquely identifies your authenticator and will be the same\n * string that user will use when making calls on the {@link AccountManager} and it also\n * corresponds to {@link Account#type} for your accounts. One user of the android:icon is the\n * \"Account & Sync\" settings page and one user of the android:smallIcon is the Contact Application's\n * tab panels.\n * <p>\n * The preferences attribute points to a PreferenceScreen xml hierarchy that contains\n * a list of PreferenceScreens that can be invoked to manage the authenticator. An example is:\n * <pre>\n * &lt;PreferenceScreen xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;\n *    &lt;PreferenceCategory android:title=\"@string/title_fmt\" /&gt;\n *    &lt;PreferenceScreen\n *         android:key=\"key1\"\n *         android:title=\"@string/key1_action\"\n *         android:summary=\"@string/key1_summary\"&gt;\n *         &lt;intent\n *             android:action=\"key1.ACTION\"\n *             android:targetPackage=\"key1.package\"\n *             android:targetClass=\"key1.class\" /&gt;\n *     &lt;/PreferenceScreen&gt;\n * &lt;/PreferenceScreen&gt;\n * </pre>\n *\n * <p>\n * The standard pattern for implementing any of the abstract methods is the following:\n * <ul>\n * <li> If the supplied arguments are enough for the authenticator to fully satisfy the request\n * then it will do so and return a {@link Bundle} that contains the results.\n * <li> If the authenticator needs information from the user to satisfy the request then it\n * will create an {@link Intent} to an activity that will prompt the user for the information\n * and then carry out the request. This intent must be returned in a Bundle as key\n * {@link AccountManager#KEY_INTENT}.\n * <p>\n * The activity needs to return the final result when it is complete so the Intent should contain\n * the {@link AccountAuthenticatorResponse} as\n * {@link AccountManager#KEY_ACCOUNT_AUTHENTICATOR_RESPONSE}.\n * The activity must then call {@link AccountAuthenticatorResponse#onResult} or\n * {@link AccountAuthenticatorResponse#onError} when it is complete.\n * <li> If the authenticator cannot synchronously process the request and return a result then it\n * may choose to return null and then use the AccountManagerResponse to send the result\n * when it has completed the request. This asynchronous option is not available for the\n * {@link #addAccount} method, which must complete synchronously.\n * </ul>\n * <p>\n * The following descriptions of each of the abstract authenticator methods will not describe the\n * possible asynchronous nature of the request handling and will instead just describe the input\n * parameters and the expected result.\n * <p>\n * When writing an activity to satisfy these requests one must pass in the AccountManagerResponse\n * and return the result via that response when the activity finishes (or whenever else the\n * activity author deems it is the correct time to respond).\n ",
  "links" : [ "android.accounts.AccountManager", "android.accounts.AccountAuthenticatorResponse", "android.os.Bundle", "android.accounts.AccountManager#ACTION_AUTHENTICATOR_INTENT", "android.accounts.AccountManager#KEY_INTENT", "android.content.Intent", "#getIBinder()", "android.accounts.Account#type", "android.accounts.AccountManager#KEY_ACCOUNT_AUTHENTICATOR_RESPONSE", "android.accounts.AccountAuthenticatorResponse#onResult", "android.app.Service#onBind(android.content.Intent)", "#addAccount", "android.accounts.AccountAuthenticatorResponse#onError" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CUSTOM_TOKEN_EXPIRY",
    "type" : "String",
    "comment" : "\n     * Bundle key used for the {@code long} expiration time (in millis from the unix epoch) of the\n     * associated auth token.\n     *\n     * @see #getAuthToken\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_AUTH_TOKEN_TYPE",
    "type" : "String",
    "comment" : "\n     * Bundle key used for the {@link String} account type in session bundle.\n     * This is used in the default implementation of\n     * {@link #startAddAccountSession} and {@link #startUpdateCredentialsSession}.\n     ",
    "links" : [ "#startAddAccountSession", "#startUpdateCredentialsSession", "String" ]
  }, {
    "name" : "KEY_REQUIRED_FEATURES",
    "type" : "String",
    "comment" : "\n     * Bundle key used for the {@link String} array of required features in\n     * session bundle. This is used in the default implementation of\n     * {@link #startAddAccountSession} and {@link #startUpdateCredentialsSession}.\n     ",
    "links" : [ "#startAddAccountSession", "#startUpdateCredentialsSession", "String" ]
  }, {
    "name" : "KEY_OPTIONS",
    "type" : "String",
    "comment" : "\n     * Bundle key used for the {@link Bundle} options in session bundle. This is\n     * used in default implementation of {@link #startAddAccountSession} and\n     * {@link #startUpdateCredentialsSession}.\n     ",
    "links" : [ "#startAddAccountSession", "#startUpdateCredentialsSession", "android.os.Bundle" ]
  }, {
    "name" : "KEY_ACCOUNT",
    "type" : "String",
    "comment" : "\n     * Bundle key used for the {@link Account} account in session bundle. This is used\n     * used in default implementation of {@link #startUpdateCredentialsSession}.\n     ",
    "links" : [ "#startUpdateCredentialsSession", "android.accounts.Account" ]
  }, {
    "name" : "mTransport",
    "type" : "Transport",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void handleException(IAccountAuthenticatorResponse response, String method, String data, Exception e) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder getIBinder()",
    "returnType" : "IBinder",
    "comment" : "\n     * @return the IBinder for the AccountAuthenticator\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Bundle editProperties(AccountAuthenticatorResponse response, String accountType)",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns a Bundle that contains the Intent of the activity that can be used to edit the\n     * properties. In order to indicate success the activity should call response.setResult()\n     * with a non-null Bundle.\n     * @param response used to set the result for the request. If the Constants.INTENT_KEY\n     *   is set in the bundle then this response field is to be used for sending future\n     *   results if and when the Intent is started.\n     * @param accountType the AccountType whose properties are to be edited.\n     * @return a Bundle containing the result or the Intent to start to continue the request.\n     *   If this is null then the request is considered to still be active and the result should\n     *   sent later using response.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Bundle addAccount(AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Adds an account of the specified accountType.\n     * @param response to send the result back to the AccountManager, will never be null\n     * @param accountType the type of account to add, will never be null\n     * @param authTokenType the type of auth token to retrieve after adding the account, may be null\n     * @param requiredFeatures a String array of authenticator-specific features that the added\n     * account must support, may be null\n     * @param options a Bundle of authenticator-specific options. It always contains\n     * {@link AccountManager#KEY_CALLER_PID} and {@link AccountManager#KEY_CALLER_UID}\n     * fields which will let authenticator know the identity of the caller.\n     * @return a Bundle result or null if the result is to be returned via the response. The result\n     * will contain either:\n     * <ul>\n     * <li> {@link AccountManager#KEY_INTENT}, or\n     * <li> {@link AccountManager#KEY_ACCOUNT_NAME} and {@link AccountManager#KEY_ACCOUNT_TYPE} of\n     * the account that was added, or\n     * <li> {@link AccountManager#KEY_ERROR_CODE} and {@link AccountManager#KEY_ERROR_MESSAGE} to\n     * indicate an error\n     * </ul>\n     * @throws NetworkErrorException if the authenticator could not honor the request due to a\n     * network error\n     ",
    "links" : [ "android.accounts.AccountManager#KEY_CALLER_PID", "android.accounts.AccountManager#KEY_CALLER_UID", "android.accounts.AccountManager#KEY_INTENT", "android.accounts.AccountManager#KEY_ACCOUNT_TYPE", "android.accounts.AccountManager#KEY_ERROR_MESSAGE", "android.accounts.AccountManager#KEY_ACCOUNT_NAME", "android.accounts.AccountManager#KEY_ERROR_CODE" ]
  }, {
    "name" : "public abstract Bundle confirmCredentials(AccountAuthenticatorResponse response, Account account, Bundle options) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Checks that the user knows the credentials of an account.\n     * @param response to send the result back to the AccountManager, will never be null\n     * @param account the account whose credentials are to be checked, will never be null\n     * @param options a Bundle of authenticator-specific options, may be null\n     * @return a Bundle result or null if the result is to be returned via the response. The result\n     * will contain either:\n     * <ul>\n     * <li> {@link AccountManager#KEY_INTENT}, or\n     * <li> {@link AccountManager#KEY_BOOLEAN_RESULT}, true if the check succeeded, false otherwise\n     * <li> {@link AccountManager#KEY_ERROR_CODE} and {@link AccountManager#KEY_ERROR_MESSAGE} to\n     * indicate an error\n     * </ul>\n     * @throws NetworkErrorException if the authenticator could not honor the request due to a\n     * network error\n     ",
    "links" : [ "android.accounts.AccountManager#KEY_INTENT", "android.accounts.AccountManager#KEY_ERROR_MESSAGE", "android.accounts.AccountManager#KEY_ERROR_CODE", "android.accounts.AccountManager#KEY_BOOLEAN_RESULT" ]
  }, {
    "name" : "public abstract Bundle getAuthToken(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Gets an authtoken for an account.\n     *\n     * If not {@code null}, the resultant {@link Bundle} will contain different sets of keys\n     * depending on whether a token was successfully issued and, if not, whether one\n     * could be issued via some {@link android.app.Activity}.\n     * <p>\n     * If a token cannot be provided without some additional activity, the Bundle should contain\n     * {@link AccountManager#KEY_INTENT} with an associated {@link Intent}. On the other hand, if\n     * there is no such activity, then a Bundle containing\n     * {@link AccountManager#KEY_ERROR_CODE} and {@link AccountManager#KEY_ERROR_MESSAGE} should be\n     * returned.\n     * <p>\n     * If a token can be successfully issued, the implementation should return the\n     * {@link AccountManager#KEY_ACCOUNT_NAME} and {@link AccountManager#KEY_ACCOUNT_TYPE} of the\n     * account associated with the token as well as the {@link AccountManager#KEY_AUTHTOKEN}. In\n     * addition {@link AbstractAccountAuthenticator} implementations that declare themselves\n     * {@code android:customTokens=true} may also provide a non-negative {@link\n     * #KEY_CUSTOM_TOKEN_EXPIRY} long value containing the expiration timestamp of the expiration\n     * time (in millis since the unix epoch), tokens will be cached in memory based on\n     * application's packageName/signature for however long that was specified.\n     * <p>\n     * Implementers should assume that tokens will be cached on the basis of account and\n     * authTokenType. The system may ignore the contents of the supplied options Bundle when\n     * determining to re-use a cached token. Furthermore, implementers should assume a supplied\n     * expiration time will be treated as non-binding advice.\n     * <p>\n     * Finally, note that for {@code android:customTokens=false} authenticators, tokens are cached\n     * indefinitely until some client calls {@link\n     * AccountManager#invalidateAuthToken(String,String)}.\n     *\n     * @param response to send the result back to the AccountManager, will never be null\n     * @param account the account whose credentials are to be retrieved, will never be null\n     * @param authTokenType the type of auth token to retrieve, will never be null\n     * @param options a Bundle of authenticator-specific options. It always contains\n     * {@link AccountManager#KEY_CALLER_PID} and {@link AccountManager#KEY_CALLER_UID}\n     * fields which will let authenticator know the identity of the caller.\n     * @return a Bundle result or null if the result is to be returned via the response.\n     * @throws NetworkErrorException if the authenticator could not honor the request due to a\n     * network error\n     ",
    "links" : [ "android.os.Bundle", "android.accounts.AccountManager#KEY_INTENT", "#KEY_CUSTOM_TOKEN_EXPIRY", "android.content.Intent", "android.accounts.AccountManager#KEY_ERROR_MESSAGE", "android.accounts.AccountManager#KEY_ERROR_CODE", "android.accounts.AccountManager#KEY_ACCOUNT_NAME", "android.accounts.AbstractAccountAuthenticator", "android.accounts.AccountManager#invalidateAuthToken(String", "android.accounts.AccountManager#KEY_CALLER_PID", "android.accounts.AccountManager#KEY_CALLER_UID", "android.accounts.AccountManager#KEY_ACCOUNT_TYPE", "android.accounts.AccountManager#KEY_AUTHTOKEN", "android.app.Activity" ]
  }, {
    "name" : "public abstract String getAuthTokenLabel(String authTokenType)",
    "returnType" : "String",
    "comment" : "\n     * Ask the authenticator for a localized label for the given authTokenType.\n     * @param authTokenType the authTokenType whose label is to be returned, will never be null\n     * @return the localized label of the auth token type, may be null if the type isn't known\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Bundle updateCredentials(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Update the locally stored credentials for an account.\n     * @param response to send the result back to the AccountManager, will never be null\n     * @param account the account whose credentials are to be updated, will never be null\n     * @param authTokenType the type of auth token to retrieve after updating the credentials,\n     * may be null\n     * @param options a Bundle of authenticator-specific options, may be null\n     * @return a Bundle result or null if the result is to be returned via the response. The result\n     * will contain either:\n     * <ul>\n     * <li> {@link AccountManager#KEY_INTENT}, or\n     * <li> {@link AccountManager#KEY_ACCOUNT_NAME} and {@link AccountManager#KEY_ACCOUNT_TYPE} of\n     * the account whose credentials were updated, or\n     * <li> {@link AccountManager#KEY_ERROR_CODE} and {@link AccountManager#KEY_ERROR_MESSAGE} to\n     * indicate an error\n     * </ul>\n     * @throws NetworkErrorException if the authenticator could not honor the request due to a\n     * network error\n     ",
    "links" : [ "android.accounts.AccountManager#KEY_INTENT", "android.accounts.AccountManager#KEY_ACCOUNT_TYPE", "android.accounts.AccountManager#KEY_ERROR_MESSAGE", "android.accounts.AccountManager#KEY_ACCOUNT_NAME", "android.accounts.AccountManager#KEY_ERROR_CODE" ]
  }, {
    "name" : "public abstract Bundle hasFeatures(AccountAuthenticatorResponse response, Account account, String[] features) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Checks if the account supports all the specified authenticator specific features.\n     * @param response to send the result back to the AccountManager, will never be null\n     * @param account the account to check, will never be null\n     * @param features an array of features to check, will never be null\n     * @return a Bundle result or null if the result is to be returned via the response. The result\n     * will contain either:\n     * <ul>\n     * <li> {@link AccountManager#KEY_INTENT}, or\n     * <li> {@link AccountManager#KEY_BOOLEAN_RESULT}, true if the account has all the features,\n     * false otherwise\n     * <li> {@link AccountManager#KEY_ERROR_CODE} and {@link AccountManager#KEY_ERROR_MESSAGE} to\n     * indicate an error\n     * </ul>\n     * @throws NetworkErrorException if the authenticator could not honor the request due to a\n     * network error\n     ",
    "links" : [ "android.accounts.AccountManager#KEY_INTENT", "android.accounts.AccountManager#KEY_ERROR_MESSAGE", "android.accounts.AccountManager#KEY_ERROR_CODE", "android.accounts.AccountManager#KEY_BOOLEAN_RESULT" ]
  }, {
    "name" : "public Bundle getAccountRemovalAllowed(AccountAuthenticatorResponse response, Account account) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Checks if the removal of this account is allowed.\n     * @param response to send the result back to the AccountManager, will never be null\n     * @param account the account to check, will never be null\n     * @return a Bundle result or null if the result is to be returned via the response. The result\n     * will contain either:\n     * <ul>\n     * <li> {@link AccountManager#KEY_INTENT}, or\n     * <li> {@link AccountManager#KEY_BOOLEAN_RESULT}, true if the removal of the account is\n     * allowed, false otherwise\n     * <li> {@link AccountManager#KEY_ERROR_CODE} and {@link AccountManager#KEY_ERROR_MESSAGE} to\n     * indicate an error\n     * </ul>\n     * @throws NetworkErrorException if the authenticator could not honor the request due to a\n     * network error\n     ",
    "links" : [ "android.accounts.AccountManager#KEY_INTENT", "android.accounts.AccountManager#KEY_ERROR_MESSAGE", "android.accounts.AccountManager#KEY_ERROR_CODE", "android.accounts.AccountManager#KEY_BOOLEAN_RESULT" ]
  }, {
    "name" : "public Bundle getAccountCredentialsForCloning(final AccountAuthenticatorResponse response, final Account account) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns a Bundle that contains whatever is required to clone the account on a different\n     * user. The Bundle is passed to the authenticator instance in the target user via\n     * {@link #addAccountFromCredentials(AccountAuthenticatorResponse, Account, Bundle)}.\n     * The default implementation returns null, indicating that cloning is not supported.\n     * @param response to send the result back to the AccountManager, will never be null\n     * @param account the account to clone, will never be null\n     * @return a Bundle result or null if the result is to be returned via the response.\n     * @throws NetworkErrorException\n     * @see #addAccountFromCredentials(AccountAuthenticatorResponse, Account, Bundle)\n     ",
    "links" : [ "#addAccountFromCredentials(AccountAuthenticatorResponse" ]
  }, {
    "name" : "public Bundle addAccountFromCredentials(final AccountAuthenticatorResponse response, Account account, Bundle accountCredentials) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Creates an account based on credentials provided by the authenticator instance of another\n     * user on the device, who has chosen to share the account with this user.\n     * @param response to send the result back to the AccountManager, will never be null\n     * @param account the account to clone, will never be null\n     * @param accountCredentials the Bundle containing the required credentials to create the\n     * account. Contents of the Bundle are only meaningful to the authenticator. This Bundle is\n     * provided by {@link #getAccountCredentialsForCloning(AccountAuthenticatorResponse, Account)}.\n     * @return a Bundle result or null if the result is to be returned via the response.\n     * @throws NetworkErrorException\n     * @see #getAccountCredentialsForCloning(AccountAuthenticatorResponse, Account)\n     ",
    "links" : [ "#getAccountCredentialsForCloning(AccountAuthenticatorResponse" ]
  }, {
    "name" : "public Bundle startAddAccountSession(final AccountAuthenticatorResponse response, final String accountType, final String authTokenType, final String[] requiredFeatures, final Bundle options) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Starts the add account session to authenticate user to an account of the\n     * specified accountType. No file I/O should be performed in this call.\n     * Account should be added to device only when {@link #finishSession} is\n     * called after this.\n     * <p>\n     * Note: when overriding this method, {@link #finishSession} should be\n     * overridden too.\n     * </p>\n     *\n     * @param response to send the result back to the AccountManager, will never\n     *            be null\n     * @param accountType the type of account to authenticate with, will never\n     *            be null\n     * @param authTokenType the type of auth token to retrieve after\n     *            authenticating with the account, may be null\n     * @param requiredFeatures a String array of authenticator-specific features\n     *            that the account authenticated with must support, may be null\n     * @param options a Bundle of authenticator-specific options, may be null\n     * @return a Bundle result or null if the result is to be returned via the\n     *         response. The result will contain either:\n     *         <ul>\n     *         <li>{@link AccountManager#KEY_INTENT}, or\n     *         <li>{@link AccountManager#KEY_ACCOUNT_SESSION_BUNDLE} for adding\n     *         the account to device later, and if account is authenticated,\n     *         optional {@link AccountManager#KEY_PASSWORD} and\n     *         {@link AccountManager#KEY_ACCOUNT_STATUS_TOKEN} for checking the\n     *         status of the account, or\n     *         <li>{@link AccountManager#KEY_ERROR_CODE} and\n     *         {@link AccountManager#KEY_ERROR_MESSAGE} to indicate an error\n     *         </ul>\n     * @throws NetworkErrorException if the authenticator could not honor the\n     *             request due to a network error\n     * @see #finishSession(AccountAuthenticatorResponse, String, Bundle)\n     ",
    "links" : [ "android.accounts.AccountManager#KEY_ACCOUNT_SESSION_BUNDLE", "android.accounts.AccountManager#KEY_ACCOUNT_STATUS_TOKEN", "android.accounts.AccountManager#KEY_INTENT", "#finishSession", "android.accounts.AccountManager#KEY_ERROR_MESSAGE", "android.accounts.AccountManager#KEY_PASSWORD", "android.accounts.AccountManager#KEY_ERROR_CODE" ]
  }, {
    "name" : "public Bundle startUpdateCredentialsSession(final AccountAuthenticatorResponse response, final Account account, final String authTokenType, final Bundle options) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Asks user to re-authenticate for an account but defers updating the\n     * locally stored credentials. No file I/O should be performed in this call.\n     * Local credentials should be updated only when {@link #finishSession} is\n     * called after this.\n     * <p>\n     * Note: when overriding this method, {@link #finishSession} should be\n     * overridden too.\n     * </p>\n     *\n     * @param response to send the result back to the AccountManager, will never\n     *            be null\n     * @param account the account whose credentials are to be updated, will\n     *            never be null\n     * @param authTokenType the type of auth token to retrieve after updating\n     *            the credentials, may be null\n     * @param options a Bundle of authenticator-specific options, may be null\n     * @return a Bundle result or null if the result is to be returned via the\n     *         response. The result will contain either:\n     *         <ul>\n     *         <li>{@link AccountManager#KEY_INTENT}, or\n     *         <li>{@link AccountManager#KEY_ACCOUNT_SESSION_BUNDLE} for\n     *         updating the locally stored credentials later, and if account is\n     *         re-authenticated, optional {@link AccountManager#KEY_PASSWORD}\n     *         and {@link AccountManager#KEY_ACCOUNT_STATUS_TOKEN} for checking\n     *         the status of the account later, or\n     *         <li>{@link AccountManager#KEY_ERROR_CODE} and\n     *         {@link AccountManager#KEY_ERROR_MESSAGE} to indicate an error\n     *         </ul>\n     * @throws NetworkErrorException if the authenticator could not honor the\n     *             request due to a network error\n     * @see #finishSession(AccountAuthenticatorResponse, String, Bundle)\n     ",
    "links" : [ "android.accounts.AccountManager#KEY_ACCOUNT_SESSION_BUNDLE", "android.accounts.AccountManager#KEY_ACCOUNT_STATUS_TOKEN", "android.accounts.AccountManager#KEY_INTENT", "#finishSession", "android.accounts.AccountManager#KEY_ERROR_MESSAGE", "android.accounts.AccountManager#KEY_PASSWORD", "android.accounts.AccountManager#KEY_ERROR_CODE" ]
  }, {
    "name" : "public Bundle finishSession(final AccountAuthenticatorResponse response, final String accountType, final Bundle sessionBundle) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Finishes the session started by #startAddAccountSession or\n     * #startUpdateCredentials by installing the account to device with\n     * AccountManager, or updating the local credentials. File I/O may be\n     * performed in this call.\n     * <p>\n     * Note: when overriding this method, {@link #startAddAccountSession} and\n     * {@link #startUpdateCredentialsSession} should be overridden too.\n     * </p>\n     *\n     * @param response to send the result back to the AccountManager, will never\n     *            be null\n     * @param accountType the type of account to authenticate with, will never\n     *            be null\n     * @param sessionBundle a bundle of session data created by\n     *            {@link #startAddAccountSession} used for adding account to\n     *            device, or by {@link #startUpdateCredentialsSession} used for\n     *            updating local credentials.\n     * @return a Bundle result or null if the result is to be returned via the\n     *         response. The result will contain either:\n     *         <ul>\n     *         <li>{@link AccountManager#KEY_INTENT}, or\n     *         <li>{@link AccountManager#KEY_ACCOUNT_NAME} and\n     *         {@link AccountManager#KEY_ACCOUNT_TYPE} of the account that was\n     *         added or local credentials were updated, and optional\n     *         {@link AccountManager#KEY_ACCOUNT_STATUS_TOKEN} for checking\n     *         the status of the account later, or\n     *         <li>{@link AccountManager#KEY_ERROR_CODE} and\n     *         {@link AccountManager#KEY_ERROR_MESSAGE} to indicate an error\n     *         </ul>\n     * @throws NetworkErrorException if the authenticator could not honor the request due to a\n     *             network error\n     * @see #startAddAccountSession and #startUpdateCredentialsSession\n     ",
    "links" : [ "#startAddAccountSession", "#startUpdateCredentialsSession", "android.accounts.AccountManager#KEY_ACCOUNT_STATUS_TOKEN", "android.accounts.AccountManager#KEY_INTENT", "android.accounts.AccountManager#KEY_ACCOUNT_TYPE", "android.accounts.AccountManager#KEY_ERROR_MESSAGE", "android.accounts.AccountManager#KEY_ACCOUNT_NAME", "android.accounts.AccountManager#KEY_ERROR_CODE" ]
  }, {
    "name" : "public Bundle isCredentialsUpdateSuggested(final AccountAuthenticatorResponse response, Account account, String statusToken) throws NetworkErrorException",
    "returnType" : "Bundle",
    "comment" : "\n     * Checks if update of the account credentials is suggested.\n     *\n     * @param response to send the result back to the AccountManager, will never be null.\n     * @param account the account to check, will never be null\n     * @param statusToken a String of token which can be used to check the status of locally\n     *            stored credentials and if update of credentials is suggested\n     * @return a Bundle result or null if the result is to be returned via the response. The result\n     *         will contain either:\n     *         <ul>\n     *         <li>{@link AccountManager#KEY_BOOLEAN_RESULT}, true if update of account's\n     *         credentials is suggested, false otherwise\n     *         <li>{@link AccountManager#KEY_ERROR_CODE} and\n     *         {@link AccountManager#KEY_ERROR_MESSAGE} to indicate an error\n     *         </ul>\n     * @throws NetworkErrorException if the authenticator could not honor the request due to a\n     *             network error\n     ",
    "links" : [ "android.accounts.AccountManager#KEY_ERROR_MESSAGE", "android.accounts.AccountManager#KEY_ERROR_CODE", "android.accounts.AccountManager#KEY_BOOLEAN_RESULT" ]
  } ],
  "methodNames" : [ "private void handleException(IAccountAuthenticatorResponse response, String method, String data, Exception e) throws RemoteException", "public final IBinder getIBinder()", "public abstract Bundle editProperties(AccountAuthenticatorResponse response, String accountType)", "public abstract Bundle addAccount(AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options) throws NetworkErrorException", "public abstract Bundle confirmCredentials(AccountAuthenticatorResponse response, Account account, Bundle options) throws NetworkErrorException", "public abstract Bundle getAuthToken(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options) throws NetworkErrorException", "public abstract String getAuthTokenLabel(String authTokenType)", "public abstract Bundle updateCredentials(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options) throws NetworkErrorException", "public abstract Bundle hasFeatures(AccountAuthenticatorResponse response, Account account, String[] features) throws NetworkErrorException", "public Bundle getAccountRemovalAllowed(AccountAuthenticatorResponse response, Account account) throws NetworkErrorException", "public Bundle getAccountCredentialsForCloning(final AccountAuthenticatorResponse response, final Account account) throws NetworkErrorException", "public Bundle addAccountFromCredentials(final AccountAuthenticatorResponse response, Account account, Bundle accountCredentials) throws NetworkErrorException", "public Bundle startAddAccountSession(final AccountAuthenticatorResponse response, final String accountType, final String authTokenType, final String[] requiredFeatures, final Bundle options) throws NetworkErrorException", "public Bundle startUpdateCredentialsSession(final AccountAuthenticatorResponse response, final Account account, final String authTokenType, final Bundle options) throws NetworkErrorException", "public Bundle finishSession(final AccountAuthenticatorResponse response, final String accountType, final Bundle sessionBundle) throws NetworkErrorException", "public Bundle isCredentialsUpdateSuggested(final AccountAuthenticatorResponse response, Account account, String statusToken) throws NetworkErrorException" ],
  "variableNames" : [ "TAG", "KEY_CUSTOM_TOKEN_EXPIRY", "KEY_AUTH_TOKEN_TYPE", "KEY_REQUIRED_FEATURES", "KEY_OPTIONS", "KEY_ACCOUNT", "mTransport" ]
}