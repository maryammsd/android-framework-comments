{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/ClassValue.java",
  "packageName" : "java.lang",
  "className" : "ClassValueMap",
  "comment" : " A backing map for all ClassValues.\n     *  Gives a fully serialized \"true state\" for each pair (ClassValue cv, Class type).\n     *  Also manages an unserialized fast-path cache.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "cacheArray",
    "type" : "Entry<?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cacheLoad",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cacheLoadLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INITIAL_ENTRIES",
    "type" : "int",
    "comment" : " Number of entries initially allocated to each type when first used with any ClassValue.\n         *  It would be pointless to make this much smaller than the Class and ClassValueMap objects themselves.\n         *  Must be a power of 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "CACHE_LOAD_LIMIT",
    "type" : "int",
    "comment" : " 0..100",
    "links" : [ ]
  }, {
    "name" : "PROBE_LIMIT",
    "type" : "int",
    "comment" : " 1..",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " Entry<?>[] getCache()",
    "returnType" : "Entry<?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized Entry<T> startEntry(ClassValue<T> classValue)",
    "returnType" : "Entry<T>",
    "comment" : " Initiate a query.  Store a promise (placeholder) if there is no value yet. ",
    "links" : [ ]
  }, {
    "name" : " synchronized Entry<T> finishEntry(ClassValue<T> classValue, Entry<T> e)",
    "returnType" : "Entry<T>",
    "comment" : " Finish a query.  Overwrite a matching placeholder.  Drop stale incoming values. ",
    "links" : [ ]
  }, {
    "name" : " synchronized void removeEntry(ClassValue<?> classValue)",
    "returnType" : "void",
    "comment" : " Remove an entry. ",
    "links" : [ ]
  }, {
    "name" : " synchronized void changeEntry(ClassValue<T> classValue, T value)",
    "returnType" : "void",
    "comment" : " Change the value for an entry. ",
    "links" : [ ]
  }, {
    "name" : " static Entry<?> loadFromCache(Entry<?>[] cache, int i)",
    "returnType" : "Entry<?>",
    "comment" : " Load the cache entry at the given (hashed) location. ",
    "links" : [ ]
  }, {
    "name" : " static Entry<T> probeHomeLocation(Entry<?>[] cache, ClassValue<T> classValue)",
    "returnType" : "Entry<T>",
    "comment" : " Look in the cache, at the home location for the given ClassValue. ",
    "links" : [ ]
  }, {
    "name" : " static Entry<T> probeBackupLocations(Entry<?>[] cache, ClassValue<T> classValue)",
    "returnType" : "Entry<T>",
    "comment" : " Given that first probe was a collision, retry at nearby locations. ",
    "links" : [ ]
  }, {
    "name" : "private static int entryDislocation(Entry<?>[] cache, int pos, Entry<?> e)",
    "returnType" : "int",
    "comment" : " How far out of place is e? ",
    "links" : [ ]
  }, {
    "name" : "private void sizeCache(int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkCacheLoad()",
    "returnType" : "void",
    "comment" : " Make sure the cache load stays below its limit, if possible. ",
    "links" : [ ]
  }, {
    "name" : "private void reduceCacheLoad()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeStaleEntries(Entry<?>[] cache, int begin, int count)",
    "returnType" : "void",
    "comment" : " Remove stale entries in the given range.\n         *  Should be executed under a Map lock.\n         ",
    "links" : [ ]
  }, {
    "name" : "private Entry<?> findReplacement(Entry<?>[] cache, int home1)",
    "returnType" : "Entry<?>",
    "comment" : " Clearing a cache slot risks disconnecting following entries\n         *  from the head of a non-null run, which would allow them\n         *  to be found via reprobes.  Find an entry after cache[begin]\n         *  to plug into the hole, or return null if none is needed.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void removeStaleEntries(ClassValue<?> classValue)",
    "returnType" : "void",
    "comment" : " Remove stale entries in the range near classValue. ",
    "links" : [ ]
  }, {
    "name" : "private void removeStaleEntries()",
    "returnType" : "void",
    "comment" : " Remove all stale entries, everywhere. ",
    "links" : [ ]
  }, {
    "name" : "private void addToCache(Entry<T> e)",
    "returnType" : "void",
    "comment" : " Add the given entry to the cache, in its home location, unless it is out of date. ",
    "links" : [ ]
  }, {
    "name" : "private void addToCache(ClassValue<T> classValue, Entry<T> e)",
    "returnType" : "void",
    "comment" : " Add the given entry to the cache, in its home location. ",
    "links" : [ ]
  }, {
    "name" : "private Entry<?> placeInCache(Entry<?>[] cache, int pos, Entry<?> e, boolean gently)",
    "returnType" : "Entry<?>",
    "comment" : " Store the given entry.  Update cacheLoad, and return any live victim.\n         *  'Gently' means return self rather than dislocating a live victim.\n         ",
    "links" : [ ]
  }, {
    "name" : "private Entry<T> overwrittenEntry(Entry<T> e2)",
    "returnType" : "Entry<T>",
    "comment" : " Note an entry that is about to be overwritten.\n         *  If it is not live, quietly replace it by null.\n         *  If it is an actual null, increment cacheLoad,\n         *  because the caller is going to store something\n         *  in its place.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Entry<?>[] getCache()", " synchronized Entry<T> startEntry(ClassValue<T> classValue)", " synchronized Entry<T> finishEntry(ClassValue<T> classValue, Entry<T> e)", " synchronized void removeEntry(ClassValue<?> classValue)", " synchronized void changeEntry(ClassValue<T> classValue, T value)", " static Entry<?> loadFromCache(Entry<?>[] cache, int i)", " static Entry<T> probeHomeLocation(Entry<?>[] cache, ClassValue<T> classValue)", " static Entry<T> probeBackupLocations(Entry<?>[] cache, ClassValue<T> classValue)", "private static int entryDislocation(Entry<?>[] cache, int pos, Entry<?> e)", "private void sizeCache(int length)", "private void checkCacheLoad()", "private void reduceCacheLoad()", "private void removeStaleEntries(Entry<?>[] cache, int begin, int count)", "private Entry<?> findReplacement(Entry<?>[] cache, int home1)", "private void removeStaleEntries(ClassValue<?> classValue)", "private void removeStaleEntries()", "private void addToCache(Entry<T> e)", "private void addToCache(ClassValue<T> classValue, Entry<T> e)", "private Entry<?> placeInCache(Entry<?>[] cache, int pos, Entry<?> e, boolean gently)", "private Entry<T> overwrittenEntry(Entry<T> e2)" ],
  "variableNames" : [ "cacheArray", "cacheLoad", "cacheLoadLimit", "INITIAL_ENTRIES", "CACHE_LOAD_LIMIT", "PROBE_LIMIT" ]
}