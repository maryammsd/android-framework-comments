{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "Style",
  "comment" : "\n     * An object that can apply a rich notification style to a {@link Notification.Builder}\n     * object.\n     ",
  "links" : [ "Notification.Builder" ],
  "variables" : [ {
    "name" : "MAX_REMOTE_INPUT_HISTORY_LINES",
    "type" : "int",
    "comment" : "\n         * The number of items allowed simulatanously in the remote input history.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mBigContentTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSummaryText",
    "type" : "CharSequence",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mSummaryTextSet",
    "type" : "boolean",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mBuilder",
    "type" : "Builder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void internalSetBigContentTitle(CharSequence title)",
    "returnType" : "void",
    "comment" : "\n         * Overrides ContentTitle in the big form of the template.\n         * This defaults to the value passed to setContentTitle().\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void internalSetSummaryText(CharSequence cs)",
    "returnType" : "void",
    "comment" : "\n         * Set the first line of text after the detail section in the big form of the template.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setBuilder(Builder builder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void checkBuilder()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected RemoteViews getStandardView(int layoutId)",
    "returnType" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected RemoteViews getStandardView(int layoutId, StandardTemplateParams p, TemplateBindResult result)",
    "returnType" : "RemoteViews",
    "comment" : "\n         * Get the standard view for this style.\n         *\n         * @param layoutId The layout id to use.\n         * @param p the params for this inflation.\n         * @param result The result where template bind information is saved.\n         * @return A remoteView for this style.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeContentView(boolean increasedHeight)",
    "returnType" : "RemoteViews",
    "comment" : "\n         * Construct a Style-specific RemoteViews for the collapsed notification layout.\n         * The default implementation has nothing additional to add.\n         *\n         * @param increasedHeight true if this layout be created with an increased height.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeBigContentView()",
    "returnType" : "RemoteViews",
    "comment" : "\n         * Construct a Style-specific RemoteViews for the final big notification layout.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeHeadsUpContentView(boolean increasedHeight)",
    "returnType" : "RemoteViews",
    "comment" : "\n         * Construct a Style-specific RemoteViews for the final HUN layout.\n         *\n         * @param increasedHeight true if this layout be created with an increased height.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeCompactHeadsUpContentView()",
    "returnType" : "RemoteViews",
    "comment" : "\n         * Construct a Style-specific RemoteViews for the final compact HUN layout.\n         * return null to use the standard compact heads up view.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Apply any style-specific extras to this notification before shipping it out.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void restoreFromExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Reconstruct the internal state of this Style object from extras.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Notification buildStyled(Notification wip)",
    "returnType" : "Notification",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void purgeResources()",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Notification build()",
    "returnType" : "Notification",
    "comment" : "\n         * Calls {@link android.app.Notification.Builder#build()} on the Builder this Style is\n         * attached to.\n         * <p>\n         * Note: Calling build() multiple times returns the same Notification instance,\n         * so reusing a builder to create multiple Notifications is discouraged.\n         *\n         * @return the fully constructed Notification.\n         ",
    "links" : [ "android.app.Notification.Builder#build()" ]
  }, {
    "name" : "public boolean hasSummaryInHeader()",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         * @return Whether we should put the summary be put into the notification header\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean displayCustomViewInline()",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         * @return Whether custom content views are displayed inline in the style\n         ",
    "links" : [ ]
  }, {
    "name" : "public void reduceImageSizes(Context context)",
    "returnType" : "void",
    "comment" : "\n         * Reduces the image sizes contained in this style.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void validate(Context context)",
    "returnType" : "void",
    "comment" : "\n         * Validate that this style was properly composed. This is called at build time.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean areNotificationsVisiblyDifferent(Style other)",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getHeadsUpStatusBarText()",
    "returnType" : "CharSequence",
    "comment" : "\n         * @return the text that should be displayed in the statusBar when heads-upped.\n         * If {@code null} is returned, the default implementation will be used.\n         *\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void internalSetBigContentTitle(CharSequence title)", "protected void internalSetSummaryText(CharSequence cs)", "public void setBuilder(Builder builder)", "protected void checkBuilder()", "protected RemoteViews getStandardView(int layoutId)", "protected RemoteViews getStandardView(int layoutId, StandardTemplateParams p, TemplateBindResult result)", "public RemoteViews makeContentView(boolean increasedHeight)", "public RemoteViews makeBigContentView()", "public RemoteViews makeHeadsUpContentView(boolean increasedHeight)", "public RemoteViews makeCompactHeadsUpContentView()", "public void addExtras(Bundle extras)", "protected void restoreFromExtras(Bundle extras)", "public Notification buildStyled(Notification wip)", "public void purgeResources()", "public Notification build()", "public boolean hasSummaryInHeader()", "public boolean displayCustomViewInline()", "public void reduceImageSizes(Context context)", "public void validate(Context context)", "public abstract boolean areNotificationsVisiblyDifferent(Style other)", "public CharSequence getHeadsUpStatusBarText()" ],
  "variableNames" : [ "MAX_REMOTE_INPUT_HISTORY_LINES", "mBigContentTitle", "mSummaryText", "mSummaryTextSet", "mBuilder" ]
}