{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/LocaleUtils.java",
  "packageName" : "org.chromium.base",
  "className" : "LocaleUtils",
  "comment" : " This class provides the locale related methods. ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static String getUpdatedLanguageForChromium(String language)",
    "returnType" : "String",
    "comment" : "\n     * Java keeps deprecated language codes for Hebrew, Yiddish and Indonesian but Chromium uses\n     * updated ones. Similarly, Android uses \"tl\" while Chromium uses \"fil\" for Tagalog/Filipino.\n     * The Translate settings use \"gom\", but Chrome uses \"kok\". Apply a mapping here. See\n     * http://developer.android.com/reference/java/util/Locale.html\n     * @return a updated language code for Chromium with given language string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Locale getUpdatedLocaleForChromium(Locale locale)",
    "returnType" : "Locale",
    "comment" : "\n     * @return a locale with updated language codes for Chromium, with translated modern language\n     *         codes used by Chromium.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getUpdatedLanguageForAndroid(String language)",
    "returnType" : "String",
    "comment" : "\n     * Android uses \"tl\" while Chromium uses \"fil\" for Tagalog/Filipino.\n     * So apply a mapping here.\n     * See http://developer.android.com/reference/java/util/Locale.html\n     * @return a updated language code for Android with given language string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Locale getUpdatedLocaleForAndroid(Locale locale)",
    "returnType" : "Locale",
    "comment" : "\n     * @return a locale with updated language codes for Android, from translated modern language\n     *         codes used by Chromium.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Locale forLanguageTag(String languageTag)",
    "returnType" : "Locale",
    "comment" : "\n     * This function creates a Locale object from xx-XX style string where xx is language code\n     * and XX is a country code.\n     * @return the locale that best represents the language tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toLanguageTag(Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Converts Locale object to the BCP 47 compliant string format.\n     * This works for API level lower than 24.\n     *\n     * Note that for Android M or before, we cannot use Locale.getLanguage() and\n     * Locale.toLanguageTag() for this purpose. Since Locale.getLanguage() returns deprecated\n     * language code even if the Locale object is constructed with updated language code. As for\n     * Locale.toLanguageTag(), it does a special conversion from deprecated language code to updated\n     * one, but it is only usable for Android N or after.\n     * @return a well-formed IETF BCP 47 language tag with language and country code that\n     *         represents this locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toLanguageTags(LocaleList localeList)",
    "returnType" : "String",
    "comment" : "\n     * Converts LocaleList object to the comma separated BCP 47 compliant string format.\n     *\n     * @return a well-formed IETF BCP 47 language tag with language and country code that\n     *         represents this locale list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toBaseLanguage(String languageTag)",
    "returnType" : "String",
    "comment" : "\n     * Extracts the base language from a BCP 47 language tag.\n     * @param languageTag language tag of the form xx-XX or xx.\n     * @return the xx part of the language tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBaseLanguageEqual(String first, String second)",
    "returnType" : "boolean",
    "comment" : "\n     * @param first A BCP 47 formated language tag.\n     * @param second A BCP 47 formated language tag.\n     * @return True if the base language (e.g. \"en\" for \"en-AU\") is the same for each tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDefaultLocaleString()",
    "returnType" : "String",
    "comment" : "\n     * @return a language tag string that represents the default locale.\n     *         The language tag is well-formed IETF BCP 47 language tag with language and country\n     *         code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDefaultLocaleListString()",
    "returnType" : "String",
    "comment" : "\n     * @return a comma separated language tags string that represents a default locale or locales.\n     *         Each language tag is well-formed IETF BCP 47 language tag with language and country\n     *         code.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDefaultCountryCode()",
    "returnType" : "String",
    "comment" : "\n     * @return The default country code set during install.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getConfigurationLanguage(Configuration config)",
    "returnType" : "String",
    "comment" : "\n     * Return the language tag of the first language in Configuration.\n     * @param config Configuration to get language for.\n     * @return The BCP 47 tag representation of the configuration's first locale.\n     * Configuration.locale is deprecated on N+. However, read only is equivalent to\n     * Configuration.getLocales()[0]. Change when minSdkVersion >= 24.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getContextLanguage(Context context)",
    "returnType" : "String",
    "comment" : "\n     * Return the language tag of the first language in the configuration\n     * @param context Context to get language for.\n     * @return The BCP 47 tag representation of the context's first locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void updateConfig(Context base, Configuration config, String languageTag)",
    "returnType" : "void",
    "comment" : "\n     * Prepend languageTag to the default locales on config.\n     * @param base The Context to use for the base configuration.\n     * @param config The Configuration to update.\n     * @param languageTag The language to prepend to default locales.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDefaultLocalesFromConfiguration(Configuration config)",
    "returnType" : "void",
    "comment" : "\n     * Updates the default Locale/LocaleList to those of config.\n     * @param config\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getUpdatedLanguageForChromium(String language)", "public static Locale getUpdatedLocaleForChromium(Locale locale)", "public static String getUpdatedLanguageForAndroid(String language)", "public static Locale getUpdatedLocaleForAndroid(Locale locale)", "public static Locale forLanguageTag(String languageTag)", "public static String toLanguageTag(Locale locale)", "public static String toLanguageTags(LocaleList localeList)", "public static String toBaseLanguage(String languageTag)", "public static boolean isBaseLanguageEqual(String first, String second)", "public static String getDefaultLocaleString()", "public static String getDefaultLocaleListString()", "private static String getDefaultCountryCode()", "public static String getConfigurationLanguage(Configuration config)", "public static String getContextLanguage(Context context)", "public static void updateConfig(Context base, Configuration config, String languageTag)", "public static void setDefaultLocalesFromConfiguration(Configuration config)" ],
  "variableNames" : [ ]
}