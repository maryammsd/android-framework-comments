{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Currency.java",
  "packageName" : "java.util",
  "className" : "Currency",
  "comment" : " END Android-changed: Removed docs about superseding runtime currency data.",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currencyCode",
    "type" : "String",
    "comment" : "\n     * ISO 4217 currency code for this currency.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "icuCurrency",
    "type" : "android.icu.util.Currency",
    "comment" : "\n     * ISO 4217 numeric code for this currency.\n     * Set from currency data tables.\n     *\n     private final transient int numericCode;\n     ",
    "links" : [ ]
  }, {
    "name" : "instances",
    "type" : "ConcurrentMap<String, Currency>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "available",
    "type" : "HashSet<Currency>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Currency getInstance(String currencyCode)",
    "returnType" : "Currency",
    "comment" : "\n     * Returns the {@code Currency} instance for the given currency code.\n     *\n     * @param currencyCode the ISO 4217 code of the currency\n     * @return the {@code Currency} instance for the given currency code\n     * @throws    NullPointerException if {@code currencyCode} is null\n     * @throws    IllegalArgumentException if {@code currencyCode} is not\n     * a supported ISO 4217 code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Currency getInstance(Locale locale)",
    "returnType" : "Currency",
    "comment" : "\n     * Returns the {@code Currency} instance for the country of the\n     * given locale. The language and variant components of the locale\n     * are ignored. The result may vary over time, as countries change their\n     * currencies. For example, for the original member countries of the\n     * European Monetary Union, the method returns the old national currencies\n     * until December 31, 2001, and the Euro from January 1, 2002, local time\n     * of the respective countries.\n     * <p>\n     * If the specified {@code locale} contains \"cu\"\n     * <a href=\"./Locale.html#def_locale_extension\">Unicode extensions</a>,\n     * the instance returned from this method reflects\n     * the values specified with those extensions.\n     * <p>\n     * The method returns {@code null} for territories that don't\n     * have a currency, such as Antarctica.\n     *\n     * @param locale the locale for whose country a {@code Currency}\n     * instance is needed\n     * @return the {@code Currency} instance for the country of the given\n     * locale, or {@code null}\n     * @throws    NullPointerException if {@code locale}\n     * is {@code null}\n     * @throws    IllegalArgumentException if the country of the given {@code locale}\n     * is not a supported ISO 3166 country code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<Currency> getAvailableCurrencies()",
    "returnType" : "Set<Currency>",
    "comment" : "\n     * Gets the set of available currencies.  The returned set of currencies\n     * contains all of the available currencies, which may include currencies\n     * that represent obsolete ISO 4217 codes.  The set can be modified\n     * without affecting the available currencies in the runtime.\n     *\n     * @return the set of available currencies.  If there is no currency\n     *    available in the runtime, the returned set is empty.\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCurrencyCode()",
    "returnType" : "String",
    "comment" : "\n     * Gets the ISO 4217 currency code of this currency.\n     *\n     * @return the ISO 4217 currency code of this currency.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSymbol()",
    "returnType" : "String",
    "comment" : "\n     * Gets the symbol of this currency for the default\n     * {@link Locale.Category#DISPLAY DISPLAY} locale.\n     * For example, for the US Dollar, the symbol is \"$\" if the default\n     * locale is the US, while for other locales it may be \"US$\". If no\n     * symbol can be determined, the ISO 4217 currency code is returned.\n     * <p>\n     * This is equivalent to calling\n     * {@link #getSymbol(Locale)\n     *     getSymbol(Locale.getDefault(Locale.Category.DISPLAY))}.\n     *\n     * @return the symbol of this currency for the default\n     *     {@link Locale.Category#DISPLAY DISPLAY} locale\n     ",
    "links" : [ "#getSymbol(Locale)", "Locale.Category#DISPLAY" ]
  }, {
    "name" : "public String getSymbol(Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Gets the symbol of this currency for the specified locale.\n     * For example, for the US Dollar, the symbol is \"$\" if the specified\n     * locale is the US, while for other locales it may be \"US$\". If no\n     * symbol can be determined, the ISO 4217 currency code is returned.\n     *\n     * @param locale the locale for which a display name for this currency is\n     * needed\n     * @return the symbol of this currency for the specified locale\n     * @throws    NullPointerException if {@code locale} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultFractionDigits()",
    "returnType" : "int",
    "comment" : "\n     * Gets the default number of fraction digits used with this currency.\n     * Note that the number of fraction digits is the same as ISO 4217's\n     * minor unit for the currency.\n     * For example, the default number of fraction digits for the Euro is 2,\n     * while for the Japanese Yen it's 0.\n     * In the case of pseudo-currencies, such as IMF Special Drawing Rights,\n     * -1 is returned.\n     *\n     * @return the default number of fraction digits used with this currency\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNumericCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ISO 4217 numeric code of this currency.\n     *\n     * @return the ISO 4217 numeric code of this currency\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNumericCodeAsString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the 3 digit ISO 4217 numeric code of this currency as a {@code String}.\n     * Unlike {@link #getNumericCode()}, which returns the numeric code as {@code int},\n     * this method always returns the numeric code as a 3 digit string.\n     * e.g. a numeric value of 32 would be returned as \"032\",\n     * and a numeric value of 6 would be returned as \"006\".\n     *\n     * @return the 3 digit ISO 4217 numeric code of this currency as a {@code String}\n     * @since 9\n     ",
    "links" : [ "#getNumericCode()" ]
  }, {
    "name" : "public String getDisplayName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the name that is suitable for displaying this currency for\n     * the default {@link Locale.Category#DISPLAY DISPLAY} locale.\n     * If there is no suitable display name found\n     * for the default locale, the ISO 4217 currency code is returned.\n     * <p>\n     * This is equivalent to calling\n     * {@link #getDisplayName(Locale)\n     *     getDisplayName(Locale.getDefault(Locale.Category.DISPLAY))}.\n     *\n     * @return the display name of this currency for the default\n     *     {@link Locale.Category#DISPLAY DISPLAY} locale\n     * @since 1.7\n     ",
    "links" : [ "#getDisplayName(Locale)", "Locale.Category#DISPLAY" ]
  }, {
    "name" : "public String getDisplayName(Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Gets the name that is suitable for displaying this currency for\n     * the specified locale.  If there is no suitable display name found\n     * for the specified locale, the ISO 4217 currency code is returned.\n     *\n     * @param locale the locale for which a display name for this currency is\n     * needed\n     * @return the display name of this currency for the specified locale\n     * @throws    NullPointerException if {@code locale} is null\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the ISO 4217 currency code of this currency.\n     *\n     * @return the ISO 4217 currency code of this currency\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object readResolve()",
    "returnType" : "Object",
    "comment" : "\n     * Resolves instances being deserialized to a single instance per currency.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Currency getInstance(String currencyCode)", "public static Currency getInstance(Locale locale)", "public static Set<Currency> getAvailableCurrencies()", "public String getCurrencyCode()", "public String getSymbol()", "public String getSymbol(Locale locale)", "public int getDefaultFractionDigits()", "public int getNumericCode()", "public String getNumericCodeAsString()", "public String getDisplayName()", "public String getDisplayName(Locale locale)", "public String toString()", "private Object readResolve()" ],
  "variableNames" : [ "serialVersionUID", "currencyCode", "icuCurrency", "instances", "available" ]
}