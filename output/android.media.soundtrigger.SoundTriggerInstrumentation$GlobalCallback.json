{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/soundtrigger/SoundTriggerInstrumentation.java",
  "packageName" : "android.media.soundtrigger",
  "className" : "GlobalCallback",
  "comment" : "\n     * Callback interface for un-sessioned events observed from the fake STHAL.\n     * Registered upon construction of {@link SoundTriggerInstrumentation}\n     * @hide\n     ",
  "links" : [ "android.media.soundtrigger.SoundTriggerInstrumentation" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onPreempted()",
    "returnType" : "void",
    "comment" : "\n         * Called when the created {@link SoundTriggerInstrumentation} object is invalidated\n         * by another client creating an {@link SoundTriggerInstrumentation} to instrument the\n         * fake STHAL. Only one client may inject at a time.\n         * All sessions are invalidated, no further events will be received, and no\n         * injected events will be delivered.\n         ",
    "links" : [ "android.media.soundtrigger.SoundTriggerInstrumentation" ]
  }, {
    "name" : " void onRestarted()",
    "returnType" : "void",
    "comment" : "\n         * Called when the STHAL has been restarted by the framework, due to unexpected\n         * error conditions.\n         * Not called when {@link SoundTriggerInstrumentation#triggerRestart()} is injected.\n         ",
    "links" : [ "android.media.soundtrigger.SoundTriggerInstrumentation#triggerRestart()" ]
  }, {
    "name" : " void onFrameworkDetached()",
    "returnType" : "void",
    "comment" : "\n         * Called when the framework detaches from the fake HAL.\n         * This is not transmitted to real HALs, but it indicates that the\n         * framework has flushed its global state.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onClientAttached()",
    "returnType" : "void",
    "comment" : "\n         * Called when a client application attaches to the framework.\n         * This is not transmitted to real HALs, but it represents the state of\n         * the framework.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onClientDetached()",
    "returnType" : "void",
    "comment" : "\n         * Called when a client application detaches from the framework.\n         * This is not transmitted to real HALs, but it represents the state of\n         * the framework.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onModelLoaded(@NonNull ModelSession modelSession)",
    "returnType" : "void",
    "comment" : "\n         * Called when the fake HAL receives a model load from the framework.\n         * @param modelSession - A session which exposes additional injection\n         *                       functionality associated with the newly loaded\n         *                       model. See {@link ModelSession}.\n         ",
    "links" : [ "ModelSession" ]
  } ],
  "methodNames" : [ " void onPreempted()", " void onRestarted()", " void onFrameworkDetached()", " void onClientAttached()", " void onClientDetached()", " void onModelLoaded(@NonNull ModelSession modelSession)" ],
  "variableNames" : [ ]
}