{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/SocketOptions.java",
  "packageName" : "java.net",
  "className" : "SocketOptions",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "TCP_NODELAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SO_BINDADDR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SO_REUSEADDR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SO_REUSEPORT",
    "type" : "int",
    "comment" : " Sets SO_REUSEPORT for a socket. This option enables and disables\n     *  the ability to have multiple sockets listen to the same address\n     *  and port.\n     * <P>\n     * Valid for: SocketImpl, DatagramSocketImpl\n     *\n     * @since 9\n     * @see StandardSocketOptions#SO_REUSEPORT\n     ",
    "links" : [ ]
  }, {
    "name" : "SO_BROADCAST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IP_MULTICAST_IF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IP_MULTICAST_IF2",
    "type" : "int",
    "comment" : " Same as above. This option is introduced so that the behaviour\n     *  with IP_MULTICAST_IF will be kept the same as before, while\n     *  this new option can support setting outgoing interfaces with either\n     *  IPv4 and IPv6 addresses.\n     *\n     *  NOTE: make sure there is no conflict with this\n     * @see MulticastSocket#setNetworkInterface(NetworkInterface)\n     * @see MulticastSocket#getNetworkInterface()\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "IP_MULTICAST_LOOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IP_TOS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SO_LINGER",
    "type" : "int",
    "comment" : "\n     * Specify a linger-on-close timeout.  This option disables/enables\n     * immediate return from a <B>close()</B> of a TCP Socket.  Enabling\n     * this option with a non-zero Integer <I>timeout</I> means that a\n     * <B>close()</B> will block pending the transmission and acknowledgement\n     * of all data written to the peer, at which point the socket is closed\n     * <I>gracefully</I>.  Upon reaching the linger timeout, the socket is\n     * closed <I>forcefully</I>, with a TCP RST. Enabling the option with a\n     * timeout of zero does a forceful close immediately. If the specified\n     * timeout value exceeds 65,535 it will be reduced to 65,535.\n     * <P>\n     * Valid only for TCP: SocketImpl\n     *\n     * @see Socket#setSoLinger\n     * @see Socket#getSoLinger\n     ",
    "links" : [ ]
  }, {
    "name" : "SO_TIMEOUT",
    "type" : "int",
    "comment" : " Set a timeout on blocking Socket operations:\n     * <PRE>\n     * ServerSocket.accept();\n     * SocketInputStream.read();\n     * DatagramSocket.receive();\n     * </PRE>\n     *\n     * <P> The option must be set prior to entering a blocking\n     * operation to take effect.  If the timeout expires and the\n     * operation would continue to block,\n     * <B>java.io.InterruptedIOException</B> is raised.  The Socket is\n     * not closed in this case.\n     *\n     * <P> Valid for all sockets: SocketImpl, DatagramSocketImpl\n     *\n     * @see Socket#setSoTimeout\n     * @see ServerSocket#setSoTimeout\n     * @see DatagramSocket#setSoTimeout\n     ",
    "links" : [ ]
  }, {
    "name" : "SO_SNDBUF",
    "type" : "int",
    "comment" : "\n     * Set a hint the size of the underlying buffers used by the\n     * platform for outgoing network I/O. When used in set, this is a\n     * suggestion to the kernel from the application about the size of\n     * buffers to use for the data to be sent over the socket. When\n     * used in get, this must return the size of the buffer actually\n     * used by the platform when sending out data on this socket.\n     *\n     * Valid for all sockets: SocketImpl, DatagramSocketImpl\n     *\n     * @see Socket#setSendBufferSize\n     * @see Socket#getSendBufferSize\n     * @see DatagramSocket#setSendBufferSize\n     * @see DatagramSocket#getSendBufferSize\n     ",
    "links" : [ ]
  }, {
    "name" : "SO_RCVBUF",
    "type" : "int",
    "comment" : "\n     * Set a hint the size of the underlying buffers used by the\n     * platform for incoming network I/O. When used in set, this is a\n     * suggestion to the kernel from the application about the size of\n     * buffers to use for the data to be received over the\n     * socket. When used in get, this must return the size of the\n     * buffer actually used by the platform when receiving in data on\n     * this socket.\n     *\n     * Valid for all sockets: SocketImpl, DatagramSocketImpl\n     *\n     * @see Socket#setReceiveBufferSize\n     * @see Socket#getReceiveBufferSize\n     * @see DatagramSocket#setReceiveBufferSize\n     * @see DatagramSocket#getReceiveBufferSize\n     ",
    "links" : [ ]
  }, {
    "name" : "SO_KEEPALIVE",
    "type" : "int",
    "comment" : "\n     * When the keepalive option is set for a TCP socket and no data\n     * has been exchanged across the socket in either direction for\n     * 2 hours (NOTE: the actual value is implementation dependent),\n     * TCP automatically sends a keepalive probe to the peer. This probe is a\n     * TCP segment to which the peer must respond.\n     * One of three responses is expected:\n     * 1. The peer responds with the expected ACK. The application is not\n     *    notified (since everything is OK). TCP will send another probe\n     *    following another 2 hours of inactivity.\n     * 2. The peer responds with an RST, which tells the local TCP that\n     *    the peer host has crashed and rebooted. The socket is closed.\n     * 3. There is no response from the peer. The socket is closed.\n     *\n     * The purpose of this option is to detect if the peer host crashes.\n     *\n     * Valid only for TCP socket: SocketImpl\n     *\n     * @see Socket#setKeepAlive\n     * @see Socket#getKeepAlive\n     ",
    "links" : [ ]
  }, {
    "name" : "SO_OOBINLINE",
    "type" : "int",
    "comment" : "\n     * When the OOBINLINE option is set, any TCP urgent data received on\n     * the socket will be received through the socket input stream.\n     * When the option is disabled (which is the default) urgent data\n     * is silently discarded.\n     *\n     * @see Socket#setOOBInline\n     * @see Socket#getOOBInline\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOption(int optID, Object value) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Enable/disable the option specified by <I>optID</I>.  If the option\n     * is to be enabled, and it takes an option-specific \"value\",  this is\n     * passed in <I>value</I>.  The actual type of value is option-specific,\n     * and it is an error to pass something that isn't of the expected type:\n     * <BR><PRE>\n     * SocketImpl s;\n     * ...\n     * s.setOption(SO_LINGER, new Integer(10));\n     *    // OK - set SO_LINGER w/ timeout of 10 sec.\n     * s.setOption(SO_LINGER, new Double(10));\n     *    // ERROR - expects java.lang.Integer\n     *</PRE>\n     * If the requested option is binary, it can be set using this method by\n     * a java.lang.Boolean:\n     * <BR><PRE>\n     * s.setOption(TCP_NODELAY, Boolean.TRUE);\n     *    // OK - enables TCP_NODELAY, a binary option\n     * </PRE>\n     * <BR>\n     * Any option can be disabled using this method with a Boolean.FALSE:\n     * <BR><PRE>\n     * s.setOption(TCP_NODELAY, Boolean.FALSE);\n     *    // OK - disables TCP_NODELAY\n     * s.setOption(SO_LINGER, Boolean.FALSE);\n     *    // OK - disables SO_LINGER\n     * </PRE>\n     * <BR>\n     * For an option that has a notion of on and off, and requires\n     * a non-boolean parameter, setting its value to anything other than\n     * <I>Boolean.FALSE</I> implicitly enables it.\n     * <BR>\n     * Throws SocketException if the option is unrecognized,\n     * the socket is closed, or some low-level error occurred\n     * <BR>\n     * @param optID identifies the option\n     * @param value the parameter of the socket option\n     * @throws SocketException if the option is unrecognized,\n     * the socket is closed, or some low-level error occurred\n     * @see #getOption(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getOption(int optID) throws SocketException",
    "returnType" : "Object",
    "comment" : "\n     * Fetch the value of an option.\n     * Binary options will return java.lang.Boolean.TRUE\n     * if enabled, java.lang.Boolean.FALSE if disabled, e.g.:\n     * <BR><PRE>\n     * SocketImpl s;\n     * ...\n     * Boolean noDelay = (Boolean)(s.getOption(TCP_NODELAY));\n     * if (noDelay.booleanValue()) {\n     *     // true if TCP_NODELAY is enabled...\n     * ...\n     * }\n     * </PRE>\n     * <P>\n     * For options that take a particular type as a parameter,\n     * getOption(int) will return the parameter's value, else\n     * it will return java.lang.Boolean.FALSE:\n     * <PRE>\n     * Object o = s.getOption(SO_LINGER);\n     * if (o instanceof Integer) {\n     *     System.out.print(\"Linger time is \" + ((Integer)o).intValue());\n     * } else {\n     *   // the true type of o is java.lang.Boolean.FALSE;\n     * }\n     * </PRE>\n     *\n     * @param optID an {@code int} identifying the option to fetch\n     * @return the value of the option\n     * @throws SocketException if the socket is closed\n     * @throws SocketException if <I>optID</I> is unknown along the\n     *         protocol stack (including the SocketImpl)\n     * @see #setOption(int, java.lang.Object)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setOption(int optID, Object value) throws SocketException", "public Object getOption(int optID) throws SocketException" ],
  "variableNames" : [ "TCP_NODELAY", "SO_BINDADDR", "SO_REUSEADDR", "SO_REUSEPORT", "SO_BROADCAST", "IP_MULTICAST_IF", "IP_MULTICAST_IF2", "IP_MULTICAST_LOOP", "IP_TOS", "SO_LINGER", "SO_TIMEOUT", "SO_SNDBUF", "SO_RCVBUF", "SO_KEEPALIVE", "SO_OOBINLINE" ]
}