{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/AccessibilityService.java",
  "packageName" : "android.accessibilityservice",
  "className" : "Callbacks",
  "comment" : "\n     * Interface used by IAccessibilityServiceClientWrapper to call the service from its main\n     * thread.\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onInterrupt()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onServiceConnected()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void init(int connectionId, IBinder windowToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean onGesture(AccessibilityGestureEvent gestureInfo)",
    "returnType" : "boolean",
    "comment" : " The detected gesture information for different displays ",
    "links" : [ ]
  }, {
    "name" : " boolean onKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onMagnificationChanged(int displayId, @NonNull Region region, MagnificationConfig config)",
    "returnType" : "void",
    "comment" : " Magnification changed callbacks for different displays ",
    "links" : [ ]
  }, {
    "name" : " void onMotionEvent(MotionEvent event)",
    "returnType" : "void",
    "comment" : " Callbacks for receiving motion events. ",
    "links" : [ ]
  }, {
    "name" : " void onTouchStateChanged(int displayId, int state)",
    "returnType" : "void",
    "comment" : " Callback for tuch state changes. ",
    "links" : [ ]
  }, {
    "name" : " void onSoftKeyboardShowModeChanged(int showMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onPerformGestureResult(int sequence, boolean completedSuccessfully)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onFingerprintCapturingGesturesChanged(boolean active)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onFingerprintGesture(int gesture)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onAccessibilityButtonClicked(int displayId)",
    "returnType" : "void",
    "comment" : " Accessbility button clicked callbacks for different displays ",
    "links" : [ ]
  }, {
    "name" : " void onAccessibilityButtonAvailabilityChanged(boolean available)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onSystemActionsChanged()",
    "returnType" : "void",
    "comment" : " This is called when the system action list is changed. ",
    "links" : [ ]
  }, {
    "name" : " void createImeSession(IAccessibilityInputMethodSessionCallback callback)",
    "returnType" : "void",
    "comment" : " This is called when an app requests ime sessions or when the service is enabled. ",
    "links" : [ ]
  }, {
    "name" : " void startInput(@Nullable RemoteAccessibilityInputConnection inputConnection, @NonNull EditorInfo editorInfo, boolean restarting)",
    "returnType" : "void",
    "comment" : " This is called when an app starts input or when the service is enabled. ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void onAccessibilityEvent(AccessibilityEvent event)", " void onInterrupt()", " void onServiceConnected()", " void init(int connectionId, IBinder windowToken)", " boolean onGesture(AccessibilityGestureEvent gestureInfo)", " boolean onKeyEvent(KeyEvent event)", " void onMagnificationChanged(int displayId, @NonNull Region region, MagnificationConfig config)", " void onMotionEvent(MotionEvent event)", " void onTouchStateChanged(int displayId, int state)", " void onSoftKeyboardShowModeChanged(int showMode)", " void onPerformGestureResult(int sequence, boolean completedSuccessfully)", " void onFingerprintCapturingGesturesChanged(boolean active)", " void onFingerprintGesture(int gesture)", " void onAccessibilityButtonClicked(int displayId)", " void onAccessibilityButtonAvailabilityChanged(boolean available)", " void onSystemActionsChanged()", " void createImeSession(IAccessibilityInputMethodSessionCallback callback)", " void startInput(@Nullable RemoteAccessibilityInputConnection inputConnection, @NonNull EditorInfo editorInfo, boolean restarting)" ],
  "variableNames" : [ ]
}