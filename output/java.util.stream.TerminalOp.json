{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/TerminalOp.java",
  "packageName" : "java.util.stream",
  "className" : "TerminalOp",
  "comment" : "\n * An operation in a stream pipeline that takes a stream as input and produces\n * a result or side-effect.  A {@code TerminalOp} has an input type and stream\n * shape, and a result type.  A {@code TerminalOp} also has a set of\n * <em>operation flags</em> that describes how the operation processes elements\n * of the stream (such as short-circuiting or respecting encounter order; see\n * {@link StreamOpFlag}).\n *\n * <p>A {@code TerminalOp} must provide a sequential and parallel implementation\n * of the operation relative to a given stream source and set of intermediate\n * operations.\n *\n * @param <E_IN> the type of input elements\n * @param <R>    the type of the result\n * @since 1.8\n ",
  "links" : [ "java.util.stream.StreamOpFlag" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " StreamShape inputShape()",
    "returnType" : "StreamShape",
    "comment" : "\n     * Gets the shape of the input type of this operation.\n     *\n     * @implSpec The default returns {@code StreamShape.REFERENCE}.\n     *\n     * @return StreamShape of the input type of this operation\n     ",
    "links" : [ ]
  }, {
    "name" : " int getOpFlags()",
    "returnType" : "int",
    "comment" : "\n     * Gets the stream flags of the operation.  Terminal operations may set a\n     * limited subset of the stream flags defined in {@link StreamOpFlag}, and\n     * these flags are combined with the previously combined stream and\n     * intermediate operation flags for the pipeline.\n     *\n     * @implSpec The default implementation returns zero.\n     *\n     * @return the stream flags for this operation\n     * @see StreamOpFlag\n     ",
    "links" : [ "java.util.stream.StreamOpFlag" ]
  }, {
    "name" : " R evaluateParallel(PipelineHelper<E_IN> helper, Spliterator<P_IN> spliterator)",
    "returnType" : "R",
    "comment" : "\n     * Performs a parallel evaluation of the operation using the specified\n     * {@code PipelineHelper}, which describes the upstream intermediate\n     * operations.\n     *\n     * @implSpec The default performs a sequential evaluation of the operation\n     * using the specified {@code PipelineHelper}.\n     *\n     * @param helper the pipeline helper\n     * @param spliterator the source spliterator\n     * @return the result of the evaluation\n     ",
    "links" : [ ]
  }, {
    "name" : " R evaluateSequential(PipelineHelper<E_IN> helper, Spliterator<P_IN> spliterator)",
    "returnType" : "R",
    "comment" : "\n     * Performs a sequential evaluation of the operation using the specified\n     * {@code PipelineHelper}, which describes the upstream intermediate\n     * operations.\n     *\n     * @param helper the pipeline helper\n     * @param spliterator the source spliterator\n     * @return the result of the evaluation\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " StreamShape inputShape()", " int getOpFlags()", " R evaluateParallel(PipelineHelper<E_IN> helper, Spliterator<P_IN> spliterator)", " R evaluateSequential(PipelineHelper<E_IN> helper, Spliterator<P_IN> spliterator)" ],
  "variableNames" : [ ]
}