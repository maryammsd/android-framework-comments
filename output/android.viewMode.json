{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/Display.java",
  "packageName" : "android.view",
  "className" : "Mode",
  "comment" : "\n     * A mode supported by a given display.\n     *\n     * @see Display#getSupportedModes()\n     ",
  "variables" : [ {
    "name" : "EMPTY_ARRAY",
    "type" : "Mode[]",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mModeId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefreshRate",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Mode>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getModeId()",
    "returnType" : "int",
    "comment" : "\n         * Returns this mode's id.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getPhysicalWidth()",
    "returnType" : "int",
    "comment" : "\n         * Returns the physical width of the display in pixels when configured in this mode's\n         * resolution.\n         * <p>\n         * Note that due to application UI scaling, the number of pixels made available to\n         * applications when the mode is active (as reported by {@link Display#getWidth()} may\n         * differ from the mode's actual resolution (as reported by this function).\n         * <p>\n         * For example, applications running on a 4K display may have their UI laid out and rendered\n         * in 1080p and then scaled up. Applications can take advantage of the extra resolution by\n         * rendering content through a {@link android.view.SurfaceView} using full size buffers.\n         ",
    "links" : [ "Display#getWidth", "android.view.SurfaceView" ]
  }, {
    "name" : "public int getPhysicalHeight()",
    "returnType" : "int",
    "comment" : "\n         * Returns the physical height of the display in pixels when configured in this mode's\n         * resolution.\n         * <p>\n         * Note that due to application UI scaling, the number of pixels made available to\n         * applications when the mode is active (as reported by {@link Display#getHeight()} may\n         * differ from the mode's actual resolution (as reported by this function).\n         * <p>\n         * For example, applications running on a 4K display may have their UI laid out and rendered\n         * in 1080p and then scaled up. Applications can take advantage of the extra resolution by\n         * rendering content through a {@link android.view.SurfaceView} using full size buffers.\n         ",
    "links" : [ "Display#getHeight", "android.view.SurfaceView" ]
  }, {
    "name" : "public float getRefreshRate()",
    "returnType" : "float",
    "comment" : "\n         * Returns the refresh rate in frames per second.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean matches(int width, int height, float refreshRate)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if this mode matches the given parameters.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "EMPTY_ARRAY", "mModeId", "mWidth", "mHeight", "mRefreshRate", "CREATOR" ],
  "methodNames" : [ "public int getModeId()", "public int getPhysicalWidth()", "public int getPhysicalHeight()", "public float getRefreshRate()", "public boolean matches(int width, int height, float refreshRate)", "public boolean equals(Object other)", "public int hashCode()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel out, int parcelableFlags)" ]
}