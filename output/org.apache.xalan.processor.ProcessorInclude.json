{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/processor/ProcessorInclude.java",
  "packageName" : "org.apache.xalan.processor",
  "className" : "ProcessorInclude",
  "comment" : "\n * TransformerFactory class for xsl:include markup.\n * @see <a href=\"http://www.w3.org/TR/xslt#dtd\">XSLT DTD</a>\n * @see <a href=\"http://www.w3.org/TR/xslt#include\">include in XSLT Specification</a>\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_href",
    "type" : "String",
    "comment" : "\n   * The base URL of the XSL document.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getHref()",
    "returnType" : "String",
    "comment" : "\n   * Get the base identifier with which this stylesheet is associated.\n   *\n   * @return non-null reference to the href attribute string, or \n   *         null if setHref has not been called.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setHref(String baseIdent)",
    "returnType" : "void",
    "comment" : "\n   * Get the base identifier with which this stylesheet is associated.\n   *\n   * @param baseIdent Should be a non-null reference to a valid URL string.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getStylesheetType()",
    "returnType" : "int",
    "comment" : "\n   * Get the stylesheet type associated with an included stylesheet\n   *\n   * @return the type of the stylesheet\n   ",
    "links" : [ ]
  }, {
    "name" : "protected String getStylesheetInclErr()",
    "returnType" : "String",
    "comment" : "\n   * Get the error number associated with this type of stylesheet including itself\n   *\n   * @return the appropriate error number\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(StylesheetHandler handler, String uri, String localName, String rawName, Attributes attributes) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the start of an xsl:include element.\n   *\n   * @param handler The calling StylesheetHandler/TemplatesBuilder.\n   * @param uri The Namespace URI, or the empty string if the\n   *        element has no Namespace URI or if Namespace\n   *        processing is not being performed.\n   * @param localName The local name (without prefix), or the\n   *        empty string if Namespace processing is not being\n   *        performed.\n   * @param rawName The raw XML 1.0 name (with prefix), or the\n   *        empty string if raw names are not available.\n   * @param attributes The attributes attached to the element.  If\n   *        there are no attributes, it shall be an empty\n   *        Attributes object.\n   *\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void parse(StylesheetHandler handler, String uri, String localName, String rawName, Attributes attributes) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Set off a new parse for an included or imported stylesheet.  This will \n   * set the {@link StylesheetHandler} to a new state, and recurse in with \n   * a new set of parse events.  Once this function returns, the state of \n   * the StylesheetHandler should be restored.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, which should be the XSLT namespace.\n   * @param localName The local name (without prefix), which should be \"include\" or \"import\".\n   * @param rawName The qualified name (with prefix).\n   * @param attributes The list of attributes on the xsl:include or xsl:import element.\n   *\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   ",
    "links" : [ "org.apache.xalan.processor.StylesheetHandler" ]
  }, {
    "name" : "protected Source processSource(StylesheetHandler handler, Source source)",
    "returnType" : "Source",
    "comment" : "\n   * This method does nothing, but a class that extends this class could\n   * over-ride it and do some processing of the source.\n   * @param handler The calling StylesheetHandler/TemplatesBuilder.\n   * @param source The source of the included stylesheet.\n   * @return the same or an equivalent source to what was passed in.\n   ",
    "links" : [ ]
  }, {
    "name" : "private Source getSourceFromUriResolver(StylesheetHandler handler) throws TransformerException",
    "returnType" : "Source",
    "comment" : "\n   * Get the Source object for the included or imported stylesheet module\n   * obtained from the user's URIResolver, if there is no user provided \n   * URIResolver null is returned.\n   ",
    "links" : [ ]
  }, {
    "name" : "private String getBaseURIOfIncludedStylesheet(StylesheetHandler handler, Source s) throws TransformerException",
    "returnType" : "String",
    "comment" : "\n     * Get the base URI of the included or imported stylesheet,\n     * if the user provided a URIResolver, then get the Source\n     * object for the stylsheet from it, and get the systemId \n     * from that Source object, otherwise try to recover by\n     * using the SysteIDResolver to figure out the base URI.\n     * @param handler The handler that processes the stylesheet as SAX events,\n     * and maintains state\n     * @param s The Source object from a URIResolver, for the included stylesheet module,\n     * so this will be null if there is no URIResolver set.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getHref()", "public void setHref(String baseIdent)", "protected int getStylesheetType()", "protected String getStylesheetInclErr()", "public void startElement(StylesheetHandler handler, String uri, String localName, String rawName, Attributes attributes) throws org.xml.sax.SAXException", "protected void parse(StylesheetHandler handler, String uri, String localName, String rawName, Attributes attributes) throws org.xml.sax.SAXException", "protected Source processSource(StylesheetHandler handler, Source source)", "private Source getSourceFromUriResolver(StylesheetHandler handler) throws TransformerException", "private String getBaseURIOfIncludedStylesheet(StylesheetHandler handler, Source s) throws TransformerException" ],
  "variableNames" : [ "serialVersionUID", "m_href" ]
}