{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationFastLatinBuilder.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "CollationFastLatinBuilder",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "NUM_SPECIAL_GROUPS",
    "type" : "int",
    "comment" : " space, punct, symbol, currency (not digit)",
    "links" : [ ]
  }, {
    "name" : "CONTRACTION_FLAG",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ce0",
    "type" : "long",
    "comment" : " temporary \"buffer\"",
    "links" : [ ]
  }, {
    "name" : "ce1",
    "type" : "long",
    "comment" : " temporary \"buffer\"",
    "links" : [ ]
  }, {
    "name" : "charCEs",
    "type" : "long[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "contractionCEs",
    "type" : "UVector64",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "uniqueCEs",
    "type" : "UVector64",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "miniCEs",
    "type" : "char[]",
    "comment" : " One 16-bit mini CE per unique CE. ",
    "links" : [ ]
  }, {
    "name" : "lastSpecialPrimaries",
    "type" : "long[]",
    "comment" : " These are constant for a given root collator.",
    "links" : [ ]
  }, {
    "name" : "firstDigitPrimary",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "firstLatinPrimary",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastLatinPrimary",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "firstShortPrimary",
    "type" : "long",
    "comment" : " a short mini primary. It must be >=firstDigitPrimary.",
    "links" : [ ]
  }, {
    "name" : "shortPrimaryOverflow",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "result",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "headerLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static final int compareInt64AsUnsigned(long a, long b)",
    "returnType" : "int",
    "comment" : "\n     * Compare two signed long values as if they were unsigned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final int binarySearch(long[] list, int limit, long ce)",
    "returnType" : "int",
    "comment" : "\n     * Like Java Collections.binarySearch(List, String, Comparator).\n     *\n     * @return the index>=0 where the item was found,\n     *         or the index<0 for inserting the string at ~index in sorted order\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean forData(CollationData data)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " char[] getHeader()",
    "returnType" : "char[]",
    "comment" : " and we do not want to index into the table with an offset.",
    "links" : [ ]
  }, {
    "name" : " char[] getTable()",
    "returnType" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean loadGroups(CollationData data)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean inSameGroup(long p, long q)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetCEs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getCEs(CollationData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean getCEsFromCE32(CollationData data, int c, int ce32)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean getCEsFromContractionCE32(CollationData data, int ce32)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addContractionEntry(int x, long cce0, long cce1)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addUniqueCE(long ce)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMiniCE(long ce)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void encodeUniqueCEs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void encodeCharCEs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void encodeContractions()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int encodeTwoCEs(long first, long second)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isContractionCharCE(long ce)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static final int compareInt64AsUnsigned(long a, long b)", "private static final int binarySearch(long[] list, int limit, long ce)", " boolean forData(CollationData data)", " char[] getHeader()", " char[] getTable()", "private boolean loadGroups(CollationData data)", "private boolean inSameGroup(long p, long q)", "private void resetCEs()", "private void getCEs(CollationData data)", "private boolean getCEsFromCE32(CollationData data, int c, int ce32)", "private boolean getCEsFromContractionCE32(CollationData data, int ce32)", "private void addContractionEntry(int x, long cce0, long cce1)", "private void addUniqueCE(long ce)", "private int getMiniCE(long ce)", "private void encodeUniqueCEs()", "private void encodeCharCEs()", "private void encodeContractions()", "private int encodeTwoCEs(long first, long second)", "private static boolean isContractionCharCE(long ce)" ],
  "variableNames" : [ "NUM_SPECIAL_GROUPS", "CONTRACTION_FLAG", "ce0", "ce1", "charCEs", "contractionCEs", "uniqueCEs", "miniCEs", "lastSpecialPrimaries", "firstDigitPrimary", "firstLatinPrimary", "lastLatinPrimary", "firstShortPrimary", "shortPrimaryOverflow", "result", "headerLength" ]
}