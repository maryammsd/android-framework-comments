{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/SerializerBase.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "SerializerBase",
  "comment" : "\n * This class acts as a base class for the XML \"serializers\"\n * and the stream serializers.\n * It contains a number of common fields and methods.\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PKG_NAME",
    "type" : "String",
    "comment" : "\n     * The name of the package that this class is in.\n     * <p>\n     * Not a public API.\n     ",
    "links" : [ ]
  }, {
    "name" : "PKG_PATH",
    "type" : "String",
    "comment" : "\n     * The same as the name of the package that this class is in\n     * except that '.' are replaced with '/'.\n     * <p>\n     * Not a public API.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_needToCallStartDocument",
    "type" : "boolean",
    "comment" : "\n     * true if we still need to call startDocumentInternal() \n\t ",
    "links" : [ ]
  }, {
    "name" : "m_cdataTagOpen",
    "type" : "boolean",
    "comment" : " True if a trailing \"]]>\" still needs to be written to be\n     * written out. Used to merge adjacent CDATA sections\n     ",
    "links" : [ ]
  }, {
    "name" : "m_attributes",
    "type" : "AttributesImplSerializer",
    "comment" : "\n     * All the attributes of the current element, collected from\n     * startPrefixMapping() calls, or addAddtribute() calls, or \n     * from the SAX attributes in a startElement() call.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_inEntityRef",
    "type" : "boolean",
    "comment" : "\n     * Tells if we're in an EntityRef event.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_inExternalDTD",
    "type" : "boolean",
    "comment" : " This flag is set while receiving events from the external DTD ",
    "links" : [ ]
  }, {
    "name" : "m_doctypeSystem",
    "type" : "String",
    "comment" : "\n     * The System ID for the doc type.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_doctypePublic",
    "type" : "String",
    "comment" : "\n     * The public ID for the doc type.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_needToOutputDocTypeDecl",
    "type" : "boolean",
    "comment" : "\n     * Flag to tell that we need to add the doctype decl, which we can't do\n     * until the first element is encountered.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_shouldNotWriteXMLHeader",
    "type" : "boolean",
    "comment" : "\n     * Tells if we should write the XML declaration.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_standalone",
    "type" : "String",
    "comment" : "\n     * The standalone value for the doctype.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_standaloneWasSpecified",
    "type" : "boolean",
    "comment" : "\n     * True if standalone was specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_doIndent",
    "type" : "boolean",
    "comment" : "\n     * Flag to tell if indenting (pretty-printing) is on.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_indentAmount",
    "type" : "int",
    "comment" : "\n     * Amount to indent.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_version",
    "type" : "String",
    "comment" : "\n     * Tells the XML version, for writing out to the XML decl.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_mediatype",
    "type" : "String",
    "comment" : "\n     * The mediatype.  Not used right now.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_transformer",
    "type" : "Transformer",
    "comment" : "\n     * The transformer that was around when this output handler was created (if\n     * any).\n     ",
    "links" : [ ]
  }, {
    "name" : "m_prefixMap",
    "type" : "NamespaceMappings",
    "comment" : "\n     * Namespace support, that keeps track of currently defined \n     * prefix/uri mappings. As processed elements come and go, so do\n     * the associated mappings for that element.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_tracer",
    "type" : "SerializerTrace",
    "comment" : "\n     * Handle for firing generate events.  This interface may be implemented\n     * by the referenced transformer object.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_sourceLocator",
    "type" : "SourceLocator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_writer",
    "type" : "java.io.Writer",
    "comment" : "\n     * The writer to send output to. This field is only used in the ToStream\n     * serializers, but exists here just so that the fireStartDoc() and\n     * other fire... methods can flush this writer when tracing.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_elemContext",
    "type" : "ElemContext",
    "comment" : "\n     * A reference to \"stack frame\" corresponding to\n     * the current element. Such a frame is pushed at a startElement()\n     * and popped at an endElement(). This frame contains information about\n     * the element, such as its namespace URI. \n     ",
    "links" : [ ]
  }, {
    "name" : "m_charsBuff",
    "type" : "char[]",
    "comment" : "\n     * A utility buffer for converting Strings passed to\n     * character() methods to character arrays.\n     * Reusing this buffer means not creating a new character array\n     * everytime and it runs faster.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_attrBuff",
    "type" : "char[]",
    "comment" : "\n     * A utility buffer for converting Strings passed to\n     * attribute methods to character arrays.\n     * Reusing this buffer means not creating a new character array\n     * everytime and it runs faster.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_StringOfCDATASections",
    "type" : "String",
    "comment" : " \n     * The CDATA section names stored in a whitespace separateed list with\n     * each element being a word of the form \"{uri}localName\" This list\n     * comes from the cdata-section-elements attribute.\n     * \n     * This field replaces m_cdataSectionElements Vector.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_docIsEmpty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_CdataElems",
    "type" : "java.util.Hashtable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_OutputProps",
    "type" : "HashMap",
    "comment" : "\n     * A mapping of keys to explicitly set values, for example if \n     * and <xsl:output/> has an \"encoding\" attribute, this\n     * map will have what that attribute maps to.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_OutputPropsDefault",
    "type" : "HashMap",
    "comment" : "\n     * A mapping of keys to default values, for example if\n     * the default value of the encoding is \"UTF-8\" then this\n     * map will have that \"encoding\" maps to \"UTF-8\".\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void fireEndElem(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * To fire off the end element trace event\n     * @param name Name of element\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fireCharEvent(char[] chars, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report the characters trace event\n     * @param chars  content of characters\n     * @param start  starting index of characters to output\n     * @param length  number of characters to output\n     ",
    "links" : [ ]
  }, {
    "name" : "public void comment(String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a comment.\n     * \n     * @see ExtendedLexicalHandler#comment(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected String patchName(String qname)",
    "returnType" : "String",
    "comment" : "\n     * If at runtime, when the qname of the attribute is\n     * known, another prefix is specified for the attribute, then we can\n     * patch or hack the name with this method. For\n     * a qname of the form \"ns?:otherprefix:name\", this function patches the\n     * qname by simply ignoring \"otherprefix\".\n     * TODO: This method is a HACK! We do not have access to the\n     * XML file, it sometimes generates a NS prefix of the form \"ns?\" for\n     * an attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static String getLocalName(String qname)",
    "returnType" : "String",
    "comment" : "\n     * Returns the local name of a qualified name. If the name has no prefix,\n     * then it works as the identity (SAX2).\n     * @param qname the qualified name \n     * @return the name, but excluding any prefix and colon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "\n     * Receive an object for locating the origin of SAX document events.\n     *\n     * @param locator An object that can return the location of any SAX document\n     * event.\n     * \n     * Receive an object for locating the origin of SAX document events.\n     *\n     * <p>SAX parsers are strongly encouraged (though not absolutely\n     * required) to supply a locator: if it does so, it must supply\n     * the locator to the application by invoking this method before\n     * invoking any of the other methods in the DocumentHandler\n     * interface.</p>\n     *\n     * <p>The locator allows the application to determine the end\n     * position of any document-related event, even if the parser is\n     * not reporting an error.  Typically, the application will\n     * use this information for reporting its own errors (such as\n     * character content that does not match an application's\n     * business rules).  The information returned by the locator\n     * is probably not sufficient for use with a search engine.</p>\n     *\n     * <p>Note that the locator will return correct information only\n     * during the invocation of the events in this interface.  The\n     * application should not attempt to use it at any other time.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adds the given attribute to the set of collected attributes , but only if\n     * there is a currently open element.\n     * \n     * An element is currently open if a startElement() notification has\n     * occured but the start of the element has not yet been written to the\n     * output.  In the stream case this means that we have not yet been forced\n     * to close the elements opening tag by another notification, such as a\n     * character notification.\n     * \n     * @param uri the URI of the attribute\n     * @param localName the local name of the attribute\n     * @param rawName    the qualified name of the attribute\n     * @param type the type of the attribute (probably CDATA)\n     * @param value the value of the attribute\n     * @param XSLAttribute true if this attribute is coming from an xsl:attriute element\n     * @see ExtendedContentHandler#addAttribute(String, String, String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAttributeAlways(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the given attribute to the set of attributes, even if there is\n     * no currently open element. This is useful if a SAX startPrefixMapping()\n     * should need to add an attribute before the element name is seen.\n     * \n     * @param uri the URI of the attribute\n     * @param localName the local name of the attribute\n     * @param rawName   the qualified name of the attribute\n     * @param type the type of the attribute (probably CDATA)\n     * @param value the value of the attribute\n     * @param XSLAttribute true if this attribute is coming from an xsl:attribute element\n     * @return true if the attribute was added, \n     * false if an existing value was replaced.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String name, final String value)",
    "returnType" : "void",
    "comment" : "\n     *  Adds  the given attribute to the set of collected attributes, \n     * but only if there is a currently open element.\n     *\n     * @param name the attribute's qualified name\n     * @param value the value of the attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addXSLAttribute(String name, final String value, final String uri)",
    "returnType" : "void",
    "comment" : "\n     * Adds the given xsl:attribute to the set of collected attributes, \n     * but only if there is a currently open element.\n     *\n     * @param name the attribute's qualified name (prefix:localName)\n     * @param value the value of the attribute\n     * @param uri the URI that the prefix of the name points to\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttributes(Attributes atts) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Add the given attributes to the currently collected ones. These\n     * attributes are always added, regardless of whether on not an element\n     * is currently open.\n     * @param atts List of attributes to add to this list\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentHandler asContentHandler() throws IOException",
    "returnType" : "ContentHandler",
    "comment" : "\n     * Return a {@link ContentHandler} interface into this serializer.\n     * If the serializer does not support the {@link ContentHandler}\n     * interface, it should return null.\n     *\n     * @return A {@link ContentHandler} interface into this serializer,\n     *  or null if the serializer is not SAX 2 capable\n     * @throws IOException An I/O exception occured\n     ",
    "links" : [ "org.xml.sax.ContentHandler" ]
  }, {
    "name" : "public void endEntity(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report the end of an entity.\n     *\n     * @param name The name of the entity that is ending.\n     * @throws org.xml.sax.SAXException The application may raise an exception.\n     * @see #startEntity\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Flush and close the underlying java.io.Writer. This method applies to\n     * ToStream serializers, not ToSAXHandler serializers.\n     * @see ToStream\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void initCDATA()",
    "returnType" : "void",
    "comment" : "\n     * Initialize global variables\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEncoding()",
    "returnType" : "String",
    "comment" : "\n     * Returns the character encoding to be used in the output document.\n     * @return the character encoding to be used in the output document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEncoding(String encoding)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character encoding coming from the xsl:output encoding stylesheet attribute.\n     * @param m_encoding the character encoding\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOmitXMLDeclaration(boolean b)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value coming from the xsl:output omit-xml-declaration stylesheet attribute\n     * @param b true if the XML declaration is to be omitted from the output\n     * document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getOmitXMLDeclaration()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the XML declaration is to be omitted from the output\n     * document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDoctypePublic()",
    "returnType" : "String",
    "comment" : "\n     * Returns the previously set value of the value to be used as the public\n     * identifier in the document type declaration (DTD).\n     * \n     *@return the public identifier to be used in the DOCTYPE declaration in the\n     * output document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDoctypePublic(String doctypePublic)",
    "returnType" : "void",
    "comment" : " Set the value coming from the xsl:output doctype-public stylesheet attribute.\n      * @param doctypePublic the public identifier to be used in the DOCTYPE\n      * declaration in the output document.\n      ",
    "links" : [ ]
  }, {
    "name" : "public String getDoctypeSystem()",
    "returnType" : "String",
    "comment" : "\n     * Returns the previously set value of the value to be used\n     * as the system identifier in the document type declaration (DTD).\n\t * @return the system identifier to be used in the DOCTYPE declaration in\n\t * the output document.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDoctypeSystem(String doctypeSystem)",
    "returnType" : "void",
    "comment" : " Set the value coming from the xsl:output doctype-system stylesheet attribute.\n      * @param doctypeSystem the system identifier to be used in the DOCTYPE\n      * declaration in the output document.\n      ",
    "links" : [ ]
  }, {
    "name" : "public void setDoctype(String doctypeSystem, String doctypePublic)",
    "returnType" : "void",
    "comment" : " Set the value coming from the xsl:output doctype-public and doctype-system stylesheet properties\n     * @param doctypeSystem the system identifier to be used in the DOCTYPE\n     * declaration in the output document.\n     * @param doctypePublic the public identifier to be used in the DOCTYPE\n     * declaration in the output document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStandalone(String standalone)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value coming from the xsl:output standalone stylesheet attribute.\n     * @param standalone a value of \"yes\" indicates that the\n     * <code>standalone</code> delaration is to be included in the output\n     * document. This method remembers if the value was explicitly set using\n     * this method, verses if the value is the default value.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setStandaloneInternal(String standalone)",
    "returnType" : "void",
    "comment" : "\n     * Sets the XSL standalone attribute, but does not remember if this is a\n     * default or explicite setting.\n     * @param standalone \"yes\" | \"no\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getStandalone()",
    "returnType" : "String",
    "comment" : "\n     * Gets the XSL standalone attribute\n     * @return a value of \"yes\" if the <code>standalone</code> delaration is to\n     * be included in the output document.\n     *  @see XSLOutputAttributes#getStandalone()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getIndent()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the output document should be indented to visually\n     * indicate its structure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMediaType()",
    "returnType" : "String",
    "comment" : "\n     * Gets the mediatype the media-type or MIME type associated with the output\n     * document.\n     * @return the mediatype the media-type or MIME type associated with the\n     * output document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getVersion()",
    "returnType" : "String",
    "comment" : "\n     * Gets the version of the output format.\n     * @return the version of the output format.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVersion(String version)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value coming from the xsl:output version attribute.\n     * @param version the version of the output format.\n     * @see SerializationHandler#setVersion(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMediaType(String mediaType)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value coming from the xsl:output media-type stylesheet attribute.\n     * @param mediaType the non-null media-type or MIME type associated with the\n     * output document.\n     * @see javax.xml.transform.OutputKeys#MEDIA_TYPE\n     * @see SerializationHandler#setMediaType(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndentAmount()",
    "returnType" : "int",
    "comment" : "\n     * @return the number of spaces to indent for each indentation level.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndentAmount(int m_indentAmount)",
    "returnType" : "void",
    "comment" : "\n     * Sets the indentation amount.\n     * @param m_indentAmount The m_indentAmount to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndent(boolean doIndent)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value coming from the xsl:output indent stylesheet\n     * attribute.\n     * @param doIndent true if the output document should be indented to\n     * visually indicate its structure.\n     * @see XSLOutputAttributes#setIndent(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void namespaceAfterStartElement(String uri, String prefix) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used when a prefix/uri namespace mapping\n     * is indicated after the element was started with a \n     * startElement() and before and endElement().\n     * startPrefixMapping(prefix,uri) would be used before the\n     * startElement() call.\n     * @param uri the URI of the namespace\n     * @param prefix the prefix associated with the given URI.\n     * \n     * @see ExtendedContentHandler#namespaceAfterStartElement(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public DOMSerializer asDOMSerializer() throws IOException",
    "returnType" : "DOMSerializer",
    "comment" : "\n     * Return a {@link DOMSerializer} interface into this serializer. If the\n     * serializer does not support the {@link DOMSerializer} interface, it should\n     * return null.\n     *\n     * @return A {@link DOMSerializer} interface into this serializer,  or null\n     * if the serializer is not DOM capable\n     * @throws IOException An I/O exception occured\n     * @see Serializer#asDOMSerializer()\n     ",
    "links" : [ "org.apache.xml.serializer.DOMSerializer" ]
  }, {
    "name" : "private static final boolean subPartMatch(String p, String t)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if two strings are equal, without worry if the first string is null.\n     *\n     * @param p String reference, which may be null.\n     * @param t String reference, which may be null.\n     *\n     * @return true if strings are equal.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static final String getPrefixPart(String qname)",
    "returnType" : "String",
    "comment" : "\n     * Returns the local name of a qualified name. \n     * If the name has no prefix,\n     * then it works as the identity (SAX2). \n     * \n     * @param qname a qualified name\n     * @return returns the prefix of the qualified name,\n     * or null if there is no prefix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NamespaceMappings getNamespaceMappings()",
    "returnType" : "NamespaceMappings",
    "comment" : "\n     * Some users of the serializer may need the current namespace mappings\n     * @return the current namespace mappings (prefix/uri)\n     * @see ExtendedContentHandler#getNamespaceMappings()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix(String namespaceURI)",
    "returnType" : "String",
    "comment" : "\n     * Returns the prefix currently pointing to the given URI (if any).\n     * @param namespaceURI the uri of the namespace in question\n     * @return a prefix pointing to the given URI (if any).\n     * @see ExtendedContentHandler#getPrefix(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURI(String qname, boolean isElement)",
    "returnType" : "String",
    "comment" : "\n     * Returns the URI of an element or attribute. Note that default namespaces\n     * do not apply directly to attributes.\n     * @param qname a qualified name\n     * @param isElement true if the qualified name is the name of \n     * an element.\n     * @return returns the namespace URI associated with the qualified name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURIFromPrefix(String prefix)",
    "returnType" : "String",
    "comment" : "\n     * Returns the URI of prefix (if any)\n     * \n\t * @param prefix the prefix whose URI is searched for\n     * @return the namespace URI currently associated with the\n     * prefix, null if the prefix is undefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void entityReference(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Entity reference event.\n     *\n     * @param name Name of entity\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTransformer(Transformer t)",
    "returnType" : "void",
    "comment" : "\n     * Sets the transformer associated with this serializer\n     * @param t the transformer associated with this serializer.\n     * @see SerializationHandler#setTransformer(Transformer)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Transformer getTransformer()",
    "returnType" : "Transformer",
    "comment" : "\n     * Gets the transformer associated with this serializer\n     * @return returns the transformer associated with this serializer.\n     * @see SerializationHandler#getTransformer()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method gets the nodes value as a String and uses that String as if\n     * it were an input character notification.\n     * @param node the Node to serialize\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void error(SAXParseException exc) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ErrorHandler#error(SAXParseException)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fatalError(SAXParseException exc) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ErrorHandler#fatalError(SAXParseException)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void warning(SAXParseException exc) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ErrorHandler#warning(SAXParseException)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fireStartEntity(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * To fire off start entity trace event\n     * @param name Name of entity\n     ",
    "links" : [ ]
  }, {
    "name" : "private void flushMyWriter()",
    "returnType" : "void",
    "comment" : "\n     * This method is only used internally when flushing the writer from the\n     * various fire...() trace events.  Due to the writer being wrapped with \n     * SerializerTraceWriter it may cause the flush of these trace events:\n     * EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS \n     * EVENTTYPE_OUTPUT_CHARACTERS\n     * which trace the output written to the output stream.\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fireCDATAEvent(char[] chars, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report the CDATA trace event\n     * @param chars  content of CDATA\n     * @param start  starting index of characters to output\n     * @param length  number of characters to output\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fireCommentEvent(char[] chars, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report the comment trace event\n     * @param chars  content of comment\n     * @param start  starting index of comment to output\n     * @param length  number of characters to output\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fireEndEntity(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * To fire off end entity trace event\n     * @param name Name of entity\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fireStartDoc() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * To fire off start document trace  event\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fireEndDoc() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * To fire off end document trace event\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fireStartElem(String elemName) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report the start element trace event. This trace method needs to be\n     * called just before the attributes are cleared.\n     * \n     * @param elemName the qualified name of the element\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fireEscapingEvent(String name, String data) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * To fire off the PI trace event\n     * @param name Name of PI\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void fireEntityReference(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * To fire off the entity reference trace event\n     * @param name Name of entity reference\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the beginning of a document.\n     * This method is never a self generated call, \n     * but only called externally.\n     *\n     * <p>The SAX parser will invoke this method only once, before any\n     * other methods in this interface or in DTDHandler (except for\n     * setDocumentLocator).</p>\n     *\n     * @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void startDocumentInternal() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method handles what needs to be done at a startDocument() call,\n     * whether from an external caller, or internally called in the \n     * serializer.  For historical reasons the serializer is flexible to\n     * startDocument() not always being called.\n     * Even if no external call is\n     * made into startDocument() this method will always be called as a self\n     * generated internal startDocument, it handles what needs to be done at a\n     * startDocument() call.\n     * \n     * This method exists just to make sure that startDocument() is only ever\n     * called from an external caller, which in principle is just a matter of\n     * style.\n     * \n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSourceLocator(SourceLocator locator)",
    "returnType" : "void",
    "comment" : "\n     * This method is used to set the source locator, which might be used to\n     * generated an error message.\n     * @param locator the source locator\n     *\n     * @see ExtendedContentHandler#setSourceLocator(javax.xml.transform.SourceLocator)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNamespaceMappings(NamespaceMappings mappings)",
    "returnType" : "void",
    "comment" : " \n     * Used only by TransformerSnapshotImpl to restore the serialization \n     * to a previous state. \n     * \n     * @param mappings NamespaceMappings\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reset()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetSerializerBase()",
    "returnType" : "void",
    "comment" : "\n     * Reset all of the fields owned by SerializerBase\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " final boolean inTemporaryOutputState()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the serializer is used for temporary output rather than\n     * final output.\n     * \n     * This concept is made clear in the XSLT 2.0 draft.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String uri, String localName, String rawName, String type, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method adds an attribute the the current element,\n     * but should not be used for an xsl:attribute child.\n     * @see ExtendedContentHandler#addAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notationDecl(String arg0, String arg1, String arg2) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.DTDHandler#notationDecl(java.lang.String, java.lang.String, java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unparsedEntityDecl(String arg0, String arg1, String arg2, String arg3) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.DTDHandler#unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDTDEntityExpansion(boolean expand)",
    "returnType" : "void",
    "comment" : "\n     * If set to false the serializer does not expand DTD entities,\n     * but leaves them as is, the default value is true.\n     ",
    "links" : [ ]
  }, {
    "name" : " void initCdataElems(String s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addCDATAElement(String uri, String localName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean documentIsEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if nothing has been sent to this result tree yet.\n     * <p>\n     * This is not a public API.\n     * \n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isCdataSection()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the current element in m_elemContext\n     * is a CDATA section.\n     * CDATA sections are specified in the <xsl:output> attribute\n     * cdata-section-names or in the JAXP equivalent property.\n     * In any case the format of the value of such a property is:\n     * <pre>\n     * \"{uri1}localName1 {uri2}localName2 . . . \"\n     * </pre>\n     * \n     * <p>\n     * This method is not a public API, but is only used internally by the serializer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getElementURI()",
    "returnType" : "String",
    "comment" : "\n     * Before this call m_elementContext.m_elementURI is null,\n     * which means it is not yet known. After this call it\n     * is non-null, but possibly \"\" meaning that it is in the\n     * default namespace.\n     * \n     * @return The URI of the element, never null, but possibly \"\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOutputProperty(String name)",
    "returnType" : "String",
    "comment" : "\n     * Get the value of an output property,\n     * the explicit value, if any, otherwise the\n     * default value, if any, otherwise null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOutputPropertyNonDefault(String name)",
    "returnType" : "String",
    "comment" : "\n     * Get the value of an output property, \n     * not the default value. If there is a default\n     * value, but no non-default value this method\n     * will return null.\n     * <p>\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "public Object asDOM3Serializer() throws IOException",
    "returnType" : "Object",
    "comment" : "\n     * Return a {@link DOM3Serializer} interface into this serializer. If the\n     * serializer does not support the {@link DOM3Serializer} interface, it should\n     * return null.\n     *\n     * @return A {@link DOM3Serializer} interface into this serializer,  or null\n     * if the serializer is not DOM capable\n     * @throws IOException An I/O exception occured\n     * @see org.apache.xml.serializer.Serializer#asDOM3Serializer()\n     ",
    "links" : [ "org.apache.xml.serializer.DOM3Serializer" ]
  }, {
    "name" : "public String getOutputPropertyDefault(String name)",
    "returnType" : "String",
    "comment" : "\n     * Get the default value of an xsl:output property,\n     * which would be null only if no default value exists\n     * for the property.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputProperty(String name, String val)",
    "returnType" : "void",
    "comment" : "\n     * Set the value for the output property, typically from\n     * an xsl:output element, but this does not change what\n     * the default value is.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputPropertyDefault(String name, String val)",
    "returnType" : "void",
    "comment" : "\n     * Set the default value for an output property, but this does\n     * not impact any explicitly set value.\n     ",
    "links" : [ ]
  }, {
    "name" : " Set getOutputPropDefaultKeys()",
    "returnType" : "Set",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Set getOutputPropKeys()",
    "returnType" : "Set",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getProp(String name, boolean defaultVal)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setProp(String name, String val, boolean defaultVal)",
    "returnType" : "void",
    "comment" : "\n     * \n     * @param name The name of the property, e.g. \"{http://myprop}indent-tabs\" or \"indent\".\n     * @param val The value of the property, e.g. \"4\"\n     * @param defaultVal true if this is a default value being set for the property as \n     * opposed to a user define on, set say explicitly in the stylesheet or via JAXP\n     ",
    "links" : [ ]
  }, {
    "name" : " static char getFirstCharLocName(String name)",
    "returnType" : "char",
    "comment" : "\n     * Get the first char of the local name\n     * @param name Either a local name, or a local name\n     * preceeded by a uri enclosed in curly braces.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void fireEndElem(String name) throws org.xml.sax.SAXException", "protected void fireCharEvent(char[] chars, int start, int length) throws org.xml.sax.SAXException", "public void comment(String data) throws SAXException", "protected String patchName(String qname)", "protected static String getLocalName(String qname)", "public void setDocumentLocator(Locator locator)", "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute) throws SAXException", "public boolean addAttributeAlways(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute)", "public void addAttribute(String name, final String value)", "public void addXSLAttribute(String name, final String value, final String uri)", "public void addAttributes(Attributes atts) throws SAXException", "public ContentHandler asContentHandler() throws IOException", "public void endEntity(String name) throws org.xml.sax.SAXException", "public void close()", "protected void initCDATA()", "public String getEncoding()", "public void setEncoding(String encoding)", "public void setOmitXMLDeclaration(boolean b)", "public boolean getOmitXMLDeclaration()", "public String getDoctypePublic()", "public void setDoctypePublic(String doctypePublic)", "public String getDoctypeSystem()", "public void setDoctypeSystem(String doctypeSystem)", "public void setDoctype(String doctypeSystem, String doctypePublic)", "public void setStandalone(String standalone)", "protected void setStandaloneInternal(String standalone)", "public String getStandalone()", "public boolean getIndent()", "public String getMediaType()", "public String getVersion()", "public void setVersion(String version)", "public void setMediaType(String mediaType)", "public int getIndentAmount()", "public void setIndentAmount(int m_indentAmount)", "public void setIndent(boolean doIndent)", "public void namespaceAfterStartElement(String uri, String prefix) throws SAXException", "public DOMSerializer asDOMSerializer() throws IOException", "private static final boolean subPartMatch(String p, String t)", "protected static final String getPrefixPart(String qname)", "public NamespaceMappings getNamespaceMappings()", "public String getPrefix(String namespaceURI)", "public String getNamespaceURI(String qname, boolean isElement)", "public String getNamespaceURIFromPrefix(String prefix)", "public void entityReference(String name) throws org.xml.sax.SAXException", "public void setTransformer(Transformer t)", "public Transformer getTransformer()", "public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException", "public void error(SAXParseException exc) throws SAXException", "public void fatalError(SAXParseException exc) throws SAXException", "public void warning(SAXParseException exc) throws SAXException", "protected void fireStartEntity(String name) throws org.xml.sax.SAXException", "private void flushMyWriter()", "protected void fireCDATAEvent(char[] chars, int start, int length) throws org.xml.sax.SAXException", "protected void fireCommentEvent(char[] chars, int start, int length) throws org.xml.sax.SAXException", "public void fireEndEntity(String name) throws org.xml.sax.SAXException", "protected void fireStartDoc() throws org.xml.sax.SAXException", "protected void fireEndDoc() throws org.xml.sax.SAXException", "protected void fireStartElem(String elemName) throws org.xml.sax.SAXException", "protected void fireEscapingEvent(String name, String data) throws org.xml.sax.SAXException", "protected void fireEntityReference(String name) throws org.xml.sax.SAXException", "public void startDocument() throws org.xml.sax.SAXException", "protected void startDocumentInternal() throws org.xml.sax.SAXException", "public void setSourceLocator(SourceLocator locator)", "public void setNamespaceMappings(NamespaceMappings mappings)", "public boolean reset()", "private void resetSerializerBase()", " final boolean inTemporaryOutputState()", "public void addAttribute(String uri, String localName, String rawName, String type, String value) throws SAXException", "public void notationDecl(String arg0, String arg1, String arg2) throws SAXException", "public void unparsedEntityDecl(String arg0, String arg1, String arg2, String arg3) throws SAXException", "public void setDTDEntityExpansion(boolean expand)", " void initCdataElems(String s)", "private void addCDATAElement(String uri, String localName)", "public boolean documentIsEmpty()", "protected boolean isCdataSection()", "private String getElementURI()", "public String getOutputProperty(String name)", "public String getOutputPropertyNonDefault(String name)", "public Object asDOM3Serializer() throws IOException", "public String getOutputPropertyDefault(String name)", "public void setOutputProperty(String name, String val)", "public void setOutputPropertyDefault(String name, String val)", " Set getOutputPropDefaultKeys()", " Set getOutputPropKeys()", "private String getProp(String name, boolean defaultVal)", " void setProp(String name, String val, boolean defaultVal)", " static char getFirstCharLocName(String name)" ],
  "variableNames" : [ "PKG_NAME", "PKG_PATH", "m_needToCallStartDocument", "m_cdataTagOpen", "m_attributes", "m_inEntityRef", "m_inExternalDTD", "m_doctypeSystem", "m_doctypePublic", "m_needToOutputDocTypeDecl", "m_shouldNotWriteXMLHeader", "m_standalone", "m_standaloneWasSpecified", "m_doIndent", "m_indentAmount", "m_version", "m_mediatype", "m_transformer", "m_prefixMap", "m_tracer", "m_sourceLocator", "m_writer", "m_elemContext", "m_charsBuff", "m_attrBuff", "m_StringOfCDATASections", "m_docIsEmpty", "m_CdataElems", "m_OutputProps", "m_OutputPropsDefault" ]
}