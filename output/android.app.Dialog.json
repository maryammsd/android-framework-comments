{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/Dialog.java",
  "packageName" : "android.app",
  "className" : "Dialog",
  "comment" : "\n * Base class for Dialogs.\n * \n * <p>Note: Activities provide a facility to manage the creation, saving and\n * restoring of dialogs. See {@link Activity#onCreateDialog(int)},\n * {@link Activity#onPrepareDialog(int, Dialog)},\n * {@link Activity#showDialog(int)}, and {@link Activity#dismissDialog(int)}. If\n * these methods are used, {@link #getOwnerActivity()} will return the Activity\n * that managed this dialog.\n * \n * <p>Often you will want to have a Dialog display on top of the current\n * input method, because there is no reason for it to accept text.  You can\n * do this by setting the {@link WindowManager.LayoutParams#FLAG_ALT_FOCUSABLE_IM\n * WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM} window flag (assuming\n * your Dialog takes input focus, as it the default) with the following code:\n * \n * <pre>\n * getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM,\n *         WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);</pre>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about creating dialogs, read the\n * <a href=\"{@docRoot}guide/topics/ui/dialogs.html\">Dialogs</a> developer guide.</p>\n * </div>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOwnerActivity",
    "type" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowManager",
    "type" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindow",
    "type" : "Window",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDecor",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActionBar",
    "type" : "ActionBar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancelable",
    "type" : "boolean",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mCancelAndDismissTaken",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancelMessage",
    "type" : "Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDismissMessage",
    "type" : "Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowMessage",
    "type" : "Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnKeyListener",
    "type" : "OnKeyListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCreated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanceled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISMISS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANCEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHOW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenersHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchEvent",
    "type" : "SearchEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActionMode",
    "type" : "ActionMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActionModeTypeStarting",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDismissAction",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIALOG_SHOWING_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIALOG_HIERARCHY_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Retrieve the Context this Dialog is running in.\n     * \n     * @return Context The Context used by the Dialog.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ActionBar getActionBar()",
    "returnType" : "ActionBar",
    "comment" : "\n     * Retrieve the {@link ActionBar} attached to this dialog, if present.\n     *\n     * @return The ActionBar attached to the dialog or null if no ActionBar is present.\n     ",
    "links" : [ "com.android.internal.app.WindowDecorActionBar" ]
  }, {
    "name" : "public final void setOwnerActivity(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Activity that owns this dialog. An example use: This Dialog will\n     * use the suggested volume control stream of the Activity.\n     * \n     * @param activity The Activity that owns this dialog.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Activity getOwnerActivity()",
    "returnType" : "Activity",
    "comment" : "\n     * Returns the Activity that owns this Dialog. For example, if\n     * {@link Activity#showDialog(int)} is used to show this Dialog, that\n     * Activity will be the owner (by default). Depending on how this dialog was\n     * created, this may return null.\n     * \n     * @return The Activity that owns this Dialog.\n     ",
    "links" : [ "android.app.Activity#showDialog(int)" ]
  }, {
    "name" : "public boolean isShowing()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the dialog is currently showing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void create()",
    "returnType" : "void",
    "comment" : "\n     * Forces immediate creation of the dialog.\n     * <p>\n     * Note that you should not override this method to perform dialog creation.\n     * Rather, override {@link #onCreate(Bundle)}.\n     ",
    "links" : [ "#onCreate(Bundle)" ]
  }, {
    "name" : "public void show()",
    "returnType" : "void",
    "comment" : "\n     * Start the dialog and display it on screen.  The window is placed in the\n     * application layer and opaque.  Note that you should not override this\n     * method to do initialization when the dialog is shown, instead implement\n     * that in {@link #onStart}.\n     ",
    "links" : [ "#onStart" ]
  }, {
    "name" : "public void hide()",
    "returnType" : "void",
    "comment" : "\n     * Hide the dialog, but do not dismiss it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dismiss()",
    "returnType" : "void",
    "comment" : "\n     * Dismiss this dialog, removing it from the screen. This method can be\n     * invoked safely from any thread.  Note that you should not override this\n     * method to do cleanup when the dialog is dismissed, instead implement\n     * that in {@link #onStop}.\n     ",
    "links" : [ "#onStop" ]
  }, {
    "name" : " void dismissDialog()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendDismissMessage()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendShowMessage()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnCreate(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : " users to call through to super in onCreate",
    "links" : [ ]
  }, {
    "name" : "protected void onCreate(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "\n     * Similar to {@link Activity#onCreate}, you should initialize your dialog\n     * in this method, including calling {@link #setContentView}.\n     * @param savedInstanceState If this dialog is being reinitialized after a\n     *     the hosting activity was previously shut down, holds the result from\n     *     the most recent call to {@link #onSaveInstanceState}, or null if this\n     *     is the first time.\n     ",
    "links" : [ "#setContentView", "android.app.Activity#onCreate", "#onSaveInstanceState" ]
  }, {
    "name" : "protected void onStart()",
    "returnType" : "void",
    "comment" : "\n     * Called when the dialog is starting.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onStop()",
    "returnType" : "void",
    "comment" : "\n     * Called to tell you that you're stopping.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle onSaveInstanceState()",
    "returnType" : "Bundle",
    "comment" : "\n     * Saves the state of the dialog into a bundle.\n     *\n     * The default implementation saves the state of its view hierarchy, so you'll\n     * likely want to call through to super if you override this to save additional\n     * state.\n     * @return A bundle with the state of the dialog.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(@NonNull Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "\n     * Restore the state of the dialog from a previously saved bundle.\n     *\n     * The default implementation restores the state of the dialog's view\n     * hierarchy that was saved in the default implementation of {@link #onSaveInstanceState()},\n     * so be sure to call through to super when overriding unless you want to\n     * do all restoring of state yourself.\n     * @param savedInstanceState The state of the dialog previously saved by\n     *     {@link #onSaveInstanceState()}.\n     ",
    "links" : [ "#onSaveInstanceState()" ]
  }, {
    "name" : "public Window getWindow()",
    "returnType" : "Window",
    "comment" : "\n     * Retrieve the current Window for the activity.  This can be used to\n     * directly access parts of the Window API that are not available\n     * through Activity/Screen.\n     * \n     * @return Window The current window, or null if the activity is not\n     *         visual.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getCurrentFocus()",
    "returnType" : "View",
    "comment" : "\n     * Call {@link android.view.Window#getCurrentFocus} on the\n     * Window if this Activity to return the currently focused view.\n     * \n     * @return View The current View with focus or null.\n     * \n     * @see #getWindow\n     * @see android.view.Window#getCurrentFocus\n     ",
    "links" : [ "android.view.Window#getCurrentFocus" ]
  }, {
    "name" : "public T findViewById(@IdRes int id)",
    "returnType" : "T",
    "comment" : "\n     * Finds the first descendant view with the given ID or {@code null} if the\n     * ID is invalid (< 0), there is no matching view in the hierarchy, or the\n     * dialog has not yet been fully created (for example, via {@link #show()}\n     * or {@link #create()}).\n     * <p>\n     * <strong>Note:</strong> In most cases -- depending on compiler support --\n     * the resulting view is automatically cast to the target class type. If\n     * the target class type is unconstrained, an explicit cast may be\n     * necessary.\n     *\n     * @param id the ID to search for\n     * @return a view with given ID if found, or {@code null} otherwise\n     * @see View#findViewById(int)\n     * @see Dialog#requireViewById(int)\n     ",
    "links" : [ "#show()", "#create()" ]
  }, {
    "name" : "public final T requireViewById(@IdRes int id)",
    "returnType" : "T",
    "comment" : "\n     * Finds the first descendant view with the given ID or throws an IllegalArgumentException if\n     * the ID is invalid (< 0), there is no matching view in the hierarchy, or the dialog has not\n     * yet been fully created (for example, via {@link #show()} or {@link #create()}).\n     * <p>\n     * <strong>Note:</strong> In most cases -- depending on compiler support --\n     * the resulting view is automatically cast to the target class type. If\n     * the target class type is unconstrained, an explicit cast may be\n     * necessary.\n     *\n     * @param id the ID to search for\n     * @return a view with given ID\n     * @see View#requireViewById(int)\n     * @see Dialog#findViewById(int)\n     ",
    "links" : [ "#show()", "#create()" ]
  }, {
    "name" : "public void setContentView(@LayoutRes int layoutResID)",
    "returnType" : "void",
    "comment" : "\n     * Set the screen content from a layout resource.  The resource will be\n     * inflated, adding all top-level views to the screen.\n     * \n     * @param layoutResID Resource ID to be inflated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentView(@NonNull View view)",
    "returnType" : "void",
    "comment" : "\n     * Set the screen content to an explicit view.  This view is placed\n     * directly into the screen's view hierarchy.  It can itself be a complex\n     * view hierarchy.\n     * \n     * @param view The desired content to display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentView(@NonNull View view, @Nullable ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * Set the screen content to an explicit view.  This view is placed\n     * directly into the screen's view hierarchy.  It can itself be a complex\n     * view hierarchy.\n     * \n     * @param view The desired content to display.\n     * @param params Layout parameters for the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addContentView(@NonNull View view, @Nullable ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * Add an additional content view to the screen.  Added after any existing\n     * ones in the screen -- existing views are NOT removed.\n     * \n     * @param view The desired content to display.\n     * @param params Layout parameters for the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitle(@Nullable CharSequence title)",
    "returnType" : "void",
    "comment" : "\n     * Set the title text for this dialog's window.\n     * \n     * @param title The new text to display in the title.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitle(@StringRes int titleId)",
    "returnType" : "void",
    "comment" : "\n     * Set the title text for this dialog's window. The text is retrieved\n     * from the resources with the supplied identifier.\n     *\n     * @param titleId the title's text resource identifier\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * A key was pressed down.\n     * <p>\n     * If the focused view didn't want this event, this method is called.\n     * <p>\n     * Default implementation consumes {@link KeyEvent#KEYCODE_BACK KEYCODE_BACK}\n     * and, as of {@link android.os.Build.VERSION_CODES#P P}, {@link KeyEvent#KEYCODE_ESCAPE\n     * KEYCODE_ESCAPE} to later handle them in {@link #onKeyUp}.\n     * \n     * @see #onKeyUp\n     * @see android.view.KeyEvent\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.view.KeyEvent#KEYCODE_ESCAPEKEYCODE_ESCAPE", "#onKeyUp", "android.view.KeyEvent#KEYCODE_BACK" ]
  }, {
    "name" : "public boolean onKeyLongPress(int keyCode, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation of {@link KeyEvent.Callback#onKeyLongPress(int, KeyEvent)\n     * KeyEvent.Callback.onKeyLongPress()}: always returns false (doesn't handle\n     * the event).\n     ",
    "links" : [ "KeyEvent.Callback#onKeyLongPress(int" ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * A key was released.\n     * <p>\n     * Default implementation consumes {@link KeyEvent#KEYCODE_BACK KEYCODE_BACK}\n     * and, as of {@link android.os.Build.VERSION_CODES#P P}, {@link KeyEvent#KEYCODE_ESCAPE\n     * KEYCODE_ESCAPE} to close the dialog.\n     *\n     * @see #onKeyDown\n     * @see android.view.KeyEvent\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.view.KeyEvent#KEYCODE_ESCAPEKEYCODE_ESCAPE", "android.view.KeyEvent#KEYCODE_BACK" ]
  }, {
    "name" : "public boolean onKeyMultiple(int keyCode, int repeatCount, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation of {@link KeyEvent.Callback#onKeyMultiple(int, int, KeyEvent)\n     * KeyEvent.Callback.onKeyMultiple()}: always returns false (doesn't handle\n     * the event).\n     ",
    "links" : [ "KeyEvent.Callback#onKeyMultiple(int" ]
  }, {
    "name" : "public void onBackPressed()",
    "returnType" : "void",
    "comment" : "\n     * Called when the dialog has detected the user's press of the back\n     * key.  The default implementation simply cancels the dialog (only if\n     * it is cancelable), but you can override this to do whatever you want.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyShortcut(int keyCode, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when a key shortcut event is not handled by any of the views in the Dialog.\n     * Override this method to implement global key shortcuts for the Dialog.\n     * Key shortcuts can also be implemented by setting the\n     * {@link MenuItem#setShortcut(char, char) shortcut} property of menu items.\n     *\n     * @param keyCode The value in event.getKeyCode().\n     * @param event Description of the key event.\n     * @return True if the key shortcut was handled.\n     ",
    "links" : [ "android.view.MenuItem#setShortcut(char" ]
  }, {
    "name" : "public boolean onTouchEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when a touch screen event was not handled by any of the views\n     * under it. This is most useful to process touch events that happen outside\n     * of your window bounds, where there is no view to receive it.\n     * \n     * @param event The touch screen event being processed.\n     * @return Return true if you have consumed the event, false if you haven't.\n     *         The default implementation will cancel the dialog when a touch\n     *         happens outside of the window bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTrackballEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when the trackball was moved and not handled by any of the\n     * views inside of the activity.  So, for example, if the trackball moves\n     * while focus is on a button, you will receive a call here because\n     * buttons do not normally do anything with trackball events.  The call\n     * here happens <em>before</em> trackball movements are converted to\n     * DPAD key events, which then get sent back to the view hierarchy, and\n     * will be processed at the point for things like focus navigation.\n     * \n     * @param event The trackball event being processed.\n     * \n     * @return Return true if you have consumed the event, false if you haven't.\n     * The default implementation always returns false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onGenericMotionEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when a generic motion event was not handled by any of the\n     * views inside of the dialog.\n     * <p>\n     * Generic motion events describe joystick movements, mouse hovers, track pad\n     * touches, scroll wheel movements and other input events.  The\n     * {@link MotionEvent#getSource() source} of the motion event specifies\n     * the class of input that was received.  Implementations of this method\n     * must examine the bits in the source before processing the event.\n     * The following code example shows how this is done.\n     * </p><p>\n     * Generic motion events with source class\n     * {@link android.view.InputDevice#SOURCE_CLASS_POINTER}\n     * are delivered to the view under the pointer.  All other generic motion events are\n     * delivered to the focused view.\n     * </p><p>\n     * See {@link View#onGenericMotionEvent(MotionEvent)} for an example of how to\n     * handle this event.\n     * </p>\n     *\n     * @param event The generic motion event being processed.\n     *\n     * @return Return true if you have consumed the event, false if you haven't.\n     * The default implementation always returns false.\n     ",
    "links" : [ "android.view.MotionEvent#getSource()", "android.view.View#onGenericMotionEvent(MotionEvent)", "android.view.InputDevice#SOURCE_CLASS_POINTER" ]
  }, {
    "name" : "public void onWindowAttributesChanged(WindowManager.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onContentChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusChanged(boolean hasFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onWindowDismissed(boolean finishTask, boolean suppressWindowTransition)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyEvent(@NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Called to process key events.  You can override this to intercept all\n     * key events before they are dispatched to the window.  Be sure to call\n     * this implementation for key events that should be handled normally.\n     *\n     * @param event The key event.\n     *\n     * @return boolean Return true if this event was consumed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyShortcutEvent(@NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Called to process a key shortcut event.\n     * You can override this to intercept all key shortcut events before they are\n     * dispatched to the window.  Be sure to call this implementation for key shortcut\n     * events that should be handled normally.\n     *\n     * @param event The key shortcut event.\n     * @return True if this event was consumed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTouchEvent(@NonNull MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "\n     * Called to process touch screen events.  You can override this to\n     * intercept all touch screen events before they are dispatched to the\n     * window.  Be sure to call this implementation for touch screen events\n     * that should be handled normally.\n     * \n     * @param ev The touch screen event.\n     * \n     * @return boolean Return true if this event was consumed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTrackballEvent(@NonNull MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "\n     * Called to process trackball events.  You can override this to\n     * intercept all trackball events before they are dispatched to the\n     * window.  Be sure to call this implementation for trackball events\n     * that should be handled normally.\n     * \n     * @param ev The trackball event.\n     * \n     * @return boolean Return true if this event was consumed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchGenericMotionEvent(@NonNull MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "\n     * Called to process generic motion events.  You can override this to\n     * intercept all generic motion events before they are dispatched to the\n     * window.  Be sure to call this implementation for generic motion events\n     * that should be handled normally.\n     *\n     * @param ev The generic motion event.\n     *\n     * @return boolean Return true if this event was consumed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEvent(@NonNull AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View onCreatePanelView(int featureId)",
    "returnType" : "View",
    "comment" : "\n     * @see Activity#onCreatePanelView(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onCreatePanelMenu(int featureId, @NonNull Menu menu)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Activity#onCreatePanelMenu(int, Menu)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onPreparePanel(int featureId, @Nullable View view, @NonNull Menu menu)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Activity#onPreparePanel(int, View, Menu)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onMenuOpened(int featureId, @NonNull Menu menu)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Activity#onMenuOpened(int, Menu)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onMenuItemSelected(int featureId, @NonNull MenuItem item)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Activity#onMenuItemSelected(int, MenuItem)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPanelClosed(int featureId, @NonNull Menu menu)",
    "returnType" : "void",
    "comment" : "\n     * @see Activity#onPanelClosed(int, Menu)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onCreateOptionsMenu(@NonNull Menu menu)",
    "returnType" : "boolean",
    "comment" : "\n     * It is usually safe to proxy this call to the owner activity's\n     * {@link Activity#onCreateOptionsMenu(Menu)} if the client desires the same\n     * menu for this Dialog.\n     * \n     * @see Activity#onCreateOptionsMenu(Menu)\n     * @see #getOwnerActivity()\n     ",
    "links" : [ "android.app.Activity#onCreateOptionsMenu(Menu)" ]
  }, {
    "name" : "public boolean onPrepareOptionsMenu(@NonNull Menu menu)",
    "returnType" : "boolean",
    "comment" : "\n     * It is usually safe to proxy this call to the owner activity's\n     * {@link Activity#onPrepareOptionsMenu(Menu)} if the client desires the\n     * same menu for this Dialog.\n     * \n     * @see Activity#onPrepareOptionsMenu(Menu)\n     * @see #getOwnerActivity()\n     ",
    "links" : [ "android.app.Activity#onPrepareOptionsMenu(Menu)" ]
  }, {
    "name" : "public boolean onOptionsItemSelected(@NonNull MenuItem item)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Activity#onOptionsItemSelected(MenuItem)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onOptionsMenuClosed(@NonNull Menu menu)",
    "returnType" : "void",
    "comment" : "\n     * @see Activity#onOptionsMenuClosed(Menu)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void openOptionsMenu()",
    "returnType" : "void",
    "comment" : "\n     * @see Activity#openOptionsMenu()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeOptionsMenu()",
    "returnType" : "void",
    "comment" : "\n     * @see Activity#closeOptionsMenu()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateOptionsMenu()",
    "returnType" : "void",
    "comment" : "\n     * @see Activity#invalidateOptionsMenu()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo)",
    "returnType" : "void",
    "comment" : "\n     * @see Activity#onCreateContextMenu(ContextMenu, View, ContextMenuInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerForContextMenu(@NonNull View view)",
    "returnType" : "void",
    "comment" : "\n     * @see Activity#registerForContextMenu(View)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterForContextMenu(@NonNull View view)",
    "returnType" : "void",
    "comment" : "\n     * @see Activity#unregisterForContextMenu(View)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void openContextMenu(@NonNull View view)",
    "returnType" : "void",
    "comment" : "\n     * @see Activity#openContextMenu(View)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onContextItemSelected(@NonNull MenuItem item)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Activity#onContextItemSelected(MenuItem)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onContextMenuClosed(@NonNull Menu menu)",
    "returnType" : "void",
    "comment" : "\n     * @see Activity#onContextMenuClosed(Menu)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onSearchRequested(@NonNull SearchEvent searchEvent)",
    "returnType" : "boolean",
    "comment" : "\n     * This hook is called when the user signals the desire to start a search.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onSearchRequested()",
    "returnType" : "boolean",
    "comment" : "\n     * This hook is called when the user signals the desire to start a search.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SearchEvent getSearchEvent()",
    "returnType" : "SearchEvent",
    "comment" : "\n     * During the onSearchRequested() callbacks, this function will return the\n     * {@link SearchEvent} that triggered the callback, if it exists.\n     *\n     * @return SearchEvent The SearchEvent that triggered the {@link\n     *                    #onSearchRequested} callback.\n     ",
    "links" : [ "android.view.SearchEvent", "#onSearchRequested" ]
  }, {
    "name" : "public ActionMode onWindowStartingActionMode(ActionMode.Callback callback)",
    "returnType" : "ActionMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActionMode onWindowStartingActionMode(ActionMode.Callback callback, int type)",
    "returnType" : "ActionMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onActionModeStarted(ActionMode mode)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * Note that if you override this method you should always call through\n     * to the superclass implementation by calling super.onActionModeStarted(mode).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onActionModeFinished(ActionMode mode)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * Note that if you override this method you should always call through\n     * to the superclass implementation by calling super.onActionModeFinished(mode).\n     ",
    "links" : [ ]
  }, {
    "name" : "private ComponentName getAssociatedActivity()",
    "returnType" : "ComponentName",
    "comment" : "\n     * @return The activity associated with this dialog, or null if there is no associated activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void takeKeyEvents(boolean get)",
    "returnType" : "void",
    "comment" : "\n     * Request that key events come to this dialog. Use this if your\n     * dialog has no views with focus, but the dialog still wants\n     * a chance to process key events.\n     * \n     * @param get true if the dialog should receive key events, false otherwise\n     * @see android.view.Window#takeKeyEvents\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean requestWindowFeature(int featureId)",
    "returnType" : "boolean",
    "comment" : "\n     * Enable extended window features.  This is a convenience for calling\n     * {@link android.view.Window#requestFeature getWindow().requestFeature()}.\n     * \n     * @param featureId The desired feature as defined in\n     *                  {@link android.view.Window}.\n     * @return Returns true if the requested feature is supported and now\n     *         enabled.\n     * \n     * @see android.view.Window#requestFeature\n     ",
    "links" : [ "android.view.Window#requestFeature", "android.view.Window" ]
  }, {
    "name" : "public final void setFeatureDrawableResource(int featureId, @DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for calling\n     * {@link android.view.Window#setFeatureDrawableResource}.\n     ",
    "links" : [ "android.view.Window#setFeatureDrawableResource" ]
  }, {
    "name" : "public final void setFeatureDrawableUri(int featureId, @Nullable Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for calling\n     * {@link android.view.Window#setFeatureDrawableUri}.\n     ",
    "links" : [ "android.view.Window#setFeatureDrawableUri" ]
  }, {
    "name" : "public final void setFeatureDrawable(int featureId, @Nullable Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for calling\n     * {@link android.view.Window#setFeatureDrawable(int, Drawable)}.\n     ",
    "links" : [ "android.view.Window#setFeatureDrawable(int" ]
  }, {
    "name" : "public final void setFeatureDrawableAlpha(int featureId, int alpha)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for calling\n     * {@link android.view.Window#setFeatureDrawableAlpha}.\n     ",
    "links" : [ "android.view.Window#setFeatureDrawableAlpha" ]
  }, {
    "name" : "public LayoutInflater getLayoutInflater()",
    "returnType" : "LayoutInflater",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCancelable(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this dialog is cancelable with the\n     * {@link KeyEvent#KEYCODE_BACK BACK} key.\n     ",
    "links" : [ "android.view.KeyEvent#KEYCODE_BACK" ]
  }, {
    "name" : "public void setCanceledOnTouchOutside(boolean cancel)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this dialog is canceled when touched outside the window's\n     * bounds. If setting to true, the dialog is set to be cancelable if not\n     * already set.\n     * \n     * @param cancel Whether the dialog should be canceled when touched outside\n     *            the window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancel the dialog.  This is essentially the same as calling {@link #dismiss()}, but it will\n     * also call your {@link DialogInterface.OnCancelListener} (if registered).\n     ",
    "links" : [ "#dismiss()", "DialogInterface.OnCancelListener" ]
  }, {
    "name" : "public void setOnCancelListener(@Nullable OnCancelListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to be invoked when the dialog is canceled.\n     *\n     * <p>This will only be invoked when the dialog is canceled.\n     * Cancel events alone will not capture all ways that\n     * the dialog might be dismissed. If the creator needs\n     * to know when a dialog is dismissed in general, use\n     * {@link #setOnDismissListener}.</p>\n     * \n     * @param listener The {@link DialogInterface.OnCancelListener} to use.\n     ",
    "links" : [ "#setOnDismissListener", "DialogInterface.OnCancelListener" ]
  }, {
    "name" : "public void setCancelMessage(@Nullable Message msg)",
    "returnType" : "void",
    "comment" : "\n     * Set a message to be sent when the dialog is canceled.\n     * @param msg The msg to send when the dialog is canceled.\n     * @see #setOnCancelListener(android.content.DialogInterface.OnCancelListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDismissListener(@Nullable OnDismissListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to be invoked when the dialog is dismissed.\n     * @param listener The {@link DialogInterface.OnDismissListener} to use.\n     ",
    "links" : [ "DialogInterface.OnDismissListener" ]
  }, {
    "name" : "public void setOnShowListener(@Nullable OnShowListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to be invoked when the dialog is shown.\n     * @param listener The {@link DialogInterface.OnShowListener} to use.\n     ",
    "links" : [ "DialogInterface.OnShowListener" ]
  }, {
    "name" : "public void setDismissMessage(@Nullable Message msg)",
    "returnType" : "void",
    "comment" : "\n     * Set a message to be sent when the dialog is dismissed.\n     * @param msg The msg to send when the dialog is dismissed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean takeCancelAndDismissListeners(@Nullable String msg, @Nullable OnCancelListener cancel, @Nullable OnDismissListener dismiss)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setVolumeControlStream(int streamType)",
    "returnType" : "void",
    "comment" : "\n     * By default, this will use the owner Activity's suggested stream type.\n     * \n     * @see Activity#setVolumeControlStream(int)\n     * @see #setOwnerActivity(Activity)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getVolumeControlStream()",
    "returnType" : "int",
    "comment" : "\n     * @see Activity#getVolumeControlStream()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnKeyListener(@Nullable OnKeyListener onKeyListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the callback that will be called if a key is dispatched to the dialog.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mOwnerActivity", "mWindowManager", "mContext", "mWindow", "mDecor", "mActionBar", "mCancelable", "mCancelAndDismissTaken", "mCancelMessage", "mDismissMessage", "mShowMessage", "mOnKeyListener", "mCreated", "mShowing", "mCanceled", "mHandler", "DISMISS", "CANCEL", "SHOW", "mListenersHandler", "mSearchEvent", "mActionMode", "mActionModeTypeStarting", "mDismissAction", "DIALOG_SHOWING_TAG", "DIALOG_HIERARCHY_TAG" ],
  "methodNames" : [ "public final Context getContext()", "public ActionBar getActionBar()", "public final void setOwnerActivity(@NonNull Activity activity)", "public final Activity getOwnerActivity()", "public boolean isShowing()", "public void create()", "public void show()", "public void hide()", "public void dismiss()", " void dismissDialog()", "private void sendDismissMessage()", "private void sendShowMessage()", " void dispatchOnCreate(Bundle savedInstanceState)", "protected void onCreate(Bundle savedInstanceState)", "protected void onStart()", "protected void onStop()", "public Bundle onSaveInstanceState()", "public void onRestoreInstanceState(@NonNull Bundle savedInstanceState)", "public Window getWindow()", "public View getCurrentFocus()", "public T findViewById(@IdRes int id)", "public final T requireViewById(@IdRes int id)", "public void setContentView(@LayoutRes int layoutResID)", "public void setContentView(@NonNull View view)", "public void setContentView(@NonNull View view, @Nullable ViewGroup.LayoutParams params)", "public void addContentView(@NonNull View view, @Nullable ViewGroup.LayoutParams params)", "public void setTitle(@Nullable CharSequence title)", "public void setTitle(@StringRes int titleId)", "public boolean onKeyDown(int keyCode, @NonNull KeyEvent event)", "public boolean onKeyLongPress(int keyCode, @NonNull KeyEvent event)", "public boolean onKeyUp(int keyCode, @NonNull KeyEvent event)", "public boolean onKeyMultiple(int keyCode, int repeatCount, @NonNull KeyEvent event)", "public void onBackPressed()", "public boolean onKeyShortcut(int keyCode, @NonNull KeyEvent event)", "public boolean onTouchEvent(@NonNull MotionEvent event)", "public boolean onTrackballEvent(@NonNull MotionEvent event)", "public boolean onGenericMotionEvent(@NonNull MotionEvent event)", "public void onWindowAttributesChanged(WindowManager.LayoutParams params)", "public void onContentChanged()", "public void onWindowFocusChanged(boolean hasFocus)", "public void onAttachedToWindow()", "public void onDetachedFromWindow()", "public void onWindowDismissed(boolean finishTask, boolean suppressWindowTransition)", "public boolean dispatchKeyEvent(@NonNull KeyEvent event)", "public boolean dispatchKeyShortcutEvent(@NonNull KeyEvent event)", "public boolean dispatchTouchEvent(@NonNull MotionEvent ev)", "public boolean dispatchTrackballEvent(@NonNull MotionEvent ev)", "public boolean dispatchGenericMotionEvent(@NonNull MotionEvent ev)", "public boolean dispatchPopulateAccessibilityEvent(@NonNull AccessibilityEvent event)", "public View onCreatePanelView(int featureId)", "public boolean onCreatePanelMenu(int featureId, @NonNull Menu menu)", "public boolean onPreparePanel(int featureId, @Nullable View view, @NonNull Menu menu)", "public boolean onMenuOpened(int featureId, @NonNull Menu menu)", "public boolean onMenuItemSelected(int featureId, @NonNull MenuItem item)", "public void onPanelClosed(int featureId, @NonNull Menu menu)", "public boolean onCreateOptionsMenu(@NonNull Menu menu)", "public boolean onPrepareOptionsMenu(@NonNull Menu menu)", "public boolean onOptionsItemSelected(@NonNull MenuItem item)", "public void onOptionsMenuClosed(@NonNull Menu menu)", "public void openOptionsMenu()", "public void closeOptionsMenu()", "public void invalidateOptionsMenu()", "public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo)", "public void registerForContextMenu(@NonNull View view)", "public void unregisterForContextMenu(@NonNull View view)", "public void openContextMenu(@NonNull View view)", "public boolean onContextItemSelected(@NonNull MenuItem item)", "public void onContextMenuClosed(@NonNull Menu menu)", "public boolean onSearchRequested(@NonNull SearchEvent searchEvent)", "public boolean onSearchRequested()", "public final SearchEvent getSearchEvent()", "public ActionMode onWindowStartingActionMode(ActionMode.Callback callback)", "public ActionMode onWindowStartingActionMode(ActionMode.Callback callback, int type)", "public void onActionModeStarted(ActionMode mode)", "public void onActionModeFinished(ActionMode mode)", "private ComponentName getAssociatedActivity()", "public void takeKeyEvents(boolean get)", "public final boolean requestWindowFeature(int featureId)", "public final void setFeatureDrawableResource(int featureId, @DrawableRes int resId)", "public final void setFeatureDrawableUri(int featureId, @Nullable Uri uri)", "public final void setFeatureDrawable(int featureId, @Nullable Drawable drawable)", "public final void setFeatureDrawableAlpha(int featureId, int alpha)", "public LayoutInflater getLayoutInflater()", "public void setCancelable(boolean flag)", "public void setCanceledOnTouchOutside(boolean cancel)", "public void cancel()", "public void setOnCancelListener(@Nullable OnCancelListener listener)", "public void setCancelMessage(@Nullable Message msg)", "public void setOnDismissListener(@Nullable OnDismissListener listener)", "public void setOnShowListener(@Nullable OnShowListener listener)", "public void setDismissMessage(@Nullable Message msg)", "public boolean takeCancelAndDismissListeners(@Nullable String msg, @Nullable OnCancelListener cancel, @Nullable OnDismissListener dismiss)", "public final void setVolumeControlStream(int streamType)", "public final int getVolumeControlStream()", "public void setOnKeyListener(@Nullable OnKeyListener onKeyListener)" ]
}