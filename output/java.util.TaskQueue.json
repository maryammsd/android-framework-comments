{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Timer.java",
  "packageName" : "java.util",
  "className" : "TaskQueue",
  "comment" : "\n * This class represents a timer task queue: a priority queue of TimerTasks,\n * ordered on nextExecutionTime.  Each Timer object has one of these, which it\n * shares with its TimerThread.  Internally this class uses a heap, which\n * offers log(n) performance for the add, removeMin and rescheduleMin\n * operations, and constant time performance for the getMin operation.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "queue",
    "type" : "TimerTask[]",
    "comment" : "\n     * Priority queue represented as a balanced binary heap: the two children\n     * of queue[n] are queue[2*n] and queue[2*n+1].  The priority queue is\n     * ordered on the nextExecutionTime field: The TimerTask with the lowest\n     * nextExecutionTime is in queue[1] (assuming the queue is nonempty).  For\n     * each node n in the heap, and each descendant of n, d,\n     * n.nextExecutionTime <= d.nextExecutionTime.\n     ",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : "\n     * The number of tasks in the priority queue.  (The tasks are stored in\n     * queue[1] up to queue[size]).\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of tasks currently on the queue.\n     ",
    "links" : [ ]
  }, {
    "name" : " void add(TimerTask task)",
    "returnType" : "void",
    "comment" : "\n     * Adds a new task to the priority queue.\n     ",
    "links" : [ ]
  }, {
    "name" : " TimerTask getMin()",
    "returnType" : "TimerTask",
    "comment" : "\n     * Return the \"head task\" of the priority queue.  (The head task is an\n     * task with the lowest nextExecutionTime.)\n     ",
    "links" : [ ]
  }, {
    "name" : " TimerTask get(int i)",
    "returnType" : "TimerTask",
    "comment" : "\n     * Return the ith task in the priority queue, where i ranges from 1 (the\n     * head task, which is returned by getMin) to the number of tasks on the\n     * queue, inclusive.\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeMin()",
    "returnType" : "void",
    "comment" : "\n     * Remove the head task from the priority queue.\n     ",
    "links" : [ ]
  }, {
    "name" : " void quickRemove(int i)",
    "returnType" : "void",
    "comment" : "\n     * Removes the ith element from queue without regard for maintaining\n     * the heap invariant.  Recall that queue is one-based, so\n     * 1 <= i <= size.\n     ",
    "links" : [ ]
  }, {
    "name" : " void rescheduleMin(long newTime)",
    "returnType" : "void",
    "comment" : "\n     * Sets the nextExecutionTime associated with the head task to the\n     * specified value, and adjusts priority queue accordingly.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the priority queue contains no elements.\n     ",
    "links" : [ ]
  }, {
    "name" : " void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all elements from the priority queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void fixUp(int k)",
    "returnType" : "void",
    "comment" : "\n     * Establishes the heap invariant (described above) assuming the heap\n     * satisfies the invariant except possibly for the leaf-node indexed by k\n     * (which may have a nextExecutionTime less than its parent's).\n     *\n     * This method functions by \"promoting\" queue[k] up the hierarchy\n     * (by swapping it with its parent) repeatedly until queue[k]'s\n     * nextExecutionTime is greater than or equal to that of its parent.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void fixDown(int k)",
    "returnType" : "void",
    "comment" : "\n     * Establishes the heap invariant (described above) in the subtree\n     * rooted at k, which is assumed to satisfy the heap invariant except\n     * possibly for node k itself (which may have a nextExecutionTime greater\n     * than its children's).\n     *\n     * This method functions by \"demoting\" queue[k] down the hierarchy\n     * (by swapping it with its smaller child) repeatedly until queue[k]'s\n     * nextExecutionTime is less than or equal to those of its children.\n     ",
    "links" : [ ]
  }, {
    "name" : " void heapify()",
    "returnType" : "void",
    "comment" : "\n     * Establishes the heap invariant (described above) in the entire tree,\n     * assuming nothing about the order of the elements prior to the call.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int size()", " void add(TimerTask task)", " TimerTask getMin()", " TimerTask get(int i)", " void removeMin()", " void quickRemove(int i)", " void rescheduleMin(long newTime)", " boolean isEmpty()", " void clear()", "private void fixUp(int k)", "private void fixDown(int k)", " void heapify()" ],
  "variableNames" : [ "queue", "size" ]
}