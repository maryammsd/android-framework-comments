{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/session/MediaSessionLegacyHelper.java",
  "packageName" : "android.media.session",
  "className" : "MediaSessionLegacyHelper",
  "comment" : "\n * Helper for connecting existing APIs up to the new session APIs. This can be\n * used by RCC, AudioFocus, etc. to create a single session that translates to\n * all those components.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "MediaSessionLegacyHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionManager",
    "type" : "MediaSessionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessions",
    "type" : "ArrayMap<PendingIntent, SessionHolder>",
    "comment" : " receivers and these are associated with RCC.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MediaSessionLegacyHelper getHelper(Context context)",
    "returnType" : "MediaSessionLegacyHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Bundle getOldMetadata(MediaMetadata metadata, int artworkWidth, int artworkHeight)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MediaSession getSession(PendingIntent pi)",
    "returnType" : "MediaSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendMediaButtonEvent(KeyEvent keyEvent, boolean needWakeLock)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendVolumeKeyEvent(KeyEvent keyEvent, int stream, boolean musicOnly)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendAdjustVolumeBy(int suggestedStream, int delta, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isGlobalPriorityActive()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addRccListener(PendingIntent pi, MediaSession.Callback listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeRccListener(PendingIntent pi)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addMediaButtonListener(PendingIntent pi, ComponentName mbrComponent, Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeMediaButtonListener(PendingIntent pi)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Bitmap scaleBitmapIfTooBig(Bitmap bitmap, int maxWidth, int maxHeight)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Scale a bitmap to fit the smallest dimension by uniformly scaling the\n     * incoming bitmap. If the bitmap fits, then do nothing and return the\n     * original.\n     *\n     * @param bitmap\n     * @param maxWidth\n     * @param maxHeight\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "private SessionHolder getHolder(PendingIntent pi, boolean createIfMissing)",
    "returnType" : "SessionHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void sendKeyEvent(PendingIntent pi, Context context, Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "sLock", "sInstance", "mContext", "mSessionManager", "mHandler", "mSessions" ],
  "methodNames" : [ "public static MediaSessionLegacyHelper getHelper(Context context)", "public static Bundle getOldMetadata(MediaMetadata metadata, int artworkWidth, int artworkHeight)", "public MediaSession getSession(PendingIntent pi)", "public void sendMediaButtonEvent(KeyEvent keyEvent, boolean needWakeLock)", "public void sendVolumeKeyEvent(KeyEvent keyEvent, int stream, boolean musicOnly)", "public void sendAdjustVolumeBy(int suggestedStream, int delta, int flags)", "public boolean isGlobalPriorityActive()", "public void addRccListener(PendingIntent pi, MediaSession.Callback listener)", "public void removeRccListener(PendingIntent pi)", "public void addMediaButtonListener(PendingIntent pi, ComponentName mbrComponent, Context context)", "public void removeMediaButtonListener(PendingIntent pi)", "private static Bitmap scaleBitmapIfTooBig(Bitmap bitmap, int maxWidth, int maxHeight)", "private SessionHolder getHolder(PendingIntent pi, boolean createIfMissing)", "private static void sendKeyEvent(PendingIntent pi, Context context, Intent intent)" ]
}