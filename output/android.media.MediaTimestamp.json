{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaTimestamp.java",
  "packageName" : "android.media",
  "className" : "MediaTimestamp",
  "comment" : "\n * An immutable object that represents the linear correlation between the media time\n * and the system time. It contains the media clock rate, together with the media timestamp\n * of an anchor frame and the system time when that frame was presented or is committed\n * to be presented.\n * <p>\n * The phrase \"present\" means that audio/video produced on device is detectable by an external\n * observer off device.\n * The time is based on the implementation's best effort, using whatever knowledge\n * is available to the system, but cannot account for any delay unknown to the implementation.\n * The anchor frame could be any frame, including a just-rendered frame, or even a theoretical\n * or in-between frame, based on the source of the MediaTimestamp.\n * When the anchor frame is a just-rendered one, the media time stands for\n * current position of the playback or recording.\n *\n * @see MediaSync#getTimestamp\n * @see MediaPlayer#getTimestamp\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TIMESTAMP_UNKNOWN",
    "type" : "MediaTimestamp",
    "comment" : "\n     * An unknown media timestamp value\n     ",
    "links" : [ ]
  }, {
    "name" : "mediaTimeUs",
    "type" : "long",
    "comment" : " @hide - accessor shorthand ",
    "links" : [ ]
  }, {
    "name" : "nanoTime",
    "type" : "long",
    "comment" : " @hide - accessor shorthand ",
    "links" : [ ]
  }, {
    "name" : "clockRate",
    "type" : "float",
    "comment" : " @hide - accessor shorthand ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getAnchorMediaTimeUs()",
    "returnType" : "long",
    "comment" : "\n     * Get the media time of the anchor in microseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getAnchorSytemNanoTime()",
    "returnType" : "long",
    "comment" : "\n     * Get the {@link java.lang.System#nanoTime system time} corresponding to the media time\n     * in nanoseconds.\n     * @deprecated use {@link #getAnchorSystemNanoTime} instead.\n     ",
    "links" : [ "java.lang.System#nanoTime", "#getAnchorSystemNanoTime" ]
  }, {
    "name" : "public long getAnchorSystemNanoTime()",
    "returnType" : "long",
    "comment" : "\n     * Get the {@link java.lang.System#nanoTime system time} corresponding to the media time\n     * in nanoseconds.\n     ",
    "links" : [ "java.lang.System#nanoTime" ]
  }, {
    "name" : "public float getMediaClockRate()",
    "returnType" : "float",
    "comment" : "\n     * Get the rate of the media clock in relation to the system time.\n     * <p>\n     * It is 1.0 if media clock advances in sync with the system clock;\n     * greater than 1.0 if media clock is faster than the system clock;\n     * less than 1.0 if media clock is slower than the system clock.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getAnchorMediaTimeUs()", "public long getAnchorSytemNanoTime()", "public long getAnchorSystemNanoTime()", "public float getMediaClockRate()", "public boolean equals(Object obj)", "public String toString()" ],
  "variableNames" : [ "TIMESTAMP_UNKNOWN", "mediaTimeUs", "nanoTime", "clockRate" ]
}