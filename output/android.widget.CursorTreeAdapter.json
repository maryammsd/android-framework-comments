{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/CursorTreeAdapter.java",
  "packageName" : "android.widget",
  "className" : "CursorTreeAdapter",
  "comment" : "\n * An adapter that exposes data from a series of {@link Cursor}s to an\n * {@link ExpandableListView} widget. The top-level {@link Cursor} (that is\n * given in the constructor) exposes the groups, while subsequent {@link Cursor}s\n * returned from {@link #getChildrenCursor(Cursor)} expose children within a\n * particular group. The Cursors must include a column named \"_id\" or this class\n * will not work.\n ",
  "links" : [ "#getChildrenCursor(Cursor)", "android.widget.ExpandableListView", "android.database.Cursor" ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoRequery",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGroupCursorHelper",
    "type" : "MyCursorHelper",
    "comment" : " The cursor helper that is used to get the groups ",
    "links" : [ ]
  }, {
    "name" : "mChildrenCursorHelpers",
    "type" : "SparseArray<MyCursorHelper>",
    "comment" : "\n     * The map of a group position to the group's children cursor helper (the\n     * cursor helper that is used to get the children for that group)\n     ",
    "links" : [ ]
  }, {
    "name" : "mCursorFilter",
    "type" : "CursorFilter",
    "comment" : " Filter related",
    "links" : [ ]
  }, {
    "name" : "mFilterQueryProvider",
    "type" : "FilterQueryProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init(Cursor cursor, Context context, boolean autoRequery)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized MyCursorHelper getChildrenCursorHelper(int groupPosition, boolean requestCursor)",
    "returnType" : "MyCursorHelper",
    "comment" : "\n     * Gets the cursor helper for the children in the given group.\n     * \n     * @param groupPosition The group whose children will be returned\n     * @param requestCursor Whether to request a Cursor via\n     *            {@link #getChildrenCursor(Cursor)} (true), or to assume a call\n     *            to {@link #setChildrenCursor(int, Cursor)} will happen shortly\n     *            (false).\n     * @return The cursor helper for the children of the given group\n     ",
    "links" : [ "#getChildrenCursor(Cursor)", "#setChildrenCursor(int" ]
  }, {
    "name" : "protected abstract Cursor getChildrenCursor(Cursor groupCursor)",
    "returnType" : "Cursor",
    "comment" : "\n     * Gets the Cursor for the children at the given group. Subclasses must\n     * implement this method to return the children data for a particular group.\n     * <p>\n     * If you want to asynchronously query a provider to prevent blocking the\n     * UI, it is possible to return null and at a later time call\n     * {@link #setChildrenCursor(int, Cursor)}.\n     * <p>\n     * It is your responsibility to manage this Cursor through the Activity\n     * lifecycle. It is a good idea to use {@link Activity#managedQuery} which\n     * will handle this for you. In some situations, the adapter will deactivate\n     * the Cursor on its own, but this will not always be the case, so please\n     * ensure the Cursor is properly managed.\n     * \n     * @param groupCursor The cursor pointing to the group whose children cursor\n     *            should be returned\n     * @return The cursor for the children of a particular group, or null.\n     ",
    "links" : [ "android.app.Activity#managedQuery", "#setChildrenCursor(int" ]
  }, {
    "name" : "public void setGroupCursor(Cursor cursor)",
    "returnType" : "void",
    "comment" : "\n     * Sets the group Cursor.\n     * \n     * @param cursor The Cursor to set for the group. If there is an existing cursor \n     * it will be closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChildrenCursor(int groupPosition, Cursor childrenCursor)",
    "returnType" : "void",
    "comment" : "\n     * Sets the children Cursor for a particular group. If there is an existing cursor\n     * it will be closed.\n     * <p>\n     * This is useful when asynchronously querying to prevent blocking the UI.\n     * \n     * @param groupPosition The group whose children are being set via this Cursor.\n     * @param childrenCursor The Cursor that contains the children of the group.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor getChild(int groupPosition, int childPosition)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getChildId(int groupPosition, int childPosition)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChildrenCount(int groupPosition)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Cursor getGroup(int groupPosition)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getGroupCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getGroupId(int groupPosition)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract View newGroupView(Context context, Cursor cursor, boolean isExpanded, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Makes a new group view to hold the group data pointed to by cursor.\n     * \n     * @param context Interface to application's global information\n     * @param cursor The group cursor from which to get the data. The cursor is\n     *            already moved to the correct position.\n     * @param isExpanded Whether the group is expanded.\n     * @param parent The parent to which the new view is attached to\n     * @return The newly created view.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void bindGroupView(View view, Context context, Cursor cursor, boolean isExpanded)",
    "returnType" : "void",
    "comment" : "\n     * Bind an existing view to the group data pointed to by cursor.\n     * \n     * @param view Existing view, returned earlier by newGroupView.\n     * @param context Interface to application's global information\n     * @param cursor The cursor from which to get the data. The cursor is\n     *            already moved to the correct position.\n     * @param isExpanded Whether the group is expanded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract View newChildView(Context context, Cursor cursor, boolean isLastChild, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Makes a new child view to hold the data pointed to by cursor.\n     * \n     * @param context Interface to application's global information\n     * @param cursor The cursor from which to get the data. The cursor is\n     *            already moved to the correct position.\n     * @param isLastChild Whether the child is the last child within its group.\n     * @param parent The parent to which the new view is attached to\n     * @return the newly created view.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void bindChildView(View view, Context context, Cursor cursor, boolean isLastChild)",
    "returnType" : "void",
    "comment" : "\n     * Bind an existing view to the child data pointed to by cursor\n     * \n     * @param view Existing view, returned earlier by newChildView\n     * @param context Interface to application's global information\n     * @param cursor The cursor from which to get the data. The cursor is\n     *            already moved to the correct position.\n     * @param isLastChild Whether the child is the last child within its group.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isChildSelectable(int groupPosition, int childPosition)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasStableIds()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void releaseCursorHelpers()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyDataSetChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyDataSetChanged(boolean releaseCursors)",
    "returnType" : "void",
    "comment" : "\n     * Notifies a data set change, but with the option of not releasing any\n     * cached cursors.\n     * \n     * @param releaseCursors Whether to release and deactivate any cached\n     *            cursors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyDataSetInvalidated()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onGroupCollapsed(int groupPosition)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized void deactivateChildrenCursorHelper(int groupPosition)",
    "returnType" : "void",
    "comment" : "\n     * Deactivates the Cursor and removes the helper from cache.\n     * \n     * @param groupPosition The group whose children Cursor and helper should be\n     *            deactivated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String convertToString(Cursor cursor)",
    "returnType" : "String",
    "comment" : "\n     * @see CursorAdapter#convertToString(Cursor)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor runQueryOnBackgroundThread(CharSequence constraint)",
    "returnType" : "Cursor",
    "comment" : "\n     * @see CursorAdapter#runQueryOnBackgroundThread(CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Filter getFilter()",
    "returnType" : "Filter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FilterQueryProvider getFilterQueryProvider()",
    "returnType" : "FilterQueryProvider",
    "comment" : "\n     * @see CursorAdapter#getFilterQueryProvider()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFilterQueryProvider(FilterQueryProvider filterQueryProvider)",
    "returnType" : "void",
    "comment" : "\n     * @see CursorAdapter#setFilterQueryProvider(FilterQueryProvider)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void changeCursor(Cursor cursor)",
    "returnType" : "void",
    "comment" : "\n     * @see CursorAdapter#changeCursor(Cursor)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor getCursor()",
    "returnType" : "Cursor",
    "comment" : "\n     * @see CursorAdapter#getCursor()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init(Cursor cursor, Context context, boolean autoRequery)", " synchronized MyCursorHelper getChildrenCursorHelper(int groupPosition, boolean requestCursor)", "protected abstract Cursor getChildrenCursor(Cursor groupCursor)", "public void setGroupCursor(Cursor cursor)", "public void setChildrenCursor(int groupPosition, Cursor childrenCursor)", "public Cursor getChild(int groupPosition, int childPosition)", "public long getChildId(int groupPosition, int childPosition)", "public int getChildrenCount(int groupPosition)", "public Cursor getGroup(int groupPosition)", "public int getGroupCount()", "public long getGroupId(int groupPosition)", "public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent)", "protected abstract View newGroupView(Context context, Cursor cursor, boolean isExpanded, ViewGroup parent)", "protected abstract void bindGroupView(View view, Context context, Cursor cursor, boolean isExpanded)", "public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent)", "protected abstract View newChildView(Context context, Cursor cursor, boolean isLastChild, ViewGroup parent)", "protected abstract void bindChildView(View view, Context context, Cursor cursor, boolean isLastChild)", "public boolean isChildSelectable(int groupPosition, int childPosition)", "public boolean hasStableIds()", "private synchronized void releaseCursorHelpers()", "public void notifyDataSetChanged()", "public void notifyDataSetChanged(boolean releaseCursors)", "public void notifyDataSetInvalidated()", "public void onGroupCollapsed(int groupPosition)", " synchronized void deactivateChildrenCursorHelper(int groupPosition)", "public String convertToString(Cursor cursor)", "public Cursor runQueryOnBackgroundThread(CharSequence constraint)", "public Filter getFilter()", "public FilterQueryProvider getFilterQueryProvider()", "public void setFilterQueryProvider(FilterQueryProvider filterQueryProvider)", "public void changeCursor(Cursor cursor)", "public Cursor getCursor()" ],
  "variableNames" : [ "mContext", "mHandler", "mAutoRequery", "mGroupCursorHelper", "mChildrenCursorHelpers", "mCursorFilter", "mFilterQueryProvider" ]
}