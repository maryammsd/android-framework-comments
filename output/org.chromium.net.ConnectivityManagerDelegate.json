{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/NetworkChangeNotifierAutoDetect.java",
  "packageName" : "org.chromium.net",
  "className" : "ConnectivityManagerDelegate",
  "comment" : " Queries the ConnectivityManager for information about the current connection. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mConnectivityManager",
    "type" : "ConnectivityManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private NetworkInfo processActiveNetworkInfo(NetworkInfo networkInfo)",
    "returnType" : "NetworkInfo",
    "comment" : "\n         * @param networkInfo The NetworkInfo for the active network.\n         * @return the info of the network that is available to this app.\n         ",
    "links" : [ ]
  }, {
    "name" : " NetworkState getNetworkState(WifiManagerDelegate wifiManagerDelegate)",
    "returnType" : "NetworkState",
    "comment" : "\n         * Returns connection type and status information about the current\n         * default network.\n         ",
    "links" : [ ]
  }, {
    "name" : " NetworkInfo getRawNetworkInfo(Network network)",
    "returnType" : "NetworkInfo",
    "comment" : "\n         * Fetches NetworkInfo for |network|. Does not account for underlying VPNs; see\n         * getNetworkInfo(Network) for a method that does.\n         ",
    "links" : [ ]
  }, {
    "name" : " NetworkInfo getNetworkInfo(Network network)",
    "returnType" : "NetworkInfo",
    "comment" : " Fetches NetworkInfo for |network|. ",
    "links" : [ ]
  }, {
    "name" : " int getConnectionType(Network network)",
    "returnType" : "int",
    "comment" : " Returns connection type for |network|. ",
    "links" : [ ]
  }, {
    "name" : "protected Network[] getAllNetworksUnfiltered()",
    "returnType" : "Network[]",
    "comment" : "\n         * Returns all connected networks. This may include networks that aren't useful\n         * to Chrome (e.g. MMS, IMS, FOTA etc) or aren't accessible to Chrome (e.g. a VPN for\n         * another user); use {@link getAllNetworks} for a filtered list.\n         ",
    "links" : [ "getAllNetworks" ]
  }, {
    "name" : "protected boolean vpnAccessible(Network network)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if {@code network} applies to (and hence is accessible) to the\n         * current user.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected NetworkCapabilities getNetworkCapabilities(Network network)",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n         * Return the NetworkCapabilities for {@code network}, or {@code null} if they cannot\n         * be retrieved (e.g. {@code network} has disconnected).\n         ",
    "links" : [ ]
  }, {
    "name" : " void registerNetworkCallback(NetworkRequest networkRequest, NetworkCallback networkCallback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n         * Registers networkCallback to receive notifications about networks\n         * that satisfy networkRequest.\n         ",
    "links" : [ ]
  }, {
    "name" : " void registerDefaultNetworkCallback(NetworkCallback networkCallback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n         * Registers networkCallback to receive notifications about default network.\n         * Only callable on P and newer releases.\n         ",
    "links" : [ ]
  }, {
    "name" : " void unregisterNetworkCallback(NetworkCallback networkCallback)",
    "returnType" : "void",
    "comment" : " Unregisters networkCallback from receiving notifications. ",
    "links" : [ ]
  }, {
    "name" : "public Network getDefaultNetwork()",
    "returnType" : "Network",
    "comment" : "\n         * Returns the current default {@link Network}, or {@code null} if disconnected.\n         ",
    "links" : [ "android.net.Network" ]
  } ],
  "methodNames" : [ "private NetworkInfo processActiveNetworkInfo(NetworkInfo networkInfo)", " NetworkState getNetworkState(WifiManagerDelegate wifiManagerDelegate)", " NetworkInfo getRawNetworkInfo(Network network)", " NetworkInfo getNetworkInfo(Network network)", " int getConnectionType(Network network)", "protected Network[] getAllNetworksUnfiltered()", "protected boolean vpnAccessible(Network network)", "protected NetworkCapabilities getNetworkCapabilities(Network network)", " void registerNetworkCallback(NetworkRequest networkRequest, NetworkCallback networkCallback, Handler handler)", " void registerDefaultNetworkCallback(NetworkCallback networkCallback, Handler handler)", " void unregisterNetworkCallback(NetworkCallback networkCallback)", "public Network getDefaultNetwork()" ],
  "variableNames" : [ "mConnectivityManager" ]
}