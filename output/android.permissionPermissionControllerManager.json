{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/permission/PermissionControllerManager.java",
  "packageName" : "android.permission",
  "className" : "PermissionControllerManager",
  "comment" : "\n * Interface for communicating with the permission controller.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REQUEST_TIMEOUT_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNBIND_TIMEOUT_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHUNK_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRemoteServices",
    "type" : "ArrayMap<Pair<Integer, Thread>, ServiceConnector<IPermissionController>>",
    "comment" : "\n     * Global remote services (per user) used by all {@link PermissionControllerManager managers}\n     ",
    "links" : [ "PermissionControllerManager" ]
  }, {
    "name" : "REASON_MALWARE",
    "type" : "int",
    "comment" : " The permissions are revoked because the apps holding the permissions are malware ",
    "links" : [ ]
  }, {
    "name" : "REASON_INSTALLER_POLICY_VIOLATION",
    "type" : "int",
    "comment" : "\n     * The permissions are revoked because the apps holding the permissions violate a policy of the\n     * app that installed it.\n     *\n     * <p>If this reason is used only permissions of apps that are installed by the caller of the\n     * API can be revoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "COUNT_ONLY_WHEN_GRANTED",
    "type" : "int",
    "comment" : " Count an app only if the permission is granted to the app. ",
    "links" : [ ]
  }, {
    "name" : "COUNT_WHEN_SYSTEM",
    "type" : "int",
    "comment" : " Count and app even if it is a system app. ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteService",
    "type" : "ServiceConnector<IPermissionController>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void enforceSomePermissionsGrantedToSelf(@NonNull String... requiredPermissions)",
    "returnType" : "void",
    "comment" : "\n     * Throw a {@link SecurityException} if not at least one of the permissions is granted.\n     *\n     * @param requiredPermissions A list of permissions. Any of of them if sufficient to pass the\n     *                            check\n     ",
    "links" : [ "SecurityException" ]
  }, {
    "name" : "public void revokeRuntimePermissions(@NonNull Map<String, List<String>> request, boolean doDryRun, @Reason int reason, @NonNull @CallbackExecutor Executor executor, @NonNull OnRevokeRuntimePermissionsCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Revoke a set of runtime permissions for various apps.\n     *\n     * @param request The permissions to revoke as {@code Map<packageName, List<permission>>}\n     * @param doDryRun Compute the permissions that would be revoked, but not actually revoke them\n     * @param reason Why the permission should be revoked\n     * @param executor Executor on which to invoke the callback\n     * @param callback Callback to receive the result\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRuntimePermissionGrantStateByDeviceAdmin(@NonNull String callerPackageName, @NonNull String packageName, @NonNull String permission, @PermissionGrantState int grantState, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Set the runtime permission state from a device admin.\n     *\n     * @param callerPackageName The package name of the admin requesting the change\n     * @param packageName Package the permission belongs to\n     * @param permission Permission to change\n     * @param grantState State to set the permission into\n     * @param executor Executor to run the {@code callback} on\n     * @param callback The callback\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getRuntimePermissionBackup(@NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<byte[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Create a backup of the runtime permissions.\n     *\n     * @param user The user to be backed up\n     * @param executor Executor on which to invoke the callback\n     * @param callback Callback to receive the result. The resulting backup-file is opaque and no\n     *                 guarantees are made other than that the file can be send to\n     *                 {@link #restoreRuntimePermissionBackup} in this and future versions of\n     *                 Android.\n     ",
    "links" : [ "#restoreRuntimePermissionBackup" ]
  }, {
    "name" : "public void stageAndApplyRuntimePermissionsBackup(@NonNull byte[] backup, @NonNull UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Restore a {@link #getRuntimePermissionBackup backup-file} of the runtime permissions.\n     *\n     * <p>This might leave some part of the backup-file unapplied if an package mentioned in the\n     * backup-file is not yet installed. It is required that\n     * {@link #applyStagedRuntimePermissionBackup} is called after any package is installed to\n     * apply the rest of the backup-file.\n     *\n     * @param backup the backup-file to restore. The backup is sent asynchronously, hence it should\n     *               not be modified after calling this method.\n     * @param user The user to be restore\n     ",
    "links" : [ "#getRuntimePermissionBackup", "#applyStagedRuntimePermissionBackup" ]
  }, {
    "name" : "public void applyStagedRuntimePermissionBackup(@NonNull String packageName, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Restore unapplied parts of a {@link #stageAndApplyRuntimePermissionsBackup previously staged}\n     * backup-file of the runtime permissions.\n     *\n     * <p>This should be called every time after a package is installed until the callback\n     * reports that there is no more unapplied backup left.\n     *\n     * @param packageName The package that is ready to have it's permissions restored.\n     * @param user The user the package belongs to\n     * @param executor Executor to execute the callback on\n     * @param callback Is called with {@code true} iff there is still more unapplied backup left\n     ",
    "links" : [ "#stageAndApplyRuntimePermissionsBackup" ]
  }, {
    "name" : "public void dump(@NonNull FileDescriptor fd, @Nullable String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Dump permission controller state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getAppPermissions(@NonNull String packageName, @NonNull OnGetAppPermissionResultCallback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Gets the runtime permissions for an app.\n     *\n     * @param packageName The package for which to query.\n     * @param callback Callback to receive the result.\n     * @param handler Handler on which to invoke the callback.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void revokeRuntimePermission(@NonNull String packageName, @NonNull String permissionName)",
    "returnType" : "void",
    "comment" : "\n     * Revoke the permission {@code permissionName} for app {@code packageName}\n     *\n     * @param packageName The package for which to revoke\n     * @param permissionName The permission to revoke\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void countPermissionApps(@NonNull List<String> permissionNames, @CountPermissionAppsFlag int flags, @NonNull OnCountPermissionAppsResultCallback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Count how many apps have one of a set of permissions.\n     *\n     * @param permissionNames The permissions the app might have\n     * @param flags Modify which apps to count. By default all non-system apps that request a\n     *              permission are counted\n     * @param callback Callback to receive the result\n     * @param handler Handler on which to invoke the callback\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getPermissionUsages(boolean countSystem, long numMillis, @NonNull @CallbackExecutor Executor executor, @NonNull OnPermissionUsageResultCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Count how many apps have used permissions.\n     *\n     * @param countSystem Also count system apps\n     * @param numMillis The number of milliseconds in the past to check for uses\n     * @param executor Executor on which to invoke the callback\n     * @param callback Callback to receive the result\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void grantOrUpgradeDefaultRuntimePermissions(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Grant or upgrade runtime permissions. The upgrade could be performed\n     * based on whether the device upgraded, whether the permission database\n     * version is old, or because the permission policy changed.\n     *\n     * @param executor Executor on which to invoke the callback\n     * @param callback Callback to receive the result\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateUserSensitive()",
    "returnType" : "void",
    "comment" : "\n     * @see PermissionControllerManager#updateUserSensitiveForApp\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateUserSensitiveForApp(int uid)",
    "returnType" : "void",
    "comment" : "\n     * @see PermissionControllerService#onUpdateUserSensitiveForApp\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyOneTimePermissionSessionTimeout(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Called when a package that has permissions registered as \"one-time\" is considered\n     * inactive.\n     *\n     * @param packageName The package which became inactive\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "REQUEST_TIMEOUT_MILLIS", "UNBIND_TIMEOUT_MILLIS", "CHUNK_SIZE", "sLock", "sRemoteServices", "REASON_MALWARE", "REASON_INSTALLER_POLICY_VIOLATION", "COUNT_ONLY_WHEN_GRANTED", "COUNT_WHEN_SYSTEM", "mContext", "mRemoteService", "mHandler" ],
  "methodNames" : [ "private void enforceSomePermissionsGrantedToSelf(@NonNull String... requiredPermissions)", "public void revokeRuntimePermissions(@NonNull Map<String, List<String>> request, boolean doDryRun, @Reason int reason, @NonNull @CallbackExecutor Executor executor, @NonNull OnRevokeRuntimePermissionsCallback callback)", "public void setRuntimePermissionGrantStateByDeviceAdmin(@NonNull String callerPackageName, @NonNull String packageName, @NonNull String permission, @PermissionGrantState int grantState, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void getRuntimePermissionBackup(@NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<byte[]> callback)", "public void stageAndApplyRuntimePermissionsBackup(@NonNull byte[] backup, @NonNull UserHandle user)", "public void applyStagedRuntimePermissionBackup(@NonNull String packageName, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void dump(@NonNull FileDescriptor fd, @Nullable String[] args)", "public void getAppPermissions(@NonNull String packageName, @NonNull OnGetAppPermissionResultCallback callback, @Nullable Handler handler)", "public void revokeRuntimePermission(@NonNull String packageName, @NonNull String permissionName)", "public void countPermissionApps(@NonNull List<String> permissionNames, @CountPermissionAppsFlag int flags, @NonNull OnCountPermissionAppsResultCallback callback, @Nullable Handler handler)", "public void getPermissionUsages(boolean countSystem, long numMillis, @NonNull @CallbackExecutor Executor executor, @NonNull OnPermissionUsageResultCallback callback)", "public void grantOrUpgradeDefaultRuntimePermissions(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void updateUserSensitive()", "public void updateUserSensitiveForApp(int uid)", "public void notifyOneTimePermissionSessionTimeout(@NonNull String packageName)" ]
}