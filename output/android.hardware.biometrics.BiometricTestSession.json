{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/BiometricTestSession.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "BiometricTestSession",
  "comment" : "\n * Common set of interfaces to test biometric-related APIs, including {@link BiometricPrompt} and\n * {@link android.hardware.fingerprint.FingerprintManager}.\n * @hide\n ",
  "links" : [ "android.hardware.biometrics.BiometricPrompt", "android.hardware.fingerprint.FingerprintManager" ],
  "variables" : [ {
    "name" : "BASE_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSensorId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTestSession",
    "type" : "ITestSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTestedUsers",
    "type" : "ArraySet<Integer>",
    "comment" : " Keep track of users that were tested, which need to be cleaned up when finishing.",
    "links" : [ ]
  }, {
    "name" : "mCloseLatch",
    "type" : "CountDownLatch",
    "comment" : " unique ID, but it's complicated to plumb it through. This should be fine for now.",
    "links" : [ ]
  }, {
    "name" : "mUsersCleaningUp",
    "type" : "ArraySet<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "ITestSessionCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void setTestHalEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Switches the specified sensor to use a test HAL. In this mode, the framework will not invoke\n     * any methods on the real HAL implementation. This allows the framework to test a substantial\n     * portion of the framework code that would otherwise require human interaction. Note that\n     * secure pathways such as HAT/Keystore are not testable, since they depend on the TEE or its\n     * equivalent for the secret key.\n     *\n     * @param enabled If true, enable testing with a fake HAL instead of the real HAL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startEnroll(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Starts the enrollment process. This should generally be used when the test HAL is enabled.\n     *\n     * @param userId User that this command applies to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void finishEnroll(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Finishes the enrollment process. Simulates the HAL's callback.\n     *\n     * @param userId User that this command applies to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void acceptAuthentication(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Simulates a successful authentication, but does not provide a valid HAT.\n     *\n     * @param userId User that this command applies to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rejectAuthentication(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Simulates a rejected attempt.\n     *\n     * @param userId User that this command applies to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyAcquired(int userId, int acquireInfo)",
    "returnType" : "void",
    "comment" : "\n     * Simulates an acquired message from the HAL.\n     *\n     * @param userId User that this command applies to.\n     * @param acquireInfo See\n     * {@link BiometricPrompt.AuthenticationCallback#onAuthenticationAcquired(int)} and\n     * {@link FingerprintManager.AuthenticationCallback#onAuthenticationAcquired(int)}\n     ",
    "links" : [ "BiometricPrompt.AuthenticationCallback#onAuthenticationAcquired(int)", "FingerprintManager.AuthenticationCallback#onAuthenticationAcquired(int)" ]
  }, {
    "name" : "public void notifyError(int userId, int errorCode)",
    "returnType" : "void",
    "comment" : "\n     * Simulates an error message from the HAL.\n     *\n     * @param userId User that this command applies to.\n     * @param errorCode See\n     * {@link BiometricPrompt.AuthenticationCallback#onAuthenticationError(int, CharSequence)} and\n     * {@link FingerprintManager.AuthenticationCallback#onAuthenticationError(int, CharSequence)}\n     ",
    "links" : [ "FingerprintManager.AuthenticationCallback#onAuthenticationError(int", "BiometricPrompt.AuthenticationCallback#onAuthenticationError(int" ]
  }, {
    "name" : "public void cleanupInternalState(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Matches the framework's cached enrollments against the HAL's enrollments. Any enrollment\n     * that isn't known by both sides are deleted. This should generally be used when the test\n     * HAL is disabled (e.g. to clean up after a test).\n     *\n     * @param userId User that this command applies to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getTag()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void setTestHalEnabled(boolean enabled)", "public void startEnroll(int userId)", "public void finishEnroll(int userId)", "public void acceptAuthentication(int userId)", "public void rejectAuthentication(int userId)", "public void notifyAcquired(int userId, int acquireInfo)", "public void notifyError(int userId, int errorCode)", "public void cleanupInternalState(int userId)", "public void close()", "private String getTag()" ],
  "variableNames" : [ "BASE_TAG", "mContext", "mSensorId", "mTestSession", "mTestedUsers", "mCloseLatch", "mUsersCleaningUp", "mCallback" ]
}