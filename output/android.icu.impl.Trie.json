{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Trie.java",
  "packageName" : "android.icu.impl",
  "className" : "Trie",
  "comment" : "\n * <p>A trie is a kind of compressed, serializable table of values\n * associated with Unicode code points (0..0x10ffff).</p>\n * <p>This class defines the basic structure of a trie and provides methods\n * to <b>retrieve the offsets to the actual data</b>.</p>\n * <p>Data will be the form of an array of basic types, char or int.</p>\n * <p>The actual data format will have to be specified by the user in the\n * inner static interface android.icu.impl.Trie.DataManipulate.</p>\n * <p>This trie implementation is optimized for getting offset while walking\n * forward through a UTF-16 string.\n * Therefore, the simplest and fastest access macros are the\n * fromLead() and fromOffsetTrail() methods.\n * The fromBMP() method are a little more complicated; they get offsets even\n * for lead surrogate codepoints, while the fromLead() method get special\n * \"folded\" offsets for lead surrogate code units if there is relevant data\n * associated with them.\n * From such a folded offsets, an offset needs to be extracted to supply\n * to the fromOffsetTrail() methods.\n * To handle such supplementary codepoints, some offset information are kept\n * in the data.</p>\n * <p>Methods in android.icu.impl.Trie.DataManipulate are called to retrieve\n * that offset from the folded value for the lead surrogate unit.</p>\n * <p>For examples of use, see android.icu.impl.CharTrie or\n * android.icu.impl.IntTrie.</p>\n * @author synwee\n * @see android.icu.impl.CharTrie\n * @see android.icu.impl.IntTrie\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LEAD_INDEX_OFFSET_",
    "type" : "int",
    "comment" : "\n    * Lead surrogate code points' index displacement in the index array.\n    * 0x10000-0xd800=0x2800\n    * 0x2800 >> INDEX_STAGE_1_SHIFT_\n    ",
    "links" : [ ]
  }, {
    "name" : "INDEX_STAGE_1_SHIFT_",
    "type" : "int",
    "comment" : "\n    * Shift size for shifting right the input index. 1..9\n    ",
    "links" : [ ]
  }, {
    "name" : "INDEX_STAGE_2_SHIFT_",
    "type" : "int",
    "comment" : "\n    * Shift size for shifting left the index array values.\n    * Increases possible data size with 16-bit index values at the cost\n    * of compactability.\n    * This requires blocks of stage 2 data to be aligned by\n    * DATA_GRANULARITY.\n    * 0..INDEX_STAGE_1_SHIFT\n    ",
    "links" : [ ]
  }, {
    "name" : "DATA_BLOCK_LENGTH",
    "type" : "int",
    "comment" : "\n     * Number of data values in a stage 2 (data array) block.\n     ",
    "links" : [ ]
  }, {
    "name" : "INDEX_STAGE_3_MASK_",
    "type" : "int",
    "comment" : "\n    * Mask for getting the lower bits from the input index.\n    * DATA_BLOCK_LENGTH - 1.\n    ",
    "links" : [ ]
  }, {
    "name" : "SURROGATE_BLOCK_BITS",
    "type" : "int",
    "comment" : " Number of bits of a trail surrogate that are used in index table lookups. ",
    "links" : [ ]
  }, {
    "name" : "SURROGATE_BLOCK_COUNT",
    "type" : "int",
    "comment" : "\n     * Number of index (stage 1) entries per lead surrogate.\n     * Same as number of index entries for 1024 trail surrogates,\n     * ==0x400>>INDEX_STAGE_1_SHIFT_\n     ",
    "links" : [ ]
  }, {
    "name" : "BMP_INDEX_LENGTH",
    "type" : "int",
    "comment" : " Length of the BMP portion of the index (stage 1) array. ",
    "links" : [ ]
  }, {
    "name" : "SURROGATE_MASK_",
    "type" : "int",
    "comment" : "\n    * Surrogate mask to use when shifting offset to retrieve supplementary\n    * values\n    ",
    "links" : [ ]
  }, {
    "name" : "m_index_",
    "type" : "char[]",
    "comment" : "\n    * Index or UTF16 characters\n    ",
    "links" : [ ]
  }, {
    "name" : "m_dataManipulate_",
    "type" : "DataManipulate",
    "comment" : "\n    * Internal TrieValue which handles the parsing of the data value.\n    * This class is to be implemented by the user\n    ",
    "links" : [ ]
  }, {
    "name" : "m_dataOffset_",
    "type" : "int",
    "comment" : "\n    * Start index of the data portion of the trie. CharTrie combines\n    * index and data into a char array, so this is used to indicate the\n    * initial offset to the data portion.\n    * Note this index always points to the initial value.\n    ",
    "links" : [ ]
  }, {
    "name" : "m_dataLength_",
    "type" : "int",
    "comment" : "\n    * Length of the data array\n    ",
    "links" : [ ]
  }, {
    "name" : "HEADER_LENGTH_",
    "type" : "int",
    "comment" : "\n    * Size of Trie header in bytes\n    ",
    "links" : [ ]
  }, {
    "name" : "HEADER_OPTIONS_LATIN1_IS_LINEAR_MASK_",
    "type" : "int",
    "comment" : "\n    * Latin 1 option mask\n    ",
    "links" : [ ]
  }, {
    "name" : "HEADER_SIGNATURE_",
    "type" : "int",
    "comment" : "\n    * Constant number to authenticate the byte block\n    ",
    "links" : [ ]
  }, {
    "name" : "HEADER_OPTIONS_SHIFT_MASK_",
    "type" : "int",
    "comment" : "\n    * Header option formatting\n    ",
    "links" : [ ]
  }, {
    "name" : "HEADER_OPTIONS_INDEX_SHIFT_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEADER_OPTIONS_DATA_IS_32_BIT_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_isLatin1Linear_",
    "type" : "boolean",
    "comment" : "\n    * Flag indicator for Latin quick access data block\n    ",
    "links" : [ ]
  }, {
    "name" : "m_options_",
    "type" : "int",
    "comment" : "\n    * <p>Trie options field.</p>\n    * <p>options bit field:<br>\n    * 9  1 = Latin-1 data is stored linearly at data + DATA_BLOCK_LENGTH<br>\n    * 8  0 = 16-bit data, 1=32-bit data<br>\n    * 7..4  INDEX_STAGE_1_SHIFT   // 0..INDEX_STAGE_2_SHIFT<br>\n    * 3..0  INDEX_STAGE_2_SHIFT   // 1..9<br>\n    ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final boolean isLatin1Linear()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if this trie has a linear latin 1 array\n     * @return true if this trie has a linear latin 1 array, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "/CLOVER:OFF",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSerializedDataSize()",
    "returnType" : "int",
    "comment" : "\n     * Gets the serialized data file size of the Trie. This is used during\n     * trie data reading for size checking purposes.\n     * @return size size of serialized trie data file in terms of the number\n     *              of bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int getSurrogateOffset(char lead, char trail)",
    "returnType" : "int",
    "comment" : "\n    * Gets the offset to the data which the surrogate pair points to.\n    * @param lead lead surrogate\n    * @param trail trailing surrogate\n    * @return offset to data\n    ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int getValue(int index)",
    "returnType" : "int",
    "comment" : "\n    * Gets the value at the argument index\n    * @param index value at index will be retrieved\n    * @return 32 bit value\n    ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int getInitialValue()",
    "returnType" : "int",
    "comment" : "\n    * Gets the default initial value\n    * @return 32 bit value\n    ",
    "links" : [ ]
  }, {
    "name" : "protected final int getRawOffset(int offset, char ch)",
    "returnType" : "int",
    "comment" : "\n    * Gets the offset to the data which the index ch after variable offset\n    * points to.\n    * Note for locating a non-supplementary character data offset, calling\n    * <p>\n    * getRawOffset(0, ch);\n    * </p>\n    * will do. Otherwise if it is a supplementary character formed by\n    * surrogates lead and trail. Then we would have to call getRawOffset()\n    * with getFoldingIndexOffset(). See getSurrogateOffset().\n    * @param offset index offset which ch is to start from\n    * @param ch index to be used after offset\n    * @return offset to the data\n    ",
    "links" : [ ]
  }, {
    "name" : "protected final int getBMPOffset(char ch)",
    "returnType" : "int",
    "comment" : "\n    * Gets the offset to data which the BMP character points to\n    * Treats a lead surrogate as a normal code point.\n    * @param ch BMP character\n    * @return offset to data\n    ",
    "links" : [ ]
  }, {
    "name" : "protected final int getLeadOffset(char ch)",
    "returnType" : "int",
    "comment" : "\n    * Gets the offset to the data which this lead surrogate character points\n    * to.\n    * Data at the returned offset may contain folding offset information for\n    * the next trailing surrogate character.\n    * @param ch lead surrogate character\n    * @return offset to data\n    ",
    "links" : [ ]
  }, {
    "name" : "protected final int getCodePointOffset(int ch)",
    "returnType" : "int",
    "comment" : "\n    * Internal trie getter from a code point.\n    * Could be faster(?) but longer with\n    *   if((c32)<=0xd7ff) { (result)=_TRIE_GET_RAW(trie, data, 0, c32); }\n    * Gets the offset to data which the codepoint points to\n    * @param ch codepoint\n    * @return offset to data\n    ",
    "links" : [ ]
  }, {
    "name" : "protected void unserialize(ByteBuffer bytes)",
    "returnType" : "void",
    "comment" : "\n     * <p>Parses the byte buffer and creates the trie index with it.</p>\n     * <p>The position of the input ByteBuffer must be right after the trie header.</p>\n     * <p>This is overwritten by the child classes.\n     * @param bytes buffer containing trie data\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean isIntTrie()",
    "returnType" : "boolean",
    "comment" : "\n    * Determines if this is a 32 bit trie\n    * @return true if options specifies this is a 32 bit trie\n    ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean isCharTrie()",
    "returnType" : "boolean",
    "comment" : "\n    * Determines if this is a 16 bit trie\n    * @return true if this is a 16 bit trie\n    ",
    "links" : [ ]
  }, {
    "name" : "private final boolean checkHeader(int signature)",
    "returnType" : "boolean",
    "comment" : "\n    * Authenticates raw data header.\n    * Checking the header information, signature and options.\n    * @param signature This contains the options and type of a Trie\n    * @return true if the header is authenticated valid\n    ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final boolean isLatin1Linear()", "public boolean equals(Object other)", "public int hashCode()", "public int getSerializedDataSize()", "protected abstract int getSurrogateOffset(char lead, char trail)", "protected abstract int getValue(int index)", "protected abstract int getInitialValue()", "protected final int getRawOffset(int offset, char ch)", "protected final int getBMPOffset(char ch)", "protected final int getLeadOffset(char ch)", "protected final int getCodePointOffset(int ch)", "protected void unserialize(ByteBuffer bytes)", "protected final boolean isIntTrie()", "protected final boolean isCharTrie()", "private final boolean checkHeader(int signature)" ],
  "variableNames" : [ "LEAD_INDEX_OFFSET_", "INDEX_STAGE_1_SHIFT_", "INDEX_STAGE_2_SHIFT_", "DATA_BLOCK_LENGTH", "INDEX_STAGE_3_MASK_", "SURROGATE_BLOCK_BITS", "SURROGATE_BLOCK_COUNT", "BMP_INDEX_LENGTH", "SURROGATE_MASK_", "m_index_", "m_dataManipulate_", "m_dataOffset_", "m_dataLength_", "HEADER_LENGTH_", "HEADER_OPTIONS_LATIN1_IS_LINEAR_MASK_", "HEADER_SIGNATURE_", "HEADER_OPTIONS_SHIFT_MASK_", "HEADER_OPTIONS_INDEX_SHIFT_", "HEADER_OPTIONS_DATA_IS_32_BIT_", "m_isLatin1Linear_", "m_options_" ]
}