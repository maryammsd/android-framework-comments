{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/Ikev2VpnProfile.java",
  "packageName" : "android.net",
  "className" : "Ikev2VpnProfile",
  "comment" : "\n * The Ikev2VpnProfile is a configuration for the platform setup of IKEv2/IPsec VPNs.\n *\n * <p>Together with VpnManager, this allows apps to provision IKEv2/IPsec VPNs that do not require\n * the VPN app to constantly run in the background.\n *\n * @see VpnManager\n * @see <a href=\"https://tools.ietf.org/html/rfc7296#section-3.3.2\">RFC 7296 - Internet Key\n *     Exchange, Version 2 (IKEv2)</a>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFIX_KEYSTORE_ALIAS",
    "type" : "String",
    "comment" : " Prefix for when a Private Key is an alias to look for in KeyStore @hide ",
    "links" : [ ]
  }, {
    "name" : "PREFIX_INLINE",
    "type" : "String",
    "comment" : " Prefix for when a Private Key is stored directly in the profile @hide ",
    "links" : [ ]
  }, {
    "name" : "ANDROID_KEYSTORE_PROVIDER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MISSING_PARAM_MSG_TMPL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_CERT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALGORITHMS",
    "type" : "List<String>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mServerAddr",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserIdentity",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPresharedKey",
    "type" : "byte[]",
    "comment" : " PSK authentication",
    "links" : [ ]
  }, {
    "name" : "mServerRootCaCert",
    "type" : "X509Certificate",
    "comment" : " Username/Password, RSA authentication",
    "links" : [ ]
  }, {
    "name" : "mUsername",
    "type" : "String",
    "comment" : " Username/Password authentication",
    "links" : [ ]
  }, {
    "name" : "mPassword",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRsaPrivateKey",
    "type" : "PrivateKey",
    "comment" : " RSA Certificate authentication",
    "links" : [ ]
  }, {
    "name" : "mUserCert",
    "type" : "X509Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProxyInfo",
    "type" : "ProxyInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedAlgorithms",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsBypassable",
    "type" : "boolean",
    "comment" : " Defaults in builder",
    "links" : [ ]
  }, {
    "name" : "mIsMetered",
    "type" : "boolean",
    "comment" : " Defaults in builder",
    "links" : [ ]
  }, {
    "name" : "mMaxMtu",
    "type" : "int",
    "comment" : " Defaults in builder",
    "links" : [ ]
  }, {
    "name" : "mIsRestrictedToTestNetworks",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIkeTunConnParams",
    "type" : "IkeTunnelConnectionParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutomaticNattKeepaliveTimerEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutomaticIpVersionSelectionEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void addAlgorithmIfSupported(List<String> algorithms, String ipSecAlgoName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void validateAllowedAlgorithms(@NonNull List<String> algorithmNames)",
    "returnType" : "void",
    "comment" : "\n     * Validates that the allowed algorithms are a valid set for IPsec purposes\n     *\n     * <p>In order for the algorithm list to be a valid set, it must contain at least one algorithm\n     * that provides Authentication, and one that provides Encryption. Authenticated Encryption with\n     * Associated Data (AEAD) algorithms are counted as providing Authentication and Encryption.\n     *\n     * @param algorithmNames The list to be validated\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean hasAeadAlgorithms(@NonNull List<String> algorithmNames)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the provided list has AEAD algorithms\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean hasNormalModeAlgorithms(@NonNull List<String> algorithmNames)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks the provided list has acceptable (non-AEAD) authentication and encryption algorithms\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getServerAddr()",
    "returnType" : "String",
    "comment" : " Retrieves the server address string. ",
    "links" : [ ]
  }, {
    "name" : "public String getUserIdentity()",
    "returnType" : "String",
    "comment" : " Retrieves the user identity. ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getPresharedKey()",
    "returnType" : "byte[]",
    "comment" : "\n     * Retrieves the pre-shared key.\n     *\n     * <p>May be null if the profile is not using Pre-shared key authentication, or the profile is\n     * built from an {@link IkeTunnelConnectionParams}.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public X509Certificate getServerRootCaCert()",
    "returnType" : "X509Certificate",
    "comment" : "\n     * Retrieves the certificate for the server's root CA.\n     *\n     * <p>May be null if the profile is not using RSA Digital Signature Authentication or\n     * Username/Password authentication, or the profile is built from an\n     * {@link IkeTunnelConnectionParams}.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public String getUsername()",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the username.\n     *\n     * <p>May be null if the profile is not using Username/Password authentication, or the profile\n     * is built from an {@link IkeTunnelConnectionParams}.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public String getPassword()",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the password.\n     *\n     * <p>May be null if the profile is not using Username/Password authentication, or the profile\n     * is built from an {@link IkeTunnelConnectionParams}.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public PrivateKey getRsaPrivateKey()",
    "returnType" : "PrivateKey",
    "comment" : "\n     * Retrieves the RSA private key.\n     *\n     * <p>May be null if the profile is not using RSA Digital Signature authentication, or the\n     * profile is built from an {@link IkeTunnelConnectionParams}.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public X509Certificate getUserCert()",
    "returnType" : "X509Certificate",
    "comment" : " Retrieves the user certificate, if any was set.\n     *\n     * <p>May be null if the profile is built from an {@link IkeTunnelConnectionParams}.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public ProxyInfo getProxyInfo()",
    "returnType" : "ProxyInfo",
    "comment" : " Retrieves the proxy information if any was set ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAllowedAlgorithms()",
    "returnType" : "List<String>",
    "comment" : " Returns all the algorithms allowed by this VPN profile.\n     *\n     *  <p>May be an empty list if the profile is built from an {@link IkeTunnelConnectionParams}.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public boolean isBypassable()",
    "returnType" : "boolean",
    "comment" : " Returns whether or not the VPN profile should be bypassable. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMetered()",
    "returnType" : "boolean",
    "comment" : " Returns whether or not the VPN profile should be always considered metered. ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxMtu()",
    "returnType" : "int",
    "comment" : " Retrieves the maximum MTU set for this VPN profile. ",
    "links" : [ ]
  }, {
    "name" : "public IkeTunnelConnectionParams getIkeTunnelConnectionParams()",
    "returnType" : "IkeTunnelConnectionParams",
    "comment" : " Retrieves the ikeTunnelConnectionParams contains IKEv2 configurations, if any was set. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRestrictedToTestNetworks()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this VPN profile is restricted to test networks.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutomaticNattKeepaliveTimerEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns whether automatic NAT-T keepalive timers are enabled. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutomaticIpVersionSelectionEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns whether automatic IP version selection is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VpnProfile toVpnProfile() throws IOException, GeneralSecurityException",
    "returnType" : "VpnProfile",
    "comment" : "\n     * Builds a VpnProfile instance for internal use, based on the stored IKEv2/IPsec parameters.\n     *\n     * <p>Redundant authentication information (from previous calls to other setAuth* methods) will\n     * be discarded.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PrivateKey getPrivateKeyFromAndroidKeystore(String alias)",
    "returnType" : "PrivateKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Ikev2VpnProfile fromVpnProfile(@NonNull VpnProfile profile) throws GeneralSecurityException",
    "returnType" : "Ikev2VpnProfile",
    "comment" : "\n     * Builds the Ikev2VpnProfile from the given profile.\n     *\n     * @param profile the source VpnProfile to build from\n     * @return The IKEv2/IPsec VPN profile\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidVpnProfile(@NonNull VpnProfile profile)",
    "returnType" : "boolean",
    "comment" : "\n     * Validates that the VpnProfile is acceptable for the purposes of an Ikev2VpnProfile.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String certificateToPemString(@Nullable X509Certificate cert) throws IOException, CertificateEncodingException",
    "returnType" : "String",
    "comment" : "\n     * Converts a X509 Certificate to a PEM-formatted string.\n     *\n     * <p>Must be public due to runtime-package restrictions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static X509Certificate certificateFromPemString(@Nullable String certStr) throws CertificateException",
    "returnType" : "X509Certificate",
    "comment" : "\n     * Decodes the provided Certificate(s).\n     *\n     * <p>Will use the first one if the certStr encodes more than one certificate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String encodeForIpsecSecret(@NonNull byte[] secret)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static byte[] decodeFromIpsecSecret(@NonNull String encoded)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PrivateKey getPrivateKey(@NonNull String keyStr) throws InvalidKeySpecException, NoSuchAlgorithmException",
    "returnType" : "PrivateKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkCert(@NonNull X509Certificate cert)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static T checkNotNull(final T reference, final String messageTemplate, final Object... messageArgs)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkBuilderSetter(boolean constructedFromIkeTunConParams, @NonNull String field)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getUserIdentityFromIkeSession(@NonNull IkeSessionParams params)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void addAlgorithmIfSupported(List<String> algorithms, String ipSecAlgoName)", "private void validate()", "private static void validateAllowedAlgorithms(@NonNull List<String> algorithmNames)", "public static boolean hasAeadAlgorithms(@NonNull List<String> algorithmNames)", "public static boolean hasNormalModeAlgorithms(@NonNull List<String> algorithmNames)", "public String getServerAddr()", "public String getUserIdentity()", "public byte[] getPresharedKey()", "public X509Certificate getServerRootCaCert()", "public String getUsername()", "public String getPassword()", "public PrivateKey getRsaPrivateKey()", "public X509Certificate getUserCert()", "public ProxyInfo getProxyInfo()", "public List<String> getAllowedAlgorithms()", "public boolean isBypassable()", "public boolean isMetered()", "public int getMaxMtu()", "public IkeTunnelConnectionParams getIkeTunnelConnectionParams()", "public boolean isRestrictedToTestNetworks()", "public boolean isAutomaticNattKeepaliveTimerEnabled()", "public boolean isAutomaticIpVersionSelectionEnabled()", "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public VpnProfile toVpnProfile() throws IOException, GeneralSecurityException", "private static PrivateKey getPrivateKeyFromAndroidKeystore(String alias)", "public static Ikev2VpnProfile fromVpnProfile(@NonNull VpnProfile profile) throws GeneralSecurityException", "public static boolean isValidVpnProfile(@NonNull VpnProfile profile)", "public static String certificateToPemString(@Nullable X509Certificate cert) throws IOException, CertificateEncodingException", "private static X509Certificate certificateFromPemString(@Nullable String certStr) throws CertificateException", "public static String encodeForIpsecSecret(@NonNull byte[] secret)", "private static byte[] decodeFromIpsecSecret(@NonNull String encoded)", "private static PrivateKey getPrivateKey(@NonNull String keyStr) throws InvalidKeySpecException, NoSuchAlgorithmException", "private static void checkCert(@NonNull X509Certificate cert)", "private static T checkNotNull(final T reference, final String messageTemplate, final Object... messageArgs)", "private static void checkBuilderSetter(boolean constructedFromIkeTunConParams, @NonNull String field)", "private static String getUserIdentityFromIkeSession(@NonNull IkeSessionParams params)", "public String toString()" ],
  "variableNames" : [ "TAG", "PREFIX_KEYSTORE_ALIAS", "PREFIX_INLINE", "ANDROID_KEYSTORE_PROVIDER", "MISSING_PARAM_MSG_TMPL", "EMPTY_CERT", "DEFAULT_ALGORITHMS", "mServerAddr", "mUserIdentity", "mPresharedKey", "mServerRootCaCert", "mUsername", "mPassword", "mRsaPrivateKey", "mUserCert", "mProxyInfo", "mAllowedAlgorithms", "mIsBypassable", "mIsMetered", "mMaxMtu", "mIsRestrictedToTestNetworks", "mIkeTunConnParams", "mAutomaticNattKeepaliveTimerEnabled", "mAutomaticIpVersionSelectionEnabled" ]
}