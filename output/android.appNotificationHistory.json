{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/NotificationHistory.java",
  "packageName" : "android.app",
  "className" : "NotificationHistory",
  "comment" : "\n * @hide\n ",
  "variables" : [ {
    "name" : "mNotificationsToWrite",
    "type" : "List<HistoricalNotification>",
    "comment" : " Only used when creating the resulting history. Not used for reading/unparceling.",
    "links" : [ ]
  }, {
    "name" : "mStringsToWrite",
    "type" : "Set<String>",
    "comment" : " ditto",
    "links" : [ ]
  }, {
    "name" : "mParcel",
    "type" : "Parcel",
    "comment" : " Mostly used for reading/unparceling events.",
    "links" : [ ]
  }, {
    "name" : "mHistoryCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStringPool",
    "type" : "String[]",
    "comment" : " mStringsToWrite on write and the parcel on read.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NotificationHistory>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean hasNextNotification()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not there are more events to read using {@link #getNextNotification()}.\n     *\n     * @return true if there are more events, false otherwise.\n     ",
    "links" : [ "#getNextNotification" ]
  }, {
    "name" : "public HistoricalNotification getNextNotification()",
    "returnType" : "HistoricalNotification",
    "comment" : "\n     * Retrieve the next {@link HistoricalNotification} from the collection and put the\n     * resulting data into {@code notificationOut}.\n     *\n     * @return The next {@link HistoricalNotification} or null if there are no more notifications.\n     ",
    "links" : [ "HistoricalNotification", "HistoricalNotification" ]
  }, {
    "name" : "public void addPooledStrings(@NonNull List<String> strings)",
    "returnType" : "void",
    "comment" : "\n     * Adds all of the pooled strings that have been read from disk\n     ",
    "links" : [ ]
  }, {
    "name" : "public void poolStringsFromNotifications()",
    "returnType" : "void",
    "comment" : "\n     * Builds the pooled strings from pending notifications. Useful if the pooled strings on\n     * disk contains strings that aren't relevant to the notifications in our collection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addNotificationToWrite(@NonNull HistoricalNotification notification)",
    "returnType" : "void",
    "comment" : "\n     * Used when populating a history from disk; adds an historical notification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addNewNotificationToWrite(@NonNull HistoricalNotification notification)",
    "returnType" : "void",
    "comment" : "\n     * Used when populating a history from disk; adds an historical notification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addNotificationsToWrite(@NonNull NotificationHistory notificationHistory)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeNotificationsFromWrite(String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Removes a package's historical notifications and regenerates the string pool\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeNotificationFromWrite(String packageName, long postedTime)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes an individual historical notification and regenerates the string pool\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeConversationFromWrite(String packageName, String conversationId)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes all notifications from a conversation and regenerates the string pool\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getPooledStringsToWrite()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets pooled strings in order to write them to disk\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<HistoricalNotification> getNotificationsToWrite()",
    "returnType" : "List<HistoricalNotification>",
    "comment" : "\n     * Gets the historical notifications in order to write them to disk\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHistoryCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of notifications in the collection\n     ",
    "links" : [ ]
  }, {
    "name" : "private int findStringIndex(String str)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeNotificationToParcel(HistoricalNotification notification, Parcel p, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Writes a single notification to the parcel. Modify this when updating member variables of\n     * {@link HistoricalNotification}.\n     ",
    "links" : [ "HistoricalNotification" ]
  }, {
    "name" : "private HistoricalNotification readNotificationFromParcel(Parcel p)",
    "returnType" : "HistoricalNotification",
    "comment" : "\n     * Reads a single notification from the parcel. Modify this when updating member variables of\n     * {@link HistoricalNotification}.\n     ",
    "links" : [ "HistoricalNotification" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mNotificationsToWrite", "mStringsToWrite", "mParcel", "mHistoryCount", "mIndex", "mStringPool", "CREATOR" ],
  "methodNames" : [ "public boolean hasNextNotification()", "public HistoricalNotification getNextNotification()", "public void addPooledStrings(@NonNull List<String> strings)", "public void poolStringsFromNotifications()", "public void addNotificationToWrite(@NonNull HistoricalNotification notification)", "public void addNewNotificationToWrite(@NonNull HistoricalNotification notification)", "public void addNotificationsToWrite(@NonNull NotificationHistory notificationHistory)", "public void removeNotificationsFromWrite(String packageName)", "public boolean removeNotificationFromWrite(String packageName, long postedTime)", "public boolean removeConversationFromWrite(String packageName, String conversationId)", "public String[] getPooledStringsToWrite()", "public List<HistoricalNotification> getNotificationsToWrite()", "public int getHistoryCount()", "private int findStringIndex(String str)", "private void writeNotificationToParcel(HistoricalNotification notification, Parcel p, int flags)", "private HistoricalNotification readNotificationFromParcel(Parcel p)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}