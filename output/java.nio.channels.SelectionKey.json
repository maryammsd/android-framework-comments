{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/SelectionKey.java",
  "packageName" : "java.nio.channels",
  "className" : "SelectionKey",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "OP_READ",
    "type" : "int",
    "comment" : "\n     * Operation-set bit for read operations.\n     *\n     * <p> Suppose that a selection key's interest set contains\n     * {@code OP_READ} at the start of a <a\n     * href=\"Selector.html#selop\">selection operation</a>.  If the selector\n     * detects that the corresponding channel is ready for reading, has reached\n     * end-of-stream, has been remotely shut down for further reading, or has\n     * an error pending, then it will add {@code OP_READ} to the key's\n     * ready-operation set.  </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_WRITE",
    "type" : "int",
    "comment" : "\n     * Operation-set bit for write operations.\n     *\n     * <p> Suppose that a selection key's interest set contains\n     * {@code OP_WRITE} at the start of a <a\n     * href=\"Selector.html#selop\">selection operation</a>.  If the selector\n     * detects that the corresponding channel is ready for writing, has been\n     * remotely shut down for further writing, or has an error pending, then it\n     * will add {@code OP_WRITE} to the key's ready set.  </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_CONNECT",
    "type" : "int",
    "comment" : "\n     * Operation-set bit for socket-connect operations.\n     *\n     * <p> Suppose that a selection key's interest set contains\n     * {@code OP_CONNECT} at the start of a <a\n     * href=\"Selector.html#selop\">selection operation</a>.  If the selector\n     * detects that the corresponding socket channel is ready to complete its\n     * connection sequence, or has an error pending, then it will add\n     * {@code OP_CONNECT} to the key's ready set.  </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "OP_ACCEPT",
    "type" : "int",
    "comment" : "\n     * Operation-set bit for socket-accept operations.\n     *\n     * <p> Suppose that a selection key's interest set contains\n     * {@code OP_ACCEPT} at the start of a <a\n     * href=\"Selector.html#selop\">selection operation</a>.  If the selector\n     * detects that the corresponding server-socket channel is ready to accept\n     * another connection, or has an error pending, then it will add\n     * {@code OP_ACCEPT} to the key's ready set.  </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "attachment",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "attachmentUpdater",
    "type" : "AtomicReferenceFieldUpdater<SelectionKey, Object>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract SelectableChannel channel()",
    "returnType" : "SelectableChannel",
    "comment" : "\n     * Returns the channel for which this key was created.  This method will\n     * continue to return the channel even after the key is cancelled.\n     *\n     * @return  This key's channel\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Selector selector()",
    "returnType" : "Selector",
    "comment" : "\n     * Returns the selector for which this key was created.  This method will\n     * continue to return the selector even after the key is cancelled.\n     *\n     * @return  This key's selector\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this key is valid.\n     *\n     * <p> A key is valid upon creation and remains so until it is cancelled,\n     * its channel is closed, or its selector is closed.  </p>\n     *\n     * @return  {@code true} if, and only if, this key is valid\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Requests that the registration of this key's channel with its selector\n     * be cancelled.  Upon return the key will be invalid and will have been\n     * added to its selector's cancelled-key set.  The key will be removed from\n     * all of the selector's key sets during the next selection operation.\n     *\n     * <p> If this key has already been cancelled then invoking this method has\n     * no effect.  Once cancelled, a key remains forever invalid. </p>\n     *\n     * <p> This method may be invoked at any time.  It synchronizes on the\n     * selector's cancelled-key set, and therefore may block briefly if invoked\n     * concurrently with a cancellation or selection operation involving the\n     * same selector.  </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int interestOps()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves this key's interest set.\n     *\n     * <p> It is guaranteed that the returned set will only contain operation\n     * bits that are valid for this key's channel. </p>\n     *\n     * @return  This key's interest set\n     *\n     * @throws  CancelledKeyException\n     *          If this key has been cancelled\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract SelectionKey interestOps(int ops)",
    "returnType" : "SelectionKey",
    "comment" : "\n     * Sets this key's interest set to the given value.\n     *\n     * <p> This method may be invoked at any time.  If this method is invoked\n     * while a selection operation is in progress then it has no effect upon\n     * that operation; the change to the key's interest set will be seen by the\n     * next selection operation.\n     *\n     * @param  ops  The new interest set\n     *\n     * @return  This selection key\n     *\n     * @throws  IllegalArgumentException\n     *          If a bit in the set does not correspond to an operation that\n     *          is supported by this key's channel, that is, if\n     *          {@code (ops & ~channel().validOps()) != 0}\n     *\n     * @throws  CancelledKeyException\n     *          If this key has been cancelled\n     ",
    "links" : [ ]
  }, {
    "name" : "public int interestOpsOr(int ops)",
    "returnType" : "int",
    "comment" : "\n     * Atomically sets this key's interest set to the bitwise union (\"or\") of\n     * the existing interest set and the given value. This method is guaranteed\n     * to be atomic with respect to other concurrent calls to this method or to\n     * {@link #interestOpsAnd(int)}.\n     *\n     * <p> This method may be invoked at any time.  If this method is invoked\n     * while a selection operation is in progress then it has no effect upon\n     * that operation; the change to the key's interest set will be seen by the\n     * next selection operation.\n     *\n     * @implSpec The default implementation synchronizes on this key and invokes\n     * {@code interestOps()} and {@code interestOps(int)} to retrieve and set\n     * this key's interest set.\n     *\n     * @param  ops  The interest set to apply\n     *\n     * @return  The previous interest set\n     *\n     * @throws  IllegalArgumentException\n     *          If a bit in the set does not correspond to an operation that\n     *          is supported by this key's channel, that is, if\n     *          {@code (ops & ~channel().validOps()) != 0}\n     *\n     * @throws  CancelledKeyException\n     *          If this key has been cancelled\n     *\n     * @since 11\n     ",
    "links" : [ "#interestOpsAnd(int)" ]
  }, {
    "name" : "public int interestOpsAnd(int ops)",
    "returnType" : "int",
    "comment" : "\n     * Atomically sets this key's interest set to the bitwise intersection (\"and\")\n     * of the existing interest set and the given value. This method is guaranteed\n     * to be atomic with respect to other concurrent calls to this method or to\n     * {@link #interestOpsOr(int)}.\n     *\n     * <p> This method may be invoked at any time.  If this method is invoked\n     * while a selection operation is in progress then it has no effect upon\n     * that operation; the change to the key's interest set will be seen by the\n     * next selection operation.\n     *\n     * @apiNote Unlike the {@code interestOps(int)} and {@code interestOpsOr(int)}\n     * methods, this method does not throw {@code IllegalArgumentException} when\n     * invoked with bits in the interest set that do not correspond to an\n     * operation that is supported by this key's channel. This is to allow\n     * operation bits in the interest set to be cleared using bitwise complement\n     * values, e.g., {@code interestOpsAnd(~SelectionKey.OP_READ)} will remove\n     * the {@code OP_READ} from the interest set without affecting other bits.\n     *\n     * @implSpec The default implementation synchronizes on this key and invokes\n     * {@code interestOps()} and {@code interestOps(int)} to retrieve and set\n     * this key's interest set.\n     *\n     * @param  ops  The interest set to apply\n     *\n     * @return  The previous interest set\n     *\n     * @throws  CancelledKeyException\n     *          If this key has been cancelled\n     *\n     * @since 11\n     ",
    "links" : [ "#interestOpsOr(int)" ]
  }, {
    "name" : "public abstract int readyOps()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves this key's ready-operation set.\n     *\n     * <p> It is guaranteed that the returned set will only contain operation\n     * bits that are valid for this key's channel.  </p>\n     *\n     * @return  This key's ready-operation set\n     *\n     * @throws  CancelledKeyException\n     *          If this key has been cancelled\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isReadable()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether this key's channel is ready for reading.\n     *\n     * <p> An invocation of this method of the form {@code k.isReadable()}\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>{@code\n     * k.readyOps() & OP_READ != 0\n     * }</pre></blockquote>\n     *\n     * <p> If this key's channel does not support read operations then this\n     * method always returns {@code false}.  </p>\n     *\n     * @return  {@code true} if, and only if,\n                {@code readyOps() & OP_READ} is nonzero\n     *\n     * @throws  CancelledKeyException\n     *          If this key has been cancelled\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isWritable()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether this key's channel is ready for writing.\n     *\n     * <p> An invocation of this method of the form {@code k.isWritable()}\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>{@code\n     * k.readyOps() & OP_WRITE != 0\n     * }</pre></blockquote>\n     *\n     * <p> If this key's channel does not support write operations then this\n     * method always returns {@code false}.  </p>\n     *\n     * @return  {@code true} if, and only if,\n     *          {@code readyOps() & OP_WRITE} is nonzero\n     *\n     * @throws  CancelledKeyException\n     *          If this key has been cancelled\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isConnectable()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether this key's channel has either finished, or failed to\n     * finish, its socket-connection operation.\n     *\n     * <p> An invocation of this method of the form {@code k.isConnectable()}\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>{@code\n     * k.readyOps() & OP_CONNECT != 0\n     * }</pre></blockquote>\n     *\n     * <p> If this key's channel does not support socket-connect operations\n     * then this method always returns {@code false}.  </p>\n     *\n     * @return  {@code true} if, and only if,\n     *          {@code readyOps() & OP_CONNECT} is nonzero\n     *\n     * @throws  CancelledKeyException\n     *          If this key has been cancelled\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isAcceptable()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether this key's channel is ready to accept a new socket\n     * connection.\n     *\n     * <p> An invocation of this method of the form {@code k.isAcceptable()}\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>{@code\n     * k.readyOps() & OP_ACCEPT != 0\n     * }</pre></blockquote>\n     *\n     * <p> If this key's channel does not support socket-accept operations then\n     * this method always returns {@code false}.  </p>\n     *\n     * @return  {@code true} if, and only if,\n     *          {@code readyOps() & OP_ACCEPT} is nonzero\n     *\n     * @throws  CancelledKeyException\n     *          If this key has been cancelled\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Object attach(Object ob)",
    "returnType" : "Object",
    "comment" : "\n     * Attaches the given object to this key.\n     *\n     * <p> An attached object may later be retrieved via the {@link #attachment()\n     * attachment} method.  Only one object may be attached at a time; invoking\n     * this method causes any previous attachment to be discarded.  The current\n     * attachment may be discarded by attaching {@code null}.  </p>\n     *\n     * @param  ob\n     *         The object to be attached; may be {@code null}\n     *\n     * @return  The previously-attached object, if any,\n     *          otherwise {@code null}\n     ",
    "links" : [ "#attachment()" ]
  }, {
    "name" : "public final Object attachment()",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the current attachment.\n     *\n     * @return  The object currently attached to this key,\n     *          or {@code null} if there is no attachment\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract SelectableChannel channel()", "public abstract Selector selector()", "public abstract boolean isValid()", "public abstract void cancel()", "public abstract int interestOps()", "public abstract SelectionKey interestOps(int ops)", "public int interestOpsOr(int ops)", "public int interestOpsAnd(int ops)", "public abstract int readyOps()", "public final boolean isReadable()", "public final boolean isWritable()", "public final boolean isConnectable()", "public final boolean isAcceptable()", "public final Object attach(Object ob)", "public final Object attachment()" ],
  "variableNames" : [ "OP_READ", "OP_WRITE", "OP_CONNECT", "OP_ACCEPT", "attachment", "attachmentUpdater" ]
}