{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/TelephonyCallback.java",
  "packageName" : "android.telephony",
  "className" : "TelephonyCallback",
  "comment" : "\n * A callback class for monitoring changes in specific telephony states\n * on the device, including service state, signal strength, message\n * waiting indicator (voicemail), and others.\n * <p>\n * To register a callback, use a {@link TelephonyCallback} which implements interfaces regarding\n * EVENT_*. For example,\n * FakeServiceStateCallback extends {@link TelephonyCallback} implements\n * {@link TelephonyCallback.ServiceStateListener}.\n * <p>\n * Then override the methods for the state that you wish to receive updates for, and\n * pass the executor and your TelephonyCallback object to\n * {@link TelephonyManager#registerTelephonyCallback}.\n * Methods are called when the state changes, as well as once on initial registration.\n * <p>\n * Note that access to some telephony information is\n * permission-protected. Your application won't receive updates for protected\n * information unless it has the appropriate permissions declared in\n * its manifest file. Where permissions apply, they are noted in the\n * appropriate sub-interfaces.\n ",
  "links" : [ "android.telephony.TelephonyManager#registerTelephonyCallback", "TelephonyCallback.ServiceStateListener", "android.telephony.TelephonyCallback" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_PER_PID_REGISTRATION_LIMIT",
    "type" : "String",
    "comment" : "\n     * Experiment flag to set the per-pid registration limit for TelephonyCallback\n     *\n     * Limit on registrations of {@link TelephonyCallback}s on a per-pid basis. When this limit is\n     * exceeded, any calls to {@link TelephonyManager#registerTelephonyCallback} will fail with an\n     * {@link IllegalStateException}.\n     *\n     * {@link android.os.Process#PHONE_UID}, {@link android.os.Process#SYSTEM_UID}, and the uid that\n     * TelephonyRegistry runs under are exempt from this limit.\n     *\n     * If the value of the flag is less than 1, enforcement of the limit will be disabled.\n     * @hide\n     ",
    "links" : [ "IllegalStateException", "android.os.Process#SYSTEM_UID", "android.telephony.TelephonyManager#registerTelephonyCallback", "android.os.Process#PHONE_UID", "android.telephony.TelephonyCallback" ]
  }, {
    "name" : "DEFAULT_PER_PID_REGISTRATION_LIMIT",
    "type" : "int",
    "comment" : "\n     * Default value for the per-pid registration limit.\n     * See {@link #FLAG_PER_PID_REGISTRATION_LIMIT}.\n     * @hide\n     ",
    "links" : [ "#FLAG_PER_PID_REGISTRATION_LIMIT" ]
  }, {
    "name" : "PHONE_STATE_LISTENER_LIMIT_CHANGE_ID",
    "type" : "long",
    "comment" : "\n     * This change enables a limit on the number of {@link TelephonyCallback} objects any process\n     * may register via {@link TelephonyManager#registerTelephonyCallback}. The default limit is 50,\n     * which may change via remote device config updates.\n     *\n     * This limit is enforced via an {@link IllegalStateException} thrown from\n     * {@link TelephonyManager#registerTelephonyCallback} when the offending process attempts to\n     * register one too many callbacks.\n     *\n     * @hide\n     ",
    "links" : [ "IllegalStateException", "android.telephony.TelephonyManager#registerTelephonyCallback", "android.telephony.TelephonyCallback" ]
  }, {
    "name" : "EVENT_SERVICE_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the network service state (cellular).\n     *\n     * <p>Requires {@link Manifest.permission#ACCESS_FINE_LOCATION} or {@link\n     * Manifest.permission#ACCESS_COARSE_LOCATION} depending on the accuracy of the location info\n     * listeners want to get.\n     *\n     * @hide\n     * @see ServiceStateListener#onServiceStateChanged\n     * @see ServiceState\n     ",
    "links" : [ "Manifest.permission#ACCESS_COARSE_LOCATION", "Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "EVENT_SIGNAL_STRENGTH_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the network signal strength (cellular).\n     *\n     * @hide\n     * @see SignalStrengthsListener#onSignalStrengthsChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_MESSAGE_WAITING_INDICATOR_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the message-waiting indicator.\n     * <p>\n     * Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE} or that\n     * the calling app has carrier privileges (see\n     * {@link TelephonyManager#hasCarrierPrivileges}).\n     * <p>\n     * Example: The status bar uses this to determine when to display the\n     * voicemail icon.\n     *\n     * @hide\n     * @see MessageWaitingIndicatorListener#onMessageWaitingIndicatorChanged\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.Manifest.permission#READ_PHONE_STATE" ]
  }, {
    "name" : "EVENT_CALL_FORWARDING_INDICATOR_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the call-forwarding indicator.\n     * <p>\n     * Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE} or that\n     * the calling app has carrier privileges (see\n     * {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @see CallForwardingIndicatorListener#onCallForwardingIndicatorChanged\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.Manifest.permission#READ_PHONE_STATE" ]
  }, {
    "name" : "EVENT_CELL_LOCATION_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the device's cell location. Note that\n     * this will result in frequent listeners to the listener.\n     * <p>\n     * If you need regular location updates but want more control over\n     * the update interval or location precision, you can set up a callback\n     * through the {@link android.location.LocationManager location manager}\n     * instead.\n     *\n     * @hide\n     * @see CellLocationListener#onCellLocationChanged\n     ",
    "links" : [ "android.location.LocationManager" ]
  }, {
    "name" : "EVENT_CALL_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the device call state.\n     * <p>\n     * Handles callbacks to {@link CallStateListener#onCallStateChanged(int)}.\n     * <p>\n     * Note: This is different from the legacy {@link #EVENT_LEGACY_CALL_STATE_CHANGED} listener\n     * which can include the phone number of the caller.  We purposely do not include the phone\n     * number as that information is not required for call state listeners going forward.\n     * @hide\n     ",
    "links" : [ "#onCallStateChanged(int)", "#EVENT_LEGACY_CALL_STATE_CHANGED" ]
  }, {
    "name" : "EVENT_DATA_CONNECTION_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the data connection state (cellular).\n     *\n     * @hide\n     * @see DataConnectionStateListener#onDataConnectionStateChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_DATA_ACTIVITY_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the direction of data traffic on the data\n     * connection (cellular).\n     * <p>\n     * Example: The status bar uses this to display the appropriate\n     * data-traffic icon.\n     *\n     * @hide\n     * @see DataActivityListener#onDataActivity\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_SIGNAL_STRENGTHS_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the network signal strengths (cellular).\n     * <p>\n     * Example: The status bar uses this to control the signal-strength\n     * icon.\n     *\n     * @hide\n     * @see SignalStrengthsListener#onSignalStrengthsChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_ALWAYS_REPORTED_SIGNAL_STRENGTH_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes of the network signal strengths (cellular) always reported from modem,\n     * even in some situations such as the screen of the device is off.\n     *\n     * @hide\n     * @see TelephonyManager#setSignalStrengthUpdateRequest\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_CELL_INFO_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to observed cell info.\n     *\n     * @hide\n     * @see CellInfoListener#onCellInfoChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_PRECISE_CALL_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for {@link android.telephony.Annotation.PreciseCallStates} of ringing,\n     * background and foreground calls.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @see PreciseCallStateListener#onPreciseCallStateChanged\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.telephony.Annotation.PreciseCallStates" ]
  }, {
    "name" : "EVENT_PRECISE_DATA_CONNECTION_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for {@link PreciseDataConnectionState} on the data connection (cellular).\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @see PreciseDataConnectionStateListener#onPreciseDataConnectionStateChanged\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.PreciseDataConnectionState", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "EVENT_DATA_CONNECTION_REAL_TIME_INFO_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for real time info for all data connections (cellular)).\n     *\n     * @hide\n     * @see PhoneStateListener#onDataConnectionRealTimeInfoChanged(DataConnectionRealTimeInfo)\n     * @deprecated Use {@link TelephonyManager#requestModemActivityInfo}\n     ",
    "links" : [ "android.telephony.TelephonyManager#requestModemActivityInfo" ]
  }, {
    "name" : "EVENT_OEM_HOOK_RAW",
    "type" : "int",
    "comment" : "\n     * Event for OEM hook raw event\n     *\n     * @hide\n     * @see PhoneStateListener#onOemHookRawEvent\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_SRVCC_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the SRVCC state of the active call.\n     *\n     * @hide\n     * @see SrvccStateListener#onSrvccStateChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_CARRIER_NETWORK_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for carrier network changes indicated by a carrier app.\n     *\n     * @hide\n     * @see android.service.carrier.CarrierService#notifyCarrierNetworkChange(boolean)\n     * @see CarrierNetworkListener#onCarrierNetworkChange\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_VOICE_ACTIVATION_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the sim voice activation state\n     *\n     * @hide\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATING\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_DEACTIVATED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_RESTRICTED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_UNKNOWN\n     * <p>\n     * Example: TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATED indicates voice service has been\n     * fully activated\n     * @see VoiceActivationStateListener#onVoiceActivationStateChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_DATA_ACTIVATION_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the sim data activation state\n     *\n     * @hide\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATING\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_DEACTIVATED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_RESTRICTED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_UNKNOWN\n     * <p>\n     * Example: TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATED indicates data service has been\n     * fully activated\n     * @see DataActivationStateListener#onDataActivationStateChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_USER_MOBILE_DATA_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the user mobile data state\n     *\n     * @hide\n     * @see UserMobileDataStateListener#onUserMobileDataStateChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_INFO_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for display info changed event.\n     *\n     * @hide\n     * @see DisplayInfoListener#onDisplayInfoChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_PHONE_CAPABILITY_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the phone capability.\n     *\n     * @hide\n     * @see PhoneCapabilityListener#onPhoneCapabilityChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_ACTIVE_DATA_SUBSCRIPTION_ID_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to active data subscription ID. Active data subscription is\n     * the current subscription used to setup Cellular Internet data. The data is only active on the\n     * subscription at a time, even it is multi-SIM mode. For example, it could be the current\n     * active opportunistic subscription in use, or the subscription user selected as default data\n     * subscription in DSDS mode.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PHONE_STATE} or the calling\n     * app has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @see ActiveDataSubscriptionIdListener#onActiveDataSubscriptionIdChanged\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.Manifest.permission#READ_PHONE_STATE" ]
  }, {
    "name" : "EVENT_RADIO_POWER_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the radio power state.\n     *\n     * @hide\n     * @see RadioPowerStateListener#onRadioPowerStateChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_EMERGENCY_NUMBER_LIST_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to emergency number list based on all active subscriptions.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PHONE_STATE} or the calling\n     * app has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @see EmergencyNumberListListener#onEmergencyNumberListChanged\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.Manifest.permission#READ_PHONE_STATE" ]
  }, {
    "name" : "EVENT_CALL_DISCONNECT_CAUSE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for call disconnect causes which contains {@link DisconnectCause} and\n     * {@link PreciseDisconnectCause}.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @see CallDisconnectCauseListener#onCallDisconnectCauseChanged\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.DisconnectCause", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.telephony.PreciseDisconnectCause" ]
  }, {
    "name" : "EVENT_CALL_ATTRIBUTES_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the call attributes of a currently active call.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @see CallAttributesListener#onCallAttributesChanged\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "EVENT_IMS_CALL_DISCONNECT_CAUSE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for IMS call disconnect causes which contains\n     * {@link android.telephony.ims.ImsReasonInfo}\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @see ImsCallDisconnectCauseListener#onImsCallDisconnectCauseChanged(ImsReasonInfo)\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.telephony.ims.ImsReasonInfo" ]
  }, {
    "name" : "EVENT_OUTGOING_EMERGENCY_CALL",
    "type" : "int",
    "comment" : "\n     * Event for the emergency number placed from an outgoing call.\n     *\n     * @hide\n     * @see OutgoingEmergencyCallListener#onOutgoingEmergencyCall\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_OUTGOING_EMERGENCY_SMS",
    "type" : "int",
    "comment" : "\n     * Event for the emergency number placed from an outgoing SMS.\n     *\n     * @hide\n     * @see OutgoingEmergencySmsListener#onOutgoingEmergencySms\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_REGISTRATION_FAILURE",
    "type" : "int",
    "comment" : "\n     * Event for registration failures.\n     * <p>\n     * Event for indications that a registration procedure has failed in either the CS or PS\n     * domain. This indication does not necessarily indicate a change of service state, which should\n     * be tracked via {@link #EVENT_SERVICE_STATE_CHANGED}.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE} or\n     * the calling app has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * <p>Requires the {@link Manifest.permission#ACCESS_FINE_LOCATION} permission in case that\n     * listener want to get location info in {@link CellIdentity} regardless of whether the calling\n     * app has carrier privileges.\n     *\n     * @hide\n     * @see RegistrationFailedListener#onRegistrationFailed\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "#EVENT_SERVICE_STATE_CHANGED", "android.telephony.CellIdentity", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "EVENT_BARRING_INFO_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for Barring Information for the current registered / camped cell.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE} or\n     * the calling app has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * <p>Requires the {@link Manifest.permission#ACCESS_FINE_LOCATION} permission in case that\n     * listener want to get {@link BarringInfo} which includes location info in {@link CellIdentity}\n     * regardless of whether the calling app has carrier privileges.\n     *\n     * @hide\n     * @see BarringInfoListener#onBarringInfoChanged\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.CellIdentity", "android.telephony.BarringInfo", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "EVENT_PHYSICAL_CHANNEL_CONFIG_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the physical channel configuration.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @see PhysicalChannelConfigListener#onPhysicalChannelConfigChanged\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "EVENT_DATA_ENABLED_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the data enabled.\n     * <p>\n     * Event for indications that the enabled status of current data has changed.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @see DataEnabledListener#onDataEnabledChanged\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "EVENT_ALLOWED_NETWORK_TYPE_LIST_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to allowed network list based on all active subscriptions.\n     *\n     * @hide\n     * @see AllowedNetworkTypesListener#onAllowedNetworkTypesChanged\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_LEGACY_CALL_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the legacy call state changed listener implemented by\n     * {@link PhoneStateListener#onCallStateChanged(int, String)}.  This listener variant is similar\n     * to the new {@link CallStateListener#onCallStateChanged(int)} with the important distinction\n     * that it CAN provide the phone number associated with a call.\n     *\n     * @hide\n     ",
    "links" : [ "#onCallStateChanged(int)", "com.android.internal.telephony.IPhoneStateListener#onCallStateChanged(int" ]
  }, {
    "name" : "EVENT_LINK_CAPACITY_ESTIMATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the link capacity estimate (LCE)\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     *\n     * @see LinkCapacityEstimateChangedListener#onLinkCapacityEstimateChanged\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "EVENT_TRIGGER_NOTIFY_ANBR",
    "type" : "int",
    "comment" : "\n     * Event to norify the Anbr information from Radio to Ims.\n     *\n     * @see ImsCallSessionImplBase#callSessionNotifyAnbr.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_MEDIA_QUALITY_STATUS_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the media quality status\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     *\n     * @see MediaQualityStatusChangedListener#onMediaQualityStatusChanged\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "EVENT_EMERGENCY_CALLBACK_MODE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for changes to the Emergency callback mode\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE}\n     *\n     * @see EmergencyCallbackModeListener#onCallbackModeStarted(int)\n     * @see EmergencyCallbackModeListener#onCallbackModeStopped(int, int)\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE" ]
  }, {
    "name" : "EVENT_SIMULTANEOUS_CELLULAR_CALLING_SUBSCRIPTIONS_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for listening to changes in simultaneous cellular calling subscriptions.\n     *\n     * @see SimultaneousCellularCallingSupportListener\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_CARRIER_ROAMING_NTN_MODE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Event for listening to changes in carrier roaming non-terrestrial network mode.\n     *\n     * @see CarrierRoamingNtnModeListener\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "callback",
    "type" : "IPhoneStateListener",
    "comment" : "TODO: The maxTargetSdk should be S if the build time tool updates it.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void init(@NonNull @CallbackExecutor Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void init(@NonNull @CallbackExecutor Executor executor)" ],
  "variableNames" : [ "LOG_TAG", "FLAG_PER_PID_REGISTRATION_LIMIT", "DEFAULT_PER_PID_REGISTRATION_LIMIT", "PHONE_STATE_LISTENER_LIMIT_CHANGE_ID", "EVENT_SERVICE_STATE_CHANGED", "EVENT_SIGNAL_STRENGTH_CHANGED", "EVENT_MESSAGE_WAITING_INDICATOR_CHANGED", "EVENT_CALL_FORWARDING_INDICATOR_CHANGED", "EVENT_CELL_LOCATION_CHANGED", "EVENT_CALL_STATE_CHANGED", "EVENT_DATA_CONNECTION_STATE_CHANGED", "EVENT_DATA_ACTIVITY_CHANGED", "EVENT_SIGNAL_STRENGTHS_CHANGED", "EVENT_ALWAYS_REPORTED_SIGNAL_STRENGTH_CHANGED", "EVENT_CELL_INFO_CHANGED", "EVENT_PRECISE_CALL_STATE_CHANGED", "EVENT_PRECISE_DATA_CONNECTION_STATE_CHANGED", "EVENT_DATA_CONNECTION_REAL_TIME_INFO_CHANGED", "EVENT_OEM_HOOK_RAW", "EVENT_SRVCC_STATE_CHANGED", "EVENT_CARRIER_NETWORK_CHANGED", "EVENT_VOICE_ACTIVATION_STATE_CHANGED", "EVENT_DATA_ACTIVATION_STATE_CHANGED", "EVENT_USER_MOBILE_DATA_STATE_CHANGED", "EVENT_DISPLAY_INFO_CHANGED", "EVENT_PHONE_CAPABILITY_CHANGED", "EVENT_ACTIVE_DATA_SUBSCRIPTION_ID_CHANGED", "EVENT_RADIO_POWER_STATE_CHANGED", "EVENT_EMERGENCY_NUMBER_LIST_CHANGED", "EVENT_CALL_DISCONNECT_CAUSE_CHANGED", "EVENT_CALL_ATTRIBUTES_CHANGED", "EVENT_IMS_CALL_DISCONNECT_CAUSE_CHANGED", "EVENT_OUTGOING_EMERGENCY_CALL", "EVENT_OUTGOING_EMERGENCY_SMS", "EVENT_REGISTRATION_FAILURE", "EVENT_BARRING_INFO_CHANGED", "EVENT_PHYSICAL_CHANNEL_CONFIG_CHANGED", "EVENT_DATA_ENABLED_CHANGED", "EVENT_ALLOWED_NETWORK_TYPE_LIST_CHANGED", "EVENT_LEGACY_CALL_STATE_CHANGED", "EVENT_LINK_CAPACITY_ESTIMATE_CHANGED", "EVENT_TRIGGER_NOTIFY_ANBR", "EVENT_MEDIA_QUALITY_STATUS_CHANGED", "EVENT_EMERGENCY_CALLBACK_MODE_CHANGED", "EVENT_SIMULTANEOUS_CELLULAR_CALLING_SUBSCRIPTIONS_CHANGED", "EVENT_CARRIER_ROAMING_NTN_MODE_CHANGED", "callback" ]
}