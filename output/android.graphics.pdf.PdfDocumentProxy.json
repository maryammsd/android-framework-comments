{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/pdf/PdfDocumentProxy.java",
  "packageName" : "android.graphics.pdf",
  "className" : "PdfDocumentProxy",
  "comment" : "\n * This class accesses the PdfClient tools to manipulate and render a PDF document. One instance of\n * this class corresponds to one PDF document, loads it within PdfClient and keeps an internal\n * reference to the resulting object, to be re-used in subsequent calls.\n *\n * <p>This class is mostly a JNI gateway to PdfClient.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LIB_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPdfDocPtr",
    "type" : "long",
    "comment" : " Internal reference to a native pointer to a Document object. ",
    "links" : [ ]
  }, {
    "name" : "mNumPages",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static native LoadPdfResult createFromFd(int fd, String password)",
    "returnType" : "LoadPdfResult",
    "comment" : "\n     * Tries to load a PdfDocument from native file descriptor.\n     *\n     * @return a LoadPdfResult of status LOADED containing the PdfDocument,\n     * or, an empty LoadPdfResult of a different status indicating failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void loadLibPdf()",
    "returnType" : "void",
    "comment" : "\n     * Loads the PdfClient binary library used to render PDF documents. The library will only be\n     * loaded once so subsequent calls after the first will have no effect. This may be used to\n     * preload the library before use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getPdfDocPtr()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getNumPages()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public native void destroy()",
    "returnType" : "void",
    "comment" : " Destroys the PDF document and release resources held by PdfClient. ",
    "links" : [ ]
  }, {
    "name" : "public native boolean saveToFd(int fd)",
    "returnType" : "boolean",
    "comment" : "\n     * Tries to save this PdfDocument to the given native file descriptor, which must be open for\n     * write or append.\n     *\n     * @return true on success\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean saveAs(ParcelFileDescriptor destination)",
    "returnType" : "boolean",
    "comment" : "\n     * Saves the current state of this {@link PdfDocument} to the given, writable, file descriptor.\n     * The given file descriptor is closed by this function.\n     *\n     * @param destination the file descriptor to write to\n     * @return true on success\n     ",
    "links" : [ "android.graphics.pdf.PdfDocument" ]
  }, {
    "name" : "public native int getPageWidth(int pageNum)",
    "returnType" : "int",
    "comment" : "\n     * Returns the width of the given page of the PDF. This is measured in points, but we\n     * zoom-to-fit, so it doesn't matter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native int getPageHeight(int pageNum)",
    "returnType" : "int",
    "comment" : "\n     * Returns the height of the given page of the PDF. This is measured in points, but we\n     * zoom-to-fit, so it doesn't matter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean render(int pageNum, Bitmap bitmap, int clipLeft, int clipTop, int clipRight, int clipBottom, float[] transform, int renderMode, boolean hideTextAnnots)",
    "returnType" : "boolean",
    "comment" : "\n     * Renders a page to a bitmap.\n     *\n     * @param pageNum the page number of the page to be rendered\n     * @param clipLeft the left coordinate of the clipping boundary in bitmap coordinates\n     * @param clipTop the top coordinate of the clipping boundary in bitmap coordinates\n     * @param clipRight the right coordinate of the clipping boundary in bitmap coordinates\n     * @param clipBottom the bottom coordinate of the clipping boundary in bitmap coordinates\n     * @param transform an affine transform matrix in the form of an array.\n     * @see android.graphics.Matrix#getValues(float[])\n     * @param renderMode the render mode\n     * @param hideTextAnnots whether to hide text and highlight annotations\n     * @return true if the page was rendered into the destination bitmap\n     ",
    "links" : [ ]
  }, {
    "name" : "private native boolean cloneWithoutSecurity(int destination)",
    "returnType" : "boolean",
    "comment" : "\n     * Clones the currently loaded document using the provided file descriptor.\n     * <p>You are required to detach the file descriptor as the native code will close it.\n     *\n     * @param destination native fd pointer\n     * @return true if the cloning was successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean cloneWithoutSecurity(ParcelFileDescriptor destination)",
    "returnType" : "boolean",
    "comment" : "\n     * Clones the currently loaded document using the provided file descriptor.\n     * <p>You are required to detach the file descriptor as the native code will close it.\n     *\n     * @param destination {@link ParcelFileDescriptor} to which the document needs to be written to.\n     * @return true if the cloning was successful\n     ",
    "links" : [ "android.os.ParcelFileDescriptor" ]
  }, {
    "name" : "public native String getPageText(int pageNum)",
    "returnType" : "String",
    "comment" : "\n     * Gets the text of the entire page as a string, in the order the text is\n     * found in the PDF stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native List<String> getPageAltText(int pageNum)",
    "returnType" : "List<String>",
    "comment" : "\n     * Gets all pieces of alt-text found for the page, in the order the alt-text is found in the\n     * PDF stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native MatchRects searchPageText(int pageNum, String query)",
    "returnType" : "MatchRects",
    "comment" : "\n     * Searches for the given string on the page and returns the bounds of all of the matches.\n     * The number of matches is {@link MatchRects#size()}.\n     ",
    "links" : [ "android.graphics.pdf.models.jni.MatchRects#size()" ]
  }, {
    "name" : "public native PageSelection selectPageText(int pageNum, SelectionBoundary start, SelectionBoundary stop)",
    "returnType" : "PageSelection",
    "comment" : "\n     * Get the text selection that spans between the two boundaries (inclusive of start and\n     * exclusive of stop), both of which can be either exactly defined with text indexes, or\n     * approximately defined with points on the page. The resulting selection will also be exactly\n     * defined with both indexes and points. If the start and stop boundary are both the same point,\n     * selects the word at that point.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native LinkRects getPageLinks(int pageNum)",
    "returnType" : "LinkRects",
    "comment" : " Get the bounds and URLs of all the links on the given page. ",
    "links" : [ ]
  }, {
    "name" : "public native List<PdfPageGotoLinkContent> getPageGotoLinks(int pageNum)",
    "returnType" : "List<PdfPageGotoLinkContent>",
    "comment" : " Returns bookmarks and other goto links (within the current document) on a page ",
    "links" : [ ]
  }, {
    "name" : "public native void retainPage(int pageNum)",
    "returnType" : "void",
    "comment" : " Loads a page object and retains it in memory when a page becomes visible. ",
    "links" : [ ]
  }, {
    "name" : "public native void releasePage(int pageNum)",
    "returnType" : "void",
    "comment" : " Cleans up objects in memory related to a page after it is no longer visible. ",
    "links" : [ ]
  }, {
    "name" : "public native boolean isPdfLinearized()",
    "returnType" : "boolean",
    "comment" : " Returns true if the PDF is linearized. (May give false negatives for <1KB PDFs). ",
    "links" : [ ]
  }, {
    "name" : "public native boolean scaleForPrinting()",
    "returnType" : "boolean",
    "comment" : " Returns true if the document prefers to be scaled for printing. ",
    "links" : [ ]
  }, {
    "name" : "public native int getFormType()",
    "returnType" : "int",
    "comment" : "\n     * Returns an int representing the form type contained in the PDF, e.g. Acro vs XFA (if any).\n     ",
    "links" : [ ]
  }, {
    "name" : "public native FormWidgetInfo getFormWidgetInfo(int pageNum, int x, int y)",
    "returnType" : "FormWidgetInfo",
    "comment" : " Obtains information about the widget at point ({@code x}, {@code y}), if any. ",
    "links" : [ ]
  }, {
    "name" : "public native FormWidgetInfo getFormWidgetInfo(int pageNum, int annotationIndex)",
    "returnType" : "FormWidgetInfo",
    "comment" : "\n     * Obtains information about the widget with ({@code annotationIndex} on page {@code pageNum}),\n     * if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native List<FormWidgetInfo> getFormWidgetInfos(int pageNum, int[] typeIds)",
    "returnType" : "List<FormWidgetInfo>",
    "comment" : "\n     * Obtains information about all form widgets on page ({@code pageNum}, if any.\n     *\n     * <p>Optionally restricts by {@code typeIds}. If {@code typeIds} is empty, all form widgets on\n     * the page will be returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native List<Rect> clickOnPage(int pageNum, int x, int y)",
    "returnType" : "List<Rect>",
    "comment" : "\n     * Executes an interactive click on the page at the given point ({@code x}, {@code y}).\n     *\n     * @return rectangular areas of the page bitmap that have been invalidated by this action\n     ",
    "links" : [ ]
  }, {
    "name" : "public native List<Rect> setFormFieldText(int pageNum, int annotIndex, String text)",
    "returnType" : "List<Rect>",
    "comment" : "\n     * Sets the text of the widget at {@code annotationIndex}, if applicable.\n     *\n     * @return rectangular areas of the page bitmap that have been invalidated by this action\n     ",
    "links" : [ ]
  }, {
    "name" : "public native List<Rect> setFormFieldSelectedIndices(int pageNum, int annotIndex, int[] selectedIndices)",
    "returnType" : "List<Rect>",
    "comment" : "\n     * Selects the {@code selectedIndices} and unselects all others for the widget at {@code\n     * annotationIndex}, if applicable.\n     *\n     * @return Rectangular areas of the page bitmap that have been invalidated by this action\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static native LoadPdfResult createFromFd(int fd, String password)", "public static void loadLibPdf()", "public long getPdfDocPtr()", "public int getNumPages()", "public native void destroy()", "public native boolean saveToFd(int fd)", "public boolean saveAs(ParcelFileDescriptor destination)", "public native int getPageWidth(int pageNum)", "public native int getPageHeight(int pageNum)", "public native boolean render(int pageNum, Bitmap bitmap, int clipLeft, int clipTop, int clipRight, int clipBottom, float[] transform, int renderMode, boolean hideTextAnnots)", "private native boolean cloneWithoutSecurity(int destination)", "public boolean cloneWithoutSecurity(ParcelFileDescriptor destination)", "public native String getPageText(int pageNum)", "public native List<String> getPageAltText(int pageNum)", "public native MatchRects searchPageText(int pageNum, String query)", "public native PageSelection selectPageText(int pageNum, SelectionBoundary start, SelectionBoundary stop)", "public native LinkRects getPageLinks(int pageNum)", "public native List<PdfPageGotoLinkContent> getPageGotoLinks(int pageNum)", "public native void retainPage(int pageNum)", "public native void releasePage(int pageNum)", "public native boolean isPdfLinearized()", "public native boolean scaleForPrinting()", "public native int getFormType()", "public native FormWidgetInfo getFormWidgetInfo(int pageNum, int x, int y)", "public native FormWidgetInfo getFormWidgetInfo(int pageNum, int annotationIndex)", "public native List<FormWidgetInfo> getFormWidgetInfos(int pageNum, int[] typeIds)", "public native List<Rect> clickOnPage(int pageNum, int x, int y)", "public native List<Rect> setFormFieldText(int pageNum, int annotIndex, String text)", "public native List<Rect> setFormFieldSelectedIndices(int pageNum, int annotIndex, int[] selectedIndices)" ],
  "variableNames" : [ "TAG", "LIB_NAME", "mPdfDocPtr", "mNumPages" ]
}