{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/credentials/CredentialProviderInfoFactory.java",
  "packageName" : "android.service.credentials",
  "className" : "CredentialProviderInfoFactory",
  "comment" : "\n * {@link CredentialProviderInfo} generator.\n *\n * @hide\n ",
  "links" : [ "android.credentials.CredentialProviderInfo" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_CREDENTIAL_PROVIDER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_CAPABILITIES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_CAPABILITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CredentialProviderInfo create(@NonNull Context context, @NonNull ComponentName serviceComponent, int userId, boolean isSystemProvider, boolean isPrimary) throws PackageManager.NameNotFoundException",
    "returnType" : "CredentialProviderInfo",
    "comment" : "\n     * Constructs an information instance of the credential provider.\n     *\n     * @param context the context object\n     * @param serviceComponent the serviceComponent of the provider service\n     * @param userId the android userId for which the current process is running\n     * @param isSystemProvider whether this provider is a system provider\n     * @throws PackageManager.NameNotFoundException If provider service is not found\n     * @throws SecurityException If provider does not require the relevant permission\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CredentialProviderInfo create(@NonNull Context context, @NonNull ServiceInfo serviceInfo, boolean isSystemProvider, boolean disableSystemAppVerificationForTests, boolean isEnabled, boolean isPrimary) throws SecurityException",
    "returnType" : "CredentialProviderInfo",
    "comment" : "\n     * Constructs an information instance of the credential provider.\n     *\n     * @param context the context object\n     * @param serviceInfo the service info for the provider app. This must be retrieved from the\n     *     {@code PackageManager}\n     * @param isSystemProvider whether the provider app is a system provider\n     * @param disableSystemAppVerificationForTests whether to disable system app permission\n     *     verification so that tests can install system providers\n     * @param isEnabled whether the user enabled this provider\n     * @throws SecurityException If provider does not require the relevant permission\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CredentialProviderInfo createForTests(@NonNull ServiceInfo serviceInfo, @NonNull CharSequence overrideLabel, boolean isSystemProvider, boolean isEnabled, @NonNull List<String> capabilities)",
    "returnType" : "CredentialProviderInfo",
    "comment" : "\n     * Constructs an information instance of the credential provider for testing purposes. Does not\n     * run any verifications and passes parameters as is.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void verifyProviderPermission(ServiceInfo serviceInfo) throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSystemProviderWithValidPermission(ServiceInfo serviceInfo, Context context)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidSystemProvider(Context context, ServiceInfo serviceInfo, boolean disableSystemAppVerificationForTests)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static CredentialProviderInfo.Builder populateMetadata(@NonNull Context context, ServiceInfo serviceInfo)",
    "returnType" : "CredentialProviderInfo.Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static CredentialProviderInfo.Builder extractXmlMetadata(@NonNull Context context, @NonNull ServiceInfo serviceInfo, @NonNull PackageManager pm, @NonNull Resources resources)",
    "returnType" : "CredentialProviderInfo.Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getAfsAttributeSafe(@Nullable TypedArray afsAttributes, int resId)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<String> parseXmlProviderOuterCapabilities(XmlPullParser parser, Resources resources) throws IOException, XmlPullParserException",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<String> parseXmlProviderInnerCapabilities(XmlPullParser parser, Resources resources) throws IOException, XmlPullParserException",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ServiceInfo getServiceInfoOrThrow(@NonNull ComponentName serviceComponent, int userId) throws PackageManager.NameNotFoundException",
    "returnType" : "ServiceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<ServiceInfo> getAvailableSystemServiceInfos(@NonNull Context context, @UserIdInt int userId, boolean disableSystemAppVerificationForTests)",
    "returnType" : "List<ServiceInfo>",
    "comment" : "\n     * Returns the valid credential provider services available for the user with the given {@code\n     * userId}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<CredentialProviderInfo> getAvailableSystemServices(@NonNull Context context, @UserIdInt int userId, boolean disableSystemAppVerificationForTests, Set<ComponentName> enabledServices)",
    "returnType" : "List<CredentialProviderInfo>",
    "comment" : "\n     * Returns the valid credential provider services available for the user with the given {@code\n     * userId}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PackagePolicy getDeviceManagerPolicy(@NonNull Context context, int userId)",
    "returnType" : "PackagePolicy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static List<CredentialProviderInfo> getCredentialProviderServices(@NonNull Context context, int userId, int providerFilter, Set<ComponentName> enabledServices, Set<ComponentName> primaryServices)",
    "returnType" : "List<CredentialProviderInfo>",
    "comment" : "\n     * Returns the valid credential provider services available for the user with the given {@code\n     * userId}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<CredentialProviderInfo> getCredentialProviderServicesForTesting(@NonNull Context context, int userId, int providerFilter, Set<ComponentName> enabledServices, Set<ComponentName> primaryServices)",
    "returnType" : "List<CredentialProviderInfo>",
    "comment" : "\n     * Returns the valid credential provider services available for the user with the given {@code\n     * userId}. Includes test providers.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static List<CredentialProviderInfo> getUserProviders(@NonNull Context context, @UserIdInt int userId, boolean disableSystemAppVerificationForTests, Set<ComponentName> enabledServices, Set<ComponentName> primaryServices)",
    "returnType" : "List<CredentialProviderInfo>",
    "comment" : "\n     * Returns the valid credential provider services available for the user with the given {@code\n     * userId}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static CredentialProviderInfo create(@NonNull Context context, @NonNull ComponentName serviceComponent, int userId, boolean isSystemProvider, boolean isPrimary) throws PackageManager.NameNotFoundException", "public static CredentialProviderInfo create(@NonNull Context context, @NonNull ServiceInfo serviceInfo, boolean isSystemProvider, boolean disableSystemAppVerificationForTests, boolean isEnabled, boolean isPrimary) throws SecurityException", "public static CredentialProviderInfo createForTests(@NonNull ServiceInfo serviceInfo, @NonNull CharSequence overrideLabel, boolean isSystemProvider, boolean isEnabled, @NonNull List<String> capabilities)", "private static void verifyProviderPermission(ServiceInfo serviceInfo) throws SecurityException", "private static boolean isSystemProviderWithValidPermission(ServiceInfo serviceInfo, Context context)", "private static boolean isValidSystemProvider(Context context, ServiceInfo serviceInfo, boolean disableSystemAppVerificationForTests)", "private static CredentialProviderInfo.Builder populateMetadata(@NonNull Context context, ServiceInfo serviceInfo)", "private static CredentialProviderInfo.Builder extractXmlMetadata(@NonNull Context context, @NonNull ServiceInfo serviceInfo, @NonNull PackageManager pm, @NonNull Resources resources)", "private static String getAfsAttributeSafe(@Nullable TypedArray afsAttributes, int resId)", "private static List<String> parseXmlProviderOuterCapabilities(XmlPullParser parser, Resources resources) throws IOException, XmlPullParserException", "private static List<String> parseXmlProviderInnerCapabilities(XmlPullParser parser, Resources resources) throws IOException, XmlPullParserException", "private static ServiceInfo getServiceInfoOrThrow(@NonNull ComponentName serviceComponent, int userId) throws PackageManager.NameNotFoundException", "private static List<ServiceInfo> getAvailableSystemServiceInfos(@NonNull Context context, @UserIdInt int userId, boolean disableSystemAppVerificationForTests)", "public static List<CredentialProviderInfo> getAvailableSystemServices(@NonNull Context context, @UserIdInt int userId, boolean disableSystemAppVerificationForTests, Set<ComponentName> enabledServices)", "private static PackagePolicy getDeviceManagerPolicy(@NonNull Context context, int userId)", "public static List<CredentialProviderInfo> getCredentialProviderServices(@NonNull Context context, int userId, int providerFilter, Set<ComponentName> enabledServices, Set<ComponentName> primaryServices)", "public static List<CredentialProviderInfo> getCredentialProviderServicesForTesting(@NonNull Context context, int userId, int providerFilter, Set<ComponentName> enabledServices, Set<ComponentName> primaryServices)", "private static List<CredentialProviderInfo> getUserProviders(@NonNull Context context, @UserIdInt int userId, boolean disableSystemAppVerificationForTests, Set<ComponentName> enabledServices, Set<ComponentName> primaryServices)" ],
  "variableNames" : [ "TAG", "TAG_CREDENTIAL_PROVIDER", "TAG_CAPABILITIES", "TAG_CAPABILITY", "ATTR_NAME" ]
}