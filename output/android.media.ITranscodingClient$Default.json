{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/ITranscodingClient.java",
  "packageName" : "android.media",
  "className" : "Default",
  "comment" : " Default implementation for ITranscodingClient. ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean submitRequest(android.media.TranscodingRequestParcel request, android.media.TranscodingSessionParcel session) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Submits a transcoding request to MediaTranscodingService.\n     * \n     * @param request a TranscodingRequest contains transcoding configuration.\n     * @param session(output variable) a TranscodingSession generated by MediaTranscodingService.\n     * @return true if success, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean cancelSession(int sessionId) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Cancels a transcoding session.\n     * \n     * @param sessionId a TranscodingSession generated by the MediaTranscodingService.\n     * @return true if succeeds, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSessionWithId(int sessionId, android.media.TranscodingSessionParcel session) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Queries the session detail associated with a sessionId.\n     * \n     * @param sessionId a TranscodingSession generated by the MediaTranscodingService.\n     * @param session(output variable) the TranscodingSession associated with the sessionId.\n     * @return true if succeeds, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addClientUid(int sessionId, int clientUid) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Add an additional client uid requesting a session.\n     * \n     * @sessionId the session id to which to add the additional client uid.\n     * @clientUid the additional client uid to be added.\n     * @return false if the session doesn't exist or the client is already requesting the\n     * session, true otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getClientUids(int sessionId) throws android.os.RemoteException",
    "returnType" : "int[]",
    "comment" : "\n     * Retrieves the (unsorted) list of all clients requesting a session.\n     * \n     * Note that if a session was submitted with offline priority (\n     * TranscodingSessionPriority::kUnspecified), it initially will not be considered requested\n     * by any particular client, because the client could go away any time after the submission.\n     * However, additional uids could be added via addClientUid() after the submission, which\n     * essentially make the request a real-time request instead of an offline request.\n     * \n     * @sessionId the session id for which to retrieve the client uid list.\n     * @clientUids array to hold the retrieved client uid list.\n     * @return false if the session doesn't exist, true otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregister() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Unregister the client with the MediaTranscodingService.\n     * \n     * Client will not be able to perform any more transcoding after unregister.\n     ",
    "links" : [ ]
  }, {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean submitRequest(android.media.TranscodingRequestParcel request, android.media.TranscodingSessionParcel session) throws android.os.RemoteException", "public boolean cancelSession(int sessionId) throws android.os.RemoteException", "public boolean getSessionWithId(int sessionId, android.media.TranscodingSessionParcel session) throws android.os.RemoteException", "public boolean addClientUid(int sessionId, int clientUid) throws android.os.RemoteException", "public int[] getClientUids(int sessionId) throws android.os.RemoteException", "public void unregister() throws android.os.RemoteException", "public android.os.IBinder asBinder()" ],
  "variableNames" : [ ]
}