{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/EditText.java",
  "packageName" : "android.widget",
  "className" : "EditText",
  "comment" : "\n * A user interface element for entering and modifying text.\n * When you define an edit text widget, you must specify the\n * {@link android.R.styleable#TextView_inputType}\n * attribute. For example, for plain text input set inputType to \"text\":\n * <p>\n * <pre>\n * &lt;EditText\n *     android:id=\"@+id/plain_text_input\"\n *     android:layout_height=\"wrap_content\"\n *     android:layout_width=\"match_parent\"\n *     android:inputType=\"text\"/&gt;</pre>\n *\n * Choosing the input type configures the keyboard type that is shown, acceptable characters,\n * and appearance of the edit text.\n * For example, if you want to accept a secret number, like a unique pin or serial number,\n * you can set inputType to \"numericPassword\".\n * An inputType of \"numericPassword\" results in an edit text that accepts numbers only,\n * shows a numeric keyboard when focused, and masks the text that is entered for privacy.\n * <p>\n * See the <a href=\"{@docRoot}guide/topics/ui/controls/text.html\">Text Fields</a>\n * guide for examples of other\n * {@link android.R.styleable#TextView_inputType} settings.\n * </p>\n * <p>You also can receive callbacks as a user changes text by\n * adding a {@link android.text.TextWatcher} to the edit text.\n * This is useful when you want to add auto-save functionality as changes are made,\n * or validate the format of user input, for example.\n * You add a text watcher using the {@link TextView#addTextChangedListener} method.\n * </p>\n * <p>\n * This widget does not support auto-sizing text.\n * <p>\n * <b>XML attributes</b>\n * <p>\n * See {@link android.R.styleable#EditText EditText Attributes},\n * {@link android.R.styleable#TextView TextView Attributes},\n * {@link android.R.styleable#View View Attributes}\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean getFreezesText()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean getDefaultEditable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected MovementMethod getDefaultMovementMethod()",
    "returnType" : "MovementMethod",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Editable getText()",
    "returnType" : "Editable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setText(CharSequence text, BufferType type)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSelection(int start, int stop)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for {@link Selection#setSelection(Spannable, int, int)}.\n     ",
    "links" : [ "android.text.Selection#setSelection(Spannable" ]
  }, {
    "name" : "public void setSelection(int index)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for {@link Selection#setSelection(Spannable, int)}.\n     ",
    "links" : [ "android.text.Selection#setSelection(Spannable" ]
  }, {
    "name" : "public void selectAll()",
    "returnType" : "void",
    "comment" : "\n     * Convenience for {@link Selection#selectAll}.\n     ",
    "links" : [ "android.text.Selection#selectAll" ]
  }, {
    "name" : "public void extendSelection(int index)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for {@link Selection#extendSelection}.\n     ",
    "links" : [ "android.text.Selection#extendSelection" ]
  }, {
    "name" : "public void setEllipsize(TextUtils.TruncateAt ellipsis)",
    "returnType" : "void",
    "comment" : "\n     * Causes words in the text that are longer than the view's width to be ellipsized instead of\n     * broken in the middle. {@link TextUtils.TruncateAt#MARQUEE\n     * TextUtils.TruncateAt#MARQUEE} is not supported.\n     *\n     * @param ellipsis Type of ellipsis to be applied.\n     * @throws IllegalArgumentException When the value of <code>ellipsis</code> parameter is\n     *      {@link TextUtils.TruncateAt#MARQUEE}.\n     * @see TextView#setEllipsize(TextUtils.TruncateAt)\n     ",
    "links" : [ "TextUtils.TruncateAt#MARQUEE", "TextUtils.TruncateAt#MARQUEETextUtils.TruncateAt" ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean supportsAutoSizeText()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public boolean getFreezesText()", "protected boolean getDefaultEditable()", "protected MovementMethod getDefaultMovementMethod()", "public Editable getText()", "public void setText(CharSequence text, BufferType type)", "public void setSelection(int start, int stop)", "public void setSelection(int index)", "public void selectAll()", "public void extendSelection(int index)", "public void setEllipsize(TextUtils.TruncateAt ellipsis)", "public CharSequence getAccessibilityClassName()", "protected boolean supportsAutoSizeText()" ]
}