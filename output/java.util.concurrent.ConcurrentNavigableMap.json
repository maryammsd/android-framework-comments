{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ConcurrentNavigableMap.java",
  "packageName" : "java.util.concurrent",
  "className" : "ConcurrentNavigableMap",
  "comment" : "\n * A {@link ConcurrentMap} supporting {@link NavigableMap} operations,\n * and recursively so for its navigable sub-maps.\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @author Doug Lea\n * @param <K> the type of keys maintained by this map\n * @param <V> the type of mapped values\n * @since 1.6\n ",
  "links" : [ "java.util.NavigableMap", "java.util.concurrent.ConcurrentMap" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " ConcurrentNavigableMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",
    "returnType" : "ConcurrentNavigableMap<K, V>",
    "comment" : "\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ConcurrentNavigableMap<K, V> headMap(K toKey, boolean inclusive)",
    "returnType" : "ConcurrentNavigableMap<K, V>",
    "comment" : "\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ConcurrentNavigableMap<K, V> tailMap(K fromKey, boolean inclusive)",
    "returnType" : "ConcurrentNavigableMap<K, V>",
    "comment" : "\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ConcurrentNavigableMap<K, V> subMap(K fromKey, K toKey)",
    "returnType" : "ConcurrentNavigableMap<K, V>",
    "comment" : "\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ConcurrentNavigableMap<K, V> headMap(K toKey)",
    "returnType" : "ConcurrentNavigableMap<K, V>",
    "comment" : "\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ConcurrentNavigableMap<K, V> tailMap(K fromKey)",
    "returnType" : "ConcurrentNavigableMap<K, V>",
    "comment" : "\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " ConcurrentNavigableMap<K, V> descendingMap()",
    "returnType" : "ConcurrentNavigableMap<K, V>",
    "comment" : "\n     * Returns a reverse order view of the mappings contained in this map.\n     * The descending map is backed by this map, so changes to the map are\n     * reflected in the descending map, and vice-versa.\n     *\n     * <p>The returned map has an ordering equivalent to\n     * {@link java.util.Collections#reverseOrder(Comparator) Collections.reverseOrder}{@code (comparator())}.\n     * The expression {@code m.descendingMap().descendingMap()} returns a\n     * view of {@code m} essentially equivalent to {@code m}.\n     *\n     * @return a reverse order view of this map\n     ",
    "links" : [ "java.util.Collections#reverseOrder(Comparator)" ]
  }, {
    "name" : " NavigableSet<K> navigableKeySet()",
    "returnType" : "NavigableSet<K>",
    "comment" : "\n     * Returns a {@link NavigableSet} view of the keys contained in this map.\n     * The set's iterator returns the keys in ascending order.\n     * The set is backed by the map, so changes to the map are\n     * reflected in the set, and vice-versa.  The set supports element\n     * removal, which removes the corresponding mapping from the map,\n     * via the {@code Iterator.remove}, {@code Set.remove},\n     * {@code removeAll}, {@code retainAll}, and {@code clear}\n     * operations.  It does not support the {@code add} or {@code addAll}\n     * operations.\n     *\n     * <p>The view's iterators and spliterators are\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * @return a navigable set view of the keys in this map\n     ",
    "links" : [ "java.util.NavigableSet" ]
  }, {
    "name" : " NavigableSet<K> keySet()",
    "returnType" : "NavigableSet<K>",
    "comment" : "\n     * Returns a {@link NavigableSet} view of the keys contained in this map.\n     * The set's iterator returns the keys in ascending order.\n     * The set is backed by the map, so changes to the map are\n     * reflected in the set, and vice-versa.  The set supports element\n     * removal, which removes the corresponding mapping from the map,\n     * via the {@code Iterator.remove}, {@code Set.remove},\n     * {@code removeAll}, {@code retainAll}, and {@code clear}\n     * operations.  It does not support the {@code add} or {@code addAll}\n     * operations.\n     *\n     * <p>The view's iterators and spliterators are\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * <p>This method is equivalent to method {@code navigableKeySet}.\n     *\n     * @return a navigable set view of the keys in this map\n     ",
    "links" : [ "java.util.NavigableSet" ]
  }, {
    "name" : " NavigableSet<K> descendingKeySet()",
    "returnType" : "NavigableSet<K>",
    "comment" : "\n     * Returns a reverse order {@link NavigableSet} view of the keys contained in this map.\n     * The set's iterator returns the keys in descending order.\n     * The set is backed by the map, so changes to the map are\n     * reflected in the set, and vice-versa.  The set supports element\n     * removal, which removes the corresponding mapping from the map,\n     * via the {@code Iterator.remove}, {@code Set.remove},\n     * {@code removeAll}, {@code retainAll}, and {@code clear}\n     * operations.  It does not support the {@code add} or {@code addAll}\n     * operations.\n     *\n     * <p>The view's iterators and spliterators are\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * @return a reverse order navigable set view of the keys in this map\n     ",
    "links" : [ "java.util.NavigableSet" ]
  } ],
  "methodNames" : [ " ConcurrentNavigableMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)", " ConcurrentNavigableMap<K, V> headMap(K toKey, boolean inclusive)", " ConcurrentNavigableMap<K, V> tailMap(K fromKey, boolean inclusive)", " ConcurrentNavigableMap<K, V> subMap(K fromKey, K toKey)", " ConcurrentNavigableMap<K, V> headMap(K toKey)", " ConcurrentNavigableMap<K, V> tailMap(K fromKey)", " ConcurrentNavigableMap<K, V> descendingMap()", " NavigableSet<K> navigableKeySet()", " NavigableSet<K> keySet()", " NavigableSet<K> descendingKeySet()" ],
  "variableNames" : [ ]
}