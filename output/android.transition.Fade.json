{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/transition/Fade.java",
  "packageName" : "android.transition",
  "className" : "Fade",
  "comment" : "\n * This transition tracks changes to the visibility of target views in the\n * start and end scenes and fades views in or out when they become visible\n * or non-visible. Visibility is determined by both the\n * {@link View#setVisibility(int)} state of the view as well as whether it\n * is parented in the current view hierarchy.\n *\n * <p>The ability of this transition to fade out a particular view, and the\n * way that that fading operation takes place, is based on\n * the situation of the view in the view hierarchy. For example, if a view was\n * simply removed from its parent, then the view will be added into a {@link\n * android.view.ViewGroupOverlay} while fading. If a visible view is\n * changed to be {@link View#GONE} or {@link View#INVISIBLE}, then the\n * visibility will be changed to {@link View#VISIBLE} for the duration of\n * the animation. However, if a view is in a hierarchy which is also altering\n * its visibility, the situation can be more complicated. In general, if a\n * view that is no longer in the hierarchy in the end scene still has a\n * parent (so its parent hierarchy was removed, but it was not removed from\n * its parent), then it will be left alone to avoid side-effects from\n * improperly removing it from its parent. The only exception to this is if\n * the previous {@link Scene} was\n * {@link Scene#getSceneForLayout(android.view.ViewGroup, int, android.content.Context)\n * created from a layout resource file}, then it is considered safe to un-parent\n * the starting scene view in order to fade it out.</p>\n *\n * <p>A Fade transition can be described in a resource file by using the\n * tag <code>fade</code>, along with the standard\n * attributes of {@link android.R.styleable#Fade} and\n * {@link android.R.styleable#Transition}.</p>\n ",
  "links" : [ "android.R.styleable#Fade", "android.view.View#VISIBLE", "android.transition.Scene", "android.transition.Scene#getSceneForLayout(android.view.ViewGroup", "android.R.styleable#Transition", "android.view.ViewGroupOverlay", "android.view.View#INVISIBLE", "android.view.View#GONE", "android.view.View#setVisibility(int)" ],
  "variables" : [ {
    "name" : "PROPNAME_TRANSITION_ALPHA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IN",
    "type" : "int",
    "comment" : "\n     * Fading mode used in {@link #Fade(int)} to make the transition\n     * operate on targets that are appearing. Maybe be combined with\n     * {@link #OUT} to fade both in and out. Equivalent to\n     * {@link Visibility#MODE_IN}.\n     ",
    "links" : [ "#Fade(int)", "android.transition.Visibility#MODE_IN", "#OUT" ]
  }, {
    "name" : "OUT",
    "type" : "int",
    "comment" : "\n     * Fading mode used in {@link #Fade(int)} to make the transition\n     * operate on targets that are disappearing. Maybe be combined with\n     * {@link #IN} to fade both in and out. Equivalent to\n     * {@link Visibility#MODE_OUT}.\n     ",
    "links" : [ "#Fade(int)", "android.transition.Visibility#MODE_OUT", "#IN" ]
  } ],
  "methods" : [ {
    "name" : "public void captureStartValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Animator createAnimation(final View view, float startAlpha, final float endAlpha)",
    "returnType" : "Animator",
    "comment" : "\n     * Utility method to handle creating and running the Animator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Animator onAppear(ViewGroup sceneRoot, View view, TransitionValues startValues, TransitionValues endValues)",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Animator onDisappear(ViewGroup sceneRoot, final View view, TransitionValues startValues, TransitionValues endValues)",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float getStartAlpha(TransitionValues startValues, float fallbackValue)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void captureStartValues(TransitionValues transitionValues)", "private Animator createAnimation(final View view, float startAlpha, final float endAlpha)", "public Animator onAppear(ViewGroup sceneRoot, View view, TransitionValues startValues, TransitionValues endValues)", "public Animator onDisappear(ViewGroup sceneRoot, final View view, TransitionValues startValues, TransitionValues endValues)", "private static float getStartAlpha(TransitionValues startValues, float fallbackValue)" ],
  "variableNames" : [ "PROPNAME_TRANSITION_ALPHA", "DBG", "LOG_TAG", "IN", "OUT" ]
}