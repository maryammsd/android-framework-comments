{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/security/keystore/AndroidKeyStoreProvider.java",
  "packageName" : "android.security.keystore",
  "className" : "AndroidKeyStoreProvider",
  "comment" : "\n * A provider focused on providing JCA interfaces for the Android KeyStore.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "PROVIDER_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PACKAGE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DESEDE_SYSTEM_PROPERTY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void install()",
    "returnType" : "void",
    "comment" : "\n     * Installs a new instance of this provider (and the\n     * {@link AndroidKeyStoreBCWorkaroundProvider}).\n     * @hide\n     ",
    "links" : [ "AndroidKeyStoreBCWorkaroundProvider" ]
  }, {
    "name" : "private void putSecretKeyFactoryImpl(String algorithm)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void putKeyFactoryImpl(String algorithm)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long getKeyStoreOperationHandle(Object cryptoPrimitive)",
    "returnType" : "long",
    "comment" : "\n     * Gets the {@link KeyStore} operation handle corresponding to the provided JCA crypto\n     * primitive.\n     *\n     * <p>The following primitives are supported: {@link Cipher} and {@link Mac}.\n     *\n     * @return KeyStore operation handle or {@code 0} if the provided primitive's KeyStore operation\n     *         is not in progress.\n     *\n     * @throws IllegalArgumentException if the provided primitive is not supported or is not backed\n     *         by AndroidKeyStore provider.\n     * @throws IllegalStateException if the provided primitive is not initialized.\n     * @hide\n     ",
    "links" : [ "KeyStore", "Cipher", "Mac" ]
  }, {
    "name" : "public static AndroidKeyStorePublicKey getAndroidKeyStorePublicKey(@NonNull String alias, int uid, @NonNull @KeyProperties.KeyAlgorithmEnum String keyAlgorithm, @NonNull byte[] x509EncodedForm)",
    "returnType" : "AndroidKeyStorePublicKey",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "private static AndroidKeyStorePrivateKey getAndroidKeyStorePrivateKey(@NonNull AndroidKeyStorePublicKey publicKey)",
    "returnType" : "AndroidKeyStorePrivateKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static KeyCharacteristics getKeyCharacteristics(@NonNull KeyStore keyStore, @NonNull String alias, int uid) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "KeyCharacteristics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static AndroidKeyStorePublicKey loadAndroidKeyStorePublicKeyFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid, KeyCharacteristics keyCharacteristics) throws UnrecoverableKeyException",
    "returnType" : "AndroidKeyStorePublicKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AndroidKeyStorePublicKey loadAndroidKeyStorePublicKeyFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "AndroidKeyStorePublicKey",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "private static KeyPair loadAndroidKeyStoreKeyPairFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid, @NonNull KeyCharacteristics keyCharacteristics) throws UnrecoverableKeyException",
    "returnType" : "KeyPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static KeyPair loadAndroidKeyStoreKeyPairFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "KeyPair",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "private static AndroidKeyStorePrivateKey loadAndroidKeyStorePrivateKeyFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid, @NonNull KeyCharacteristics keyCharacteristics) throws UnrecoverableKeyException",
    "returnType" : "AndroidKeyStorePrivateKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AndroidKeyStorePrivateKey loadAndroidKeyStorePrivateKeyFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "AndroidKeyStorePrivateKey",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "private static AndroidKeyStoreSecretKey loadAndroidKeyStoreSecretKeyFromKeystore(@NonNull String secretKeyAlias, int uid, @NonNull KeyCharacteristics keyCharacteristics) throws UnrecoverableKeyException",
    "returnType" : "AndroidKeyStoreSecretKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AndroidKeyStoreKey loadAndroidKeyStoreKeyFromKeystore(@NonNull KeyStore keyStore, @NonNull String userKeyAlias, int uid) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "AndroidKeyStoreKey",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public static java.security.KeyStore getKeyStoreForUid(int uid) throws KeyStoreException, NoSuchProviderException",
    "returnType" : "java.security.KeyStore",
    "comment" : "\n     * Returns an {@code AndroidKeyStore} {@link java.security.KeyStore}} of the specified UID.\n     * The {@code KeyStore} contains keys and certificates owned by that UID. Such cross-UID\n     * access is permitted to a few system UIDs and only to a few other UIDs (e.g., Wi-Fi, VPN)\n     * all of which are system.\n     *\n     * <p>Note: the returned {@code KeyStore} is already initialized/loaded. Thus, there is\n     * no need to invoke {@code load} on it.\n     *\n     * @param uid Uid for which the keystore provider is requested.\n     * @throws KeyStoreException if a KeyStoreSpi implementation for the specified type is not\n     * available from the specified provider.\n     * @throws NoSuchProviderException If the specified provider is not registered in the security\n     * provider list.\n     * @hide\n     ",
    "links" : [ "java.security.KeyStore" ]
  } ],
  "variableNames" : [ "PROVIDER_NAME", "PACKAGE_NAME", "DESEDE_SYSTEM_PROPERTY" ],
  "methodNames" : [ "public static void install()", "private void putSecretKeyFactoryImpl(String algorithm)", "private void putKeyFactoryImpl(String algorithm)", "public static long getKeyStoreOperationHandle(Object cryptoPrimitive)", "public static AndroidKeyStorePublicKey getAndroidKeyStorePublicKey(@NonNull String alias, int uid, @NonNull @KeyProperties.KeyAlgorithmEnum String keyAlgorithm, @NonNull byte[] x509EncodedForm)", "private static AndroidKeyStorePrivateKey getAndroidKeyStorePrivateKey(@NonNull AndroidKeyStorePublicKey publicKey)", "private static KeyCharacteristics getKeyCharacteristics(@NonNull KeyStore keyStore, @NonNull String alias, int uid) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "private static AndroidKeyStorePublicKey loadAndroidKeyStorePublicKeyFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid, KeyCharacteristics keyCharacteristics) throws UnrecoverableKeyException", "public static AndroidKeyStorePublicKey loadAndroidKeyStorePublicKeyFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "private static KeyPair loadAndroidKeyStoreKeyPairFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid, @NonNull KeyCharacteristics keyCharacteristics) throws UnrecoverableKeyException", "public static KeyPair loadAndroidKeyStoreKeyPairFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "private static AndroidKeyStorePrivateKey loadAndroidKeyStorePrivateKeyFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid, @NonNull KeyCharacteristics keyCharacteristics) throws UnrecoverableKeyException", "public static AndroidKeyStorePrivateKey loadAndroidKeyStorePrivateKeyFromKeystore(@NonNull KeyStore keyStore, @NonNull String privateKeyAlias, int uid) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "private static AndroidKeyStoreSecretKey loadAndroidKeyStoreSecretKeyFromKeystore(@NonNull String secretKeyAlias, int uid, @NonNull KeyCharacteristics keyCharacteristics) throws UnrecoverableKeyException", "public static AndroidKeyStoreKey loadAndroidKeyStoreKeyFromKeystore(@NonNull KeyStore keyStore, @NonNull String userKeyAlias, int uid) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "public static java.security.KeyStore getKeyStoreForUid(int uid) throws KeyStoreException, NoSuchProviderException" ]
}