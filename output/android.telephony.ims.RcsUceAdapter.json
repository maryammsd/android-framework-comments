{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/RcsUceAdapter.java",
  "packageName" : "android.telephony.ims",
  "className" : "RcsUceAdapter",
  "comment" : "\n * Manages RCS User Capability Exchange for the subscription specified.\n *\n * @see ImsRcsManager#getUceAdapter() for information on creating an instance of this class.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_TYPE_OPTIONS_UCE",
    "type" : "int",
    "comment" : "\n     * This carrier supports User Capability Exchange as, defined by the framework using\n     * SIP OPTIONS. If set, the RcsFeature should support capability exchange. If not set, this\n     * RcsFeature should not publish capabilities or service capability requests.\n     * @deprecated Use {@link ImsRcsManager#CAPABILITY_TYPE_OPTIONS_UCE} instead.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.ImsRcsManager#CAPABILITY_TYPE_OPTIONS_UCE" ]
  }, {
    "name" : "CAPABILITY_TYPE_PRESENCE_UCE",
    "type" : "int",
    "comment" : "\n     * This carrier supports User Capability Exchange as, defined by the framework using a\n     * presence server. If set, the RcsFeature should support capability exchange. If not set, this\n     * RcsFeature should not publish capabilities or service capability requests.\n     * @deprecated Use {@link ImsRcsManager#CAPABILITY_TYPE_PRESENCE_UCE} instead.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.ImsRcsManager#CAPABILITY_TYPE_PRESENCE_UCE" ]
  }, {
    "name" : "ERROR_GENERIC_FAILURE",
    "type" : "int",
    "comment" : "\n     * An unknown error has caused the request to fail.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NOT_ENABLED",
    "type" : "int",
    "comment" : "\n     * The carrier network does not have UCE support enabled for this subscriber.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NOT_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * The data network that the device is connected to does not support UCE currently (e.g. it is\n     * 1x only currently).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NOT_REGISTERED",
    "type" : "int",
    "comment" : "\n     * The network has responded with SIP 403 error and a reason \"User not registered.\"\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NOT_AUTHORIZED",
    "type" : "int",
    "comment" : "\n     * The network has responded to this request with a SIP 403 error and reason \"not authorized for\n     * presence\" for this subscriber.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_FORBIDDEN",
    "type" : "int",
    "comment" : "\n     * The network has responded to this request with a SIP 403 error and no reason.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NOT_FOUND",
    "type" : "int",
    "comment" : "\n     * The contact URI requested is not provisioned for voice or it is not known as an IMS\n     * subscriber to the carrier network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_REQUEST_TOO_LARGE",
    "type" : "int",
    "comment" : "\n     * The capabilities request contained too many URIs for the carrier network to handle. Retry\n     * with a lower number of contact numbers. The number varies per carrier.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_REQUEST_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * The network did not respond to the capabilities request before the request timed out.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INSUFFICIENT_MEMORY",
    "type" : "int",
    "comment" : "\n     * The request failed due to the service having insufficient memory.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_LOST_NETWORK",
    "type" : "int",
    "comment" : "\n     * The network was lost while trying to complete the request.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SERVER_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The network is temporarily unavailable or busy. Retries should only be done after the retry\n     * time returned in {@link CapabilitiesCallback#onError} has elapsed.\n     * @hide\n     ",
    "links" : [ "#onError" ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested but the reason is unknown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_ETAG_EXPIRED",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to the Entity Tag (ETag) expiring.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_LTE_VOPS_DISABLED",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to moving to LTE with VoPS disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_LTE_VOPS_ENABLED",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to moving to LTE with VoPS enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_EHRPD",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to moving to eHRPD.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_HSPAPLUS",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to moving to HSPA+.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_3G",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to moving to 3G.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_2G",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to moving to 2G.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_WLAN",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to moving to WLAN\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_IWLAN",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to moving to IWLAN\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_NR5G_VOPS_DISABLED",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to moving to 5G NR with VoPS disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_NR5G_VOPS_ENABLED",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to moving to 5G NR with VoPS enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_INTERNET_PDN",
    "type" : "int",
    "comment" : "\n     * A capability update has been requested due to IMS being registered over INTERNET PDN.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_OK",
    "type" : "int",
    "comment" : "\n     * The last publish has resulted in a \"200 OK\" response or the device is using SIP OPTIONS for\n     * UCE.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_NOT_PUBLISHED",
    "type" : "int",
    "comment" : "\n     * The hasn't published its capabilities since boot or hasn't gotten any publish response yet.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_VOICE_PROVISION_ERROR",
    "type" : "int",
    "comment" : "\n     * The device has tried to publish its capabilities, which has resulted in an error. This error\n     * is related to the fact that the device is not provisioned for voice.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_RCS_PROVISION_ERROR",
    "type" : "int",
    "comment" : "\n     * The device has tried to publish its capabilities, which has resulted in an error. This error\n     * is related to the fact that the device is not RCS or UCE provisioned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_REQUEST_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * The last publish resulted in a \"408 Request Timeout\" response.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_OTHER_ERROR",
    "type" : "int",
    "comment" : "\n     * The last publish resulted in another unknown error, such as SIP 503 - \"Service Unavailable\"\n     * or SIP 423 - \"Interval too short\".\n     * <p>\n     * Device shall retry with exponential back-off.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_PUBLISHING",
    "type" : "int",
    "comment" : "\n     * The device is currently trying to publish its capabilities to the network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPublishStateCallbacks",
    "type" : "Map<OnPublishStateChangedListener, PublishStateCallbackAdapter>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void requestCapabilities(@NonNull Collection<Uri> contactNumbers, @NonNull @CallbackExecutor Executor executor, @NonNull CapabilitiesCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Request the RCS capabilities for one or more contacts using RCS User Capability Exchange.\n     * <p>\n     * This API will first check a local cache for the requested numbers and return the cached\n     * RCS capabilities of each number if the cache exists and is not stale. If the cache for a\n     * number is stale or there is no cached information about the requested number, the device will\n     * then perform a query to the carrier's network to request the RCS capabilities of the\n     * requested numbers.\n     * <p>\n     * Depending on the number of requests being sent, this API may throttled internally as the\n     * operations are queued to be executed by the carrier's network.\n     * <p>\n     * Be sure to check the availability of this feature using\n     * {@link ImsRcsManager#isAvailable(int, int)} and ensuring\n     * {@link\n     * android.telephony.ims.feature.RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_OPTIONS_UCE} or\n     * {@link\n     * android.telephony.ims.feature.RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_PRESENCE_UCE} is\n     * enabled or else this operation will fail with {@link #ERROR_NOT_AVAILABLE} or\n     * {@link #ERROR_NOT_ENABLED}.\n     *\n     * @param contactNumbers A list of numbers that the capabilities are being requested for.\n     * @param executor The executor that will be used when the request is completed and the\n     *         {@link CapabilitiesCallback} is called.\n     * @param c A one-time callback for when the request for capabilities completes or there is an\n     *         error processing the request.\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link RcsUceAdapter} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.ims.feature.RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_OPTIONS_UCE", "android.telephony.ims.RcsUceAdapter", "#ERROR_NOT_ENABLED", "CapabilitiesCallback", "android.telephony.ims.ImsRcsManager#isAvailable(int", "android.telephony.ims.feature.RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_PRESENCE_UCE", "android.telephony.ims.ImsException#getCode()", "#ERROR_NOT_AVAILABLE" ]
  }, {
    "name" : "public void requestAvailability(@NonNull Uri contactNumber, @NonNull @CallbackExecutor Executor executor, @NonNull CapabilitiesCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Request the RCS capabilities for a phone number using User Capability Exchange.\n     * <p>\n     * Unlike {@link #requestCapabilities(Collection, Executor, CapabilitiesCallback)}, which caches\n     * the result received from the network for a certain amount of time and uses that cached result\n     * for subsequent requests for RCS capabilities of the same phone number, this API will always\n     * request the RCS capabilities of a contact from the carrier's network.\n     * <p>\n     * Depending on the number of requests, this API may throttled internally as the operations are\n     * queued to be executed by the carrier's network.\n     * <p>\n     * Be sure to check the availability of this feature using\n     * {@link ImsRcsManager#isAvailable(int, int)} and ensuring\n     * {@link\n     * android.telephony.ims.feature.RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_OPTIONS_UCE} or\n     * {@link\n     * android.telephony.ims.feature.RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_PRESENCE_UCE} is\n     * enabled or else this operation will fail with\n     * {@link #ERROR_NOT_AVAILABLE} or {@link #ERROR_NOT_ENABLED}.\n     *\n     * @param contactNumber The contact of the capabilities is being requested for.\n     * @param executor The executor that will be used when the request is completed and the\n     * {@link CapabilitiesCallback} is called.\n     * @param c A one-time callback for when the request for capabilities completes or there is\n     * an error processing the request.\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link RcsUceAdapter} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.ims.feature.RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_OPTIONS_UCE", "android.telephony.ims.RcsUceAdapter", "#ERROR_NOT_ENABLED", "CapabilitiesCallback", "android.telephony.ims.ImsRcsManager#isAvailable(int", "android.telephony.ims.feature.RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_PRESENCE_UCE", "#requestCapabilities(Collection", "android.telephony.ims.ImsException#getCode()", "#ERROR_NOT_AVAILABLE" ]
  }, {
    "name" : "public int getUcePublishState() throws ImsException",
    "returnType" : "int",
    "comment" : "\n     * Gets the last publish result from the UCE service if the device is using an RCS presence\n     * server.\n     * @return The last publish result from the UCE service. If the device is using SIP OPTIONS,\n     * this method will return {@link #PUBLISH_STATE_OK} as well.\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link RcsUceAdapter} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.ims.RcsUceAdapter", "#PUBLISH_STATE_OK", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public void addOnPublishStateChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnPublishStateChangedListener listener) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link OnPublishStateChangedListener} with the system, which will provide publish\n     * state updates for the subscription specified in {@link ImsManager@getRcsManager(subid)}.\n     * <p>\n     * Use {@link android.telephony.SubscriptionManager.OnSubscriptionsChangedListener} to listen\n     * to subscription\n     * changed events and call\n     * {@link #removeOnPublishStateChangedListener(OnPublishStateChangedListener)} to clean up.\n     * <p>\n     * The registered {@link OnPublishStateChangedListener} will also receive a callback when it is\n     * registered with the current publish state.\n     *\n     * @param executor The executor the listener callback events should be run on.\n     * @param listener The {@link OnPublishStateChangedListener} to be added.\n     * @throws ImsException if the subscription associated with this callback is valid, but\n     * the {@link ImsService} associated with the subscription is not available. This can happen if\n     * the service crashed, for example. See {@link ImsException#getCode()} for a more detailed\n     * reason.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "#removeOnPublishStateChangedListener(OnPublishStateChangedListener)", "OnPublishStateChangedListener", "android.telephony.ims.ImsManager", "android.telephony.SubscriptionManager.OnSubscriptionsChangedListener", "android.telephony.ims.ImsException#getCode()", "android.telephony.ims.ImsService" ]
  }, {
    "name" : "public void removeOnPublishStateChangedListener(@NonNull OnPublishStateChangedListener listener) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Removes an existing {@link OnPublishStateChangedListener}.\n     * <p>\n     * When the subscription associated with this callback is removed\n     * (SIM removed, ESIM swap,etc...), this callback will automatically be removed. If this method\n     * is called for an inactive subscription, it will result in a no-op.\n     *\n     * @param listener The callback to be unregistered.\n     * @throws ImsException if the subscription associated with this callback is valid, but\n     * the {@link ImsService} associated with the subscription is not available. This can happen if\n     * the service crashed, for example. See {@link ImsException#getCode()} for a more detailed\n     * reason.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "OnPublishStateChangedListener", "android.telephony.ims.ImsException#getCode()", "android.telephony.ims.ImsService" ]
  }, {
    "name" : "public boolean isUceSettingEnabled() throws ImsException",
    "returnType" : "boolean",
    "comment" : "\n     * The setting for whether or not the user has opted in to the automatic refresh of the RCS\n     * capabilities associated with the contacts in the user's contact address book. By default,\n     * this setting is disabled and must be enabled after the user has seen the opt-in dialog shown\n     * by {@link ImsRcsManager#ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN}.\n     * <p>\n     * If this feature is enabled, the device will periodically share the phone numbers of all of\n     * the contacts in the user's address book with the carrier to refresh the RCS capabilities\n     * cache associated with those contacts as the local cache becomes stale.\n     * <p>\n     * This setting will only enable this feature if\n     * {@link android.telephony.CarrierConfigManager.Ims#KEY_RCS_BULK_CAPABILITY_EXCHANGE_BOOL} is\n     * also enabled.\n     * <p>\n     * Note: This setting does not affect whether or not the device publishes its service\n     * capabilities if the subscription supports presence publication.\n     *\n     * @return true if the user has opted in for automatic refresh of the RCS capabilities of their\n     * contacts, false otherwise.\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link RcsUceAdapter} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.ims.RcsUceAdapter", "android.telephony.CarrierConfigManager.Ims#KEY_RCS_BULK_CAPABILITY_EXCHANGE_BOOL", "android.telephony.ims.ImsException#getCode()", "android.telephony.ims.ImsRcsManager#ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN" ]
  }, {
    "name" : "public void setUceSettingEnabled(boolean isEnabled) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Change the user’s setting for whether or not the user has opted in to the automatic\n     * refresh of the RCS capabilities associated with the contacts in the user's contact address\n     * book. By default, this setting is disabled and must be enabled using this method after the\n     * user has seen the opt-in dialog shown by\n     * {@link ImsRcsManager#ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN}.\n     * <p>\n     * If an application wishes to request that the user enable this feature, they must launch an\n     * Activity using the Intent {@link ImsRcsManager#ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN},\n     * which will ask the user if they wish to enable this feature. This setting must only be\n     * enabled after the user has opted-in to this feature.\n     * <p>\n     * This must not affect the\n     * {@link #requestCapabilities(Collection, Executor, CapabilitiesCallback)} or\n     * {@link #requestAvailability(Uri, Executor, CapabilitiesCallback)} API,\n     * as those APIs are still required for per-contact RCS capability queries of phone numbers\n     * required for operations such as placing a Video Telephony call or starting an RCS chat\n     * session.\n     * <p>\n     * This setting will only enable this feature if\n     * {@link android.telephony.CarrierConfigManager.Ims#KEY_RCS_BULK_CAPABILITY_EXCHANGE_BOOL} is\n     * also enabled.\n     * <p>\n     * Note: This setting does not affect whether or not the device publishes its service\n     * capabilities if the subscription supports presence publication.\n     *\n     * @param isEnabled true if the user has opted in for automatic refresh of the RCS capabilities\n     *                  of their contacts, or false if they have chosen to opt-out. By default this\n     *                  setting is disabled.\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link RcsUceAdapter} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.ims.RcsUceAdapter", "#requestAvailability(Uri", "#requestCapabilities(Collection", "android.telephony.CarrierConfigManager.Ims#KEY_RCS_BULK_CAPABILITY_EXCHANGE_BOOL", "android.telephony.ims.ImsException#getCode()", "android.telephony.ims.ImsRcsManager#ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN" ]
  }, {
    "name" : "private PublishStateCallbackAdapter addPublishStateCallback(@NonNull Executor executor, @NonNull OnPublishStateChangedListener listener)",
    "returnType" : "PublishStateCallbackAdapter",
    "comment" : "\n     * Add the {@link OnPublishStateChangedListener} to collection for tracking.\n     * @param executor The executor that will be used when the publish state is changed and the\n     * {@link OnPublishStateChangedListener} is called.\n     * @param listener The {@link OnPublishStateChangedListener} to call the publish state changed.\n     * @return The {@link PublishStateCallbackAdapter} to wrapper the\n     * {@link OnPublishStateChangedListener}\n     ",
    "links" : [ "PublishStateCallbackAdapter", "OnPublishStateChangedListener" ]
  }, {
    "name" : "private PublishStateCallbackAdapter removePublishStateCallback(@NonNull OnPublishStateChangedListener listener)",
    "returnType" : "PublishStateCallbackAdapter",
    "comment" : "\n     * Remove the existing {@link OnPublishStateChangedListener}.\n     * @param listener The {@link OnPublishStateChangedListener} to remove from the collection.\n     * @return The wrapper class {@link PublishStateCallbackAdapter} associated with the\n     * {@link OnPublishStateChangedListener}.\n     ",
    "links" : [ "PublishStateCallbackAdapter", "OnPublishStateChangedListener" ]
  }, {
    "name" : "private IImsRcsController getIImsRcsController()",
    "returnType" : "IImsRcsController",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void requestCapabilities(@NonNull Collection<Uri> contactNumbers, @NonNull @CallbackExecutor Executor executor, @NonNull CapabilitiesCallback c) throws ImsException", "public void requestAvailability(@NonNull Uri contactNumber, @NonNull @CallbackExecutor Executor executor, @NonNull CapabilitiesCallback c) throws ImsException", "public int getUcePublishState() throws ImsException", "public void addOnPublishStateChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnPublishStateChangedListener listener) throws ImsException", "public void removeOnPublishStateChangedListener(@NonNull OnPublishStateChangedListener listener) throws ImsException", "public boolean isUceSettingEnabled() throws ImsException", "public void setUceSettingEnabled(boolean isEnabled) throws ImsException", "private PublishStateCallbackAdapter addPublishStateCallback(@NonNull Executor executor, @NonNull OnPublishStateChangedListener listener)", "private PublishStateCallbackAdapter removePublishStateCallback(@NonNull OnPublishStateChangedListener listener)", "private IImsRcsController getIImsRcsController()" ],
  "variableNames" : [ "TAG", "CAPABILITY_TYPE_OPTIONS_UCE", "CAPABILITY_TYPE_PRESENCE_UCE", "ERROR_GENERIC_FAILURE", "ERROR_NOT_ENABLED", "ERROR_NOT_AVAILABLE", "ERROR_NOT_REGISTERED", "ERROR_NOT_AUTHORIZED", "ERROR_FORBIDDEN", "ERROR_NOT_FOUND", "ERROR_REQUEST_TOO_LARGE", "ERROR_REQUEST_TIMEOUT", "ERROR_INSUFFICIENT_MEMORY", "ERROR_LOST_NETWORK", "ERROR_SERVER_UNAVAILABLE", "CAPABILITY_UPDATE_TRIGGER_UNKNOWN", "CAPABILITY_UPDATE_TRIGGER_ETAG_EXPIRED", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_LTE_VOPS_DISABLED", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_LTE_VOPS_ENABLED", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_EHRPD", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_HSPAPLUS", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_3G", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_2G", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_WLAN", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_IWLAN", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_NR5G_VOPS_DISABLED", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_NR5G_VOPS_ENABLED", "CAPABILITY_UPDATE_TRIGGER_MOVE_TO_INTERNET_PDN", "PUBLISH_STATE_OK", "PUBLISH_STATE_NOT_PUBLISHED", "PUBLISH_STATE_VOICE_PROVISION_ERROR", "PUBLISH_STATE_RCS_PROVISION_ERROR", "PUBLISH_STATE_REQUEST_TIMEOUT", "PUBLISH_STATE_OTHER_ERROR", "PUBLISH_STATE_PUBLISHING", "mContext", "mSubId", "mPublishStateCallbacks" ]
}