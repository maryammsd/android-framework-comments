{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/ims/RcsUceAdapter.java",
  "packageName" : "android.telephony.ims",
  "className" : "RcsUceAdapter",
  "comment" : "\n * Manages RCS User Capability Exchange for the subscription specified.\n *\n * @see ImsRcsManager#getUceAdapter() for information on creating an instance of this class.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_GENERIC_FAILURE",
    "type" : "int",
    "comment" : "\n     * An unknown error has caused the request to fail.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NOT_ENABLED",
    "type" : "int",
    "comment" : "\n     * The carrier network does not have UCE support enabled for this subscriber.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NOT_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * The data network that the device is connected to does not support UCE currently (e.g. it is\n     * 1x only currently).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NOT_REGISTERED",
    "type" : "int",
    "comment" : "\n     * The network has responded with SIP 403 error and a reason \"User not registered.\"\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NOT_AUTHORIZED",
    "type" : "int",
    "comment" : "\n     * The network has responded to this request with a SIP 403 error and reason \"not authorized for\n     * presence\" for this subscriber.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_FORBIDDEN",
    "type" : "int",
    "comment" : "\n     * The network has responded to this request with a SIP 403 error and no reason.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NOT_FOUND",
    "type" : "int",
    "comment" : "\n     * The contact URI requested is not provisioned for VoLTE or it is not known as an IMS\n     * subscriber to the carrier network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_REQUEST_TOO_LARGE",
    "type" : "int",
    "comment" : " TODO: Try to integrate this into the API so that the service will split based on carrier.",
    "links" : [ ]
  }, {
    "name" : "ERROR_REQUEST_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * The network did not respond to the capabilities request before the request timed out.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INSUFFICIENT_MEMORY",
    "type" : "int",
    "comment" : "\n     * The request failed due to the service having insufficient memory.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_LOST_NETWORK",
    "type" : "int",
    "comment" : "\n     * The network was lost while trying to complete the request.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_ALREADY_IN_QUEUE",
    "type" : "int",
    "comment" : "\n     * The request has failed because the same request has already been added to the queue.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_OK",
    "type" : "int",
    "comment" : "\n     * The last publish has resulted in a \"200 OK\" response or the device is using SIP OPTIONS for\n     * UCE.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_NOT_PUBLISHED",
    "type" : "int",
    "comment" : "\n     * The hasn't published its capabilities since boot or hasn't gotten any publish response yet.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_VOLTE_PROVISION_ERROR",
    "type" : "int",
    "comment" : "\n     * The device has tried to publish its capabilities, which has resulted in an error. This error\n     * is related to the fact that the device is not VoLTE provisioned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_RCS_PROVISION_ERROR",
    "type" : "int",
    "comment" : "\n     * The device has tried to publish its capabilities, which has resulted in an error. This error\n     * is related to the fact that the device is not RCS or UCE provisioned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_REQUEST_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * The last publish resulted in a \"408 Request Timeout\" response.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLISH_STATE_OTHER_ERROR",
    "type" : "int",
    "comment" : "\n     * The last publish resulted in another unknown error, such as SIP 503 - \"Service Unavailable\"\n     * or SIP 423 - \"Interval too short\".\n     * <p>\n     * Device shall retry with exponential back-off.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void requestCapabilities(@NonNull @CallbackExecutor Executor executor, @NonNull List<Uri> contactNumbers, @NonNull CapabilitiesCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Request the User Capability Exchange capabilities for one or more contacts.\n     * <p>\n     * Be sure to check the availability of this feature using\n     * {@link ImsRcsManager#isAvailable(int)} and ensuring\n     * {@link RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_OPTIONS_UCE} or\n     * {@link RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_PRESENCE_UCE} is enabled or else\n     * this operation will fail with {@link #ERROR_NOT_AVAILABLE} or {@link #ERROR_NOT_ENABLED}.\n     *\n     * @param executor The executor that will be used when the request is completed and the\n     *         {@link CapabilitiesCallback} is called.\n     * @param contactNumbers A list of numbers that the capabilities are being requested for.\n     * @param c A one-time callback for when the request for capabilities completes or there is an\n     *         error processing the request.\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link RcsUceAdapter} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     * @hide\n     ",
    "links" : [ "RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_PRESENCE_UCE", "android.telephony.ims.RcsUceAdapter", "#ERROR_NOT_ENABLED", "RcsFeature.RcsImsCapabilities#CAPABILITY_TYPE_OPTIONS_UCE", "CapabilitiesCallback", "android.telephony.ims.ImsRcsManager#isAvailable(int)", "android.telephony.ims.ImsException#getCode()", "#ERROR_NOT_AVAILABLE" ]
  }, {
    "name" : "public int getUcePublishState() throws ImsException",
    "returnType" : "int",
    "comment" : "\n     * Gets the last publish result from the UCE service if the device is using an RCS presence\n     * server.\n     * @return The last publish result from the UCE service. If the device is using SIP OPTIONS,\n     * this method will return {@link #PUBLISH_STATE_OK} as well.\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link RcsUceAdapter} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.RcsUceAdapter", "#PUBLISH_STATE_OK", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public boolean isUceSettingEnabled() throws ImsException",
    "returnType" : "boolean",
    "comment" : "\n     * The user’s setting for whether or not User Capability Exchange (UCE) is enabled for the\n     * associated subscription.\n     * <p>\n     * Note: This setting does not affect whether or not the device publishes its service\n     * capabilities if the subscription supports presence publication.\n     *\n     * @return true if the user’s setting for UCE is enabled, false otherwise.\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link RcsUceAdapter} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     ",
    "links" : [ "android.telephony.ims.RcsUceAdapter", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public void setUceSettingEnabled(boolean isEnabled) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Change the user’s setting for whether or not UCE is enabled for the associated subscription.\n     * <p>\n     * If an application Requires UCE, they will launch an Activity using the Intent\n     * {@link ImsRcsManager#ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN}, which will ask the user if\n     * they wish to enable this feature. This setting should only be enabled after the user has\n     * opted-in to capability exchange.\n     * <p>\n     * Note: This setting does not affect whether or not the device publishes its service\n     * capabilities if the subscription supports presence publication.\n     *\n     * @param isEnabled the user's setting for whether or not they wish for User\n     *         Capability Exchange to be enabled.\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link RcsUceAdapter} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.RcsUceAdapter", "android.telephony.ims.ImsException#getCode()", "android.telephony.ims.ImsRcsManager#ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN" ]
  }, {
    "name" : "private IImsRcsController getIImsRcsController()",
    "returnType" : "IImsRcsController",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "ERROR_GENERIC_FAILURE", "ERROR_NOT_ENABLED", "ERROR_NOT_AVAILABLE", "ERROR_NOT_REGISTERED", "ERROR_NOT_AUTHORIZED", "ERROR_FORBIDDEN", "ERROR_NOT_FOUND", "ERROR_REQUEST_TOO_LARGE", "ERROR_REQUEST_TIMEOUT", "ERROR_INSUFFICIENT_MEMORY", "ERROR_LOST_NETWORK", "ERROR_ALREADY_IN_QUEUE", "PUBLISH_STATE_OK", "PUBLISH_STATE_NOT_PUBLISHED", "PUBLISH_STATE_VOLTE_PROVISION_ERROR", "PUBLISH_STATE_RCS_PROVISION_ERROR", "PUBLISH_STATE_REQUEST_TIMEOUT", "PUBLISH_STATE_OTHER_ERROR", "mContext", "mSubId" ],
  "methodNames" : [ "public void requestCapabilities(@NonNull @CallbackExecutor Executor executor, @NonNull List<Uri> contactNumbers, @NonNull CapabilitiesCallback c) throws ImsException", "public int getUcePublishState() throws ImsException", "public boolean isUceSettingEnabled() throws ImsException", "public void setUceSettingEnabled(boolean isEnabled) throws ImsException", "private IImsRcsController getIImsRcsController()" ]
}