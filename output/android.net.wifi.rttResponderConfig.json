{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/rtt/ResponderConfig.java",
  "packageName" : "android.net.wifi.rtt",
  "className" : "ResponderConfig",
  "comment" : "\n * Defines the configuration of an IEEE 802.11mc Responder. The Responder may be an Access Point\n * (AP), a Wi-Fi Aware device, or a manually configured Responder.\n * <p>\n * A Responder configuration may be constructed from a {@link ScanResult} or manually (with the\n * data obtained out-of-band from a peer).\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AWARE_BAND_2_DISCOVERY_CHANNEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESPONDER_AP",
    "type" : "int",
    "comment" : "\n     * Responder is an AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESPONDER_STA",
    "type" : "int",
    "comment" : "\n     * Responder is a STA.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESPONDER_P2P_GO",
    "type" : "int",
    "comment" : "\n     * Responder is a Wi-Fi Direct Group Owner (GO).\n     ",
    "links" : [ ]
  }, {
    "name" : "RESPONDER_P2P_CLIENT",
    "type" : "int",
    "comment" : "\n     * Responder is a Wi-Fi Direct Group Client.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESPONDER_AWARE",
    "type" : "int",
    "comment" : "\n     * Responder is a Wi-Fi Aware device.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_20MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 20 MHZ\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_40MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 40 MHZ\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_80MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 80 MHZ\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_160MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 160 MHZ\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_80MHZ_PLUS_MHZ",
    "type" : "int",
    "comment" : "\n     * Channel bandwidth is 160 MHZ, but 80MHZ + 80MHZ\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_LEGACY",
    "type" : "int",
    "comment" : "\n     * Preamble type: Legacy.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_HT",
    "type" : "int",
    "comment" : "\n     * Preamble type: HT.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_VHT",
    "type" : "int",
    "comment" : "\n     * Preamble type: VHT.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_HE",
    "type" : "int",
    "comment" : "\n     * Preamble type: HE.\n     ",
    "links" : [ ]
  }, {
    "name" : "macAddress",
    "type" : "MacAddress",
    "comment" : "\n     * The MAC address of the Responder. Will be null if a Wi-Fi Aware peer identifier (the\n     * peerHandle field) ise used to identify the Responder.\n     ",
    "links" : [ ]
  }, {
    "name" : "peerHandle",
    "type" : "PeerHandle",
    "comment" : "\n     * The peer identifier of a Wi-Fi Aware Responder. Will be null if a MAC Address (the macAddress\n     * field) is used to identify the Responder.\n     ",
    "links" : [ ]
  }, {
    "name" : "responderType",
    "type" : "int",
    "comment" : "\n     * The device type of the Responder.\n     ",
    "links" : [ ]
  }, {
    "name" : "supports80211mc",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether the Responder device supports IEEE 802.11mc.\n     ",
    "links" : [ ]
  }, {
    "name" : "channelWidth",
    "type" : "int",
    "comment" : "\n     * Responder channel bandwidth, specified using {@link ChannelWidth}.\n     ",
    "links" : [ "ChannelWidth" ]
  }, {
    "name" : "frequency",
    "type" : "int",
    "comment" : "\n     * The primary 20 MHz frequency (in MHz) of the channel of the Responder.\n     ",
    "links" : [ ]
  }, {
    "name" : "centerFreq0",
    "type" : "int",
    "comment" : "\n     * Not used if the {@link #channelWidth} is 20 MHz. If the Responder uses 40, 80 or 160 MHz,\n     * this is the center frequency (in MHz), if the Responder uses 80 + 80 MHz, this is the\n     * center frequency of the first segment (in MHz).\n     ",
    "links" : [ "#channelWidth" ]
  }, {
    "name" : "centerFreq1",
    "type" : "int",
    "comment" : "\n     * Only used if the {@link #channelWidth} is 80 + 80 MHz. If the Responder uses 80 + 80 MHz,\n     * this is the center frequency of the second segment (in MHz).\n     ",
    "links" : [ "#channelWidth" ]
  }, {
    "name" : "preamble",
    "type" : "int",
    "comment" : "\n     * The preamble used by the Responder, specified using {@link PreambleType}.\n     ",
    "links" : [ "PreambleType" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ResponderConfig>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ResponderConfig fromScanResult(ScanResult scanResult)",
    "returnType" : "ResponderConfig",
    "comment" : "\n     * Creates a Responder configuration from a {@link ScanResult} corresponding to an Access\n     * Point (AP), which can be obtained from {@link android.net.wifi.WifiManager#getScanResults()}.\n     ",
    "links" : [ "ScanResult", "android.net.wifi.WifiManager#getScanResults" ]
  }, {
    "name" : "public static ResponderConfig fromWifiAwarePeerMacAddressWithDefaults(MacAddress macAddress)",
    "returnType" : "ResponderConfig",
    "comment" : "\n     * Creates a Responder configuration from a MAC address corresponding to a Wi-Fi Aware\n     * Responder. The Responder parameters are set to defaults.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ResponderConfig fromWifiAwarePeerHandleWithDefaults(PeerHandle peerHandle)",
    "returnType" : "ResponderConfig",
    "comment" : "\n     * Creates a Responder configuration from a {@link PeerHandle} corresponding to a Wi-Fi Aware\n     * Responder. The Responder parameters are set to defaults.\n     ",
    "links" : [ "PeerHandle" ]
  }, {
    "name" : "public boolean isValid(boolean awareSupported)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the Responder configuration is valid.\n     *\n     * @return true if valid, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " static int translateScanResultChannelWidth(int scanResultChannelWidth)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "AWARE_BAND_2_DISCOVERY_CHANNEL", "RESPONDER_AP", "RESPONDER_STA", "RESPONDER_P2P_GO", "RESPONDER_P2P_CLIENT", "RESPONDER_AWARE", "CHANNEL_WIDTH_20MHZ", "CHANNEL_WIDTH_40MHZ", "CHANNEL_WIDTH_80MHZ", "CHANNEL_WIDTH_160MHZ", "CHANNEL_WIDTH_80MHZ_PLUS_MHZ", "PREAMBLE_LEGACY", "PREAMBLE_HT", "PREAMBLE_VHT", "PREAMBLE_HE", "macAddress", "peerHandle", "responderType", "supports80211mc", "channelWidth", "frequency", "centerFreq0", "centerFreq1", "preamble", "CREATOR" ],
  "methodNames" : [ "public static ResponderConfig fromScanResult(ScanResult scanResult)", "public static ResponderConfig fromWifiAwarePeerMacAddressWithDefaults(MacAddress macAddress)", "public static ResponderConfig fromWifiAwarePeerHandleWithDefaults(PeerHandle peerHandle)", "public boolean isValid(boolean awareSupported)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public String toString()", " static int translateScanResultChannelWidth(int scanResultChannelWidth)" ]
}