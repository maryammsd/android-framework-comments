{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/Nodes.java",
  "packageName" : "java.util.stream",
  "className" : "Nodes",
  "comment" : "\n * Factory methods for constructing implementations of {@link Node} and\n * {@link Node.Builder} and their primitive specializations.  Fork/Join tasks\n * for collecting output from a {@link PipelineHelper} to a {@link Node} and\n * flattening {@link Node}s.\n *\n * @since 1.8\n ",
  "links" : [ "Node.Builder", "java.util.stream.PipelineHelper", "java.util.stream.Node" ],
  "variables" : [ {
    "name" : "MAX_ARRAY_SIZE",
    "type" : "long",
    "comment" : "\n     * The maximum size of an array that can be allocated.\n     ",
    "links" : [ ]
  }, {
    "name" : "BAD_SIZE",
    "type" : "String",
    "comment" : " IllegalArgumentException messages",
    "links" : [ ]
  }, {
    "name" : "EMPTY_NODE",
    "type" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_INT_NODE",
    "type" : "Node.OfInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_LONG_NODE",
    "type" : "Node.OfLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_DOUBLE_NODE",
    "type" : "Node.OfDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_INT_ARRAY",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_LONG_ARRAY",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_DOUBLE_ARRAY",
    "type" : "double[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static IntFunction<T[]> castingArray()",
    "returnType" : "IntFunction<T[]>",
    "comment" : "\n     * @return an array generator for an array whose elements are of type T.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Node<T> emptyNode(StreamShape shape)",
    "returnType" : "Node<T>",
    "comment" : "\n     * Produces an empty node whose count is zero, has no children and no content.\n     *\n     * @param <T> the type of elements of the created node\n     * @param shape the shape of the node to be created\n     * @return an empty node.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Node<T> conc(StreamShape shape, Node<T> left, Node<T> right)",
    "returnType" : "Node<T>",
    "comment" : "\n     * Produces a concatenated {@link Node} that has two or more children.\n     * <p>The count of the concatenated node is equal to the sum of the count\n     * of each child. Traversal of the concatenated node traverses the content\n     * of each child in encounter order of the list of children. Splitting a\n     * spliterator obtained from the concatenated node preserves the encounter\n     * order of the list of children.\n     *\n     * <p>The result may be a concatenated node, the input sole node if the size\n     * of the list is 1, or an empty node.\n     *\n     * @param <T> the type of elements of the concatenated node\n     * @param shape the shape of the concatenated node to be created\n     * @param left the left input node\n     * @param right the right input node\n     * @return a {@code Node} covering the elements of the input nodes\n     * @throws IllegalStateException if all {@link Node} elements of the list\n     * are an not instance of type supported by this factory.\n     ",
    "links" : [ "java.util.stream.Node" ]
  }, {
    "name" : " static Node<T> node(T[] array)",
    "returnType" : "Node<T>",
    "comment" : "\n     * Produces a {@link Node} describing an array.\n     *\n     * <p>The node will hold a reference to the array and will not make a copy.\n     *\n     * @param <T> the type of elements held by the node\n     * @param array the array\n     * @return a node holding an array\n     ",
    "links" : [ "java.util.stream.Node" ]
  }, {
    "name" : " static Node<T> node(Collection<T> c)",
    "returnType" : "Node<T>",
    "comment" : "\n     * Produces a {@link Node} describing a {@link Collection}.\n     * <p>\n     * The node will hold a reference to the collection and will not make a copy.\n     *\n     * @param <T> the type of elements held by the node\n     * @param c the collection\n     * @return a node holding a collection\n     ",
    "links" : [ "java.util.Collection", "java.util.stream.Node" ]
  }, {
    "name" : " static Node.Builder<T> builder(long exactSizeIfKnown, IntFunction<T[]> generator)",
    "returnType" : "Node.Builder<T>",
    "comment" : "\n     * Produces a {@link Node.Builder}.\n     *\n     * @param exactSizeIfKnown -1 if a variable size builder is requested,\n     * otherwise the exact capacity desired.  A fixed capacity builder will\n     * fail if the wrong number of elements are added to the builder.\n     * @param generator the array factory\n     * @param <T> the type of elements of the node builder\n     * @return a {@code Node.Builder}\n     ",
    "links" : [ "Node.Builder" ]
  }, {
    "name" : " static Node.Builder<T> builder()",
    "returnType" : "Node.Builder<T>",
    "comment" : "\n     * Produces a variable size @{link Node.Builder}.\n     *\n     * @param <T> the type of elements of the node builder\n     * @return a {@code Node.Builder}\n     ",
    "links" : [ ]
  }, {
    "name" : " static Node.OfInt node(int[] array)",
    "returnType" : "Node.OfInt",
    "comment" : "\n     * Produces a {@link Node.OfInt} describing an int[] array.\n     *\n     * <p>The node will hold a reference to the array and will not make a copy.\n     *\n     * @param array the array\n     * @return a node holding an array\n     ",
    "links" : [ "Node.OfInt" ]
  }, {
    "name" : " static Node.Builder.OfInt intBuilder(long exactSizeIfKnown)",
    "returnType" : "Node.Builder.OfInt",
    "comment" : "\n     * Produces a {@link Node.Builder.OfInt}.\n     *\n     * @param exactSizeIfKnown -1 if a variable size builder is requested,\n     * otherwise the exact capacity desired.  A fixed capacity builder will\n     * fail if the wrong number of elements are added to the builder.\n     * @return a {@code Node.Builder.OfInt}\n     ",
    "links" : [ "Node.Builder.OfInt" ]
  }, {
    "name" : " static Node.Builder.OfInt intBuilder()",
    "returnType" : "Node.Builder.OfInt",
    "comment" : "\n     * Produces a variable size @{link Node.Builder.OfInt}.\n     *\n     * @return a {@code Node.Builder.OfInt}\n     ",
    "links" : [ ]
  }, {
    "name" : " static Node.OfLong node(final long[] array)",
    "returnType" : "Node.OfLong",
    "comment" : "\n     * Produces a {@link Node.OfLong} describing a long[] array.\n     * <p>\n     * The node will hold a reference to the array and will not make a copy.\n     *\n     * @param array the array\n     * @return a node holding an array\n     ",
    "links" : [ "Node.OfLong" ]
  }, {
    "name" : " static Node.Builder.OfLong longBuilder(long exactSizeIfKnown)",
    "returnType" : "Node.Builder.OfLong",
    "comment" : "\n     * Produces a {@link Node.Builder.OfLong}.\n     *\n     * @param exactSizeIfKnown -1 if a variable size builder is requested,\n     * otherwise the exact capacity desired.  A fixed capacity builder will\n     * fail if the wrong number of elements are added to the builder.\n     * @return a {@code Node.Builder.OfLong}\n     ",
    "links" : [ "Node.Builder.OfLong" ]
  }, {
    "name" : " static Node.Builder.OfLong longBuilder()",
    "returnType" : "Node.Builder.OfLong",
    "comment" : "\n     * Produces a variable size @{link Node.Builder.OfLong}.\n     *\n     * @return a {@code Node.Builder.OfLong}\n     ",
    "links" : [ ]
  }, {
    "name" : " static Node.OfDouble node(final double[] array)",
    "returnType" : "Node.OfDouble",
    "comment" : "\n     * Produces a {@link Node.OfDouble} describing a double[] array.\n     *\n     * <p>The node will hold a reference to the array and will not make a copy.\n     *\n     * @param array the array\n     * @return a node holding an array\n     ",
    "links" : [ "Node.OfDouble" ]
  }, {
    "name" : " static Node.Builder.OfDouble doubleBuilder(long exactSizeIfKnown)",
    "returnType" : "Node.Builder.OfDouble",
    "comment" : "\n     * Produces a {@link Node.Builder.OfDouble}.\n     *\n     * @param exactSizeIfKnown -1 if a variable size builder is requested,\n     * otherwise the exact capacity desired.  A fixed capacity builder will\n     * fail if the wrong number of elements are added to the builder.\n     * @return a {@code Node.Builder.OfDouble}\n     ",
    "links" : [ "Node.Builder.OfDouble" ]
  }, {
    "name" : " static Node.Builder.OfDouble doubleBuilder()",
    "returnType" : "Node.Builder.OfDouble",
    "comment" : "\n     * Produces a variable size @{link Node.Builder.OfDouble}.\n     *\n     * @return a {@code Node.Builder.OfDouble}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Node<P_OUT> collect(PipelineHelper<P_OUT> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<P_OUT[]> generator)",
    "returnType" : "Node<P_OUT>",
    "comment" : "\n     * Collect, in parallel, elements output from a pipeline and describe those\n     * elements with a {@link Node}.\n     *\n     * @implSpec\n     * If the exact size of the output from the pipeline is known and the source\n     * {@link Spliterator} has the {@link Spliterator#SUBSIZED} characteristic,\n     * then a flat {@link Node} will be returned whose content is an array,\n     * since the size is known the array can be constructed in advance and\n     * output elements can be placed into the array concurrently by leaf\n     * tasks at the correct offsets.  If the exact size is not known, output\n     * elements are collected into a conc-node whose shape mirrors that\n     * of the computation. This conc-node can then be flattened in\n     * parallel to produce a flat {@code Node} if desired.\n     *\n     * @param helper the pipeline helper describing the pipeline\n     * @param flattenTree whether a conc node should be flattened into a node\n     *                    describing an array before returning\n     * @param generator the array generator\n     * @return a {@link Node} describing the output elements\n     ",
    "links" : [ "java.util.stream.Node", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator" ]
  }, {
    "name" : "public static Node.OfInt collectInt(PipelineHelper<Integer> helper, Spliterator<P_IN> spliterator, boolean flattenTree)",
    "returnType" : "Node.OfInt",
    "comment" : "\n     * Collect, in parallel, elements output from an int-valued pipeline and\n     * describe those elements with a {@link Node.OfInt}.\n     *\n     * @implSpec\n     * If the exact size of the output from the pipeline is known and the source\n     * {@link Spliterator} has the {@link Spliterator#SUBSIZED} characteristic,\n     * then a flat {@link Node} will be returned whose content is an array,\n     * since the size is known the array can be constructed in advance and\n     * output elements can be placed into the array concurrently by leaf\n     * tasks at the correct offsets.  If the exact size is not known, output\n     * elements are collected into a conc-node whose shape mirrors that\n     * of the computation. This conc-node can then be flattened in\n     * parallel to produce a flat {@code Node.OfInt} if desired.\n     *\n     * @param <P_IN> the type of elements from the source Spliterator\n     * @param helper the pipeline helper describing the pipeline\n     * @param flattenTree whether a conc node should be flattened into a node\n     *                    describing an array before returning\n     * @return a {@link Node.OfInt} describing the output elements\n     ",
    "links" : [ "Node.OfInt", "java.util.stream.Node", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator" ]
  }, {
    "name" : "public static Node.OfLong collectLong(PipelineHelper<Long> helper, Spliterator<P_IN> spliterator, boolean flattenTree)",
    "returnType" : "Node.OfLong",
    "comment" : "\n     * Collect, in parallel, elements output from a long-valued pipeline and\n     * describe those elements with a {@link Node.OfLong}.\n     *\n     * @implSpec\n     * If the exact size of the output from the pipeline is known and the source\n     * {@link Spliterator} has the {@link Spliterator#SUBSIZED} characteristic,\n     * then a flat {@link Node} will be returned whose content is an array,\n     * since the size is known the array can be constructed in advance and\n     * output elements can be placed into the array concurrently by leaf\n     * tasks at the correct offsets.  If the exact size is not known, output\n     * elements are collected into a conc-node whose shape mirrors that\n     * of the computation. This conc-node can then be flattened in\n     * parallel to produce a flat {@code Node.OfLong} if desired.\n     *\n     * @param <P_IN> the type of elements from the source Spliterator\n     * @param helper the pipeline helper describing the pipeline\n     * @param flattenTree whether a conc node should be flattened into a node\n     *                    describing an array before returning\n     * @return a {@link Node.OfLong} describing the output elements\n     ",
    "links" : [ "Node.OfLong", "java.util.stream.Node", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator" ]
  }, {
    "name" : "public static Node.OfDouble collectDouble(PipelineHelper<Double> helper, Spliterator<P_IN> spliterator, boolean flattenTree)",
    "returnType" : "Node.OfDouble",
    "comment" : "\n     * Collect, in parallel, elements output from n double-valued pipeline and\n     * describe those elements with a {@link Node.OfDouble}.\n     *\n     * @implSpec\n     * If the exact size of the output from the pipeline is known and the source\n     * {@link Spliterator} has the {@link Spliterator#SUBSIZED} characteristic,\n     * then a flat {@link Node} will be returned whose content is an array,\n     * since the size is known the array can be constructed in advance and\n     * output elements can be placed into the array concurrently by leaf\n     * tasks at the correct offsets.  If the exact size is not known, output\n     * elements are collected into a conc-node whose shape mirrors that\n     * of the computation. This conc-node can then be flattened in\n     * parallel to produce a flat {@code Node.OfDouble} if desired.\n     *\n     * @param <P_IN> the type of elements from the source Spliterator\n     * @param helper the pipeline helper describing the pipeline\n     * @param flattenTree whether a conc node should be flattened into a node\n     *                    describing an array before returning\n     * @return a {@link Node.OfDouble} describing the output elements\n     ",
    "links" : [ "Node.OfDouble", "java.util.stream.Node", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator" ]
  }, {
    "name" : "public static Node<T> flatten(Node<T> node, IntFunction<T[]> generator)",
    "returnType" : "Node<T>",
    "comment" : "\n     * Flatten, in parallel, a {@link Node}.  A flattened node is one that has\n     * no children.  If the node is already flat, it is simply returned.\n     *\n     * @implSpec\n     * If a new node is to be created, the generator is used to create an array\n     * whose length is {@link Node#count()}.  Then the node tree is traversed\n     * and leaf node elements are placed in the array concurrently by leaf tasks\n     * at the correct offsets.\n     *\n     * @param <T> type of elements contained by the node\n     * @param node the node to flatten\n     * @param generator the array factory used to create array instances\n     * @return a flat {@code Node}\n     ",
    "links" : [ "java.util.stream.Node#count()", "java.util.stream.Node" ]
  }, {
    "name" : "public static Node.OfInt flattenInt(Node.OfInt node)",
    "returnType" : "Node.OfInt",
    "comment" : "\n     * Flatten, in parallel, a {@link Node.OfInt}.  A flattened node is one that\n     * has no children.  If the node is already flat, it is simply returned.\n     *\n     * @implSpec\n     * If a new node is to be created, a new int[] array is created whose length\n     * is {@link Node#count()}.  Then the node tree is traversed and leaf node\n     * elements are placed in the array concurrently by leaf tasks at the\n     * correct offsets.\n     *\n     * @param node the node to flatten\n     * @return a flat {@code Node.OfInt}\n     ",
    "links" : [ "java.util.stream.Node#count()", "Node.OfInt" ]
  }, {
    "name" : "public static Node.OfLong flattenLong(Node.OfLong node)",
    "returnType" : "Node.OfLong",
    "comment" : "\n     * Flatten, in parallel, a {@link Node.OfLong}.  A flattened node is one that\n     * has no children.  If the node is already flat, it is simply returned.\n     *\n     * @implSpec\n     * If a new node is to be created, a new long[] array is created whose length\n     * is {@link Node#count()}.  Then the node tree is traversed and leaf node\n     * elements are placed in the array concurrently by leaf tasks at the\n     * correct offsets.\n     *\n     * @param node the node to flatten\n     * @return a flat {@code Node.OfLong}\n     ",
    "links" : [ "java.util.stream.Node#count()", "Node.OfLong" ]
  }, {
    "name" : "public static Node.OfDouble flattenDouble(Node.OfDouble node)",
    "returnType" : "Node.OfDouble",
    "comment" : "\n     * Flatten, in parallel, a {@link Node.OfDouble}.  A flattened node is one that\n     * has no children.  If the node is already flat, it is simply returned.\n     *\n     * @implSpec\n     * If a new node is to be created, a new double[] array is created whose length\n     * is {@link Node#count()}.  Then the node tree is traversed and leaf node\n     * elements are placed in the array concurrently by leaf tasks at the\n     * correct offsets.\n     *\n     * @param node the node to flatten\n     * @return a flat {@code Node.OfDouble}\n     ",
    "links" : [ "java.util.stream.Node#count()", "Node.OfDouble" ]
  } ],
  "methodNames" : [ " static IntFunction<T[]> castingArray()", " static Node<T> emptyNode(StreamShape shape)", " static Node<T> conc(StreamShape shape, Node<T> left, Node<T> right)", " static Node<T> node(T[] array)", " static Node<T> node(Collection<T> c)", " static Node.Builder<T> builder(long exactSizeIfKnown, IntFunction<T[]> generator)", " static Node.Builder<T> builder()", " static Node.OfInt node(int[] array)", " static Node.Builder.OfInt intBuilder(long exactSizeIfKnown)", " static Node.Builder.OfInt intBuilder()", " static Node.OfLong node(final long[] array)", " static Node.Builder.OfLong longBuilder(long exactSizeIfKnown)", " static Node.Builder.OfLong longBuilder()", " static Node.OfDouble node(final double[] array)", " static Node.Builder.OfDouble doubleBuilder(long exactSizeIfKnown)", " static Node.Builder.OfDouble doubleBuilder()", "public static Node<P_OUT> collect(PipelineHelper<P_OUT> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<P_OUT[]> generator)", "public static Node.OfInt collectInt(PipelineHelper<Integer> helper, Spliterator<P_IN> spliterator, boolean flattenTree)", "public static Node.OfLong collectLong(PipelineHelper<Long> helper, Spliterator<P_IN> spliterator, boolean flattenTree)", "public static Node.OfDouble collectDouble(PipelineHelper<Double> helper, Spliterator<P_IN> spliterator, boolean flattenTree)", "public static Node<T> flatten(Node<T> node, IntFunction<T[]> generator)", "public static Node.OfInt flattenInt(Node.OfInt node)", "public static Node.OfLong flattenLong(Node.OfLong node)", "public static Node.OfDouble flattenDouble(Node.OfDouble node)" ],
  "variableNames" : [ "MAX_ARRAY_SIZE", "BAD_SIZE", "EMPTY_NODE", "EMPTY_INT_NODE", "EMPTY_LONG_NODE", "EMPTY_DOUBLE_NODE", "EMPTY_INT_ARRAY", "EMPTY_LONG_ARRAY", "EMPTY_DOUBLE_ARRAY" ]
}