{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/CharsetRecog_mbcs.java",
  "packageName" : "android.icu.text",
  "className" : "CharsetRecog_mbcs",
  "comment" : "\n * CharsetRecognizer implementation for Asian  - double or multi-byte - charsets.\n *                   Match is determined mostly by the input data adhering to the\n *                   encoding scheme for the charset, and, optionally,\n *                   frequency-of-occurrence of characters.\n * <p/>\n *                   Instances of this class are singletons, one per encoding\n *                   being recognized.  They are created in the main\n *                   CharsetDetector class and kept in the global list of available\n *                   encodings to be checked.  The specific encoding being recognized\n *                   is determined by subclass.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " abstract String getName()",
    "returnType" : "String",
    "comment" : "\n     * Get the IANA name of this charset.\n     * @return the charset name.\n     ",
    "links" : [ ]
  }, {
    "name" : " int match(CharsetDetector det, int[] commonChars)",
    "returnType" : "int",
    "comment" : "\n     * Test the match of this charset with the input text data\n     *      which is obtained via the CharsetDetector object.\n     *\n     * @param det  The CharsetDetector, which contains the input text\n     *             to be checked for being in this charset.\n     * @return     Two values packed into one int  (Damn java, anyhow)\n     *             <br/>\n     *             bits 0-7:  the match confidence, ranging from 0-100\n     *             <br/>\n     *             bits 8-15: The match reason, an enum-like value.\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract boolean nextChar(iteratedChar it, CharsetDetector det)",
    "returnType" : "boolean",
    "comment" : "\n      * Get the next character (however many bytes it is) from the input data\n      *    Subclasses for specific charset encodings must implement this function\n      *    to get characters according to the rules of their encoding scheme.\n      *\n      *  This function is not a method of class iteratedChar only because\n      *   that would require a lot of extra derived classes, which is awkward.\n      * @param it  The iteratedChar \"struct\" into which the returned char is placed.\n      * @param det The charset detector, which is needed to get at the input byte data\n      *            being iterated over.\n      * @return    True if a character was returned, false at end of input.\n      ",
    "links" : [ ]
  } ],
  "methodNames" : [ " abstract String getName()", " int match(CharsetDetector det, int[] commonChars)", " abstract boolean nextChar(iteratedChar it, CharsetDetector det)" ],
  "variableNames" : [ ]
}