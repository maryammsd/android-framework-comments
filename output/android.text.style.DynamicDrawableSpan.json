{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/style/DynamicDrawableSpan.java",
  "packageName" : "android.text.style",
  "className" : "DynamicDrawableSpan",
  "comment" : "\n * Span that replaces the text it's attached to with a {@link Drawable} that can be aligned with\n * the bottom or with the baseline of the surrounding text.\n * <p>\n * For an implementation that constructs the drawable from various sources (<code>Bitmap</code>,\n * <code>Drawable</code>, resource id or <code>Uri</code>) use {@link ImageSpan}.\n * <p>\n * A simple implementation of <code>DynamicDrawableSpan</code> that uses drawables from resources\n * looks like this:\n * <pre>\n * class MyDynamicDrawableSpan extends DynamicDrawableSpan {\n *\n * private final Context mContext;\n * private final int mResourceId;\n *\n * public MyDynamicDrawableSpan(Context context, @DrawableRes int resourceId) {\n *     mContext = context;\n *     mResourceId = resourceId;\n * }\n *\n * {@literal @}Override\n * public Drawable getDrawable() {\n *      Drawable drawable = mContext.getDrawable(mResourceId);\n *      drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n *      return drawable;\n * }\n * }</pre>\n * The class can be used like this:\n * <pre>\n * SpannableString string = new SpannableString(\"Text with a drawable span\");\n * string.setSpan(new MyDynamicDrawableSpan(context, R.mipmap.ic_launcher), 12, 20, Spanned\n * .SPAN_EXCLUSIVE_EXCLUSIVE);</pre>\n * <img src=\"{@docRoot}reference/android/images/text/style/dynamicdrawablespan.png\" />\n * <figcaption>Replacing text with a drawable.</figcaption>\n ",
  "links" : [ "android.text.style.ImageSpan", "android.graphics.drawable.Drawable" ],
  "variables" : [ {
    "name" : "ALIGN_BOTTOM",
    "type" : "int",
    "comment" : "\n     * A constant indicating that the bottom of this span should be aligned\n     * with the bottom of the surrounding text, i.e., at the same level as the\n     * lowest descender in the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_BASELINE",
    "type" : "int",
    "comment" : "\n     * A constant indicating that the bottom of this span should be aligned\n     * with the baseline of the surrounding text.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIGN_CENTER",
    "type" : "int",
    "comment" : "\n     * A constant indicating that this span should be vertically centered between\n     * the top and the lowest descender.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVerticalAlignment",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawableRef",
    "type" : "WeakReference<Drawable>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getVerticalAlignment()",
    "returnType" : "int",
    "comment" : "\n     * Returns the vertical alignment of this span, one of {@link #ALIGN_BOTTOM},\n     * {@link #ALIGN_BASELINE} or {@link #ALIGN_CENTER}.\n     ",
    "links" : [ "#ALIGN_CENTER", "#ALIGN_BASELINE", "#ALIGN_BOTTOM" ]
  }, {
    "name" : "public abstract Drawable getDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Your subclass must implement this method to provide the bitmap\n     * to be drawn.  The dimensions of the bitmap must be the same\n     * from each call to the next.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSize(@NonNull Paint paint, CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @Nullable Paint.FontMetricsInt fm)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(@NonNull Canvas canvas, CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, float x, int top, int y, int bottom, @NonNull Paint paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getCachedDrawable()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getVerticalAlignment()", "public abstract Drawable getDrawable()", "public int getSize(@NonNull Paint paint, CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @Nullable Paint.FontMetricsInt fm)", "public void draw(@NonNull Canvas canvas, CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, float x, int top, int y, int bottom, @NonNull Paint paint)", "private Drawable getCachedDrawable()", "public String toString()" ],
  "variableNames" : [ "ALIGN_BOTTOM", "ALIGN_BASELINE", "ALIGN_CENTER", "mVerticalAlignment", "mDrawableRef" ]
}