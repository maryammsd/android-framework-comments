{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/Messenger.java",
  "packageName" : "android.os",
  "className" : "Messenger",
  "comment" : "\n * Reference to a Handler, which others can use to send messages to it.\n * This allows for the implementation of message-based communication across\n * processes, by creating a Messenger pointing to a Handler in one process,\n * and handing that Messenger to another process.\n *\n * <p>Note: the implementation underneath is just a simple wrapper around\n * a {@link Binder} that is used to perform the communication.  This means\n * semantically you should treat it as such: this class does not impact process\n * lifecycle management (you must be using some higher-level component to tell\n * the system that your process needs to continue running), the connection will\n * break if your process goes away for any reason, etc.</p>\n ",
  "variables" : [ {
    "name" : "mTarget",
    "type" : "IMessenger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Messenger>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void send(Message message) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Send a Message to this Messenger's Handler.\n     * \n     * @param message The Message to send.  Usually retrieved through\n     * {@link Message#obtain() Message.obtain()}.\n     * \n     * @throws RemoteException Throws DeadObjectException if the target\n     * Handler no longer exists.\n     ",
    "links" : [ "Message#obtain" ]
  }, {
    "name" : "public IBinder getBinder()",
    "returnType" : "IBinder",
    "comment" : "\n     * Retrieve the IBinder that this Messenger is using to communicate with\n     * its associated Handler.\n     * \n     * @return Returns the IBinder backing this Messenger.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object otherObj)",
    "returnType" : "boolean",
    "comment" : "\n     * Comparison operator on two Messenger objects, such that true\n     * is returned then they both point to the same Handler.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void writeMessengerOrNullToParcel(Messenger messenger, Parcel out)",
    "returnType" : "void",
    "comment" : "\n     * Convenience function for writing either a Messenger or null pointer to\n     * a Parcel.  You must use this with {@link #readMessengerOrNullFromParcel}\n     * for later reading it.\n     * \n     * @param messenger The Messenger to write, or null.\n     * @param out Where to write the Messenger.\n     ",
    "links" : [ "#readMessengerOrNullFromParcel" ]
  }, {
    "name" : "public static Messenger readMessengerOrNullFromParcel(Parcel in)",
    "returnType" : "Messenger",
    "comment" : "\n     * Convenience function for reading either a Messenger or null pointer from\n     * a Parcel.  You must have previously written the Messenger with\n     * {@link #writeMessengerOrNullToParcel}.\n     * \n     * @param in The Parcel containing the written Messenger.\n     * \n     * @return Returns the Messenger read from the Parcel, or null if null had\n     * been written.\n     ",
    "links" : [ "#writeMessengerOrNullToParcel" ]
  } ],
  "variableNames" : [ "mTarget", "CREATOR" ],
  "methodNames" : [ "public void send(Message message) throws RemoteException", "public IBinder getBinder()", "public boolean equals(Object otherObj)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public static void writeMessengerOrNullToParcel(Messenger messenger, Parcel out)", "public static Messenger readMessengerOrNullFromParcel(Parcel in)" ]
}