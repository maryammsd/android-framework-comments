{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Deque.java",
  "packageName" : "java.util",
  "className" : "Deque",
  "comment" : "\n * A linear collection that supports element insertion and removal at\n * both ends.  The name <i>deque</i> is short for \"double ended queue\"\n * and is usually pronounced \"deck\".  Most {@code Deque}\n * implementations place no fixed limits on the number of elements\n * they may contain, but this interface supports capacity-restricted\n * deques as well as those with no fixed size limit.\n *\n * <p>This interface defines methods to access the elements at both\n * ends of the deque.  Methods are provided to insert, remove, and\n * examine the element.  Each of these methods exists in two forms:\n * one throws an exception if the operation fails, the other returns a\n * special value (either {@code null} or {@code false}, depending on\n * the operation).  The latter form of the insert operation is\n * designed specifically for use with capacity-restricted\n * {@code Deque} implementations; in most implementations, insert\n * operations cannot fail.\n *\n * <p>The twelve methods described above are summarized in the\n * following table:\n *\n * <table class=\"striped\">\n * <caption>Summary of Deque methods</caption>\n *  <thead>\n *  <tr>\n *    <td rowspan=\"2\"></td>\n *    <th scope=\"col\" colspan=\"2\"> First Element (Head)</th>\n *    <th scope=\"col\" colspan=\"2\"> Last Element (Tail)</th>\n *  </tr>\n *  <tr>\n *    <th scope=\"col\" style=\"font-weight:normal; font-style:italic\">Throws exception</th>\n *    <th scope=\"col\" style=\"font-weight:normal; font-style:italic\">Special value</th>\n *    <th scope=\"col\" style=\"font-weight:normal; font-style:italic\">Throws exception</th>\n *    <th scope=\"col\" style=\"font-weight:normal; font-style:italic\">Special value</th>\n *  </tr>\n *  </thead>\n *  <tbody>\n *  <tr>\n *    <th scope=\"row\">Insert</th>\n *    <td>{@link #addFirst(Object) addFirst(e)}</td>\n *    <td>{@link #offerFirst(Object) offerFirst(e)}</td>\n *    <td>{@link #addLast(Object) addLast(e)}</td>\n *    <td>{@link #offerLast(Object) offerLast(e)}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">Remove</th>\n *    <td>{@link #removeFirst() removeFirst()}</td>\n *    <td>{@link #pollFirst() pollFirst()}</td>\n *    <td>{@link #removeLast() removeLast()}</td>\n *    <td>{@link #pollLast() pollLast()}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">Examine</th>\n *    <td>{@link #getFirst() getFirst()}</td>\n *    <td>{@link #peekFirst() peekFirst()}</td>\n *    <td>{@link #getLast() getLast()}</td>\n *    <td>{@link #peekLast() peekLast()}</td>\n *  </tr>\n *  </tbody>\n * </table>\n *\n * <p>This interface extends the {@link Queue} interface.  When a deque is\n * used as a queue, FIFO (First-In-First-Out) behavior results.  Elements are\n * added at the end of the deque and removed from the beginning.  The methods\n * inherited from the {@code Queue} interface are precisely equivalent to\n * {@code Deque} methods as indicated in the following table:\n *\n * <table class=\"striped\">\n * <caption>Comparison of Queue and Deque methods</caption>\n *  <thead>\n *  <tr>\n *    <th scope=\"col\"> {@code Queue} Method</th>\n *    <th scope=\"col\"> Equivalent {@code Deque} Method</th>\n *  </tr>\n *  </thead>\n *  <tbody>\n *  <tr>\n *    <th scope=\"row\">{@link #add(Object) add(e)}</th>\n *    <td>{@link #addLast(Object) addLast(e)}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">{@link #offer(Object) offer(e)}</th>\n *    <td>{@link #offerLast(Object) offerLast(e)}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">{@link #remove() remove()}</th>\n *    <td>{@link #removeFirst() removeFirst()}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">{@link #poll() poll()}</th>\n *    <td>{@link #pollFirst() pollFirst()}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">{@link #element() element()}</th>\n *    <td>{@link #getFirst() getFirst()}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">{@link #peek() peek()}</th>\n *    <td>{@link #peekFirst() peekFirst()}</td>\n *  </tr>\n *  </tbody>\n * </table>\n *\n * <p>Deques can also be used as LIFO (Last-In-First-Out) stacks.  This\n * interface should be used in preference to the legacy {@link Stack} class.\n * When a deque is used as a stack, elements are pushed and popped from the\n * beginning of the deque.  Stack methods are equivalent to {@code Deque}\n * methods as indicated in the table below:\n *\n * <table class=\"striped\">\n * <caption>Comparison of Stack and Deque methods</caption>\n *  <thead>\n *  <tr>\n *    <th scope=\"col\"> Stack Method</th>\n *    <th scope=\"col\"> Equivalent {@code Deque} Method</th>\n *  </tr>\n *  </thead>\n *  <tbody>\n *  <tr>\n *    <th scope=\"row\">{@link #push(Object) push(e)}</th>\n *    <td>{@link #addFirst(Object) addFirst(e)}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">{@link #pop() pop()}</th>\n *    <td>{@link #removeFirst() removeFirst()}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">{@link #peek() peek()}</th>\n *    <td>{@link #getFirst() getFirst()}</td>\n *  </tr>\n *  </tbody>\n * </table>\n *\n * <p>Note that the {@link #peek peek} method works equally well when\n * a deque is used as a queue or a stack; in either case, elements are\n * drawn from the beginning of the deque.\n *\n * <p>This interface provides two methods to remove interior\n * elements, {@link #removeFirstOccurrence removeFirstOccurrence} and\n * {@link #removeLastOccurrence removeLastOccurrence}.\n *\n * <p>Unlike the {@link List} interface, this interface does not\n * provide support for indexed access to elements.\n *\n * <p>While {@code Deque} implementations are not strictly required\n * to prohibit the insertion of null elements, they are strongly\n * encouraged to do so.  Users of any {@code Deque} implementations\n * that do allow null elements are strongly encouraged <i>not</i> to\n * take advantage of the ability to insert nulls.  This is so because\n * {@code null} is used as a special return value by various methods\n * to indicate that the deque is empty.\n *\n * <p>{@code Deque} implementations generally do not define\n * element-based versions of the {@code equals} and {@code hashCode}\n * methods, but instead inherit the identity-based versions from class\n * {@code Object}.\n *\n * @author Doug Lea\n * @author Josh Bloch\n * @since  1.6\n * @param <E> the type of elements held in this deque\n ",
  "links" : [ "#peekLast()", "#pollFirst()", "#poll()", "#offerLast(Object)", "java.util.Stack", "#addLast(Object)", "#removeLast()", "#push(Object)", "#removeLastOccurrence", "#pop()", "#element()", "#peekFirst()", "#peek", "#remove()", "#offerFirst(Object)", "#getFirst()", "#peek()", "#offer(Object)", "#addFirst(Object)", "java.util.List", "#removeFirst()", "#getLast()", "#removeFirstOccurrence", "#pollLast()", "#add(Object)", "java.util.Queue" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the front of this deque if it is\n     * possible to do so immediately without violating capacity restrictions,\n     * throwing an {@code IllegalStateException} if no space is currently\n     * available.  When using a capacity-restricted deque, it is generally\n     * preferable to use method {@link #offerFirst}.\n     *\n     * @param e the element to add\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#offerFirst" ]
  }, {
    "name" : " void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the end of this deque if it is\n     * possible to do so immediately without violating capacity restrictions,\n     * throwing an {@code IllegalStateException} if no space is currently\n     * available.  When using a capacity-restricted deque, it is generally\n     * preferable to use method {@link #offerLast}.\n     *\n     * <p>This method is equivalent to {@link #add}.\n     *\n     * @param e the element to add\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#offerLast", "#add" ]
  }, {
    "name" : " boolean offerFirst(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the front of this deque unless it would\n     * violate capacity restrictions.  When using a capacity-restricted deque,\n     * this method is generally preferable to the {@link #addFirst} method,\n     * which can fail to insert an element only by throwing an exception.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this deque, else\n     *         {@code false}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#addFirst" ]
  }, {
    "name" : " boolean offerLast(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the end of this deque unless it would\n     * violate capacity restrictions.  When using a capacity-restricted deque,\n     * this method is generally preferable to the {@link #addLast} method,\n     * which can fail to insert an element only by throwing an exception.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this deque, else\n     *         {@code false}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#addLast" ]
  }, {
    "name" : " E removeFirst()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the first element of this deque.  This method\n     * differs from {@link #pollFirst pollFirst} only in that it throws an\n     * exception if this deque is empty.\n     *\n     * @return the head of this deque\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#pollFirst" ]
  }, {
    "name" : " E removeLast()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the last element of this deque.  This method\n     * differs from {@link #pollLast pollLast} only in that it throws an\n     * exception if this deque is empty.\n     *\n     * @return the tail of this deque\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#pollLast" ]
  }, {
    "name" : " E pollFirst()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the first element of this deque,\n     * or returns {@code null} if this deque is empty.\n     *\n     * @return the head of this deque, or {@code null} if this deque is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " E pollLast()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the last element of this deque,\n     * or returns {@code null} if this deque is empty.\n     *\n     * @return the tail of this deque, or {@code null} if this deque is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " E getFirst()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the first element of this deque.\n     *\n     * This method differs from {@link #peekFirst peekFirst} only in that it\n     * throws an exception if this deque is empty.\n     *\n     * @return the head of this deque\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#peekFirst" ]
  }, {
    "name" : " E getLast()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the last element of this deque.\n     * This method differs from {@link #peekLast peekLast} only in that it\n     * throws an exception if this deque is empty.\n     *\n     * @return the tail of this deque\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#peekLast" ]
  }, {
    "name" : " E peekFirst()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the first element of this deque,\n     * or returns {@code null} if this deque is empty.\n     *\n     * @return the head of this deque, or {@code null} if this deque is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " E peekLast()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the last element of this deque,\n     * or returns {@code null} if this deque is empty.\n     *\n     * @return the tail of this deque, or {@code null} if this deque is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean removeFirstOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * {@code Objects.equals(o, e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if an element was removed as a result of this call\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     *         ({@linkplain Collection##optional-restrictions optional})\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     *         ({@linkplain Collection##optional-restrictions optional})\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean removeLastOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the last occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the last element {@code e} such that\n     * {@code Objects.equals(o, e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if an element was removed as a result of this call\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     *         ({@linkplain Collection##optional-restrictions optional})\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     *         ({@linkplain Collection##optional-restrictions optional})\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into the queue represented by this deque\n     * (in other words, at the tail of this deque) if it is possible to do so\n     * immediately without violating capacity restrictions, returning\n     * {@code true} upon success and throwing an\n     * {@code IllegalStateException} if no space is currently available.\n     * When using a capacity-restricted deque, it is generally preferable to\n     * use {@link #offer(Object) offer}.\n     *\n     * <p>This method is equivalent to {@link #addLast}.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#addLast", "#offer(Object)", "java.util.Collection#add" ]
  }, {
    "name" : " boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into the queue represented by this deque\n     * (in other words, at the tail of this deque) if it is possible to do so\n     * immediately without violating capacity restrictions, returning\n     * {@code true} upon success and {@code false} if no space is currently\n     * available.  When using a capacity-restricted deque, this method is\n     * generally preferable to the {@link #add} method, which can fail to\n     * insert an element only by throwing an exception.\n     *\n     * <p>This method is equivalent to {@link #offerLast}.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this deque, else\n     *         {@code false}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#offerLast", "#add" ]
  }, {
    "name" : " E remove()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of the queue represented by this deque\n     * (in other words, the first element of this deque).\n     * This method differs from {@link #poll() poll()} only in that it\n     * throws an exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #removeFirst()}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#removeFirst()", "#poll()" ]
  }, {
    "name" : " E poll()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of the queue represented by this deque\n     * (in other words, the first element of this deque), or returns\n     * {@code null} if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #pollFirst()}.\n     *\n     * @return the first element of this deque, or {@code null} if\n     *         this deque is empty\n     ",
    "links" : [ "#pollFirst()" ]
  }, {
    "name" : " E element()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of the queue represented by\n     * this deque (in other words, the first element of this deque).\n     * This method differs from {@link #peek peek} only in that it throws an\n     * exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #getFirst()}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#getFirst()", "#peek" ]
  }, {
    "name" : " E peek()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of the queue represented by\n     * this deque (in other words, the first element of this deque), or\n     * returns {@code null} if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #peekFirst()}.\n     *\n     * @return the head of the queue represented by this deque, or\n     *         {@code null} if this deque is empty\n     ",
    "links" : [ "#peekFirst()" ]
  }, {
    "name" : " boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds all of the elements in the specified collection at the end\n     * of this deque, as if by calling {@link #addLast} on each one,\n     * in the order that they are returned by the collection's iterator.\n     *\n     * <p>When using a capacity-restricted deque, it is generally preferable\n     * to call {@link #offer(Object) offer} separately on each element.\n     *\n     * <p>An exception encountered while trying to add an element may result\n     * in only some of the elements having been successfully added when\n     * the associated exception is thrown.\n     *\n     * @param c the elements to be inserted into this deque\n     * @return {@code true} if this deque changed as a result of the call\n     * @throws IllegalStateException if not all the elements can be added at\n     *         this time due to insertion restrictions\n     * @throws ClassCastException if the class of an element of the specified\n     *         collection prevents it from being added to this deque\n     * @throws NullPointerException if the specified collection contains a\n     *         null element and this deque does not permit null elements,\n     *         or if the specified collection is null\n     * @throws IllegalArgumentException if some property of an element of the\n     *         specified collection prevents it from being added to this deque\n     ",
    "links" : [ "#addLast", "#offer(Object)" ]
  }, {
    "name" : " void push(E e)",
    "returnType" : "void",
    "comment" : "\n     * Pushes an element onto the stack represented by this deque (in other\n     * words, at the head of this deque) if it is possible to do so\n     * immediately without violating capacity restrictions, throwing an\n     * {@code IllegalStateException} if no space is currently available.\n     *\n     * <p>This method is equivalent to {@link #addFirst}.\n     *\n     * @param e the element to push\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#addFirst" ]
  }, {
    "name" : " E pop()",
    "returnType" : "E",
    "comment" : "\n     * Pops an element from the stack represented by this deque.  In other\n     * words, removes and returns the first element of this deque.\n     *\n     * <p>This method is equivalent to {@link #removeFirst()}.\n     *\n     * @return the element at the front of this deque (which is the top\n     *         of the stack represented by this deque)\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#removeFirst()" ]
  }, {
    "name" : " boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * {@code Objects.equals(o, e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * <p>This method is equivalent to {@link #removeFirstOccurrence(Object)}.\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if an element was removed as a result of this call\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     *         ({@linkplain Collection##optional-restrictions optional})\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     *         ({@linkplain Collection##optional-restrictions optional})\n     ",
    "links" : [ "#removeFirstOccurrence(Object)" ]
  }, {
    "name" : " boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this deque contains the specified element.\n     * More formally, returns {@code true} if and only if this deque contains\n     * at least one element {@code e} such that {@code Objects.equals(o, e)}.\n     *\n     * @param o element whose presence in this deque is to be tested\n     * @return {@code true} if this deque contains the specified element\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     *         ({@linkplain Collection##optional-restrictions optional})\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     *         ({@linkplain Collection##optional-restrictions optional})\n     ",
    "links" : [ ]
  }, {
    "name" : " int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this deque.\n     *\n     * @return the number of elements in this deque\n     ",
    "links" : [ ]
  }, {
    "name" : " Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this deque in proper sequence.\n     * The elements will be returned in order from first (head) to last (tail).\n     *\n     * @return an iterator over the elements in this deque in proper sequence\n     ",
    "links" : [ ]
  }, {
    "name" : " Iterator<E> descendingIterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this deque in reverse\n     * sequential order.  The elements will be returned in order from\n     * last (tail) to first (head).\n     *\n     * @return an iterator over the elements in this deque in reverse\n     * sequence\n     ",
    "links" : [ ]
  }, {
    "name" : " Deque<E> reversed()",
    "returnType" : "Deque<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * The implementation in this interface returns a reverse-ordered Deque\n     * view. The {@code reversed()} method of the view returns a reference\n     * to this Deque. Other operations on the view are implemented via calls to\n     * public methods on this Deque. The exact relationship between calls on the\n     * view and calls on this Deque is unspecified. However, order-sensitive\n     * operations generally delegate to the appropriate method with the opposite\n     * orientation. For example, calling {@code getFirst} on the view results in\n     * a call to {@code getLast} on this Deque.\n     *\n     * @return a reverse-ordered view of this collection, as a {@code Deque}\n     * @since 21\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void addFirst(E e)", " void addLast(E e)", " boolean offerFirst(E e)", " boolean offerLast(E e)", " E removeFirst()", " E removeLast()", " E pollFirst()", " E pollLast()", " E getFirst()", " E getLast()", " E peekFirst()", " E peekLast()", " boolean removeFirstOccurrence(Object o)", " boolean removeLastOccurrence(Object o)", " boolean add(E e)", " boolean offer(E e)", " E remove()", " E poll()", " E element()", " E peek()", " boolean addAll(Collection<? extends E> c)", " void push(E e)", " E pop()", " boolean remove(Object o)", " boolean contains(Object o)", " int size()", " Iterator<E> iterator()", " Iterator<E> descendingIterator()", " Deque<E> reversed()" ],
  "variableNames" : [ ]
}