{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/OverScroller.java",
  "packageName" : "android.widget",
  "className" : "OverScroller",
  "comment" : "\n * This class encapsulates scrolling with the ability to overshoot the bounds\n * of a scrolling operation. This class is a drop-in replacement for\n * {@link android.widget.Scroller} in most cases.\n ",
  "variables" : [ {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollerX",
    "type" : "SplineOverScroller",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollerY",
    "type" : "SplineOverScroller",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlywheel",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCROLL_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLING_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setInterpolator(Interpolator interpolator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setFriction(float friction)",
    "returnType" : "void",
    "comment" : "\n     * The amount of friction applied to flings. The default value\n     * is {@link ViewConfiguration#getScrollFriction}.\n     *\n     * @param friction A scalar dimension-less value representing the coefficient of\n     *         friction.\n     ",
    "links" : [ "android.view.ViewConfiguration#getScrollFriction" ]
  }, {
    "name" : "public final boolean isFinished()",
    "returnType" : "boolean",
    "comment" : "\n     *\n     * Returns whether the scroller has finished scrolling.\n     *\n     * @return True if the scroller has finished scrolling, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void forceFinished(boolean finished)",
    "returnType" : "void",
    "comment" : "\n     * Force the finished field to a particular value. Contrary to\n     * {@link #abortAnimation()}, forcing the animation to finished\n     * does NOT cause the scroller to move to the final x and y\n     * position.\n     *\n     * @param finished The new finished value.\n     ",
    "links" : [ "#abortAnimation()" ]
  }, {
    "name" : "public final int getCurrX()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current X offset in the scroll.\n     *\n     * @return The new X offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getCurrY()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current Y offset in the scroll.\n     *\n     * @return The new Y offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getCurrVelocity()",
    "returnType" : "float",
    "comment" : "\n     * Returns the absolute value of the current velocity.\n     *\n     * @return The original velocity less the deceleration, norm of the X and Y velocity vector.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getStartX()",
    "returnType" : "int",
    "comment" : "\n     * Returns the start X offset in the scroll.\n     *\n     * @return The start X offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getStartY()",
    "returnType" : "int",
    "comment" : "\n     * Returns the start Y offset in the scroll.\n     *\n     * @return The start Y offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getFinalX()",
    "returnType" : "int",
    "comment" : "\n     * Returns where the scroll will end. Valid only for \"fling\" scrolls.\n     *\n     * @return The final X offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getFinalY()",
    "returnType" : "int",
    "comment" : "\n     * Returns where the scroll will end. Valid only for \"fling\" scrolls.\n     *\n     * @return The final Y offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getDuration()",
    "returnType" : "int",
    "comment" : "\n     * Returns how long the scroll event will take, in milliseconds.\n     *\n     * @return The duration of the scroll in milliseconds.\n     *\n     * @hide Pending removal once nothing depends on it\n     * @deprecated OverScrollers don't necessarily have a fixed duration.\n     *             This function will lie to the best of its ability.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void extendDuration(int extend)",
    "returnType" : "void",
    "comment" : "\n     * Extend the scroll animation. This allows a running animation to scroll\n     * further and longer, when used with {@link #setFinalX(int)} or {@link #setFinalY(int)}.\n     *\n     * @param extend Additional time to scroll in milliseconds.\n     * @see #setFinalX(int)\n     * @see #setFinalY(int)\n     *\n     * @hide Pending removal once nothing depends on it\n     * @deprecated OverScrollers don't necessarily have a fixed duration.\n     *             Instead of setting a new final position and extending\n     *             the duration of an existing scroll, use startScroll\n     *             to begin a new animation.\n     ",
    "links" : [ "#setFinalX(int)", "#setFinalY(int)" ]
  }, {
    "name" : "public void setFinalX(int newX)",
    "returnType" : "void",
    "comment" : "\n     * Sets the final position (X) for this scroller.\n     *\n     * @param newX The new X offset as an absolute distance from the origin.\n     * @see #extendDuration(int)\n     * @see #setFinalY(int)\n     *\n     * @hide Pending removal once nothing depends on it\n     * @deprecated OverScroller's final position may change during an animation.\n     *             Instead of setting a new final position and extending\n     *             the duration of an existing scroll, use startScroll\n     *             to begin a new animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFinalY(int newY)",
    "returnType" : "void",
    "comment" : "\n     * Sets the final position (Y) for this scroller.\n     *\n     * @param newY The new Y offset as an absolute distance from the origin.\n     * @see #extendDuration(int)\n     * @see #setFinalX(int)\n     *\n     * @hide Pending removal once nothing depends on it\n     * @deprecated OverScroller's final position may change during an animation.\n     *             Instead of setting a new final position and extending\n     *             the duration of an existing scroll, use startScroll\n     *             to begin a new animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean computeScrollOffset()",
    "returnType" : "boolean",
    "comment" : "\n     * Call this when you want to know the new location. If it returns true, the\n     * animation is not yet finished.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startScroll(int startX, int startY, int dx, int dy)",
    "returnType" : "void",
    "comment" : "\n     * Start scrolling by providing a starting point and the distance to travel.\n     * The scroll will use the default value of 250 milliseconds for the\n     * duration.\n     *\n     * @param startX Starting horizontal scroll offset in pixels. Positive\n     *        numbers will scroll the content to the left.\n     * @param startY Starting vertical scroll offset in pixels. Positive numbers\n     *        will scroll the content up.\n     * @param dx Horizontal distance to travel. Positive numbers will scroll the\n     *        content to the left.\n     * @param dy Vertical distance to travel. Positive numbers will scroll the\n     *        content up.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startScroll(int startX, int startY, int dx, int dy, int duration)",
    "returnType" : "void",
    "comment" : "\n     * Start scrolling by providing a starting point and the distance to travel.\n     *\n     * @param startX Starting horizontal scroll offset in pixels. Positive\n     *        numbers will scroll the content to the left.\n     * @param startY Starting vertical scroll offset in pixels. Positive numbers\n     *        will scroll the content up.\n     * @param dx Horizontal distance to travel. Positive numbers will scroll the\n     *        content to the left.\n     * @param dy Vertical distance to travel. Positive numbers will scroll the\n     *        content up.\n     * @param duration Duration of the scroll in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean springBack(int startX, int startY, int minX, int maxX, int minY, int maxY)",
    "returnType" : "boolean",
    "comment" : "\n     * Call this when you want to 'spring back' into a valid coordinate range.\n     *\n     * @param startX Starting X coordinate\n     * @param startY Starting Y coordinate\n     * @param minX Minimum valid X value\n     * @param maxX Maximum valid X value\n     * @param minY Minimum valid Y value\n     * @param maxY Minimum valid Y value\n     * @return true if a springback was initiated, false if startX and startY were\n     *          already within the valid range.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY, int overX, int overY)",
    "returnType" : "void",
    "comment" : "\n     * Start scrolling based on a fling gesture. The distance traveled will\n     * depend on the initial velocity of the fling.\n     *\n     * @param startX Starting point of the scroll (X)\n     * @param startY Starting point of the scroll (Y)\n     * @param velocityX Initial velocity of the fling (X) measured in pixels per\n     *            second.\n     * @param velocityY Initial velocity of the fling (Y) measured in pixels per\n     *            second\n     * @param minX Minimum X value. The scroller will not scroll past this point\n     *            unless overX > 0. If overfling is allowed, it will use minX as\n     *            a springback boundary.\n     * @param maxX Maximum X value. The scroller will not scroll past this point\n     *            unless overX > 0. If overfling is allowed, it will use maxX as\n     *            a springback boundary.\n     * @param minY Minimum Y value. The scroller will not scroll past this point\n     *            unless overY > 0. If overfling is allowed, it will use minY as\n     *            a springback boundary.\n     * @param maxY Maximum Y value. The scroller will not scroll past this point\n     *            unless overY > 0. If overfling is allowed, it will use maxY as\n     *            a springback boundary.\n     * @param overX Overfling range. If > 0, horizontal overfling in either\n     *            direction will be possible.\n     * @param overY Overfling range. If > 0, vertical overfling in either\n     *            direction will be possible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyHorizontalEdgeReached(int startX, int finalX, int overX)",
    "returnType" : "void",
    "comment" : "\n     * Notify the scroller that we've reached a horizontal boundary.\n     * Normally the information to handle this will already be known\n     * when the animation is started, such as in a call to one of the\n     * fling functions. However there are cases where this cannot be known\n     * in advance. This function will transition the current motion and\n     * animate from startX to finalX as appropriate.\n     *\n     * @param startX Starting/current X position\n     * @param finalX Desired final X position\n     * @param overX Magnitude of overscroll allowed. This should be the maximum\n     *              desired distance from finalX. Absolute value - must be positive.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyVerticalEdgeReached(int startY, int finalY, int overY)",
    "returnType" : "void",
    "comment" : "\n     * Notify the scroller that we've reached a vertical boundary.\n     * Normally the information to handle this will already be known\n     * when the animation is started, such as in a call to one of the\n     * fling functions. However there are cases where this cannot be known\n     * in advance. This function will animate a parabolic motion from\n     * startY to finalY.\n     *\n     * @param startY Starting/current Y position\n     * @param finalY Desired final Y position\n     * @param overY Magnitude of overscroll allowed. This should be the maximum\n     *              desired distance from finalY. Absolute value - must be positive.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverScrolled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the current Scroller is currently returning to a valid position.\n     * Valid bounds were provided by the\n     * {@link #fling(int, int, int, int, int, int, int, int, int, int)} method.\n     *\n     * One should check this value before calling\n     * {@link #startScroll(int, int, int, int)} as the interpolation currently in progress\n     * to restore a valid position will then be stopped. The caller has to take into account\n     * the fact that the started scroll will start from an overscrolled position.\n     *\n     * @return true when the current position is overscrolled and in the process of\n     *         interpolating back to a valid value.\n     ",
    "links" : [ "#fling(int", "#startScroll(int" ]
  }, {
    "name" : "public void abortAnimation()",
    "returnType" : "void",
    "comment" : "\n     * Stops the animation. Contrary to {@link #forceFinished(boolean)},\n     * aborting the animating causes the scroller to move to the final x and y\n     * positions.\n     *\n     * @see #forceFinished(boolean)\n     ",
    "links" : [ "#forceFinished(boolean)" ]
  }, {
    "name" : "public int timePassed()",
    "returnType" : "int",
    "comment" : "\n     * Returns the time elapsed since the beginning of the scrolling.\n     *\n     * @return The elapsed time in milliseconds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScrollingInDirection(float xvel, float yvel)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mMode", "mScrollerX", "mScrollerY", "mInterpolator", "mFlywheel", "DEFAULT_DURATION", "SCROLL_MODE", "FLING_MODE" ],
  "methodNames" : [ " void setInterpolator(Interpolator interpolator)", "public final void setFriction(float friction)", "public final boolean isFinished()", "public final void forceFinished(boolean finished)", "public final int getCurrX()", "public final int getCurrY()", "public float getCurrVelocity()", "public final int getStartX()", "public final int getStartY()", "public final int getFinalX()", "public final int getFinalY()", "public final int getDuration()", "public void extendDuration(int extend)", "public void setFinalX(int newX)", "public void setFinalY(int newY)", "public boolean computeScrollOffset()", "public void startScroll(int startX, int startY, int dx, int dy)", "public void startScroll(int startX, int startY, int dx, int dy, int duration)", "public boolean springBack(int startX, int startY, int minX, int maxX, int minY, int maxY)", "public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY)", "public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY, int overX, int overY)", "public void notifyHorizontalEdgeReached(int startX, int finalX, int overX)", "public void notifyVerticalEdgeReached(int startY, int finalY, int overY)", "public boolean isOverScrolled()", "public void abortAnimation()", "public int timePassed()", "public boolean isScrollingInDirection(float xvel, float yvel)" ]
}