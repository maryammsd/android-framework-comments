{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/ContactsContract.java",
  "packageName" : "android.provider",
  "className" : "StructuredPostal",
  "comment" : "\n         * <p>\n         * A data kind representing a postal addresses.\n         * </p>\n         * <p>\n         * You can use all columns defined for {@link ContactsContract.Data} as\n         * well as the following aliases.\n         * </p>\n         * <h2>Column aliases</h2>\n         * <table class=\"jd-sumtable\">\n         * <tr>\n         * <th>Type</th>\n         * <th>Alias</th><th colspan='2'>Data column</th>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #FORMATTED_ADDRESS}</td>\n         * <td>{@link #DATA1}</td>\n         * <td></td>\n         * </tr>\n         * <tr>\n         * <td>int</td>\n         * <td>{@link #TYPE}</td>\n         * <td>{@link #DATA2}</td>\n         * <td>Allowed values are:\n         * <p>\n         * <ul>\n         * <li>{@link #TYPE_CUSTOM}. Put the actual type in {@link #LABEL}.</li>\n         * <li>{@link #TYPE_HOME}</li>\n         * <li>{@link #TYPE_WORK}</li>\n         * <li>{@link #TYPE_OTHER}</li>\n         * </ul>\n         * </p>\n         * </td>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #LABEL}</td>\n         * <td>{@link #DATA3}</td>\n         * <td></td>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #STREET}</td>\n         * <td>{@link #DATA4}</td>\n         * <td></td>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #POBOX}</td>\n         * <td>{@link #DATA5}</td>\n         * <td>Post Office Box number</td>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #NEIGHBORHOOD}</td>\n         * <td>{@link #DATA6}</td>\n         * <td></td>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #CITY}</td>\n         * <td>{@link #DATA7}</td>\n         * <td></td>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #REGION}</td>\n         * <td>{@link #DATA8}</td>\n         * <td></td>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #POSTCODE}</td>\n         * <td>{@link #DATA9}</td>\n         * <td></td>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #COUNTRY}</td>\n         * <td>{@link #DATA10}</td>\n         * <td></td>\n         * </tr>\n         * </table>\n         ",
  "variables" : [ {
    "name" : "CONTENT_ITEM_TYPE",
    "type" : "String",
    "comment" : " MIME type used when storing this in data table. ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n             * The MIME type of {@link #CONTENT_URI} providing a directory of\n             * postal addresses.\n             ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n             * The content:// style URI for all data records of the\n             * {@link StructuredPostal#CONTENT_ITEM_TYPE} MIME type.\n             ",
    "links" : [ "#CONTENT_ITEM_TYPE" ]
  }, {
    "name" : "TYPE_HOME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_WORK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_OTHER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMATTED_ADDRESS",
    "type" : "String",
    "comment" : "\n             * The full, unstructured postal address. <i>This field must be\n             * consistent with any structured data.</i>\n             * <p>\n             * Type: TEXT\n             ",
    "links" : [ ]
  }, {
    "name" : "STREET",
    "type" : "String",
    "comment" : "\n             * Can be street, avenue, road, etc. This element also includes the\n             * house number and room/apartment/flat/floor number.\n             * <p>\n             * Type: TEXT\n             ",
    "links" : [ ]
  }, {
    "name" : "POBOX",
    "type" : "String",
    "comment" : "\n             * Covers actual P.O. boxes, drawers, locked bags, etc. This is\n             * usually but not always mutually exclusive with street.\n             * <p>\n             * Type: TEXT\n             ",
    "links" : [ ]
  }, {
    "name" : "NEIGHBORHOOD",
    "type" : "String",
    "comment" : "\n             * This is used to disambiguate a street address when a city\n             * contains more than one street with the same name, or to specify a\n             * small place whose mail is routed through a larger postal town. In\n             * China it could be a county or a minor city.\n             * <p>\n             * Type: TEXT\n             ",
    "links" : [ ]
  }, {
    "name" : "CITY",
    "type" : "String",
    "comment" : "\n             * Can be city, village, town, borough, etc. This is the postal town\n             * and not necessarily the place of residence or place of business.\n             * <p>\n             * Type: TEXT\n             ",
    "links" : [ ]
  }, {
    "name" : "REGION",
    "type" : "String",
    "comment" : "\n             * A state, province, county (in Ireland), Land (in Germany),\n             * departement (in France), etc.\n             * <p>\n             * Type: TEXT\n             ",
    "links" : [ ]
  }, {
    "name" : "POSTCODE",
    "type" : "String",
    "comment" : "\n             * Postal code. Usually country-wide, but sometimes specific to the\n             * city (e.g. \"2\" in \"Dublin 2, Ireland\" addresses).\n             * <p>\n             * Type: TEXT\n             ",
    "links" : [ ]
  }, {
    "name" : "COUNTRY",
    "type" : "String",
    "comment" : "\n             * The name or code of the country.\n             * <p>\n             * Type: TEXT\n             ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final int getTypeLabelResource(int type)",
    "returnType" : "int",
    "comment" : "\n             * Return the string resource that best describes the given\n             * {@link #TYPE}. Will always return a valid resource.\n             ",
    "links" : [ "#TYPE" ]
  }, {
    "name" : "public static final CharSequence getTypeLabel(Resources res, int type, CharSequence label)",
    "returnType" : "CharSequence",
    "comment" : "\n             * Return a {@link CharSequence} that best describes the given type,\n             * possibly substituting the given {@link #LABEL} value\n             * for {@link #TYPE_CUSTOM}.\n             ",
    "links" : [ "#LABEL", "CharSequence", "#TYPE_CUSTOM" ]
  } ],
  "variableNames" : [ "CONTENT_ITEM_TYPE", "CONTENT_TYPE", "CONTENT_URI", "TYPE_HOME", "TYPE_WORK", "TYPE_OTHER", "FORMATTED_ADDRESS", "STREET", "POBOX", "NEIGHBORHOOD", "CITY", "REGION", "POSTCODE", "COUNTRY" ],
  "methodNames" : [ "public static final int getTypeLabelResource(int type)", "public static final CharSequence getTypeLabel(Resources res, int type, CharSequence label)" ]
}