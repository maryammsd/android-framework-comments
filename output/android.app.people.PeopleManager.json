{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/people/PeopleManager.java",
  "packageName" : "android.app.people",
  "className" : "PeopleManager",
  "comment" : "\n * This class allows interaction with conversation and people data.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConversationListeners",
    "type" : "Map<ConversationListener, Pair<Executor, IConversationListener>>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IPeopleManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isConversation(@NonNull String packageName, @NonNull String shortcutId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a shortcut has a conversation associated.\n     *\n     * <p>Requires android.permission.READ_PEOPLE_DATA permission.\n     *\n     * <p>This method may return different results for the same shortcut over time, as an app adopts\n     * conversation features or if a user hasn't communicated with the conversation associated to\n     * the shortcut in a while, so the result should not be stored and relied on indefinitely by\n     * clients.\n     *\n     * @param packageName name of the package the conversation is part of\n     * @param shortcutId  the shortcut id backing the conversation\n     * @return whether the {@shortcutId} is backed by a Conversation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOrUpdateStatus(@NonNull String conversationId, @NonNull ConversationStatus status)",
    "returnType" : "void",
    "comment" : "\n     * Sets or updates a {@link ConversationStatus} for a conversation.\n     *\n     * <p>Statuses are meant to represent current information about the conversation. Like\n     * notifications, they are transient and are not persisted beyond a reboot, nor are they\n     * backed up and restored.</p>\n     * <p>If the provided conversation shortcut is not already pinned, or cached by the system,\n     * it will remain cached as long as the status is active.</p>\n     *\n     * @param conversationId the {@link ShortcutInfo#getId() id} of the shortcut backing the\n     *                       conversation that has an active status\n     * @param status         the current status for the given conversation\n     * @return whether the role is available in the system\n     ",
    "links" : [ "android.app.people.ConversationStatus", "android.content.pm.ShortcutInfo#getId()" ]
  }, {
    "name" : "public void clearStatus(@NonNull String conversationId, @NonNull String statusId)",
    "returnType" : "void",
    "comment" : "\n     * Unpublishes a given status from the given conversation.\n     *\n     * @param conversationId the {@link ShortcutInfo#getId() id} of the shortcut backing the\n     *                       conversation that has an active status\n     * @param statusId       the {@link ConversationStatus#getId() id} of a published status for the\n     *                       given conversation\n     ",
    "links" : [ "android.content.pm.ShortcutInfo#getId()", "android.app.people.ConversationStatus#getId()" ]
  }, {
    "name" : "public void clearStatuses(@NonNull String conversationId)",
    "returnType" : "void",
    "comment" : "\n     * Removes all published statuses for the given conversation.\n     *\n     * @param conversationId the {@link ShortcutInfo#getId() id} of the shortcut backing the\n     *                       conversation that has one or more active statuses\n     ",
    "links" : [ "android.content.pm.ShortcutInfo#getId()" ]
  }, {
    "name" : "public List<ConversationStatus> getStatuses(@NonNull String conversationId)",
    "returnType" : "List<ConversationStatus>",
    "comment" : "\n     * Returns all of the currently published statuses for a given conversation.\n     *\n     * @param conversationId the {@link ShortcutInfo#getId() id} of the shortcut backing the\n     *                       conversation that has one or more active statuses\n     ",
    "links" : [ "android.content.pm.ShortcutInfo#getId()" ]
  }, {
    "name" : "public void registerConversationListener(String packageName, int userId, String shortcutId, ConversationListener listener, Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * Register a listener to watch for changes to the conversation identified by {@code\n     * packageName}, {@code userId}, and {@code shortcutId}.\n     *\n     * @param packageName The package name to match and filter the conversation to send updates for.\n     * @param userId      The user ID to match and filter the conversation to send updates for.\n     * @param shortcutId  The shortcut ID to match and filter the conversation to send updates for.\n     * @param listener    The listener to register to receive conversation updates.\n     * @param executor    {@link Executor} to handle the listeners. To dispatch listeners to the\n     *                    main thread of your application, you can use\n     *                    {@link android.content.Context#getMainExecutor()}.\n     * @hide\n     ",
    "links" : [ "java.util.concurrent.Executor", "android.content.Context#getMainExecutor()" ]
  }, {
    "name" : "public void unregisterConversationListener(ConversationListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the listener previously registered to watch conversation changes.\n     *\n     * @param listener The listener to register to receive conversation updates.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isConversation(@NonNull String packageName, @NonNull String shortcutId)", "public void addOrUpdateStatus(@NonNull String conversationId, @NonNull ConversationStatus status)", "public void clearStatus(@NonNull String conversationId, @NonNull String statusId)", "public void clearStatuses(@NonNull String conversationId)", "public List<ConversationStatus> getStatuses(@NonNull String conversationId)", "public void registerConversationListener(String packageName, int userId, String shortcutId, ConversationListener listener, Executor executor)", "public void unregisterConversationListener(ConversationListener listener)" ],
  "variableNames" : [ "LOG_TAG", "mConversationListeners", "mContext", "mService" ]
}