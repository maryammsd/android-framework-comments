{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaDrm.java",
  "packageName" : "android.media",
  "className" : "ErrorCodes",
  "comment" : "\n     * Error codes that may be returned from {@link\n     * MediaDrmStateException#getErrorCode()} and {@link\n     * MediaCodec.CryptoException#getErrorCode()}\n     * <p>\n     * The description of each error code includes steps that may be taken to\n     * resolve the error condition. For some errors however, a recovery action\n     * cannot be predetermined. The description of those codes refers to a\n     * general strategy for handling the error condition programmatically, which\n     * is to try the following in listed order until successful:\n     * <ol>\n     * <li> retry the operation </li>\n     * <li> if the operation is related to a session, {@link\n     * #closeSession(byte[]) close} the session, {@link #openSession() open} a\n     * new session, and retry the operation </li>\n     * <li> {@link #close() close} the {@link MediaDrm} instance and any other\n     * related components such as the {@link MediaCodec codec} and retry\n     * playback, or </li>\n     * <li> try using a different configuration of the {@link MediaDrm} plugin,\n     * such as a different {@link #openSession(int) security level}. </li>\n     * </ol>\n     * <p>\n     * If the problem still persists after all the aforementioned steps, please\n     * report the failure to the {@link MediaDrm} plugin vendor along with the\n     * {@link LogMessage log messages} returned by {@link\n     * MediaDrm#getLogMessages()}, and a bugreport if possible.\n     ",
  "links" : [ "android.media.MediaCodec", "android.media.MediaDrm#getLogMessages()", "MediaCodec.CryptoException#getErrorCode()", "#getErrorCode()", "#openSession(int)", "LogMessage", "#closeSession(byte", "android.media.MediaDrm", "#close()", "#openSession()" ],
  "variables" : [ {
    "name" : "ERROR_UNKNOWN",
    "type" : "int",
    "comment" : "\n         * ERROR_UNKNOWN is used where no other defined error code is applicable\n         * to the current failure.\n         * <p>\n         * Please see the general error handling strategy for unexpected errors\n         * described in {@link ErrorCodes}.\n         ",
    "links" : [ "ErrorCodes" ]
  }, {
    "name" : "ERROR_NO_KEY",
    "type" : "int",
    "comment" : "\n         * The requested key was not found when trying to perform a decrypt\n         * operation.\n         * <p>\n         * The operation can be retried after adding the correct decryption key.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_KEY_EXPIRED",
    "type" : "int",
    "comment" : "\n         * The key used for decryption is no longer valid due to license term\n         * expiration.\n         * <p>\n         * The operation can be retried after updating the expired keys.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RESOURCE_BUSY",
    "type" : "int",
    "comment" : "\n         * A required crypto resource was not able to be allocated while\n         * attempting the requested operation.\n         * <p>\n         * The operation can be retried if the app is able to release resources.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INSUFFICIENT_OUTPUT_PROTECTION",
    "type" : "int",
    "comment" : "\n         * The output protection levels supported by the device are not\n         * sufficient to meet the requirements set by the content owner in the\n         * license policy.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SESSION_NOT_OPENED",
    "type" : "int",
    "comment" : "\n         * Decryption was attempted on a session that is not opened, which could\n         * be due to a failure to open the session, closing the session\n         * prematurely, the session being reclaimed by the resource manager, or\n         * a non-existent session id.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNSUPPORTED_OPERATION",
    "type" : "int",
    "comment" : "\n         * An operation was attempted that could not be supported by the crypto\n         * system of the device in its current configuration.\n         * <p>\n         * This may occur when the license policy requires device security\n         * features that aren't supported by the device, or due to an internal\n         * error in the crypto system that prevents the specified security\n         * policy from being met.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INSUFFICIENT_SECURITY",
    "type" : "int",
    "comment" : "\n         * The security level of the device is not sufficient to meet the\n         * requirements set by the content owner in the license policy.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_FRAME_TOO_LARGE",
    "type" : "int",
    "comment" : "\n         * The video frame being decrypted exceeds the size of the device's\n         * protected output buffers.\n         * <p>\n         * When encountering this error the app should try playing content\n         * of a lower resolution or skipping the problematic frame.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_LOST_STATE",
    "type" : "int",
    "comment" : "\n         * The session state has been invalidated. This can occur on devices\n         * that are not capable of retaining crypto session state across device\n         * suspend/resume.\n         * <p>\n         * The session must be closed and a new session opened to resume\n         * operation.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_CERTIFICATE_MALFORMED",
    "type" : "int",
    "comment" : "\n         * Certificate is malformed or is of the wrong type.\n         * <p>\n         * Ensure the certificate provided by the app or returned from the\n         * license server is valid. Check with the {@link MediaDrm} plugin\n         * vendor for the expected certificate format.\n         ",
    "links" : [ "android.media.MediaDrm" ]
  }, {
    "name" : "ERROR_CERTIFICATE_MISSING",
    "type" : "int",
    "comment" : "\n         * Certificate has not been set.\n         * <p>\n         * Ensure the certificate has been provided by the app. Check with the\n         * {@link MediaDrm} plugin vendor for the expected method to provide\n         * {@link MediaDrm} a certificate.\n         ",
    "links" : [ "android.media.MediaDrm" ]
  }, {
    "name" : "ERROR_CRYPTO_LIBRARY",
    "type" : "int",
    "comment" : "\n         * An error happened within the crypto library used by the drm plugin.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_GENERIC_OEM",
    "type" : "int",
    "comment" : "\n         * Unexpected error reported by the device OEM subsystem.\n         * <p>\n         * Please see the general error handling strategy for unexpected errors\n         * described in {@link ErrorCodes}.\n         ",
    "links" : [ "ErrorCodes" ]
  }, {
    "name" : "ERROR_GENERIC_PLUGIN",
    "type" : "int",
    "comment" : "\n         * Unexpected internal failure in {@link MediaDrm}/{@link MediaCrypto}.\n         * <p>\n         * Please see the general error handling strategy for unexpected errors\n         * described in {@link ErrorCodes}.\n         ",
    "links" : [ "ErrorCodes", "android.media.MediaDrm", "android.media.MediaCrypto" ]
  }, {
    "name" : "ERROR_INIT_DATA",
    "type" : "int",
    "comment" : "\n         * The init data parameter passed to {@link MediaDrm#getKeyRequest} is\n         * empty or invalid.\n         * <p>\n         * Init data is typically obtained from {@link\n         * MediaExtractor#getPsshInfo()} or {@link\n         * MediaExtractor#getDrmInitData()}. Check with the {@link MediaDrm}\n         * plugin vendor for the expected init data format.\n         ",
    "links" : [ "android.media.MediaExtractor#getPsshInfo()", "android.media.MediaDrm#getKeyRequest", "android.media.MediaDrm", "android.media.MediaExtractor#getDrmInitData()" ]
  }, {
    "name" : "ERROR_KEY_NOT_LOADED",
    "type" : "int",
    "comment" : "\n         * Either the key was not loaded from the license before attempting the\n         * operation, or the key ID parameter provided by the app is incorrect.\n         * <p>\n         * Ensure the proper keys are in the license, and check the key ID\n         * parameter provided by the app is correct. Check with the {@link\n         * MediaDrm} plugin vendor for the expected license format.\n         ",
    "links" : [ "android.media.MediaDrm" ]
  }, {
    "name" : "ERROR_LICENSE_PARSE",
    "type" : "int",
    "comment" : "\n         * The license response was empty, fields are missing or otherwise\n         * unable to be parsed or decrypted.\n         * <p>\n         * Check for mistakes such as empty or overwritten buffers. Otherwise,\n         * check with the {@link MediaDrm} plugin vendor for the expected\n         * license format.\n         ",
    "links" : [ "android.media.MediaDrm" ]
  }, {
    "name" : "ERROR_LICENSE_POLICY",
    "type" : "int",
    "comment" : "\n         * The operation (e.g. to renew or persist a license) is prohibited by\n         * the license policy.\n         * <p>\n         * Check the license policy configuration on the license server.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_LICENSE_RELEASE",
    "type" : "int",
    "comment" : "\n         * Failed to generate a release request because a field in the offline\n         * license is empty or malformed.\n         * <p>\n         * The license can't be released on the server, but the app may remove\n         * the offline license explicitly using {@link\n         * MediaDrm#removeOfflineLicense}.\n         ",
    "links" : [ "android.media.MediaDrm#removeOfflineLicense" ]
  }, {
    "name" : "ERROR_LICENSE_REQUEST_REJECTED",
    "type" : "int",
    "comment" : "\n         * The license server detected an error in the license request.\n         * <p>\n         * Check for errors on the license server.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_LICENSE_RESTORE",
    "type" : "int",
    "comment" : "\n         * Failed to restore an offline license because a field in the offline\n         * license is empty or malformed.\n         * <p>\n         * Try requesting the license again if the device is online.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_LICENSE_STATE",
    "type" : "int",
    "comment" : "\n         * Offline license is in an invalid state for the attempted operation.\n         * <p>\n         * Check the sequence of API calls made that can affect offline license\n         * state. For example, this could happen when the app attempts to\n         * restore a license after it has been released.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_MEDIA_FRAMEWORK",
    "type" : "int",
    "comment" : "\n         * Failure in the media framework.\n         * <p>\n         * Try releasing media resources (e.g. {@link MediaCodec}, {@link\n         * MediaDrm}), and restarting playback.\n         ",
    "links" : [ "android.media.MediaCodec", "android.media.MediaDrm" ]
  }, {
    "name" : "ERROR_PROVISIONING_CERTIFICATE",
    "type" : "int",
    "comment" : "\n         * Error loading the provisioned certificate.\n         * <p>\n         * Re-provisioning may resolve the problem; check with the {@link\n         * MediaDrm} plugin vendor for re-provisioning instructions. Otherwise,\n         * using a different security level may resolve the issue.\n         ",
    "links" : [ "android.media.MediaDrm" ]
  }, {
    "name" : "ERROR_PROVISIONING_CONFIG",
    "type" : "int",
    "comment" : "\n         * Required steps were not performed before provisioning was attempted.\n         * <p>\n         * Ask the {@link MediaDrm} plugin vendor for situations where this\n         * error may occur.\n         ",
    "links" : [ "android.media.MediaDrm" ]
  }, {
    "name" : "ERROR_PROVISIONING_PARSE",
    "type" : "int",
    "comment" : "\n         * The provisioning response was empty, fields are missing or otherwise\n         * unable to be parsed.\n         * <p>\n         * Check for mistakes such as empty or overwritten buffers. Otherwise,\n         * check with the {@link MediaDrm} plugin vendor for the expected\n         * provisioning response format.\n         ",
    "links" : [ "android.media.MediaDrm" ]
  }, {
    "name" : "ERROR_PROVISIONING_REQUEST_REJECTED",
    "type" : "int",
    "comment" : "\n         * The provisioning server detected an error in the provisioning\n         * request.\n         * <p>\n         * Check for errors on the provisioning server.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_PROVISIONING_RETRY",
    "type" : "int",
    "comment" : "\n         * Provisioning failed in a way that is likely to succeed on a\n         * subsequent attempt.\n         * <p>\n         * The app should retry the operation.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RESOURCE_CONTENTION",
    "type" : "int",
    "comment" : "\n         * This indicates that apps using MediaDrm sessions are\n         * temporarily exceeding the capacity of available crypto\n         * resources.\n         * <p>\n         * The app should retry the operation later.\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SECURE_STOP_RELEASE",
    "type" : "int",
    "comment" : "\n         * Failed to generate a secure stop request because a field in the\n         * stored license is empty or malformed.\n         * <p>\n         * The secure stop can't be released on the server, but the app may\n         * remove it explicitly using {@link MediaDrm#removeSecureStop}.\n         ",
    "links" : [ "android.media.MediaDrm#removeSecureStop" ]
  }, {
    "name" : "ERROR_STORAGE_READ",
    "type" : "int",
    "comment" : "\n         * The plugin was unable to read data from the filesystem.\n         * <p>\n         * Please see the general error handling strategy for unexpected errors\n         * described in {@link ErrorCodes}.\n         ",
    "links" : [ "ErrorCodes" ]
  }, {
    "name" : "ERROR_STORAGE_WRITE",
    "type" : "int",
    "comment" : "\n         * The plugin was unable to write data to the filesystem.\n         * <p>\n         * Please see the general error handling strategy for unexpected errors\n         * described in {@link ErrorCodes}.\n         ",
    "links" : [ "ErrorCodes" ]
  }, {
    "name" : "ERROR_ZERO_SUBSAMPLES",
    "type" : "int",
    "comment" : "\n         * {@link MediaCodec#queueSecureInputBuffer} called with 0 subsamples.\n         * <p>\n         * Check the {@link MediaCodec.CryptoInfo} object passed to {@link\n         * MediaCodec#queueSecureInputBuffer}.\n         ",
    "links" : [ "android.media.MediaCodec#queueSecureInputBuffer", "MediaCodec.CryptoInfo" ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "ERROR_UNKNOWN", "ERROR_NO_KEY", "ERROR_KEY_EXPIRED", "ERROR_RESOURCE_BUSY", "ERROR_INSUFFICIENT_OUTPUT_PROTECTION", "ERROR_SESSION_NOT_OPENED", "ERROR_UNSUPPORTED_OPERATION", "ERROR_INSUFFICIENT_SECURITY", "ERROR_FRAME_TOO_LARGE", "ERROR_LOST_STATE", "ERROR_CERTIFICATE_MALFORMED", "ERROR_CERTIFICATE_MISSING", "ERROR_CRYPTO_LIBRARY", "ERROR_GENERIC_OEM", "ERROR_GENERIC_PLUGIN", "ERROR_INIT_DATA", "ERROR_KEY_NOT_LOADED", "ERROR_LICENSE_PARSE", "ERROR_LICENSE_POLICY", "ERROR_LICENSE_RELEASE", "ERROR_LICENSE_REQUEST_REJECTED", "ERROR_LICENSE_RESTORE", "ERROR_LICENSE_STATE", "ERROR_MEDIA_FRAMEWORK", "ERROR_PROVISIONING_CERTIFICATE", "ERROR_PROVISIONING_CONFIG", "ERROR_PROVISIONING_PARSE", "ERROR_PROVISIONING_REQUEST_REJECTED", "ERROR_PROVISIONING_RETRY", "ERROR_RESOURCE_CONTENTION", "ERROR_SECURE_STOP_RELEASE", "ERROR_STORAGE_READ", "ERROR_STORAGE_WRITE", "ERROR_ZERO_SUBSAMPLES" ]
}