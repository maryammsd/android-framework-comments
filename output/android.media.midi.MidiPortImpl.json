{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/midi/MidiPortImpl.java",
  "packageName" : "android.media.midi",
  "className" : "MidiPortImpl",
  "comment" : " package ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PACKET_TYPE_DATA",
    "type" : "int",
    "comment" : "\n     * Packet type for data packet\n     ",
    "links" : [ ]
  }, {
    "name" : "PACKET_TYPE_FLUSH",
    "type" : "int",
    "comment" : "\n     * Packet type for flush packet\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_PACKET_SIZE",
    "type" : "int",
    "comment" : "\n     * Maximum size of a packet that can be passed between processes.\n     ",
    "links" : [ ]
  }, {
    "name" : "TIMESTAMP_SIZE",
    "type" : "int",
    "comment" : "\n     * size of message timestamp in bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_PACKET_OVERHEAD",
    "type" : "int",
    "comment" : "\n     * Data packet overhead is timestamp size plus packet type byte\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_PACKET_DATA_SIZE",
    "type" : "int",
    "comment" : "\n     * Maximum amount of MIDI data that can be included in a packet\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int packData(byte[] message, int offset, int size, long timestamp, byte[] dest)",
    "returnType" : "int",
    "comment" : "\n     * Utility function for packing MIDI data to be passed between processes\n     *\n     * message byte array contains variable length MIDI message.\n     * messageSize is size of variable length MIDI message\n     * timestamp is message timestamp to pack\n     * dest is buffer to pack into\n     * returns size of packed message\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int packFlush(byte[] dest)",
    "returnType" : "int",
    "comment" : "\n     * Utility function for packing a flush command to be passed between processes\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getPacketType(byte[] buffer, int bufferLength)",
    "returnType" : "int",
    "comment" : "\n     * Returns the packet type (PACKET_TYPE_DATA or PACKET_TYPE_FLUSH)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getDataOffset(byte[] buffer, int bufferLength)",
    "returnType" : "int",
    "comment" : "\n     * Utility function for unpacking MIDI data received from other process\n     * returns the offset of the MIDI message in packed buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getDataSize(byte[] buffer, int bufferLength)",
    "returnType" : "int",
    "comment" : "\n     * Utility function for unpacking MIDI data received from other process\n     * returns size of MIDI data in packed buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getPacketTimestamp(byte[] buffer, int bufferLength)",
    "returnType" : "long",
    "comment" : "\n     * Utility function for unpacking MIDI data received from other process\n     * unpacks timestamp from packed buffer\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int packData(byte[] message, int offset, int size, long timestamp, byte[] dest)", "public static int packFlush(byte[] dest)", "public static int getPacketType(byte[] buffer, int bufferLength)", "public static int getDataOffset(byte[] buffer, int bufferLength)", "public static int getDataSize(byte[] buffer, int bufferLength)", "public static long getPacketTimestamp(byte[] buffer, int bufferLength)" ],
  "variableNames" : [ "TAG", "PACKET_TYPE_DATA", "PACKET_TYPE_FLUSH", "MAX_PACKET_SIZE", "TIMESTAMP_SIZE", "DATA_PACKET_OVERHEAD", "MAX_PACKET_DATA_SIZE" ]
}