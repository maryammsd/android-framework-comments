{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/dreams/DreamOverlayService.java",
  "packageName" : "android.service.dreams",
  "className" : "DreamOverlayService",
  "comment" : "\n * Basic implementation of for {@link IDreamOverlay} for testing.\n * @hide\n ",
  "links" : [ "IDreamOverlay" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentClient",
    "type" : "OverlayClient",
    "comment" : " The last client that started dreaming and hasn't ended",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "\n     * Executor used to run callbacks that subclasses will implement. Any calls coming over Binder\n     * from {@link OverlayClient} should perform the work they need to do on this executor.\n     ",
    "links" : [ "OverlayClient" ]
  }, {
    "name" : "mDreamOverlay",
    "type" : "IDreamOverlay",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void startDream(OverlayClient client, WindowManager.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void endDream(OverlayClient client)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void endDreamInternal(OverlayClient client)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void wakeUp(OverlayClient client)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void comeToFront(OverlayClient client)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onStartDream(@NonNull WindowManager.LayoutParams layoutParams)",
    "returnType" : "void",
    "comment" : "\n     * This method is overridden by implementations to handle when the dream has started and the\n     * window is ready to be interacted with.\n     *\n     * This callback will be run on the {@link Executor} provided in the constructor if provided, or\n     * on the main executor if none was provided.\n     *\n     * @param layoutParams The {@link android.view.WindowManager.LayoutParams} associated with the\n     *                     dream window.\n     ",
    "links" : [ "java.util.concurrent.Executor", "android.view.WindowManager.LayoutParams" ]
  }, {
    "name" : "public void onWakeUp()",
    "returnType" : "void",
    "comment" : "\n     * This method is overridden by implementations to handle when the dream has been requested\n     * to wakeup.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onComeToFront()",
    "returnType" : "void",
    "comment" : "\n     * This method is overridden by implementations to handle when the dream is coming to the front\n     * (after having lost focus to something on top of it).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onEndDream()",
    "returnType" : "void",
    "comment" : "\n     * This method is overridden by implementations to handle when the dream has ended. There may\n     * be earlier signals leading up to this step, such as @{@link #onWakeUp(Runnable)}.\n     *\n     * This callback will be run on the {@link Executor} provided in the constructor if provided, or\n     * on the main executor if none was provided.\n     ",
    "links" : [ "#onWakeUp(Runnable)", "java.util.concurrent.Executor" ]
  }, {
    "name" : "public final void requestExit()",
    "returnType" : "void",
    "comment" : "\n     * This method is invoked to request the dream exit.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void redirectWake(boolean redirect)",
    "returnType" : "void",
    "comment" : "\n     * Called to inform the dream to redirect waking to this overlay rather than exiting.\n     * @param redirect {@code true} if waking up should be redirected. {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onWakeRequested()",
    "returnType" : "void",
    "comment" : "\n     * Invoked when the dream has requested to exit. This is only called if the dream overlay\n     * has explicitly requested exits to be redirected via {@link #redirectWake(boolean)}.\n     *\n     * @hide\n     ",
    "links" : [ "#redirectWake(boolean)" ]
  }, {
    "name" : "public final boolean shouldShowComplications()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether to show complications on the dream overlay.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ComponentName getDreamComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the active dream component.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void startDream(OverlayClient client, WindowManager.LayoutParams params)", "private void endDream(OverlayClient client)", "private void endDreamInternal(OverlayClient client)", "private void wakeUp(OverlayClient client)", "private void comeToFront(OverlayClient client)", "public void onCreate()", "public final IBinder onBind(@NonNull Intent intent)", "public abstract void onStartDream(@NonNull WindowManager.LayoutParams layoutParams)", "public void onWakeUp()", "public void onComeToFront()", "public void onEndDream()", "public final void requestExit()", "public final void redirectWake(boolean redirect)", "public void onWakeRequested()", "public final boolean shouldShowComplications()", "public final ComponentName getDreamComponent()" ],
  "variableNames" : [ "TAG", "DEBUG", "mCurrentClient", "mExecutor", "mDreamOverlay" ]
}