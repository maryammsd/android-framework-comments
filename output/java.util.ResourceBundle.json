{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/ResourceBundle.java",
  "packageName" : "java.util",
  "className" : "ResourceBundle",
  "comment" : "\n *\n * Resource bundles contain locale-specific objects.  When your program needs a\n * locale-specific resource, a <code>String</code> for example, your program can\n * load it from the resource bundle that is appropriate for the current user's\n * locale. In this way, you can write program code that is largely independent\n * of the user's locale isolating most, if not all, of the locale-specific\n * information in resource bundles.\n *\n * <p>\n * This allows you to write programs that can:\n * <UL>\n * <LI> be easily localized, or translated, into different languages\n * <LI> handle multiple locales at once\n * <LI> be easily modified later to support even more locales\n * </UL>\n *\n * <P>\n * Resource bundles belong to families whose members share a common base\n * name, but whose names also have additional components that identify\n * their locales. For example, the base name of a family of resource\n * bundles might be \"MyResources\". The family should have a default\n * resource bundle which simply has the same name as its family -\n * \"MyResources\" - and will be used as the bundle of last resort if a\n * specific locale is not supported. The family can then provide as\n * many locale-specific members as needed, for example a German one\n * named \"MyResources_de\".\n *\n * <P>\n * Each resource bundle in a family contains the same items, but the items have\n * been translated for the locale represented by that resource bundle.\n * For example, both \"MyResources\" and \"MyResources_de\" may have a\n * <code>String</code> that's used on a button for canceling operations.\n * In \"MyResources\" the <code>String</code> may contain \"Cancel\" and in\n * \"MyResources_de\" it may contain \"Abbrechen\".\n *\n * <P>\n * If there are different resources for different countries, you\n * can make specializations: for example, \"MyResources_de_CH\" contains objects for\n * the German language (de) in Switzerland (CH). If you want to only\n * modify some of the resources\n * in the specialization, you can do so.\n *\n * <P>\n * When your program needs a locale-specific object, it loads\n * the <code>ResourceBundle</code> class using the\n * {@link #getBundle(java.lang.String, java.util.Locale) getBundle}\n * method:\n * <blockquote>\n * <pre>\n * ResourceBundle myResources =\n *      ResourceBundle.getBundle(\"MyResources\", currentLocale);\n * </pre>\n * </blockquote>\n *\n * <P>\n * Resource bundles contain key/value pairs. The keys uniquely\n * identify a locale-specific object in the bundle. Here's an\n * example of a <code>ListResourceBundle</code> that contains\n * two key/value pairs:\n * <blockquote>\n * <pre>\n * public class MyResources extends ListResourceBundle {\n *     protected Object[][] getContents() {\n *         return new Object[][] {\n *             // LOCALIZE THE SECOND STRING OF EACH ARRAY (e.g., \"OK\")\n *             {\"OkKey\", \"OK\"},\n *             {\"CancelKey\", \"Cancel\"},\n *             // END OF MATERIAL TO LOCALIZE\n *        };\n *     }\n * }\n * </pre>\n * </blockquote>\n * Keys are always <code>String</code>s.\n * In this example, the keys are \"OkKey\" and \"CancelKey\".\n * In the above example, the values\n * are also <code>String</code>s--\"OK\" and \"Cancel\"--but\n * they don't have to be. The values can be any type of object.\n *\n * <P>\n * You retrieve an object from resource bundle using the appropriate\n * getter method. Because \"OkKey\" and \"CancelKey\"\n * are both strings, you would use <code>getString</code> to retrieve them:\n * <blockquote>\n * <pre>\n * button1 = new Button(myResources.getString(\"OkKey\"));\n * button2 = new Button(myResources.getString(\"CancelKey\"));\n * </pre>\n * </blockquote>\n * The getter methods all require the key as an argument and return\n * the object if found. If the object is not found, the getter method\n * throws a <code>MissingResourceException</code>.\n *\n * <P>\n * Besides <code>getString</code>, <code>ResourceBundle</code> also provides\n * a method for getting string arrays, <code>getStringArray</code>,\n * as well as a generic <code>getObject</code> method for any other\n * type of object. When using <code>getObject</code>, you'll\n * have to cast the result to the appropriate type. For example:\n * <blockquote>\n * <pre>\n * int[] myIntegers = (int[]) myResources.getObject(\"intList\");\n * </pre>\n * </blockquote>\n *\n * <P>\n * The Java Platform provides two subclasses of <code>ResourceBundle</code>,\n * <code>ListResourceBundle</code> and <code>PropertyResourceBundle</code>,\n * that provide a fairly simple way to create resources.\n * As you saw briefly in a previous example, <code>ListResourceBundle</code>\n * manages its resource as a list of key/value pairs.\n * <code>PropertyResourceBundle</code> uses a properties file to manage\n * its resources.\n *\n * <p>\n * If <code>ListResourceBundle</code> or <code>PropertyResourceBundle</code>\n * do not suit your needs, you can write your own <code>ResourceBundle</code>\n * subclass.  Your subclasses must override two methods: <code>handleGetObject</code>\n * and <code>getKeys()</code>.\n *\n * <p>\n * The implementation of a {@code ResourceBundle} subclass must be thread-safe\n * if it's simultaneously used by multiple threads. The default implementations\n * of the non-abstract methods in this class, and the methods in the direct\n * known concrete subclasses {@code ListResourceBundle} and\n * {@code PropertyResourceBundle} are thread-safe.\n *\n * <h3>ResourceBundle.Control</h3>\n *\n * The {@link ResourceBundle.Control} class provides information necessary\n * to perform the bundle loading process by the <code>getBundle</code>\n * factory methods that take a <code>ResourceBundle.Control</code>\n * instance. You can implement your own subclass in order to enable\n * non-standard resource bundle formats, change the search strategy, or\n * define caching parameters. Refer to the descriptions of the class and the\n * {@link #getBundle(String, Locale, ClassLoader, Control) getBundle}\n * factory method for details.\n *\n * <h3>Cache Management</h3>\n *\n * Resource bundle instances created by the <code>getBundle</code> factory\n * methods are cached by default, and the factory methods return the same\n * resource bundle instance multiple times if it has been\n * cached. <code>getBundle</code> clients may clear the cache, manage the\n * lifetime of cached resource bundle instances using time-to-live values,\n * or specify not to cache resource bundle instances. Refer to the\n * descriptions of the {@linkplain #getBundle(String, Locale, ClassLoader,\n * Control) <code>getBundle</code> factory method}, {@link\n * #clearCache(ClassLoader) clearCache}, {@link\n * Control#getTimeToLive(String, Locale)\n * ResourceBundle.Control.getTimeToLive}, and {@link\n * Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle,\n * long) ResourceBundle.Control.needsReload} for details.\n *\n * <h3>Example</h3>\n *\n * The following is a very simple example of a <code>ResourceBundle</code>\n * subclass, <code>MyResources</code>, that manages two resources (for a larger number of\n * resources you would probably use a <code>Map</code>).\n * Notice that you don't need to supply a value if\n * a \"parent-level\" <code>ResourceBundle</code> handles the same\n * key with the same value (as for the okKey below).\n * <blockquote>\n * <pre>\n * // default (English language, United States)\n * public class MyResources extends ResourceBundle {\n *     public Object handleGetObject(String key) {\n *         if (key.equals(\"okKey\")) return \"Ok\";\n *         if (key.equals(\"cancelKey\")) return \"Cancel\";\n *         return null;\n *     }\n *\n *     public Enumeration&lt;String&gt; getKeys() {\n *         return Collections.enumeration(keySet());\n *     }\n *\n *     // Overrides handleKeySet() so that the getKeys() implementation\n *     // can rely on the keySet() value.\n *     protected Set&lt;String&gt; handleKeySet() {\n *         return new HashSet&lt;String&gt;(Arrays.asList(\"okKey\", \"cancelKey\"));\n *     }\n * }\n *\n * // German language\n * public class MyResources_de extends MyResources {\n *     public Object handleGetObject(String key) {\n *         // don't need okKey, since parent level handles it.\n *         if (key.equals(\"cancelKey\")) return \"Abbrechen\";\n *         return null;\n *     }\n *\n *     protected Set&lt;String&gt; handleKeySet() {\n *         return new HashSet&lt;String&gt;(Arrays.asList(\"cancelKey\"));\n *     }\n * }\n * </pre>\n * </blockquote>\n * You do not have to restrict yourself to using a single family of\n * <code>ResourceBundle</code>s. For example, you could have a set of bundles for\n * exception messages, <code>ExceptionResources</code>\n * (<code>ExceptionResources_fr</code>, <code>ExceptionResources_de</code>, ...),\n * and one for widgets, <code>WidgetResource</code> (<code>WidgetResources_fr</code>,\n * <code>WidgetResources_de</code>, ...); breaking up the resources however you like.\n *\n * @see ListResourceBundle\n * @see PropertyResourceBundle\n * @see MissingResourceException\n * @since 1.1\n * @revised 9\n ",
  "links" : [ "#getBundle(java.lang.String", "#getBundle(String", "#getTimeToLive(String", "ResourceBundle.Control", "#clearCache(ClassLoader)", "#needsReload(String" ],
  "variables" : [ {
    "name" : "INITIAL_CACHE_SIZE",
    "type" : "int",
    "comment" : " initial size of the bundle cache ",
    "links" : [ ]
  }, {
    "name" : "NONEXISTENT_BUNDLE",
    "type" : "ResourceBundle",
    "comment" : " constant indicating that no resource bundle exists ",
    "links" : [ ]
  }, {
    "name" : "cacheList",
    "type" : "ConcurrentMap<CacheKey, BundleReference>",
    "comment" : "\n     * The cache is a map from cache keys (with bundle base name, locale, and\n     * class loader) to either a resource bundle or NONEXISTENT_BUNDLE wrapped by a\n     * BundleReference.\n     *\n     * The cache is a ConcurrentMap, allowing the cache to be searched\n     * concurrently by multiple threads.  This will also allow the cache keys\n     * to be reclaimed along with the ClassLoaders they reference.\n     *\n     * This variable would be better named \"cache\", but we keep the old\n     * name for compatibility with some workarounds for bug 4212439.\n     ",
    "links" : [ ]
  }, {
    "name" : "referenceQueue",
    "type" : "ReferenceQueue<Object>",
    "comment" : "\n     * Queue for reference objects referring to class loaders or bundles.\n     ",
    "links" : [ ]
  }, {
    "name" : "parent",
    "type" : "ResourceBundle",
    "comment" : "\n     * The parent bundle of this bundle.\n     * The parent bundle is searched by {@link #getObject getObject}\n     * when this bundle does not contain a particular resource.\n     ",
    "links" : [ "#getObject" ]
  }, {
    "name" : "locale",
    "type" : "Locale",
    "comment" : "\n     * The locale for this bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "\n     * The base bundle name for this bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "expired",
    "type" : "boolean",
    "comment" : "\n     * The flag indicating this bundle has expired in the cache.\n     ",
    "links" : [ ]
  }, {
    "name" : "cacheKey",
    "type" : "CacheKey",
    "comment" : "\n     * The back link to the cache key. null if this bundle isn't in\n     * the cache (yet) or has expired.\n     ",
    "links" : [ ]
  }, {
    "name" : "keySet",
    "type" : "Set<String>",
    "comment" : "\n     * A Set of the keys contained only in this ResourceBundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_FORMAT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRACE_ON",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getBaseBundleName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the base name of this bundle, if known, or {@code null} if unknown.\n     *\n     * If not null, then this is the value of the {@code baseName} parameter\n     * that was passed to the {@code ResourceBundle.getBundle(...)} method\n     * when the resource bundle was loaded.\n     *\n     * @return The base name of the resource bundle, as provided to and expected\n     * by the {@code ResourceBundle.getBundle(...)} methods.\n     *\n     * @see #getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)\n     *\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getString(String key)",
    "returnType" : "String",
    "comment" : "\n     * Gets a string for the given key from this resource bundle or one of its parents.\n     * Calling this method is equivalent to calling\n     * <blockquote>\n     * <code>(String) {@link #getObject(java.lang.String) getObject}(key)</code>.\n     * </blockquote>\n     *\n     * @param key the key for the desired string\n     * @exception NullPointerException if <code>key</code> is <code>null</code>\n     * @exception MissingResourceException if no object for the given key can be found\n     * @exception ClassCastException if the object found for the given key is not a string\n     * @return the string for the given key\n     ",
    "links" : [ "#getObject(java.lang.String)" ]
  }, {
    "name" : "public final String[] getStringArray(String key)",
    "returnType" : "String[]",
    "comment" : "\n     * Gets a string array for the given key from this resource bundle or one of its parents.\n     * Calling this method is equivalent to calling\n     * <blockquote>\n     * <code>(String[]) {@link #getObject(java.lang.String) getObject}(key)</code>.\n     * </blockquote>\n     *\n     * @param key the key for the desired string array\n     * @exception NullPointerException if <code>key</code> is <code>null</code>\n     * @exception MissingResourceException if no object for the given key can be found\n     * @exception ClassCastException if the object found for the given key is not a string array\n     * @return the string array for the given key\n     ",
    "links" : [ "#getObject(java.lang.String)" ]
  }, {
    "name" : "public final Object getObject(String key)",
    "returnType" : "Object",
    "comment" : "\n     * Gets an object for the given key from this resource bundle or one of its parents.\n     * This method first tries to obtain the object from this resource bundle using\n     * {@link #handleGetObject(java.lang.String) handleGetObject}.\n     * If not successful, and the parent resource bundle is not null,\n     * it calls the parent's <code>getObject</code> method.\n     * If still not successful, it throws a MissingResourceException.\n     *\n     * @param key the key for the desired object\n     * @exception NullPointerException if <code>key</code> is <code>null</code>\n     * @exception MissingResourceException if no object for the given key can be found\n     * @return the object for the given key\n     ",
    "links" : [ "#handleGetObject(java.lang.String)" ]
  }, {
    "name" : "public Locale getLocale()",
    "returnType" : "Locale",
    "comment" : "\n     * Returns the locale of this resource bundle. This method can be used after a\n     * call to getBundle() to determine whether the resource bundle returned really\n     * corresponds to the requested locale or is a fallback.\n     *\n     * @return the locale of this resource bundle\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ClassLoader getLoader(Class<?> caller)",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Automatic determination of the ClassLoader to be used to load\n     * resources on behalf of the client.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setParent(ResourceBundle parent)",
    "returnType" : "void",
    "comment" : "\n     * Sets the parent bundle of this bundle.\n     * The parent bundle is searched by {@link #getObject getObject}\n     * when this bundle does not contain a particular resource.\n     *\n     * @param parent this bundle's parent bundle.\n     ",
    "links" : [ "#getObject" ]
  }, {
    "name" : "public static final ResourceBundle getBundle(String baseName)",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Gets a resource bundle using the specified base name, the default locale,\n     * and the caller's class loader. Calling this method is equivalent to calling\n     * <blockquote>\n     * <code>getBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader())</code>,\n     * </blockquote>\n     *\n     * @param baseName the base name of the resource bundle, a fully qualified class name\n     * @exception java.lang.NullPointerException\n     *     if <code>baseName</code> is <code>null</code>\n     * @exception MissingResourceException\n     *     if no resource bundle for the specified base name can be found\n     * @return a resource bundle for the given base name and the default locale\n     *\n     * @see <a href=\"#default_behavior\">Resource Bundle Search and Loading Strategy</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ResourceBundle getBundle(String baseName, Control control)",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Returns a resource bundle using the specified base name, the\n     * default locale and the specified control. Calling this method\n     * is equivalent to calling\n     * <pre>\n     * getBundle(baseName, Locale.getDefault(),\n     *           this.getClass().getClassLoader(), control),\n     * </pre>\n     * except that <code>getClassLoader()</code> is run with the security\n     * privileges of <code>ResourceBundle</code>.  See {@link\n     * #getBundle(String, Locale, ClassLoader, Control) getBundle} for the\n     * complete description of the resource bundle loading process with a\n     * <code>ResourceBundle.Control</code>.\n     *\n     * @param baseName\n     *        the base name of the resource bundle, a fully qualified class\n     *        name\n     * @param control\n     *        the control which gives information for the resource bundle\n     *        loading process\n     * @return a resource bundle for the given base name and the default locale\n     * @throws NullPointerException\n     *         if <code>baseName</code> or <code>control</code> is\n     *         <code>null</code>\n     * @throws MissingResourceException\n     *         if no resource bundle for the specified base name can be found\n     * @throws IllegalArgumentException\n     *         if the given <code>control</code> doesn't perform properly\n     *         (e.g., <code>control.getCandidateLocales</code> returns null.)\n     *         Note that validation of <code>control</code> is performed as\n     *         needed.\n     * @since 1.6\n     * @revised 9\n     ",
    "links" : [ "#getBundle(String" ]
  }, {
    "name" : "public static final ResourceBundle getBundle(String baseName, Locale locale)",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Gets a resource bundle using the specified base name and locale,\n     * and the caller's class loader. Calling this method is equivalent to calling\n     * <blockquote>\n     * <code>getBundle(baseName, locale, this.getClass().getClassLoader())</code>,\n     * </blockquote>\n     *\n     * @param baseName\n     *        the base name of the resource bundle, a fully qualified class name\n     * @param locale\n     *        the locale for which a resource bundle is desired\n     * @exception NullPointerException\n     *        if <code>baseName</code> or <code>locale</code> is <code>null</code>\n     * @exception MissingResourceException\n     *        if no resource bundle for the specified base name can be found\n     * @return a resource bundle for the given base name and locale\n     *\n     * @see <a href=\"#default_behavior\">Resource Bundle Search and Loading Strategy</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ResourceBundle getBundle(String baseName, Locale targetLocale, Control control)",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Returns a resource bundle using the specified base name, target\n     * locale and control, and the caller's class loader. Calling this\n     * method is equivalent to calling\n     * <pre>\n     * getBundle(baseName, targetLocale, this.getClass().getClassLoader(),\n     *           control),\n     * </pre>\n     * except that <code>getClassLoader()</code> is run with the security\n     * privileges of <code>ResourceBundle</code>.  See {@link\n     * #getBundle(String, Locale, ClassLoader, Control) getBundle} for the\n     * complete description of the resource bundle loading process with a\n     * <code>ResourceBundle.Control</code>.\n     *\n     * @param baseName\n     *        the base name of the resource bundle, a fully qualified\n     *        class name\n     * @param targetLocale\n     *        the locale for which a resource bundle is desired\n     * @param control\n     *        the control which gives information for the resource\n     *        bundle loading process\n     * @return a resource bundle for the given base name and a\n     *         <code>Locale</code> in <code>locales</code>\n     * @throws NullPointerException\n     *         if <code>baseName</code>, <code>locales</code> or\n     *         <code>control</code> is <code>null</code>\n     * @throws MissingResourceException\n     *         if no resource bundle for the specified base name in any\n     *         of the <code>locales</code> can be found.\n     * @throws IllegalArgumentException\n     *         if the given <code>control</code> doesn't perform properly\n     *         (e.g., <code>control.getCandidateLocales</code> returns null.)\n     *         Note that validation of <code>control</code> is performed as\n     *         needed.\n     * @since 1.6\n     * @revised 9\n     ",
    "links" : [ "#getBundle(String" ]
  }, {
    "name" : "public static ResourceBundle getBundle(String baseName, Locale locale, ClassLoader loader)",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Gets a resource bundle using the specified base name, locale, and class\n     * loader.\n     *\n     * This is equivalent to calling:\n     * <blockquote><pre>\n     * getBundle(baseName, targetLocale, loader, control)\n     * </pre></blockquote>\n     * passing a default instance of {@link Control}.\n     * Refer to the\n     * description of <a href=\"#modify_default_behavior\">modifying the default\n     * behavior</a>. The following describes the default behavior.\n     *\n     * <p>\n     * <b><a id=\"default_behavior\">Resource Bundle Search and Loading Strategy</a></b>\n     *\n     * <p><code>getBundle</code> uses the base name, the specified locale, and\n     * the default locale (obtained from {@link java.util.Locale#getDefault()\n     * Locale.getDefault}) to generate a sequence of <a\n     * id=\"candidates\"><em>candidate bundle names</em></a>.  If the specified\n     * locale's language, script, country, and variant are all empty strings,\n     * then the base name is the only candidate bundle name.  Otherwise, a list\n     * of candidate locales is generated from the attribute values of the\n     * specified locale (language, script, country and variant) and appended to\n     * the base name.  Typically, this will look like the following:\n     *\n     * <pre>\n     *     baseName + \"_\" + language + \"_\" + script + \"_\" + country + \"_\" + variant\n     *     baseName + \"_\" + language + \"_\" + script + \"_\" + country\n     *     baseName + \"_\" + language + \"_\" + script\n     *     baseName + \"_\" + language + \"_\" + country + \"_\" + variant\n     *     baseName + \"_\" + language + \"_\" + country\n     *     baseName + \"_\" + language\n     * </pre>\n     *\n     * <p>Candidate bundle names where the final component is an empty string\n     * are omitted, along with the underscore.  For example, if country is an\n     * empty string, the second and the fifth candidate bundle names above\n     * would be omitted.  Also, if script is an empty string, the candidate names\n     * including script are omitted.  For example, a locale with language \"de\"\n     * and variant \"JAVA\" will produce candidate names with base name\n     * \"MyResource\" below.\n     *\n     * <pre>\n     *     MyResource_de__JAVA\n     *     MyResource_de\n     * </pre>\n     *\n     * In the case that the variant contains one or more underscores ('_'), a\n     * sequence of bundle names generated by truncating the last underscore and\n     * the part following it is inserted after a candidate bundle name with the\n     * original variant.  For example, for a locale with language \"en\", script\n     * \"Latn, country \"US\" and variant \"WINDOWS_VISTA\", and bundle base name\n     * \"MyResource\", the list of candidate bundle names below is generated:\n     *\n     * <pre>\n     * MyResource_en_Latn_US_WINDOWS_VISTA\n     * MyResource_en_Latn_US_WINDOWS\n     * MyResource_en_Latn_US\n     * MyResource_en_Latn\n     * MyResource_en_US_WINDOWS_VISTA\n     * MyResource_en_US_WINDOWS\n     * MyResource_en_US\n     * MyResource_en\n     * </pre>\n     *\n     * <blockquote><b>Note:</b> For some <code>Locale</code>s, the list of\n     * candidate bundle names contains extra names, or the order of bundle names\n     * is slightly modified.  See the description of the default implementation\n     * of {@link Control#getCandidateLocales(String, Locale)\n     * getCandidateLocales} for details.</blockquote>\n     *\n     * <p><code>getBundle</code> then iterates over the candidate bundle names\n     * to find the first one for which it can <em>instantiate</em> an actual\n     * resource bundle. It uses the default controls' {@link Control#getFormats\n     * getFormats} method, which generates two bundle names for each generated\n     * name, the first a class name and the second a properties file name. For\n     * each candidate bundle name, it attempts to create a resource bundle:\n     *\n     * <ul><li>First, it attempts to load a class using the generated class name.\n     * If such a class can be found and loaded using the specified class\n     * loader, is assignment compatible with ResourceBundle, is accessible from\n     * ResourceBundle, and can be instantiated, <code>getBundle</code> creates a\n     * new instance of this class and uses it as the <em>result resource\n     * bundle</em>.\n     *\n     * <li>Otherwise, <code>getBundle</code> attempts to locate a property\n     * resource file using the generated properties file name.  It generates a\n     * path name from the candidate bundle name by replacing all \".\" characters\n     * with \"/\" and appending the string \".properties\".  It attempts to find a\n     * \"resource\" with this name using {@link\n     * java.lang.ClassLoader#getResource(java.lang.String)\n     * ClassLoader.getResource}.  (Note that a \"resource\" in the sense of\n     * <code>getResource</code> has nothing to do with the contents of a\n     * resource bundle, it is just a container of data, such as a file.)  If it\n     * finds a \"resource\", it attempts to create a new {@link\n     * PropertyResourceBundle} instance from its contents.  If successful, this\n     * instance becomes the <em>result resource bundle</em>.  </ul>\n     *\n     * <p>This continues until a result resource bundle is instantiated or the\n     * list of candidate bundle names is exhausted.  If no matching resource\n     * bundle is found, the default control's {@link Control#getFallbackLocale\n     * getFallbackLocale} method is called, which returns the current default\n     * locale.  A new sequence of candidate locale names is generated using this\n     * locale and searched again, as above.\n     *\n     * <p>If still no result bundle is found, the base name alone is looked up. If\n     * this still fails, a <code>MissingResourceException</code> is thrown.\n     *\n     * <p><a id=\"parent_chain\"> Once a result resource bundle has been found,\n     * its <em>parent chain</em> is instantiated</a>.  If the result bundle already\n     * has a parent (perhaps because it was returned from a cache) the chain is\n     * complete.\n     *\n     * <p>Otherwise, <code>getBundle</code> examines the remainder of the\n     * candidate locale list that was used during the pass that generated the\n     * result resource bundle.  (As before, candidate bundle names where the\n     * final component is an empty string are omitted.)  When it comes to the\n     * end of the candidate list, it tries the plain bundle name.  With each of the\n     * candidate bundle names it attempts to instantiate a resource bundle (first\n     * looking for a class and then a properties file, as described above).\n     *\n     * <p>Whenever it succeeds, it calls the previously instantiated resource\n     * bundle's {@link #setParent(java.util.ResourceBundle) setParent} method\n     * with the new resource bundle.  This continues until the list of names\n     * is exhausted or the current bundle already has a non-null parent.\n     *\n     * <p>Once the parent chain is complete, the bundle is returned.\n     *\n     * <p><b>Note:</b> <code>getBundle</code> caches instantiated resource\n     * bundles and might return the same resource bundle instance multiple times.\n     *\n     * <p><b>Note:</b>The <code>baseName</code> argument should be a fully\n     * qualified class name. However, for compatibility with earlier versions,\n     * Java SE Runtime Environments do not verify this, and so it is\n     * possible to access <code>PropertyResourceBundle</code>s by specifying a\n     * path name (using \"/\") instead of a fully qualified class name (using\n     * \".\").\n     *\n     * <p><a id=\"default_behavior_example\">\n     * <strong>Example:</strong></a>\n     * <p>\n     * The following class and property files are provided:\n     * <ul>\n     *     <li>MyResources.class\n     *     <li>MyResources.properties\n     *     <li>MyResources_fr.properties\n     *     <li>MyResources_fr_CH.class\n     *     <li>MyResources_fr_CH.properties\n     *     <li>MyResources_en.properties\n     *     <li>MyResources_es_ES.class\n     * </ul>\n     *\n     * The contents of all files are valid (that is, public non-abstract\n     * subclasses of <code>ResourceBundle</code> for the \".class\" files,\n     * syntactically correct \".properties\" files).  The default locale is\n     * <code>Locale(\"en\", \"GB\")</code>.\n     *\n     * <p>Calling <code>getBundle</code> with the locale arguments below will\n     * instantiate resource bundles as follows:\n     *\n     * <table class=\"striped\">\n     * <caption style=\"display:none\">getBundle() locale to resource bundle mapping</caption>\n     * <thead>\n     * <tr><th scope=\"col\">Locale</th><th scope=\"col\">Resource bundle</th></tr>\n     * </thead>\n     * <tbody>\n     * <tr><th scope=\"row\">Locale(\"fr\", \"CH\")</th><td>MyResources_fr_CH.class, parent MyResources_fr.properties, parent MyResources.class</td></tr>\n     * <tr><th scope=\"row\">Locale(\"fr\", \"FR\")</th><td>MyResources_fr.properties, parent MyResources.class</td></tr>\n     * <tr><th scope=\"row\">Locale(\"de\", \"DE\")</th><td>MyResources_en.properties, parent MyResources.class</td></tr>\n     * <tr><th scope=\"row\">Locale(\"en\", \"US\")</th><td>MyResources_en.properties, parent MyResources.class</td></tr>\n     * <tr><th scope=\"row\">Locale(\"es\", \"ES\")</th><td>MyResources_es_ES.class, parent MyResources.class</td></tr>\n     * </tbody>\n     * </table>\n     *\n     * <p>The file MyResources_fr_CH.properties is never used because it is\n     * hidden by the MyResources_fr_CH.class. Likewise, MyResources.properties\n     * is also hidden by MyResources.class.\n     *\n     * @param baseName the base name of the resource bundle, a fully qualified class name\n     * @param locale the locale for which a resource bundle is desired\n     * @param loader the class loader from which to load the resource bundle\n     * @return a resource bundle for the given base name and locale\n     * @exception java.lang.NullPointerException\n     *        if <code>baseName</code>, <code>locale</code>, or <code>loader</code> is <code>null</code>\n     * @exception MissingResourceException\n     *        if no resource bundle for the specified base name can be found\n     * @since 1.2\n     * @revised 9\n     ",
    "links" : [ "Control", "#getFormatsgetFormats", "#setParent(java.util.ResourceBundle)", "java.util.Locale#getDefault()", "java.util.PropertyResourceBundle", "java.lang.ClassLoader#getResource(java.lang.String)", "#getCandidateLocales(String", "#getFallbackLocalegetFallbackLocale" ]
  }, {
    "name" : "public static ResourceBundle getBundle(String baseName, Locale targetLocale, ClassLoader loader, Control control)",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Returns a resource bundle using the specified base name, target\n     * locale, class loader and control. Unlike the {@link\n     * #getBundle(String, Locale, ClassLoader) getBundle}\n     * factory methods with no {@code control} argument, the given\n     * <code>control</code> specifies how to locate and instantiate resource\n     * bundles. Conceptually, the bundle loading process with the given\n     * <code>control</code> is performed in the following steps.\n     *\n     * <ol>\n     * <li>This factory method looks up the resource bundle in the cache for\n     * the specified <code>baseName</code>, <code>targetLocale</code> and\n     * <code>loader</code>.  If the requested resource bundle instance is\n     * found in the cache and the time-to-live periods of the instance and\n     * all of its parent instances have not expired, the instance is returned\n     * to the caller. Otherwise, this factory method proceeds with the\n     * loading process below.</li>\n     *\n     * <li>The {@link ResourceBundle.Control#getFormats(String)\n     * control.getFormats} method is called to get resource bundle formats\n     * to produce bundle or resource names. The strings\n     * <code>\"java.class\"</code> and <code>\"java.properties\"</code>\n     * designate class-based and {@linkplain PropertyResourceBundle\n     * property}-based resource bundles, respectively. Other strings\n     * starting with <code>\"java.\"</code> are reserved for future extensions\n     * and must not be used for application-defined formats. Other strings\n     * designate application-defined formats.</li>\n     *\n     * <li>The {@link ResourceBundle.Control#getCandidateLocales(String,\n     * Locale) control.getCandidateLocales} method is called with the target\n     * locale to get a list of <em>candidate <code>Locale</code>s</em> for\n     * which resource bundles are searched.</li>\n     *\n     * <li>The {@link ResourceBundle.Control#newBundle(String, Locale,\n     * String, ClassLoader, boolean) control.newBundle} method is called to\n     * instantiate a <code>ResourceBundle</code> for the base bundle name, a\n     * candidate locale, and a format. (Refer to the note on the cache\n     * lookup below.) This step is iterated over all combinations of the\n     * candidate locales and formats until the <code>newBundle</code> method\n     * returns a <code>ResourceBundle</code> instance or the iteration has\n     * used up all the combinations. For example, if the candidate locales\n     * are <code>Locale(\"de\", \"DE\")</code>, <code>Locale(\"de\")</code> and\n     * <code>Locale(\"\")</code> and the formats are <code>\"java.class\"</code>\n     * and <code>\"java.properties\"</code>, then the following is the\n     * sequence of locale-format combinations to be used to call\n     * <code>control.newBundle</code>.\n     *\n     * <table class=striped style=\"width: 50%; text-align: left; margin-left: 40px;\">\n     * <caption style=\"display:none\">locale-format combinations for newBundle</caption>\n     * <thead>\n     * <tr>\n     * <th scope=\"col\">Index</th>\n     * <th scope=\"col\"><code>Locale</code></th>\n     * <th scope=\"col\"><code>format</code></th>\n     * </tr>\n     * </thead>\n     * <tbody>\n     * <tr>\n     * <th scope=\"row\">1</th>\n     * <td><code>Locale(\"de\", \"DE\")</code></td>\n     * <td><code>java.class</code></td>\n     * </tr>\n     * <tr>\n     * <th scope=\"row\">2</th>\n     * <td><code>Locale(\"de\", \"DE\")</code></td>\n     * <td><code>java.properties</code></td>\n     * </tr>\n     * <tr>\n     * <th scope=\"row\">3</th>\n     * <td><code>Locale(\"de\")</code></td>\n     * <td><code>java.class</code></td>\n     * </tr>\n     * <tr>\n     * <th scope=\"row\">4</th>\n     * <td><code>Locale(\"de\")</code></td>\n     * <td><code>java.properties</code></td>\n     * </tr>\n     * <tr>\n     * <th scope=\"row\">5</th>\n     * <td><code>Locale(\"\")</code></td>\n     * <td><code>java.class</code></td>\n     * </tr>\n     * <tr>\n     * <th scope=\"row\">6</th>\n     * <td><code>Locale(\"\")</code></td>\n     * <td><code>java.properties</code></td>\n     * </tr>\n     * </tbody>\n     * </table>\n     * </li>\n     *\n     * <li>If the previous step has found no resource bundle, proceed to\n     * Step 6. If a bundle has been found that is a base bundle (a bundle\n     * for <code>Locale(\"\")</code>), and the candidate locale list only contained\n     * <code>Locale(\"\")</code>, return the bundle to the caller. If a bundle\n     * has been found that is a base bundle, but the candidate locale list\n     * contained locales other than Locale(\"\"), put the bundle on hold and\n     * proceed to Step 6. If a bundle has been found that is not a base\n     * bundle, proceed to Step 7.</li>\n     *\n     * <li>The {@link ResourceBundle.Control#getFallbackLocale(String,\n     * Locale) control.getFallbackLocale} method is called to get a fallback\n     * locale (alternative to the current target locale) to try further\n     * finding a resource bundle. If the method returns a non-null locale,\n     * it becomes the next target locale and the loading process starts over\n     * from Step 3. Otherwise, if a base bundle was found and put on hold in\n     * a previous Step 5, it is returned to the caller now. Otherwise, a\n     * MissingResourceException is thrown.</li>\n     *\n     * <li>At this point, we have found a resource bundle that's not the\n     * base bundle. If this bundle set its parent during its instantiation,\n     * it is returned to the caller. Otherwise, its <a\n     * href=\"./ResourceBundle.html#parent_chain\">parent chain</a> is\n     * instantiated based on the list of candidate locales from which it was\n     * found. Finally, the bundle is returned to the caller.</li>\n     * </ol>\n     *\n     * <p>During the resource bundle loading process above, this factory\n     * method looks up the cache before calling the {@link\n     * Control#newBundle(String, Locale, String, ClassLoader, boolean)\n     * control.newBundle} method.  If the time-to-live period of the\n     * resource bundle found in the cache has expired, the factory method\n     * calls the {@link ResourceBundle.Control#needsReload(String, Locale,\n     * String, ClassLoader, ResourceBundle, long) control.needsReload}\n     * method to determine whether the resource bundle needs to be reloaded.\n     * If reloading is required, the factory method calls\n     * <code>control.newBundle</code> to reload the resource bundle.  If\n     * <code>control.newBundle</code> returns <code>null</code>, the factory\n     * method puts a dummy resource bundle in the cache as a mark of\n     * nonexistent resource bundles in order to avoid lookup overhead for\n     * subsequent requests. Such dummy resource bundles are under the same\n     * expiration control as specified by <code>control</code>.\n     *\n     * <p>All resource bundles loaded are cached by default. Refer to\n     * {@link Control#getTimeToLive(String,Locale)\n     * control.getTimeToLive} for details.\n     *\n     * <p>The following is an example of the bundle loading process with the\n     * default <code>ResourceBundle.Control</code> implementation.\n     *\n     * <p>Conditions:\n     * <ul>\n     * <li>Base bundle name: <code>foo.bar.Messages</code>\n     * <li>Requested <code>Locale</code>: {@link Locale#ITALY}</li>\n     * <li>Default <code>Locale</code>: {@link Locale#FRENCH}</li>\n     * <li>Available resource bundles:\n     * <code>foo/bar/Messages_fr.properties</code> and\n     * <code>foo/bar/Messages.properties</code></li>\n     * </ul>\n     *\n     * <p>First, <code>getBundle</code> tries loading a resource bundle in\n     * the following sequence.\n     *\n     * <ul>\n     * <li>class <code>foo.bar.Messages_it_IT</code>\n     * <li>file <code>foo/bar/Messages_it_IT.properties</code>\n     * <li>class <code>foo.bar.Messages_it</code></li>\n     * <li>file <code>foo/bar/Messages_it.properties</code></li>\n     * <li>class <code>foo.bar.Messages</code></li>\n     * <li>file <code>foo/bar/Messages.properties</code></li>\n     * </ul>\n     *\n     * <p>At this point, <code>getBundle</code> finds\n     * <code>foo/bar/Messages.properties</code>, which is put on hold\n     * because it's the base bundle.  <code>getBundle</code> calls {@link\n     * Control#getFallbackLocale(String, Locale)\n     * control.getFallbackLocale(\"foo.bar.Messages\", Locale.ITALY)} which\n     * returns <code>Locale.FRENCH</code>. Next, <code>getBundle</code>\n     * tries loading a bundle in the following sequence.\n     *\n     * <ul>\n     * <li>class <code>foo.bar.Messages_fr</code></li>\n     * <li>file <code>foo/bar/Messages_fr.properties</code></li>\n     * <li>class <code>foo.bar.Messages</code></li>\n     * <li>file <code>foo/bar/Messages.properties</code></li>\n     * </ul>\n     *\n     * <p><code>getBundle</code> finds\n     * <code>foo/bar/Messages_fr.properties</code> and creates a\n     * <code>ResourceBundle</code> instance. Then, <code>getBundle</code>\n     * sets up its parent chain from the list of the candidate locales.  Only\n     * <code>foo/bar/Messages.properties</code> is found in the list and\n     * <code>getBundle</code> creates a <code>ResourceBundle</code> instance\n     * that becomes the parent of the instance for\n     * <code>foo/bar/Messages_fr.properties</code>.\n     *\n     * @param baseName\n     *        the base name of the resource bundle, a fully qualified\n     *        class name\n     * @param targetLocale\n     *        the locale for which a resource bundle is desired\n     * @param loader\n     *        the class loader from which to load the resource bundle\n     * @param control\n     *        the control which gives information for the resource\n     *        bundle loading process\n     * @return a resource bundle for the given base name and locale\n     * @throws NullPointerException\n     *         if <code>baseName</code>, <code>targetLocale</code>,\n     *         <code>loader</code>, or <code>control</code> is\n     *         <code>null</code>\n     * @throws MissingResourceException\n     *         if no resource bundle for the specified base name can be found\n     * @throws IllegalArgumentException\n     *         if the given <code>control</code> doesn't perform properly\n     *         (e.g., <code>control.getCandidateLocales</code> returns null.)\n     *         Note that validation of <code>control</code> is performed as\n     *         needed.\n     * @since 1.6\n     * @revised 9\n     ",
    "links" : [ "ResourceBundle.Control#newBundle(String", "#getFallbackLocale(String", "#getBundle(String", "ResourceBundle.Control#getFormats(String)", "#getTimeToLive(String", "sun.util.locale.BaseLocale#FRENCH", "ResourceBundle.Control#getCandidateLocales(String", "ResourceBundle.Control#needsReload(String", "#newBundle(String", "ResourceBundle.Control#getFallbackLocale(String", "sun.util.locale.BaseLocale#ITALY" ]
  }, {
    "name" : "private static Control getDefaultControl(String baseName)",
    "returnType" : "Control",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Control getDefaultControl(Class<?> caller, String baseName)",
    "returnType" : "Control",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ResourceBundle getBundleImpl(String baseName, Locale locale, Class<?> caller, Control control)",
    "returnType" : "ResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ResourceBundle getBundleImpl(String baseName, Locale locale, Class<?> caller, ClassLoader loader, Control control)",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * This method will find resource bundles using the legacy mechanism\n     * if the caller is unnamed module or the given class loader is\n     * not the class loader of the caller module getting the resource\n     * bundle, i.e. find the class that is visible to the class loader\n     * and properties from unnamed module.\n     *\n     * The module-aware resource bundle lookup mechanism will load\n     * the service providers using the service loader mechanism\n     * as well as properties local in the caller module.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ResourceBundle getBundleImpl(String baseName, Locale locale, ClassLoader loader, Control control)",
    "returnType" : "ResourceBundle",
    "comment" : "                                          Module module,",
    "links" : [ ]
  }, {
    "name" : "private static boolean checkList(List<?> a)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given <code>List</code> is not null, not empty,\n     * not having null in its elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ResourceBundle findBundle(CacheKey cacheKey, List<Locale> candidateLocales, List<String> formats, int index, Control control, ResourceBundle baseBundle)",
    "returnType" : "ResourceBundle",
    "comment" : "                                         Module module,",
    "links" : [ ]
  }, {
    "name" : "private static ResourceBundle loadBundle(CacheKey cacheKey, List<String> formats, Control control, boolean reload)",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Legacy mechanism to load resource bundles\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidBundle(ResourceBundle bundle)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasValidParentChain(ResourceBundle bundle)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether any of resource bundles in the parent chain,\n     * including the leaf, have expired.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void throwMissingResourceException(String baseName, Locale locale, Throwable cause)",
    "returnType" : "void",
    "comment" : "\n     * Throw a MissingResourceException with proper message\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ResourceBundle findBundleInCache(CacheKey cacheKey, Control control)",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Finds a bundle in the cache. Any expired bundles are marked as\n     * `expired' and removed from the cache upon return.\n     *\n     * @param cacheKey the key to look up the cache\n     * @param control the Control to be used for the expiration control\n     * @return the cached bundle, or null if the bundle is not found in the\n     * cache or its parent has expired. <code>bundle.expire</code> is true\n     * upon return if the bundle in the cache has expired.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ResourceBundle putBundleInCache(CacheKey cacheKey, ResourceBundle bundle, Control control)",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Put a new bundle in the cache.\n     *\n     * @param cacheKey the key for the resource bundle\n     * @param bundle the resource bundle to be put in the cache\n     * @return the ResourceBundle for the cacheKey; if someone has put\n     * the bundle before this call, the one found in the cache is\n     * returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setExpirationTime(CacheKey cacheKey, Control control)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final void clearCache()",
    "returnType" : "void",
    "comment" : "\n     * Removes all resource bundles from the cache that have been loaded\n     * using the caller's class loader.\n     *\n     * @since 1.6\n     * @revised 9\n     * @see ResourceBundle.Control#getTimeToLive(String,Locale)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void clearCache(ClassLoader loader)",
    "returnType" : "void",
    "comment" : "\n     * Removes all resource bundles from the cache that have been loaded\n     * by the given class loader.\n     *\n     * @param loader the class loader\n     * @exception NullPointerException if <code>loader</code> is null\n     * @since 1.6\n     * @see ResourceBundle.Control#getTimeToLive(String,Locale)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract Object handleGetObject(String key)",
    "returnType" : "Object",
    "comment" : "\n     * Gets an object for the given key from this resource bundle.\n     * Returns null if this resource bundle does not contain an\n     * object for the given key.\n     *\n     * @param key the key for the desired object\n     * @exception NullPointerException if <code>key</code> is <code>null</code>\n     * @return the object for the given key, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Enumeration<String> getKeys()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an enumeration of the keys.\n     *\n     * @return an <code>Enumeration</code> of the keys contained in\n     *         this <code>ResourceBundle</code> and its parent bundles.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsKey(String key)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether the given <code>key</code> is contained in\n     * this <code>ResourceBundle</code> or its parent bundles.\n     *\n     * @param key\n     *        the resource <code>key</code>\n     * @return <code>true</code> if the given <code>key</code> is\n     *        contained in this <code>ResourceBundle</code> or its\n     *        parent bundles; <code>false</code> otherwise.\n     * @exception NullPointerException\n     *         if <code>key</code> is <code>null</code>\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> keySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a <code>Set</code> of all keys contained in this\n     * <code>ResourceBundle</code> and its parent bundles.\n     *\n     * @return a <code>Set</code> of all keys contained in this\n     *         <code>ResourceBundle</code> and its parent bundles.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Set<String> handleKeySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a <code>Set</code> of the keys contained <em>only</em>\n     * in this <code>ResourceBundle</code>.\n     *\n     * <p>The default implementation returns a <code>Set</code> of the\n     * keys returned by the {@link #getKeys() getKeys} method except\n     * for the ones for which the {@link #handleGetObject(String)\n     * handleGetObject} method returns <code>null</code>. Once the\n     * <code>Set</code> has been created, the value is kept in this\n     * <code>ResourceBundle</code> in order to avoid producing the\n     * same <code>Set</code> in subsequent calls. Subclasses can\n     * override this method for faster handling.\n     *\n     * @return a <code>Set</code> of the keys contained only in this\n     *        <code>ResourceBundle</code>\n     * @since 1.6\n     ",
    "links" : [ "#handleGetObject(String)", "#getKeys()" ]
  }, {
    "name" : "private static void uncheckedThrow(Throwable t) throws T",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void trace(String format, Object... params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getBaseBundleName()", "public final String getString(String key)", "public final String[] getStringArray(String key)", "public final Object getObject(String key)", "public Locale getLocale()", "private static ClassLoader getLoader(Class<?> caller)", "protected void setParent(ResourceBundle parent)", "public static final ResourceBundle getBundle(String baseName)", "public static final ResourceBundle getBundle(String baseName, Control control)", "public static final ResourceBundle getBundle(String baseName, Locale locale)", "public static final ResourceBundle getBundle(String baseName, Locale targetLocale, Control control)", "public static ResourceBundle getBundle(String baseName, Locale locale, ClassLoader loader)", "public static ResourceBundle getBundle(String baseName, Locale targetLocale, ClassLoader loader, Control control)", "private static Control getDefaultControl(String baseName)", "private static Control getDefaultControl(Class<?> caller, String baseName)", "private static ResourceBundle getBundleImpl(String baseName, Locale locale, Class<?> caller, Control control)", "private static ResourceBundle getBundleImpl(String baseName, Locale locale, Class<?> caller, ClassLoader loader, Control control)", "private static ResourceBundle getBundleImpl(String baseName, Locale locale, ClassLoader loader, Control control)", "private static boolean checkList(List<?> a)", "private static ResourceBundle findBundle(CacheKey cacheKey, List<Locale> candidateLocales, List<String> formats, int index, Control control, ResourceBundle baseBundle)", "private static ResourceBundle loadBundle(CacheKey cacheKey, List<String> formats, Control control, boolean reload)", "private static boolean isValidBundle(ResourceBundle bundle)", "private static boolean hasValidParentChain(ResourceBundle bundle)", "private static void throwMissingResourceException(String baseName, Locale locale, Throwable cause)", "private static ResourceBundle findBundleInCache(CacheKey cacheKey, Control control)", "private static ResourceBundle putBundleInCache(CacheKey cacheKey, ResourceBundle bundle, Control control)", "private static void setExpirationTime(CacheKey cacheKey, Control control)", "public static final void clearCache()", "public static final void clearCache(ClassLoader loader)", "protected abstract Object handleGetObject(String key)", "public abstract Enumeration<String> getKeys()", "public boolean containsKey(String key)", "public Set<String> keySet()", "protected Set<String> handleKeySet()", "private static void uncheckedThrow(Throwable t) throws T", "private static void trace(String format, Object... params)" ],
  "variableNames" : [ "INITIAL_CACHE_SIZE", "NONEXISTENT_BUNDLE", "cacheList", "referenceQueue", "parent", "locale", "name", "expired", "cacheKey", "keySet", "UNKNOWN_FORMAT", "TRACE_ON" ]
}