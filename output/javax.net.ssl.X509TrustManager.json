{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/X509TrustManager.java",
  "packageName" : "javax.net.ssl",
  "className" : "X509TrustManager",
  "comment" : "\n * Instance of this interface manage which X509 certificates\n * may be used to authenticate the remote side of a secure\n * socket. Decisions may be based on trusted certificate\n * authorities, certificate revocation lists, online\n * status checking or other means.\n *\n * @since 1.4\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException",
    "returnType" : "void",
    "comment" : "\n     * Given the partial or complete certificate chain provided by the\n     * peer, build a certificate path to a trusted root and return if\n     * it can be validated and is trusted for client SSL\n     * authentication based on the authentication type.\n     * <p>\n     * The authentication type is determined by the actual certificate\n     * used. For instance, if RSAPublicKey is used, the authType\n     * should be \"RSA\". Checking is case-sensitive.\n     *\n     * @param chain the peer certificate chain\n     * @param authType the authentication type based on the client certificate\n     * @throws IllegalArgumentException if null or zero-length chain\n     *         is passed in for the chain parameter or if null or zero-length\n     *         string is passed in for the  authType parameter\n     * @throws CertificateException if the certificate chain is not trusted\n     *         by this TrustManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException",
    "returnType" : "void",
    "comment" : "\n     * Given the partial or complete certificate chain provided by the\n     * peer, build a certificate path to a trusted root and return if\n     * it can be validated and is trusted for server SSL\n     * authentication based on the authentication type.\n     * <p>\n     * The authentication type is the key exchange algorithm portion\n     * of the cipher suites represented as a String, such as \"RSA\",\n     * \"DHE_DSS\". Note: for some exportable cipher suites, the key\n     * exchange algorithm is determined at run time during the\n     * handshake. For instance, for TLS_RSA_EXPORT_WITH_RC4_40_MD5,\n     * the authType should be RSA_EXPORT when an ephemeral RSA key is\n     * used for the key exchange, and RSA when the key from the server\n     * certificate is used. Checking is case-sensitive.\n     *\n     * @param chain the peer certificate chain\n     * @param authType the key exchange algorithm used\n     * @throws IllegalArgumentException if null or zero-length chain\n     *         is passed in for the chain parameter or if null or zero-length\n     *         string is passed in for the  authType parameter\n     * @throws CertificateException if the certificate chain is not trusted\n     *         by this TrustManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public X509Certificate[] getAcceptedIssuers()",
    "returnType" : "X509Certificate[]",
    "comment" : "\n     * Return an array of certificate authority certificates\n     * which are trusted for authenticating peers.\n     *\n     * @return a non-null (possibly empty) array of acceptable\n     *          CA issuer certificates.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException", "public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException", "public X509Certificate[] getAcceptedIssuers()" ],
  "variableNames" : [ ]
}