{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/webkit/WebViewClient.java",
  "packageName" : "android.webkit",
  "className" : "WebViewClient",
  "comment" : "",
  "variables" : [ {
    "name" : "ERROR_UNKNOWN",
    "type" : "int",
    "comment" : " Generic error ",
    "links" : [ ]
  }, {
    "name" : "ERROR_HOST_LOOKUP",
    "type" : "int",
    "comment" : " Server or proxy hostname lookup failed ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNSUPPORTED_AUTH_SCHEME",
    "type" : "int",
    "comment" : " Unsupported authentication scheme (not basic or digest) ",
    "links" : [ ]
  }, {
    "name" : "ERROR_AUTHENTICATION",
    "type" : "int",
    "comment" : " User authentication failed on server ",
    "links" : [ ]
  }, {
    "name" : "ERROR_PROXY_AUTHENTICATION",
    "type" : "int",
    "comment" : " User authentication failed on proxy ",
    "links" : [ ]
  }, {
    "name" : "ERROR_CONNECT",
    "type" : "int",
    "comment" : " Failed to connect to the server ",
    "links" : [ ]
  }, {
    "name" : "ERROR_IO",
    "type" : "int",
    "comment" : " Failed to read or write to the server ",
    "links" : [ ]
  }, {
    "name" : "ERROR_TIMEOUT",
    "type" : "int",
    "comment" : " Connection timed out ",
    "links" : [ ]
  }, {
    "name" : "ERROR_REDIRECT_LOOP",
    "type" : "int",
    "comment" : " Too many redirects ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNSUPPORTED_SCHEME",
    "type" : "int",
    "comment" : " Unsupported URI scheme ",
    "links" : [ ]
  }, {
    "name" : "ERROR_FAILED_SSL_HANDSHAKE",
    "type" : "int",
    "comment" : " Failed to perform SSL handshake ",
    "links" : [ ]
  }, {
    "name" : "ERROR_BAD_URL",
    "type" : "int",
    "comment" : " Malformed URL ",
    "links" : [ ]
  }, {
    "name" : "ERROR_FILE",
    "type" : "int",
    "comment" : " Generic file error ",
    "links" : [ ]
  }, {
    "name" : "ERROR_FILE_NOT_FOUND",
    "type" : "int",
    "comment" : " File not found ",
    "links" : [ ]
  }, {
    "name" : "ERROR_TOO_MANY_REQUESTS",
    "type" : "int",
    "comment" : " Too many requests during this load ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNSAFE_RESOURCE",
    "type" : "int",
    "comment" : " Resource load was canceled by Safe Browsing ",
    "links" : [ ]
  }, {
    "name" : "SAFE_BROWSING_THREAT_UNKNOWN",
    "type" : "int",
    "comment" : " The resource was blocked for an unknown reason. ",
    "links" : [ ]
  }, {
    "name" : "SAFE_BROWSING_THREAT_MALWARE",
    "type" : "int",
    "comment" : " The resource was blocked because it contains malware. ",
    "links" : [ ]
  }, {
    "name" : "SAFE_BROWSING_THREAT_PHISHING",
    "type" : "int",
    "comment" : " The resource was blocked because it contains deceptive content. ",
    "links" : [ ]
  }, {
    "name" : "SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE",
    "type" : "int",
    "comment" : " The resource was blocked because it contains unwanted software. ",
    "links" : [ ]
  }, {
    "name" : "SAFE_BROWSING_THREAT_BILLING",
    "type" : "int",
    "comment" : "\n     * The resource was blocked because it may trick the user into a billing agreement.\n     *\n     * <p>This constant is only used when targetSdkVersion is at least {@link\n     * android.os.Build.VERSION_CODES#Q}. Otherwise, {@link #SAFE_BROWSING_THREAT_UNKNOWN} is used\n     * instead.\n     ",
    "links" : [ "#SAFE_BROWSING_THREAT_UNKNOWN", "android.os.Build.VERSION_CODES#Q" ]
  } ],
  "methods" : [ {
    "name" : "public boolean shouldOverrideUrlLoading(WebView view, String url)",
    "returnType" : "boolean",
    "comment" : "\n     * Give the host application a chance to take control when a URL is about to be loaded in the\n     * current WebView. If a WebViewClient is not provided, by default WebView will ask Activity\n     * Manager to choose the proper handler for the URL. If a WebViewClient is provided, returning\n     * {@code true} causes the current WebView to abort loading the URL, while returning\n     * {@code false} causes the WebView to continue loading the URL as usual.\n     *\n     * <p class=\"note\"><b>Note:</b> Do not call {@link WebView#loadUrl(String)} with the same\n     * URL and then return {@code true}. This unnecessarily cancels the current load and starts a\n     * new load with the same URL. The correct way to continue loading a given URL is to simply\n     * return {@code false}, without calling {@link WebView#loadUrl(String)}.\n     *\n     * <p class=\"note\"><b>Note:</b> This method is not called for POST requests.\n     *\n     * <p class=\"note\"><b>Note:</b> This method may be called for subframes and with non-HTTP(S)\n     * schemes; calling {@link WebView#loadUrl(String)} with such a URL will fail.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param url The URL to be loaded.\n     * @return {@code true} to cancel the current load, otherwise return {@code false}.\n     * @deprecated Use {@link #shouldOverrideUrlLoading(WebView, WebResourceRequest)\n     *             shouldOverrideUrlLoading(WebView, WebResourceRequest)} instead.\n     ",
    "links" : [ "android.webkit.WebView#loadUrl(String)", "#shouldOverrideUrlLoading(WebView" ]
  }, {
    "name" : "public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request)",
    "returnType" : "boolean",
    "comment" : "\n     * Give the host application a chance to take control when a URL is about to be loaded in the\n     * current WebView. If a WebViewClient is not provided, by default WebView will ask Activity\n     * Manager to choose the proper handler for the URL. If a WebViewClient is provided, returning\n     * {@code true} causes the current WebView to abort loading the URL, while returning\n     * {@code false} causes the WebView to continue loading the URL as usual.\n     *\n     * <p class=\"note\"><b>Note:</b> Do not call {@link WebView#loadUrl(String)} with the request's\n     * URL and then return {@code true}. This unnecessarily cancels the current load and starts a\n     * new load with the same URL. The correct way to continue loading a given URL is to simply\n     * return {@code false}, without calling {@link WebView#loadUrl(String)}.\n     *\n     * <p class=\"note\"><b>Note:</b> This method is not called for POST requests.\n     *\n     * <p class=\"note\"><b>Note:</b> This method may be called for subframes and with non-HTTP(S)\n     * schemes; calling {@link WebView#loadUrl(String)} with such a URL will fail.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param request Object containing the details of the request.\n     * @return {@code true} to cancel the current load, otherwise return {@code false}.\n     ",
    "links" : [ "android.webkit.WebView#loadUrl(String)" ]
  }, {
    "name" : "public void onPageStarted(WebView view, String url, Bitmap favicon)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that a page has started loading. This method\n     * is called once for each main frame load so a page with iframes or\n     * framesets will call onPageStarted one time for the main frame. This also\n     * means that onPageStarted will not be called when the contents of an\n     * embedded frame changes, i.e. clicking a link whose target is an iframe,\n     * it will also not be called for fragment navigations (navigations to\n     * #fragment_id).\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param url The url to be loaded.\n     * @param favicon The favicon for this page if it already exists in the\n     *            database.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPageFinished(WebView view, String url)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that a page has finished loading. This method\n     * is called only for main frame. Receiving an {@code onPageFinished()} callback does not\n     * guarantee that the next frame drawn by WebView will reflect the state of the DOM at this\n     * point. In order to be notified that the current DOM state is ready to be rendered, request a\n     * visual state callback with {@link WebView#postVisualStateCallback} and wait for the supplied\n     * callback to be triggered.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param url The url of the page.\n     ",
    "links" : [ "android.webkit.WebView#postVisualStateCallback" ]
  }, {
    "name" : "public void onLoadResource(WebView view, String url)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that the WebView will load the resource\n     * specified by the given url.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param url The url of the resource the WebView will load.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPageCommitVisible(WebView view, String url)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that {@link android.webkit.WebView} content left over from\n     * previous page navigations will no longer be drawn.\n     *\n     * <p>This callback can be used to determine the point at which it is safe to make a recycled\n     * {@link android.webkit.WebView} visible, ensuring that no stale content is shown. It is called\n     * at the earliest point at which it can be guaranteed that {@link WebView#onDraw} will no\n     * longer draw any content from previous navigations. The next draw will display either the\n     * {@link WebView#setBackgroundColor background color} of the {@link WebView}, or some of the\n     * contents of the newly loaded page.\n     *\n     * <p>This method is called when the body of the HTTP response has started loading, is reflected\n     * in the DOM, and will be visible in subsequent draws. This callback occurs early in the\n     * document loading process, and as such you should expect that linked resources (for example,\n     * CSS and images) may not be available.\n     *\n     * <p>For more fine-grained notification of visual state updates, see {@link\n     * WebView#postVisualStateCallback}.\n     *\n     * <p>Please note that all the conditions and recommendations applicable to\n     * {@link WebView#postVisualStateCallback} also apply to this API.\n     *\n     * <p>This callback is only called for main frame navigations.\n     *\n     * @param view The {@link android.webkit.WebView} for which the navigation occurred.\n     * @param url  The URL corresponding to the page navigation that triggered this callback.\n     ",
    "links" : [ "android.webkit.WebView#postVisualStateCallback", "android.webkit.WebView#onDraw", "android.webkit.WebView", "android.webkit.WebView#setBackgroundColor" ]
  }, {
    "name" : "public WebResourceResponse shouldInterceptRequest(WebView view, String url)",
    "returnType" : "WebResourceResponse",
    "comment" : "\n     * Notify the host application of a resource request and allow the\n     * application to return the data.  If the return value is {@code null}, the WebView\n     * will continue to load the resource as usual.  Otherwise, the return\n     * response and data will be used.\n     *\n     * <p>This callback is invoked for a variety of URL schemes (e.g., {@code http(s):}, {@code\n     * data:}, {@code file:}, etc.), not only those schemes which send requests over the network.\n     * This is not called for {@code javascript:} URLs, {@code blob:} URLs, or for assets accessed\n     * via {@code file:///android_asset/} or {@code file:///android_res/} URLs.\n     *\n     * <p>In the case of redirects, this is only called for the initial resource URL, not any\n     * subsequent redirect URLs.\n     *\n     * <p class=\"note\"><b>Note:</b> This method is called on a thread\n     * other than the UI thread so clients should exercise caution\n     * when accessing private data or the view system.\n     *\n     * <p class=\"note\"><b>Note:</b> When Safe Browsing is enabled, these URLs still undergo Safe\n     * Browsing checks. If this is undesired, whitelist the URL with {@link\n     * WebView#setSafeBrowsingWhitelist} or ignore the warning with {@link #onSafeBrowsingHit}.\n     *\n     * @param view The {@link android.webkit.WebView} that is requesting the\n     *             resource.\n     * @param url The raw url of the resource.\n     * @return A {@link android.webkit.WebResourceResponse} containing the\n     *         response information or {@code null} if the WebView should load the\n     *         resource itself.\n     * @deprecated Use {@link #shouldInterceptRequest(WebView, WebResourceRequest)\n     *             shouldInterceptRequest(WebView, WebResourceRequest)} instead.\n     ",
    "links" : [ "android.webkit.WebResourceResponse", "#onSafeBrowsingHit", "#shouldInterceptRequest(WebView", "android.webkit.WebView", "android.webkit.WebView#setSafeBrowsingWhitelist" ]
  }, {
    "name" : "public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request)",
    "returnType" : "WebResourceResponse",
    "comment" : "\n     * Notify the host application of a resource request and allow the\n     * application to return the data.  If the return value is {@code null}, the WebView\n     * will continue to load the resource as usual.  Otherwise, the return\n     * response and data will be used.\n     *\n     * <p>This callback is invoked for a variety of URL schemes (e.g., {@code http(s):}, {@code\n     * data:}, {@code file:}, etc.), not only those schemes which send requests over the network.\n     * This is not called for {@code javascript:} URLs, {@code blob:} URLs, or for assets accessed\n     * via {@code file:///android_asset/} or {@code file:///android_res/} URLs.\n     *\n     * <p>In the case of redirects, this is only called for the initial resource URL, not any\n     * subsequent redirect URLs.\n     *\n     * <p class=\"note\"><b>Note:</b> This method is called on a thread\n     * other than the UI thread so clients should exercise caution\n     * when accessing private data or the view system.\n     *\n     * <p class=\"note\"><b>Note:</b> When Safe Browsing is enabled, these URLs still undergo Safe\n     * Browsing checks. If this is undesired, whitelist the URL with {@link\n     * WebView#setSafeBrowsingWhitelist} or ignore the warning with {@link #onSafeBrowsingHit}.\n     *\n     * @param view The {@link android.webkit.WebView} that is requesting the\n     *             resource.\n     * @param request Object containing the details of the request.\n     * @return A {@link android.webkit.WebResourceResponse} containing the\n     *         response information or {@code null} if the WebView should load the\n     *         resource itself.\n     ",
    "links" : [ "android.webkit.WebResourceResponse", "#onSafeBrowsingHit", "android.webkit.WebView", "android.webkit.WebView#setSafeBrowsingWhitelist" ]
  }, {
    "name" : "public void onTooManyRedirects(WebView view, Message cancelMsg, Message continueMsg)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that there have been an excessive number of\n     * HTTP redirects. As the host application if it would like to continue\n     * trying to load the resource. The default behavior is to send the cancel\n     * message.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param cancelMsg The message to send if the host wants to cancel\n     * @param continueMsg The message to send if the host wants to continue\n     * @deprecated This method is no longer called. When the WebView encounters\n     *             a redirect loop, it will cancel the load.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onReceivedError(WebView view, int errorCode, String description, String failingUrl)",
    "returnType" : "void",
    "comment" : "\n     * Report an error to the host application. These errors are unrecoverable\n     * (i.e. the main resource is unavailable). The {@code errorCode} parameter\n     * corresponds to one of the {@code ERROR_*} constants.\n     * @param view The WebView that is initiating the callback.\n     * @param errorCode The error code corresponding to an ERROR_* value.\n     * @param description A String describing the error.\n     * @param failingUrl The url that failed to load.\n     * @deprecated Use {@link #onReceivedError(WebView, WebResourceRequest, WebResourceError)\n     *             onReceivedError(WebView, WebResourceRequest, WebResourceError)} instead.\n     ",
    "links" : [ "#onReceivedError(WebView" ]
  }, {
    "name" : "public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error)",
    "returnType" : "void",
    "comment" : "\n     * Report web resource loading error to the host application. These errors usually indicate\n     * inability to connect to the server. Note that unlike the deprecated version of the callback,\n     * the new version will be called for any resource (iframe, image, etc.), not just for the main\n     * page. Thus, it is recommended to perform minimum required work in this callback.\n     * @param view The WebView that is initiating the callback.\n     * @param request The originating request.\n     * @param error Information about the error occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that an HTTP error has been received from the server while\n     * loading a resource.  HTTP errors have status codes &gt;= 400.  This callback will be called\n     * for any resource (iframe, image, etc.), not just for the main page. Thus, it is recommended\n     * to perform minimum required work in this callback. Note that the content of the server\n     * response may not be provided within the {@code errorResponse} parameter.\n     * @param view The WebView that is initiating the callback.\n     * @param request The originating request.\n     * @param errorResponse Information about the error occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFormResubmission(WebView view, Message dontResend, Message resend)",
    "returnType" : "void",
    "comment" : "\n     * As the host application if the browser should resend data as the\n     * requested page was a result of a POST. The default is to not resend the\n     * data.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param dontResend The message to send if the browser should not resend\n     * @param resend The message to send if the browser should resend data\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doUpdateVisitedHistory(WebView view, String url, boolean isReload)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application to update its visited links database.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param url The url being visited.\n     * @param isReload {@code true} if this url is being reloaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that an SSL error occurred while loading a\n     * resource. The host application must call either {@link SslErrorHandler#cancel} or\n     * {@link SslErrorHandler#proceed}. Note that the decision may be retained for use in\n     * response to future SSL errors. The default behavior is to cancel the\n     * load.\n     * <p>\n     * This API is only called for recoverable SSL certificate errors. In the case of\n     * non-recoverable errors (such as when the server fails the client), WebView will call {@link\n     * #onReceivedError(WebView, WebResourceRequest, WebResourceError)} with {@link\n     * #ERROR_FAILED_SSL_HANDSHAKE}.\n     * <p>\n     * Applications are advised not to prompt the user about SSL errors, as\n     * the user is unlikely to be able to make an informed security decision\n     * and WebView does not provide any UI for showing the details of the\n     * error in a meaningful way.\n     * <p>\n     * Application overrides of this method may display custom error pages or\n     * silently log issues, but it is strongly recommended to always call\n     * {@link SslErrorHandler#cancel} and never allow proceeding past errors.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param handler An {@link SslErrorHandler} that will handle the user's\n     *            response.\n     * @param error The SSL error object.\n     ",
    "links" : [ "android.webkit.SslErrorHandler#cancel", "android.webkit.SslErrorHandler", "#onReceivedError(WebView", "#ERROR_FAILED_SSL_HANDSHAKE", "android.webkit.SslErrorHandler#proceed" ]
  }, {
    "name" : "public void onReceivedClientCertRequest(WebView view, ClientCertRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application to handle a SSL client certificate request. The host application\n     * is responsible for showing the UI if desired and providing the keys. There are three ways to\n     * respond: {@link ClientCertRequest#proceed}, {@link ClientCertRequest#cancel}, or {@link\n     * ClientCertRequest#ignore}. Webview stores the response in memory (for the life of the\n     * application) if {@link ClientCertRequest#proceed} or {@link ClientCertRequest#cancel} is\n     * called and does not call {@code onReceivedClientCertRequest()} again for the same host and\n     * port pair. Webview does not store the response if {@link ClientCertRequest#ignore}\n     * is called. Note that, multiple layers in chromium network stack might be\n     * caching the responses, so the behavior for ignore is only a best case\n     * effort.\n     *\n     * This method is called on the UI thread. During the callback, the\n     * connection is suspended.\n     *\n     * For most use cases, the application program should implement the\n     * {@link android.security.KeyChainAliasCallback} interface and pass it to\n     * {@link android.security.KeyChain#choosePrivateKeyAlias} to start an\n     * activity for the user to choose the proper alias. The keychain activity will\n     * provide the alias through the callback method in the implemented interface. Next\n     * the application should create an async task to call\n     * {@link android.security.KeyChain#getPrivateKey} to receive the key.\n     *\n     * An example implementation of client certificates can be seen at\n     * <A href=\"https://android.googlesource.com/platform/packages/apps/Browser/+/android-5.1.1_r1/src/com/android/browser/Tab.java\">\n     * AOSP Browser</a>\n     *\n     * The default behavior is to cancel, returning no client certificate.\n     *\n     * @param view The WebView that is initiating the callback\n     * @param request An instance of a {@link ClientCertRequest}\n     *\n     ",
    "links" : [ "android.webkit.ClientCertRequest#ignore", "android.security.KeyChain#getPrivateKey", "android.webkit.ClientCertRequest", "android.webkit.ClientCertRequest#cancel", "android.security.KeyChainAliasCallback", "android.security.KeyChain#choosePrivateKeyAlias", "android.webkit.ClientCertRequest#proceed" ]
  }, {
    "name" : "public void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the host application that the WebView received an HTTP\n     * authentication request. The host application can use the supplied\n     * {@link HttpAuthHandler} to set the WebView's response to the request.\n     * The default behavior is to cancel the request.\n     *\n     * @param view the WebView that is initiating the callback\n     * @param handler the HttpAuthHandler used to set the WebView's response\n     * @param host the host requiring authentication\n     * @param realm the realm for which authentication is required\n     * @see WebView#getHttpAuthUsernamePassword\n     ",
    "links" : [ "android.webkit.HttpAuthHandler" ]
  }, {
    "name" : "public boolean shouldOverrideKeyEvent(WebView view, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Give the host application a chance to handle the key event synchronously.\n     * e.g. menu shortcut key events need to be filtered this way. If return\n     * true, WebView will not handle the key event. If return {@code false}, WebView\n     * will always handle the key event, so none of the super in the view chain\n     * will see the key event. The default behavior returns {@code false}.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param event The key event.\n     * @return {@code true} if the host application wants to handle the key event\n     *         itself, otherwise return {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onUnhandledKeyEvent(WebView view, KeyEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that a key was not handled by the WebView.\n     * Except system keys, WebView always consumes the keys in the normal flow\n     * or if {@link #shouldOverrideKeyEvent} returns {@code true}. This is called asynchronously\n     * from where the key is dispatched. It gives the host application a chance\n     * to handle the unhandled key events.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param event The key event.\n     ",
    "links" : [ "#shouldOverrideKeyEvent" ]
  }, {
    "name" : "public void onUnhandledInputEvent(WebView view, InputEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that a input event was not handled by the WebView.\n     * Except system keys, WebView always consumes input events in the normal flow\n     * or if {@link #shouldOverrideKeyEvent} returns {@code true}. This is called asynchronously\n     * from where the event is dispatched. It gives the host application a chance\n     * to handle the unhandled input events.\n     *\n     * Note that if the event is a {@link android.view.MotionEvent}, then it's lifetime is only\n     * that of the function call. If the WebViewClient wishes to use the event beyond that, then it\n     * <i>must</i> create a copy of the event.\n     *\n     * It is the responsibility of overriders of this method to call\n     * {@link #onUnhandledKeyEvent(WebView, KeyEvent)}\n     * when appropriate if they wish to continue receiving events through it.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param event The input event.\n     * @removed\n     ",
    "links" : [ "android.view.MotionEvent", "#shouldOverrideKeyEvent", "#onUnhandledKeyEvent(WebView" ]
  }, {
    "name" : "private void onUnhandledInputEventInternal(WebView view, InputEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onScaleChanged(WebView view, float oldScale, float newScale)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that the scale applied to the WebView has\n     * changed.\n     *\n     * @param view The WebView that is initiating the callback.\n     * @param oldScale The old scale factor\n     * @param newScale The new scale factor\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onReceivedLoginRequest(WebView view, String realm, @Nullable String account, String args)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that a request to automatically log in the\n     * user has been processed.\n     * @param view The WebView requesting the login.\n     * @param realm The account realm used to look up accounts.\n     * @param account An optional account. If not {@code null}, the account should be\n     *                checked against accounts on the device. If it is a valid\n     *                account, it should be used to log in the user.\n     * @param args Authenticator specific arguments used to log in the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail)",
    "returnType" : "boolean",
    "comment" : "\n     * Notify host application that the given WebView's render process has exited.\n     *\n     * Multiple WebView instances may be associated with a single render process;\n     * onRenderProcessGone will be called for each WebView that was affected.\n     * The application's implementation of this callback should only attempt to\n     * clean up the specific WebView given as a parameter, and should not assume\n     * that other WebView instances are affected.\n     *\n     * The given WebView can't be used, and should be removed from the view hierarchy,\n     * all references to it should be cleaned up, e.g any references in the Activity\n     * or other classes saved using {@link android.view.View#findViewById} and similar calls, etc.\n     *\n     * To cause an render process crash for test purpose, the application can\n     * call {@code loadUrl(\"chrome://crash\")} on the WebView. Note that multiple WebView\n     * instances may be affected if they share a render process, not just the\n     * specific WebView which loaded chrome://crash.\n     *\n     * @param view The WebView which needs to be cleaned up.\n     * @param detail the reason why it exited.\n     * @return {@code true} if the host application handled the situation that process has\n     *         exited, otherwise, application will crash if render process crashed,\n     *         or be killed if render process was killed by the system.\n     ",
    "links" : [ "android.view.View#findViewById" ]
  }, {
    "name" : "public void onSafeBrowsingHit(WebView view, WebResourceRequest request, @SafeBrowsingThreat int threatType, SafeBrowsingResponse callback)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that a loading URL has been flagged by Safe Browsing.\n     *\n     * The application must invoke the callback to indicate the preferred response. The default\n     * behavior is to show an interstitial to the user, with the reporting checkbox visible.\n     *\n     * If the application needs to show its own custom interstitial UI, the callback can be invoked\n     * asynchronously with {@link SafeBrowsingResponse#backToSafety} or {@link\n     * SafeBrowsingResponse#proceed}, depending on user response.\n     *\n     * @param view The WebView that hit the malicious resource.\n     * @param request Object containing the details of the request.\n     * @param threatType The reason the resource was caught by Safe Browsing, corresponding to a\n     *                   {@code SAFE_BROWSING_THREAT_*} value.\n     * @param callback Applications must invoke one of the callback methods.\n     ",
    "links" : [ "android.webkit.SafeBrowsingResponse#backToSafety", "android.webkit.SafeBrowsingResponse#proceed" ]
  } ],
  "variableNames" : [ "ERROR_UNKNOWN", "ERROR_HOST_LOOKUP", "ERROR_UNSUPPORTED_AUTH_SCHEME", "ERROR_AUTHENTICATION", "ERROR_PROXY_AUTHENTICATION", "ERROR_CONNECT", "ERROR_IO", "ERROR_TIMEOUT", "ERROR_REDIRECT_LOOP", "ERROR_UNSUPPORTED_SCHEME", "ERROR_FAILED_SSL_HANDSHAKE", "ERROR_BAD_URL", "ERROR_FILE", "ERROR_FILE_NOT_FOUND", "ERROR_TOO_MANY_REQUESTS", "ERROR_UNSAFE_RESOURCE", "SAFE_BROWSING_THREAT_UNKNOWN", "SAFE_BROWSING_THREAT_MALWARE", "SAFE_BROWSING_THREAT_PHISHING", "SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE", "SAFE_BROWSING_THREAT_BILLING" ],
  "methodNames" : [ "public boolean shouldOverrideUrlLoading(WebView view, String url)", "public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request)", "public void onPageStarted(WebView view, String url, Bitmap favicon)", "public void onPageFinished(WebView view, String url)", "public void onLoadResource(WebView view, String url)", "public void onPageCommitVisible(WebView view, String url)", "public WebResourceResponse shouldInterceptRequest(WebView view, String url)", "public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request)", "public void onTooManyRedirects(WebView view, Message cancelMsg, Message continueMsg)", "public void onReceivedError(WebView view, int errorCode, String description, String failingUrl)", "public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error)", "public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse)", "public void onFormResubmission(WebView view, Message dontResend, Message resend)", "public void doUpdateVisitedHistory(WebView view, String url, boolean isReload)", "public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)", "public void onReceivedClientCertRequest(WebView view, ClientCertRequest request)", "public void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm)", "public boolean shouldOverrideKeyEvent(WebView view, KeyEvent event)", "public void onUnhandledKeyEvent(WebView view, KeyEvent event)", "public void onUnhandledInputEvent(WebView view, InputEvent event)", "private void onUnhandledInputEventInternal(WebView view, InputEvent event)", "public void onScaleChanged(WebView view, float oldScale, float newScale)", "public void onReceivedLoginRequest(WebView view, String realm, @Nullable String account, String args)", "public boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail)", "public void onSafeBrowsingHit(WebView view, WebResourceRequest request, @SafeBrowsingThreat int threatType, SafeBrowsingResponse callback)" ]
}