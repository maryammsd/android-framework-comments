{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/zip/DeflaterOutputStream.java",
  "packageName" : "java.util.zip",
  "className" : "DeflaterOutputStream",
  "comment" : "\n * This class implements an output stream filter for compressing data in\n * the \"deflate\" compression format. It is also used as the basis for other\n * types of compression filters, such as GZIPOutputStream.\n *\n * @see         Deflater\n * @author      David Connelly\n * @since 1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "def",
    "type" : "Deflater",
    "comment" : "\n     * Compressor for this stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : "\n     * Output buffer for writing compressed data.\n     ",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "\n     * Indicates that the stream has been closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "syncFlush",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usesDefaultDeflater",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a byte to the compressed output stream. This method will\n     * block until the byte can be written.\n     * @param b the byte to be written\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of bytes to the compressed output stream. This\n     * method will block until all the bytes are written.\n     * @param b the data to be written\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public void finish() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Finishes writing compressed data to the output stream without closing\n     * the underlying stream. Use this method when applying multiple filters\n     * in succession to the same output stream.\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes remaining compressed data to the output stream and closes the\n     * underlying stream.\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void deflate() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes next block of compressed data to the output stream.\n     * @throws IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes the compressed output stream.\n     *\n     * If {@link #DeflaterOutputStream(OutputStream, Deflater, int, boolean)\n     * syncFlush} is {@code true} when this compressed output stream is\n     * constructed, this method first flushes the underlying {@code compressor}\n     * with the flush mode {@link Deflater#SYNC_FLUSH} to force\n     * all pending data to be flushed out to the output stream and then\n     * flushes the output stream. Otherwise this method only flushes the\n     * output stream without flushing the {@code compressor}.\n     *\n     * @throws IOException if an I/O error has occurred\n     *\n     * @since 1.7\n     ",
    "links" : [ "java.util.zip.Deflater#SYNC_FLUSH", "#DeflaterOutputStream(OutputStream" ]
  } ],
  "methodNames" : [ "public void write(int b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException", "public void finish() throws IOException", "public void close() throws IOException", "protected void deflate() throws IOException", "public void flush() throws IOException" ],
  "variableNames" : [ "def", "buf", "closed", "syncFlush", "usesDefaultDeflater" ]
}