{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Normalizer2Impl.java",
  "packageName" : "android.icu.impl",
  "className" : "ReorderingBuffer",
  "comment" : "\n     * Writable buffer that takes care of canonical ordering.\n     * Its Appendable methods behave like the C++ implementation's\n     * appendZeroCC() methods.\n     * <p>\n     * If dest is a StringBuilder, then the buffer writes directly to it.\n     * Otherwise, the buffer maintains a StringBuilder for intermediate text segments\n     * until no further changes are necessary and whole segments are appended.\n     * append() methods that take combining-class values always write to the StringBuilder.\n     * Other append() methods flush and append to the Appendable.\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "impl",
    "type" : "Normalizer2Impl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "app",
    "type" : "Appendable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "str",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "appIsStringBuilder",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "reorderStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastCC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "codePointStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "codePointLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLastCC()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder getStringBuilder()",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(CharSequence s, int start, int limit)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void append(int c, int cc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void append(CharSequence s, int start, int limit, boolean isNFD, int leadCC, int trailCC)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ReorderingBuffer append(char c)",
    "returnType" : "ReorderingBuffer",
    "comment" : " Most of them implement Appendable interface methods.",
    "links" : [ ]
  }, {
    "name" : "public void appendZeroCC(int c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ReorderingBuffer append(CharSequence s)",
    "returnType" : "ReorderingBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ReorderingBuffer append(CharSequence s, int start, int limit)",
    "returnType" : "ReorderingBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flush()",
    "returnType" : "void",
    "comment" : "\n         * Flushes from the intermediate StringBuilder to the Appendable,\n         * if they are different objects.\n         * Used after recomposition.\n         * Must be called at the end when writing to a non-StringBuilder Appendable.\n         ",
    "links" : [ ]
  }, {
    "name" : "public ReorderingBuffer flushAndAppendZeroCC(CharSequence s, int start, int limit)",
    "returnType" : "ReorderingBuffer",
    "comment" : "\n         * Flushes from the intermediate StringBuilder to the Appendable,\n         * if they are different objects.\n         * Then appends the new text to the Appendable or StringBuilder.\n         * Normally used after quick check loops find a non-empty sequence.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void remove()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeSuffix(int suffixLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void insert(int c, int cc)",
    "returnType" : "void",
    "comment" : " Requires 0<cc<lastCC which implies reorderStart<limit.",
    "links" : [ ]
  }, {
    "name" : "private void setIterator()",
    "returnType" : "void",
    "comment" : " private backward iterator",
    "links" : [ ]
  }, {
    "name" : "private void skipPrevious()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int previousCC()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isEmpty()", "public int length()", "public int getLastCC()", "public StringBuilder getStringBuilder()", "public boolean equals(CharSequence s, int start, int limit)", "public void append(int c, int cc)", "public void append(CharSequence s, int start, int limit, boolean isNFD, int leadCC, int trailCC)", "public ReorderingBuffer append(char c)", "public void appendZeroCC(int c)", "public ReorderingBuffer append(CharSequence s)", "public ReorderingBuffer append(CharSequence s, int start, int limit)", "public void flush()", "public ReorderingBuffer flushAndAppendZeroCC(CharSequence s, int start, int limit)", "public void remove()", "public void removeSuffix(int suffixLength)", "private void insert(int c, int cc)", "private void setIterator()", "private void skipPrevious()", "private int previousCC()" ],
  "variableNames" : [ "impl", "app", "str", "appIsStringBuilder", "reorderStart", "lastCC", "codePointStart", "codePointLimit" ]
}