{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/Program.java",
  "packageName" : "android.renderscript",
  "className" : "BaseProgramBuilder",
  "comment" : "",
  "variables" : [ {
    "name" : "mRS",
    "type" : "RenderScript",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputs",
    "type" : "Element[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputs",
    "type" : "Element[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConstants",
    "type" : "Type[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextures",
    "type" : "Type[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextureTypes",
    "type" : "TextureType[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextureNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConstantCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextureCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShader",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public BaseProgramBuilder setShader(String s)",
    "returnType" : "BaseProgramBuilder",
    "comment" : "\n         * Sets the GLSL shader code to be used in the program\n         *\n         * @param s GLSL shader string\n         * @return  self\n         ",
    "links" : [ ]
  }, {
    "name" : "public BaseProgramBuilder setShader(Resources resources, int resourceID)",
    "returnType" : "BaseProgramBuilder",
    "comment" : "\n         * Sets the GLSL shader code to be used in the program\n         *\n         * @param resources application resources\n         * @param resourceID id of the file containing GLSL shader code\n         *\n         * @return  self\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentConstantIndex()",
    "returnType" : "int",
    "comment" : "\n         * Queries the index of the last added constant buffer type\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentTextureIndex()",
    "returnType" : "int",
    "comment" : "\n         * Queries the index of the last added texture type\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "public BaseProgramBuilder addConstant(Type t) throws IllegalStateException",
    "returnType" : "BaseProgramBuilder",
    "comment" : "\n         * Adds constant (uniform) inputs to the program\n         *\n         * @param t Type that describes the layout of the Allocation\n         *          object to be used as constant inputs to the Program\n         * @return  self\n         ",
    "links" : [ ]
  }, {
    "name" : "public BaseProgramBuilder addTexture(TextureType texType) throws IllegalArgumentException",
    "returnType" : "BaseProgramBuilder",
    "comment" : "\n         * Adds a texture input to the Program\n         *\n         * @param texType describes that the texture to append it (2D,\n         *                Cubemap, etc.)\n         * @return  self\n         ",
    "links" : [ ]
  }, {
    "name" : "public BaseProgramBuilder addTexture(TextureType texType, String texName) throws IllegalArgumentException",
    "returnType" : "BaseProgramBuilder",
    "comment" : "\n         * Adds a texture input to the Program\n         *\n         * @param texType describes that the texture to append it (2D,\n         *                Cubemap, etc.)\n         * @param texName what the texture should be called in the\n         *                shader\n         * @return  self\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void initProgram(Program p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mRS", "mInputs", "mOutputs", "mConstants", "mTextures", "mTextureTypes", "mTextureNames", "mInputCount", "mOutputCount", "mConstantCount", "mTextureCount", "mShader" ],
  "methodNames" : [ "public BaseProgramBuilder setShader(String s)", "public BaseProgramBuilder setShader(Resources resources, int resourceID)", "public int getCurrentConstantIndex()", "public int getCurrentTextureIndex()", "public BaseProgramBuilder addConstant(Type t) throws IllegalStateException", "public BaseProgramBuilder addTexture(TextureType texType) throws IllegalArgumentException", "public BaseProgramBuilder addTexture(TextureType texType, String texName) throws IllegalArgumentException", "protected void initProgram(Program p)" ]
}