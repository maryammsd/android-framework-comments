{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/location/NanoAppBinary.java",
  "packageName" : "android.hardware.location",
  "className" : "NanoAppBinary",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNanoAppBinary",
    "type" : "byte[]",
    "comment" : "\n     * The contents of the app binary.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHeaderVersion",
    "type" : "int",
    "comment" : "\n     * Contents of the nanoapp binary header.\n     *\n     * Only valid if mHasValidHeader is true.\n     * See nano_app_binary_t in context_hub.h for details.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMagic",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNanoAppId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNanoAppVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHwHubType",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetChreApiMajorVersion",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetChreApiMinorVersion",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasValidHeader",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXPECTED_HEADER_VERSION",
    "type" : "int",
    "comment" : "\n     * The header version used to parse the binary in parseBinaryHeader().\n     ",
    "links" : [ ]
  }, {
    "name" : "EXPECTED_MAGIC_VALUE",
    "type" : "int",
    "comment" : "\n     * The magic value expected in the header as defined in context_hub.h.\n     ",
    "links" : [ ]
  }, {
    "name" : "HEADER_ORDER",
    "type" : "ByteOrder",
    "comment" : "\n     * Byte order established in context_hub.h\n     ",
    "links" : [ ]
  }, {
    "name" : "HEADER_SIZE_BYTES",
    "type" : "int",
    "comment" : "\n     * The size of the header in bytes as defined in context_hub.h.\n     ",
    "links" : [ ]
  }, {
    "name" : "NANOAPP_SIGNED_FLAG_BIT",
    "type" : "int",
    "comment" : "\n     * The bit fields for mFlags as defined in context_hub.h.\n     ",
    "links" : [ ]
  }, {
    "name" : "NANOAPP_ENCRYPTED_FLAG_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NanoAppBinary>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void parseBinaryHeader()",
    "returnType" : "void",
    "comment" : "\n     * Parses the binary header and populates its field using mNanoAppBinary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBinary()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return the app binary byte array\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBinaryNoHeader()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return the app binary byte array without the leading header\n     *\n     * @throws IndexOutOfBoundsException if the nanoapp binary size is smaller than the header size\n     * @throws NullPointerException if the nanoapp binary is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasValidHeader()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the header is valid, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeaderVersion()",
    "returnType" : "int",
    "comment" : "\n     * @return the header version\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getNanoAppId()",
    "returnType" : "long",
    "comment" : "\n     * @return the app ID parsed from the nanoapp header\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNanoAppVersion()",
    "returnType" : "int",
    "comment" : "\n     * @return the app version parsed from the nanoapp header\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getHwHubType()",
    "returnType" : "long",
    "comment" : "\n     * @return the compile target hub type parsed from the nanoapp header\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getTargetChreApiMajorVersion()",
    "returnType" : "byte",
    "comment" : "\n     * @return the target CHRE API major version parsed from the nanoapp header\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getTargetChreApiMinorVersion()",
    "returnType" : "byte",
    "comment" : "\n     * @return the target CHRE API minor version parsed from the nanoapp header\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns the flags for the nanoapp as defined in context_hub.h.\n     *\n     * This method is meant to be used by the Context Hub Service.\n     *\n     * @return the flags for the nanoapp\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSigned()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the nanoapp binary is signed, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEncrypted()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the nanoapp binary is encrypted, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void parseBinaryHeader()", "public byte[] getBinary()", "public byte[] getBinaryNoHeader()", "public boolean hasValidHeader()", "public int getHeaderVersion()", "public long getNanoAppId()", "public int getNanoAppVersion()", "public long getHwHubType()", "public byte getTargetChreApiMajorVersion()", "public byte getTargetChreApiMinorVersion()", "public int getFlags()", "public boolean isSigned()", "public boolean isEncrypted()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)" ],
  "variableNames" : [ "TAG", "mNanoAppBinary", "mHeaderVersion", "mMagic", "mNanoAppId", "mNanoAppVersion", "mFlags", "mHwHubType", "mTargetChreApiMajorVersion", "mTargetChreApiMinorVersion", "mHasValidHeader", "EXPECTED_HEADER_VERSION", "EXPECTED_MAGIC_VALUE", "HEADER_ORDER", "HEADER_SIZE_BYTES", "NANOAPP_SIGNED_FLAG_BIT", "NANOAPP_ENCRYPTED_FLAG_BIT", "CREATOR" ]
}