{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/persistentdata/PersistentDataBlockManager.java",
  "packageName" : "android.service.persistentdata",
  "className" : "PersistentDataBlockManager",
  "comment" : "\n * Interface to the persistent data partition.  Provides access to information about the state\n * of factory reset protection.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sService",
    "type" : "IPersistentDataBlockService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLASH_LOCK_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the device's bootloader lock state is UNKNOWN.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLASH_LOCK_UNLOCKED",
    "type" : "int",
    "comment" : "\n     * Indicates that the device's bootloader is UNLOCKED.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLASH_LOCK_LOCKED",
    "type" : "int",
    "comment" : "\n     * Indicates that the device's bootloader is LOCKED.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int write(@Nullable byte[] data)",
    "returnType" : "int",
    "comment" : "\n     * Writes {@code data} to the persistent partition. Previously written data\n     * will be overwritten. This data will persist across factory resets.\n     *\n     * Returns the number of bytes written or -1 on error. If the block is too big\n     * to fit on the partition, returns -MAX_BLOCK_SIZE.\n     *\n     * {@link #wipe} will block any further {@link #write} operation until reboot,\n     * in which case -1 will be returned.\n     *\n     * @param data the data to write\n     *\n     * @hide\n     ",
    "links" : [ "#write", "#wipe" ]
  }, {
    "name" : "public byte[] read()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the data block stored on the persistent partition.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDataBlockSize()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the size of the block currently written to the persistent partition.\n     *\n     * Return -1 on error.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMaximumDataBlockSize()",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the maximum size allowed for a data block.\n     *\n     * Returns -1 on error.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void wipe()",
    "returnType" : "void",
    "comment" : "\n     * Zeroes the previously written block in its entirety. Calling this method\n     * will erase all data written to the persistent data partition.\n     * It will also prevent any further {@link #write} operation until reboot,\n     * in order to prevent a potential race condition. See b/30352311.\n     *\n     * @hide\n     ",
    "links" : [ "#write" ]
  }, {
    "name" : "public void setOemUnlockEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Writes a byte enabling or disabling the ability to \"OEM unlock\" the device.\n     *\n     * @deprecated use {@link OemLockManager#setOemUnlockAllowedByUser(boolean)} instead.\n     *\n     * @hide\n     ",
    "links" : [ "android.service.oemlock.OemLockManager#setOemUnlockAllowedByUser(boolean)" ]
  }, {
    "name" : "public boolean getOemUnlockEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not \"OEM unlock\" is enabled or disabled on this device.\n     *\n     * @deprecated use {@link OemLockManager#isOemUnlockAllowedByUser()} instead.\n     *\n     * @hide\n     ",
    "links" : [ "android.service.oemlock.OemLockManager#isOemUnlockAllowedByUser()" ]
  }, {
    "name" : "public int getFlashLockState()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves available information about this device's flash lock state.\n     *\n     * @return {@link #FLASH_LOCK_LOCKED} if device bootloader is locked,\n     * {@link #FLASH_LOCK_UNLOCKED} if device bootloader is unlocked, or {@link #FLASH_LOCK_UNKNOWN}\n     * if this information cannot be ascertained on this device.\n     *\n     * @hide\n     ",
    "links" : [ "#FLASH_LOCK_UNLOCKED", "#FLASH_LOCK_UNKNOWN", "#FLASH_LOCK_LOCKED" ]
  }, {
    "name" : "public String getPersistentDataPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the package name which can access the persistent data partition.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFactoryResetProtectionActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if FactoryResetProtection (FRP) is active, meaning the device rebooted and has\n     * not been able to deactivate FRP because the deactivation secrets were wiped by an untrusted\n     * factory reset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean deactivateFactoryResetProtection(@NonNull byte[] secret)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempt to deactivate FRP with the provided secret.  If the provided secret matches the\n     * stored FRP secret, FRP is deactivated and the method returns true.  Otherwise, FRP state\n     * remains unchanged and the method returns false.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setFactoryResetProtectionSecret(@NonNull byte[] secret)",
    "returnType" : "boolean",
    "comment" : "\n     * Store the provided FRP secret as the secret to be used for future FRP deactivation.  The\n     * secret must be 32 bytes in length.  Setting the all-zeros \"default\" value disables the FRP\n     * feature entirely.\n     *\n     * To ensure that the device doesn't end up in a bad state if a crash occurs, this method\n     * should be used in a three-step process:\n     *\n     * 1.  Generate a new secret and securely store any necessary copies (e.g. by encrypting them\n     *     and calling #write with a new data block that contains both the old encrypted secret\n     *     copies and the new ones).\n     * 2.  Call this method to set the new FRP secret.  This will also write the copy used during\n     *     normal boot.\n     * 3.  Delete any old FRP secret copies (e.g. by calling #write with a new data block that\n     *     contains only the new encrypted secret copies).\n     *\n     * Note that this method does nothing if FRP is currently active.\n     *\n     * This method does not require any permission, but can be called only by the\n     * PersistentDataBlockService's authorized caller UID.\n     *\n     * Returns true if the new secret was successfully written.  Returns false if FRP is currently\n     * active.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int write(@Nullable byte[] data)", "public byte[] read()", "public int getDataBlockSize()", "public long getMaximumDataBlockSize()", "public void wipe()", "public void setOemUnlockEnabled(boolean enabled)", "public boolean getOemUnlockEnabled()", "public int getFlashLockState()", "public String getPersistentDataPackageName()", "public boolean isFactoryResetProtectionActive()", "public boolean deactivateFactoryResetProtection(@NonNull byte[] secret)", "public boolean setFactoryResetProtectionSecret(@NonNull byte[] secret)" ],
  "variableNames" : [ "TAG", "sService", "FLASH_LOCK_UNKNOWN", "FLASH_LOCK_UNLOCKED", "FLASH_LOCK_LOCKED" ]
}