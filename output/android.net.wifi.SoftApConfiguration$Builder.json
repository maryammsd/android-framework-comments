{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/SoftApConfiguration.java",
  "packageName" : "android.net.wifi",
  "className" : "Builder",
  "comment" : "\n     * Builds a {@link SoftApConfiguration}, which allows an app to configure various aspects of a\n     * Soft AP.\n     *\n     * All fields are optional. By default, SSID and BSSID are automatically chosen by the\n     * framework, and an open network is created.\n     *\n     * @hide\n     ",
  "links" : [ "android.net.wifi.SoftApConfiguration" ],
  "variables" : [ {
    "name" : "mWifiSsid",
    "type" : "WifiSsid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBssid",
    "type" : "MacAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPassphrase",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHiddenSsid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannels",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxNumberOfClients",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecurityType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoShutdownEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShutdownTimeoutMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientControlByUser",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockedClientList",
    "type" : "List<MacAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedClientList",
    "type" : "List<MacAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMacRandomizationSetting",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBridgedModeOpportunisticShutdownEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIeee80211axEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIeee80211beEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsUserConfiguration",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBridgedModeOpportunisticShutdownTimeoutMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorElements",
    "type" : "List<ScanResult.InformationElement>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPersistentRandomizedMacAddress",
    "type" : "MacAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedAcsChannels2g",
    "type" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedAcsChannels5g",
    "type" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedAcsChannels6g",
    "type" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxChannelBandwidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorData",
    "type" : "List<OuiKeyedData>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SoftApConfiguration build()",
    "returnType" : "SoftApConfiguration",
    "comment" : "\n         * Builds the {@link SoftApConfiguration}.\n         *\n         * @return A new {@link SoftApConfiguration}, as configured by previous method calls.\n         ",
    "links" : [ "android.net.wifi.SoftApConfiguration" ]
  }, {
    "name" : "public Builder setSsid(@Nullable String ssid)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies a UTF-8 SSID for the AP.\n         * <p>\n         * Null SSID only support when configure a local-only hotspot.\n         * <p>\n         * <li>If not set, defaults to null.</li>\n         *\n         * @param ssid SSID of valid Unicode characters, or null to have the SSID automatically\n         *             chosen by the framework.\n         * @return Builder for chaining.\n         * @throws IllegalArgumentException when the SSID is empty, not unicode, or if the byte\n         *                                  representation is longer than 32 bytes.\n         *\n         * @deprecated Use {@link #setWifiSsid(WifiSsid)} instead.\n         ",
    "links" : [ "#setWifiSsid(WifiSsid)" ]
  }, {
    "name" : "public Builder setWifiSsid(@Nullable WifiSsid wifiSsid)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies an SSID for the AP in the form of WifiSsid.\n         * <p>\n         * Null SSID only support when configure a local-only hotspot.\n         * <p>\n         * <li>If not set, defaults to null.</li>\n         *\n         * @param wifiSsid SSID, or null ot have the SSID automatically chosen by the framework.\n         * @return Builder for chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setVendorElements(@NonNull List<ScanResult.InformationElement> vendorElements)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify vendor-specific information elements for the (Soft) AP to transmit in its beacons\n         * and probe responses. Method also validates the structure and throws\n         * IllegalArgumentException in cases when ID of IE is not 0xDD (221) or incoming list\n         * contain duplicate elements.\n         *\n         * @param vendorElements VendorElements\n         * @return Builder for chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBssid(@Nullable MacAddress bssid)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies a BSSID for the AP.\n         * <p>\n         * <li>If not set, defaults to null.</li>\n         *\n         * When this method is called, the caller needs to configure MAC randomization settings to\n         * {@link #RANDOMIZATION_NONE}. See {@link #setMacRandomizationSetting(int)} for details.\n         *\n         * If multiple bands are requested via {@link #setBands(int[])} or\n         * {@link #setChannels(SparseIntArray)}, HAL will derive 2 MAC addresses since framework\n         * only sends down 1 MAC address.\n         *\n         * An example (but different implementation may perform a different mapping):\n         * <li>MAC address 1: copy value of MAC address,\n         * and set byte 1 = (0xFF - BSSID[1])</li>\n         * <li>MAC address 2: copy value of MAC address,\n         * and set byte 2 = (0xFF - BSSID[2])</li>\n         *\n         * Example BSSID argument: e2:38:60:c4:0e:b7\n         * Derived MAC address 1: e2:c7:60:c4:0e:b7\n         * Derived MAC address 2: e2:38:9f:c4:0e:b7\n         *\n         * <p>\n         * Use {@link WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)} and\n         * {@link SoftApCapability#areFeaturesSupported(long)}\n         * with {@link SoftApCapability.SOFTAP_FEATURE_MAC_ADDRESS_CUSTOMIZATION} to determine\n         * whether or not this feature is supported.\n         *\n         * @param bssid BSSID, or null to have the BSSID chosen by the framework. The caller is\n         *              responsible for avoiding collisions.\n         * @return Builder for chaining.\n         * @throws IllegalArgumentException when the given BSSID is the all-zero\n         *                                  , multicast or broadcast MAC address.\n         ",
    "links" : [ "SoftApCapability.SOFTAP_FEATURE_MAC_ADDRESS_CUSTOMIZATION", "#RANDOMIZATION_NONE", "android.net.wifi.SoftApCapability#areFeaturesSupported(long)", "#setMacRandomizationSetting(int)", "WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)", "#setChannels(SparseIntArray)", "#setBands(int" ]
  }, {
    "name" : "public Builder setPassphrase(@Nullable String passphrase, @SecurityType int securityType)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies that this AP should use specific security type with the given ASCII passphrase.\n         *\n         * @param securityType One of the following security types:\n         * {@link #SECURITY_TYPE_OPEN},\n         * {@link #SECURITY_TYPE_WPA2_PSK},\n         * {@link #SECURITY_TYPE_WPA3_SAE_TRANSITION},\n         * {@link #SECURITY_TYPE_WPA3_SAE},\n         * {@link #SECURITY_TYPE_WPA3_OWE_TRANSITION},\n         * {@link #SECURITY_TYPE_WPA3_OWE}.\n         * @param passphrase The passphrase to use for sepcific {@code securityType} configuration\n         * or null with {@link #SECURITY_TYPE_OPEN}, {@link #SECURITY_TYPE_WPA3_OWE_TRANSITION},\n         * and {@link #SECURITY_TYPE_WPA3_OWE}.\n         *\n         * @return Builder for chaining.\n         * @throws IllegalArgumentException when the passphrase is non-null for\n         *             - {@link #SECURITY_TYPE_OPEN}\n         *             - {@link #SECURITY_TYPE_WPA3_OWE_TRANSITION}\n         *             - {@link #SECURITY_TYPE_WPA3_OWE}\n         * @throws IllegalArgumentException when the passphrase is empty for\n         *             - {@link #SECURITY_TYPE_WPA2_PSK},\n         *             - {@link #SECURITY_TYPE_WPA3_SAE_TRANSITION},\n         *             - {@link #SECURITY_TYPE_WPA3_SAE},\n         * @throws IllegalArgumentException before {@link android.os.Build.VERSION_CODES#TIRAMISU})\n         *         when the passphrase is not between 8 and 63 bytes (inclusive) for\n         *             - {@link #SECURITY_TYPE_WPA2_PSK}\n         *             - {@link #SECURITY_TYPE_WPA3_SAE_TRANSITION}\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "#SECURITY_TYPE_WPA3_OWE", "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_WPA3_SAE_TRANSITION", "#SECURITY_TYPE_WPA3_SAE", "#SECURITY_TYPE_WPA3_OWE_TRANSITION", "#SECURITY_TYPE_WPA2_PSK" ]
  }, {
    "name" : "public Builder setHiddenSsid(boolean hiddenSsid)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the AP is hidden (doesn't broadcast its SSID) or\n         * not (broadcasts its SSID).\n         * <p>\n         * <li>If not set, defaults to false (i.e not a hidden network).</li>\n         *\n         * @param hiddenSsid true for a hidden SSID, false otherwise.\n         * @return Builder for chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBand(@BandType int band)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the band for the AP.\n         * <p>\n         * <li>If not set, defaults to {@link #BAND_2GHZ}.</li>\n         *\n         * @param band One or combination of the following band type:\n         * {@link #BAND_2GHZ}, {@link #BAND_5GHZ}, {@link #BAND_6GHZ}.\n         * @return Builder for chaining.\n         * @throws IllegalArgumentException when an invalid band type is provided.\n         ",
    "links" : [ "#BAND_2GHZ", "#BAND_5GHZ", "#BAND_6GHZ" ]
  }, {
    "name" : "public Builder setBands(@NonNull int[] bands)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the bands for the APs.\n         * If more than 1 band is set, this will bring up concurrent APs.\n         * on the requested bands (if possible).\n         * <p>\n         *\n         * Use {@link WifiManager#isBridgedApConcurrencySupported()} to determine\n         * whether or not concurrent APs are supported.\n         *\n         * Requires the driver to support {@link SoftApCapability.SOFTAP_FEATURE_ACS_OFFLOAD}\n         * when multiple bands are configured. Otherwise,\n         * {@link WifiManager#startTetheredHotspot(SoftApConfiguration)} will report error code\n         * {@link WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION}.\n         *\n         * Note: Only supports 2.4GHz + 5GHz bands. If any other band is set, will report error\n         * {@link WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION}.\n         *\n         * @param bands Array of the {@link #BandType}.\n         * @return Builder for chaining.\n         * @throws IllegalArgumentException when more than 2 bands are set or an invalid band type\n         *                                  is provided.\n         ",
    "links" : [ "SoftApCapability.SOFTAP_FEATURE_ACS_OFFLOAD", "#BandType", "android.net.wifi.WifiManager#isBridgedApConcurrencySupported()", "android.net.wifi.WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION", "android.net.wifi.WifiManager#startTetheredHotspot(SoftApConfiguration)" ]
  }, {
    "name" : "public Builder setChannel(int channel, @BandType int band)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the channel and associated band for the AP.\n         *\n         * The channel which AP resides on. Valid channels are country dependent.\n         * The {@link SoftApCapability#getSupportedChannelList(int)} can be used to obtain\n         * valid channels.\n         *\n         * <p>\n         * If not set, the default for the channel is the special value 0 which has the\n         * framework auto-select a valid channel from the band configured with\n         * {@link #setBand(int)}.\n         *\n         * The channel auto selection will be offloaded to driver when\n         * {@link SoftApCapability#areFeaturesSupported(long)}\n         * with {@link SoftApCapability.SOFTAP_FEATURE_ACS_OFFLOAD}\n         * return true. The driver will auto select the best channel (e.g. best performance)\n         * based on environment interference. Check {@link SoftApCapability} for more detail.\n         *\n         * The API contains (band, channel) input since the 6GHz band uses the same channel\n         * numbering scheme as is used in the 2.4GHz and 5GHz band. Therefore, both are needed to\n         * uniquely identify individual channels.\n         *\n         * <p>\n         * @param channel operating channel of the AP.\n         * @param band containing this channel.\n         * @return Builder for chaining.\n         * @throws IllegalArgumentException when the invalid channel or band type is configured.\n         ",
    "links" : [ "SoftApCapability.SOFTAP_FEATURE_ACS_OFFLOAD", "android.net.wifi.SoftApCapability", "#setBand(int)", "android.net.wifi.SoftApCapability#areFeaturesSupported(long)", "android.net.wifi.SoftApCapability#getSupportedChannelList(int)" ]
  }, {
    "name" : "public Builder setChannels(@NonNull SparseIntArray channels)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the channels and associated bands for the APs.\n         *\n         * When more than 1 channel is set, this will bring up concurrent APs on the requested\n         * channels and bands (if possible).\n         *\n         * Valid channels are country dependent.\n         * The {@link SoftApCapability#getSupportedChannelList(int)} can be used to obtain\n         * valid channels in each band.\n         *\n         * Use {@link WifiManager#isBridgedApConcurrencySupported()} to determine\n         * whether or not concurrent APs are supported.\n         *\n         * <p>\n         * If not set, the default for the channel is the special value 0 which has the framework\n         * auto-select a valid channel from the band configured with {@link #setBands(int[])}.\n         *\n         * The channel auto selection will be offloaded to driver when\n         * {@link SoftApCapability#areFeaturesSupported(long)}\n         * with {@link SoftApCapability.SOFTAP_FEATURE_ACS_OFFLOAD}\n         * returns true. The driver will auto select the best channel (e.g. best performance)\n         * based on environment interference. Check {@link SoftApCapability} for more detail.\n         *\n         * Requires the driver to support {@link SoftApCapability.SOFTAP_FEATURE_ACS_OFFLOAD}\n         * when multiple bands are configured without specified channel value (i.e. channel is\n         * the special value 0). Otherwise,\n         * {@link WifiManager#startTetheredHotspot(SoftApConfiguration)} will report error code\n         * {@link WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION}.\n         *\n         * Note: Only supports 2.4GHz + 5GHz bands. If any other band is set, will report error\n         * {@link WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION}.\n         *\n         * The API contains (band, channel) input since the 6GHz band uses the same channel\n         * numbering scheme as is used in the 2.4GHz and 5GHz band. Therefore, both are needed to\n         * uniquely identify individual channels.\n         *\n         * Reference the Wi-Fi channel numbering and the channelization in IEEE 802.11-2016\n         * specifications, section 17.3.8.4.2, 17.3.8.4.3 and Table 15-6.\n         *\n         * <p>\n         * @param channels SparseIntArray (key: {@code #BandType} , value: channel) consists of\n         *                 {@code BAND_} and corresponding channel.\n         * @return Builder for chaining.\n         * @throws IllegalArgumentException when more than 2 channels are set or the invalid\n         *                                  channel or band type is configured.\n         ",
    "links" : [ "SoftApCapability.SOFTAP_FEATURE_ACS_OFFLOAD", "android.net.wifi.SoftApCapability", "android.net.wifi.SoftApCapability#areFeaturesSupported(long)", "android.net.wifi.WifiManager#isBridgedApConcurrencySupported()", "android.net.wifi.WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION", "android.net.wifi.SoftApCapability#getSupportedChannelList(int)", "#setBands(int", "android.net.wifi.WifiManager#startTetheredHotspot(SoftApConfiguration)" ]
  }, {
    "name" : "public Builder setMaxNumberOfClients(@IntRange(from = 0) int maxNumberOfClients)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the maximum number of clients that can associate to the AP.\n         *\n         * The maximum number of clients (STAs) which can associate to the AP.\n         * The AP will reject association from any clients above this number.\n         * Specify a value of 0 to have the framework automatically use the maximum number\n         * which the device can support (based on hardware and carrier constraints).\n         * <p>\n         * Use {@link WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)} and\n         * {@link SoftApCapability#getMaxSupportedClients} to get the maximum number of clients\n         * which the device supports (based on hardware and carrier constraints).\n         *\n         * <p>\n         * <li>If not set, defaults to 0.</li>\n         *\n         * This method requires HAL support. If the method is used to set a\n         * non-zero {@code maxNumberOfClients} value then\n         * {@link WifiManager#startTetheredHotspot(SoftApConfiguration)} will report error code\n         * {@link WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION}.\n         *\n         * <p>\n         * Use {@link WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)} and\n         * {@link SoftApCapability#areFeaturesSupported(long)}\n         * with {@link SoftApCapability.SOFTAP_FEATURE_CLIENT_FORCE_DISCONNECT} to determine whether\n         * or not this feature is supported.\n         *\n         * @param maxNumberOfClients maximum client number of the AP.\n         * @return Builder for chaining.\n         ",
    "links" : [ "android.net.wifi.SoftApCapability#getMaxSupportedClients", "SoftApCapability.SOFTAP_FEATURE_CLIENT_FORCE_DISCONNECT", "android.net.wifi.SoftApCapability#areFeaturesSupported(long)", "WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)", "android.net.wifi.WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION", "android.net.wifi.WifiManager#startTetheredHotspot(SoftApConfiguration)" ]
  }, {
    "name" : "public Builder setAutoShutdownEnabled(boolean enable)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether auto shutdown is enabled or not.\n         * The Soft AP will shut down when there are no devices connected to it for\n         * the timeout duration.\n         *\n         * <p>\n         * <li>If not set, defaults to true</li>\n         *\n         * @param enable true to enable, false to disable.\n         * @return Builder for chaining.\n         *\n         * @see #setShutdownTimeoutMillis(long)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShutdownTimeoutMillis(@IntRange(from = -1) long timeoutMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the shutdown timeout in milliseconds.\n         * The Soft AP will shut down when there are no devices connected to it for\n         * the timeout duration.\n         *\n         * Specify a value of {@link #DEFAULT_TIMEOUT} to have the framework automatically use\n         * default timeout setting which defined in\n         * {@link R.integer.config_wifi_framework_soft_ap_timeout_delay}\n         *\n         * <p>\n         * <li>If not set, defaults to {@link #DEFAULT_TIMEOUT}</li>\n         * <li>The shut down timeout will apply when {@link #setAutoShutdownEnabled(boolean)} is\n         * set to true</li>\n         *\n         * @param timeoutMillis milliseconds of the timeout delay. Any value less than 1 is invalid\n         *                      except {@link #DEFAULT_TIMEOUT}.\n         * @return Builder for chaining.\n         *\n         * @see #setAutoShutdownEnabled(boolean)\n         ",
    "links" : [ "#setAutoShutdownEnabled(boolean)", "R.integer.config_wifi_framework_soft_ap_timeout_delay", "#DEFAULT_TIMEOUT" ]
  }, {
    "name" : "public Builder setClientControlByUserEnabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the Soft AP to require manual user control of client association.\n         * If disabled (the default) then any client which isn't in the blocked list\n         * {@link #getBlockedClientList()} can associate to this Soft AP using the\n         * correct credentials until the Soft AP capacity is reached (capacity is hardware, carrier,\n         * or user limited - using {@link #setMaxNumberOfClients(int)}).\n         *\n         * If manual user control is enabled then clients will be accepted, rejected, or require\n         * a user approval based on the configuration provided by\n         * {@link #setBlockedClientList(List)} and {@link #setAllowedClientList(List)}.\n         *\n         * <p>\n         * This method requires HAL support. HAL support can be determined using\n         * {@link WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)} and\n         * {@link SoftApCapability#areFeaturesSupported(long)}\n         * with {@link SoftApCapability.SOFTAP_FEATURE_CLIENT_FORCE_DISCONNECT}\n         *\n         * <p>\n         * If the method is called on a device without HAL support then starting the soft AP\n         * using {@link WifiManager#startTetheredHotspot(SoftApConfiguration)} will fail with\n         * {@link WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION}.\n         *\n         * <p>\n         * <li>If not set, defaults to false (i.e The authoriztion is not required).</li>\n         *\n         * @param enabled true for enabling the control by user, false otherwise.\n         * @return Builder for chaining.\n         ",
    "links" : [ "#setMaxNumberOfClients(int)", "#setBlockedClientList(List)", "SoftApCapability.SOFTAP_FEATURE_CLIENT_FORCE_DISCONNECT", "#setAllowedClientList(List)", "android.net.wifi.SoftApCapability#areFeaturesSupported(long)", "WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)", "android.net.wifi.WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION", "#getBlockedClientList()", "android.net.wifi.WifiManager#startTetheredHotspot(SoftApConfiguration)" ]
  }, {
    "name" : "public Builder setAllowedAcsChannels(@BandType int band, @NonNull int[] channels)",
    "returnType" : "Builder",
    "comment" : "\n         * Configures the set of channel numbers in the specified band that are allowed\n         * to be selected by the Automatic Channel Selection (ACS) algorithm.\n         * <p>\n         *\n         * Requires the driver to support {@link SoftApCapability#SOFTAP_FEATURE_ACS_OFFLOAD}.\n         * Otherwise, these sets will be ignored.\n         * <p>\n         *\n         * @param band one of the following band types:\n         * {@link #BAND_2GHZ}, {@link #BAND_5GHZ}, {@link #BAND_6GHZ}.\n         *\n         * @param channels that are allowed to be used by ACS algorithm in this band. If it is\n         * configured to an empty array or not configured, then all channels within that band\n         * will be allowed.\n         * <p>\n         *\n         * @return Builder for chaining.\n         ",
    "links" : [ "#BAND_2GHZ", "android.net.wifi.SoftApCapability#SOFTAP_FEATURE_ACS_OFFLOAD", "#BAND_5GHZ", "#BAND_6GHZ" ]
  }, {
    "name" : "public Builder setMaxChannelBandwidth(@WifiAnnotations.Bandwidth int maxChannelBandwidth)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets maximum channel bandwidth for the SoftAp Connection\n         *\n         * If not set, the SoftAp connection will seek the maximum channel bandwidth achievable on\n         * the device. However, in some cases the caller will need to put a cap on the channel\n         * bandwidth through this API.\n         *\n         * @param maxChannelBandwidth one of {@link SoftApInfo#CHANNEL_WIDTH_AUTO},\n         * {@link SoftApInfo#CHANNEL_WIDTH_20MHZ}, {@link SoftApInfo#CHANNEL_WIDTH_40MHZ},\n         * {@link SoftApInfo#CHANNEL_WIDTH_80MHZ}, {@link SoftApInfo#CHANNEL_WIDTH_160MHZ},\n         * or {@link SoftApInfo#CHANNEL_WIDTH_320MHZ}\n         *\n         * @return builder for chaining\n         ",
    "links" : [ "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_20MHZ", "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_80MHZ", "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_160MHZ", "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_AUTO", "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_320MHZ", "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_40MHZ" ]
  }, {
    "name" : "public Builder setAllowedClientList(@NonNull List<MacAddress> allowedClientList)",
    "returnType" : "Builder",
    "comment" : "\n         * This method together with {@link setClientControlByUserEnabled(boolean)} control client\n         * connections to the AP. If client control by user is disabled using the above method then\n         * this API has no effect and clients are allowed to associate to the AP (within limit of\n         * max number of clients).\n         *\n         * If client control by user is enabled then this API configures the list of clients\n         * which are explicitly allowed. These are auto-accepted.\n         *\n         * All other clients which attempt to associate, whose MAC addresses are on neither list,\n         * are:\n         * <ul>\n         * <li>Rejected</li>\n         * <li>A callback {@link WifiManager.SoftApCallback#onBlockedClientConnecting(WifiClient)}\n         * is issued (which allows the user to add them to the allowed client list if desired).<li>\n         * </ul>\n         *\n         * @param allowedClientList list of clients which are allowed to associate to the AP\n         *                          without user pre-approval.\n         * @return Builder for chaining.\n         ",
    "links" : [ "WifiManager.SoftApCallback#onBlockedClientConnecting(WifiClient)", "setClientControlByUserEnabled(boolean)" ]
  }, {
    "name" : "public Builder setBlockedClientList(@NonNull List<MacAddress> blockedClientList)",
    "returnType" : "Builder",
    "comment" : "\n         * This API configures the list of clients which are blocked and cannot associate\n         * to the Soft AP.\n         *\n         * <p>\n         * This method requires HAL support. HAL support can be determined using\n         * {@link WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)} and\n         * {@link SoftApCapability#areFeaturesSupported(long)}\n         * with {@link SoftApCapability.SOFTAP_FEATURE_CLIENT_FORCE_DISCONNECT}\n         *\n         * <p>\n         * If the method is called on a device without HAL support then starting the soft AP\n         * using {@link WifiManager#startTetheredHotspot(SoftApConfiguration)} will fail with\n         * {@link WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION}.\n         *\n         * @param blockedClientList list of clients which are not allowed to associate to the AP.\n         * @return Builder for chaining.\n         ",
    "links" : [ "SoftApCapability.SOFTAP_FEATURE_CLIENT_FORCE_DISCONNECT", "android.net.wifi.SoftApCapability#areFeaturesSupported(long)", "WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)", "android.net.wifi.WifiManager#SAP_START_FAILURE_UNSUPPORTED_CONFIGURATION", "android.net.wifi.WifiManager#startTetheredHotspot(SoftApConfiguration)" ]
  }, {
    "name" : "public Builder setMacRandomizationSetting(@MacRandomizationSetting int macRandomizationSetting)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the level of MAC randomization for the AP BSSID.\n         * The Soft AP BSSID will be randomized only if the BSSID isn't set\n         * {@link #setBssid(MacAddress)} and this method is either uncalled\n         * or called with {@link #RANDOMIZATION_PERSISTENT} or\n         * {@link #RANDOMIZATION_NON_PERSISTENT}. When this method is called with\n         * {@link #RANDOMIZATION_PERSISTENT} or {@link #RANDOMIZATION_NON_PERSISTENT}, the caller\n         * the caller must not call {@link #setBssid(MacAddress)}.\n         *\n         * <p>\n         * <li>If not set, defaults to {@link #RANDOMIZATION_NON_PERSISTENT}</li>\n         *\n         * <p>\n         * Requires HAL support when set to {@link #RANDOMIZATION_PERSISTENT} or\n         * {@link #RANDOMIZATION_NON_PERSISTENT}.\n         * Use {@link WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)} and\n         * {@link SoftApCapability#areFeaturesSupported(long)}\n         * with {@link SoftApCapability.SOFTAP_FEATURE_MAC_ADDRESS_CUSTOMIZATION} to determine\n         * whether or not this feature is supported.\n         *\n         * @param macRandomizationSetting One of the following setting:\n         * {@link #RANDOMIZATION_NONE}, {@link #RANDOMIZATION_PERSISTENT} or\n         * {@link #RANDOMIZATION_NON_PERSISTENT}.\n         * @return Builder for chaining.\n         *\n         * @see #setBssid(MacAddress)\n         ",
    "links" : [ "#RANDOMIZATION_NON_PERSISTENT", "SoftApCapability.SOFTAP_FEATURE_MAC_ADDRESS_CUSTOMIZATION", "#RANDOMIZATION_PERSISTENT", "#RANDOMIZATION_NONE", "android.net.wifi.SoftApCapability#areFeaturesSupported(long)", "WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)", "#setBssid(MacAddress)" ]
  }, {
    "name" : "public Builder setBridgedModeOpportunisticShutdownEnabled(boolean enable)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether or not opportunistic shut down of an AP instance in bridged mode\n         * is enabled.\n         *\n         * <p>\n         * If enabled, the framework will shutdown one of the AP instances if it is idle for\n         * the timeout duration - meaning there are no devices connected to it.\n         * If both AP instances are idle for the timeout duration then the framework will\n         * shut down the AP instance operating on the higher frequency. For instance,\n         * if the AP instances operate at 2.4GHz and 5GHz and are both idle for the\n         * timeout duration then the 5GHz AP instance will be shut down.\n         * <p>\n         *\n         * Note: the opportunistic timeout only applies to one AP instance of the bridge AP.\n         * If one of the AP instances has already been disabled for any reason, including due to\n         * an opportunistic timeout or hardware issues or coexistence issues,\n         * then the opportunistic timeout is no longer active.\n         *\n         * <p>\n         * The shutdown timer specified by {@link #setShutdownTimeoutMillis(long)} controls the\n         * overall shutdown of the bridged AP and is still in use independently of the opportunistic\n         * timer controlled by this AP.\n         *\n         * <p>\n         * <li>If not set, defaults to true</li>\n         *\n         * @param enable true to enable, false to disable.\n         * @return Builder for chaining.\n         *\n         ",
    "links" : [ "#setShutdownTimeoutMillis(long)" ]
  }, {
    "name" : "public Builder setIeee80211axEnabled(boolean enable)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether or not to enable 802.11ax on the Soft AP.\n         *\n         * <p>\n         * Note: Only relevant when the device supports 802.11ax on the Soft AP.\n         * If enabled on devices that do not support 802.11ax then ignored.\n         * Use {@link WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)} and\n         * {@link SoftApCapability#areFeaturesSupported(long)}\n         * with {@link SoftApCapability.SOFTAP_FEATURE_IEEE80211_AX} to determine\n         * whether or not 802.11ax is supported on the Soft AP.\n         * <p>\n         * <li>If not set, defaults to true - which will be ignored on devices\n         * which do not support 802.11ax</li>\n         *\n         * @param enable true to enable, false to disable.\n         * @return Builder for chaining.\n         *\n         ",
    "links" : [ "android.net.wifi.SoftApCapability#areFeaturesSupported(long)", "WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)", "SoftApCapability.SOFTAP_FEATURE_IEEE80211_AX" ]
  }, {
    "name" : "public Builder setIeee80211beEnabled(boolean enable)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether or not to enable 802.11be on the Soft AP.\n         *\n         * <p>\n         * Note: Only relevant when the device supports 802.11be on the Soft AP.\n         * If enabled on devices that do not support 802.11be then ignored.\n         * Use {@link WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)} and\n         * {@link SoftApCapability#areFeaturesSupported(long)}\n         * with {@link SoftApCapability.SOFTAP_FEATURE_IEEE80211_BE} to determine\n         * whether or not 802.11be is supported on the Soft AP.\n         * <p>\n         * <li>If not set, defaults to true - which will be ignored on devices\n         * which do not support 802.11be</li>\n         *\n         * @param enable true to enable, false to disable.\n         * @return Builder for chaining.\n         *\n         ",
    "links" : [ "SoftApCapability.SOFTAP_FEATURE_IEEE80211_BE", "android.net.wifi.SoftApCapability#areFeaturesSupported(long)", "WifiManager.SoftApCallback#onCapabilityChanged(SoftApCapability)" ]
  }, {
    "name" : "public Builder setUserConfiguration(boolean isUserConfigured)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether or not the configuration is configured by user.\n         *\n         * @param isUserConfigured true to user configuration, false otherwise.\n         * @return Builder for chaining.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBridgedModeOpportunisticShutdownTimeoutMillis(@IntRange(from = -1) long timeoutMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies bridged mode opportunistic shutdown timeout in milliseconds.\n         * An instance of bridged Soft AP will shut down when there is no device connected to it\n         * for this timeout duration.\n         *\n         * Specify a value of {@link DEFAULT_TIMEOUT} to have the framework automatically use\n         * default timeout setting defined by\n         * {@link\n         * R.integer.config_wifiFrameworkSoftApShutDownIdleInstanceInBridgedModeTimeoutMillisecond}\n         *\n         * <p>\n         * <li>If not set, defaults to {@link #DEFAULT_TIMEOUT}</li>\n         * <li>The shut down timeout will apply when\n         * {@link #setBridgedModeOpportunisticShutdownEnabled(boolean)} is set to true</li>\n         *\n         * @param timeoutMillis milliseconds of the timeout delay. Any value less than 1 is invalid\n         *                      except {@link #DEFAULT_TIMEOUT}.\n         * @return Builder for chaining.\n         *\n         * @see #setBridgedModeOpportunisticShutdownEnabled(boolean)\n         ",
    "links" : [ "R.integer.config_wifiFrameworkSoftApShutDownIdleInstanceInBridgedModeTimeoutMillisecond", "DEFAULT_TIMEOUT", "#setBridgedModeOpportunisticShutdownEnabled(boolean)", "#DEFAULT_TIMEOUT" ]
  }, {
    "name" : "public Builder setRandomizedMacAddress(@NonNull MacAddress mac)",
    "returnType" : "Builder",
    "comment" : "\n         * @param mac persistent randomized MacAddress generated by the frameworks.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setVendorData(@NonNull List<OuiKeyedData> vendorData)",
    "returnType" : "Builder",
    "comment" : "\n         * Set additional vendor-provided configuration data.\n         *\n         * @param vendorData List of {@link OuiKeyedData} containing the vendor-provided\n         *     configuration data. Note that multiple elements with the same OUI are allowed.\n         * @return Builder for chaining.\n         ",
    "links" : [ "android.net.wifi.OuiKeyedData" ]
  } ],
  "methodNames" : [ "public SoftApConfiguration build()", "public Builder setSsid(@Nullable String ssid)", "public Builder setWifiSsid(@Nullable WifiSsid wifiSsid)", "public Builder setVendorElements(@NonNull List<ScanResult.InformationElement> vendorElements)", "public Builder setBssid(@Nullable MacAddress bssid)", "public Builder setPassphrase(@Nullable String passphrase, @SecurityType int securityType)", "public Builder setHiddenSsid(boolean hiddenSsid)", "public Builder setBand(@BandType int band)", "public Builder setBands(@NonNull int[] bands)", "public Builder setChannel(int channel, @BandType int band)", "public Builder setChannels(@NonNull SparseIntArray channels)", "public Builder setMaxNumberOfClients(@IntRange(from = 0) int maxNumberOfClients)", "public Builder setAutoShutdownEnabled(boolean enable)", "public Builder setShutdownTimeoutMillis(@IntRange(from = -1) long timeoutMillis)", "public Builder setClientControlByUserEnabled(boolean enabled)", "public Builder setAllowedAcsChannels(@BandType int band, @NonNull int[] channels)", "public Builder setMaxChannelBandwidth(@WifiAnnotations.Bandwidth int maxChannelBandwidth)", "public Builder setAllowedClientList(@NonNull List<MacAddress> allowedClientList)", "public Builder setBlockedClientList(@NonNull List<MacAddress> blockedClientList)", "public Builder setMacRandomizationSetting(@MacRandomizationSetting int macRandomizationSetting)", "public Builder setBridgedModeOpportunisticShutdownEnabled(boolean enable)", "public Builder setIeee80211axEnabled(boolean enable)", "public Builder setIeee80211beEnabled(boolean enable)", "public Builder setUserConfiguration(boolean isUserConfigured)", "public Builder setBridgedModeOpportunisticShutdownTimeoutMillis(@IntRange(from = -1) long timeoutMillis)", "public Builder setRandomizedMacAddress(@NonNull MacAddress mac)", "public Builder setVendorData(@NonNull List<OuiKeyedData> vendorData)" ],
  "variableNames" : [ "mWifiSsid", "mBssid", "mPassphrase", "mHiddenSsid", "mChannels", "mMaxNumberOfClients", "mSecurityType", "mAutoShutdownEnabled", "mShutdownTimeoutMillis", "mClientControlByUser", "mBlockedClientList", "mAllowedClientList", "mMacRandomizationSetting", "mBridgedModeOpportunisticShutdownEnabled", "mIeee80211axEnabled", "mIeee80211beEnabled", "mIsUserConfiguration", "mBridgedModeOpportunisticShutdownTimeoutMillis", "mVendorElements", "mPersistentRandomizedMacAddress", "mAllowedAcsChannels2g", "mAllowedAcsChannels5g", "mAllowedAcsChannels6g", "mMaxChannelBandwidth", "mVendorData" ]
}