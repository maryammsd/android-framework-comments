{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/PushbackReader.java",
  "packageName" : "java.io",
  "className" : "PushbackReader",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "buf",
    "type" : "char[]",
    "comment" : " Pushback buffer ",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : " Current position in buffer ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : " Checks to make sure that the stream has not been closed. ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a single character.\n     *\n     * @return     The character read, or -1 if the end of the stream has been\n     *             reached\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads characters into a portion of an array.\n     *\n     * @param      cbuf  Destination buffer\n     * @param      off   Offset at which to start writing characters\n     * @param      len   Maximum number of characters to read\n     *\n     * @return     The number of characters read, or -1 if the end of the\n     *             stream has been reached\n     *\n     * @exception  IOException  If an I/O error occurs\n     * @exception  IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unread(int c) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Pushes back a single character by copying it to the front of the\n     * pushback buffer. After this method returns, the next character to be read\n     * will have the value <code>(char)c</code>.\n     *\n     * @param  c  The int value representing a character to be pushed back\n     *\n     * @exception  IOException  If the pushback buffer is full,\n     *                          or if some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unread(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Pushes back a portion of an array of characters by copying it to the\n     * front of the pushback buffer.  After this method returns, the next\n     * character to be read will have the value <code>cbuf[off]</code>, the\n     * character after that will have the value <code>cbuf[off+1]</code>, and\n     * so forth.\n     *\n     * @param  cbuf  Character array\n     * @param  off   Offset of first character to push back\n     * @param  len   Number of characters to push back\n     *\n     * @exception  IOException  If there is insufficient room in the pushback\n     *                          buffer, or if some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unread(char[] cbuf) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Pushes back an array of characters by copying it to the front of the\n     * pushback buffer.  After this method returns, the next character to be\n     * read will have the value <code>cbuf[0]</code>, the character after that\n     * will have the value <code>cbuf[1]</code>, and so forth.\n     *\n     * @param  cbuf  Character array to push back\n     *\n     * @exception  IOException  If there is insufficient room in the pushback\n     *                          buffer, or if some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean ready() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this stream is ready to be read.\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mark(int readAheadLimit) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Marks the present position in the stream. The <code>mark</code>\n     * for class <code>PushbackReader</code> always throws an exception.\n     *\n     * @exception  IOException  Always, since mark is not supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Resets the stream. The <code>reset</code> method of\n     * <code>PushbackReader</code> always throws an exception.\n     *\n     * @exception  IOException  Always, since reset is not supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this stream supports the mark() operation, which it does\n     * not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the stream and releases any system resources associated with\n     * it. Once the stream has been closed, further read(),\n     * unread(), ready(), or skip() invocations will throw an IOException.\n     * Closing a previously closed stream has no effect. This method will block\n     * while there is another thread blocking on the reader.\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips characters.  This method will block until some characters are\n     * available, an I/O error occurs, or the end of the stream is reached.\n     *\n     * @param  n  The number of characters to skip\n     *\n     * @return    The number of characters actually skipped\n     *\n     * @exception  IllegalArgumentException  If <code>n</code> is negative.\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureOpen() throws IOException", "public int read() throws IOException", "public int read(char[] cbuf, int off, int len) throws IOException", "public void unread(int c) throws IOException", "public void unread(char[] cbuf, int off, int len) throws IOException", "public void unread(char[] cbuf) throws IOException", "public boolean ready() throws IOException", "public void mark(int readAheadLimit) throws IOException", "public void reset() throws IOException", "public boolean markSupported()", "public void close() throws IOException", "public long skip(long n) throws IOException" ],
  "variableNames" : [ "buf", "pos" ]
}