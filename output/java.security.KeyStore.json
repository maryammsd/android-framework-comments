{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/KeyStore.java",
  "packageName" : "java.security",
  "className" : "KeyStore",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "kdebug",
    "type" : "Debug",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYSTORE_TYPE",
    "type" : "String",
    "comment" : "\n     * Constant to lookup in the Security properties file to determine\n     * the default keystore type.\n     * In the Security properties file, the default keystore type is given as:\n     * <pre>\n     * keystore.type=jks\n     * </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "String",
    "comment" : " The keystore type",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "keyStoreSpi",
    "type" : "KeyStoreSpi",
    "comment" : " The provider implementation",
    "links" : [ ]
  }, {
    "name" : "initialized",
    "type" : "boolean",
    "comment" : " Has this keystore been initialized (loaded)?",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static KeyStore getInstance(String type) throws KeyStoreException",
    "returnType" : "KeyStore",
    "comment" : "\n     * Returns a keystore object of the specified type.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new KeyStore object encapsulating the\n     * KeyStoreSpi implementation from the first\n     * Provider that supports the specified type is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param type the type of keystore.\n     * See the KeyStore section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keystore-types\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard keystore types.\n     *\n     * @return a keystore object of the specified type\n     *\n     * @exception KeyStoreException if no Provider supports a\n     *          KeyStoreSpi implementation for the\n     *          specified type.\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static KeyStore getInstance(String type, String provider) throws KeyStoreException, NoSuchProviderException",
    "returnType" : "KeyStore",
    "comment" : "\n     * Returns a keystore object of the specified type.\n     *\n     * <p> A new KeyStore object encapsulating the\n     * KeyStoreSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param type the type of keystore.\n     * See the KeyStore section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keystore-types\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard keystore types.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return a keystore object of the specified type\n     *\n     * @exception KeyStoreException if a KeyStoreSpi\n     *          implementation for the specified type is not\n     *          available from the specified provider.\n     *\n     * @exception NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @exception IllegalArgumentException if the provider name is null\n     *          or empty.\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static KeyStore getInstance(String type, Provider provider) throws KeyStoreException",
    "returnType" : "KeyStore",
    "comment" : "\n     * Returns a keystore object of the specified type.\n     *\n     * <p> A new KeyStore object encapsulating the\n     * KeyStoreSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param type the type of keystore.\n     * See the KeyStore section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keystore-types\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard keystore types.\n     *\n     * @param provider the provider.\n     *\n     * @return a keystore object of the specified type\n     *\n     * @throws IllegalArgumentException if the specified provider is\n     *         {@code null}\n     *\n     * @throws KeyStoreException if {@code KeyStoreSpi}\n     *         implementation for the specified type is not available\n     *         from the specified {@code Provider} object\n     *\n     * @throws NullPointerException if {@code type} is {@code null}\n     *\n     * @see Provider\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String getDefaultType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the default keystore type as specified by the\n     * {@code keystore.type} security property, or the string\n     * {@literal \"jks\"} (acronym for {@literal \"Java keystore\"})\n     * if no such property exists.\n     *\n     * <p>The default keystore type can be used by applications that do not\n     * want to use a hard-coded keystore type when calling one of the\n     * {@code getInstance} methods, and want to provide a default keystore\n     * type in case a user does not specify its own.\n     *\n     * <p>The default keystore type can be changed by setting the value of the\n     * {@code keystore.type} security property to the desired keystore type.\n     *\n     * @return the default keystore type as specified by the\n     * {@code keystore.type} security property, or the string {@literal \"jks\"}\n     * if no such property exists.\n     * @see java.security.Security security properties\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this keystore.\n     *\n     * @return the provider of this keystore.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the type of this keystore.\n     *\n     * @return the type of this keystore.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Key getKey(String alias, char[] password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException",
    "returnType" : "Key",
    "comment" : "\n     * Returns the key associated with the given alias, using the given\n     * password to recover it.  The key must have been associated with\n     * the alias by a call to {@code setKeyEntry},\n     * or by a call to {@code setEntry} with a\n     * {@code PrivateKeyEntry} or {@code SecretKeyEntry}.\n     *\n     * @param alias the alias name\n     * @param password the password for recovering the key\n     *\n     * @return the requested key, or null if the given alias does not exist\n     * or does not identify a key-related entry.\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     * @exception NoSuchAlgorithmException if the algorithm for recovering the\n     * key cannot be found\n     * @exception UnrecoverableKeyException if the key cannot be recovered\n     * (e.g., the given password is wrong).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Certificate[] getCertificateChain(String alias) throws KeyStoreException",
    "returnType" : "Certificate[]",
    "comment" : "\n     * Returns the certificate chain associated with the given alias.\n     * The certificate chain must have been associated with the alias\n     * by a call to {@code setKeyEntry},\n     * or by a call to {@code setEntry} with a\n     * {@code PrivateKeyEntry}.\n     *\n     * @param alias the alias name\n     *\n     * @return the certificate chain (ordered with the user's certificate first\n     * followed by zero or more certificate authorities), or null if the given alias\n     * does not exist or does not contain a certificate chain\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Certificate getCertificate(String alias) throws KeyStoreException",
    "returnType" : "Certificate",
    "comment" : "\n     * Returns the certificate associated with the given alias.\n     *\n     * <p> If the given alias name identifies an entry\n     * created by a call to {@code setCertificateEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code TrustedCertificateEntry},\n     * then the trusted certificate contained in that entry is returned.\n     *\n     * <p> If the given alias name identifies an entry\n     * created by a call to {@code setKeyEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code PrivateKeyEntry},\n     * then the first element of the certificate chain in that entry\n     * is returned.\n     *\n     * @param alias the alias name\n     *\n     * @return the certificate, or null if the given alias does not exist or\n     * does not contain a certificate.\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Date getCreationDate(String alias) throws KeyStoreException",
    "returnType" : "Date",
    "comment" : "\n     * Returns the creation date of the entry identified by the given alias.\n     *\n     * @param alias the alias name\n     *\n     * @return the creation date of this entry, or null if the given alias does\n     * not exist\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setKeyEntry(String alias, Key key, char[] password, Certificate[] chain) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Assigns the given key to the given alias, protecting it with the given\n     * password.\n     *\n     * <p>If the given key is of type {@code java.security.PrivateKey},\n     * it must be accompanied by a certificate chain certifying the\n     * corresponding public key.\n     *\n     * <p>If the given alias already exists, the keystore information\n     * associated with it is overridden by the given key (and possibly\n     * certificate chain).\n     *\n     * @param alias the alias name\n     * @param key the key to be associated with the alias\n     * @param password the password to protect the key\n     * @param chain the certificate chain for the corresponding public\n     * key (only required if the given key is of type\n     * {@code java.security.PrivateKey}).\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded), the given key cannot be protected, or this operation fails\n     * for some other reason\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setKeyEntry(String alias, byte[] key, Certificate[] chain) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Assigns the given key (that has already been protected) to the given\n     * alias.\n     *\n     * <p>If the protected key is of type\n     * {@code java.security.PrivateKey}, it must be accompanied by a\n     * certificate chain certifying the corresponding public key. If the\n     * underlying keystore implementation is of type {@code jks},\n     * {@code key} must be encoded as an\n     * {@code EncryptedPrivateKeyInfo} as defined in the PKCS #8 standard.\n     *\n     * <p>If the given alias already exists, the keystore information\n     * associated with it is overridden by the given key (and possibly\n     * certificate chain).\n     *\n     * @param alias the alias name\n     * @param key the key (in protected format) to be associated with the alias\n     * @param chain the certificate chain for the corresponding public\n     *          key (only useful if the protected key is of type\n     *          {@code java.security.PrivateKey}).\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded), or if this operation fails for some other reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setCertificateEntry(String alias, Certificate cert) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Assigns the given trusted certificate to the given alias.\n     *\n     * <p> If the given alias identifies an existing entry\n     * created by a call to {@code setCertificateEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code TrustedCertificateEntry},\n     * the trusted certificate in the existing entry\n     * is overridden by the given certificate.\n     *\n     * @param alias the alias name\n     * @param cert the certificate\n     *\n     * @exception KeyStoreException if the keystore has not been initialized,\n     * or the given alias already exists and does not identify an\n     * entry containing a trusted certificate,\n     * or this operation fails for some other reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void deleteEntry(String alias) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Deletes the entry identified by the given alias from this keystore.\n     *\n     * @param alias the alias name\n     *\n     * @exception KeyStoreException if the keystore has not been initialized,\n     * or if the entry cannot be removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Enumeration<String> aliases() throws KeyStoreException",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Lists all the alias names of this keystore.\n     *\n     * @return enumeration of the alias names\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean containsAlias(String alias) throws KeyStoreException",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given alias exists in this keystore.\n     *\n     * @param alias the alias name\n     *\n     * @return true if the alias exists, false otherwise\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int size() throws KeyStoreException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the number of entries in this keystore.\n     *\n     * @return the number of entries in this keystore\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isKeyEntry(String alias) throws KeyStoreException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the entry identified by the given alias\n     * was created by a call to {@code setKeyEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code PrivateKeyEntry} or a {@code SecretKeyEntry}.\n     *\n     * @param alias the alias for the keystore entry to be checked\n     *\n     * @return true if the entry identified by the given alias is a\n     * key-related entry, false otherwise.\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isCertificateEntry(String alias) throws KeyStoreException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the entry identified by the given alias\n     * was created by a call to {@code setCertificateEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code TrustedCertificateEntry}.\n     *\n     * @param alias the alias for the keystore entry to be checked\n     *\n     * @return true if the entry identified by the given alias contains a\n     * trusted certificate, false otherwise.\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getCertificateAlias(Certificate cert) throws KeyStoreException",
    "returnType" : "String",
    "comment" : "\n     * Returns the (alias) name of the first keystore entry whose certificate\n     * matches the given certificate.\n     *\n     * <p> This method attempts to match the given certificate with each\n     * keystore entry. If the entry being considered was\n     * created by a call to {@code setCertificateEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code TrustedCertificateEntry},\n     * then the given certificate is compared to that entry's certificate.\n     *\n     * <p> If the entry being considered was\n     * created by a call to {@code setKeyEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code PrivateKeyEntry},\n     * then the given certificate is compared to the first\n     * element of that entry's certificate chain.\n     *\n     * @param cert the certificate to match with.\n     *\n     * @return the alias name of the first entry with a matching certificate,\n     * or null if no such entry exists in this keystore.\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void store(OutputStream stream, char[] password) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "\n     * Stores this keystore to the given output stream, and protects its\n     * integrity with the given password.\n     *\n     * @param stream the output stream to which this keystore is written.\n     * @param password the password to generate the keystore integrity check\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded).\n     * @exception IOException if there was an I/O problem with data\n     * @exception NoSuchAlgorithmException if the appropriate data integrity\n     * algorithm could not be found\n     * @exception CertificateException if any of the certificates included in\n     * the keystore data could not be stored\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void store(LoadStoreParameter param) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "\n     * Stores this keystore using the given {@code LoadStoreParameter}.\n     *\n     * @param param the {@code LoadStoreParameter}\n     *          that specifies how to store the keystore,\n     *          which may be {@code null}\n     *\n     * @exception IllegalArgumentException if the given\n     *          {@code LoadStoreParameter}\n     *          input is not recognized\n     * @exception KeyStoreException if the keystore has not been initialized\n     *          (loaded)\n     * @exception IOException if there was an I/O problem with data\n     * @exception NoSuchAlgorithmException if the appropriate data integrity\n     *          algorithm could not be found\n     * @exception CertificateException if any of the certificates included in\n     *          the keystore data could not be stored\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void load(InputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "\n     * Loads this KeyStore from the given input stream.\n     *\n     * <p>A password may be given to unlock the keystore\n     * (e.g. the keystore resides on a hardware token device),\n     * or to check the integrity of the keystore data.\n     * If a password is not given for integrity checking,\n     * then integrity checking is not performed.\n     *\n     * <p>In order to create an empty keystore, or if the keystore cannot\n     * be initialized from a stream, pass {@code null}\n     * as the {@code stream} argument.\n     *\n     * <p> Note that if this keystore has already been loaded, it is\n     * reinitialized and loaded again from the given input stream.\n     *\n     * @param stream the input stream from which the keystore is loaded,\n     * or {@code null}\n     * @param password the password used to check the integrity of\n     * the keystore, the password used to unlock the keystore,\n     * or {@code null}\n     *\n     * @exception IOException if there is an I/O or format problem with the\n     * keystore data, if a password is required but not given,\n     * or if the given password was incorrect. If the error is due to a\n     * wrong password, the {@link Throwable#getCause cause} of the\n     * {@code IOException} should be an\n     * {@code UnrecoverableKeyException}\n     * @exception NoSuchAlgorithmException if the algorithm used to check\n     * the integrity of the keystore cannot be found\n     * @exception CertificateException if any of the certificates in the\n     * keystore could not be loaded\n     ",
    "links" : [ "#getCause" ]
  }, {
    "name" : "public final void load(LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "\n     * Loads this keystore using the given {@code LoadStoreParameter}.\n     *\n     * <p> Note that if this KeyStore has already been loaded, it is\n     * reinitialized and loaded again from the given parameter.\n     *\n     * @param param the {@code LoadStoreParameter}\n     *          that specifies how to load the keystore,\n     *          which may be {@code null}\n     *\n     * @exception IllegalArgumentException if the given\n     *          {@code LoadStoreParameter}\n     *          input is not recognized\n     * @exception IOException if there is an I/O or format problem with the\n     *          keystore data. If the error is due to an incorrect\n     *         {@code ProtectionParameter} (e.g. wrong password)\n     *         the {@link Throwable#getCause cause} of the\n     *         {@code IOException} should be an\n     *         {@code UnrecoverableKeyException}\n     * @exception NoSuchAlgorithmException if the algorithm used to check\n     *          the integrity of the keystore cannot be found\n     * @exception CertificateException if any of the certificates in the\n     *          keystore could not be loaded\n     *\n     * @since 1.5\n     ",
    "links" : [ "#getCause" ]
  }, {
    "name" : "public final Entry getEntry(String alias, ProtectionParameter protParam) throws NoSuchAlgorithmException, UnrecoverableEntryException, KeyStoreException",
    "returnType" : "Entry",
    "comment" : "\n     * Gets a keystore {@code Entry} for the specified alias\n     * with the specified protection parameter.\n     *\n     * @param alias get the keystore {@code Entry} for this alias\n     * @param protParam the {@code ProtectionParameter}\n     *          used to protect the {@code Entry},\n     *          which may be {@code null}\n     *\n     * @return the keystore {@code Entry} for the specified alias,\n     *          or {@code null} if there is no such entry\n     *\n     * @exception NullPointerException if\n     *          {@code alias} is {@code null}\n     * @exception NoSuchAlgorithmException if the algorithm for recovering the\n     *          entry cannot be found\n     * @exception UnrecoverableEntryException if the specified\n     *          {@code protParam} were insufficient or invalid\n     * @exception UnrecoverableKeyException if the entry is a\n     *          {@code PrivateKeyEntry} or {@code SecretKeyEntry}\n     *          and the specified {@code protParam} does not contain\n     *          the information needed to recover the key (e.g. wrong password)\n     * @exception KeyStoreException if the keystore has not been initialized\n     *          (loaded).\n     * @see #setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setEntry(String alias, Entry entry, ProtectionParameter protParam) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Saves a keystore {@code Entry} under the specified alias.\n     * The protection parameter is used to protect the\n     * {@code Entry}.\n     *\n     * <p> If an entry already exists for the specified alias,\n     * it is overridden.\n     *\n     * @param alias save the keystore {@code Entry} under this alias\n     * @param entry the {@code Entry} to save\n     * @param protParam the {@code ProtectionParameter}\n     *          used to protect the {@code Entry},\n     *          which may be {@code null}\n     *\n     * @exception NullPointerException if\n     *          {@code alias} or {@code entry}\n     *          is {@code null}\n     * @exception KeyStoreException if the keystore has not been initialized\n     *          (loaded), or if this operation fails for some other reason\n     *\n     * @see #getEntry(String, KeyStore.ProtectionParameter)\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean entryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) throws KeyStoreException",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the keystore {@code Entry} for the specified\n     * {@code alias} is an instance or subclass of the specified\n     * {@code entryClass}.\n     *\n     * @param alias the alias name\n     * @param entryClass the entry class\n     *\n     * @return true if the keystore {@code Entry} for the specified\n     *          {@code alias} is an instance or subclass of the\n     *          specified {@code entryClass}, false otherwise\n     *\n     * @exception NullPointerException if\n     *          {@code alias} or {@code entryClass}\n     *          is {@code null}\n     * @exception KeyStoreException if the keystore has not been\n     *          initialized (loaded)\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final KeyStore getInstance(File file, char[] password) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "KeyStore",
    "comment" : "\n     * Returns a loaded keystore object of the appropriate keystore type.\n     * First the keystore type is determined by probing the specified file.\n     * Then a keystore object is instantiated and loaded using the data from\n     * that file.\n     *\n     * <p>\n     * A password may be given to unlock the keystore\n     * (e.g. the keystore resides on a hardware token device),\n     * or to check the integrity of the keystore data.\n     * If a password is not given for integrity checking,\n     * then integrity checking is not performed.\n     *\n     * <p>\n     * This method traverses the list of registered security\n     * {@linkplain Provider providers}, starting with the most\n     * preferred Provider.\n     * For each {@link KeyStoreSpi} implementation supported by a\n     * Provider, it invokes the {@link\n     * KeyStoreSpi#engineProbe(InputStream) engineProbe} method to\n     * determine if it supports the specified keystore.\n     * A new KeyStore object is returned that encapsulates the KeyStoreSpi\n     * implementation from the first Provider that supports the specified file.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param  file the keystore file\n     * @param  password the keystore password, which may be {@code null}\n     *\n     * @return a keystore object loaded with keystore data\n     *\n     * @throws KeyStoreException if no Provider supports a KeyStoreSpi\n     *             implementation for the specified keystore file.\n     * @throws IOException if there is an I/O or format problem with the\n     *             keystore data, if a password is required but not given,\n     *             or if the given password was incorrect. If the error is\n     *             due to a wrong password, the {@link Throwable#getCause cause}\n     *             of the {@code IOException} should be an\n     *             {@code UnrecoverableKeyException}.\n     * @throws NoSuchAlgorithmException if the algorithm used to check the\n     *             integrity of the keystore cannot be found.\n     * @throws CertificateException if any of the certificates in the\n     *             keystore could not be loaded.\n     * @throws IllegalArgumentException if file does not exist or does not\n     *             refer to a normal file.\n     * @throws NullPointerException if file is {@code null}.\n     * @throws SecurityException if a security manager exists and its\n     *             {@link java.lang.SecurityManager#checkRead} method denies\n     *             read access to the specified file.\n     *\n     * @see Provider\n     *\n     * @since 9\n     ",
    "links" : [ "java.lang.SecurityManager#checkRead", "java.security.Security#getProviders()", "java.security.KeyStoreSpi#engineProbe(InputStream)", "java.security.KeyStoreSpi", "#getCause" ]
  }, {
    "name" : "public static final KeyStore getInstance(File file, LoadStoreParameter param) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "KeyStore",
    "comment" : "\n     * Returns a loaded keystore object of the appropriate keystore type.\n     * First the keystore type is determined by probing the specified file.\n     * Then a keystore object is instantiated and loaded using the data from\n     * that file.\n     * A {@code LoadStoreParameter} may be supplied which specifies how to\n     * unlock the keystore data or perform an integrity check.\n     *\n     * <p>\n     * This method traverses the list of registered security {@linkplain\n     * Provider providers}, starting with the most preferred Provider.\n     * For each {@link KeyStoreSpi} implementation supported by a\n     * Provider, it invokes the {@link\n     * KeyStoreSpi#engineProbe(InputStream) engineProbe} method to\n     * determine if it supports the specified keystore.\n     * A new KeyStore object is returned that encapsulates the KeyStoreSpi\n     * implementation from the first Provider that supports the specified file.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param  file the keystore file\n     * @param  param the {@code LoadStoreParameter} that specifies how to load\n     *             the keystore, which may be {@code null}\n     *\n     * @return a keystore object loaded with keystore data\n     *\n     * @throws KeyStoreException if no Provider supports a KeyStoreSpi\n     *             implementation for the specified keystore file.\n     * @throws IOException if there is an I/O or format problem with the\n     *             keystore data. If the error is due to an incorrect\n     *             {@code ProtectionParameter} (e.g. wrong password)\n     *             the {@link Throwable#getCause cause} of the\n     *             {@code IOException} should be an\n     *             {@code UnrecoverableKeyException}.\n     * @throws NoSuchAlgorithmException if the algorithm used to check the\n     *             integrity of the keystore cannot be found.\n     * @throws CertificateException if any of the certificates in the\n     *             keystore could not be loaded.\n     * @throws IllegalArgumentException if file does not exist or does not\n     *             refer to a normal file, or if param is not recognized.\n     * @throws NullPointerException if file is {@code null}.\n     * @throws SecurityException if a security manager exists and its\n     *             {@link java.lang.SecurityManager#checkRead} method denies\n     *             read access to the specified file.\n     *\n     * @see Provider\n     *\n     * @since 9\n     ",
    "links" : [ "java.lang.SecurityManager#checkRead", "java.security.Security#getProviders()", "java.security.KeyStoreSpi#engineProbe(InputStream)", "java.security.KeyStoreSpi", "#getCause" ]
  }, {
    "name" : "private static final KeyStore getInstance(File file, char[] password, LoadStoreParameter param, boolean hasPassword) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "KeyStore",
    "comment" : " Used by getInstance(File, char[]) & getInstance(File, LoadStoreParameter)",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static KeyStore getInstance(String type) throws KeyStoreException", "public static KeyStore getInstance(String type, String provider) throws KeyStoreException, NoSuchProviderException", "public static KeyStore getInstance(String type, Provider provider) throws KeyStoreException", "public static final String getDefaultType()", "public final Provider getProvider()", "public final String getType()", "public final Key getKey(String alias, char[] password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException", "public final Certificate[] getCertificateChain(String alias) throws KeyStoreException", "public final Certificate getCertificate(String alias) throws KeyStoreException", "public final Date getCreationDate(String alias) throws KeyStoreException", "public final void setKeyEntry(String alias, Key key, char[] password, Certificate[] chain) throws KeyStoreException", "public final void setKeyEntry(String alias, byte[] key, Certificate[] chain) throws KeyStoreException", "public final void setCertificateEntry(String alias, Certificate cert) throws KeyStoreException", "public final void deleteEntry(String alias) throws KeyStoreException", "public final Enumeration<String> aliases() throws KeyStoreException", "public final boolean containsAlias(String alias) throws KeyStoreException", "public final int size() throws KeyStoreException", "public final boolean isKeyEntry(String alias) throws KeyStoreException", "public final boolean isCertificateEntry(String alias) throws KeyStoreException", "public final String getCertificateAlias(Certificate cert) throws KeyStoreException", "public final void store(OutputStream stream, char[] password) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException", "public final void store(LoadStoreParameter param) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException", "public final void load(InputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException", "public final void load(LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException", "public final Entry getEntry(String alias, ProtectionParameter protParam) throws NoSuchAlgorithmException, UnrecoverableEntryException, KeyStoreException", "public final void setEntry(String alias, Entry entry, ProtectionParameter protParam) throws KeyStoreException", "public final boolean entryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) throws KeyStoreException", "public static final KeyStore getInstance(File file, char[] password) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException", "public static final KeyStore getInstance(File file, LoadStoreParameter param) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException", "private static final KeyStore getInstance(File file, char[] password, LoadStoreParameter param, boolean hasPassword) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException" ],
  "variableNames" : [ "kdebug", "KEYSTORE_TYPE", "type", "provider", "keyStoreSpi", "initialized" ]
}