{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/ApplicationStatus.java",
  "packageName" : "org.chromium.base",
  "className" : "ApplicationStatus",
  "comment" : "\n * Provides information about the current activity's status, and a way\n * to register / unregister listeners for state changes.\n * TODO(https://crbug.com/470582): ApplicationStatus will not work on WebView/WebLayer, and\n * should be moved out of base and into //chrome. It should not be relied upon for //components.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TOOLBAR_CALLBACK_WRAPPER_CLASS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sActivityInfo",
    "type" : "Map<Activity, ActivityInfo>",
    "comment" : " A map of which observers listen to state changes from which {@link Activity}. ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "sActivityTaskId",
    "type" : "Map<Activity, Integer>",
    "comment" : " A map to cache TaskId for each {@link Activity}. ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "CACHE_ACTIVITY_TASKID_KEY",
    "type" : "String",
    "comment" : " Shared preferences key for TaskId caching of an activity.",
    "links" : [ ]
  }, {
    "name" : "sCurrentApplicationState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sActivity",
    "type" : "Activity",
    "comment" : " Last activity that was shown (or null if none or it was destroyed). ",
    "links" : [ ]
  }, {
    "name" : "sNativeApplicationStateListener",
    "type" : "ApplicationStateListener",
    "comment" : " A lazily initialized listener that forwards application state changes to native. ",
    "links" : [ ]
  }, {
    "name" : "sGeneralActivityStateListeners",
    "type" : "ObserverList<ActivityStateListener>",
    "comment" : " A list of observers to be notified when any {@link Activity} has a state change. ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "sApplicationStateListeners",
    "type" : "ObserverList<ApplicationStateListener>",
    "comment" : "\n     * A list of observers to be notified when the visibility state of this {@link Application}\n     * changes.  See {@link #getStateForApplication()}.\n     ",
    "links" : [ "android.app.Application", "#getStateForApplication()" ]
  }, {
    "name" : "sWindowFocusListeners",
    "type" : "ObserverList<WindowFocusChangedListener>",
    "comment" : "\n     * A list of observers to be notified when the window focus changes.\n     * See {@link #registerWindowFocusChangedListener}.\n     ",
    "links" : [ "#registerWindowFocusChangedListener" ]
  }, {
    "name" : "sTaskVisibilityListeners",
    "type" : "ObserverList<TaskVisibilityListener>",
    "comment" : " A list of observers to be notified when the visibility of any task changes. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void registerWindowFocusChangedListener(WindowFocusChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener to receive window focus updates on activities in this application.\n     *\n     * @param listener Listener to receive window focus events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void unregisterWindowFocusChangedListener(WindowFocusChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a listener from receiving window focus updates on activities in this application.\n     *\n     * @param listener Listener that doesn't want to receive window focus events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerTaskVisibilityListener(TaskVisibilityListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a listener to receive task visibility updates.\n     *\n     * @param listener Listener to receive task visibility events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void unregisterTaskVisibilityListener(TaskVisibilityListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a listener from receiving task visibility updates.\n     *\n     * @param listener Listener that doesn't want to receive task visibility events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setCachingEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isCachingEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getTaskId(Activity activity)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isInitialized()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void initialize(Application application)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the activity status for a specified application.\n     *\n     * @param application The application whose status you wish to monitor.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Window.Callback createWindowCallbackProxy(Activity activity, Window.Callback callback)",
    "returnType" : "Window.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean reachesWindowCallback(@Nullable Window.Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Tries to trace down to our WindowCallbackProxy from the given callback.\n     * Since the callback can be overwritten by embedder code we try to ensure\n     * that there at least seem to be a reference back to our callback by\n     * checking the declared fields of the given callback using reflection.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void onStateChange(Activity activity, @ActivityState int newState)",
    "returnType" : "void",
    "comment" : "\n     * Must be called by the main activity when it changes state.\n     *\n     * @param activity Current activity.\n     * @param newState New state value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void onStateChangeForTesting(Activity activity, int newState)",
    "returnType" : "void",
    "comment" : " Testing method to update the state of the specified activity. ",
    "links" : [ ]
  }, {
    "name" : "public static Activity getLastTrackedFocusedActivity()",
    "returnType" : "Activity",
    "comment" : "\n     * @return The most recent focused {@link Activity} tracked by this class.  Being focused means\n     * out of all the activities tracked here, it has most recently gained window focus.\n     ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "public static List<Activity> getRunningActivities()",
    "returnType" : "List<Activity>",
    "comment" : "\n     * @return A {@link List} of all non-destroyed {@link Activity}s.\n     ",
    "links" : [ "android.app.Activity", "java.util.ArrayList" ]
  }, {
    "name" : "public static int getStateForActivity(@Nullable Activity activity)",
    "returnType" : "int",
    "comment" : "\n     * Query the state for a given activity.  If the activity is not being tracked, this will\n     * return {@link ActivityState#DESTROYED}.\n     *\n     * <p>\n     * Please note that Chrome can have multiple activities running simultaneously.  Please also\n     * look at {@link #getStateForApplication()} for more details.\n     *\n     * <p>\n     * When relying on this method, be familiar with the expected life cycle state\n     * transitions:\n     * <a href=\"http://developer.android.com/guide/components/activities.html#Lifecycle\">\n     * Activity Lifecycle\n     * </a>\n     *\n     * <p>\n     * During activity transitions (activity B launching in front of activity A), A will completely\n     * paused before the creation of activity B begins.\n     *\n     * <p>\n     * A basic flow for activity A starting, followed by activity B being opened and then closed:\n     * <ul>\n     *   <li> -- Starting Activity A --\n     *   <li> Activity A - ActivityState.CREATED\n     *   <li> Activity A - ActivityState.STARTED\n     *   <li> Activity A - ActivityState.RESUMED\n     *   <li> -- Starting Activity B --\n     *   <li> Activity A - ActivityState.PAUSED\n     *   <li> Activity B - ActivityState.CREATED\n     *   <li> Activity B - ActivityState.STARTED\n     *   <li> Activity B - ActivityState.RESUMED\n     *   <li> Activity A - ActivityState.STOPPED\n     *   <li> -- Closing Activity B, Activity A regaining focus --\n     *   <li> Activity B - ActivityState.PAUSED\n     *   <li> Activity A - ActivityState.STARTED\n     *   <li> Activity A - ActivityState.RESUMED\n     *   <li> Activity B - ActivityState.STOPPED\n     *   <li> Activity B - ActivityState.DESTROYED\n     * </ul>\n     *\n     * @param activity The activity whose state is to be returned.\n     * @return The state of the specified activity (see {@link ActivityState}).\n     ",
    "links" : [ "org.chromium.base.ActivityState#DESTROYED", "#getStateForApplication()", "org.chromium.base.ActivityState" ]
  }, {
    "name" : "public static int getStateForApplication()",
    "returnType" : "int",
    "comment" : "\n     * @return The state of the application (see {@link ApplicationState}).\n     ",
    "links" : [ "ApplicationState" ]
  }, {
    "name" : "public static boolean hasVisibleActivities()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether or not any Activity in this Application is visible to the user.  Note that\n     * this includes the PAUSED state, which can happen when the Activity is temporarily covered\n     * by another Activity's Fragment (e.g.).\n     *\n     * @return Whether any Activity under this Application is visible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isEveryActivityDestroyed()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks to see if there are any active Activity instances being watched by ApplicationStatus.\n     *\n     * @return True if all Activities have been destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isTaskVisible(int taskId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the visibility of the task with the given taskId. A task is visible if any of its\n     * Activities are in RESUMED or PAUSED state.\n     *\n     * @param taskId The id of the task whose visibility needs to be checked.\n     * @return Whether the task is visible or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerStateListenerForAllActivities(ActivityStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers the given listener to receive state changes for all activities.\n     *\n     * @param listener Listener to receive state changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerStateListenerForActivity(ActivityStateListener listener, Activity activity)",
    "returnType" : "void",
    "comment" : "\n     * Registers the given listener to receive state changes for {@code activity}.  After a call to\n     * {@link ActivityStateListener#onActivityStateChange(Activity, int)} with\n     * {@link ActivityState#DESTROYED} all listeners associated with that particular\n     * {@link Activity} are removed.\n     *\n     * @param listener Listener to receive state changes.\n     * @param activity Activity to track or {@code null} to track all activities.\n     ",
    "links" : [ "org.chromium.base.ActivityState#DESTROYED", "#onActivityStateChange(Activity", "android.app.Activity" ]
  }, {
    "name" : "public static void unregisterActivityStateListener(ActivityStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the given listener from receiving activity state changes.\n     *\n     * @param listener Listener that doesn't want to receive state changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerApplicationStateListener(ApplicationStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers the given listener to receive state changes for the application.\n     *\n     * @param listener Listener to receive state state changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void unregisterApplicationStateListener(ApplicationStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the given listener from receiving state changes.\n     *\n     * @param listener Listener that doesn't want to receive state changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void destroyForJUnitTests()",
    "returnType" : "void",
    "comment" : "\n     * Robolectric JUnit tests create a new application between each test, while all the context\n     * in static classes isn't reset. This function allows to reset the application status to avoid\n     * being in a dirty state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void resetActivitiesForInstrumentationTests()",
    "returnType" : "void",
    "comment" : " Mark all Activities as destroyed to avoid side-effects in future test. ",
    "links" : [ ]
  }, {
    "name" : "private static void registerThreadSafeNativeApplicationStateListener()",
    "returnType" : "void",
    "comment" : "\n     * Registers the single thread-safe native activity status listener.\n     * This handles the case where the caller is not on the main thread.\n     * Note that this is used by a leaky singleton object from the native\n     * side, hence lifecycle management is greatly simplified.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int determineApplicationStateLocked()",
    "returnType" : "int",
    "comment" : "\n     * Determines the current application state as defined by {@link ApplicationState}.  This will\n     * loop over all the activities and check their state to determine what the general application\n     * state should be.\n     *\n     * @return HAS_RUNNING_ACTIVITIES if any activity is not paused, stopped, or destroyed.\n     * HAS_PAUSED_ACTIVITIES if none are running and one is paused.\n     * HAS_STOPPED_ACTIVITIES if none are running/paused and one is stopped.\n     * HAS_DESTROYED_ACTIVITIES if none are running/paused/stopped.\n     ",
    "links" : [ "ApplicationState" ]
  } ],
  "methodNames" : [ "public static void registerWindowFocusChangedListener(WindowFocusChangedListener listener)", "public static void unregisterWindowFocusChangedListener(WindowFocusChangedListener listener)", "public static void registerTaskVisibilityListener(TaskVisibilityListener listener)", "public static void unregisterTaskVisibilityListener(TaskVisibilityListener listener)", "public static void setCachingEnabled(boolean enabled)", "public static boolean isCachingEnabled()", "public static int getTaskId(Activity activity)", "public static boolean isInitialized()", "public static void initialize(Application application)", " static Window.Callback createWindowCallbackProxy(Activity activity, Window.Callback callback)", " static boolean reachesWindowCallback(@Nullable Window.Callback callback)", "private static void onStateChange(Activity activity, @ActivityState int newState)", "public static void onStateChangeForTesting(Activity activity, int newState)", "public static Activity getLastTrackedFocusedActivity()", "public static List<Activity> getRunningActivities()", "public static int getStateForActivity(@Nullable Activity activity)", "public static int getStateForApplication()", "public static boolean hasVisibleActivities()", "public static boolean isEveryActivityDestroyed()", "public static boolean isTaskVisible(int taskId)", "public static void registerStateListenerForAllActivities(ActivityStateListener listener)", "public static void registerStateListenerForActivity(ActivityStateListener listener, Activity activity)", "public static void unregisterActivityStateListener(ActivityStateListener listener)", "public static void registerApplicationStateListener(ApplicationStateListener listener)", "public static void unregisterApplicationStateListener(ApplicationStateListener listener)", "public static void destroyForJUnitTests()", "public static void resetActivitiesForInstrumentationTests()", "private static void registerThreadSafeNativeApplicationStateListener()", "private static int determineApplicationStateLocked()" ],
  "variableNames" : [ "TOOLBAR_CALLBACK_WRAPPER_CLASS", "sActivityInfo", "sActivityTaskId", "CACHE_ACTIVITY_TASKID_KEY", "sCurrentApplicationState", "sActivity", "sNativeApplicationStateListener", "sGeneralActivityStateListeners", "sApplicationStateListeners", "sWindowFocusListeners", "sTaskVisibilityListeners" ]
}