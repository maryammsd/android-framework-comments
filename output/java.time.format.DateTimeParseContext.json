{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/format/DateTimeParseContext.java",
  "packageName" : "java.time.format",
  "className" : "DateTimeParseContext",
  "comment" : "\n * Context object used during date and time parsing.\n * <p>\n * This class represents the current state of the parse.\n * It has the ability to store and retrieve the parsed values and manage optional segments.\n * It also provides key information to the parsing methods.\n * <p>\n * Once parsing is complete, the {@link #toUnresolved()} is used to obtain the unresolved\n * result data. The {@link #toResolved()} is used to obtain the resolved result.\n *\n * @implSpec\n * This class is a mutable context intended for use from a single thread.\n * Usage of the class is thread-safe within standard parsing as a new instance of this class\n * is automatically created for each parse and parsing is single-threaded\n *\n * @since 1.8\n ",
  "links" : [ "#toUnresolved()", "#toResolved()" ],
  "variables" : [ {
    "name" : "formatter",
    "type" : "DateTimeFormatter",
    "comment" : "\n     * The formatter, not null.\n     ",
    "links" : [ ]
  }, {
    "name" : "caseSensitive",
    "type" : "boolean",
    "comment" : "\n     * Whether to parse using case sensitively.\n     ",
    "links" : [ ]
  }, {
    "name" : "strict",
    "type" : "boolean",
    "comment" : "\n     * Whether to parse using strict rules.\n     ",
    "links" : [ ]
  }, {
    "name" : "parsed",
    "type" : "ArrayList<Parsed>",
    "comment" : "\n     * The list of parsed data.\n     ",
    "links" : [ ]
  }, {
    "name" : "chronoListeners",
    "type" : "ArrayList<Consumer<Chronology>>",
    "comment" : "\n     * List of Consumers<Chronology> to be notified if the Chronology changes.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " DateTimeParseContext copy()",
    "returnType" : "DateTimeParseContext",
    "comment" : "\n     * Creates a copy of this context.\n     * This retains the case sensitive and strict flags.\n     ",
    "links" : [ ]
  }, {
    "name" : " Locale getLocale()",
    "returnType" : "Locale",
    "comment" : "\n     * Gets the locale.\n     * <p>\n     * This locale is used to control localization in the parse except\n     * where localization is controlled by the DecimalStyle.\n     *\n     * @return the locale, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " DecimalStyle getDecimalStyle()",
    "returnType" : "DecimalStyle",
    "comment" : "\n     * Gets the DecimalStyle.\n     * <p>\n     * The DecimalStyle controls the numeric parsing.\n     *\n     * @return the DecimalStyle, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " Chronology getEffectiveChronology()",
    "returnType" : "Chronology",
    "comment" : "\n     * Gets the effective chronology during parsing.\n     *\n     * @return the effective parsing chronology, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isCaseSensitive()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if parsing is case sensitive.\n     *\n     * @return true if parsing is case sensitive, false if case insensitive\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCaseSensitive(boolean caseSensitive)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the parsing is case sensitive or not.\n     *\n     * @param caseSensitive  changes the parsing to be case sensitive or not from now on\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean subSequenceEquals(CharSequence cs1, int offset1, CharSequence cs2, int offset2, int length)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper to compare two {@code CharSequence} instances.\n     * This uses {@link #isCaseSensitive()}.\n     *\n     * @param cs1  the first character sequence, not null\n     * @param offset1  the offset into the first sequence, valid\n     * @param cs2  the second character sequence, not null\n     * @param offset2  the offset into the second sequence, valid\n     * @param length  the length to check, valid\n     * @return true if equal\n     ",
    "links" : [ "#isCaseSensitive()" ]
  }, {
    "name" : " boolean charEquals(char ch1, char ch2)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper to compare two {@code char}.\n     * This uses {@link #isCaseSensitive()}.\n     *\n     * @param ch1  the first character\n     * @param ch2  the second character\n     * @return true if equal\n     ",
    "links" : [ "#isCaseSensitive()" ]
  }, {
    "name" : " static boolean charEqualsIgnoreCase(char c1, char c2)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares two characters ignoring case.\n     *\n     * @param c1  the first\n     * @param c2  the second\n     * @return true if equal\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isStrict()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if parsing is strict.\n     * <p>\n     * Strict parsing requires exact matching of the text and sign styles.\n     *\n     * @return true if parsing is strict, false if lenient\n     ",
    "links" : [ ]
  }, {
    "name" : " void setStrict(boolean strict)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether parsing is strict or lenient.\n     *\n     * @param strict  changes the parsing to be strict or lenient from now on\n     ",
    "links" : [ ]
  }, {
    "name" : " void startOptional()",
    "returnType" : "void",
    "comment" : "\n     * Starts the parsing of an optional segment of the input.\n     ",
    "links" : [ ]
  }, {
    "name" : " void endOptional(boolean successful)",
    "returnType" : "void",
    "comment" : "\n     * Ends the parsing of an optional segment of the input.\n     *\n     * @param successful  whether the optional segment was successfully parsed\n     ",
    "links" : [ ]
  }, {
    "name" : "private Parsed currentParsed()",
    "returnType" : "Parsed",
    "comment" : "\n     * Gets the currently active temporal objects.\n     *\n     * @return the current temporal objects, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " Parsed toUnresolved()",
    "returnType" : "Parsed",
    "comment" : "\n     * Gets the unresolved result of the parse.\n     *\n     * @return the result of the parse, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " TemporalAccessor toResolved(ResolverStyle resolverStyle, Set<TemporalField> resolverFields)",
    "returnType" : "TemporalAccessor",
    "comment" : "\n     * Gets the resolved result of the parse.\n     *\n     * @return the result of the parse, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " Long getParsed(TemporalField field)",
    "returnType" : "Long",
    "comment" : "\n     * Gets the first value that was parsed for the specified field.\n     * <p>\n     * This searches the results of the parse, returning the first value found\n     * for the specified field. No attempt is made to derive a value.\n     * The field may have an out of range value.\n     * For example, the day-of-month might be set to 50, or the hour to 1000.\n     *\n     * @param field  the field to query from the map, null returns null\n     * @return the value mapped to the specified field, null if field was not parsed\n     ",
    "links" : [ ]
  }, {
    "name" : " int setParsedField(TemporalField field, long value, int errorPos, int successPos)",
    "returnType" : "int",
    "comment" : "\n     * Stores the parsed field.\n     * <p>\n     * This stores a field-value pair that has been parsed.\n     * The value stored may be out of range for the field - no checks are performed.\n     *\n     * @param field  the field to set in the field-value map, not null\n     * @param value  the value to set in the field-value map\n     * @param errorPos  the position of the field being parsed\n     * @param successPos  the position after the field being parsed\n     * @return the new position\n     ",
    "links" : [ ]
  }, {
    "name" : " void setParsed(Chronology chrono)",
    "returnType" : "void",
    "comment" : "\n     * Stores the parsed chronology.\n     * <p>\n     * This stores the chronology that has been parsed.\n     * No validation is performed other than ensuring it is not null.\n     * <p>\n     * The list of listeners is copied and cleared so that each\n     * listener is called only once.  A listener can add itself again\n     * if it needs to be notified of future changes.\n     *\n     * @param chrono  the parsed chronology, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " void addChronoChangedListener(Consumer<Chronology> listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a Consumer<Chronology> to the list of listeners to be notified\n     * if the Chronology changes.\n     * @param listener a Consumer<Chronology> to be called when Chronology changes\n     ",
    "links" : [ ]
  }, {
    "name" : " void setParsed(ZoneId zone)",
    "returnType" : "void",
    "comment" : "\n     * Stores the parsed zone.\n     * <p>\n     * This stores the zone that has been parsed.\n     * No validation is performed other than ensuring it is not null.\n     *\n     * @param zone  the parsed zone, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " void setParsedLeapSecond()",
    "returnType" : "void",
    "comment" : "\n     * Stores the parsed leap second.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setParsedDayPeriod(DateTimeFormatterBuilder.DayPeriod dayPeriod)",
    "returnType" : "void",
    "comment" : "\n     * Stores the parsed day period.\n     *\n     * @param dayPeriod the parsed day period\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string version of the context for debugging.\n     *\n     * @return a string representation of the context data, not null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " DateTimeParseContext copy()", " Locale getLocale()", " DecimalStyle getDecimalStyle()", " Chronology getEffectiveChronology()", " boolean isCaseSensitive()", " void setCaseSensitive(boolean caseSensitive)", " boolean subSequenceEquals(CharSequence cs1, int offset1, CharSequence cs2, int offset2, int length)", " boolean charEquals(char ch1, char ch2)", " static boolean charEqualsIgnoreCase(char c1, char c2)", " boolean isStrict()", " void setStrict(boolean strict)", " void startOptional()", " void endOptional(boolean successful)", "private Parsed currentParsed()", " Parsed toUnresolved()", " TemporalAccessor toResolved(ResolverStyle resolverStyle, Set<TemporalField> resolverFields)", " Long getParsed(TemporalField field)", " int setParsedField(TemporalField field, long value, int errorPos, int successPos)", " void setParsed(Chronology chrono)", " void addChronoChangedListener(Consumer<Chronology> listener)", " void setParsed(ZoneId zone)", " void setParsedLeapSecond()", " void setParsedDayPeriod(DateTimeFormatterBuilder.DayPeriod dayPeriod)", "public String toString()" ],
  "variableNames" : [ "formatter", "caseSensitive", "strict", "parsed", "chronoListeners" ]
}