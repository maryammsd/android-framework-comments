{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/units/UnitsConverter.java",
  "packageName" : "android.icu.impl.units",
  "className" : "UnitsConverter",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "conversionRate",
    "type" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "reciprocal",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "offset",
    "type" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "specialSource",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "specialTarget",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minMetersPerSecForBeaufort",
    "type" : "BigDecimal[]",
    "comment" : " TODO per CLDR-17421 and ICU-22683: consider getting the data below from CLDR",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Convertibility extractConvertibility(MeasureUnitImpl source, MeasureUnitImpl target, ConversionRates conversionRates)",
    "returnType" : "Convertibility",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void insertInMap(HashMap<String, Integer> dimensionMap, ArrayList<SingleUnitImpl> singleUnits, int multiplier)",
    "returnType" : "void",
    "comment" : "\n     * Helpers\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean areDimensionsZeroes(HashMap<String, Integer> dimensionMap)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BigDecimal convert(BigDecimal inputValue)",
    "returnType" : "BigDecimal",
    "comment" : " Convert inputValue (source) to base then to target",
    "links" : [ ]
  }, {
    "name" : "public BigDecimal convertInverse(BigDecimal inputValue)",
    "returnType" : "BigDecimal",
    "comment" : " Convert inputValue (target) to base then to source",
    "links" : [ ]
  }, {
    "name" : "private BigDecimal scaleToBase(BigDecimal scaleValue, BigDecimal[] minBaseForScaleValues)",
    "returnType" : "BigDecimal",
    "comment" : " This can handle different scales, specified by minBaseForScaleValues[].",
    "links" : [ ]
  }, {
    "name" : "private BigDecimal baseToScale(BigDecimal baseValue, BigDecimal[] minBaseForScaleValues)",
    "returnType" : "BigDecimal",
    "comment" : " This can handle different scales, specified by minBaseForScaleValues[].",
    "links" : [ ]
  }, {
    "name" : "public ConversionInfo getConversionInfo()",
    "returnType" : "ConversionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Convertibility extractConvertibility(MeasureUnitImpl source, MeasureUnitImpl target, ConversionRates conversionRates)", "private static void insertInMap(HashMap<String, Integer> dimensionMap, ArrayList<SingleUnitImpl> singleUnits, int multiplier)", "private static boolean areDimensionsZeroes(HashMap<String, Integer> dimensionMap)", "public BigDecimal convert(BigDecimal inputValue)", "public BigDecimal convertInverse(BigDecimal inputValue)", "private BigDecimal scaleToBase(BigDecimal scaleValue, BigDecimal[] minBaseForScaleValues)", "private BigDecimal baseToScale(BigDecimal baseValue, BigDecimal[] minBaseForScaleValues)", "public ConversionInfo getConversionInfo()", "public String toString()" ],
  "variableNames" : [ "conversionRate", "reciprocal", "offset", "specialSource", "specialTarget", "minMetersPerSecForBeaufort" ]
}