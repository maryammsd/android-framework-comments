{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/speech/RecognitionService.java",
  "packageName" : "android.speech",
  "className" : "RecognitionService",
  "comment" : "\n * This class provides a base class for recognition service implementations. This class should be\n * extended only in case you wish to implement a new speech recognizer. Please note that the\n * implementation of this service is stateless.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "SERVICE_META_DATA",
    "type" : "String",
    "comment" : "\n     * Name under which a RecognitionService component publishes information about itself.\n     * This meta-data should reference an XML resource containing a\n     * <code>&lt;{@link android.R.styleable#RecognitionService recognition-service}&gt;</code> or\n     * <code>&lt;{@link android.R.styleable#RecognitionService on-device-recognition-service}\n     * &gt;</code> tag.\n     ",
    "links" : [ "android.R.styleable#RecognitionService" ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : " Log messages identifier ",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : " Debugging flag ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAX_CONCURRENT_SESSIONS_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessions",
    "type" : "Map<IBinder, SessionState>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "RecognitionServiceBinder",
    "comment" : " Binder of the recognition service ",
    "links" : [ ]
  }, {
    "name" : "MSG_START_LISTENING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_STOP_LISTENING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CANCEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_RESET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CHECK_RECOGNITION_SUPPORT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_TRIGGER_MODEL_DOWNLOAD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void dispatchStartListening(Intent intent, final IRecognitionListener listener, @NonNull AttributionSource attributionSource)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchStopListening(IRecognitionListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchCancel(IRecognitionListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchClearCallback(IRecognitionListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchCheckRecognitionSupport(Intent intent, IRecognitionSupportCallback callback, AttributionSource attributionSource)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchTriggerModelDownload(Intent intent, AttributionSource attributionSource, IModelDownloadListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void onStartListening(Intent recognizerIntent, Callback listener)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the service that it should start listening for speech.\n     *\n     * <p> If you are recognizing speech from the microphone, in this callback you\n     * should create an attribution context for the caller such that when you access\n     * the mic the caller would be properly blamed (and their permission checked in\n     * the process) for accessing the microphone and that you served as a proxy for\n     * this sensitive data (and your permissions would be checked in the process).\n     * You should also open the mic in this callback via the attribution context\n     * and close the mic before returning the recognized result. If you don't do\n     * that then the caller would be blamed and you as being a proxy as well as you\n     * would get one more blame on yourself when you open the microphone.\n     *\n     * <pre>\n     * Context attributionContext = context.createContext(new ContextParams.Builder()\n     *     .setNextAttributionSource(callback.getCallingAttributionSource())\n     *     .build());\n     *\n     * AudioRecord recorder = AudioRecord.Builder()\n     *     .setContext(attributionContext);\n     *     . . .\n     *    .build();\n     *\n     * recorder.startRecording()\n     * </pre>\n     *\n     * @param recognizerIntent contains parameters for the recognition to be performed. The intent\n     *        may also contain optional extras, see {@link RecognizerIntent}. If these values are\n     *        not set explicitly, default values should be used by the recognizer.\n     * @param listener that will receive the service's callbacks\n     ",
    "links" : [ "android.speech.RecognizerIntent" ]
  }, {
    "name" : "protected abstract void onCancel(Callback listener)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the service that it should cancel the speech recognition.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void onStopListening(Callback listener)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the service that it should stop listening for speech. Speech captured so far should\n     * be recognized as if the user had stopped speaking at this point. This method is only called\n     * if the application calls it explicitly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCheckRecognitionSupport(@NonNull Intent recognizerIntent, @NonNull SupportCallback supportCallback)",
    "returnType" : "void",
    "comment" : "\n     * Queries the service on whether it would support a {@link #onStartListening(Intent, Callback)}\n     * for the same {@code recognizerIntent}.\n     *\n     * <p>The service will notify the caller about the level of support or error via\n     * {@link SupportCallback}.\n     *\n     * <p>If the service does not offer the support check it will notify the caller with\n     * {@link SpeechRecognizer#ERROR_CANNOT_CHECK_SUPPORT}.\n     ",
    "links" : [ "android.speech.SpeechRecognizer#ERROR_CANNOT_CHECK_SUPPORT", "SupportCallback", "#onStartListening(Intent" ]
  }, {
    "name" : "public void onCheckRecognitionSupport(@NonNull Intent recognizerIntent, @NonNull AttributionSource attributionSource, @NonNull SupportCallback supportCallback)",
    "returnType" : "void",
    "comment" : "\n     * Queries the service on whether it would support a {@link #onStartListening(Intent, Callback)}\n     * for the same {@code recognizerIntent}.\n     *\n     * <p>The service will notify the caller about the level of support or error via\n     * {@link SupportCallback}.\n     *\n     * <p>If the service does not offer the support check it will notify the caller with\n     * {@link SpeechRecognizer#ERROR_CANNOT_CHECK_SUPPORT}.\n     *\n     * <p>Provides the calling AttributionSource to the service implementation so that permissions\n     * and bandwidth could be correctly blamed.</p>\n     ",
    "links" : [ "android.speech.SpeechRecognizer#ERROR_CANNOT_CHECK_SUPPORT", "SupportCallback", "#onStartListening(Intent" ]
  }, {
    "name" : "public void onTriggerModelDownload(@NonNull Intent recognizerIntent)",
    "returnType" : "void",
    "comment" : "\n     * Requests the download of the recognizer support for {@code recognizerIntent}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTriggerModelDownload(@NonNull Intent recognizerIntent, @NonNull AttributionSource attributionSource)",
    "returnType" : "void",
    "comment" : "\n     * Requests the download of the recognizer support for {@code recognizerIntent}.\n     *\n     * <p>Provides the calling AttributionSource to the service implementation so that permissions\n     * and bandwidth could be correctly blamed.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTriggerModelDownload(@NonNull Intent recognizerIntent, @NonNull AttributionSource attributionSource, @NonNull ModelDownloadListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Requests the download of the recognizer support for {@code recognizerIntent}.\n     *\n     * <p> Provides the calling {@link AttributionSource} to the service implementation so that\n     * permissions and bandwidth could be correctly blamed.\n     *\n     * <p> Client will receive the progress updates via the given {@link ModelDownloadListener}:\n     *\n     * <li> If the model is already available, {@link ModelDownloadListener#onSuccess()} will be\n     * called directly. The model can be safely used afterwards.\n     *\n     * <li> If the {@link RecognitionService} has started the download,\n     * {@link ModelDownloadListener#onProgress(int)} will be called an unspecified (zero or more)\n     * number of times until the download is complete.\n     * When the download finishes, {@link ModelDownloadListener#onSuccess()} will be called.\n     * The model can be safely used afterwards.\n     *\n     * <li> If the {@link RecognitionService} has only scheduled the download, but won't satisfy it\n     * immediately, {@link ModelDownloadListener#onScheduled()} will be called.\n     * There will be no further updates on this listener.\n     *\n     * <li> If the request fails at any time due to a network or scheduling error,\n     * {@link ModelDownloadListener#onError(int)} will be called.\n     *\n     * @param recognizerIntent contains parameters for the recognition to be performed. The intent\n     *        may also contain optional extras, see {@link RecognizerIntent}.\n     * @param attributionSource the attribution source of the caller.\n     * @param listener on which to receive updates about the model download request.\n     ",
    "links" : [ "android.speech.ModelDownloadListener#onScheduled()", "android.speech.ModelDownloadListener#onProgress(int)", "android.speech.ModelDownloadListener#onSuccess()", "android.content.AttributionSource", "android.speech.RecognizerIntent", "android.speech.ModelDownloadListener", "android.speech.RecognitionService", "android.speech.ModelDownloadListener#onError(int)" ]
  }, {
    "name" : "public Context createContext(@NonNull ContextParams contextParams)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleAttributionContextCreation(@NonNull AttributionSource attributionSource)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(final Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onBindInternal()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaxConcurrentSessionsCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximal number of recognition sessions ongoing at the same time.\n     * <p>\n     * The default value is 1, meaning concurrency should be enabled by overriding this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean checkPermissionAndStartDataDelivery(SessionState sessionState)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean checkPermissionForPreflightNotHardDenied(AttributionSource attributionSource)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void finishDataDelivery(SessionState sessionState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void dispatchStartListening(Intent intent, final IRecognitionListener listener, @NonNull AttributionSource attributionSource)", "private void dispatchStopListening(IRecognitionListener listener)", "private void dispatchCancel(IRecognitionListener listener)", "private void dispatchClearCallback(IRecognitionListener listener)", "private void dispatchCheckRecognitionSupport(Intent intent, IRecognitionSupportCallback callback, AttributionSource attributionSource)", "private void dispatchTriggerModelDownload(Intent intent, AttributionSource attributionSource, IModelDownloadListener listener)", "protected abstract void onStartListening(Intent recognizerIntent, Callback listener)", "protected abstract void onCancel(Callback listener)", "protected abstract void onStopListening(Callback listener)", "public void onCheckRecognitionSupport(@NonNull Intent recognizerIntent, @NonNull SupportCallback supportCallback)", "public void onCheckRecognitionSupport(@NonNull Intent recognizerIntent, @NonNull AttributionSource attributionSource, @NonNull SupportCallback supportCallback)", "public void onTriggerModelDownload(@NonNull Intent recognizerIntent)", "public void onTriggerModelDownload(@NonNull Intent recognizerIntent, @NonNull AttributionSource attributionSource)", "public void onTriggerModelDownload(@NonNull Intent recognizerIntent, @NonNull AttributionSource attributionSource, @NonNull ModelDownloadListener listener)", "public Context createContext(@NonNull ContextParams contextParams)", "private void handleAttributionContextCreation(@NonNull AttributionSource attributionSource)", "public final IBinder onBind(final Intent intent)", "public void onBindInternal()", "public void onDestroy()", "public int getMaxConcurrentSessionsCount()", "private boolean checkPermissionAndStartDataDelivery(SessionState sessionState)", "private boolean checkPermissionForPreflightNotHardDenied(AttributionSource attributionSource)", " void finishDataDelivery(SessionState sessionState)" ],
  "variableNames" : [ "SERVICE_INTERFACE", "SERVICE_META_DATA", "TAG", "DBG", "DEFAULT_MAX_CONCURRENT_SESSIONS_COUNT", "mSessions", "mBinder", "MSG_START_LISTENING", "MSG_STOP_LISTENING", "MSG_CANCEL", "MSG_RESET", "MSG_CHECK_RECOGNITION_SUPPORT", "MSG_TRIGGER_MODEL_DOWNLOAD", "mHandler" ]
}