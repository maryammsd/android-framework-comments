{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SSLParameters.java",
  "packageName" : "javax.net.ssl",
  "className" : "SSLParameters",
  "comment" : "\n * Encapsulates parameters for an SSL/TLS connection. The parameters\n * are the list of ciphersuites to be accepted in an SSL/TLS handshake,\n * the list of protocols to be allowed, the endpoint identification\n * algorithm during SSL/TLS handshaking, the Server Name Indication (SNI),\n * the algorithm constraints and whether SSL/TLS servers should request\n * or require client authentication, etc.\n * <p>\n * SSLParameters can be created via the constructors in this class.\n * Objects can also be obtained using the <code>getSSLParameters()</code>\n * methods in\n * {@link SSLSocket#getSSLParameters SSLSocket} and\n * {@link SSLServerSocket#getSSLParameters SSLServerSocket} and\n * {@link SSLEngine#getSSLParameters SSLEngine} or the\n * {@link SSLContext#getDefaultSSLParameters getDefaultSSLParameters()} and\n * {@link SSLContext#getSupportedSSLParameters getSupportedSSLParameters()}\n * methods in <code>SSLContext</code>.\n * <p>\n * SSLParameters can be applied to a connection via the methods\n * {@link SSLSocket#setSSLParameters SSLSocket.setSSLParameters()} and\n * {@link SSLServerSocket#setSSLParameters SSLServerSocket.setSSLParameters()}\n * and {@link SSLEngine#setSSLParameters SSLEngine.setSSLParameters()}.\n *\n * @see SSLSocket\n * @see SSLEngine\n * @see SSLContext\n *\n * @since 1.6\n ",
  "links" : [ "javax.net.ssl.SSLServerSocket#getSSLParameters", "javax.net.ssl.SSLSocket#getSSLParameters", "javax.net.ssl.SSLEngine#getSSLParameters", "javax.net.ssl.SSLServerSocket#setSSLParameters", "javax.net.ssl.SSLContext#getDefaultSSLParameters", "javax.net.ssl.SSLContext#getSupportedSSLParameters", "javax.net.ssl.SSLSocket#setSSLParameters", "javax.net.ssl.SSLEngine#setSSLParameters" ],
  "variables" : [ {
    "name" : "cipherSuites",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protocols",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "wantClientAuth",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "needClientAuth",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "identificationAlgorithm",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "algorithmConstraints",
    "type" : "AlgorithmConstraints",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sniNames",
    "type" : "Map<Integer, SNIServerName>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sniMatchers",
    "type" : "Map<Integer, SNIMatcher>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "preferLocalCipherSuites",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "applicationProtocols",
    "type" : "String[]",
    "comment" : " Android-added: Integrate ALPN-related methods from OpenJDK 9+181",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static String[] clone(String[] s)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getCipherSuites()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a copy of the array of ciphersuites or null if none\n     * have been set.\n     *\n     * @return a copy of the array of ciphersuites or null if none\n     * have been set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCipherSuites(String[] cipherSuites)",
    "returnType" : "void",
    "comment" : "\n     * Sets the array of ciphersuites.\n     *\n     * @param cipherSuites the array of ciphersuites (or null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getProtocols()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a copy of the array of protocols or null if none\n     * have been set.\n     *\n     * @return a copy of the array of protocols or null if none\n     * have been set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProtocols(String[] protocols)",
    "returnType" : "void",
    "comment" : "\n     * Sets the array of protocols.\n     *\n     * @param protocols the array of protocols (or null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getWantClientAuth()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether client authentication should be requested.\n     *\n     * @return whether client authentication should be requested.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWantClientAuth(boolean wantClientAuth)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether client authentication should be requested. Calling\n     * this method clears the <code>needClientAuth</code> flag.\n     *\n     * @param wantClientAuth whether client authentication should be requested\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getNeedClientAuth()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether client authentication should be required.\n     *\n     * @return whether client authentication should be required.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNeedClientAuth(boolean needClientAuth)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether client authentication should be required. Calling\n     * this method clears the <code>wantClientAuth</code> flag.\n     *\n     * @param needClientAuth whether client authentication should be required\n     ",
    "links" : [ ]
  }, {
    "name" : "public AlgorithmConstraints getAlgorithmConstraints()",
    "returnType" : "AlgorithmConstraints",
    "comment" : "\n     * Returns the cryptographic algorithm constraints.\n     *\n     * @return the cryptographic algorithm constraints, or null if the\n     *     constraints have not been set\n     *\n     * @see #setAlgorithmConstraints(AlgorithmConstraints)\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlgorithmConstraints(AlgorithmConstraints constraints)",
    "returnType" : "void",
    "comment" : "\n     * Sets the cryptographic algorithm constraints, which will be used\n     * in addition to any configured by the runtime environment.\n     * <p>\n     * If the <code>constraints</code> parameter is non-null, every\n     * cryptographic algorithm, key and algorithm parameters used in the\n     * SSL/TLS handshake must be permitted by the constraints.\n     *\n     * @param constraints the algorithm constraints (or null)\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEndpointIdentificationAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Gets the endpoint identification algorithm.\n     *\n     * @return the endpoint identification algorithm, or null if none\n     * has been set.\n     *\n     * @see X509ExtendedTrustManager\n     * @see #setEndpointIdentificationAlgorithm(String)\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEndpointIdentificationAlgorithm(String algorithm)",
    "returnType" : "void",
    "comment" : "\n     * Sets the endpoint identification algorithm.\n     * <p>\n     * If the <code>algorithm</code> parameter is non-null or non-empty, the\n     * endpoint identification/verification procedures must be handled during\n     * SSL/TLS handshaking.  This is to prevent on-path attacks.\n     *\n     * @param algorithm The standard string name of the endpoint\n     *     identification algorithm (or null).  See Appendix A in the <a href=\n     *   \"{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA\">\n     *     Java Cryptography Architecture API Specification &amp; Reference </a>\n     *     for information about standard algorithm names.\n     *\n     * @see X509ExtendedTrustManager\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setServerNames(List<SNIServerName> serverNames)",
    "returnType" : "void",
    "comment" : "\n     * Sets the desired {@link SNIServerName}s of the Server Name\n     * Indication (SNI) parameter.\n     * <P>\n     * This method is only useful to {@link SSLSocket}s or {@link SSLEngine}s\n     * operating in client mode.\n     * <P>\n     * Note that the {@code serverNames} list is cloned\n     * to protect against subsequent modification.\n     *\n     * @param  serverNames\n     *         the list of desired {@link SNIServerName}s (or null)\n     *\n     * @throws NullPointerException if the {@code serverNames}\n     *         contains {@code null} element\n     * @throws IllegalArgumentException if the {@code serverNames}\n     *         contains more than one name of the same name type\n     *\n     * @see SNIServerName\n     * @see #getServerNames()\n     *\n     * @since 1.8\n     ",
    "links" : [ "javax.net.ssl.SNIServerName", "javax.net.ssl.SSLSocket", "javax.net.ssl.SSLEngine" ]
  }, {
    "name" : "public final List<SNIServerName> getServerNames()",
    "returnType" : "List<SNIServerName>",
    "comment" : "\n     * Returns a {@link List} containing all {@link SNIServerName}s of the\n     * Server Name Indication (SNI) parameter, or null if none has been set.\n     * <P>\n     * This method is only useful to {@link SSLSocket}s or {@link SSLEngine}s\n     * operating in client mode.\n     * <P>\n     * For SSL/TLS connections, the underlying SSL/TLS provider\n     * may specify a default value for a certain server name type.  In\n     * client mode, it is recommended that, by default, providers should\n     * include the server name indication whenever the server can be located\n     * by a supported server name type.\n     * <P>\n     * It is recommended that providers initialize default Server Name\n     * Indications when creating {@code SSLSocket}/{@code SSLEngine}s.\n     * In the following examples, the server name could be represented by an\n     * instance of {@link SNIHostName} which has been initialized with the\n     * hostname \"www.example.com\" and type\n     * {@link StandardConstants#SNI_HOST_NAME}.\n     *\n     * <pre>\n     *     Socket socket =\n     *         sslSocketFactory.createSocket(\"www.example.com\", 443);\n     * </pre>\n     * or\n     * <pre>\n     *     SSLEngine engine =\n     *         sslContext.createSSLEngine(\"www.example.com\", 443);\n     * </pre>\n     * <P>\n     *\n     * @return null or an immutable list of non-null {@link SNIServerName}s\n     *\n     * @see List\n     * @see #setServerNames(List)\n     *\n     * @since 1.8\n     ",
    "links" : [ "java.util.List", "javax.net.ssl.SNIHostName", "javax.net.ssl.SNIServerName", "javax.net.ssl.SSLSocket", "javax.net.ssl.StandardConstants#SNI_HOST_NAME", "javax.net.ssl.SSLEngine" ]
  }, {
    "name" : "public final void setSNIMatchers(Collection<SNIMatcher> matchers)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link SNIMatcher}s of the Server Name Indication (SNI)\n     * parameter.\n     * <P>\n     * This method is only useful to {@link SSLSocket}s or {@link SSLEngine}s\n     * operating in server mode.\n     * <P>\n     * Note that the {@code matchers} collection is cloned to protect\n     * against subsequent modification.\n     *\n     * @param  matchers\n     *         the collection of {@link SNIMatcher}s (or null)\n     *\n     * @throws NullPointerException if the {@code matchers}\n     *         contains {@code null} element\n     * @throws IllegalArgumentException if the {@code matchers}\n     *         contains more than one name of the same name type\n     *\n     * @see Collection\n     * @see SNIMatcher\n     * @see #getSNIMatchers()\n     *\n     * @since 1.8\n     ",
    "links" : [ "javax.net.ssl.SNIMatcher", "javax.net.ssl.SSLSocket", "javax.net.ssl.SSLEngine" ]
  }, {
    "name" : "public final Collection<SNIMatcher> getSNIMatchers()",
    "returnType" : "Collection<SNIMatcher>",
    "comment" : "\n     * Returns a {@link Collection} containing all {@link SNIMatcher}s of the\n     * Server Name Indication (SNI) parameter, or null if none has been set.\n     * <P>\n     * This method is only useful to {@link SSLSocket}s or {@link SSLEngine}s\n     * operating in server mode.\n     * <P>\n     * For better interoperability, providers generally will not define\n     * default matchers so that by default servers will ignore the SNI\n     * extension and continue the handshake.\n     *\n     * @return null or an immutable collection of non-null {@link SNIMatcher}s\n     *\n     * @see SNIMatcher\n     * @see #setSNIMatchers(Collection)\n     *\n     * @since 1.8\n     ",
    "links" : [ "javax.net.ssl.SNIMatcher", "java.util.Collection", "javax.net.ssl.SSLSocket", "javax.net.ssl.SSLEngine" ]
  }, {
    "name" : "public final void setUseCipherSuitesOrder(boolean honorOrder)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the local cipher suites preference should be honored.\n     *\n     * @param honorOrder whether local cipher suites order in\n     *        {@code #getCipherSuites} should be honored during\n     *        SSL/TLS handshaking.\n     *\n     * @see #getUseCipherSuitesOrder()\n     *\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean getUseCipherSuitesOrder()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the local cipher suites preference should be honored.\n     *\n     * @return whether local cipher suites order in {@code #getCipherSuites}\n     *         should be honored during SSL/TLS handshaking.\n     *\n     * @see #setUseCipherSuitesOrder(boolean)\n     *\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getApplicationProtocols()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a prioritized array of application-layer protocol names that\n     * can be negotiated over the SSL/TLS protocols.\n     * <p>\n     * The array could be empty (zero-length), in which case protocol\n     * indications will not be used.\n     * <p>\n     * This method will return a new array each time it is invoked.\n     *\n     * @return a non-null, possibly zero-length array of application protocol\n     *         {@code String}s.  The array is ordered based on protocol\n     *         preference, with {@code protocols[0]} being the most preferred.\n     * @see #setApplicationProtocols\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationProtocols(String[] protocols)",
    "returnType" : "void",
    "comment" : "\n     * Sets the prioritized array of application-layer protocol names that\n     * can be negotiated over the SSL/TLS protocols.\n     * <p>\n     * If application-layer protocols are supported by the underlying\n     * SSL/TLS implementation, this method configures which values can\n     * be negotiated by protocols such as <a\n     * href=\"http://www.ietf.org/rfc/rfc7301.txt\"> RFC 7301 </a>, the\n     * Application Layer Protocol Negotiation (ALPN).\n     * <p>\n     * If this end of the connection is expected to offer application protocol\n     * values, all protocols configured by this method will be sent to the\n     * peer.\n     * <p>\n     * If this end of the connection is expected to select the application\n     * protocol value, the {@code protocols} configured by this method are\n     * compared with those sent by the peer.  The first matched value becomes\n     * the negotiated value.  If none of the {@code protocols} were actually\n     * requested by the peer, the underlying protocol will determine what\n     * action to take.  (For example, ALPN will send a\n     * {@code \"no_application_protocol\"} alert and terminate the connection.)\n     * <p>\n     * @implSpec\n     * This method will make a copy of the {@code protocols} array.\n     *\n     * @param protocols   an ordered array of application protocols,\n     *                    with {@code protocols[0]} being the most preferred.\n     *                    If the array is empty (zero-length), protocol\n     *                    indications will not be used.\n     * @throws IllegalArgumentException if protocols is null, or if\n     *                    any element in a non-empty array is null or an\n     *                    empty (zero-length) string\n     * @see #getApplicationProtocols\n     * @since 9\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static String[] clone(String[] s)", "public String[] getCipherSuites()", "public void setCipherSuites(String[] cipherSuites)", "public String[] getProtocols()", "public void setProtocols(String[] protocols)", "public boolean getWantClientAuth()", "public void setWantClientAuth(boolean wantClientAuth)", "public boolean getNeedClientAuth()", "public void setNeedClientAuth(boolean needClientAuth)", "public AlgorithmConstraints getAlgorithmConstraints()", "public void setAlgorithmConstraints(AlgorithmConstraints constraints)", "public String getEndpointIdentificationAlgorithm()", "public void setEndpointIdentificationAlgorithm(String algorithm)", "public final void setServerNames(List<SNIServerName> serverNames)", "public final List<SNIServerName> getServerNames()", "public final void setSNIMatchers(Collection<SNIMatcher> matchers)", "public final Collection<SNIMatcher> getSNIMatchers()", "public final void setUseCipherSuitesOrder(boolean honorOrder)", "public final boolean getUseCipherSuitesOrder()", "public String[] getApplicationProtocols()", "public void setApplicationProtocols(String[] protocols)" ],
  "variableNames" : [ "cipherSuites", "protocols", "wantClientAuth", "needClientAuth", "identificationAlgorithm", "algorithmConstraints", "sniNames", "sniMatchers", "preferLocalCipherSuites", "applicationProtocols" ]
}