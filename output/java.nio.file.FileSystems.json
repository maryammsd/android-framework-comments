{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/FileSystems.java",
  "packageName" : "java.nio.file",
  "className" : "FileSystems",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static FileSystem getDefault()",
    "returnType" : "FileSystem",
    "comment" : "\n     * Returns the default {@code FileSystem}. The default file system creates\n     * objects that provide access to the file systems accessible to the Java\n     * virtual machine. The <em>working directory</em> of the file system is\n     * the current user directory, named by the system property {@code user.dir}.\n     * This allows for interoperability with the {@link java.io.File java.io.File}\n     * class.\n     *\n     * <p> The first invocation of any of the methods defined by this class\n     * locates the default {@link FileSystemProvider provider} object. Where the\n     * system property {@code java.nio.file.spi.DefaultFileSystemProvider} is\n     * not defined then the default provider is a system-default provider that\n     * is invoked to create the default file system.\n     *\n     * <p> If the system property {@code java.nio.file.spi.DefaultFileSystemProvider}\n     * is defined then it is taken to be a list of one or more fully-qualified\n     * names of concrete provider classes identified by the URI scheme\n     * {@code \"file\"}. Where the property is a list of more than one name then\n     * the names are separated by a comma. Each class is loaded, using the system\n     * class loader, and instantiated by invoking a one argument constructor\n     * whose formal parameter type is {@code FileSystemProvider}. The providers\n     * are loaded and instantiated in the order they are listed in the property.\n     * If this process fails or a provider's scheme is not equal to {@code \"file\"}\n     * then an unspecified error is thrown. URI schemes are normally compared\n     * without regard to case but for the default provider, the scheme is\n     * required to be {@code \"file\"}. The first provider class is instantiated\n     * by invoking it with a reference to the system-default provider.\n     * The second provider class is instantiated by invoking it with a reference\n     * to the first provider instance. The third provider class is instantiated\n     * by invoking it with a reference to the second instance, and so on. The\n     * last provider to be instantiated becomes the default provider; its {@code\n     * getFileSystem} method is invoked with the URI {@code \"file:///\"} to\n     * get a reference to the default file system.\n     *\n     * <p> Subsequent invocations of this method return the file system that was\n     * returned by the first invocation.\n     *\n     * @return  the default file system\n     ",
    "links" : [ "java.nio.file.spi.FileSystemProvider", "java.io.File" ]
  }, {
    "name" : "public static FileSystem getFileSystem(URI uri)",
    "returnType" : "FileSystem",
    "comment" : "\n     * Returns a reference to an existing {@code FileSystem}.\n     *\n     * <p> This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the URI\n     * {@link URI#getScheme scheme} of the given URI. URI schemes are compared\n     * without regard to case. The exact form of the URI is highly provider\n     * dependent. If found, the provider's {@link FileSystemProvider#getFileSystem\n     * getFileSystem} method is invoked to obtain a reference to the {@code\n     * FileSystem}.\n     *\n     * <p> Once a file system created by this provider is {@link FileSystem#close\n     * closed} it is provider-dependent if this method returns a reference to\n     * the closed file system or throws {@link FileSystemNotFoundException}.\n     * If the provider allows a new file system to be created with the same URI\n     * as a file system it previously created then this method throws the\n     * exception if invoked after the file system is closed (and before a new\n     * instance is created by the {@link #newFileSystem newFileSystem} method).\n     *\n     * <p> If a security manager is installed then a provider implementation\n     * may require to check a permission before returning a reference to an\n     * existing file system. In the case of the {@link FileSystems#getDefault\n     * default} file system, no permission check is required.\n     *\n     * @param   uri  the URI to locate the file system\n     *\n     * @return  the reference to the file system\n     *\n     * @throws  IllegalArgumentException\n     *          if the pre-conditions for the {@code uri} parameter are not met\n     * @throws  FileSystemNotFoundException\n     *          if the file system, identified by the URI, does not exist\n     * @throws  ProviderNotFoundException\n     *          if a provider supporting the URI scheme is not installed\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission\n     ",
    "links" : [ "java.nio.file.spi.FileSystemProvider#getFileSystemgetFileSystem", "java.nio.file.spi.FileSystemProvider#installedProviders()", "java.net.URI#getScheme", "java.nio.file.FileSystemNotFoundException", "#newFileSystem", "java.nio.file.FileSystems#getDefaultdefault", "java.nio.file.FileSystem#closeclosed" ]
  }, {
    "name" : "public static FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException",
    "returnType" : "FileSystem",
    "comment" : "\n     * Constructs a new file system that is identified by a {@link URI}\n     *\n     * <p> This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers to locate the provider that is identified by the URI\n     * {@link URI#getScheme scheme} of the given URI. URI schemes are compared\n     * without regard to case. The exact form of the URI is highly provider\n     * dependent. If found, the provider's {@link FileSystemProvider#newFileSystem(URI,Map)\n     * newFileSystem(URI,Map)} method is invoked to construct the new file system.\n     *\n     * <p> Once a file system is {@link FileSystem#close closed} it is\n     * provider-dependent if the provider allows a new file system to be created\n     * with the same URI as a file system it previously created.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose there is a provider identified by the scheme {@code \"memory\"}\n     * installed:\n     * <pre>\n     *   Map&lt;String,String&gt; env = new HashMap&lt;&gt;();\n     *   env.put(\"capacity\", \"16G\");\n     *   env.put(\"blockSize\", \"4k\");\n     *   FileSystem fs = FileSystems.newFileSystem(URI.create(\"memory:///?name=logfs\"), env);\n     * </pre>\n     *\n     * @param   uri\n     *          the URI identifying the file system\n     * @param   env\n     *          a map of provider specific properties to configure the file system;\n     *          may be empty\n     *\n     * @return  a new file system\n     *\n     * @throws  IllegalArgumentException\n     *          if the pre-conditions for the {@code uri} parameter are not met,\n     *          or the {@code env} parameter does not contain properties required\n     *          by the provider, or a property value is invalid\n     * @throws  FileSystemAlreadyExistsException\n     *          if the file system has already been created\n     * @throws  ProviderNotFoundException\n     *          if a provider supporting the URI scheme is not installed\n     * @throws  IOException\n     *          if an I/O error occurs creating the file system\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission required by the file system provider implementation\n     ",
    "links" : [ "java.nio.file.spi.FileSystemProvider#newFileSystem(URI", "java.nio.file.spi.FileSystemProvider#installedProviders()", "java.net.URI#getScheme", "java.nio.file.FileSystem#close", "java.net.URI" ]
  }, {
    "name" : "public static FileSystem newFileSystem(URI uri, Map<String, ?> env, ClassLoader loader) throws IOException",
    "returnType" : "FileSystem",
    "comment" : "\n     * Constructs a new file system that is identified by a {@link URI}\n     *\n     * <p> This method first attempts to locate an installed provider in exactly\n     * the same manner as the {@link #newFileSystem(URI,Map) newFileSystem(URI,Map)}\n     * method. If none of the installed providers support the URI scheme then an\n     * attempt is made to locate the provider using the given class loader. If a\n     * provider supporting the URI scheme is located then its {@link\n     * FileSystemProvider#newFileSystem(URI,Map) newFileSystem(URI,Map)} is\n     * invoked to construct the new file system.\n     *\n     * @param   uri\n     *          the URI identifying the file system\n     * @param   env\n     *          a map of provider specific properties to configure the file system;\n     *          may be empty\n     * @param   loader\n     *          the class loader to locate the provider or {@code null} to only\n     *          attempt to locate an installed provider\n     *\n     * @return  a new file system\n     *\n     * @throws  IllegalArgumentException\n     *          if the pre-conditions for the {@code uri} parameter are not met,\n     *          or the {@code env} parameter does not contain properties required\n     *          by the provider, or a property value is invalid\n     * @throws  FileSystemAlreadyExistsException\n     *          if the URI scheme identifies an installed provider and the file\n     *          system has already been created\n     * @throws  ProviderNotFoundException\n     *          if a provider supporting the URI scheme is not found\n     * @throws  ServiceConfigurationError\n     *          when an error occurs while loading a service provider\n     * @throws  IOException\n     *          an I/O error occurs creating the file system\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission required by the file system provider implementation\n     ",
    "links" : [ "java.nio.file.spi.FileSystemProvider#newFileSystem(URI", "#newFileSystem(URI", "java.net.URI" ]
  }, {
    "name" : "public static FileSystem newFileSystem(Path path, ClassLoader loader) throws IOException",
    "returnType" : "FileSystem",
    "comment" : "\n     * Constructs a new {@code FileSystem} to access the contents of a file as a\n     * file system.\n     *\n     * <p> This method makes use of specialized providers that create pseudo file\n     * systems where the contents of one or more files is treated as a file\n     * system.\n     *\n     * <p> This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers. It invokes, in turn, each provider's {@link\n     * FileSystemProvider#newFileSystem(Path,Map) newFileSystem(Path,Map)} method\n     * with an empty map. If a provider returns a file system then the iteration\n     * terminates and the file system is returned. If none of the installed\n     * providers return a {@code FileSystem} then an attempt is made to locate\n     * the provider using the given class loader. If a provider returns a file\n     * system then the lookup terminates and the file system is returned.\n     *\n     * @param   path\n     *          the path to the file\n     * @param   loader\n     *          the class loader to locate the provider or {@code null} to only\n     *          attempt to locate an installed provider\n     *\n     * @return  a new file system\n     *\n     * @throws  ProviderNotFoundException\n     *          if a provider supporting this file type cannot be located\n     * @throws  ServiceConfigurationError\n     *          when an error occurs while loading a service provider\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission\n     ",
    "links" : [ "java.nio.file.spi.FileSystemProvider#newFileSystem(Path", "java.nio.file.spi.FileSystemProvider#installedProviders()" ]
  } ],
  "methodNames" : [ "public static FileSystem getDefault()", "public static FileSystem getFileSystem(URI uri)", "public static FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException", "public static FileSystem newFileSystem(URI uri, Map<String, ?> env, ClassLoader loader) throws IOException", "public static FileSystem newFileSystem(Path path, ClassLoader loader) throws IOException" ],
  "variableNames" : [ ]
}