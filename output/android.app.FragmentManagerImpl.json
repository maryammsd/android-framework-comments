{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/FragmentManager.java",
  "packageName" : "android.app",
  "className" : "FragmentManagerImpl",
  "comment" : "\n * Container for fragments associated with an activity.\n ",
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TARGET_REQUEST_CODE_STATE_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TARGET_STATE_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_STATE_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_VISIBLE_HINT_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingActions",
    "type" : "ArrayList<OpGenerator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutingActions",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextFragmentIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActive",
    "type" : "SparseArray<Fragment>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdded",
    "type" : "ArrayList<Fragment>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackStack",
    "type" : "ArrayList<BackStackRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCreatedMenus",
    "type" : "ArrayList<Fragment>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackStackIndices",
    "type" : "ArrayList<BackStackRecord>",
    "comment" : " Must be accessed while locked.",
    "links" : [ ]
  }, {
    "name" : "mAvailBackStackIndices",
    "type" : "ArrayList<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackStackChangeListeners",
    "type" : "ArrayList<OnBackStackChangedListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLifecycleCallbacks",
    "type" : "CopyOnWriteArrayList<Pair<FragmentLifecycleCallbacks, Boolean>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHost",
    "type" : "FragmentHostCallback<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContainer",
    "type" : "FragmentContainer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParent",
    "type" : "Fragment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimaryNav",
    "type" : "Fragment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNeedMenuInvalidate",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateSaved",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNoTransactionsBecause",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHavePendingDeferredStart",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpRecords",
    "type" : "ArrayList<BackStackRecord>",
    "comment" : " Temporary vars for removing redundant operations in BackStackRecords:",
    "links" : [ ]
  }, {
    "name" : "mTmpIsPop",
    "type" : "ArrayList<Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpAddedFragments",
    "type" : "ArrayList<Fragment>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateBundle",
    "type" : "Bundle",
    "comment" : " Temporary vars for state save and restore.",
    "links" : [ ]
  }, {
    "name" : "mStateArray",
    "type" : "SparseArray<Parcelable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPostponedTransactions",
    "type" : "ArrayList<StartEnterTransitionListener>",
    "comment" : " Postponed transactions.",
    "links" : [ ]
  }, {
    "name" : "mAllowOldReentrantBehavior",
    "type" : "boolean",
    "comment" : " This is dangerous, but we want to keep from breaking old applications.",
    "links" : [ ]
  }, {
    "name" : "mSavedNonConfig",
    "type" : "FragmentManagerNonConfig",
    "comment" : " Saved FragmentManagerNonConfig during saveAllState() and cleared in noteStateNotSaved()",
    "links" : [ ]
  }, {
    "name" : "mExecCommit",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void throwException(RuntimeException ex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean modifiesAlpha(Animator anim)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean shouldRunOnHWLayer(View v, Animator anim)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setHWLayerAnimListenerIfAlpha(final View v, Animator anim)",
    "returnType" : "void",
    "comment" : "\n     * Sets the to be animated view on hardware layer during the animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FragmentTransaction beginTransaction()",
    "returnType" : "FragmentTransaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean executePendingTransactions()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void popBackStack()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean popBackStackImmediate()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void popBackStack(String name, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean popBackStackImmediate(String name, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void popBackStack(int id, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean popBackStackImmediate(int id, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean popBackStackImmediate(String name, int id, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by all public popBackStackImmediate methods, this executes pending transactions and\n     * returns true if the pop action did anything, regardless of what other pending\n     * transactions did.\n     *\n     * @return true if the pop operation did anything or false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBackStackEntryCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BackStackEntry getBackStackEntryAt(int index)",
    "returnType" : "BackStackEntry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnBackStackChangedListener(OnBackStackChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnBackStackChangedListener(OnBackStackChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void putFragment(Bundle bundle, String key, Fragment fragment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Fragment getFragment(Bundle bundle, String key)",
    "returnType" : "Fragment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Fragment> getFragments()",
    "returnType" : "List<Fragment>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Fragment.SavedState saveFragmentInstanceState(Fragment fragment)",
    "returnType" : "Fragment.SavedState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Animator loadAnimator(Fragment fragment, int transit, boolean enter, int transitionStyle)",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performPendingDeferredStart(Fragment f)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isStateAtLeast(int state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void moveToState(Fragment f, int newState, int transit, int transitionStyle, boolean keepActive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void moveToState(Fragment f)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void ensureInflatedFragmentView(Fragment f)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void completeShowHideFragment(final Fragment fragment)",
    "returnType" : "void",
    "comment" : "\n     * Fragments that have been shown or hidden don't have their visibility changed or\n     * animations run during the {@link #showFragment(Fragment)} or {@link #hideFragment(Fragment)}\n     * calls. After fragments are brought to their final state in\n     * {@link #moveFragmentToExpectedState(Fragment)} the fragments that have been shown or\n     * hidden must have their visibility changed and their animations started here.\n     *\n     * @param fragment The fragment with mHiddenChanged = true that should change its View's\n     *                 visibility and start the show or hide animation.\n     ",
    "links" : [ "#moveFragmentToExpectedState(Fragment)", "#showFragment(Fragment)", "#hideFragment(Fragment)" ]
  }, {
    "name" : " void moveFragmentToExpectedState(final Fragment f)",
    "returnType" : "void",
    "comment" : "\n     * Moves a fragment to its expected final state or the fragment manager's state, depending\n     * on whether the fragment manager's state is raised properly.\n     *\n     * @param f The fragment to change.\n     ",
    "links" : [ ]
  }, {
    "name" : " void moveToState(int newState, boolean always)",
    "returnType" : "void",
    "comment" : "\n     * Changes the state of the fragment manager to {@code newState}. If the fragment manager\n     * changes state or {@code always} is {@code true}, any fragments within it have their\n     * states updated as well.\n     *\n     * @param newState The new state for the fragment manager\n     * @param always If {@code true}, all fragments update their state, even\n     *               if {@code newState} matches the current fragment manager's state.\n     ",
    "links" : [ ]
  }, {
    "name" : " void startPendingDeferredFragments()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void makeActive(Fragment f)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void makeInactive(Fragment f)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addFragment(Fragment fragment, boolean moveToStateNow)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeFragment(Fragment fragment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void hideFragment(Fragment fragment)",
    "returnType" : "void",
    "comment" : "\n     * Marks a fragment as hidden to be later animated in with\n     * {@link #completeShowHideFragment(Fragment)}.\n     *\n     * @param fragment The fragment to be shown.\n     ",
    "links" : [ "#completeShowHideFragment(Fragment)" ]
  }, {
    "name" : "public void showFragment(Fragment fragment)",
    "returnType" : "void",
    "comment" : "\n     * Marks a fragment as shown to be later animated in with\n     * {@link #completeShowHideFragment(Fragment)}.\n     *\n     * @param fragment The fragment to be shown.\n     ",
    "links" : [ "#completeShowHideFragment(Fragment)" ]
  }, {
    "name" : "public void detachFragment(Fragment fragment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void attachFragment(Fragment fragment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Fragment findFragmentById(int id)",
    "returnType" : "Fragment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Fragment findFragmentByTag(String tag)",
    "returnType" : "Fragment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Fragment findFragmentByWho(String who)",
    "returnType" : "Fragment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkStateLoss()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateSaved()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enqueueAction(OpGenerator action, boolean allowStateLoss)",
    "returnType" : "void",
    "comment" : "\n     * Adds an action to the queue of pending actions.\n     *\n     * @param action the action to add\n     * @param allowStateLoss whether to allow loss of state information\n     * @throws IllegalStateException if the activity has been destroyed\n     ",
    "links" : [ ]
  }, {
    "name" : "private void scheduleCommit()",
    "returnType" : "void",
    "comment" : "\n     * Schedules the execution when one hasn't been scheduled already. This should happen\n     * the first time {@link #enqueueAction(OpGenerator, boolean)} is called or when\n     * a postponed transaction has been started with\n     * {@link Fragment#startPostponedEnterTransition()}\n     ",
    "links" : [ "android.app.Fragment#startPostponedEnterTransition()", "#enqueueAction(OpGenerator" ]
  }, {
    "name" : "public int allocBackStackIndex(BackStackRecord bse)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBackStackIndex(int index, BackStackRecord bse)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void freeBackStackIndex(int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureExecReady(boolean allowStateLoss)",
    "returnType" : "void",
    "comment" : "\n     * Broken out from exec*, this prepares for gathering and executing operations.\n     *\n     * @param allowStateLoss true if state loss should be ignored or false if it should be\n     *                       checked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void execSingleAction(OpGenerator action, boolean allowStateLoss)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cleanupExec()",
    "returnType" : "void",
    "comment" : "\n     * Broken out of exec*, this cleans up the mExecutingActions and the temporary structures\n     * used in executing operations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean execPendingActions()",
    "returnType" : "boolean",
    "comment" : "\n     * Only call from main thread!\n     ",
    "links" : [ ]
  }, {
    "name" : "private void executePostponedTransaction(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop)",
    "returnType" : "void",
    "comment" : "\n     * Complete the execution of transactions that have previously been postponed, but are\n     * now ready.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeRedundantOperationsAndExecute(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop)",
    "returnType" : "void",
    "comment" : "\n     * Remove redundant BackStackRecord operations and executes them. This method merges operations\n     * of proximate records that allow reordering. See\n     * {@link FragmentTransaction#setReorderingAllowed(boolean)}.\n     * <p>\n     * For example, a transaction that adds to the back stack and then another that pops that\n     * back stack record will be optimized to remove the unnecessary operation.\n     * <p>\n     * Likewise, two transactions committed that are executed at the same time will be optimized\n     * to remove the redundant operations as well as two pop operations executed together.\n     *\n     * @param records The records pending execution\n     * @param isRecordPop The direction that these records are being run.\n     ",
    "links" : [ "android.app.FragmentTransaction#setReorderingAllowed(boolean)" ]
  }, {
    "name" : "private void executeOpsTogether(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, int startIndex, int endIndex)",
    "returnType" : "void",
    "comment" : "\n     * Executes a subset of a list of BackStackRecords, all of which either allow reordering or\n     * do not allow ordering.\n     * @param records A list of BackStackRecords that are to be executed together\n     * @param isRecordPop The direction that these records are being run.\n     * @param startIndex The index of the first record in <code>records</code> to be executed\n     * @param endIndex One more than the final record index in <code>records</code> to executed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void makeRemovedFragmentsInvisible(ArraySet<Fragment> fragments)",
    "returnType" : "void",
    "comment" : "\n     * Any fragments that were removed because they have been postponed should have their views\n     * made invisible by setting their transition alpha to 0.\n     *\n     * @param fragments The fragments that were added during operation execution. Only the ones\n     *                  that are no longer added will have their transition alpha changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int postponePostponableTransactions(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, int startIndex, int endIndex, ArraySet<Fragment> added)",
    "returnType" : "int",
    "comment" : "\n     * Examine all transactions and determine which ones are marked as postponed. Those will\n     * have their operations rolled back and moved to the end of the record list (up to endIndex).\n     * It will also add the postponed transaction to the queue.\n     *\n     * @param records A list of BackStackRecords that should be checked.\n     * @param isRecordPop The direction that these records are being run.\n     * @param startIndex The index of the first record in <code>records</code> to be checked\n     * @param endIndex One more than the final record index in <code>records</code> to be checked.\n     * @return The index of the first postponed transaction or endIndex if no transaction was\n     * postponed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void completeExecute(BackStackRecord record, boolean isPop, boolean runTransitions, boolean moveToState)",
    "returnType" : "void",
    "comment" : "\n     * When a postponed transaction is ready to be started, this completes the transaction,\n     * removing, hiding, or showing views as well as starting the animations and transitions.\n     * <p>\n     * {@code runtransitions} is set to false when the transaction postponement was interrupted\n     * abnormally -- normally by a new transaction being started that affects the postponed\n     * transaction.\n     *\n     * @param record The transaction to run\n     * @param isPop true if record is popping or false if it is adding\n     * @param runTransitions true if the fragment transition should be run or false otherwise.\n     * @param moveToState true if the state should be changed after executing the operations.\n     *                    This is false when the transaction is canceled when a postponed\n     *                    transaction is popped.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Fragment findFragmentUnder(Fragment f)",
    "returnType" : "Fragment",
    "comment" : "\n     * Find a fragment within the fragment's container whose View should be below the passed\n     * fragment. {@code null} is returned when the fragment has no View or if there should be\n     * no fragment with a View below the given fragment.\n     *\n     * As an example, if mAdded has two Fragments with Views sharing the same container:\n     * FragmentA\n     * FragmentB\n     *\n     * Then, when processing FragmentB, FragmentA will be returned. If, however, FragmentA\n     * had no View, null would be returned.\n     *\n     * @param f The fragment that may be on top of another fragment.\n     * @return The fragment with a View under f, if one exists or null if f has no View or\n     * there are no fragments with Views in the same container.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void executeOps(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, int startIndex, int endIndex)",
    "returnType" : "void",
    "comment" : "\n     * Run the operations in the BackStackRecords, either to push or pop.\n     *\n     * @param records The list of records whose operations should be run.\n     * @param isRecordPop The direction that these records are being run.\n     * @param startIndex The index of the first entry in records to run.\n     * @param endIndex One past the index of the final entry in records to run.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addAddedFragments(ArraySet<Fragment> added)",
    "returnType" : "void",
    "comment" : "\n     * Ensure that fragments that are added are moved to at least the CREATED state.\n     * Any newly-added Views are inserted into {@code added} so that the Transaction can be\n     * postponed with {@link Fragment#postponeEnterTransition()}. They will later be made\n     * invisible by changing their transitionAlpha to 0 if they have been removed when postponed.\n     ",
    "links" : [ "android.app.Fragment#postponeEnterTransition()" ]
  }, {
    "name" : "private void forcePostponedTransactions()",
    "returnType" : "void",
    "comment" : "\n     * Starts all postponed transactions regardless of whether they are ready or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void endAnimatingAwayFragments()",
    "returnType" : "void",
    "comment" : "\n     * Ends the animations of fragments so that they immediately reach the end state.\n     * This is used prior to saving the state so that the correct state is saved.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean generateOpsForPendingActions(ArrayList<BackStackRecord> records, ArrayList<Boolean> isPop)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds all records in the pending actions to records and whether they are add or pop\n     * operations to isPop. After executing, the pending actions will be empty.\n     *\n     * @param records All pending actions will generate BackStackRecords added to this.\n     *                This contains the transactions, in order, to execute.\n     * @param isPop All pending actions will generate booleans to add to this. This contains\n     *              an entry for each entry in records to indicate whether or not it is a\n     *              pop action.\n     ",
    "links" : [ ]
  }, {
    "name" : " void doPendingDeferredStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void reportBackStackChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void addBackStackState(BackStackRecord state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean popBackStackState(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, String name, int id, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " FragmentManagerNonConfig retainNonConfig()",
    "returnType" : "FragmentManagerNonConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setRetaining(FragmentManagerNonConfig nonConfig)",
    "returnType" : "void",
    "comment" : "\n     * Recurse the FragmentManagerNonConfig fragments and set the mRetaining to true. This\n     * was previously done while saving the non-config state, but that has been moved to\n     * {@link #saveNonConfig()} called from {@link #saveAllState()}. If mRetaining is set too\n     * early, the fragment won't be destroyed when the FragmentManager is destroyed.\n     ",
    "links" : [ "#saveAllState()", "#saveNonConfig()" ]
  }, {
    "name" : " void saveNonConfig()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void saveFragmentViewState(Fragment f)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Bundle saveFragmentBasicState(Fragment f)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Parcelable saveAllState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void restoreAllState(Parcelable state, FragmentManagerNonConfig nonConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void burpActive()",
    "returnType" : "void",
    "comment" : "\n     * To prevent list modification errors, mActive sets values to null instead of\n     * removing them when the Fragment becomes inactive. This cleans up the list at the\n     * end of executing the transactions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attachController(FragmentHostCallback<?> host, FragmentContainer container, Fragment parent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getTargetSdk()",
    "returnType" : "int",
    "comment" : "\n     * @return the target SDK of the FragmentManager's application info. If the\n     * FragmentManager has been torn down, then 0 is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void noteStateNotSaved()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchActivityCreated()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchResume()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchPause()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchDestroyView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchMoveToState(int state)",
    "returnType" : "void",
    "comment" : "\n     * This method is called by dispatch* methods to change the FragmentManager's state.\n     * It calls moveToState directly if the target SDK is older than O. Otherwise, it sets and\n     * clears mExecutingActions to ensure that there is no reentrancy while the\n     * FragmentManager is changing state.\n     *\n     * @param state The new state of the FragmentManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchMultiWindowModeChanged(boolean isInMultiWindowMode)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated use {@link #dispatchMultiWindowModeChanged(boolean, Configuration)}\n     ",
    "links" : [ "#dispatchMultiWindowModeChanged(boolean" ]
  }, {
    "name" : "public void dispatchMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated use {@link #dispatchPictureInPictureModeChanged(boolean, Configuration)}\n     ",
    "links" : [ "#dispatchPictureInPictureModeChanged(boolean" ]
  }, {
    "name" : "public void dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchLowMemory()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchTrimMemory(int level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchCreateOptionsMenu(Menu menu, MenuInflater inflater)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPrepareOptionsMenu(Menu menu)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchOptionsItemSelected(MenuItem item)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchContextItemSelected(MenuItem item)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchOptionsMenuClosed(Menu menu)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPrimaryNavigationFragment(Fragment f)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Fragment getPrimaryNavigationFragment()",
    "returnType" : "Fragment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerFragmentLifecycleCallbacks(FragmentLifecycleCallbacks cb, boolean recursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterFragmentLifecycleCallbacks(FragmentLifecycleCallbacks cb)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentPreAttached(Fragment f, Context context, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentAttached(Fragment f, Context context, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentPreCreated(Fragment f, Bundle savedInstanceState, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentCreated(Fragment f, Bundle savedInstanceState, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentActivityCreated(Fragment f, Bundle savedInstanceState, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentViewCreated(Fragment f, View v, Bundle savedInstanceState, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentStarted(Fragment f, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentResumed(Fragment f, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentPaused(Fragment f, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentStopped(Fragment f, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentSaveInstanceState(Fragment f, Bundle outState, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentViewDestroyed(Fragment f, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentDestroyed(Fragment f, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnFragmentDetached(Fragment f, boolean onlyRecursive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateOptionsMenu()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int reverseTransit(int transit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int transitToStyleIndex(int transit, boolean enter)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View onCreateView(View parent, String name, Context context, AttributeSet attrs)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View onCreateView(String name, Context context, AttributeSet attrs)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " LayoutInflater.Factory2 getLayoutInflaterFactory()",
    "returnType" : "LayoutInflater.Factory2",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEBUG", "TAG", "TARGET_REQUEST_CODE_STATE_TAG", "TARGET_STATE_TAG", "VIEW_STATE_TAG", "USER_VISIBLE_HINT_TAG", "mPendingActions", "mExecutingActions", "mNextFragmentIndex", "mActive", "mAdded", "mBackStack", "mCreatedMenus", "mBackStackIndices", "mAvailBackStackIndices", "mBackStackChangeListeners", "mLifecycleCallbacks", "mCurState", "mHost", "mContainer", "mParent", "mPrimaryNav", "mNeedMenuInvalidate", "mStateSaved", "mDestroyed", "mNoTransactionsBecause", "mHavePendingDeferredStart", "mTmpRecords", "mTmpIsPop", "mTmpAddedFragments", "mStateBundle", "mStateArray", "mPostponedTransactions", "mAllowOldReentrantBehavior", "mSavedNonConfig", "mExecCommit" ],
  "methodNames" : [ "private void throwException(RuntimeException ex)", " static boolean modifiesAlpha(Animator anim)", " static boolean shouldRunOnHWLayer(View v, Animator anim)", "private void setHWLayerAnimListenerIfAlpha(final View v, Animator anim)", "public FragmentTransaction beginTransaction()", "public boolean executePendingTransactions()", "public void popBackStack()", "public boolean popBackStackImmediate()", "public void popBackStack(String name, int flags)", "public boolean popBackStackImmediate(String name, int flags)", "public void popBackStack(int id, int flags)", "public boolean popBackStackImmediate(int id, int flags)", "private boolean popBackStackImmediate(String name, int id, int flags)", "public int getBackStackEntryCount()", "public BackStackEntry getBackStackEntryAt(int index)", "public void addOnBackStackChangedListener(OnBackStackChangedListener listener)", "public void removeOnBackStackChangedListener(OnBackStackChangedListener listener)", "public void putFragment(Bundle bundle, String key, Fragment fragment)", "public Fragment getFragment(Bundle bundle, String key)", "public List<Fragment> getFragments()", "public Fragment.SavedState saveFragmentInstanceState(Fragment fragment)", "public boolean isDestroyed()", "public String toString()", "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", " Animator loadAnimator(Fragment fragment, int transit, boolean enter, int transitionStyle)", "public void performPendingDeferredStart(Fragment f)", " boolean isStateAtLeast(int state)", " void moveToState(Fragment f, int newState, int transit, int transitionStyle, boolean keepActive)", " void moveToState(Fragment f)", " void ensureInflatedFragmentView(Fragment f)", " void completeShowHideFragment(final Fragment fragment)", " void moveFragmentToExpectedState(final Fragment f)", " void moveToState(int newState, boolean always)", " void startPendingDeferredFragments()", " void makeActive(Fragment f)", " void makeInactive(Fragment f)", "public void addFragment(Fragment fragment, boolean moveToStateNow)", "public void removeFragment(Fragment fragment)", "public void hideFragment(Fragment fragment)", "public void showFragment(Fragment fragment)", "public void detachFragment(Fragment fragment)", "public void attachFragment(Fragment fragment)", "public Fragment findFragmentById(int id)", "public Fragment findFragmentByTag(String tag)", "public Fragment findFragmentByWho(String who)", "private void checkStateLoss()", "public boolean isStateSaved()", "public void enqueueAction(OpGenerator action, boolean allowStateLoss)", "private void scheduleCommit()", "public int allocBackStackIndex(BackStackRecord bse)", "public void setBackStackIndex(int index, BackStackRecord bse)", "public void freeBackStackIndex(int index)", "private void ensureExecReady(boolean allowStateLoss)", "public void execSingleAction(OpGenerator action, boolean allowStateLoss)", "private void cleanupExec()", "public boolean execPendingActions()", "private void executePostponedTransaction(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop)", "private void removeRedundantOperationsAndExecute(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop)", "private void executeOpsTogether(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, int startIndex, int endIndex)", "private void makeRemovedFragmentsInvisible(ArraySet<Fragment> fragments)", "private int postponePostponableTransactions(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, int startIndex, int endIndex, ArraySet<Fragment> added)", "private void completeExecute(BackStackRecord record, boolean isPop, boolean runTransitions, boolean moveToState)", "private Fragment findFragmentUnder(Fragment f)", "private static void executeOps(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, int startIndex, int endIndex)", "private void addAddedFragments(ArraySet<Fragment> added)", "private void forcePostponedTransactions()", "private void endAnimatingAwayFragments()", "private boolean generateOpsForPendingActions(ArrayList<BackStackRecord> records, ArrayList<Boolean> isPop)", " void doPendingDeferredStart()", " void reportBackStackChanged()", " void addBackStackState(BackStackRecord state)", " boolean popBackStackState(ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, String name, int id, int flags)", " FragmentManagerNonConfig retainNonConfig()", "private static void setRetaining(FragmentManagerNonConfig nonConfig)", " void saveNonConfig()", " void saveFragmentViewState(Fragment f)", " Bundle saveFragmentBasicState(Fragment f)", " Parcelable saveAllState()", " void restoreAllState(Parcelable state, FragmentManagerNonConfig nonConfig)", "private void burpActive()", "public void attachController(FragmentHostCallback<?> host, FragmentContainer container, Fragment parent)", " int getTargetSdk()", "public void noteStateNotSaved()", "public void dispatchCreate()", "public void dispatchActivityCreated()", "public void dispatchStart()", "public void dispatchResume()", "public void dispatchPause()", "public void dispatchStop()", "public void dispatchDestroyView()", "public void dispatchDestroy()", "private void dispatchMoveToState(int state)", "public void dispatchMultiWindowModeChanged(boolean isInMultiWindowMode)", "public void dispatchMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig)", "public void dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode)", "public void dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig)", "public void dispatchConfigurationChanged(Configuration newConfig)", "public void dispatchLowMemory()", "public void dispatchTrimMemory(int level)", "public boolean dispatchCreateOptionsMenu(Menu menu, MenuInflater inflater)", "public boolean dispatchPrepareOptionsMenu(Menu menu)", "public boolean dispatchOptionsItemSelected(MenuItem item)", "public boolean dispatchContextItemSelected(MenuItem item)", "public void dispatchOptionsMenuClosed(Menu menu)", "public void setPrimaryNavigationFragment(Fragment f)", "public Fragment getPrimaryNavigationFragment()", "public void registerFragmentLifecycleCallbacks(FragmentLifecycleCallbacks cb, boolean recursive)", "public void unregisterFragmentLifecycleCallbacks(FragmentLifecycleCallbacks cb)", " void dispatchOnFragmentPreAttached(Fragment f, Context context, boolean onlyRecursive)", " void dispatchOnFragmentAttached(Fragment f, Context context, boolean onlyRecursive)", " void dispatchOnFragmentPreCreated(Fragment f, Bundle savedInstanceState, boolean onlyRecursive)", " void dispatchOnFragmentCreated(Fragment f, Bundle savedInstanceState, boolean onlyRecursive)", " void dispatchOnFragmentActivityCreated(Fragment f, Bundle savedInstanceState, boolean onlyRecursive)", " void dispatchOnFragmentViewCreated(Fragment f, View v, Bundle savedInstanceState, boolean onlyRecursive)", " void dispatchOnFragmentStarted(Fragment f, boolean onlyRecursive)", " void dispatchOnFragmentResumed(Fragment f, boolean onlyRecursive)", " void dispatchOnFragmentPaused(Fragment f, boolean onlyRecursive)", " void dispatchOnFragmentStopped(Fragment f, boolean onlyRecursive)", " void dispatchOnFragmentSaveInstanceState(Fragment f, Bundle outState, boolean onlyRecursive)", " void dispatchOnFragmentViewDestroyed(Fragment f, boolean onlyRecursive)", " void dispatchOnFragmentDestroyed(Fragment f, boolean onlyRecursive)", " void dispatchOnFragmentDetached(Fragment f, boolean onlyRecursive)", "public void invalidateOptionsMenu()", "public static int reverseTransit(int transit)", "public static int transitToStyleIndex(int transit, boolean enter)", "public View onCreateView(View parent, String name, Context context, AttributeSet attrs)", "public View onCreateView(String name, Context context, AttributeSet attrs)", " LayoutInflater.Factory2 getLayoutInflaterFactory()" ]
}