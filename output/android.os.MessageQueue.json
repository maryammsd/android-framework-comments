{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/MessageQueue.java",
  "packageName" : "android.os",
  "className" : "MessageQueue",
  "comment" : "\n * Low-level class holding the list of messages to be dispatched by a\n * {@link Looper}.  Messages are not added directly to a MessageQueue,\n * but rather through {@link Handler} objects associated with the Looper.\n *\n * <p>You can retrieve the MessageQueue for the current thread with\n * {@link Looper#myQueue() Looper.myQueue()}.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQuitAllowed",
    "type" : "boolean",
    "comment" : " True if the message queue can be quit.",
    "links" : [ ]
  }, {
    "name" : "mPtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessages",
    "type" : "Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdleHandlers",
    "type" : "ArrayList<IdleHandler>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFileDescriptorRecords",
    "type" : "SparseArray<FileDescriptorRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingIdleHandlers",
    "type" : "IdleHandler[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQuitting",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlocked",
    "type" : "boolean",
    "comment" : " Indicates whether next() is blocked waiting in pollOnce() with a non-zero timeout.",
    "links" : [ ]
  }, {
    "name" : "mNextBarrierToken",
    "type" : "int",
    "comment" : " Barriers are indicated by messages with a null target whose arg1 field carries the token.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeInit()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDestroy(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativePollOnce(long ptr, int timeoutMillis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWake(long ptr)",
    "returnType" : "void",
    "comment" : "non-static for callbacks",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsPolling(long ptr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFileDescriptorEvents(long ptr, int fd, int events)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispose()",
    "returnType" : "void",
    "comment" : " Must only be called on the looper thread or the finalizer.",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdle()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the looper has no pending messages which are due to be processed.\n     *\n     * <p>This method is safe to call from any thread.\n     *\n     * @return True if the looper is idle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addIdleHandler(@NonNull IdleHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Add a new {@link IdleHandler} to this message queue.  This may be\n     * removed automatically for you by returning false from\n     * {@link IdleHandler#queueIdle IdleHandler.queueIdle()} when it is\n     * invoked, or explicitly removing it with {@link #removeIdleHandler}.\n     *\n     * <p>This method is safe to call from any thread.\n     *\n     * @param handler The IdleHandler to be added.\n     ",
    "links" : [ "#queueIdle", "IdleHandler", "#removeIdleHandler" ]
  }, {
    "name" : "public void removeIdleHandler(@NonNull IdleHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Remove an {@link IdleHandler} from the queue that was previously added\n     * with {@link #addIdleHandler}.  If the given object is not currently\n     * in the idle list, nothing is done.\n     *\n     * <p>This method is safe to call from any thread.\n     *\n     * @param handler The IdleHandler to be removed.\n     ",
    "links" : [ "#addIdleHandler", "IdleHandler" ]
  }, {
    "name" : "public boolean isPolling()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this looper's thread is currently polling for more work to do.\n     * This is a good signal that the loop is still alive rather than being stuck\n     * handling a callback.  Note that this method is intrinsically racy, since the\n     * state of the loop can change before you get the result back.\n     *\n     * <p>This method is safe to call from any thread.\n     *\n     * @return True if the looper is currently polling for events.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isPollingLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnFileDescriptorEventListener(@NonNull FileDescriptor fd, @OnFileDescriptorEventListener.Events int events, @NonNull OnFileDescriptorEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a file descriptor listener to receive notification when file descriptor\n     * related events occur.\n     * <p>\n     * If the file descriptor has already been registered, the specified events\n     * and listener will replace any that were previously associated with it.\n     * It is not possible to set more than one listener per file descriptor.\n     * </p><p>\n     * It is important to always unregister the listener when the file descriptor\n     * is no longer of use.\n     * </p>\n     *\n     * @param fd The file descriptor for which a listener will be registered.\n     * @param events The set of events to receive: a combination of the\n     * {@link OnFileDescriptorEventListener#EVENT_INPUT},\n     * {@link OnFileDescriptorEventListener#EVENT_OUTPUT}, and\n     * {@link OnFileDescriptorEventListener#EVENT_ERROR} event masks.  If the requested\n     * set of events is zero, then the listener is unregistered.\n     * @param listener The listener to invoke when file descriptor events occur.\n     *\n     * @see OnFileDescriptorEventListener\n     * @see #removeOnFileDescriptorEventListener\n     ",
    "links" : [ "#EVENT_OUTPUT", "#EVENT_ERROR", "#EVENT_INPUT" ]
  }, {
    "name" : "public void removeOnFileDescriptorEventListener(@NonNull FileDescriptor fd)",
    "returnType" : "void",
    "comment" : "\n     * Removes a file descriptor listener.\n     * <p>\n     * This method does nothing if no listener has been registered for the\n     * specified file descriptor.\n     * </p>\n     *\n     * @param fd The file descriptor whose listener will be unregistered.\n     *\n     * @see OnFileDescriptorEventListener\n     * @see #addOnFileDescriptorEventListener\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateOnFileDescriptorEventListenerLocked(FileDescriptor fd, int events, OnFileDescriptorEventListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int dispatchEvents(int fd, int events)",
    "returnType" : "int",
    "comment" : " Called from native code.",
    "links" : [ ]
  }, {
    "name" : " Message next()",
    "returnType" : "Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void quit(boolean safe)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int postSyncBarrier()",
    "returnType" : "int",
    "comment" : "\n     * Posts a synchronization barrier to the Looper's message queue.\n     *\n     * Message processing occurs as usual until the message queue encounters the\n     * synchronization barrier that has been posted.  When the barrier is encountered,\n     * later synchronous messages in the queue are stalled (prevented from being executed)\n     * until the barrier is released by calling {@link #removeSyncBarrier} and specifying\n     * the token that identifies the synchronization barrier.\n     *\n     * This method is used to immediately postpone execution of all subsequently posted\n     * synchronous messages until a condition is met that releases the barrier.\n     * Asynchronous messages (see {@link Message#isAsynchronous} are exempt from the barrier\n     * and continue to be processed as usual.\n     *\n     * This call must be always matched by a call to {@link #removeSyncBarrier} with\n     * the same token to ensure that the message queue resumes normal operation.\n     * Otherwise the application will probably hang!\n     *\n     * @return A token that uniquely identifies the barrier.  This token must be\n     * passed to {@link #removeSyncBarrier} to release the barrier.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Message#isAsynchronous", "#removeSyncBarrier" ]
  }, {
    "name" : "private int postSyncBarrier(long when)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeSyncBarrier(int token)",
    "returnType" : "void",
    "comment" : "\n     * Removes a synchronization barrier.\n     *\n     * @param token The synchronization barrier token that was returned by\n     * {@link #postSyncBarrier}.\n     *\n     * @throws IllegalStateException if the barrier was not found.\n     *\n     * @hide\n     ",
    "links" : [ "#postSyncBarrier" ]
  }, {
    "name" : " boolean enqueueMessage(Message msg, long when)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasMessages(Handler h, int what, Object object)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasEqualMessages(Handler h, int what, Object object)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasMessages(Handler h, Runnable r, Object object)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasMessages(Handler h)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeMessages(Handler h, int what, Object object)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeEqualMessages(Handler h, int what, Object object)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeMessages(Handler h, Runnable r, Object object)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeEqualMessages(Handler h, Runnable r, Object object)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeCallbacksAndMessages(Handler h, Object object)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeCallbacksAndEqualMessages(Handler h, Object object)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeAllMessagesLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeAllFutureMessagesLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dump(Printer pw, String prefix, Handler h)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mQuitAllowed", "mPtr", "mMessages", "mIdleHandlers", "mFileDescriptorRecords", "mPendingIdleHandlers", "mQuitting", "mBlocked", "mNextBarrierToken" ],
  "methodNames" : [ "private static native long nativeInit()", "private static native void nativeDestroy(long ptr)", "private native void nativePollOnce(long ptr, int timeoutMillis)", "private static native void nativeWake(long ptr)", "private static native boolean nativeIsPolling(long ptr)", "private static native void nativeSetFileDescriptorEvents(long ptr, int fd, int events)", "protected void finalize() throws Throwable", "private void dispose()", "public boolean isIdle()", "public void addIdleHandler(@NonNull IdleHandler handler)", "public void removeIdleHandler(@NonNull IdleHandler handler)", "public boolean isPolling()", "private boolean isPollingLocked()", "public void addOnFileDescriptorEventListener(@NonNull FileDescriptor fd, @OnFileDescriptorEventListener.Events int events, @NonNull OnFileDescriptorEventListener listener)", "public void removeOnFileDescriptorEventListener(@NonNull FileDescriptor fd)", "private void updateOnFileDescriptorEventListenerLocked(FileDescriptor fd, int events, OnFileDescriptorEventListener listener)", "private int dispatchEvents(int fd, int events)", " Message next()", " void quit(boolean safe)", "public int postSyncBarrier()", "private int postSyncBarrier(long when)", "public void removeSyncBarrier(int token)", " boolean enqueueMessage(Message msg, long when)", " boolean hasMessages(Handler h, int what, Object object)", " boolean hasEqualMessages(Handler h, int what, Object object)", " boolean hasMessages(Handler h, Runnable r, Object object)", " boolean hasMessages(Handler h)", " void removeMessages(Handler h, int what, Object object)", " void removeEqualMessages(Handler h, int what, Object object)", " void removeMessages(Handler h, Runnable r, Object object)", " void removeEqualMessages(Handler h, Runnable r, Object object)", " void removeCallbacksAndMessages(Handler h, Object object)", " void removeCallbacksAndEqualMessages(Handler h, Object object)", "private void removeAllMessagesLocked()", "private void removeAllFutureMessagesLocked()", " void dump(Printer pw, String prefix, Handler h)", " void dumpDebug(ProtoOutputStream proto, long fieldId)" ]
}