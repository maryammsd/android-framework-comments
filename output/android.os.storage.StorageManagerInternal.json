{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/storage/StorageManagerInternal.java",
  "packageName" : "android.os.storage",
  "className" : "StorageManagerInternal",
  "comment" : "\n * Mount service local interface.\n *\n * @hide Only for use within the system server.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract int getExternalStorageMountMode(int uid, String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Gets the mount mode to use for a given UID\n     *\n     * @param uid The UID for which to get mount mode.\n     * @param packageName The package in the UID for making the call.\n     * @return The mount mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasExternalStorageAccess(int uid, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the {@code packageName} with {@code uid} has full external storage access via\n     * the {@link MANAGE_EXTERNAL_STORAGE} permission.\n     *\n     * @param uid the UID for which to check access.\n     * @param packageName the package in the UID for making the call.\n     * @return whether the {@code packageName} has full external storage access.\n     * Returns {@code true} if it has access, {@code false} otherwise.\n     ",
    "links" : [ "MANAGE_EXTERNAL_STORAGE" ]
  }, {
    "name" : "public abstract boolean isFuseMounted(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if fuse is mounted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean prepareStorageDirs(int userId, Set<String> packageList, String processName)",
    "returnType" : "boolean",
    "comment" : "\n     * Create storage directories if it does not exist.\n     * Return true if the directories were setup correctly, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addResetListener(ResetListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener to listen to reset event in StorageManagerService.\n     *\n     * @param listener The listener that will be notified on reset events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onAppOpsChanged(int code, int uid, @Nullable String packageName, int mode, int previousMode)",
    "returnType" : "void",
    "comment" : "\n     * Notified when any app op changes so that storage mount points can be updated if the app op\n     * affects them.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void resetUser(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Asks the StorageManager to reset all state for the provided user; this will result\n     * in the unmounting for all volumes of the user, and, if the user is still running, the\n     * volumes will be re-mounted as well.\n     *\n     * @param userId the userId for which to reset storage\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasLegacyExternalStorage(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the immediate last installed version of an app with {@code uid} had\n     * legacy storage, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void prepareAppDataAfterInstall(@NonNull String packageName, int uid)",
    "returnType" : "void",
    "comment" : "\n     * Makes sure app-private data directories on external storage are setup correctly\n     * after an application is installed or upgraded. The main use for this is OBB dirs,\n     * which can be created/modified by the installer.\n     *\n     * @param packageName the package name of the package\n     * @param uid the uid of the package\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isExternalStorageService(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if uid is external storage service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void freeCache(@Nullable String volumeUuid, long bytes)",
    "returnType" : "void",
    "comment" : "\n     * Frees cache held by ExternalStorageService.\n     *\n     * <p> Blocks until the service frees the cache or fails in doing so.\n     *\n     * @param volumeUuid uuid of the {@link StorageVolume} from which cache needs to be freed,\n     *                   null value indicates private internal volume.\n     * @param bytes number of bytes which need to be freed\n     ",
    "links" : [ "android.os.storage.StorageVolume" ]
  }, {
    "name" : "public abstract List<String> getPrimaryVolumeIds()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the {@link VolumeInfo#getId()} values for the volumes matching\n     * {@link VolumeInfo#isPrimary()}\n     ",
    "links" : [ "android.os.storage.VolumeInfo#isPrimary()", "android.os.storage.VolumeInfo#getId()" ]
  }, {
    "name" : "public abstract void markCeStoragePrepared(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Tells StorageManager that CE storage for this user has been prepared.\n     *\n     * @param userId userId for which CE storage has been prepared\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isCeStoragePrepared(@UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true when CE storage for this user has been prepared.\n     *\n     * When the user key is unlocked and CE storage has been prepared,\n     * it's ok to access and modify CE directories on volumes for this user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerCloudProviderChangeListener(@NonNull CloudProviderChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a {@link CloudProviderChangeListener} to be notified when a cloud media provider\n     * changes. The listener will be called after registration with any currently set cloud media\n     * providers.\n     ",
    "links" : [ "CloudProviderChangeListener" ]
  }, {
    "name" : "public abstract void prepareUserStorageForMove(String fromVolumeUuid, String toVolumeUuid, List<UserInfo> users)",
    "returnType" : "void",
    "comment" : "\n     * Prepares user data directories before moving storage or apps. This is required as adoptable\n     * storage unlock is tied to the prepare user data and storage needs to be unlocked before\n     * performing any operations on it. This will also create user data directories before\n     * initiating the move operations, which essential for ensuring the directories to have correct\n     * SELinux labels and permissions.\n     *\n     * @param fromVolumeUuid the source volume UUID from which content needs to be transferred\n     * @param toVolumeUuid the destination volume UUID to which contents are to be transferred\n     * @param users a list of users for whom to prepare storage\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract IInstalld.IFsveritySetupAuthToken createFsveritySetupAuthToken(ParcelFileDescriptor authFd, int uid) throws IOException",
    "returnType" : "IInstalld.IFsveritySetupAuthToken",
    "comment" : "\n     * A proxy call to the corresponding method in Installer.\n     * @see com.android.server.pm.Installer#createFsveritySetupAuthToken()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int enableFsverity(IInstalld.IFsveritySetupAuthToken authToken, String filePath, String packageName) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * A proxy call to the corresponding method in Installer.\n     * @see com.android.server.pm.Installer#enableFsverity()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerStorageLockEventListener(@NonNull ICeStorageLockEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link ICeStorageLockEventListener} for receiving CE storage lock events.\n     ",
    "links" : [ "android.os.storage.ICeStorageLockEventListener" ]
  }, {
    "name" : "public abstract void unregisterStorageLockEventListener(@NonNull ICeStorageLockEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the {@link ICeStorageLockEventListener} which was registered previously\n     ",
    "links" : [ "android.os.storage.ICeStorageLockEventListener" ]
  } ],
  "methodNames" : [ "public abstract int getExternalStorageMountMode(int uid, String packageName)", "public abstract boolean hasExternalStorageAccess(int uid, String packageName)", "public abstract boolean isFuseMounted(int userId)", "public abstract boolean prepareStorageDirs(int userId, Set<String> packageList, String processName)", "public abstract void addResetListener(ResetListener listener)", "public abstract void onAppOpsChanged(int code, int uid, @Nullable String packageName, int mode, int previousMode)", "public abstract void resetUser(int userId)", "public abstract boolean hasLegacyExternalStorage(int uid)", "public abstract void prepareAppDataAfterInstall(@NonNull String packageName, int uid)", "public abstract boolean isExternalStorageService(int uid)", "public abstract void freeCache(@Nullable String volumeUuid, long bytes)", "public abstract List<String> getPrimaryVolumeIds()", "public abstract void markCeStoragePrepared(@UserIdInt int userId)", "public abstract boolean isCeStoragePrepared(@UserIdInt int userId)", "public abstract void registerCloudProviderChangeListener(@NonNull CloudProviderChangeListener listener)", "public abstract void prepareUserStorageForMove(String fromVolumeUuid, String toVolumeUuid, List<UserInfo> users)", "public abstract IInstalld.IFsveritySetupAuthToken createFsveritySetupAuthToken(ParcelFileDescriptor authFd, int uid) throws IOException", "public abstract int enableFsverity(IInstalld.IFsveritySetupAuthToken authToken, String filePath, String packageName) throws IOException", "public abstract void registerStorageLockEventListener(@NonNull ICeStorageLockEventListener listener)", "public abstract void unregisterStorageLockEventListener(@NonNull ICeStorageLockEventListener listener)" ],
  "variableNames" : [ ]
}