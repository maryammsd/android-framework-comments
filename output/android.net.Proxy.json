{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/Proxy.java",
  "packageName" : "android.net",
  "className" : "Proxy",
  "comment" : "\n * A convenience class for accessing the user and default proxy\n * settings.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDefaultProxySelector",
    "type" : "ProxySelector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROXY_CHANGE_ACTION",
    "type" : "String",
    "comment" : "\n     * Used to notify an app that's caching the proxy that either the default\n     * connection has changed or any connection's proxy has changed. The new\n     * proxy should be queried using {@link ConnectivityManager#getDefaultProxy()}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system\n     ",
    "links" : [ "android.net.ConnectivityManager#getDefaultProxy()" ]
  }, {
    "name" : "EXTRA_PROXY_INFO",
    "type" : "String",
    "comment" : "\n     * Intent extra included with {@link #PROXY_CHANGE_ACTION} intents.\n     * It describes the new proxy being used (as a {@link ProxyInfo} object).\n     * @deprecated Because {@code PROXY_CHANGE_ACTION} is sent whenever the proxy\n     * for any network on the system changes, applications should always use\n     * {@link ConnectivityManager#getDefaultProxy()} or\n     * {@link ConnectivityManager#getLinkProperties(Network)}.{@link LinkProperties#getHttpProxy()}\n     * to get the proxy for the Network(s) they are using.\n     ",
    "links" : [ "#PROXY_CHANGE_ACTION", "android.net.ConnectivityManager#getDefaultProxy()", "android.net.LinkProperties#getHttpProxy()", "android.net.ConnectivityManager#getLinkProperties(Network)", "android.net.ProxyInfo" ]
  }, {
    "name" : "PROXY_VALID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROXY_HOSTNAME_EMPTY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROXY_HOSTNAME_INVALID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROXY_PORT_EMPTY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROXY_PORT_INVALID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROXY_EXCLLIST_INVALID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "sConnectivityManager",
    "type" : "ConnectivityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAME_IP_REGEX",
    "type" : "String",
    "comment" : " Matches blank input, ips, and domain names",
    "links" : [ ]
  }, {
    "name" : "HOSTNAME_REGEXP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOSTNAME_PATTERN",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXCL_REGEX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXCLLIST_REGEXP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXCLLIST_PATTERN",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final java.net.Proxy getProxy(Context ctx, String url)",
    "returnType" : "java.net.Proxy",
    "comment" : "\n     * Return the proxy object to be used for the URL given as parameter.\n     * @param ctx A Context used to get the settings for the proxy host.\n     * @param url A URL to be accessed. Used to evaluate exclusion list.\n     * @return Proxy (java.net) object containing the host name. If the\n     *         user did not set a hostname it returns the default host.\n     *         A null value means that no host is to be used.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String getHost(Context ctx)",
    "returnType" : "String",
    "comment" : "\n     * Return the proxy host set by the user.\n     * @param ctx A Context used to get the settings for the proxy host.\n     * @return String containing the host name. If the user did not set a host\n     *         name it returns the default host. A null value means that no\n     *         host is to be used.\n     * @deprecated Use standard java vm proxy values to find the host, port\n     *         and exclusion list.  This call ignores the exclusion list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getPort(Context ctx)",
    "returnType" : "int",
    "comment" : "\n     * Return the proxy port set by the user.\n     * @param ctx A Context used to get the settings for the proxy port.\n     * @return The port number to use or -1 if no proxy is to be used.\n     * @deprecated Use standard java vm proxy values to find the host, port\n     *         and exclusion list.  This call ignores the exclusion list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String getDefaultHost()",
    "returnType" : "String",
    "comment" : "\n     * Return the default proxy host specified by the carrier.\n     * @return String containing the host name or null if there is no proxy for\n     * this carrier.\n     * @deprecated Use standard java vm proxy values to find the host, port and\n     *         exclusion list.  This call ignores the exclusion list and no\n     *         longer reports only mobile-data apn-based proxy values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getDefaultPort()",
    "returnType" : "int",
    "comment" : "\n     * Return the default proxy port specified by the carrier.\n     * @return The port number to be used with the proxy host or -1 if there is\n     * no proxy for this carrier.\n     * @deprecated Use standard java vm proxy values to find the host, port and\n     *         exclusion list.  This call ignores the exclusion list and no\n     *         longer reports only mobile-data apn-based proxy values.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final boolean isLocalHost(String host)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int validate(String hostname, String port, String exclList)",
    "returnType" : "int",
    "comment" : "\n     * Validate syntax of hostname, port and exclusion list entries\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void setHttpProxySystemProperty(ProxyInfo p)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final void setHttpProxySystemProperty(String host, String port, String exclList, Uri pacFileUrl)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sDefaultProxySelector", "PROXY_CHANGE_ACTION", "EXTRA_PROXY_INFO", "PROXY_VALID", "PROXY_HOSTNAME_EMPTY", "PROXY_HOSTNAME_INVALID", "PROXY_PORT_EMPTY", "PROXY_PORT_INVALID", "PROXY_EXCLLIST_INVALID", "sConnectivityManager", "NAME_IP_REGEX", "HOSTNAME_REGEXP", "HOSTNAME_PATTERN", "EXCL_REGEX", "EXCLLIST_REGEXP", "EXCLLIST_PATTERN" ],
  "methodNames" : [ "public static final java.net.Proxy getProxy(Context ctx, String url)", "public static final String getHost(Context ctx)", "public static final int getPort(Context ctx)", "public static final String getDefaultHost()", "public static final int getDefaultPort()", "private static final boolean isLocalHost(String host)", "public static int validate(String hostname, String port, String exclList)", "public static final void setHttpProxySystemProperty(ProxyInfo p)", "public static final void setHttpProxySystemProperty(String host, String port, String exclList, Uri pacFileUrl)" ]
}