{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/MoreAsserts.java",
  "packageName" : "android.test",
  "className" : "MoreAsserts",
  "comment" : "\n * Contains additional assertion methods not found in JUnit.\n * @deprecated Use\n * <a href=\"https://github.com/hamcrest\">Hamcrest matchers</a> instead.\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static void assertAssignableFrom(Class<?> expected, Object actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that the class  {@code expected} is assignable from the object\n     * {@code actual}. This verifies {@code expected} is a parent class or a\n     * interface that {@code actual} implements.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertAssignableFrom(Class<?> expected, Class<?> actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that class {@code expected} is assignable from the class\n     * {@code actual}. This verifies {@code expected} is a parent class or a\n     * interface that {@code actual} implements.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertNotEqual(String message, Object unexpected, Object actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that {@code actual} is not equal {@code unexpected}, according\n     * to both {@code ==} and {@link Object#equals}.\n     ",
    "links" : [ "#equals" ]
  }, {
    "name" : "public static void assertNotEqual(Object unexpected, Object actual)",
    "returnType" : "void",
    "comment" : "\n     * Variant of {@link #assertNotEqual(String,Object,Object)} using a\n     * generic message.\n     ",
    "links" : [ "#assertNotEqual(String" ]
  }, {
    "name" : "public static void assertEquals(String message, byte[] expected, byte[] actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that array {@code actual} is the same size and every element equals\n     * those in array {@code expected}. On failure, message indicates specific\n     * element mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(byte[] expected, byte[] actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that array {@code actual} is the same size and every element equals\n     * those in array {@code expected}. On failure, message indicates specific\n     * element mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(String message, int[] expected, int[] actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that array {@code actual} is the same size and every element equals\n     * those in array {@code expected}. On failure, message indicates first\n     * specific element mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(int[] expected, int[] actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that array {@code actual} is the same size and every element equals\n     * those in array {@code expected}. On failure, message indicates first\n     * specific element mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(String message, long[] expected, long[] actual)",
    "returnType" : "void",
    "comment" : "\n     * @hide Asserts that array {@code actual} is the same size and every element equals\n     * those in array {@code expected}. On failure, message indicates first\n     * specific element mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(long[] expected, long[] actual)",
    "returnType" : "void",
    "comment" : "\n     * @hide Asserts that array {@code actual} is the same size and every element equals\n     * those in array {@code expected}. On failure, message indicates first\n     * specific element mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(String message, double[] expected, double[] actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that array {@code actual} is the same size and every element equals\n     * those in array {@code expected}. On failure, message indicates first\n     * specific element mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(double[] expected, double[] actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that array {@code actual} is the same size and every element equals\n     * those in array {@code expected}. On failure, message indicates first\n     * specific element mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(String message, Object[] expected, Object[] actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that array {@code actual} is the same size and every element\n     * is the same as those in array {@code expected}. Note that this uses\n     * {@code equals()} instead of {@code ==} to compare the objects.\n     * {@code null} will be considered equal to {@code null} (unlike SQL).\n     * On failure, message indicates first specific element mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(Object[] expected, Object[] actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that array {@code actual} is the same size and every element\n     * is the same as those in array {@code expected}. Note that this uses\n     * {@code ==} instead of {@code equals()} to compare the objects.\n     * On failure, message indicates first specific element mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(String message, Set<? extends Object> expected, Set<? extends Object> actual)",
    "returnType" : "void",
    "comment" : " Asserts that two sets contain the same elements. ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEquals(Set<? extends Object> expected, Set<? extends Object> actual)",
    "returnType" : "void",
    "comment" : " Asserts that two sets contain the same elements. ",
    "links" : [ ]
  }, {
    "name" : "public static MatchResult assertMatchesRegex(String message, String expectedRegex, String actual)",
    "returnType" : "MatchResult",
    "comment" : "\n     * Asserts that {@code expectedRegex} exactly matches {@code actual} and\n     * fails with {@code message} if it does not.  The MatchResult is returned\n     * in case the test needs access to any captured groups.  Note that you can\n     * also use this for a literal string, by wrapping your expected string in\n     * {@link Pattern#quote}.\n     ",
    "links" : [ "java.util.regex.Pattern#quote" ]
  }, {
    "name" : "public static MatchResult assertMatchesRegex(String expectedRegex, String actual)",
    "returnType" : "MatchResult",
    "comment" : "\n     * Variant of {@link #assertMatchesRegex(String,String,String)} using a\n     * generic message.\n     ",
    "links" : [ "#assertMatchesRegex(String" ]
  }, {
    "name" : "public static MatchResult assertContainsRegex(String message, String expectedRegex, String actual)",
    "returnType" : "MatchResult",
    "comment" : "\n     * Asserts that {@code expectedRegex} matches any substring of {@code actual}\n     * and fails with {@code message} if it does not.  The Matcher is returned in\n     * case the test needs access to any captured groups.  Note that you can also\n     * use this for a literal string, by wrapping your expected string in\n     * {@link Pattern#quote}.\n     ",
    "links" : [ "java.util.regex.Pattern#quote" ]
  }, {
    "name" : "public static MatchResult assertContainsRegex(String expectedRegex, String actual)",
    "returnType" : "MatchResult",
    "comment" : "\n     * Variant of {@link #assertContainsRegex(String,String,String)} using a\n     * generic message.\n     ",
    "links" : [ "#assertContainsRegex(String" ]
  }, {
    "name" : "public static void assertNotMatchesRegex(String message, String expectedRegex, String actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that {@code expectedRegex} does not exactly match {@code actual},\n     * and fails with {@code message} if it does. Note that you can also use\n     * this for a literal string, by wrapping your expected string in\n     * {@link Pattern#quote}.\n     ",
    "links" : [ "java.util.regex.Pattern#quote" ]
  }, {
    "name" : "public static void assertNotMatchesRegex(String expectedRegex, String actual)",
    "returnType" : "void",
    "comment" : "\n     * Variant of {@link #assertNotMatchesRegex(String,String,String)} using a\n     * generic message.\n     ",
    "links" : [ "#assertNotMatchesRegex(String" ]
  }, {
    "name" : "public static void assertNotContainsRegex(String message, String expectedRegex, String actual)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that {@code expectedRegex} does not match any substring of\n     * {@code actual}, and fails with {@code message} if it does.  Note that you\n     * can also use this for a literal string, by wrapping your expected string\n     * in {@link Pattern#quote}.\n     ",
    "links" : [ "java.util.regex.Pattern#quote" ]
  }, {
    "name" : "public static void assertNotContainsRegex(String expectedRegex, String actual)",
    "returnType" : "void",
    "comment" : "\n     * Variant of {@link #assertNotContainsRegex(String,String,String)} using a\n     * generic message.\n     ",
    "links" : [ "#assertNotContainsRegex(String" ]
  }, {
    "name" : "public static void assertContentsInOrder(String message, Iterable<?> actual, Object... expected)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that {@code actual} contains precisely the elements\n     * {@code expected}, and in the same order.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertContentsInOrder(Iterable<?> actual, Object... expected)",
    "returnType" : "void",
    "comment" : "\n     * Variant of assertContentsInOrder(String, Iterable<?>, Object...)\n     * using a generic message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertContentsInAnyOrder(String message, Iterable<?> actual, Object... expected)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that {@code actual} contains precisely the elements\n     * {@code expected}, but in any order.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertContentsInAnyOrder(Iterable<?> actual, Object... expected)",
    "returnType" : "void",
    "comment" : "\n     * Variant of assertContentsInAnyOrder(String, Iterable<?>, Object...)\n     * using a generic message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEmpty(String message, Iterable<?> iterable)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that {@code iterable} is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEmpty(Iterable<?> iterable)",
    "returnType" : "void",
    "comment" : "\n     * Variant of {@link #assertEmpty(String, Iterable)} using a\n     * generic message.\n     ",
    "links" : [ "#assertEmpty(String" ]
  }, {
    "name" : "public static void assertEmpty(String message, Map<?, ?> map)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that {@code map} is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertEmpty(Map<?, ?> map)",
    "returnType" : "void",
    "comment" : "\n     * Variant of {@link #assertEmpty(String, Map)} using a generic\n     * message.\n     ",
    "links" : [ "#assertEmpty(String" ]
  }, {
    "name" : "public static void assertNotEmpty(String message, Iterable<?> iterable)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that {@code iterable} is not empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertNotEmpty(Iterable<?> iterable)",
    "returnType" : "void",
    "comment" : "\n     * Variant of assertNotEmpty(String, Iterable<?>)\n     * using a generic message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertNotEmpty(String message, Map<?, ?> map)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that {@code map} is not empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void assertNotEmpty(Map<?, ?> map)",
    "returnType" : "void",
    "comment" : "\n     * Variant of {@link #assertNotEmpty(String, Map)} using a generic\n     * message.\n     ",
    "links" : [ "#assertNotEmpty(String" ]
  }, {
    "name" : "public static void checkEqualsAndHashCodeMethods(String message, Object lhs, Object rhs, boolean expectedResult)",
    "returnType" : "void",
    "comment" : "\n     * Utility for testing equals() and hashCode() results at once.\n     * Tests that lhs.equals(rhs) matches expectedResult, as well as\n     * rhs.equals(lhs).  Also tests that hashCode() return values are\n     * equal if expectedResult is true.  (hashCode() is not tested if\n     * expectedResult is false, as unequal objects can have equal hashCodes.)\n     *\n     * @param lhs An Object for which equals() and hashCode() are to be tested.\n     * @param rhs As lhs.\n     * @param expectedResult True if the objects should compare equal,\n     *   false if not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void checkEqualsAndHashCodeMethods(Object lhs, Object rhs, boolean expectedResult)",
    "returnType" : "void",
    "comment" : "\n     * Variant of\n     * checkEqualsAndHashCodeMethods(String,Object,Object,boolean...)}\n     * using a generic message.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Matcher getMatcher(String expectedRegex, String actual)",
    "returnType" : "Matcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void failEqual(String message, Object unexpected)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void failWrongLength(String message, int expected, int actual)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void failWrongElement(String message, int index, Object expected, Object actual)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void failNotMatches(String message, String expectedRegex, String actual)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void failNotContains(String message, String expectedRegex, String actual)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void failMatch(String message, String expectedRegex, String actual)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void failContains(String message, String expectedRegex, String actual)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void failNotEmpty(String message, String actual)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void failEmpty(String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void failWithMessage(String userMessage, String ourMessage)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean equal(Object a, Object b)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static void assertAssignableFrom(Class<?> expected, Object actual)", "public static void assertAssignableFrom(Class<?> expected, Class<?> actual)", "public static void assertNotEqual(String message, Object unexpected, Object actual)", "public static void assertNotEqual(Object unexpected, Object actual)", "public static void assertEquals(String message, byte[] expected, byte[] actual)", "public static void assertEquals(byte[] expected, byte[] actual)", "public static void assertEquals(String message, int[] expected, int[] actual)", "public static void assertEquals(int[] expected, int[] actual)", "public static void assertEquals(String message, long[] expected, long[] actual)", "public static void assertEquals(long[] expected, long[] actual)", "public static void assertEquals(String message, double[] expected, double[] actual)", "public static void assertEquals(double[] expected, double[] actual)", "public static void assertEquals(String message, Object[] expected, Object[] actual)", "public static void assertEquals(Object[] expected, Object[] actual)", "public static void assertEquals(String message, Set<? extends Object> expected, Set<? extends Object> actual)", "public static void assertEquals(Set<? extends Object> expected, Set<? extends Object> actual)", "public static MatchResult assertMatchesRegex(String message, String expectedRegex, String actual)", "public static MatchResult assertMatchesRegex(String expectedRegex, String actual)", "public static MatchResult assertContainsRegex(String message, String expectedRegex, String actual)", "public static MatchResult assertContainsRegex(String expectedRegex, String actual)", "public static void assertNotMatchesRegex(String message, String expectedRegex, String actual)", "public static void assertNotMatchesRegex(String expectedRegex, String actual)", "public static void assertNotContainsRegex(String message, String expectedRegex, String actual)", "public static void assertNotContainsRegex(String expectedRegex, String actual)", "public static void assertContentsInOrder(String message, Iterable<?> actual, Object... expected)", "public static void assertContentsInOrder(Iterable<?> actual, Object... expected)", "public static void assertContentsInAnyOrder(String message, Iterable<?> actual, Object... expected)", "public static void assertContentsInAnyOrder(Iterable<?> actual, Object... expected)", "public static void assertEmpty(String message, Iterable<?> iterable)", "public static void assertEmpty(Iterable<?> iterable)", "public static void assertEmpty(String message, Map<?, ?> map)", "public static void assertEmpty(Map<?, ?> map)", "public static void assertNotEmpty(String message, Iterable<?> iterable)", "public static void assertNotEmpty(Iterable<?> iterable)", "public static void assertNotEmpty(String message, Map<?, ?> map)", "public static void assertNotEmpty(Map<?, ?> map)", "public static void checkEqualsAndHashCodeMethods(String message, Object lhs, Object rhs, boolean expectedResult)", "public static void checkEqualsAndHashCodeMethods(Object lhs, Object rhs, boolean expectedResult)", "private static Matcher getMatcher(String expectedRegex, String actual)", "private static void failEqual(String message, Object unexpected)", "private static void failWrongLength(String message, int expected, int actual)", "private static void failWrongElement(String message, int index, Object expected, Object actual)", "private static void failNotMatches(String message, String expectedRegex, String actual)", "private static void failNotContains(String message, String expectedRegex, String actual)", "private static void failMatch(String message, String expectedRegex, String actual)", "private static void failContains(String message, String expectedRegex, String actual)", "private static void failNotEmpty(String message, String actual)", "private static void failEmpty(String message)", "private static void failWithMessage(String userMessage, String ourMessage)", "private static boolean equal(Object a, Object b)" ]
}