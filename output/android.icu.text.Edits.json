{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/Edits.java",
  "packageName" : "android.icu.text",
  "className" : "Edits",
  "comment" : "\n * Records lengths of string edits but not replacement text. Supports replacements, insertions, deletions\n * in linear progression. Does not support moving/reordering of text.\n * <p>\n * There are two types of edits: <em>change edits</em> and <em>no-change edits</em>. Add edits to\n * instances of this class using {@link #addReplace(int, int)} (for change edits) and\n * {@link #addUnchanged(int)} (for no-change edits). Change edits are retained with full granularity,\n * whereas adjacent no-change edits are always merged together. In no-change edits, there is a one-to-one\n * mapping between code points in the source and destination strings.\n * <p>\n * After all edits have been added, instances of this class should be considered immutable, and an\n * {@link Edits.Iterator} can be used for queries.\n * <p>\n * There are four flavors of Edits.Iterator:\n * <ul>\n * <li>{@link #getFineIterator()} retains full granularity of change edits.\n * <li>{@link #getFineChangesIterator()} retains full granularity of change edits, and when calling\n * next() on the iterator, skips over no-change edits (unchanged regions).\n * <li>{@link #getCoarseIterator()} treats adjacent change edits as a single edit. (Adjacent no-change\n * edits are automatically merged during the construction phase.)\n * <li>{@link #getCoarseChangesIterator()} treats adjacent change edits as a single edit, and when\n * calling next() on the iterator, skips over no-change edits (unchanged regions).\n * </ul>\n * <p>\n * For example, consider the string \"abcßDeF\", which case-folds to \"abcssdef\". This string has the\n * following fine edits:\n * <ul>\n * <li>abc ⇨ abc (no-change)\n * <li>ß ⇨ ss (change)\n * <li>D ⇨ d (change)\n * <li>e ⇨ e (no-change)\n * <li>F ⇨ f (change)\n * </ul>\n * and the following coarse edits (note how adjacent change edits get merged together):\n * <ul>\n * <li>abc ⇨ abc (no-change)\n * <li>ßD ⇨ ssd (change)\n * <li>e ⇨ e (no-change)\n * <li>F ⇨ f (change)\n * </ul>\n * <p>\n * The \"fine changes\" and \"coarse changes\" iterators will step through only the change edits when their\n * {@link Edits.Iterator#next()} methods are called. They are identical to the non-change iterators when\n * their {@link Edits.Iterator#findSourceIndex(int)} or {@link Edits.Iterator#findDestinationIndex(int)}\n * methods are used to walk through the string.\n * <p>\n * For examples of how to use this class, see the test <code>TestCaseMapEditsIteratorDocs</code> in\n * UCharacterCaseTest.java.\n ",
  "links" : [ "Edits.Iterator", "Edits.Iterator#findDestinationIndex(int)", "#addReplace(int", "#getFineChangesIterator()", "#addUnchanged(int)", "Edits.Iterator#next()", "#getCoarseIterator()", "#getCoarseChangesIterator()", "Edits.Iterator#findSourceIndex(int)", "#getFineIterator()" ],
  "variables" : [ {
    "name" : "MAX_UNCHANGED_LENGTH",
    "type" : "int",
    "comment" : " 0000uuuuuuuuuuuu records u+1 unchanged text units.",
    "links" : [ ]
  }, {
    "name" : "MAX_UNCHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SHORT_CHANGE_OLD_LENGTH",
    "type" : "int",
    "comment" : " 0mmmnnnccccccccc with m=1..6 records ccc+1 replacements of m:n text units.",
    "links" : [ ]
  }, {
    "name" : "MAX_SHORT_CHANGE_NEW_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHORT_CHANGE_NUM_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SHORT_CHANGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LENGTH_IN_1TRAIL",
    "type" : "int",
    "comment" : " Trailing units have bit 15 set.",
    "links" : [ ]
  }, {
    "name" : "LENGTH_IN_2TRAIL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STACK_CAPACITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "array",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "delta",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "numChanges",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the data but may not release memory.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setLastUnit(int last)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int lastUnit()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addUnchanged(int unchangedLength)",
    "returnType" : "void",
    "comment" : "\n     * Adds a no-change edit: a record for an unchanged segment of text.\n     * Normally called from inside ICU string transformation functions, not user code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addReplace(int oldLength, int newLength)",
    "returnType" : "void",
    "comment" : "\n     * Adds a change edit: a record for a text replacement/insertion/deletion.\n     * Normally called from inside ICU string transformation functions, not user code.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void append(int r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean growArray()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int lengthDelta()",
    "returnType" : "int",
    "comment" : "\n     * How much longer is the new text compared with the old text?\n     * @return new length minus old length\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChanges()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if there are any change edits\n     ",
    "links" : [ ]
  }, {
    "name" : "public int numberOfChanges()",
    "returnType" : "int",
    "comment" : "\n     * @return the number of change edits\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator getCoarseChangesIterator()",
    "returnType" : "Iterator",
    "comment" : "\n     * Returns an Iterator for coarse-grained change edits\n     * (adjacent change edits are treated as one).\n     * Can be used to perform simple string updates.\n     * Skips no-change edits.\n     * @return an Iterator that merges adjacent changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator getCoarseIterator()",
    "returnType" : "Iterator",
    "comment" : "\n     * Returns an Iterator for coarse-grained change and no-change edits\n     * (adjacent change edits are treated as one).\n     * Can be used to perform simple string updates.\n     * Adjacent change edits are treated as one edit.\n     * @return an Iterator that merges adjacent changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator getFineChangesIterator()",
    "returnType" : "Iterator",
    "comment" : "\n     * Returns an Iterator for fine-grained change edits\n     * (full granularity of change edits is retained).\n     * Can be used for modifying styled text.\n     * Skips no-change edits.\n     * @return an Iterator that separates adjacent changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator getFineIterator()",
    "returnType" : "Iterator",
    "comment" : "\n     * Returns an Iterator for fine-grained change and no-change edits\n     * (full granularity of change edits is retained).\n     * Can be used for modifying styled text.\n     * @return an Iterator that separates adjacent changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Edits mergeAndAppend(Edits ab, Edits bc)",
    "returnType" : "Edits",
    "comment" : "\n     * Merges the two input Edits and appends the result to this object.\n     *\n     * <p>Consider two string transformations (for example, normalization and case mapping)\n     * where each records Edits in addition to writing an output string.<br>\n     * Edits ab reflect how substrings of input string a\n     * map to substrings of intermediate string b.<br>\n     * Edits bc reflect how substrings of intermediate string b\n     * map to substrings of output string c.<br>\n     * This function merges ab and bc such that the additional edits\n     * recorded in this object reflect how substrings of input string a\n     * map to substrings of output string c.\n     *\n     * <p>If unrelated Edits are passed in where the output string of the first\n     * has a different length than the input string of the second,\n     * then an IllegalArgumentException is thrown.\n     *\n     * @param ab reflects how substrings of input string a\n     *     map to substrings of intermediate string b.\n     * @param bc reflects how substrings of intermediate string b\n     *     map to substrings of output string c.\n     * @return this, with the merged edits appended\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void reset()", "private void setLastUnit(int last)", "private int lastUnit()", "public void addUnchanged(int unchangedLength)", "public void addReplace(int oldLength, int newLength)", "private void append(int r)", "private boolean growArray()", "public int lengthDelta()", "public boolean hasChanges()", "public int numberOfChanges()", "public Iterator getCoarseChangesIterator()", "public Iterator getCoarseIterator()", "public Iterator getFineChangesIterator()", "public Iterator getFineIterator()", "public Edits mergeAndAppend(Edits ab, Edits bc)" ],
  "variableNames" : [ "MAX_UNCHANGED_LENGTH", "MAX_UNCHANGED", "MAX_SHORT_CHANGE_OLD_LENGTH", "MAX_SHORT_CHANGE_NEW_LENGTH", "SHORT_CHANGE_NUM_MASK", "MAX_SHORT_CHANGE", "LENGTH_IN_1TRAIL", "LENGTH_IN_2TRAIL", "STACK_CAPACITY", "array", "length", "delta", "numChanges" ]
}