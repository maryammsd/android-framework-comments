{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/awt/font/NumericShaper.java",
  "packageName" : "java.awt.font",
  "className" : "NumericShaper",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "key",
    "type" : "int",
    "comment" : " index of context for contextual shaping - values range from 0 to 18 ",
    "links" : [ ]
  }, {
    "name" : "mask",
    "type" : "int",
    "comment" : " flag indicating whether to shape contextually (high bit) and which\n     *  digit ranges to shape (bits 0-18)\n     ",
    "links" : [ ]
  }, {
    "name" : "shapingRange",
    "type" : "Range",
    "comment" : "\n     * The context {@code Range} for contextual shaping or the {@code\n     * Range} for non-contextual shaping. {@code null} for the bit\n     * mask-based API.\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "rangeSet",
    "type" : "Set<Range>",
    "comment" : "\n     * {@code Set<Range>} indicating which Unicode ranges to\n     * shape. {@code null} for the bit mask-based API.\n     ",
    "links" : [ ]
  }, {
    "name" : "rangeArray",
    "type" : "Range[]",
    "comment" : "\n     * rangeSet.toArray() value. Sorted by Range.base when the number\n     * of elements is greater then BSEARCH_THRESHOLD.\n     ",
    "links" : [ ]
  }, {
    "name" : "BSEARCH_THRESHOLD",
    "type" : "int",
    "comment" : "\n     * If more than BSEARCH_THRESHOLD ranges are specified, binary search is used.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EUROPEAN",
    "type" : "int",
    "comment" : " Identifies the Latin-1 (European) and extended range, and\n     *  Latin-1 (European) decimal base.\n     ",
    "links" : [ ]
  }, {
    "name" : "ARABIC",
    "type" : "int",
    "comment" : " Identifies the ARABIC range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "EASTERN_ARABIC",
    "type" : "int",
    "comment" : " Identifies the ARABIC range and ARABIC_EXTENDED decimal base. ",
    "links" : [ ]
  }, {
    "name" : "DEVANAGARI",
    "type" : "int",
    "comment" : " Identifies the DEVANAGARI range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "BENGALI",
    "type" : "int",
    "comment" : " Identifies the BENGALI range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "GURMUKHI",
    "type" : "int",
    "comment" : " Identifies the GURMUKHI range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "GUJARATI",
    "type" : "int",
    "comment" : " Identifies the GUJARATI range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "ORIYA",
    "type" : "int",
    "comment" : " Identifies the ORIYA range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "TAMIL",
    "type" : "int",
    "comment" : " TAMIL DIGIT ZERO was added in Unicode 4.1",
    "links" : [ ]
  }, {
    "name" : "TELUGU",
    "type" : "int",
    "comment" : " Identifies the TELUGU range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "KANNADA",
    "type" : "int",
    "comment" : " Identifies the KANNADA range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "MALAYALAM",
    "type" : "int",
    "comment" : " Identifies the MALAYALAM range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "THAI",
    "type" : "int",
    "comment" : " Identifies the THAI range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "LAO",
    "type" : "int",
    "comment" : " Identifies the LAO range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "TIBETAN",
    "type" : "int",
    "comment" : " Identifies the TIBETAN range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "MYANMAR",
    "type" : "int",
    "comment" : " Identifies the MYANMAR range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "ETHIOPIC",
    "type" : "int",
    "comment" : " Identifies the ETHIOPIC range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "KHMER",
    "type" : "int",
    "comment" : " Identifies the KHMER range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "MONGOLIAN",
    "type" : "int",
    "comment" : " Identifies the MONGOLIAN range and decimal base. ",
    "links" : [ ]
  }, {
    "name" : "ALL_RANGES",
    "type" : "int",
    "comment" : " Identifies all ranges, for full contextual shaping.\n     *\n     * <p>This constant specifies all of the bit mask-based\n     * ranges. Use {@code EmunSet.allOf(NumericShaper.Range.class)} to\n     * specify all of the enum-based ranges.\n     ",
    "links" : [ ]
  }, {
    "name" : "EUROPEAN_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ARABIC_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EASTERN_ARABIC_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVANAGARI_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BENGALI_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GURMUKHI_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GUJARATI_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORIYA_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAMIL_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TELUGU_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KANNADA_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MALAYALAM_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THAI_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LAO_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIBETAN_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MYANMAR_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ETHIOPIC_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KHMER_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONGOLIAN_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_KEYS",
    "type" : "int",
    "comment" : " fixed",
    "links" : [ ]
  }, {
    "name" : "CONTEXTUAL_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bases",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "contexts",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ctCache",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ctCacheLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currentRange",
    "type" : "Range",
    "comment" : " cache for the NumericShaper.Range version",
    "links" : [ ]
  }, {
    "name" : "strongTable",
    "type" : "int[]",
    "comment" : "\n     * A range table of strong directional characters (types L, R, AL).\n     * Even (left) indexes are starts of ranges of non-strong-directional (or undefined)\n     * characters, odd (right) indexes are starts of ranges of strong directional\n     * characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "stCache",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int getContextKey(char c)",
    "returnType" : "int",
    "comment" : " warning, synchronize access to this as it modifies state",
    "links" : [ ]
  }, {
    "name" : "private Range rangeForCodePoint(final int codepoint)",
    "returnType" : "Range",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isStrongDirectional(char c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getKeyFromMask(int mask)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static NumericShaper getShaper(int singleRange)",
    "returnType" : "NumericShaper",
    "comment" : "\n     * Returns a shaper for the provided unicode range.  All\n     * Latin-1 (EUROPEAN) digits are converted\n     * to the corresponding decimal unicode digits.\n     * @param singleRange the specified Unicode range\n     * @return a non-contextual numeric shaper\n     * @throws IllegalArgumentException if the range is not a single range\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NumericShaper getShaper(Range singleRange)",
    "returnType" : "NumericShaper",
    "comment" : "\n     * Returns a shaper for the provided Unicode\n     * range. All Latin-1 (EUROPEAN) digits are converted to the\n     * corresponding decimal digits of the specified Unicode range.\n     *\n     * @param singleRange the Unicode range given by a {@link\n     *                    NumericShaper.Range} constant.\n     * @return a non-contextual {@code NumericShaper}.\n     * @throws NullPointerException if {@code singleRange} is {@code null}\n     * @since 1.7\n     ",
    "links" : [ "NumericShaper.Range" ]
  }, {
    "name" : "public static NumericShaper getContextualShaper(int ranges)",
    "returnType" : "NumericShaper",
    "comment" : "\n     * Returns a contextual shaper for the provided unicode range(s).\n     * Latin-1 (EUROPEAN) digits are converted to the decimal digits\n     * corresponding to the range of the preceding text, if the\n     * range is one of the provided ranges.  Multiple ranges are\n     * represented by or-ing the values together, such as,\n     * <code>NumericShaper.ARABIC | NumericShaper.THAI</code>.  The\n     * shaper assumes EUROPEAN as the starting context, that is, if\n     * EUROPEAN digits are encountered before any strong directional\n     * text in the string, the context is presumed to be EUROPEAN, and\n     * so the digits will not shape.\n     * @param ranges the specified Unicode ranges\n     * @return a shaper for the specified ranges\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NumericShaper getContextualShaper(Set<Range> ranges)",
    "returnType" : "NumericShaper",
    "comment" : "\n     * Returns a contextual shaper for the provided Unicode\n     * range(s). The Latin-1 (EUROPEAN) digits are converted to the\n     * decimal digits corresponding to the range of the preceding\n     * text, if the range is one of the provided ranges.\n     *\n     * <p>The shaper assumes EUROPEAN as the starting context, that\n     * is, if EUROPEAN digits are encountered before any strong\n     * directional text in the string, the context is presumed to be\n     * EUROPEAN, and so the digits will not shape.\n     *\n     * @param ranges the specified Unicode ranges\n     * @return a contextual shaper for the specified ranges\n     * @throws NullPointerException if {@code ranges} is {@code null}.\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NumericShaper getContextualShaper(int ranges, int defaultContext)",
    "returnType" : "NumericShaper",
    "comment" : "\n     * Returns a contextual shaper for the provided unicode range(s).\n     * Latin-1 (EUROPEAN) digits will be converted to the decimal digits\n     * corresponding to the range of the preceding text, if the\n     * range is one of the provided ranges.  Multiple ranges are\n     * represented by or-ing the values together, for example,\n     * <code>NumericShaper.ARABIC | NumericShaper.THAI</code>.  The\n     * shaper uses defaultContext as the starting context.\n     * @param ranges the specified Unicode ranges\n     * @param defaultContext the starting context, such as\n     * <code>NumericShaper.EUROPEAN</code>\n     * @return a shaper for the specified Unicode ranges.\n     * @throws IllegalArgumentException if the specified\n     * <code>defaultContext</code> is not a single valid range.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NumericShaper getContextualShaper(Set<Range> ranges, Range defaultContext)",
    "returnType" : "NumericShaper",
    "comment" : "\n     * Returns a contextual shaper for the provided Unicode range(s).\n     * The Latin-1 (EUROPEAN) digits will be converted to the decimal\n     * digits corresponding to the range of the preceding text, if the\n     * range is one of the provided ranges. The shaper uses {@code\n     * defaultContext} as the starting context.\n     *\n     * @param ranges the specified Unicode ranges\n     * @param defaultContext the starting context, such as\n     *                       {@code NumericShaper.Range.EUROPEAN}\n     * @return a contextual shaper for the specified Unicode ranges.\n     * @throws NullPointerException\n     *         if {@code ranges} or {@code defaultContext} is {@code null}\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public void shape(char[] text, int start, int count)",
    "returnType" : "void",
    "comment" : "\n     * Converts the digits in the text that occur between start and\n     * start + count.\n     * @param text an array of characters to convert\n     * @param start the index into <code>text</code> to start\n     *        converting\n     * @param count the number of characters in <code>text</code>\n     *        to convert\n     * @throws IndexOutOfBoundsException if start or start + count is\n     *        out of bounds\n     * @throws NullPointerException if text is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void shape(char[] text, int start, int count, int context)",
    "returnType" : "void",
    "comment" : "\n     * Converts the digits in the text that occur between start and\n     * start + count, using the provided context.\n     * Context is ignored if the shaper is not a contextual shaper.\n     * @param text an array of characters\n     * @param start the index into <code>text</code> to start\n     *        converting\n     * @param count the number of characters in <code>text</code>\n     *        to convert\n     * @param context the context to which to convert the\n     *        characters, such as <code>NumericShaper.EUROPEAN</code>\n     * @throws IndexOutOfBoundsException if start or start + count is\n     *        out of bounds\n     * @throws NullPointerException if text is null\n     * @throws IllegalArgumentException if this is a contextual shaper\n     * and the specified <code>context</code> is not a single valid\n     * range.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void shape(char[] text, int start, int count, Range context)",
    "returnType" : "void",
    "comment" : "\n     * Converts the digits in the text that occur between {@code\n     * start} and {@code start + count}, using the provided {@code\n     * context}. {@code Context} is ignored if the shaper is not a\n     * contextual shaper.\n     *\n     * @param text  a {@code char} array\n     * @param start the index into {@code text} to start converting\n     * @param count the number of {@code char}s in {@code text}\n     *              to convert\n     * @param context the context to which to convert the characters,\n     *                such as {@code NumericShaper.Range.EUROPEAN}\n     * @throws IndexOutOfBoundsException\n     *         if {@code start} or {@code start + count} is out of bounds\n     * @throws NullPointerException\n     *         if {@code text} or {@code context} is null\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkParams(char[] text, int start, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isContextual()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns a <code>boolean</code> indicating whether or not\n     * this shaper shapes contextually.\n     * @return <code>true</code> if this shaper is contextual;\n     *         <code>false</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRanges()",
    "returnType" : "int",
    "comment" : "\n     * Returns an <code>int</code> that ORs together the values for\n     * all the ranges that will be shaped.\n     * <p>\n     * For example, to check if a shaper shapes to Arabic, you would use the\n     * following:\n     * <blockquote>\n     *   {@code if ((shaper.getRanges() & shaper.ARABIC) != 0) &#123; ... }\n     * </blockquote>\n     *\n     * <p>Note that this method supports only the bit mask-based\n     * ranges. Call {@link #getRangeSet()} for the enum-based ranges.\n     *\n     * @return the values for all the ranges to be shaped.\n     ",
    "links" : [ "#getRangeSet()" ]
  }, {
    "name" : "public Set<Range> getRangeSet()",
    "returnType" : "Set<Range>",
    "comment" : "\n     * Returns a {@code Set} representing all the Unicode ranges in\n     * this {@code NumericShaper} that will be shaped.\n     *\n     * @return all the Unicode ranges to be shaped.\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "private void shapeNonContextually(char[] text, int start, int count)",
    "returnType" : "void",
    "comment" : "\n     * Perform non-contextual shaping.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void shapeContextually(char[] text, int start, int count, int ctxKey)",
    "returnType" : "void",
    "comment" : "\n     * Perform contextual shaping.\n     * Synchronized to protect caches used in getContextKey.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void shapeContextually(char[] text, int start, int count, Range ctxKey)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for this shaper.\n     * @return this shaper's hash code.\n     * @see java.lang.Object#hashCode\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the specified object is an instance of\n     * <code>NumericShaper</code> and shapes identically to this one,\n     * regardless of the range representations, the bit mask or the\n     * enum. For example, the following code produces {@code \"true\"}.\n     * <blockquote><pre>\n     * NumericShaper ns1 = NumericShaper.getShaper(NumericShaper.ARABIC);\n     * NumericShaper ns2 = NumericShaper.getShaper(NumericShaper.Range.ARABIC);\n     * System.out.println(ns1.equals(ns2));\n     * </pre></blockquote>\n     *\n     * @param o the specified object to compare to this\n     *          <code>NumericShaper</code>\n     * @return <code>true</code> if <code>o</code> is an instance\n     *         of <code>NumericShaper</code> and shapes in the same way;\n     *         <code>false</code> otherwise.\n     * @see java.lang.Object#equals(java.lang.Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a <code>String</code> that describes this shaper. This method\n     * is used for debugging purposes only.\n     * @return a <code>String</code> describing this shaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getHighBit(int value)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the high bit in value (assuming le, actually\n     * power of 2 >= value). value must be positive.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int search(int value, int[] array, int start, int length)",
    "returnType" : "int",
    "comment" : "\n     * fast binary search over subrange of array.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream stream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Converts the {@code NumericShaper.Range} enum-based parameters,\n     * if any, to the bit mask-based counterparts and writes this\n     * object to the {@code stream}. Any enum constants that have no\n     * bit mask-based counterparts are ignored in the conversion.\n     *\n     * @param stream the output stream to write to\n     * @throws IOException if an I/O error occurs while writing to {@code stream}\n     * @since 1.7\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int getContextKey(char c)", "private Range rangeForCodePoint(final int codepoint)", "private boolean isStrongDirectional(char c)", "private static int getKeyFromMask(int mask)", "public static NumericShaper getShaper(int singleRange)", "public static NumericShaper getShaper(Range singleRange)", "public static NumericShaper getContextualShaper(int ranges)", "public static NumericShaper getContextualShaper(Set<Range> ranges)", "public static NumericShaper getContextualShaper(int ranges, int defaultContext)", "public static NumericShaper getContextualShaper(Set<Range> ranges, Range defaultContext)", "public void shape(char[] text, int start, int count)", "public void shape(char[] text, int start, int count, int context)", "public void shape(char[] text, int start, int count, Range context)", "private void checkParams(char[] text, int start, int count)", "public boolean isContextual()", "public int getRanges()", "public Set<Range> getRangeSet()", "private void shapeNonContextually(char[] text, int start, int count)", "private synchronized void shapeContextually(char[] text, int start, int count, int ctxKey)", "private void shapeContextually(char[] text, int start, int count, Range ctxKey)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "private static int getHighBit(int value)", "private static int search(int value, int[] array, int start, int length)", "private void writeObject(ObjectOutputStream stream) throws IOException" ],
  "variableNames" : [ "key", "mask", "shapingRange", "rangeSet", "rangeArray", "BSEARCH_THRESHOLD", "serialVersionUID", "EUROPEAN", "ARABIC", "EASTERN_ARABIC", "DEVANAGARI", "BENGALI", "GURMUKHI", "GUJARATI", "ORIYA", "TAMIL", "TELUGU", "KANNADA", "MALAYALAM", "THAI", "LAO", "TIBETAN", "MYANMAR", "ETHIOPIC", "KHMER", "MONGOLIAN", "ALL_RANGES", "EUROPEAN_KEY", "ARABIC_KEY", "EASTERN_ARABIC_KEY", "DEVANAGARI_KEY", "BENGALI_KEY", "GURMUKHI_KEY", "GUJARATI_KEY", "ORIYA_KEY", "TAMIL_KEY", "TELUGU_KEY", "KANNADA_KEY", "MALAYALAM_KEY", "THAI_KEY", "LAO_KEY", "TIBETAN_KEY", "MYANMAR_KEY", "ETHIOPIC_KEY", "KHMER_KEY", "MONGOLIAN_KEY", "NUM_KEYS", "CONTEXTUAL_MASK", "bases", "contexts", "ctCache", "ctCacheLimit", "currentRange", "strongTable", "stCache" ]
}