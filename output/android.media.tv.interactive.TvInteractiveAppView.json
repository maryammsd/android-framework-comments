{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/interactive/TvInteractiveAppView.java",
  "packageName" : "android.media.tv.interactive",
  "className" : "TvInteractiveAppView",
  "comment" : "\n * Displays contents of interactive TV applications.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_TVVIEW_SUCCESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_TVVIEW_FAIL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSET_TVVIEW_SUCCESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSET_TVVIEW_FAIL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BI_INTERACTIVE_APP_KEY_CERTIFICATE",
    "type" : "String",
    "comment" : "\n     * Used to share client {@link java.security.cert.Certificate} with\n     * {@link TvInteractiveAppService}.\n     * @see #createBiInteractiveApp(Uri, Bundle)\n     * @see java.security.cert.Certificate\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "java.security.cert.Certificate" ]
  }, {
    "name" : "BI_INTERACTIVE_APP_KEY_ALIAS",
    "type" : "String",
    "comment" : "\n     * Used to share the {@link KeyStore} alias with {@link TvInteractiveAppService}.\n     * @see #createBiInteractiveApp(Uri, Bundle)\n     * @see KeyStore#aliases()\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "java.security.KeyStore" ]
  }, {
    "name" : "BI_INTERACTIVE_APP_KEY_PRIVATE_KEY",
    "type" : "String",
    "comment" : "\n     * Used to share the {@link java.security.PrivateKey} with {@link TvInteractiveAppService}.\n     * <p>The private key is optional. It is used to encrypt data when necessary.\n     *\n     * @see #createBiInteractiveApp(Uri, Bundle)\n     * @see java.security.PrivateKey\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "java.security.PrivateKey" ]
  }, {
    "name" : "BI_INTERACTIVE_APP_KEY_HTTP_ADDITIONAL_HEADERS",
    "type" : "String",
    "comment" : "\n     * Additional HTTP headers to be used by {@link TvInteractiveAppService} to load the\n     * broadcast-independent interactive application.\n     * @see #createBiInteractiveApp(Uri, Bundle)\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService" ]
  }, {
    "name" : "BI_INTERACTIVE_APP_KEY_HTTP_USER_AGENT",
    "type" : "String",
    "comment" : "\n     * HTTP user agent to be used by {@link TvInteractiveAppService} for broadcast-independent\n     * interactive application.\n     * @see #createBiInteractiveApp(Uri, Bundle)\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService" ]
  }, {
    "name" : "ERROR_KEY_METHOD_NAME",
    "type" : "String",
    "comment" : "\n     * The name of the method where the error happened, if applicable. For example, if there is an\n     * error during signing, the request name is \"onRequestSigning\".\n     * @see #notifyError(String, Bundle)\n     ",
    "links" : [ ]
  }, {
    "name" : "mTvInteractiveAppManager",
    "type" : "TvInteractiveAppManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "Session",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallback",
    "type" : "MySessionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "TvInteractiveAppCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceView",
    "type" : "SurfaceView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurface",
    "type" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseRequestedSurfaceLayout",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewLeft",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewRight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewTop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewBottom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaViewCreated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaViewFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttrs",
    "type" : "AttributeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefStyleAttr",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParser",
    "type" : "XmlResourceParser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnUnhandledInputEventListener",
    "type" : "OnUnhandledInputEventListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceHolderCallback",
    "type" : "SurfaceHolder.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinishedInputEventCallback",
    "type" : "FinishedInputEventCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCallback(@NonNull @CallbackExecutor Executor executor, @NonNull TvInteractiveAppCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the callback to be invoked when an event is dispatched to this TvInteractiveAppView.\n     *\n     * @param callback the callback to receive events. MUST NOT be {@code null}.\n     *\n     * @see #clearCallback()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearCallback()",
    "returnType" : "void",
    "comment" : "\n     * Clears the callback.\n     *\n     * @see #setCallback(Executor, TvInteractiveAppCallback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onVisibilityChanged(@NonNull View changedView, int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetSurfaceView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets this TvInteractiveAppView to release its resources.\n     *\n     * <p>It can be reused by call {@link #prepareInteractiveApp(String, int)}.\n     ",
    "links" : [ "#prepareInteractiveApp(String" ]
  }, {
    "name" : "private void createSessionMediaView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeSessionMediaView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void relayoutSessionMediaView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Rect getViewFrameOnScreen()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setSessionSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchSurfaceChanged(int format, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchUnhandledInputEvent(@NonNull InputEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatches an unhandled input event to the next receiver.\n     *\n     * It gives the host application a chance to dispatch the unhandled input events.\n     *\n     * @param event The input event.\n     * @return {@code true} if the event was handled by the view, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onUnhandledInputEvent(@NonNull InputEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when an unhandled input event also has not been handled by the user provided\n     * callback. This is the last chance to handle the unhandled input event in the\n     * TvInteractiveAppView.\n     *\n     * @param event The input event.\n     * @return If you handled the event, return {@code true}. If you want to allow the event to be\n     *         handled by the next receiver, return {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnUnhandledInputEventListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnUnhandledInputEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to be invoked when an input event is not handled\n     * by the TV Interactive App.\n     *\n     * @param listener The callback to be invoked when the unhandled input event is received.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OnUnhandledInputEventListener getOnUnhandledInputEventListener()",
    "returnType" : "OnUnhandledInputEventListener",
    "comment" : "\n     * Gets the {@link OnUnhandledInputEventListener}.\n     * <p>Returns {@code null} if the listener is not set or is cleared.\n     *\n     * @see #setOnUnhandledInputEventListener(Executor, OnUnhandledInputEventListener)\n     * @see #clearOnUnhandledInputEventListener()\n     ",
    "links" : [ "OnUnhandledInputEventListener" ]
  }, {
    "name" : "public void clearOnUnhandledInputEventListener()",
    "returnType" : "void",
    "comment" : "\n     * Clears the {@link OnUnhandledInputEventListener}.\n     ",
    "links" : [ "OnUnhandledInputEventListener" ]
  }, {
    "name" : "public boolean dispatchKeyEvent(@NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepareInteractiveApp(@NonNull String iAppServiceId, @TvInteractiveAppServiceInfo.InteractiveAppType int type)",
    "returnType" : "void",
    "comment" : "\n     * Prepares the interactive application runtime environment of corresponding\n     * {@link TvInteractiveAppService}.\n     *\n     * @param iAppServiceId the interactive app service ID, which can be found in\n     *                      {@link TvInteractiveAppServiceInfo#getId()}.\n     *\n     * @see android.media.tv.interactive.TvInteractiveAppManager#getTvInteractiveAppServiceList()\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "android.media.tv.interactive.TvInteractiveAppServiceInfo#getId()" ]
  }, {
    "name" : "public void startInteractiveApp()",
    "returnType" : "void",
    "comment" : "\n     * Starts the interactive application.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopInteractiveApp()",
    "returnType" : "void",
    "comment" : "\n     * Stops the interactive application.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetInteractiveApp()",
    "returnType" : "void",
    "comment" : "\n     * Resets the interactive application.\n     *\n     * <p>This releases the resources of the corresponding {@link TvInteractiveAppService.Session}.\n     ",
    "links" : [ "TvInteractiveAppService.Session" ]
  }, {
    "name" : "public void sendCurrentVideoBounds(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Sends current video bounds to related TV interactive app.\n     *\n     * @param bounds the rectangle area for rendering the current video.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendCurrentChannelUri(@Nullable Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n     * Sends current channel URI to related TV interactive app.\n     *\n     * @param channelUri The current channel URI; {@code null} if there is no currently tuned\n     *                   channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendCurrentChannelLcn(int lcn)",
    "returnType" : "void",
    "comment" : "\n     * Sends current channel logical channel number (LCN) to related TV interactive app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendStreamVolume(float volume)",
    "returnType" : "void",
    "comment" : "\n     * Sends stream volume to related TV interactive app.\n     *\n     * @param volume a volume value between {@code 0.0f} and {@code 1.0f}, inclusive.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendTrackInfoList(@Nullable List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "\n     * Sends track info list to related TV interactive app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendSelectedTrackInfo(@Nullable List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "\n     * Sends the currently selected track info to the TV Interactive App in response to a\n     * {@link TvInteractiveAppCallback#onRequestSelectedTrackInfo(String)} request.\n     *\n     * @param tracks list of {@link TvTrackInfo} of the currently selected track(s)\n     ",
    "links" : [ "#onRequestSelectedTrackInfo(String)", "android.media.tv.TvTrackInfo" ]
  }, {
    "name" : "public void sendCurrentTvInputId(@Nullable String inputId)",
    "returnType" : "void",
    "comment" : "\n     * Sends current TV input ID to related TV interactive app.\n     *\n     * @param inputId The current TV input ID whose channel is tuned. {@code null} if no channel is\n     *                tuned.\n     * @see android.media.tv.TvInputInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendTimeShiftMode(@android.media.tv.TvInputManager.TimeShiftMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sends the current time shift mode to the TV interactive app bound to this view\n     *\n     * @param mode The current time shift mode. The value is one of the following:\n     * {@link TvInputManager#TIME_SHIFT_MODE_OFF}, {@link TvInputManager#TIME_SHIFT_MODE_LOCAL},\n     * {@link TvInputManager#TIME_SHIFT_MODE_NETWORK},\n     * {@link TvInputManager#TIME_SHIFT_MODE_AUTO}.\n     ",
    "links" : [ "android.media.tv.TvInputManager#TIME_SHIFT_MODE_AUTO", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_OFF", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_NETWORK", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_LOCAL" ]
  }, {
    "name" : "public void sendAvailableSpeeds(@NonNull float[] speeds)",
    "returnType" : "void",
    "comment" : "\n     * Sends the available supported playback speeds to the TV interactive app bound to this view.\n     *\n     * @param speeds An ordered array of playback speeds, expressed as values relative to the\n     *               normal playback speed (1.0), at which the current content can be played as\n     *               a time-shifted broadcast. This is an empty array if the supported playback\n     *               speeds are unknown or the video/broadcast is not in time shift mode. If\n     *               currently in time shift mode, this array will normally include at least\n     *               the values 1.0 (normal speed) and 0.0 (paused).\n     * @see PlaybackParams#getSpeed()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendTvRecordingInfo(@Nullable TvRecordingInfo recordingInfo)",
    "returnType" : "void",
    "comment" : "\n     * Sends the requested {@link android.media.tv.TvRecordingInfo}.\n     *\n     * @see TvInteractiveAppService.Session#requestTvRecordingInfo(String)\n     * @param recordingInfo The recording info requested. {@code null} if no recording found.\n     ",
    "links" : [ "android.media.tv.TvRecordingInfo" ]
  }, {
    "name" : "public void sendTvRecordingInfoList(@NonNull List<TvRecordingInfo> recordingInfoList)",
    "returnType" : "void",
    "comment" : "\n     * Sends the requested {@link android.media.tv.TvRecordingInfo}.\n     *\n     * @see TvInteractiveAppService.Session#requestTvRecordingInfoList(int)\n     * @param recordingInfoList The list of recording info requested. Returns an empty list if no\n     *                          matching recording info found.\n     ",
    "links" : [ "android.media.tv.TvRecordingInfo" ]
  }, {
    "name" : "public void notifyRecordingStarted(@NonNull String recordingId, @Nullable String requestId)",
    "returnType" : "void",
    "comment" : "\n     * Alerts the related TV interactive app service that a recording has been started.\n     *\n     * @param recordingId The ID of the recording started. This ID is created and maintained by the\n     *                    TV app and is used to identify the recording in the future.\n     *\n     * @param requestId The ID of the request when\n     *                  {@link TvInteractiveAppService.Session#requestStartRecording(String, Uri)}\n     *                  is called. {@code null} if the recording is not triggered by a request.\n     *                  This ID should be created by the {@link TvInteractiveAppService} and\n     *                  can be any string.\n     * @see TvInteractiveAppView#notifyRecordingStopped(String)\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "TvInteractiveAppService.Session#requestStartRecording(String" ]
  }, {
    "name" : "public void notifyRecordingStopped(@NonNull String recordingId)",
    "returnType" : "void",
    "comment" : "\n     * Alerts the TV interactive app that a recording has been stopped.\n     *\n     * @param recordingId The ID of the recording stopped. This ID is created and maintained\n     *                    by the TV app when a recording is started.\n     * @see TvInteractiveAppView#notifyRecordingStarted(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyVideoFreezeUpdated(boolean isFrozen)",
    "returnType" : "void",
    "comment" : "\n     * Alerts the TV Interactive app that the video freeze state has been updated. If {@code true},\n     * the video is frozen on the last frame while audio playback continues.\n     *\n     * @param isFrozen Whether the video is frozen.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendSigningResult(@NonNull String signingId, @NonNull byte[] result)",
    "returnType" : "void",
    "comment" : "\n     * Sends signing result to related TV interactive app.\n     *\n     * <p>This is used when the corresponding server of the broadcast-independent interactive\n     * app requires signing during handshaking, and the interactive app service doesn't have\n     * the built-in private key. The private key is provided by the content providers and\n     * pre-built in the related app, such as TV app.\n     *\n     * @param signingId the ID to identify the request. It's the same as the corresponding ID in\n     *        {@link TvInteractiveAppService.Session#requestSigning(String, String, String, byte[])}\n     * @param result the signed result.\n     ",
    "links" : [ "TvInteractiveAppService.Session#requestSigning(String" ]
  }, {
    "name" : "public void sendCertificate(@NonNull String host, int port, @NonNull SslCertificate cert)",
    "returnType" : "void",
    "comment" : "\n     * Sends the requested SSL certificate to the TV Interactive App\n     * @param host the host name of the SSL authentication server.\n     * @param port the port of the SSL authentication server. E.g., 443\n     * @param cert the SSL certificate requested\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyError(@NonNull String errMsg, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the corresponding {@link TvInteractiveAppService} when there is an error.\n     *\n     * @param errMsg the message of the error.\n     * @param params additional parameters of the error. For example, the signingId of {@link\n     *     TvInteractiveAppCallback#onRequestSigning(String, String, String, String, byte[])} can be\n     *     included to identify the related signing request, and the method name \"onRequestSigning\"\n     *     can also be added to the params.\n     *\n     * @see #ERROR_KEY_METHOD_NAME\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "#onRequestSigning(String" ]
  }, {
    "name" : "public void notifyTimeShiftPlaybackParams(@NonNull PlaybackParams params)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the corresponding {@link TvInteractiveAppService} when a time shift\n     * {@link android.media.PlaybackParams} is set or changed.\n     *\n     * @see TvView#timeShiftSetPlaybackParams(PlaybackParams)\n     * @param params The new {@link PlaybackParams} that was set or changed.\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "android.media.PlaybackParams" ]
  }, {
    "name" : "public void notifyTimeShiftStatusChanged(@NonNull String inputId, @TvInputManager.TimeShiftStatus int status)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the corresponding {@link TvInteractiveAppService} when time shift\n     * status is changed.\n     *\n     * @see TvView.TvInputCallback#onTimeShiftStatusChanged(String, int)\n     * @see android.media.tv.TvInputService.Session#notifyTimeShiftStatusChanged(int)\n     * @param inputId The ID of the input for which the time shift status has changed.\n     * @param status The status of which the input has changed to. Should be one of the\n     *               following.\n     *               <ul>\n     *                  <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNKNOWN}\n     *                  <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED}\n     *                  <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE}\n     *                  <li>{@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE}\n     *               </ul>\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNKNOWN", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_AVAILABLE", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE" ]
  }, {
    "name" : "public void notifyTimeShiftStartPositionChanged(@NonNull String inputId, long timeMs)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the corresponding {@link TvInteractiveAppService} when time shift\n     * start position is changed.\n     *\n     * @see TvView.TimeShiftPositionCallback#onTimeShiftStartPositionChanged(String, long)\n     * @param inputId The ID of the input for which the time shift start position has changed.\n     * @param timeMs The start position for time shifting, in milliseconds since the epoch.\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService" ]
  }, {
    "name" : "public void notifyTimeShiftCurrentPositionChanged(@NonNull String inputId, long timeMs)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the corresponding {@link TvInteractiveAppService} when time shift\n     * current position is changed.\n     *\n     * @see TvView.TimeShiftPositionCallback#onTimeShiftCurrentPositionChanged(String, long)\n     * @param inputId The ID of the input for which the time shift current position has changed.\n     * @param timeMs The current position for time shifting, in milliseconds since the epoch.\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService" ]
  }, {
    "name" : "public void notifyRecordingConnectionFailed(@NonNull String recordingId, @NonNull String inputId)",
    "returnType" : "void",
    "comment" : "\n     * This is called to notify the corresponding interactive app service when an error occurred\n     * while establishing a connection to the recording session for the corresponding TV input.\n     *\n     * @param recordingId The ID of the related recording which is sent via\n     *                    {@link #notifyRecordingStarted(String, String)}\n     * @param inputId The ID of the TV input bound to the current TvRecordingClient.\n     * @see android.media.tv.TvRecordingClient.RecordingCallback#onConnectionFailed(String)\n     * @hide\n     ",
    "links" : [ "#notifyRecordingStarted(String" ]
  }, {
    "name" : "public void notifyRecordingDisconnected(@NonNull String recordingId, @NonNull String inputId)",
    "returnType" : "void",
    "comment" : "\n     * This is called to notify the corresponding interactive app service when the connection to\n     * the current recording session is lost.\n     *\n     * @param recordingId The ID of the related recording which is sent via\n     *                    {@link #notifyRecordingStarted(String, String)}\n     * @param inputId The ID of the TV input bound to the current TvRecordingClient.\n     * @see android.media.tv.TvRecordingClient.RecordingCallback#onDisconnected(String)\n     * @hide\n     ",
    "links" : [ "#notifyRecordingStarted(String" ]
  }, {
    "name" : "public void notifyRecordingTuned(@NonNull String recordingId, @NonNull Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n     * This is called to notify the corresponding interactive app service when the recording session\n     * has been tuned to the given channel and is ready to start recording.\n     *\n     * @param recordingId The ID of the related recording which is sent via\n     *                    {@link #notifyRecordingStarted(String, String)}\n     * @param channelUri The URI of the tuned channel.\n     * @see android.media.tv.TvRecordingClient.RecordingCallback#onTuned(Uri)\n     * @hide\n     ",
    "links" : [ "#notifyRecordingStarted(String" ]
  }, {
    "name" : "public void notifyRecordingError(@NonNull String recordingId, @TvInputManager.RecordingError int err)",
    "returnType" : "void",
    "comment" : "\n     * This is called to notify the corresponding interactive app service when an issue has\n     * occurred. It may be called at any time after the current recording session is created until\n     * it is released.\n     *\n     * @param recordingId The ID of the related recording which is sent via\n     *                    {@link #notifyRecordingStarted(String, String)}\n     * @param err The error code. Should be one of the following.\n     * <ul>\n     * <li>{@link TvInputManager#RECORDING_ERROR_UNKNOWN}\n     * <li>{@link TvInputManager#RECORDING_ERROR_INSUFFICIENT_SPACE}\n     * <li>{@link TvInputManager#RECORDING_ERROR_RESOURCE_BUSY}\n     * </ul>\n     * @see android.media.tv.TvRecordingClient.RecordingCallback#onError(int)\n     * @hide\n     ",
    "links" : [ "android.media.tv.TvInputManager#RECORDING_ERROR_RESOURCE_BUSY", "android.media.tv.TvInputManager#RECORDING_ERROR_UNKNOWN", "android.media.tv.TvInputManager#RECORDING_ERROR_INSUFFICIENT_SPACE", "#notifyRecordingStarted(String" ]
  }, {
    "name" : "public void notifyRecordingScheduled(@NonNull String recordingId, @Nullable String requestId)",
    "returnType" : "void",
    "comment" : "\n     * This is called to notify the corresponding interactive app service when the recording has\n     * been scheduled.\n     *\n     * @param recordingId The ID assigned to this recording by the app. It can be used to send\n     *                    recording related requests such as\n     *                    {@link TvInteractiveAppService.Session#requestStopRecording(String)}.\n     * @param requestId The ID of the request when\n     *                  {@link TvInteractiveAppService.Session#requestScheduleRecording} is called.\n     *                  {@code null} if the recording is not triggered by a request.\n     *                  This ID should be created by the {@link TvInteractiveAppService} and\n     *                  can be any string.\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "TvInteractiveAppService.Session#requestScheduleRecording", "TvInteractiveAppService.Session#requestStopRecording(String)" ]
  }, {
    "name" : "public void notifyTvMessage(@NonNull @TvInputManager.TvMessageType int type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n     * This is called to notify the corresponding interactive app service when a new TV message\n     * is received.\n     *\n     * @param type The type of message received, such as\n     * {@link TvInputManager#TV_MESSAGE_TYPE_WATERMARK}\n     * @param data The raw data of the message. The bundle keys are:\n     *             {@link TvInputManager#TV_MESSAGE_KEY_STREAM_ID},\n     *             {@link TvInputManager#TV_MESSAGE_KEY_GROUP_ID},\n     *             {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE},\n     *             {@link TvInputManager#TV_MESSAGE_KEY_RAW_DATA}.\n     *             See {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE} for more information on\n     *             how to parse this data.\n     ",
    "links" : [ "android.media.tv.TvInputManager#TV_MESSAGE_KEY_GROUP_ID", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_STREAM_ID", "android.media.tv.TvInputManager#TV_MESSAGE_TYPE_WATERMARK", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_SUBTYPE", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_RAW_DATA" ]
  }, {
    "name" : "private void resetInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void createBiInteractiveApp(@NonNull Uri biIAppUri, @Nullable Bundle params)",
    "returnType" : "void",
    "comment" : "\n     * Creates broadcast-independent(BI) interactive application.\n     *\n     * <p>{@link TvInteractiveAppCallback#onBiInteractiveAppCreated(String, Uri, String)} will be\n     * called for the result.\n     *\n     * @param biIAppUri URI associated this BI interactive app.\n     * @param params optional parameters for broadcast-independent interactive application, such as\n     *               {@link #BI_INTERACTIVE_APP_KEY_CERTIFICATE}.\n     *\n     * @see TvInteractiveAppCallback#onBiInteractiveAppCreated(String, Uri, String)\n     * @see #BI_INTERACTIVE_APP_KEY_CERTIFICATE\n     * @see #BI_INTERACTIVE_APP_KEY_HTTP_ADDITIONAL_HEADERS\n     * @see #BI_INTERACTIVE_APP_KEY_HTTP_USER_AGENT\n     ",
    "links" : [ "#onBiInteractiveAppCreated(String", "#BI_INTERACTIVE_APP_KEY_CERTIFICATE" ]
  }, {
    "name" : "public void destroyBiInteractiveApp(@NonNull String biIAppId)",
    "returnType" : "void",
    "comment" : "\n     * Destroys broadcast-independent(BI) interactive application.\n     *\n     * @param biIAppId the BI interactive app ID from {@link #createBiInteractiveApp(Uri, Bundle)}\n     *\n     * @see #createBiInteractiveApp(Uri, Bundle)\n     ",
    "links" : [ "#createBiInteractiveApp(Uri" ]
  }, {
    "name" : "public Session getInteractiveAppSession()",
    "returnType" : "Session",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int setTvView(@Nullable TvView tvView)",
    "returnType" : "int",
    "comment" : "\n     * Sets the TvInteractiveAppView to receive events from TIS. This method links the session of\n     * TvInteractiveAppManager to TvInputManager session, so the TIAS can get the TIS events.\n     *\n     * @param tvView the TvView to be linked to this TvInteractiveAppView via linking of Sessions.\n     * @return The result of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int unsetTvView()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTeletextAppEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * To toggle Digital Teletext Application if there is one in AIT app list.\n     *\n     * <p>A Teletext Application is a broadcast-related application to display text and basic\n     * graphics.\n     *\n     * @param enable {@code true} to enable Teletext app; {@code false} to disable it.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setCallback(@NonNull @CallbackExecutor Executor executor, @NonNull TvInteractiveAppCallback callback)", "public void clearCallback()", "public void onAttachedToWindow()", "public void onDetachedFromWindow()", "public void onLayout(boolean changed, int left, int top, int right, int bottom)", "public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public void onVisibilityChanged(@NonNull View changedView, int visibility)", "private void resetSurfaceView()", "public void reset()", "private void createSessionMediaView()", "private void removeSessionMediaView()", "private void relayoutSessionMediaView()", "private Rect getViewFrameOnScreen()", "private void setSessionSurface(Surface surface)", "private void dispatchSurfaceChanged(int format, int width, int height)", "public boolean dispatchUnhandledInputEvent(@NonNull InputEvent event)", "public boolean onUnhandledInputEvent(@NonNull InputEvent event)", "public void setOnUnhandledInputEventListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnUnhandledInputEventListener listener)", "public OnUnhandledInputEventListener getOnUnhandledInputEventListener()", "public void clearOnUnhandledInputEventListener()", "public boolean dispatchKeyEvent(@NonNull KeyEvent event)", "public void prepareInteractiveApp(@NonNull String iAppServiceId, @TvInteractiveAppServiceInfo.InteractiveAppType int type)", "public void startInteractiveApp()", "public void stopInteractiveApp()", "public void resetInteractiveApp()", "public void sendCurrentVideoBounds(@NonNull Rect bounds)", "public void sendCurrentChannelUri(@Nullable Uri channelUri)", "public void sendCurrentChannelLcn(int lcn)", "public void sendStreamVolume(float volume)", "public void sendTrackInfoList(@Nullable List<TvTrackInfo> tracks)", "public void sendSelectedTrackInfo(@Nullable List<TvTrackInfo> tracks)", "public void sendCurrentTvInputId(@Nullable String inputId)", "public void sendTimeShiftMode(@android.media.tv.TvInputManager.TimeShiftMode int mode)", "public void sendAvailableSpeeds(@NonNull float[] speeds)", "public void sendTvRecordingInfo(@Nullable TvRecordingInfo recordingInfo)", "public void sendTvRecordingInfoList(@NonNull List<TvRecordingInfo> recordingInfoList)", "public void notifyRecordingStarted(@NonNull String recordingId, @Nullable String requestId)", "public void notifyRecordingStopped(@NonNull String recordingId)", "public void notifyVideoFreezeUpdated(boolean isFrozen)", "public void sendSigningResult(@NonNull String signingId, @NonNull byte[] result)", "public void sendCertificate(@NonNull String host, int port, @NonNull SslCertificate cert)", "public void notifyError(@NonNull String errMsg, @NonNull Bundle params)", "public void notifyTimeShiftPlaybackParams(@NonNull PlaybackParams params)", "public void notifyTimeShiftStatusChanged(@NonNull String inputId, @TvInputManager.TimeShiftStatus int status)", "public void notifyTimeShiftStartPositionChanged(@NonNull String inputId, long timeMs)", "public void notifyTimeShiftCurrentPositionChanged(@NonNull String inputId, long timeMs)", "public void notifyRecordingConnectionFailed(@NonNull String recordingId, @NonNull String inputId)", "public void notifyRecordingDisconnected(@NonNull String recordingId, @NonNull String inputId)", "public void notifyRecordingTuned(@NonNull String recordingId, @NonNull Uri channelUri)", "public void notifyRecordingError(@NonNull String recordingId, @TvInputManager.RecordingError int err)", "public void notifyRecordingScheduled(@NonNull String recordingId, @Nullable String requestId)", "public void notifyTvMessage(@NonNull @TvInputManager.TvMessageType int type, @NonNull Bundle data)", "private void resetInternal()", "public void createBiInteractiveApp(@NonNull Uri biIAppUri, @Nullable Bundle params)", "public void destroyBiInteractiveApp(@NonNull String biIAppId)", "public Session getInteractiveAppSession()", "public int setTvView(@Nullable TvView tvView)", "private int unsetTvView()", "public void setTeletextAppEnabled(boolean enable)" ],
  "variableNames" : [ "TAG", "DEBUG", "SET_TVVIEW_SUCCESS", "SET_TVVIEW_FAIL", "UNSET_TVVIEW_SUCCESS", "UNSET_TVVIEW_FAIL", "BI_INTERACTIVE_APP_KEY_CERTIFICATE", "BI_INTERACTIVE_APP_KEY_ALIAS", "BI_INTERACTIVE_APP_KEY_PRIVATE_KEY", "BI_INTERACTIVE_APP_KEY_HTTP_ADDITIONAL_HEADERS", "BI_INTERACTIVE_APP_KEY_HTTP_USER_AGENT", "ERROR_KEY_METHOD_NAME", "mTvInteractiveAppManager", "mHandler", "mCallbackLock", "mSession", "mSessionCallback", "mCallback", "mCallbackExecutor", "mSurfaceView", "mSurface", "mSurfaceChanged", "mSurfaceFormat", "mSurfaceWidth", "mSurfaceHeight", "mUseRequestedSurfaceLayout", "mSurfaceViewLeft", "mSurfaceViewRight", "mSurfaceViewTop", "mSurfaceViewBottom", "mMediaViewCreated", "mMediaViewFrame", "mAttrs", "mDefStyleAttr", "mParser", "mOnUnhandledInputEventListener", "mSurfaceHolderCallback", "mFinishedInputEventCallback" ]
}