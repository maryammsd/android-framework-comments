{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/system/SystemCleaner.java",
  "packageName" : "android.system",
  "className" : "SystemCleaner",
  "comment" : "\n * Java.lang.ref.Cleaner encourages each library to create a Cleaner, with an associated\n * thread, to process Cleaner Runnables for that library's registered cleaning actions.\n * This approach isolates cleaning actions from different libraries from each other; a slow cleaning\n * action in one library will only minimally affect cleaning actions in another.\n *\n * However, this comes at the cost of introducing one Cleaner thread per library that uses\n * Cleaners. This could introduce dozens of additional threads per process, which is often\n * not an acceptable cost, especially on memory-limited devices.\n *\n * SystemCleaner instead provides access to a shared Cleaner, shared across the entire process.\n * It is greatly preferred when all cleaning actions registered by a client are known to\n * complete quickly, without explicit I/O, interprocess communication, or network access.\n * Registering a non-terminating or excessively slow cleaning action with the shared cleaner\n * may cause the process to perform very badly, hang, or be killed.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Cleaner cleaner()",
    "returnType" : "Cleaner",
    "comment" : "\n     * Return a single Cleaner that's shared across the entire process. Thread-safe.\n     * Unlike normal Cleaners, uncaught exceptions during cleaning will throw an uncaught\n     * exception from the daemon running the cleaning action. This will normally cause the\n     * process to crash, and thus cause the problem to be reported.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Cleaner cleaner()" ],
  "variableNames" : [ ]
}