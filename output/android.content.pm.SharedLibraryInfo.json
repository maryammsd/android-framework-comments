{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/SharedLibraryInfo.java",
  "packageName" : "android.content.pm",
  "className" : "SharedLibraryInfo",
  "comment" : "\n * This class provides information for a shared library. There are\n * four types of shared libraries: builtin - non-updatable part of\n * the OS; dynamic - updatable backwards-compatible dynamically linked;\n * static - non backwards-compatible emulating static linking;\n * SDK - updatable backwards-incompatible dynamically loaded.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TYPE_BUILTIN",
    "type" : "int",
    "comment" : "\n     * Shared library type: this library is a part of the OS\n     * and cannot be updated or uninstalled.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DYNAMIC",
    "type" : "int",
    "comment" : "\n     * Shared library type: this library is backwards-compatible, can\n     * be updated, and updates can be uninstalled. Clients link against\n     * the latest version of the library.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_STATIC",
    "type" : "int",
    "comment" : "\n     * Shared library type: this library is <strong>not</strong> backwards\n     * -compatible, can be updated and updates can be uninstalled. Clients\n     * link against a specific version of the library.\n     *\n     * Static shared libraries simulate static linking while allowing for\n     * multiple clients to reuse the same instance of the library.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SDK_PACKAGE",
    "type" : "int",
    "comment" : "\n     * SDK package shared library type: this library is <strong>not</strong>\n     * compatible between versions, can be updated and updates can be\n     * uninstalled. Clients depend on a specific version of the library.\n     *\n     * SDK packages are not loaded automatically by the OS and rely\n     * e.g. on 3P libraries to make them available for the clients.\n     ",
    "links" : [ ]
  }, {
    "name" : "VERSION_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Constant for referring to an undefined version.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodePaths",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVersion",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsNative",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeclaringPackage",
    "type" : "VersionedPackage",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDependentPackages",
    "type" : "List<VersionedPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOptionalDependentPackages",
    "type" : "List<VersionedPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDependencies",
    "type" : "List<SharedLibraryInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SharedLibraryInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the type of this library.\n     *\n     * @return The library type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNative()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this library is a native shared library or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the library name an app defines in its manifest\n     * to depend on the library.\n     *\n     * @return The name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPath()",
    "returnType" : "String",
    "comment" : "\n     * If the shared library is a jar file, returns the path of that jar. Null otherwise.\n     * Only libraries with TYPE_BUILTIN are in jar files.\n     *\n     * @return The path.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * If the shared library is an apk, returns the package name. Null otherwise.\n     * Only libraries with TYPE_DYNAMIC or TYPE_STATIC are in apks.\n     *\n     * @return The package name.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAllCodePaths()",
    "returnType" : "List<String>",
    "comment" : "\n     * Get all code paths for that library.\n     *\n     * @return All code paths.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addDependency(@Nullable SharedLibraryInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Add a library dependency to that library. Note that this\n     * should be called under the package manager lock.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearDependencies()",
    "returnType" : "void",
    "comment" : "\n     * Clear all dependencies.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<SharedLibraryInfo> getDependencies()",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : "\n     * Gets the libraries this library directly depends on. Note that\n     * the package manager prevents recursive dependencies when installing\n     * a package.\n     *\n     * @return The dependencies.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVersion()",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Use {@link #getLongVersion()} instead.\n     ",
    "links" : [ "#getLongVersion()" ]
  }, {
    "name" : "public long getLongVersion()",
    "returnType" : "long",
    "comment" : "\n     * Gets the version of the library. For {@link #TYPE_STATIC static} libraries\n     * this is the declared version and for {@link #TYPE_DYNAMIC dynamic} and\n     * {@link #TYPE_BUILTIN builtin} it is {@link #VERSION_UNDEFINED} as these\n     * are not versioned.\n     *\n     * @return The version.\n     ",
    "links" : [ "#TYPE_STATIC", "#TYPE_DYNAMIC", "#TYPE_BUILTIN", "#VERSION_UNDEFINED" ]
  }, {
    "name" : "public boolean isBuiltin()",
    "returnType" : "boolean",
    "comment" : "\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDynamic()",
    "returnType" : "boolean",
    "comment" : "\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStatic()",
    "returnType" : "boolean",
    "comment" : "\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSdk()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public VersionedPackage getDeclaringPackage()",
    "returnType" : "VersionedPackage",
    "comment" : "\n     * Gets the package that declares the library.\n     *\n     * @return The package declaring the library.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<VersionedPackage> getDependentPackages()",
    "returnType" : "List<VersionedPackage>",
    "comment" : "\n     * Gets the packages that depend on the library.\n     *\n     * NOTE: the list also contains the result of {@link #getOptionalDependentPackages}.\n     *\n     * @return The dependent packages.\n     ",
    "links" : [ "#getOptionalDependentPackages" ]
  }, {
    "name" : "public List<VersionedPackage> getOptionalDependentPackages()",
    "returnType" : "List<VersionedPackage>",
    "comment" : "\n     * Gets the packages that optionally depend on the library.\n     *\n     * @return The dependent packages.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String typeToString(int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getType()", "public boolean isNative()", "public String getName()", "public String getPath()", "public String getPackageName()", "public List<String> getAllCodePaths()", "public void addDependency(@Nullable SharedLibraryInfo info)", "public void clearDependencies()", "public List<SharedLibraryInfo> getDependencies()", "public int getVersion()", "public long getLongVersion()", "public boolean isBuiltin()", "public boolean isDynamic()", "public boolean isStatic()", "public boolean isSdk()", "public VersionedPackage getDeclaringPackage()", "public List<VersionedPackage> getDependentPackages()", "public List<VersionedPackage> getOptionalDependentPackages()", "public int describeContents()", "public String toString()", "public void writeToParcel(Parcel parcel, int flags)", "private static String typeToString(int type)" ],
  "variableNames" : [ "TYPE_BUILTIN", "TYPE_DYNAMIC", "TYPE_STATIC", "TYPE_SDK_PACKAGE", "VERSION_UNDEFINED", "mPath", "mPackageName", "mName", "mCodePaths", "mVersion", "mType", "mIsNative", "mDeclaringPackage", "mDependentPackages", "mOptionalDependentPackages", "mDependencies", "CREATOR" ]
}