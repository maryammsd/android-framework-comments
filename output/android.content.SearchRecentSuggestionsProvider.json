{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/SearchRecentSuggestionsProvider.java",
  "packageName" : "android.content",
  "className" : "SearchRecentSuggestionsProvider",
  "comment" : "\n * This superclass can be used to create a simple search suggestions provider for your application.\n * It creates suggestions (as the user types) based on recent queries and/or recent views.\n * \n * <p>In order to use this class, you must do the following.\n * \n * <ul>\n * <li>Implement and test query search, as described in {@link android.app.SearchManager}.  (This\n * provider will send any suggested queries via the standard \n * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} Intent, which you'll already\n * support once you have implemented and tested basic searchability.)</li>\n * <li>Create a Content Provider within your application by extending \n * {@link android.content.SearchRecentSuggestionsProvider}.  The class you create will be\n * very simple - typically, it will have only a constructor.  But the constructor has a very \n * important responsibility:  When it calls {@link #setupSuggestions(String, int)}, it\n * <i>configures</i> the provider to match the requirements of your searchable activity.</li>\n * <li>Create a manifest entry describing your provider.  Typically this would be as simple\n * as adding the following lines:\n * <pre class=\"prettyprint\">\n *     &lt;!-- Content provider for search suggestions --&gt;\n *     &lt;provider android:name=\"YourSuggestionProviderClass\"\n *               android:authorities=\"your.suggestion.authority\" /&gt;</pre>\n * </li>\n * <li>Please note that you <i>do not</i> instantiate this content provider directly from within\n * your code.  This is done automatically by the system Content Resolver, when the search dialog\n * looks for suggestions.</li>\n * <li>In order for the Content Resolver to do this, you must update your searchable activity's \n * XML configuration file with information about your content provider.  The following additions \n * are usually sufficient:\n * <pre class=\"prettyprint\">\n *     android:searchSuggestAuthority=\"your.suggestion.authority\"\n *     android:searchSuggestSelection=\" ? \"</pre>\n * </li>\n * <li>In your searchable activities, capture any user-generated queries and record them\n * for future searches by calling {@link android.provider.SearchRecentSuggestions#saveRecentQuery\n * SearchRecentSuggestions.saveRecentQuery()}.</li>\n * </ul>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about using search suggestions in your application, read the\n * <a href=\"{@docRoot}guide/topics/search/index.html\">Search</a> developer guide.</p>\n * </div>\n * \n * @see android.provider.SearchRecentSuggestions\n ",
  "links" : [ "android.content.SearchRecentSuggestionsProvider", "android.provider.SearchRecentSuggestions#saveRecentQuerySearchRecentSuggestions.saveRecentQuery()", "android.content.Intent#ACTION_SEARCH", "android.app.SearchManager", "#setupSuggestions(String" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : " debugging support",
    "links" : [ ]
  }, {
    "name" : "mAuthority",
    "type" : "String",
    "comment" : " client-provided configuration values",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTwoLineDisplay",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpenHelper",
    "type" : "SQLiteOpenHelper",
    "comment" : " general database configuration and tables",
    "links" : [ ]
  }, {
    "name" : "sDatabaseName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSuggestions",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORDER_BY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NULL_COLUMN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATABASE_VERSION",
    "type" : "int",
    "comment" : " 1->2   added UNIQUE constraint to display1 column",
    "links" : [ ]
  }, {
    "name" : "DATABASE_MODE_QUERIES",
    "type" : "int",
    "comment" : "\n     * This mode bit configures the database to record recent queries.  <i>required</i>\n     * \n     * @see #setupSuggestions(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "DATABASE_MODE_2LINES",
    "type" : "int",
    "comment" : "\n     * This mode bit configures the database to include a 2nd annotation line with each entry.\n     * <i>optional</i>\n     * \n     * @see #setupSuggestions(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "URI_MATCH_SUGGEST",
    "type" : "int",
    "comment" : " Uri and query support",
    "links" : [ ]
  }, {
    "name" : "mSuggestionsUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUriMatcher",
    "type" : "UriMatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuggestSuggestionClause",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuggestionProjection",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void setupSuggestions(String authority, int mode)",
    "returnType" : "void",
    "comment" : "\n     * In order to use this class, you must extend it, and call this setup function from your\n     * constructor.  In your application or activities, you must provide the same values when \n     * you create the {@link android.provider.SearchRecentSuggestions} helper.\n     * \n     * @param authority This must match the authority that you've declared in your manifest.\n     * @param mode You can use mode flags here to determine certain functional aspects of your\n     * database.  Note, this value should not change from run to run, because when it does change,\n     * your suggestions database may be wiped.\n     * \n     * @see #DATABASE_MODE_QUERIES\n     * @see #DATABASE_MODE_2LINES\n     ",
    "links" : [ "android.provider.SearchRecentSuggestions" ]
  }, {
    "name" : "public int delete(Uri uri, String selection, String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "\n     * This method is provided for use by the ContentResolver.  Do not override, or directly\n     * call from your own code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType(Uri uri)",
    "returnType" : "String",
    "comment" : "\n     * This method is provided for use by the ContentResolver.  Do not override, or directly\n     * call from your own code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri insert(Uri uri, ContentValues values)",
    "returnType" : "Uri",
    "comment" : "\n     * This method is provided for use by the ContentResolver.  Do not override, or directly\n     * call from your own code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onCreate()",
    "returnType" : "boolean",
    "comment" : "\n     * This method is provided for use by the ContentResolver.  Do not override, or directly\n     * call from your own code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)",
    "returnType" : "Cursor",
    "comment" : " TODO: Confirm no injection attacks here, or rewrite.",
    "links" : [ ]
  }, {
    "name" : "public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "\n     * This method is provided for use by the ContentResolver.  Do not override, or directly\n     * call from your own code.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void setupSuggestions(String authority, int mode)", "public int delete(Uri uri, String selection, String[] selectionArgs)", "public String getType(Uri uri)", "public Uri insert(Uri uri, ContentValues values)", "public boolean onCreate()", "public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)", "public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)" ],
  "variableNames" : [ "TAG", "mAuthority", "mMode", "mTwoLineDisplay", "mOpenHelper", "sDatabaseName", "sSuggestions", "ORDER_BY", "NULL_COLUMN", "DATABASE_VERSION", "DATABASE_MODE_QUERIES", "DATABASE_MODE_2LINES", "URI_MATCH_SUGGEST", "mSuggestionsUri", "mUriMatcher", "mSuggestSuggestionClause", "mSuggestionProjection" ]
}