{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/accessibility/AccessibilityNodeInfo.java",
  "packageName" : "android.view.accessibility",
  "className" : "CollectionItemInfo",
  "comment" : "\n     * Class with information if a node is a collection item. Use\n     * {@link CollectionItemInfo#obtain(int, int, int, int, boolean)}\n     * to get an instance. Recycling is handled by the {@link AccessibilityNodeInfo} to which this\n     * object is attached.\n     * <p>\n     * A collection item is contained in a collection, it starts at\n     * a given row and column in the collection, and spans one or\n     * more rows and columns. For example, a header of two related\n     * table columns starts at the first row and the first column,\n     * spans one row and two columns.\n     * </p>\n     ",
  "variables" : [ {
    "name" : "MAX_POOL_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPool",
    "type" : "SynchronizedPool<CollectionItemInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeading",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumnIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRowIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumnSpan",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRowSpan",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CollectionItemInfo obtain(CollectionItemInfo other)",
    "returnType" : "CollectionItemInfo",
    "comment" : "\n         * Obtains a pooled instance that is a clone of another one.\n         *\n         * <p>In most situations object pooling is not beneficial. Create a new instance using the\n         * constructor {@link\n         * AccessibilityNodeInfo.CollectionItemInfo#CollectionItemInfo}\n         * instead.\n         *\n         * @param other The instance to clone.\n         * @hide\n         ",
    "links" : [ "AccessibilityNodeInfo.CollectionItemInfo#CollectionItemInfo" ]
  }, {
    "name" : "public static CollectionItemInfo obtain(int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading)",
    "returnType" : "CollectionItemInfo",
    "comment" : "\n         * Obtains a pooled instance.\n         *\n         * <p>In most situations object pooling is not beneficial. Create a new instance using the\n         * constructor {@link\n         * AccessibilityNodeInfo.CollectionItemInfo#CollectionItemInfo(int,\n         * int, int, int, boolean)} instead.\n         *\n         * @param rowIndex The row index at which the item is located.\n         * @param rowSpan The number of rows the item spans.\n         * @param columnIndex The column index at which the item is located.\n         * @param columnSpan The number of columns the item spans.\n         * @param heading Whether the item is a heading. (Prefer\n         *                {@link AccessibilityNodeInfo#setHeading(boolean)}).\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#setHeading(boolean)", "AccessibilityNodeInfo.CollectionItemInfo#CollectionItemInfo(int" ]
  }, {
    "name" : "public static CollectionItemInfo obtain(int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading, boolean selected)",
    "returnType" : "CollectionItemInfo",
    "comment" : "\n         * Obtains a pooled instance.\n         *\n         * <p>In most situations object pooling is not beneficial. Creates a new instance using the\n         * constructor {@link\n         * AccessibilityNodeInfo.CollectionItemInfo#CollectionItemInfo(int,\n         * int, int, int, boolean, boolean)} instead.\n         *\n         * @param rowIndex The row index at which the item is located.\n         * @param rowSpan The number of rows the item spans.\n         * @param columnIndex The column index at which the item is located.\n         * @param columnSpan The number of columns the item spans.\n         * @param heading Whether the item is a heading. (Prefer\n         *                {@link AccessibilityNodeInfo#setHeading(boolean)})\n         * @param selected Whether the item is selected.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#setHeading(boolean)", "AccessibilityNodeInfo.CollectionItemInfo#CollectionItemInfo(int" ]
  }, {
    "name" : "public int getColumnIndex()",
    "returnType" : "int",
    "comment" : "\n         * Gets the column index at which the item is located.\n         *\n         * @return The column index.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getRowIndex()",
    "returnType" : "int",
    "comment" : "\n         * Gets the row index at which the item is located.\n         *\n         * @return The row index.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getColumnSpan()",
    "returnType" : "int",
    "comment" : "\n         * Gets the number of columns the item spans.\n         *\n         * @return The column span.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getRowSpan()",
    "returnType" : "int",
    "comment" : "\n         * Gets the number of rows the item spans.\n         *\n         * @return The row span.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHeading()",
    "returnType" : "boolean",
    "comment" : "\n         * Gets if the collection item is a heading. For example, section\n         * heading, table header, etc.\n         *\n         * @return If the item is a heading.\n         * @deprecated Use {@link AccessibilityNodeInfo#isHeading()}\n         ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#isHeading()" ]
  }, {
    "name" : "public boolean isSelected()",
    "returnType" : "boolean",
    "comment" : "\n         * Gets if the collection item is selected.\n         *\n         * @return If the item is selected.\n         ",
    "links" : [ ]
  }, {
    "name" : " void recycle()",
    "returnType" : "void",
    "comment" : "\n         * Recycles this instance.\n         *\n         * <p>In most situations object pooling is not beneficial, and recycling is not necessary.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MAX_POOL_SIZE", "sPool", "mHeading", "mColumnIndex", "mRowIndex", "mColumnSpan", "mRowSpan", "mSelected" ],
  "methodNames" : [ "public static CollectionItemInfo obtain(CollectionItemInfo other)", "public static CollectionItemInfo obtain(int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading)", "public static CollectionItemInfo obtain(int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading, boolean selected)", "public int getColumnIndex()", "public int getRowIndex()", "public int getColumnSpan()", "public int getRowSpan()", "public boolean isHeading()", "public boolean isSelected()", " void recycle()", "private void clear()" ]
}