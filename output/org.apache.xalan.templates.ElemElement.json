{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemElement.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemElement",
  "comment" : "\n * Implement xsl:element\n * <pre>\n * <!ELEMENT xsl:element %template;>\n * <!ATTLIST xsl:element\n *   name %avt; #REQUIRED\n *   namespace %avt; #IMPLIED\n *   use-attribute-sets %qnames; #IMPLIED\n *   %space-att;\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#section-Creating-Elements-with-xsl:element\">XXX in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_name_avt",
    "type" : "AVT",
    "comment" : "\n   * The name attribute is interpreted as an attribute value template.\n   * It is an error if the string that results from instantiating the\n   * attribute value template is not a QName.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_namespace_avt",
    "type" : "AVT",
    "comment" : "\n   * If the namespace attribute is present, then it also is interpreted\n   * as an attribute value template. The string that results from\n   * instantiating the attribute value template should be a URI reference.\n   * It is not an error if the string is not a syntactically legal URI reference.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setName(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"name\" attribute.\n   * The name attribute is interpreted as an attribute value template.\n   * It is an error if the string that results from instantiating the\n   * attribute value template is not a QName.\n   *\n   * @param v Name attribute to set for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getName()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"name\" attribute.\n   * The name attribute is interpreted as an attribute value template.\n   * It is an error if the string that results from instantiating the\n   * attribute value template is not a QName.\n   *\n   * @return Name attribute for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setNamespace(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"namespace\" attribute.\n   * If the namespace attribute is present, then it also is interpreted\n   * as an attribute value template. The string that results from\n   * instantiating the attribute value template should be a URI reference.\n   * It is not an error if the string is not a syntactically legal URI reference.\n   *\n   * @param v NameSpace attribute to set for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getNamespace()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"namespace\" attribute.\n   * If the namespace attribute is present, then it also is interpreted\n   * as an attribute value template. The string that results from\n   * instantiating the attribute value template should be a URI reference.\n   * It is not an error if the string is not a syntactically legal URI reference.\n   *\n   * @return Namespace attribute for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return This element's name \n   ",
    "links" : [ ]
  }, {
    "name" : "protected String resolvePrefix(SerializationHandler rhandler, String prefix, String nodeNamespace) throws TransformerException",
    "returnType" : "String",
    "comment" : "\n   * Resolve the namespace into a prefix.  Meant to be\n   * overidded by elemAttribute if this class is derived.\n   *\n   * @param rhandler The current result tree handler.\n   * @param prefix The probable prefix if already known.\n   * @param nodeNamespace  The namespace.\n   *\n   * @return The prefix to be used.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Create an element in the result tree.\n   * The xsl:element element allows an element to be created with a\n   * computed name. The expanded-name of the element to be created\n   * is specified by a required name attribute and an optional namespace\n   * attribute. The content of the xsl:element element is a template\n   * for the attributes and children of the created element.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " void constructNode(String nodeName, String prefix, String nodeNamespace, TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Construct a node in the result tree.  This method is overloaded by \n   * xsl:attribute. At this class level, this method creates an element.\n   * If the node is null, we instantiate only the content of the node in accordance\n   * with section 7.1.2 of the XSLT 1.0 Recommendation.\n   *\n   * @param nodeName The name of the node, which may be <code>null</code>.  If <code>null</code>,\n   *                 only the non-attribute children of this node will be processed.\n   * @param prefix The prefix for the namespace, which may be <code>null</code>.\n   *               If not <code>null</code>, this prefix will be mapped and unmapped.\n   * @param nodeNamespace The namespace of the node, which may be not be <code>null</code>.\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)",
    "returnType" : "void",
    "comment" : "\n   * Call the children visitors.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setName(AVT v)", "public AVT getName()", "public void setNamespace(AVT v)", "public AVT getNamespace()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public int getXSLToken()", "public String getNodeName()", "protected String resolvePrefix(SerializationHandler rhandler, String prefix, String nodeNamespace) throws TransformerException", "public void execute(TransformerImpl transformer) throws TransformerException", " void constructNode(String nodeName, String prefix, String nodeNamespace, TransformerImpl transformer) throws TransformerException", "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)" ],
  "variableNames" : [ "serialVersionUID", "m_name_avt", "m_namespace_avt" ]
}