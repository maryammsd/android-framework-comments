{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/marshal/MarshalHelpers.java",
  "packageName" : "android.hardware.camera2.marshal",
  "className" : "MarshalHelpers",
  "comment" : "\n * Static functions in order to help implementing various marshaler functionality.\n *\n * <p>The intention is to statically import everything from this file into another file when\n * implementing a new marshaler (or marshal queryable).</p>\n *\n * <p>The helpers are centered around providing primitive knowledge of the native types,\n * such as the native size, the managed class wrappers, and various precondition checks.</p>\n ",
  "variables" : [ {
    "name" : "SIZEOF_BYTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIZEOF_INT32",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIZEOF_INT64",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIZEOF_FLOAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIZEOF_DOUBLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIZEOF_RATIONAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getPrimitiveTypeSize(int nativeType)",
    "returnType" : "int",
    "comment" : "\n     * Get the size in bytes for the native camera metadata type.\n     *\n     * <p>This used to determine how many bytes it would take to encode/decode a single value\n     * of that {@link nativeType}.</p>\n     *\n     * @param nativeType the native type, e.g.\n     *        {@link android.hardware.camera2.impl.CameraMetadataNative#TYPE_BYTE TYPE_BYTE}.\n     * @return size in bytes >= 1\n     *\n     * @throws UnsupportedOperationException if nativeType was not one of the built-in types\n     ",
    "links" : [ "nativeType", "android.hardware.camera2.impl.CameraMetadataNative#TYPE_BYTE" ]
  }, {
    "name" : "public static Class<T> checkPrimitiveClass(Class<T> klass)",
    "returnType" : "Class<T>",
    "comment" : "\n     * Ensure that the {@code klass} is one of the metadata-primitive classes.\n     *\n     * @param klass a non-{@code null} reference\n     * @return {@code klass} instance\n     *\n     * @throws UnsupportedOperationException if klass was not one of the built-in classes\n     * @throws NullPointerException if klass was null\n     *\n     * @see #isPrimitiveClass\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isPrimitiveClass(Class<T> klass)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether or not {@code klass} is one of the metadata-primitive classes.\n     *\n     * <p>The following types (whether boxed or unboxed) are considered primitive:\n     * <ul>\n     * <li>byte\n     * <li>int\n     * <li>float\n     * <li>double\n     * <li>Rational\n     * </ul>\n     * </p>\n     *\n     * <p>This doesn't strictly follow the java understanding of primitive since\n     * boxed objects are included, Rational is included, and other types such as char and\n     * short are not included.</p>\n     *\n     * @param klass a {@link Class} instance; using {@code null} will return {@code false}\n     * @return {@code true} if primitive, {@code false} otherwise\n     ",
    "links" : [ "Class" ]
  }, {
    "name" : "public static Class<T> wrapClassIfPrimitive(Class<T> klass)",
    "returnType" : "Class<T>",
    "comment" : "\n     * Wrap {@code klass} with its wrapper variant if it was a {@code Class} corresponding\n     * to a Java primitive.\n     *\n     * <p>Non-primitive classes are passed through as-is.</p>\n     *\n     * <p>For example, for a primitive {@code int.class => Integer.class},\n     * but for a non-primitive {@code Rational.class => Rational.class}.</p>\n     *\n     * @param klass a {@code Class} reference\n     *\n     * @return wrapped class object, or same class object if non-primitive\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toStringNativeType(int nativeType)",
    "returnType" : "String",
    "comment" : "\n     * Return a human-readable representation of the {@code nativeType}, e.g. \"TYPE_INT32\"\n     *\n     * <p>Out-of-range values return a string with \"UNKNOWN\" as the prefix.</p>\n     *\n     * @param nativeType the native type\n     *\n     * @return human readable type name\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int checkNativeType(int nativeType)",
    "returnType" : "int",
    "comment" : "\n     * Ensure that the {@code nativeType} is one of the native types supported\n     * by {@link CameraMetadataNative}.\n     *\n     * @param nativeType the native type\n     *\n     * @return the native type\n     *\n     * @throws UnsupportedOperationException if the native type was invalid\n     ",
    "links" : [ "CameraMetadataNative" ]
  }, {
    "name" : "public static int checkNativeTypeEquals(int expectedNativeType, int actualNativeType)",
    "returnType" : "int",
    "comment" : "\n     * Ensure that the expected and actual native types are equal.\n     *\n     * @param expectedNativeType the expected native type\n     * @param actualNativeType the actual native type\n     * @return the actual native type\n     *\n     * @throws UnsupportedOperationException if the types are not equal\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SIZEOF_BYTE", "SIZEOF_INT32", "SIZEOF_INT64", "SIZEOF_FLOAT", "SIZEOF_DOUBLE", "SIZEOF_RATIONAL" ],
  "methodNames" : [ "public static int getPrimitiveTypeSize(int nativeType)", "public static Class<T> checkPrimitiveClass(Class<T> klass)", "public static boolean isPrimitiveClass(Class<T> klass)", "public static Class<T> wrapClassIfPrimitive(Class<T> klass)", "public static String toStringNativeType(int nativeType)", "public static int checkNativeType(int nativeType)", "public static int checkNativeTypeEquals(int expectedNativeType, int actualNativeType)" ]
}