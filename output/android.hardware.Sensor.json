{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/Sensor.java",
  "packageName" : "android.hardware",
  "className" : "Sensor",
  "comment" : "\n * Class representing a sensor. Use {@link SensorManager#getSensorList} to get\n * the list of available sensors. For more information about Android sensors,\n * read the\n * <a href=\"/guide/topics/sensors/sensors_motion.html\">Motion Sensors guide</a>.</p>\n *\n * @see SensorManager\n * @see SensorEventListener\n * @see SensorEvent\n *\n ",
  "variables" : [ {
    "name" : "TYPE_ACCELEROMETER",
    "type" : "int",
    "comment" : "\n     * A constant describing an accelerometer sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_ACCELEROMETER",
    "type" : "String",
    "comment" : "\n     * A constant string describing an accelerometer sensor type.\n     *\n     * @see #TYPE_ACCELEROMETER\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MAGNETIC_FIELD",
    "type" : "int",
    "comment" : "\n     * A constant describing a magnetic field sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_MAGNETIC_FIELD",
    "type" : "String",
    "comment" : "\n     * A constant string describing a magnetic field sensor type.\n     *\n     * @see #TYPE_MAGNETIC_FIELD\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ORIENTATION",
    "type" : "int",
    "comment" : "\n     * A constant describing an orientation sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     *\n     * @deprecated use {@link android.hardware.SensorManager#getOrientation\n     *             SensorManager.getOrientation()} instead.\n     ",
    "links" : [ "android.hardware.SensorEvent#values", "android.hardware.SensorManager#getOrientationSensorManager.getOrientation()" ]
  }, {
    "name" : "STRING_TYPE_ORIENTATION",
    "type" : "String",
    "comment" : "\n     * A constant string describing an orientation sensor type.\n     *\n     * @see #TYPE_ORIENTATION\n     * @deprecated use {@link android.hardware.SensorManager#getOrientation\n     *             SensorManager.getOrientation()} instead.\n     ",
    "links" : [ "android.hardware.SensorManager#getOrientationSensorManager.getOrientation()" ]
  }, {
    "name" : "TYPE_GYROSCOPE",
    "type" : "int",
    "comment" : "\n     * A constant describing a gyroscope sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details. ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_GYROSCOPE",
    "type" : "String",
    "comment" : "\n     * A constant string describing a gyroscope sensor type.\n     *\n     * @see #TYPE_GYROSCOPE\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LIGHT",
    "type" : "int",
    "comment" : "\n     * A constant describing a light sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_LIGHT",
    "type" : "String",
    "comment" : "\n     * A constant string describing a light sensor type.\n     *\n     * @see #TYPE_LIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PRESSURE",
    "type" : "int",
    "comment" : "\n     * A constant describing a pressure sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_PRESSURE",
    "type" : "String",
    "comment" : "\n     * A constant string describing a pressure sensor type.\n     *\n     * @see #TYPE_PRESSURE\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TEMPERATURE",
    "type" : "int",
    "comment" : "\n     * A constant describing a temperature sensor type\n     *\n     * @deprecated use\n     *             {@link android.hardware.Sensor#TYPE_AMBIENT_TEMPERATURE\n     *             Sensor.TYPE_AMBIENT_TEMPERATURE} instead.\n     ",
    "links" : [ "android.hardware.Sensor#TYPE_AMBIENT_TEMPERATURESensor.TYPE_AMBIENT_TEMPERATURE" ]
  }, {
    "name" : "STRING_TYPE_TEMPERATURE",
    "type" : "String",
    "comment" : "\n     * A constant string describing a temperature sensor type\n     *\n     * @see #TYPE_TEMPERATURE\n     * @deprecated use\n     *             {@link android.hardware.Sensor#STRING_TYPE_AMBIENT_TEMPERATURE\n     *             Sensor.STRING_TYPE_AMBIENT_TEMPERATURE} instead.\n     ",
    "links" : [ "android.hardware.Sensor#STRING_TYPE_AMBIENT_TEMPERATURESensor.STRING_TYPE_AMBIENT_TEMPERATURE" ]
  }, {
    "name" : "TYPE_PROXIMITY",
    "type" : "int",
    "comment" : "\n     * A constant describing a proximity sensor type. This is a wake up sensor.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     * @see #isWakeUpSensor()\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_PROXIMITY",
    "type" : "String",
    "comment" : "\n     * A constant string describing a proximity sensor type.\n     *\n     * @see #TYPE_PROXIMITY\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GRAVITY",
    "type" : "int",
    "comment" : "\n     * A constant describing a gravity sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_GRAVITY",
    "type" : "String",
    "comment" : "\n     * A constant string describing a gravity sensor type.\n     *\n     * @see #TYPE_GRAVITY\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LINEAR_ACCELERATION",
    "type" : "int",
    "comment" : "\n     * A constant describing a linear acceleration sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_LINEAR_ACCELERATION",
    "type" : "String",
    "comment" : "\n     * A constant string describing a linear acceleration sensor type.\n     *\n     * @see #TYPE_LINEAR_ACCELERATION\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ROTATION_VECTOR",
    "type" : "int",
    "comment" : "\n     * A constant describing a rotation vector sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_ROTATION_VECTOR",
    "type" : "String",
    "comment" : "\n     * A constant string describing a rotation vector sensor type.\n     *\n     * @see #TYPE_ROTATION_VECTOR\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_RELATIVE_HUMIDITY",
    "type" : "int",
    "comment" : "\n     * A constant describing a relative humidity sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_RELATIVE_HUMIDITY",
    "type" : "String",
    "comment" : "\n     * A constant string describing a relative humidity sensor type\n     *\n     * @see #TYPE_RELATIVE_HUMIDITY\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_AMBIENT_TEMPERATURE",
    "type" : "int",
    "comment" : "\n     * A constant describing an ambient temperature sensor type.\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}\n     * for more details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_AMBIENT_TEMPERATURE",
    "type" : "String",
    "comment" : "\n     * A constant string describing an ambient temperature sensor type.\n     *\n     * @see #TYPE_AMBIENT_TEMPERATURE\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MAGNETIC_FIELD_UNCALIBRATED",
    "type" : "int",
    "comment" : "\n     * A constant describing an uncalibrated magnetic field sensor type.\n     * <p>\n     * Similar to {@link #TYPE_MAGNETIC_FIELD} but the hard iron calibration (device calibration\n     * due to distortions that arise from magnetized iron, steel or permanent magnets on the\n     * device) is not considered in the given sensor values. However, such hard iron bias values\n     * are returned to you separately in the result {@link android.hardware.SensorEvent#values}\n     * so you may use them for custom calibrations.\n     * <p>Also, no periodic calibration is performed\n     * (i.e. there are no discontinuities in the data stream while using this sensor) and\n     * assumptions that the magnetic field is due to the Earth's poles is avoided, but\n     * factory calibration and temperature compensation have been performed.\n     * </p>\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values} for more\n     * details.\n     ",
    "links" : [ "#TYPE_MAGNETIC_FIELD", "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED",
    "type" : "String",
    "comment" : "\n     * A constant string describing an uncalibrated magnetic field sensor type.\n     *\n     * @see #TYPE_MAGNETIC_FIELD_UNCALIBRATED\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GAME_ROTATION_VECTOR",
    "type" : "int",
    "comment" : "\n     * A constant describing an uncalibrated rotation vector sensor type.\n     * <p>Identical to {@link #TYPE_ROTATION_VECTOR} except that it doesn't\n     * use the geomagnetic field. Therefore the Y axis doesn't\n     * point north, but instead to some other reference, that reference is\n     * allowed to drift by the same order of magnitude as the gyroscope\n     * drift around the Z axis.\n     * <p>\n     * In the ideal case, a phone rotated and returning to the same real-world\n     * orientation should report the same game rotation vector\n     * (without using the earth's geomagnetic field). However, the orientation\n     * may drift somewhat over time.\n     * </p>\n     * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values} for more\n     * details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values", "#TYPE_ROTATION_VECTOR" ]
  }, {
    "name" : "STRING_TYPE_GAME_ROTATION_VECTOR",
    "type" : "String",
    "comment" : "\n     * A constant string describing an uncalibrated rotation vector sensor type.\n     *\n     * @see #TYPE_GAME_ROTATION_VECTOR\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GYROSCOPE_UNCALIBRATED",
    "type" : "int",
    "comment" : "\n     * A constant describing an uncalibrated gyroscope sensor type.\n     * <p>Similar to {@link #TYPE_GYROSCOPE} but no gyro-drift compensation has been performed\n     * to adjust the given sensor values. However, such gyro-drift bias values\n     * are returned to you separately in the result {@link android.hardware.SensorEvent#values}\n     * so you may use them for custom calibrations.\n     * <p>Factory calibration and temperature compensation is still applied\n     * to the rate of rotation (angular speeds).\n     * </p>\n     * <p> See {@link android.hardware.SensorEvent#values SensorEvent.values} for more\n     * details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values", "#TYPE_GYROSCOPE" ]
  }, {
    "name" : "STRING_TYPE_GYROSCOPE_UNCALIBRATED",
    "type" : "String",
    "comment" : "\n     * A constant string describing an uncalibrated gyroscope sensor type.\n     *\n     * @see #TYPE_GYROSCOPE_UNCALIBRATED\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SIGNIFICANT_MOTION",
    "type" : "int",
    "comment" : "\n     * A constant describing a significant motion trigger sensor.\n     * <p>\n     * It triggers when an event occurs and then automatically disables\n     * itself. The sensor continues to operate while the device is asleep\n     * and will automatically wake the device to notify when significant\n     * motion is detected. The application does not need to hold any wake\n     * locks for this sensor to trigger. This is a wake up sensor.\n     * <p>See {@link TriggerEvent} for more details.\n     *\n     * @see #isWakeUpSensor()\n     ",
    "links" : [ "android.hardware.TriggerEvent" ]
  }, {
    "name" : "STRING_TYPE_SIGNIFICANT_MOTION",
    "type" : "String",
    "comment" : "\n     * A constant string describing a significant motion trigger sensor.\n     *\n     * @see #TYPE_SIGNIFICANT_MOTION\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_STEP_DETECTOR",
    "type" : "int",
    "comment" : "\n     * A constant describing a step detector sensor.\n     * <p>\n     * A sensor of this type triggers an event each time a step is taken by the user. The only\n     * allowed value to return is 1.0 and an event is generated for each step. Like with any other\n     * event, the timestamp indicates when the event (here the step) occurred, this corresponds to\n     * when the foot hit the ground, generating a high variation in acceleration. This sensor is\n     * only for detecting every individual step as soon as it is taken, for example to perform dead\n     * reckoning. If you only need aggregate number of steps taken over a period of time, register\n     * for {@link #TYPE_STEP_COUNTER} instead. It is defined as a\n     * {@link Sensor#REPORTING_MODE_SPECIAL_TRIGGER} sensor.\n     * <p>\n     * This sensor requires permission {@code android.permission.ACTIVITY_RECOGNITION}.\n     * <p>\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     ",
    "links" : [ "android.hardware.Sensor#REPORTING_MODE_SPECIAL_TRIGGER", "android.hardware.SensorEvent#values", "#TYPE_STEP_COUNTER" ]
  }, {
    "name" : "STRING_TYPE_STEP_DETECTOR",
    "type" : "String",
    "comment" : "\n     * A constant string describing a step detector sensor.\n     *\n     * @see #TYPE_STEP_DETECTOR\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_STEP_COUNTER",
    "type" : "int",
    "comment" : "\n     * A constant describing a step counter sensor.\n     * <p>\n     * A sensor of this type returns the number of steps taken by the user since the last reboot\n     * while activated. The value is returned as a float (with the fractional part set to zero) and\n     * is reset to zero only on a system reboot. The timestamp of the event is set to the time when\n     * the last step for that event was taken. This sensor is implemented in hardware and is\n     * expected to be low power. If you want to continuously track the number of steps over a long\n     * period of time, do NOT unregister for this sensor, so that it keeps counting steps in the\n     * background even when the AP is in suspend mode and report the aggregate count when the AP\n     * is awake. Application needs to stay registered for this sensor because step counter does not\n     * count steps if it is not activated. This sensor is ideal for fitness tracking applications.\n     * It is defined as an {@link Sensor#REPORTING_MODE_ON_CHANGE} sensor.\n     * <p>\n     * This sensor requires permission {@code android.permission.ACTIVITY_RECOGNITION}.\n     * <p>\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     ",
    "links" : [ "android.hardware.Sensor#REPORTING_MODE_ON_CHANGE", "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_STEP_COUNTER",
    "type" : "String",
    "comment" : "\n     * A constant string describing a step counter sensor.\n     *\n     * @see #TYPE_STEP_COUNTER\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GEOMAGNETIC_ROTATION_VECTOR",
    "type" : "int",
    "comment" : "\n     * A constant describing a geo-magnetic rotation vector.\n     * <p>\n     * Similar to {@link #TYPE_ROTATION_VECTOR}, but using a magnetometer instead of using a\n     * gyroscope. This sensor uses lower power than the other rotation vectors, because it doesn't\n     * use the gyroscope. However, it is more noisy and will work best outdoors.\n     * <p>\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     ",
    "links" : [ "android.hardware.SensorEvent#values", "#TYPE_ROTATION_VECTOR" ]
  }, {
    "name" : "STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR",
    "type" : "String",
    "comment" : "\n     * A constant string describing a geo-magnetic rotation vector.\n     *\n     * @see #TYPE_GEOMAGNETIC_ROTATION_VECTOR\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HEART_RATE",
    "type" : "int",
    "comment" : "\n     * A constant describing a heart rate monitor.\n     * <p>\n     * The reported value is the heart rate in beats per minute.\n     * <p>\n     * The reported accuracy represents the status of the monitor during the reading. See the\n     * {@code SENSOR_STATUS_*} constants in {@link android.hardware.SensorManager SensorManager}\n     * for more details on accuracy/status values. In particular, when the accuracy is\n     * {@code SENSOR_STATUS_UNRELIABLE} or {@code SENSOR_STATUS_NO_CONTACT}, the heart rate\n     * value should be discarded.\n     * <p>\n     * This sensor requires permission {@code android.permission.BODY_SENSORS}.\n     * It will not be returned by {@code SensorManager.getSensorsList} nor\n     * {@code SensorManager.getDefaultSensor} if the application doesn't have this permission.\n     ",
    "links" : [ "android.hardware.SensorManager" ]
  }, {
    "name" : "STRING_TYPE_HEART_RATE",
    "type" : "String",
    "comment" : "\n     * A constant string describing a heart rate monitor.\n     *\n     * @see #TYPE_HEART_RATE\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TILT_DETECTOR",
    "type" : "int",
    "comment" : "\n     * A sensor of this type generates an event each time a tilt event is detected. A tilt event\n     * is generated if the direction of the 2-seconds window average gravity changed by at\n     * least 35 degrees since the activation of the sensor. It is a wake up sensor.\n     *\n     * @hide\n     * @see #isWakeUpSensor()\n     ",
    "links" : [ ]
  }, {
    "name" : "SENSOR_STRING_TYPE_TILT_DETECTOR",
    "type" : "String",
    "comment" : "\n     * A constant string describing a wake up tilt detector sensor type.\n     *\n     * @hide\n     * @see #TYPE_TILT_DETECTOR\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_WAKE_GESTURE",
    "type" : "int",
    "comment" : "\n     * A constant describing a wake gesture sensor.\n     * <p>\n     * Wake gesture sensors enable waking up the device based on a device specific motion.\n     * <p>\n     * When this sensor triggers, the device behaves as if the power button was pressed, turning the\n     * screen on. This behavior (turning on the screen when this sensor triggers) might be\n     * deactivated by the user in the device settings. Changes in settings do not impact the\n     * behavior of the sensor: only whether the framework turns the screen on when it triggers.\n     * <p>\n     * The actual gesture to be detected is not specified, and can be chosen by the manufacturer of\n     * the device. This sensor must be low power, as it is likely to be activated 24/7.\n     * Values of events created by this sensors should not be used.\n     *\n     * @see #isWakeUpSensor()\n     * @hide This sensor is expected to only be used by the system ui\n     ",
    "links" : [ ]
  }, {
    "name" : "STRING_TYPE_WAKE_GESTURE",
    "type" : "String",
    "comment" : "\n     * A constant string describing a wake gesture sensor.\n     *\n     * @hide This sensor is expected to only be used by the system ui\n     * @see #TYPE_WAKE_GESTURE\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GLANCE_GESTURE",
    "type" : "int",
    "comment" : "\n     * A constant describing a wake gesture sensor.\n     * <p>\n     * A sensor enabling briefly turning the screen on to enable the user to\n     * glance content on screen based on a specific motion.  The device should\n     * turn the screen off after a few moments.\n     * <p>\n     * When this sensor triggers, the device turns the screen on momentarily\n     * to allow the user to glance notifications or other content while the\n     * device remains locked in a non-interactive state (dozing). This behavior\n     * (briefly turning on the screen when this sensor triggers) might be deactivated\n     * by the user in the device settings. Changes in settings do not impact the\n     * behavior of the sensor: only whether the framework briefly turns the screen on\n     * when it triggers.\n     * <p>\n     * The actual gesture to be detected is not specified, and can be chosen by the manufacturer of\n     * the device. This sensor must be low power, as it is likely to be activated 24/7.\n     * Values of events created by this sensors should not be used.\n     *\n     * @see #isWakeUpSensor()\n     * @hide This sensor is expected to only be used by the system ui\n     ",
    "links" : [ ]
  }, {
    "name" : "STRING_TYPE_GLANCE_GESTURE",
    "type" : "String",
    "comment" : "\n     * A constant string describing a wake gesture sensor.\n     *\n     * @hide This sensor is expected to only be used by the system ui\n     * @see #TYPE_GLANCE_GESTURE\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PICK_UP_GESTURE",
    "type" : "int",
    "comment" : "\n     * A constant describing a pick up sensor.\n     *\n     * A sensor of this type triggers when the device is picked up regardless of wherever it was\n     * before (desk, pocket, bag). The only allowed return value is 1.0. This sensor deactivates\n     * itself immediately after it triggers.\n     *\n     * @hide Expected to be used internally for always on display.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRING_TYPE_PICK_UP_GESTURE",
    "type" : "String",
    "comment" : "\n     * A constant string describing a pick up sensor.\n     *\n     * @hide This sensor is expected to be used internally for always on display.\n     * @see #TYPE_PICK_UP_GESTURE\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_WRIST_TILT_GESTURE",
    "type" : "int",
    "comment" : "\n     * A constant describing a wrist tilt gesture sensor.\n     *\n     * A sensor of this type triggers when the device face is tilted towards the user.\n     * The only allowed return value is 1.0.\n     * This sensor remains active until disabled.\n     *\n     * @hide This sensor is expected to only be used by the system ui\n     ",
    "links" : [ ]
  }, {
    "name" : "STRING_TYPE_WRIST_TILT_GESTURE",
    "type" : "String",
    "comment" : "\n     * A constant string describing a wrist tilt gesture sensor.\n     *\n     * @hide This sensor is expected to only be used by the system ui\n     * @see #TYPE_WRIST_TILT_GESTURE\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DEVICE_ORIENTATION",
    "type" : "int",
    "comment" : "\n     * The current orientation of the device.\n     * <p>\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     *\n     * @hide Expected to be used internally for auto-rotate and speaker rotation.\n     *\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_DEVICE_ORIENTATION",
    "type" : "String",
    "comment" : "\n     * A constant string describing a device orientation sensor type.\n     *\n     * @hide\n     * @see #TYPE_DEVICE_ORIENTATION\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_POSE_6DOF",
    "type" : "int",
    "comment" : "\n     * A constant describing a pose sensor with 6 degrees of freedom.\n     *\n     * Similar to {@link #TYPE_ROTATION_VECTOR}, with additional delta\n     * translation from an arbitrary reference point.\n     *\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     *\n     * Can use camera, depth sensor etc to compute output value.\n     *\n     * This is expected to be a high power sensor and expected only to be\n     * used when the screen is on.\n     *\n     * Expected to be more accurate than the rotation vector alone.\n     *\n     ",
    "links" : [ "android.hardware.SensorEvent#values", "#TYPE_ROTATION_VECTOR" ]
  }, {
    "name" : "STRING_TYPE_POSE_6DOF",
    "type" : "String",
    "comment" : "\n     * A constant string describing a pose sensor with 6 degrees of freedom.\n     *\n     * @see #TYPE_POSE_6DOF\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_STATIONARY_DETECT",
    "type" : "int",
    "comment" : "\n     * A constant describing a stationary detect sensor.\n     *\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     *\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_STATIONARY_DETECT",
    "type" : "String",
    "comment" : "\n     * A constant string describing a stationary detection sensor.\n     *\n     * @see #TYPE_STATIONARY_DETECT\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MOTION_DETECT",
    "type" : "int",
    "comment" : "\n     * A constant describing a motion detect sensor.\n     *\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     *\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_MOTION_DETECT",
    "type" : "String",
    "comment" : "\n     * A constant string describing a motion detection sensor.\n     *\n     * @see #TYPE_MOTION_DETECT\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HEART_BEAT",
    "type" : "int",
    "comment" : "\n     * A constant describing a motion detect sensor.\n     *\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     *\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_HEART_BEAT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_DYNAMIC_SENSOR_META",
    "type" : "int",
    "comment" : "\n     * A constant describing a dynamic sensor meta event sensor.\n     *\n     * A sensor event of this type is received when a dynamic sensor is added to or removed from\n     * the system. This sensor type should always use special trigger report mode ({@code\n     * SensorManager.REPORTING_MODE_SPECIAL_TRIGGER}).\n     *\n     * @hide This sensor is expected to be used only by system services.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRING_TYPE_DYNAMIC_SENSOR_META",
    "type" : "String",
    "comment" : "\n     * A constant string describing a dynamic sensor meta event sensor.\n     *\n     * @see #TYPE_DYNAMIC_SENSOR_META\n     *\n     * @hide This sensor is expected to only be used by the system service\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LOW_LATENCY_OFFBODY_DETECT",
    "type" : "int",
    "comment" : "\n     * A constant describing a low latency off-body detect sensor.\n     *\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     *\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT",
    "type" : "String",
    "comment" : "\n     * A constant string describing a low-latency offbody detector sensor.\n     *\n     * @see #TYPE_LOW_LATENCY_OFFBODY_DETECT\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ACCELEROMETER_UNCALIBRATED",
    "type" : "int",
    "comment" : "\n     * A constant describing an uncalibrated accelerometer sensor.\n     *\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     *\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_ACCELEROMETER_UNCALIBRATED",
    "type" : "String",
    "comment" : "\n     * A constant string describing an uncalibrated accelerometer sensor.\n     *\n     * @see #TYPE_ACCELEROMETER_UNCALIBRATED\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HINGE_ANGLE",
    "type" : "int",
    "comment" : "\n     * A constant describing a hinge angle sensor.\n     *\n     * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.\n     *\n     ",
    "links" : [ "android.hardware.SensorEvent#values" ]
  }, {
    "name" : "STRING_TYPE_HINGE_ANGLE",
    "type" : "String",
    "comment" : "\n     * A constant string describing a hinge angle sensor.\n     *\n     * @see #TYPE_HINGE_ANGLE\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ALL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_DEVICE_PRIVATE_BASE",
    "type" : "int",
    "comment" : "\n     * The lowest sensor type vendor defined sensors can use.\n     *\n     * All vendor sensor types are greater than or equal to this constant.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "SENSOR_FLAG_WAKE_UP_SENSOR",
    "type" : "int",
    "comment" : " constants are defined as flags in sensors.h. Modify at both places if needed.",
    "links" : [ ]
  }, {
    "name" : "REPORTING_MODE_CONTINUOUS",
    "type" : "int",
    "comment" : "\n     * Events are reported at a constant rate which is set by the rate parameter of\n     * {@link SensorManager#registerListener(SensorEventListener, Sensor, int)}. Note: If other\n     * applications are requesting a higher rate, the sensor data might be delivered at faster rates\n     * than requested.\n     ",
    "links" : [ "android.hardware.SensorManager#registerListener(SensorEventListener" ]
  }, {
    "name" : "REPORTING_MODE_ON_CHANGE",
    "type" : "int",
    "comment" : "\n     * Events are reported only when the value changes. Event delivery rate can be limited by\n     * setting appropriate value for rate parameter of\n     * {@link SensorManager#registerListener(SensorEventListener, Sensor, int)} Note: If other\n     * applications are requesting a higher rate, the sensor data might be delivered at faster rates\n     * than requested.\n     ",
    "links" : [ "android.hardware.SensorManager#registerListener(SensorEventListener" ]
  }, {
    "name" : "REPORTING_MODE_ONE_SHOT",
    "type" : "int",
    "comment" : "\n     * Events are reported in one-shot mode. Upon detection of an event, the sensor deactivates\n     * itself and then sends a single event. Sensors of this reporting mode must be registered to\n     * using {@link SensorManager#requestTriggerSensor(TriggerEventListener, Sensor)}.\n     ",
    "links" : [ "android.hardware.SensorManager#requestTriggerSensor(TriggerEventListener" ]
  }, {
    "name" : "REPORTING_MODE_SPECIAL_TRIGGER",
    "type" : "int",
    "comment" : "\n     * Events are reported as described in the description of the sensor. The rate passed to\n     * registerListener might not have an impact on the rate of event delivery. See the sensor\n     * definition for more information on when and how frequently the events are reported. For\n     * example, step detectors report events when a step is detected.\n     *\n     * @see SensorManager#registerListener(SensorEventListener, Sensor, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORTING_MODE_MASK",
    "type" : "int",
    "comment" : " Mask for the LSB 2nd, 3rd and fourth bits.",
    "links" : [ ]
  }, {
    "name" : "REPORTING_MODE_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_INJECTION_MASK",
    "type" : "int",
    "comment" : " MASK for LSB fifth bit. Used to know whether the sensor supports data injection or not.",
    "links" : [ ]
  }, {
    "name" : "DATA_INJECTION_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DYNAMIC_SENSOR_MASK",
    "type" : "int",
    "comment" : " MASK for dynamic sensor (sensor that added during runtime), bit 5.",
    "links" : [ ]
  }, {
    "name" : "DYNAMIC_SENSOR_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADDITIONAL_INFO_MASK",
    "type" : "int",
    "comment" : " MASK for indication bit of sensor additional information support, bit 6.",
    "links" : [ ]
  }, {
    "name" : "ADDITIONAL_INFO_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIRECT_REPORT_MASK",
    "type" : "int",
    "comment" : " Mask for direct mode highest rate level, bit 7, 8, 9.",
    "links" : [ ]
  }, {
    "name" : "DIRECT_REPORT_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIRECT_CHANNEL_MASK",
    "type" : "int",
    "comment" : " Mask for supported direct channel, bit 10, 11",
    "links" : [ ]
  }, {
    "name" : "DIRECT_CHANNEL_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSensorReportingModes",
    "type" : "int[]",
    "comment" : " {@link SensorEvent} or {@link TriggerEvent} for the Sensor",
    "links" : [ "android.hardware.SensorEvent", "android.hardware.TriggerEvent" ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : " Some of these fields are set only by the native bindings in\n     * SensorManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVendor",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxRange",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResolution",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPower",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinDelay",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFifoReservedEventCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFifoMaxEventCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStringType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequiredPermission",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxDelay",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getReportingMode()",
    "returnType" : "int",
    "comment" : "\n     * Each sensor has exactly one reporting mode associated with it. This method returns the\n     * reporting mode constant for this sensor type.\n     *\n     * @return Reporting mode for the input sensor, one of REPORTING_MODE_* constants.\n     * @see #REPORTING_MODE_CONTINUOUS\n     * @see #REPORTING_MODE_ON_CHANGE\n     * @see #REPORTING_MODE_ONE_SHOT\n     * @see #REPORTING_MODE_SPECIAL_TRIGGER\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHighestDirectReportRateLevel()",
    "returnType" : "int",
    "comment" : "\n     * Get the highest supported direct report mode rate level of the sensor.\n     *\n     * @return Highest direct report rate level of this sensor. If the sensor does not support\n     * direct report mode, this returns {@link SensorDirectChannel#RATE_STOP}.\n     * @see SensorDirectChannel#RATE_STOP\n     * @see SensorDirectChannel#RATE_NORMAL\n     * @see SensorDirectChannel#RATE_FAST\n     * @see SensorDirectChannel#RATE_VERY_FAST\n     ",
    "links" : [ "android.hardware.SensorDirectChannel#RATE_STOP" ]
  }, {
    "name" : "public boolean isDirectChannelTypeSupported(@SensorDirectChannel.MemoryType int sharedMemType)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if a sensor supports a specified direct channel type.\n     *\n     * @param sharedMemType type of shared memory used by direct channel.\n     * @return <code>true</code> if the specified shared memory type is supported.\n     * @see SensorDirectChannel#TYPE_MEMORY_FILE\n     * @see SensorDirectChannel#TYPE_HARDWARE_BUFFER\n     ",
    "links" : [ ]
  }, {
    "name" : " static int getMaxLengthValuesArray(Sensor sensor, int sdkLevel)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * @return name string of the sensor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getVendor()",
    "returnType" : "String",
    "comment" : "\n     * @return vendor string of this sensor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * @return generic type of this sensor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVersion()",
    "returnType" : "int",
    "comment" : "\n     * @return version of the sensor's module.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getMaximumRange()",
    "returnType" : "float",
    "comment" : "\n     * @return maximum range of the sensor in the sensor's unit.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getResolution()",
    "returnType" : "float",
    "comment" : "\n     * @return resolution of the sensor in the sensor's unit.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getPower()",
    "returnType" : "float",
    "comment" : "\n     * @return the power in mA used by this sensor while in use\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinDelay()",
    "returnType" : "int",
    "comment" : "\n     * @return the minimum delay allowed between two events in microsecond\n     * or zero if this sensor only returns a value when the data it's measuring\n     * changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFifoReservedEventCount()",
    "returnType" : "int",
    "comment" : "\n     * @return Number of events reserved for this sensor in the batch mode FIFO. This gives a\n     * guarantee on the minimum number of events that can be batched.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFifoMaxEventCount()",
    "returnType" : "int",
    "comment" : "\n     * @return Maximum number of events of this sensor that could be batched. If this value is zero\n     * it indicates that batch mode is not supported for this sensor. If other applications\n     * registered to batched sensors, the actual number of events that can be batched might be\n     * smaller because the hardware FiFo will be partially used to batch the other sensors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getStringType()",
    "returnType" : "String",
    "comment" : "\n     * @return The type of this sensor as a string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.util.UUID getUuid()",
    "returnType" : "java.util.UUID",
    "comment" : "\n     * Do not use.\n     *\n     * This method throws an UnsupportedOperationException.\n     *\n     * Use getId() if you want a unique ID.\n     *\n     * @see getId\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * @return The sensor id that will be unique for the same app unless the device is factory\n     * reset. Return value of 0 means this sensor does not support this function; return value of -1\n     * means this sensor can be uniquely identified in system by combination of its type and name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRequiredPermission()",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     * @return The permission required to access this sensor. If empty, no permission is required.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHandle()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxDelay()",
    "returnType" : "int",
    "comment" : "\n     * This value is defined only for continuous and on-change sensors. It is the delay between two\n     * sensor events corresponding to the lowest frequency that this sensor supports. When lower\n     * frequencies are requested through registerListener() the events will be generated at this\n     * frequency instead. It can be used to estimate when the batch FIFO may be full. Older devices\n     * may set this value to zero. Ignore this value in case it is negative or zero.\n     *\n     * @return The max delay for this sensor in microseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWakeUpSensor()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the sensor is a wake-up sensor.\n     * <p>\n     * <b>Application Processor Power modes</b> <p>\n     * Application Processor(AP), is the processor on which applications run.  When no wake lock is\n     * held and the user is not interacting with the device, this processor can enter a “Suspend”\n     * mode, reducing the power consumption by 10 times or more.\n     * </p>\n     * <p>\n     * <b>Non-wake-up sensors</b> <p>\n     * Non-wake-up sensors are sensors that do not wake the AP out of suspend to report data. While\n     * the AP is in suspend mode, the sensors continue to function and generate events, which are\n     * put in a hardware FIFO. The events in the FIFO are delivered to the application when the AP\n     * wakes up. If the FIFO was too small to store all events generated while the AP was in\n     * suspend mode, the older events are lost: the oldest data is dropped to accommodate the newer\n     * data. In the extreme case where the FIFO is non-existent {@code maxFifoEventCount() == 0},\n     * all events generated while the AP was in suspend mode are lost. Applications using\n     * non-wake-up sensors should usually:\n     * <ul>\n     * <li>Either unregister from the sensors when they do not need them, usually in the activity’s\n     * {@code onPause} method. This is the most common case.\n     * <li>Or realize that the sensors are consuming some power while the AP is in suspend mode and\n     * that even then, some events might be lost.\n     * </ul>\n     * </p>\n     * <p>\n     * <b>Wake-up sensors</b> <p>\n     * In opposition to non-wake-up sensors, wake-up sensors ensure that their data is delivered\n     * independently of the state of the AP. While the AP is awake, the wake-up sensors behave\n     * like non-wake-up-sensors. When the AP is asleep, wake-up sensors wake up the AP to deliver\n     * events. That is, the AP will wake up and the sensor will deliver the events before the\n     * maximum reporting latency is elapsed or the hardware FIFO gets full. See {@link\n     * SensorManager#registerListener(SensorEventListener, Sensor, int, int)} for more details.\n     * </p>\n     *\n     * @return <code>true</code> if this is a wake-up sensor, <code>false</code> otherwise.\n     ",
    "links" : [ "android.hardware.SensorManager#registerListener(SensorEventListener" ]
  }, {
    "name" : "public boolean isDynamicSensor()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the sensor is a dynamic sensor.\n     *\n     * @return <code>true</code> if the sensor is a dynamic sensor (sensor added at runtime).\n     * @see SensorManager.DynamicSensorCallback\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAdditionalInfoSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the sensor supports sensor additional information API\n     *\n     * @return <code>true</code> if the sensor supports sensor additional information API\n     * @see SensorAdditionalInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDataInjectionSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the sensor supports data injection when the\n     * HAL is set to data injection mode.\n     *\n     * @return <code>true</code> if the sensor supports data\n     *         injection when the HAL is set in injection mode,\n     *         false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setRange(float max, float res)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean setType(int value)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the Type associated with the sensor.\n     * NOTE: to be used only by native bindings in SensorManager.\n     *\n     * This allows interned static strings to be used across all representations of the Sensor. If\n     * a sensor type is not referenced here, it will still be interned by the native SensorManager.\n     *\n     * @return {@code true} if the StringType was successfully set, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setUuid(long msb, long lsb)",
    "returnType" : "void",
    "comment" : "\n     * Sets the ID associated with the sensor.\n     *\n     * The method name is misleading; while this ID is based on the UUID,\n     * we do not pass in the actual UUID.\n     *\n     * NOTE: to be used only by native bindings in SensorManager.\n     *\n     * @see #getId\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TYPE_ACCELEROMETER", "STRING_TYPE_ACCELEROMETER", "TYPE_MAGNETIC_FIELD", "STRING_TYPE_MAGNETIC_FIELD", "TYPE_ORIENTATION", "STRING_TYPE_ORIENTATION", "TYPE_GYROSCOPE", "STRING_TYPE_GYROSCOPE", "TYPE_LIGHT", "STRING_TYPE_LIGHT", "TYPE_PRESSURE", "STRING_TYPE_PRESSURE", "TYPE_TEMPERATURE", "STRING_TYPE_TEMPERATURE", "TYPE_PROXIMITY", "STRING_TYPE_PROXIMITY", "TYPE_GRAVITY", "STRING_TYPE_GRAVITY", "TYPE_LINEAR_ACCELERATION", "STRING_TYPE_LINEAR_ACCELERATION", "TYPE_ROTATION_VECTOR", "STRING_TYPE_ROTATION_VECTOR", "TYPE_RELATIVE_HUMIDITY", "STRING_TYPE_RELATIVE_HUMIDITY", "TYPE_AMBIENT_TEMPERATURE", "STRING_TYPE_AMBIENT_TEMPERATURE", "TYPE_MAGNETIC_FIELD_UNCALIBRATED", "STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED", "TYPE_GAME_ROTATION_VECTOR", "STRING_TYPE_GAME_ROTATION_VECTOR", "TYPE_GYROSCOPE_UNCALIBRATED", "STRING_TYPE_GYROSCOPE_UNCALIBRATED", "TYPE_SIGNIFICANT_MOTION", "STRING_TYPE_SIGNIFICANT_MOTION", "TYPE_STEP_DETECTOR", "STRING_TYPE_STEP_DETECTOR", "TYPE_STEP_COUNTER", "STRING_TYPE_STEP_COUNTER", "TYPE_GEOMAGNETIC_ROTATION_VECTOR", "STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR", "TYPE_HEART_RATE", "STRING_TYPE_HEART_RATE", "TYPE_TILT_DETECTOR", "SENSOR_STRING_TYPE_TILT_DETECTOR", "TYPE_WAKE_GESTURE", "STRING_TYPE_WAKE_GESTURE", "TYPE_GLANCE_GESTURE", "STRING_TYPE_GLANCE_GESTURE", "TYPE_PICK_UP_GESTURE", "STRING_TYPE_PICK_UP_GESTURE", "TYPE_WRIST_TILT_GESTURE", "STRING_TYPE_WRIST_TILT_GESTURE", "TYPE_DEVICE_ORIENTATION", "STRING_TYPE_DEVICE_ORIENTATION", "TYPE_POSE_6DOF", "STRING_TYPE_POSE_6DOF", "TYPE_STATIONARY_DETECT", "STRING_TYPE_STATIONARY_DETECT", "TYPE_MOTION_DETECT", "STRING_TYPE_MOTION_DETECT", "TYPE_HEART_BEAT", "STRING_TYPE_HEART_BEAT", "TYPE_DYNAMIC_SENSOR_META", "STRING_TYPE_DYNAMIC_SENSOR_META", "TYPE_LOW_LATENCY_OFFBODY_DETECT", "STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT", "TYPE_ACCELEROMETER_UNCALIBRATED", "STRING_TYPE_ACCELEROMETER_UNCALIBRATED", "TYPE_HINGE_ANGLE", "STRING_TYPE_HINGE_ANGLE", "TYPE_ALL", "TYPE_DEVICE_PRIVATE_BASE", "SENSOR_FLAG_WAKE_UP_SENSOR", "REPORTING_MODE_CONTINUOUS", "REPORTING_MODE_ON_CHANGE", "REPORTING_MODE_ONE_SHOT", "REPORTING_MODE_SPECIAL_TRIGGER", "REPORTING_MODE_MASK", "REPORTING_MODE_SHIFT", "DATA_INJECTION_MASK", "DATA_INJECTION_SHIFT", "DYNAMIC_SENSOR_MASK", "DYNAMIC_SENSOR_SHIFT", "ADDITIONAL_INFO_MASK", "ADDITIONAL_INFO_SHIFT", "DIRECT_REPORT_MASK", "DIRECT_REPORT_SHIFT", "DIRECT_CHANNEL_MASK", "DIRECT_CHANNEL_SHIFT", "sSensorReportingModes", "mName", "mVendor", "mVersion", "mHandle", "mType", "mMaxRange", "mResolution", "mPower", "mMinDelay", "mFifoReservedEventCount", "mFifoMaxEventCount", "mStringType", "mRequiredPermission", "mMaxDelay", "mFlags", "mId" ],
  "methodNames" : [ "public int getReportingMode()", "public int getHighestDirectReportRateLevel()", "public boolean isDirectChannelTypeSupported(@SensorDirectChannel.MemoryType int sharedMemType)", " static int getMaxLengthValuesArray(Sensor sensor, int sdkLevel)", "public String getName()", "public String getVendor()", "public int getType()", "public int getVersion()", "public float getMaximumRange()", "public float getResolution()", "public float getPower()", "public int getMinDelay()", "public int getFifoReservedEventCount()", "public int getFifoMaxEventCount()", "public String getStringType()", "public java.util.UUID getUuid()", "public int getId()", "public String getRequiredPermission()", "public int getHandle()", "public int getMaxDelay()", "public boolean isWakeUpSensor()", "public boolean isDynamicSensor()", "public boolean isAdditionalInfoSupported()", "public boolean isDataInjectionSupported()", " void setRange(float max, float res)", "public String toString()", "private boolean setType(int value)", "private void setUuid(long msb, long lsb)" ]
}