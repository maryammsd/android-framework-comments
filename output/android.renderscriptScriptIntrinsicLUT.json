{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/ScriptIntrinsicLUT.java",
  "packageName" : "android.renderscript",
  "className" : "ScriptIntrinsicLUT",
  "comment" : "\n * Intrinsic for applying a per-channel lookup table. Each\n * channel of the input has an independant lookup table. The\n * tables are 256 entries in size and can cover the full value\n * range of {@link Element#U8_4}.\n *",
  "variables" : [ {
    "name" : "mMatrix",
    "type" : "Matrix4f",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTables",
    "type" : "Allocation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCache",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDirty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ScriptIntrinsicLUT create(RenderScript rs, Element e)",
    "returnType" : "ScriptIntrinsicLUT",
    "comment" : "\n     * Supported elements types are {@link Element#U8_4}\n     *\n     * The defaults tables are identity.\n     *\n     * @param rs The RenderScript context\n     * @param e Element type for intputs and outputs\n     *\n     * @return ScriptIntrinsicLUT\n     ",
    "links" : [ "Element#U8_4" ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validate(int index, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRed(int index, int value)",
    "returnType" : "void",
    "comment" : "\n     * Set an entry in the red channel lookup table\n     *\n     * @param index Must be 0-255\n     * @param value Must be 0-255\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGreen(int index, int value)",
    "returnType" : "void",
    "comment" : "\n     * Set an entry in the green channel lookup table\n     *\n     * @param index Must be 0-255\n     * @param value Must be 0-255\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBlue(int index, int value)",
    "returnType" : "void",
    "comment" : "\n     * Set an entry in the blue channel lookup table\n     *\n     * @param index Must be 0-255\n     * @param value Must be 0-255\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int index, int value)",
    "returnType" : "void",
    "comment" : "\n     * Set an entry in the alpha channel lookup table\n     *\n     * @param index Must be 0-255\n     * @param value Must be 0-255\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Invoke the kernel and apply the lookup to each cell of ain\n     * and copy to aout.\n     *\n     * @param ain Input allocation\n     * @param aout Output allocation\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Invoke the kernel and apply the lookup to each cell of ain\n     * and copy to aout.\n     *\n     * @param ain Input allocation\n     * @param aout Output allocation\n     * @param opt Options for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelID()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for this intrinsic kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mMatrix", "mTables", "mCache", "mDirty" ],
  "methodNames" : [ "public static ScriptIntrinsicLUT create(RenderScript rs, Element e)", "public void destroy()", "private void validate(int index, int value)", "public void setRed(int index, int value)", "public void setGreen(int index, int value)", "public void setBlue(int index, int value)", "public void setAlpha(int index, int value)", "public void forEach(Allocation ain, Allocation aout)", "public void forEach(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelID()" ]
}