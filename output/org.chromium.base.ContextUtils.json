{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/ContextUtils.java",
  "packageName" : "org.chromium.base",
  "className" : "ContextUtils",
  "comment" : " This class provides Android application context related utility methods. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sApplicationContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECEIVER_EXPORTED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link Context#registerReceiver}: The receiver can receive broadcasts from other\n     * Apps. Has the same behavior as marking a statically registered receiver with \"exported=true\".\n     *\n     * TODO(mthiesse): Move to ApiHelperForT when we build against T SDK.\n     ",
    "links" : [ "android.content.Context#registerReceiver" ]
  }, {
    "name" : "RECEIVER_NOT_EXPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Context getApplicationContext()",
    "returnType" : "Context",
    "comment" : "\n     * Get the Android application context.\n     *\n     * Under normal circumstances there is only one application context in a process, so it's safe\n     * to treat this as a global. In WebView it's possible for more than one app using WebView to be\n     * running in a single process, but this mechanism is rarely used and this is not the only\n     * problem in that scenario, so we don't currently forbid using it as a global.\n     *\n     * Do not downcast the context returned by this method to Application (or any subclass). It may\n     * not be an Application object; it may be wrapped in a ContextWrapper. The only assumption you\n     * may make is that it is a Context whose lifetime is the same as the lifetime of the process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void initApplicationContext(Context appContext)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the java application context.\n     *\n     * This should be called exactly once early on during startup, before native is loaded and\n     * before any other clients make use of the application context through this class.\n     *\n     * @param appContext The application context.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SharedPreferences fetchAppSharedPreferences()",
    "returnType" : "SharedPreferences",
    "comment" : "\n     * Only called by the static holder class and tests.\n     *\n     * @return The application-wide shared preferences.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SharedPreferences getAppSharedPreferences()",
    "returnType" : "SharedPreferences",
    "comment" : "\n     * This is used to ensure that we always use the application context to fetch the default shared\n     * preferences. This avoids needless I/O for android N and above. It also makes it clear that\n     * the app-wide shared preference is desired, rather than the potentially context-specific one.\n     *\n     * @return application-wide shared preferences.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void initApplicationContextForTests(Context appContext)",
    "returnType" : "void",
    "comment" : "\n     * Occasionally tests cannot ensure the application context doesn't change between tests (junit)\n     * and sometimes specific tests has its own special needs, initApplicationContext should be used\n     * as much as possible, but this method can be used to override it.\n     *\n     * @param appContext The new application context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void clearApplicationContextForTests()",
    "returnType" : "void",
    "comment" : "\n     * Tests that use the applicationContext may unintentionally use the Context\n     * set by a previously run test.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void initJavaSideApplicationContext(Context appContext)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AssetManager getApplicationAssets()",
    "returnType" : "AssetManager",
    "comment" : "\n     * In most cases, {@link Context#getAssets()} can be used directly. Modified resources are\n     * used downstream and are set up on application startup, and this method provides access to\n     * regular assets before that initialization is complete.\n     *\n     * This method should ONLY be used for accessing files within the assets folder.\n     *\n     * @return Application assets.\n     ",
    "links" : [ "android.content.Context#getAssets()" ]
  }, {
    "name" : "public static boolean isIsolatedProcess()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the process is isolated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSdkSandboxProcess()",
    "returnType" : "boolean",
    "comment" : "\n     * @return if current process is SdkSandbox process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getProcessName()",
    "returnType" : "String",
    "comment" : " @return The name of the current process. E.g. \"org.chromium.chrome:privileged_process0\". ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProcess64Bit()",
    "returnType" : "boolean",
    "comment" : " @return Whether the current process is 64-bit. ",
    "links" : [ ]
  }, {
    "name" : "public static Activity activityFromContext(@Nullable Context context)",
    "returnType" : "Activity",
    "comment" : "\n     * Extract the {@link Activity} if the given {@link Context} either is or wraps one.\n     *\n     * @param context The context to check.\n     * @return Extracted activity if it exists, otherwise null.\n     ",
    "links" : [ "android.content.Context", "android.app.Activity" ]
  }, {
    "name" : "public static Intent registerProtectedBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter)",
    "returnType" : "Intent",
    "comment" : "\n     * Register a broadcast receiver that may only accept protected broadcasts.\n     *\n     * You should (only) use this method when:\n     * <p><ul>\n     * <li>You need to receive protected broadcasts.\n     * </ul><p>\n     * This method does not presently verify that the provided IntentFilter covers only protected\n     * broadcasts, so you should make sure that the broadcasts you register for are in fact\n     * protected broadcasts. The Android platform's <a\n     * href=\"https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/res/AndroidManifest.xml\">\n     * AndroidManifest.xml</a> contains a list of broadcasts which should be common to all devices.\n     * You should be careful about using broadcasts which appear to be protected, but are not listed\n     * in the platform's manifest, as they may not be protected on all devices. Different versions\n     * or builds of Android may have different sets of protected broadcasts, so add appropriate\n     * guards if needed.\n     * <p>\n     * You can unregister receivers using the normal {@link Context#unregisterReceiver} method.\n     ",
    "links" : [ "android.content.Context#unregisterReceiver" ]
  }, {
    "name" : "public static Intent registerProtectedBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter, Handler scheduler)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Intent registerExportedBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter, String permission)",
    "returnType" : "Intent",
    "comment" : "\n     * Register a broadcast receiver that may accept broadcasts from any UID.\n     *\n     * You should (only) use exported receivers when:\n     * <p><ul>\n     * <li>You need to receive unprotected broadcasts from other applications.\n     * <li>Using unprotected sticky broadcasts - either from this application or another.\n     * </ul><p>\n     * Broadcasts received by exported receivers are untrustworthy and must be treated with caution.\n     * <p>\n     * You can unregister receivers using the normal {@link Context#unregisterReceiver} method.\n     ",
    "links" : [ "android.content.Context#unregisterReceiver" ]
  }, {
    "name" : "public static Intent registerNonExportedBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter)",
    "returnType" : "Intent",
    "comment" : "\n     * Register a broadcast receiver that may only accept broadcasts coming from the root, system,\n     * or this app's own UIDs.\n     *\n     * You should generally prefer using this over the exported counterpart,\n     * {@link #registerExportedBroadcastReceiver(Context, BroadcastReceiver, IntentFilter, String)},\n     * unless you meet a specific requirement specified in that method's documentation.\n     * <p>\n     * Even though most protected broadcasts come from the system UID, and could thus be received by\n     * a non-exported receiver, you should instead use registerProtectedBroadcastReceiver for all\n     * protected broadcasts.\n     * <p>\n     * You should (only) use non-exported receivers when:\n     * <p><ul>\n     * <li>You want to send and receive (non-sticky) broadcasts solely within the same application.\n     * <li>You want to receive the result of a PendingIntent that you have provided to some other\n     * application or service.\n     * </ul><p>\n     * Note that older versions of Android do not enforce non-exported receivers, so you should\n     * still not trust received Intents without some additional authentication mechanism. Note that\n     * you generally cannot use Android permissions for this because embedded WebViews will only\n     * inherit the permissions of the embedding application. Consider using\n     * {@link org.chromium.base.IntentUtils#addTrustedIntentExtras} and\n     * {@link org.chromium.base.IntentUtils#isTrustedIntentFromSelf} to verify the Intent's sender.\n     * <p>\n     * Usually, when working with non-exported receivers, you should also make sure that any related\n     * Intents that you send are not broadcast to other apps. This can be done using\n     * {@link Intent#setPackage} with {@link Context#getPackageName}, and must be done before\n     * calling {@link org.chromium.base.IntentUtils#addTrustedIntentExtras}.\n     * <p>\n     * You can unregister receivers using the normal {@link Context#unregisterReceiver} method.\n     ",
    "links" : [ "android.content.Intent#setPackage", "#registerExportedBroadcastReceiver(Context", "org.chromium.base.IntentUtils#addTrustedIntentExtras", "android.content.Context#unregisterReceiver", "org.chromium.base.IntentUtils#isTrustedIntentFromSelf", "android.content.Context#getPackageName" ]
  }, {
    "name" : "public static Intent registerNonExportedBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter, Handler scheduler)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Intent registerBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter, String permission, Handler scheduler, int flags)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Context getApplicationContext()", "public static void initApplicationContext(Context appContext)", "private static SharedPreferences fetchAppSharedPreferences()", "public static SharedPreferences getAppSharedPreferences()", "public static void initApplicationContextForTests(Context appContext)", "public static void clearApplicationContextForTests()", "private static void initJavaSideApplicationContext(Context appContext)", "public static AssetManager getApplicationAssets()", "public static boolean isIsolatedProcess()", "public static boolean isSdkSandboxProcess()", "public static String getProcessName()", "public static boolean isProcess64Bit()", "public static Activity activityFromContext(@Nullable Context context)", "public static Intent registerProtectedBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter)", "public static Intent registerProtectedBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter, Handler scheduler)", "public static Intent registerExportedBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter, String permission)", "public static Intent registerNonExportedBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter)", "public static Intent registerNonExportedBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter, Handler scheduler)", "private static Intent registerBroadcastReceiver(Context context, BroadcastReceiver receiver, IntentFilter filter, String permission, Handler scheduler, int flags)" ],
  "variableNames" : [ "TAG", "sApplicationContext", "RECEIVER_EXPORTED", "RECEIVER_NOT_EXPORTED" ]
}