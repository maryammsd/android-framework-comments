{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/UCharacterName.java",
  "packageName" : "android.icu.impl",
  "className" : "AlgorithmName",
  "comment" : "\n    * Algorithmic name class\n    ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TYPE_0_",
    "type" : "int",
    "comment" : "\n        * Constant type value of the different AlgorithmName\n        ",
    "links" : [ ]
  }, {
    "name" : "TYPE_1_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_rangestart_",
    "type" : "int",
    "comment" : "\n        * Algorithmic data information\n        ",
    "links" : [ ]
  }, {
    "name" : "m_rangeend_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_type_",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_variant_",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_factor_",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_prefix_",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_factorstring_",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_utilStringBuffer_",
    "type" : "StringBuffer",
    "comment" : "\n         * Utility StringBuffer\n         ",
    "links" : [ ]
  }, {
    "name" : "m_utilIntBuffer_",
    "type" : "int[]",
    "comment" : "\n         * Utility int buffer\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean setInfo(int rangestart, int rangeend, byte type, byte variant)",
    "returnType" : "boolean",
    "comment" : "\n        * Sets the information for accessing the algorithmic names\n        * @param rangestart starting code point that lies within this name group\n        * @param rangeend end code point that lies within this name group\n        * @param type algorithm type. There's 2 kinds of algorithmic type. First\n        *        which uses code point as part of its name and the other uses\n        *        variant postfix strings\n        * @param variant algorithmic variant\n        * @return true if values are valid\n        ",
    "links" : [ ]
  }, {
    "name" : " boolean setFactor(char[] factor)",
    "returnType" : "boolean",
    "comment" : "\n        * Sets the factor data\n        * @param factor Array of factor\n        * @return true if factors are valid\n        ",
    "links" : [ ]
  }, {
    "name" : " boolean setPrefix(String prefix)",
    "returnType" : "boolean",
    "comment" : "\n        * Sets the name prefix\n        * @param prefix\n        * @return true if prefix is set\n        ",
    "links" : [ ]
  }, {
    "name" : " boolean setFactorString(byte[] string)",
    "returnType" : "boolean",
    "comment" : "\n        * Sets the variant factorized name data\n        * @param string variant factorized name data\n        * @return true if values are set\n        ",
    "links" : [ ]
  }, {
    "name" : " boolean contains(int ch)",
    "returnType" : "boolean",
    "comment" : "\n        * Checks if code point lies in Algorithm object at index\n        * @param ch code point\n        ",
    "links" : [ ]
  }, {
    "name" : " void appendName(int ch, StringBuffer str)",
    "returnType" : "void",
    "comment" : "\n        * Appends algorithm name of code point into StringBuffer.\n        * Note this method does not check for validity of code point in Algorithm,\n        * result is undefined if code point does not belong in Algorithm.\n        * @param ch code point\n        * @param str StringBuffer to append to\n        ",
    "links" : [ ]
  }, {
    "name" : " int getChar(String name)",
    "returnType" : "int",
    "comment" : "\n        * Gets the character for the argument algorithmic name\n        * @return the algorithmic char or -1 otherwise.\n        ",
    "links" : [ ]
  }, {
    "name" : " int add(int[] set, int maxlength)",
    "returnType" : "int",
    "comment" : "\n         * Adds all chars in the set of algorithmic names into the set.\n         * Equivalent to part of calcAlgNameSetsLengths.\n         * @param set int set to add the chars of the algorithm names into\n         * @param maxlength maximum length to compare to\n         * @return the length that is either maxlength of the length of this\n         *         algorithm name if it is longer than maxlength\n         ",
    "links" : [ ]
  }, {
    "name" : "private String getFactorString(int[] index, int length)",
    "returnType" : "String",
    "comment" : "\n        * Gets the indexth string in each of the argument factor block\n        * @param index array with each index corresponding to each factor block\n        * @param length length of the array index\n        * @return the combined string of the array of indexth factor string in\n        *         factor block\n        ",
    "links" : [ ]
  }, {
    "name" : "private boolean compareFactorString(int[] index, int length, String str, int offset)",
    "returnType" : "boolean",
    "comment" : "\n        * Compares the indexth string in each of the argument factor block with\n        * the argument string\n        * @param index array with each index corresponding to each factor block\n        * @param length index array length\n        * @param str string to compare with\n        * @param offset of str to start comparison\n        * @return true if string matches\n        ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean setInfo(int rangestart, int rangeend, byte type, byte variant)", " boolean setFactor(char[] factor)", " boolean setPrefix(String prefix)", " boolean setFactorString(byte[] string)", " boolean contains(int ch)", " void appendName(int ch, StringBuffer str)", " int getChar(String name)", " int add(int[] set, int maxlength)", "private String getFactorString(int[] index, int length)", "private boolean compareFactorString(int[] index, int length, String str, int offset)" ],
  "variableNames" : [ "TYPE_0_", "TYPE_1_", "m_rangestart_", "m_rangeend_", "m_type_", "m_variant_", "m_factor_", "m_prefix_", "m_factorstring_", "m_utilStringBuffer_", "m_utilIntBuffer_" ]
}