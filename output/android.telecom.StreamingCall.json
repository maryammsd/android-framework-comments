{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/StreamingCall.java",
  "packageName" : "android.telecom",
  "className" : "StreamingCall",
  "comment" : "\n * Represents a voip call requested to stream to another device that the general streaming sender\n * app should present to the receiver.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "STATE_STREAMING",
    "type" : "int",
    "comment" : "\n     * The state of a {@code StreamingCall} when newly created. General streaming sender should\n     * continuously stream call audio to the sender device as long as the {@code StreamingCall} is\n     * in this state.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_HOLDING",
    "type" : "int",
    "comment" : "\n     * The state of a {@code StreamingCall} when in a holding state.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_DISCONNECTED",
    "type" : "int",
    "comment" : "\n     * The state of a {@code StreamingCall} when it's either disconnected or pulled back to the\n     * original device.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CALL_ID",
    "type" : "String",
    "comment" : "\n     * The ID associated with this call.  This is the same value as {@link CallControl#getCallId()}.\n     ",
    "links" : [ "android.telecom.CallControl#getCallId()" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<StreamingCall>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComponentName",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayName",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddress",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "StreamingCallAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@androidx.annotation.NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAdapter(StreamingCallAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getComponentName()",
    "returnType" : "ComponentName",
    "comment" : "\n     * @return The {@link ComponentName} to identify the original voip app of this\n     * {@code StreamingCall}. General streaming sender app can use this to query necessary\n     * information (app icon etc.) in order to present notification of the streaming call on the\n     * receiver side.\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "public CharSequence getDisplayName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @return The display name that the general streaming sender app can use this to present the\n     * {@code StreamingCall} to the receiver side.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri getAddress()",
    "returnType" : "Uri",
    "comment" : "\n     * @return The address (e.g., phone number) to which the {@code StreamingCall} is currently\n     * connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * @return The state of this {@code StreamingCall}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * @return The extra info the general streaming app need to stream the call from voip app or\n     * D2DI sdk.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestStreamingState(@StreamingCallState int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets the state of this {@code StreamingCall}. The general streaming sender app can use this\n     * to request holding, unholding and disconnecting this {@code StreamingCall}.\n     * @param state The current streaming state of the call.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int describeContents()", "public void writeToParcel(@androidx.annotation.NonNull Parcel dest, int flags)", "public void setAdapter(StreamingCallAdapter adapter)", "public ComponentName getComponentName()", "public CharSequence getDisplayName()", "public Uri getAddress()", "public int getState()", "public Bundle getExtras()", "public void requestStreamingState(@StreamingCallState int state)" ],
  "variableNames" : [ "STATE_STREAMING", "STATE_HOLDING", "STATE_DISCONNECTED", "EXTRA_CALL_ID", "CREATOR", "mComponentName", "mDisplayName", "mAddress", "mExtras", "mState", "mAdapter" ]
}