{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaCodecInfo.java",
  "packageName" : "android.media",
  "className" : "AudioCapabilities",
  "comment" : "\n     * A class that supports querying the audio capabilities of a codec.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParent",
    "type" : "CodecCapabilities",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBitrateRange",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSampleRates",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSampleRateRanges",
    "type" : "Range<Integer>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputChannelRanges",
    "type" : "Range<Integer>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_INPUT_CHANNEL_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LEVEL_CRITICAL_FORMAT_KEYS",
    "type" : "Set<String>",
    "comment" : " must not contain KEY_PROFILE",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Range<Integer> getBitrateRange()",
    "returnType" : "Range<Integer>",
    "comment" : "\n         * Returns the range of supported bitrates in bits/second.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int[] getSupportedSampleRates()",
    "returnType" : "int[]",
    "comment" : "\n         * Returns the array of supported sample rates if the codec\n         * supports only discrete values.  Otherwise, it returns\n         * {@code null}.  The array is sorted in ascending order.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Range<Integer>[] getSupportedSampleRateRanges()",
    "returnType" : "Range<Integer>[]",
    "comment" : "\n         * Returns the array of supported sample rate ranges.  The\n         * array is sorted in ascending order, and the ranges are\n         * distinct.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxInputChannelCount()",
    "returnType" : "int",
    "comment" : "\n         * Returns the maximum number of input channels supported.\n         *\n         * Through {@link android.os.Build.VERSION_CODES#R}, this method indicated support\n         * for any number of input channels between 1 and this maximum value.\n         *\n         * As of {@link android.os.Build.VERSION_CODES#S},\n         * the implied lower limit of 1 channel is no longer valid.\n         * As of {@link android.os.Build.VERSION_CODES#S}, {@link #getMaxInputChannelCount} is\n         * superseded by {@link #getInputChannelCountRanges},\n         * which returns an array of ranges of channels.\n         * The {@link #getMaxInputChannelCount} method will return the highest value\n         * in the ranges returned by {@link #getInputChannelCountRanges}\n         *\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#R", "#getInputChannelCountRanges", "android.os.Build.VERSION_CODES#S", "#getMaxInputChannelCount" ]
  }, {
    "name" : "public int getMinInputChannelCount()",
    "returnType" : "int",
    "comment" : "\n         * Returns the minimum number of input channels supported.\n         * This is often 1, but does vary for certain mime types.\n         *\n         * This returns the lowest channel count in the ranges returned by\n         * {@link #getInputChannelCountRanges}.\n         ",
    "links" : [ "#getInputChannelCountRanges" ]
  }, {
    "name" : "public Range<Integer>[] getInputChannelCountRanges()",
    "returnType" : "Range<Integer>[]",
    "comment" : "\n         * Returns an array of ranges representing the number of input channels supported.\n         * The codec supports any number of input channels within this range.\n         *\n         * This supersedes the {@link #getMaxInputChannelCount} method.\n         *\n         * For many codecs, this will be a single range [1..N], for some N.\n         ",
    "links" : [ "#getMaxInputChannelCount" ]
  }, {
    "name" : "public static AudioCapabilities create(MediaFormat info, CodecCapabilities parent)",
    "returnType" : "AudioCapabilities",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void init(MediaFormat info, CodecCapabilities parent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initWithPlatformLimits()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean supports(Integer sampleRate, Integer inputChannels)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSampleRateSupported(int sampleRate)",
    "returnType" : "boolean",
    "comment" : "\n         * Query whether the sample rate is supported by the codec.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void limitSampleRates(int[] rates)",
    "returnType" : "void",
    "comment" : " modifies rates ",
    "links" : [ ]
  }, {
    "name" : "private void createDiscreteSampleRates()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void limitSampleRates(Range<Integer>[] rateRanges)",
    "returnType" : "void",
    "comment" : " modifies rateRanges ",
    "links" : [ ]
  }, {
    "name" : "private void applyLevelLimits()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyLimits(Range<Integer>[] inputChannels, Range<Integer> bitRates)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseFromInfo(MediaFormat info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getDefaultFormat(MediaFormat format)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsFormat(MediaFormat format)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Range<Integer> getBitrateRange()", "public int[] getSupportedSampleRates()", "public Range<Integer>[] getSupportedSampleRateRanges()", "public int getMaxInputChannelCount()", "public int getMinInputChannelCount()", "public Range<Integer>[] getInputChannelCountRanges()", "public static AudioCapabilities create(MediaFormat info, CodecCapabilities parent)", "private void init(MediaFormat info, CodecCapabilities parent)", "private void initWithPlatformLimits()", "private boolean supports(Integer sampleRate, Integer inputChannels)", "public boolean isSampleRateSupported(int sampleRate)", "private void limitSampleRates(int[] rates)", "private void createDiscreteSampleRates()", "private void limitSampleRates(Range<Integer>[] rateRanges)", "private void applyLevelLimits()", "private void applyLimits(Range<Integer>[] inputChannels, Range<Integer> bitRates)", "private void parseFromInfo(MediaFormat info)", "public void getDefaultFormat(MediaFormat format)", "public boolean supportsFormat(MediaFormat format)" ],
  "variableNames" : [ "TAG", "mParent", "mBitrateRange", "mSampleRates", "mSampleRateRanges", "mInputChannelRanges", "MAX_INPUT_CHANNEL_COUNT", "AUDIO_LEVEL_CRITICAL_FORMAT_KEYS" ]
}