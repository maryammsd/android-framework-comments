{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemCopy.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemCopy",
  "comment" : "\n * Implement xsl:copy.\n * <pre>\n * <!ELEMENT xsl:copy %template;>\n * <!ATTLIST xsl:copy\n *   %space-att;\n *   use-attribute-sets %qnames; #IMPLIED\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#copying\">copying in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element \n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return This element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * The xsl:copy element provides an easy way of copying the current node.\n   * Executing this function creates a copy of the current node into the\n   * result tree.\n   * <p>The namespace nodes of the current node are automatically\n   * copied as well, but the attributes and children of the node are not\n   * automatically copied. The content of the xsl:copy element is a\n   * template for the attributes and children of the created node;\n   * the content is instantiated only for nodes of types that can have\n   * attributes or children (i.e. root nodes and element nodes).</p>\n   * <p>The root node is treated specially because the root node of the\n   * result tree is created implicitly. When the current node is the\n   * root node, xsl:copy will not create a root node, but will just use\n   * the content template.</p>\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getXSLToken()", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException" ],
  "variableNames" : [ "serialVersionUID" ]
}