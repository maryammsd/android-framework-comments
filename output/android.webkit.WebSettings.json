{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/webkit/WebSettings.java",
  "packageName" : "android.webkit",
  "className" : "WebSettings",
  "comment" : " WebViewProvider.getWebSettingsProvider() method implementation.",
  "links" : [ ],
  "variables" : [ {
    "name" : "ENABLE_SIMPLIFIED_DARK_MODE",
    "type" : "long",
    "comment" : "\n     * Enable web content to apply light or dark style according to the app's theme\n     * and WebView to attempt to darken web content by algorithmic darkening when\n     * appropriate.\n     *\n     * Refer to {@link #setAlgorithmicDarkeningAllowed} for detail.\n     *\n     * @hide\n     ",
    "links" : [ "#setAlgorithmicDarkeningAllowed" ]
  }, {
    "name" : "LOAD_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default cache usage mode. If the navigation type doesn't impose any\n     * specific behavior, use cached resources when they are available\n     * and not expired, otherwise load resources from the network.\n     * Use with {@link #setCacheMode}.\n     ",
    "links" : [ "#setCacheMode" ]
  }, {
    "name" : "LOAD_NORMAL",
    "type" : "int",
    "comment" : "\n     * Normal cache usage mode. Use with {@link #setCacheMode}.\n     *\n     * @deprecated This value is obsolete, as from API level\n     * {@link android.os.Build.VERSION_CODES#HONEYCOMB} and onwards it has the\n     * same effect as {@link #LOAD_DEFAULT}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#HONEYCOMB", "#LOAD_DEFAULT", "#setCacheMode" ]
  }, {
    "name" : "LOAD_CACHE_ELSE_NETWORK",
    "type" : "int",
    "comment" : "\n     * Use cached resources when they are available, even if they have expired.\n     * Otherwise load resources from the network.\n     * Use with {@link #setCacheMode}.\n     ",
    "links" : [ "#setCacheMode" ]
  }, {
    "name" : "LOAD_NO_CACHE",
    "type" : "int",
    "comment" : "\n     * Don't use the cache, load from the network.\n     * Use with {@link #setCacheMode}.\n     ",
    "links" : [ "#setCacheMode" ]
  }, {
    "name" : "LOAD_CACHE_ONLY",
    "type" : "int",
    "comment" : "\n     * Don't use the network, load from the cache.\n     * Use with {@link #setCacheMode}.\n     ",
    "links" : [ "#setCacheMode" ]
  }, {
    "name" : "MIXED_CONTENT_ALWAYS_ALLOW",
    "type" : "int",
    "comment" : "\n     * In this mode, the WebView will allow a secure origin to load content from any other origin,\n     * even if that origin is insecure. This is the least secure mode of operation for the WebView,\n     * and where possible apps should not set this mode.\n     *\n     * @see #setMixedContentMode\n     ",
    "links" : [ ]
  }, {
    "name" : "MIXED_CONTENT_NEVER_ALLOW",
    "type" : "int",
    "comment" : "\n     * In this mode, the WebView will not allow a secure origin to load content from an insecure\n     * origin. This is the preferred and most secure mode of operation for the WebView and apps are\n     * strongly advised to use this mode.\n     *\n     * @see #setMixedContentMode\n     ",
    "links" : [ ]
  }, {
    "name" : "MIXED_CONTENT_COMPATIBILITY_MODE",
    "type" : "int",
    "comment" : "\n     * In this mode, the WebView will attempt to be compatible with the approach of a modern web\n     * browser with regard to mixed content. Some insecure content may be allowed to be loaded by\n     * a secure origin and other types of content will be blocked. The types of content are allowed\n     * or blocked may change release to release and are not explicitly defined.\n     *\n     * This mode is intended to be used by apps that are not in control of the content that they\n     * render but desire to operate in a reasonably secure environment. For highest security, apps\n     * are recommended to use {@link #MIXED_CONTENT_NEVER_ALLOW}.\n     *\n     * @see #setMixedContentMode\n     ",
    "links" : [ "#MIXED_CONTENT_NEVER_ALLOW" ]
  }, {
    "name" : "FORCE_DARK_OFF",
    "type" : "int",
    "comment" : "\n     * Disable force dark, irrespective of the force dark mode of the WebView parent. In this mode,\n     * WebView content will always be rendered as-is, regardless of whether native views are being\n     * automatically darkened.\n     *\n     * @see #setForceDark\n     * @deprecated refer to {@link #setForceDark}\n     ",
    "links" : [ "#setForceDark" ]
  }, {
    "name" : "FORCE_DARK_AUTO",
    "type" : "int",
    "comment" : "\n     * Enable force dark dependent on the state of the WebView parent view. If the WebView parent\n     * view is being automatically force darkened\n     * (see: {@link android.view.View#setForceDarkAllowed}), then WebView content will be rendered\n     * so as to emulate a dark theme. WebViews that are not attached to the view hierarchy will not\n     * be inverted.\n     *\n     * @see #setForceDark\n     * @deprecated refer to {@link #setForceDark}\n     ",
    "links" : [ "android.view.View#setForceDarkAllowed", "#setForceDark" ]
  }, {
    "name" : "FORCE_DARK_ON",
    "type" : "int",
    "comment" : "\n     * Unconditionally enable force dark. In this mode WebView content will always be rendered so\n     * as to emulate a dark theme.\n     *\n     * @see #setForceDark\n     * @deprecated refer to {@link #setForceDark}\n     ",
    "links" : [ "#setForceDark" ]
  }, {
    "name" : "MENU_ITEM_NONE",
    "type" : "int",
    "comment" : "\n     * No menu items should be disabled.\n     *\n     * @see #setDisabledActionModeMenuItems\n     ",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_SHARE",
    "type" : "int",
    "comment" : "\n     * Disable menu item \"Share\".\n     *\n     * @see #setDisabledActionModeMenuItems\n     ",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_WEB_SEARCH",
    "type" : "int",
    "comment" : "\n     * Disable menu item \"Web Search\".\n     *\n     * @see #setDisabledActionModeMenuItems\n     ",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_PROCESS_TEXT",
    "type" : "int",
    "comment" : "\n     * Disable all the action mode menu items for text processing.\n     * By default WebView searches for activities that are able to handle\n     * {@link android.content.Intent#ACTION_PROCESS_TEXT} and show them in the\n     * action mode menu. If this flag is set via {@link\n     * #setDisabledActionModeMenuItems}, these menu items will be disabled.\n     *\n     * @see #setDisabledActionModeMenuItems\n     ",
    "links" : [ "android.content.Intent#ACTION_PROCESS_TEXT", "#setDisabledActionModeMenuItems" ]
  } ],
  "methods" : [ {
    "name" : "public abstract void setNavDump(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables dumping the pages navigation cache to a text file. The default\n     * is {@code false}.\n     *\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public abstract boolean getNavDump()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether dumping the navigation cache is enabled.\n     *\n     * @return whether dumping the navigation cache is enabled\n     * @see #setNavDump\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public abstract void setSupportZoom(boolean support)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView should support zooming using its on-screen zoom\n     * controls and gestures. The particular zoom mechanisms that should be used\n     * can be set with {@link #setBuiltInZoomControls}. This setting does not\n     * affect zooming performed using the {@link WebView#zoomIn()} and\n     * {@link WebView#zoomOut()} methods. The default is {@code true}.\n     *\n     * @param support whether the WebView should support zoom\n     ",
    "links" : [ "#setBuiltInZoomControls", "android.webkit.WebView#zoomIn()", "android.webkit.WebView#zoomOut()" ]
  }, {
    "name" : "public abstract boolean supportZoom()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView supports zoom.\n     *\n     * @return {@code true} if the WebView supports zoom\n     * @see #setSupportZoom\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setMediaPlaybackRequiresUserGesture(boolean require)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView requires a user gesture to play media.\n     * The default is {@code true}.\n     *\n     * @param require whether the WebView requires a user gesture to play media\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getMediaPlaybackRequiresUserGesture()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView requires a user gesture to play media.\n     *\n     * @return {@code true} if the WebView requires a user gesture to play media\n     * @see #setMediaPlaybackRequiresUserGesture\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setBuiltInZoomControls(boolean enabled)",
    "returnType" : "void",
    "comment" : " {@link WebView#getZoomControls}, which is now hidden.",
    "links" : [ "android.webkit.WebView#getZoomControls" ]
  }, {
    "name" : "public abstract boolean getBuiltInZoomControls()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the zoom mechanisms built into WebView are being used.\n     *\n     * @return {@code true} if the zoom mechanisms built into WebView are being used\n     * @see #setBuiltInZoomControls\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayZoomControls(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView should display on-screen zoom controls when\n     * using the built-in zoom mechanisms. See {@link #setBuiltInZoomControls}.\n     * The default is {@code true}. However, on-screen zoom controls are deprecated\n     * in Android (see {@link android.widget.ZoomButtonsController}) so it's\n     * recommended to set this to {@code false}.\n     *\n     * @param enabled whether the WebView should display on-screen zoom controls\n     ",
    "links" : [ "#setBuiltInZoomControls", "android.widget.ZoomButtonsController" ]
  }, {
    "name" : "public abstract boolean getDisplayZoomControls()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView displays on-screen zoom controls when using\n     * the built-in zoom mechanisms.\n     *\n     * @return {@code true} if the WebView displays on-screen zoom controls when using\n     *         the built-in zoom mechanisms\n     * @see #setDisplayZoomControls\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setAllowFileAccess(boolean allow)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables file access within WebView.\n     * Note that this enables or disables file system access only. Assets and resources\n     * are still accessible using file:///android_asset and file:///android_res.\n     * <p class=\"note\">\n     * <b>Note:</b> Apps should not open {@code file://} URLs from any external source in\n     * WebView, don't enable this if your app accepts arbitrary URLs from external sources.\n     * It's recommended to always use\n     * <a href=\"{@docRoot}reference/androidx/webkit/WebViewAssetLoader\">\n     * androidx.webkit.WebViewAssetLoader</a> to access files including assets and resources over\n     * {@code http(s)://} schemes, instead of {@code file://} URLs. To prevent possible security\n     * issues targeting {@link android.os.Build.VERSION_CODES#Q} and earlier, you should explicitly\n     * set this value to {@code false}.\n     * <p>\n     * The default value is {@code true} for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and below, and {@code false} when targeting\n     * {@link android.os.Build.VERSION_CODES#R} and above.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#R", "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "public abstract boolean getAllowFileAccess()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this WebView supports file access.\n     *\n     * @see #setAllowFileAccess\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setAllowContentAccess(boolean allow)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables content URL access within WebView.  Content URL\n     * access allows WebView to load content from a content provider installed\n     * in the system. The default is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getAllowContentAccess()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this WebView supports content URL access.\n     *\n     * @see #setAllowContentAccess\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setLoadWithOverviewMode(boolean overview)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView loads pages in overview mode, that is,\n     * zooms out the content to fit on screen by width. This setting is\n     * taken into account when the content width is greater than the width\n     * of the WebView control, for example, when {@link #getUseWideViewPort}\n     * is enabled. The default is {@code false}.\n     ",
    "links" : [ "#getUseWideViewPort" ]
  }, {
    "name" : "public abstract boolean getLoadWithOverviewMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this WebView loads pages in overview mode.\n     *\n     * @return whether this WebView loads pages in overview mode\n     * @see #setLoadWithOverviewMode\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setEnableSmoothTransition(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView will enable smooth transition while panning or\n     * zooming or while the window hosting the WebView does not have focus.\n     * If it is {@code true}, WebView will choose a solution to maximize the performance.\n     * e.g. the WebView's content may not be updated during the transition.\n     * If it is false, WebView will keep its fidelity. The default value is {@code false}.\n     *\n     * @deprecated This method is now obsolete, and will become a no-op in future.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean enableSmoothTransition()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView enables smooth transition while panning or\n     * zooming.\n     *\n     * @see #setEnableSmoothTransition\n     *\n     * @deprecated This method is now obsolete, and will become a no-op in future.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setUseWebViewBackgroundForOverscrollBackground(boolean view)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView uses its background for over scroll background.\n     * If {@code true}, it will use the WebView's background. If {@code false}, it will use an\n     * internal pattern. Default is {@code true}.\n     *\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public abstract boolean getUseWebViewBackgroundForOverscrollBackground()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this WebView uses WebView's background instead of\n     * internal pattern for over scroll background.\n     *\n     * @see #setUseWebViewBackgroundForOverscrollBackground\n     * @deprecated This method is now obsolete.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public abstract void setSaveFormData(boolean save)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView should save form data. In Android O, the\n     * platform has implemented a fully functional Autofill feature to store\n     * form data. Therefore, the Webview form data save feature is disabled.\n     *\n     * Note that the feature will continue to be supported on older versions of\n     * Android as before.\n     *\n     * @deprecated In Android O and afterwards, this function does not have\n     * any effect, the form data will be saved to platform's autofill service\n     * if applicable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getSaveFormData()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView saves form data.\n     *\n     * @return whether the WebView saves form data\n     * @see #setSaveFormData\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setSavePassword(boolean save)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView should save passwords. The default is {@code true}.\n     * @deprecated Saving passwords in WebView will not be supported in future versions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getSavePassword()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView saves passwords.\n     *\n     * @return whether the WebView saves passwords\n     * @see #setSavePassword\n     * @deprecated Saving passwords in WebView will not be supported in future versions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setTextZoom(int textZoom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text zoom of the page in percent. The default is 100.\n     *\n     * @param textZoom the text zoom in percent\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getTextZoom()",
    "returnType" : "int",
    "comment" : "\n     * Gets the text zoom of the page in percent.\n     *\n     * @return the text zoom of the page in percent\n     * @see #setTextZoom\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setAcceptThirdPartyCookies(boolean accept)",
    "returnType" : "void",
    "comment" : "\n     * Sets policy for third party cookies.\n     * Developers should access this via {@link CookieManager#setShouldAcceptThirdPartyCookies}.\n     * @hide Internal API.\n     ",
    "links" : [ "android.webkit.CookieManager#setShouldAcceptThirdPartyCookies" ]
  }, {
    "name" : "public abstract boolean getAcceptThirdPartyCookies()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets policy for third party cookies.\n     * Developers should access this via {@link CookieManager#getShouldAcceptThirdPartyCookies}.\n     * @hide Internal API\n     ",
    "links" : [ "android.webkit.CookieManager#getShouldAcceptThirdPartyCookies" ]
  }, {
    "name" : "public synchronized void setTextSize(TextSize t)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text size of the page. The default is {@link TextSize#NORMAL}.\n     *\n     * @param t the text size as a {@link TextSize} value\n     * @deprecated Use {@link #setTextZoom} instead.\n     ",
    "links" : [ "#setTextZoom", "#NORMAL", "TextSize" ]
  }, {
    "name" : "public synchronized TextSize getTextSize()",
    "returnType" : "TextSize",
    "comment" : "\n     * Gets the text size of the page. If the text size was previously specified\n     * in percent using {@link #setTextZoom}, this will return the closest\n     * matching {@link TextSize}.\n     *\n     * @return the text size as a {@link TextSize} value\n     * @see #setTextSize\n     * @deprecated Use {@link #getTextZoom} instead.\n     ",
    "links" : [ "#setTextZoom", "#getTextZoom", "TextSize" ]
  }, {
    "name" : "public abstract void setDefaultZoom(ZoomDensity zoom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default zoom density of the page. This must be called from the UI\n     * thread. The default is {@link ZoomDensity#MEDIUM}.\n     *\n     * This setting is not recommended for use in new applications.  If the WebView\n     * is utilized to display mobile-oriented pages, the desired effect can be achieved by\n     * adjusting 'width' and 'initial-scale' attributes of page's 'meta viewport'\n     * tag. For pages lacking the tag, {@link android.webkit.WebView#setInitialScale}\n     * and {@link #setUseWideViewPort} can be used.\n     *\n     * @param zoom the zoom density\n     * @deprecated This method is no longer supported, see the function documentation for\n     *             recommended alternatives.\n     ",
    "links" : [ "android.webkit.WebView#setInitialScale", "#MEDIUM", "#setUseWideViewPort" ]
  }, {
    "name" : "public abstract ZoomDensity getDefaultZoom()",
    "returnType" : "ZoomDensity",
    "comment" : "\n     * Gets the default zoom density of the page. This should be called from\n     * the UI thread.\n     *\n     * This setting is not recommended for use in new applications.\n     *\n     * @return the zoom density\n     * @see #setDefaultZoom\n     * @deprecated Will only return the default value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setLightTouchEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables using light touches to make a selection and activate mouseovers.\n     * @deprecated From {@link android.os.Build.VERSION_CODES#JELLY_BEAN} this\n     *             setting is obsolete and has no effect.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN" ]
  }, {
    "name" : "public abstract boolean getLightTouchEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether light touches are enabled.\n     * @see #setLightTouchEnabled\n     * @deprecated This setting is obsolete.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUseDoubleTree(boolean use)",
    "returnType" : "void",
    "comment" : "\n     * Controlled a rendering optimization that is no longer present. Setting\n     * it now has no effect.\n     *\n     * @deprecated This setting now has no effect.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public boolean getUseDoubleTree()",
    "returnType" : "boolean",
    "comment" : "\n     * Controlled a rendering optimization that is no longer present. Setting\n     * it now has no effect.\n     *\n     * @deprecated This setting now has no effect.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1" ]
  }, {
    "name" : "public abstract void setUserAgent(int ua)",
    "returnType" : "void",
    "comment" : "\n     * Sets the user-agent string using an integer code.\n     * <ul>\n     *   <li>0 means the WebView should use an Android user-agent string</li>\n     *   <li>1 means the WebView should use a desktop user-agent string</li>\n     * </ul>\n     * Other values are ignored. The default is an Android user-agent string,\n     * i.e. code value 0.\n     *\n     * @param ua the integer code for the user-agent string\n     * @deprecated Please use {@link #setUserAgentString} instead.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "#setUserAgentString" ]
  }, {
    "name" : "public abstract int getUserAgent()",
    "returnType" : "int",
    "comment" : "\n     * Gets the user-agent as an integer code.\n     * <ul>\n     *   <li>-1 means the WebView is using a custom user-agent string set with\n     *   {@link #setUserAgentString}</li>\n     *   <li>0 means the WebView should use an Android user-agent string</li>\n     *   <li>1 means the WebView should use a desktop user-agent string</li>\n     * </ul>\n     *\n     * @return the integer code for the user-agent string\n     * @see #setUserAgent\n     * @deprecated Please use {@link #getUserAgentString} instead.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "#getUserAgentString", "#setUserAgentString" ]
  }, {
    "name" : "public abstract void setUseWideViewPort(boolean use)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView should enable support for the &quot;viewport&quot;\n     * HTML meta tag or should use a wide viewport.\n     * When the value of the setting is {@code false}, the layout width is always set to the\n     * width of the WebView control in device-independent (CSS) pixels.\n     * When the value is {@code true} and the page contains the viewport meta tag, the value\n     * of the width specified in the tag is used. If the page does not contain the tag or\n     * does not provide a width, then a wide viewport will be used.\n     *\n     * @param use whether to enable support for the viewport meta tag\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getUseWideViewPort()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView supports the &quot;viewport&quot;\n     * HTML meta tag or will use a wide viewport.\n     *\n     * @return {@code true} if the WebView supports the viewport meta tag\n     * @see #setUseWideViewPort\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setSupportMultipleWindows(boolean support)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView whether supports multiple windows. If set to\n     * true, {@link WebChromeClient#onCreateWindow} must be implemented by the\n     * host application. The default is {@code false}.\n     *\n     * @param support whether to support multiple windows\n     ",
    "links" : [ "android.webkit.WebChromeClient#onCreateWindow" ]
  }, {
    "name" : "public abstract boolean supportMultipleWindows()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView supports multiple windows.\n     *\n     * @return {@code true} if the WebView supports multiple windows\n     * @see #setSupportMultipleWindows\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setLayoutAlgorithm(LayoutAlgorithm l)",
    "returnType" : "void",
    "comment" : "\n     * Sets the underlying layout algorithm. This will cause a re-layout of the\n     * WebView. The default is {@link LayoutAlgorithm#NARROW_COLUMNS}.\n     *\n     * @param l the layout algorithm to use, as a {@link LayoutAlgorithm} value\n     ",
    "links" : [ "LayoutAlgorithm", "#NARROW_COLUMNS" ]
  }, {
    "name" : "public abstract LayoutAlgorithm getLayoutAlgorithm()",
    "returnType" : "LayoutAlgorithm",
    "comment" : "\n     * Gets the current layout algorithm.\n     *\n     * @return the layout algorithm in use, as a {@link LayoutAlgorithm} value\n     * @see #setLayoutAlgorithm\n     ",
    "links" : [ "LayoutAlgorithm" ]
  }, {
    "name" : "public abstract void setStandardFontFamily(String font)",
    "returnType" : "void",
    "comment" : "\n     * Sets the standard font family name. The default is \"sans-serif\".\n     *\n     * @param font a font family name\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getStandardFontFamily()",
    "returnType" : "String",
    "comment" : "\n     * Gets the standard font family name.\n     *\n     * @return the standard font family name as a string\n     * @see #setStandardFontFamily\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setFixedFontFamily(String font)",
    "returnType" : "void",
    "comment" : "\n     * Sets the fixed font family name. The default is \"monospace\".\n     *\n     * @param font a font family name\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getFixedFontFamily()",
    "returnType" : "String",
    "comment" : "\n     * Gets the fixed font family name.\n     *\n     * @return the fixed font family name as a string\n     * @see #setFixedFontFamily\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setSansSerifFontFamily(String font)",
    "returnType" : "void",
    "comment" : "\n     * Sets the sans-serif font family name. The default is \"sans-serif\".\n     *\n     * @param font a font family name\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getSansSerifFontFamily()",
    "returnType" : "String",
    "comment" : "\n     * Gets the sans-serif font family name.\n     *\n     * @return the sans-serif font family name as a string\n     * @see #setSansSerifFontFamily\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setSerifFontFamily(String font)",
    "returnType" : "void",
    "comment" : "\n     * Sets the serif font family name. The default is \"sans-serif\".\n     *\n     * @param font a font family name\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getSerifFontFamily()",
    "returnType" : "String",
    "comment" : "\n     * Gets the serif font family name. The default is \"serif\".\n     *\n     * @return the serif font family name as a string\n     * @see #setSerifFontFamily\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setCursiveFontFamily(String font)",
    "returnType" : "void",
    "comment" : "\n     * Sets the cursive font family name. The default is \"cursive\".\n     *\n     * @param font a font family name\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getCursiveFontFamily()",
    "returnType" : "String",
    "comment" : "\n     * Gets the cursive font family name.\n     *\n     * @return the cursive font family name as a string\n     * @see #setCursiveFontFamily\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setFantasyFontFamily(String font)",
    "returnType" : "void",
    "comment" : "\n     * Sets the fantasy font family name. The default is \"fantasy\".\n     *\n     * @param font a font family name\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getFantasyFontFamily()",
    "returnType" : "String",
    "comment" : "\n     * Gets the fantasy font family name.\n     *\n     * @return the fantasy font family name as a string\n     * @see #setFantasyFontFamily\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setMinimumFontSize(int size)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum font size. The default is 8.\n     *\n     * @param size a non-negative integer between 1 and 72. Any number outside\n     *             the specified range will be pinned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getMinimumFontSize()",
    "returnType" : "int",
    "comment" : "\n     * Gets the minimum font size.\n     *\n     * @return a non-negative integer between 1 and 72\n     * @see #setMinimumFontSize\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setMinimumLogicalFontSize(int size)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum logical font size. The default is 8.\n     *\n     * @param size a non-negative integer between 1 and 72. Any number outside\n     *             the specified range will be pinned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getMinimumLogicalFontSize()",
    "returnType" : "int",
    "comment" : "\n     * Gets the minimum logical font size.\n     *\n     * @return a non-negative integer between 1 and 72\n     * @see #setMinimumLogicalFontSize\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDefaultFontSize(int size)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default font size. The default is 16.\n     *\n     * @param size a non-negative integer between 1 and 72. Any number outside\n     *             the specified range will be pinned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDefaultFontSize()",
    "returnType" : "int",
    "comment" : "\n     * Gets the default font size.\n     *\n     * @return a non-negative integer between 1 and 72\n     * @see #setDefaultFontSize\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDefaultFixedFontSize(int size)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default fixed font size. The default is 16.\n     *\n     * @param size a non-negative integer between 1 and 72. Any number outside\n     *             the specified range will be pinned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDefaultFixedFontSize()",
    "returnType" : "int",
    "comment" : "\n     * Gets the default fixed font size.\n     *\n     * @return a non-negative integer between 1 and 72\n     * @see #setDefaultFixedFontSize\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setLoadsImagesAutomatically(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView should load image resources. Note that this method\n     * controls loading of all images, including those embedded using the data\n     * URI scheme. Use {@link #setBlockNetworkImage} to control loading only\n     * of images specified using network URI schemes. Note that if the value of this\n     * setting is changed from {@code false} to {@code true}, all images resources referenced\n     * by content currently displayed by the WebView are loaded automatically.\n     * The default is {@code true}.\n     *\n     * @param flag whether the WebView should load image resources\n     ",
    "links" : [ "#setBlockNetworkImage" ]
  }, {
    "name" : "public abstract boolean getLoadsImagesAutomatically()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView loads image resources. This includes\n     * images embedded using the data URI scheme.\n     *\n     * @return {@code true} if the WebView loads image resources\n     * @see #setLoadsImagesAutomatically\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setBlockNetworkImage(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView should not load image resources from the\n     * network (resources accessed via http and https URI schemes).  Note\n     * that this method has no effect unless\n     * {@link #getLoadsImagesAutomatically} returns {@code true}. Also note that\n     * disabling all network loads using {@link #setBlockNetworkLoads}\n     * will also prevent network images from loading, even if this flag is set\n     * to false. When the value of this setting is changed from {@code true} to {@code false},\n     * network images resources referenced by content currently displayed by\n     * the WebView are fetched automatically. The default is {@code false}.\n     *\n     * @param flag whether the WebView should not load image resources from the\n     *             network\n     * @see #setBlockNetworkLoads\n     ",
    "links" : [ "#getLoadsImagesAutomatically", "#setBlockNetworkLoads" ]
  }, {
    "name" : "public abstract boolean getBlockNetworkImage()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView does not load image resources from the network.\n     *\n     * @return {@code true} if the WebView does not load image resources from the network\n     * @see #setBlockNetworkImage\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setBlockNetworkLoads(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView should not load resources from the network.\n     * Use {@link #setBlockNetworkImage} to only avoid loading\n     * image resources. Note that if the value of this setting is\n     * changed from {@code true} to {@code false}, network resources referenced by content\n     * currently displayed by the WebView are not fetched until\n     * {@link android.webkit.WebView#reload} is called.\n     * If the application does not have the\n     * {@link android.Manifest.permission#INTERNET} permission, attempts to set\n     * a value of {@code false} will cause a {@link java.lang.SecurityException}\n     * to be thrown. The default value is {@code false} if the application has the\n     * {@link android.Manifest.permission#INTERNET} permission, otherwise it is\n     * {@code true}.\n     *\n     * @param flag {@code true} means block network loads by the WebView\n     * @see android.webkit.WebView#reload\n     ",
    "links" : [ "#setBlockNetworkImage", "android.webkit.WebView#reload", "android.Manifest.permission#INTERNET", "java.lang.SecurityException" ]
  }, {
    "name" : "public abstract boolean getBlockNetworkLoads()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the WebView does not load any resources from the network.\n     *\n     * @return {@code true} if the WebView does not load any resources from the network\n     * @see #setBlockNetworkLoads\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setJavaScriptEnabled(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Tells the WebView to enable JavaScript execution.\n     * <b>The default is {@code false}.</b>\n     *\n     * @param flag {@code true} if the WebView should execute JavaScript\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setAllowUniversalAccessFromFileURLs(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether cross-origin requests in the context of a file scheme URL should be allowed to\n     * access content from <i>any</i> origin. This includes access to content from other file\n     * scheme URLs or web contexts. Note that some access such as image HTML elements doesn't\n     * follow same-origin rules and isn't affected by this setting.\n     * <p>\n     * <b>Don't</b> enable this setting if you open files that may be created or altered by\n     * external sources. Enabling this setting allows malicious scripts loaded in a {@code file://}\n     * context to launch cross-site scripting attacks, either accessing arbitrary local files\n     * including WebView cookies, app private data or even credentials used on arbitrary web sites.\n     * <p class=\"note\">\n     * Loading content via {@code file://} URLs is generally discouraged. See the note in\n     * {@link #setAllowFileAccess}.\n     * <p>\n     * The default value is {@code true} for apps targeting\n     * {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH_MR1} and below, and {@code false}\n     * when targeting {@link android.os.Build.VERSION_CODES#JELLY_BEAN} and above. To prevent\n     * possible violation of same domain policy when targeting\n     * {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH_MR1} and earlier, you should\n     * explicitly set this value to {@code false}.\n     *\n     * @param flag whether JavaScript running in the context of a file scheme URL should be allowed\n     *             to access content from any origin\n     * @deprecated This setting is not secure, please use\n     *             <a href=\"{@docRoot}reference/androidx/webkit/WebViewAssetLoader.html\">\n     *             androidx.webkit.WebViewAssetLoader</a> to load file content securely.\n     ",
    "links" : [ "#setAllowFileAccess", "android.os.Build.VERSION_CODES#JELLY_BEAN", "android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH_MR1" ]
  }, {
    "name" : "public abstract void setAllowFileAccessFromFileURLs(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether cross-origin requests in the context of a file scheme URL should be allowed to\n     * access content from other file scheme URLs. Note that some accesses such as image HTML\n     * elements don't follow same-origin rules and aren't affected by this setting.\n     * <p>\n     * <b>Don't</b> enable this setting if you open files that may be created or altered by\n     * external sources. Enabling this setting allows malicious scripts loaded in a {@code file://}\n     * context to access arbitrary local files including WebView cookies and app private data.\n     * <p class=\"note\">\n     * Loading content via {@code file://} URLs is generally discouraged. See the note in\n     * {@link #setAllowFileAccess}.\n     * <p>\n     * Note that the value of this setting is ignored if the value of\n     * {@link #getAllowUniversalAccessFromFileURLs} is {@code true}. The default value is\n     * {@code true} for apps targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH_MR1}\n     * and below, and {@code false} when targeting {@link android.os.Build.VERSION_CODES#JELLY_BEAN}\n     * and above. To prevent possible violation of same domain policy when targeting\n     * {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH_MR1} and earlier, you should\n     * explicitly set this value to {@code false}.\n     *\n     * @param flag whether JavaScript running in the context of a file scheme\n     *             URL should be allowed to access content from other file\n     *             scheme URLs\n     * @deprecated This setting is not secure, please use\n     *             <a href=\"{@docRoot}reference/androidx/webkit/WebViewAssetLoader.html\">\n     *             androidx.webkit.WebViewAssetLoader</a> to load file content securely.\n     ",
    "links" : [ "#getAllowUniversalAccessFromFileURLs", "#setAllowFileAccess", "android.os.Build.VERSION_CODES#JELLY_BEAN", "android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH_MR1" ]
  }, {
    "name" : "public abstract void setPluginsEnabled(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the WebView should enable plugins. The default is {@code false}.\n     *\n     * @param flag {@code true} if plugins should be enabled\n     * @deprecated This method has been deprecated in favor of\n     *             {@link #setPluginState}\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#setPluginState" ]
  }, {
    "name" : "public abstract void setPluginState(PluginState state)",
    "returnType" : "void",
    "comment" : "\n     * Tells the WebView to enable, disable, or have plugins on demand. On\n     * demand mode means that if a plugin exists that can handle the embedded\n     * content, a placeholder icon will be shown instead of the plugin. When\n     * the placeholder is clicked, the plugin will be enabled. The default is\n     * {@link PluginState#OFF}.\n     *\n     * @param state a PluginState value\n     * @deprecated Plugins are not supported in API level\n     *             {@link android.os.Build.VERSION_CODES#KITKAT} or later;\n     *             enabling plugins is a no-op.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#KITKAT", "#OFF" ]
  }, {
    "name" : "public void setPluginsPath(String pluginsPath)",
    "returnType" : "void",
    "comment" : "\n     * Sets a custom path to plugins used by the WebView. This method is\n     * obsolete since each plugin is now loaded from its own package.\n     *\n     * @param pluginsPath a String path to the directory containing plugins\n     * @deprecated This method is no longer used as plugins are loaded from\n     *             their own APK via the system's package manager.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2" ]
  }, {
    "name" : "public abstract void setDatabasePath(String databasePath)",
    "returnType" : "void",
    "comment" : "\n     * Sets the path to where database storage API databases should be saved.\n     * In order for the database storage API to function correctly, this method\n     * must be called with a path to which the application can write. This\n     * method should only be called once: repeated calls are ignored.\n     *\n     * @param databasePath a path to the directory where databases should be\n     *                     saved.\n     * @deprecated Database paths are managed by the implementation and calling this method\n     *             will have no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setGeolocationDatabasePath(String databasePath)",
    "returnType" : "void",
    "comment" : "\n     * Sets the path where the Geolocation databases should be saved. In order\n     * for Geolocation permissions and cached positions to be persisted, this\n     * method must be called with a path to which the application can write.\n     *\n     * @param databasePath a path to the directory where databases should be\n     *                     saved.\n     * @deprecated Geolocation database are managed by the implementation and calling this method\n     *             will have no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAppCacheEnabled(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the Application Caches API should be enabled. The default\n     * is {@code false}. Note that in order for the Application Caches API to be\n     * enabled, a valid database path must also be supplied to\n     * {@link #setAppCachePath}.\n     *\n     * @param flag {@code true} if the WebView should enable Application Caches\n     * @deprecated The Application Cache API is deprecated and this method will\n     *             become a no-op on all Android versions once support is\n     *             removed in Chromium. Consider using Service Workers instead.\n     *             See https://web.dev/appcache-removal/ for more information.\n     * @removed The Application Cache API is no longer supported and this method\n     *          is a no-op on WebView 95 and later. Consider using Service Workers\n     *          instead. See https://web.dev/appcache-removal/ for more information.\n     ",
    "links" : [ "#setAppCachePath" ]
  }, {
    "name" : "public void setAppCachePath(String appCachePath)",
    "returnType" : "void",
    "comment" : "\n     * Sets the path to the Application Caches files. In order for the\n     * Application Caches API to be enabled, this method must be called with a\n     * path to which the application can write. This method should only be\n     * called once: repeated calls are ignored.\n     *\n     * @param appCachePath a String path to the directory containing\n     *                     Application Caches files.\n     * @see #setAppCacheEnabled\n     * @deprecated The Application Cache API is deprecated and this method will\n     *             become a no-op on all Android versions once support is\n     *             removed in Chromium. Consider using Service Workers instead.\n     *             See https://web.dev/appcache-removal/ for more information.\n     * @removed The Application Cache API is no longer supported and this method\n     *          is a no-op on WebView 95 and later. Consider using Service Workers\n     *          instead. See https://web.dev/appcache-removal/ for more information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAppCacheMaxSize(long appCacheMaxSize)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum size for the Application Cache content. The passed size\n     * will be rounded to the nearest value that the database can support, so\n     * this should be viewed as a guide, not a hard limit. Setting the\n     * size to a value less than current database size does not cause the\n     * database to be trimmed. The default size is {@link Long#MAX_VALUE}.\n     * It is recommended to leave the maximum size set to the default value.\n     *\n     * @param appCacheMaxSize the maximum size in bytes\n     * @deprecated Quota is managed automatically; this method is a no-op.\n     * @removed Quota is managed automatically; this method is a no-op.\n     ",
    "links" : [ "#MAX_VALUE" ]
  }, {
    "name" : "public abstract void setDatabaseEnabled(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the database storage API is enabled. The default value is\n     * false. See also {@link #setDatabasePath} for how to correctly set up the\n     * database storage API.\n     *\n     * This setting is global in effect, across all WebView instances in a process.\n     * Note you should only modify this setting prior to making <b>any</b> WebView\n     * page load within a given process, as the WebView implementation may ignore\n     * changes to this setting after that point.\n     *\n     * @param flag {@code true} if the WebView should use the database storage API\n     * @deprecated WebSQL is deprecated and this method will become a no-op on all\n     * Android versions once support is removed in Chromium. See\n     * https://developer.chrome.com/blog/deprecating-web-sql for more information.\n     ",
    "links" : [ "#setDatabasePath" ]
  }, {
    "name" : "public abstract void setDomStorageEnabled(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the DOM storage API is enabled. The default value is {@code false}.\n     *\n     * @param flag {@code true} if the WebView should use the DOM storage API\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getDomStorageEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the DOM Storage APIs are enabled.\n     *\n     * @return {@code true} if the DOM Storage APIs are enabled\n     * @see #setDomStorageEnabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getDatabasePath()",
    "returnType" : "String",
    "comment" : "\n     * Gets the path to where database storage API databases are saved.\n     *\n     * @return the String path to the database storage API databases\n     * @see #setDatabasePath\n     * @deprecated Database paths are managed by the implementation this method is obsolete.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getDatabaseEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the database storage API is enabled.\n     *\n     * @return {@code true} if the database storage API is enabled\n     * @see #setDatabaseEnabled\n     * @deprecated WebSQL is deprecated and this method will become a no-op on all\n     * Android versions once support is removed in Chromium. See\n     * https://developer.chrome.com/blog/deprecating-web-sql for more information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setGeolocationEnabled(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether Geolocation is enabled. The default is {@code true}.\n     * <p>\n     * Please note that in order for the Geolocation API to be usable\n     * by a page in the WebView, the following requirements must be met:\n     * <ul>\n     *   <li>an application must have permission to access the device location,\n     *   see {@link android.Manifest.permission#ACCESS_COARSE_LOCATION},\n     *   {@link android.Manifest.permission#ACCESS_FINE_LOCATION};\n     *   <li>an application must provide an implementation of the\n     *   {@link WebChromeClient#onGeolocationPermissionsShowPrompt} callback\n     *   to receive notifications that a page is requesting access to location\n     *   via the JavaScript Geolocation API.\n     * </ul>\n     * <p>\n     *\n     * @param flag whether Geolocation should be enabled\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_COARSE_LOCATION", "android.Manifest.permission#ACCESS_FINE_LOCATION", "android.webkit.WebChromeClient#onGeolocationPermissionsShowPrompt" ]
  }, {
    "name" : "public abstract boolean getJavaScriptEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether JavaScript is enabled.\n     *\n     * @return {@code true} if JavaScript is enabled\n     * @see #setJavaScriptEnabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getAllowUniversalAccessFromFileURLs()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether JavaScript running in the context of a file scheme URL can\n     * access content from any origin. This includes access to content from\n     * other file scheme URLs.\n     *\n     * @return whether JavaScript running in the context of a file scheme URL\n     *         can access content from any origin\n     * @see #setAllowUniversalAccessFromFileURLs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getAllowFileAccessFromFileURLs()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether JavaScript running in the context of a file scheme URL can\n     * access content from other file scheme URLs.\n     *\n     * @return whether JavaScript running in the context of a file scheme URL\n     *         can access content from other file scheme URLs\n     * @see #setAllowFileAccessFromFileURLs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getPluginsEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether plugins are enabled.\n     *\n     * @return {@code true} if plugins are enabled\n     * @see #setPluginsEnabled\n     * @deprecated This method has been replaced by {@link #getPluginState}\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}\n     ",
    "links" : [ "#getPluginState", "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2" ]
  }, {
    "name" : "public abstract PluginState getPluginState()",
    "returnType" : "PluginState",
    "comment" : "\n     * Gets the current state regarding whether plugins are enabled.\n     *\n     * @return the plugin state as a {@link PluginState} value\n     * @see #setPluginState\n     * @deprecated Plugins are not supported in API level\n     *             {@link android.os.Build.VERSION_CODES#KITKAT} or later;\n     *             enabling plugins is a no-op.\n     ",
    "links" : [ "PluginState", "android.os.Build.VERSION_CODES#KITKAT" ]
  }, {
    "name" : "public String getPluginsPath()",
    "returnType" : "String",
    "comment" : "\n     * Gets the directory that contains the plugin libraries. This method is\n     * obsolete since each plugin is now loaded from its own package.\n     *\n     * @return an empty string\n     * @deprecated This method is no longer used as plugins are loaded from\n     * their own APK via the system's package manager.\n     * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2" ]
  }, {
    "name" : "public abstract void setJavaScriptCanOpenWindowsAutomatically(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Tells JavaScript to open windows automatically. This applies to the\n     * JavaScript function {@code window.open()}. The default is {@code false}.\n     *\n     * @param flag {@code true} if JavaScript can open windows automatically\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getJavaScriptCanOpenWindowsAutomatically()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether JavaScript can open windows automatically.\n     *\n     * @return {@code true} if JavaScript can open windows automatically during\n     *         {@code window.open()}\n     * @see #setJavaScriptCanOpenWindowsAutomatically\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDefaultTextEncodingName(String encoding)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default text encoding name to use when decoding html pages.\n     * The default is \"UTF-8\".\n     *\n     * @param encoding the text encoding name\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getDefaultTextEncodingName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the default text encoding name.\n     *\n     * @return the default text encoding name as a string\n     * @see #setDefaultTextEncodingName\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setUserAgentString(@Nullable String ua)",
    "returnType" : "void",
    "comment" : "\n     * Sets the WebView's user-agent string. If the string is {@code null} or empty,\n     * the system default value will be used.\n     *\n     * <p>If the user-agent is overridden in this way, the values of the User-Agent Client Hints\n     * headers and {@code navigator.userAgentData} for this WebView could be changed.\n     * <p> See <a href=\"{@docRoot}reference/androidx/webkit/WebSettingsCompat\n     * #setUserAgentMetadata(WebSettings,UserAgentMetadata)\">androidx.webkit.WebSettingsCompat\n     * #setUserAgentMetadata(WebSettings,UserAgentMetadata)</a> for details.\n     *\n     * <p>Note that starting from {@link android.os.Build.VERSION_CODES#KITKAT} Android\n     * version, changing the user-agent while loading a web page causes WebView\n     * to initiate loading once again.\n     *\n     * @param ua new user-agent string\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#KITKAT" ]
  }, {
    "name" : "public abstract String getUserAgentString()",
    "returnType" : "String",
    "comment" : "\n     * Gets the WebView's user-agent string.\n     *\n     * @return the WebView's user-agent string\n     * @see #setUserAgentString\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDefaultUserAgent(Context context)",
    "returnType" : "String",
    "comment" : "\n     * Returns the default User-Agent used by a WebView.\n     * An instance of WebView could use a different User-Agent if a call\n     * is made to {@link WebSettings#setUserAgentString(String)}.\n     *\n     * @param context a Context object used to access application assets\n     ",
    "links" : [ "android.webkit.WebSettings#setUserAgentString(String)" ]
  }, {
    "name" : "public abstract void setNeedInitialFocus(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Tells the WebView whether it needs to set a node to have focus when\n     * {@link WebView#requestFocus(int, android.graphics.Rect)} is called. The\n     * default value is {@code true}.\n     *\n     * @param flag whether the WebView needs to set a node\n     ",
    "links" : [ "android.webkit.WebView#requestFocus(int" ]
  }, {
    "name" : "public abstract void setRenderPriority(RenderPriority priority)",
    "returnType" : "void",
    "comment" : "\n     * Sets the priority of the Render thread. Unlike the other settings, this\n     * one only needs to be called once per process. The default value is\n     * {@link RenderPriority#NORMAL}.\n     *\n     * @param priority the priority\n     * @deprecated It is not recommended to adjust thread priorities, and this will\n     *             not be supported in future versions.\n     ",
    "links" : [ "#NORMAL" ]
  }, {
    "name" : "public abstract void setCacheMode(@CacheMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the way the cache is used. The way the cache is used is based\n     * on the navigation type. For a normal page load, the cache is checked\n     * and content is re-validated as needed. When navigating back, content is\n     * not revalidated, instead the content is just retrieved from the cache.\n     * This method allows the client to override this behavior by specifying\n     * one of {@link #LOAD_DEFAULT},\n     * {@link #LOAD_CACHE_ELSE_NETWORK}, {@link #LOAD_NO_CACHE} or\n     * {@link #LOAD_CACHE_ONLY}. The default value is {@link #LOAD_DEFAULT}.\n     *\n     * @param mode the mode to use\n     ",
    "links" : [ "#LOAD_CACHE_ONLY", "#LOAD_DEFAULT", "#LOAD_CACHE_ELSE_NETWORK", "#LOAD_NO_CACHE" ]
  }, {
    "name" : "public abstract int getCacheMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current setting for overriding the cache mode.\n     *\n     * @return the current setting for overriding the cache mode\n     * @see #setCacheMode\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setMixedContentMode(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Configures the WebView's behavior when a secure origin attempts to load a resource from an\n     * insecure origin.\n     *\n     * By default, apps that target {@link android.os.Build.VERSION_CODES#KITKAT} or below default\n     * to {@link #MIXED_CONTENT_ALWAYS_ALLOW}. Apps targeting\n     * {@link android.os.Build.VERSION_CODES#LOLLIPOP} default to {@link #MIXED_CONTENT_NEVER_ALLOW}.\n     *\n     * The preferred and most secure mode of operation for the WebView is\n     * {@link #MIXED_CONTENT_NEVER_ALLOW} and use of {@link #MIXED_CONTENT_ALWAYS_ALLOW} is\n     * strongly discouraged.\n     *\n     * @param mode The mixed content mode to use. One of {@link #MIXED_CONTENT_NEVER_ALLOW},\n     *     {@link #MIXED_CONTENT_ALWAYS_ALLOW} or {@link #MIXED_CONTENT_COMPATIBILITY_MODE}.\n     ",
    "links" : [ "#MIXED_CONTENT_COMPATIBILITY_MODE", "android.os.Build.VERSION_CODES#LOLLIPOP", "#MIXED_CONTENT_ALWAYS_ALLOW", "#MIXED_CONTENT_NEVER_ALLOW", "android.os.Build.VERSION_CODES#KITKAT" ]
  }, {
    "name" : "public abstract int getMixedContentMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current behavior of the WebView with regard to loading insecure content from a\n     * secure origin.\n     * @return The current setting, one of {@link #MIXED_CONTENT_NEVER_ALLOW},\n     *     {@link #MIXED_CONTENT_ALWAYS_ALLOW} or {@link #MIXED_CONTENT_COMPATIBILITY_MODE}.\n     ",
    "links" : [ "#MIXED_CONTENT_COMPATIBILITY_MODE", "#MIXED_CONTENT_ALWAYS_ALLOW", "#MIXED_CONTENT_NEVER_ALLOW" ]
  }, {
    "name" : "public abstract void setVideoOverlayForEmbeddedEncryptedVideoEnabled(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether to use a video overlay for embedded encrypted video.\n     * In API levels prior to {@link android.os.Build.VERSION_CODES#LOLLIPOP}, encrypted video can\n     * only be rendered directly on a secure video surface, so it had been a hard problem to play\n     * encrypted video in HTML.  When this flag is on, WebView can play encrypted video (MSE/EME)\n     * by using a video overlay (aka hole-punching) for videos embedded using HTML &lt;video&gt;\n     * tag.<br>\n     * Caution: This setting is intended for use only in a narrow set of circumstances and apps\n     * should only enable it if they require playback of encrypted video content. It will impose\n     * the following limitations on the WebView:\n     * <ul>\n     * <li> Only one video overlay can be played at a time.\n     * <li> Changes made to position or dimensions of a video element may be propagated to the\n     * corresponding video overlay with a noticeable delay.\n     * <li> The video overlay is not visible to web APIs and as such may not interact with\n     * script or styling. For example, CSS styles applied to the &lt;video&gt; tag may be ignored.\n     * </ul>\n     * This is not an exhaustive set of constraints and it may vary with new versions of the\n     * WebView.\n     * @hide\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP" ]
  }, {
    "name" : "public abstract boolean getVideoOverlayForEmbeddedEncryptedVideoEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether a video overlay will be used for embedded encrypted video.\n     *\n     * @return {@code true} if WebView uses a video overlay for embedded encrypted video.\n     * @see #setVideoOverlayForEmbeddedEncryptedVideoEnabled\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setOffscreenPreRaster(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this WebView should raster tiles when it is\n     * offscreen but attached to a window. Turning this on can avoid\n     * rendering artifacts when animating an offscreen WebView on-screen.\n     * Offscreen WebViews in this mode use more memory. The default value is\n     * false.<br>\n     * Please follow these guidelines to limit memory usage:\n     * <ul>\n     * <li> WebView size should be not be larger than the device screen size.\n     * <li> Limit use of this mode to a small number of WebViews. Use it for\n     *   visible WebViews and WebViews about to be animated to visible.\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getOffscreenPreRaster()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this WebView should raster tiles when it is\n     * offscreen but attached to a window.\n     * @return {@code true} if this WebView will raster tiles when it is\n     * offscreen but attached to a window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setSafeBrowsingEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether Safe Browsing is enabled. Safe Browsing allows WebView to\n     * protect against malware and phishing attacks by verifying the links.\n     *\n     * <p>\n     * Safe Browsing can be disabled for all WebViews using a manifest tag (read <a\n     * href=\"{@docRoot}reference/android/webkit/WebView.html\">general Safe Browsing info</a>). The\n     * manifest tag has a lower precedence than this API.\n     *\n     * <p>\n     * Safe Browsing is enabled by default for devices which support it.\n     *\n     * @param enabled Whether Safe Browsing is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getSafeBrowsingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether Safe Browsing is enabled.\n     * See {@link #setSafeBrowsingEnabled}.\n     *\n     * @return {@code true} if Safe Browsing is enabled and {@code false} otherwise.\n     ",
    "links" : [ "#setSafeBrowsingEnabled" ]
  }, {
    "name" : "public void setForceDark(@ForceDark int forceDark)",
    "returnType" : "void",
    "comment" : "\n     * Set the force dark mode for this WebView.\n     *\n     * @param forceDark the force dark mode to set.\n     * @see #getForceDark\n     * @deprecated The \"force dark\" model previously implemented by WebView was complex\n     * and didn't interoperate well with current Web standards for\n     * {@code prefers-color-scheme} and {@code color-scheme}. In apps with\n     * {@code targetSdkVersion} &ge; {@link android.os.Build.VERSION_CODES#TIRAMISU}\n     * this API is a no-op and WebView will always use the dark style defined by web content\n     * authors if the app's theme is dark. To customize the behavior, refer to\n     * {@link #setAlgorithmicDarkeningAllowed}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "#setAlgorithmicDarkeningAllowed" ]
  }, {
    "name" : "public int getForceDark()",
    "returnType" : "int",
    "comment" : "\n     * Get the force dark mode for this WebView.\n     * The default force dark mode is {@link #FORCE_DARK_AUTO}.\n     *\n     * @return the currently set force dark mode.\n     * @see #setForceDark\n     * @deprecated refer to {@link #setForceDark}.\n     ",
    "links" : [ "#setForceDark", "#FORCE_DARK_AUTO" ]
  }, {
    "name" : "public void setAlgorithmicDarkeningAllowed(boolean allow)",
    "returnType" : "void",
    "comment" : "\n     * Control whether algorithmic darkening is allowed.\n     *\n     * <p class=\"note\">\n     * <b>Note:</b> This API and the behaviour described only apply to apps with\n     * {@code targetSdkVersion} &ge; {@link android.os.Build.VERSION_CODES#TIRAMISU}.\n     *\n     * <p>\n     * WebView always sets the media query {@code prefers-color-scheme} according to the app's\n     * theme attribute {@link android.R.styleable#Theme_isLightTheme isLightTheme}, i.e.\n     * {@code prefers-color-scheme} is {@code light} if isLightTheme is true or not specified,\n     * otherwise it is {@code dark}. This means that the web content's light or dark style will\n     * be applied automatically to match the app's theme if the content supports it.\n     *\n     * <p>\n     * Algorithmic darkening is disallowed by default.\n     * <p>\n     * If the app's theme is dark and it allows algorithmic darkening, WebView will attempt to\n     * darken web content using an algorithm, if the content doesn't define its own dark styles\n     * and doesn't explicitly disable darkening.\n     *\n     * <p>\n     * If Android is applying Force Dark to WebView then WebView will ignore the value of\n     * this setting and behave as if it were set to true.\n     *\n     * <p>\n     * The deprecated {@link #setForceDark} and related API are no-ops in apps with\n     * {@code targetSdkVersion} &ge; {@link android.os.Build.VERSION_CODES#TIRAMISU},\n     * but they still apply to apps with\n     * {@code targetSdkVersion} &lt; {@link android.os.Build.VERSION_CODES#TIRAMISU}.\n     *\n     * <p>\n     * The below table summarizes how APIs work with different apps.\n     *\n     * <table border=\"2\" width=\"85%\" align=\"center\" cellpadding=\"5\">\n     *     <thead>\n     *         <tr>\n     *             <th>App</th>\n     *             <th>Web content which uses {@code prefers-color-scheme}</th>\n     *             <th>Web content which does not use {@code prefers-color-scheme}</th>\n     *         </tr>\n     *     </thead>\n     *     <tbody>\n     *     <tr>\n     *         <td>App with {@code isLightTheme} True or not set</td>\n     *         <td>Renders with the light theme defined by the content author.</td>\n     *         <td>Renders with the default styling defined by the content author.</td>\n     *     </tr>\n     *     <tr>\n     *         <td>App with Android forceDark in effect</td>\n     *         <td>Renders with the dark theme defined by the content author.</td>\n     *         <td>Renders with the styling modified to dark colors by an algorithm\n     *             if allowed by the content author.</td>\n     *     </tr>\n     *     <tr>\n     *         <td>App with {@code isLightTheme} False,\n     *            {@code targetSdkVersion} &lt; {@link android.os.Build.VERSION_CODES#TIRAMISU},\n     *             and has {@code FORCE_DARK_AUTO}</td>\n     *         <td>Renders with the dark theme defined by the content author.</td>\n     *         <td>Renders with the default styling defined by the content author.</td>\n     *     </tr>\n     *     <tr>\n     *         <td>App with {@code isLightTheme} False,\n     *            {@code targetSdkVersion} &ge; {@link android.os.Build.VERSION_CODES#TIRAMISU},\n     *             and {@code setAlgorithmicDarkening(false)}</td>\n     *         <td>Renders with the dark theme defined by the content author.</td>\n     *         <td>Renders with the default styling defined by the content author.</td>\n     *     </tr>\n     *     <tr>\n     *         <td>App with {@code isLightTheme} False,\n     *            {@code targetSdkVersion} &ge; {@link android.os.Build.VERSION_CODES#TIRAMISU},\n     *             and {@code setAlgorithmicDarkening(true)}</td>\n     *         <td>Renders with the dark theme defined by the content author.</td>\n     *         <td>Renders with the styling modified to dark colors by an algorithm if allowed\n     *             by the content author.</td>\n     *     </tr>\n     *     </tbody>\n     * </table>\n     * </p>\n     *\n     * @param allow allow algorithmic darkening or not.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "#setForceDark", "android.R.styleable#Theme_isLightTheme" ]
  }, {
    "name" : "public boolean isAlgorithmicDarkeningAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Get if algorithmic darkening is allowed or not for this WebView.\n     * The default is false.\n     *\n     * @return if the algorithmic darkening is allowed or not.\n     * @see #setAlgorithmicDarkeningAllowed\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisabledActionModeMenuItems(@MenuItemFlags int menuItems)",
    "returnType" : "void",
    "comment" : "\n     * Disables the action mode menu items according to {@code menuItems} flag.\n     * @param menuItems an integer field flag for the menu items to be disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDisabledActionModeMenuItems()",
    "returnType" : "int",
    "comment" : "\n     * Gets the action mode menu items that are disabled, expressed in an integer field flag.\n     * The default value is {@link #MENU_ITEM_NONE}\n     *\n     * @return all the disabled menu item flags combined with bitwise OR.\n     ",
    "links" : [ "#MENU_ITEM_NONE" ]
  } ],
  "methodNames" : [ "public abstract void setNavDump(boolean enabled)", "public abstract boolean getNavDump()", "public abstract void setSupportZoom(boolean support)", "public abstract boolean supportZoom()", "public abstract void setMediaPlaybackRequiresUserGesture(boolean require)", "public abstract boolean getMediaPlaybackRequiresUserGesture()", "public abstract void setBuiltInZoomControls(boolean enabled)", "public abstract boolean getBuiltInZoomControls()", "public abstract void setDisplayZoomControls(boolean enabled)", "public abstract boolean getDisplayZoomControls()", "public abstract void setAllowFileAccess(boolean allow)", "public abstract boolean getAllowFileAccess()", "public abstract void setAllowContentAccess(boolean allow)", "public abstract boolean getAllowContentAccess()", "public abstract void setLoadWithOverviewMode(boolean overview)", "public abstract boolean getLoadWithOverviewMode()", "public abstract void setEnableSmoothTransition(boolean enable)", "public abstract boolean enableSmoothTransition()", "public abstract void setUseWebViewBackgroundForOverscrollBackground(boolean view)", "public abstract boolean getUseWebViewBackgroundForOverscrollBackground()", "public abstract void setSaveFormData(boolean save)", "public abstract boolean getSaveFormData()", "public abstract void setSavePassword(boolean save)", "public abstract boolean getSavePassword()", "public abstract void setTextZoom(int textZoom)", "public abstract int getTextZoom()", "public abstract void setAcceptThirdPartyCookies(boolean accept)", "public abstract boolean getAcceptThirdPartyCookies()", "public synchronized void setTextSize(TextSize t)", "public synchronized TextSize getTextSize()", "public abstract void setDefaultZoom(ZoomDensity zoom)", "public abstract ZoomDensity getDefaultZoom()", "public abstract void setLightTouchEnabled(boolean enabled)", "public abstract boolean getLightTouchEnabled()", "public void setUseDoubleTree(boolean use)", "public boolean getUseDoubleTree()", "public abstract void setUserAgent(int ua)", "public abstract int getUserAgent()", "public abstract void setUseWideViewPort(boolean use)", "public abstract boolean getUseWideViewPort()", "public abstract void setSupportMultipleWindows(boolean support)", "public abstract boolean supportMultipleWindows()", "public abstract void setLayoutAlgorithm(LayoutAlgorithm l)", "public abstract LayoutAlgorithm getLayoutAlgorithm()", "public abstract void setStandardFontFamily(String font)", "public abstract String getStandardFontFamily()", "public abstract void setFixedFontFamily(String font)", "public abstract String getFixedFontFamily()", "public abstract void setSansSerifFontFamily(String font)", "public abstract String getSansSerifFontFamily()", "public abstract void setSerifFontFamily(String font)", "public abstract String getSerifFontFamily()", "public abstract void setCursiveFontFamily(String font)", "public abstract String getCursiveFontFamily()", "public abstract void setFantasyFontFamily(String font)", "public abstract String getFantasyFontFamily()", "public abstract void setMinimumFontSize(int size)", "public abstract int getMinimumFontSize()", "public abstract void setMinimumLogicalFontSize(int size)", "public abstract int getMinimumLogicalFontSize()", "public abstract void setDefaultFontSize(int size)", "public abstract int getDefaultFontSize()", "public abstract void setDefaultFixedFontSize(int size)", "public abstract int getDefaultFixedFontSize()", "public abstract void setLoadsImagesAutomatically(boolean flag)", "public abstract boolean getLoadsImagesAutomatically()", "public abstract void setBlockNetworkImage(boolean flag)", "public abstract boolean getBlockNetworkImage()", "public abstract void setBlockNetworkLoads(boolean flag)", "public abstract boolean getBlockNetworkLoads()", "public abstract void setJavaScriptEnabled(boolean flag)", "public abstract void setAllowUniversalAccessFromFileURLs(boolean flag)", "public abstract void setAllowFileAccessFromFileURLs(boolean flag)", "public abstract void setPluginsEnabled(boolean flag)", "public abstract void setPluginState(PluginState state)", "public void setPluginsPath(String pluginsPath)", "public abstract void setDatabasePath(String databasePath)", "public abstract void setGeolocationDatabasePath(String databasePath)", "public void setAppCacheEnabled(boolean flag)", "public void setAppCachePath(String appCachePath)", "public void setAppCacheMaxSize(long appCacheMaxSize)", "public abstract void setDatabaseEnabled(boolean flag)", "public abstract void setDomStorageEnabled(boolean flag)", "public abstract boolean getDomStorageEnabled()", "public abstract String getDatabasePath()", "public abstract boolean getDatabaseEnabled()", "public abstract void setGeolocationEnabled(boolean flag)", "public abstract boolean getJavaScriptEnabled()", "public abstract boolean getAllowUniversalAccessFromFileURLs()", "public abstract boolean getAllowFileAccessFromFileURLs()", "public abstract boolean getPluginsEnabled()", "public abstract PluginState getPluginState()", "public String getPluginsPath()", "public abstract void setJavaScriptCanOpenWindowsAutomatically(boolean flag)", "public abstract boolean getJavaScriptCanOpenWindowsAutomatically()", "public abstract void setDefaultTextEncodingName(String encoding)", "public abstract String getDefaultTextEncodingName()", "public abstract void setUserAgentString(@Nullable String ua)", "public abstract String getUserAgentString()", "public static String getDefaultUserAgent(Context context)", "public abstract void setNeedInitialFocus(boolean flag)", "public abstract void setRenderPriority(RenderPriority priority)", "public abstract void setCacheMode(@CacheMode int mode)", "public abstract int getCacheMode()", "public abstract void setMixedContentMode(int mode)", "public abstract int getMixedContentMode()", "public abstract void setVideoOverlayForEmbeddedEncryptedVideoEnabled(boolean flag)", "public abstract boolean getVideoOverlayForEmbeddedEncryptedVideoEnabled()", "public abstract void setOffscreenPreRaster(boolean enabled)", "public abstract boolean getOffscreenPreRaster()", "public abstract void setSafeBrowsingEnabled(boolean enabled)", "public abstract boolean getSafeBrowsingEnabled()", "public void setForceDark(@ForceDark int forceDark)", "public int getForceDark()", "public void setAlgorithmicDarkeningAllowed(boolean allow)", "public boolean isAlgorithmicDarkeningAllowed()", "public abstract void setDisabledActionModeMenuItems(@MenuItemFlags int menuItems)", "public abstract int getDisabledActionModeMenuItems()" ],
  "variableNames" : [ "ENABLE_SIMPLIFIED_DARK_MODE", "LOAD_DEFAULT", "LOAD_NORMAL", "LOAD_CACHE_ELSE_NETWORK", "LOAD_NO_CACHE", "LOAD_CACHE_ONLY", "MIXED_CONTENT_ALWAYS_ALLOW", "MIXED_CONTENT_NEVER_ALLOW", "MIXED_CONTENT_COMPATIBILITY_MODE", "FORCE_DARK_OFF", "FORCE_DARK_AUTO", "FORCE_DARK_ON", "MENU_ITEM_NONE", "MENU_ITEM_SHARE", "MENU_ITEM_WEB_SEARCH", "MENU_ITEM_PROCESS_TEXT" ]
}