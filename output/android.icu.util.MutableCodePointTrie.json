{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/MutableCodePointTrie.java",
  "packageName" : "android.icu.util",
  "className" : "MutableCodePointTrie",
  "comment" : "\n * Mutable Unicode code point trie.\n * Fast map from Unicode code points (U+0000..U+10FFFF) to 32-bit integer values.\n * For details see https://icu.unicode.org/design/struct/utrie\n *\n * <p>Setting values (especially ranges) and lookup is fast.\n * The mutable trie is only somewhat space-efficient.\n * It builds a compacted, immutable {@link CodePointTrie}.\n *\n * <p>This trie can be modified while iterating over its contents.\n * For example, it is possible to merge its values with those from another\n * set of ranges (e.g., another @{link CodePointMap}):\n * Iterate over those source ranges; for each of them iterate over this trie;\n * add the source value into the value of each trie range.\n *\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "android.icu.util.CodePointTrie" ],
  "variables" : [ {
    "name" : "MAX_UNICODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNICODE_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BMP_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ASCII_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "I_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BMP_I_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ASCII_I_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SMALL_DATA_BLOCKS_PER_BMP_BLOCK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALL_SAME",
    "type" : "byte",
    "comment" : " Flag values for data blocks.",
    "links" : [ ]
  }, {
    "name" : "MIXED",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SAME_AS",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INITIAL_DATA_LENGTH",
    "type" : "int",
    "comment" : " Start with allocation of 16k data entries. ",
    "links" : [ ]
  }, {
    "name" : "MEDIUM_DATA_LENGTH",
    "type" : "int",
    "comment" : " Grow about 8x each time. ",
    "links" : [ ]
  }, {
    "name" : "MAX_DATA_LENGTH",
    "type" : "int",
    "comment" : "\n     * Maximum length of the build-time data array.\n     * One entry per 0x110000 code points.\n     ",
    "links" : [ ]
  }, {
    "name" : "I3_NULL",
    "type" : "byte",
    "comment" : " Flag values for index-3 blocks while compacting/building.",
    "links" : [ ]
  }, {
    "name" : "I3_BMP",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "I3_16",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "I3_18",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_3_18BIT_BLOCK_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index3NullOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "data",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dataLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dataNullOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "origInitialValue",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initialValue",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "errorValue",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "highStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "highValue",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index16",
    "type" : "char[]",
    "comment" : " Temporary array while building the final data. ",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public MutableCodePointTrie clone()",
    "returnType" : "MutableCodePointTrie",
    "comment" : "\n     * Clones this mutable trie.\n     *\n     * @return the clone\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MutableCodePointTrie fromCodePointMap(CodePointMap map)",
    "returnType" : "MutableCodePointTrie",
    "comment" : "\n     * Creates a mutable trie with the same contents as the {@link CodePointMap}.\n     *\n     * @param map the source map or trie\n     * @return the mutable trie\n     ",
    "links" : [ "android.icu.util.CodePointMap" ]
  }, {
    "name" : "private void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int get(int c)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final int maybeFilterValue(int value, int initialValue, int nullValue, ValueFilter filter)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getRange(int start, CodePointTrie.ValueFilter filter, CodePointTrie.Range range)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>The trie can be modified between calls to this function.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeBlock(int block, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void set(int c, int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets a value for a code point.\n     *\n     * @param c the code point\n     * @param value the value\n     ",
    "links" : [ ]
  }, {
    "name" : "private void fillBlock(int block, int start, int limit, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRange(int start, int end, int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets a value for each code point [start..end].\n     * Faster and more space-efficient than setting the value for each code point separately.\n     *\n     * @param start the first code point to get the value\n     * @param end the last code point to get the value (inclusive)\n     * @param value the value\n     ",
    "links" : [ ]
  }, {
    "name" : "public CodePointTrie buildImmutable(CodePointTrie.Type type, CodePointTrie.ValueWidth valueWidth)",
    "returnType" : "CodePointTrie",
    "comment" : "\n     * Compacts the data and builds an immutable {@link CodePointTrie} according to the parameters.\n     * After this, the mutable trie will be empty.\n     *\n     * <p>The mutable trie stores 32-bit values until buildImmutable() is called.\n     * If values shorter than 32 bits are to be stored in the immutable trie,\n     * then the upper bits are discarded.\n     * For example, when the mutable trie contains values 0x81, -0x7f, and 0xa581,\n     * and the value width is 8 bits, then each of these is stored as 0x81\n     * and the immutable trie will return that as an unsigned value.\n     * (Some implementations may want to make productive temporary use of the upper bits\n     * until buildImmutable() discards them.)\n     *\n     * <p>Not every possible set of mappings can be built into a CodePointTrie,\n     * because of limitations resulting from speed and space optimizations.\n     * Every Unicode assigned character can be mapped to a unique value.\n     * Typical data yields data structures far smaller than the limitations.\n     *\n     * <p>It is possible to construct extremely unusual mappings that exceed the\n     * data structure limits.\n     * In such a case this function will throw an exception.\n     *\n     * @param type selects the trie type\n     * @param valueWidth selects the number of bits in a trie data value; if smaller than 32 bits,\n     *                   then the values stored in the trie will be truncated first\n     *\n     * @see #fromCodePointMap(CodePointMap)\n     ",
    "links" : [ "android.icu.util.CodePointTrie" ]
  }, {
    "name" : "private void ensureHighStart(int c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int allocDataBlock(int blockLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getDataBlock(int i)",
    "returnType" : "int",
    "comment" : "\n     * No error checking for illegal arguments.\n     * The Java version always returns non-negative values.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void maskValues(int mask)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean equalBlocks(int[] s, int si, int[] t, int ti, int length)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean equalBlocks(char[] s, int si, int[] t, int ti, int length)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean equalBlocks(char[] s, int si, char[] t, int ti, int length)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean allValuesSameAs(int[] p, int pi, int length, int value)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int findSameBlock(char[] p, int pStart, int length, char[] q, int qStart, int blockLength)",
    "returnType" : "int",
    "comment" : " Search for an identical block. ",
    "links" : [ ]
  }, {
    "name" : "private static int findAllSameBlock(int[] p, int start, int limit, int value, int blockLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getOverlap(int[] p, int length, int[] q, int qStart, int blockLength)",
    "returnType" : "int",
    "comment" : "\n     * Look for maximum overlap of the beginning of the other block\n     * with the previous, adjacent block.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getOverlap(char[] p, int length, int[] q, int qStart, int blockLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getOverlap(char[] p, int length, char[] q, int qStart, int blockLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getAllSameOverlap(int[] p, int length, int value, int blockLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isStartOfSomeFastBlock(int dataOffset, int[] index, int fastILimit)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findHighStart()",
    "returnType" : "int",
    "comment" : "\n     * Finds the start of the last range in the trie by enumerating backward.\n     * Indexes for code points higher than this will be omitted.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int compactWholeDataBlocks(int fastILimit, AllSameBlocks allSameBlocks)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int compactData(int fastILimit, int[] newData, int dataNullIndex, MixedBlocks mixedBlocks)",
    "returnType" : "int",
    "comment" : "\n     * Compacts a build-time trie.\n     *\n     * The compaction\n     * - removes blocks that are identical with earlier ones\n     * - overlaps each new non-duplicate block as much as possible with the previously-written one\n     * - works with fast-range data blocks whose length is a multiple of that of\n     *   higher-code-point data blocks\n     *\n     * It does not try to find an optimal order of writing, deduplicating, and overlapping blocks.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int compactIndex(int fastILimit, MixedBlocks mixedBlocks)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int compactTrie(int fastILimit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CodePointTrie build(CodePointTrie.Type type, CodePointTrie.ValueWidth valueWidth)",
    "returnType" : "CodePointTrie",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public MutableCodePointTrie clone()", "public static MutableCodePointTrie fromCodePointMap(CodePointMap map)", "private void clear()", "public int get(int c)", "private static final int maybeFilterValue(int value, int initialValue, int nullValue, ValueFilter filter)", "public boolean getRange(int start, CodePointTrie.ValueFilter filter, CodePointTrie.Range range)", "private void writeBlock(int block, int value)", "public void set(int c, int value)", "private void fillBlock(int block, int start, int limit, int value)", "public void setRange(int start, int end, int value)", "public CodePointTrie buildImmutable(CodePointTrie.Type type, CodePointTrie.ValueWidth valueWidth)", "private void ensureHighStart(int c)", "private int allocDataBlock(int blockLength)", "private int getDataBlock(int i)", "private void maskValues(int mask)", "private static boolean equalBlocks(int[] s, int si, int[] t, int ti, int length)", "private static boolean equalBlocks(char[] s, int si, int[] t, int ti, int length)", "private static boolean equalBlocks(char[] s, int si, char[] t, int ti, int length)", "private static boolean allValuesSameAs(int[] p, int pi, int length, int value)", "private static int findSameBlock(char[] p, int pStart, int length, char[] q, int qStart, int blockLength)", "private static int findAllSameBlock(int[] p, int start, int limit, int value, int blockLength)", "private static int getOverlap(int[] p, int length, int[] q, int qStart, int blockLength)", "private static int getOverlap(char[] p, int length, int[] q, int qStart, int blockLength)", "private static int getOverlap(char[] p, int length, char[] q, int qStart, int blockLength)", "private static int getAllSameOverlap(int[] p, int length, int value, int blockLength)", "private static boolean isStartOfSomeFastBlock(int dataOffset, int[] index, int fastILimit)", "private int findHighStart()", "private int compactWholeDataBlocks(int fastILimit, AllSameBlocks allSameBlocks)", "private int compactData(int fastILimit, int[] newData, int dataNullIndex, MixedBlocks mixedBlocks)", "private int compactIndex(int fastILimit, MixedBlocks mixedBlocks)", "private int compactTrie(int fastILimit)", "private CodePointTrie build(CodePointTrie.Type type, CodePointTrie.ValueWidth valueWidth)" ],
  "variableNames" : [ "MAX_UNICODE", "UNICODE_LIMIT", "BMP_LIMIT", "ASCII_LIMIT", "I_LIMIT", "BMP_I_LIMIT", "ASCII_I_LIMIT", "SMALL_DATA_BLOCKS_PER_BMP_BLOCK", "ALL_SAME", "MIXED", "SAME_AS", "INITIAL_DATA_LENGTH", "MEDIUM_DATA_LENGTH", "MAX_DATA_LENGTH", "I3_NULL", "I3_BMP", "I3_16", "I3_18", "INDEX_3_18BIT_BLOCK_LENGTH", "index", "index3NullOffset", "data", "dataLength", "dataNullOffset", "origInitialValue", "initialValue", "errorValue", "highStart", "highValue", "index16", "flags" ]
}