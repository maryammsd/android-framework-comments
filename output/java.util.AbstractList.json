{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/AbstractList.java",
  "packageName" : "java.util",
  "className" : "AbstractList",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "modCount",
    "type" : "int",
    "comment" : "\n     * The number of times this list has been <i>structurally modified</i>.\n     * Structural modifications are those that change the size of the\n     * list, or otherwise perturb it in such a fashion that iterations in\n     * progress may yield incorrect results.\n     *\n     * <p>This field is used by the iterator and list iterator implementation\n     * returned by the {@code iterator} and {@code listIterator} methods.\n     * If the value of this field changes unexpectedly, the iterator (or list\n     * iterator) will throw a {@code ConcurrentModificationException} in\n     * response to the {@code next}, {@code remove}, {@code previous},\n     * {@code set} or {@code add} operations.  This provides\n     * <i>fail-fast</i> behavior, rather than non-deterministic behavior in\n     * the face of concurrent modification during iteration.\n     *\n     * <p><b>Use of this field by subclasses is optional.</b> If a subclass\n     * wishes to provide fail-fast iterators (and list iterators), then it\n     * merely has to increment this field in its {@code add(int, E)} and\n     * {@code remove(int)} methods (and any other methods that it overrides\n     * that result in structural modifications to the list).  A single call to\n     * {@code add(int, E)} or {@code remove(int)} must add no more than\n     * one to this field, or the iterators (and list iterators) will throw\n     * bogus {@code ConcurrentModificationExceptions}.  If an implementation\n     * does not wish to provide fail-fast iterators, this field may be\n     * ignored.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends the specified element to the end of this list (optional\n     * operation).\n     *\n     * <p>Lists that support this operation may place limitations on what\n     * elements may be added to this list.  In particular, some\n     * lists will refuse to add null elements, and others will impose\n     * restrictions on the type of elements that may be added.  List\n     * classes should clearly specify in their documentation any restrictions\n     * on what elements may be added.\n     *\n     * @implSpec\n     * This implementation calls {@code add(size(), e)}.\n     *\n     * <p>Note that this implementation throws an\n     * {@code UnsupportedOperationException} unless\n     * {@link #add(int, Object) add(int, E)} is overridden.\n     *\n     * @param e element to be appended to this list\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws UnsupportedOperationException if the {@code add} operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this list\n     * @throws NullPointerException if the specified element is null and this\n     *         list does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this list\n     ",
    "links" : [ "#add(int", "java.util.Collection#add" ]
  }, {
    "name" : "public abstract E get(int index)",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E set(int index, E element)",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation always throws an\n     * {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void add(int index, E element)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation always throws an\n     * {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E remove(int index)",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation always throws an\n     * {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(Object o)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation first gets a list iterator (with\n     * {@code listIterator()}).  Then, it iterates over the list until the\n     * specified element is found or the end of the list is reached.\n     *\n     * @throws ClassCastException   {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int lastIndexOf(Object o)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation first gets a list iterator that points to the end\n     * of the list (with {@code listIterator(size())}).  Then, it iterates\n     * backwards over the list until the specified element is found, or the\n     * beginning of the list is reached.\n     *\n     * @throws ClassCastException   {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this list (optional operation).\n     * The list will be empty after this call returns.\n     *\n     * @implSpec\n     * This implementation calls {@code removeRange(0, size())}.\n     *\n     * <p>Note that this implementation throws an\n     * {@code UnsupportedOperationException} unless {@code remove(int\n     * index)} or {@code removeRange(int fromIndex, int toIndex)} is\n     * overridden.\n     *\n     * @throws UnsupportedOperationException if the {@code clear} operation\n     *         is not supported by this list\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(int index, Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation gets an iterator over the specified collection\n     * and iterates over it, inserting the elements obtained from the\n     * iterator into this list at the appropriate position, one at a time,\n     * using {@code add(int, E)}.\n     * Many implementations will override this method for efficiency.\n     *\n     * <p>Note that this implementation throws an\n     * {@code UnsupportedOperationException} unless\n     * {@link #add(int, Object) add(int, E)} is overridden.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     ",
    "links" : [ "#add(int" ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this list in proper sequence.\n     *\n     * @implSpec\n     * This implementation returns a straightforward implementation of the\n     * iterator interface, relying on the backing list's {@code size()},\n     * {@code get(int)}, and {@code remove(int)} methods.\n     *\n     * <p>Note that the iterator returned by this method will throw an\n     * {@link UnsupportedOperationException} in response to its\n     * {@code remove} method unless the list's {@code remove(int)} method is\n     * overridden.\n     *\n     * <p>This implementation can be made to throw runtime exceptions in the\n     * face of concurrent modification, as described in the specification\n     * for the (protected) {@link #modCount} field.\n     *\n     * @return an iterator over the elements in this list in proper sequence\n     ",
    "links" : [ "#modCount", "UnsupportedOperationException" ]
  }, {
    "name" : "public ListIterator<E> listIterator()",
    "returnType" : "ListIterator<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation returns {@code listIterator(0)}.\n     *\n     * @see #listIterator(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ListIterator<E> listIterator(final int index)",
    "returnType" : "ListIterator<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation returns a straightforward implementation of the\n     * {@code ListIterator} interface that extends the implementation of the\n     * {@code Iterator} interface returned by the {@code iterator()} method.\n     * The {@code ListIterator} implementation relies on the backing list's\n     * {@code get(int)}, {@code set(int, E)}, {@code add(int, E)}\n     * and {@code remove(int)} methods.\n     *\n     * <p>Note that the list iterator returned by this implementation will\n     * throw an {@link UnsupportedOperationException} in response to its\n     * {@code remove}, {@code set} and {@code add} methods unless the\n     * list's {@code remove(int)}, {@code set(int, E)}, and\n     * {@code add(int, E)} methods are overridden.\n     *\n     * <p>This implementation can be made to throw runtime exceptions in the\n     * face of concurrent modification, as described in the specification for\n     * the (protected) {@link #modCount} field.\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ "#modCount", "UnsupportedOperationException" ]
  }, {
    "name" : "public List<E> subList(int fromIndex, int toIndex)",
    "returnType" : "List<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation returns a list that subclasses\n     * {@code AbstractList}.  The subclass stores, in private fields, the\n     * size of the subList (which can change over its lifetime), and the\n     * expected {@code modCount} value of the backing list.  There are two\n     * variants of the subclass, one of which implements {@code RandomAccess}.\n     * If this list implements {@code RandomAccess} the returned list will\n     * be an instance of the subclass that implements {@code RandomAccess}.\n     *\n     * <p>The subclass's {@code set(int, E)}, {@code get(int)},\n     * {@code add(int, E)}, {@code remove(int)}, {@code addAll(int,\n     * Collection)} and {@code removeRange(int, int)} methods all\n     * delegate to the corresponding methods on the backing abstract list,\n     * after bounds-checking the index and adjusting for the offset.  The\n     * {@code addAll(Collection c)} method merely returns {@code addAll(size,\n     * c)}.\n     *\n     * <p>The {@code listIterator(int)} method returns a \"wrapper object\"\n     * over a list iterator on the backing list, which is created with the\n     * corresponding method on the backing list.  The {@code iterator} method\n     * merely returns {@code listIterator()}, and the {@code size} method\n     * merely returns the subclass's {@code size} field.\n     *\n     * <p>All methods first check to see if the actual {@code modCount} of\n     * the backing list is equal to its expected value, and throw a\n     * {@code ConcurrentModificationException} if it is not.\n     *\n     * @throws IndexOutOfBoundsException if an endpoint index value is out of range\n     *         {@code (fromIndex < 0 || toIndex > size)}\n     * @throws IllegalArgumentException if the endpoint indices are out of order\n     *         {@code (fromIndex > toIndex)}\n     ",
    "links" : [ ]
  }, {
    "name" : " static void subListRangeCheck(int fromIndex, int toIndex, int size)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object with this list for equality.  Returns\n     * {@code true} if and only if the specified object is also a list, both\n     * lists have the same size, and all corresponding pairs of elements in\n     * the two lists are <i>equal</i>.  (Two elements {@code e1} and\n     * {@code e2} are <i>equal</i> if {@code (e1==null ? e2==null :\n     * e1.equals(e2))}.)  In other words, two lists are defined to be\n     * equal if they contain the same elements in the same order.\n     *\n     * @implSpec\n     * This implementation first checks if the specified object is this\n     * list. If so, it returns {@code true}; if not, it checks if the\n     * specified object is a list. If not, it returns {@code false}; if so,\n     * it iterates over both lists, comparing corresponding pairs of elements.\n     * If any comparison returns {@code false}, this method returns\n     * {@code false}.  If either iterator runs out of elements before the\n     * other it returns {@code false} (as the lists are of unequal length);\n     * otherwise it returns {@code true} when the iterations complete.\n     *\n     * @param o the object to be compared for equality with this list\n     * @return {@code true} if the specified object is equal to this list\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this list.\n     *\n     * @implSpec\n     * This implementation uses exactly the code that is used to define the\n     * list hash function in the documentation for the {@link List#hashCode}\n     * method.\n     *\n     * @return the hash code value for this list\n     ",
    "links" : [ "java.util.List#hashCode" ]
  }, {
    "name" : "protected void removeRange(int fromIndex, int toIndex)",
    "returnType" : "void",
    "comment" : "\n     * Removes from this list all of the elements whose index is between\n     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.\n     * Shifts any succeeding elements to the left (reduces their index).\n     * This call shortens the list by {@code (toIndex - fromIndex)} elements.\n     * (If {@code toIndex==fromIndex}, this operation has no effect.)\n     *\n     * <p>This method is called by the {@code clear} operation on this list\n     * and its subLists.  Overriding this method to take advantage of\n     * the internals of the list implementation can <i>substantially</i>\n     * improve the performance of the {@code clear} operation on this list\n     * and its subLists.\n     *\n     * @implSpec\n     * This implementation gets a list iterator positioned before\n     * {@code fromIndex}, and repeatedly calls {@code ListIterator.next}\n     * followed by {@code ListIterator.remove} until the entire range has\n     * been removed.  <b>Note: if {@code ListIterator.remove} requires linear\n     * time, this implementation requires quadratic time.</b>\n     *\n     * @param fromIndex index of first element to be removed\n     * @param toIndex index after last element to be removed\n     ",
    "links" : [ ]
  }, {
    "name" : "private void rangeCheckForAdd(int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String outOfBoundsMsg(int index)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean add(E e)", "public abstract E get(int index)", "public E set(int index, E element)", "public void add(int index, E element)", "public E remove(int index)", "public int indexOf(Object o)", "public int lastIndexOf(Object o)", "public void clear()", "public boolean addAll(int index, Collection<? extends E> c)", "public Iterator<E> iterator()", "public ListIterator<E> listIterator()", "public ListIterator<E> listIterator(final int index)", "public List<E> subList(int fromIndex, int toIndex)", " static void subListRangeCheck(int fromIndex, int toIndex, int size)", "public boolean equals(Object o)", "public int hashCode()", "protected void removeRange(int fromIndex, int toIndex)", "private void rangeCheckForAdd(int index)", "private String outOfBoundsMsg(int index)" ],
  "variableNames" : [ "modCount" ]
}