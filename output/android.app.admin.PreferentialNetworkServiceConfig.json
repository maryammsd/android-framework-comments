{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/admin/PreferentialNetworkServiceConfig.java",
  "packageName" : "android.app.admin",
  "className" : "PreferentialNetworkServiceConfig",
  "comment" : "\n * Network configuration to be set for the user profile\n * {@see DevicePolicyManager#setPreferentialNetworkServiceConfigs}.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mIsEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowFallbackToDefaultConnection",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldBlockNonMatchingNetworks",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludedUids",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcludedUids",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PREFERENTIAL_NETWORK_SERVICE_CONFIG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_CONFIG_ENABLED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_UID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_NETWORK_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_ALLOW_FALLBACK_TO_DEFAULT_CONNECTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_BLOCK_NON_MATCHING_NETWORKS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_INCLUDED_UIDS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_EXCLUDED_UIDS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_VALUE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT",
    "type" : "PreferentialNetworkServiceConfig",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PREFERENTIAL_NETWORK_ID_1",
    "type" : "int",
    "comment" : "\n     * Preferential network identifier 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREFERENTIAL_NETWORK_ID_2",
    "type" : "int",
    "comment" : "\n     * Preferential network identifier 2.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREFERENTIAL_NETWORK_ID_3",
    "type" : "int",
    "comment" : "\n     * Preferential network identifier 3.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREFERENTIAL_NETWORK_ID_4",
    "type" : "int",
    "comment" : "\n     * Preferential network identifier 4.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREFERENTIAL_NETWORK_ID_5",
    "type" : "int",
    "comment" : "\n     * Preferential network identifier 5.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<PreferentialNetworkServiceConfig>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Is the preferential network enabled.\n     * @return true if enabled else false\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFallbackToDefaultConnectionAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether fallback to the device-wide default network is allowed.\n     *\n     * This boolean configures whether the default connection (e.g. general cell network or wifi)\n     * should be used if no preferential network service connection is available. If true, the\n     * default connection will be used when no preferential service is available. If false, the\n     * UIDs subject to this configuration will have no default network.\n     * Note that while this boolean determines whether the UIDs subject to this configuration have\n     * a default network in the absence of a preferential service, apps can still explicitly decide\n     * to use another network than their default network by requesting them from the system. This\n     * boolean does not determine whether the UIDs are blocked from using such other networks.\n     * See {@link #shouldBlockNonMatchingNetworks()} for that configuration.\n     *\n     * @return true if fallback is allowed, else false.\n     ",
    "links" : [ "#shouldBlockNonMatchingNetworks()" ]
  }, {
    "name" : "public boolean shouldBlockNonMatchingNetworks()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether to block UIDs from using other networks than the preferential service.\n     *\n     * Apps can inspect the list of available networks on the device and choose to use multiple\n     * of them concurrently for performance, privacy or other reasons.\n     * This boolean configures whether the concerned UIDs should be blocked from using\n     * networks that do not match the configured preferential network service even if these\n     * networks are otherwise open to all apps.\n     *\n     * @return true if UIDs should be blocked from using the other networks, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getIncludedUids()",
    "returnType" : "int[]",
    "comment" : "\n     * Get the array of uids that are applicable for the profile preference.\n     *\n     * {@see #getExcludedUids()}\n     * Included UIDs and Excluded UIDs can't both be non-empty.\n     * if both are empty, it means this request applies to all uids in the user profile.\n     * if included is not empty, then only included UIDs are applied.\n     * if excluded is not empty, then it is all uids in the user profile except these UIDs.\n     * @return Array of uids applicable for the profile preference.\n     *      Empty array would mean that this request applies to all uids in the profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getExcludedUids()",
    "returnType" : "int[]",
    "comment" : "\n     * Get the array of uids that are excluded for the profile preference.\n     *\n     * {@see #getIncludedUids()}\n     * Included UIDs and Excluded UIDs can't both be non-empty.\n     * if both are empty, it means this request applies to all uids in the user profile.\n     * if included is not empty, then only included UIDs are applied.\n     * if excluded is not empty, then it is all uids in the user profile except these UIDs.\n     * @return Array of uids that are excluded for the profile preference.\n     *      Empty array would mean that this request applies to all uids in the profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkId()",
    "returnType" : "int",
    "comment" : "\n     * @return preference enterprise identifier.\n     * preference identifier is applicable only if preference network service is enabled\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull android.os.Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeAttributeValueToXml(TypedXmlSerializer out, String tag, int value) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeAttributeValueToXml(TypedXmlSerializer out, String tag, boolean value) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeAttributeValuesToXml(TypedXmlSerializer out, String outerTag, String innerTag, @NonNull Collection<String> values) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void readAttributeValues(TypedXmlPullParser parser, String tag, Collection<String> result) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<String> intArrayToStringList(int[] array)",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int[] readStringListToIntArray(TypedXmlPullParser parser, String tag) throws XmlPullParserException, IOException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PreferentialNetworkServiceConfig getPreferentialNetworkServiceConfig(TypedXmlPullParser parser, String tag) throws XmlPullParserException, IOException",
    "returnType" : "PreferentialNetworkServiceConfig",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToXml(@NonNull TypedXmlSerializer out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(IndentingPrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isEnabled()", "public boolean isFallbackToDefaultConnectionAllowed()", "public boolean shouldBlockNonMatchingNetworks()", "public int[] getIncludedUids()", "public int[] getExcludedUids()", "public int getNetworkId()", "public String toString()", "public boolean equals(Object o)", "public int hashCode()", "public void writeToParcel(@NonNull android.os.Parcel dest, int flags)", "private void writeAttributeValueToXml(TypedXmlSerializer out, String tag, int value) throws IOException", "private void writeAttributeValueToXml(TypedXmlSerializer out, String tag, boolean value) throws IOException", "private void writeAttributeValuesToXml(TypedXmlSerializer out, String outerTag, String innerTag, @NonNull Collection<String> values) throws IOException", "private static void readAttributeValues(TypedXmlPullParser parser, String tag, Collection<String> result) throws XmlPullParserException, IOException", "private List<String> intArrayToStringList(int[] array)", "private static int[] readStringListToIntArray(TypedXmlPullParser parser, String tag) throws XmlPullParserException, IOException", "public static PreferentialNetworkServiceConfig getPreferentialNetworkServiceConfig(TypedXmlPullParser parser, String tag) throws XmlPullParserException, IOException", "public void writeToXml(@NonNull TypedXmlSerializer out) throws IOException", "public void dump(IndentingPrintWriter pw)", "public int describeContents()" ],
  "variableNames" : [ "mIsEnabled", "mNetworkId", "mAllowFallbackToDefaultConnection", "mShouldBlockNonMatchingNetworks", "mIncludedUids", "mExcludedUids", "LOG_TAG", "TAG_PREFERENTIAL_NETWORK_SERVICE_CONFIG", "TAG_CONFIG_ENABLED", "TAG_UID", "TAG_NETWORK_ID", "TAG_ALLOW_FALLBACK_TO_DEFAULT_CONNECTION", "TAG_BLOCK_NON_MATCHING_NETWORKS", "TAG_INCLUDED_UIDS", "TAG_EXCLUDED_UIDS", "ATTR_VALUE", "DEFAULT", "PREFERENTIAL_NETWORK_ID_1", "PREFERENTIAL_NETWORK_ID_2", "PREFERENTIAL_NETWORK_ID_3", "PREFERENTIAL_NETWORK_ID_4", "PREFERENTIAL_NETWORK_ID_5", "CREATOR" ]
}