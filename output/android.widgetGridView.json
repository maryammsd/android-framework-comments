{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/GridView.java",
  "packageName" : "android.widget",
  "className" : "GridView",
  "comment" : "\n * A view that shows items in two-dimensional scrolling grid. The items in the\n * grid come from the {@link ListAdapter} associated with this view.\n *\n * <p>See the <a href=\"{@docRoot}guide/topics/ui/layout/gridview.html\">Grid\n * View</a> guide.</p>\n *\n * @attr ref android.R.styleable#GridView_horizontalSpacing\n * @attr ref android.R.styleable#GridView_verticalSpacing\n * @attr ref android.R.styleable#GridView_stretchMode\n * @attr ref android.R.styleable#GridView_columnWidth\n * @attr ref android.R.styleable#GridView_numColumns\n * @attr ref android.R.styleable#GridView_gravity\n ",
  "variables" : [ {
    "name" : "NO_STRETCH",
    "type" : "int",
    "comment" : "\n     * Disables stretching.\n     *\n     * @see #setStretchMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "STRETCH_SPACING",
    "type" : "int",
    "comment" : "\n     * Stretches the spacing between columns.\n     *\n     * @see #setStretchMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "STRETCH_COLUMN_WIDTH",
    "type" : "int",
    "comment" : "\n     * Stretches columns.\n     *\n     * @see #setStretchMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "STRETCH_SPACING_UNIFORM",
    "type" : "int",
    "comment" : "\n     * Stretches the spacing between columns. The spacing is uniform.\n     *\n     * @see #setStretchMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTO_FIT",
    "type" : "int",
    "comment" : "\n     * Creates as many columns as can fit on screen.\n     *\n     * @see #setNumColumns(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "mNumColumns",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHorizontalSpacing",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestedHorizontalSpacing",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerticalSpacing",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStretchMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumnWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestedColumnWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestedNumColumns",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReferenceView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReferenceViewInSelectedRow",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ListAdapter getAdapter()",
    "returnType" : "ListAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRemoteViewsAdapter(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService\n     * through the specified intent.\n     * @param intent the intent used to identify the RemoteViewsService for the adapter to connect to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAdapter(ListAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the data behind this GridView.\n     *\n     * @param adapter the adapter providing the grid's data\n     ",
    "links" : [ ]
  }, {
    "name" : " int lookForSelectablePosition(int position, boolean lookDown)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void fillGap(boolean down)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private View fillDown(int pos, int nextTop)",
    "returnType" : "View",
    "comment" : "\n     * Fills the list from pos down to the end of the list view.\n     *\n     * @param pos The first position to put in the list\n     *\n     * @param nextTop The location where the top of the item associated with pos\n     *        should be drawn\n     *\n     * @return The view that is currently selected, if it happens to be in the\n     *         range that we draw.\n     ",
    "links" : [ ]
  }, {
    "name" : "private View makeRow(int startPos, int y, boolean flow)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View fillUp(int pos, int nextBottom)",
    "returnType" : "View",
    "comment" : "\n     * Fills the list from pos up to the top of the list view.\n     *\n     * @param pos The first position to put in the list\n     *\n     * @param nextBottom The location where the bottom of the item associated\n     *        with pos should be drawn\n     *\n     * @return The view that is currently selected\n     ",
    "links" : [ ]
  }, {
    "name" : "private View fillFromTop(int nextTop)",
    "returnType" : "View",
    "comment" : "\n     * Fills the list from top to bottom, starting with mFirstPosition\n     *\n     * @param nextTop The location where the top of the first item should be\n     *        drawn\n     *\n     * @return The view that is currently selected\n     ",
    "links" : [ ]
  }, {
    "name" : "private View fillFromBottom(int lastPosition, int nextBottom)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View fillSelection(int childrenTop, int childrenBottom)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void pinToTop(int childrenTop)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void pinToBottom(int childrenBottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int findMotionRow(int y)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View fillSpecific(int position, int top)",
    "returnType" : "View",
    "comment" : "\n     * Layout during a scroll that results from tracking motion events. Places\n     * the mMotionPosition view at the offset specified by mMotionViewTop, and\n     * then build surrounding views from there.\n     *\n     * @param position the position at which to start filling\n     * @param top the top of the view at that position\n     * @return The selected view, or null if the selected view is outside the\n     *         visible area.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void correctTooHigh(int numColumns, int verticalSpacing, int childCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void correctTooLow(int numColumns, int verticalSpacing, int childCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View fillFromSelection(int selectedTop, int childrenTop, int childrenBottom)",
    "returnType" : "View",
    "comment" : "\n     * Fills the grid based on positioning the new selection at a specific\n     * location. The selection may be moved so that it does not intersect the\n     * faded edges. The grid is then filled upwards and downwards from there.\n     *\n     * @param selectedTop Where the selected item should be\n     * @param childrenTop Where to start drawing children\n     * @param childrenBottom Last pixel where children can be drawn\n     * @return The view that currently has selection\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getBottomSelectionPixel(int childrenBottom, int fadingEdgeLength, int numColumns, int rowStart)",
    "returnType" : "int",
    "comment" : "\n     * Calculate the bottom-most pixel we can draw the selection into\n     *\n     * @param childrenBottom Bottom pixel were children can be drawn\n     * @param fadingEdgeLength Length of the fading edge in pixels, if present\n     * @param numColumns Number of columns in the grid\n     * @param rowStart The start of the row that will contain the selection\n     * @return The bottom-most pixel we can draw the selection into\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getTopSelectionPixel(int childrenTop, int fadingEdgeLength, int rowStart)",
    "returnType" : "int",
    "comment" : "\n     * Calculate the top-most pixel we can draw the selection into\n     *\n     * @param childrenTop Top pixel were children can be drawn\n     * @param fadingEdgeLength Length of the fading edge in pixels, if present\n     * @param rowStart The start of the row that will contain the selection\n     * @return The top-most pixel we can draw the selection into\n     ",
    "links" : [ ]
  }, {
    "name" : "private void adjustForBottomFadingEdge(View childInSelectedRow, int topSelectionPixel, int bottomSelectionPixel)",
    "returnType" : "void",
    "comment" : "\n     * Move all views upwards so the selected row does not interesect the bottom\n     * fading edge (if necessary).\n     *\n     * @param childInSelectedRow A child in the row that contains the selection\n     * @param topSelectionPixel The topmost pixel we can draw the selection into\n     * @param bottomSelectionPixel The bottommost pixel we can draw the\n     *        selection into\n     ",
    "links" : [ ]
  }, {
    "name" : "private void adjustForTopFadingEdge(View childInSelectedRow, int topSelectionPixel, int bottomSelectionPixel)",
    "returnType" : "void",
    "comment" : "\n     * Move all views upwards so the selected row does not interesect the top\n     * fading edge (if necessary).\n     *\n     * @param childInSelectedRow A child in the row that contains the selection\n     * @param topSelectionPixel The topmost pixel we can draw the selection into\n     * @param bottomSelectionPixel The bottommost pixel we can draw the\n     *        selection into\n     ",
    "links" : [ ]
  }, {
    "name" : "public void smoothScrollToPosition(int position)",
    "returnType" : "void",
    "comment" : "\n     * Smoothly scroll to the specified adapter position. The view will\n     * scroll such that the indicated position is displayed.\n     * @param position Scroll to this adapter position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void smoothScrollByOffset(int offset)",
    "returnType" : "void",
    "comment" : "\n     * Smoothly scroll to the specified adapter position offset. The view will\n     * scroll such that the indicated position is displayed.\n     * @param offset The amount to offset from the adapter position to scroll to.\n     ",
    "links" : [ ]
  }, {
    "name" : "private View moveSelection(int delta, int childrenTop, int childrenBottom)",
    "returnType" : "View",
    "comment" : "\n     * Fills the grid based on positioning the new selection relative to the old\n     * selection. The new selection will be placed at, above, or below the\n     * location of the new selection depending on how the selection is moving.\n     * The selection will then be pinned to the visible part of the screen,\n     * excluding the edges that are faded. The grid is then filled upwards and\n     * downwards from there.\n     *\n     * @param delta Which way we are moving\n     * @param childrenTop Where to start drawing children\n     * @param childrenBottom Last pixel where children can be drawn\n     * @return The view that currently has selection\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean determineColumns(int availableSpace)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void attachLayoutAnimationParameters(View child, ViewGroup.LayoutParams params, int index, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void layoutChildren()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View makeAndAddView(int position, int y, boolean flow, int childrenLeft, boolean selected, int where)",
    "returnType" : "View",
    "comment" : "\n     * Obtains the view and adds it to our list of children. The view can be\n     * made fresh, converted from an unused view, or used as is if it was in\n     * the recycle bin.\n     *\n     * @param position logical position in the list\n     * @param y top or bottom edge of the view to add\n     * @param flow {@code true} to align top edge to y, {@code false} to align\n     *             bottom edge to y\n     * @param childrenLeft left edge where children should be positioned\n     * @param selected {@code true} if the position is selected, {@code false}\n     *                 otherwise\n     * @param where position at which to add new item in the list\n     * @return View that was added\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setupChild(View child, int position, int y, boolean flowDown, int childrenLeft, boolean selected, boolean isAttachedToWindow, int where)",
    "returnType" : "void",
    "comment" : "\n     * Adds a view as a child and make sure it is measured (if necessary) and\n     * positioned properly.\n     *\n     * @param child the view to add\n     * @param position the position of this child\n     * @param y the y position relative to which this view will be positioned\n     * @param flowDown {@code true} to align top edge to y, {@code false} to\n     *                 align bottom edge to y\n     * @param childrenLeft left edge where children should be positioned\n     * @param selected {@code true} if the position is selected, {@code false}\n     *                 otherwise\n     * @param isAttachedToWindow {@code true} if the view is already attached\n     *                           to the window, e.g. whether it was reused, or\n     *                           {@code false} otherwise\n     * @param where position at which to add new item in the list\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelection(int position)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currently selected item\n     *\n     * @param position Index (starting at 0) of the data item to be selected.\n     *\n     * If in touch mode, the item will not be selected but it will still be positioned\n     * appropriately.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setSelectionInt(int position)",
    "returnType" : "void",
    "comment" : "\n     * Makes the item at the supplied position selected.\n     *\n     * @param position the position of the new selection\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean commonKey(int keyCode, int count, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean pageScroll(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Scrolls up or down by the number of items currently present on screen.\n     *\n     * @param direction either {@link View#FOCUS_UP} or {@link View#FOCUS_DOWN}\n     * @return whether selection was moved\n     ",
    "links" : [ "View#FOCUS_UP", "View#FOCUS_DOWN" ]
  }, {
    "name" : " boolean fullScroll(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Go to the last or first item if possible.\n     *\n     * @param direction either {@link View#FOCUS_UP} or {@link View#FOCUS_DOWN}.\n     *\n     * @return Whether selection was moved.\n     ",
    "links" : [ "View#FOCUS_UP", "View#FOCUS_DOWN" ]
  }, {
    "name" : " boolean arrowScroll(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Scrolls to the next or previous item, horizontally or vertically.\n     *\n     * @param direction either {@link View#FOCUS_LEFT}, {@link View#FOCUS_RIGHT},\n     *        {@link View#FOCUS_UP} or {@link View#FOCUS_DOWN}\n     *\n     * @return whether selection was moved\n     ",
    "links" : [ "View#FOCUS_LEFT", "View#FOCUS_RIGHT", "View#FOCUS_UP", "View#FOCUS_DOWN" ]
  }, {
    "name" : " boolean sequenceScroll(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Goes to the next or previous item according to the order set by the\n     * adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isCandidateSelection(int childIndex, int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Is childIndex a candidate for next focus given the direction the focus\n     * change is coming from?\n     * @param childIndex The index to check.\n     * @param direction The direction, one of\n     *        {FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT, FOCUS_FORWARD, FOCUS_BACKWARD}\n     * @return Whether childIndex is a candidate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGravity(int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Set the gravity for this grid. Gravity describes how the child views\n     * are horizontally aligned. Defaults to Gravity.LEFT\n     *\n     * @param gravity the gravity to apply to this grid's children\n     *\n     * @attr ref android.R.styleable#GridView_gravity\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGravity()",
    "returnType" : "int",
    "comment" : "\n     * Describes how the child views are horizontally aligned. Defaults to Gravity.LEFT\n     *\n     * @return the gravity that will be applied to this grid's children\n     *\n     * @attr ref android.R.styleable#GridView_gravity\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHorizontalSpacing(int horizontalSpacing)",
    "returnType" : "void",
    "comment" : "\n     * Set the amount of horizontal (x) spacing to place between each item\n     * in the grid.\n     *\n     * @param horizontalSpacing The amount of horizontal space between items,\n     * in pixels.\n     *\n     * @attr ref android.R.styleable#GridView_horizontalSpacing\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHorizontalSpacing()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of horizontal spacing currently used between each item in the grid.\n     *\n     * <p>This is only accurate for the current layout. If {@link #setHorizontalSpacing(int)}\n     * has been called but layout is not yet complete, this method may return a stale value.\n     * To get the horizontal spacing that was explicitly requested use\n     * {@link #getRequestedHorizontalSpacing()}.</p>\n     *\n     * @return Current horizontal spacing between each item in pixels\n     *\n     * @see #setHorizontalSpacing(int)\n     * @see #getRequestedHorizontalSpacing()\n     *\n     * @attr ref android.R.styleable#GridView_horizontalSpacing\n     ",
    "links" : [ "#setHorizontalSpacing", "#getRequestedHorizontalSpacing" ]
  }, {
    "name" : "public int getRequestedHorizontalSpacing()",
    "returnType" : "int",
    "comment" : "\n     * Returns the requested amount of horizontal spacing between each item in the grid.\n     *\n     * <p>The value returned may have been supplied during inflation as part of a style,\n     * the default GridView style, or by a call to {@link #setHorizontalSpacing(int)}.\n     * If layout is not yet complete or if GridView calculated a different horizontal spacing\n     * from what was requested, this may return a different value from\n     * {@link #getHorizontalSpacing()}.</p>\n     *\n     * @return The currently requested horizontal spacing between items, in pixels\n     *\n     * @see #setHorizontalSpacing(int)\n     * @see #getHorizontalSpacing()\n     *\n     * @attr ref android.R.styleable#GridView_horizontalSpacing\n     ",
    "links" : [ "#setHorizontalSpacing", "#getHorizontalSpacing" ]
  }, {
    "name" : "public void setVerticalSpacing(int verticalSpacing)",
    "returnType" : "void",
    "comment" : "\n     * Set the amount of vertical (y) spacing to place between each item\n     * in the grid.\n     *\n     * @param verticalSpacing The amount of vertical space between items,\n     * in pixels.\n     *\n     * @see #getVerticalSpacing()\n     *\n     * @attr ref android.R.styleable#GridView_verticalSpacing\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVerticalSpacing()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of vertical spacing between each item in the grid.\n     *\n     * @return The vertical spacing between items in pixels\n     *\n     * @see #setVerticalSpacing(int)\n     *\n     * @attr ref android.R.styleable#GridView_verticalSpacing\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStretchMode(@StretchMode int stretchMode)",
    "returnType" : "void",
    "comment" : "\n     * Control how items are stretched to fill their space.\n     *\n     * @param stretchMode Either {@link #NO_STRETCH},\n     * {@link #STRETCH_SPACING}, {@link #STRETCH_SPACING_UNIFORM}, or {@link #STRETCH_COLUMN_WIDTH}.\n     *\n     * @attr ref android.R.styleable#GridView_stretchMode\n     ",
    "links" : [ "#NO_STRETCH", "#STRETCH_SPACING", "#STRETCH_SPACING_UNIFORM", "#STRETCH_COLUMN_WIDTH" ]
  }, {
    "name" : "public int getStretchMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColumnWidth(int columnWidth)",
    "returnType" : "void",
    "comment" : "\n     * Set the width of columns in the grid.\n     *\n     * @param columnWidth The column width, in pixels.\n     *\n     * @attr ref android.R.styleable#GridView_columnWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColumnWidth()",
    "returnType" : "int",
    "comment" : "\n     * Return the width of a column in the grid.\n     *\n     * <p>This may not be valid yet if a layout is pending.</p>\n     *\n     * @return The column width in pixels\n     *\n     * @see #setColumnWidth(int)\n     * @see #getRequestedColumnWidth()\n     *\n     * @attr ref android.R.styleable#GridView_columnWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRequestedColumnWidth()",
    "returnType" : "int",
    "comment" : "\n     * Return the requested width of a column in the grid.\n     *\n     * <p>This may not be the actual column width used. Use {@link #getColumnWidth()}\n     * to retrieve the current real width of a column.</p>\n     *\n     * @return The requested column width in pixels\n     *\n     * @see #setColumnWidth(int)\n     * @see #getColumnWidth()\n     *\n     * @attr ref android.R.styleable#GridView_columnWidth\n     ",
    "links" : [ "#getColumnWidth" ]
  }, {
    "name" : "public void setNumColumns(int numColumns)",
    "returnType" : "void",
    "comment" : "\n     * Set the number of columns in the grid\n     *\n     * @param numColumns The desired number of columns.\n     *\n     * @attr ref android.R.styleable#GridView_numColumns\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNumColumns()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of columns in the grid.\n     * Returns {@link #AUTO_FIT} if the Grid has never been laid out.\n     *\n     * @attr ref android.R.styleable#GridView_numColumns\n     *\n     * @see #setNumColumns(int)\n     ",
    "links" : [ "#AUTO_FIT" ]
  }, {
    "name" : "private void adjustViewsUpOrDown()",
    "returnType" : "void",
    "comment" : "\n     * Make sure views are touching the top or bottom edge, as appropriate for\n     * our gravity\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int computeVerticalScrollExtent()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeVerticalScrollOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int computeVerticalScrollRange()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean performAccessibilityActionInternal(int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoForItem(View view, int position, AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "NO_STRETCH", "STRETCH_SPACING", "STRETCH_COLUMN_WIDTH", "STRETCH_SPACING_UNIFORM", "AUTO_FIT", "mNumColumns", "mHorizontalSpacing", "mRequestedHorizontalSpacing", "mVerticalSpacing", "mStretchMode", "mColumnWidth", "mRequestedColumnWidth", "mRequestedNumColumns", "mReferenceView", "mReferenceViewInSelectedRow", "mGravity", "mTempRect" ],
  "methodNames" : [ "public ListAdapter getAdapter()", "public void setRemoteViewsAdapter(Intent intent)", "public void setAdapter(ListAdapter adapter)", " int lookForSelectablePosition(int position, boolean lookDown)", " void fillGap(boolean down)", "private View fillDown(int pos, int nextTop)", "private View makeRow(int startPos, int y, boolean flow)", "private View fillUp(int pos, int nextBottom)", "private View fillFromTop(int nextTop)", "private View fillFromBottom(int lastPosition, int nextBottom)", "private View fillSelection(int childrenTop, int childrenBottom)", "private void pinToTop(int childrenTop)", "private void pinToBottom(int childrenBottom)", " int findMotionRow(int y)", "private View fillSpecific(int position, int top)", "private void correctTooHigh(int numColumns, int verticalSpacing, int childCount)", "private void correctTooLow(int numColumns, int verticalSpacing, int childCount)", "private View fillFromSelection(int selectedTop, int childrenTop, int childrenBottom)", "private int getBottomSelectionPixel(int childrenBottom, int fadingEdgeLength, int numColumns, int rowStart)", "private int getTopSelectionPixel(int childrenTop, int fadingEdgeLength, int rowStart)", "private void adjustForBottomFadingEdge(View childInSelectedRow, int topSelectionPixel, int bottomSelectionPixel)", "private void adjustForTopFadingEdge(View childInSelectedRow, int topSelectionPixel, int bottomSelectionPixel)", "public void smoothScrollToPosition(int position)", "public void smoothScrollByOffset(int offset)", "private View moveSelection(int delta, int childrenTop, int childrenBottom)", "private boolean determineColumns(int availableSpace)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void attachLayoutAnimationParameters(View child, ViewGroup.LayoutParams params, int index, int count)", "protected void layoutChildren()", "private View makeAndAddView(int position, int y, boolean flow, int childrenLeft, boolean selected, int where)", "private void setupChild(View child, int position, int y, boolean flowDown, int childrenLeft, boolean selected, boolean isAttachedToWindow, int where)", "public void setSelection(int position)", " void setSelectionInt(int position)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "private boolean commonKey(int keyCode, int count, KeyEvent event)", " boolean pageScroll(int direction)", " boolean fullScroll(int direction)", " boolean arrowScroll(int direction)", " boolean sequenceScroll(int direction)", "protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)", "private boolean isCandidateSelection(int childIndex, int direction)", "public void setGravity(int gravity)", "public int getGravity()", "public void setHorizontalSpacing(int horizontalSpacing)", "public int getHorizontalSpacing()", "public int getRequestedHorizontalSpacing()", "public void setVerticalSpacing(int verticalSpacing)", "public int getVerticalSpacing()", "public void setStretchMode(@StretchMode int stretchMode)", "public int getStretchMode()", "public void setColumnWidth(int columnWidth)", "public int getColumnWidth()", "public int getRequestedColumnWidth()", "public void setNumColumns(int numColumns)", "public int getNumColumns()", "private void adjustViewsUpOrDown()", "protected int computeVerticalScrollExtent()", "protected int computeVerticalScrollOffset()", "protected int computeVerticalScrollRange()", "public CharSequence getAccessibilityClassName()", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public boolean performAccessibilityActionInternal(int action, Bundle arguments)", "public void onInitializeAccessibilityNodeInfoForItem(View view, int position, AccessibilityNodeInfo info)", "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)" ]
}