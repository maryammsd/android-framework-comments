{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiSsid.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiSsid",
  "comment" : "\n * Representation of a Wi-Fi Service Set Identifier (SSID).\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mBytes",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiSsid>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "octets",
    "type" : "ByteArrayOutputStream",
    "comment" : " TODO(b/231433398): add maxTargetSdk = Build.VERSION_CODES.S",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "String",
    "comment" : " TODO(b/231433398): add maxTargetSdk = Build.VERSION_CODES.S",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static WifiSsid fromBytes(@Nullable byte[] bytes)",
    "returnType" : "WifiSsid",
    "comment" : "\n     * Create a WifiSsid from the raw bytes. If the byte array is null, return an empty WifiSsid\n     * object which will return an empty byte array and empty text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBytes()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the raw byte array representing this SSID.\n     * @return the SSID\n     ",
    "links" : [ ]
  }, {
    "name" : "public static WifiSsid fromUtf8Text(@Nullable CharSequence utf8Text)",
    "returnType" : "WifiSsid",
    "comment" : "\n     * Create a UTF-8 WifiSsid from unquoted plaintext. If the text is null, return an\n     * empty WifiSsid object which will return an empty byte array and empty text.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getUtf8Text()",
    "returnType" : "CharSequence",
    "comment" : "\n     * If the SSID is encoded with UTF-8, this method returns the decoded SSID as plaintext.\n     * Otherwise, it returns {@code null}.\n     * @return the SSID\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static WifiSsid fromString(@Nullable String string)",
    "returnType" : "WifiSsid",
    "comment" : "\n     * Create a WifiSsid from a string matching the format of {@link WifiSsid#toString()}.\n     * If the string is null, return an empty WifiSsid object which will return an empty byte array\n     * and empty text.\n     * @throws IllegalArgumentException if the string is unquoted but not hexadecimal,\n     *                                  or if the hexadecimal string is odd-length.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiSsid#toString()" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the string representation of the WifiSsid. If the SSID can be decoded as UTF-8, it\n     * will be returned in plain text surrounded by double quotation marks. Otherwise, it is\n     * returned as an unquoted string of hex digits. This format is consistent with\n     * {@link WifiInfo#getSSID()} and {@link WifiConfiguration#SSID}.\n     *\n     * @return SSID as double-quoted plain text from UTF-8 or unquoted hex digits\n     ",
    "links" : [ "android.net.wifi.WifiConfiguration#SSID", "android.net.wifi.WifiInfo#getSSID()" ]
  }, {
    "name" : "private static String decodeSsid(@NonNull byte[] ssidBytes, @NonNull Charset charset)",
    "returnType" : "String",
    "comment" : "\n     * Returns the given SSID bytes as a String decoded using the given Charset. If the bytes cannot\n     * be decoded, then this returns {@code null}.\n     * @param ssidBytes SSID as bytes\n     * @param charset Charset to decode with\n     * @return SSID as string, or {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object thatObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public static WifiSsid createFromAsciiEncoded(String asciiEncoded)",
    "returnType" : "WifiSsid",
    "comment" : " TODO(b/231433398): add maxTargetSdk = Build.VERSION_CODES.S",
    "links" : [ ]
  }, {
    "name" : "public byte[] getOctets()",
    "returnType" : "byte[]",
    "comment" : " TODO(b/231433398): add maxTargetSdk = Build.VERSION_CODES.S",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static WifiSsid fromBytes(@Nullable byte[] bytes)", "public byte[] getBytes()", "public static WifiSsid fromUtf8Text(@Nullable CharSequence utf8Text)", "public CharSequence getUtf8Text()", "public static WifiSsid fromString(@Nullable String string)", "public String toString()", "private static String decodeSsid(@NonNull byte[] ssidBytes, @NonNull Charset charset)", "public boolean equals(Object thatObject)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public static WifiSsid createFromAsciiEncoded(String asciiEncoded)", "public byte[] getOctets()" ],
  "variableNames" : [ "mBytes", "CREATOR", "octets", "NONE" ]
}