{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/Drawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "Callback",
  "comment" : "\n     * Implement this interface if you want to create an animated drawable that\n     * extends {@link android.graphics.drawable.Drawable Drawable}.\n     * Upon retrieving a drawable, use\n     * {@link Drawable#setCallback(android.graphics.drawable.Drawable.Callback)}\n     * to supply your implementation of the interface to the drawable; it uses\n     * this interface to schedule and execute animation changes.\n     ",
  "links" : [ "android.graphics.drawable.Drawable#setCallback(android.graphics.drawable.Drawable.Callback)", "android.graphics.drawable.Drawable" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void invalidateDrawable(@NonNull Drawable who)",
    "returnType" : "void",
    "comment" : "\n         * Called when the drawable needs to be redrawn.  A view at this point\n         * should invalidate itself (or at least the part of itself where the\n         * drawable appears).\n         *\n         * @param who The drawable that is requesting the update.\n         ",
    "links" : [ ]
  }, {
    "name" : " void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)",
    "returnType" : "void",
    "comment" : "\n         * A Drawable can call this to schedule the next frame of its\n         * animation.  An implementation can generally simply call\n         * {@link android.os.Handler#postAtTime(Runnable, Object, long)} with\n         * the parameters <var>(what, who, when)</var> to perform the\n         * scheduling.\n         *\n         * @param who The drawable being scheduled.\n         * @param what The action to execute.\n         * @param when The time (in milliseconds) to run.  The timebase is\n         *             {@link android.os.SystemClock#uptimeMillis}\n         ",
    "links" : [ "android.os.Handler#postAtTime(Runnable", "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : " void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)",
    "returnType" : "void",
    "comment" : "\n         * A Drawable can call this to unschedule an action previously\n         * scheduled with {@link #scheduleDrawable}.  An implementation can\n         * generally simply call\n         * {@link android.os.Handler#removeCallbacks(Runnable, Object)} with\n         * the parameters <var>(what, who)</var> to unschedule the drawable.\n         *\n         * @param who The drawable being unscheduled.\n         * @param what The action being unscheduled.\n         ",
    "links" : [ "android.os.Handler#removeCallbacks(Runnable", "#scheduleDrawable" ]
  } ],
  "methodNames" : [ " void invalidateDrawable(@NonNull Drawable who)", " void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)", " void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)" ],
  "variableNames" : [ ]
}