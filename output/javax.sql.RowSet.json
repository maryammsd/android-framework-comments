{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/sql/RowSet.java",
  "packageName" : "javax.sql",
  "className" : "RowSet",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " String getUrl() throws SQLException",
    "returnType" : "String",
    "comment" : "\n   * Retrieves the url property this <code>RowSet</code> object will use to\n   * create a connection if it uses the <code>DriverManager</code>\n   * instead of a <code>DataSource</code> object to establish the connection.\n   * The default value is <code>null</code>.\n   *\n   * @return a string url\n   * @exception SQLException if a database access error occurs\n   * @see #setUrl\n   ",
    "links" : [ ]
  }, {
    "name" : " void setUrl(String url) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the URL this <code>RowSet</code> object will use when it uses the\n   * <code>DriverManager</code> to create a connection.\n   *\n   * Setting this property is optional.  If a URL is used, a JDBC driver\n   * that accepts the URL must be loaded before the\n   * rowset is used to connect to a database.  The rowset will use the URL\n   * internally to create a database connection when reading or writing\n   * data.  Either a URL or a data source name is used to create a\n   * connection, whichever was set to non null value most recently.\n   *\n   * @param url a string value; may be <code>null</code>\n   * @exception SQLException if a database access error occurs\n   * @see #getUrl\n   ",
    "links" : [ ]
  }, {
    "name" : " String getDataSourceName()",
    "returnType" : "String",
    "comment" : "\n   * Retrieves the logical name that identifies the data source for this\n   * <code>RowSet</code> object.\n   *\n   * @return a data source name\n   * @see #setDataSourceName\n   * @see #setUrl\n   ",
    "links" : [ ]
  }, {
    "name" : " void setDataSourceName(String name) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the data source name property for this <code>RowSet</code> object to the\n   * given <code>String</code>.\n   * <P>\n   * The value of the data source name property can be used to do a lookup of\n   * a <code>DataSource</code> object that has been registered with a naming\n   * service.  After being retrieved, the <code>DataSource</code> object can be\n   * used to create a connection to the data source that it represents.\n   *\n   * @param name the logical name of the data source for this <code>RowSet</code>\n   *        object; may be <code>null</code>\n   * @exception SQLException if a database access error occurs\n   * @see #getDataSourceName\n   ",
    "links" : [ ]
  }, {
    "name" : " String getUsername()",
    "returnType" : "String",
    "comment" : "\n   * Retrieves the username used to create a database connection for this\n   * <code>RowSet</code> object.\n   * The username property is set at run time before calling the method\n   * <code>execute</code>.  It is\n   * not usually part of the serialized state of a <code>RowSet</code> object.\n   *\n   * @return the username property\n   * @see #setUsername\n   ",
    "links" : [ ]
  }, {
    "name" : " void setUsername(String name) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the username property for this <code>RowSet</code> object to the\n   * given <code>String</code>.\n   *\n   * @param name a user name\n   * @exception SQLException if a database access error occurs\n   * @see #getUsername\n   ",
    "links" : [ ]
  }, {
    "name" : " String getPassword()",
    "returnType" : "String",
    "comment" : "\n   * Retrieves the password used to create a database connection.\n   * The password property is set at run time before calling the method\n   * <code>execute</code>.  It is not usually part of the serialized state\n   * of a <code>RowSet</code> object.\n   *\n   * @return the password for making a database connection\n   * @see #setPassword\n   ",
    "links" : [ ]
  }, {
    "name" : " void setPassword(String password) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the database password for this <code>RowSet</code> object to\n   * the given <code>String</code>.\n   *\n   * @param password the password string\n   * @exception SQLException if a database access error occurs\n   * @see #getPassword\n   ",
    "links" : [ ]
  }, {
    "name" : " int getTransactionIsolation()",
    "returnType" : "int",
    "comment" : "\n   * Retrieves the transaction isolation level set for this\n   * <code>RowSet</code> object.\n   *\n   * @return the transaction isolation level; one of\n   *      <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,\n   *      <code>Connection.TRANSACTION_READ_COMMITTED</code>,\n   *      <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or\n   *      <code>Connection.TRANSACTION_SERIALIZABLE</code>\n   * @see #setTransactionIsolation\n   ",
    "links" : [ ]
  }, {
    "name" : " void setTransactionIsolation(int level) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the transaction isolation level for this <code>RowSet</code> obejct.\n   *\n   * @param level the transaction isolation level; one of\n   *      <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,\n   *      <code>Connection.TRANSACTION_READ_COMMITTED</code>,\n   *      <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or\n   *      <code>Connection.TRANSACTION_SERIALIZABLE</code>\n   * @exception SQLException if a database access error occurs\n   * @see #getTransactionIsolation\n   ",
    "links" : [ ]
  }, {
    "name" : " java.util.Map<String, Class<?>> getTypeMap() throws SQLException",
    "returnType" : "java.util.Map<String, Class<?>>",
    "comment" : "\n   * Retrieves the <code>Map</code> object associated with this\n   * <code>RowSet</code> object, which specifies the custom mapping\n   * of SQL user-defined types, if any.  The default is for the\n   * type map to be empty.\n   *\n   * @return a <code>java.util.Map</code> object containing the names of\n   *         SQL user-defined types and the Java classes to which they are\n   *         to be mapped\n   *\n   * @exception SQLException if a database access error occurs\n   * @see #setTypeMap\n   ",
    "links" : [ ]
  }, {
    "name" : " void setTypeMap(java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Installs the given <code>java.util.Map</code> object as the default\n   * type map for this <code>RowSet</code> object. This type map will be\n   * used unless another type map is supplied as a method parameter.\n   *\n   * @param map  a <code>java.util.Map</code> object containing the names of\n   *         SQL user-defined types and the Java classes to which they are\n   *         to be mapped\n   * @exception SQLException if a database access error occurs\n   * @see #getTypeMap\n   ",
    "links" : [ ]
  }, {
    "name" : " String getCommand()",
    "returnType" : "String",
    "comment" : "\n   * Retrieves this <code>RowSet</code> object's command property.\n   *\n   * The command property contains a command string, which must be an SQL\n   * query, that can be executed to fill the rowset with data.\n   * The default value is <code>null</code>.\n   *\n   * @return the command string; may be <code>null</code>\n   * @see #setCommand\n   ",
    "links" : [ ]
  }, {
    "name" : " void setCommand(String cmd) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets this <code>RowSet</code> object's command property to the given\n   * SQL query.\n   *\n   * This property is optional\n   * when a rowset gets its data from a data source that does not support\n   * commands, such as a spreadsheet.\n   *\n   * @param cmd the SQL query that will be used to get the data for this\n   *        <code>RowSet</code> object; may be <code>null</code>\n   * @exception SQLException if a database access error occurs\n   * @see #getCommand\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean isReadOnly()",
    "returnType" : "boolean",
    "comment" : "\n   * Retrieves whether this <code>RowSet</code> object is read-only.\n   * If updates are possible, the default is for a rowset to be\n   * updatable.\n   * <P>\n   * Attempts to update a read-only rowset will result in an\n   * <code>SQLException</code> being thrown.\n   *\n   * @return <code>true</code> if this <code>RowSet</code> object is\n   *         read-only; <code>false</code> if it is updatable\n   * @see #setReadOnly\n   ",
    "links" : [ ]
  }, {
    "name" : " void setReadOnly(boolean value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets whether this <code>RowSet</code> object is read-only to the\n   * given <code>boolean</code>.\n   *\n   * @param value <code>true</code> if read-only; <code>false</code> if\n   *        updatable\n   * @exception SQLException if a database access error occurs\n   * @see #isReadOnly\n   ",
    "links" : [ ]
  }, {
    "name" : " int getMaxFieldSize() throws SQLException",
    "returnType" : "int",
    "comment" : "\n   * Retrieves the maximum number of bytes that may be returned\n   * for certain column values.\n   * This limit applies only to <code>BINARY</code>,\n   * <code>VARBINARY</code>, <code>LONGVARBINARYBINARY</code>, <code>CHAR</code>,\n   * <code>VARCHAR</code>, <code>LONGVARCHAR</code>, <code>NCHAR</code>\n   * and <code>NVARCHAR</code> columns.\n   * If the limit is exceeded, the excess data is silently discarded.\n   *\n   * @return the current maximum column size limit; zero means that there\n   *          is no limit\n   * @exception SQLException if a database access error occurs\n   * @see #setMaxFieldSize\n   ",
    "links" : [ ]
  }, {
    "name" : " void setMaxFieldSize(int max) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the maximum number of bytes that can be returned for a column\n   * value to the given number of bytes.\n   * This limit applies only to <code>BINARY</code>,\n   * <code>VARBINARY</code>, <code>LONGVARBINARYBINARY</code>, <code>CHAR</code>,\n   * <code>VARCHAR</code>, <code>LONGVARCHAR</code>, <code>NCHAR</code>\n   * and <code>NVARCHAR</code> columns.\n   * If the limit is exceeded, the excess data is silently discarded.\n   * For maximum portability, use values greater than 256.\n   *\n   * @param max the new max column size limit in bytes; zero means unlimited\n   * @exception SQLException if a database access error occurs\n   * @see #getMaxFieldSize\n   ",
    "links" : [ ]
  }, {
    "name" : " int getMaxRows() throws SQLException",
    "returnType" : "int",
    "comment" : "\n   * Retrieves the maximum number of rows that this <code>RowSet</code>\n   * object can contain.\n   * If the limit is exceeded, the excess rows are silently dropped.\n   *\n   * @return the current maximum number of rows that this <code>RowSet</code>\n   *         object can contain; zero means unlimited\n   * @exception SQLException if a database access error occurs\n   * @see #setMaxRows\n   ",
    "links" : [ ]
  }, {
    "name" : " void setMaxRows(int max) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the maximum number of rows that this <code>RowSet</code>\n   * object can contain to the specified number.\n   * If the limit is exceeded, the excess rows are silently dropped.\n   *\n   * @param max the new maximum number of rows; zero means unlimited\n   * @exception SQLException if a database access error occurs\n   * @see #getMaxRows\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean getEscapeProcessing() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n   * Retrieves whether escape processing is enabled for this\n   * <code>RowSet</code> object.\n   * If escape scanning is enabled, which is the default, the driver will do\n   * escape substitution before sending an SQL statement to the database.\n   *\n   * @return <code>true</code> if escape processing is enabled;\n   *         <code>false</code> if it is disabled\n   * @exception SQLException if a database access error occurs\n   * @see #setEscapeProcessing\n   ",
    "links" : [ ]
  }, {
    "name" : " void setEscapeProcessing(boolean enable) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets escape processing for this <code>RowSet</code> object on or\n   * off. If escape scanning is on (the default), the driver will do\n   * escape substitution before sending an SQL statement to the database.\n   *\n   * @param enable <code>true</code> to enable escape processing;\n   *        <code>false</code> to disable it\n   * @exception SQLException if a database access error occurs\n   * @see #getEscapeProcessing\n   ",
    "links" : [ ]
  }, {
    "name" : " int getQueryTimeout() throws SQLException",
    "returnType" : "int",
    "comment" : "\n   * Retrieves the maximum number of seconds the driver will wait for\n   * a statement to execute.\n   * If this limit is exceeded, an <code>SQLException</code> is thrown.\n   *\n   * @return the current query timeout limit in seconds; zero means\n   *          unlimited\n   * @exception SQLException if a database access error occurs\n   * @see #setQueryTimeout\n   ",
    "links" : [ ]
  }, {
    "name" : " void setQueryTimeout(int seconds) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the maximum time the driver will wait for\n   * a statement to execute to the given number of seconds.\n   * If this limit is exceeded, an <code>SQLException</code> is thrown.\n   *\n   * @param seconds the new query timeout limit in seconds; zero means\n   *        that there is no limit\n   * @exception SQLException if a database access error occurs\n   * @see #getQueryTimeout\n   ",
    "links" : [ ]
  }, {
    "name" : " void setType(int type) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the type of this <code>RowSet</code> object to the given type.\n   * This method is used to change the type of a rowset, which is by\n   * default read-only and non-scrollable.\n   *\n   * @param type one of the <code>ResultSet</code> constants specifying a type:\n   *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n   *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n   *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n   * @exception SQLException if a database access error occurs\n   * @see java.sql.ResultSet#getType\n   ",
    "links" : [ ]
  }, {
    "name" : " void setConcurrency(int concurrency) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the concurrency of this <code>RowSet</code> object to the given\n   * concurrency level. This method is used to change the concurrency level\n   * of a rowset, which is by default <code>ResultSet.CONCUR_READ_ONLY</code>\n   *\n   * @param concurrency one of the <code>ResultSet</code> constants specifying a\n   *        concurrency level:  <code>ResultSet.CONCUR_READ_ONLY</code> or\n   *        <code>ResultSet.CONCUR_UPDATABLE</code>\n   * @exception SQLException if a database access error occurs\n   * @see ResultSet#getConcurrency\n   ",
    "links" : [ ]
  }, {
    "name" : " void setNull(int parameterIndex, int sqlType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's SQL\n   * command to SQL <code>NULL</code>.\n   *\n   * <P><B>Note:</B> You must specify the parameter's SQL type.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param sqlType a SQL type code defined by <code>java.sql.Types</code>\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setNull(String parameterName, int sqlType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to SQL <code>NULL</code>.\n     *\n     * <P><B>Note:</B> You must specify the parameter's SQL type.\n     *\n     * @param parameterName the name of the parameter\n     * @param sqlType the SQL type code defined in <code>java.sql.Types</code>\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNull(int paramIndex, int sqlType, String typeName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's SQL\n   * command to SQL <code>NULL</code>. This version of the method <code>setNull</code>\n   * should  be used for SQL user-defined types (UDTs) and <code>REF</code> type\n   * parameters.  Examples of UDTs include: <code>STRUCT</code>, <code>DISTINCT</code>,\n   * <code>JAVA_OBJECT</code>, and named array types.\n   *\n   * <P><B>Note:</B> To be portable, applications must give the\n   * SQL type code and the fully qualified SQL type name when specifying\n   * a NULL UDT or <code>REF</code> parameter.  In the case of a UDT,\n   * the name is the type name of the parameter itself.  For a <code>REF</code>\n   * parameter, the name is the type name of the referenced type.  If\n   * a JDBC driver does not need the type code or type name information,\n   * it may ignore it.\n   *\n   * Although it is intended for UDT and <code>REF</code> parameters,\n   * this method may be used to set a null parameter of any JDBC type.\n   * If the parameter does not have a user-defined or <code>REF</code> type,\n   * the typeName parameter is ignored.\n   *\n   *\n   * @param paramIndex the first parameter is 1, the second is 2, ...\n   * @param sqlType a value from <code>java.sql.Types</code>\n   * @param typeName the fully qualified name of an SQL UDT or the type\n   *        name of the SQL structured type being referenced by a <code>REF</code>\n   *        type; ignored if the parameter is not a UDT or <code>REF</code> type\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setNull(String parameterName, int sqlType, String typeName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to SQL <code>NULL</code>.\n     * This version of the method <code>setNull</code> should\n     * be used for user-defined types and REF type parameters.  Examples\n     * of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and\n     * named array types.\n     *\n     * <P><B>Note:</B> To be portable, applications must give the\n     * SQL type code and the fully-qualified SQL type name when specifying\n     * a NULL user-defined or REF parameter.  In the case of a user-defined type\n     * the name is the type name of the parameter itself.  For a REF\n     * parameter, the name is the type name of the referenced type.  If\n     * a JDBC driver does not need the type code or type name information,\n     * it may ignore it.\n     *\n     * Although it is intended for user-defined and Ref parameters,\n     * this method may be used to set a null parameter of any JDBC type.\n     * If the parameter does not have a user-defined or REF type, the given\n     * typeName is ignored.\n     *\n     *\n     * @param parameterName the name of the parameter\n     * @param sqlType a value from <code>java.sql.Types</code>\n     * @param typeName the fully-qualified name of an SQL user-defined type;\n     *        ignored if the parameter is not a user-defined type or\n     *        SQL <code>REF</code> value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBoolean(int parameterIndex, boolean x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given Java <code>boolean</code> value. The driver converts this to\n   * an SQL <code>BIT</code> value before sending it to the database.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setBoolean(String parameterName, boolean x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>boolean</code> value.\n     * The driver converts this\n     * to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #getBoolean\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setByte(int parameterIndex, byte x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given Java <code>byte</code> value. The driver converts this to\n   * an SQL <code>TINYINT</code> value before sending it to the database.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setByte(String parameterName, byte x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>byte</code> value.\n     * The driver converts this\n     * to an SQL <code>TINYINT</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getByte\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setShort(int parameterIndex, short x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given Java <code>short</code> value. The driver converts this to\n   * an SQL <code>SMALLINT</code> value before sending it to the database.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setShort(String parameterName, short x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>short</code> value.\n     * The driver converts this\n     * to an SQL <code>SMALLINT</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getShort\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setInt(int parameterIndex, int x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given Java <code>int</code> value. The driver converts this to\n   * an SQL <code>INTEGER</code> value before sending it to the database.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setInt(String parameterName, int x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>int</code> value.\n     * The driver converts this\n     * to an SQL <code>INTEGER</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getInt\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setLong(int parameterIndex, long x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given Java <code>long</code> value. The driver converts this to\n   * an SQL <code>BIGINT</code> value before sending it to the database.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setLong(String parameterName, long x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>long</code> value.\n     * The driver converts this\n     * to an SQL <code>BIGINT</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getLong\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setFloat(int parameterIndex, float x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given Java <code>float</code> value. The driver converts this to\n   * an SQL <code>REAL</code> value before sending it to the database.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setFloat(String parameterName, float x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>float</code> value.\n     * The driver converts this\n     * to an SQL <code>FLOAT</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getFloat\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDouble(int parameterIndex, double x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given Java <code>double</code> value. The driver converts this to\n   * an SQL <code>DOUBLE</code> value before sending it to the database.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setDouble(String parameterName, double x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>double</code> value.\n     * The driver converts this\n     * to an SQL <code>DOUBLE</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getDouble\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given <code>java.math.BigDeciaml</code> value.\n   * The driver converts this to\n   * an SQL <code>NUMERIC</code> value before sending it to the database.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setBigDecimal(String parameterName, BigDecimal x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given\n     * <code>java.math.BigDecimal</code> value.\n     * The driver converts this to an SQL <code>NUMERIC</code> value when\n     * it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getBigDecimal\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setString(int parameterIndex, String x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given Java <code>String</code> value. Before sending it to the\n   * database, the driver converts this to an SQL <code>VARCHAR</code> or\n   * <code>LONGVARCHAR</code> value, depending on the argument's size relative\n   * to the driver's limits on <code>VARCHAR</code> values.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setString(String parameterName, String x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>String</code> value.\n     * The driver converts this\n     * to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value\n     * (depending on the argument's\n     * size relative to the driver's limits on <code>VARCHAR</code> values)\n     * when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getString\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBytes(int parameterIndex, byte[] x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given Java array of <code>byte</code> values. Before sending it to the\n   * database, the driver converts this to an SQL <code>VARBINARY</code> or\n   * <code>LONGVARBINARY</code> value, depending on the argument's size relative\n   * to the driver's limits on <code>VARBINARY</code> values.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setBytes(String parameterName, byte[] x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java array of bytes.\n     * The driver converts this to an SQL <code>VARBINARY</code> or\n     * <code>LONGVARBINARY</code> (depending on the argument's size relative\n     * to the driver's limits on <code>VARBINARY</code> values) when it sends\n     * it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getBytes\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDate(int parameterIndex, java.sql.Date x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given <code>java.sql.Date</code> value. The driver converts this to\n   * an SQL <code>DATE</code> value before sending it to the database, using the\n   * default <code>java.util.Calendar</code> to calculate the date.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setTime(int parameterIndex, java.sql.Time x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given <code>java.sql.Time</code> value. The driver converts this to\n   * an SQL <code>TIME</code> value before sending it to the database, using the\n   * default <code>java.util.Calendar</code> to calculate it.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given <code>java.sql.Timestamp</code> value. The driver converts this to\n   * an SQL <code>TIMESTAMP</code> value before sending it to the database, using the\n   * default <code>java.util.Calendar</code> to calculate it.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setTimestamp(String parameterName, java.sql.Timestamp x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.\n     * The driver\n     * converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the\n     * database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getTimestamp\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAsciiStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given <code>java.io.InputStream</code> value.\n   * It may be more practical to send a very large ASCII value via a\n   * <code>java.io.InputStream</code> rather than as a <code>LONGVARCHAR</code>\n   * parameter. The driver will read the data from the stream\n   * as needed until it reaches end-of-file.\n   *\n   * <P><B>Note:</B> This stream object can either be a standard\n   * Java stream object or your own subclass that implements the\n   * standard interface.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the Java input stream that contains the ASCII parameter value\n   * @param length the number of bytes in the stream\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setAsciiStream(String parameterName, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream, which will have\n     * the specified number of bytes.\n     * When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code>. Data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from ASCII to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the Java input stream that contains the ASCII parameter value\n     * @param length the number of bytes in the stream\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBinaryStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given <code>java.io.InputStream</code> value.\n   * It may be more practical to send a very large binary value via a\n   * <code>java.io.InputStream</code> rather than as a <code>LONGVARBINARY</code>\n   * parameter. The driver will read the data from the stream\n   * as needed until it reaches end-of-file.\n   *\n   * <P><B>Note:</B> This stream object can either be a standard\n   * Java stream object or your own subclass that implements the\n   * standard interface.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the java input stream which contains the binary parameter value\n   * @param length the number of bytes in the stream\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setBinaryStream(String parameterName, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream, which will have\n     * the specified number of bytes.\n     * When a very large binary value is input to a <code>LONGVARBINARY</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the java input stream which contains the binary parameter value\n     * @param length the number of bytes in the stream\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given <code>java.io.Reader</code> value.\n   * It may be more practical to send a very large UNICODE value via a\n   * <code>java.io.Reader</code> rather than as a <code>LONGVARCHAR</code>\n   * parameter. The driver will read the data from the stream\n   * as needed until it reaches end-of-file.\n   *\n   * <P><B>Note:</B> This stream object can either be a standard\n   * Java stream object or your own subclass that implements the\n   * standard interface.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param reader the <code>Reader</code> object that contains the UNICODE data\n   *        to be set\n   * @param length the number of characters in the stream\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setCharacterStream(String parameterName, java.io.Reader reader, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>Reader</code>\n     * object, which is the given number of characters long.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterName the name of the parameter\n     * @param reader the <code>java.io.Reader</code> object that\n     *        contains the UNICODE data used as the designated parameter\n     * @param length the number of characters in the stream\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAsciiStream(int parameterIndex, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given input stream.\n   * When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n   * parameter, it may be more practical to send it via a\n   * <code>java.io.InputStream</code>. Data will be read from the stream\n   * as needed until end-of-file is reached.  The JDBC driver will\n   * do any necessary conversion from ASCII to the database char format.\n   *\n   * <P><B>Note:</B> This stream object can either be a standard\n   * Java stream object or your own subclass that implements the\n   * standard interface.\n   * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n   * it might be more efficient to use a version of\n   * <code>setAsciiStream</code> which takes a length parameter.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the Java input stream that contains the ASCII parameter value\n   * @exception SQLException if a database access error occurs or\n   * this method is called on a closed <code>PreparedStatement</code>\n   * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n   * @since 1.6\n   ",
    "links" : [ ]
  }, {
    "name" : " void setAsciiStream(String parameterName, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream.\n     * When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code>. Data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from ASCII to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setAsciiStream</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the Java input stream that contains the ASCII parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n       * @since 1.6\n    ",
    "links" : [ ]
  }, {
    "name" : " void setBinaryStream(int parameterIndex, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given input stream.\n   * When a very large binary value is input to a <code>LONGVARBINARY</code>\n   * parameter, it may be more practical to send it via a\n   * <code>java.io.InputStream</code> object. The data will be read from the\n   * stream as needed until end-of-file is reached.\n   *\n   * <P><B>Note:</B> This stream object can either be a standard\n   * Java stream object or your own subclass that implements the\n   * standard interface.\n   * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n   * it might be more efficient to use a version of\n   * <code>setBinaryStream</code> which takes a length parameter.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the java input stream which contains the binary parameter value\n   * @exception SQLException if a database access error occurs or\n   * this method is called on a closed <code>PreparedStatement</code>\n   * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n   * @since 1.6\n   ",
    "links" : [ ]
  }, {
    "name" : " void setBinaryStream(String parameterName, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream.\n     * When a very large binary value is input to a <code>LONGVARBINARY</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code> object. The data will be read from the\n     * stream as needed until end-of-file is reached.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setBinaryStream</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the java input stream which contains the binary parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCharacterStream(int parameterIndex, java.io.Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to the given <code>Reader</code>\n   * object.\n   * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n   * parameter, it may be more practical to send it via a\n   * <code>java.io.Reader</code> object. The data will be read from the stream\n   * as needed until end-of-file is reached.  The JDBC driver will\n   * do any necessary conversion from UNICODE to the database char format.\n   *\n   * <P><B>Note:</B> This stream object can either be a standard\n   * Java stream object or your own subclass that implements the\n   * standard interface.\n   * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n   * it might be more efficient to use a version of\n   * <code>setCharacterStream</code> which takes a length parameter.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param reader the <code>java.io.Reader</code> object that contains the\n   *        Unicode data\n   * @exception SQLException if a database access error occurs or\n   * this method is called on a closed <code>PreparedStatement</code>\n   * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n   * @since 1.6\n   ",
    "links" : [ ]
  }, {
    "name" : " void setCharacterStream(String parameterName, java.io.Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>Reader</code>\n     * object.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setCharacterStream</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param reader the <code>java.io.Reader</code> object that contains the\n     *        Unicode data\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNCharacterStream(int parameterIndex, Reader value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * to a <code>Reader</code> object. The\n   * <code>Reader</code> reads the data till end-of-file is reached. The\n   * driver does the necessary conversion from Java character format to\n   * the national character set in the database.\n\n   * <P><B>Note:</B> This stream object can either be a standard\n   * Java stream object or your own subclass that implements the\n   * standard interface.\n   * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n   * it might be more efficient to use a version of\n   * <code>setNCharacterStream</code> which takes a length parameter.\n   *\n   * @param parameterIndex of the first parameter is 1, the second is 2, ...\n   * @param value the parameter value\n   * @throws SQLException if the driver does not support national\n   *         character sets;  if the driver can detect that a data conversion\n   *  error could occur ; if a database access error occurs; or\n   * this method is called on a closed <code>PreparedStatement</code>\n   * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n   * @since 1.6\n   ",
    "links" : [ ]
  }, {
    "name" : " void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * with the given Java <code>Object</code>.  For integral values, the\n   * <code>java.lang</code> equivalent objects should be used (for example,\n   * an instance of the class <code>Integer</code> for an <code>int</code>).\n   *\n   * If the second argument is an <code>InputStream</code> then the stream must contain\n   * the number of bytes specified by scaleOrLength.  If the second argument is a\n   * <code>Reader</code> then the reader must contain the number of characters specified    * by scaleOrLength. If these conditions are not true the driver will generate a\n   * <code>SQLException</code> when the prepared statement is executed.\n   *\n   * <p>The given Java object will be converted to the targetSqlType\n   * before being sent to the database.\n   * <P>\n   * If the object is of a class implementing <code>SQLData</code>,\n   * the rowset should call the method <code>SQLData.writeSQL</code>\n   * to write the object to an <code>SQLOutput</code> data stream.\n   * If, on the other hand, the object is of a class implementing\n   * <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,\n   *  <code>Struct</code>, <code>java.net.URL</code>,\n   * or <code>Array</code>, the driver should pass it to the database as a\n   * value of the corresponding SQL type.\n   * <P>\n   *\n   * <p>Note that this method may be used to pass datatabase-specific\n   * abstract data types.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the object containing the input parameter value\n   * @param targetSqlType the SQL type (as defined in <code>java.sql.Types</code>)\n   *        to be sent to the database. The scale argument may further qualify this\n   *        type.\n   * @param scaleOrLength for <code>java.sql.Types.DECIMAL</code>\n   *          or <code>java.sql.Types.NUMERIC types</code>,\n   *          this is the number of digits after the decimal point. For\n   *          Java Object types <code>InputStream</code> and <code>Reader</code>,\n   *          this is the length\n   *          of the data in the stream or reader.  For all other types,\n   *          this value will be ignored.\n   * @exception SQLException if a database access error occurs\n   * @see java.sql.Types\n   ",
    "links" : [ ]
  }, {
    "name" : " void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the designated parameter with the given object. The second\n     * argument must be an object type; for integral values, the\n     * <code>java.lang</code> equivalent objects should be used.\n     *\n     * <p>The given Java object will be converted to the given targetSqlType\n     * before being sent to the database.\n     *\n     * If the object has a custom mapping (is of a class implementing the\n     * interface <code>SQLData</code>),\n     * the JDBC driver should call the method <code>SQLData.writeSQL</code> to write it\n     * to the SQL data stream.\n     * If, on the other hand, the object is of a class implementing\n     * <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,\n     *  <code>Struct</code>, <code>java.net.URL</code>,\n     * or <code>Array</code>, the driver should pass it to the database as a\n     * value of the corresponding SQL type.\n     * <P>\n     * Note that this method may be used to pass datatabase-\n     * specific abstract data types.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the object containing the input parameter value\n     * @param targetSqlType the SQL type (as defined in java.sql.Types) to be\n     * sent to the database. The scale argument may further qualify this type.\n     * @param scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,\n     *          this is the number of digits after the decimal point.  For all other\n     *          types, this value will be ignored.\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type\n     * @see Types\n     * @see #getObject\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * with a Java <code>Object</code>.  For integral values, the\n   * <code>java.lang</code> equivalent objects should be used.\n   * This method is like <code>setObject</code> above, but the scale used is the scale\n   * of the second parameter.  Scalar values have a scale of zero.  Literal\n   * values have the scale present in the literal.\n   * <P>\n   * Even though it is supported, it is not recommended that this method\n   * be called with floating point input values.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the object containing the input parameter value\n   * @param targetSqlType the SQL type (as defined in <code>java.sql.Types</code>)\n   *        to be sent to the database\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setObject(String parameterName, Object x, int targetSqlType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the designated parameter with the given object.\n     * This method is like the method <code>setObject</code>\n     * above, except that it assumes a scale of zero.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the object containing the input parameter value\n     * @param targetSqlType the SQL type (as defined in java.sql.Types) to be\n     *                      sent to the database\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type\n     * @see #getObject\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setObject(String parameterName, Object x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the designated parameter with the given object.\n     * The second parameter must be of type <code>Object</code>; therefore, the\n     * <code>java.lang</code> equivalent objects should be used for built-in types.\n     *\n     * <p>The JDBC specification specifies a standard mapping from\n     * Java <code>Object</code> types to SQL types.  The given argument\n     * will be converted to the corresponding SQL type before being\n     * sent to the database.\n     *\n     * <p>Note that this method may be used to pass datatabase-\n     * specific abstract data types, by using a driver-specific Java\n     * type.\n     *\n     * If the object is of a class implementing the interface <code>SQLData</code>,\n     * the JDBC driver should call the method <code>SQLData.writeSQL</code>\n     * to write it to the SQL data stream.\n     * If, on the other hand, the object is of a class implementing\n     * <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,\n     *  <code>Struct</code>, <code>java.net.URL</code>,\n     * or <code>Array</code>, the driver should pass it to the database as a\n     * value of the corresponding SQL type.\n     * <P>\n     * This method throws an exception if there is an ambiguity, for example, if the\n     * object is of a class implementing more than one of the interfaces named above.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the object containing the input parameter value\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>CallableStatement</code> or if the given\n     *            <code>Object</code> parameter is ambiguous\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getObject\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setObject(int parameterIndex, Object x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * with a Java <code>Object</code>.  For integral values, the\n   * <code>java.lang</code> equivalent objects should be used.\n   *\n   * <p>The JDBC specification provides a standard mapping from\n   * Java Object types to SQL types.  The driver will convert the\n   * given Java object to its standard SQL mapping before sending it\n   * to the database.\n   *\n   * <p>Note that this method may be used to pass datatabase-specific\n   * abstract data types by using a driver-specific Java type.\n   *\n   * If the object is of a class implementing <code>SQLData</code>,\n   * the rowset should call the method <code>SQLData.writeSQL</code>\n   * to write the object to an <code>SQLOutput</code> data stream.\n   * If, on the other hand, the object is of a class implementing\n   * <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,\n   *  <code>Struct</code>, <code>java.net.URL</code>,\n   * or <code>Array</code>, the driver should pass it to the database as a\n   * value of the corresponding SQL type.\n   * <P>\n   * <P>\n   * An exception is thrown if there is an ambiguity, for example, if the\n   * object is of a class implementing more than one of these interfaces.\n   *\n   * @param parameterIndex The first parameter is 1, the second is 2, ...\n   * @param x The object containing the input parameter value\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setRef(int i, Ref x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * with the given  <code>Ref</code> value.  The driver will convert this\n   * to the appropriate <code>REF(&lt;structured-type&gt;)</code> value.\n   *\n   * @param i the first parameter is 1, the second is 2, ...\n   * @param x an object representing data of an SQL <code>REF</code> type\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(int i, Blob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * with the given  <code>Blob</code> value.  The driver will convert this\n   * to the <code>BLOB</code> value that the <code>Blob</code> object\n   * represents before sending it to the database.\n   *\n   * @param i the first parameter is 1, the second is 2, ...\n   * @param x an object representing a BLOB\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>InputStream</code> object.  The inputstream must contain  the number\n     * of characters specified by length otherwise a <code>SQLException</code> will be\n     * generated when the <code>PreparedStatement</code> is executed.\n     * This method differs from the <code>setBinaryStream (int, InputStream, int)</code>\n     * method because it informs the driver that the parameter value should be\n     * sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,\n     * the driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>\n     * @param parameterIndex index of the first parameter is 1,\n     * the second is 2, ...\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @param length the number of bytes in the parameter data.\n     * @throws SQLException if a database access error occurs,\n     * this method is called on a closed <code>PreparedStatement</code>,\n     * if parameterIndex does not correspond\n     * to a parameter marker in the SQL statement,  if the length specified\n     * is less than zero or if the number of bytes in the inputstream does not match\n     * the specfied length.\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(int parameterIndex, InputStream inputStream) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>InputStream</code> object.\n     * This method differs from the <code>setBinaryStream (int, InputStream)</code>\n     * method because it informs the driver that the parameter value should be\n     * sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,\n     * the driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setBlob</code> which takes a length parameter.\n     *\n     * @param parameterIndex index of the first parameter is 1,\n     * the second is 2, ...\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @throws SQLException if a database access error occurs,\n     * this method is called on a closed <code>PreparedStatement</code> or\n     * if parameterIndex does not correspond\n     * to a parameter marker in the SQL statement,\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>InputStream</code> object.  The <code>inputstream</code> must contain  the number\n     * of characters specified by length, otherwise a <code>SQLException</code> will be\n     * generated when the <code>CallableStatement</code> is executed.\n     * This method differs from the <code>setBinaryStream (int, InputStream, int)</code>\n     * method because it informs the driver that the parameter value should be\n     * sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,\n     * the driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>\n     *\n     * @param parameterName the name of the parameter to be set\n     * the second is 2, ...\n     *\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @param length the number of bytes in the parameter data.\n     * @throws SQLException  if parameterIndex does not correspond\n     * to a parameter marker in the SQL statement,  or if the length specified\n     * is less than zero; if the number of bytes in the inputstream does not match\n     * the specfied length; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(String parameterName, Blob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Blob</code> object.\n     * The driver converts this to an SQL <code>BLOB</code> value when it\n     * sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(String parameterName, InputStream inputStream) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>InputStream</code> object.\n     * This method differs from the <code>setBinaryStream (int, InputStream)</code>\n     * method because it informs the driver that the parameter value should be\n     * sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,\n     * the driver may have to do extra work to determine whether the parameter\n     * data should be send to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setBlob</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @throws SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(int i, Clob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * with the given  <code>Clob</code> value.  The driver will convert this\n   * to the <code>CLOB</code> value that the <code>Clob</code> object\n   * represents before sending it to the database.\n   *\n   * @param i the first parameter is 1, the second is 2, ...\n   * @param x an object representing a CLOB\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setClob(int parameterIndex, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number\n     * of characters specified by length otherwise a <code>SQLException</code> will be\n     * generated when the <code>PreparedStatement</code> is executed.\n     *This method differs from the <code>setCharacterStream (int, Reader, int)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>\n     * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if a database access error occurs, this method is called on\n     * a closed <code>PreparedStatement</code>, if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement, or if the length specified is less than zero.\n     *\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(int parameterIndex, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.\n     * This method differs from the <code>setCharacterStream (int, Reader)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setClob</code> which takes a length parameter.\n     *\n     * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @throws SQLException if a database access error occurs, this method is called on\n     * a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement\n     *\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(String parameterName, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.  The <code>reader</code> must contain  the number\n     * of characters specified by length otherwise a <code>SQLException</code> will be\n     * generated when the <code>CallableStatement</code> is executed.\n     * This method differs from the <code>setCharacterStream (int, Reader, int)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>\n     * @param parameterName the name of the parameter to be set\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if the length specified is less than zero;\n     * a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(String parameterName, Clob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Clob</code> object.\n     * The driver converts this to an SQL <code>CLOB</code> value when it\n     * sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(String parameterName, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.\n     * This method differs from the <code>setCharacterStream (int, Reader)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setClob</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param reader An object that contains the data to set the parameter value to.\n     * @throws SQLException if a database access error occurs or this method is called on\n     * a closed <code>CallableStatement</code>\n     *\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setArray(int i, Array x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * with the given  <code>Array</code> value.  The driver will convert this\n   * to the <code>ARRAY</code> value that the <code>Array</code> object\n   * represents before sending it to the database.\n   *\n   * @param i the first parameter is 1, the second is 2, ...\n   * @param x an object representing an SQL array\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setDate(int parameterIndex, java.sql.Date x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * with the given  <code>java.sql.Date</code> value.  The driver will convert this\n   * to an SQL <code>DATE</code> value, using the given <code>java.util.Calendar</code>\n   * object to calculate the date.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @param cal the <code>java.util.Calendar</code> object to use for calculating the date\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setDate(String parameterName, java.sql.Date x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Date</code> value\n     * using the default time zone of the virtual machine that is running\n     * the application.\n     * The driver converts this\n     * to an SQL <code>DATE</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getDate\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDate(String parameterName, java.sql.Date x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Date</code> value,\n     * using the given <code>Calendar</code> object.  The driver uses\n     * the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,\n     * which the driver then sends to the database.  With a\n     * a <code>Calendar</code> object, the driver can calculate the date\n     * taking into account a custom timezone.  If no\n     * <code>Calendar</code> object is specified, the driver uses the default\n     * timezone, which is that of the virtual machine running the application.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the date\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getDate\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTime(int parameterIndex, java.sql.Time x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * with the given  <code>java.sql.Time</code> value.  The driver will convert this\n   * to an SQL <code>TIME</code> value, using the given <code>java.util.Calendar</code>\n   * object to calculate it, before sending it to the database.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @param cal the <code>java.util.Calendar</code> object to use for calculating the time\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setTime(String parameterName, java.sql.Time x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Time</code> value.\n     * The driver converts this\n     * to an SQL <code>TIME</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getTime\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTime(String parameterName, java.sql.Time x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Time</code> value,\n     * using the given <code>Calendar</code> object.  The driver uses\n     * the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,\n     * which the driver then sends to the database.  With a\n     * a <code>Calendar</code> object, the driver can calculate the time\n     * taking into account a custom timezone.  If no\n     * <code>Calendar</code> object is specified, the driver uses the default\n     * timezone, which is that of the virtual machine running the application.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the time\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getTime\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Sets the designated parameter in this <code>RowSet</code> object's command\n   * with the given  <code>java.sql.Timestamp</code> value.  The driver will\n   * convert this to an SQL <code>TIMESTAMP</code> value, using the given\n   * <code>java.util.Calendar</code> object to calculate it, before sending it to the\n   * database.\n   *\n   * @param parameterIndex the first parameter is 1, the second is 2, ...\n   * @param x the parameter value\n   * @param cal the <code>java.util.Calendar</code> object to use for calculating the\n   *        timestamp\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void setTimestamp(String parameterName, java.sql.Timestamp x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,\n     * using the given <code>Calendar</code> object.  The driver uses\n     * the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,\n     * which the driver then sends to the database.  With a\n     * a <code>Calendar</code> object, the driver can calculate the timestamp\n     * taking into account a custom timezone.  If no\n     * <code>Calendar</code> object is specified, the driver uses the default\n     * timezone, which is that of the virtual machine running the application.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the timestamp\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getTimestamp\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void clearParameters() throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Clears the parameters set for this <code>RowSet</code> object's command.\n   * <P>In general, parameter values remain in force for repeated use of a\n   * <code>RowSet</code> object. Setting a parameter value automatically clears its\n   * previous value.  However, in some cases it is useful to immediately\n   * release the resources used by the current parameter values, which can\n   * be done by calling the method <code>clearParameters</code>.\n   *\n   * @exception SQLException if a database access error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : " void execute() throws SQLException",
    "returnType" : "void",
    "comment" : "\n   * Fills this <code>RowSet</code> object with data.\n   * <P>\n   * The <code>execute</code> method may use the following properties\n   * to create a connection for reading data: url, data source name,\n   * user name, password, transaction isolation, and type map.\n   *\n   * The <code>execute</code> method  may use the following properties\n   * to create a statement to execute a command:\n   * command, read only, maximum field size,\n   * maximum rows, escape processing, and query timeout.\n   * <P>\n   * If the required properties have not been set, an exception is\n   * thrown.  If this method is successful, the current contents of the rowset are\n   * discarded and the rowset's metadata is also (re)set.  If there are\n   * outstanding updates, they are ignored.\n   * <P>\n   * If this <code>RowSet</code> object does not maintain a continuous connection\n   * with its source of data, it may use a reader (a <code>RowSetReader</code>\n   * object) to fill itself with data.  In this case, a reader will have been\n   * registered with this <code>RowSet</code> object, and the method\n   * <code>execute</code> will call on the reader's <code>readData</code>\n   * method as part of its implementation.\n   *\n   * @exception SQLException if a database access error occurs or any of the\n   *            properties necessary for making a connection and creating\n   *            a statement have not been set\n   ",
    "links" : [ ]
  }, {
    "name" : " void addRowSetListener(RowSetListener listener)",
    "returnType" : "void",
    "comment" : "\n   * Registers the given listener so that it will be notified of events\n   * that occur on this <code>RowSet</code> object.\n   *\n   * @param listener a component that has implemented the <code>RowSetListener</code>\n   *        interface and wants to be notified when events occur on this\n   *        <code>RowSet</code> object\n   * @see #removeRowSetListener\n   ",
    "links" : [ ]
  }, {
    "name" : " void removeRowSetListener(RowSetListener listener)",
    "returnType" : "void",
    "comment" : "\n   * Removes the specified listener from the list of components that will be\n   * notified when an event occurs on this <code>RowSet</code> object.\n   *\n   * @param listener a component that has been registered as a listener for this\n   *        <code>RowSet</code> object\n   * @see #addRowSetListener\n   ",
    "links" : [ ]
  }, {
    "name" : " void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException",
    "returnType" : "void",
    "comment" : "\n      * Sets the designated parameter to the given <code>java.sql.SQLXML</code> object. The driver converts this to an\n      * SQL <code>XML</code> value when it sends it to the database.\n      * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n      * @param xmlObject a <code>SQLXML</code> object that maps an SQL <code>XML</code> value\n      * @throws SQLException if a database access error occurs, this method\n      *  is called on a closed result set,\n      * the <code>java.xml.transform.Result</code>,\n      *  <code>Writer</code> or <code>OutputStream</code> has not been closed\n      * for the <code>SQLXML</code> object  or\n      *  if there is an error processing the XML value.  The <code>getCause</code> method\n      *  of the exception may provide a more detailed exception, for example, if the\n      *  stream does not contain valid XML.\n      * @since 1.6\n      ",
    "links" : [ ]
  }, {
    "name" : " void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.SQLXML</code> object. The driver converts this to an\n     * <code>SQL XML</code> value when it sends it to the database.\n     * @param parameterName the name of the parameter\n     * @param xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n     * @throws SQLException if a database access error occurs, this method\n     *  is called on a closed result set,\n     * the <code>java.xml.transform.Result</code>,\n     *  <code>Writer</code> or <code>OutputStream</code> has not been closed\n     * for the <code>SQLXML</code> object  or\n     *  if there is an error processing the XML value.  The <code>getCause</code> method\n     *  of the exception may provide a more detailed exception, for example, if the\n     *  stream does not contain valid XML.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setRowId(int parameterIndex, RowId x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.RowId</code> object. The\n     * driver converts this to a SQL <code>ROWID</code> value when it sends it\n     * to the database\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n     * @throws SQLException if a database access error occurs\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setRowId(String parameterName, RowId x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n    * Sets the designated parameter to the given <code>java.sql.RowId</code> object. The\n    * driver converts this to a SQL <code>ROWID</code> when it sends it to the\n    * database.\n    *\n    * @param parameterName the name of the parameter\n    * @param x the parameter value\n    * @throws SQLException if a database access error occurs\n    * @since 1.6\n    ",
    "links" : [ ]
  }, {
    "name" : " void setNString(int parameterIndex, String value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated paramter to the given <code>String</code> object.\n     * The driver converts this to a SQL <code>NCHAR</code> or\n     * <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value\n     * (depending on the argument's\n     * size relative to the driver's limits on <code>NVARCHAR</code> values)\n     * when it sends it to the database.\n     *\n     * @param parameterIndex of the first parameter is 1, the second is 2, ...\n     * @param value the parameter value\n     * @throws SQLException if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur ; or if a database access error occurs\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNString(String parameterName, String value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated paramter to the given <code>String</code> object.\n     * The driver converts this to a SQL <code>NCHAR</code> or\n     * <code>NVARCHAR</code> or <code>LONGNVARCHAR</code>\n     * @param parameterName the name of the column to be set\n     * @param value the parameter value\n     * @throws SQLException if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; or if a database access error occurs\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object. The\n     * <code>Reader</code> reads the data till end-of-file is reached. The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n     * @param parameterIndex of the first parameter is 1, the second is 2, ...\n     * @param value the parameter value\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur ; or if a database access error occurs\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object. The\n     * <code>Reader</code> reads the data till end-of-file is reached. The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n     * @param parameterName the name of the column to be set\n     * @param value the parameter value\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; or if a database access error occurs\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNCharacterStream(String parameterName, Reader value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object. The\n     * <code>Reader</code> reads the data till end-of-file is reached. The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setNCharacterStream</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param value the parameter value\n     * @throws SQLException if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur ; if a database access error occurs; or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(String parameterName, NClob value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n    * Sets the designated parameter to a <code>java.sql.NClob</code> object. The object\n    * implements the <code>java.sql.NClob</code> interface. This <code>NClob</code>\n    * object maps to a SQL <code>NCLOB</code>.\n    * @param parameterName the name of the column to be set\n    * @param value the parameter value\n    * @throws SQLException if the driver does not support national\n    *         character sets;  if the driver can detect that a data conversion\n    *  error could occur; or if a database access error occurs\n    * @since 1.6\n    ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(String parameterName, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.  The <code>reader</code> must contain  the number\n     * of characters specified by length otherwise a <code>SQLException</code> will be\n     * generated when the <code>CallableStatement</code> is executed.\n     * This method differs from the <code>setCharacterStream (int, Reader, int)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>\n     *\n     * @param parameterName the name of the parameter to be set\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if the length specified is less than zero;\n     * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(String parameterName, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.\n     * This method differs from the <code>setCharacterStream (int, Reader)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setNClob</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param reader An object that contains the data to set the parameter value to.\n     * @throws SQLException if the driver does not support national character sets;\n     * if the driver can detect that a data conversion\n     *  error could occur;  if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(int parameterIndex, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number\n     * of characters specified by length otherwise a <code>SQLException</code> will be\n     * generated when the <code>PreparedStatement</code> is executed.\n     * This method differs from the <code>setCharacterStream (int, Reader, int)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>\n     * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement; if the length specified is less than zero;\n     * if the driver does not support national character sets;\n     * if the driver can detect that a data conversion\n     *  error could occur;  if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(int parameterIndex, NClob value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>java.sql.NClob</code> object. The driver converts this to a\n     * SQL <code>NCLOB</code> value when it sends it to the database.\n     * @param parameterIndex of the first parameter is 1, the second is 2, ...\n     * @param value the parameter value\n     * @throws SQLException if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur ; or if a database access error occurs\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(int parameterIndex, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.\n     * This method differs from the <code>setCharacterStream (int, Reader)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setNClob</code> which takes a length parameter.\n     *\n     * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @throws SQLException if parameterIndex does not correspond to a parameter\n     * marker in the SQL statement;\n     * if the driver does not support national character sets;\n     * if the driver can detect that a data conversion\n     *  error could occur;  if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setURL(int parameterIndex, java.net.URL x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.net.URL</code> value.\n     * The driver converts this to an SQL <code>DATALINK</code> value\n     * when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the <code>java.net.URL</code> object to be set\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>PreparedStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.4\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " String getUrl() throws SQLException", " void setUrl(String url) throws SQLException", " String getDataSourceName()", " void setDataSourceName(String name) throws SQLException", " String getUsername()", " void setUsername(String name) throws SQLException", " String getPassword()", " void setPassword(String password) throws SQLException", " int getTransactionIsolation()", " void setTransactionIsolation(int level) throws SQLException", " java.util.Map<String, Class<?>> getTypeMap() throws SQLException", " void setTypeMap(java.util.Map<String, Class<?>> map) throws SQLException", " String getCommand()", " void setCommand(String cmd) throws SQLException", " boolean isReadOnly()", " void setReadOnly(boolean value) throws SQLException", " int getMaxFieldSize() throws SQLException", " void setMaxFieldSize(int max) throws SQLException", " int getMaxRows() throws SQLException", " void setMaxRows(int max) throws SQLException", " boolean getEscapeProcessing() throws SQLException", " void setEscapeProcessing(boolean enable) throws SQLException", " int getQueryTimeout() throws SQLException", " void setQueryTimeout(int seconds) throws SQLException", " void setType(int type) throws SQLException", " void setConcurrency(int concurrency) throws SQLException", " void setNull(int parameterIndex, int sqlType) throws SQLException", " void setNull(String parameterName, int sqlType) throws SQLException", " void setNull(int paramIndex, int sqlType, String typeName) throws SQLException", " void setNull(String parameterName, int sqlType, String typeName) throws SQLException", " void setBoolean(int parameterIndex, boolean x) throws SQLException", " void setBoolean(String parameterName, boolean x) throws SQLException", " void setByte(int parameterIndex, byte x) throws SQLException", " void setByte(String parameterName, byte x) throws SQLException", " void setShort(int parameterIndex, short x) throws SQLException", " void setShort(String parameterName, short x) throws SQLException", " void setInt(int parameterIndex, int x) throws SQLException", " void setInt(String parameterName, int x) throws SQLException", " void setLong(int parameterIndex, long x) throws SQLException", " void setLong(String parameterName, long x) throws SQLException", " void setFloat(int parameterIndex, float x) throws SQLException", " void setFloat(String parameterName, float x) throws SQLException", " void setDouble(int parameterIndex, double x) throws SQLException", " void setDouble(String parameterName, double x) throws SQLException", " void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException", " void setBigDecimal(String parameterName, BigDecimal x) throws SQLException", " void setString(int parameterIndex, String x) throws SQLException", " void setString(String parameterName, String x) throws SQLException", " void setBytes(int parameterIndex, byte[] x) throws SQLException", " void setBytes(String parameterName, byte[] x) throws SQLException", " void setDate(int parameterIndex, java.sql.Date x) throws SQLException", " void setTime(int parameterIndex, java.sql.Time x) throws SQLException", " void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException", " void setTimestamp(String parameterName, java.sql.Timestamp x) throws SQLException", " void setAsciiStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException", " void setAsciiStream(String parameterName, java.io.InputStream x, int length) throws SQLException", " void setBinaryStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException", " void setBinaryStream(String parameterName, java.io.InputStream x, int length) throws SQLException", " void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException", " void setCharacterStream(String parameterName, java.io.Reader reader, int length) throws SQLException", " void setAsciiStream(int parameterIndex, java.io.InputStream x) throws SQLException", " void setAsciiStream(String parameterName, java.io.InputStream x) throws SQLException", " void setBinaryStream(int parameterIndex, java.io.InputStream x) throws SQLException", " void setBinaryStream(String parameterName, java.io.InputStream x) throws SQLException", " void setCharacterStream(int parameterIndex, java.io.Reader reader) throws SQLException", " void setCharacterStream(String parameterName, java.io.Reader reader) throws SQLException", " void setNCharacterStream(int parameterIndex, Reader value) throws SQLException", " void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException", " void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException", " void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException", " void setObject(String parameterName, Object x, int targetSqlType) throws SQLException", " void setObject(String parameterName, Object x) throws SQLException", " void setObject(int parameterIndex, Object x) throws SQLException", " void setRef(int i, Ref x) throws SQLException", " void setBlob(int i, Blob x) throws SQLException", " void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException", " void setBlob(int parameterIndex, InputStream inputStream) throws SQLException", " void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException", " void setBlob(String parameterName, Blob x) throws SQLException", " void setBlob(String parameterName, InputStream inputStream) throws SQLException", " void setClob(int i, Clob x) throws SQLException", " void setClob(int parameterIndex, Reader reader, long length) throws SQLException", " void setClob(int parameterIndex, Reader reader) throws SQLException", " void setClob(String parameterName, Reader reader, long length) throws SQLException", " void setClob(String parameterName, Clob x) throws SQLException", " void setClob(String parameterName, Reader reader) throws SQLException", " void setArray(int i, Array x) throws SQLException", " void setDate(int parameterIndex, java.sql.Date x, Calendar cal) throws SQLException", " void setDate(String parameterName, java.sql.Date x) throws SQLException", " void setDate(String parameterName, java.sql.Date x, Calendar cal) throws SQLException", " void setTime(int parameterIndex, java.sql.Time x, Calendar cal) throws SQLException", " void setTime(String parameterName, java.sql.Time x) throws SQLException", " void setTime(String parameterName, java.sql.Time x, Calendar cal) throws SQLException", " void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar cal) throws SQLException", " void setTimestamp(String parameterName, java.sql.Timestamp x, Calendar cal) throws SQLException", " void clearParameters() throws SQLException", " void execute() throws SQLException", " void addRowSetListener(RowSetListener listener)", " void removeRowSetListener(RowSetListener listener)", " void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException", " void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException", " void setRowId(int parameterIndex, RowId x) throws SQLException", " void setRowId(String parameterName, RowId x) throws SQLException", " void setNString(int parameterIndex, String value) throws SQLException", "public void setNString(String parameterName, String value) throws SQLException", " void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException", "public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException", " void setNCharacterStream(String parameterName, Reader value) throws SQLException", " void setNClob(String parameterName, NClob value) throws SQLException", " void setNClob(String parameterName, Reader reader, long length) throws SQLException", " void setNClob(String parameterName, Reader reader) throws SQLException", " void setNClob(int parameterIndex, Reader reader, long length) throws SQLException", " void setNClob(int parameterIndex, NClob value) throws SQLException", " void setNClob(int parameterIndex, Reader reader) throws SQLException", " void setURL(int parameterIndex, java.net.URL x) throws SQLException" ],
  "variableNames" : [ ]
}