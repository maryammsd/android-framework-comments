{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothUuid.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothUuid",
  "comment" : "\n * Static helper methods and constants to decode the ParcelUuid of remote devices.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "A2DP_SINK",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "A2DP_SOURCE",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ADV_AUDIO_DIST",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HSP",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HSP_AG",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HFP",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HFP_AG",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AVRCP_CONTROLLER",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AVRCP_TARGET",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OBEX_OBJECT_PUSH",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HID",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HOGP",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PANU",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NAP",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "BNEP",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PBAP_PCE",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PBAP_PSE",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MAP",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MNS",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MAS",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SAP",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "HEARING_AID",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "BASE_UUID",
    "type" : "ParcelUuid",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "UUID_BYTES_16_BIT",
    "type" : "int",
    "comment" : "\n     * Length of bytes for 16 bit UUID\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UUID_BYTES_32_BIT",
    "type" : "int",
    "comment" : "\n     * Length of bytes for 32 bit UUID\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UUID_BYTES_128_BIT",
    "type" : "int",
    "comment" : "\n     * Length of bytes for 128 bit UUID\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean containsAnyUuid(@Nullable ParcelUuid[] uuidA, @Nullable ParcelUuid[] uuidB)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there any common ParcelUuids in uuidA and uuidB.\n     *\n     * @param uuidA - List of ParcelUuids\n     * @param uuidB - List of ParcelUuids\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getServiceIdentifierFromParcelUuid(ParcelUuid parcelUuid)",
    "returnType" : "int",
    "comment" : "\n     * Extract the Service Identifier or the actual uuid from the Parcel Uuid.\n     * For example, if 0000110B-0000-1000-8000-00805F9B34FB is the parcel Uuid,\n     * this function will return 110B\n     *\n     * @param parcelUuid\n     * @return the service identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParcelUuid parseUuidFrom(@Nullable byte[] uuidBytes)",
    "returnType" : "ParcelUuid",
    "comment" : "\n     * Parse UUID from bytes. The {@code uuidBytes} can represent a 16-bit, 32-bit or 128-bit UUID,\n     * but the returned UUID is always in 128-bit format.\n     * Note UUID is little endian in Bluetooth.\n     *\n     * @param uuidBytes Byte representation of uuid.\n     * @return {@link ParcelUuid} parsed from bytes.\n     * @throws IllegalArgumentException If the {@code uuidBytes} cannot be parsed.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.ParcelUuid" ]
  }, {
    "name" : "public static byte[] uuidToBytes(ParcelUuid uuid)",
    "returnType" : "byte[]",
    "comment" : "\n     * Parse UUID to bytes. The returned value is shortest representation, a 16-bit, 32-bit or\n     * 128-bit UUID, Note returned value is little endian (Bluetooth).\n     *\n     * @param uuid uuid to parse.\n     * @return shortest representation of {@code uuid} as bytes.\n     * @throws IllegalArgumentException If the {@code uuid} is null.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is16BitUuid(ParcelUuid parcelUuid)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the given parcelUuid can be converted to 16 bit bluetooth uuid.\n     *\n     * @param parcelUuid\n     * @return true if the parcelUuid can be converted to 16 bit uuid, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is32BitUuid(ParcelUuid parcelUuid)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the given parcelUuid can be converted to 32 bit bluetooth uuid.\n     *\n     * @param parcelUuid\n     * @return true if the parcelUuid can be converted to 32 bit uuid, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "A2DP_SINK", "A2DP_SOURCE", "ADV_AUDIO_DIST", "HSP", "HSP_AG", "HFP", "HFP_AG", "AVRCP_CONTROLLER", "AVRCP_TARGET", "OBEX_OBJECT_PUSH", "HID", "HOGP", "PANU", "NAP", "BNEP", "PBAP_PCE", "PBAP_PSE", "MAP", "MNS", "MAS", "SAP", "HEARING_AID", "BASE_UUID", "UUID_BYTES_16_BIT", "UUID_BYTES_32_BIT", "UUID_BYTES_128_BIT" ],
  "methodNames" : [ "public static boolean containsAnyUuid(@Nullable ParcelUuid[] uuidA, @Nullable ParcelUuid[] uuidB)", "private static int getServiceIdentifierFromParcelUuid(ParcelUuid parcelUuid)", "public static ParcelUuid parseUuidFrom(@Nullable byte[] uuidBytes)", "public static byte[] uuidToBytes(ParcelUuid uuid)", "public static boolean is16BitUuid(ParcelUuid parcelUuid)", "public static boolean is32BitUuid(ParcelUuid parcelUuid)" ]
}