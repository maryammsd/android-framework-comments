{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/dhcp/DhcpServingParamsParcelExt.java",
  "packageName" : "android.net.dhcp",
  "className" : "DhcpServingParamsParcelExt",
  "comment" : "\n * Subclass of {@link DhcpServingParamsParcel} with additional utility methods for building.\n *\n * <p>This utility class does not check for validity of the parameters: invalid parameters are\n * reported by the receiving module when unparceling the parcel.\n *\n * @see DhcpServingParams\n * @hide\n ",
  "variables" : [ {
    "name" : "MTU_UNSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public DhcpServingParamsParcelExt setServerAddr(@NonNull LinkAddress serverAddr)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set the server address and served prefix for the DHCP server.\n     *\n     * <p>This parameter is required.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setDefaultRouters(@NonNull Set<Inet4Address> defaultRouters)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set the default routers to be advertised to DHCP clients.\n     *\n     * <p>Each router must be inside the served prefix. This may be an empty set, but it must\n     * always be set explicitly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setDefaultRouters(@NonNull Inet4Address... defaultRouters)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set the default routers to be advertised to DHCP clients.\n     *\n     * <p>Each router must be inside the served prefix. This may be an empty list of routers,\n     * but it must always be set explicitly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setNoDefaultRouter()",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Convenience method to build the parameters with no default router.\n     *\n     * <p>Equivalent to calling {@link #setDefaultRouters(Inet4Address...)} with no address.\n     ",
    "links" : [ "#setDefaultRouters(Inet4Address...)" ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setDnsServers(@NonNull Set<Inet4Address> dnsServers)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set the DNS servers to be advertised to DHCP clients.\n     *\n     * <p>This may be an empty set, but it must always be set explicitly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setDnsServers(@NonNull Inet4Address... dnsServers)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set the DNS servers to be advertised to DHCP clients.\n     *\n     * <p>This may be an empty list of servers, but it must always be set explicitly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setNoDnsServer()",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Convenience method to build the parameters with no DNS server.\n     *\n     * <p>Equivalent to calling {@link #setDnsServers(Inet4Address...)} with no address.\n     ",
    "links" : [ "#setDnsServers(Inet4Address...)" ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setExcludedAddrs(@NonNull Set<Inet4Address> excludedAddrs)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set excluded addresses that the DHCP server is not allowed to assign to clients.\n     *\n     * <p>This parameter is optional. DNS servers and default routers are always excluded\n     * and do not need to be set here.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setExcludedAddrs(@NonNull Inet4Address... excludedAddrs)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set excluded addresses that the DHCP server is not allowed to assign to clients.\n     *\n     * <p>This parameter is optional. DNS servers and default routers are always excluded\n     * and do not need to be set here.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setDhcpLeaseTimeSecs(long dhcpLeaseTimeSecs)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set the lease time for leases assigned by the DHCP server.\n     *\n     * <p>This parameter is required.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setLinkMtu(int linkMtu)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set the link MTU to be advertised to DHCP clients.\n     *\n     * <p>If set to {@link #MTU_UNSET}, no MTU will be advertised to clients. This parameter\n     * is optional and defaults to {@link #MTU_UNSET}.\n     ",
    "links" : [ "#MTU_UNSET" ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setMetered(boolean metered)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set whether the DHCP server should send the ANDROID_METERED vendor-specific option.\n     *\n     * <p>If not set, the default value is false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setSingleClientAddr(@Nullable Inet4Address clientAddr)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set the client address to tell DHCP server only offer this address.\n     * The client's prefix length is the same as server's.\n     *\n     * <p>If not set, the default value is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DhcpServingParamsParcelExt setChangePrefixOnDecline(boolean changePrefixOnDecline)",
    "returnType" : "DhcpServingParamsParcelExt",
    "comment" : "\n     * Set whether the DHCP server should request a new prefix from IpServer when receiving\n     * DHCPDECLINE message in certain particular link (e.g. there is only one downstream USB\n     * tethering client). If it's false, process DHCPDECLINE message as RFC2131#4.3.3 suggests.\n     *\n     * <p>If not set, the default value is false.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int[] toIntArray(@NonNull Collection<Inet4Address> addrs)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ArraySet<Inet4Address> newArraySet(Inet4Address... addrs)",
    "returnType" : "ArraySet<Inet4Address>",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MTU_UNSET" ],
  "methodNames" : [ "public DhcpServingParamsParcelExt setServerAddr(@NonNull LinkAddress serverAddr)", "public DhcpServingParamsParcelExt setDefaultRouters(@NonNull Set<Inet4Address> defaultRouters)", "public DhcpServingParamsParcelExt setDefaultRouters(@NonNull Inet4Address... defaultRouters)", "public DhcpServingParamsParcelExt setNoDefaultRouter()", "public DhcpServingParamsParcelExt setDnsServers(@NonNull Set<Inet4Address> dnsServers)", "public DhcpServingParamsParcelExt setDnsServers(@NonNull Inet4Address... dnsServers)", "public DhcpServingParamsParcelExt setNoDnsServer()", "public DhcpServingParamsParcelExt setExcludedAddrs(@NonNull Set<Inet4Address> excludedAddrs)", "public DhcpServingParamsParcelExt setExcludedAddrs(@NonNull Inet4Address... excludedAddrs)", "public DhcpServingParamsParcelExt setDhcpLeaseTimeSecs(long dhcpLeaseTimeSecs)", "public DhcpServingParamsParcelExt setLinkMtu(int linkMtu)", "public DhcpServingParamsParcelExt setMetered(boolean metered)", "public DhcpServingParamsParcelExt setSingleClientAddr(@Nullable Inet4Address clientAddr)", "public DhcpServingParamsParcelExt setChangePrefixOnDecline(boolean changePrefixOnDecline)", "private static int[] toIntArray(@NonNull Collection<Inet4Address> addrs)", "private static ArraySet<Inet4Address> newArraySet(Inet4Address... addrs)" ]
}