{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/audiopolicy/AudioPolicy.java",
  "packageName" : "android.media.audiopolicy",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link AudioPolicy} objects.\n     * By default the policy to be created doesn't govern audio focus decisions.\n     ",
  "links" : [ "android.media.audiopolicy.AudioPolicy" ],
  "variables" : [ {
    "name" : "mMixes",
    "type" : "ArrayList<AudioMix>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusListener",
    "type" : "AudioPolicyFocusListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatusListener",
    "type" : "AudioPolicyStatusListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsFocusPolicy",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsTestFocusPolicy",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolCb",
    "type" : "AudioPolicyVolumeCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProjection",
    "type" : "MediaProjection",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder addMix(@NonNull AudioMix mix) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Add an {@link AudioMix} to be part of the audio policy being built.\n         * @param mix a non-null {@link AudioMix} to be part of the audio policy.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.media.audiopolicy.AudioMix" ]
  }, {
    "name" : "public Builder setLooper(@NonNull Looper looper) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the {@link Looper} on which to run the event loop.\n         * @param looper a non-null specific Looper.\n         * @return the same Builder instance.\n         * @throws IllegalArgumentException\n         ",
    "links" : [ "android.os.Looper" ]
  }, {
    "name" : "public void setAudioPolicyFocusListener(AudioPolicyFocusListener l)",
    "returnType" : "void",
    "comment" : "\n         * Sets the audio focus listener for the policy.\n         * @param l a {@link AudioPolicy.AudioPolicyFocusListener}\n         ",
    "links" : [ "AudioPolicy.AudioPolicyFocusListener" ]
  }, {
    "name" : "public Builder setIsAudioFocusPolicy(boolean isFocusPolicy)",
    "returnType" : "Builder",
    "comment" : "\n         * Declares whether this policy will grant and deny audio focus through\n         * the {@link AudioPolicy.AudioPolicyFocusListener}.\n         * If set to {@code true}, it is mandatory to set an\n         * {@link AudioPolicy.AudioPolicyFocusListener} in order to successfully build\n         * an {@code AudioPolicy} instance.\n         * @param isFocusPolicy true if the policy will govern audio focus decisions.\n         * @return the same Builder instance.\n         ",
    "links" : [ "AudioPolicy.AudioPolicyFocusListener" ]
  }, {
    "name" : "public Builder setIsTestFocusPolicy(boolean isTestFocusPolicy)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Test method to declare whether this audio focus policy is for test purposes only.\n         * Having a test policy registered will disable the current focus policy and replace it\n         * with this test policy. When unregistered, the previous focus policy will be restored.\n         * <p>A value of <code>true</code> will be ignored if the AudioPolicy is not also\n         * focus policy.\n         * @param isTestFocusPolicy true if the focus policy to register is for testing purposes.\n         * @return the same Builder instance\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setAudioPolicyStatusListener(AudioPolicyStatusListener l)",
    "returnType" : "void",
    "comment" : "\n         * Sets the audio policy status listener.\n         * @param l a {@link AudioPolicy.AudioPolicyStatusListener}\n         ",
    "links" : [ "AudioPolicy.AudioPolicyStatusListener" ]
  }, {
    "name" : "public Builder setAudioPolicyVolumeCallback(@NonNull AudioPolicyVolumeCallback vc)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the callback to receive all volume key-related events.\n         * The callback will only be called if the device is configured to handle volume events\n         * in the PhoneWindowManager (see config_handleVolumeKeysInWindowManager)\n         * @param vc\n         * @return the same Builder instance.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMediaProjection(@NonNull MediaProjection projection)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a media projection obtained through createMediaProjection().\n         *\n         * A MediaProjection that can project audio allows to register an audio\n         * policy LOOPBACK|RENDER without the MODIFY_AUDIO_ROUTING permission.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public AudioPolicy build()",
    "returnType" : "AudioPolicy",
    "comment" : "\n         * Combines all of the attributes that have been set on this {@code Builder} and returns a\n         * new {@link AudioPolicy} object.\n         * @return a new {@code AudioPolicy} object.\n         * @throws IllegalStateException if there is no\n         *     {@link AudioPolicy.AudioPolicyStatusListener} but the policy was configured\n         *     as an audio focus policy with {@link #setIsAudioFocusPolicy(boolean)}.\n         ",
    "links" : [ "AudioPolicy.AudioPolicyStatusListener", "android.media.audiopolicy.AudioPolicy", "#setIsAudioFocusPolicy(boolean)" ]
  } ],
  "methodNames" : [ "public Builder addMix(@NonNull AudioMix mix) throws IllegalArgumentException", "public Builder setLooper(@NonNull Looper looper) throws IllegalArgumentException", "public void setAudioPolicyFocusListener(AudioPolicyFocusListener l)", "public Builder setIsAudioFocusPolicy(boolean isFocusPolicy)", "public Builder setIsTestFocusPolicy(boolean isTestFocusPolicy)", "public void setAudioPolicyStatusListener(AudioPolicyStatusListener l)", "public Builder setAudioPolicyVolumeCallback(@NonNull AudioPolicyVolumeCallback vc)", "public Builder setMediaProjection(@NonNull MediaProjection projection)", "public AudioPolicy build()" ],
  "variableNames" : [ "mMixes", "mContext", "mLooper", "mFocusListener", "mStatusListener", "mIsFocusPolicy", "mIsTestFocusPolicy", "mVolCb", "mProjection" ]
}