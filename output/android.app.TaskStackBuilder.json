{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/TaskStackBuilder.java",
  "packageName" : "android.app",
  "className" : "TaskStackBuilder",
  "comment" : "\n * Utility class for constructing synthetic back stacks for cross-task navigation\n * on Android 3.0 and newer.\n *\n * <p>In API level 11 (Android 3.0/Honeycomb) the recommended conventions for\n * app navigation using the back key changed. The back key's behavior is local\n * to the current task and does not capture navigation across different tasks.\n * Navigating across tasks and easily reaching the previous task is accomplished\n * through the \"recents\" UI, accessible through the software-provided Recents key\n * on the navigation or system bar. On devices with the older hardware button configuration\n * the recents UI can be accessed with a long press on the Home key.</p>\n *\n * <p>When crossing from one task stack to another post-Android 3.0,\n * the application should synthesize a back stack/history for the new task so that\n * the user may navigate out of the new task and back to the Launcher by repeated\n * presses of the back key. Back key presses should not navigate across task stacks.</p>\n *\n * <p>TaskStackBuilder provides a way to obey the correct conventions\n * around cross-task navigation.</p>\n *\n * <div class=\"special reference\">\n * <h3>About Navigation</h3>\n * For more detailed information about tasks, the back stack, and navigation design guidelines,\n * please read\n * <a href=\"{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html\">Tasks and Back Stack</a>\n * from the developer guide and <a href=\"{@docRoot}design/patterns/navigation.html\">Navigation</a>\n * from the design guide.\n * </div>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntents",
    "type" : "ArrayList<Intent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TaskStackBuilder create(Context context)",
    "returnType" : "TaskStackBuilder",
    "comment" : "\n     * Return a new TaskStackBuilder for launching a fresh task stack consisting\n     * of a series of activities.\n     *\n     * @param context The context that will launch the new task stack or generate a PendingIntent\n     * @return A new TaskStackBuilder\n     ",
    "links" : [ ]
  }, {
    "name" : "public TaskStackBuilder addNextIntent(Intent nextIntent)",
    "returnType" : "TaskStackBuilder",
    "comment" : "\n     * Add a new Intent to the task stack. The most recently added Intent will invoke\n     * the Activity at the top of the final task stack.\n     *\n     * @param nextIntent Intent for the next Activity in the synthesized task stack\n     * @return This TaskStackBuilder for method chaining\n     ",
    "links" : [ ]
  }, {
    "name" : "public TaskStackBuilder addNextIntentWithParentStack(Intent nextIntent)",
    "returnType" : "TaskStackBuilder",
    "comment" : "\n     * Add a new Intent with the resolved chain of parents for the target activity to\n     * the task stack.\n     *\n     * <p>This is equivalent to calling {@link #addParentStack(ComponentName) addParentStack}\n     * with the resolved ComponentName of nextIntent (if it can be resolved), followed by\n     * {@link #addNextIntent(Intent) addNextIntent} with nextIntent.</p>\n     *\n     * @param nextIntent Intent for the topmost Activity in the synthesized task stack.\n     *                   Its chain of parents as specified in the manifest will be added.\n     * @return This TaskStackBuilder for method chaining.\n     ",
    "links" : [ "#addParentStack(ComponentName)", "#addNextIntent(Intent)" ]
  }, {
    "name" : "public TaskStackBuilder addParentStack(Activity sourceActivity)",
    "returnType" : "TaskStackBuilder",
    "comment" : "\n     * Add the activity parent chain as specified by the\n     * {@link Activity#getParentActivityIntent() getParentActivityIntent()} method of the activity\n     * specified and the {@link android.R.attr#parentActivityName parentActivityName} attributes\n     * of each successive activity (or activity-alias) element in the application's manifest\n     * to the task stack builder.\n     *\n     * @param sourceActivity All parents of this activity will be added\n     * @return This TaskStackBuilder for method chaining\n     ",
    "links" : [ "android.app.Activity#getParentActivityIntent()", "android.R.attr#parentActivityName" ]
  }, {
    "name" : "public TaskStackBuilder addParentStack(Class<?> sourceActivityClass)",
    "returnType" : "TaskStackBuilder",
    "comment" : "\n     * Add the activity parent chain as specified by the\n     * {@link android.R.attr#parentActivityName parentActivityName} attribute of the activity\n     * (or activity-alias) element in the application's manifest to the task stack builder.\n     *\n     * @param sourceActivityClass All parents of this activity will be added\n     * @return This TaskStackBuilder for method chaining\n     ",
    "links" : [ "android.R.attr#parentActivityName" ]
  }, {
    "name" : "public TaskStackBuilder addParentStack(ComponentName sourceActivityName)",
    "returnType" : "TaskStackBuilder",
    "comment" : "\n     * Add the activity parent chain as specified by the\n     * {@link android.R.attr#parentActivityName parentActivityName} attribute of the activity\n     * (or activity-alias) element in the application's manifest to the task stack builder.\n     *\n     * @param sourceActivityName Must specify an Activity component. All parents of\n     *                           this activity will be added\n     * @return This TaskStackBuilder for method chaining\n     ",
    "links" : [ "android.R.attr#parentActivityName" ]
  }, {
    "name" : "public int getIntentCount()",
    "returnType" : "int",
    "comment" : "\n     * @return the number of intents added so far.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent editIntentAt(int index)",
    "returnType" : "Intent",
    "comment" : "\n     * Return the intent at the specified index for modification.\n     * Useful if you need to modify the flags or extras of an intent that was previously added,\n     * for example with {@link #addParentStack(Activity)}.\n     *\n     * @param index Index from 0-getIntentCount()\n     * @return the intent at position index\n     ",
    "links" : [ "#addParentStack(Activity)" ]
  }, {
    "name" : "public void startActivities()",
    "returnType" : "void",
    "comment" : "\n     * Start the task stack constructed by this builder.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int startActivities(Bundle options, UserHandle userHandle)",
    "returnType" : "int",
    "comment" : "\n     * Start the task stack constructed by this builder.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startActivities(Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Start the task stack constructed by this builder.\n     *\n     * @param options Additional options for how the Activity should be started.\n     * See {@link android.content.Context#startActivity(Intent, Bundle)}\n     * Context.startActivity(Intent, Bundle)} for more details.\n     ",
    "links" : [ "android.content.Context#startActivity(Intent" ]
  }, {
    "name" : "public PendingIntent getPendingIntent(int requestCode, @PendingIntent.Flags int flags)",
    "returnType" : "PendingIntent",
    "comment" : "\n     * Obtain a {@link PendingIntent} for launching the task constructed by this builder so far.\n     *\n     * @param requestCode Private request code for the sender\n     * @param flags May be {@link PendingIntent#FLAG_ONE_SHOT},\n     *              {@link PendingIntent#FLAG_NO_CREATE}, {@link PendingIntent#FLAG_CANCEL_CURRENT},\n     *              {@link PendingIntent#FLAG_UPDATE_CURRENT}, or any of the flags supported by\n     *              {@link Intent#fillIn(Intent, int)} to control which unspecified parts of the\n     *              intent that can be supplied when the actual send happens.\n     *\n     * @return The obtained PendingIntent\n     ",
    "links" : [ "android.app.PendingIntent#FLAG_CANCEL_CURRENT", "android.content.Intent#fillIn(Intent", "android.app.PendingIntent#FLAG_UPDATE_CURRENT", "android.app.PendingIntent#FLAG_NO_CREATE", "android.app.PendingIntent", "android.app.PendingIntent#FLAG_ONE_SHOT" ]
  }, {
    "name" : "public PendingIntent getPendingIntent(int requestCode, @PendingIntent.Flags int flags, Bundle options)",
    "returnType" : "PendingIntent",
    "comment" : "\n     * Obtain a {@link PendingIntent} for launching the task constructed by this builder so far.\n     *\n     * @param requestCode Private request code for the sender\n     * @param flags May be {@link PendingIntent#FLAG_ONE_SHOT},\n     *              {@link PendingIntent#FLAG_NO_CREATE}, {@link PendingIntent#FLAG_CANCEL_CURRENT},\n     *              {@link PendingIntent#FLAG_UPDATE_CURRENT}, or any of the flags supported by\n     *              {@link Intent#fillIn(Intent, int)} to control which unspecified parts of the\n     *              intent that can be supplied when the actual send happens.\n     * @param options Additional options for how the Activity should be started.\n     * See {@link android.content.Context#startActivity(Intent, Bundle)}\n     * Context.startActivity(Intent, Bundle)} for more details.\n     *\n     * @return The obtained PendingIntent\n     ",
    "links" : [ "android.app.PendingIntent#FLAG_CANCEL_CURRENT", "android.content.Intent#fillIn(Intent", "android.app.PendingIntent#FLAG_UPDATE_CURRENT", "android.app.PendingIntent#FLAG_NO_CREATE", "android.app.PendingIntent", "android.app.PendingIntent#FLAG_ONE_SHOT", "android.content.Context#startActivity(Intent" ]
  }, {
    "name" : "public PendingIntent getPendingIntent(int requestCode, int flags, Bundle options, UserHandle user)",
    "returnType" : "PendingIntent",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent[] getIntents()",
    "returnType" : "Intent[]",
    "comment" : "\n     * Return an array containing the intents added to this builder. The intent at the\n     * root of the task stack will appear as the first item in the array and the\n     * intent at the top of the stack will appear as the last item.\n     *\n     * @return An array containing the intents added to this builder.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static TaskStackBuilder create(Context context)", "public TaskStackBuilder addNextIntent(Intent nextIntent)", "public TaskStackBuilder addNextIntentWithParentStack(Intent nextIntent)", "public TaskStackBuilder addParentStack(Activity sourceActivity)", "public TaskStackBuilder addParentStack(Class<?> sourceActivityClass)", "public TaskStackBuilder addParentStack(ComponentName sourceActivityName)", "public int getIntentCount()", "public Intent editIntentAt(int index)", "public void startActivities()", "public int startActivities(Bundle options, UserHandle userHandle)", "public void startActivities(Bundle options)", "public PendingIntent getPendingIntent(int requestCode, @PendingIntent.Flags int flags)", "public PendingIntent getPendingIntent(int requestCode, @PendingIntent.Flags int flags, Bundle options)", "public PendingIntent getPendingIntent(int requestCode, int flags, Bundle options, UserHandle user)", "public Intent[] getIntents()" ],
  "variableNames" : [ "TAG", "mIntents", "mSourceContext" ]
}