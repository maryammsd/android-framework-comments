{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/AtomicLongFieldUpdater.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "AtomicLongFieldUpdater",
  "comment" : "\n * A reflection-based utility that enables atomic updates to\n * designated {@code volatile long} fields of designated classes.\n * This class is designed for use in atomic data structures in which\n * several fields of the same node are independently subject to atomic\n * updates.\n *\n * <p>Note that the guarantees of the {@code compareAndSet}\n * method in this class are weaker than in other atomic classes.\n * Because this class cannot ensure that all uses of the field\n * are appropriate for purposes of atomic access, it can\n * guarantee atomicity only with respect to other invocations of\n * {@code compareAndSet} and {@code set} on the same updater.\n *\n * <p>Object arguments for parameters of type {@code T} that are not\n * instances of the class passed to {@link #newUpdater} will result in\n * a {@link ClassCastException} being thrown.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <T> The type of the object holding the updatable field\n ",
  "links" : [ "#newUpdater", "ClassCastException" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass, String fieldName)",
    "returnType" : "AtomicLongFieldUpdater<U>",
    "comment" : "\n     * Creates and returns an updater for objects with the given field.\n     * The Class argument is needed to check that reflective types and\n     * generic types match.\n     *\n     * @param tclass the class of the objects holding the field\n     * @param fieldName the name of the field to be updated\n     * @param <U> the type of instances of tclass\n     * @return the updater\n     * @throws IllegalArgumentException if the field is not a\n     * volatile long type\n     * @throws RuntimeException with a nested reflection-based\n     * exception if the class does not hold field or is the wrong type,\n     * or the field is inaccessible to the caller according to Java language\n     * access control\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean compareAndSet(T obj, long expect, long update)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the field of the given object managed by this updater\n     * to the given updated value if the current value {@code ==} the\n     * expected value. This method is guaranteed to be atomic with respect to\n     * other calls to {@code compareAndSet} and {@code set}, but not\n     * necessarily with respect to other changes in the field.\n     *\n     * @param obj An object whose field to conditionally set\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean weakCompareAndSet(T obj, long expect, long update)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the field of the given object managed by this updater\n     * to the given updated value if the current value {@code ==} the\n     * expected value. This method is guaranteed to be atomic with respect to\n     * other calls to {@code compareAndSet} and {@code set}, but not\n     * necessarily with respect to other changes in the field.\n     *\n     * <p>This operation may fail spuriously and does not provide\n     * ordering guarantees, so is only rarely an appropriate\n     * alternative to {@code compareAndSet}.\n     *\n     * @param obj An object whose field to conditionally set\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void set(T obj, long newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the field of the given object managed by this updater to the\n     * given updated value. This operation is guaranteed to act as a volatile\n     * store with respect to subsequent invocations of {@code compareAndSet}.\n     *\n     * @param obj An object whose field to set\n     * @param newValue the new value\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void lazySet(T obj, long newValue)",
    "returnType" : "void",
    "comment" : "\n     * Eventually sets the field of the given object managed by this\n     * updater to the given updated value.\n     *\n     * @param obj An object whose field to set\n     * @param newValue the new value\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long get(T obj)",
    "returnType" : "long",
    "comment" : "\n     * Returns the current value held in the field of the given object\n     * managed by this updater.\n     *\n     * @param obj An object whose field to get\n     * @return the current value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getAndSet(T obj, long newValue)",
    "returnType" : "long",
    "comment" : "\n     * Atomically sets the field of the given object managed by this updater\n     * to the given value and returns the old value.\n     *\n     * @param obj An object whose field to get and set\n     * @param newValue the new value\n     * @return the previous value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getAndIncrement(T obj)",
    "returnType" : "long",
    "comment" : "\n     * Atomically increments by one the current value of the field of the\n     * given object managed by this updater.\n     *\n     * @param obj An object whose field to get and set\n     * @return the previous value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getAndDecrement(T obj)",
    "returnType" : "long",
    "comment" : "\n     * Atomically decrements by one the current value of the field of the\n     * given object managed by this updater.\n     *\n     * @param obj An object whose field to get and set\n     * @return the previous value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getAndAdd(T obj, long delta)",
    "returnType" : "long",
    "comment" : "\n     * Atomically adds the given value to the current value of the field of\n     * the given object managed by this updater.\n     *\n     * @param obj An object whose field to get and set\n     * @param delta the value to add\n     * @return the previous value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long incrementAndGet(T obj)",
    "returnType" : "long",
    "comment" : "\n     * Atomically increments by one the current value of the field of the\n     * given object managed by this updater.\n     *\n     * @param obj An object whose field to get and set\n     * @return the updated value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long decrementAndGet(T obj)",
    "returnType" : "long",
    "comment" : "\n     * Atomically decrements by one the current value of the field of the\n     * given object managed by this updater.\n     *\n     * @param obj An object whose field to get and set\n     * @return the updated value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long addAndGet(T obj, long delta)",
    "returnType" : "long",
    "comment" : "\n     * Atomically adds the given value to the current value of the field of\n     * the given object managed by this updater.\n     *\n     * @param obj An object whose field to get and set\n     * @param delta the value to add\n     * @return the updated value\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long getAndUpdate(T obj, LongUnaryOperator updateFunction)",
    "returnType" : "long",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the field of the given object managed\n     * by this updater with the results of applying the given\n     * function, returning the previous value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.\n     *\n     * @param obj An object whose field to get and set\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final long updateAndGet(T obj, LongUnaryOperator updateFunction)",
    "returnType" : "long",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the field of the given object managed\n     * by this updater with the results of applying the given\n     * function, returning the updated value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.\n     *\n     * @param obj An object whose field to get and set\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final long getAndAccumulate(T obj, long x, LongBinaryOperator accumulatorFunction)",
    "returnType" : "long",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the field of the given object managed\n     * by this updater with the results of applying the given function\n     * to the current and given values, returning the previous value.\n     * The function should be side-effect-free, since it may be\n     * re-applied when attempted updates fail due to contention among\n     * threads.  The function is applied with the current value as its\n     * first argument, and the given update as the second argument.\n     *\n     * @param obj An object whose field to get and set\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final long accumulateAndGet(T obj, long x, LongBinaryOperator accumulatorFunction)",
    "returnType" : "long",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the field of the given object managed\n     * by this updater with the results of applying the given function\n     * to the current and given values, returning the updated value.\n     * The function should be side-effect-free, since it may be\n     * re-applied when attempted updates fail due to contention among\n     * threads.  The function is applied with the current value as its\n     * first argument, and the given update as the second argument.\n     *\n     * @param obj An object whose field to get and set\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : " static boolean isSamePackage(Class<?> class1, Class<?> class2)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the two classes have the same class loader and\n     * package qualifier\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass, String fieldName)", "public abstract boolean compareAndSet(T obj, long expect, long update)", "public abstract boolean weakCompareAndSet(T obj, long expect, long update)", "public abstract void set(T obj, long newValue)", "public abstract void lazySet(T obj, long newValue)", "public abstract long get(T obj)", "public long getAndSet(T obj, long newValue)", "public long getAndIncrement(T obj)", "public long getAndDecrement(T obj)", "public long getAndAdd(T obj, long delta)", "public long incrementAndGet(T obj)", "public long decrementAndGet(T obj)", "public long addAndGet(T obj, long delta)", "public final long getAndUpdate(T obj, LongUnaryOperator updateFunction)", "public final long updateAndGet(T obj, LongUnaryOperator updateFunction)", "public final long getAndAccumulate(T obj, long x, LongBinaryOperator accumulatorFunction)", "public final long accumulateAndGet(T obj, long x, LongBinaryOperator accumulatorFunction)", " static boolean isSamePackage(Class<?> class1, Class<?> class2)" ],
  "variableNames" : [ ]
}