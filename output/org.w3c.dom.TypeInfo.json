{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/TypeInfo.java",
  "packageName" : "org.w3c.dom",
  "className" : "TypeInfo",
  "comment" : "\n *  The <code>TypeInfo</code> interface represents a type referenced from\n * <code>Element</code> or <code>Attr</code> nodes, specified in the schemas\n * associated with the document. The type is a pair of a namespace URI and\n * name properties, and depends on the document's schema.\n * <p> If the document's schema is an XML DTD [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>], the values\n * are computed as follows:\n * <ul>\n * <li> If this type is referenced from an\n * <code>Attr</code> node, <code>typeNamespace</code> is\n * <code>\"http://www.w3.org/TR/REC-xml\"</code> and <code>typeName</code>\n * represents the <b>[attribute type]</b> property in the [<a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/'>XML Information Set</a>]\n * . If there is no declaration for the attribute, <code>typeNamespace</code>\n *  and <code>typeName</code> are <code>null</code>.\n * </li>\n * <li> If this type is\n * referenced from an <code>Element</code> node, <code>typeNamespace</code>\n * and <code>typeName</code> are <code>null</code>.\n * </li>\n * </ul>\n * <p> If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n * , the values are computed as follows using the post-schema-validation\n * infoset contributions (also called PSVI contributions):\n * <ul>\n * <li> If the <b>[validity]</b> property exists AND is <em>\"invalid\"</em> or <em>\"notKnown\"</em>: the {target namespace} and {name} properties of the declared type if\n * available, otherwise <code>null</code>.\n * <p ><b>Note:</b>  At the time of writing, the XML Schema specification does\n * not require exposing the declared type. Thus, DOM implementations might\n * choose not to provide type information if validity is not valid.\n * </li>\n * <li> If the <b>[validity]</b> property exists and is <em>\"valid\"</em>:\n * <ol>\n * <li> If <b>[member type definition]</b> exists:\n * <ol>\n * <li>If {name} is not absent, then expose {name} and {target\n * namespace} properties of the <b>[member type definition]</b> property;\n * </li>\n * <li>Otherwise, expose the namespace and local name of the\n * corresponding anonymous type name.\n * </li>\n * </ol>\n * </li>\n * <li> If the <b>[type definition]</b> property exists:\n * <ol>\n * <li>If {name} is not absent, then expose {name} and {target\n * namespace} properties of the <b>[type definition]</b> property;\n * </li>\n * <li>Otherwise, expose the namespace and local name of the\n * corresponding anonymous type name.\n * </li>\n * </ol>\n * </li>\n * <li> If the <b>[member type definition anonymous]</b> exists:\n * <ol>\n * <li>If it is false, then expose <b>[member type definition name]</b> and <b>[member type definition namespace]</b> properties;\n * </li>\n * <li>Otherwise, expose the namespace and local name of the\n * corresponding anonymous type name.\n * </li>\n * </ol>\n * </li>\n * <li> If the <b>[type definition anonymous]</b> exists:\n * <ol>\n * <li>If it is false, then expose <b>[type definition name]</b> and <b>[type definition namespace]</b> properties;\n * </li>\n * <li>Otherwise, expose the namespace and local name of the\n * corresponding anonymous type name.\n * </li>\n * </ol>\n * </li>\n * </ol>\n * </li>\n * </ul>\n * <p ><b>Note:</b>  Other schema languages are outside the scope of the W3C\n * and therefore should define how to represent their type systems using\n * <code>TypeInfo</code>.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n * @since DOM Level 3\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DERIVATION_RESTRICTION",
    "type" : "int",
    "comment" : "\n     *  If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n     * , this constant represents the derivation by <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-typeRestriction'>\n     * restriction</a> if complex types are involved, or a <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#element-restriction'>\n     * restriction</a> if simple types are involved.\n     * <br>  The reference type definition is derived by restriction from the\n     * other type definition if the other type definition is the same as the\n     * reference type definition, or if the other type definition can be\n     * reached recursively following the {base type definition} property\n     * from the reference type definition, and all the <em>derivation methods</em> involved are restriction.\n     ",
    "links" : [ ]
  }, {
    "name" : "DERIVATION_EXTENSION",
    "type" : "int",
    "comment" : "\n     *  If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n     * , this constant represents the derivation by <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-typeExtension'>\n     * extension</a>.\n     * <br>  The reference type definition is derived by extension from the\n     * other type definition if the other type definition can be reached\n     * recursively following the {base type definition} property from the\n     * reference type definition, and at least one of the <em>derivation methods</em> involved is an extension.\n     ",
    "links" : [ ]
  }, {
    "name" : "DERIVATION_UNION",
    "type" : "int",
    "comment" : "\n     *  If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n     * , this constant represents the <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#element-union'>\n     * union</a> if simple types are involved.\n     * <br> The reference type definition is derived by union from the other\n     * type definition if there exists two type definitions T1 and T2 such\n     * as the reference type definition is derived from T1 by\n     * <code>DERIVATION_RESTRICTION</code> or\n     * <code>DERIVATION_EXTENSION</code>, T2 is derived from the other type\n     * definition by <code>DERIVATION_RESTRICTION</code>, T1 has {variety} <em>union</em>, and one of the {member type definitions} is T2. Note that T1 could be\n     * the same as the reference type definition, and T2 could be the same\n     * as the other type definition.\n     ",
    "links" : [ ]
  }, {
    "name" : "DERIVATION_LIST",
    "type" : "int",
    "comment" : "\n     *  If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n     * , this constant represents the <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#element-list'>list</a>.\n     * <br> The reference type definition is derived by list from the other\n     * type definition if there exists two type definitions T1 and T2 such\n     * as the reference type definition is derived from T1 by\n     * <code>DERIVATION_RESTRICTION</code> or\n     * <code>DERIVATION_EXTENSION</code>, T2 is derived from the other type\n     * definition by <code>DERIVATION_RESTRICTION</code>, T1 has {variety} <em>list</em>, and T2 is the {item type definition}. Note that T1 could be the same as\n     * the reference type definition, and T2 could be the same as the other\n     * type definition.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getTypeName()",
    "returnType" : "String",
    "comment" : "\n     *  The name of a type declared for the associated element or attribute,\n     * or <code>null</code> if unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTypeNamespace()",
    "returnType" : "String",
    "comment" : "\n     *  The namespace of the type declared for the associated element or\n     * attribute or <code>null</code> if the element does not have\n     * declaration or if no namespace information is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDerivedFrom(String typeNamespaceArg, String typeNameArg, int derivationMethod)",
    "returnType" : "boolean",
    "comment" : "\n     *  This method returns if there is a derivation between the reference\n     * type definition, i.e. the <code>TypeInfo</code> on which the method\n     * is being called, and the other type definition, i.e. the one passed\n     * as parameters.\n     * @param typeNamespaceArg  the namespace of the other type definition.\n     * @param typeNameArg  the name of the other type definition.\n     * @param derivationMethod  the type of derivation and conditions applied\n     *   between two types, as described in the list of constants provided\n     *   in this interface.\n     * @return  If the document's schema is a DTD or no schema is associated\n     *   with the document, this method will always return <code>false</code>\n     *   .  If the document's schema is an XML Schema, the method will\n     *   <code>true</code> if the reference type definition is derived from\n     *   the other type definition according to the derivation parameter. If\n     *   the value of the parameter is <code>0</code> (no bit is set to\n     *   <code>1</code> for the <code>derivationMethod</code> parameter),\n     *   the method will return <code>true</code> if the other type\n     *   definition can be reached by recursing any combination of {base\n     *   type definition}, {item type definition}, or {member type\n     *   definitions} from the reference type definition.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getTypeName()", "public String getTypeNamespace()", "public boolean isDerivedFrom(String typeNamespaceArg, String typeNameArg, int derivationMethod)" ],
  "variableNames" : [ "DERIVATION_RESTRICTION", "DERIVATION_EXTENSION", "DERIVATION_UNION", "DERIVATION_LIST" ]
}