{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/TabWidget.java",
  "packageName" : "android.widget",
  "className" : "TabWidget",
  "comment" : "\n *\n * Displays a list of tab labels representing each page in the parent's tab\n * collection.\n * <p>\n * The container object for this widget is {@link android.widget.TabHost TabHost}.\n * When the user selects a tab, this object sends a message to the parent\n * container, TabHost, to tell it to switch the displayed page. You typically\n * won't use many methods directly on this object. The container TabHost is\n * used to add labels, add the callback handler, and manage callbacks. You\n * might call this object to iterate the list of tabs, or to tweak the layout\n * of the tab list, but most methods should be called on the containing TabHost\n * object.\n *\n * @attr ref android.R.styleable#TabWidget_divider\n * @attr ref android.R.styleable#TabWidget_tabStripEnabled\n * @attr ref android.R.styleable#TabWidget_tabStripLeft\n * @attr ref android.R.styleable#TabWidget_tabStripRight\n *\n * @deprecated new applications should use fragment APIs instead of this class:\n * Use <a href=\"{@docRoot}guide/navigation/navigation-swipe-view\">TabLayout and ViewPager</a>\n * instead.\n ",
  "links" : [ "android.widget.TabHost" ],
  "variables" : [ {
    "name" : "mBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionChangedListener",
    "type" : "OnTabSelectionChanged",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectedTab",
    "type" : "int",
    "comment" : " This value will be set to 0 as soon as the first tab is added to TabHost.",
    "links" : [ ]
  }, {
    "name" : "mLeftStrip",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRightStrip",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawBottomStrips",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStripMoved",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImposedTabsHeight",
    "type" : "int",
    "comment" : " they fit in parent.",
    "links" : [ ]
  }, {
    "name" : "mImposedTabWidths",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getChildDrawingOrder(int childCount, int i)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void measureChildBeforeLayout(View child, int childIndex, int widthMeasureSpec, int totalWidth, int heightMeasureSpec, int totalHeight)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void measureHorizontal(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getChildTabViewAt(int index)",
    "returnType" : "View",
    "comment" : "\n     * Returns the tab indicator view at the given index.\n     *\n     * @param index the zero-based index of the tab indicator view to return\n     * @return the tab indicator view at the given index\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTabCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of tab indicator views.\n     *\n     * @return the number of tab indicator views\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDividerDrawable(@Nullable Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable to use as a divider between the tab indicators.\n     *\n     * @param drawable the divider drawable\n     * @attr ref android.R.styleable#TabWidget_divider\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDividerDrawable(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable to use as a divider between the tab indicators.\n     *\n     * @param resId the resource identifier of the drawable to use as a divider\n     * @attr ref android.R.styleable#TabWidget_divider\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLeftStripDrawable(@Nullable Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable to use as the left part of the strip below the tab\n     * indicators.\n     *\n     * @param drawable the left strip drawable\n     * @see #getLeftStripDrawable()\n     * @attr ref android.R.styleable#TabWidget_tabStripLeft\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLeftStripDrawable(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable to use as the left part of the strip below the tab\n     * indicators.\n     *\n     * @param resId the resource identifier of the drawable to use as the left\n     *              strip drawable\n     * @see #getLeftStripDrawable()\n     * @attr ref android.R.styleable#TabWidget_tabStripLeft\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getLeftStripDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * @return the drawable used as the left part of the strip below the tab\n     *         indicators, may be {@code null}\n     * @see #setLeftStripDrawable(int)\n     * @see #setLeftStripDrawable(Drawable)\n     * @attr ref android.R.styleable#TabWidget_tabStripLeft\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRightStripDrawable(@Nullable Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable to use as the right part of the strip below the tab\n     * indicators.\n     *\n     * @param drawable the right strip drawable\n     * @see #getRightStripDrawable()\n     * @attr ref android.R.styleable#TabWidget_tabStripRight\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRightStripDrawable(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable to use as the right part of the strip below the tab\n     * indicators.\n     *\n     * @param resId the resource identifier of the drawable to use as the right\n     *              strip drawable\n     * @see #getRightStripDrawable()\n     * @attr ref android.R.styleable#TabWidget_tabStripRight\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getRightStripDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * @return the drawable used as the right part of the strip below the tab\n     *         indicators, may be {@code null}\n     * @see #setRightStripDrawable(int)\n     * @see #setRightStripDrawable(Drawable)\n     * @attr ref android.R.styleable#TabWidget_tabStripRight\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStripEnabled(boolean stripEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether the bottom strips on the tab indicators are drawn or\n     * not.  The default is to draw them.  If the user specifies a custom\n     * view for the tab indicators, then the TabHost class calls this method\n     * to disable drawing of the bottom strips.\n     * @param stripEnabled true if the bottom strips should be drawn.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStripEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the bottom strips on the tab indicators are drawn\n     * or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void childDrawableStateChanged(View child)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentTab(int index)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current tab.\n     * <p>\n     * This method is used to bring a tab to the front of the Widget,\n     * and is used to post to the rest of the UI that a different tab\n     * has been brought to the foreground.\n     * <p>\n     * Note, this is separate from the traditional \"focus\" that is\n     * employed from the view logic.\n     * <p>\n     * For instance, if we have a list in a tabbed view, a user may be\n     * navigating up and down the list, moving the UI focus (orange\n     * highlighting) through the list items.  The cursor movement does\n     * not effect the \"selected\" tab though, because what is being\n     * scrolled through is all on the same tab.  The selected tab only\n     * changes when we navigate between tabs (moving from the list view\n     * to the next tabbed view, in this example).\n     * <p>\n     * To move both the focus AND the selected tab at once, please use\n     * {@link #focusCurrentTab}. Normally, the view logic takes care of\n     * adjusting the focus, so unless you're circumventing the UI,\n     * you'll probably just focus your interest here.\n     *\n     * @param index the index of the tab that you want to indicate as the\n     *              selected tab (tab brought to the front of the widget)\n     * @see #focusCurrentTab\n     ",
    "links" : [ "#focusCurrentTab" ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void focusCurrentTab(int index)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current tab and focuses the UI on it.\n     * This method makes sure that the focused tab matches the selected\n     * tab, normally at {@link #setCurrentTab}.  Normally this would not\n     * be an issue if we go through the UI, since the UI is responsible\n     * for calling TabWidget.onFocusChanged(), but in the case where we\n     * are selecting the tab programmatically, we'll need to make sure\n     * focus keeps up.\n     *\n     *  @param index The tab that you want focused (highlighted in orange)\n     *  and selected (tab brought to the front of the widget)\n     *\n     *  @see #setCurrentTab\n     ",
    "links" : [ "#setCurrentTab" ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeAllViews()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)",
    "returnType" : "PointerIcon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setTabSelectionListener(OnTabSelectionChanged listener)",
    "returnType" : "void",
    "comment" : "\n     * Provides a way for {@link TabHost} to be notified that the user clicked\n     * on a tab indicator.\n     ",
    "links" : [ "android.widget.TabHost" ]
  }, {
    "name" : "public void onFocusChange(View v, boolean hasFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "protected int getChildDrawingOrder(int childCount, int i)", " void measureChildBeforeLayout(View child, int childIndex, int widthMeasureSpec, int totalWidth, int heightMeasureSpec, int totalHeight)", " void measureHorizontal(int widthMeasureSpec, int heightMeasureSpec)", "public View getChildTabViewAt(int index)", "public int getTabCount()", "public void setDividerDrawable(@Nullable Drawable drawable)", "public void setDividerDrawable(@DrawableRes int resId)", "public void setLeftStripDrawable(@Nullable Drawable drawable)", "public void setLeftStripDrawable(@DrawableRes int resId)", "public Drawable getLeftStripDrawable()", "public void setRightStripDrawable(@Nullable Drawable drawable)", "public void setRightStripDrawable(@DrawableRes int resId)", "public Drawable getRightStripDrawable()", "public void setStripEnabled(boolean stripEnabled)", "public boolean isStripEnabled()", "public void childDrawableStateChanged(View child)", "public void dispatchDraw(Canvas canvas)", "public void setCurrentTab(int index)", "public CharSequence getAccessibilityClassName()", "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)", "public void focusCurrentTab(int index)", "public void setEnabled(boolean enabled)", "public void addView(View child)", "public void removeAllViews()", "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)", " void setTabSelectionListener(OnTabSelectionChanged listener)", "public void onFocusChange(View v, boolean hasFocus)" ],
  "variableNames" : [ "mBounds", "mSelectionChangedListener", "mSelectedTab", "mLeftStrip", "mRightStrip", "mDrawBottomStrips", "mStripMoved", "mImposedTabsHeight", "mImposedTabWidths" ]
}