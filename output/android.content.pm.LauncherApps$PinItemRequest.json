{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/LauncherApps.java",
  "packageName" : "android.content.pm",
  "className" : "PinItemRequest",
  "comment" : "\n     * Represents a \"pin shortcut\" or a \"pin appwidget\" request made by an app, which is sent with\n     * an {@link #ACTION_CONFIRM_PIN_SHORTCUT} or {@link #ACTION_CONFIRM_PIN_APPWIDGET} intent\n     * respectively to the default launcher app.\n     *\n     * <h3>Request of the {@link #REQUEST_TYPE_SHORTCUT} type.</h3>\n     *\n     * <p>A {@link #REQUEST_TYPE_SHORTCUT} request represents a request to pin a\n     * {@link ShortcutInfo}.  If the launcher accepts a request, call {@link #accept()},\n     * or {@link #accept(Bundle)} with a null or empty Bundle.  No options are defined for\n     * pin-shortcuts requests.\n     *\n     * <p>{@link #getShortcutInfo()} always returns a non-null {@link ShortcutInfo} for this type.\n     *\n     * <p>The launcher may receive a request with a {@link ShortcutInfo} that is already pinned, in\n     * which case {@link ShortcutInfo#isPinned()} returns true.  This means the user wants to create\n     * another pinned shortcut for a shortcut that's already pinned.  If the launcher accepts it,\n     * {@link #accept()} must still be called even though the shortcut is already pinned, and\n     * create a new pinned shortcut icon for it.\n     *\n     * <p>See also {@link ShortcutManager} for more details.\n     *\n     * <h3>Request of the {@link #REQUEST_TYPE_APPWIDGET} type.</h3>\n     *\n     * <p>A {@link #REQUEST_TYPE_SHORTCUT} request represents a request to pin a\n     * an AppWidget.  If the launcher accepts a request, call {@link #accept(Bundle)} with\n     * the appwidget integer ID set to the\n     * {@link android.appwidget.AppWidgetManager#EXTRA_APPWIDGET_ID} extra.\n     *\n     * <p>{@link #getAppWidgetProviderInfo(Context)} always returns a non-null\n     * {@link AppWidgetProviderInfo} for this type.\n     *\n     * <p>See also {@link AppWidgetManager} for more details.\n     *\n     * @see #EXTRA_PIN_ITEM_REQUEST\n     * @see #getPinItemRequest(Intent)\n     ",
  "links" : [ "#ACTION_CONFIRM_PIN_APPWIDGET", "#accept()", "android.content.pm.ShortcutInfo", "#getShortcutInfo()", "#REQUEST_TYPE_APPWIDGET", "android.content.pm.ShortcutManager", "#getAppWidgetProviderInfo(Context)", "android.appwidget.AppWidgetProviderInfo", "android.appwidget.AppWidgetManager", "android.appwidget.AppWidgetManager#EXTRA_APPWIDGET_ID", "#REQUEST_TYPE_SHORTCUT", "#ACTION_CONFIRM_PIN_SHORTCUT", "#accept(Bundle)", "android.content.pm.ShortcutInfo#isPinned()" ],
  "variables" : [ {
    "name" : "REQUEST_TYPE_SHORTCUT",
    "type" : "int",
    "comment" : " This is a request to pin shortcut. ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_TYPE_APPWIDGET",
    "type" : "int",
    "comment" : " This is a request to pin app widget. ",
    "links" : [ ]
  }, {
    "name" : "mRequestType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInner",
    "type" : "IPinItemRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<PinItemRequest>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getRequestType()",
    "returnType" : "int",
    "comment" : "\n         * Represents the type of a request, which is one of the {@code REQUEST_TYPE_} constants.\n         *\n         * @return one of the {@code REQUEST_TYPE_} constants.\n         ",
    "links" : [ ]
  }, {
    "name" : "public ShortcutInfo getShortcutInfo()",
    "returnType" : "ShortcutInfo",
    "comment" : "\n         * {@link ShortcutInfo} sent by the requesting app.\n         * Always non-null for a {@link #REQUEST_TYPE_SHORTCUT} request, and always null for a\n         * different request type.\n         *\n         * @return requested {@link ShortcutInfo} when a request is of the\n         * {@link #REQUEST_TYPE_SHORTCUT} type.  Null otherwise.\n         ",
    "links" : [ "android.content.pm.ShortcutInfo", "#REQUEST_TYPE_SHORTCUT" ]
  }, {
    "name" : "public AppWidgetProviderInfo getAppWidgetProviderInfo(Context context)",
    "returnType" : "AppWidgetProviderInfo",
    "comment" : "\n         * {@link AppWidgetProviderInfo} sent by the requesting app.\n         * Always non-null for a {@link #REQUEST_TYPE_APPWIDGET} request, and always null for a\n         * different request type.\n         *\n         * <p>Launcher should not show any configuration activity associated with the provider, and\n         * assume that the widget is already fully configured. Upon accepting the widget, it should\n         * pass the widgetId in {@link #accept(Bundle)}.\n         *\n         * @return requested {@link AppWidgetProviderInfo} when a request is of the\n         * {@link #REQUEST_TYPE_APPWIDGET} type.  Null otherwise.\n         ",
    "links" : [ "#REQUEST_TYPE_APPWIDGET", "android.appwidget.AppWidgetProviderInfo", "#accept(Bundle)" ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n         * Any extras sent by the requesting app.\n         *\n         * @return For a shortcut request, this method always return null.  For an AppWidget\n         * request, this method returns the extras passed to the\n         * {@link android.appwidget.AppWidgetManager#requestPinAppWidget(\n         * ComponentName, Bundle, PendingIntent)} API.  See {@link AppWidgetManager} for details.\n         ",
    "links" : [ "android.appwidget.AppWidgetManager#requestPinAppWidget(", "android.appwidget.AppWidgetManager" ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n         * Return whether a request is still valid.\n         *\n         * @return {@code TRUE} if a request is valid and {@link #accept(Bundle)} may be called.\n         ",
    "links" : [ "#accept(Bundle)" ]
  }, {
    "name" : "public boolean accept(@Nullable Bundle options)",
    "returnType" : "boolean",
    "comment" : "\n         * Called by the receiving launcher app when the user accepts the request.\n         *\n         * @param options must be set for a {@link #REQUEST_TYPE_APPWIDGET} request.\n         *\n         * @return {@code TRUE} if the shortcut or the AppWidget has actually been pinned.\n         * {@code FALSE} if the item hasn't been pinned, for example, because the request had\n         * already been canceled, in which case the launcher must not pin the requested item.\n         ",
    "links" : [ "#REQUEST_TYPE_APPWIDGET" ]
  }, {
    "name" : "public boolean accept()",
    "returnType" : "boolean",
    "comment" : "\n         * Called by the receiving launcher app when the user accepts the request, with no options.\n         *\n         * @return {@code TRUE} if the shortcut or the AppWidget has actually been pinned.\n         * {@code FALSE} if the item hasn't been pinned, for example, because the request had\n         * already been canceled, in which case the launcher must not pin the requested item.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getRequestType()", "public ShortcutInfo getShortcutInfo()", "public AppWidgetProviderInfo getAppWidgetProviderInfo(Context context)", "public Bundle getExtras()", "public boolean isValid()", "public boolean accept(@Nullable Bundle options)", "public boolean accept()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ],
  "variableNames" : [ "REQUEST_TYPE_SHORTCUT", "REQUEST_TYPE_APPWIDGET", "mRequestType", "mInner", "CREATOR" ]
}