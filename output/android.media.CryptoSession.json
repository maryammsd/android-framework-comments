{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaDrm.java",
  "packageName" : "android.media",
  "className" : "CryptoSession",
  "comment" : "\n     * In addition to supporting decryption of DASH Common Encrypted Media, the\n     * MediaDrm APIs provide the ability to securely deliver session keys from\n     * an operator's session key server to a client device, based on the factory-installed\n     * root of trust, and then perform encrypt, decrypt, sign and verify operations\n     * with the session key on arbitrary user data.\n     * <p>\n     * The CryptoSession class implements generic encrypt/decrypt/sign/verify methods\n     * based on the established session keys.  These keys are exchanged using the\n     * getKeyRequest/provideKeyResponse methods.\n     * <p>\n     * Applications of this capability could include securing various types of\n     * purchased or private content, such as applications, books and other media,\n     * photos or media delivery protocols.\n     * <p>\n     * Operators can create session key servers that are functionally similar to a\n     * license key server, except that instead of receiving license key requests and\n     * providing encrypted content keys which are used specifically to decrypt A/V media\n     * content, the session key server receives session key requests and provides\n     * encrypted session keys which can be used for general purpose crypto operations.\n     * <p>\n     * A CryptoSession is obtained using {@link #getCryptoSession}\n     ",
  "variables" : [ {
    "name" : "mSessionId",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public byte[] encrypt(@NonNull byte[] keyid, @NonNull byte[] input, @NonNull byte[] iv)",
    "returnType" : "byte[]",
    "comment" : "\n         * Encrypt data using the CryptoSession's cipher algorithm\n         *\n         * @param keyid specifies which key to use\n         * @param input the data to encrypt\n         * @param iv the initialization vector to use for the cipher\n         ",
    "links" : [ ]
  }, {
    "name" : "public byte[] decrypt(@NonNull byte[] keyid, @NonNull byte[] input, @NonNull byte[] iv)",
    "returnType" : "byte[]",
    "comment" : "\n         * Decrypt data using the CryptoSessions's cipher algorithm\n         *\n         * @param keyid specifies which key to use\n         * @param input the data to encrypt\n         * @param iv the initialization vector to use for the cipher\n         ",
    "links" : [ ]
  }, {
    "name" : "public byte[] sign(@NonNull byte[] keyid, @NonNull byte[] message)",
    "returnType" : "byte[]",
    "comment" : "\n         * Sign data using the CryptoSessions's mac algorithm.\n         *\n         * @param keyid specifies which key to use\n         * @param message the data for which a signature is to be computed\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean verify(@NonNull byte[] keyid, @NonNull byte[] message, @NonNull byte[] signature)",
    "returnType" : "boolean",
    "comment" : "\n         * Verify a signature using the CryptoSessions's mac algorithm. Return true\n         * if the signatures match, false if they do no.\n         *\n         * @param keyid specifies which key to use\n         * @param message the data to verify\n         * @param signature the reference signature which will be compared with the\n         *        computed signature\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mSessionId" ],
  "methodNames" : [ "public byte[] encrypt(@NonNull byte[] keyid, @NonNull byte[] input, @NonNull byte[] iv)", "public byte[] decrypt(@NonNull byte[] keyid, @NonNull byte[] input, @NonNull byte[] iv)", "public byte[] sign(@NonNull byte[] keyid, @NonNull byte[] message)", "public boolean verify(@NonNull byte[] keyid, @NonNull byte[] message, @NonNull byte[] signature)" ]
}