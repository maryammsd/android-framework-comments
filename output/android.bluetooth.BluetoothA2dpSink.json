{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothA2dpSink.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothA2dpSink",
  "comment" : "\n * This class provides the public APIs to control the Bluetooth A2DP Sink profile.\n *\n * <p>BluetoothA2dpSink is a proxy object for controlling the Bluetooth A2DP Sink Service via IPC.\n * Use {@link BluetoothAdapter#getProfileProxy} to get the BluetoothA2dpSink proxy object.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the A2DP Sink profile.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     *\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothA2dpSink",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothA2dpSink getService()",
    "returnType" : "IBluetoothA2dpSink",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection to a profile of the remote bluetooth device.\n     *\n     * <p>Currently, the system supports only 1 connection to the A2DP profile. The API will\n     * automatically disconnect connected devices before connecting.\n     *\n     * <p>This API returns false in scenarios like the profile on the device is already connected or\n     * Bluetooth is not turned on. When this API returns true, it is guaranteed that connection\n     * state intent for the profile will be broadcasted with the state. Users can get the connection\n     * state of the profile from this intent.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnection from a profile\n     *\n     * <p>This API will return false in scenarios like the profile on the Bluetooth device is not in\n     * connected state etc. When this API returns, true, it is guaranteed that the connection state\n     * change intent will be broadcasted with the state. Users can get the disconnection state of\n     * the profile from this intent.\n     *\n     * <p>If the disconnection is initiated by a remote device, the state will transition from\n     * {@link #STATE_CONNECTED} to {@link #STATE_DISCONNECTED}. If the disconnect is initiated by\n     * the host (local) device the state will transition from {@link #STATE_CONNECTED} to state\n     * {@link #STATE_DISCONNECTING} to state {@link #STATE_DISCONNECTED}. The transition to {@link\n     * #STATE_DISCONNECTING} can be used to distinguish between the two scenarios.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAudioConfig getAudioConfig(BluetoothDevice device)",
    "returnType" : "BluetoothAudioConfig",
    "comment" : "\n     * Get the current audio configuration for the A2DP source device, or null if the device has no\n     * audio configuration\n     *\n     * @param device Remote bluetooth device.\n     * @return audio configuration for the device, or null\n     * @see BluetoothAudioConfig\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPriority(BluetoothDevice device, int priority)",
    "returnType" : "boolean",
    "comment" : "\n     * Set priority of the profile\n     *\n     * <p>The device should already be paired. Priority can be one of {@link #PRIORITY_ON} or {@link\n     * #PRIORITY_OFF}\n     *\n     * @param device Paired bluetooth device\n     * @return true if priority is set, false on error\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p>The priority can be any of: {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link\n     * #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public boolean isAudioPlaying(@NonNull BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if audio is playing on the bluetooth device (A2DP profile is streaming music).\n     *\n     * @param device BluetoothDevice device\n     * @return true if audio is playing (A2dp is streaming music), false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String stateToString(int state)",
    "returnType" : "String",
    "comment" : "\n     * Helper for converting a state to a string.\n     *\n     * <p>For debug use only - strings are not internationalized.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothA2dpSink getService()", "public BluetoothAdapter getAdapter()", "public void finalize()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(BluetoothDevice device)", "public BluetoothAudioConfig getAudioConfig(BluetoothDevice device)", "public boolean setPriority(BluetoothDevice device, int priority)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "public boolean isAudioPlaying(@NonNull BluetoothDevice device)", "public static String stateToString(int state)", "private boolean isEnabled()", "private static boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "mAdapter", "mAttributionSource", "mService" ]
}