{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/integrity/AtomicFormula.java",
  "packageName" : "android.content.integrity",
  "className" : "AtomicFormula",
  "comment" : "\n * Represents a simple formula consisting of an app install metadata field and a value.\n *\n * <p>Instances of this class are immutable.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PACKAGE_NAME",
    "type" : "int",
    "comment" : "\n     * Package name of the app.\n     *\n     * <p>Can only be used in {@link StringAtomicFormula}.\n     ",
    "links" : [ "StringAtomicFormula" ]
  }, {
    "name" : "APP_CERTIFICATE",
    "type" : "int",
    "comment" : "\n     * SHA-256 of the app certificate of the app.\n     *\n     * <p>Can only be used in {@link StringAtomicFormula}.\n     ",
    "links" : [ "StringAtomicFormula" ]
  }, {
    "name" : "INSTALLER_NAME",
    "type" : "int",
    "comment" : "\n     * Package name of the installer. Will be empty string if installed by the system (e.g., adb).\n     *\n     * <p>Can only be used in {@link StringAtomicFormula}.\n     ",
    "links" : [ "StringAtomicFormula" ]
  }, {
    "name" : "INSTALLER_CERTIFICATE",
    "type" : "int",
    "comment" : "\n     * SHA-256 of the cert of the installer. Will be empty string if installed by the system (e.g.,\n     * adb).\n     *\n     * <p>Can only be used in {@link StringAtomicFormula}.\n     ",
    "links" : [ "StringAtomicFormula" ]
  }, {
    "name" : "VERSION_CODE",
    "type" : "int",
    "comment" : "\n     * Version code of the app.\n     *\n     * <p>Can only be used in {@link LongAtomicFormula}.\n     ",
    "links" : [ "LongAtomicFormula" ]
  }, {
    "name" : "PRE_INSTALLED",
    "type" : "int",
    "comment" : "\n     * If the app is pre-installed on the device.\n     *\n     * <p>Can only be used in {@link BooleanAtomicFormula}.\n     ",
    "links" : [ "BooleanAtomicFormula" ]
  }, {
    "name" : "STAMP_TRUSTED",
    "type" : "int",
    "comment" : "\n     * If the APK has an embedded trusted stamp.\n     *\n     * <p>Can only be used in {@link BooleanAtomicFormula}.\n     ",
    "links" : [ "BooleanAtomicFormula" ]
  }, {
    "name" : "STAMP_CERTIFICATE_HASH",
    "type" : "int",
    "comment" : "\n     * SHA-256 of the certificate used to sign the stamp embedded in the APK.\n     *\n     * <p>Can only be used in {@link StringAtomicFormula}.\n     ",
    "links" : [ "StringAtomicFormula" ]
  }, {
    "name" : "APP_CERTIFICATE_LINEAGE",
    "type" : "int",
    "comment" : "\n     * SHA-256 of a certificate in the signing lineage of the app.\n     *\n     * <p>Can only be used in {@link StringAtomicFormula}.\n     ",
    "links" : [ "StringAtomicFormula" ]
  }, {
    "name" : "EQ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKey",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getKey()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String keyToString(int key)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String operatorToString(int op)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidKey(int key)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getKey()", " static String keyToString(int key)", " static String operatorToString(int op)", "private static boolean isValidKey(int key)" ],
  "variableNames" : [ "PACKAGE_NAME", "APP_CERTIFICATE", "INSTALLER_NAME", "INSTALLER_CERTIFICATE", "VERSION_CODE", "PRE_INSTALLED", "STAMP_TRUSTED", "STAMP_CERTIFICATE_HASH", "APP_CERTIFICATE_LINEAGE", "EQ", "GT", "GTE", "mKey" ]
}