{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/CookieHandler.java",
  "packageName" : "java.net",
  "className" : "CookieHandler",
  "comment" : "\n * A CookieHandler object provides a callback mechanism to hook up a\n * HTTP state management policy implementation into the HTTP protocol\n * handler. The HTTP state management mechanism specifies a way to\n * create a stateful session with HTTP requests and responses.\n *\n * <p> A system-wide CookieHandler to be used by the {@linkplain\n * HttpURLConnection HTTP URL stream protocol handler} can be registered by\n * doing a CookieHandler.setDefault(CookieHandler). The currently registered\n * CookieHandler can be retrieved by calling\n * CookieHandler.getDefault().\n *\n * For more information on HTTP state management, see <a\n * href=\"http://www.ietf.org/rfc/rfc2965.txt\"><i>RFC&nbsp;2965: HTTP\n * State Management Mechanism</i></a>\n *\n * @author Yingxian Wang\n * @since 1.5\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "cookieHandler",
    "type" : "CookieHandler",
    "comment" : "\n     * The system-wide cookie handler that will apply cookies to the\n     * request headers and manage cookies from the response headers.\n     *\n     * @see setDefault(CookieHandler)\n     * @see getDefault()\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized CookieHandler getDefault()",
    "returnType" : "CookieHandler",
    "comment" : "\n     * Gets the system-wide cookie handler.\n     *\n     * @return the system-wide cookie handler; A null return means\n     *        there is no system-wide cookie handler currently set.\n     * @throws SecurityException\n     *       If a security manager has been installed and it denies\n     * {@link NetPermission}{@code (\"getCookieHandler\")}\n     * @see #setDefault(CookieHandler)\n     ",
    "links" : [ "java.net.NetPermission" ]
  }, {
    "name" : "public static synchronized void setDefault(CookieHandler cHandler)",
    "returnType" : "void",
    "comment" : "\n     * Sets (or unsets) the system-wide cookie handler.\n     *\n     * Note: non-standard http protocol handlers may ignore this setting.\n     *\n     * @param cHandler The HTTP cookie handler, or\n     *       {@code null} to unset.\n     * @throws SecurityException\n     *       If a security manager has been installed and it denies\n     * {@link NetPermission}{@code (\"setCookieHandler\")}\n     * @see #getDefault()\n     ",
    "links" : [ "java.net.NetPermission" ]
  }, {
    "name" : "public abstract Map<String, List<String>> get(URI uri, Map<String, List<String>> requestHeaders) throws IOException",
    "returnType" : "Map<String, List<String>>",
    "comment" : "\n     * Gets all the applicable cookies from a cookie cache for the\n     * specified uri in the request header.\n     *\n     * <P>The {@code URI} passed as an argument specifies the intended use for\n     * the cookies. In particular the scheme should reflect whether the cookies\n     * will be sent over http, https or used in another context like javascript.\n     * The host part should reflect either the destination of the cookies or\n     * their origin in the case of javascript.</P>\n     * <P>It is up to the implementation to take into account the {@code URI} and\n     * the cookies attributes and security settings to determine which ones\n     * should be returned.</P>\n     *\n     * <P>HTTP protocol implementers should make sure that this method is\n     * called after all request headers related to choosing cookies\n     * are added, and before the request is sent.</P>\n     *\n     * @param uri a {@code URI} representing the intended use for the\n     *            cookies\n     * @param requestHeaders - a Map from request header\n     *            field names to lists of field values representing\n     *            the current request headers\n     * @return an immutable map from state management headers, with\n     *            field names \"Cookie\" or \"Cookie2\" to a list of\n     *            cookies containing state information\n     *\n     * @throws IOException if an I/O error occurs\n     * @throws IllegalArgumentException if either argument is null\n     * @see #put(URI, Map)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void put(URI uri, Map<String, List<String>> responseHeaders) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets all the applicable cookies, examples are response header\n     * fields that are named Set-Cookie2, present in the response\n     * headers into a cookie cache.\n     *\n     * @param uri a {@code URI} where the cookies come from\n     * @param responseHeaders an immutable map from field names to\n     *            lists of field values representing the response\n     *            header fields returned\n     * @throws  IOException if an I/O error occurs\n     * @throws  IllegalArgumentException if either argument is null\n     * @see #get(URI, Map)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static synchronized CookieHandler getDefault()", "public static synchronized void setDefault(CookieHandler cHandler)", "public abstract Map<String, List<String>> get(URI uri, Map<String, List<String>> requestHeaders) throws IOException", "public abstract void put(URI uri, Map<String, List<String>> responseHeaders) throws IOException" ],
  "variableNames" : [ "cookieHandler" ]
}