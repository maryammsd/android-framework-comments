{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/AbstractPlainSocketImpl.java",
  "packageName" : "java.net",
  "className" : "AbstractPlainSocketImpl",
  "comment" : "\n * Default Socket Implementation. This implementation does\n * not implement any security checks.\n * Note this class should <b>NOT</b> be public.\n *\n * @author  Steven B. Byrne\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "timeout",
    "type" : "int",
    "comment" : " timeout in millisec",
    "links" : [ ]
  }, {
    "name" : "shut_rd",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "shut_wr",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "socketInputStream",
    "type" : "SocketInputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "socketOutputStream",
    "type" : "SocketOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fdUseCount",
    "type" : "int",
    "comment" : " number of threads using the FileDescriptor ",
    "links" : [ ]
  }, {
    "name" : "fdLock",
    "type" : "Object",
    "comment" : " This adds reachabilityFences where we would if fd were annotated.",
    "links" : [ ]
  }, {
    "name" : "closePending",
    "type" : "boolean",
    "comment" : " indicates a close is pending on the file descriptor ",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_NOT_RESET",
    "type" : "int",
    "comment" : " indicates connection reset state ",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_RESET_PENDING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_RESET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "resetState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "resetLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "stream",
    "type" : "boolean",
    "comment" : " whether this Socket is a stream (TCP) socket or not (UDP)\n    ",
    "links" : [ ]
  }, {
    "name" : "guard",
    "type" : "CloseGuard",
    "comment" : " Android-added: logs a warning if socket is not closed.",
    "links" : [ ]
  }, {
    "name" : "SHUT_RD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHUT_WR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected synchronized void create(boolean stream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Creates a socket with a boolean that specifies whether this\n     * is a stream socket (true) or an unconnected UDP socket (false).\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void connect(String host, int port) throws UnknownHostException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Creates a socket and connects it to the specified port on\n     * the specified host.\n     * @param host the specified host\n     * @param port the specified port\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void connect(InetAddress address, int port) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Creates a socket and connects it to the specified address on\n     * the specified port.\n     * @param address the address\n     * @param port the specified port\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void connect(SocketAddress address, int timeout) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Creates a socket and connects it to the specified address on\n     * the specified port.\n     * @param address the address\n     * @param timeout the timeout value in milliseconds, or zero for no timeout.\n     * @throws IOException if connection fails\n     * @throws  IllegalArgumentException if address is null or is a\n     *          SocketAddress subclass not supported by this socket\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "private void connectToAddress(InetAddress address, int port, int timeout) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOption(int opt, Object val) throws SocketException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getOption(int opt) throws SocketException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized void doConnect(InetAddress address, int port, int timeout) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void bind(InetAddress address, int lport) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Binds the socket to the specified address of the specified local port.\n     * @param address the address\n     * @param lport the port\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void listen(int count) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Listens, for a specified amount of time, for connections.\n     * @param count the amount of time to listen for connections\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void accept(SocketImpl s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Accepts connections.\n     * @param s the connection\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized InputStream getInputStream() throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Gets an InputStream for this socket.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setInputStream(SocketInputStream in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected synchronized OutputStream getOutputStream() throws IOException",
    "returnType" : "OutputStream",
    "comment" : "\n     * Gets an OutputStream for this socket.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAddress(InetAddress address)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setPort(int port)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setLocalPort(int localport)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected synchronized int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of bytes that can be read without blocking.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the socket.\n     ",
    "links" : [ ]
  }, {
    "name" : " void reset() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void shutdownInput() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Shutdown read-half of the socket connection;\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void shutdownOutput() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Shutdown write-half of the socket connection;\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean supportsUrgentData()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void sendUrgentData(int data) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Cleans up if the user forgets to close it.\n     ",
    "links" : [ ]
  }, {
    "name" : " FileDescriptor acquireFD()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * \"Acquires\" and returns the FileDescriptor for this impl\n     *\n     * A corresponding releaseFD is required to \"release\" the\n     * FileDescriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : " void releaseFD()",
    "returnType" : "void",
    "comment" : "\n     * \"Release\" the FileDescriptor for this impl.\n     *\n     * If the use count goes to -1 then the socket is closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConnectionReset()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isConnectionResetPending()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setConnectionReset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setConnectionResetPending()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isClosedOrPending()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if already closed or close is pending\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Return the current value of SO_TIMEOUT\n     ",
    "links" : [ ]
  }, {
    "name" : "private void socketPreClose() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * \"Pre-close\" a socket by dup'ing the file descriptor - this enables\n     * the socket to be closed without releasing the file descriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void socketClose() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Close the socket (and release the file descriptor).\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void socketCreate(boolean isServer) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void socketConnect(InetAddress address, int port, int timeout) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void socketBind(InetAddress address, int port) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void socketListen(int count) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void socketAccept(SocketImpl s) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract int socketAvailable() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void socketClose0(boolean useDeferredClose) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void socketShutdown(int howto) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void socketSetOption(int cmd, Object value) throws SocketException",
    "returnType" : "void",
    "comment" : " socket{Get,Set}Option work directly with Object values.",
    "links" : [ ]
  }, {
    "name" : " abstract Object socketGetOption(int opt) throws SocketException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void socketSendUrgentData(int data) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected synchronized void create(boolean stream) throws IOException", "protected void connect(String host, int port) throws UnknownHostException, IOException", "protected void connect(InetAddress address, int port) throws IOException", "protected void connect(SocketAddress address, int timeout) throws IOException", "private void connectToAddress(InetAddress address, int port, int timeout) throws IOException", "public void setOption(int opt, Object val) throws SocketException", "public Object getOption(int opt) throws SocketException", " synchronized void doConnect(InetAddress address, int port, int timeout) throws IOException", "protected synchronized void bind(InetAddress address, int lport) throws IOException", "protected synchronized void listen(int count) throws IOException", "protected void accept(SocketImpl s) throws IOException", "protected synchronized InputStream getInputStream() throws IOException", " void setInputStream(SocketInputStream in)", "protected synchronized OutputStream getOutputStream() throws IOException", " void setAddress(InetAddress address)", " void setPort(int port)", " void setLocalPort(int localport)", "protected synchronized int available() throws IOException", "protected void close() throws IOException", " void reset() throws IOException", "protected void shutdownInput() throws IOException", "protected void shutdownOutput() throws IOException", "protected boolean supportsUrgentData()", "protected void sendUrgentData(int data) throws IOException", "protected void finalize() throws IOException", " FileDescriptor acquireFD()", " void releaseFD()", "public boolean isConnectionReset()", "public boolean isConnectionResetPending()", "public void setConnectionReset()", "public void setConnectionResetPending()", "public boolean isClosedOrPending()", "public int getTimeout()", "private void socketPreClose() throws IOException", "protected void socketClose() throws IOException", " abstract void socketCreate(boolean isServer) throws IOException", " abstract void socketConnect(InetAddress address, int port, int timeout) throws IOException", " abstract void socketBind(InetAddress address, int port) throws IOException", " abstract void socketListen(int count) throws IOException", " abstract void socketAccept(SocketImpl s) throws IOException", " abstract int socketAvailable() throws IOException", " abstract void socketClose0(boolean useDeferredClose) throws IOException", " abstract void socketShutdown(int howto) throws IOException", " abstract void socketSetOption(int cmd, Object value) throws SocketException", " abstract Object socketGetOption(int opt) throws SocketException", " abstract void socketSendUrgentData(int data) throws IOException" ],
  "variableNames" : [ "timeout", "shut_rd", "shut_wr", "socketInputStream", "socketOutputStream", "fdUseCount", "fdLock", "closePending", "CONNECTION_NOT_RESET", "CONNECTION_RESET_PENDING", "CONNECTION_RESET", "resetState", "resetLock", "stream", "guard", "SHUT_RD", "SHUT_WR" ]
}