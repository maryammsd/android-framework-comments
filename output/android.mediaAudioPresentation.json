{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/AudioPresentation.java",
  "packageName" : "android.media",
  "className" : "AudioPresentation",
  "comment" : "\n * The AudioPresentation class encapsulates the information that describes an audio presentation\n * which is available in next generation audio content.\n *\n * Used by {@link MediaExtractor} {@link MediaExtractor#getAudioPresentations(int)} and\n * {@link AudioTrack} {@link AudioTrack#setPresentation(AudioPresentation)} to query available\n * presentations and to select one, respectively.\n *\n * A list of available audio presentations in a media source can be queried using\n * {@link MediaExtractor#getAudioPresentations(int)}. This list can be presented to a user for\n * selection.\n * An AudioPresentation can be passed to an offloaded audio decoder via\n * {@link AudioTrack#setPresentation(AudioPresentation)} to request decoding of the selected\n * presentation. An audio stream may contain multiple presentations that differ by language,\n * accessibility, end point mastering and dialogue enhancement. An audio presentation may also have\n * a set of description labels in different languages to help the user to make an informed\n * selection.\n *\n * Applications that parse media streams and extract presentation information on their own\n * can create instances of AudioPresentation by using {@link AudioPresentation.Builder} class.\n ",
  "variables" : [ {
    "name" : "mPresentationId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgramId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLanguage",
    "type" : "ULocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMasteringIndication",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioDescriptionAvailable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpokenSubtitlesAvailable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialogueEnhancementAvailable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabels",
    "type" : "Map<ULocale, CharSequence>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MASTERING_NOT_INDICATED",
    "type" : "int",
    "comment" : "\n     * No preferred reproduction channel layout.\n     *\n     * @see Builder#setMasteringIndication(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "MASTERED_FOR_STEREO",
    "type" : "int",
    "comment" : "\n     * Stereo speaker layout.\n     *\n     * @see Builder#setMasteringIndication(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "MASTERED_FOR_SURROUND",
    "type" : "int",
    "comment" : "\n     * Two-dimensional (e.g. 5.1) speaker layout.\n     *\n     * @see Builder#setMasteringIndication(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "MASTERED_FOR_3D",
    "type" : "int",
    "comment" : "\n     * Three-dimensional (e.g. 5.1.2) speaker layout.\n     *\n     * @see Builder#setMasteringIndication(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "MASTERED_FOR_HEADPHONE",
    "type" : "int",
    "comment" : "\n     * Prerendered for headphone playback.\n     *\n     * @see Builder#setMasteringIndication(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_ID",
    "type" : "int",
    "comment" : "\n     * This ID is reserved. No items can be explicitly assigned this ID.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getPresentationId()",
    "returnType" : "int",
    "comment" : "\n     * Returns presentation ID used by the framework to select an audio presentation rendered by a\n     * decoder. Presentation ID is typically sequential, but does not have to be.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProgramId()",
    "returnType" : "int",
    "comment" : "\n     * Returns program ID used by the framework to select an audio presentation rendered by a\n     * decoder. Program ID can be used to further uniquely identify the presentation to a decoder.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<Locale, String> getLabels()",
    "returnType" : "Map<Locale, String>",
    "comment" : "\n     * @return a map of available text labels for this presentation. Each label is indexed by its\n     * locale corresponding to the language code as specified by ISO 639-2. Either ISO 639-2/B\n     * or ISO 639-2/T could be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Map<ULocale, CharSequence> getULabels()",
    "returnType" : "Map<ULocale, CharSequence>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Locale getLocale()",
    "returnType" : "Locale",
    "comment" : "\n     * @return the locale corresponding to audio presentation's ISO 639-1/639-2 language code.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ULocale getULocale()",
    "returnType" : "ULocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMasteringIndication()",
    "returnType" : "int",
    "comment" : "\n     * @return the mastering indication of the audio presentation.\n     * See {@link AudioPresentation#MASTERING_NOT_INDICATED},\n     *     {@link AudioPresentation#MASTERED_FOR_STEREO},\n     *     {@link AudioPresentation#MASTERED_FOR_SURROUND},\n     *     {@link AudioPresentation#MASTERED_FOR_3D},\n     *     {@link AudioPresentation#MASTERED_FOR_HEADPHONE}\n     ",
    "links" : [ "AudioPresentation#MASTERING_NOT_INDICATED", "AudioPresentation#MASTERED_FOR_STEREO", "AudioPresentation#MASTERED_FOR_SURROUND", "AudioPresentation#MASTERED_FOR_3D", "AudioPresentation#MASTERED_FOR_HEADPHONE" ]
  }, {
    "name" : "public boolean hasAudioDescription()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether an audio description for the visually impaired is available.\n     * @return {@code true} if audio description is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSpokenSubtitles()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether spoken subtitles for the visually impaired are available.\n     * @return {@code true} if spoken subtitles are available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasDialogueEnhancement()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether dialogue enhancement is available.\n     * @return {@code true} if dialogue enhancement is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPresentationId", "mProgramId", "mLanguage", "mMasteringIndication", "mAudioDescriptionAvailable", "mSpokenSubtitlesAvailable", "mDialogueEnhancementAvailable", "mLabels", "MASTERING_NOT_INDICATED", "MASTERED_FOR_STEREO", "MASTERED_FOR_SURROUND", "MASTERED_FOR_3D", "MASTERED_FOR_HEADPHONE", "UNKNOWN_ID" ],
  "methodNames" : [ "public int getPresentationId()", "public int getProgramId()", "public Map<Locale, String> getLabels()", "private Map<ULocale, CharSequence> getULabels()", "public Locale getLocale()", "private ULocale getULocale()", "public int getMasteringIndication()", "public boolean hasAudioDescription()", "public boolean hasSpokenSubtitles()", "public boolean hasDialogueEnhancement()", "public boolean equals(Object o)", "public int hashCode()", "public String toString()" ]
}