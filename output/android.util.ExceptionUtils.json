{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/ExceptionUtils.java",
  "packageName" : "android.util",
  "className" : "ExceptionUtils",
  "comment" : "\n * Utility methods for proxying richer exceptions across Binder calls.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static RuntimeException wrap(IOException e)",
    "returnType" : "RuntimeException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void maybeUnwrapIOException(RuntimeException e) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getCompleteMessage(String msg, Throwable t)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getCompleteMessage(Throwable t)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void propagateIfInstanceOf(@Nullable Throwable t, Class<E> c) throws E",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static RuntimeException propagate(@NonNull Throwable t, Class<E> c) throws E",
    "returnType" : "RuntimeException",
    "comment" : "\n     * @param <E> a checked exception that is ok to throw without wrapping\n     ",
    "links" : [ ]
  }, {
    "name" : "public static RuntimeException propagate(@NonNull Throwable t)",
    "returnType" : "RuntimeException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Throwable getRootCause(@NonNull Throwable t)",
    "returnType" : "Throwable",
    "comment" : "\n     * Gets the root {@link Throwable#getCause() cause} of {@code t}\n     ",
    "links" : [ "#getCause()" ]
  }, {
    "name" : "public static Throwable appendCause(@NonNull Throwable t, @Nullable Throwable cause)",
    "returnType" : "Throwable",
    "comment" : "\n     * Appends {@code cause} at the end of the causal chain of {@code t}\n     *\n     * @return {@code t} for convenience\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static RuntimeException wrap(IOException e)", "public static void maybeUnwrapIOException(RuntimeException e) throws IOException", "public static String getCompleteMessage(String msg, Throwable t)", "public static String getCompleteMessage(Throwable t)", "public static void propagateIfInstanceOf(@Nullable Throwable t, Class<E> c) throws E", "public static RuntimeException propagate(@NonNull Throwable t, Class<E> c) throws E", "public static RuntimeException propagate(@NonNull Throwable t)", "public static Throwable getRootCause(@NonNull Throwable t)", "public static Throwable appendCause(@NonNull Throwable t, @Nullable Throwable cause)" ],
  "variableNames" : [ ]
}