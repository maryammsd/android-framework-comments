{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/database/DatabaseUtils.java",
  "packageName" : "android.database",
  "className" : "DatabaseUtils",
  "comment" : "\n * Static utility methods for dealing with databases and {@link Cursor}s.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATEMENT_SELECT",
    "type" : "int",
    "comment" : " One of the values returned by {@link #getSqlStatementType(String)}. ",
    "links" : [ "#getSqlStatementType(String)" ]
  }, {
    "name" : "STATEMENT_UPDATE",
    "type" : "int",
    "comment" : " One of the values returned by {@link #getSqlStatementType(String)}. ",
    "links" : [ "#getSqlStatementType(String)" ]
  }, {
    "name" : "STATEMENT_ATTACH",
    "type" : "int",
    "comment" : " One of the values returned by {@link #getSqlStatementType(String)}. ",
    "links" : [ "#getSqlStatementType(String)" ]
  }, {
    "name" : "STATEMENT_BEGIN",
    "type" : "int",
    "comment" : " One of the values returned by {@link #getSqlStatementType(String)}. ",
    "links" : [ "#getSqlStatementType(String)" ]
  }, {
    "name" : "STATEMENT_COMMIT",
    "type" : "int",
    "comment" : " One of the values returned by {@link #getSqlStatementType(String)}. ",
    "links" : [ "#getSqlStatementType(String)" ]
  }, {
    "name" : "STATEMENT_ABORT",
    "type" : "int",
    "comment" : " One of the values returned by {@link #getSqlStatementType(String)}. ",
    "links" : [ "#getSqlStatementType(String)" ]
  }, {
    "name" : "STATEMENT_PRAGMA",
    "type" : "int",
    "comment" : " One of the values returned by {@link #getSqlStatementType(String)}. ",
    "links" : [ "#getSqlStatementType(String)" ]
  }, {
    "name" : "STATEMENT_DDL",
    "type" : "int",
    "comment" : " One of the values returned by {@link #getSqlStatementType(String)}. ",
    "links" : [ "#getSqlStatementType(String)" ]
  }, {
    "name" : "STATEMENT_UNPREPARED",
    "type" : "int",
    "comment" : " One of the values returned by {@link #getSqlStatementType(String)}. ",
    "links" : [ "#getSqlStatementType(String)" ]
  }, {
    "name" : "STATEMENT_OTHER",
    "type" : "int",
    "comment" : " One of the values returned by {@link #getSqlStatementType(String)}. ",
    "links" : [ "#getSqlStatementType(String)" ]
  }, {
    "name" : "DIGITS",
    "type" : "char[]",
    "comment" : "\n     * Used building output as Hex\n     ",
    "links" : [ ]
  }, {
    "name" : "mColl",
    "type" : "Collator",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final void writeExceptionToParcel(Parcel reply, Exception e)",
    "returnType" : "void",
    "comment" : "\n     * Special function for writing an exception result at the header of\n     * a parcel, to be used when returning an exception from a transaction.\n     * exception will be re-thrown by the function in another process\n     * @param reply Parcel to write to\n     * @param e The Exception to be written.\n     * @see Parcel#writeNoException\n     * @see Parcel#writeException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void readExceptionFromParcel(Parcel reply)",
    "returnType" : "void",
    "comment" : "\n     * Special function for reading an exception result from the header of\n     * a parcel, to be used after receiving the result of a transaction.  This\n     * will throw the exception for you if it had been written to the Parcel,\n     * otherwise return and let you read the normal result data from the Parcel.\n     * @param reply Parcel to read from\n     * @see Parcel#writeNoException\n     * @see Parcel#readException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void readExceptionWithFileNotFoundExceptionFromParcel(Parcel reply) throws FileNotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void readExceptionWithOperationApplicationExceptionFromParcel(Parcel reply) throws OperationApplicationException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final void readExceptionFromParcel(Parcel reply, String msg, int code)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long executeInsert(@NonNull SQLiteDatabase db, @NonNull String sql, @Nullable Object[] bindArgs) throws SQLException",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static int executeUpdateDelete(@NonNull SQLiteDatabase db, @NonNull String sql, @Nullable Object[] bindArgs) throws SQLException",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private static void bindArgs(@NonNull SQLiteStatement st, @Nullable Object[] bindArgs)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static void bindObjectToProgram(SQLiteProgram prog, int index, Object value)",
    "returnType" : "void",
    "comment" : "\n     * Binds the given Object to the given SQLiteProgram using the proper\n     * typing. For example, bind numbers as longs/doubles, and everything else\n     * as a string by call toString() on it.\n     *\n     * @param prog the program to bind the object to\n     * @param index the 1-based index to bind at\n     * @param value the value to bind\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String bindSelection(@Nullable String selection, @Nullable Object... selectionArgs)",
    "returnType" : "String",
    "comment" : "\n     * Bind the given selection with the given selection arguments.\n     * <p>\n     * Internally assumes that '?' is only ever used for arguments, and doesn't\n     * appear as a literal or escaped value.\n     * <p>\n     * This method is typically useful for trusted code that needs to cook up a\n     * fully-bound selection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Object[] deepCopyOf(@Nullable Object[] args)",
    "returnType" : "Object[]",
    "comment" : "\n     * Make a deep copy of the given argument list, ensuring that the returned\n     * value is completely isolated from any changes to the original arguments.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getTypeOfObject(Object obj)",
    "returnType" : "int",
    "comment" : "\n     * Returns data type of the given object's value.\n     *<p>\n     * Returned values are\n     * <ul>\n     *   <li>{@link Cursor#FIELD_TYPE_NULL}</li>\n     *   <li>{@link Cursor#FIELD_TYPE_INTEGER}</li>\n     *   <li>{@link Cursor#FIELD_TYPE_FLOAT}</li>\n     *   <li>{@link Cursor#FIELD_TYPE_STRING}</li>\n     *   <li>{@link Cursor#FIELD_TYPE_BLOB}</li>\n     *</ul>\n     *</p>\n     *\n     * @param obj the object whose value type is to be returned\n     * @return object value type\n     * @hide\n     ",
    "links" : [ "android.database.Cursor#FIELD_TYPE_FLOAT", "android.database.Cursor#FIELD_TYPE_INTEGER", "android.database.Cursor#FIELD_TYPE_BLOB", "android.database.Cursor#FIELD_TYPE_NULL", "android.database.Cursor#FIELD_TYPE_STRING" ]
  }, {
    "name" : "public static void cursorFillWindow(final Cursor cursor, int position, final CursorWindow window)",
    "returnType" : "void",
    "comment" : "\n     * Fills the specified cursor window by iterating over the contents of the cursor.\n     * The window is filled until the cursor is exhausted or the window runs out\n     * of space.\n     *\n     * The original position of the cursor is left unchanged by this operation.\n     *\n     * @param cursor The cursor that contains the data to put in the window.\n     * @param position The start position for filling the window.\n     * @param window The window to fill.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void appendEscapedSQLString(StringBuilder sb, String sqlString)",
    "returnType" : "void",
    "comment" : "\n     * Appends an SQL string to the given StringBuilder, including the opening\n     * and closing single quotes. Any single quotes internal to sqlString will\n     * be escaped.\n     *\n     * This method is deprecated because we want to encourage everyone\n     * to use the \"?\" binding form.  However, when implementing a\n     * ContentProvider, one may want to add WHERE clauses that were\n     * not provided by the caller.  Since \"?\" is a positional form,\n     * using it in this case could break the caller because the\n     * indexes would be shifted to accomodate the ContentProvider's\n     * internal bindings.  In that case, it may be necessary to\n     * construct a WHERE clause manually.  This method is useful for\n     * those cases.\n     *\n     * @param sb the StringBuilder that the SQL string will be appended to\n     * @param sqlString the raw string to be appended, which may contain single\n     *                  quotes\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String sqlEscapeString(String value)",
    "returnType" : "String",
    "comment" : "\n     * SQL-escape a string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void appendValueToSql(StringBuilder sql, Object value)",
    "returnType" : "void",
    "comment" : "\n     * Appends an Object to an SQL string with the proper escaping, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String concatenateWhere(String a, String b)",
    "returnType" : "String",
    "comment" : "\n     * Concatenates two SQL WHERE clauses, handling empty or null values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCollationKey(String name)",
    "returnType" : "String",
    "comment" : "\n     * return the collation key\n     * @param name\n     * @return the collation key\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getHexCollationKey(String name)",
    "returnType" : "String",
    "comment" : "\n     * return the collation key in hex format\n     * @param name\n     * @return the collation key in hex format\n     ",
    "links" : [ ]
  }, {
    "name" : "private static char[] encodeHex(byte[] input)",
    "returnType" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getKeyLen(byte[] arr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static byte[] getCollationKeyInBytes(String name)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void dumpCursor(Cursor cursor)",
    "returnType" : "void",
    "comment" : "\n     * Prints the contents of a Cursor to System.out. The position is restored\n     * after printing.\n     *\n     * @param cursor the cursor to print\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpCursor(Cursor cursor, PrintStream stream)",
    "returnType" : "void",
    "comment" : "\n     * Prints the contents of a Cursor to a PrintSteam. The position is restored\n     * after printing.\n     *\n     * @param cursor the cursor to print\n     * @param stream the stream to print to\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpCursor(Cursor cursor, StringBuilder sb)",
    "returnType" : "void",
    "comment" : "\n     * Prints the contents of a Cursor to a StringBuilder. The position\n     * is restored after printing.\n     *\n     * @param cursor the cursor to print\n     * @param sb the StringBuilder to print to\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String dumpCursorToString(Cursor cursor)",
    "returnType" : "String",
    "comment" : "\n     * Prints the contents of a Cursor to a String. The position is restored\n     * after printing.\n     *\n     * @param cursor the cursor to print\n     * @return a String that contains the dumped cursor\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpCurrentRow(Cursor cursor)",
    "returnType" : "void",
    "comment" : "\n     * Prints the contents of a Cursor's current row to System.out.\n     *\n     * @param cursor the cursor to print from\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpCurrentRow(Cursor cursor, PrintStream stream)",
    "returnType" : "void",
    "comment" : "\n     * Prints the contents of a Cursor's current row to a PrintSteam.\n     *\n     * @param cursor the cursor to print\n     * @param stream the stream to print to\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpCurrentRow(Cursor cursor, StringBuilder sb)",
    "returnType" : "void",
    "comment" : "\n     * Prints the contents of a Cursor's current row to a StringBuilder.\n     *\n     * @param cursor the cursor to print\n     * @param sb the StringBuilder to print to\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String dumpCurrentRowToString(Cursor cursor)",
    "returnType" : "String",
    "comment" : "\n     * Dump the contents of a Cursor's current row to a String.\n     *\n     * @param cursor the cursor to print\n     * @return a String that contains the dumped cursor row\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void cursorStringToContentValues(Cursor cursor, String field, ContentValues values)",
    "returnType" : "void",
    "comment" : "\n     * Reads a String out of a field in a Cursor and writes it to a Map.\n     *\n     * @param cursor The cursor to read from\n     * @param field The TEXT field to read\n     * @param values The {@link ContentValues} to put the value into, with the field as the key\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorStringToInsertHelper(Cursor cursor, String field, InsertHelper inserter, int index)",
    "returnType" : "void",
    "comment" : "\n     * Reads a String out of a field in a Cursor and writes it to an InsertHelper.\n     *\n     * @param cursor The cursor to read from\n     * @param field The TEXT field to read\n     * @param inserter The InsertHelper to bind into\n     * @param index the index of the bind entry in the InsertHelper\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void cursorStringToContentValues(Cursor cursor, String field, ContentValues values, String key)",
    "returnType" : "void",
    "comment" : "\n     * Reads a String out of a field in a Cursor and writes it to a Map.\n     *\n     * @param cursor The cursor to read from\n     * @param field The TEXT field to read\n     * @param values The {@link ContentValues} to put the value into, with the field as the key\n     * @param key The key to store the value with in the map\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorIntToContentValues(Cursor cursor, String field, ContentValues values)",
    "returnType" : "void",
    "comment" : "\n     * Reads an Integer out of a field in a Cursor and writes it to a Map.\n     *\n     * @param cursor The cursor to read from\n     * @param field The INTEGER field to read\n     * @param values The {@link ContentValues} to put the value into, with the field as the key\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorIntToContentValues(Cursor cursor, String field, ContentValues values, String key)",
    "returnType" : "void",
    "comment" : "\n     * Reads a Integer out of a field in a Cursor and writes it to a Map.\n     *\n     * @param cursor The cursor to read from\n     * @param field The INTEGER field to read\n     * @param values The {@link ContentValues} to put the value into, with the field as the key\n     * @param key The key to store the value with in the map\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorLongToContentValues(Cursor cursor, String field, ContentValues values)",
    "returnType" : "void",
    "comment" : "\n     * Reads a Long out of a field in a Cursor and writes it to a Map.\n     *\n     * @param cursor The cursor to read from\n     * @param field The INTEGER field to read\n     * @param values The {@link ContentValues} to put the value into, with the field as the key\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorLongToContentValues(Cursor cursor, String field, ContentValues values, String key)",
    "returnType" : "void",
    "comment" : "\n     * Reads a Long out of a field in a Cursor and writes it to a Map.\n     *\n     * @param cursor The cursor to read from\n     * @param field The INTEGER field to read\n     * @param values The {@link ContentValues} to put the value into\n     * @param key The key to store the value with in the map\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorDoubleToCursorValues(Cursor cursor, String field, ContentValues values)",
    "returnType" : "void",
    "comment" : "\n     * Reads a Double out of a field in a Cursor and writes it to a Map.\n     *\n     * @param cursor The cursor to read from\n     * @param field The REAL field to read\n     * @param values The {@link ContentValues} to put the value into\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorDoubleToContentValues(Cursor cursor, String field, ContentValues values, String key)",
    "returnType" : "void",
    "comment" : "\n     * Reads a Double out of a field in a Cursor and writes it to a Map.\n     *\n     * @param cursor The cursor to read from\n     * @param field The REAL field to read\n     * @param values The {@link ContentValues} to put the value into\n     * @param key The key to store the value with in the map\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorRowToContentValues(Cursor cursor, ContentValues values)",
    "returnType" : "void",
    "comment" : "\n     * Read the entire contents of a cursor row and store them in a ContentValues.\n     *\n     * @param cursor the cursor to read from.\n     * @param values the {@link ContentValues} to put the row into.\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static int cursorPickFillWindowStartPosition(int cursorPosition, int cursorWindowCapacity)",
    "returnType" : "int",
    "comment" : "\n     * Picks a start position for {@link Cursor#fillWindow} such that the\n     * window will contain the requested row and a useful range of rows\n     * around it.\n     *\n     * When the data set is too large to fit in a cursor window, seeking the\n     * cursor can become a very expensive operation since we have to run the\n     * query again when we move outside the bounds of the current window.\n     *\n     * We try to choose a start position for the cursor window such that\n     * 1/3 of the window's capacity is used to hold rows before the requested\n     * position and 2/3 of the window's capacity is used to hold rows after the\n     * requested position.\n     *\n     * @param cursorPosition The row index of the row we want to get.\n     * @param cursorWindowCapacity The estimated number of rows that can fit in\n     * a cursor window, or 0 if unknown.\n     * @return The recommended start position, always less than or equal to\n     * the requested row.\n     * @hide\n     ",
    "links" : [ "android.database.Cursor#fillWindow" ]
  }, {
    "name" : "public static long queryNumEntries(SQLiteDatabase db, String table)",
    "returnType" : "long",
    "comment" : "\n     * Query the table for the number of rows in the table.\n     * @param db the database the table is in\n     * @param table the name of the table to query\n     * @return the number of rows in the table\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long queryNumEntries(SQLiteDatabase db, String table, String selection)",
    "returnType" : "long",
    "comment" : "\n     * Query the table for the number of rows in the table.\n     * @param db the database the table is in\n     * @param table the name of the table to query\n     * @param selection A filter declaring which rows to return,\n     *              formatted as an SQL WHERE clause (excluding the WHERE itself).\n     *              Passing null will count all rows for the given table\n     * @return the number of rows in the table filtered by the selection\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long queryNumEntries(SQLiteDatabase db, String table, String selection, String[] selectionArgs)",
    "returnType" : "long",
    "comment" : "\n     * Query the table for the number of rows in the table.\n     * @param db the database the table is in\n     * @param table the name of the table to query\n     * @param selection A filter declaring which rows to return,\n     *              formatted as an SQL WHERE clause (excluding the WHERE itself).\n     *              Passing null will count all rows for the given table\n     * @param selectionArgs You may include ?s in selection,\n     *              which will be replaced by the values from selectionArgs,\n     *              in order that they appear in the selection.\n     *              The values will be bound as Strings.\n     * @return the number of rows in the table filtered by the selection\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean queryIsEmpty(SQLiteDatabase db, String table)",
    "returnType" : "boolean",
    "comment" : "\n     * Query the table to check whether a table is empty or not\n     * @param db the database the table is in\n     * @param table the name of the table to query\n     * @return True if the table is empty\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long longForQuery(SQLiteDatabase db, String query, String[] selectionArgs)",
    "returnType" : "long",
    "comment" : "\n     * Utility method to run the query on the db and return the value in the\n     * first column of the first row.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long longForQuery(SQLiteStatement prog, String[] selectionArgs)",
    "returnType" : "long",
    "comment" : "\n     * Utility method to run the pre-compiled query and return the value in the\n     * first column of the first row.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String stringForQuery(SQLiteDatabase db, String query, String[] selectionArgs)",
    "returnType" : "String",
    "comment" : "\n     * Utility method to run the query on the db and return the value in the\n     * first column of the first row.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String stringForQuery(SQLiteStatement prog, String[] selectionArgs)",
    "returnType" : "String",
    "comment" : "\n     * Utility method to run the pre-compiled query and return the value in the\n     * first column of the first row.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteDatabase db, String query, String[] selectionArgs)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Utility method to run the query on the db and return the blob value in the\n     * first column of the first row.\n     *\n     * @return A read-only file descriptor for a copy of the blob value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteStatement prog, String[] selectionArgs)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Utility method to run the pre-compiled query and return the blob value in the\n     * first column of the first row.\n     *\n     * @return A read-only file descriptor for a copy of the blob value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void cursorStringToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)",
    "returnType" : "void",
    "comment" : "\n     * Reads a String out of a column in a Cursor and writes it to a ContentValues.\n     * Adds nothing to the ContentValues if the column isn't present or if its value is null.\n     *\n     * @param cursor The cursor to read from\n     * @param column The column to read\n     * @param values The {@link ContentValues} to put the value into\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorLongToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)",
    "returnType" : "void",
    "comment" : "\n     * Reads a Long out of a column in a Cursor and writes it to a ContentValues.\n     * Adds nothing to the ContentValues if the column isn't present or if its value is null.\n     *\n     * @param cursor The cursor to read from\n     * @param column The column to read\n     * @param values The {@link ContentValues} to put the value into\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorShortToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)",
    "returnType" : "void",
    "comment" : "\n     * Reads a Short out of a column in a Cursor and writes it to a ContentValues.\n     * Adds nothing to the ContentValues if the column isn't present or if its value is null.\n     *\n     * @param cursor The cursor to read from\n     * @param column The column to read\n     * @param values The {@link ContentValues} to put the value into\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorIntToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)",
    "returnType" : "void",
    "comment" : "\n     * Reads a Integer out of a column in a Cursor and writes it to a ContentValues.\n     * Adds nothing to the ContentValues if the column isn't present or if its value is null.\n     *\n     * @param cursor The cursor to read from\n     * @param column The column to read\n     * @param values The {@link ContentValues} to put the value into\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorFloatToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)",
    "returnType" : "void",
    "comment" : "\n     * Reads a Float out of a column in a Cursor and writes it to a ContentValues.\n     * Adds nothing to the ContentValues if the column isn't present or if its value is null.\n     *\n     * @param cursor The cursor to read from\n     * @param column The column to read\n     * @param values The {@link ContentValues} to put the value into\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void cursorDoubleToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)",
    "returnType" : "void",
    "comment" : "\n     * Reads a Double out of a column in a Cursor and writes it to a ContentValues.\n     * Adds nothing to the ContentValues if the column isn't present or if its value is null.\n     *\n     * @param cursor The cursor to read from\n     * @param column The column to read\n     * @param values The {@link ContentValues} to put the value into\n     ",
    "links" : [ "android.content.ContentValues" ]
  }, {
    "name" : "public static void createDbFromSqlStatements(Context context, String dbName, int dbVersion, String sqlStatements)",
    "returnType" : "void",
    "comment" : "\n     * Creates a db and populates it with the sql statements in sqlStatements.\n     *\n     * @param context the context to use to create the db\n     * @param dbName the name of the db to create\n     * @param dbVersion the version to set on the db\n     * @param sqlStatements the statements to use to populate the db. This should be a single string\n     *   of the form returned by sqlite3's <tt>.dump</tt> command (statements separated by\n     *   semicolons)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getSqlStatementType(String sql)",
    "returnType" : "int",
    "comment" : "\n     * Returns one of the following which represent the type of the given SQL statement.\n     * <ol>\n     *   <li>{@link #STATEMENT_SELECT}</li>\n     *   <li>{@link #STATEMENT_UPDATE}</li>\n     *   <li>{@link #STATEMENT_ATTACH}</li>\n     *   <li>{@link #STATEMENT_BEGIN}</li>\n     *   <li>{@link #STATEMENT_COMMIT}</li>\n     *   <li>{@link #STATEMENT_ABORT}</li>\n     *   <li>{@link #STATEMENT_OTHER}</li>\n     * </ol>\n     * @param sql the SQL statement whose type is returned by this method\n     * @return one of the values listed above\n     ",
    "links" : [ "#STATEMENT_ABORT", "#STATEMENT_UPDATE", "#STATEMENT_OTHER", "#STATEMENT_SELECT", "#STATEMENT_BEGIN", "#STATEMENT_COMMIT", "#STATEMENT_ATTACH" ]
  }, {
    "name" : "public static String[] appendSelectionArgs(String[] originalValues, String[] newValues)",
    "returnType" : "String[]",
    "comment" : "\n     * Appends one set of selection args to another. This is useful when adding a selection\n     * argument to a user provided set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int findRowIdColumnIndex(String[] columnNames)",
    "returnType" : "int",
    "comment" : "\n     * Returns column index of \"_id\" column, or -1 if not found.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String escapeForLike(@NonNull String arg)",
    "returnType" : "String",
    "comment" : "\n     * Escape the given argument for use in a {@code LIKE} statement.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "STATEMENT_SELECT", "STATEMENT_UPDATE", "STATEMENT_ATTACH", "STATEMENT_BEGIN", "STATEMENT_COMMIT", "STATEMENT_ABORT", "STATEMENT_PRAGMA", "STATEMENT_DDL", "STATEMENT_UNPREPARED", "STATEMENT_OTHER", "DIGITS", "mColl" ],
  "methodNames" : [ "public static final void writeExceptionToParcel(Parcel reply, Exception e)", "public static final void readExceptionFromParcel(Parcel reply)", "public static void readExceptionWithFileNotFoundExceptionFromParcel(Parcel reply) throws FileNotFoundException", "public static void readExceptionWithOperationApplicationExceptionFromParcel(Parcel reply) throws OperationApplicationException", "private static final void readExceptionFromParcel(Parcel reply, String msg, int code)", "public static long executeInsert(@NonNull SQLiteDatabase db, @NonNull String sql, @Nullable Object[] bindArgs) throws SQLException", "public static int executeUpdateDelete(@NonNull SQLiteDatabase db, @NonNull String sql, @Nullable Object[] bindArgs) throws SQLException", "private static void bindArgs(@NonNull SQLiteStatement st, @Nullable Object[] bindArgs)", "public static void bindObjectToProgram(SQLiteProgram prog, int index, Object value)", "public static String bindSelection(@Nullable String selection, @Nullable Object... selectionArgs)", "public static Object[] deepCopyOf(@Nullable Object[] args)", "public static int getTypeOfObject(Object obj)", "public static void cursorFillWindow(final Cursor cursor, int position, final CursorWindow window)", "public static void appendEscapedSQLString(StringBuilder sb, String sqlString)", "public static String sqlEscapeString(String value)", "public static final void appendValueToSql(StringBuilder sql, Object value)", "public static String concatenateWhere(String a, String b)", "public static String getCollationKey(String name)", "public static String getHexCollationKey(String name)", "private static char[] encodeHex(byte[] input)", "private static int getKeyLen(byte[] arr)", "private static byte[] getCollationKeyInBytes(String name)", "public static void dumpCursor(Cursor cursor)", "public static void dumpCursor(Cursor cursor, PrintStream stream)", "public static void dumpCursor(Cursor cursor, StringBuilder sb)", "public static String dumpCursorToString(Cursor cursor)", "public static void dumpCurrentRow(Cursor cursor)", "public static void dumpCurrentRow(Cursor cursor, PrintStream stream)", "public static void dumpCurrentRow(Cursor cursor, StringBuilder sb)", "public static String dumpCurrentRowToString(Cursor cursor)", "public static void cursorStringToContentValues(Cursor cursor, String field, ContentValues values)", "public static void cursorStringToInsertHelper(Cursor cursor, String field, InsertHelper inserter, int index)", "public static void cursorStringToContentValues(Cursor cursor, String field, ContentValues values, String key)", "public static void cursorIntToContentValues(Cursor cursor, String field, ContentValues values)", "public static void cursorIntToContentValues(Cursor cursor, String field, ContentValues values, String key)", "public static void cursorLongToContentValues(Cursor cursor, String field, ContentValues values)", "public static void cursorLongToContentValues(Cursor cursor, String field, ContentValues values, String key)", "public static void cursorDoubleToCursorValues(Cursor cursor, String field, ContentValues values)", "public static void cursorDoubleToContentValues(Cursor cursor, String field, ContentValues values, String key)", "public static void cursorRowToContentValues(Cursor cursor, ContentValues values)", "public static int cursorPickFillWindowStartPosition(int cursorPosition, int cursorWindowCapacity)", "public static long queryNumEntries(SQLiteDatabase db, String table)", "public static long queryNumEntries(SQLiteDatabase db, String table, String selection)", "public static long queryNumEntries(SQLiteDatabase db, String table, String selection, String[] selectionArgs)", "public static boolean queryIsEmpty(SQLiteDatabase db, String table)", "public static long longForQuery(SQLiteDatabase db, String query, String[] selectionArgs)", "public static long longForQuery(SQLiteStatement prog, String[] selectionArgs)", "public static String stringForQuery(SQLiteDatabase db, String query, String[] selectionArgs)", "public static String stringForQuery(SQLiteStatement prog, String[] selectionArgs)", "public static ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteDatabase db, String query, String[] selectionArgs)", "public static ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteStatement prog, String[] selectionArgs)", "public static void cursorStringToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)", "public static void cursorLongToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)", "public static void cursorShortToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)", "public static void cursorIntToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)", "public static void cursorFloatToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)", "public static void cursorDoubleToContentValuesIfPresent(Cursor cursor, ContentValues values, String column)", "public static void createDbFromSqlStatements(Context context, String dbName, int dbVersion, String sqlStatements)", "public static int getSqlStatementType(String sql)", "public static String[] appendSelectionArgs(String[] originalValues, String[] newValues)", "public static int findRowIdColumnIndex(String[] columnNames)", "public static String escapeForLike(@NonNull String arg)" ]
}