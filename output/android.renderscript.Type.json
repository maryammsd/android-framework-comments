{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/renderscript/Type.java",
  "packageName" : "android.renderscript",
  "className" : "Type",
  "comment" : "\n * <p>A Type describes the {@link android.renderscript.Element} and dimensions used for an {@link\n * android.renderscript.Allocation} or a parallel operation. Types are created through {@link\n * android.renderscript.Type.Builder}.</p>\n *\n * <p>A Type always includes an {@link android.renderscript.Element} and an X\n * dimension. A Type may be multidimensional, up to three dimensions. A nonzero\n * value in the Y or Z dimensions indicates that the dimension is present. Note\n * that a Type with only a given X dimension and a Type with the same X\n * dimension but Y = 1 are not equivalent.</p>\n *\n * <p>A Type also supports inclusion of level of detail (LOD) or cube map\n * faces. LOD and cube map faces are booleans to indicate present or not\n * present. </p>\n *\n * <p>A Type also supports YUV format information to support an\n * {@link android.renderscript.Allocation} in a YUV format. The YUV formats\n * supported are {@link android.graphics.ImageFormat#YV12},\n * {@link android.graphics.ImageFormat#NV21}, and\n * {@link android.graphics.ImageFormat#YUV_420_888}</p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about creating an application that uses RenderScript, read the\n * <a href=\"{@docRoot}guide/topics/renderscript/index.html\">RenderScript</a> developer guide.</p>\n * </div>\n *\n * @deprecated Renderscript has been deprecated in API level 31. Please refer to the <a\n * href=\"https://developer.android.com/guide/topics/renderscript/migration-guide\">migration\n * guide</a> for the proposed alternatives.\n *",
  "links" : [ "android.renderscript.Element", "android.graphics.ImageFormat#YV12", "android.renderscript.Type.Builder", "android.graphics.ImageFormat#NV21", "android.renderscript.Allocation", "android.graphics.ImageFormat#YUV_420_888" ],
  "variables" : [ {
    "name" : "mDimX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDimY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDimZ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDimMipmaps",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDimFaces",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDimYuv",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElementCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElement",
    "type" : "Element",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArrays",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxArrays",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Element getElement()",
    "returnType" : "Element",
    "comment" : "\n     * Return the element associated with this Type.\n     *\n     * @return Element\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getX()",
    "returnType" : "int",
    "comment" : "\n     * Return the value of the X dimension.\n     *\n     * @return int\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getY()",
    "returnType" : "int",
    "comment" : "\n     * Return the value of the Y dimension or 0 for a 1D allocation.\n     *\n     * @return int\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getZ()",
    "returnType" : "int",
    "comment" : "\n     * Return the value of the Z dimension or 0 for a 1D or 2D allocation.\n     *\n     * @return int\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getYuv()",
    "returnType" : "int",
    "comment" : "\n     * Get the YUV format\n     *\n     *\n     * @return int\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMipmaps()",
    "returnType" : "boolean",
    "comment" : "\n     * Return if the Type has a mipmap chain.\n     *\n     * @return boolean\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFaces()",
    "returnType" : "boolean",
    "comment" : "\n     * Return if the Type is a cube map.\n     *\n     * @return boolean\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the total number of accessable cells in the Type.\n     *\n     * @return int\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getArray(int arrayNum)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n      * Return the dimension of the specified array.\n      *\n      * @param arrayNum  The array dimension to query\n      * @return int\n      ",
    "links" : [ ]
  }, {
    "name" : "public int getArrayCount()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n      * Return the number of array dimensions.\n      *\n      * @return int\n      ",
    "links" : [ ]
  }, {
    "name" : " void calcElementCount()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void updateFromNative()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Type createX(RenderScript rs, Element e, int dimX)",
    "returnType" : "Type",
    "comment" : "\n     * Utility function for creating basic 1D types. The type is\n     * created without mipmaps enabled.\n     *\n     * @param rs The RenderScript context\n     * @param e The Element for the Type\n     * @param dimX The X dimension, must be > 0\n     *\n     * @return Type\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Type createXY(RenderScript rs, Element e, int dimX, int dimY)",
    "returnType" : "Type",
    "comment" : "\n     * Utility function for creating basic 2D types. The type is\n     * created without mipmaps or cubemaps.\n     *\n     * @param rs The RenderScript context\n     * @param e The Element for the Type\n     * @param dimX The X dimension, must be > 0\n     * @param dimY The Y dimension, must be > 0\n     *\n     * @return Type\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Type createXYZ(RenderScript rs, Element e, int dimX, int dimY, int dimZ)",
    "returnType" : "Type",
    "comment" : "\n     * Utility function for creating basic 3D types. The type is\n     * created without mipmaps.\n     *\n     * @param rs The RenderScript context\n     * @param e The Element for the Type\n     * @param dimX The X dimension, must be > 0\n     * @param dimY The Y dimension, must be > 0\n     * @param dimZ The Z dimension, must be > 0\n     *\n     * @return Type\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Element getElement()", "public int getX()", "public int getY()", "public int getZ()", "public int getYuv()", "public boolean hasMipmaps()", "public boolean hasFaces()", "public int getCount()", "public int getArray(int arrayNum)", "public int getArrayCount()", " void calcElementCount()", " void updateFromNative()", "public static Type createX(RenderScript rs, Element e, int dimX)", "public static Type createXY(RenderScript rs, Element e, int dimX, int dimY)", "public static Type createXYZ(RenderScript rs, Element e, int dimX, int dimY, int dimZ)" ],
  "variableNames" : [ "mDimX", "mDimY", "mDimZ", "mDimMipmaps", "mDimFaces", "mDimYuv", "mElementCount", "mElement", "mArrays", "mMaxArrays" ]
}