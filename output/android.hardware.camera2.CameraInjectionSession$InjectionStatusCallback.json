{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/CameraInjectionSession.java",
  "packageName" : "android.hardware.camera2",
  "className" : "InjectionStatusCallback",
  "comment" : "\n     * A callback for external camera has a success or an error during injecting.\n     *\n     * <p>A callback instance must be provided to the {@link CameraManager#injectCamera} method to\n     * inject camera.</p>\n     *\n     * @hide\n     * @see CameraManager#injectCamera\n     ",
  "links" : [ "android.hardware.camera2.CameraManager#injectCamera" ],
  "variables" : [ {
    "name" : "ERROR_INJECTION_SESSION",
    "type" : "int",
    "comment" : "\n         * An error code that can be reported by {@link #onInjectionError} indicating that the\n         * camera injection session has encountered a fatal error.\n         *\n         * @see #onInjectionError\n         ",
    "links" : [ "#onInjectionError" ]
  }, {
    "name" : "ERROR_INJECTION_SERVICE",
    "type" : "int",
    "comment" : "\n         * An error code that can be reported by {@link #onInjectionError} indicating that the\n         * camera service has encountered a fatal error.\n         *\n         * <p>The Android device may need to be shut down and restarted to restore\n         * camera function, or there may be a persistent hardware problem.</p>\n         *\n         * <p>An attempt at recovery <i>may</i> be possible by closing the\n         * CameraDevice and the CameraManager, and trying to acquire all resources again from\n         * scratch.</p>\n         *\n         * @see #onInjectionError\n         ",
    "links" : [ "#onInjectionError" ]
  }, {
    "name" : "ERROR_INJECTION_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n         * An error code that can be reported by {@link #onInjectionError} indicating that the\n         * injection camera does not support certain camera functions. When this error occurs, the\n         * default processing is still in the inject state, and the app is notified to display an\n         * error message and a black screen.\n         *\n         * @see #onInjectionError\n         ",
    "links" : [ "#onInjectionError" ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onInjectionSucceeded(@NonNull CameraInjectionSession injectionSession)",
    "returnType" : "void",
    "comment" : "\n         * The method will be called when an external camera has been injected and replaced\n         * internal camera's feed.\n         *\n         * @param injectionSession The camera injection session that has been injected.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onInjectionError(@NonNull int errorCode)",
    "returnType" : "void",
    "comment" : "\n         * The method will be called when an error occurs in the injected external camera.\n         *\n         * @param errorCode   The error code.\n         * @see #ERROR_INJECTION_SESSION\n         * @see #ERROR_INJECTION_SERVICE\n         * @see #ERROR_INJECTION_UNSUPPORTED\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onInjectionSucceeded(@NonNull CameraInjectionSession injectionSession)", "public abstract void onInjectionError(@NonNull int errorCode)" ],
  "variableNames" : [ "ERROR_INJECTION_SESSION", "ERROR_INJECTION_SERVICE", "ERROR_INJECTION_UNSUPPORTED" ]
}