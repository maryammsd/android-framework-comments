{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/devicestate/DeviceStateManager.java",
  "packageName" : "android.hardware.devicestate",
  "className" : "DeviceStateManager",
  "comment" : "\n * Manages the state of the system for devices with user-configurable hardware like a foldable\n * phone.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "INVALID_DEVICE_STATE_IDENTIFIER",
    "type" : "int",
    "comment" : "\n     * Invalid device state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MINIMUM_DEVICE_STATE_IDENTIFIER",
    "type" : "int",
    "comment" : "\n     * The minimum allowed device state identifier.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAXIMUM_DEVICE_STATE_IDENTIFIER",
    "type" : "int",
    "comment" : "\n     * The maximum allowed device state identifier.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SHOW_REAR_DISPLAY_OVERLAY",
    "type" : "String",
    "comment" : "\n     * Intent needed to launch the rear display overlay activity from SysUI\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ORIGINAL_DEVICE_BASE_STATE",
    "type" : "String",
    "comment" : "\n     * Intent extra sent to the rear display overlay activity of the current base state\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mGlobal",
    "type" : "DeviceStateManagerGlobal",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public List<DeviceState> getSupportedDeviceStates()",
    "returnType" : "List<DeviceState>",
    "comment" : "\n     * Returns the list of device states that are supported and can be requested with\n     * {@link #requestState(DeviceStateRequest, Executor, DeviceStateRequest.Callback)}.\n     ",
    "links" : [ "#requestState(DeviceStateRequest" ]
  }, {
    "name" : "public void requestState(@NonNull DeviceStateRequest request, @Nullable @CallbackExecutor Executor executor, @Nullable DeviceStateRequest.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Submits a {@link DeviceStateRequest request} to modify the device state.\n     * <p>\n     * By default, the request is kept active until one of the following occurs:\n     * <ul>\n     *     <li>The system deems the request can no longer be honored, for example if the requested\n     *     state becomes unsupported.\n     *     <li>A call to {@link #cancelStateRequest}.\n     *     <li>Another processes submits a request succeeding this request in which case the request\n     *     will be canceled.\n     * </ul>\n     * However, this behavior can be changed by setting flags on the {@link DeviceStateRequest}.\n     *\n     * @throws IllegalArgumentException if the requested state is unsupported.\n     * @throws SecurityException if the caller is neither the current top-focused activity nor if\n     * the {@link android.Manifest.permission#CONTROL_DEVICE_STATE} permission is held.\n     *\n     * @see DeviceStateRequest\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#CONTROL_DEVICE_STATE", "#cancelStateRequest", "android.hardware.devicestate.DeviceStateRequest" ]
  }, {
    "name" : "public void cancelStateRequest()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the active {@link DeviceStateRequest} previously submitted with a call to\n     * {@link #requestState(DeviceStateRequest, Executor, DeviceStateRequest.Callback)}.\n     * <p>\n     * This method is noop if there is no request currently active.\n     *\n     * @throws SecurityException if the caller is neither the current top-focused activity nor if\n     * the {@link android.Manifest.permission#CONTROL_DEVICE_STATE} permission is held.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#CONTROL_DEVICE_STATE", "#requestState(DeviceStateRequest", "android.hardware.devicestate.DeviceStateRequest" ]
  }, {
    "name" : "public void requestBaseStateOverride(@NonNull DeviceStateRequest request, @Nullable @CallbackExecutor Executor executor, @Nullable DeviceStateRequest.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Submits a {@link DeviceStateRequest request} to override the base state of the device. This\n     * should only be used for testing, where you want to simulate the physical change to the\n     * device state.\n     * <p>\n     * By default, the request is kept active until one of the following occurs:\n     * <ul>\n     *     <li>The physical state of the device changes</li>\n     *     <li>The system deems the request can no longer be honored, for example if the requested\n     *     state becomes unsupported.\n     *     <li>A call to {@link #cancelBaseStateOverride}.\n     *     <li>Another processes submits a request succeeding this request in which case the request\n     *     will be canceled.\n     * </ul>\n     *\n     * Submitting a base state override request may not cause any change in the presentation\n     * of the system if there is an emulated request made through {@link #requestState}, as the\n     * emulated override requests take priority.\n     *\n     * @throws IllegalArgumentException if the requested state is unsupported.\n     *\n     * @see DeviceStateRequest\n     * @hide\n     ",
    "links" : [ "#cancelBaseStateOverride", "#requestState", "android.hardware.devicestate.DeviceStateRequest" ]
  }, {
    "name" : "public void cancelBaseStateOverride()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the active {@link DeviceStateRequest} previously submitted with a call to\n     * {@link #requestBaseStateOverride(DeviceStateRequest, Executor, DeviceStateRequest.Callback)}.\n     * <p>\n     * This method is noop if there is no base state request currently active.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.devicestate.DeviceStateRequest", "#requestBaseStateOverride(DeviceStateRequest" ]
  }, {
    "name" : "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull DeviceStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to receive notifications about changes in device state.\n     *\n     * @param executor the executor to process notifications.\n     * @param callback the callback to register.\n     *\n     * @see DeviceStateCallback\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterCallback(@NonNull DeviceStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a callback previously registered with\n     * {@link #registerCallback(Executor, DeviceStateCallback)}.\n     ",
    "links" : [ "#registerCallback(Executor" ]
  } ],
  "methodNames" : [ "public List<DeviceState> getSupportedDeviceStates()", "public void requestState(@NonNull DeviceStateRequest request, @Nullable @CallbackExecutor Executor executor, @Nullable DeviceStateRequest.Callback callback)", "public void cancelStateRequest()", "public void requestBaseStateOverride(@NonNull DeviceStateRequest request, @Nullable @CallbackExecutor Executor executor, @Nullable DeviceStateRequest.Callback callback)", "public void cancelBaseStateOverride()", "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull DeviceStateCallback callback)", "public void unregisterCallback(@NonNull DeviceStateCallback callback)" ],
  "variableNames" : [ "INVALID_DEVICE_STATE_IDENTIFIER", "MINIMUM_DEVICE_STATE_IDENTIFIER", "MAXIMUM_DEVICE_STATE_IDENTIFIER", "ACTION_SHOW_REAR_DISPLAY_OVERLAY", "EXTRA_ORIGINAL_DEVICE_BASE_STATE", "mGlobal" ]
}