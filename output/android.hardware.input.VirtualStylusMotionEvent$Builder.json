{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/input/VirtualStylusMotionEvent.java",
  "packageName" : "android.hardware.input",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link VirtualStylusMotionEvent}.\n     ",
  "links" : [ "android.hardware.input.VirtualStylusMotionEvent" ],
  "variables" : [ {
    "name" : "mToolType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAction",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsXSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsYSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPressure",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTiltX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTiltY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventTimeNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public VirtualStylusMotionEvent build()",
    "returnType" : "VirtualStylusMotionEvent",
    "comment" : "\n         * Creates a {@link VirtualStylusMotionEvent} object with the current builder configuration.\n         *\n         * @throws IllegalArgumentException if one of the required arguments (action, tool type,\n         * x-axis location and y-axis location) is missing.\n         * {@link VirtualStylusMotionEvent} for a detailed explanation.\n         ",
    "links" : [ "android.hardware.input.VirtualStylusMotionEvent" ]
  }, {
    "name" : "public Builder setToolType(@ToolType int toolType)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the tool type of the event.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAction(@Action int action)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the action of the event.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setX(int absX)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the x-axis location of the event.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setY(int absY)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the y-axis location of the event.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPressure(@IntRange(from = PRESSURE_MIN, to = PRESSURE_MAX) int pressure)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the pressure of the event. {@code 0} pressure indicates that the stylus is hovering,\n         * otherwise the stylus is touching the screen. This field is optional and can be omitted\n         * (defaults to {@code 255}).\n         *\n         * @param pressure The pressure of the stylus.\n         *\n         * @throws IllegalArgumentException if the pressure is smaller than 0 or greater than 255.\n         *\n         * @return this builder, to allow for chaining of calls\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTiltX(@IntRange(from = TILT_MIN, to = TILT_MAX) int tiltX)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the x-axis tilt of the event in degrees. {@code 0} tilt indicates that the stylus is\n         * perpendicular to the x-axis. This field is optional and can be omitted (defaults to\n         * {@code 0}). Both x-axis tilt and y-axis tilt are used to derive the tilt and orientation\n         * of the stylus, given by {@link MotionEvent#AXIS_TILT} and\n         * {@link MotionEvent#AXIS_ORIENTATION} respectively.\n         *\n         * @throws IllegalArgumentException if the tilt is smaller than -90 or greater than 90.\n         *\n         * @return this builder, to allow for chaining of calls\n         *\n         * @see VirtualStylusMotionEvent#getTiltX\n         * @see <a href=\"https://source.android.com/docs/core/interaction/input/touch-devices#orientation-and-tilt-fields\">\n         *     Stylus tilt and orientation</a>\n         ",
    "links" : [ "android.view.MotionEvent#AXIS_ORIENTATION", "android.view.MotionEvent#AXIS_TILT" ]
  }, {
    "name" : "public Builder setTiltY(@IntRange(from = TILT_MIN, to = TILT_MAX) int tiltY)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the y-axis tilt of the event in degrees. {@code 0} tilt indicates that the stylus is\n         * perpendicular to the y-axis. This field is optional and can be omitted (defaults to\n         * {@code 0}). Both x-axis tilt and y-axis tilt are used to derive the tilt and orientation\n         * of the stylus, given by {@link MotionEvent#AXIS_TILT} and\n         * {@link MotionEvent#AXIS_ORIENTATION} respectively.\n         *\n         * @throws IllegalArgumentException if the tilt is smaller than -90 or greater than 90.\n         *\n         * @return this builder, to allow for chaining of calls\n         *\n         * @see VirtualStylusMotionEvent#getTiltY\n         * @see <a href=\"https://source.android.com/docs/core/interaction/input/touch-devices#orientation-and-tilt-fields\">\n         *     Stylus tilt and orientation</a>\n         ",
    "links" : [ "android.view.MotionEvent#AXIS_ORIENTATION", "android.view.MotionEvent#AXIS_TILT" ]
  }, {
    "name" : "public Builder setEventTimeNanos(long eventTimeNanos)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the time (in nanoseconds) when this specific event was generated. This may be\n         * obtained from {@link SystemClock#uptimeMillis()} (with nanosecond precision instead of\n         * millisecond), but can be different depending on the use case.\n         * This field is optional and can be omitted.\n         *\n         * @return this builder, to allow for chaining of calls\n         * @see InputEvent#getEventTime()\n         ",
    "links" : [ "android.os.SystemClock#uptimeMillis()" ]
  }, {
    "name" : "private void validateTilt(int tilt)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public VirtualStylusMotionEvent build()", "public Builder setToolType(@ToolType int toolType)", "public Builder setAction(@Action int action)", "public Builder setX(int absX)", "public Builder setY(int absY)", "public Builder setPressure(@IntRange(from = PRESSURE_MIN, to = PRESSURE_MAX) int pressure)", "public Builder setTiltX(@IntRange(from = TILT_MIN, to = TILT_MAX) int tiltX)", "public Builder setTiltY(@IntRange(from = TILT_MIN, to = TILT_MAX) int tiltY)", "public Builder setEventTimeNanos(long eventTimeNanos)", "private void validateTilt(int tilt)" ],
  "variableNames" : [ "mToolType", "mAction", "mX", "mY", "mIsXSet", "mIsYSet", "mPressure", "mTiltX", "mTiltY", "mEventTimeNanos" ]
}