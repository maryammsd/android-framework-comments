{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/httpflags/BaseFeature.java",
  "packageName" : "org.chromium.net.httpflags",
  "className" : "BaseFeature",
  "comment" : " Utility class for bridging the gap between HTTP flags and the native `base::Feature` framework. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FLAG_PREFIX",
    "type" : "String",
    "comment" : " HTTP flags that start with this name will be turned into base::Feature overrides. ",
    "links" : [ ]
  }, {
    "name" : "PARAM_DELIMITER",
    "type" : "String",
    "comment" : "\n     * If this delimiter is found in an HTTP flag name, the HTTP flag is assumed to refer to a\n     * base::Feature param. The part before the delimiter is the base::Feature name, and the part\n     * after the delimiter is the param name.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static BaseFeatureOverrides getOverrides(ResolvedFlags flags)",
    "returnType" : "BaseFeatureOverrides",
    "comment" : "\n     * Turns a set of resolved HTTP flags into native {@code base::Feature} overrides.\n     *\n     * <p>Only HTTP flags whose name start with {@link #FLAG_PREFIX} are considered.\n     *\n     * <p>If the flag name does not include {@link #PARAM_DELIMITER}, then the flag is treated as\n     * a state override for a base::Feature named after the HTTP flag (without the\n     * {@link #FLAG_PREFIX} prefix). In that case the flag value is required to be a boolean. The\n     * state is overridden to the \"enabled\" state if the flag value is true, or to the \"disabled\"\n     * state if the flag value is false.\n     *\n     * <p>If the flag name does include {@link #PARAM_DELIMITER}, then the flag is treated as a\n     * base::Feature param override. In that case the part after {@link #FLAG_PREFIX} but before\n     * {@link #PARAM_DELIMITER} is the name of the base::Feature, and the part after {@link\n     * #PARAM_DELIMITER} is the name of the param. The param value is the flag value, converted to\n     * string in such a way as to allow base::FeatureParam code to unparse it.\n     *\n     * <p>Examples:\n     * <ul>\n     * <li>An HTTP flag named {@code ChromiumBaseFeature_LogMe} with value {@code true} enables the\n     * {@code LogMe} base::Feature.\n     * <li>An HTTP flag named {@code ChromiumBaseFeature_LogMe_PARAM_marker} with value {@code\n     * \"foobar\"} sets the {@code marker} param on the {@code LogMe} base::Feature to {@code\n     * \"foobar\"}.\n     * </ul>\n     *\n     * @throws IllegalArgumentException if the flags are invalid or otherwise can't be parsed\n     *\n     * @see org.chromium.net.impl.CronetLibraryLoader#getBaseFeatureOverrides\n     ",
    "links" : [ "#PARAM_DELIMITER", "#FLAG_PREFIX" ]
  }, {
    "name" : "private static void applyOverride(String flagName, ResolvedFlags.Value flagValue, Map<String, BaseFeatureOverrides.FeatureState.Builder> featureStateBuilders)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParsedFlagName parseFlagName(String flagName)",
    "returnType" : "ParsedFlagName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void applyStateOverride(ResolvedFlags.Value value, BaseFeatureOverrides.FeatureState.Builder featureStateBuilder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void applyParamOverride(String paramName, ResolvedFlags.Value value, BaseFeatureOverrides.FeatureState.Builder featureStateBuilder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static BaseFeatureOverrides getOverrides(ResolvedFlags flags)", "private static void applyOverride(String flagName, ResolvedFlags.Value flagValue, Map<String, BaseFeatureOverrides.FeatureState.Builder> featureStateBuilders)", "private static ParsedFlagName parseFlagName(String flagName)", "private static void applyStateOverride(ResolvedFlags.Value value, BaseFeatureOverrides.FeatureState.Builder featureStateBuilder)", "private static void applyParamOverride(String paramName, ResolvedFlags.Value value, BaseFeatureOverrides.FeatureState.Builder featureStateBuilder)" ],
  "variableNames" : [ "FLAG_PREFIX", "PARAM_DELIMITER" ]
}