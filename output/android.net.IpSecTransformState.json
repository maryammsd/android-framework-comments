{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/IpSecTransformState.java",
  "packageName" : "android.net",
  "className" : "IpSecTransformState",
  "comment" : "\n * This class represents a snapshot of the state of an IpSecTransform\n *\n * <p>This class provides the current state of an IpSecTransform, enabling link metric analysis by\n * the caller. Use cases include understanding transform usage, such as packet and byte counts, as\n * well as observing out-of-order delivery by checking the bitmap. Additionally, callers can query\n * IpSecTransformStates at two timestamps. By comparing the changes in packet counts and sequence\n * numbers, callers can estimate IPsec data loss in the inbound direction.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTxHighestSequenceNumber",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRxHighestSequenceNumber",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPacketCount",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mByteCount",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReplayBitmap",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<IpSecTransformState>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void validate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getTimestampMillis()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the timestamp (milliseconds) when this state was created, as per {@link\n     * SystemClock#elapsedRealtime}\n     *\n     * @see Builder#setTimestampMillis(long)\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime" ]
  }, {
    "name" : "public long getTxHighestSequenceNumber()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the highest sequence number sent so far as an unsigned long\n     *\n     * @see Builder#setTxHighestSequenceNumber(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getRxHighestSequenceNumber()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the highest sequence number received so far as an unsigned long\n     *\n     * @see Builder#setRxHighestSequenceNumber(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getPacketCount()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the number of packets processed so far as an unsigned long.\n     *\n     * <p>The packet count direction (inbound or outbound) aligns with the direction in which the\n     * IpSecTransform is applied to.\n     *\n     * @see Builder#setPacketCount(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getByteCount()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the number of bytes processed so far as an unsigned long\n     *\n     * <p>The byte count direction (inbound or outbound) aligns with the direction in which the\n     * IpSecTransform is applied to.\n     *\n     * @see Builder#setByteCount(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getReplayBitmap()",
    "returnType" : "byte[]",
    "comment" : "\n     * Retrieve the replay bitmap\n     *\n     * <p>This bitmap represents a replay window, allowing the caller to observe out-of-order\n     * delivery. The last bit represents the highest sequence number received so far and bits for\n     * the received packets will be marked as true.\n     *\n     * <p>The size of a replay bitmap will never change over the lifetime of an IpSecTransform\n     *\n     * <p>The replay bitmap is solely useful for inbound IpSecTransforms. For outbound\n     * IpSecTransforms, all bits will be unchecked.\n     *\n     * @see Builder#setReplayBitmap(byte[])\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void validate()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel out, int flags)", "public long getTimestampMillis()", "public long getTxHighestSequenceNumber()", "public long getRxHighestSequenceNumber()", "public long getPacketCount()", "public long getByteCount()", "public byte[] getReplayBitmap()" ],
  "variableNames" : [ "mTimestamp", "mTxHighestSequenceNumber", "mRxHighestSequenceNumber", "mPacketCount", "mByteCount", "mReplayBitmap", "CREATOR" ]
}