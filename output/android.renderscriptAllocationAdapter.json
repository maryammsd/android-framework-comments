{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/AllocationAdapter.java",
  "packageName" : "android.renderscript",
  "className" : "AllocationAdapter",
  "comment" : "\n * Only intended for use by generated reflected code.\n *\n *",
  "variables" : [ {
    "name" : "mWindow",
    "type" : "Type",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void initLOD(int lod)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateOffsets()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setLOD(int lod)",
    "returnType" : "void",
    "comment" : "\n     * Set the active LOD.  The LOD must be within the range for the\n     * type being adapted.  The base allocation must have mipmaps.\n     *\n     * Because this changes the dimensions of the adapter the\n     * current Y and Z will be reset.\n     *\n     * @param lod The LOD to make active.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFace(Type.CubemapFace cf)",
    "returnType" : "void",
    "comment" : "\n     * Set the active Face.  The base allocation must be of a type\n     * that includes faces.\n     *\n     * @param cf The face to make active.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setX(int x)",
    "returnType" : "void",
    "comment" : "\n     *\n     * Set the active X.  The x value must be within the range for\n     * the allocation being adapted.\n     *\n     * @param x The x to make active.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setY(int y)",
    "returnType" : "void",
    "comment" : "\n     * Set the active Y.  The y value must be within the range for\n     * the allocation being adapted.  The base allocation must\n     * contain the Y dimension.\n     *\n     * @param y The y to make active.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setZ(int z)",
    "returnType" : "void",
    "comment" : "\n     * Set the active Z.  The z value must be within the range for\n     * the allocation being adapted.  The base allocation must\n     * contain the Z dimension.\n     *\n     * @param z The z to make active.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setArray(int arrayNum, int arrayVal)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AllocationAdapter create1D(RenderScript rs, Allocation a)",
    "returnType" : "AllocationAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AllocationAdapter create2D(RenderScript rs, Allocation a)",
    "returnType" : "AllocationAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AllocationAdapter createTyped(RenderScript rs, Allocation a, Type t)",
    "returnType" : "AllocationAdapter",
    "comment" : "\n     *\n     *\n     * Create an arbitrary window into the base allocation.\n     * The type describes the shape of the window.\n     *\n     * Any dimensions present in the type must be equal or smaller\n     * to the dimensions in the source allocation.  A dimension\n     * present in the allocation that is not present in the type\n     * will be constrained away with the selectors.\n     *\n     * If a dimension is present in both the type and allocation, one of\n     * two things will happen.\n     *\n     * If the type is smaller than the allocation, a window will be\n     * created, the selected value in the adapter for that dimension\n     * will act as the base address, and the type will describe the\n     * size of the view starting at that point.\n     *\n     * If the type and allocation dimension are of the same size,\n     * then setting the selector for the dimension will be an error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void resize(int dimX)",
    "returnType" : "void",
    "comment" : "\n     * Override the Allocation resize.  Resizing adapters is not\n     * allowed and will throw a RSInvalidStateException.\n     *\n     * @param dimX ignored.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mWindow" ],
  "methodNames" : [ " void initLOD(int lod)", "private void updateOffsets()", "public void setLOD(int lod)", "public void setFace(Type.CubemapFace cf)", "public void setX(int x)", "public void setY(int y)", "public void setZ(int z)", "public void setArray(int arrayNum, int arrayVal)", "public static AllocationAdapter create1D(RenderScript rs, Allocation a)", "public static AllocationAdapter create2D(RenderScript rs, Allocation a)", "public static AllocationAdapter createTyped(RenderScript rs, Allocation a, Type t)", "public synchronized void resize(int dimX)" ]
}