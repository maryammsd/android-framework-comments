{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore2/AndroidKeyStoreKeyAgreementSpi.java",
  "packageName" : "android.security.keystore2",
  "className" : "AndroidKeyStoreKeyAgreementSpi",
  "comment" : "\n * {@link KeyAgreementSpi} which provides an ECDH implementation backed by Android KeyStore.\n *\n * @hide\n ",
  "links" : [ "javax.crypto.KeyAgreementSpi" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeymintAlgorithm",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKey",
    "type" : "AndroidKeyStorePrivateKey",
    "comment" : " Fields below are populated by engineInit and should be preserved after engineDoFinal.",
    "links" : [ ]
  }, {
    "name" : "mOtherPartyKey",
    "type" : "PublicKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperation",
    "type" : "KeyStoreOperation",
    "comment" : " Fields below are reset when engineDoFinal succeeds.",
    "links" : [ ]
  }, {
    "name" : "mOperationHandle",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void engineInit(Key key, SecureRandom random) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void engineInit(Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Key engineDoPhase(Key key, boolean lastPhase) throws InvalidKeyException, IllegalStateException",
    "returnType" : "Key",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected byte[] engineGenerateSecret() throws IllegalStateException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected SecretKey engineGenerateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException",
    "returnType" : "SecretKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int engineGenerateSecret(byte[] sharedSecret, int offset) throws IllegalStateException, ShortBufferException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getOperationHandle()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetWhilePreservingInitState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetAll()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureKeystoreOperationInitialized() throws InvalidKeyException, IllegalStateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void engineInit(Key key, SecureRandom random) throws InvalidKeyException", "protected void engineInit(Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException", "protected Key engineDoPhase(Key key, boolean lastPhase) throws InvalidKeyException, IllegalStateException", "protected byte[] engineGenerateSecret() throws IllegalStateException", "protected SecretKey engineGenerateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException", "protected int engineGenerateSecret(byte[] sharedSecret, int offset) throws IllegalStateException, ShortBufferException", "public long getOperationHandle()", "protected void finalize() throws Throwable", "private void resetWhilePreservingInitState()", "private void resetAll()", "private void ensureKeystoreOperationInitialized() throws InvalidKeyException, IllegalStateException" ],
  "variableNames" : [ "TAG", "mKeymintAlgorithm", "mKey", "mOtherPartyKey", "mOperation", "mOperationHandle" ]
}