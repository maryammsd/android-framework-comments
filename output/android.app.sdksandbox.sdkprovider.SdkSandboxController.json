{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/sdksandbox/sdkprovider/SdkSandboxController.java",
  "packageName" : "android.app.sdksandbox.sdkprovider",
  "className" : "SdkSandboxController",
  "comment" : "\n * Controller that is used by SDK loaded in the sandbox to access information provided by the sdk\n * sandbox.\n *\n * <p>It enables the SDK to communicate with other SDKS in the SDK sandbox and know about the state\n * of the sdks that are currently loaded in it.\n *\n * <p>An instance of {@link SdkSandboxController} can be obtained using {@link\n * Context#getSystemService} and {@link SdkSandboxController class}. The {@link Context} can in turn\n * be obtained using {@link android.app.sdksandbox.SandboxedSdkProvider#getContext()}.\n ",
  "links" : [ "android.app.sdksandbox.SandboxedSdkProvider#getContext()", "android.app.sdksandbox.sdkprovider.SdkSandboxController", "android.app.sdksandbox.SandboxedSdkContext#getSystemService", "android.app.sdksandbox.SandboxedSdkContext" ],
  "variables" : [ {
    "name" : "SDK_SANDBOX_CONTROLLER_SERVICE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CLIENT_SHARED_PREFERENCES_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSdkSandboxLocalSingleton",
    "type" : "SdkSandboxLocalSingleton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSdkSandboxActivityRegistry",
    "type" : "SdkSandboxActivityRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SdkSandboxController initialize(@NonNull Context context)",
    "returnType" : "SdkSandboxController",
    "comment" : "\n     * Initializes {@link SdkSandboxController} with the given {@code context}.\n     *\n     * <p>This method is called by the {@link SandboxedSdkContext} to propagate the correct context.\n     * For more information check the javadoc on the {@link\n     * android.app.sdksandbox.SdkSandboxSystemServiceRegistry}.\n     *\n     * @hide\n     * @see android.app.sdksandbox.SdkSandboxSystemServiceRegistry\n     ",
    "links" : [ "android.app.sdksandbox.sdkprovider.SdkSandboxController", "android.app.sdksandbox.SandboxedSdkContext", "android.app.sdksandbox.SdkSandboxSystemServiceRegistry" ]
  }, {
    "name" : "public List<AppOwnedSdkSandboxInterface> getAppOwnedSdkSandboxInterfaces()",
    "returnType" : "List<AppOwnedSdkSandboxInterface>",
    "comment" : "\n     * Fetches all {@link AppOwnedSdkSandboxInterface} that are registered by the app.\n     *\n     * @return List of {@link AppOwnedSdkSandboxInterface} containing all currently registered\n     *     AppOwnedSdkSandboxInterface.\n     * @throws UnsupportedOperationException if the controller is obtained from an unexpected\n     *     context. Use {@link SandboxedSdkProvider#getContext()} for the right context\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkProvider#getContext()", "android.app.sdksandbox.AppOwnedSdkSandboxInterface" ]
  }, {
    "name" : "public List<SandboxedSdk> getSandboxedSdks()",
    "returnType" : "List<SandboxedSdk>",
    "comment" : "\n     * Fetches information about Sdks that are loaded in the sandbox.\n     *\n     * @return List of {@link SandboxedSdk} containing all currently loaded sdks\n     * @throws UnsupportedOperationException if the controller is obtained from an unexpected\n     *     context. Use {@link SandboxedSdkProvider#getContext()} for the right context\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkProvider#getContext()", "android.app.sdksandbox.SandboxedSdk" ]
  }, {
    "name" : "public void loadSdk(@NonNull String sdkName, @NonNull Bundle params, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<SandboxedSdk, LoadSdkException> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Loads SDK in an SDK sandbox java process.\n     *\n     * <p>Loads SDK library with {@code sdkName} to an SDK sandbox process asynchronously. The\n     * caller will be notified through the {@code receiver}.\n     *\n     * <p>The caller may only load {@code SDKs} the client app depends on into the SDK sandbox.\n     *\n     * @param sdkName name of the SDK to be loaded.\n     * @param params additional parameters to be passed to the SDK in the form of a {@link Bundle}\n     *     as agreed between the client and the SDK.\n     * @param executor the {@link Executor} on which to invoke the receiver.\n     * @param receiver This either receives a {@link SandboxedSdk} on a successful run, or {@link\n     *     LoadSdkException}.\n     * @throws UnsupportedOperationException if the controller is obtained from an unexpected\n     *     context. Use {@link SandboxedSdkProvider#getContext()} for the right context\n     ",
    "links" : [ "android.app.sdksandbox.SdkSandboxManager.getResultCodeForLoadSdkException", "android.app.sdksandbox.SandboxedSdkProvider#getContext()", "android.os.Bundle", "android.app.sdksandbox.SandboxedSdk", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public SharedPreferences getClientSharedPreferences()",
    "returnType" : "SharedPreferences",
    "comment" : "\n     * Returns {@link SharedPreferences} containing data synced from the client app.\n     *\n     * <p>Keys that have been synced by the client app using {@link\n     * SdkSandboxManager#addSyncedSharedPreferencesKeys(Set)} can be found in this {@link\n     * SharedPreferences}.\n     *\n     * <p>The returned {@link SharedPreferences} should only be read. Writing to it is not\n     * supported.\n     *\n     * @return {@link SharedPreferences} containing data synced from client app.\n     * @throws UnsupportedOperationException if the controller is obtained from an unexpected\n     *     context. Use {@link SandboxedSdkProvider#getContext()} for the right context\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkProvider#getContext()", "android.content.SharedPreferences", "android.app.sdksandbox.SdkSandboxManager#addSyncedSharedPreferencesKeys(Set)" ]
  }, {
    "name" : "public IBinder registerSdkSandboxActivityHandler(@NonNull SdkSandboxActivityHandler sdkSandboxActivityHandler)",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns an identifier for a {@link SdkSandboxActivityHandler} after registering it.\n     *\n     * <p>This function registers an implementation of {@link SdkSandboxActivityHandler} created by\n     * an SDK and returns an {@link IBinder} which uniquely identifies the passed {@link\n     * SdkSandboxActivityHandler} object.\n     *\n     * <p>If the same {@link SdkSandboxActivityHandler} registered multiple times without\n     * unregistering, the same {@link IBinder} token will be returned.\n     *\n     * @param sdkSandboxActivityHandler is the {@link SdkSandboxActivityHandler} to register.\n     * @return {@link IBinder} uniquely identify the passed {@link SdkSandboxActivityHandler}.\n     ",
    "links" : [ "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler", "android.os.IBinder" ]
  }, {
    "name" : "public void unregisterSdkSandboxActivityHandler(@NonNull SdkSandboxActivityHandler sdkSandboxActivityHandler)",
    "returnType" : "void",
    "comment" : "\n     * Unregister an already registered {@link SdkSandboxActivityHandler}.\n     *\n     * <p>If the passed {@link SdkSandboxActivityHandler} is registered, it will be unregistered.\n     * Otherwise, it will do nothing.\n     *\n     * <p>After unregistering, SDK can register the same handler object again or create a new one in\n     * case it wants a new {@link Activity}.\n     *\n     * <p>If the {@link IBinder} token of the unregistered handler used to start a {@link Activity},\n     * the {@link Activity} will fail to start.\n     *\n     * @param sdkSandboxActivityHandler is the {@link SdkSandboxActivityHandler} to unregister.\n     ",
    "links" : [ "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler", "android.app.Activity", "android.os.IBinder" ]
  }, {
    "name" : "public String getClientPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the package name of the client app.\n     *\n     * @throws UnsupportedOperationException if the controller is obtained from an unexpected\n     *     context. Use {@link SandboxedSdkProvider#getContext()} for the right context.\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkProvider#getContext()" ]
  }, {
    "name" : "public void registerSdkSandboxClientImportanceListener(@NonNull @CallbackExecutor Executor executor, @NonNull SdkSandboxClientImportanceListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener to be notified of changes in the client's {@link\n     * android.app.ActivityManager.RunningAppProcessInfo#importance}.\n     *\n     * @param listener an implementation of {@link SdkSandboxClientImportanceListener} to register.\n     * @throws UnsupportedOperationException if the controller is obtained from an unexpected\n     *     context. Use {@link SandboxedSdkProvider#getContext()} for the right context.\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkProvider#getContext()", "android.app.sdksandbox.sdkprovider.SdkSandboxClientImportanceListener", "android.app.ActivityManager.RunningAppProcessInfo#importance" ]
  }, {
    "name" : "public void unregisterSdkSandboxClientImportanceListener(@NonNull SdkSandboxClientImportanceListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a listener previously registered using {@link\n     * SdkSandboxController#registerSdkSandboxClientImportanceListener(Executor,\n     * SdkSandboxClientImportanceListener)}\n     *\n     * @param listener an implementation of {@link SdkSandboxClientImportanceListener} to\n     *     unregister.\n     * @throws UnsupportedOperationException if the controller is obtained from an unexpected\n     *     context. Use {@link SandboxedSdkProvider#getContext()} for the right context.\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkProvider#getContext()", "android.app.sdksandbox.sdkprovider.SdkSandboxController#registerSdkSandboxClientImportanceListener(Executor", "android.app.sdksandbox.sdkprovider.SdkSandboxClientImportanceListener" ]
  }, {
    "name" : "private void enforceSandboxedSdkContextInitialization()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void logLatenciesFromSandbox(SandboxLatencyInfo sandboxLatencyInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void logSandboxActivityApiLatency(int method, int callResult, long timeEventStarted)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SdkSandboxController initialize(@NonNull Context context)", "public List<AppOwnedSdkSandboxInterface> getAppOwnedSdkSandboxInterfaces()", "public List<SandboxedSdk> getSandboxedSdks()", "public void loadSdk(@NonNull String sdkName, @NonNull Bundle params, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<SandboxedSdk, LoadSdkException> receiver)", "public SharedPreferences getClientSharedPreferences()", "public IBinder registerSdkSandboxActivityHandler(@NonNull SdkSandboxActivityHandler sdkSandboxActivityHandler)", "public void unregisterSdkSandboxActivityHandler(@NonNull SdkSandboxActivityHandler sdkSandboxActivityHandler)", "public String getClientPackageName()", "public void registerSdkSandboxClientImportanceListener(@NonNull @CallbackExecutor Executor executor, @NonNull SdkSandboxClientImportanceListener listener)", "public void unregisterSdkSandboxClientImportanceListener(@NonNull SdkSandboxClientImportanceListener listener)", "private void enforceSandboxedSdkContextInitialization()", "private void logLatenciesFromSandbox(SandboxLatencyInfo sandboxLatencyInfo)", "private void logSandboxActivityApiLatency(int method, int callResult, long timeEventStarted)" ],
  "variableNames" : [ "SDK_SANDBOX_CONTROLLER_SERVICE", "CLIENT_SHARED_PREFERENCES_NAME", "TAG", "mSdkSandboxLocalSingleton", "mSdkSandboxActivityRegistry", "mContext" ]
}