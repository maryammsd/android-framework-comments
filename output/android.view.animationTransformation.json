{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/animation/Transformation.java",
  "packageName" : "android.view.animation",
  "className" : "Transformation",
  "comment" : "\n * Defines the transformation to be applied at\n * one point in time of an Animation.\n *\n ",
  "variables" : [ {
    "name" : "TYPE_IDENTITY",
    "type" : "int",
    "comment" : "\n     * Indicates a transformation that has no effect (alpha = 1 and identity matrix.)\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ALPHA",
    "type" : "int",
    "comment" : "\n     * Indicates a transformation that applies an alpha only (uses an identity matrix.)\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MATRIX",
    "type" : "int",
    "comment" : "\n     * Indicates a transformation that applies a matrix only (alpha = 1.)\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BOTH",
    "type" : "int",
    "comment" : "\n     * Indicates a transformation that applies an alpha and a matrix.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlpha",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransformationType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasClipRect",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Reset the transformation to a state that leaves the object\n     * being animated in an unmodified state. The transformation type is\n     * {@link #TYPE_BOTH} by default.\n     ",
    "links" : [ "#TYPE_BOTH" ]
  }, {
    "name" : "public int getTransformationType()",
    "returnType" : "int",
    "comment" : "\n     * Indicates the nature of this transformation.\n     *\n     * @return {@link #TYPE_ALPHA}, {@link #TYPE_MATRIX},\n     *         {@link #TYPE_BOTH} or {@link #TYPE_IDENTITY}.\n     ",
    "links" : [ "#TYPE_ALPHA", "#TYPE_MATRIX", "#TYPE_BOTH", "#TYPE_IDENTITY" ]
  }, {
    "name" : "public void setTransformationType(int transformationType)",
    "returnType" : "void",
    "comment" : "\n     * Sets the transformation type.\n     *\n     * @param transformationType One of {@link #TYPE_ALPHA},\n     *        {@link #TYPE_MATRIX}, {@link #TYPE_BOTH} or\n     *        {@link #TYPE_IDENTITY}.\n     ",
    "links" : [ "#TYPE_ALPHA", "#TYPE_MATRIX", "#TYPE_BOTH", "#TYPE_IDENTITY" ]
  }, {
    "name" : "public void set(Transformation t)",
    "returnType" : "void",
    "comment" : "\n     * Clones the specified transformation.\n     *\n     * @param t The transformation to clone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void compose(Transformation t)",
    "returnType" : "void",
    "comment" : "\n     * Apply this Transformation to an existing Transformation, e.g. apply\n     * a scale effect to something that has already been rotated.\n     * @param t\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postCompose(Transformation t)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #compose(Transformation)} but does this.postConcat(t) of\n     * the transformation matrix.\n     * @hide\n     ",
    "links" : [ "#compose" ]
  }, {
    "name" : "public Matrix getMatrix()",
    "returnType" : "Matrix",
    "comment" : "\n     * @return The 3x3 Matrix representing the trnasformation to apply to the\n     * coordinates of the object being animated\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(@FloatRange(from = 0.0, to = 1.0) float alpha)",
    "returnType" : "void",
    "comment" : "\n     * Sets the degree of transparency\n     * @param alpha 1.0 means fully opaqe and 0.0 means fully transparent\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClipRect(Rect r)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current Transform's clip rect\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClipRect(int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current Transform's clip rect\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getClipRect()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns the current Transform's clip rect\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasClipRect()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the current Transform's clip rect is set\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getAlpha()",
    "returnType" : "float",
    "comment" : "\n     * @return The degree of transparency\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toShortString()",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation of the transformation in a compact form.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void toShortString(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void printShortString(PrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * Print short string, to optimize dumping.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TYPE_IDENTITY", "TYPE_ALPHA", "TYPE_MATRIX", "TYPE_BOTH", "mMatrix", "mAlpha", "mTransformationType", "mHasClipRect", "mClipRect" ],
  "methodNames" : [ "public void clear()", "public int getTransformationType()", "public void setTransformationType(int transformationType)", "public void set(Transformation t)", "public void compose(Transformation t)", "public void postCompose(Transformation t)", "public Matrix getMatrix()", "public void setAlpha(@FloatRange(from = 0.0, to = 1.0) float alpha)", "public void setClipRect(Rect r)", "public void setClipRect(int l, int t, int r, int b)", "public Rect getClipRect()", "public boolean hasClipRect()", "public float getAlpha()", "public String toString()", "public String toShortString()", "public void toShortString(StringBuilder sb)", "public void printShortString(PrintWriter pw)" ]
}