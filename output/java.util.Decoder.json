{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Base64.java",
  "packageName" : "java.util",
  "className" : "Decoder",
  "comment" : "\n     * This class implements a decoder for decoding byte data using the\n     * Base64 encoding scheme as specified in RFC 4648 and RFC 2045.\n     *\n     * <p> The Base64 padding character {@code '='} is accepted and\n     * interpreted as the end of the encoded byte data, but is not\n     * required. So if the final unit of the encoded byte data only has\n     * two or three Base64 characters (without the corresponding padding\n     * character(s) padded), they are decoded as if followed by padding\n     * character(s). If there is a padding character present in the\n     * final unit, the correct number of padding character(s) must be\n     * present, otherwise {@code IllegalArgumentException} (\n     * {@code IOException} when reading from a Base64 stream) is thrown\n     * during decoding.\n     *\n     * <p> Instances of {@link Decoder} class are safe for use by\n     * multiple concurrent threads.\n     *\n     * <p> Unless otherwise noted, passing a {@code null} argument to\n     * a method of this class will cause a\n     * {@link java.lang.NullPointerException NullPointerException} to\n     * be thrown.\n     * <p> If the decoded byte output of the needed size can not\n     *     be allocated, the decode methods of this class will\n     *     cause an {@link java.lang.OutOfMemoryError OutOfMemoryError}\n     *     to be thrown.\n     *\n     * @see     Encoder\n     * @since   1.8\n     ",
  "links" : [ "Decoder", "java.lang.NullPointerException", "java.lang.OutOfMemoryError" ],
  "variables" : [ {
    "name" : "isURL",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isMIME",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fromBase64",
    "type" : "int[]",
    "comment" : "\n         * Lookup table for decoding unicode characters drawn from the\n         * \"Base64 Alphabet\" (as specified in Table 1 of RFC 2045) into\n         * their 6-bit positive integer equivalents.  Characters that\n         * are not in the Base64 alphabet but fall within the bounds of\n         * the array are encoded to -1.\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "fromBase64URL",
    "type" : "int[]",
    "comment" : "\n         * Lookup table for decoding \"URL and Filename safe Base64 Alphabet\"\n         * as specified in Table2 of the RFC 4648.\n         ",
    "links" : [ ]
  }, {
    "name" : "RFC4648",
    "type" : "Decoder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RFC4648_URLSAFE",
    "type" : "Decoder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RFC2045",
    "type" : "Decoder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public byte[] decode(byte[] src)",
    "returnType" : "byte[]",
    "comment" : "\n         * Decodes all bytes from the input byte array using the {@link Base64}\n         * encoding scheme, writing the results into a newly-allocated output\n         * byte array. The returned byte array is of the length of the resulting\n         * bytes.\n         *\n         * @param   src\n         *          the byte array to decode\n         *\n         * @return  A newly-allocated byte array containing the decoded bytes.\n         *\n         * @throws  IllegalArgumentException\n         *          if {@code src} is not in valid Base64 scheme\n         ",
    "links" : [ "java.util.Base64" ]
  }, {
    "name" : "public byte[] decode(String src)",
    "returnType" : "byte[]",
    "comment" : "\n         * Decodes a Base64 encoded String into a newly-allocated byte array\n         * using the {@link Base64} encoding scheme.\n         *\n         * <p> An invocation of this method has exactly the same effect as invoking\n         * {@code decode(src.getBytes(StandardCharsets.ISO_8859_1))}\n         *\n         * @param   src\n         *          the string to decode\n         *\n         * @return  A newly-allocated byte array containing the decoded bytes.\n         *\n         * @throws  IllegalArgumentException\n         *          if {@code src} is not in valid Base64 scheme\n         ",
    "links" : [ "java.util.Base64" ]
  }, {
    "name" : "public int decode(byte[] src, byte[] dst)",
    "returnType" : "int",
    "comment" : "\n         * Decodes all bytes from the input byte array using the {@link Base64}\n         * encoding scheme, writing the results into the given output byte array,\n         * starting at offset 0.\n         *\n         * <p> It is the responsibility of the invoker of this method to make\n         * sure the output byte array {@code dst} has enough space for decoding\n         * all bytes from the input byte array. No bytes will be written to\n         * the output byte array if the output byte array is not big enough.\n         *\n         * <p> If the input byte array is not in valid Base64 encoding scheme\n         * then some bytes may have been written to the output byte array before\n         * IllegalargumentException is thrown.\n         *\n         * @param   src\n         *          the byte array to decode\n         * @param   dst\n         *          the output byte array\n         *\n         * @return  The number of bytes written to the output byte array\n         *\n         * @throws  IllegalArgumentException\n         *          if {@code src} is not in valid Base64 scheme, or {@code dst}\n         *          does not have enough space for decoding all input bytes.\n         ",
    "links" : [ "java.util.Base64" ]
  }, {
    "name" : "public ByteBuffer decode(ByteBuffer buffer)",
    "returnType" : "ByteBuffer",
    "comment" : "\n         * Decodes all bytes from the input byte buffer using the {@link Base64}\n         * encoding scheme, writing the results into a newly-allocated ByteBuffer.\n         *\n         * <p> Upon return, the source buffer's position will be updated to\n         * its limit; its limit will not have been changed. The returned\n         * output buffer's position will be zero and its limit will be the\n         * number of resulting decoded bytes\n         *\n         * <p> {@code IllegalArgumentException} is thrown if the input buffer\n         * is not in valid Base64 encoding scheme. The position of the input\n         * buffer will not be advanced in this case.\n         *\n         * @param   buffer\n         *          the ByteBuffer to decode\n         *\n         * @return  A newly-allocated byte buffer containing the decoded bytes\n         *\n         * @throws  IllegalArgumentException\n         *          if {@code buffer} is not in valid Base64 scheme\n         ",
    "links" : [ "java.util.Base64" ]
  }, {
    "name" : "public InputStream wrap(InputStream is)",
    "returnType" : "InputStream",
    "comment" : "\n         * Returns an input stream for decoding {@link Base64} encoded byte stream.\n         *\n         * <p> The {@code read}  methods of the returned {@code InputStream} will\n         * throw {@code IOException} when reading bytes that cannot be decoded.\n         *\n         * <p> Closing the returned input stream will close the underlying\n         * input stream.\n         *\n         * @param   is\n         *          the input stream\n         *\n         * @return  the input stream for decoding the specified Base64 encoded\n         *          byte stream\n         ",
    "links" : [ "java.util.Base64" ]
  }, {
    "name" : "private int decodedOutLength(byte[] src, int sp, int sl)",
    "returnType" : "int",
    "comment" : "\n         * Calculates the length of the decoded output bytes.\n         *\n         * @param src the byte array to decode\n         * @param sp the source  position\n         * @param sl the source limit\n         *\n         * @return length of the decoded bytes\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "private int decodeBlock(byte[] src, int sp, int sl, byte[] dst, int dp, boolean isURL, boolean isMIME)",
    "returnType" : "int",
    "comment" : "\n         * Decodes base64 characters, and returns the number of data bytes\n         * written into the destination array.\n         *\n         * It is the fast path for full 4-byte to 3-byte decoding w/o errors.\n         *\n         * decodeBlock() can be overridden by an arch-specific intrinsic.\n         * decodeBlock can choose to decode all, none, or a variable-sized\n         * prefix of the src bytes.  This allows the intrinsic to decode in\n         * chunks of the src that are of a favorable size for the specific\n         * processor it's running on.\n         *\n         * If any illegal base64 bytes are encountered in src by the\n         * intrinsic, the intrinsic must return the actual number of valid\n         * data bytes already written to dst.  Note that the '=' pad\n         * character is treated as an illegal Base64 character by\n         * decodeBlock, so it will not process a block of 4 bytes\n         * containing pad characters.  However, MIME decoding ignores\n         * illegal characters, so any intrinsic overriding decodeBlock\n         * can choose how to handle illegal characters based on the isMIME\n         * parameter.\n         *\n         * Given the parameters, no length check is possible on dst, so dst\n         * is assumed to be large enough to store the decoded bytes.\n         *\n         * @param  src\n         *         the source byte array of Base64 encoded bytes\n         * @param  sp\n         *         the offset into src array to begin reading\n         * @param  sl\n         *         the offset (exclusive) past the last byte to be converted.\n         * @param  dst\n         *         the destination byte array of decoded data bytes\n         * @param  dp\n         *         the offset into dst array to begin writing\n         * @param  isURL\n         *         boolean, when true decode RFC4648 URL-safe base64 characters\n         * @param  isMIME\n         *         boolean, when true decode according to RFC2045 (ignore illegal chars)\n         * @return the number of destination data bytes produced\n         ",
    "links" : [ ]
  }, {
    "name" : "private int decode0(byte[] src, int sp, int sl, byte[] dst)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public byte[] decode(byte[] src)", "public byte[] decode(String src)", "public int decode(byte[] src, byte[] dst)", "public ByteBuffer decode(ByteBuffer buffer)", "public InputStream wrap(InputStream is)", "private int decodedOutLength(byte[] src, int sp, int sl)", "private int decodeBlock(byte[] src, int sp, int sl, byte[] dst, int dp, boolean isURL, boolean isMIME)", "private int decode0(byte[] src, int sp, int sl, byte[] dst)" ],
  "variableNames" : [ "isURL", "isMIME", "fromBase64", "fromBase64URL", "RFC4648", "RFC4648_URLSAFE", "RFC2045" ]
}