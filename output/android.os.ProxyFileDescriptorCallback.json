{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/ProxyFileDescriptorCallback.java",
  "packageName" : "android.os",
  "className" : "ProxyFileDescriptorCallback",
  "comment" : "\n * Callback that handles file system requests from ProxyFileDescriptor.\n *\n * All callback methods except for onRelease should throw {@link android.system.ErrnoException}\n * with proper errno on errors. See\n * <a href=\"http://man7.org/linux/man-pages/man3/errno.3.html\">errno(3)</a> and\n * {@link android.system.OsConstants}.\n *\n * Typical errnos are\n *\n * <ul>\n * <li>{@link android.system.OsConstants#EIO} for general I/O issues\n * <li>{@link android.system.OsConstants#ENOENT} when the file is not found\n * <li>{@link android.system.OsConstants#EBADF} if the file doesn't allow read/write operations\n *     based on how it was opened.  (For example, trying to write a file that was opened read-only.)\n * <li>{@link android.system.OsConstants#ENOSPC} if you cannot handle a write operation to\n *     space/quota limitations.\n * </ul>\n * @see android.os.storage.StorageManager#openProxyFileDescriptor(int, ProxyFileDescriptorCallback,\n *     Handler)\n ",
  "links" : [ "android.system.OsConstants", "android.system.OsConstants#EIO", "android.system.OsConstants#ENOENT", "android.system.OsConstants#EBADF", "android.system.ErrnoException", "android.system.OsConstants#ENOSPC" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public long onGetSize() throws ErrnoException",
    "returnType" : "long",
    "comment" : "\n     * Returns size of bytes provided by the file descriptor.\n     * @return Size of bytes.\n     * @throws ErrnoException ErrnoException containing E constants in OsConstants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int onRead(long offset, int size, byte[] data) throws ErrnoException",
    "returnType" : "int",
    "comment" : "\n     * Provides bytes read from file descriptor.\n     * It needs to return exact requested size of bytes unless it reaches file end.\n     * @param offset Offset in bytes from the file head specifying where to read bytes. If a seek\n     *     operation is conducted on the file descriptor, then a read operation is requested, the\n     *     offset refrects the proper position of requested bytes.\n     * @param size Size for read bytes.\n     * @param data Byte array to store read bytes.\n     * @return Size of bytes returned by the function.\n     * @throws ErrnoException ErrnoException containing E constants in OsConstants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int onWrite(long offset, int size, byte[] data) throws ErrnoException",
    "returnType" : "int",
    "comment" : "\n     * Handles bytes written to file descriptor.\n     * @param offset Offset in bytes from the file head specifying where to write bytes. If a seek\n     *     operation is conducted on the file descriptor, then a write operation is requested, the\n     *     offset refrects the proper position of requested bytes.\n     * @param size Size for write bytes.\n     * @param data Byte array to be written to somewhere.\n     * @return Size of bytes processed by the function.\n     * @throws ErrnoException ErrnoException containing E constants in OsConstants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFsync() throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * Ensures all the written data are stored in permanent storage device.\n     * For example, if it has data stored in on memory cache, it needs to flush data to storage\n     * device.\n     * @throws ErrnoException ErrnoException containing E constants in OsConstants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onRelease()",
    "returnType" : "void",
    "comment" : "\n     * Invoked after the file is closed.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long onGetSize() throws ErrnoException", "public int onRead(long offset, int size, byte[] data) throws ErrnoException", "public int onWrite(long offset, int size, byte[] data) throws ErrnoException", "public void onFsync() throws ErrnoException", "public abstract void onRelease()" ],
  "variableNames" : [ ]
}