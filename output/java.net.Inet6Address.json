{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/Inet6Address.java",
  "packageName" : "java.net",
  "className" : "Inet6Address",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "INADDRSZ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANY",
    "type" : "InetAddress",
    "comment" : "\n     * Reserved address for {@code INADDR_ANY}, to specify any IPv6 address at all.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LOOPBACK",
    "type" : "InetAddress",
    "comment" : "\n     * Loopback address to the local host.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "holder6",
    "type" : "Inet6AddressHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIELDS_OFFSET",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSAFE",
    "type" : "sun.misc.Unsafe",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INT16SZ",
    "type" : "int",
    "comment" : " Utilities",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Inet6Address getByAddress(String host, byte[] addr, NetworkInterface nif) throws UnknownHostException",
    "returnType" : "Inet6Address",
    "comment" : "\n     * Create an Inet6Address in the exact manner of {@link\n     * InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is\n     * set to the value corresponding to the given interface for the address\n     * type specified in {@code addr}. The call will fail with an\n     * UnknownHostException if the given interface does not have a numeric\n     * scope_id assigned for the given address type (eg. link-local or site-local).\n     * See <a href=\"Inet6Address.html#scoped\">here</a> for a description of IPv6\n     * scoped addresses.\n     *\n     * @param host the specified host\n     * @param addr the raw IP address in network byte order\n     * @param nif an interface this address must be associated with.\n     * @return  an Inet6Address object created from the raw IP address.\n     * @throws  UnknownHostException\n     *          if IP address is of illegal length, or if the interface does not\n     *          have a numeric scope_id assigned for the given address type.\n     *\n     * @since 1.5\n     ",
    "links" : [ "java.net.InetAddress#getByAddress(String" ]
  }, {
    "name" : "public static Inet6Address getByAddress(String host, byte[] addr, int scope_id) throws UnknownHostException",
    "returnType" : "Inet6Address",
    "comment" : "\n     * Create an Inet6Address in the exact manner of {@link\n     * InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is\n     * set to the given numeric value. The scope_id is not checked to determine\n     * if it corresponds to any interface on the system.\n     * See <a href=\"Inet6Address.html#scoped\">here</a> for a description of IPv6\n     * scoped addresses.\n     *\n     * @param host the specified host\n     * @param addr the raw IP address in network byte order\n     * @param scope_id the numeric scope_id for the address.\n     * @return  an Inet6Address object created from the raw IP address.\n     * @throws  UnknownHostException  if IP address is of illegal length.\n     *\n     * @since 1.5\n     ",
    "links" : [ "java.net.InetAddress#getByAddress(String" ]
  }, {
    "name" : "private void initstr(String hostName, byte[] addr, String ifname) throws UnknownHostException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initif(String hostName, byte[] addr, NetworkInterface nif) throws UnknownHostException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDifferentLocalAddressType(byte[] thisAddr, byte[] otherAddr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int deriveNumericScope(byte[] thisAddr, NetworkInterface ifc) throws UnknownHostException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int deriveNumericScope(String ifname) throws UnknownHostException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * restore the state of this object from stream\n     * including the scope information, only if the\n     * scoped interface name is valid on this system\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void writeObject(ObjectOutputStream s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * default behavior is overridden in order to write the\n     * scope_ifname field as a String, rather than a NetworkInterface\n     * which is not serializable\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMulticastAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is an IP multicast\n     * address. 11111111 at the start of the address identifies the\n     * address as being a multicast address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is an IP\n     *         multicast address\n     *\n     * @since JDK1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAnyLocalAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress in a wildcard address.\n     *\n     * @return a {@code boolean} indicating if the Inetaddress is\n     *         a wildcard address.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLoopbackAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is a loopback address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is a loopback\n     *         address; or false otherwise.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLinkLocalAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is an link local address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is a link local\n     *         address; or false if address is not a link local unicast address.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isLinkLocalAddress(byte[] ipaddress)",
    "returnType" : "boolean",
    "comment" : " static version of above ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSiteLocalAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is a site local address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is a site local\n     *         address; or false if address is not a site local unicast address.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isSiteLocalAddress(byte[] ipaddress)",
    "returnType" : "boolean",
    "comment" : " static version of above ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCGlobal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has global scope.\n     *\n     * @return a {@code boolean} indicating if the address has is a multicast\n     *         address of global scope, false if it is not of global scope or\n     *         it is not a multicast address\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCNodeLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has node scope.\n     *\n     * @return a {@code boolean} indicating if the address has is a multicast\n     *         address of node-local scope, false if it is not of node-local\n     *         scope or it is not a multicast address\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCLinkLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has link scope.\n     *\n     * @return a {@code boolean} indicating if the address has is a multicast\n     *         address of link-local scope, false if it is not of link-local\n     *         scope or it is not a multicast address\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCSiteLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has site scope.\n     *\n     * @return a {@code boolean} indicating if the address has is a multicast\n     *         address of site-local scope, false if it is not  of site-local\n     *         scope or it is not a multicast address\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCOrgLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has organization scope.\n     *\n     * @return a {@code boolean} indicating if the address has is a multicast\n     *         address of organization-local scope, false if it is not of\n     *         organization-local scope or it is not a multicast address\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getAddress()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the raw IP address of this {@code InetAddress} object. The result\n     * is in network byte order: the highest order byte of the address is in\n     * {@code getAddress()[0]}.\n     *\n     * @return  the raw IP address of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScopeId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the numeric scopeId, if this instance is associated with\n     * an interface. If no scoped_id is set, the returned value is zero.\n     *\n     * @return the scopeId, or zero if not set.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkInterface getScopedInterface()",
    "returnType" : "NetworkInterface",
    "comment" : "\n     * Returns the scoped interface, if this instance was created with\n     * with a scoped interface.\n     *\n     * @return the scoped interface, or null if not set.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getHostAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the IP address string in textual presentation. If the instance\n     * was created specifying a scope identifier then the scope id is appended\n     * to the IP address preceded by a \"%\" (per-cent) character. This can be\n     * either a numeric value or a string, depending on which was used to create\n     * the instance.\n     *\n     * @return  the raw IP address in a string format.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this IP address.\n     *\n     * @return  a hash code value for this IP address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object against the specified object. The result is {@code\n     * true} if and only if the argument is not {@code null} and it represents\n     * the same IP address as this object.\n     *\n     * <p> Two instances of {@code InetAddress} represent the same IP address\n     * if the length of the byte arrays returned by {@code getAddress} is the\n     * same for both, and each of the array components is the same for the byte\n     * arrays.\n     *\n     * @param   obj   the object to compare against.\n     *\n     * @return  {@code true} if the objects are the same; {@code false} otherwise.\n     *\n     * @see     java.net.InetAddress#getAddress()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIPv4CompatibleAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is an\n     * IPv4 compatible IPv6 address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is an IPv4\n     *         compatible IPv6 address; or false if address is IPv4 address.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " static String numericToTextFormat(byte[] src)",
    "returnType" : "String",
    "comment" : "\n     * Convert IPv6 binary address into presentation (printable) format.\n     *\n     * @param src a byte array representing the IPv6 numeric address\n     * @return a String representing an IPv6 address in\n     *         textual representation format\n     * @since 1.4\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Inet6Address getByAddress(String host, byte[] addr, NetworkInterface nif) throws UnknownHostException", "public static Inet6Address getByAddress(String host, byte[] addr, int scope_id) throws UnknownHostException", "private void initstr(String hostName, byte[] addr, String ifname) throws UnknownHostException", "private void initif(String hostName, byte[] addr, NetworkInterface nif) throws UnknownHostException", "private static boolean isDifferentLocalAddressType(byte[] thisAddr, byte[] otherAddr)", "private static int deriveNumericScope(byte[] thisAddr, NetworkInterface ifc) throws UnknownHostException", "private int deriveNumericScope(String ifname) throws UnknownHostException", "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException", "private synchronized void writeObject(ObjectOutputStream s) throws IOException", "public boolean isMulticastAddress()", "public boolean isAnyLocalAddress()", "public boolean isLoopbackAddress()", "public boolean isLinkLocalAddress()", " static boolean isLinkLocalAddress(byte[] ipaddress)", "public boolean isSiteLocalAddress()", " static boolean isSiteLocalAddress(byte[] ipaddress)", "public boolean isMCGlobal()", "public boolean isMCNodeLocal()", "public boolean isMCLinkLocal()", "public boolean isMCSiteLocal()", "public boolean isMCOrgLocal()", "public byte[] getAddress()", "public int getScopeId()", "public NetworkInterface getScopedInterface()", "public String getHostAddress()", "public int hashCode()", "public boolean equals(Object obj)", "public boolean isIPv4CompatibleAddress()", " static String numericToTextFormat(byte[] src)" ],
  "variableNames" : [ "INADDRSZ", "ANY", "LOOPBACK", "holder6", "serialVersionUID", "serialPersistentFields", "FIELDS_OFFSET", "UNSAFE", "INT16SZ" ]
}