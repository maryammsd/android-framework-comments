{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/accessibility/AccessibilityNodeProvider.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityNodeProvider",
  "comment" : "\n * This class is the contract a client should implement to enable support of a\n * virtual view hierarchy rooted at a given view for accessibility purposes. A virtual\n * view hierarchy is a tree of imaginary Views that is reported as a part of the view\n * hierarchy when an {@link AccessibilityService} explores the window content.\n * Since the virtual View tree does not exist this class is responsible for\n * managing the {@link AccessibilityNodeInfo}s describing that tree to accessibility\n * services.\n * </p>\n * <p>\n * The main use case of these APIs is to enable a custom view that draws complex content,\n * for example a monthly calendar grid, to be presented as a tree of logical nodes,\n * for example month days each containing events, thus conveying its logical structure.\n * <p>\n * <p>\n * A typical use case is to override {@link View#getAccessibilityNodeProvider()} of the\n * View that is a root of a virtual View hierarchy to return an instance of this class.\n * In such a case this instance is responsible for managing {@link AccessibilityNodeInfo}s\n * describing the virtual sub-tree rooted at the View including the one representing the\n * View itself. Similarly the returned instance is responsible for performing accessibility\n * actions on any virtual view or the root view itself. For example:\n * </p>\n * <aside class=\"note\">\n * <b>Note:</b> Consider using a {@link androidx.customview.widget.ExploreByTouchHelper}, a utility\n * extension of AccessibilityNodeProvider, to simplify many aspects of providing information to\n * accessibility services and managing accessibility focus. </aside>\n * <div>\n * <div class=\"ds-selector-tabs\"><section><h3 id=\"kotlin\">Kotlin</h3>\n * <pre class=\"prettyprint lang-kotlin\">\n * // \"view\" is the View instance on which this class performs accessibility functions.\n * class MyCalendarViewAccessibilityDelegate(\n *       private var view: MyCalendarView) : AccessibilityDelegate() {\n *     override fun getAccessibilityNodeProvider(host: View): AccessibilityNodeProvider {\n *         return object : AccessibilityNodeProvider() {\n *             override fun createAccessibilityNodeInfo(virtualViewId: Int):\n *                     AccessibilityNodeInfo? {\n *                 when (virtualViewId) {\n *                     <var>host-view-id</var> -&gt; {\n *                         val node = AccessibilityNodeInfo.obtain(view)\n *                         node.addChild(view, <var>child-view-id</var>)\n *                         // Set other attributes like screenReaderFocusable\n *                         // and contentDescription.\n *                         return node\n *                     }\n *                     <var>child-view-id</var> -&gt; {\n *                         val node = AccessibilityNodeInfo\n *                                 .obtain(view, virtualViewId)\n *                         node.setParent(view)\n *                         node.addAction(ACTION_SCROLL_UP)\n *                         node.addAction(ACTION_SCROLL_DOWN)\n *                         // Set other attributes like focusable and visibleToUser.\n *                         node.setBoundsInScreen(\n *                                 Rect(<var>coords-of-edges-relative-to-screen</var>))\n *                         return node\n *                     }\n *                     else -&gt; return null\n *                 }\n *             }\n *\n *             override fun performAction(\n *                 virtualViewId: Int,\n *                 action: Int,\n *                 arguments: Bundle\n *             ): Boolean {\n *                 if (virtualViewId == <var>host-view-id</var>) {\n *                     return view.performAccessibilityAction(action, arguments)\n *                 }\n *                 when (action) {\n *                     ACTION_SCROLL_UP.id -&gt; {\n *                         // Implement logic in a separate method.\n *                         navigateToPreviousMonth()\n *\n *                         return true\n *                     }\n *                     ACTION_SCROLL_DOWN.id -&gt;\n *                         // Implement logic in a separate method.\n *                         navigateToNextMonth()\n *\n *                         return true\n *                     else -&gt; return false\n *                 }\n *             }\n *         }\n *     }\n * }\n * </pre>\n * </section><section><h3 id=\"java\">Java</h3>\n * <pre class=\"prettyprint lang-java\">\n * final class MyCalendarViewAccessibilityDelegate extends AccessibilityDelegate {\n *     // The View instance on which this class performs accessibility functions.\n *     private final MyCalendarView view;\n *\n *     MyCalendarViewAccessibilityDelegate(MyCalendarView view) {\n *         this.view = view;\n *     }\n *\n *     &#64;Override\n *     public AccessibilityNodeProvider getAccessibilityNodeProvider(View host) {\n *         return new AccessibilityNodeProvider() {\n *             &#64;Override\n *             &#64;Nullable\n *             public AccessibilityNodeInfo createAccessibilityNodeInfo(int virtualViewId) {\n *                 if (virtualViewId == <var>host-view-id</var>) {\n *                     AccessibilityNodeInfo node = AccessibilityNodeInfo.obtain(view);\n *                     node.addChild(view, <var>child-view-id</var>);\n *                     // Set other attributes like screenReaderFocusable and contentDescription.\n *                     return node;\n *                 } else if (virtualViewId == <var>child-view-id</var>) {\n *                     AccessibilityNodeInfo node =\n *                         AccessibilityNodeInfo.obtain(view, virtualViewId);\n *                     node.setParent(view);\n *                     node.addAction(ACTION_SCROLL_UP);\n *                     node.addAction(ACTION_SCROLL_DOWN);\n *                     // Set other attributes like focusable and visibleToUser.\n *                     node.setBoundsInScreen(\n *                         new Rect(<var>coordinates-of-edges-relative-to-screen</var>));\n *                     return node;\n *                 } else {\n *                     return null;\n *                 }\n *             }\n *\n *             &#64;Override\n *             public boolean performAction(int virtualViewId, int action, Bundle arguments) {\n *                 if (virtualViewId == <var>host-view-id</var>) {\n *                     return view.performAccessibilityAction(action, arguments);\n *                 }\n *\n *                 if (action == ACTION_SCROLL_UP.getId()) {\n *                     // Implement logic in a separate method.\n *                     navigateToPreviousMonth();\n *\n *                     return true;\n *                 } else if (action == ACTION_SCROLL_DOWN.getId()) {\n *                     // Implement logic in a separate method.\n *                     navigateToNextMonth();\n *\n *                     return true;\n *                 } else {\n *                     return false;\n *                 }\n *             }\n *         };\n *     }\n * }\n * </pre></section></div></div>\n ",
  "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.accessibility.AccessibilityNodeInfo", "androidx.customview.widget.ExploreByTouchHelper", "android.view.View#getAccessibilityNodeProvider()" ],
  "variables" : [ {
    "name" : "HOST_VIEW_ID",
    "type" : "int",
    "comment" : "\n     * The virtual id for the hosting View.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public AccessibilityNodeInfo createAccessibilityNodeInfo(int virtualViewId)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Returns an {@link AccessibilityNodeInfo} representing a virtual view,\n     * such as a descendant of the host View, with the given <code>virtualViewId</code>\n     * or the host View itself if <code>virtualViewId</code> equals to {@link #HOST_VIEW_ID}.\n     * <p>\n     * A virtual descendant is an imaginary View that is reported as a part of the view\n     * hierarchy for accessibility purposes. This enables custom views that draw complex\n     * content to report them selves as a tree of virtual views, thus conveying their\n     * logical structure.\n     * </p>\n     * <p>\n     * The implementer is responsible for obtaining an accessibility node info from the\n     * pool of reusable instances and setting the desired properties of the node info\n     * before returning it.\n     * </p>\n     *\n     * @param virtualViewId A client defined virtual view id.\n     * @return A populated {@link AccessibilityNodeInfo} for a virtual descendant or the\n     *     host View.\n     *\n     * @see View#createAccessibilityNodeInfo()\n     * @see AccessibilityNodeInfo\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "#HOST_VIEW_ID" ]
  }, {
    "name" : "public void addExtraDataToAccessibilityNodeInfo(int virtualViewId, AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)",
    "returnType" : "void",
    "comment" : "\n     * Adds extra data to an {@link AccessibilityNodeInfo} based on an explicit request for the\n     * additional data.\n     * <p>\n     * This method only needs to be implemented if a virtual view offers to provide additional\n     * data.\n     * </p>\n     *\n     * @param virtualViewId The virtual view id used to create the node\n     * @param info The info to which to add the extra data\n     * @param extraDataKey A key specifying the type of extra data to add to the info. The\n     *                     extra data should be added to the {@link Bundle} returned by\n     *                     the info's {@link AccessibilityNodeInfo#getExtras} method.\n     * @param arguments A {@link Bundle} holding any arguments relevant for this request.\n     *\n     * @see AccessibilityNodeInfo#setAvailableExtraData(List)\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.os.Bundle", "android.view.accessibility.AccessibilityNodeInfo#getExtras" ]
  }, {
    "name" : "public boolean performAction(int virtualViewId, int action, @Nullable Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs an accessibility action on a virtual view, such as a descendant of the\n     * host View, with the given <code>virtualViewId</code> or the host View itself\n     * if <code>virtualViewId</code> equals to {@link #HOST_VIEW_ID}.\n     *\n     * @param virtualViewId A client defined virtual view id.\n     * @param action The action to perform.\n     * @param arguments Optional action arguments.\n     * @return True if the action was performed.\n     *\n     * @see View#performAccessibilityAction(int, Bundle)\n     * @see #createAccessibilityNodeInfo(int)\n     * @see AccessibilityNodeInfo\n     ",
    "links" : [ "#HOST_VIEW_ID" ]
  }, {
    "name" : "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(String text, int virtualViewId)",
    "returnType" : "List<AccessibilityNodeInfo>",
    "comment" : "\n     * Finds {@link AccessibilityNodeInfo}s by text. The match is case insensitive\n     * containment. The search is relative to the virtual view, i.e. a descendant of the\n     * host View, with the given <code>virtualViewId</code> or the host View itself\n     * <code>virtualViewId</code> equals to {@link #HOST_VIEW_ID}.\n     *\n     * @param virtualViewId A client defined virtual view id which defined\n     *     the root of the tree in which to perform the search.\n     * @param text The searched text.\n     * @return A list of node info.\n     *\n     * @see #createAccessibilityNodeInfo(int)\n     * @see AccessibilityNodeInfo\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "#HOST_VIEW_ID" ]
  }, {
    "name" : "public AccessibilityNodeInfo findFocus(int focus)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Find the virtual view, such as a descendant of the host View, that has the\n     * specified focus type.\n     *\n     * @param focus The focus to find. One of\n     *            {@link AccessibilityNodeInfo#FOCUS_INPUT} or\n     *            {@link AccessibilityNodeInfo#FOCUS_ACCESSIBILITY}.\n     * @return The node info of the focused view or null.\n     * @see AccessibilityNodeInfo#FOCUS_INPUT\n     * @see AccessibilityNodeInfo#FOCUS_ACCESSIBILITY\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#FOCUS_INPUT", "android.view.accessibility.AccessibilityNodeInfo#FOCUS_ACCESSIBILITY" ]
  } ],
  "methodNames" : [ "public AccessibilityNodeInfo createAccessibilityNodeInfo(int virtualViewId)", "public void addExtraDataToAccessibilityNodeInfo(int virtualViewId, AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)", "public boolean performAction(int virtualViewId, int action, @Nullable Bundle arguments)", "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(String text, int virtualViewId)", "public AccessibilityNodeInfo findFocus(int focus)" ],
  "variableNames" : [ "HOST_VIEW_ID" ]
}