{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/method/QwertyKeyListener.java",
  "packageName" : "android.text.method",
  "className" : "QwertyKeyListener",
  "comment" : "\n * This is the standard key listener for alphabetic input on qwerty\n * keyboards.  You should generally not need to instantiate this yourself;\n * TextKeyListener will do it for you.\n * <p></p>\n * As for all implementations of {@link KeyListener}, this class is only concerned\n * with hardware keyboards.  Software input methods have no obligation to trigger\n * the methods in this class.\n ",
  "links" : [ "android.text.method.KeyListener" ],
  "variables" : [ {
    "name" : "sInstance",
    "type" : "QwertyKeyListener[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFullKeyboardInstance",
    "type" : "QwertyKeyListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoCap",
    "type" : "Capitalize",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoText",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFullKeyboard",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PICKER_SETS",
    "type" : "SparseArray<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static QwertyKeyListener getInstance(boolean autoText, Capitalize cap)",
    "returnType" : "QwertyKeyListener",
    "comment" : "\n     * Returns a new or existing instance with the specified capitalization\n     * and correction properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static QwertyKeyListener getInstanceForFullKeyboard()",
    "returnType" : "QwertyKeyListener",
    "comment" : "\n     * Gets an instance of the listener suitable for use with full keyboards.\n     * Disables auto-capitalization, auto-text and long-press initiated on-screen\n     * character pickers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInputType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(View view, Editable content, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getReplacement(CharSequence src, int start, int end, View view)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void markAsReplaced(Spannable content, int start, int end, String original)",
    "returnType" : "void",
    "comment" : "\n     * Marks the specified region of <code>content</code> as having\n     * contained <code>original</code> prior to AutoText replacement.\n     * Call this method when you have done or are about to do an\n     * AutoText-style replacement on a region of text and want to let\n     * the same mechanism (the user pressing DEL immediately after the\n     * change) undo the replacement.\n     *\n     * @param content the Editable text where the replacement was made\n     * @param start the start of the replaced region\n     * @param end the end of the replaced region; the location of the cursor\n     * @param original the text to be restored if the user presses DEL\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean showCharacterPicker(View view, Editable content, char c, boolean insert, int count)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String toTitleCase(String src)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static QwertyKeyListener getInstance(boolean autoText, Capitalize cap)", "public static QwertyKeyListener getInstanceForFullKeyboard()", "public int getInputType()", "public boolean onKeyDown(View view, Editable content, int keyCode, KeyEvent event)", "private String getReplacement(CharSequence src, int start, int end, View view)", "public static void markAsReplaced(Spannable content, int start, int end, String original)", "private boolean showCharacterPicker(View view, Editable content, char c, boolean insert, int count)", "private static String toTitleCase(String src)" ],
  "variableNames" : [ "sInstance", "sFullKeyboardInstance", "mAutoCap", "mAutoText", "mFullKeyboard", "PICKER_SETS" ]
}