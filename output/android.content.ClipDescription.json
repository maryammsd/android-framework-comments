{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/ClipDescription.java",
  "packageName" : "android.content",
  "className" : "ClipDescription",
  "comment" : "\n * Meta-data describing the contents of a {@link ClipData}.  Provides enough\n * information to know if you can handle the ClipData, but not the data\n * itself.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using the clipboard framework, read the\n * <a href=\"{@docRoot}guide/topics/clipboard/copy-paste.html\">Copy and Paste</a>\n * developer guide.</p>\n * </div>\n ",
  "variables" : [ {
    "name" : "MIMETYPE_TEXT_PLAIN",
    "type" : "String",
    "comment" : "\n     * The MIME type for a clip holding plain text.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIMETYPE_TEXT_HTML",
    "type" : "String",
    "comment" : "\n     * The MIME type for a clip holding HTML text.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIMETYPE_TEXT_URILIST",
    "type" : "String",
    "comment" : "\n     * The MIME type for a clip holding one or more URIs.  This should be\n     * used for URIs that are meaningful to a user (such as an http: URI).\n     * It should <em>not</em> be used for a content: URI that references some\n     * other piece of data; in that case the MIME type should be the type\n     * of the referenced data.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIMETYPE_TEXT_INTENT",
    "type" : "String",
    "comment" : "\n     * The MIME type for a clip holding an Intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIMETYPE_UNKNOWN",
    "type" : "String",
    "comment" : "\n     * The MIME type for data whose type is otherwise unknown.\n     * <p>\n     * Per RFC 2046, the \"application\" media type is to be used for discrete\n     * data which do not fit in any of the other categories, and the\n     * \"octet-stream\" subtype is used to indicate that a body contains arbitrary\n     * binary data.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TARGET_COMPONENT_NAME",
    "type" : "String",
    "comment" : "\n     * The name of the extra used to define a component name when copying/dragging\n     * an app icon from Launcher.\n     * <p>\n     * Type: String\n     * </p>\n     * <p>\n     * Use {@link ComponentName#unflattenFromString(String)}\n     * and {@link ComponentName#flattenToString()} to convert the extra value\n     * to/from {@link ComponentName}.\n     * </p>\n     * @hide\n     ",
    "links" : [ "android.content.ComponentName#unflattenFromString(String)", "android.content.ComponentName", "android.content.ComponentName#flattenToString()" ]
  }, {
    "name" : "EXTRA_USER_SERIAL_NUMBER",
    "type" : "String",
    "comment" : "\n     * The name of the extra used to define a user serial number when copying/dragging\n     * an app icon from Launcher.\n     * <p>\n     * Type: long\n     * </p>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMimeTypes",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeStamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ClipDescription>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean compareMimeTypes(String concreteType, String desiredType)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper to compare two MIME types, where one may be a pattern.\n     * @param concreteType A fully-specified MIME type.\n     * @param desiredType A desired MIME type that may be a pattern such as *&#47;*.\n     * @return Returns true if the two MIME types match.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimestamp(long timeStamp)",
    "returnType" : "void",
    "comment" : "\n     * Used for setting the timestamp at which the associated {@link ClipData} is copied to\n     * global clipboard.\n     *\n     * @param timeStamp at which the associated {@link ClipData} is copied to clipboard in\n     *                  {@link System#currentTimeMillis()} time base.\n     * @hide\n     ",
    "links" : [ "android.content.ClipData", "#currentTimeMillis()" ]
  }, {
    "name" : "public long getTimestamp()",
    "returnType" : "long",
    "comment" : "\n     * Return the timestamp at which the associated {@link ClipData} is copied to global clipboard\n     * in the {@link System#currentTimeMillis()} time base.\n     *\n     * @return timestamp at which the associated {@link ClipData} is copied to global clipboard\n     *         or {@code 0} if it is not copied to clipboard.\n     ",
    "links" : [ "android.content.ClipData", "#currentTimeMillis()" ]
  }, {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the label for this clip.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMimeType(String mimeType)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the clip description contains the given MIME type.\n     *\n     * @param mimeType The desired MIME type.  May be a pattern.\n     * @return Returns true if one of the MIME types in the clip description\n     * matches the desired MIME type, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] filterMimeTypes(String mimeType)",
    "returnType" : "String[]",
    "comment" : "\n     * Filter the clip description MIME types by the given MIME type.  Returns\n     * all MIME types in the clip that match the given MIME type.\n     *\n     * @param mimeType The desired MIME type.  May be a pattern.\n     * @return Returns an array of all matching MIME types.  If there are no\n     * matching MIME types, null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMimeTypeCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of MIME types the clip is available in.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMimeType(int index)",
    "returnType" : "String",
    "comment" : "\n     * Return one of the possible clip MIME types.\n     ",
    "links" : [ ]
  }, {
    "name" : " void addMimeTypes(String[] mimeTypes)",
    "returnType" : "void",
    "comment" : "\n     * Add MIME types to the clip description.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getExtras()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Retrieve extended data from the clip description.\n     *\n     * @return the bundle containing extended data previously set with\n     * {@link #setExtras(PersistableBundle)}, or null if no extras have been set.\n     *\n     * @see #setExtras(PersistableBundle)\n     ",
    "links" : [ "#setExtras(PersistableBundle)" ]
  }, {
    "name" : "public void setExtras(PersistableBundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Add extended data to the clip description.\n     *\n     * @see #getExtras()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void validate()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean toShortString(StringBuilder b)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean toShortStringTypesOnly(StringBuilder b)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MIMETYPE_TEXT_PLAIN", "MIMETYPE_TEXT_HTML", "MIMETYPE_TEXT_URILIST", "MIMETYPE_TEXT_INTENT", "MIMETYPE_UNKNOWN", "EXTRA_TARGET_COMPONENT_NAME", "EXTRA_USER_SERIAL_NUMBER", "mLabel", "mMimeTypes", "mExtras", "mTimeStamp", "CREATOR" ],
  "methodNames" : [ "public static boolean compareMimeTypes(String concreteType, String desiredType)", "public void setTimestamp(long timeStamp)", "public long getTimestamp()", "public CharSequence getLabel()", "public boolean hasMimeType(String mimeType)", "public String[] filterMimeTypes(String mimeType)", "public int getMimeTypeCount()", "public String getMimeType(int index)", " void addMimeTypes(String[] mimeTypes)", "public PersistableBundle getExtras()", "public void setExtras(PersistableBundle extras)", "public void validate()", "public String toString()", "public boolean toShortString(StringBuilder b)", "public boolean toShortStringTypesOnly(StringBuilder b)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}