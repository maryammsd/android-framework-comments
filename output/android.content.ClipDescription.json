{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/ClipDescription.java",
  "packageName" : "android.content",
  "className" : "ClipDescription",
  "comment" : "\n * Meta-data describing the contents of a {@link ClipData}.  Provides enough\n * information to know if you can handle the ClipData, but not the data\n * itself.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using the clipboard framework, read the\n * <a href=\"{@docRoot}guide/topics/clipboard/copy-paste.html\">Copy and Paste</a>\n * developer guide.</p>\n * </div>\n ",
  "links" : [ "android.content.ClipData" ],
  "variables" : [ {
    "name" : "MIMETYPE_TEXT_PLAIN",
    "type" : "String",
    "comment" : "\n     * The MIME type for a clip holding plain text.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIMETYPE_TEXT_HTML",
    "type" : "String",
    "comment" : "\n     * The MIME type for a clip holding HTML text.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIMETYPE_TEXT_URILIST",
    "type" : "String",
    "comment" : "\n     * The MIME type for a clip holding one or more URIs.  This should be\n     * used for URIs that are meaningful to a user (such as an http: URI).\n     * It should <em>not</em> be used for a content: URI that references some\n     * other piece of data; in that case the MIME type should be the type\n     * of the referenced data.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIMETYPE_TEXT_INTENT",
    "type" : "String",
    "comment" : "\n     * The MIME type for a clip holding an Intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIMETYPE_APPLICATION_ACTIVITY",
    "type" : "String",
    "comment" : "\n     * The MIME type for an activity. The ClipData must include intents with required extras\n     * {@link #EXTRA_PENDING_INTENT} and {@link Intent#EXTRA_USER}, and an optional\n     * {@link #EXTRA_ACTIVITY_OPTIONS}.\n     * @hide\n     ",
    "links" : [ "#EXTRA_ACTIVITY_OPTIONS", "android.content.Intent#EXTRA_USER", "#EXTRA_PENDING_INTENT" ]
  }, {
    "name" : "MIMETYPE_APPLICATION_SHORTCUT",
    "type" : "String",
    "comment" : "\n     * The MIME type for a shortcut. The ClipData must include intents with required extras\n     * {@link Intent#EXTRA_SHORTCUT_ID}, {@link Intent#EXTRA_PACKAGE_NAME} and\n     * {@link Intent#EXTRA_USER}, and an optional {@link #EXTRA_ACTIVITY_OPTIONS}.\n     * @hide\n     ",
    "links" : [ "android.content.Intent#EXTRA_PACKAGE_NAME", "android.content.Intent#EXTRA_SHORTCUT_ID", "#EXTRA_ACTIVITY_OPTIONS", "android.content.Intent#EXTRA_USER" ]
  }, {
    "name" : "MIMETYPE_APPLICATION_TASK",
    "type" : "String",
    "comment" : "\n     * The MIME type for a task. The ClipData must include an intent with a required extra\n     * {@link Intent#EXTRA_TASK_ID} of the task to launch.\n     * @hide\n     ",
    "links" : [ "android.content.Intent#EXTRA_TASK_ID" ]
  }, {
    "name" : "MIMETYPE_UNKNOWN",
    "type" : "String",
    "comment" : "\n     * The MIME type for data whose type is otherwise unknown.\n     * <p>\n     * Per RFC 2046, the \"application\" media type is to be used for discrete\n     * data which do not fit in any of the other categories, and the\n     * \"octet-stream\" subtype is used to indicate that a body contains arbitrary\n     * binary data.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PENDING_INTENT",
    "type" : "String",
    "comment" : "\n     * The pending intent for the activity to launch.\n     * <p>\n     * Type: PendingIntent\n     * </p>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ACTIVITY_OPTIONS",
    "type" : "String",
    "comment" : "\n     * The activity options bundle to use when launching an activity.\n     * <p>\n     * Type: Bundle\n     * </p>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOGGING_INSTANCE_ID",
    "type" : "String",
    "comment" : "\n     * An instance id used for logging.\n     * <p>\n     * Type: {@link com.android.internal.logging.InstanceId}\n     * </p>\n     * @hide\n     ",
    "links" : [ "com.android.internal.logging.InstanceId" ]
  }, {
    "name" : "EXTRA_IS_SENSITIVE",
    "type" : "String",
    "comment" : "\n     * Indicates that a ClipData contains potentially sensitive information, such as a\n     * password or credit card number.\n     * <p>\n     * Type: boolean\n     * <p>\n     * This extra can be used to indicate that a ClipData contains sensitive information that\n     * should be redacted or hidden from view until a user takes explicit action to reveal it\n     * (e.g., by pasting).\n     * <p>\n     * Adding this extra does not change clipboard behavior or add additional security to\n     * the ClipData. Its purpose is essentially a rendering hint from the source application,\n     * asking that the data within be obfuscated or redacted, unless the user has taken action\n     * to make it visible.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_IS_REMOTE_DEVICE",
    "type" : "String",
    "comment" : " Indicates that a ClipData's source is a remote device.\n     * <p>\n     *     Type: boolean\n     * <p>\n     *     This extra can be used to indicate that a ClipData comes from a separate device rather\n     *     than being local. It is a rendering hint that can be used to take different behavior\n     *     based on the source device of copied data.\n     ",
    "links" : [ ]
  }, {
    "name" : "CLASSIFICATION_NOT_COMPLETE",
    "type" : "int",
    "comment" : "\n     * Value returned by {@link #getConfidenceScore(String)} if text classification has not been\n     * completed on the associated clip. This will be always be the case if the clip has not been\n     * copied to clipboard, or if there is no associated clip.\n     ",
    "links" : [ "#getConfidenceScore(String)" ]
  }, {
    "name" : "CLASSIFICATION_NOT_PERFORMED",
    "type" : "int",
    "comment" : "\n     * Value returned by {@link #getConfidenceScore(String)} if text classification was not and will\n     * not be performed on the associated clip. This may be the case if the clip does not contain\n     * text in its first item, or if the text is too long.\n     ",
    "links" : [ "#getConfidenceScore(String)" ]
  }, {
    "name" : "CLASSIFICATION_COMPLETE",
    "type" : "int",
    "comment" : "\n     * Value returned by {@link #getConfidenceScore(String)} if text classification has been\n     * completed.\n     ",
    "links" : [ "#getConfidenceScore(String)" ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMimeTypes",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeStamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsStyledText",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEntityConfidence",
    "type" : "ArrayMap<String, Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassificationStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ClipDescription>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean compareMimeTypes(String concreteType, String desiredType)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper to compare two MIME types, where one may be a pattern.\n     * @param concreteType A fully-specified MIME type.\n     * @param desiredType A desired MIME type that may be a pattern such as *&#47;*.\n     * @return Returns true if the two MIME types match.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimestamp(long timeStamp)",
    "returnType" : "void",
    "comment" : "\n     * Used for setting the timestamp at which the associated {@link ClipData} is copied to\n     * global clipboard.\n     *\n     * @param timeStamp at which the associated {@link ClipData} is copied to clipboard in\n     *                  {@link System#currentTimeMillis()} time base.\n     * @hide\n     ",
    "links" : [ "android.content.ClipData", "#currentTimeMillis()" ]
  }, {
    "name" : "public long getTimestamp()",
    "returnType" : "long",
    "comment" : "\n     * Return the timestamp at which the associated {@link ClipData} is copied to global clipboard\n     * in the {@link System#currentTimeMillis()} time base.\n     *\n     * @return timestamp at which the associated {@link ClipData} is copied to global clipboard\n     *         or {@code 0} if it is not copied to clipboard.\n     ",
    "links" : [ "android.content.ClipData", "#currentTimeMillis()" ]
  }, {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the label for this clip.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMimeType(String mimeType)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the clip description contains the given MIME type.\n     *\n     * @param mimeType The desired MIME type.  May be a pattern.\n     * @return Returns true if one of the MIME types in the clip description\n     * matches the desired MIME type, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMimeType(@NonNull String[] targetMimeTypes)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the clip description contains any of the given MIME types.\n     *\n     * @param targetMimeTypes The target MIME types. May use patterns.\n     * @return Returns true if at least one of the MIME types in the clip description matches at\n     * least one of the target MIME types, else false.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] filterMimeTypes(String mimeType)",
    "returnType" : "String[]",
    "comment" : "\n     * Filter the clip description MIME types by the given MIME type.  Returns\n     * all MIME types in the clip that match the given MIME type.\n     *\n     * @param mimeType The desired MIME type.  May be a pattern.\n     * @return Returns an array of all matching MIME types.  If there are no\n     * matching MIME types, null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMimeTypeCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of MIME types the clip is available in.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMimeType(int index)",
    "returnType" : "String",
    "comment" : "\n     * Return one of the possible clip MIME types.\n     ",
    "links" : [ ]
  }, {
    "name" : " void addMimeTypes(String[] mimeTypes)",
    "returnType" : "void",
    "comment" : "\n     * Add MIME types to the clip description.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getExtras()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Retrieve extended data from the clip description.\n     *\n     * @return the bundle containing extended data previously set with\n     * {@link #setExtras(PersistableBundle)}, or null if no extras have been set.\n     *\n     * @see #setExtras(PersistableBundle)\n     ",
    "links" : [ "#setExtras(PersistableBundle)" ]
  }, {
    "name" : "public void setExtras(PersistableBundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Add extended data to the clip description.\n     *\n     * @see #getExtras()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void validate()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStyledText()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the first item of the associated {@link ClipData} contains styled text, i.e.\n     * if it contains spans such as {@link android.text.style.CharacterStyle CharacterStyle}, {@link\n     * android.text.style.ParagraphStyle ParagraphStyle}, or {@link\n     * android.text.style.UpdateAppearance UpdateAppearance}. Returns false if it does not, or if\n     * there is no associated clip data.\n     ",
    "links" : [ "android.content.ClipData", "android.text.style.ParagraphStyle", "android.text.style.UpdateAppearance", "android.text.style.CharacterStyle" ]
  }, {
    "name" : " void setIsStyledText(boolean isStyledText)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the associated {@link ClipData} contains styled text in its first item. This\n     * should be called when this description is associated with clip data or when the first item\n     * is added to the associated clip data.\n     ",
    "links" : [ "android.content.ClipData" ]
  }, {
    "name" : "public void setClassificationStatus(@ClassificationStatus int status)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current status of text classification for the associated clip.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getConfidenceScore(@NonNull @TextClassifier.EntityType String entity)",
    "returnType" : "float",
    "comment" : "\n     * Returns a score indicating confidence that an instance of the given entity is present in the\n     * first item of the clip data, if that item is plain text and text classification has been\n     * performed. The value ranges from 0 (low confidence) to 1 (high confidence). 0 indicates that\n     * the entity was not found in the classified text.\n     *\n     * <p>Entities should be as defined in the {@link TextClassifier} class, such as\n     * {@link TextClassifier#TYPE_ADDRESS}, {@link TextClassifier#TYPE_URL}, or\n     * {@link TextClassifier#TYPE_EMAIL}.\n     *\n     * <p>If the result is positive for any entity, the full classification result as a\n     * {@link TextLinks} object may be obtained using the {@link ClipData.Item#getTextLinks()}\n     * method.\n     *\n     * @throws IllegalStateException if {@link #getClassificationStatus()} is not\n     * {@link #CLASSIFICATION_COMPLETE}\n     ",
    "links" : [ "android.view.textclassifier.TextLinks", "android.view.textclassifier.TextClassifier", "#CLASSIFICATION_COMPLETE", "ClipData.Item#getTextLinks()", "#getClassificationStatus()", "android.view.textclassifier.TextClassifier#TYPE_EMAIL", "android.view.textclassifier.TextClassifier#TYPE_ADDRESS", "android.view.textclassifier.TextClassifier#TYPE_URL" ]
  }, {
    "name" : "public int getClassificationStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns {@link #CLASSIFICATION_COMPLETE} if text classification has been performed on the\n     * associated {@link ClipData}. If this is the case then {@link #getConfidenceScore} may be used\n     * to retrieve information about entities within the text. Otherwise, returns\n     * {@link #CLASSIFICATION_NOT_COMPLETE} if classification has not yet returned results, or\n     * {@link #CLASSIFICATION_NOT_PERFORMED} if classification was not attempted (e.g. because the\n     * text was too long).\n     ",
    "links" : [ "android.content.ClipData", "#CLASSIFICATION_COMPLETE", "#getConfidenceScore", "#CLASSIFICATION_NOT_COMPLETE", "#CLASSIFICATION_NOT_PERFORMED" ]
  }, {
    "name" : "public void setConfidenceScores(Map<String, Float> confidences)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean toShortString(StringBuilder b, boolean redactContent)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends this description to the given builder.\n     * @param redactContent If true, redacts common forms of PII; otherwise appends full details.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean toShortStringTypesOnly(StringBuilder b)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bundle confidencesToBundle()",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readBundleToConfidences(Bundle bundle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean compareMimeTypes(String concreteType, String desiredType)", "public void setTimestamp(long timeStamp)", "public long getTimestamp()", "public CharSequence getLabel()", "public boolean hasMimeType(String mimeType)", "public boolean hasMimeType(@NonNull String[] targetMimeTypes)", "public String[] filterMimeTypes(String mimeType)", "public int getMimeTypeCount()", "public String getMimeType(int index)", " void addMimeTypes(String[] mimeTypes)", "public PersistableBundle getExtras()", "public void setExtras(PersistableBundle extras)", "public void validate()", "public boolean isStyledText()", " void setIsStyledText(boolean isStyledText)", "public void setClassificationStatus(@ClassificationStatus int status)", "public float getConfidenceScore(@NonNull @TextClassifier.EntityType String entity)", "public int getClassificationStatus()", "public void setConfidenceScores(Map<String, Float> confidences)", "public String toString()", "public boolean toShortString(StringBuilder b, boolean redactContent)", "public boolean toShortStringTypesOnly(StringBuilder b)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "private Bundle confidencesToBundle()", "private void readBundleToConfidences(Bundle bundle)" ],
  "variableNames" : [ "MIMETYPE_TEXT_PLAIN", "MIMETYPE_TEXT_HTML", "MIMETYPE_TEXT_URILIST", "MIMETYPE_TEXT_INTENT", "MIMETYPE_APPLICATION_ACTIVITY", "MIMETYPE_APPLICATION_SHORTCUT", "MIMETYPE_APPLICATION_TASK", "MIMETYPE_UNKNOWN", "EXTRA_PENDING_INTENT", "EXTRA_ACTIVITY_OPTIONS", "EXTRA_LOGGING_INSTANCE_ID", "EXTRA_IS_SENSITIVE", "EXTRA_IS_REMOTE_DEVICE", "CLASSIFICATION_NOT_COMPLETE", "CLASSIFICATION_NOT_PERFORMED", "CLASSIFICATION_COMPLETE", "mLabel", "mMimeTypes", "mExtras", "mTimeStamp", "mIsStyledText", "mEntityConfidence", "mClassificationStatus", "CREATOR" ]
}