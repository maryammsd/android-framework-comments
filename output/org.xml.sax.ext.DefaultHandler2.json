{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/ext/DefaultHandler2.java",
  "packageName" : "org.xml.sax.ext",
  "className" : "DefaultHandler2",
  "comment" : "\n * This class extends the SAX2 base handler class to support the\n * SAX2 {@link LexicalHandler}, {@link DeclHandler}, and\n * {@link EntityResolver2} extensions.  Except for overriding the\n * original SAX1 {@link DefaultHandler#resolveEntity resolveEntity()}\n * method the added handler methods just return.  Subclassers may\n * override everything on a method-by-method basis.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * </blockquote>\n *\n * <p> <em>Note:</em> this class might yet learn that the\n * <em>ContentHandler.setDocumentLocator()</em> call might be passed a\n * {@link Locator2} object, and that the\n * <em>ContentHandler.startElement()</em> call might be passed a\n * {@link Attributes2} object.\n *\n * @since SAX 2.0 (extensions 1.1 alpha)\n * @author David Brownell\n * @version TBS\n ",
  "links" : [ "org.xml.sax.ext.LexicalHandler", "org.xml.sax.helpers.DefaultHandler#resolveEntity", "org.xml.sax.ext.Attributes2", "org.xml.sax.ext.DeclHandler", "org.xml.sax.ext.EntityResolver2", "org.xml.sax.ext.Locator2" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void startCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startDTD(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endDTD() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void attributeDecl(String eName, String aName, String type, String mode, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void elementDecl(String name, String model) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void externalEntityDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void internalEntityDecl(String name, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InputSource getExternalSubset(String name, String baseURI) throws SAXException, IOException",
    "returnType" : "InputSource",
    "comment" : "\n     * Tells the parser that if no external subset has been declared\n     * in the document text, none should be used.\n     *\n     * @param name Identifies the document root element.  This name comes\n     *    from a DOCTYPE declaration (where available) or from the actual\n     *    root element. The parameter is ignored.\n     * @param baseURI The document's base URI, serving as an additional\n     *    hint for selecting the external subset.  This is always an absolute\n     *    URI, unless it is null because the XMLReader was given an InputSource\n     *    without one. The parameter is ignored.\n     *\n     * @return null (always).\n     *\n     * @exception SAXException Any SAX exception, possibly wrapping\n     *    another exception.\n     * @exception IOException Probably indicating a failure to create\n     *    a new InputStream or Reader, or an illegal URL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws SAXException, IOException",
    "returnType" : "InputSource",
    "comment" : "\n     * Tells the parser to resolve the systemId against the baseURI\n     * and read the entity text from that resulting absolute URI.\n     * Note that because the older\n     * {@link DefaultHandler#resolveEntity DefaultHandler.resolveEntity()},\n     * method is overridden to call this one, this method may sometimes\n     * be invoked with null <em>name</em> and <em>baseURI</em>, and\n     * with the <em>systemId</em> already absolutized.\n     *\n     * @param name Identifies the external entity being resolved.\n     *    Either \"[dtd]\" for the external subset, or a name starting\n     *    with \"%\" to indicate a parameter entity, or else the name of\n     *    a general entity.  This is never null when invoked by a SAX2\n     *    parser.\n     * @param publicId The public identifier of the external entity being\n     *    referenced (normalized as required by the XML specification), or\n     *    null if none was supplied.\n     * @param baseURI The URI with respect to which relative systemIDs\n     *    are interpreted.  This is always an absolute URI, unless it is\n     *    null (likely because the XMLReader was given an InputSource without\n     *  one).  This URI is defined by the XML specification to be the one\n     *    associated with the \"&lt;\" starting the relevant declaration.\n     * @param systemId The system identifier of the external entity\n     *    being referenced; either a relative or absolute URI.\n     *  This is never null when invoked by a SAX2 parser; only declared\n     *    entities, and any external subset, are resolved by such parsers.\n     *\n     * @return An InputSource object describing the new input source.\n     *\n     * @exception SAXException Any SAX exception, possibly wrapping\n     *    another exception.\n     * @exception IOException Probably indicating a failure to create\n     *    a new InputStream or Reader, or an illegal URL.\n     ",
    "links" : [ "org.xml.sax.helpers.DefaultHandler#resolveEntity" ]
  }, {
    "name" : "public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException",
    "returnType" : "InputSource",
    "comment" : "\n     * Invokes\n     * {@link EntityResolver2#resolveEntity EntityResolver2.resolveEntity()}\n     * with null entity name and base URI.\n     * You only need to override that method to use this class.\n     *\n     * @param publicId The public identifier of the external entity being\n     *    referenced (normalized as required by the XML specification), or\n     *    null if none was supplied.\n     * @param systemId The system identifier of the external entity\n     *    being referenced; either a relative or absolute URI.\n     *  This is never null when invoked by a SAX2 parser; only declared\n     *    entities, and any external subset, are resolved by such parsers.\n     *\n     * @return An InputSource object describing the new input source.\n     *\n     * @exception SAXException Any SAX exception, possibly wrapping\n     *    another exception.\n     * @exception IOException Probably indicating a failure to create\n     *    a new InputStream or Reader, or an illegal URL.\n     ",
    "links" : [ "org.xml.sax.ext.EntityResolver2#resolveEntity" ]
  } ],
  "methodNames" : [ "public void startCDATA() throws SAXException", "public void endCDATA() throws SAXException", "public void startDTD(String name, String publicId, String systemId) throws SAXException", "public void endDTD() throws SAXException", "public void startEntity(String name) throws SAXException", "public void endEntity(String name) throws SAXException", "public void comment(char[] ch, int start, int length) throws SAXException", "public void attributeDecl(String eName, String aName, String type, String mode, String value) throws SAXException", "public void elementDecl(String name, String model) throws SAXException", "public void externalEntityDecl(String name, String publicId, String systemId) throws SAXException", "public void internalEntityDecl(String name, String value) throws SAXException", "public InputSource getExternalSubset(String name, String baseURI) throws SAXException, IOException", "public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws SAXException, IOException", "public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException" ],
  "variableNames" : [ ]
}