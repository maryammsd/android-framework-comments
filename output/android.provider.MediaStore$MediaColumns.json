{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/MediaStore.java",
  "packageName" : "android.provider",
  "className" : "MediaColumns",
  "comment" : "\n     * Common media metadata columns.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DATA",
    "type" : "String",
    "comment" : "\n         * Absolute filesystem path to the media item on disk.\n         * <p>\n         * Apps may use this path to do file operations. However, they should not assume that the\n         * file is always available. Apps must be prepared to handle any file-based I/O errors that\n         * could occur.\n         * <p>\n         * From Android 11 onwards, this column is read-only for apps that target\n         * {@link android.os.Build.VERSION_CODES#R R} and higher. On those devices, when creating or\n         * updating a uri, this column's value is not accepted. Instead, to update the\n         * filesystem location of a file, use the values of the {@link #DISPLAY_NAME} and\n         * {@link #RELATIVE_PATH} columns.\n         * <p>\n         * Though direct file operations are supported,\n         * {@link ContentResolver#openFileDescriptor(Uri, String)} API is recommended for better\n         * performance.\n         *\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#R", "#RELATIVE_PATH", "#DISPLAY_NAME", "android.content.ContentResolver#openFileDescriptor(Uri" ]
  }, {
    "name" : "SIZE",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link File#length()} extracted from this media\n         * item.\n         ",
    "links" : [ "java.io.File#length()" ]
  }, {
    "name" : "DISPLAY_NAME",
    "type" : "String",
    "comment" : "\n         * The display name of the media item.\n         * <p>\n         * For example, an item stored at\n         * {@code /storage/0000-0000/DCIM/Vacation/IMG1024.JPG} would have a\n         * display name of {@code IMG1024.JPG}.\n         ",
    "links" : [ ]
  }, {
    "name" : "DATE_ADDED",
    "type" : "String",
    "comment" : "\n         * The time the media item was first added.\n         ",
    "links" : [ ]
  }, {
    "name" : "DATE_MODIFIED",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link File#lastModified()} extracted from this\n         * media item.\n         ",
    "links" : [ "java.io.File#lastModified()" ]
  }, {
    "name" : "DATE_TAKEN",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_DATE} or\n         * {@link ExifInterface#TAG_DATETIME_ORIGINAL} extracted from this media\n         * item.\n         * <p>\n         * Note that images must define both\n         * {@link ExifInterface#TAG_DATETIME_ORIGINAL} and\n         * {@code ExifInterface#TAG_OFFSET_TIME_ORIGINAL} to reliably determine\n         * this value in relation to the epoch.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_DATE", "android.media.ExifInterface#TAG_DATETIME_ORIGINAL" ]
  }, {
    "name" : "MIME_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of the media item.\n         * <p>\n         * This is typically defined based on the file extension of the media\n         * item. However, it may be the value of the {@code format} attribute\n         * defined by the <em>Dublin Core Media Initiative</em> standard,\n         * extracted from any XMP metadata contained within this media item.\n         * <p class=\"note\">\n         * Note: the {@code format} attribute may be ignored if the top-level\n         * MIME type disagrees with the file extension. For example, it's\n         * reasonable for an {@code image/jpeg} file to declare a {@code format}\n         * of {@code image/vnd.google.panorama360+jpg}, but declaring a\n         * {@code format} of {@code audio/ogg} would be ignored.\n         * <p>\n         * This is a read-only column that is automatically computed.\n         ",
    "links" : [ ]
  }, {
    "name" : "IS_DRM",
    "type" : "String",
    "comment" : "\n         * Flag indicating if a media item is DRM protected.\n         ",
    "links" : [ ]
  }, {
    "name" : "IS_PENDING",
    "type" : "String",
    "comment" : "\n         * Flag indicating if a media item is pending, and still being inserted\n         * by its owner. While this flag is set, only the owner of the item can\n         * open the underlying file; requests from other apps will be rejected.\n         * <p>\n         * Pending items are retained either until they are published by setting\n         * the field to {@code 0}, or until they expire as defined by\n         * {@link #DATE_EXPIRES}.\n         *\n         * @see MediaStore#QUERY_ARG_MATCH_PENDING\n         ",
    "links" : [ "#DATE_EXPIRES" ]
  }, {
    "name" : "IS_TRASHED",
    "type" : "String",
    "comment" : "\n         * Flag indicating if a media item is trashed.\n         * <p>\n         * Trashed items are retained until they expire as defined by\n         * {@link #DATE_EXPIRES}.\n         *\n         * @see MediaColumns#IS_TRASHED\n         * @see MediaStore#QUERY_ARG_MATCH_TRASHED\n         * @see MediaStore#createTrashRequest\n         ",
    "links" : [ "#DATE_EXPIRES" ]
  }, {
    "name" : "DATE_EXPIRES",
    "type" : "String",
    "comment" : "\n         * The time the media item should be considered expired. Typically only\n         * meaningful in the context of {@link #IS_PENDING} or\n         * {@link #IS_TRASHED}.\n         * <p>\n         * The value stored in this column is automatically calculated when\n         * {@link #IS_PENDING} or {@link #IS_TRASHED} is changed. The default\n         * pending expiration is typically 7 days, and the default trashed\n         * expiration is typically 30 days.\n         * <p>\n         * Expired media items are automatically deleted once their expiration\n         * time has passed, typically during the next device idle period.\n         ",
    "links" : [ "#IS_PENDING", "#IS_TRASHED" ]
  }, {
    "name" : "WIDTH",
    "type" : "String",
    "comment" : "\n         * Indexed value of\n         * {@link MediaMetadataRetriever#METADATA_KEY_VIDEO_WIDTH},\n         * {@link MediaMetadataRetriever#METADATA_KEY_IMAGE_WIDTH} or\n         * {@link ExifInterface#TAG_IMAGE_WIDTH} extracted from this media item.\n         * <p>\n         * Type: INTEGER\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_VIDEO_WIDTH", "android.media.MediaMetadataRetriever#METADATA_KEY_IMAGE_WIDTH", "android.media.ExifInterface#TAG_IMAGE_WIDTH" ]
  }, {
    "name" : "HEIGHT",
    "type" : "String",
    "comment" : "\n         * Indexed value of\n         * {@link MediaMetadataRetriever#METADATA_KEY_VIDEO_HEIGHT},\n         * {@link MediaMetadataRetriever#METADATA_KEY_IMAGE_HEIGHT} or\n         * {@link ExifInterface#TAG_IMAGE_LENGTH} extracted from this media\n         * item.\n         * <p>\n         * Type: INTEGER\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_IMAGE_HEIGHT", "android.media.ExifInterface#TAG_IMAGE_LENGTH", "android.media.MediaMetadataRetriever#METADATA_KEY_VIDEO_HEIGHT" ]
  }, {
    "name" : "RESOLUTION",
    "type" : "String",
    "comment" : "\n         * Calculated value that combines {@link #WIDTH} and {@link #HEIGHT}\n         * into a user-presentable string.\n         ",
    "links" : [ "#WIDTH", "#HEIGHT" ]
  }, {
    "name" : "OWNER_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n         * Package name that contributed this media. The value may be\n         * {@code NULL} if ownership cannot be reliably determined.\n         * <p>\n         * From Android {@link Build.VERSION_CODES#UPSIDE_DOWN_CAKE} onwards,\n         * visibility and query of this field will depend on\n         * <a href=\"/training/basics/intents/package-visibility\">package visibility</a>.\n         * For {@link ContentResolver#query} operation, result set will\n         * be restricted to visible packages only.\n         ",
    "links" : [ "Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.content.ContentResolver#query" ]
  }, {
    "name" : "VOLUME_NAME",
    "type" : "String",
    "comment" : "\n         * Volume name of the specific storage device where this media item is\n         * persisted. The value is typically one of the volume names returned\n         * from {@link MediaStore#getExternalVolumeNames(Context)}.\n         * <p>\n         * This is a read-only column that is automatically computed.\n         ",
    "links" : [ "android.provider.MediaStore#getExternalVolumeNames(Context)" ]
  }, {
    "name" : "RELATIVE_PATH",
    "type" : "String",
    "comment" : "\n         * Relative path of this media item within the storage device where it\n         * is persisted. For example, an item stored at\n         * {@code /storage/0000-0000/DCIM/Vacation/IMG1024.JPG} would have a\n         * path of {@code DCIM/Vacation/}.\n         * <p>\n         * This value should only be used for organizational purposes, and you\n         * should not attempt to construct or access a raw filesystem path using\n         * this value. If you need to open a media item, use an API like\n         * {@link ContentResolver#openFileDescriptor(Uri, String)}.\n         * <p>\n         * When this value is set to {@code NULL} during an\n         * {@link ContentResolver#insert} operation, the newly created item will\n         * be placed in a relevant default location based on the type of media\n         * being inserted. For example, a {@code image/jpeg} item will be placed\n         * under {@link Environment#DIRECTORY_PICTURES}.\n         * <p>\n         * You can modify this column during an {@link ContentResolver#update}\n         * call, which will move the underlying file on disk.\n         * <p>\n         * In both cases above, content must be placed under a top-level\n         * directory that is relevant to the media type. For example, attempting\n         * to place a {@code audio/mpeg} file under\n         * {@link Environment#DIRECTORY_PICTURES} will be rejected.\n         ",
    "links" : [ "android.os.Environment#DIRECTORY_PICTURES", "android.content.ContentResolver#insert", "android.content.ContentResolver#openFileDescriptor(Uri", "android.content.ContentResolver#update" ]
  }, {
    "name" : "BUCKET_ID",
    "type" : "String",
    "comment" : "\n         * The primary bucket ID of this media item. This can be useful to\n         * present the user a first-level clustering of related media items.\n         * This is a read-only column that is automatically computed.\n         ",
    "links" : [ ]
  }, {
    "name" : "BUCKET_DISPLAY_NAME",
    "type" : "String",
    "comment" : "\n         * The primary bucket display name of this media item. This can be\n         * useful to present the user a first-level clustering of related\n         * media items. This is a read-only column that is automatically\n         * computed.\n         ",
    "links" : [ ]
  }, {
    "name" : "GROUP_ID",
    "type" : "String",
    "comment" : "\n         * The group ID of this media item. This can be useful to present\n         * the user a grouping of related media items, such a burst of\n         * images, or a {@code JPG} and {@code DNG} version of the same\n         * image.\n         * <p>\n         * This is a read-only column that is automatically computed based\n         * on the first portion of the filename. For example,\n         * {@code IMG1024.BURST001.JPG} and {@code IMG1024.BURST002.JPG}\n         * will have the same {@link #GROUP_ID} because the first portion of\n         * their filenames is identical.\n         *\n         * @removed\n         ",
    "links" : [ "#GROUP_ID" ]
  }, {
    "name" : "DOCUMENT_ID",
    "type" : "String",
    "comment" : "\n         * The \"document ID\" GUID as defined by the <em>XMP Media\n         * Management</em> standard, extracted from any XMP metadata contained\n         * within this media item. The value is {@code null} when no metadata\n         * was found.\n         * <p>\n         * Each \"document ID\" is created once for each new resource. Different\n         * renditions of that resource are expected to have different IDs.\n         ",
    "links" : [ ]
  }, {
    "name" : "INSTANCE_ID",
    "type" : "String",
    "comment" : "\n         * The \"instance ID\" GUID as defined by the <em>XMP Media\n         * Management</em> standard, extracted from any XMP metadata contained\n         * within this media item. The value is {@code null} when no metadata\n         * was found.\n         * <p>\n         * This \"instance ID\" changes with each save operation of a specific\n         * \"document ID\".\n         ",
    "links" : [ ]
  }, {
    "name" : "ORIGINAL_DOCUMENT_ID",
    "type" : "String",
    "comment" : "\n         * The \"original document ID\" GUID as defined by the <em>XMP Media\n         * Management</em> standard, extracted from any XMP metadata contained\n         * within this media item.\n         * <p>\n         * This \"original document ID\" links a resource to its original source.\n         * For example, when you save a PSD document as a JPEG, then convert the\n         * JPEG to GIF format, the \"original document ID\" of both the JPEG and\n         * GIF files is the \"document ID\" of the original PSD file.\n         ",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION",
    "type" : "String",
    "comment" : "\n         * Indexed value of\n         * {@link MediaMetadataRetriever#METADATA_KEY_VIDEO_ROTATION},\n         * {@link MediaMetadataRetriever#METADATA_KEY_IMAGE_ROTATION}, or\n         * {@link ExifInterface#TAG_ORIENTATION} extracted from this media item.\n         * <p>\n         * For consistency the indexed value is expressed in degrees, such as 0,\n         * 90, 180, or 270.\n         * <p>\n         * Type: INTEGER\n         ",
    "links" : [ "android.media.ExifInterface#TAG_ORIENTATION", "android.media.MediaMetadataRetriever#METADATA_KEY_VIDEO_ROTATION", "android.media.MediaMetadataRetriever#METADATA_KEY_IMAGE_ROTATION" ]
  }, {
    "name" : "IS_FAVORITE",
    "type" : "String",
    "comment" : "\n         * Flag indicating if the media item has been marked as being a\n         * \"favorite\" by the user.\n         *\n         * @see MediaColumns#IS_FAVORITE\n         * @see MediaStore#QUERY_ARG_MATCH_FAVORITE\n         * @see MediaStore#createFavoriteRequest\n         ",
    "links" : [ ]
  }, {
    "name" : "IS_DOWNLOAD",
    "type" : "String",
    "comment" : "\n         * Flag indicating if the media item has been marked as being part of\n         * the {@link Downloads} collection.\n         ",
    "links" : [ "android.provider.Downloads" ]
  }, {
    "name" : "GENERATION_ADDED",
    "type" : "String",
    "comment" : "\n         * Generation number at which metadata for this media item was first\n         * inserted. This is useful for apps that are attempting to quickly\n         * identify exactly which media items have been added since a previous\n         * point in time. Generation numbers are monotonically increasing over\n         * time, and can be safely arithmetically compared.\n         * <p>\n         * Detecting media additions using generation numbers is more robust\n         * than using {@link #DATE_ADDED}, since those values may change in\n         * unexpected ways when apps use {@link File#setLastModified(long)} or\n         * when the system clock is set incorrectly.\n         * <p>\n         * Note that before comparing these detailed generation values, you\n         * should first confirm that the overall version hasn't changed by\n         * checking {@link MediaStore#getVersion(Context, String)}, since that\n         * indicates when a more radical change has occurred. If the overall\n         * version changes, you should assume that generation numbers have been\n         * reset and perform a full synchronization pass.\n         *\n         * @see MediaStore#getGeneration(Context, String)\n         ",
    "links" : [ "android.provider.MediaStore#getVersion(Context", "#DATE_ADDED", "java.io.File#setLastModified(long)" ]
  }, {
    "name" : "GENERATION_MODIFIED",
    "type" : "String",
    "comment" : "\n         * Generation number at which metadata for this media item was last\n         * changed. This is useful for apps that are attempting to quickly\n         * identify exactly which media items have changed since a previous\n         * point in time. Generation numbers are monotonically increasing over\n         * time, and can be safely arithmetically compared.\n         * <p>\n         * Detecting media changes using generation numbers is more robust than\n         * using {@link #DATE_MODIFIED}, since those values may change in\n         * unexpected ways when apps use {@link File#setLastModified(long)} or\n         * when the system clock is set incorrectly.\n         * <p>\n         * Note that before comparing these detailed generation values, you\n         * should first confirm that the overall version hasn't changed by\n         * checking {@link MediaStore#getVersion(Context, String)}, since that\n         * indicates when a more radical change has occurred. If the overall\n         * version changes, you should assume that generation numbers have been\n         * reset and perform a full synchronization pass.\n         *\n         * @see MediaStore#getGeneration(Context, String)\n         ",
    "links" : [ "android.provider.MediaStore#getVersion(Context", "java.io.File#setLastModified(long)", "#DATE_MODIFIED" ]
  }, {
    "name" : "XMP",
    "type" : "String",
    "comment" : "\n         * Indexed XMP metadata extracted from this media item.\n         * <p>\n         * The structure of this metadata is defined by the <a href=\n         * \"https://en.wikipedia.org/wiki/Extensible_Metadata_Platform\"><em>XMP\n         * Media Management</em> standard</a>, published as ISO 16684-1:2012.\n         * <p>\n         * This metadata is typically extracted from a\n         * {@link ExifInterface#TAG_XMP} contained inside an image file or from\n         * a {@code XMP_} box contained inside an ISO/IEC base media file format\n         * (MPEG-4 Part 12).\n         * <p>\n         * Note that any location details are redacted from this metadata for\n         * privacy reasons.\n         ",
    "links" : [ "android.media.ExifInterface#TAG_XMP" ]
  }, {
    "name" : "CD_TRACK_NUMBER",
    "type" : "String",
    "comment" : "\n         * Indexed value of\n         * {@link MediaMetadataRetriever#METADATA_KEY_CD_TRACK_NUMBER} extracted\n         * from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_CD_TRACK_NUMBER" ]
  }, {
    "name" : "ALBUM",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_ALBUM}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_ALBUM" ]
  }, {
    "name" : "ARTIST",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_ARTIST}\n         * or {@link ExifInterface#TAG_ARTIST} extracted from this media item.\n         ",
    "links" : [ "android.media.ExifInterface#TAG_ARTIST", "android.media.MediaMetadataRetriever#METADATA_KEY_ARTIST" ]
  }, {
    "name" : "AUTHOR",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_AUTHOR}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_AUTHOR" ]
  }, {
    "name" : "COMPOSER",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_COMPOSER}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_COMPOSER" ]
  }, {
    "name" : "GENRE",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_GENRE}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_GENRE" ]
  }, {
    "name" : "TITLE",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_TITLE}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_TITLE" ]
  }, {
    "name" : "YEAR",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_YEAR}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_YEAR" ]
  }, {
    "name" : "DURATION",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_DURATION}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_DURATION" ]
  }, {
    "name" : "NUM_TRACKS",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_NUM_TRACKS}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_NUM_TRACKS" ]
  }, {
    "name" : "WRITER",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_WRITER}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_WRITER" ]
  }, {
    "name" : "ALBUM_ARTIST",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_ALBUMARTIST}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_ALBUMARTIST" ]
  }, {
    "name" : "DISC_NUMBER",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_DISC_NUMBER}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_DISC_NUMBER" ]
  }, {
    "name" : "COMPILATION",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_COMPILATION}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_COMPILATION" ]
  }, {
    "name" : "BITRATE",
    "type" : "String",
    "comment" : "\n         * Indexed value of {@link MediaMetadataRetriever#METADATA_KEY_BITRATE}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_BITRATE" ]
  }, {
    "name" : "CAPTURE_FRAMERATE",
    "type" : "String",
    "comment" : "\n         * Indexed value of\n         * {@link MediaMetadataRetriever#METADATA_KEY_CAPTURE_FRAMERATE}\n         * extracted from this media item.\n         ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_CAPTURE_FRAMERATE" ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "DATA", "SIZE", "DISPLAY_NAME", "DATE_ADDED", "DATE_MODIFIED", "DATE_TAKEN", "MIME_TYPE", "IS_DRM", "IS_PENDING", "IS_TRASHED", "DATE_EXPIRES", "WIDTH", "HEIGHT", "RESOLUTION", "OWNER_PACKAGE_NAME", "VOLUME_NAME", "RELATIVE_PATH", "BUCKET_ID", "BUCKET_DISPLAY_NAME", "GROUP_ID", "DOCUMENT_ID", "INSTANCE_ID", "ORIGINAL_DOCUMENT_ID", "ORIENTATION", "IS_FAVORITE", "IS_DOWNLOAD", "GENERATION_ADDED", "GENERATION_MODIFIED", "XMP", "CD_TRACK_NUMBER", "ALBUM", "ARTIST", "AUTHOR", "COMPOSER", "GENRE", "TITLE", "YEAR", "DURATION", "NUM_TRACKS", "WRITER", "ALBUM_ARTIST", "DISC_NUMBER", "COMPILATION", "BITRATE", "CAPTURE_FRAMERATE" ]
}